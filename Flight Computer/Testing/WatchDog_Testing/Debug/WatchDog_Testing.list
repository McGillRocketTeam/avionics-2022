
WatchDog_Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006534  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  080066e4  080066e4  000166e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006810  08006810  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006810  08006810  00016810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006818  08006818  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006818  08006818  00016818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800681c  0800681c  0001681c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006820  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000008e4  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  2000095c  2000095c  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002363d  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004160  00000000  00000000  000436e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c10  00000000  00000000  00047848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001aa0  00000000  00000000  00049458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002823a  00000000  00000000  0004aef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020e84  00000000  00000000  00073132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fb422  00000000  00000000  00093fb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0018f3d8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007c4c  00000000  00000000  0018f42c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080066cc 	.word	0x080066cc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	080066cc 	.word	0x080066cc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800059c:	f3bf 8f4f 	dsb	sy
}
 80005a0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005a2:	4b06      	ldr	r3, [pc, #24]	; (80005bc <__NVIC_SystemReset+0x24>)
 80005a4:	68db      	ldr	r3, [r3, #12]
 80005a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005aa:	4904      	ldr	r1, [pc, #16]	; (80005bc <__NVIC_SystemReset+0x24>)
 80005ac:	4b04      	ldr	r3, [pc, #16]	; (80005c0 <__NVIC_SystemReset+0x28>)
 80005ae:	4313      	orrs	r3, r2
 80005b0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005b2:	f3bf 8f4f 	dsb	sy
}
 80005b6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005b8:	bf00      	nop
 80005ba:	e7fd      	b.n	80005b8 <__NVIC_SystemReset+0x20>
 80005bc:	e000ed00 	.word	0xe000ed00
 80005c0:	05fa0004 	.word	0x05fa0004

080005c4 <HAL_GPIO_EXTI_Callback>:


/*
 * Helper functions
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == IN_Button_Pin){
 80005ce:	88fb      	ldrh	r3, [r7, #6]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d101      	bne.n	80005d8 <HAL_GPIO_EXTI_Callback+0x14>
		//Manual reset

		MRT_ResetFromStart();
 80005d4:	f000 f804 	bl	80005e0 <MRT_ResetFromStart>
	}

}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <MRT_ResetFromStart>:


void MRT_ResetFromStart(void){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	//Clear all saved data of stages


	//Clear wakeup and reset flag

	HAL_FLASH_Unlock();
 80005e4:	f001 ffae 	bl	8002544 <HAL_FLASH_Unlock>

	reset_flag = 0;
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <MRT_ResetFromStart+0x54>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	701a      	strb	r2, [r3, #0]
	if((EE_WriteVariable(RESET_FLAG_ADDRESS, reset_flag)) != HAL_OK)
 80005ee:	4b12      	ldr	r3, [pc, #72]	; (8000638 <MRT_ResetFromStart+0x58>)
 80005f0:	881b      	ldrh	r3, [r3, #0]
 80005f2:	4a10      	ldr	r2, [pc, #64]	; (8000634 <MRT_ResetFromStart+0x54>)
 80005f4:	7812      	ldrb	r2, [r2, #0]
 80005f6:	b292      	uxth	r2, r2
 80005f8:	4611      	mov	r1, r2
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 f868 	bl	80006d0 <EE_WriteVariable>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MRT_ResetFromStart+0x2a>
	{
	  Error_Handler();
 8000606:	f000 ff51 	bl	80014ac <Error_Handler>
	}

	wakeup_flag = 0;
 800060a:	4b0c      	ldr	r3, [pc, #48]	; (800063c <MRT_ResetFromStart+0x5c>)
 800060c:	2200      	movs	r2, #0
 800060e:	701a      	strb	r2, [r3, #0]
	if((EE_WriteVariable(WAKEUP_FLAG_ADDRESS, wakeup_flag)) != HAL_OK)
 8000610:	4b09      	ldr	r3, [pc, #36]	; (8000638 <MRT_ResetFromStart+0x58>)
 8000612:	885b      	ldrh	r3, [r3, #2]
 8000614:	4a09      	ldr	r2, [pc, #36]	; (800063c <MRT_ResetFromStart+0x5c>)
 8000616:	7812      	ldrb	r2, [r2, #0]
 8000618:	b292      	uxth	r2, r2
 800061a:	4611      	mov	r1, r2
 800061c:	4618      	mov	r0, r3
 800061e:	f000 f857 	bl	80006d0 <EE_WriteVariable>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MRT_ResetFromStart+0x4c>
	{
	  Error_Handler();
 8000628:	f000 ff40 	bl	80014ac <Error_Handler>
	}
	HAL_FLASH_Lock();
 800062c:	f001 ffac 	bl	8002588 <HAL_FLASH_Lock>


	//Reset function
	NVIC_SystemReset();
 8000630:	f7ff ffb2 	bl	8000598 <__NVIC_SystemReset>
 8000634:	20000094 	.word	0x20000094
 8000638:	20000000 	.word	0x20000000
 800063c:	20000095 	.word	0x20000095

08000640 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	6039      	str	r1, [r7, #0]
 800064a:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 800064c:	2300      	movs	r3, #0
 800064e:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = VirtAddress, ReadStatus = 1;
 8000650:	88fb      	ldrh	r3, [r7, #6]
 8000652:	81bb      	strh	r3, [r7, #12]
 8000654:	2301      	movs	r3, #1
 8000656:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8000658:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <EE_ReadVariable+0x88>)
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <EE_ReadVariable+0x88>)
 800065e:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8000660:	2000      	movs	r0, #0
 8000662:	f000 f857 	bl	8000714 <EE_FindValidPage>
 8000666:	4603      	mov	r3, r0
 8000668:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 800066a:	89fb      	ldrh	r3, [r7, #14]
 800066c:	2bab      	cmp	r3, #171	; 0xab
 800066e:	d101      	bne.n	8000674 <EE_ReadVariable+0x34>
  {
    return  NO_VALID_PAGE;
 8000670:	23ab      	movs	r3, #171	; 0xab
 8000672:	e025      	b.n	80006c0 <EE_ReadVariable+0x80>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8000674:	89fb      	ldrh	r3, [r7, #14]
 8000676:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800067a:	3302      	adds	r3, #2
 800067c:	039b      	lsls	r3, r3, #14
 800067e:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8000680:	89fb      	ldrh	r3, [r7, #14]
 8000682:	3301      	adds	r3, #1
 8000684:	039a      	lsls	r2, r3, #14
 8000686:	4b11      	ldr	r3, [pc, #68]	; (80006cc <EE_ReadVariable+0x8c>)
 8000688:	4413      	add	r3, r2
 800068a:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 800068c:	e012      	b.n	80006b4 <EE_ReadVariable+0x74>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 800068e:	693b      	ldr	r3, [r7, #16]
 8000690:	881b      	ldrh	r3, [r3, #0]
 8000692:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 8000694:	89ba      	ldrh	r2, [r7, #12]
 8000696:	88fb      	ldrh	r3, [r7, #6]
 8000698:	429a      	cmp	r2, r3
 800069a:	d108      	bne.n	80006ae <EE_ReadVariable+0x6e>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 800069c:	693b      	ldr	r3, [r7, #16]
 800069e:	3b02      	subs	r3, #2
 80006a0:	881b      	ldrh	r3, [r3, #0]
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	82fb      	strh	r3, [r7, #22]

      break;
 80006ac:	e007      	b.n	80006be <EE_ReadVariable+0x7e>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 80006ae:	693b      	ldr	r3, [r7, #16]
 80006b0:	3b04      	subs	r3, #4
 80006b2:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	3302      	adds	r3, #2
 80006b8:	693a      	ldr	r2, [r7, #16]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d8e7      	bhi.n	800068e <EE_ReadVariable+0x4e>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 80006be:	8afb      	ldrh	r3, [r7, #22]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3718      	adds	r7, #24
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	08008000 	.word	0x08008000
 80006cc:	08007ffe 	.word	0x08007ffe

080006d0 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	460a      	mov	r2, r1
 80006da:	80fb      	strh	r3, [r7, #6]
 80006dc:	4613      	mov	r3, r2
 80006de:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80006e4:	88ba      	ldrh	r2, [r7, #4]
 80006e6:	88fb      	ldrh	r3, [r7, #6]
 80006e8:	4611      	mov	r1, r2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 f858 	bl	80007a0 <EE_VerifyPageFullWriteVariable>
 80006f0:	4603      	mov	r3, r0
 80006f2:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 80006f4:	89fb      	ldrh	r3, [r7, #14]
 80006f6:	2b80      	cmp	r3, #128	; 0x80
 80006f8:	d107      	bne.n	800070a <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 80006fa:	88ba      	ldrh	r2, [r7, #4]
 80006fc:	88fb      	ldrh	r3, [r7, #6]
 80006fe:	4611      	mov	r1, r2
 8000700:	4618      	mov	r0, r3
 8000702:	f000 f8a7 	bl	8000854 <EE_PageTransfer>
 8000706:	4603      	mov	r3, r0
 8000708:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 800070a:	89fb      	ldrh	r3, [r7, #14]
}
 800070c:	4618      	mov	r0, r3
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 800071e:	2306      	movs	r3, #6
 8000720:	81fb      	strh	r3, [r7, #14]
 8000722:	2306      	movs	r3, #6
 8000724:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000726:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <EE_FindValidPage+0x84>)
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <EE_FindValidPage+0x88>)
 800072e:	881b      	ldrh	r3, [r3, #0]
 8000730:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d01b      	beq.n	8000770 <EE_FindValidPage+0x5c>
 8000738:	2b01      	cmp	r3, #1
 800073a:	d125      	bne.n	8000788 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 800073c:	89bb      	ldrh	r3, [r7, #12]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d108      	bne.n	8000754 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8000742:	89fb      	ldrh	r3, [r7, #14]
 8000744:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000748:	4293      	cmp	r3, r2
 800074a:	d101      	bne.n	8000750 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 800074c:	2300      	movs	r3, #0
 800074e:	e01c      	b.n	800078a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8000750:	2301      	movs	r3, #1
 8000752:	e01a      	b.n	800078a <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8000754:	89fb      	ldrh	r3, [r7, #14]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d108      	bne.n	800076c <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 800075a:	89bb      	ldrh	r3, [r7, #12]
 800075c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000760:	4293      	cmp	r3, r2
 8000762:	d101      	bne.n	8000768 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8000764:	2301      	movs	r3, #1
 8000766:	e010      	b.n	800078a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8000768:	2300      	movs	r3, #0
 800076a:	e00e      	b.n	800078a <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 800076c:	23ab      	movs	r3, #171	; 0xab
 800076e:	e00c      	b.n	800078a <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8000770:	89fb      	ldrh	r3, [r7, #14]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d101      	bne.n	800077a <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8000776:	2300      	movs	r3, #0
 8000778:	e007      	b.n	800078a <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 800077a:	89bb      	ldrh	r3, [r7, #12]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d101      	bne.n	8000784 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8000780:	2301      	movs	r3, #1
 8000782:	e002      	b.n	800078a <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8000784:	23ab      	movs	r3, #171	; 0xab
 8000786:	e000      	b.n	800078a <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8000788:	2300      	movs	r3, #0
  }
}
 800078a:	4618      	mov	r0, r3
 800078c:	3714      	adds	r7, #20
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	08008000 	.word	0x08008000
 800079c:	0800c000 	.word	0x0800c000

080007a0 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	460a      	mov	r2, r1
 80007aa:	80fb      	strh	r3, [r7, #6]
 80007ac:	4613      	mov	r3, r2
 80007ae:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80007b0:	2300      	movs	r3, #0
 80007b2:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 80007b8:	4b23      	ldr	r3, [pc, #140]	; (8000848 <EE_VerifyPageFullWriteVariable+0xa8>)
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	4b23      	ldr	r3, [pc, #140]	; (800084c <EE_VerifyPageFullWriteVariable+0xac>)
 80007be:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 80007c0:	2001      	movs	r0, #1
 80007c2:	f7ff ffa7 	bl	8000714 <EE_FindValidPage>
 80007c6:	4603      	mov	r3, r0
 80007c8:	823b      	strh	r3, [r7, #16]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 80007ca:	8a3b      	ldrh	r3, [r7, #16]
 80007cc:	2bab      	cmp	r3, #171	; 0xab
 80007ce:	d101      	bne.n	80007d4 <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 80007d0:	23ab      	movs	r3, #171	; 0xab
 80007d2:	e035      	b.n	8000840 <EE_VerifyPageFullWriteVariable+0xa0>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80007d4:	8a3b      	ldrh	r3, [r7, #16]
 80007d6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80007da:	3302      	adds	r3, #2
 80007dc:	039b      	lsls	r3, r3, #14
 80007de:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 80007e0:	8a3b      	ldrh	r3, [r7, #16]
 80007e2:	3301      	adds	r3, #1
 80007e4:	039a      	lsls	r2, r3, #14
 80007e6:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <EE_VerifyPageFullWriteVariable+0xb0>)
 80007e8:	4413      	add	r3, r2
 80007ea:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 80007ec:	e023      	b.n	8000836 <EE_VerifyPageFullWriteVariable+0x96>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007f6:	d11b      	bne.n	8000830 <EE_VerifyPageFullWriteVariable+0x90>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);
 80007f8:	88ba      	ldrh	r2, [r7, #4]
 80007fa:	f04f 0300 	mov.w	r3, #0
 80007fe:	6979      	ldr	r1, [r7, #20]
 8000800:	2001      	movs	r0, #1
 8000802:	f001 fe4b 	bl	800249c <HAL_FLASH_Program>
 8000806:	4603      	mov	r3, r0
 8000808:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 800080a:	7cfb      	ldrb	r3, [r7, #19]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d002      	beq.n	8000816 <EE_VerifyPageFullWriteVariable+0x76>
      {
        return FlashStatus;
 8000810:	7cfb      	ldrb	r3, [r7, #19]
 8000812:	b29b      	uxth	r3, r3
 8000814:	e014      	b.n	8000840 <EE_VerifyPageFullWriteVariable+0xa0>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	1c99      	adds	r1, r3, #2
 800081a:	88fa      	ldrh	r2, [r7, #6]
 800081c:	f04f 0300 	mov.w	r3, #0
 8000820:	2001      	movs	r0, #1
 8000822:	f001 fe3b 	bl	800249c <HAL_FLASH_Program>
 8000826:	4603      	mov	r3, r0
 8000828:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 800082a:	7cfb      	ldrb	r3, [r7, #19]
 800082c:	b29b      	uxth	r3, r3
 800082e:	e007      	b.n	8000840 <EE_VerifyPageFullWriteVariable+0xa0>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	3304      	adds	r3, #4
 8000834:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 8000836:	697a      	ldr	r2, [r7, #20]
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	429a      	cmp	r2, r3
 800083c:	d3d7      	bcc.n	80007ee <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 800083e:	2380      	movs	r3, #128	; 0x80
}
 8000840:	4618      	mov	r0, r3
 8000842:	3718      	adds	r7, #24
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	08008000 	.word	0x08008000
 800084c:	0800c000 	.word	0x0800c000
 8000850:	08007fff 	.word	0x08007fff

08000854 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08c      	sub	sp, #48	; 0x30
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	460a      	mov	r2, r1
 800085e:	80fb      	strh	r3, [r7, #6]
 8000860:	4613      	mov	r3, r2
 8000862:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8000864:	2300      	movs	r3, #0
 8000866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 800086a:	4b54      	ldr	r3, [pc, #336]	; (80009bc <EE_PageTransfer+0x168>)
 800086c:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t OldPageId=0;
 800086e:	2300      	movs	r3, #0
 8000870:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000876:	2300      	movs	r3, #0
 8000878:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t EepromStatus = 0, ReadStatus = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	847b      	strh	r3, [r7, #34]	; 0x22
 800087e:	2300      	movs	r3, #0
 8000880:	843b      	strh	r3, [r7, #32]
  uint32_t SectorError = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8000886:	2000      	movs	r0, #0
 8000888:	f7ff ff44 	bl	8000714 <EE_FindValidPage>
 800088c:	4603      	mov	r3, r0
 800088e:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (ValidPage == PAGE1)       /* Page1 valid */
 8000890:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000892:	2b01      	cmp	r3, #1
 8000894:	d104      	bne.n	80008a0 <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8000896:	4b49      	ldr	r3, [pc, #292]	; (80009bc <EE_PageTransfer+0x168>)
 8000898:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 800089a:	2303      	movs	r3, #3
 800089c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800089e:	e009      	b.n	80008b4 <EE_PageTransfer+0x60>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 80008a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d104      	bne.n	80008b0 <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 80008a6:	4b46      	ldr	r3, [pc, #280]	; (80009c0 <EE_PageTransfer+0x16c>)
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 80008aa:	2302      	movs	r3, #2
 80008ac:	857b      	strh	r3, [r7, #42]	; 0x2a
 80008ae:	e001      	b.n	80008b4 <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 80008b0:	23ab      	movs	r3, #171	; 0xab
 80008b2:	e07e      	b.n	80009b2 <EE_PageTransfer+0x15e>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);
 80008b4:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80008b8:	f04f 0300 	mov.w	r3, #0
 80008bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80008be:	2001      	movs	r0, #1
 80008c0:	f001 fdec 	bl	800249c <HAL_FLASH_Program>
 80008c4:	4603      	mov	r3, r0
 80008c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80008ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d003      	beq.n	80008da <EE_PageTransfer+0x86>
  {
    return FlashStatus;
 80008d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	e06b      	b.n	80009b2 <EE_PageTransfer+0x15e>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80008da:	88ba      	ldrh	r2, [r7, #4]
 80008dc:	88fb      	ldrh	r3, [r7, #6]
 80008de:	4611      	mov	r1, r2
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff ff5d 	bl	80007a0 <EE_VerifyPageFullWriteVariable>
 80008e6:	4603      	mov	r3, r0
 80008e8:	847b      	strh	r3, [r7, #34]	; 0x22
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 80008ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <EE_PageTransfer+0xa0>
  {
    return EepromStatus;
 80008f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80008f2:	e05e      	b.n	80009b2 <EE_PageTransfer+0x15e>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80008f4:	2300      	movs	r3, #0
 80008f6:	853b      	strh	r3, [r7, #40]	; 0x28
 80008f8:	e027      	b.n	800094a <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 80008fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80008fc:	4a31      	ldr	r2, [pc, #196]	; (80009c4 <EE_PageTransfer+0x170>)
 80008fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000902:	88fa      	ldrh	r2, [r7, #6]
 8000904:	429a      	cmp	r2, r3
 8000906:	d01d      	beq.n	8000944 <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8000908:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800090a:	4a2e      	ldr	r2, [pc, #184]	; (80009c4 <EE_PageTransfer+0x170>)
 800090c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000910:	492d      	ldr	r1, [pc, #180]	; (80009c8 <EE_PageTransfer+0x174>)
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff fe94 	bl	8000640 <EE_ReadVariable>
 8000918:	4603      	mov	r3, r0
 800091a:	843b      	strh	r3, [r7, #32]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 800091c:	8c3b      	ldrh	r3, [r7, #32]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d010      	beq.n	8000944 <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8000922:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000924:	4a27      	ldr	r2, [pc, #156]	; (80009c4 <EE_PageTransfer+0x170>)
 8000926:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800092a:	4a27      	ldr	r2, [pc, #156]	; (80009c8 <EE_PageTransfer+0x174>)
 800092c:	8812      	ldrh	r2, [r2, #0]
 800092e:	4611      	mov	r1, r2
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ff35 	bl	80007a0 <EE_VerifyPageFullWriteVariable>
 8000936:	4603      	mov	r3, r0
 8000938:	847b      	strh	r3, [r7, #34]	; 0x22
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 800093a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <EE_PageTransfer+0xf0>
        {
          return EepromStatus;
 8000940:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000942:	e036      	b.n	80009b2 <EE_PageTransfer+0x15e>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000944:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000946:	3301      	adds	r3, #1
 8000948:	853b      	strh	r3, [r7, #40]	; 0x28
 800094a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800094c:	2b02      	cmp	r3, #2
 800094e:	d9d4      	bls.n	80008fa <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000950:	2300      	movs	r3, #0
 8000952:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 8000954:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000956:	613b      	str	r3, [r7, #16]
  pEraseInit.NbSectors = 1;
 8000958:	2301      	movs	r3, #1
 800095a:	617b      	str	r3, [r7, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800095c:	2302      	movs	r3, #2
 800095e:	61bb      	str	r3, [r7, #24]

  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000960:	f107 021c 	add.w	r2, r7, #28
 8000964:	f107 0308 	add.w	r3, r7, #8
 8000968:	4611      	mov	r1, r2
 800096a:	4618      	mov	r0, r3
 800096c:	f001 ff5c 	bl	8002828 <HAL_FLASHEx_Erase>
 8000970:	4603      	mov	r3, r0
 8000972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000976:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800097a:	2b00      	cmp	r3, #0
 800097c:	d003      	beq.n	8000986 <EE_PageTransfer+0x132>
  {
    return FlashStatus;
 800097e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000982:	b29b      	uxth	r3, r3
 8000984:	e015      	b.n	80009b2 <EE_PageTransfer+0x15e>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);
 8000986:	f04f 0200 	mov.w	r2, #0
 800098a:	f04f 0300 	mov.w	r3, #0
 800098e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000990:	2001      	movs	r0, #1
 8000992:	f001 fd83 	bl	800249c <HAL_FLASH_Program>
 8000996:	4603      	mov	r3, r0
 8000998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800099c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d003      	beq.n	80009ac <EE_PageTransfer+0x158>
  {
    return FlashStatus;
 80009a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	e002      	b.n	80009b2 <EE_PageTransfer+0x15e>
  }

  /* Return last operation flash status */
  return FlashStatus;
 80009ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009b0:	b29b      	uxth	r3, r3
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3730      	adds	r7, #48	; 0x30
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	08008000 	.word	0x08008000
 80009c0:	0800c000 	.word	0x0800c000
 80009c4:	20000000 	.word	0x20000000
 80009c8:	20000096 	.word	0x20000096

080009cc <__NVIC_SystemReset>:
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80009d0:	f3bf 8f4f 	dsb	sy
}
 80009d4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <__NVIC_SystemReset+0x24>)
 80009d8:	68db      	ldr	r3, [r3, #12]
 80009da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80009de:	4904      	ldr	r1, [pc, #16]	; (80009f0 <__NVIC_SystemReset+0x24>)
 80009e0:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <__NVIC_SystemReset+0x28>)
 80009e2:	4313      	orrs	r3, r2
 80009e4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80009e6:	f3bf 8f4f 	dsb	sy
}
 80009ea:	bf00      	nop
    __NOP();
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <__NVIC_SystemReset+0x20>
 80009f0:	e000ed00 	.word	0xe000ed00
 80009f4:	05fa0004 	.word	0x05fa0004

080009f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b09a      	sub	sp, #104	; 0x68
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009fe:	f001 f993 	bl	8001d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a02:	f000 f837 	bl	8000a74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a06:	f000 fbad 	bl	8001164 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a0a:	f000 f895 	bl	8000b38 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000a0e:	f000 f8e5 	bl	8000bdc <MX_I2C1_Init>
  MX_I2C2_Init();
 8000a12:	f000 f923 	bl	8000c5c <MX_I2C2_Init>
  MX_I2C3_Init();
 8000a16:	f000 f961 	bl	8000cdc <MX_I2C3_Init>
  MX_SPI2_Init();
 8000a1a:	f000 fa2b 	bl	8000e74 <MX_SPI2_Init>
  MX_SPI4_Init();
 8000a1e:	f000 fa5f 	bl	8000ee0 <MX_SPI4_Init>
  MX_SPI5_Init();
 8000a22:	f000 fa93 	bl	8000f4c <MX_SPI5_Init>
  MX_TIM2_Init();
 8000a26:	f000 fac7 	bl	8000fb8 <MX_TIM2_Init>
  MX_UART8_Init();
 8000a2a:	f000 fb1d 	bl	8001068 <MX_UART8_Init>
  MX_USART3_UART_Init();
 8000a2e:	f000 fb45 	bl	80010bc <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000a32:	f000 fb6d 	bl	8001110 <MX_USART6_UART_Init>
  MX_RTC_Init();
 8000a36:	f000 f991 	bl	8000d5c <MX_RTC_Init>
  MRT_resetInfo(&huart8);
  */


char vbuffer[50];
sprintf(vbuffer,"Reset: %i,  WU: %i\r\n",1, 1);
 8000a3a:	4638      	mov	r0, r7
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	2201      	movs	r2, #1
 8000a40:	490a      	ldr	r1, [pc, #40]	; (8000a6c <main+0x74>)
 8000a42:	f005 fa8f 	bl	8005f64 <siprintf>
HAL_UART_Transmit(&huart8, vbuffer, strlen(vbuffer), HAL_MAX_DELAY);
 8000a46:	463b      	mov	r3, r7
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fbd1 	bl	80001f0 <strlen>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	4639      	mov	r1, r7
 8000a54:	f04f 33ff 	mov.w	r3, #4294967295
 8000a58:	4805      	ldr	r0, [pc, #20]	; (8000a70 <main+0x78>)
 8000a5a:	f004 fce0 	bl	800541e <HAL_UART_Transmit>


  HAL_Delay(2000);
 8000a5e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a62:	f001 f9a3 	bl	8001dac <HAL_Delay>


  //Random reset
  NVIC_SystemReset();
 8000a66:	f7ff ffb1 	bl	80009cc <__NVIC_SystemReset>
 8000a6a:	bf00      	nop
 8000a6c:	0800674c 	.word	0x0800674c
 8000a70:	20000804 	.word	0x20000804

08000a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b094      	sub	sp, #80	; 0x50
 8000a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7a:	f107 0320 	add.w	r3, r7, #32
 8000a7e:	2230      	movs	r2, #48	; 0x30
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f005 f9fc 	bl	8005e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a88:	f107 030c 	add.w	r3, r7, #12
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	4b24      	ldr	r3, [pc, #144]	; (8000b30 <SystemClock_Config+0xbc>)
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa0:	4a23      	ldr	r2, [pc, #140]	; (8000b30 <SystemClock_Config+0xbc>)
 8000aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa8:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <SystemClock_Config+0xbc>)
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	4b1e      	ldr	r3, [pc, #120]	; (8000b34 <SystemClock_Config+0xc0>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ac0:	4a1c      	ldr	r2, [pc, #112]	; (8000b34 <SystemClock_Config+0xc0>)
 8000ac2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac6:	6013      	str	r3, [r2, #0]
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <SystemClock_Config+0xc0>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000ad4:	2309      	movs	r3, #9
 8000ad6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ad8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae6:	f107 0320 	add.w	r3, r7, #32
 8000aea:	4618      	mov	r0, r3
 8000aec:	f002 fb7a 	bl	80031e4 <HAL_RCC_OscConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000af6:	f000 fcd9 	bl	80014ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afa:	230f      	movs	r3, #15
 8000afc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000afe:	2301      	movs	r3, #1
 8000b00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b10:	f107 030c 	add.w	r3, r7, #12
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f002 fddc 	bl	80036d4 <HAL_RCC_ClockConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000b22:	f000 fcc3 	bl	80014ac <Error_Handler>
  }
}
 8000b26:	bf00      	nop
 8000b28:	3750      	adds	r7, #80	; 0x50
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40007000 	.word	0x40007000

08000b38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b3e:	463b      	mov	r3, r7
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b4a:	4b21      	ldr	r3, [pc, #132]	; (8000bd0 <MX_ADC1_Init+0x98>)
 8000b4c:	4a21      	ldr	r2, [pc, #132]	; (8000bd4 <MX_ADC1_Init+0x9c>)
 8000b4e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b50:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <MX_ADC1_Init+0x98>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b56:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <MX_ADC1_Init+0x98>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b5c:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <MX_ADC1_Init+0x98>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b62:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <MX_ADC1_Init+0x98>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b68:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <MX_ADC1_Init+0x98>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b70:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <MX_ADC1_Init+0x98>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b76:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <MX_ADC1_Init+0x98>)
 8000b78:	4a17      	ldr	r2, [pc, #92]	; (8000bd8 <MX_ADC1_Init+0xa0>)
 8000b7a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <MX_ADC1_Init+0x98>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b82:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <MX_ADC1_Init+0x98>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_ADC1_Init+0x98>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <MX_ADC1_Init+0x98>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b96:	480e      	ldr	r0, [pc, #56]	; (8000bd0 <MX_ADC1_Init+0x98>)
 8000b98:	f001 f92c 	bl	8001df4 <HAL_ADC_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ba2:	f000 fc83 	bl	80014ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000ba6:	2306      	movs	r3, #6
 8000ba8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000baa:	2301      	movs	r3, #1
 8000bac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4806      	ldr	r0, [pc, #24]	; (8000bd0 <MX_ADC1_Init+0x98>)
 8000bb8:	f001 f960 	bl	8001e7c <HAL_ADC_ConfigChannel>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000bc2:	f000 fc73 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bc6:	bf00      	nop
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000730 	.word	0x20000730
 8000bd4:	40012000 	.word	0x40012000
 8000bd8:	0f000001 	.word	0x0f000001

08000bdc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000be0:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <MX_I2C1_Init+0x74>)
 8000be2:	4a1c      	ldr	r2, [pc, #112]	; (8000c54 <MX_I2C1_Init+0x78>)
 8000be4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000be6:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <MX_I2C1_Init+0x74>)
 8000be8:	4a1b      	ldr	r2, [pc, #108]	; (8000c58 <MX_I2C1_Init+0x7c>)
 8000bea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bec:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <MX_I2C1_Init+0x74>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bf2:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <MX_I2C1_Init+0x74>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bf8:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <MX_I2C1_Init+0x74>)
 8000bfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bfe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c00:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <MX_I2C1_Init+0x74>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c06:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <MX_I2C1_Init+0x74>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c0c:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <MX_I2C1_Init+0x74>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <MX_I2C1_Init+0x74>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c18:	480d      	ldr	r0, [pc, #52]	; (8000c50 <MX_I2C1_Init+0x74>)
 8000c1a:	f002 f923 	bl	8002e64 <HAL_I2C_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c24:	f000 fc42 	bl	80014ac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4809      	ldr	r0, [pc, #36]	; (8000c50 <MX_I2C1_Init+0x74>)
 8000c2c:	f002 fa5e 	bl	80030ec <HAL_I2CEx_ConfigAnalogFilter>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000c36:	f000 fc39 	bl	80014ac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4804      	ldr	r0, [pc, #16]	; (8000c50 <MX_I2C1_Init+0x74>)
 8000c3e:	f002 fa91 	bl	8003164 <HAL_I2CEx_ConfigDigitalFilter>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000c48:	f000 fc30 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000678 	.word	0x20000678
 8000c54:	40005400 	.word	0x40005400
 8000c58:	000186a0 	.word	0x000186a0

08000c5c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c60:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c62:	4a1c      	ldr	r2, [pc, #112]	; (8000cd4 <MX_I2C2_Init+0x78>)
 8000c64:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000c66:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c68:	4a1b      	ldr	r2, [pc, #108]	; (8000cd8 <MX_I2C2_Init+0x7c>)
 8000c6a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c6c:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000c72:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c78:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c7e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000c86:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c8c:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c92:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c98:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000c9a:	f002 f8e3 	bl	8002e64 <HAL_I2C_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ca4:	f000 fc02 	bl	80014ac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4809      	ldr	r0, [pc, #36]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000cac:	f002 fa1e 	bl	80030ec <HAL_I2CEx_ConfigAnalogFilter>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000cb6:	f000 fbf9 	bl	80014ac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4804      	ldr	r0, [pc, #16]	; (8000cd0 <MX_I2C2_Init+0x74>)
 8000cbe:	f002 fa51 	bl	8003164 <HAL_I2CEx_ConfigDigitalFilter>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000cc8:	f000 fbf0 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	200006d8 	.word	0x200006d8
 8000cd4:	40005800 	.word	0x40005800
 8000cd8:	000186a0 	.word	0x000186a0

08000cdc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ce0:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <MX_I2C3_Init+0x74>)
 8000ce2:	4a1c      	ldr	r2, [pc, #112]	; (8000d54 <MX_I2C3_Init+0x78>)
 8000ce4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <MX_I2C3_Init+0x74>)
 8000ce8:	4a1b      	ldr	r2, [pc, #108]	; (8000d58 <MX_I2C3_Init+0x7c>)
 8000cea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cec:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <MX_I2C3_Init+0x74>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000cf2:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <MX_I2C3_Init+0x74>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cf8:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <MX_I2C3_Init+0x74>)
 8000cfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cfe:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d00:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <MX_I2C3_Init+0x74>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000d06:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <MX_I2C3_Init+0x74>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d0c:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <MX_I2C3_Init+0x74>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d12:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <MX_I2C3_Init+0x74>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000d18:	480d      	ldr	r0, [pc, #52]	; (8000d50 <MX_I2C3_Init+0x74>)
 8000d1a:	f002 f8a3 	bl	8002e64 <HAL_I2C_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000d24:	f000 fbc2 	bl	80014ac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4809      	ldr	r0, [pc, #36]	; (8000d50 <MX_I2C3_Init+0x74>)
 8000d2c:	f002 f9de 	bl	80030ec <HAL_I2CEx_ConfigAnalogFilter>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000d36:	f000 fbb9 	bl	80014ac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4804      	ldr	r0, [pc, #16]	; (8000d50 <MX_I2C3_Init+0x74>)
 8000d3e:	f002 fa11 	bl	8003164 <HAL_I2CEx_ConfigDigitalFilter>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000d48:	f000 fbb0 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000530 	.word	0x20000530
 8000d54:	40005c00 	.word	0x40005c00
 8000d58:	000186a0 	.word	0x000186a0

08000d5c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b090      	sub	sp, #64	; 0x40
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000d62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
 8000d70:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000d72:	2300      	movs	r3, #0
 8000d74:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000d76:	463b      	mov	r3, r7
 8000d78:	2228      	movs	r2, #40	; 0x28
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f005 f87f 	bl	8005e80 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d82:	4b3a      	ldr	r3, [pc, #232]	; (8000e6c <MX_RTC_Init+0x110>)
 8000d84:	4a3a      	ldr	r2, [pc, #232]	; (8000e70 <MX_RTC_Init+0x114>)
 8000d86:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d88:	4b38      	ldr	r3, [pc, #224]	; (8000e6c <MX_RTC_Init+0x110>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d8e:	4b37      	ldr	r3, [pc, #220]	; (8000e6c <MX_RTC_Init+0x110>)
 8000d90:	227f      	movs	r2, #127	; 0x7f
 8000d92:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d94:	4b35      	ldr	r3, [pc, #212]	; (8000e6c <MX_RTC_Init+0x110>)
 8000d96:	22ff      	movs	r2, #255	; 0xff
 8000d98:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d9a:	4b34      	ldr	r3, [pc, #208]	; (8000e6c <MX_RTC_Init+0x110>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000da0:	4b32      	ldr	r3, [pc, #200]	; (8000e6c <MX_RTC_Init+0x110>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000da6:	4b31      	ldr	r3, [pc, #196]	; (8000e6c <MX_RTC_Init+0x110>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000dac:	482f      	ldr	r0, [pc, #188]	; (8000e6c <MX_RTC_Init+0x110>)
 8000dae:	f003 f87b 	bl	8003ea8 <HAL_RTC_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000db8:	f000 fb78 	bl	80014ac <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000dd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dda:	2201      	movs	r2, #1
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4823      	ldr	r0, [pc, #140]	; (8000e6c <MX_RTC_Init+0x110>)
 8000de0:	f003 f8f3 	bl	8003fca <HAL_RTC_SetTime>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000dea:	f000 fb5f 	bl	80014ac <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000dee:	2301      	movs	r3, #1
 8000df0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000df4:	2301      	movs	r3, #1
 8000df6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000e06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4817      	ldr	r0, [pc, #92]	; (8000e6c <MX_RTC_Init+0x110>)
 8000e10:	f003 f998 	bl	8004144 <HAL_RTC_SetDate>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000e1a:	f000 fb47 	bl	80014ac <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8000e22:	2301      	movs	r3, #1
 8000e24:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000e42:	2301      	movs	r3, #1
 8000e44:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000e48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000e4e:	463b      	mov	r3, r7
 8000e50:	2201      	movs	r2, #1
 8000e52:	4619      	mov	r1, r3
 8000e54:	4805      	ldr	r0, [pc, #20]	; (8000e6c <MX_RTC_Init+0x110>)
 8000e56:	f003 fa1d 	bl	8004294 <HAL_RTC_SetAlarm_IT>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000e60:	f000 fb24 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	3740      	adds	r7, #64	; 0x40
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	200007d4 	.word	0x200007d4
 8000e70:	40002800 	.word	0x40002800

08000e74 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e78:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <MX_SPI2_Init+0x64>)
 8000e7a:	4a18      	ldr	r2, [pc, #96]	; (8000edc <MX_SPI2_Init+0x68>)
 8000e7c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e7e:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <MX_SPI2_Init+0x64>)
 8000e80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e84:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e86:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <MX_SPI2_Init+0x64>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <MX_SPI2_Init+0x64>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e92:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <MX_SPI2_Init+0x64>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <MX_SPI2_Init+0x64>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <MX_SPI2_Init+0x64>)
 8000ea0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ea4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <MX_SPI2_Init+0x64>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eac:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <MX_SPI2_Init+0x64>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <MX_SPI2_Init+0x64>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eb8:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <MX_SPI2_Init+0x64>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <MX_SPI2_Init+0x64>)
 8000ec0:	220a      	movs	r2, #10
 8000ec2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ec4:	4804      	ldr	r0, [pc, #16]	; (8000ed8 <MX_SPI2_Init+0x64>)
 8000ec6:	f003 fbe9 	bl	800469c <HAL_SPI_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000ed0:	f000 faec 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000584 	.word	0x20000584
 8000edc:	40003800 	.word	0x40003800

08000ee0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000ee4:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <MX_SPI4_Init+0x64>)
 8000ee6:	4a18      	ldr	r2, [pc, #96]	; (8000f48 <MX_SPI4_Init+0x68>)
 8000ee8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000eea:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <MX_SPI4_Init+0x64>)
 8000eec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ef0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000ef2:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <MX_SPI4_Init+0x64>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <MX_SPI4_Init+0x64>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <MX_SPI4_Init+0x64>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <MX_SPI4_Init+0x64>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <MX_SPI4_Init+0x64>)
 8000f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f10:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f12:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <MX_SPI4_Init+0x64>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f18:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <MX_SPI4_Init+0x64>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <MX_SPI4_Init+0x64>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f24:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <MX_SPI4_Init+0x64>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <MX_SPI4_Init+0x64>)
 8000f2c:	220a      	movs	r2, #10
 8000f2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000f30:	4804      	ldr	r0, [pc, #16]	; (8000f44 <MX_SPI4_Init+0x64>)
 8000f32:	f003 fbb3 	bl	800469c <HAL_SPI_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8000f3c:	f000 fab6 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	2000077c 	.word	0x2000077c
 8000f48:	40013400 	.word	0x40013400

08000f4c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <MX_SPI5_Init+0x64>)
 8000f52:	4a18      	ldr	r2, [pc, #96]	; (8000fb4 <MX_SPI5_Init+0x68>)
 8000f54:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000f56:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <MX_SPI5_Init+0x64>)
 8000f58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f5c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000f5e:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_SPI5_Init+0x64>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <MX_SPI5_Init+0x64>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_SPI5_Init+0x64>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <MX_SPI5_Init+0x64>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <MX_SPI5_Init+0x64>)
 8000f78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f7c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <MX_SPI5_Init+0x64>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f84:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <MX_SPI5_Init+0x64>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <MX_SPI5_Init+0x64>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f90:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <MX_SPI5_Init+0x64>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <MX_SPI5_Init+0x64>)
 8000f98:	220a      	movs	r2, #10
 8000f9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000f9c:	4804      	ldr	r0, [pc, #16]	; (8000fb0 <MX_SPI5_Init+0x64>)
 8000f9e:	f003 fb7d 	bl	800469c <HAL_SPI_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000fa8:	f000 fa80 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	200005dc 	.word	0x200005dc
 8000fb4:	40015000 	.word	0x40015000

08000fb8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fbe:	f107 0320 	add.w	r3, r7, #32
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
 8000fd4:	611a      	str	r2, [r3, #16]
 8000fd6:	615a      	str	r2, [r3, #20]
 8000fd8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fda:	4b22      	ldr	r3, [pc, #136]	; (8001064 <MX_TIM2_Init+0xac>)
 8000fdc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fe0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000fe2:	4b20      	ldr	r3, [pc, #128]	; (8001064 <MX_TIM2_Init+0xac>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe8:	4b1e      	ldr	r3, [pc, #120]	; (8001064 <MX_TIM2_Init+0xac>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000fee:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <MX_TIM2_Init+0xac>)
 8000ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff6:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <MX_TIM2_Init+0xac>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ffc:	4b19      	ldr	r3, [pc, #100]	; (8001064 <MX_TIM2_Init+0xac>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001002:	4818      	ldr	r0, [pc, #96]	; (8001064 <MX_TIM2_Init+0xac>)
 8001004:	f003 fc9c 	bl	8004940 <HAL_TIM_PWM_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800100e:	f000 fa4d 	bl	80014ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001012:	2300      	movs	r3, #0
 8001014:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001016:	2300      	movs	r3, #0
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800101a:	f107 0320 	add.w	r3, r7, #32
 800101e:	4619      	mov	r1, r3
 8001020:	4810      	ldr	r0, [pc, #64]	; (8001064 <MX_TIM2_Init+0xac>)
 8001022:	f004 f91f 	bl	8005264 <HAL_TIMEx_MasterConfigSynchronization>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800102c:	f000 fa3e 	bl	80014ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001030:	2360      	movs	r3, #96	; 0x60
 8001032:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	2208      	movs	r2, #8
 8001044:	4619      	mov	r1, r3
 8001046:	4807      	ldr	r0, [pc, #28]	; (8001064 <MX_TIM2_Init+0xac>)
 8001048:	f003 fdd2 	bl	8004bf0 <HAL_TIM_PWM_ConfigChannel>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001052:	f000 fa2b 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001056:	4803      	ldr	r0, [pc, #12]	; (8001064 <MX_TIM2_Init+0xac>)
 8001058:	f000 fc7c 	bl	8001954 <HAL_TIM_MspPostInit>

}
 800105c:	bf00      	nop
 800105e:	3728      	adds	r7, #40	; 0x28
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	2000088c 	.word	0x2000088c

08001068 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800106c:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <MX_UART8_Init+0x4c>)
 800106e:	4a12      	ldr	r2, [pc, #72]	; (80010b8 <MX_UART8_Init+0x50>)
 8001070:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <MX_UART8_Init+0x4c>)
 8001074:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001078:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <MX_UART8_Init+0x4c>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <MX_UART8_Init+0x4c>)
 8001082:	2200      	movs	r2, #0
 8001084:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001086:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <MX_UART8_Init+0x4c>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800108c:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <MX_UART8_Init+0x4c>)
 800108e:	220c      	movs	r2, #12
 8001090:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001092:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <MX_UART8_Init+0x4c>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <MX_UART8_Init+0x4c>)
 800109a:	2200      	movs	r2, #0
 800109c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800109e:	4805      	ldr	r0, [pc, #20]	; (80010b4 <MX_UART8_Init+0x4c>)
 80010a0:	f004 f970 	bl	8005384 <HAL_UART_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_UART8_Init+0x46>
  {
    Error_Handler();
 80010aa:	f000 f9ff 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000804 	.word	0x20000804
 80010b8:	40007c00 	.word	0x40007c00

080010bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <MX_USART3_UART_Init+0x4c>)
 80010c2:	4a12      	ldr	r2, [pc, #72]	; (800110c <MX_USART3_UART_Init+0x50>)
 80010c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <MX_USART3_UART_Init+0x4c>)
 80010c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <MX_USART3_UART_Init+0x4c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <MX_USART3_UART_Init+0x4c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <MX_USART3_UART_Init+0x4c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010e0:	4b09      	ldr	r3, [pc, #36]	; (8001108 <MX_USART3_UART_Init+0x4c>)
 80010e2:	220c      	movs	r2, #12
 80010e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e6:	4b08      	ldr	r3, [pc, #32]	; (8001108 <MX_USART3_UART_Init+0x4c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <MX_USART3_UART_Init+0x4c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010f2:	4805      	ldr	r0, [pc, #20]	; (8001108 <MX_USART3_UART_Init+0x4c>)
 80010f4:	f004 f946 	bl	8005384 <HAL_UART_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80010fe:	f000 f9d5 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000634 	.word	0x20000634
 800110c:	40004800 	.word	0x40004800

08001110 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001114:	4b11      	ldr	r3, [pc, #68]	; (800115c <MX_USART6_UART_Init+0x4c>)
 8001116:	4a12      	ldr	r2, [pc, #72]	; (8001160 <MX_USART6_UART_Init+0x50>)
 8001118:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800111a:	4b10      	ldr	r3, [pc, #64]	; (800115c <MX_USART6_UART_Init+0x4c>)
 800111c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001120:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001122:	4b0e      	ldr	r3, [pc, #56]	; (800115c <MX_USART6_UART_Init+0x4c>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <MX_USART6_UART_Init+0x4c>)
 800112a:	2200      	movs	r2, #0
 800112c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800112e:	4b0b      	ldr	r3, [pc, #44]	; (800115c <MX_USART6_UART_Init+0x4c>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001134:	4b09      	ldr	r3, [pc, #36]	; (800115c <MX_USART6_UART_Init+0x4c>)
 8001136:	220c      	movs	r2, #12
 8001138:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800113a:	4b08      	ldr	r3, [pc, #32]	; (800115c <MX_USART6_UART_Init+0x4c>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <MX_USART6_UART_Init+0x4c>)
 8001142:	2200      	movs	r2, #0
 8001144:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001146:	4805      	ldr	r0, [pc, #20]	; (800115c <MX_USART6_UART_Init+0x4c>)
 8001148:	f004 f91c 	bl	8005384 <HAL_UART_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001152:	f000 f9ab 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000848 	.word	0x20000848
 8001160:	40011400 	.word	0x40011400

08001164 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08e      	sub	sp, #56	; 0x38
 8001168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	623b      	str	r3, [r7, #32]
 800117e:	4bb5      	ldr	r3, [pc, #724]	; (8001454 <MX_GPIO_Init+0x2f0>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4ab4      	ldr	r2, [pc, #720]	; (8001454 <MX_GPIO_Init+0x2f0>)
 8001184:	f043 0310 	orr.w	r3, r3, #16
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4bb2      	ldr	r3, [pc, #712]	; (8001454 <MX_GPIO_Init+0x2f0>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0310 	and.w	r3, r3, #16
 8001192:	623b      	str	r3, [r7, #32]
 8001194:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
 800119a:	4bae      	ldr	r3, [pc, #696]	; (8001454 <MX_GPIO_Init+0x2f0>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4aad      	ldr	r2, [pc, #692]	; (8001454 <MX_GPIO_Init+0x2f0>)
 80011a0:	f043 0304 	orr.w	r3, r3, #4
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4bab      	ldr	r3, [pc, #684]	; (8001454 <MX_GPIO_Init+0x2f0>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	61fb      	str	r3, [r7, #28]
 80011b0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	61bb      	str	r3, [r7, #24]
 80011b6:	4ba7      	ldr	r3, [pc, #668]	; (8001454 <MX_GPIO_Init+0x2f0>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4aa6      	ldr	r2, [pc, #664]	; (8001454 <MX_GPIO_Init+0x2f0>)
 80011bc:	f043 0320 	orr.w	r3, r3, #32
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4ba4      	ldr	r3, [pc, #656]	; (8001454 <MX_GPIO_Init+0x2f0>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0320 	and.w	r3, r3, #32
 80011ca:	61bb      	str	r3, [r7, #24]
 80011cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	4ba0      	ldr	r3, [pc, #640]	; (8001454 <MX_GPIO_Init+0x2f0>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a9f      	ldr	r2, [pc, #636]	; (8001454 <MX_GPIO_Init+0x2f0>)
 80011d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b9d      	ldr	r3, [pc, #628]	; (8001454 <MX_GPIO_Init+0x2f0>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011e6:	617b      	str	r3, [r7, #20]
 80011e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	4b99      	ldr	r3, [pc, #612]	; (8001454 <MX_GPIO_Init+0x2f0>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a98      	ldr	r2, [pc, #608]	; (8001454 <MX_GPIO_Init+0x2f0>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b96      	ldr	r3, [pc, #600]	; (8001454 <MX_GPIO_Init+0x2f0>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	4b92      	ldr	r3, [pc, #584]	; (8001454 <MX_GPIO_Init+0x2f0>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a91      	ldr	r2, [pc, #580]	; (8001454 <MX_GPIO_Init+0x2f0>)
 8001210:	f043 0302 	orr.w	r3, r3, #2
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b8f      	ldr	r3, [pc, #572]	; (8001454 <MX_GPIO_Init+0x2f0>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	4b8b      	ldr	r3, [pc, #556]	; (8001454 <MX_GPIO_Init+0x2f0>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a8a      	ldr	r2, [pc, #552]	; (8001454 <MX_GPIO_Init+0x2f0>)
 800122c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b88      	ldr	r3, [pc, #544]	; (8001454 <MX_GPIO_Init+0x2f0>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	4b84      	ldr	r3, [pc, #528]	; (8001454 <MX_GPIO_Init+0x2f0>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a83      	ldr	r2, [pc, #524]	; (8001454 <MX_GPIO_Init+0x2f0>)
 8001248:	f043 0308 	orr.w	r3, r3, #8
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b81      	ldr	r3, [pc, #516]	; (8001454 <MX_GPIO_Init+0x2f0>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0308 	and.w	r3, r3, #8
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	f248 4184 	movw	r1, #33924	; 0x8484
 8001260:	487d      	ldr	r0, [pc, #500]	; (8001458 <MX_GPIO_Init+0x2f4>)
 8001262:	f001 fdcd 	bl	8002e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI5_SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 8001266:	2200      	movs	r2, #0
 8001268:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 800126c:	487b      	ldr	r0, [pc, #492]	; (800145c <MX_GPIO_Init+0x2f8>)
 800126e:	f001 fdc7 	bl	8002e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 8001272:	2200      	movs	r2, #0
 8001274:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8001278:	4879      	ldr	r0, [pc, #484]	; (8001460 <MX_GPIO_Init+0x2fc>)
 800127a:	f001 fdc1 	bl	8002e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	2108      	movs	r1, #8
 8001282:	4878      	ldr	r0, [pc, #480]	; (8001464 <MX_GPIO_Init+0x300>)
 8001284:	f001 fdbc 	bl	8002e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 8001288:	2200      	movs	r2, #0
 800128a:	f645 213e 	movw	r1, #23102	; 0x5a3e
 800128e:	4876      	ldr	r0, [pc, #472]	; (8001468 <MX_GPIO_Init+0x304>)
 8001290:	f001 fdb6 	bl	8002e00 <HAL_GPIO_WritePin>
                          |SX_RF_SW_Pin|OUT_VR_PWR_Pin|OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin
                          |OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin, GPIO_PIN_RESET);
 8001294:	2200      	movs	r2, #0
 8001296:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800129a:	4874      	ldr	r0, [pc, #464]	; (800146c <MX_GPIO_Init+0x308>)
 800129c:	f001 fdb0 	bl	8002e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 80012a0:	2200      	movs	r2, #0
 80012a2:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 80012a6:	4872      	ldr	r0, [pc, #456]	; (8001470 <MX_GPIO_Init+0x30c>)
 80012a8:	f001 fdaa 	bl	8002e00 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_12V_Buck_Pin OUT_Prop_ActuatedVent_Gate_Pin SPI4_CS_Thermocouple_Pin Iridium_RST_Pin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 80012ac:	f248 4384 	movw	r3, #33924	; 0x8484
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b2:	2301      	movs	r3, #1
 80012b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2300      	movs	r3, #0
 80012bc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c2:	4619      	mov	r1, r3
 80012c4:	4864      	ldr	r0, [pc, #400]	; (8001458 <MX_GPIO_Init+0x2f4>)
 80012c6:	f001 fbef 	bl	8002aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SD_CS_Pin OUT_PyroValve_Gate_2_Pin OUT_PyroValve_Gate_1_Pin */
  GPIO_InitStruct.Pin = SPI5_SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 80012ca:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d0:	2301      	movs	r3, #1
 80012d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e0:	4619      	mov	r1, r3
 80012e2:	485e      	ldr	r0, [pc, #376]	; (800145c <MX_GPIO_Init+0x2f8>)
 80012e4:	f001 fbe0 	bl	8002aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Button_Pin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 80012e8:	2301      	movs	r3, #1
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012ec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 80012f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fa:	4619      	mov	r1, r3
 80012fc:	4858      	ldr	r0, [pc, #352]	; (8001460 <MX_GPIO_Init+0x2fc>)
 80012fe:	f001 fbd3 	bl	8002aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_LED1_Pin OUT_LED2_Pin OUT_LED3_Pin SX_AMPLIFIER_Pin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 8001302:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001308:	2301      	movs	r3, #1
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001318:	4619      	mov	r1, r3
 800131a:	4851      	ldr	r0, [pc, #324]	; (8001460 <MX_GPIO_Init+0x2fc>)
 800131c:	f001 fbc4 	bl	8002aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_LEDF_Pin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 8001320:	2308      	movs	r3, #8
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001324:	2301      	movs	r3, #1
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 8001330:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001334:	4619      	mov	r1, r3
 8001336:	484b      	ldr	r0, [pc, #300]	; (8001464 <MX_GPIO_Init+0x300>)
 8001338:	f001 fbb6 	bl	8002aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_Prop_PyroTurboValve_LimitSwitch_Pin IN_SD_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 800133c:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001342:	2300      	movs	r3, #0
 8001344:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800134a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134e:	4619      	mov	r1, r3
 8001350:	4843      	ldr	r0, [pc, #268]	; (8001460 <MX_GPIO_Init+0x2fc>)
 8001352:	f001 fba9 	bl	8002aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Prop_ActuatedVent_Feedback_Pin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 8001356:	2302      	movs	r3, #2
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135a:	2300      	movs	r3, #0
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 8001362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001366:	4619      	mov	r1, r3
 8001368:	4840      	ldr	r0, [pc, #256]	; (800146c <MX_GPIO_Init+0x308>)
 800136a:	f001 fb9d 	bl	8002aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_PyroValve_Cont_2_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 800136e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001374:	2300      	movs	r3, #0
 8001376:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 800137c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001380:	4619      	mov	r1, r3
 8001382:	4836      	ldr	r0, [pc, #216]	; (800145c <MX_GPIO_Init+0x2f8>)
 8001384:	f001 fb90 	bl	8002aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_PyroValve_Cont_1_Pin IN_EJ_Main_Cont_Pin IN_EJ_Drogue_Cont_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|IN_EJ_Main_Cont_Pin|IN_EJ_Drogue_Cont_Pin;
 8001388:	f242 4301 	movw	r3, #9217	; 0x2401
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138e:	2300      	movs	r3, #0
 8001390:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001396:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139a:	4619      	mov	r1, r3
 800139c:	4832      	ldr	r0, [pc, #200]	; (8001468 <MX_GPIO_Init+0x304>)
 800139e:	f001 fb83 	bl	8002aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_PyroValve_Arming_Pin SX_RST_Pin SX_BUSY_Pin SX_DIO_Pin
                           SX_RF_SW_Pin OUT_VR_PWR_Pin OUT_EJ_Main_Gate_Pin OUT_EJ_Drogue_Gate_Pin
                           OUT_EJ_Arming_Pin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 80013a2:	f645 233e 	movw	r3, #23102	; 0x5a3e
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
                          |SX_RF_SW_Pin|OUT_VR_PWR_Pin|OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin
                          |OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a8:	2301      	movs	r3, #1
 80013aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b8:	4619      	mov	r1, r3
 80013ba:	482b      	ldr	r0, [pc, #172]	; (8001468 <MX_GPIO_Init+0x304>)
 80013bc:	f001 fb74 	bl	8002aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAYLOAD_I2C_EN_Pin IN_XTend_Continuity_Pin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 80013c0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c6:	2300      	movs	r3, #0
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d2:	4619      	mov	r1, r3
 80013d4:	4820      	ldr	r0, [pc, #128]	; (8001458 <MX_GPIO_Init+0x2f4>)
 80013d6:	f001 fb67 	bl	8002aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SX_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin;
 80013da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e0:	2301      	movs	r3, #1
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	2300      	movs	r3, #0
 80013ea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_SX_CS_GPIO_Port, &GPIO_InitStruct);
 80013ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f0:	4619      	mov	r1, r3
 80013f2:	481e      	ldr	r0, [pc, #120]	; (800146c <MX_GPIO_Init+0x308>)
 80013f4:	f001 fb58 	bl	8002aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : XTend_CTS_Pin XTend_RTS_Pin XTend_SLEEP_Pin XTend_RX_LED_Pin
                           XTend_TX_PWR_Pin OUT_FLASH_IO3_Pin OUT_FLASH_WP_Pin OUT_FLASH_CS_Pin
                           OUT_VR_REC_Pin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 80013f8:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fe:	2301      	movs	r3, #1
 8001400:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001406:	2300      	movs	r3, #0
 8001408:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800140a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140e:	4619      	mov	r1, r3
 8001410:	4817      	ldr	r0, [pc, #92]	; (8001470 <MX_GPIO_Init+0x30c>)
 8001412:	f001 fb49 	bl	8002aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BANDPASS_FILTER_Pin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 8001416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141c:	2300      	movs	r3, #0
 800141e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 8001424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001428:	4619      	mov	r1, r3
 800142a:	4811      	ldr	r0, [pc, #68]	; (8001470 <MX_GPIO_Init+0x30c>)
 800142c:	f001 fb3c 	bl	8002aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_LPS22HH_DRDY_Pin EXTI_ISM330DCL_INT2_Pin EXTI_LSM6DSR_INT1_Pin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 8001430:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001436:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800143a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001440:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001444:	4619      	mov	r1, r3
 8001446:	4808      	ldr	r0, [pc, #32]	; (8001468 <MX_GPIO_Init+0x304>)
 8001448:	f001 fb2e 	bl	8002aa8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800144c:	2200      	movs	r2, #0
 800144e:	2105      	movs	r1, #5
 8001450:	2006      	movs	r0, #6
 8001452:	e00f      	b.n	8001474 <MX_GPIO_Init+0x310>
 8001454:	40023800 	.word	0x40023800
 8001458:	40021000 	.word	0x40021000
 800145c:	40021400 	.word	0x40021400
 8001460:	40020800 	.word	0x40020800
 8001464:	40020000 	.word	0x40020000
 8001468:	40021800 	.word	0x40021800
 800146c:	40020400 	.word	0x40020400
 8001470:	40020c00 	.word	0x40020c00
 8001474:	f000 ffe8 	bl	8002448 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001478:	2006      	movs	r0, #6
 800147a:	f001 f801 	bl	8002480 <HAL_NVIC_EnableIRQ>

}
 800147e:	bf00      	nop
 8001480:	3738      	adds	r7, #56	; 0x38
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop

08001488 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a04      	ldr	r2, [pc, #16]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d101      	bne.n	800149e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800149a:	f000 fc67 	bl	8001d6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40001000 	.word	0x40001000

080014ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80014b0:	b672      	cpsid	i
}
 80014b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <Error_Handler+0x8>
	...

080014b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	4b12      	ldr	r3, [pc, #72]	; (800150c <HAL_MspInit+0x54>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	4a11      	ldr	r2, [pc, #68]	; (800150c <HAL_MspInit+0x54>)
 80014c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014cc:	6453      	str	r3, [r2, #68]	; 0x44
 80014ce:	4b0f      	ldr	r3, [pc, #60]	; (800150c <HAL_MspInit+0x54>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	603b      	str	r3, [r7, #0]
 80014de:	4b0b      	ldr	r3, [pc, #44]	; (800150c <HAL_MspInit+0x54>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	4a0a      	ldr	r2, [pc, #40]	; (800150c <HAL_MspInit+0x54>)
 80014e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ea:	4b08      	ldr	r3, [pc, #32]	; (800150c <HAL_MspInit+0x54>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f2:	603b      	str	r3, [r7, #0]
 80014f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014f6:	2200      	movs	r2, #0
 80014f8:	210f      	movs	r1, #15
 80014fa:	f06f 0001 	mvn.w	r0, #1
 80014fe:	f000 ffa3 	bl	8002448 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40023800 	.word	0x40023800

08001510 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	; 0x28
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a17      	ldr	r2, [pc, #92]	; (800158c <HAL_ADC_MspInit+0x7c>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d127      	bne.n	8001582 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	4b16      	ldr	r3, [pc, #88]	; (8001590 <HAL_ADC_MspInit+0x80>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	4a15      	ldr	r2, [pc, #84]	; (8001590 <HAL_ADC_MspInit+0x80>)
 800153c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001540:	6453      	str	r3, [r2, #68]	; 0x44
 8001542:	4b13      	ldr	r3, [pc, #76]	; (8001590 <HAL_ADC_MspInit+0x80>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <HAL_ADC_MspInit+0x80>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a0e      	ldr	r2, [pc, #56]	; (8001590 <HAL_ADC_MspInit+0x80>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <HAL_ADC_MspInit+0x80>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 800156a:	2340      	movs	r3, #64	; 0x40
 800156c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800156e:	2303      	movs	r3, #3
 8001570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	4619      	mov	r1, r3
 800157c:	4805      	ldr	r0, [pc, #20]	; (8001594 <HAL_ADC_MspInit+0x84>)
 800157e:	f001 fa93 	bl	8002aa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001582:	bf00      	nop
 8001584:	3728      	adds	r7, #40	; 0x28
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40012000 	.word	0x40012000
 8001590:	40023800 	.word	0x40023800
 8001594:	40020000 	.word	0x40020000

08001598 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08e      	sub	sp, #56	; 0x38
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a5c      	ldr	r2, [pc, #368]	; (8001728 <HAL_I2C_MspInit+0x190>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d12d      	bne.n	8001616 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	623b      	str	r3, [r7, #32]
 80015be:	4b5b      	ldr	r3, [pc, #364]	; (800172c <HAL_I2C_MspInit+0x194>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	4a5a      	ldr	r2, [pc, #360]	; (800172c <HAL_I2C_MspInit+0x194>)
 80015c4:	f043 0302 	orr.w	r3, r3, #2
 80015c8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ca:	4b58      	ldr	r3, [pc, #352]	; (800172c <HAL_I2C_MspInit+0x194>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	623b      	str	r3, [r7, #32]
 80015d4:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015dc:	2312      	movs	r3, #18
 80015de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015e0:	2301      	movs	r3, #1
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e4:	2303      	movs	r3, #3
 80015e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015e8:	2304      	movs	r3, #4
 80015ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f0:	4619      	mov	r1, r3
 80015f2:	484f      	ldr	r0, [pc, #316]	; (8001730 <HAL_I2C_MspInit+0x198>)
 80015f4:	f001 fa58 	bl	8002aa8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
 80015fc:	4b4b      	ldr	r3, [pc, #300]	; (800172c <HAL_I2C_MspInit+0x194>)
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	4a4a      	ldr	r2, [pc, #296]	; (800172c <HAL_I2C_MspInit+0x194>)
 8001602:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001606:	6413      	str	r3, [r2, #64]	; 0x40
 8001608:	4b48      	ldr	r3, [pc, #288]	; (800172c <HAL_I2C_MspInit+0x194>)
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001610:	61fb      	str	r3, [r7, #28]
 8001612:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001614:	e083      	b.n	800171e <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a46      	ldr	r2, [pc, #280]	; (8001734 <HAL_I2C_MspInit+0x19c>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d12d      	bne.n	800167c <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001620:	2300      	movs	r3, #0
 8001622:	61bb      	str	r3, [r7, #24]
 8001624:	4b41      	ldr	r3, [pc, #260]	; (800172c <HAL_I2C_MspInit+0x194>)
 8001626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001628:	4a40      	ldr	r2, [pc, #256]	; (800172c <HAL_I2C_MspInit+0x194>)
 800162a:	f043 0302 	orr.w	r3, r3, #2
 800162e:	6313      	str	r3, [r2, #48]	; 0x30
 8001630:	4b3e      	ldr	r3, [pc, #248]	; (800172c <HAL_I2C_MspInit+0x194>)
 8001632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	61bb      	str	r3, [r7, #24]
 800163a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800163c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001642:	2312      	movs	r3, #18
 8001644:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001646:	2301      	movs	r3, #1
 8001648:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164a:	2303      	movs	r3, #3
 800164c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800164e:	2304      	movs	r3, #4
 8001650:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001652:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001656:	4619      	mov	r1, r3
 8001658:	4835      	ldr	r0, [pc, #212]	; (8001730 <HAL_I2C_MspInit+0x198>)
 800165a:	f001 fa25 	bl	8002aa8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	617b      	str	r3, [r7, #20]
 8001662:	4b32      	ldr	r3, [pc, #200]	; (800172c <HAL_I2C_MspInit+0x194>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	4a31      	ldr	r2, [pc, #196]	; (800172c <HAL_I2C_MspInit+0x194>)
 8001668:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800166c:	6413      	str	r3, [r2, #64]	; 0x40
 800166e:	4b2f      	ldr	r3, [pc, #188]	; (800172c <HAL_I2C_MspInit+0x194>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	697b      	ldr	r3, [r7, #20]
}
 800167a:	e050      	b.n	800171e <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a2d      	ldr	r2, [pc, #180]	; (8001738 <HAL_I2C_MspInit+0x1a0>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d14b      	bne.n	800171e <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	4b28      	ldr	r3, [pc, #160]	; (800172c <HAL_I2C_MspInit+0x194>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a27      	ldr	r2, [pc, #156]	; (800172c <HAL_I2C_MspInit+0x194>)
 8001690:	f043 0304 	orr.w	r3, r3, #4
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b25      	ldr	r3, [pc, #148]	; (800172c <HAL_I2C_MspInit+0x194>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0304 	and.w	r3, r3, #4
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	4b21      	ldr	r3, [pc, #132]	; (800172c <HAL_I2C_MspInit+0x194>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a20      	ldr	r2, [pc, #128]	; (800172c <HAL_I2C_MspInit+0x194>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b1e      	ldr	r3, [pc, #120]	; (800172c <HAL_I2C_MspInit+0x194>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c4:	2312      	movs	r3, #18
 80016c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c8:	2301      	movs	r3, #1
 80016ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016cc:	2303      	movs	r3, #3
 80016ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80016d0:	2304      	movs	r3, #4
 80016d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d8:	4619      	mov	r1, r3
 80016da:	4818      	ldr	r0, [pc, #96]	; (800173c <HAL_I2C_MspInit+0x1a4>)
 80016dc:	f001 f9e4 	bl	8002aa8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e6:	2312      	movs	r3, #18
 80016e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ea:	2301      	movs	r3, #1
 80016ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ee:	2303      	movs	r3, #3
 80016f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80016f2:	2304      	movs	r3, #4
 80016f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016fa:	4619      	mov	r1, r3
 80016fc:	4810      	ldr	r0, [pc, #64]	; (8001740 <HAL_I2C_MspInit+0x1a8>)
 80016fe:	f001 f9d3 	bl	8002aa8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <HAL_I2C_MspInit+0x194>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	4a08      	ldr	r2, [pc, #32]	; (800172c <HAL_I2C_MspInit+0x194>)
 800170c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001710:	6413      	str	r3, [r2, #64]	; 0x40
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_I2C_MspInit+0x194>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
}
 800171e:	bf00      	nop
 8001720:	3738      	adds	r7, #56	; 0x38
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40005400 	.word	0x40005400
 800172c:	40023800 	.word	0x40023800
 8001730:	40020400 	.word	0x40020400
 8001734:	40005800 	.word	0x40005800
 8001738:	40005c00 	.word	0x40005c00
 800173c:	40020800 	.word	0x40020800
 8001740:	40020000 	.word	0x40020000

08001744 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08e      	sub	sp, #56	; 0x38
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800174c:	f107 0308 	add.w	r3, r7, #8
 8001750:	2230      	movs	r2, #48	; 0x30
 8001752:	2100      	movs	r1, #0
 8001754:	4618      	mov	r0, r3
 8001756:	f004 fb93 	bl	8005e80 <memset>
  if(hrtc->Instance==RTC)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a10      	ldr	r2, [pc, #64]	; (80017a0 <HAL_RTC_MspInit+0x5c>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d119      	bne.n	8001798 <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001764:	2320      	movs	r3, #32
 8001766:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001768:	f44f 7300 	mov.w	r3, #512	; 0x200
 800176c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800176e:	f107 0308 	add.w	r3, r7, #8
 8001772:	4618      	mov	r0, r3
 8001774:	f002 f9da 	bl	8003b2c <HAL_RCCEx_PeriphCLKConfig>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800177e:	f7ff fe95 	bl	80014ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001782:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <HAL_RTC_MspInit+0x60>)
 8001784:	2201      	movs	r2, #1
 8001786:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8001788:	2200      	movs	r2, #0
 800178a:	2105      	movs	r1, #5
 800178c:	2029      	movs	r0, #41	; 0x29
 800178e:	f000 fe5b 	bl	8002448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001792:	2029      	movs	r0, #41	; 0x29
 8001794:	f000 fe74 	bl	8002480 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001798:	bf00      	nop
 800179a:	3738      	adds	r7, #56	; 0x38
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40002800 	.word	0x40002800
 80017a4:	42470e3c 	.word	0x42470e3c

080017a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08e      	sub	sp, #56	; 0x38
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a4c      	ldr	r2, [pc, #304]	; (80018f8 <HAL_SPI_MspInit+0x150>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d12d      	bne.n	8001826 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	623b      	str	r3, [r7, #32]
 80017ce:	4b4b      	ldr	r3, [pc, #300]	; (80018fc <HAL_SPI_MspInit+0x154>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	4a4a      	ldr	r2, [pc, #296]	; (80018fc <HAL_SPI_MspInit+0x154>)
 80017d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d8:	6413      	str	r3, [r2, #64]	; 0x40
 80017da:	4b48      	ldr	r3, [pc, #288]	; (80018fc <HAL_SPI_MspInit+0x154>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017e2:	623b      	str	r3, [r7, #32]
 80017e4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
 80017ea:	4b44      	ldr	r3, [pc, #272]	; (80018fc <HAL_SPI_MspInit+0x154>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a43      	ldr	r2, [pc, #268]	; (80018fc <HAL_SPI_MspInit+0x154>)
 80017f0:	f043 0302 	orr.w	r3, r3, #2
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b41      	ldr	r3, [pc, #260]	; (80018fc <HAL_SPI_MspInit+0x154>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	61fb      	str	r3, [r7, #28]
 8001800:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001802:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001808:	2302      	movs	r3, #2
 800180a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001810:	2303      	movs	r3, #3
 8001812:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001814:	2305      	movs	r3, #5
 8001816:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181c:	4619      	mov	r1, r3
 800181e:	4838      	ldr	r0, [pc, #224]	; (8001900 <HAL_SPI_MspInit+0x158>)
 8001820:	f001 f942 	bl	8002aa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001824:	e064      	b.n	80018f0 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI4)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a36      	ldr	r2, [pc, #216]	; (8001904 <HAL_SPI_MspInit+0x15c>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d12d      	bne.n	800188c <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001830:	2300      	movs	r3, #0
 8001832:	61bb      	str	r3, [r7, #24]
 8001834:	4b31      	ldr	r3, [pc, #196]	; (80018fc <HAL_SPI_MspInit+0x154>)
 8001836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001838:	4a30      	ldr	r2, [pc, #192]	; (80018fc <HAL_SPI_MspInit+0x154>)
 800183a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800183e:	6453      	str	r3, [r2, #68]	; 0x44
 8001840:	4b2e      	ldr	r3, [pc, #184]	; (80018fc <HAL_SPI_MspInit+0x154>)
 8001842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001844:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001848:	61bb      	str	r3, [r7, #24]
 800184a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	4b2a      	ldr	r3, [pc, #168]	; (80018fc <HAL_SPI_MspInit+0x154>)
 8001852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001854:	4a29      	ldr	r2, [pc, #164]	; (80018fc <HAL_SPI_MspInit+0x154>)
 8001856:	f043 0310 	orr.w	r3, r3, #16
 800185a:	6313      	str	r3, [r2, #48]	; 0x30
 800185c:	4b27      	ldr	r3, [pc, #156]	; (80018fc <HAL_SPI_MspInit+0x154>)
 800185e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001860:	f003 0310 	and.w	r3, r3, #16
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001868:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186e:	2302      	movs	r3, #2
 8001870:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001876:	2303      	movs	r3, #3
 8001878:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800187a:	2305      	movs	r3, #5
 800187c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800187e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001882:	4619      	mov	r1, r3
 8001884:	4820      	ldr	r0, [pc, #128]	; (8001908 <HAL_SPI_MspInit+0x160>)
 8001886:	f001 f90f 	bl	8002aa8 <HAL_GPIO_Init>
}
 800188a:	e031      	b.n	80018f0 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI5)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a1e      	ldr	r2, [pc, #120]	; (800190c <HAL_SPI_MspInit+0x164>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d12c      	bne.n	80018f0 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	613b      	str	r3, [r7, #16]
 800189a:	4b18      	ldr	r3, [pc, #96]	; (80018fc <HAL_SPI_MspInit+0x154>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189e:	4a17      	ldr	r2, [pc, #92]	; (80018fc <HAL_SPI_MspInit+0x154>)
 80018a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80018a4:	6453      	str	r3, [r2, #68]	; 0x44
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <HAL_SPI_MspInit+0x154>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	4b11      	ldr	r3, [pc, #68]	; (80018fc <HAL_SPI_MspInit+0x154>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a10      	ldr	r2, [pc, #64]	; (80018fc <HAL_SPI_MspInit+0x154>)
 80018bc:	f043 0320 	orr.w	r3, r3, #32
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <HAL_SPI_MspInit+0x154>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0320 	and.w	r3, r3, #32
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80018ce:	f44f 7360 	mov.w	r3, #896	; 0x380
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d4:	2302      	movs	r3, #2
 80018d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018dc:	2303      	movs	r3, #3
 80018de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80018e0:	2305      	movs	r3, #5
 80018e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e8:	4619      	mov	r1, r3
 80018ea:	4809      	ldr	r0, [pc, #36]	; (8001910 <HAL_SPI_MspInit+0x168>)
 80018ec:	f001 f8dc 	bl	8002aa8 <HAL_GPIO_Init>
}
 80018f0:	bf00      	nop
 80018f2:	3738      	adds	r7, #56	; 0x38
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40003800 	.word	0x40003800
 80018fc:	40023800 	.word	0x40023800
 8001900:	40020400 	.word	0x40020400
 8001904:	40013400 	.word	0x40013400
 8001908:	40021000 	.word	0x40021000
 800190c:	40015000 	.word	0x40015000
 8001910:	40021400 	.word	0x40021400

08001914 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001924:	d10d      	bne.n	8001942 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	4b09      	ldr	r3, [pc, #36]	; (8001950 <HAL_TIM_PWM_MspInit+0x3c>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	4a08      	ldr	r2, [pc, #32]	; (8001950 <HAL_TIM_PWM_MspInit+0x3c>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6413      	str	r3, [r2, #64]	; 0x40
 8001936:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_TIM_PWM_MspInit+0x3c>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001942:	bf00      	nop
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	40023800 	.word	0x40023800

08001954 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b088      	sub	sp, #32
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 030c 	add.w	r3, r7, #12
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001974:	d11d      	bne.n	80019b2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	4b10      	ldr	r3, [pc, #64]	; (80019bc <HAL_TIM_MspPostInit+0x68>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a0f      	ldr	r2, [pc, #60]	; (80019bc <HAL_TIM_MspPostInit+0x68>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b0d      	ldr	r3, [pc, #52]	; (80019bc <HAL_TIM_MspPostInit+0x68>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8001992:	2304      	movs	r3, #4
 8001994:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	2302      	movs	r3, #2
 8001998:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	2300      	movs	r3, #0
 80019a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019a2:	2301      	movs	r3, #1
 80019a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80019a6:	f107 030c 	add.w	r3, r7, #12
 80019aa:	4619      	mov	r1, r3
 80019ac:	4804      	ldr	r0, [pc, #16]	; (80019c0 <HAL_TIM_MspPostInit+0x6c>)
 80019ae:	f001 f87b 	bl	8002aa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80019b2:	bf00      	nop
 80019b4:	3720      	adds	r7, #32
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40020000 	.word	0x40020000

080019c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08e      	sub	sp, #56	; 0x38
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a4b      	ldr	r2, [pc, #300]	; (8001b10 <HAL_UART_MspInit+0x14c>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d12c      	bne.n	8001a40 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	623b      	str	r3, [r7, #32]
 80019ea:	4b4a      	ldr	r3, [pc, #296]	; (8001b14 <HAL_UART_MspInit+0x150>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	4a49      	ldr	r2, [pc, #292]	; (8001b14 <HAL_UART_MspInit+0x150>)
 80019f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80019f4:	6413      	str	r3, [r2, #64]	; 0x40
 80019f6:	4b47      	ldr	r3, [pc, #284]	; (8001b14 <HAL_UART_MspInit+0x150>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80019fe:	623b      	str	r3, [r7, #32]
 8001a00:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
 8001a06:	4b43      	ldr	r3, [pc, #268]	; (8001b14 <HAL_UART_MspInit+0x150>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a42      	ldr	r2, [pc, #264]	; (8001b14 <HAL_UART_MspInit+0x150>)
 8001a0c:	f043 0310 	orr.w	r3, r3, #16
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b40      	ldr	r3, [pc, #256]	; (8001b14 <HAL_UART_MspInit+0x150>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0310 	and.w	r3, r3, #16
 8001a1a:	61fb      	str	r3, [r7, #28]
 8001a1c:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a22:	2302      	movs	r3, #2
 8001a24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001a2e:	2308      	movs	r3, #8
 8001a30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a36:	4619      	mov	r1, r3
 8001a38:	4837      	ldr	r0, [pc, #220]	; (8001b18 <HAL_UART_MspInit+0x154>)
 8001a3a:	f001 f835 	bl	8002aa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001a3e:	e063      	b.n	8001b08 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a35      	ldr	r2, [pc, #212]	; (8001b1c <HAL_UART_MspInit+0x158>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d12d      	bne.n	8001aa6 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61bb      	str	r3, [r7, #24]
 8001a4e:	4b31      	ldr	r3, [pc, #196]	; (8001b14 <HAL_UART_MspInit+0x150>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	4a30      	ldr	r2, [pc, #192]	; (8001b14 <HAL_UART_MspInit+0x150>)
 8001a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a58:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5a:	4b2e      	ldr	r3, [pc, #184]	; (8001b14 <HAL_UART_MspInit+0x150>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a62:	61bb      	str	r3, [r7, #24]
 8001a64:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	4b2a      	ldr	r3, [pc, #168]	; (8001b14 <HAL_UART_MspInit+0x150>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a29      	ldr	r2, [pc, #164]	; (8001b14 <HAL_UART_MspInit+0x150>)
 8001a70:	f043 0308 	orr.w	r3, r3, #8
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b27      	ldr	r3, [pc, #156]	; (8001b14 <HAL_UART_MspInit+0x150>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8001a82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a90:	2303      	movs	r3, #3
 8001a92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a94:	2307      	movs	r3, #7
 8001a96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4820      	ldr	r0, [pc, #128]	; (8001b20 <HAL_UART_MspInit+0x15c>)
 8001aa0:	f001 f802 	bl	8002aa8 <HAL_GPIO_Init>
}
 8001aa4:	e030      	b.n	8001b08 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a1e      	ldr	r2, [pc, #120]	; (8001b24 <HAL_UART_MspInit+0x160>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d12b      	bne.n	8001b08 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	4b17      	ldr	r3, [pc, #92]	; (8001b14 <HAL_UART_MspInit+0x150>)
 8001ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab8:	4a16      	ldr	r2, [pc, #88]	; (8001b14 <HAL_UART_MspInit+0x150>)
 8001aba:	f043 0320 	orr.w	r3, r3, #32
 8001abe:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac0:	4b14      	ldr	r3, [pc, #80]	; (8001b14 <HAL_UART_MspInit+0x150>)
 8001ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac4:	f003 0320 	and.w	r3, r3, #32
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <HAL_UART_MspInit+0x150>)
 8001ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad4:	4a0f      	ldr	r2, [pc, #60]	; (8001b14 <HAL_UART_MspInit+0x150>)
 8001ad6:	f043 0304 	orr.w	r3, r3, #4
 8001ada:	6313      	str	r3, [r2, #48]	; 0x30
 8001adc:	4b0d      	ldr	r3, [pc, #52]	; (8001b14 <HAL_UART_MspInit+0x150>)
 8001ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8001ae8:	23c0      	movs	r3, #192	; 0xc0
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aec:	2302      	movs	r3, #2
 8001aee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af4:	2303      	movs	r3, #3
 8001af6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001af8:	2308      	movs	r3, #8
 8001afa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b00:	4619      	mov	r1, r3
 8001b02:	4809      	ldr	r0, [pc, #36]	; (8001b28 <HAL_UART_MspInit+0x164>)
 8001b04:	f000 ffd0 	bl	8002aa8 <HAL_GPIO_Init>
}
 8001b08:	bf00      	nop
 8001b0a:	3738      	adds	r7, #56	; 0x38
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40007c00 	.word	0x40007c00
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	40004800 	.word	0x40004800
 8001b20:	40020c00 	.word	0x40020c00
 8001b24:	40011400 	.word	0x40011400
 8001b28:	40020800 	.word	0x40020800

08001b2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08c      	sub	sp, #48	; 0x30
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	2036      	movs	r0, #54	; 0x36
 8001b42:	f000 fc81 	bl	8002448 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b46:	2036      	movs	r0, #54	; 0x36
 8001b48:	f000 fc9a 	bl	8002480 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	4b1f      	ldr	r3, [pc, #124]	; (8001bd0 <HAL_InitTick+0xa4>)
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	4a1e      	ldr	r2, [pc, #120]	; (8001bd0 <HAL_InitTick+0xa4>)
 8001b56:	f043 0310 	orr.w	r3, r3, #16
 8001b5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5c:	4b1c      	ldr	r3, [pc, #112]	; (8001bd0 <HAL_InitTick+0xa4>)
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	f003 0310 	and.w	r3, r3, #16
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b68:	f107 0210 	add.w	r2, r7, #16
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	4611      	mov	r1, r2
 8001b72:	4618      	mov	r0, r3
 8001b74:	f001 ffa8 	bl	8003ac8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001b78:	f001 ff7e 	bl	8003a78 <HAL_RCC_GetPCLK1Freq>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b84:	4a13      	ldr	r2, [pc, #76]	; (8001bd4 <HAL_InitTick+0xa8>)
 8001b86:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8a:	0c9b      	lsrs	r3, r3, #18
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <HAL_InitTick+0xac>)
 8001b92:	4a12      	ldr	r2, [pc, #72]	; (8001bdc <HAL_InitTick+0xb0>)
 8001b94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <HAL_InitTick+0xac>)
 8001b98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b9c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001b9e:	4a0e      	ldr	r2, [pc, #56]	; (8001bd8 <HAL_InitTick+0xac>)
 8001ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <HAL_InitTick+0xac>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001baa:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <HAL_InitTick+0xac>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001bb0:	4809      	ldr	r0, [pc, #36]	; (8001bd8 <HAL_InitTick+0xac>)
 8001bb2:	f002 fdfc 	bl	80047ae <HAL_TIM_Base_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d104      	bne.n	8001bc6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001bbc:	4806      	ldr	r0, [pc, #24]	; (8001bd8 <HAL_InitTick+0xac>)
 8001bbe:	f002 fe4f 	bl	8004860 <HAL_TIM_Base_Start_IT>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	e000      	b.n	8001bc8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3730      	adds	r7, #48	; 0x30
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	431bde83 	.word	0x431bde83
 8001bd8:	200008e0 	.word	0x200008e0
 8001bdc:	40001000 	.word	0x40001000

08001be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001be4:	e7fe      	b.n	8001be4 <NMI_Handler+0x4>

08001be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bea:	e7fe      	b.n	8001bea <HardFault_Handler+0x4>

08001bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf0:	e7fe      	b.n	8001bf0 <MemManage_Handler+0x4>

08001bf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bf6:	e7fe      	b.n	8001bf6 <BusFault_Handler+0x4>

08001bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bfc:	e7fe      	b.n	8001bfc <UsageFault_Handler+0x4>

08001bfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001c10:	2001      	movs	r0, #1
 8001c12:	f001 f90f 	bl	8002e34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001c20:	4802      	ldr	r0, [pc, #8]	; (8001c2c <RTC_Alarm_IRQHandler+0x10>)
 8001c22:	f002 fc6f 	bl	8004504 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	200007d4 	.word	0x200007d4

08001c30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c34:	4802      	ldr	r0, [pc, #8]	; (8001c40 <TIM6_DAC_IRQHandler+0x10>)
 8001c36:	f002 fed2 	bl	80049de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	200008e0 	.word	0x200008e0

08001c44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c4c:	4a14      	ldr	r2, [pc, #80]	; (8001ca0 <_sbrk+0x5c>)
 8001c4e:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <_sbrk+0x60>)
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c58:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <_sbrk+0x64>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d102      	bne.n	8001c66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c60:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <_sbrk+0x64>)
 8001c62:	4a12      	ldr	r2, [pc, #72]	; (8001cac <_sbrk+0x68>)
 8001c64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <_sbrk+0x64>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d207      	bcs.n	8001c84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c74:	f004 f8ca 	bl	8005e0c <__errno>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	220c      	movs	r2, #12
 8001c7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c82:	e009      	b.n	8001c98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c84:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <_sbrk+0x64>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c8a:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <_sbrk+0x64>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	4a05      	ldr	r2, [pc, #20]	; (8001ca8 <_sbrk+0x64>)
 8001c94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c96:	68fb      	ldr	r3, [r7, #12]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20030000 	.word	0x20030000
 8001ca4:	00000400 	.word	0x00000400
 8001ca8:	20000098 	.word	0x20000098
 8001cac:	20000960 	.word	0x20000960

08001cb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cb4:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <SystemInit+0x20>)
 8001cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cba:	4a05      	ldr	r2, [pc, #20]	; (8001cd0 <SystemInit+0x20>)
 8001cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001cd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cd8:	480d      	ldr	r0, [pc, #52]	; (8001d10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cda:	490e      	ldr	r1, [pc, #56]	; (8001d14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cdc:	4a0e      	ldr	r2, [pc, #56]	; (8001d18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ce0:	e002      	b.n	8001ce8 <LoopCopyDataInit>

08001ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ce6:	3304      	adds	r3, #4

08001ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cec:	d3f9      	bcc.n	8001ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cee:	4a0b      	ldr	r2, [pc, #44]	; (8001d1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cf0:	4c0b      	ldr	r4, [pc, #44]	; (8001d20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf4:	e001      	b.n	8001cfa <LoopFillZerobss>

08001cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf8:	3204      	adds	r2, #4

08001cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cfc:	d3fb      	bcc.n	8001cf6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001cfe:	f7ff ffd7 	bl	8001cb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d02:	f004 f889 	bl	8005e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d06:	f7fe fe77 	bl	80009f8 <main>
  bx  lr    
 8001d0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d0c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d14:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001d18:	08006820 	.word	0x08006820
  ldr r2, =_sbss
 8001d1c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001d20:	2000095c 	.word	0x2000095c

08001d24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d24:	e7fe      	b.n	8001d24 <ADC_IRQHandler>
	...

08001d28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d2c:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <HAL_Init+0x40>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a0d      	ldr	r2, [pc, #52]	; (8001d68 <HAL_Init+0x40>)
 8001d32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d38:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <HAL_Init+0x40>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a0a      	ldr	r2, [pc, #40]	; (8001d68 <HAL_Init+0x40>)
 8001d3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d44:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <HAL_Init+0x40>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a07      	ldr	r2, [pc, #28]	; (8001d68 <HAL_Init+0x40>)
 8001d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d50:	2003      	movs	r0, #3
 8001d52:	f000 fb6e 	bl	8002432 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d56:	2000      	movs	r0, #0
 8001d58:	f7ff fee8 	bl	8001b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d5c:	f7ff fbac 	bl	80014b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40023c00 	.word	0x40023c00

08001d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d70:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <HAL_IncTick+0x20>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	461a      	mov	r2, r3
 8001d76:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <HAL_IncTick+0x24>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	4a04      	ldr	r2, [pc, #16]	; (8001d90 <HAL_IncTick+0x24>)
 8001d7e:	6013      	str	r3, [r2, #0]
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	20000010 	.word	0x20000010
 8001d90:	20000928 	.word	0x20000928

08001d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return uwTick;
 8001d98:	4b03      	ldr	r3, [pc, #12]	; (8001da8 <HAL_GetTick+0x14>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	20000928 	.word	0x20000928

08001dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001db4:	f7ff ffee 	bl	8001d94 <HAL_GetTick>
 8001db8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc4:	d005      	beq.n	8001dd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <HAL_Delay+0x44>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4413      	add	r3, r2
 8001dd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dd2:	bf00      	nop
 8001dd4:	f7ff ffde 	bl	8001d94 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d8f7      	bhi.n	8001dd4 <HAL_Delay+0x28>
  {
  }
}
 8001de4:	bf00      	nop
 8001de6:	bf00      	nop
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000010 	.word	0x20000010

08001df4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e033      	b.n	8001e72 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d109      	bne.n	8001e26 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff fb7c 	bl	8001510 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	f003 0310 	and.w	r3, r3, #16
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d118      	bne.n	8001e64 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e3a:	f023 0302 	bic.w	r3, r3, #2
 8001e3e:	f043 0202 	orr.w	r2, r3, #2
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f94a 	bl	80020e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	f023 0303 	bic.w	r3, r3, #3
 8001e5a:	f043 0201 	orr.w	r2, r3, #1
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	641a      	str	r2, [r3, #64]	; 0x40
 8001e62:	e001      	b.n	8001e68 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d101      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x1c>
 8001e94:	2302      	movs	r3, #2
 8001e96:	e113      	b.n	80020c0 <HAL_ADC_ConfigChannel+0x244>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b09      	cmp	r3, #9
 8001ea6:	d925      	bls.n	8001ef4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68d9      	ldr	r1, [r3, #12]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4413      	add	r3, r2
 8001ebc:	3b1e      	subs	r3, #30
 8001ebe:	2207      	movs	r2, #7
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43da      	mvns	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	400a      	ands	r2, r1
 8001ecc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68d9      	ldr	r1, [r3, #12]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	4618      	mov	r0, r3
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4403      	add	r3, r0
 8001ee6:	3b1e      	subs	r3, #30
 8001ee8:	409a      	lsls	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	e022      	b.n	8001f3a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6919      	ldr	r1, [r3, #16]
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	461a      	mov	r2, r3
 8001f02:	4613      	mov	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4413      	add	r3, r2
 8001f08:	2207      	movs	r2, #7
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	400a      	ands	r2, r1
 8001f16:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6919      	ldr	r1, [r3, #16]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	4618      	mov	r0, r3
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	4403      	add	r3, r0
 8001f30:	409a      	lsls	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b06      	cmp	r3, #6
 8001f40:	d824      	bhi.n	8001f8c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	3b05      	subs	r3, #5
 8001f54:	221f      	movs	r2, #31
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43da      	mvns	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	400a      	ands	r2, r1
 8001f62:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	4618      	mov	r0, r3
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3b05      	subs	r3, #5
 8001f7e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	635a      	str	r2, [r3, #52]	; 0x34
 8001f8a:	e04c      	b.n	8002026 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b0c      	cmp	r3, #12
 8001f92:	d824      	bhi.n	8001fde <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3b23      	subs	r3, #35	; 0x23
 8001fa6:	221f      	movs	r2, #31
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43da      	mvns	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	400a      	ands	r2, r1
 8001fb4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	3b23      	subs	r3, #35	; 0x23
 8001fd0:	fa00 f203 	lsl.w	r2, r0, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	631a      	str	r2, [r3, #48]	; 0x30
 8001fdc:	e023      	b.n	8002026 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	3b41      	subs	r3, #65	; 0x41
 8001ff0:	221f      	movs	r2, #31
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43da      	mvns	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	400a      	ands	r2, r1
 8001ffe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	b29b      	uxth	r3, r3
 800200c:	4618      	mov	r0, r3
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	3b41      	subs	r3, #65	; 0x41
 800201a:	fa00 f203 	lsl.w	r2, r0, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002026:	4b29      	ldr	r3, [pc, #164]	; (80020cc <HAL_ADC_ConfigChannel+0x250>)
 8002028:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a28      	ldr	r2, [pc, #160]	; (80020d0 <HAL_ADC_ConfigChannel+0x254>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d10f      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x1d8>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2b12      	cmp	r3, #18
 800203a:	d10b      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a1d      	ldr	r2, [pc, #116]	; (80020d0 <HAL_ADC_ConfigChannel+0x254>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d12b      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x23a>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a1c      	ldr	r2, [pc, #112]	; (80020d4 <HAL_ADC_ConfigChannel+0x258>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d003      	beq.n	8002070 <HAL_ADC_ConfigChannel+0x1f4>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b11      	cmp	r3, #17
 800206e:	d122      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a11      	ldr	r2, [pc, #68]	; (80020d4 <HAL_ADC_ConfigChannel+0x258>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d111      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <HAL_ADC_ConfigChannel+0x25c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a11      	ldr	r2, [pc, #68]	; (80020dc <HAL_ADC_ConfigChannel+0x260>)
 8002098:	fba2 2303 	umull	r2, r3, r2, r3
 800209c:	0c9a      	lsrs	r2, r3, #18
 800209e:	4613      	mov	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020a8:	e002      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	3b01      	subs	r3, #1
 80020ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f9      	bne.n	80020aa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	40012300 	.word	0x40012300
 80020d0:	40012000 	.word	0x40012000
 80020d4:	10000012 	.word	0x10000012
 80020d8:	20000008 	.word	0x20000008
 80020dc:	431bde83 	.word	0x431bde83

080020e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020e8:	4b79      	ldr	r3, [pc, #484]	; (80022d0 <ADC_Init+0x1f0>)
 80020ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	431a      	orrs	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002114:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6859      	ldr	r1, [r3, #4]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	021a      	lsls	r2, r3, #8
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002138:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6859      	ldr	r1, [r3, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800215a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6899      	ldr	r1, [r3, #8]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002172:	4a58      	ldr	r2, [pc, #352]	; (80022d4 <ADC_Init+0x1f4>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d022      	beq.n	80021be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002186:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6899      	ldr	r1, [r3, #8]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6899      	ldr	r1, [r3, #8]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	e00f      	b.n	80021de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 0202 	bic.w	r2, r2, #2
 80021ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6899      	ldr	r1, [r3, #8]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	7e1b      	ldrb	r3, [r3, #24]
 80021f8:	005a      	lsls	r2, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d01b      	beq.n	8002244 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800221a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800222a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6859      	ldr	r1, [r3, #4]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	3b01      	subs	r3, #1
 8002238:	035a      	lsls	r2, r3, #13
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	e007      	b.n	8002254 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002252:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002262:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	3b01      	subs	r3, #1
 8002270:	051a      	lsls	r2, r3, #20
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	430a      	orrs	r2, r1
 8002278:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002288:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6899      	ldr	r1, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002296:	025a      	lsls	r2, r3, #9
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6899      	ldr	r1, [r3, #8]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	029a      	lsls	r2, r3, #10
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	609a      	str	r2, [r3, #8]
}
 80022c4:	bf00      	nop
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	40012300 	.word	0x40012300
 80022d4:	0f000001 	.word	0x0f000001

080022d8 <__NVIC_SetPriorityGrouping>:
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022e8:	4b0c      	ldr	r3, [pc, #48]	; (800231c <__NVIC_SetPriorityGrouping+0x44>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022f4:	4013      	ands	r3, r2
 80022f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800230a:	4a04      	ldr	r2, [pc, #16]	; (800231c <__NVIC_SetPriorityGrouping+0x44>)
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	60d3      	str	r3, [r2, #12]
}
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <__NVIC_GetPriorityGrouping>:
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002324:	4b04      	ldr	r3, [pc, #16]	; (8002338 <__NVIC_GetPriorityGrouping+0x18>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	0a1b      	lsrs	r3, r3, #8
 800232a:	f003 0307 	and.w	r3, r3, #7
}
 800232e:	4618      	mov	r0, r3
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <__NVIC_EnableIRQ>:
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	2b00      	cmp	r3, #0
 800234c:	db0b      	blt.n	8002366 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	f003 021f 	and.w	r2, r3, #31
 8002354:	4907      	ldr	r1, [pc, #28]	; (8002374 <__NVIC_EnableIRQ+0x38>)
 8002356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235a:	095b      	lsrs	r3, r3, #5
 800235c:	2001      	movs	r0, #1
 800235e:	fa00 f202 	lsl.w	r2, r0, r2
 8002362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	e000e100 	.word	0xe000e100

08002378 <__NVIC_SetPriority>:
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	6039      	str	r1, [r7, #0]
 8002382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002388:	2b00      	cmp	r3, #0
 800238a:	db0a      	blt.n	80023a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	b2da      	uxtb	r2, r3
 8002390:	490c      	ldr	r1, [pc, #48]	; (80023c4 <__NVIC_SetPriority+0x4c>)
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	0112      	lsls	r2, r2, #4
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	440b      	add	r3, r1
 800239c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80023a0:	e00a      	b.n	80023b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4908      	ldr	r1, [pc, #32]	; (80023c8 <__NVIC_SetPriority+0x50>)
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	3b04      	subs	r3, #4
 80023b0:	0112      	lsls	r2, r2, #4
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	440b      	add	r3, r1
 80023b6:	761a      	strb	r2, [r3, #24]
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000e100 	.word	0xe000e100
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <NVIC_EncodePriority>:
{
 80023cc:	b480      	push	{r7}
 80023ce:	b089      	sub	sp, #36	; 0x24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f1c3 0307 	rsb	r3, r3, #7
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	bf28      	it	cs
 80023ea:	2304      	movcs	r3, #4
 80023ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3304      	adds	r3, #4
 80023f2:	2b06      	cmp	r3, #6
 80023f4:	d902      	bls.n	80023fc <NVIC_EncodePriority+0x30>
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3b03      	subs	r3, #3
 80023fa:	e000      	b.n	80023fe <NVIC_EncodePriority+0x32>
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002400:	f04f 32ff 	mov.w	r2, #4294967295
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43da      	mvns	r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	401a      	ands	r2, r3
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002414:	f04f 31ff 	mov.w	r1, #4294967295
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	fa01 f303 	lsl.w	r3, r1, r3
 800241e:	43d9      	mvns	r1, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002424:	4313      	orrs	r3, r2
}
 8002426:	4618      	mov	r0, r3
 8002428:	3724      	adds	r7, #36	; 0x24
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b082      	sub	sp, #8
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7ff ff4c 	bl	80022d8 <__NVIC_SetPriorityGrouping>
}
 8002440:	bf00      	nop
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
 8002454:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800245a:	f7ff ff61 	bl	8002320 <__NVIC_GetPriorityGrouping>
 800245e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	68b9      	ldr	r1, [r7, #8]
 8002464:	6978      	ldr	r0, [r7, #20]
 8002466:	f7ff ffb1 	bl	80023cc <NVIC_EncodePriority>
 800246a:	4602      	mov	r2, r0
 800246c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002470:	4611      	mov	r1, r2
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff ff80 	bl	8002378 <__NVIC_SetPriority>
}
 8002478:	bf00      	nop
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800248a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff ff54 	bl	800233c <__NVIC_EnableIRQ>
}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80024ae:	4b23      	ldr	r3, [pc, #140]	; (800253c <HAL_FLASH_Program+0xa0>)
 80024b0:	7e1b      	ldrb	r3, [r3, #24]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d101      	bne.n	80024ba <HAL_FLASH_Program+0x1e>
 80024b6:	2302      	movs	r3, #2
 80024b8:	e03b      	b.n	8002532 <HAL_FLASH_Program+0x96>
 80024ba:	4b20      	ldr	r3, [pc, #128]	; (800253c <HAL_FLASH_Program+0xa0>)
 80024bc:	2201      	movs	r2, #1
 80024be:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80024c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80024c4:	f000 f870 	bl	80025a8 <FLASH_WaitForLastOperation>
 80024c8:	4603      	mov	r3, r0
 80024ca:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80024cc:	7dfb      	ldrb	r3, [r7, #23]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d12b      	bne.n	800252a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d105      	bne.n	80024e4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80024d8:	783b      	ldrb	r3, [r7, #0]
 80024da:	4619      	mov	r1, r3
 80024dc:	68b8      	ldr	r0, [r7, #8]
 80024de:	f000 f91b 	bl	8002718 <FLASH_Program_Byte>
 80024e2:	e016      	b.n	8002512 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d105      	bne.n	80024f6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80024ea:	883b      	ldrh	r3, [r7, #0]
 80024ec:	4619      	mov	r1, r3
 80024ee:	68b8      	ldr	r0, [r7, #8]
 80024f0:	f000 f8ee 	bl	80026d0 <FLASH_Program_HalfWord>
 80024f4:	e00d      	b.n	8002512 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d105      	bne.n	8002508 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	4619      	mov	r1, r3
 8002500:	68b8      	ldr	r0, [r7, #8]
 8002502:	f000 f8c3 	bl	800268c <FLASH_Program_Word>
 8002506:	e004      	b.n	8002512 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002508:	e9d7 2300 	ldrd	r2, r3, [r7]
 800250c:	68b8      	ldr	r0, [r7, #8]
 800250e:	f000 f88b 	bl	8002628 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002512:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002516:	f000 f847 	bl	80025a8 <FLASH_WaitForLastOperation>
 800251a:	4603      	mov	r3, r0
 800251c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800251e:	4b08      	ldr	r3, [pc, #32]	; (8002540 <HAL_FLASH_Program+0xa4>)
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	4a07      	ldr	r2, [pc, #28]	; (8002540 <HAL_FLASH_Program+0xa4>)
 8002524:	f023 0301 	bic.w	r3, r3, #1
 8002528:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800252a:	4b04      	ldr	r3, [pc, #16]	; (800253c <HAL_FLASH_Program+0xa0>)
 800252c:	2200      	movs	r2, #0
 800252e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002530:	7dfb      	ldrb	r3, [r7, #23]
}
 8002532:	4618      	mov	r0, r3
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	2000092c 	.word	0x2000092c
 8002540:	40023c00 	.word	0x40023c00

08002544 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800254a:	2300      	movs	r3, #0
 800254c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800254e:	4b0b      	ldr	r3, [pc, #44]	; (800257c <HAL_FLASH_Unlock+0x38>)
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	2b00      	cmp	r3, #0
 8002554:	da0b      	bge.n	800256e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002556:	4b09      	ldr	r3, [pc, #36]	; (800257c <HAL_FLASH_Unlock+0x38>)
 8002558:	4a09      	ldr	r2, [pc, #36]	; (8002580 <HAL_FLASH_Unlock+0x3c>)
 800255a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800255c:	4b07      	ldr	r3, [pc, #28]	; (800257c <HAL_FLASH_Unlock+0x38>)
 800255e:	4a09      	ldr	r2, [pc, #36]	; (8002584 <HAL_FLASH_Unlock+0x40>)
 8002560:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002562:	4b06      	ldr	r3, [pc, #24]	; (800257c <HAL_FLASH_Unlock+0x38>)
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	2b00      	cmp	r3, #0
 8002568:	da01      	bge.n	800256e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800256e:	79fb      	ldrb	r3, [r7, #7]
}
 8002570:	4618      	mov	r0, r3
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	40023c00 	.word	0x40023c00
 8002580:	45670123 	.word	0x45670123
 8002584:	cdef89ab 	.word	0xcdef89ab

08002588 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800258c:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <HAL_FLASH_Lock+0x1c>)
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	4a04      	ldr	r2, [pc, #16]	; (80025a4 <HAL_FLASH_Lock+0x1c>)
 8002592:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002596:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	40023c00 	.word	0x40023c00

080025a8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80025b4:	4b1a      	ldr	r3, [pc, #104]	; (8002620 <FLASH_WaitForLastOperation+0x78>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80025ba:	f7ff fbeb 	bl	8001d94 <HAL_GetTick>
 80025be:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80025c0:	e010      	b.n	80025e4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c8:	d00c      	beq.n	80025e4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d007      	beq.n	80025e0 <FLASH_WaitForLastOperation+0x38>
 80025d0:	f7ff fbe0 	bl	8001d94 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d201      	bcs.n	80025e4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e019      	b.n	8002618 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80025e4:	4b0f      	ldr	r3, [pc, #60]	; (8002624 <FLASH_WaitForLastOperation+0x7c>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1e8      	bne.n	80025c2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <FLASH_WaitForLastOperation+0x7c>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80025fc:	4b09      	ldr	r3, [pc, #36]	; (8002624 <FLASH_WaitForLastOperation+0x7c>)
 80025fe:	2201      	movs	r2, #1
 8002600:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002602:	4b08      	ldr	r3, [pc, #32]	; (8002624 <FLASH_WaitForLastOperation+0x7c>)
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800260e:	f000 f8a5 	bl	800275c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002616:	2300      	movs	r3, #0
  
}  
 8002618:	4618      	mov	r0, r3
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	2000092c 	.word	0x2000092c
 8002624:	40023c00 	.word	0x40023c00

08002628 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002634:	4b14      	ldr	r3, [pc, #80]	; (8002688 <FLASH_Program_DoubleWord+0x60>)
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	4a13      	ldr	r2, [pc, #76]	; (8002688 <FLASH_Program_DoubleWord+0x60>)
 800263a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800263e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002640:	4b11      	ldr	r3, [pc, #68]	; (8002688 <FLASH_Program_DoubleWord+0x60>)
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	4a10      	ldr	r2, [pc, #64]	; (8002688 <FLASH_Program_DoubleWord+0x60>)
 8002646:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800264a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800264c:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <FLASH_Program_DoubleWord+0x60>)
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	4a0d      	ldr	r2, [pc, #52]	; (8002688 <FLASH_Program_DoubleWord+0x60>)
 8002652:	f043 0301 	orr.w	r3, r3, #1
 8002656:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800265e:	f3bf 8f6f 	isb	sy
}
 8002662:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002664:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002668:	f04f 0200 	mov.w	r2, #0
 800266c:	f04f 0300 	mov.w	r3, #0
 8002670:	000a      	movs	r2, r1
 8002672:	2300      	movs	r3, #0
 8002674:	68f9      	ldr	r1, [r7, #12]
 8002676:	3104      	adds	r1, #4
 8002678:	4613      	mov	r3, r2
 800267a:	600b      	str	r3, [r1, #0]
}
 800267c:	bf00      	nop
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	40023c00 	.word	0x40023c00

0800268c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002696:	4b0d      	ldr	r3, [pc, #52]	; (80026cc <FLASH_Program_Word+0x40>)
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	4a0c      	ldr	r2, [pc, #48]	; (80026cc <FLASH_Program_Word+0x40>)
 800269c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026a0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80026a2:	4b0a      	ldr	r3, [pc, #40]	; (80026cc <FLASH_Program_Word+0x40>)
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	4a09      	ldr	r2, [pc, #36]	; (80026cc <FLASH_Program_Word+0x40>)
 80026a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026ac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80026ae:	4b07      	ldr	r3, [pc, #28]	; (80026cc <FLASH_Program_Word+0x40>)
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	4a06      	ldr	r2, [pc, #24]	; (80026cc <FLASH_Program_Word+0x40>)
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	601a      	str	r2, [r3, #0]
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	40023c00 	.word	0x40023c00

080026d0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80026dc:	4b0d      	ldr	r3, [pc, #52]	; (8002714 <FLASH_Program_HalfWord+0x44>)
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	4a0c      	ldr	r2, [pc, #48]	; (8002714 <FLASH_Program_HalfWord+0x44>)
 80026e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80026e8:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <FLASH_Program_HalfWord+0x44>)
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	4a09      	ldr	r2, [pc, #36]	; (8002714 <FLASH_Program_HalfWord+0x44>)
 80026ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80026f4:	4b07      	ldr	r3, [pc, #28]	; (8002714 <FLASH_Program_HalfWord+0x44>)
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	4a06      	ldr	r2, [pc, #24]	; (8002714 <FLASH_Program_HalfWord+0x44>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	887a      	ldrh	r2, [r7, #2]
 8002704:	801a      	strh	r2, [r3, #0]
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40023c00 	.word	0x40023c00

08002718 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002724:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <FLASH_Program_Byte+0x40>)
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	4a0b      	ldr	r2, [pc, #44]	; (8002758 <FLASH_Program_Byte+0x40>)
 800272a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800272e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002730:	4b09      	ldr	r3, [pc, #36]	; (8002758 <FLASH_Program_Byte+0x40>)
 8002732:	4a09      	ldr	r2, [pc, #36]	; (8002758 <FLASH_Program_Byte+0x40>)
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002738:	4b07      	ldr	r3, [pc, #28]	; (8002758 <FLASH_Program_Byte+0x40>)
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	4a06      	ldr	r2, [pc, #24]	; (8002758 <FLASH_Program_Byte+0x40>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	78fa      	ldrb	r2, [r7, #3]
 8002748:	701a      	strb	r2, [r3, #0]
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40023c00 	.word	0x40023c00

0800275c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002760:	4b2f      	ldr	r3, [pc, #188]	; (8002820 <FLASH_SetErrorCode+0xc4>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f003 0310 	and.w	r3, r3, #16
 8002768:	2b00      	cmp	r3, #0
 800276a:	d008      	beq.n	800277e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800276c:	4b2d      	ldr	r3, [pc, #180]	; (8002824 <FLASH_SetErrorCode+0xc8>)
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	f043 0310 	orr.w	r3, r3, #16
 8002774:	4a2b      	ldr	r2, [pc, #172]	; (8002824 <FLASH_SetErrorCode+0xc8>)
 8002776:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002778:	4b29      	ldr	r3, [pc, #164]	; (8002820 <FLASH_SetErrorCode+0xc4>)
 800277a:	2210      	movs	r2, #16
 800277c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800277e:	4b28      	ldr	r3, [pc, #160]	; (8002820 <FLASH_SetErrorCode+0xc4>)
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f003 0320 	and.w	r3, r3, #32
 8002786:	2b00      	cmp	r3, #0
 8002788:	d008      	beq.n	800279c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800278a:	4b26      	ldr	r3, [pc, #152]	; (8002824 <FLASH_SetErrorCode+0xc8>)
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	f043 0308 	orr.w	r3, r3, #8
 8002792:	4a24      	ldr	r2, [pc, #144]	; (8002824 <FLASH_SetErrorCode+0xc8>)
 8002794:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002796:	4b22      	ldr	r3, [pc, #136]	; (8002820 <FLASH_SetErrorCode+0xc4>)
 8002798:	2220      	movs	r2, #32
 800279a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800279c:	4b20      	ldr	r3, [pc, #128]	; (8002820 <FLASH_SetErrorCode+0xc4>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d008      	beq.n	80027ba <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80027a8:	4b1e      	ldr	r3, [pc, #120]	; (8002824 <FLASH_SetErrorCode+0xc8>)
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	f043 0304 	orr.w	r3, r3, #4
 80027b0:	4a1c      	ldr	r2, [pc, #112]	; (8002824 <FLASH_SetErrorCode+0xc8>)
 80027b2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80027b4:	4b1a      	ldr	r3, [pc, #104]	; (8002820 <FLASH_SetErrorCode+0xc4>)
 80027b6:	2240      	movs	r2, #64	; 0x40
 80027b8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80027ba:	4b19      	ldr	r3, [pc, #100]	; (8002820 <FLASH_SetErrorCode+0xc4>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d008      	beq.n	80027d8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80027c6:	4b17      	ldr	r3, [pc, #92]	; (8002824 <FLASH_SetErrorCode+0xc8>)
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	f043 0302 	orr.w	r3, r3, #2
 80027ce:	4a15      	ldr	r2, [pc, #84]	; (8002824 <FLASH_SetErrorCode+0xc8>)
 80027d0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80027d2:	4b13      	ldr	r3, [pc, #76]	; (8002820 <FLASH_SetErrorCode+0xc4>)
 80027d4:	2280      	movs	r2, #128	; 0x80
 80027d6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80027d8:	4b11      	ldr	r3, [pc, #68]	; (8002820 <FLASH_SetErrorCode+0xc4>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d009      	beq.n	80027f8 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80027e4:	4b0f      	ldr	r3, [pc, #60]	; (8002824 <FLASH_SetErrorCode+0xc8>)
 80027e6:	69db      	ldr	r3, [r3, #28]
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	4a0d      	ldr	r2, [pc, #52]	; (8002824 <FLASH_SetErrorCode+0xc8>)
 80027ee:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80027f0:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <FLASH_SetErrorCode+0xc4>)
 80027f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027f6:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80027f8:	4b09      	ldr	r3, [pc, #36]	; (8002820 <FLASH_SetErrorCode+0xc4>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d008      	beq.n	8002816 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002804:	4b07      	ldr	r3, [pc, #28]	; (8002824 <FLASH_SetErrorCode+0xc8>)
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	f043 0320 	orr.w	r3, r3, #32
 800280c:	4a05      	ldr	r2, [pc, #20]	; (8002824 <FLASH_SetErrorCode+0xc8>)
 800280e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002810:	4b03      	ldr	r3, [pc, #12]	; (8002820 <FLASH_SetErrorCode+0xc4>)
 8002812:	2202      	movs	r2, #2
 8002814:	60da      	str	r2, [r3, #12]
  }
}
 8002816:	bf00      	nop
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	40023c00 	.word	0x40023c00
 8002824:	2000092c 	.word	0x2000092c

08002828 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002836:	2300      	movs	r3, #0
 8002838:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800283a:	4b32      	ldr	r3, [pc, #200]	; (8002904 <HAL_FLASHEx_Erase+0xdc>)
 800283c:	7e1b      	ldrb	r3, [r3, #24]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d101      	bne.n	8002846 <HAL_FLASHEx_Erase+0x1e>
 8002842:	2302      	movs	r3, #2
 8002844:	e05a      	b.n	80028fc <HAL_FLASHEx_Erase+0xd4>
 8002846:	4b2f      	ldr	r3, [pc, #188]	; (8002904 <HAL_FLASHEx_Erase+0xdc>)
 8002848:	2201      	movs	r2, #1
 800284a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800284c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002850:	f7ff feaa 	bl	80025a8 <FLASH_WaitForLastOperation>
 8002854:	4603      	mov	r3, r0
 8002856:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d14a      	bne.n	80028f4 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	f04f 32ff 	mov.w	r2, #4294967295
 8002864:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d117      	bne.n	800289e <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	b2da      	uxtb	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	4619      	mov	r1, r3
 800287a:	4610      	mov	r0, r2
 800287c:	f000 f846 	bl	800290c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002880:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002884:	f7ff fe90 	bl	80025a8 <FLASH_WaitForLastOperation>
 8002888:	4603      	mov	r3, r0
 800288a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800288c:	4b1e      	ldr	r3, [pc, #120]	; (8002908 <HAL_FLASHEx_Erase+0xe0>)
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	4a1d      	ldr	r2, [pc, #116]	; (8002908 <HAL_FLASHEx_Erase+0xe0>)
 8002892:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002896:	f023 0304 	bic.w	r3, r3, #4
 800289a:	6113      	str	r3, [r2, #16]
 800289c:	e028      	b.n	80028f0 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	60bb      	str	r3, [r7, #8]
 80028a4:	e01c      	b.n	80028e0 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	4619      	mov	r1, r3
 80028ae:	68b8      	ldr	r0, [r7, #8]
 80028b0:	f000 f866 	bl	8002980 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80028b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028b8:	f7ff fe76 	bl	80025a8 <FLASH_WaitForLastOperation>
 80028bc:	4603      	mov	r3, r0
 80028be:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80028c0:	4b11      	ldr	r3, [pc, #68]	; (8002908 <HAL_FLASHEx_Erase+0xe0>)
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	4a10      	ldr	r2, [pc, #64]	; (8002908 <HAL_FLASHEx_Erase+0xe0>)
 80028c6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80028ca:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80028cc:	7bfb      	ldrb	r3, [r7, #15]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	68ba      	ldr	r2, [r7, #8]
 80028d6:	601a      	str	r2, [r3, #0]
          break;
 80028d8:	e00a      	b.n	80028f0 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	3301      	adds	r3, #1
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	4413      	add	r3, r2
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d3da      	bcc.n	80028a6 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80028f0:	f000 f894 	bl	8002a1c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80028f4:	4b03      	ldr	r3, [pc, #12]	; (8002904 <HAL_FLASHEx_Erase+0xdc>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	761a      	strb	r2, [r3, #24]

  return status;
 80028fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	2000092c 	.word	0x2000092c
 8002908:	40023c00 	.word	0x40023c00

0800290c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	6039      	str	r1, [r7, #0]
 8002916:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002918:	4b18      	ldr	r3, [pc, #96]	; (800297c <FLASH_MassErase+0x70>)
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	4a17      	ldr	r2, [pc, #92]	; (800297c <FLASH_MassErase+0x70>)
 800291e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002922:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	2b03      	cmp	r3, #3
 8002928:	d108      	bne.n	800293c <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 800292a:	4b14      	ldr	r3, [pc, #80]	; (800297c <FLASH_MassErase+0x70>)
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	4a13      	ldr	r2, [pc, #76]	; (800297c <FLASH_MassErase+0x70>)
 8002930:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002934:	f043 0304 	orr.w	r3, r3, #4
 8002938:	6113      	str	r3, [r2, #16]
 800293a:	e00f      	b.n	800295c <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d106      	bne.n	8002950 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8002942:	4b0e      	ldr	r3, [pc, #56]	; (800297c <FLASH_MassErase+0x70>)
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	4a0d      	ldr	r2, [pc, #52]	; (800297c <FLASH_MassErase+0x70>)
 8002948:	f043 0304 	orr.w	r3, r3, #4
 800294c:	6113      	str	r3, [r2, #16]
 800294e:	e005      	b.n	800295c <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8002950:	4b0a      	ldr	r3, [pc, #40]	; (800297c <FLASH_MassErase+0x70>)
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	4a09      	ldr	r2, [pc, #36]	; (800297c <FLASH_MassErase+0x70>)
 8002956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800295a:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800295c:	4b07      	ldr	r3, [pc, #28]	; (800297c <FLASH_MassErase+0x70>)
 800295e:	691a      	ldr	r2, [r3, #16]
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	021b      	lsls	r3, r3, #8
 8002964:	4313      	orrs	r3, r2
 8002966:	4a05      	ldr	r2, [pc, #20]	; (800297c <FLASH_MassErase+0x70>)
 8002968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800296c:	6113      	str	r3, [r2, #16]
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	40023c00 	.word	0x40023c00

08002980 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002990:	78fb      	ldrb	r3, [r7, #3]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d102      	bne.n	800299c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	e010      	b.n	80029be <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800299c:	78fb      	ldrb	r3, [r7, #3]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d103      	bne.n	80029aa <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80029a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	e009      	b.n	80029be <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80029aa:	78fb      	ldrb	r3, [r7, #3]
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d103      	bne.n	80029b8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80029b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	e002      	b.n	80029be <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80029b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029bc:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b0b      	cmp	r3, #11
 80029c2:	d902      	bls.n	80029ca <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3304      	adds	r3, #4
 80029c8:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80029ca:	4b13      	ldr	r3, [pc, #76]	; (8002a18 <FLASH_Erase_Sector+0x98>)
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	4a12      	ldr	r2, [pc, #72]	; (8002a18 <FLASH_Erase_Sector+0x98>)
 80029d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029d4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80029d6:	4b10      	ldr	r3, [pc, #64]	; (8002a18 <FLASH_Erase_Sector+0x98>)
 80029d8:	691a      	ldr	r2, [r3, #16]
 80029da:	490f      	ldr	r1, [pc, #60]	; (8002a18 <FLASH_Erase_Sector+0x98>)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4313      	orrs	r3, r2
 80029e0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80029e2:	4b0d      	ldr	r3, [pc, #52]	; (8002a18 <FLASH_Erase_Sector+0x98>)
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	4a0c      	ldr	r2, [pc, #48]	; (8002a18 <FLASH_Erase_Sector+0x98>)
 80029e8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80029ec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80029ee:	4b0a      	ldr	r3, [pc, #40]	; (8002a18 <FLASH_Erase_Sector+0x98>)
 80029f0:	691a      	ldr	r2, [r3, #16]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	4313      	orrs	r3, r2
 80029f8:	4a07      	ldr	r2, [pc, #28]	; (8002a18 <FLASH_Erase_Sector+0x98>)
 80029fa:	f043 0302 	orr.w	r3, r3, #2
 80029fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002a00:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <FLASH_Erase_Sector+0x98>)
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	4a04      	ldr	r2, [pc, #16]	; (8002a18 <FLASH_Erase_Sector+0x98>)
 8002a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a0a:	6113      	str	r3, [r2, #16]
}
 8002a0c:	bf00      	nop
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	40023c00 	.word	0x40023c00

08002a1c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002a20:	4b20      	ldr	r3, [pc, #128]	; (8002aa4 <FLASH_FlushCaches+0x88>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d017      	beq.n	8002a5c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002a2c:	4b1d      	ldr	r3, [pc, #116]	; (8002aa4 <FLASH_FlushCaches+0x88>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a1c      	ldr	r2, [pc, #112]	; (8002aa4 <FLASH_FlushCaches+0x88>)
 8002a32:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a36:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002a38:	4b1a      	ldr	r3, [pc, #104]	; (8002aa4 <FLASH_FlushCaches+0x88>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a19      	ldr	r2, [pc, #100]	; (8002aa4 <FLASH_FlushCaches+0x88>)
 8002a3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	4b17      	ldr	r3, [pc, #92]	; (8002aa4 <FLASH_FlushCaches+0x88>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a16      	ldr	r2, [pc, #88]	; (8002aa4 <FLASH_FlushCaches+0x88>)
 8002a4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a4e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a50:	4b14      	ldr	r3, [pc, #80]	; (8002aa4 <FLASH_FlushCaches+0x88>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a13      	ldr	r2, [pc, #76]	; (8002aa4 <FLASH_FlushCaches+0x88>)
 8002a56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a5a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002a5c:	4b11      	ldr	r3, [pc, #68]	; (8002aa4 <FLASH_FlushCaches+0x88>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d017      	beq.n	8002a98 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002a68:	4b0e      	ldr	r3, [pc, #56]	; (8002aa4 <FLASH_FlushCaches+0x88>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a0d      	ldr	r2, [pc, #52]	; (8002aa4 <FLASH_FlushCaches+0x88>)
 8002a6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a72:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <FLASH_FlushCaches+0x88>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a0a      	ldr	r2, [pc, #40]	; (8002aa4 <FLASH_FlushCaches+0x88>)
 8002a7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a7e:	6013      	str	r3, [r2, #0]
 8002a80:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <FLASH_FlushCaches+0x88>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a07      	ldr	r2, [pc, #28]	; (8002aa4 <FLASH_FlushCaches+0x88>)
 8002a86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a8a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a8c:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <FLASH_FlushCaches+0x88>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a04      	ldr	r2, [pc, #16]	; (8002aa4 <FLASH_FlushCaches+0x88>)
 8002a92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a96:	6013      	str	r3, [r2, #0]
  }
}
 8002a98:	bf00      	nop
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40023c00 	.word	0x40023c00

08002aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b089      	sub	sp, #36	; 0x24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61fb      	str	r3, [r7, #28]
 8002ac2:	e177      	b.n	8002db4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	f040 8166 	bne.w	8002dae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d005      	beq.n	8002afa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d130      	bne.n	8002b5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	2203      	movs	r2, #3
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	68da      	ldr	r2, [r3, #12]
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b30:	2201      	movs	r2, #1
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	091b      	lsrs	r3, r3, #4
 8002b46:	f003 0201 	and.w	r2, r3, #1
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 0303 	and.w	r3, r3, #3
 8002b64:	2b03      	cmp	r3, #3
 8002b66:	d017      	beq.n	8002b98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	2203      	movs	r2, #3
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 0303 	and.w	r3, r3, #3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d123      	bne.n	8002bec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	08da      	lsrs	r2, r3, #3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3208      	adds	r2, #8
 8002bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	220f      	movs	r2, #15
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	691a      	ldr	r2, [r3, #16]
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	08da      	lsrs	r2, r3, #3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	3208      	adds	r2, #8
 8002be6:	69b9      	ldr	r1, [r7, #24]
 8002be8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	2203      	movs	r2, #3
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4013      	ands	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 0203 	and.w	r2, r3, #3
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 80c0 	beq.w	8002dae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	4b66      	ldr	r3, [pc, #408]	; (8002dcc <HAL_GPIO_Init+0x324>)
 8002c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c36:	4a65      	ldr	r2, [pc, #404]	; (8002dcc <HAL_GPIO_Init+0x324>)
 8002c38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c3e:	4b63      	ldr	r3, [pc, #396]	; (8002dcc <HAL_GPIO_Init+0x324>)
 8002c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c4a:	4a61      	ldr	r2, [pc, #388]	; (8002dd0 <HAL_GPIO_Init+0x328>)
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	089b      	lsrs	r3, r3, #2
 8002c50:	3302      	adds	r3, #2
 8002c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	220f      	movs	r2, #15
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a58      	ldr	r2, [pc, #352]	; (8002dd4 <HAL_GPIO_Init+0x32c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d037      	beq.n	8002ce6 <HAL_GPIO_Init+0x23e>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a57      	ldr	r2, [pc, #348]	; (8002dd8 <HAL_GPIO_Init+0x330>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d031      	beq.n	8002ce2 <HAL_GPIO_Init+0x23a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a56      	ldr	r2, [pc, #344]	; (8002ddc <HAL_GPIO_Init+0x334>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d02b      	beq.n	8002cde <HAL_GPIO_Init+0x236>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a55      	ldr	r2, [pc, #340]	; (8002de0 <HAL_GPIO_Init+0x338>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d025      	beq.n	8002cda <HAL_GPIO_Init+0x232>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a54      	ldr	r2, [pc, #336]	; (8002de4 <HAL_GPIO_Init+0x33c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d01f      	beq.n	8002cd6 <HAL_GPIO_Init+0x22e>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a53      	ldr	r2, [pc, #332]	; (8002de8 <HAL_GPIO_Init+0x340>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d019      	beq.n	8002cd2 <HAL_GPIO_Init+0x22a>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a52      	ldr	r2, [pc, #328]	; (8002dec <HAL_GPIO_Init+0x344>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d013      	beq.n	8002cce <HAL_GPIO_Init+0x226>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a51      	ldr	r2, [pc, #324]	; (8002df0 <HAL_GPIO_Init+0x348>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d00d      	beq.n	8002cca <HAL_GPIO_Init+0x222>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a50      	ldr	r2, [pc, #320]	; (8002df4 <HAL_GPIO_Init+0x34c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d007      	beq.n	8002cc6 <HAL_GPIO_Init+0x21e>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a4f      	ldr	r2, [pc, #316]	; (8002df8 <HAL_GPIO_Init+0x350>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d101      	bne.n	8002cc2 <HAL_GPIO_Init+0x21a>
 8002cbe:	2309      	movs	r3, #9
 8002cc0:	e012      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002cc2:	230a      	movs	r3, #10
 8002cc4:	e010      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002cc6:	2308      	movs	r3, #8
 8002cc8:	e00e      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002cca:	2307      	movs	r3, #7
 8002ccc:	e00c      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002cce:	2306      	movs	r3, #6
 8002cd0:	e00a      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002cd2:	2305      	movs	r3, #5
 8002cd4:	e008      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002cd6:	2304      	movs	r3, #4
 8002cd8:	e006      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e004      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e002      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	69fa      	ldr	r2, [r7, #28]
 8002cea:	f002 0203 	and.w	r2, r2, #3
 8002cee:	0092      	lsls	r2, r2, #2
 8002cf0:	4093      	lsls	r3, r2
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cf8:	4935      	ldr	r1, [pc, #212]	; (8002dd0 <HAL_GPIO_Init+0x328>)
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	089b      	lsrs	r3, r3, #2
 8002cfe:	3302      	adds	r3, #2
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d06:	4b3d      	ldr	r3, [pc, #244]	; (8002dfc <HAL_GPIO_Init+0x354>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d2a:	4a34      	ldr	r2, [pc, #208]	; (8002dfc <HAL_GPIO_Init+0x354>)
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d30:	4b32      	ldr	r3, [pc, #200]	; (8002dfc <HAL_GPIO_Init+0x354>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d54:	4a29      	ldr	r2, [pc, #164]	; (8002dfc <HAL_GPIO_Init+0x354>)
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d5a:	4b28      	ldr	r3, [pc, #160]	; (8002dfc <HAL_GPIO_Init+0x354>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	43db      	mvns	r3, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4013      	ands	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d7e:	4a1f      	ldr	r2, [pc, #124]	; (8002dfc <HAL_GPIO_Init+0x354>)
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d84:	4b1d      	ldr	r3, [pc, #116]	; (8002dfc <HAL_GPIO_Init+0x354>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4013      	ands	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002da8:	4a14      	ldr	r2, [pc, #80]	; (8002dfc <HAL_GPIO_Init+0x354>)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	3301      	adds	r3, #1
 8002db2:	61fb      	str	r3, [r7, #28]
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	2b0f      	cmp	r3, #15
 8002db8:	f67f ae84 	bls.w	8002ac4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	bf00      	nop
 8002dc0:	3724      	adds	r7, #36	; 0x24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	40013800 	.word	0x40013800
 8002dd4:	40020000 	.word	0x40020000
 8002dd8:	40020400 	.word	0x40020400
 8002ddc:	40020800 	.word	0x40020800
 8002de0:	40020c00 	.word	0x40020c00
 8002de4:	40021000 	.word	0x40021000
 8002de8:	40021400 	.word	0x40021400
 8002dec:	40021800 	.word	0x40021800
 8002df0:	40021c00 	.word	0x40021c00
 8002df4:	40022000 	.word	0x40022000
 8002df8:	40022400 	.word	0x40022400
 8002dfc:	40013c00 	.word	0x40013c00

08002e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	807b      	strh	r3, [r7, #2]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e10:	787b      	ldrb	r3, [r7, #1]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e16:	887a      	ldrh	r2, [r7, #2]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e1c:	e003      	b.n	8002e26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e1e:	887b      	ldrh	r3, [r7, #2]
 8002e20:	041a      	lsls	r2, r3, #16
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	619a      	str	r2, [r3, #24]
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
	...

08002e34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e3e:	4b08      	ldr	r3, [pc, #32]	; (8002e60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e40:	695a      	ldr	r2, [r3, #20]
 8002e42:	88fb      	ldrh	r3, [r7, #6]
 8002e44:	4013      	ands	r3, r2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d006      	beq.n	8002e58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e4a:	4a05      	ldr	r2, [pc, #20]	; (8002e60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e4c:	88fb      	ldrh	r3, [r7, #6]
 8002e4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e50:	88fb      	ldrh	r3, [r7, #6]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fd fbb6 	bl	80005c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e58:	bf00      	nop
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40013c00 	.word	0x40013c00

08002e64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e12b      	b.n	80030ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d106      	bne.n	8002e90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7fe fb84 	bl	8001598 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2224      	movs	r2, #36	; 0x24
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 0201 	bic.w	r2, r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002eb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ec6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ec8:	f000 fdd6 	bl	8003a78 <HAL_RCC_GetPCLK1Freq>
 8002ecc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	4a81      	ldr	r2, [pc, #516]	; (80030d8 <HAL_I2C_Init+0x274>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d807      	bhi.n	8002ee8 <HAL_I2C_Init+0x84>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4a80      	ldr	r2, [pc, #512]	; (80030dc <HAL_I2C_Init+0x278>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	bf94      	ite	ls
 8002ee0:	2301      	movls	r3, #1
 8002ee2:	2300      	movhi	r3, #0
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	e006      	b.n	8002ef6 <HAL_I2C_Init+0x92>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4a7d      	ldr	r2, [pc, #500]	; (80030e0 <HAL_I2C_Init+0x27c>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	bf94      	ite	ls
 8002ef0:	2301      	movls	r3, #1
 8002ef2:	2300      	movhi	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e0e7      	b.n	80030ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	4a78      	ldr	r2, [pc, #480]	; (80030e4 <HAL_I2C_Init+0x280>)
 8002f02:	fba2 2303 	umull	r2, r3, r2, r3
 8002f06:	0c9b      	lsrs	r3, r3, #18
 8002f08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	4a6a      	ldr	r2, [pc, #424]	; (80030d8 <HAL_I2C_Init+0x274>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d802      	bhi.n	8002f38 <HAL_I2C_Init+0xd4>
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	3301      	adds	r3, #1
 8002f36:	e009      	b.n	8002f4c <HAL_I2C_Init+0xe8>
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f3e:	fb02 f303 	mul.w	r3, r2, r3
 8002f42:	4a69      	ldr	r2, [pc, #420]	; (80030e8 <HAL_I2C_Init+0x284>)
 8002f44:	fba2 2303 	umull	r2, r3, r2, r3
 8002f48:	099b      	lsrs	r3, r3, #6
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6812      	ldr	r2, [r2, #0]
 8002f50:	430b      	orrs	r3, r1
 8002f52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	495c      	ldr	r1, [pc, #368]	; (80030d8 <HAL_I2C_Init+0x274>)
 8002f68:	428b      	cmp	r3, r1
 8002f6a:	d819      	bhi.n	8002fa0 <HAL_I2C_Init+0x13c>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	1e59      	subs	r1, r3, #1
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f7a:	1c59      	adds	r1, r3, #1
 8002f7c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f80:	400b      	ands	r3, r1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00a      	beq.n	8002f9c <HAL_I2C_Init+0x138>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	1e59      	subs	r1, r3, #1
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f94:	3301      	adds	r3, #1
 8002f96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f9a:	e051      	b.n	8003040 <HAL_I2C_Init+0x1dc>
 8002f9c:	2304      	movs	r3, #4
 8002f9e:	e04f      	b.n	8003040 <HAL_I2C_Init+0x1dc>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d111      	bne.n	8002fcc <HAL_I2C_Init+0x168>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1e58      	subs	r0, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6859      	ldr	r1, [r3, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	440b      	add	r3, r1
 8002fb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fba:	3301      	adds	r3, #1
 8002fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	bf0c      	ite	eq
 8002fc4:	2301      	moveq	r3, #1
 8002fc6:	2300      	movne	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	e012      	b.n	8002ff2 <HAL_I2C_Init+0x18e>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	1e58      	subs	r0, r3, #1
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6859      	ldr	r1, [r3, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	0099      	lsls	r1, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	bf0c      	ite	eq
 8002fec:	2301      	moveq	r3, #1
 8002fee:	2300      	movne	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_I2C_Init+0x196>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e022      	b.n	8003040 <HAL_I2C_Init+0x1dc>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10e      	bne.n	8003020 <HAL_I2C_Init+0x1bc>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	1e58      	subs	r0, r3, #1
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6859      	ldr	r1, [r3, #4]
 800300a:	460b      	mov	r3, r1
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	440b      	add	r3, r1
 8003010:	fbb0 f3f3 	udiv	r3, r0, r3
 8003014:	3301      	adds	r3, #1
 8003016:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800301a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800301e:	e00f      	b.n	8003040 <HAL_I2C_Init+0x1dc>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	1e58      	subs	r0, r3, #1
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6859      	ldr	r1, [r3, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	0099      	lsls	r1, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	fbb0 f3f3 	udiv	r3, r0, r3
 8003036:	3301      	adds	r3, #1
 8003038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800303c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	6809      	ldr	r1, [r1, #0]
 8003044:	4313      	orrs	r3, r2
 8003046:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69da      	ldr	r2, [r3, #28]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800306e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	6911      	ldr	r1, [r2, #16]
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	68d2      	ldr	r2, [r2, #12]
 800307a:	4311      	orrs	r1, r2
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6812      	ldr	r2, [r2, #0]
 8003080:	430b      	orrs	r3, r1
 8003082:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	695a      	ldr	r2, [r3, #20]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0201 	orr.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2220      	movs	r2, #32
 80030ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	000186a0 	.word	0x000186a0
 80030dc:	001e847f 	.word	0x001e847f
 80030e0:	003d08ff 	.word	0x003d08ff
 80030e4:	431bde83 	.word	0x431bde83
 80030e8:	10624dd3 	.word	0x10624dd3

080030ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b20      	cmp	r3, #32
 8003100:	d129      	bne.n	8003156 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2224      	movs	r2, #36	; 0x24
 8003106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0201 	bic.w	r2, r2, #1
 8003118:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 0210 	bic.w	r2, r2, #16
 8003128:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f042 0201 	orr.w	r2, r2, #1
 8003148:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2220      	movs	r2, #32
 800314e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003152:	2300      	movs	r3, #0
 8003154:	e000      	b.n	8003158 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003156:	2302      	movs	r3, #2
  }
}
 8003158:	4618      	mov	r0, r3
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800316e:	2300      	movs	r3, #0
 8003170:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b20      	cmp	r3, #32
 800317c:	d12a      	bne.n	80031d4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2224      	movs	r2, #36	; 0x24
 8003182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0201 	bic.w	r2, r2, #1
 8003194:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800319e:	89fb      	ldrh	r3, [r7, #14]
 80031a0:	f023 030f 	bic.w	r3, r3, #15
 80031a4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	89fb      	ldrh	r3, [r7, #14]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	89fa      	ldrh	r2, [r7, #14]
 80031b6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0201 	orr.w	r2, r2, #1
 80031c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2220      	movs	r2, #32
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80031d0:	2300      	movs	r3, #0
 80031d2:	e000      	b.n	80031d6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80031d4:	2302      	movs	r3, #2
  }
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
	...

080031e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e264      	b.n	80036c0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d075      	beq.n	80032ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003202:	4ba3      	ldr	r3, [pc, #652]	; (8003490 <HAL_RCC_OscConfig+0x2ac>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 030c 	and.w	r3, r3, #12
 800320a:	2b04      	cmp	r3, #4
 800320c:	d00c      	beq.n	8003228 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800320e:	4ba0      	ldr	r3, [pc, #640]	; (8003490 <HAL_RCC_OscConfig+0x2ac>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003216:	2b08      	cmp	r3, #8
 8003218:	d112      	bne.n	8003240 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800321a:	4b9d      	ldr	r3, [pc, #628]	; (8003490 <HAL_RCC_OscConfig+0x2ac>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003222:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003226:	d10b      	bne.n	8003240 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003228:	4b99      	ldr	r3, [pc, #612]	; (8003490 <HAL_RCC_OscConfig+0x2ac>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d05b      	beq.n	80032ec <HAL_RCC_OscConfig+0x108>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d157      	bne.n	80032ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e23f      	b.n	80036c0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003248:	d106      	bne.n	8003258 <HAL_RCC_OscConfig+0x74>
 800324a:	4b91      	ldr	r3, [pc, #580]	; (8003490 <HAL_RCC_OscConfig+0x2ac>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a90      	ldr	r2, [pc, #576]	; (8003490 <HAL_RCC_OscConfig+0x2ac>)
 8003250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	e01d      	b.n	8003294 <HAL_RCC_OscConfig+0xb0>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003260:	d10c      	bne.n	800327c <HAL_RCC_OscConfig+0x98>
 8003262:	4b8b      	ldr	r3, [pc, #556]	; (8003490 <HAL_RCC_OscConfig+0x2ac>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a8a      	ldr	r2, [pc, #552]	; (8003490 <HAL_RCC_OscConfig+0x2ac>)
 8003268:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	4b88      	ldr	r3, [pc, #544]	; (8003490 <HAL_RCC_OscConfig+0x2ac>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a87      	ldr	r2, [pc, #540]	; (8003490 <HAL_RCC_OscConfig+0x2ac>)
 8003274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	e00b      	b.n	8003294 <HAL_RCC_OscConfig+0xb0>
 800327c:	4b84      	ldr	r3, [pc, #528]	; (8003490 <HAL_RCC_OscConfig+0x2ac>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a83      	ldr	r2, [pc, #524]	; (8003490 <HAL_RCC_OscConfig+0x2ac>)
 8003282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	4b81      	ldr	r3, [pc, #516]	; (8003490 <HAL_RCC_OscConfig+0x2ac>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a80      	ldr	r2, [pc, #512]	; (8003490 <HAL_RCC_OscConfig+0x2ac>)
 800328e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003292:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d013      	beq.n	80032c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329c:	f7fe fd7a 	bl	8001d94 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032a4:	f7fe fd76 	bl	8001d94 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b64      	cmp	r3, #100	; 0x64
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e204      	b.n	80036c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b6:	4b76      	ldr	r3, [pc, #472]	; (8003490 <HAL_RCC_OscConfig+0x2ac>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0f0      	beq.n	80032a4 <HAL_RCC_OscConfig+0xc0>
 80032c2:	e014      	b.n	80032ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c4:	f7fe fd66 	bl	8001d94 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032cc:	f7fe fd62 	bl	8001d94 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b64      	cmp	r3, #100	; 0x64
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e1f0      	b.n	80036c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032de:	4b6c      	ldr	r3, [pc, #432]	; (8003490 <HAL_RCC_OscConfig+0x2ac>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0xe8>
 80032ea:	e000      	b.n	80032ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d063      	beq.n	80033c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032fa:	4b65      	ldr	r3, [pc, #404]	; (8003490 <HAL_RCC_OscConfig+0x2ac>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 030c 	and.w	r3, r3, #12
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00b      	beq.n	800331e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003306:	4b62      	ldr	r3, [pc, #392]	; (8003490 <HAL_RCC_OscConfig+0x2ac>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800330e:	2b08      	cmp	r3, #8
 8003310:	d11c      	bne.n	800334c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003312:	4b5f      	ldr	r3, [pc, #380]	; (8003490 <HAL_RCC_OscConfig+0x2ac>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d116      	bne.n	800334c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800331e:	4b5c      	ldr	r3, [pc, #368]	; (8003490 <HAL_RCC_OscConfig+0x2ac>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d005      	beq.n	8003336 <HAL_RCC_OscConfig+0x152>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d001      	beq.n	8003336 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e1c4      	b.n	80036c0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003336:	4b56      	ldr	r3, [pc, #344]	; (8003490 <HAL_RCC_OscConfig+0x2ac>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	4952      	ldr	r1, [pc, #328]	; (8003490 <HAL_RCC_OscConfig+0x2ac>)
 8003346:	4313      	orrs	r3, r2
 8003348:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800334a:	e03a      	b.n	80033c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d020      	beq.n	8003396 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003354:	4b4f      	ldr	r3, [pc, #316]	; (8003494 <HAL_RCC_OscConfig+0x2b0>)
 8003356:	2201      	movs	r2, #1
 8003358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335a:	f7fe fd1b 	bl	8001d94 <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003360:	e008      	b.n	8003374 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003362:	f7fe fd17 	bl	8001d94 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e1a5      	b.n	80036c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003374:	4b46      	ldr	r3, [pc, #280]	; (8003490 <HAL_RCC_OscConfig+0x2ac>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0f0      	beq.n	8003362 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003380:	4b43      	ldr	r3, [pc, #268]	; (8003490 <HAL_RCC_OscConfig+0x2ac>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	4940      	ldr	r1, [pc, #256]	; (8003490 <HAL_RCC_OscConfig+0x2ac>)
 8003390:	4313      	orrs	r3, r2
 8003392:	600b      	str	r3, [r1, #0]
 8003394:	e015      	b.n	80033c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003396:	4b3f      	ldr	r3, [pc, #252]	; (8003494 <HAL_RCC_OscConfig+0x2b0>)
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339c:	f7fe fcfa 	bl	8001d94 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033a4:	f7fe fcf6 	bl	8001d94 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e184      	b.n	80036c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033b6:	4b36      	ldr	r3, [pc, #216]	; (8003490 <HAL_RCC_OscConfig+0x2ac>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1f0      	bne.n	80033a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d030      	beq.n	8003430 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d016      	beq.n	8003404 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033d6:	4b30      	ldr	r3, [pc, #192]	; (8003498 <HAL_RCC_OscConfig+0x2b4>)
 80033d8:	2201      	movs	r2, #1
 80033da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033dc:	f7fe fcda 	bl	8001d94 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033e4:	f7fe fcd6 	bl	8001d94 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e164      	b.n	80036c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033f6:	4b26      	ldr	r3, [pc, #152]	; (8003490 <HAL_RCC_OscConfig+0x2ac>)
 80033f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0f0      	beq.n	80033e4 <HAL_RCC_OscConfig+0x200>
 8003402:	e015      	b.n	8003430 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003404:	4b24      	ldr	r3, [pc, #144]	; (8003498 <HAL_RCC_OscConfig+0x2b4>)
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800340a:	f7fe fcc3 	bl	8001d94 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003412:	f7fe fcbf 	bl	8001d94 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e14d      	b.n	80036c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003424:	4b1a      	ldr	r3, [pc, #104]	; (8003490 <HAL_RCC_OscConfig+0x2ac>)
 8003426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1f0      	bne.n	8003412 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 80a0 	beq.w	800357e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800343e:	2300      	movs	r3, #0
 8003440:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003442:	4b13      	ldr	r3, [pc, #76]	; (8003490 <HAL_RCC_OscConfig+0x2ac>)
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10f      	bne.n	800346e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800344e:	2300      	movs	r3, #0
 8003450:	60bb      	str	r3, [r7, #8]
 8003452:	4b0f      	ldr	r3, [pc, #60]	; (8003490 <HAL_RCC_OscConfig+0x2ac>)
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	4a0e      	ldr	r2, [pc, #56]	; (8003490 <HAL_RCC_OscConfig+0x2ac>)
 8003458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800345c:	6413      	str	r3, [r2, #64]	; 0x40
 800345e:	4b0c      	ldr	r3, [pc, #48]	; (8003490 <HAL_RCC_OscConfig+0x2ac>)
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003466:	60bb      	str	r3, [r7, #8]
 8003468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800346a:	2301      	movs	r3, #1
 800346c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346e:	4b0b      	ldr	r3, [pc, #44]	; (800349c <HAL_RCC_OscConfig+0x2b8>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003476:	2b00      	cmp	r3, #0
 8003478:	d121      	bne.n	80034be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800347a:	4b08      	ldr	r3, [pc, #32]	; (800349c <HAL_RCC_OscConfig+0x2b8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a07      	ldr	r2, [pc, #28]	; (800349c <HAL_RCC_OscConfig+0x2b8>)
 8003480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003486:	f7fe fc85 	bl	8001d94 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800348c:	e011      	b.n	80034b2 <HAL_RCC_OscConfig+0x2ce>
 800348e:	bf00      	nop
 8003490:	40023800 	.word	0x40023800
 8003494:	42470000 	.word	0x42470000
 8003498:	42470e80 	.word	0x42470e80
 800349c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034a0:	f7fe fc78 	bl	8001d94 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e106      	b.n	80036c0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b2:	4b85      	ldr	r3, [pc, #532]	; (80036c8 <HAL_RCC_OscConfig+0x4e4>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0f0      	beq.n	80034a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d106      	bne.n	80034d4 <HAL_RCC_OscConfig+0x2f0>
 80034c6:	4b81      	ldr	r3, [pc, #516]	; (80036cc <HAL_RCC_OscConfig+0x4e8>)
 80034c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ca:	4a80      	ldr	r2, [pc, #512]	; (80036cc <HAL_RCC_OscConfig+0x4e8>)
 80034cc:	f043 0301 	orr.w	r3, r3, #1
 80034d0:	6713      	str	r3, [r2, #112]	; 0x70
 80034d2:	e01c      	b.n	800350e <HAL_RCC_OscConfig+0x32a>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	2b05      	cmp	r3, #5
 80034da:	d10c      	bne.n	80034f6 <HAL_RCC_OscConfig+0x312>
 80034dc:	4b7b      	ldr	r3, [pc, #492]	; (80036cc <HAL_RCC_OscConfig+0x4e8>)
 80034de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e0:	4a7a      	ldr	r2, [pc, #488]	; (80036cc <HAL_RCC_OscConfig+0x4e8>)
 80034e2:	f043 0304 	orr.w	r3, r3, #4
 80034e6:	6713      	str	r3, [r2, #112]	; 0x70
 80034e8:	4b78      	ldr	r3, [pc, #480]	; (80036cc <HAL_RCC_OscConfig+0x4e8>)
 80034ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ec:	4a77      	ldr	r2, [pc, #476]	; (80036cc <HAL_RCC_OscConfig+0x4e8>)
 80034ee:	f043 0301 	orr.w	r3, r3, #1
 80034f2:	6713      	str	r3, [r2, #112]	; 0x70
 80034f4:	e00b      	b.n	800350e <HAL_RCC_OscConfig+0x32a>
 80034f6:	4b75      	ldr	r3, [pc, #468]	; (80036cc <HAL_RCC_OscConfig+0x4e8>)
 80034f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fa:	4a74      	ldr	r2, [pc, #464]	; (80036cc <HAL_RCC_OscConfig+0x4e8>)
 80034fc:	f023 0301 	bic.w	r3, r3, #1
 8003500:	6713      	str	r3, [r2, #112]	; 0x70
 8003502:	4b72      	ldr	r3, [pc, #456]	; (80036cc <HAL_RCC_OscConfig+0x4e8>)
 8003504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003506:	4a71      	ldr	r2, [pc, #452]	; (80036cc <HAL_RCC_OscConfig+0x4e8>)
 8003508:	f023 0304 	bic.w	r3, r3, #4
 800350c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d015      	beq.n	8003542 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003516:	f7fe fc3d 	bl	8001d94 <HAL_GetTick>
 800351a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800351c:	e00a      	b.n	8003534 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800351e:	f7fe fc39 	bl	8001d94 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	f241 3288 	movw	r2, #5000	; 0x1388
 800352c:	4293      	cmp	r3, r2
 800352e:	d901      	bls.n	8003534 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e0c5      	b.n	80036c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003534:	4b65      	ldr	r3, [pc, #404]	; (80036cc <HAL_RCC_OscConfig+0x4e8>)
 8003536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0ee      	beq.n	800351e <HAL_RCC_OscConfig+0x33a>
 8003540:	e014      	b.n	800356c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003542:	f7fe fc27 	bl	8001d94 <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003548:	e00a      	b.n	8003560 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800354a:	f7fe fc23 	bl	8001d94 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	f241 3288 	movw	r2, #5000	; 0x1388
 8003558:	4293      	cmp	r3, r2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e0af      	b.n	80036c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003560:	4b5a      	ldr	r3, [pc, #360]	; (80036cc <HAL_RCC_OscConfig+0x4e8>)
 8003562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1ee      	bne.n	800354a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800356c:	7dfb      	ldrb	r3, [r7, #23]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d105      	bne.n	800357e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003572:	4b56      	ldr	r3, [pc, #344]	; (80036cc <HAL_RCC_OscConfig+0x4e8>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	4a55      	ldr	r2, [pc, #340]	; (80036cc <HAL_RCC_OscConfig+0x4e8>)
 8003578:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800357c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 809b 	beq.w	80036be <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003588:	4b50      	ldr	r3, [pc, #320]	; (80036cc <HAL_RCC_OscConfig+0x4e8>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f003 030c 	and.w	r3, r3, #12
 8003590:	2b08      	cmp	r3, #8
 8003592:	d05c      	beq.n	800364e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	2b02      	cmp	r3, #2
 800359a:	d141      	bne.n	8003620 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800359c:	4b4c      	ldr	r3, [pc, #304]	; (80036d0 <HAL_RCC_OscConfig+0x4ec>)
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a2:	f7fe fbf7 	bl	8001d94 <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035aa:	f7fe fbf3 	bl	8001d94 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e081      	b.n	80036c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035bc:	4b43      	ldr	r3, [pc, #268]	; (80036cc <HAL_RCC_OscConfig+0x4e8>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1f0      	bne.n	80035aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	69da      	ldr	r2, [r3, #28]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	431a      	orrs	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	019b      	lsls	r3, r3, #6
 80035d8:	431a      	orrs	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035de:	085b      	lsrs	r3, r3, #1
 80035e0:	3b01      	subs	r3, #1
 80035e2:	041b      	lsls	r3, r3, #16
 80035e4:	431a      	orrs	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ea:	061b      	lsls	r3, r3, #24
 80035ec:	4937      	ldr	r1, [pc, #220]	; (80036cc <HAL_RCC_OscConfig+0x4e8>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035f2:	4b37      	ldr	r3, [pc, #220]	; (80036d0 <HAL_RCC_OscConfig+0x4ec>)
 80035f4:	2201      	movs	r2, #1
 80035f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f8:	f7fe fbcc 	bl	8001d94 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003600:	f7fe fbc8 	bl	8001d94 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e056      	b.n	80036c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003612:	4b2e      	ldr	r3, [pc, #184]	; (80036cc <HAL_RCC_OscConfig+0x4e8>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f0      	beq.n	8003600 <HAL_RCC_OscConfig+0x41c>
 800361e:	e04e      	b.n	80036be <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003620:	4b2b      	ldr	r3, [pc, #172]	; (80036d0 <HAL_RCC_OscConfig+0x4ec>)
 8003622:	2200      	movs	r2, #0
 8003624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003626:	f7fe fbb5 	bl	8001d94 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800362e:	f7fe fbb1 	bl	8001d94 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e03f      	b.n	80036c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003640:	4b22      	ldr	r3, [pc, #136]	; (80036cc <HAL_RCC_OscConfig+0x4e8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1f0      	bne.n	800362e <HAL_RCC_OscConfig+0x44a>
 800364c:	e037      	b.n	80036be <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d101      	bne.n	800365a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e032      	b.n	80036c0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800365a:	4b1c      	ldr	r3, [pc, #112]	; (80036cc <HAL_RCC_OscConfig+0x4e8>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d028      	beq.n	80036ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003672:	429a      	cmp	r2, r3
 8003674:	d121      	bne.n	80036ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003680:	429a      	cmp	r2, r3
 8003682:	d11a      	bne.n	80036ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800368a:	4013      	ands	r3, r2
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003690:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003692:	4293      	cmp	r3, r2
 8003694:	d111      	bne.n	80036ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a0:	085b      	lsrs	r3, r3, #1
 80036a2:	3b01      	subs	r3, #1
 80036a4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d107      	bne.n	80036ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d001      	beq.n	80036be <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e000      	b.n	80036c0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3718      	adds	r7, #24
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40007000 	.word	0x40007000
 80036cc:	40023800 	.word	0x40023800
 80036d0:	42470060 	.word	0x42470060

080036d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e0cc      	b.n	8003882 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036e8:	4b68      	ldr	r3, [pc, #416]	; (800388c <HAL_RCC_ClockConfig+0x1b8>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 030f 	and.w	r3, r3, #15
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d90c      	bls.n	8003710 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f6:	4b65      	ldr	r3, [pc, #404]	; (800388c <HAL_RCC_ClockConfig+0x1b8>)
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fe:	4b63      	ldr	r3, [pc, #396]	; (800388c <HAL_RCC_ClockConfig+0x1b8>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	429a      	cmp	r2, r3
 800370a:	d001      	beq.n	8003710 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e0b8      	b.n	8003882 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d020      	beq.n	800375e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0304 	and.w	r3, r3, #4
 8003724:	2b00      	cmp	r3, #0
 8003726:	d005      	beq.n	8003734 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003728:	4b59      	ldr	r3, [pc, #356]	; (8003890 <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	4a58      	ldr	r2, [pc, #352]	; (8003890 <HAL_RCC_ClockConfig+0x1bc>)
 800372e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003732:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0308 	and.w	r3, r3, #8
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003740:	4b53      	ldr	r3, [pc, #332]	; (8003890 <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	4a52      	ldr	r2, [pc, #328]	; (8003890 <HAL_RCC_ClockConfig+0x1bc>)
 8003746:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800374a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800374c:	4b50      	ldr	r3, [pc, #320]	; (8003890 <HAL_RCC_ClockConfig+0x1bc>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	494d      	ldr	r1, [pc, #308]	; (8003890 <HAL_RCC_ClockConfig+0x1bc>)
 800375a:	4313      	orrs	r3, r2
 800375c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d044      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d107      	bne.n	8003782 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003772:	4b47      	ldr	r3, [pc, #284]	; (8003890 <HAL_RCC_ClockConfig+0x1bc>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d119      	bne.n	80037b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e07f      	b.n	8003882 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b02      	cmp	r3, #2
 8003788:	d003      	beq.n	8003792 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800378e:	2b03      	cmp	r3, #3
 8003790:	d107      	bne.n	80037a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003792:	4b3f      	ldr	r3, [pc, #252]	; (8003890 <HAL_RCC_ClockConfig+0x1bc>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d109      	bne.n	80037b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e06f      	b.n	8003882 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a2:	4b3b      	ldr	r3, [pc, #236]	; (8003890 <HAL_RCC_ClockConfig+0x1bc>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e067      	b.n	8003882 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037b2:	4b37      	ldr	r3, [pc, #220]	; (8003890 <HAL_RCC_ClockConfig+0x1bc>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f023 0203 	bic.w	r2, r3, #3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	4934      	ldr	r1, [pc, #208]	; (8003890 <HAL_RCC_ClockConfig+0x1bc>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037c4:	f7fe fae6 	bl	8001d94 <HAL_GetTick>
 80037c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ca:	e00a      	b.n	80037e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037cc:	f7fe fae2 	bl	8001d94 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037da:	4293      	cmp	r3, r2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e04f      	b.n	8003882 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e2:	4b2b      	ldr	r3, [pc, #172]	; (8003890 <HAL_RCC_ClockConfig+0x1bc>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 020c 	and.w	r2, r3, #12
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d1eb      	bne.n	80037cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037f4:	4b25      	ldr	r3, [pc, #148]	; (800388c <HAL_RCC_ClockConfig+0x1b8>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 030f 	and.w	r3, r3, #15
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d20c      	bcs.n	800381c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003802:	4b22      	ldr	r3, [pc, #136]	; (800388c <HAL_RCC_ClockConfig+0x1b8>)
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800380a:	4b20      	ldr	r3, [pc, #128]	; (800388c <HAL_RCC_ClockConfig+0x1b8>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	429a      	cmp	r2, r3
 8003816:	d001      	beq.n	800381c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e032      	b.n	8003882 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b00      	cmp	r3, #0
 8003826:	d008      	beq.n	800383a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003828:	4b19      	ldr	r3, [pc, #100]	; (8003890 <HAL_RCC_ClockConfig+0x1bc>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	4916      	ldr	r1, [pc, #88]	; (8003890 <HAL_RCC_ClockConfig+0x1bc>)
 8003836:	4313      	orrs	r3, r2
 8003838:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0308 	and.w	r3, r3, #8
 8003842:	2b00      	cmp	r3, #0
 8003844:	d009      	beq.n	800385a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003846:	4b12      	ldr	r3, [pc, #72]	; (8003890 <HAL_RCC_ClockConfig+0x1bc>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	490e      	ldr	r1, [pc, #56]	; (8003890 <HAL_RCC_ClockConfig+0x1bc>)
 8003856:	4313      	orrs	r3, r2
 8003858:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800385a:	f000 f821 	bl	80038a0 <HAL_RCC_GetSysClockFreq>
 800385e:	4602      	mov	r2, r0
 8003860:	4b0b      	ldr	r3, [pc, #44]	; (8003890 <HAL_RCC_ClockConfig+0x1bc>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	091b      	lsrs	r3, r3, #4
 8003866:	f003 030f 	and.w	r3, r3, #15
 800386a:	490a      	ldr	r1, [pc, #40]	; (8003894 <HAL_RCC_ClockConfig+0x1c0>)
 800386c:	5ccb      	ldrb	r3, [r1, r3]
 800386e:	fa22 f303 	lsr.w	r3, r2, r3
 8003872:	4a09      	ldr	r2, [pc, #36]	; (8003898 <HAL_RCC_ClockConfig+0x1c4>)
 8003874:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003876:	4b09      	ldr	r3, [pc, #36]	; (800389c <HAL_RCC_ClockConfig+0x1c8>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f7fe f956 	bl	8001b2c <HAL_InitTick>

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	40023c00 	.word	0x40023c00
 8003890:	40023800 	.word	0x40023800
 8003894:	08006764 	.word	0x08006764
 8003898:	20000008 	.word	0x20000008
 800389c:	2000000c 	.word	0x2000000c

080038a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80038a4:	b084      	sub	sp, #16
 80038a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	607b      	str	r3, [r7, #4]
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	2300      	movs	r3, #0
 80038b2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038b8:	4b67      	ldr	r3, [pc, #412]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f003 030c 	and.w	r3, r3, #12
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d00d      	beq.n	80038e0 <HAL_RCC_GetSysClockFreq+0x40>
 80038c4:	2b08      	cmp	r3, #8
 80038c6:	f200 80bd 	bhi.w	8003a44 <HAL_RCC_GetSysClockFreq+0x1a4>
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d002      	beq.n	80038d4 <HAL_RCC_GetSysClockFreq+0x34>
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	d003      	beq.n	80038da <HAL_RCC_GetSysClockFreq+0x3a>
 80038d2:	e0b7      	b.n	8003a44 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038d4:	4b61      	ldr	r3, [pc, #388]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80038d6:	60bb      	str	r3, [r7, #8]
       break;
 80038d8:	e0b7      	b.n	8003a4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038da:	4b60      	ldr	r3, [pc, #384]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80038dc:	60bb      	str	r3, [r7, #8]
      break;
 80038de:	e0b4      	b.n	8003a4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038e0:	4b5d      	ldr	r3, [pc, #372]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038ea:	4b5b      	ldr	r3, [pc, #364]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d04d      	beq.n	8003992 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038f6:	4b58      	ldr	r3, [pc, #352]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	099b      	lsrs	r3, r3, #6
 80038fc:	461a      	mov	r2, r3
 80038fe:	f04f 0300 	mov.w	r3, #0
 8003902:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003906:	f04f 0100 	mov.w	r1, #0
 800390a:	ea02 0800 	and.w	r8, r2, r0
 800390e:	ea03 0901 	and.w	r9, r3, r1
 8003912:	4640      	mov	r0, r8
 8003914:	4649      	mov	r1, r9
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	f04f 0300 	mov.w	r3, #0
 800391e:	014b      	lsls	r3, r1, #5
 8003920:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003924:	0142      	lsls	r2, r0, #5
 8003926:	4610      	mov	r0, r2
 8003928:	4619      	mov	r1, r3
 800392a:	ebb0 0008 	subs.w	r0, r0, r8
 800392e:	eb61 0109 	sbc.w	r1, r1, r9
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	f04f 0300 	mov.w	r3, #0
 800393a:	018b      	lsls	r3, r1, #6
 800393c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003940:	0182      	lsls	r2, r0, #6
 8003942:	1a12      	subs	r2, r2, r0
 8003944:	eb63 0301 	sbc.w	r3, r3, r1
 8003948:	f04f 0000 	mov.w	r0, #0
 800394c:	f04f 0100 	mov.w	r1, #0
 8003950:	00d9      	lsls	r1, r3, #3
 8003952:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003956:	00d0      	lsls	r0, r2, #3
 8003958:	4602      	mov	r2, r0
 800395a:	460b      	mov	r3, r1
 800395c:	eb12 0208 	adds.w	r2, r2, r8
 8003960:	eb43 0309 	adc.w	r3, r3, r9
 8003964:	f04f 0000 	mov.w	r0, #0
 8003968:	f04f 0100 	mov.w	r1, #0
 800396c:	0299      	lsls	r1, r3, #10
 800396e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003972:	0290      	lsls	r0, r2, #10
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	4610      	mov	r0, r2
 800397a:	4619      	mov	r1, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	461a      	mov	r2, r3
 8003980:	f04f 0300 	mov.w	r3, #0
 8003984:	f7fc fc8c 	bl	80002a0 <__aeabi_uldivmod>
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
 800398c:	4613      	mov	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	e04a      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003992:	4b31      	ldr	r3, [pc, #196]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	099b      	lsrs	r3, r3, #6
 8003998:	461a      	mov	r2, r3
 800399a:	f04f 0300 	mov.w	r3, #0
 800399e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80039a2:	f04f 0100 	mov.w	r1, #0
 80039a6:	ea02 0400 	and.w	r4, r2, r0
 80039aa:	ea03 0501 	and.w	r5, r3, r1
 80039ae:	4620      	mov	r0, r4
 80039b0:	4629      	mov	r1, r5
 80039b2:	f04f 0200 	mov.w	r2, #0
 80039b6:	f04f 0300 	mov.w	r3, #0
 80039ba:	014b      	lsls	r3, r1, #5
 80039bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80039c0:	0142      	lsls	r2, r0, #5
 80039c2:	4610      	mov	r0, r2
 80039c4:	4619      	mov	r1, r3
 80039c6:	1b00      	subs	r0, r0, r4
 80039c8:	eb61 0105 	sbc.w	r1, r1, r5
 80039cc:	f04f 0200 	mov.w	r2, #0
 80039d0:	f04f 0300 	mov.w	r3, #0
 80039d4:	018b      	lsls	r3, r1, #6
 80039d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80039da:	0182      	lsls	r2, r0, #6
 80039dc:	1a12      	subs	r2, r2, r0
 80039de:	eb63 0301 	sbc.w	r3, r3, r1
 80039e2:	f04f 0000 	mov.w	r0, #0
 80039e6:	f04f 0100 	mov.w	r1, #0
 80039ea:	00d9      	lsls	r1, r3, #3
 80039ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039f0:	00d0      	lsls	r0, r2, #3
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	1912      	adds	r2, r2, r4
 80039f8:	eb45 0303 	adc.w	r3, r5, r3
 80039fc:	f04f 0000 	mov.w	r0, #0
 8003a00:	f04f 0100 	mov.w	r1, #0
 8003a04:	0299      	lsls	r1, r3, #10
 8003a06:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003a0a:	0290      	lsls	r0, r2, #10
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4610      	mov	r0, r2
 8003a12:	4619      	mov	r1, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	461a      	mov	r2, r3
 8003a18:	f04f 0300 	mov.w	r3, #0
 8003a1c:	f7fc fc40 	bl	80002a0 <__aeabi_uldivmod>
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	4613      	mov	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a28:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	0c1b      	lsrs	r3, r3, #16
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	3301      	adds	r3, #1
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a40:	60bb      	str	r3, [r7, #8]
      break;
 8003a42:	e002      	b.n	8003a4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a44:	4b05      	ldr	r3, [pc, #20]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003a46:	60bb      	str	r3, [r7, #8]
      break;
 8003a48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a4a:	68bb      	ldr	r3, [r7, #8]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a56:	bf00      	nop
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	00f42400 	.word	0x00f42400

08003a60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a64:	4b03      	ldr	r3, [pc, #12]	; (8003a74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a66:	681b      	ldr	r3, [r3, #0]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	20000008 	.word	0x20000008

08003a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a7c:	f7ff fff0 	bl	8003a60 <HAL_RCC_GetHCLKFreq>
 8003a80:	4602      	mov	r2, r0
 8003a82:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	0a9b      	lsrs	r3, r3, #10
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	4903      	ldr	r1, [pc, #12]	; (8003a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a8e:	5ccb      	ldrb	r3, [r1, r3]
 8003a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	08006774 	.word	0x08006774

08003aa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003aa4:	f7ff ffdc 	bl	8003a60 <HAL_RCC_GetHCLKFreq>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	0b5b      	lsrs	r3, r3, #13
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	4903      	ldr	r1, [pc, #12]	; (8003ac4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ab6:	5ccb      	ldrb	r3, [r1, r3]
 8003ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	08006774 	.word	0x08006774

08003ac8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	220f      	movs	r2, #15
 8003ad6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ad8:	4b12      	ldr	r3, [pc, #72]	; (8003b24 <HAL_RCC_GetClockConfig+0x5c>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 0203 	and.w	r2, r3, #3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ae4:	4b0f      	ldr	r3, [pc, #60]	; (8003b24 <HAL_RCC_GetClockConfig+0x5c>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003af0:	4b0c      	ldr	r3, [pc, #48]	; (8003b24 <HAL_RCC_GetClockConfig+0x5c>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003afc:	4b09      	ldr	r3, [pc, #36]	; (8003b24 <HAL_RCC_GetClockConfig+0x5c>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	08db      	lsrs	r3, r3, #3
 8003b02:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b0a:	4b07      	ldr	r3, [pc, #28]	; (8003b28 <HAL_RCC_GetClockConfig+0x60>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 020f 	and.w	r2, r3, #15
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	601a      	str	r2, [r3, #0]
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	40023800 	.word	0x40023800
 8003b28:	40023c00 	.word	0x40023c00

08003b2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10b      	bne.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d105      	bne.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d075      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b60:	4bad      	ldr	r3, [pc, #692]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b66:	f7fe f915 	bl	8001d94 <HAL_GetTick>
 8003b6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b6e:	f7fe f911 	bl	8001d94 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e18b      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b80:	4ba6      	ldr	r3, [pc, #664]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1f0      	bne.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d009      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	019a      	lsls	r2, r3, #6
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	071b      	lsls	r3, r3, #28
 8003ba4:	499d      	ldr	r1, [pc, #628]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d01f      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003bb8:	4b98      	ldr	r3, [pc, #608]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bbe:	0f1b      	lsrs	r3, r3, #28
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	019a      	lsls	r2, r3, #6
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	061b      	lsls	r3, r3, #24
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	071b      	lsls	r3, r3, #28
 8003bd8:	4990      	ldr	r1, [pc, #576]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003be0:	4b8e      	ldr	r3, [pc, #568]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003be2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003be6:	f023 021f 	bic.w	r2, r3, #31
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	498a      	ldr	r1, [pc, #552]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00d      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	019a      	lsls	r2, r3, #6
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	061b      	lsls	r3, r3, #24
 8003c10:	431a      	orrs	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	071b      	lsls	r3, r3, #28
 8003c18:	4980      	ldr	r1, [pc, #512]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c20:	4b7d      	ldr	r3, [pc, #500]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003c22:	2201      	movs	r2, #1
 8003c24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c26:	f7fe f8b5 	bl	8001d94 <HAL_GetTick>
 8003c2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c2c:	e008      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c2e:	f7fe f8b1 	bl	8001d94 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e12b      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c40:	4b76      	ldr	r3, [pc, #472]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0f0      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d105      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d079      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c64:	4b6e      	ldr	r3, [pc, #440]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c6a:	f7fe f893 	bl	8001d94 <HAL_GetTick>
 8003c6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c70:	e008      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003c72:	f7fe f88f 	bl	8001d94 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e109      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c84:	4b65      	ldr	r3, [pc, #404]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c90:	d0ef      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0304 	and.w	r3, r3, #4
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d020      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c9e:	4b5f      	ldr	r3, [pc, #380]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca4:	0f1b      	lsrs	r3, r3, #28
 8003ca6:	f003 0307 	and.w	r3, r3, #7
 8003caa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	019a      	lsls	r2, r3, #6
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	061b      	lsls	r3, r3, #24
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	071b      	lsls	r3, r3, #28
 8003cbe:	4957      	ldr	r1, [pc, #348]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003cc6:	4b55      	ldr	r3, [pc, #340]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ccc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	021b      	lsls	r3, r3, #8
 8003cd8:	4950      	ldr	r1, [pc, #320]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0308 	and.w	r3, r3, #8
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d01e      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cec:	4b4b      	ldr	r3, [pc, #300]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf2:	0e1b      	lsrs	r3, r3, #24
 8003cf4:	f003 030f 	and.w	r3, r3, #15
 8003cf8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	019a      	lsls	r2, r3, #6
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	061b      	lsls	r3, r3, #24
 8003d04:	431a      	orrs	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	071b      	lsls	r3, r3, #28
 8003d0c:	4943      	ldr	r1, [pc, #268]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003d14:	4b41      	ldr	r3, [pc, #260]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d1a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	493e      	ldr	r1, [pc, #248]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d2a:	4b3d      	ldr	r3, [pc, #244]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d30:	f7fe f830 	bl	8001d94 <HAL_GetTick>
 8003d34:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d36:	e008      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003d38:	f7fe f82c 	bl	8001d94 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e0a6      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d4a:	4b34      	ldr	r3, [pc, #208]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d56:	d1ef      	bne.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0320 	and.w	r3, r3, #32
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 808d 	beq.w	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d66:	2300      	movs	r3, #0
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	4b2c      	ldr	r3, [pc, #176]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	4a2b      	ldr	r2, [pc, #172]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d74:	6413      	str	r3, [r2, #64]	; 0x40
 8003d76:	4b29      	ldr	r3, [pc, #164]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003d82:	4b28      	ldr	r3, [pc, #160]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a27      	ldr	r2, [pc, #156]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d8c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d8e:	f7fe f801 	bl	8001d94 <HAL_GetTick>
 8003d92:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d94:	e008      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d96:	f7fd fffd 	bl	8001d94 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e077      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003da8:	4b1e      	ldr	r3, [pc, #120]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0f0      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003db4:	4b19      	ldr	r3, [pc, #100]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dbc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d039      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d032      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dd2:	4b12      	ldr	r3, [pc, #72]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dda:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ddc:	4b12      	ldr	r3, [pc, #72]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003dde:	2201      	movs	r2, #1
 8003de0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003de2:	4b11      	ldr	r3, [pc, #68]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003de8:	4a0c      	ldr	r2, [pc, #48]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003dee:	4b0b      	ldr	r3, [pc, #44]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d11e      	bne.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003dfa:	f7fd ffcb 	bl	8001d94 <HAL_GetTick>
 8003dfe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e00:	e014      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e02:	f7fd ffc7 	bl	8001d94 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d90b      	bls.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e03f      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8003e18:	42470068 	.word	0x42470068
 8003e1c:	40023800 	.word	0x40023800
 8003e20:	42470070 	.word	0x42470070
 8003e24:	40007000 	.word	0x40007000
 8003e28:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e2c:	4b1c      	ldr	r3, [pc, #112]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0e4      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e44:	d10d      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003e46:	4b16      	ldr	r3, [pc, #88]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e52:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003e56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e5a:	4911      	ldr	r1, [pc, #68]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	608b      	str	r3, [r1, #8]
 8003e60:	e005      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003e62:	4b0f      	ldr	r3, [pc, #60]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	4a0e      	ldr	r2, [pc, #56]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e68:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e6c:	6093      	str	r3, [r2, #8]
 8003e6e:	4b0c      	ldr	r3, [pc, #48]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e7a:	4909      	ldr	r1, [pc, #36]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0310 	and.w	r3, r3, #16
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d004      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003e92:	4b04      	ldr	r3, [pc, #16]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003e94:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3718      	adds	r7, #24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	424711e0 	.word	0x424711e0

08003ea8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e083      	b.n	8003fc2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	7f5b      	ldrb	r3, [r3, #29]
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d105      	bne.n	8003ed0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7fd fc3a 	bl	8001744 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	22ca      	movs	r2, #202	; 0xca
 8003edc:	625a      	str	r2, [r3, #36]	; 0x24
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2253      	movs	r2, #83	; 0x53
 8003ee4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 fb84 	bl	80045f4 <RTC_EnterInitMode>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d008      	beq.n	8003f04 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	22ff      	movs	r2, #255	; 0xff
 8003ef8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2204      	movs	r2, #4
 8003efe:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e05e      	b.n	8003fc2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6812      	ldr	r2, [r2, #0]
 8003f0e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003f12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f16:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6899      	ldr	r1, [r3, #8]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	68d2      	ldr	r2, [r2, #12]
 8003f3e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6919      	ldr	r1, [r3, #16]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	041a      	lsls	r2, r3, #16
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f62:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 0320 	and.w	r3, r3, #32
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10e      	bne.n	8003f90 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 fb16 	bl	80045a4 <HAL_RTC_WaitForSynchro>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d008      	beq.n	8003f90 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	22ff      	movs	r2, #255	; 0xff
 8003f84:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2204      	movs	r2, #4
 8003f8a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e018      	b.n	8003fc2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f9e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	699a      	ldr	r2, [r3, #24]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	22ff      	movs	r2, #255	; 0xff
 8003fb8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
  }
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003fca:	b590      	push	{r4, r7, lr}
 8003fcc:	b087      	sub	sp, #28
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	60f8      	str	r0, [r7, #12]
 8003fd2:	60b9      	str	r1, [r7, #8]
 8003fd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	7f1b      	ldrb	r3, [r3, #28]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <HAL_RTC_SetTime+0x1c>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e0aa      	b.n	800413c <HAL_RTC_SetTime+0x172>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2202      	movs	r2, #2
 8003ff0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d126      	bne.n	8004046 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004002:	2b00      	cmp	r3, #0
 8004004:	d102      	bne.n	800400c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2200      	movs	r2, #0
 800400a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	4618      	mov	r0, r3
 8004012:	f000 fb1b 	bl	800464c <RTC_ByteToBcd2>
 8004016:	4603      	mov	r3, r0
 8004018:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	785b      	ldrb	r3, [r3, #1]
 800401e:	4618      	mov	r0, r3
 8004020:	f000 fb14 	bl	800464c <RTC_ByteToBcd2>
 8004024:	4603      	mov	r3, r0
 8004026:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004028:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	789b      	ldrb	r3, [r3, #2]
 800402e:	4618      	mov	r0, r3
 8004030:	f000 fb0c 	bl	800464c <RTC_ByteToBcd2>
 8004034:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004036:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	78db      	ldrb	r3, [r3, #3]
 800403e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004040:	4313      	orrs	r3, r2
 8004042:	617b      	str	r3, [r7, #20]
 8004044:	e018      	b.n	8004078 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004050:	2b00      	cmp	r3, #0
 8004052:	d102      	bne.n	800405a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	2200      	movs	r2, #0
 8004058:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	785b      	ldrb	r3, [r3, #1]
 8004064:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004066:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800406c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	78db      	ldrb	r3, [r3, #3]
 8004072:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004074:	4313      	orrs	r3, r2
 8004076:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	22ca      	movs	r2, #202	; 0xca
 800407e:	625a      	str	r2, [r3, #36]	; 0x24
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2253      	movs	r2, #83	; 0x53
 8004086:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 fab3 	bl	80045f4 <RTC_EnterInitMode>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00b      	beq.n	80040ac <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	22ff      	movs	r2, #255	; 0xff
 800409a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2204      	movs	r2, #4
 80040a0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e047      	b.n	800413c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80040b6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80040ba:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689a      	ldr	r2, [r3, #8]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040ca:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6899      	ldr	r1, [r3, #8]
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	68da      	ldr	r2, [r3, #12]
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	431a      	orrs	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	430a      	orrs	r2, r1
 80040e2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68da      	ldr	r2, [r3, #12]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040f2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 0320 	and.w	r3, r3, #32
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d111      	bne.n	8004126 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 fa4e 	bl	80045a4 <HAL_RTC_WaitForSynchro>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00b      	beq.n	8004126 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	22ff      	movs	r2, #255	; 0xff
 8004114:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2204      	movs	r2, #4
 800411a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e00a      	b.n	800413c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	22ff      	movs	r2, #255	; 0xff
 800412c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2201      	movs	r2, #1
 8004132:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800413a:	2300      	movs	r3, #0
  }
}
 800413c:	4618      	mov	r0, r3
 800413e:	371c      	adds	r7, #28
 8004140:	46bd      	mov	sp, r7
 8004142:	bd90      	pop	{r4, r7, pc}

08004144 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004144:	b590      	push	{r4, r7, lr}
 8004146:	b087      	sub	sp, #28
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	7f1b      	ldrb	r3, [r3, #28]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d101      	bne.n	8004160 <HAL_RTC_SetDate+0x1c>
 800415c:	2302      	movs	r3, #2
 800415e:	e094      	b.n	800428a <HAL_RTC_SetDate+0x146>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2201      	movs	r2, #1
 8004164:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2202      	movs	r2, #2
 800416a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10e      	bne.n	8004190 <HAL_RTC_SetDate+0x4c>
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	785b      	ldrb	r3, [r3, #1]
 8004176:	f003 0310 	and.w	r3, r3, #16
 800417a:	2b00      	cmp	r3, #0
 800417c:	d008      	beq.n	8004190 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	785b      	ldrb	r3, [r3, #1]
 8004182:	f023 0310 	bic.w	r3, r3, #16
 8004186:	b2db      	uxtb	r3, r3
 8004188:	330a      	adds	r3, #10
 800418a:	b2da      	uxtb	r2, r3
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d11c      	bne.n	80041d0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	78db      	ldrb	r3, [r3, #3]
 800419a:	4618      	mov	r0, r3
 800419c:	f000 fa56 	bl	800464c <RTC_ByteToBcd2>
 80041a0:	4603      	mov	r3, r0
 80041a2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	785b      	ldrb	r3, [r3, #1]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f000 fa4f 	bl	800464c <RTC_ByteToBcd2>
 80041ae:	4603      	mov	r3, r0
 80041b0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80041b2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	789b      	ldrb	r3, [r3, #2]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 fa47 	bl	800464c <RTC_ByteToBcd2>
 80041be:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80041c0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80041ca:	4313      	orrs	r3, r2
 80041cc:	617b      	str	r3, [r7, #20]
 80041ce:	e00e      	b.n	80041ee <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	78db      	ldrb	r3, [r3, #3]
 80041d4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	785b      	ldrb	r3, [r3, #1]
 80041da:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80041dc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80041e2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80041ea:	4313      	orrs	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	22ca      	movs	r2, #202	; 0xca
 80041f4:	625a      	str	r2, [r3, #36]	; 0x24
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2253      	movs	r2, #83	; 0x53
 80041fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f000 f9f8 	bl	80045f4 <RTC_EnterInitMode>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00b      	beq.n	8004222 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	22ff      	movs	r2, #255	; 0xff
 8004210:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2204      	movs	r2, #4
 8004216:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e033      	b.n	800428a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800422c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004230:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68da      	ldr	r2, [r3, #12]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004240:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f003 0320 	and.w	r3, r3, #32
 800424c:	2b00      	cmp	r3, #0
 800424e:	d111      	bne.n	8004274 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 f9a7 	bl	80045a4 <HAL_RTC_WaitForSynchro>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00b      	beq.n	8004274 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	22ff      	movs	r2, #255	; 0xff
 8004262:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2204      	movs	r2, #4
 8004268:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e00a      	b.n	800428a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	22ff      	movs	r2, #255	; 0xff
 800427a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2201      	movs	r2, #1
 8004280:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004288:	2300      	movs	r3, #0
  }
}
 800428a:	4618      	mov	r0, r3
 800428c:	371c      	adds	r7, #28
 800428e:	46bd      	mov	sp, r7
 8004290:	bd90      	pop	{r4, r7, pc}
	...

08004294 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004294:	b590      	push	{r4, r7, lr}
 8004296:	b089      	sub	sp, #36	; 0x24
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	61fb      	str	r3, [r7, #28]
 80042a4:	2300      	movs	r3, #0
 80042a6:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 80042a8:	4b93      	ldr	r3, [pc, #588]	; (80044f8 <HAL_RTC_SetAlarm_IT+0x264>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a93      	ldr	r2, [pc, #588]	; (80044fc <HAL_RTC_SetAlarm_IT+0x268>)
 80042ae:	fba2 2303 	umull	r2, r3, r2, r3
 80042b2:	0adb      	lsrs	r3, r3, #11
 80042b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80042b8:	fb02 f303 	mul.w	r3, r2, r3
 80042bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	7f1b      	ldrb	r3, [r3, #28]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d101      	bne.n	80042ca <HAL_RTC_SetAlarm_IT+0x36>
 80042c6:	2302      	movs	r3, #2
 80042c8:	e111      	b.n	80044ee <HAL_RTC_SetAlarm_IT+0x25a>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2201      	movs	r2, #1
 80042ce:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2202      	movs	r2, #2
 80042d4:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d137      	bne.n	800434c <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d102      	bne.n	80042f0 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2200      	movs	r2, #0
 80042ee:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 f9a9 	bl	800464c <RTC_ByteToBcd2>
 80042fa:	4603      	mov	r3, r0
 80042fc:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	785b      	ldrb	r3, [r3, #1]
 8004302:	4618      	mov	r0, r3
 8004304:	f000 f9a2 	bl	800464c <RTC_ByteToBcd2>
 8004308:	4603      	mov	r3, r0
 800430a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800430c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	789b      	ldrb	r3, [r3, #2]
 8004312:	4618      	mov	r0, r3
 8004314:	f000 f99a 	bl	800464c <RTC_ByteToBcd2>
 8004318:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800431a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	78db      	ldrb	r3, [r3, #3]
 8004322:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004324:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800432e:	4618      	mov	r0, r3
 8004330:	f000 f98c 	bl	800464c <RTC_ByteToBcd2>
 8004334:	4603      	mov	r3, r0
 8004336:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004338:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004340:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004346:	4313      	orrs	r3, r2
 8004348:	61fb      	str	r3, [r7, #28]
 800434a:	e023      	b.n	8004394 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004356:	2b00      	cmp	r3, #0
 8004358:	d102      	bne.n	8004360 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	2200      	movs	r2, #0
 800435e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	785b      	ldrb	r3, [r3, #1]
 800436a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800436c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004372:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	78db      	ldrb	r3, [r3, #3]
 8004378:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800437a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004382:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004384:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800438a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004390:	4313      	orrs	r3, r2
 8004392:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	4313      	orrs	r3, r2
 800439e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	22ca      	movs	r2, #202	; 0xca
 80043a6:	625a      	str	r2, [r3, #36]	; 0x24
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2253      	movs	r2, #83	; 0x53
 80043ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043b8:	d141      	bne.n	800443e <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689a      	ldr	r2, [r3, #8]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043c8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	b2da      	uxtb	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80043da:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	1e5a      	subs	r2, r3, #1
 80043e0:	617a      	str	r2, [r7, #20]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10b      	bne.n	80043fe <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	22ff      	movs	r2, #255	; 0xff
 80043ec:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2203      	movs	r2, #3
 80043f2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e077      	b.n	80044ee <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0e7      	beq.n	80043dc <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	69fa      	ldr	r2, [r7, #28]
 8004412:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689a      	ldr	r2, [r3, #8]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800442a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800443a:	609a      	str	r2, [r3, #8]
 800443c:	e040      	b.n	80044c0 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800444c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	b2da      	uxtb	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800445e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	1e5a      	subs	r2, r3, #1
 8004464:	617a      	str	r2, [r7, #20]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10b      	bne.n	8004482 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	22ff      	movs	r2, #255	; 0xff
 8004470:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2203      	movs	r2, #3
 8004476:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e035      	b.n	80044ee <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0e7      	beq.n	8004460 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	69fa      	ldr	r2, [r7, #28]
 8004496:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689a      	ldr	r2, [r3, #8]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ae:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689a      	ldr	r2, [r3, #8]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044be:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80044c0:	4b0f      	ldr	r3, [pc, #60]	; (8004500 <HAL_RTC_SetAlarm_IT+0x26c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a0e      	ldr	r2, [pc, #56]	; (8004500 <HAL_RTC_SetAlarm_IT+0x26c>)
 80044c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044ca:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 80044cc:	4b0c      	ldr	r3, [pc, #48]	; (8004500 <HAL_RTC_SetAlarm_IT+0x26c>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	4a0b      	ldr	r2, [pc, #44]	; (8004500 <HAL_RTC_SetAlarm_IT+0x26c>)
 80044d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044d6:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	22ff      	movs	r2, #255	; 0xff
 80044de:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2201      	movs	r2, #1
 80044e4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3724      	adds	r7, #36	; 0x24
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd90      	pop	{r4, r7, pc}
 80044f6:	bf00      	nop
 80044f8:	20000008 	.word	0x20000008
 80044fc:	10624dd3 	.word	0x10624dd3
 8004500:	40013c00 	.word	0x40013c00

08004504 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d012      	beq.n	8004540 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00b      	beq.n	8004540 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f831 	bl	8004590 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	b2da      	uxtb	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800453e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d012      	beq.n	8004574 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00b      	beq.n	8004574 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 f893 	bl	8004688 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	b2da      	uxtb	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004572:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004574:	4b05      	ldr	r3, [pc, #20]	; (800458c <HAL_RTC_AlarmIRQHandler+0x88>)
 8004576:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800457a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	775a      	strb	r2, [r3, #29]
}
 8004582:	bf00      	nop
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	40013c00 	.word	0x40013c00

08004590 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045ac:	2300      	movs	r3, #0
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68da      	ldr	r2, [r3, #12]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045be:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045c0:	f7fd fbe8 	bl	8001d94 <HAL_GetTick>
 80045c4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80045c6:	e009      	b.n	80045dc <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80045c8:	f7fd fbe4 	bl	8001d94 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045d6:	d901      	bls.n	80045dc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e007      	b.n	80045ec <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f003 0320 	and.w	r3, r3, #32
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0ee      	beq.n	80045c8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460a:	2b00      	cmp	r3, #0
 800460c:	d119      	bne.n	8004642 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f04f 32ff 	mov.w	r2, #4294967295
 8004616:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004618:	f7fd fbbc 	bl	8001d94 <HAL_GetTick>
 800461c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800461e:	e009      	b.n	8004634 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004620:	f7fd fbb8 	bl	8001d94 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800462e:	d901      	bls.n	8004634 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e007      	b.n	8004644 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0ee      	beq.n	8004620 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	4603      	mov	r3, r0
 8004654:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004656:	2300      	movs	r3, #0
 8004658:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800465a:	e005      	b.n	8004668 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	3301      	adds	r3, #1
 8004660:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004662:	79fb      	ldrb	r3, [r7, #7]
 8004664:	3b0a      	subs	r3, #10
 8004666:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8004668:	79fb      	ldrb	r3, [r7, #7]
 800466a:	2b09      	cmp	r3, #9
 800466c:	d8f6      	bhi.n	800465c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	b2db      	uxtb	r3, r3
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	b2da      	uxtb	r2, r3
 8004676:	79fb      	ldrb	r3, [r7, #7]
 8004678:	4313      	orrs	r3, r2
 800467a:	b2db      	uxtb	r3, r3
}
 800467c:	4618      	mov	r0, r3
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e07b      	b.n	80047a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d108      	bne.n	80046c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046be:	d009      	beq.n	80046d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	61da      	str	r2, [r3, #28]
 80046c6:	e005      	b.n	80046d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d106      	bne.n	80046f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7fd f85a 	bl	80017a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800470a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800471c:	431a      	orrs	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	431a      	orrs	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004744:	431a      	orrs	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004758:	ea42 0103 	orr.w	r1, r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004760:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	430a      	orrs	r2, r1
 800476a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	0c1b      	lsrs	r3, r3, #16
 8004772:	f003 0104 	and.w	r1, r3, #4
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	f003 0210 	and.w	r2, r3, #16
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	430a      	orrs	r2, r1
 8004784:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	69da      	ldr	r2, [r3, #28]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004794:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b082      	sub	sp, #8
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e041      	b.n	8004844 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d106      	bne.n	80047da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 f839 	bl	800484c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2202      	movs	r2, #2
 80047de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	3304      	adds	r3, #4
 80047ea:	4619      	mov	r1, r3
 80047ec:	4610      	mov	r0, r2
 80047ee:	f000 fae9 	bl	8004dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3708      	adds	r7, #8
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b01      	cmp	r3, #1
 8004872:	d001      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e04e      	b.n	8004916 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68da      	ldr	r2, [r3, #12]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f042 0201 	orr.w	r2, r2, #1
 800488e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a23      	ldr	r2, [pc, #140]	; (8004924 <HAL_TIM_Base_Start_IT+0xc4>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d022      	beq.n	80048e0 <HAL_TIM_Base_Start_IT+0x80>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a2:	d01d      	beq.n	80048e0 <HAL_TIM_Base_Start_IT+0x80>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a1f      	ldr	r2, [pc, #124]	; (8004928 <HAL_TIM_Base_Start_IT+0xc8>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d018      	beq.n	80048e0 <HAL_TIM_Base_Start_IT+0x80>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a1e      	ldr	r2, [pc, #120]	; (800492c <HAL_TIM_Base_Start_IT+0xcc>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d013      	beq.n	80048e0 <HAL_TIM_Base_Start_IT+0x80>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a1c      	ldr	r2, [pc, #112]	; (8004930 <HAL_TIM_Base_Start_IT+0xd0>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d00e      	beq.n	80048e0 <HAL_TIM_Base_Start_IT+0x80>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a1b      	ldr	r2, [pc, #108]	; (8004934 <HAL_TIM_Base_Start_IT+0xd4>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d009      	beq.n	80048e0 <HAL_TIM_Base_Start_IT+0x80>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a19      	ldr	r2, [pc, #100]	; (8004938 <HAL_TIM_Base_Start_IT+0xd8>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d004      	beq.n	80048e0 <HAL_TIM_Base_Start_IT+0x80>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a18      	ldr	r2, [pc, #96]	; (800493c <HAL_TIM_Base_Start_IT+0xdc>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d111      	bne.n	8004904 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2b06      	cmp	r3, #6
 80048f0:	d010      	beq.n	8004914 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f042 0201 	orr.w	r2, r2, #1
 8004900:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004902:	e007      	b.n	8004914 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f042 0201 	orr.w	r2, r2, #1
 8004912:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	40010000 	.word	0x40010000
 8004928:	40000400 	.word	0x40000400
 800492c:	40000800 	.word	0x40000800
 8004930:	40000c00 	.word	0x40000c00
 8004934:	40010400 	.word	0x40010400
 8004938:	40014000 	.word	0x40014000
 800493c:	40001800 	.word	0x40001800

08004940 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e041      	b.n	80049d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d106      	bne.n	800496c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7fc ffd4 	bl	8001914 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2202      	movs	r2, #2
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	3304      	adds	r3, #4
 800497c:	4619      	mov	r1, r3
 800497e:	4610      	mov	r0, r2
 8004980:	f000 fa20 	bl	8004dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b082      	sub	sp, #8
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	f003 0302 	and.w	r3, r3, #2
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d122      	bne.n	8004a3a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d11b      	bne.n	8004a3a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f06f 0202 	mvn.w	r2, #2
 8004a0a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	f003 0303 	and.w	r3, r3, #3
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f9b1 	bl	8004d88 <HAL_TIM_IC_CaptureCallback>
 8004a26:	e005      	b.n	8004a34 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 f9a3 	bl	8004d74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f9b4 	bl	8004d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d122      	bne.n	8004a8e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	f003 0304 	and.w	r3, r3, #4
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	d11b      	bne.n	8004a8e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f06f 0204 	mvn.w	r2, #4
 8004a5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2202      	movs	r2, #2
 8004a64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d003      	beq.n	8004a7c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f987 	bl	8004d88 <HAL_TIM_IC_CaptureCallback>
 8004a7a:	e005      	b.n	8004a88 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f979 	bl	8004d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f98a 	bl	8004d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	f003 0308 	and.w	r3, r3, #8
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d122      	bne.n	8004ae2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	f003 0308 	and.w	r3, r3, #8
 8004aa6:	2b08      	cmp	r3, #8
 8004aa8:	d11b      	bne.n	8004ae2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f06f 0208 	mvn.w	r2, #8
 8004ab2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2204      	movs	r2, #4
 8004ab8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	69db      	ldr	r3, [r3, #28]
 8004ac0:	f003 0303 	and.w	r3, r3, #3
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d003      	beq.n	8004ad0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f95d 	bl	8004d88 <HAL_TIM_IC_CaptureCallback>
 8004ace:	e005      	b.n	8004adc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 f94f 	bl	8004d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f960 	bl	8004d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	f003 0310 	and.w	r3, r3, #16
 8004aec:	2b10      	cmp	r3, #16
 8004aee:	d122      	bne.n	8004b36 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	f003 0310 	and.w	r3, r3, #16
 8004afa:	2b10      	cmp	r3, #16
 8004afc:	d11b      	bne.n	8004b36 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f06f 0210 	mvn.w	r2, #16
 8004b06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2208      	movs	r2, #8
 8004b0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	69db      	ldr	r3, [r3, #28]
 8004b14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d003      	beq.n	8004b24 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f933 	bl	8004d88 <HAL_TIM_IC_CaptureCallback>
 8004b22:	e005      	b.n	8004b30 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f925 	bl	8004d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f936 	bl	8004d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d10e      	bne.n	8004b62 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d107      	bne.n	8004b62 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f06f 0201 	mvn.w	r2, #1
 8004b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7fc fc93 	bl	8001488 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b6c:	2b80      	cmp	r3, #128	; 0x80
 8004b6e:	d10e      	bne.n	8004b8e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7a:	2b80      	cmp	r3, #128	; 0x80
 8004b7c:	d107      	bne.n	8004b8e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 fbf1 	bl	8005370 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b98:	2b40      	cmp	r3, #64	; 0x40
 8004b9a:	d10e      	bne.n	8004bba <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba6:	2b40      	cmp	r3, #64	; 0x40
 8004ba8:	d107      	bne.n	8004bba <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f8fb 	bl	8004db0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	f003 0320 	and.w	r3, r3, #32
 8004bc4:	2b20      	cmp	r3, #32
 8004bc6:	d10e      	bne.n	8004be6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f003 0320 	and.w	r3, r3, #32
 8004bd2:	2b20      	cmp	r3, #32
 8004bd4:	d107      	bne.n	8004be6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f06f 0220 	mvn.w	r2, #32
 8004bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 fbbb 	bl	800535c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004be6:	bf00      	nop
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
	...

08004bf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d101      	bne.n	8004c0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	e0ae      	b.n	8004d6c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b0c      	cmp	r3, #12
 8004c1a:	f200 809f 	bhi.w	8004d5c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c1e:	a201      	add	r2, pc, #4	; (adr r2, 8004c24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c24:	08004c59 	.word	0x08004c59
 8004c28:	08004d5d 	.word	0x08004d5d
 8004c2c:	08004d5d 	.word	0x08004d5d
 8004c30:	08004d5d 	.word	0x08004d5d
 8004c34:	08004c99 	.word	0x08004c99
 8004c38:	08004d5d 	.word	0x08004d5d
 8004c3c:	08004d5d 	.word	0x08004d5d
 8004c40:	08004d5d 	.word	0x08004d5d
 8004c44:	08004cdb 	.word	0x08004cdb
 8004c48:	08004d5d 	.word	0x08004d5d
 8004c4c:	08004d5d 	.word	0x08004d5d
 8004c50:	08004d5d 	.word	0x08004d5d
 8004c54:	08004d1b 	.word	0x08004d1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68b9      	ldr	r1, [r7, #8]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 f950 	bl	8004f04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	699a      	ldr	r2, [r3, #24]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f042 0208 	orr.w	r2, r2, #8
 8004c72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	699a      	ldr	r2, [r3, #24]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 0204 	bic.w	r2, r2, #4
 8004c82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6999      	ldr	r1, [r3, #24]
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	691a      	ldr	r2, [r3, #16]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	619a      	str	r2, [r3, #24]
      break;
 8004c96:	e064      	b.n	8004d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68b9      	ldr	r1, [r7, #8]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 f9a0 	bl	8004fe4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	699a      	ldr	r2, [r3, #24]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	699a      	ldr	r2, [r3, #24]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6999      	ldr	r1, [r3, #24]
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	021a      	lsls	r2, r3, #8
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	619a      	str	r2, [r3, #24]
      break;
 8004cd8:	e043      	b.n	8004d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68b9      	ldr	r1, [r7, #8]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f000 f9f5 	bl	80050d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	69da      	ldr	r2, [r3, #28]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f042 0208 	orr.w	r2, r2, #8
 8004cf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	69da      	ldr	r2, [r3, #28]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 0204 	bic.w	r2, r2, #4
 8004d04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	69d9      	ldr	r1, [r3, #28]
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	691a      	ldr	r2, [r3, #16]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	61da      	str	r2, [r3, #28]
      break;
 8004d18:	e023      	b.n	8004d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68b9      	ldr	r1, [r7, #8]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 fa49 	bl	80051b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	69da      	ldr	r2, [r3, #28]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	69da      	ldr	r2, [r3, #28]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	69d9      	ldr	r1, [r3, #28]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	021a      	lsls	r2, r3, #8
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	61da      	str	r2, [r3, #28]
      break;
 8004d5a:	e002      	b.n	8004d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3718      	adds	r7, #24
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a40      	ldr	r2, [pc, #256]	; (8004ed8 <TIM_Base_SetConfig+0x114>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d013      	beq.n	8004e04 <TIM_Base_SetConfig+0x40>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004de2:	d00f      	beq.n	8004e04 <TIM_Base_SetConfig+0x40>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a3d      	ldr	r2, [pc, #244]	; (8004edc <TIM_Base_SetConfig+0x118>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d00b      	beq.n	8004e04 <TIM_Base_SetConfig+0x40>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a3c      	ldr	r2, [pc, #240]	; (8004ee0 <TIM_Base_SetConfig+0x11c>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d007      	beq.n	8004e04 <TIM_Base_SetConfig+0x40>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a3b      	ldr	r2, [pc, #236]	; (8004ee4 <TIM_Base_SetConfig+0x120>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d003      	beq.n	8004e04 <TIM_Base_SetConfig+0x40>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a3a      	ldr	r2, [pc, #232]	; (8004ee8 <TIM_Base_SetConfig+0x124>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d108      	bne.n	8004e16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a2f      	ldr	r2, [pc, #188]	; (8004ed8 <TIM_Base_SetConfig+0x114>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d02b      	beq.n	8004e76 <TIM_Base_SetConfig+0xb2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e24:	d027      	beq.n	8004e76 <TIM_Base_SetConfig+0xb2>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a2c      	ldr	r2, [pc, #176]	; (8004edc <TIM_Base_SetConfig+0x118>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d023      	beq.n	8004e76 <TIM_Base_SetConfig+0xb2>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a2b      	ldr	r2, [pc, #172]	; (8004ee0 <TIM_Base_SetConfig+0x11c>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d01f      	beq.n	8004e76 <TIM_Base_SetConfig+0xb2>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a2a      	ldr	r2, [pc, #168]	; (8004ee4 <TIM_Base_SetConfig+0x120>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d01b      	beq.n	8004e76 <TIM_Base_SetConfig+0xb2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a29      	ldr	r2, [pc, #164]	; (8004ee8 <TIM_Base_SetConfig+0x124>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d017      	beq.n	8004e76 <TIM_Base_SetConfig+0xb2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a28      	ldr	r2, [pc, #160]	; (8004eec <TIM_Base_SetConfig+0x128>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d013      	beq.n	8004e76 <TIM_Base_SetConfig+0xb2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a27      	ldr	r2, [pc, #156]	; (8004ef0 <TIM_Base_SetConfig+0x12c>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d00f      	beq.n	8004e76 <TIM_Base_SetConfig+0xb2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a26      	ldr	r2, [pc, #152]	; (8004ef4 <TIM_Base_SetConfig+0x130>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d00b      	beq.n	8004e76 <TIM_Base_SetConfig+0xb2>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a25      	ldr	r2, [pc, #148]	; (8004ef8 <TIM_Base_SetConfig+0x134>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d007      	beq.n	8004e76 <TIM_Base_SetConfig+0xb2>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a24      	ldr	r2, [pc, #144]	; (8004efc <TIM_Base_SetConfig+0x138>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d003      	beq.n	8004e76 <TIM_Base_SetConfig+0xb2>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a23      	ldr	r2, [pc, #140]	; (8004f00 <TIM_Base_SetConfig+0x13c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d108      	bne.n	8004e88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a0a      	ldr	r2, [pc, #40]	; (8004ed8 <TIM_Base_SetConfig+0x114>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d003      	beq.n	8004ebc <TIM_Base_SetConfig+0xf8>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a0c      	ldr	r2, [pc, #48]	; (8004ee8 <TIM_Base_SetConfig+0x124>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d103      	bne.n	8004ec4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	691a      	ldr	r2, [r3, #16]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	615a      	str	r2, [r3, #20]
}
 8004eca:	bf00      	nop
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	40010000 	.word	0x40010000
 8004edc:	40000400 	.word	0x40000400
 8004ee0:	40000800 	.word	0x40000800
 8004ee4:	40000c00 	.word	0x40000c00
 8004ee8:	40010400 	.word	0x40010400
 8004eec:	40014000 	.word	0x40014000
 8004ef0:	40014400 	.word	0x40014400
 8004ef4:	40014800 	.word	0x40014800
 8004ef8:	40001800 	.word	0x40001800
 8004efc:	40001c00 	.word	0x40001c00
 8004f00:	40002000 	.word	0x40002000

08004f04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b087      	sub	sp, #28
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	f023 0201 	bic.w	r2, r3, #1
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f023 0303 	bic.w	r3, r3, #3
 8004f3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f023 0302 	bic.w	r3, r3, #2
 8004f4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a20      	ldr	r2, [pc, #128]	; (8004fdc <TIM_OC1_SetConfig+0xd8>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d003      	beq.n	8004f68 <TIM_OC1_SetConfig+0x64>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a1f      	ldr	r2, [pc, #124]	; (8004fe0 <TIM_OC1_SetConfig+0xdc>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d10c      	bne.n	8004f82 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f023 0308 	bic.w	r3, r3, #8
 8004f6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f023 0304 	bic.w	r3, r3, #4
 8004f80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a15      	ldr	r2, [pc, #84]	; (8004fdc <TIM_OC1_SetConfig+0xd8>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d003      	beq.n	8004f92 <TIM_OC1_SetConfig+0x8e>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a14      	ldr	r2, [pc, #80]	; (8004fe0 <TIM_OC1_SetConfig+0xdc>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d111      	bne.n	8004fb6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	697a      	ldr	r2, [r7, #20]
 8004fce:	621a      	str	r2, [r3, #32]
}
 8004fd0:	bf00      	nop
 8004fd2:	371c      	adds	r7, #28
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
 8004fdc:	40010000 	.word	0x40010000
 8004fe0:	40010400 	.word	0x40010400

08004fe4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b087      	sub	sp, #28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	f023 0210 	bic.w	r2, r3, #16
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800501a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	021b      	lsls	r3, r3, #8
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	4313      	orrs	r3, r2
 8005026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f023 0320 	bic.w	r3, r3, #32
 800502e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	011b      	lsls	r3, r3, #4
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	4313      	orrs	r3, r2
 800503a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a22      	ldr	r2, [pc, #136]	; (80050c8 <TIM_OC2_SetConfig+0xe4>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d003      	beq.n	800504c <TIM_OC2_SetConfig+0x68>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a21      	ldr	r2, [pc, #132]	; (80050cc <TIM_OC2_SetConfig+0xe8>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d10d      	bne.n	8005068 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005052:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	011b      	lsls	r3, r3, #4
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	4313      	orrs	r3, r2
 800505e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005066:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a17      	ldr	r2, [pc, #92]	; (80050c8 <TIM_OC2_SetConfig+0xe4>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d003      	beq.n	8005078 <TIM_OC2_SetConfig+0x94>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a16      	ldr	r2, [pc, #88]	; (80050cc <TIM_OC2_SetConfig+0xe8>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d113      	bne.n	80050a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800507e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005086:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	4313      	orrs	r3, r2
 8005092:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	4313      	orrs	r3, r2
 800509e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	621a      	str	r2, [r3, #32]
}
 80050ba:	bf00      	nop
 80050bc:	371c      	adds	r7, #28
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	40010000 	.word	0x40010000
 80050cc:	40010400 	.word	0x40010400

080050d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f023 0303 	bic.w	r3, r3, #3
 8005106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	4313      	orrs	r3, r2
 8005110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005118:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	021b      	lsls	r3, r3, #8
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	4313      	orrs	r3, r2
 8005124:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a21      	ldr	r2, [pc, #132]	; (80051b0 <TIM_OC3_SetConfig+0xe0>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d003      	beq.n	8005136 <TIM_OC3_SetConfig+0x66>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a20      	ldr	r2, [pc, #128]	; (80051b4 <TIM_OC3_SetConfig+0xe4>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d10d      	bne.n	8005152 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800513c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	021b      	lsls	r3, r3, #8
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	4313      	orrs	r3, r2
 8005148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a16      	ldr	r2, [pc, #88]	; (80051b0 <TIM_OC3_SetConfig+0xe0>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d003      	beq.n	8005162 <TIM_OC3_SetConfig+0x92>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a15      	ldr	r2, [pc, #84]	; (80051b4 <TIM_OC3_SetConfig+0xe4>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d113      	bne.n	800518a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005168:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005170:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	011b      	lsls	r3, r3, #4
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	4313      	orrs	r3, r2
 800517c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	011b      	lsls	r3, r3, #4
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	4313      	orrs	r3, r2
 8005188:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	621a      	str	r2, [r3, #32]
}
 80051a4:	bf00      	nop
 80051a6:	371c      	adds	r7, #28
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	40010000 	.word	0x40010000
 80051b4:	40010400 	.word	0x40010400

080051b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b087      	sub	sp, #28
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	021b      	lsls	r3, r3, #8
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005202:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	031b      	lsls	r3, r3, #12
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	4313      	orrs	r3, r2
 800520e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a12      	ldr	r2, [pc, #72]	; (800525c <TIM_OC4_SetConfig+0xa4>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d003      	beq.n	8005220 <TIM_OC4_SetConfig+0x68>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a11      	ldr	r2, [pc, #68]	; (8005260 <TIM_OC4_SetConfig+0xa8>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d109      	bne.n	8005234 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005226:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	019b      	lsls	r3, r3, #6
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	4313      	orrs	r3, r2
 8005232:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	621a      	str	r2, [r3, #32]
}
 800524e:	bf00      	nop
 8005250:	371c      	adds	r7, #28
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	40010000 	.word	0x40010000
 8005260:	40010400 	.word	0x40010400

08005264 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005274:	2b01      	cmp	r3, #1
 8005276:	d101      	bne.n	800527c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005278:	2302      	movs	r3, #2
 800527a:	e05a      	b.n	8005332 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a21      	ldr	r2, [pc, #132]	; (8005340 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d022      	beq.n	8005306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c8:	d01d      	beq.n	8005306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a1d      	ldr	r2, [pc, #116]	; (8005344 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d018      	beq.n	8005306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a1b      	ldr	r2, [pc, #108]	; (8005348 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d013      	beq.n	8005306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a1a      	ldr	r2, [pc, #104]	; (800534c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d00e      	beq.n	8005306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a18      	ldr	r2, [pc, #96]	; (8005350 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d009      	beq.n	8005306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a17      	ldr	r2, [pc, #92]	; (8005354 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d004      	beq.n	8005306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a15      	ldr	r2, [pc, #84]	; (8005358 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d10c      	bne.n	8005320 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800530c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	4313      	orrs	r3, r2
 8005316:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	40010000 	.word	0x40010000
 8005344:	40000400 	.word	0x40000400
 8005348:	40000800 	.word	0x40000800
 800534c:	40000c00 	.word	0x40000c00
 8005350:	40010400 	.word	0x40010400
 8005354:	40014000 	.word	0x40014000
 8005358:	40001800 	.word	0x40001800

0800535c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d101      	bne.n	8005396 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e03f      	b.n	8005416 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d106      	bne.n	80053b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f7fc fb0a 	bl	80019c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2224      	movs	r2, #36	; 0x24
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68da      	ldr	r2, [r3, #12]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f929 	bl	8005620 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	691a      	ldr	r2, [r3, #16]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	695a      	ldr	r2, [r3, #20]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68da      	ldr	r2, [r3, #12]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2220      	movs	r2, #32
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2220      	movs	r2, #32
 8005410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b08a      	sub	sp, #40	; 0x28
 8005422:	af02      	add	r7, sp, #8
 8005424:	60f8      	str	r0, [r7, #12]
 8005426:	60b9      	str	r1, [r7, #8]
 8005428:	603b      	str	r3, [r7, #0]
 800542a:	4613      	mov	r3, r2
 800542c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800542e:	2300      	movs	r3, #0
 8005430:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b20      	cmp	r3, #32
 800543c:	d17c      	bne.n	8005538 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d002      	beq.n	800544a <HAL_UART_Transmit+0x2c>
 8005444:	88fb      	ldrh	r3, [r7, #6]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e075      	b.n	800553a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005454:	2b01      	cmp	r3, #1
 8005456:	d101      	bne.n	800545c <HAL_UART_Transmit+0x3e>
 8005458:	2302      	movs	r3, #2
 800545a:	e06e      	b.n	800553a <HAL_UART_Transmit+0x11c>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2221      	movs	r2, #33	; 0x21
 800546e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005472:	f7fc fc8f 	bl	8001d94 <HAL_GetTick>
 8005476:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	88fa      	ldrh	r2, [r7, #6]
 800547c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	88fa      	ldrh	r2, [r7, #6]
 8005482:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800548c:	d108      	bne.n	80054a0 <HAL_UART_Transmit+0x82>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d104      	bne.n	80054a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005496:	2300      	movs	r3, #0
 8005498:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	61bb      	str	r3, [r7, #24]
 800549e:	e003      	b.n	80054a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054a4:	2300      	movs	r3, #0
 80054a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80054b0:	e02a      	b.n	8005508 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	2200      	movs	r2, #0
 80054ba:	2180      	movs	r1, #128	; 0x80
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f000 f840 	bl	8005542 <UART_WaitOnFlagUntilTimeout>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d001      	beq.n	80054cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e036      	b.n	800553a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10b      	bne.n	80054ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	881b      	ldrh	r3, [r3, #0]
 80054d6:	461a      	mov	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	3302      	adds	r3, #2
 80054e6:	61bb      	str	r3, [r7, #24]
 80054e8:	e007      	b.n	80054fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	781a      	ldrb	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	3301      	adds	r3, #1
 80054f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054fe:	b29b      	uxth	r3, r3
 8005500:	3b01      	subs	r3, #1
 8005502:	b29a      	uxth	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800550c:	b29b      	uxth	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1cf      	bne.n	80054b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	2200      	movs	r2, #0
 800551a:	2140      	movs	r1, #64	; 0x40
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f000 f810 	bl	8005542 <UART_WaitOnFlagUntilTimeout>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d001      	beq.n	800552c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e006      	b.n	800553a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2220      	movs	r2, #32
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005534:	2300      	movs	r3, #0
 8005536:	e000      	b.n	800553a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005538:	2302      	movs	r3, #2
  }
}
 800553a:	4618      	mov	r0, r3
 800553c:	3720      	adds	r7, #32
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b090      	sub	sp, #64	; 0x40
 8005546:	af00      	add	r7, sp, #0
 8005548:	60f8      	str	r0, [r7, #12]
 800554a:	60b9      	str	r1, [r7, #8]
 800554c:	603b      	str	r3, [r7, #0]
 800554e:	4613      	mov	r3, r2
 8005550:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005552:	e050      	b.n	80055f6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555a:	d04c      	beq.n	80055f6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800555c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800555e:	2b00      	cmp	r3, #0
 8005560:	d007      	beq.n	8005572 <UART_WaitOnFlagUntilTimeout+0x30>
 8005562:	f7fc fc17 	bl	8001d94 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800556e:	429a      	cmp	r2, r3
 8005570:	d241      	bcs.n	80055f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	330c      	adds	r3, #12
 8005578:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557c:	e853 3f00 	ldrex	r3, [r3]
 8005580:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005588:	63fb      	str	r3, [r7, #60]	; 0x3c
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	330c      	adds	r3, #12
 8005590:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005592:	637a      	str	r2, [r7, #52]	; 0x34
 8005594:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005596:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005598:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800559a:	e841 2300 	strex	r3, r2, [r1]
 800559e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80055a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1e5      	bne.n	8005572 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	3314      	adds	r3, #20
 80055ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	e853 3f00 	ldrex	r3, [r3]
 80055b4:	613b      	str	r3, [r7, #16]
   return(result);
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	f023 0301 	bic.w	r3, r3, #1
 80055bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	3314      	adds	r3, #20
 80055c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055c6:	623a      	str	r2, [r7, #32]
 80055c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ca:	69f9      	ldr	r1, [r7, #28]
 80055cc:	6a3a      	ldr	r2, [r7, #32]
 80055ce:	e841 2300 	strex	r3, r2, [r1]
 80055d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1e5      	bne.n	80055a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2220      	movs	r2, #32
 80055de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2220      	movs	r2, #32
 80055e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e00f      	b.n	8005616 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	4013      	ands	r3, r2
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	429a      	cmp	r2, r3
 8005604:	bf0c      	ite	eq
 8005606:	2301      	moveq	r3, #1
 8005608:	2300      	movne	r3, #0
 800560a:	b2db      	uxtb	r3, r3
 800560c:	461a      	mov	r2, r3
 800560e:	79fb      	ldrb	r3, [r7, #7]
 8005610:	429a      	cmp	r2, r3
 8005612:	d09f      	beq.n	8005554 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3740      	adds	r7, #64	; 0x40
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
	...

08005620 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005624:	b09f      	sub	sp, #124	; 0x7c
 8005626:	af00      	add	r7, sp, #0
 8005628:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800562a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005636:	68d9      	ldr	r1, [r3, #12]
 8005638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	ea40 0301 	orr.w	r3, r0, r1
 8005640:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005644:	689a      	ldr	r2, [r3, #8]
 8005646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	431a      	orrs	r2, r3
 800564c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800564e:	695b      	ldr	r3, [r3, #20]
 8005650:	431a      	orrs	r2, r3
 8005652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	4313      	orrs	r3, r2
 8005658:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800565a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005664:	f021 010c 	bic.w	r1, r1, #12
 8005668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800566e:	430b      	orrs	r3, r1
 8005670:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800567c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800567e:	6999      	ldr	r1, [r3, #24]
 8005680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	ea40 0301 	orr.w	r3, r0, r1
 8005688:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800568a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	4bc5      	ldr	r3, [pc, #788]	; (80059a4 <UART_SetConfig+0x384>)
 8005690:	429a      	cmp	r2, r3
 8005692:	d004      	beq.n	800569e <UART_SetConfig+0x7e>
 8005694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	4bc3      	ldr	r3, [pc, #780]	; (80059a8 <UART_SetConfig+0x388>)
 800569a:	429a      	cmp	r2, r3
 800569c:	d103      	bne.n	80056a6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800569e:	f7fe f9ff 	bl	8003aa0 <HAL_RCC_GetPCLK2Freq>
 80056a2:	6778      	str	r0, [r7, #116]	; 0x74
 80056a4:	e002      	b.n	80056ac <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056a6:	f7fe f9e7 	bl	8003a78 <HAL_RCC_GetPCLK1Freq>
 80056aa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ae:	69db      	ldr	r3, [r3, #28]
 80056b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056b4:	f040 80b6 	bne.w	8005824 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056ba:	461c      	mov	r4, r3
 80056bc:	f04f 0500 	mov.w	r5, #0
 80056c0:	4622      	mov	r2, r4
 80056c2:	462b      	mov	r3, r5
 80056c4:	1891      	adds	r1, r2, r2
 80056c6:	6439      	str	r1, [r7, #64]	; 0x40
 80056c8:	415b      	adcs	r3, r3
 80056ca:	647b      	str	r3, [r7, #68]	; 0x44
 80056cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80056d0:	1912      	adds	r2, r2, r4
 80056d2:	eb45 0303 	adc.w	r3, r5, r3
 80056d6:	f04f 0000 	mov.w	r0, #0
 80056da:	f04f 0100 	mov.w	r1, #0
 80056de:	00d9      	lsls	r1, r3, #3
 80056e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80056e4:	00d0      	lsls	r0, r2, #3
 80056e6:	4602      	mov	r2, r0
 80056e8:	460b      	mov	r3, r1
 80056ea:	1911      	adds	r1, r2, r4
 80056ec:	6639      	str	r1, [r7, #96]	; 0x60
 80056ee:	416b      	adcs	r3, r5
 80056f0:	667b      	str	r3, [r7, #100]	; 0x64
 80056f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	461a      	mov	r2, r3
 80056f8:	f04f 0300 	mov.w	r3, #0
 80056fc:	1891      	adds	r1, r2, r2
 80056fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8005700:	415b      	adcs	r3, r3
 8005702:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005704:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005708:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800570c:	f7fa fdc8 	bl	80002a0 <__aeabi_uldivmod>
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	4ba5      	ldr	r3, [pc, #660]	; (80059ac <UART_SetConfig+0x38c>)
 8005716:	fba3 2302 	umull	r2, r3, r3, r2
 800571a:	095b      	lsrs	r3, r3, #5
 800571c:	011e      	lsls	r6, r3, #4
 800571e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005720:	461c      	mov	r4, r3
 8005722:	f04f 0500 	mov.w	r5, #0
 8005726:	4622      	mov	r2, r4
 8005728:	462b      	mov	r3, r5
 800572a:	1891      	adds	r1, r2, r2
 800572c:	6339      	str	r1, [r7, #48]	; 0x30
 800572e:	415b      	adcs	r3, r3
 8005730:	637b      	str	r3, [r7, #52]	; 0x34
 8005732:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005736:	1912      	adds	r2, r2, r4
 8005738:	eb45 0303 	adc.w	r3, r5, r3
 800573c:	f04f 0000 	mov.w	r0, #0
 8005740:	f04f 0100 	mov.w	r1, #0
 8005744:	00d9      	lsls	r1, r3, #3
 8005746:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800574a:	00d0      	lsls	r0, r2, #3
 800574c:	4602      	mov	r2, r0
 800574e:	460b      	mov	r3, r1
 8005750:	1911      	adds	r1, r2, r4
 8005752:	65b9      	str	r1, [r7, #88]	; 0x58
 8005754:	416b      	adcs	r3, r5
 8005756:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005758:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	461a      	mov	r2, r3
 800575e:	f04f 0300 	mov.w	r3, #0
 8005762:	1891      	adds	r1, r2, r2
 8005764:	62b9      	str	r1, [r7, #40]	; 0x28
 8005766:	415b      	adcs	r3, r3
 8005768:	62fb      	str	r3, [r7, #44]	; 0x2c
 800576a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800576e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005772:	f7fa fd95 	bl	80002a0 <__aeabi_uldivmod>
 8005776:	4602      	mov	r2, r0
 8005778:	460b      	mov	r3, r1
 800577a:	4b8c      	ldr	r3, [pc, #560]	; (80059ac <UART_SetConfig+0x38c>)
 800577c:	fba3 1302 	umull	r1, r3, r3, r2
 8005780:	095b      	lsrs	r3, r3, #5
 8005782:	2164      	movs	r1, #100	; 0x64
 8005784:	fb01 f303 	mul.w	r3, r1, r3
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	00db      	lsls	r3, r3, #3
 800578c:	3332      	adds	r3, #50	; 0x32
 800578e:	4a87      	ldr	r2, [pc, #540]	; (80059ac <UART_SetConfig+0x38c>)
 8005790:	fba2 2303 	umull	r2, r3, r2, r3
 8005794:	095b      	lsrs	r3, r3, #5
 8005796:	005b      	lsls	r3, r3, #1
 8005798:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800579c:	441e      	add	r6, r3
 800579e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057a0:	4618      	mov	r0, r3
 80057a2:	f04f 0100 	mov.w	r1, #0
 80057a6:	4602      	mov	r2, r0
 80057a8:	460b      	mov	r3, r1
 80057aa:	1894      	adds	r4, r2, r2
 80057ac:	623c      	str	r4, [r7, #32]
 80057ae:	415b      	adcs	r3, r3
 80057b0:	627b      	str	r3, [r7, #36]	; 0x24
 80057b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80057b6:	1812      	adds	r2, r2, r0
 80057b8:	eb41 0303 	adc.w	r3, r1, r3
 80057bc:	f04f 0400 	mov.w	r4, #0
 80057c0:	f04f 0500 	mov.w	r5, #0
 80057c4:	00dd      	lsls	r5, r3, #3
 80057c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80057ca:	00d4      	lsls	r4, r2, #3
 80057cc:	4622      	mov	r2, r4
 80057ce:	462b      	mov	r3, r5
 80057d0:	1814      	adds	r4, r2, r0
 80057d2:	653c      	str	r4, [r7, #80]	; 0x50
 80057d4:	414b      	adcs	r3, r1
 80057d6:	657b      	str	r3, [r7, #84]	; 0x54
 80057d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	461a      	mov	r2, r3
 80057de:	f04f 0300 	mov.w	r3, #0
 80057e2:	1891      	adds	r1, r2, r2
 80057e4:	61b9      	str	r1, [r7, #24]
 80057e6:	415b      	adcs	r3, r3
 80057e8:	61fb      	str	r3, [r7, #28]
 80057ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80057f2:	f7fa fd55 	bl	80002a0 <__aeabi_uldivmod>
 80057f6:	4602      	mov	r2, r0
 80057f8:	460b      	mov	r3, r1
 80057fa:	4b6c      	ldr	r3, [pc, #432]	; (80059ac <UART_SetConfig+0x38c>)
 80057fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005800:	095b      	lsrs	r3, r3, #5
 8005802:	2164      	movs	r1, #100	; 0x64
 8005804:	fb01 f303 	mul.w	r3, r1, r3
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	00db      	lsls	r3, r3, #3
 800580c:	3332      	adds	r3, #50	; 0x32
 800580e:	4a67      	ldr	r2, [pc, #412]	; (80059ac <UART_SetConfig+0x38c>)
 8005810:	fba2 2303 	umull	r2, r3, r2, r3
 8005814:	095b      	lsrs	r3, r3, #5
 8005816:	f003 0207 	and.w	r2, r3, #7
 800581a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4432      	add	r2, r6
 8005820:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005822:	e0b9      	b.n	8005998 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005824:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005826:	461c      	mov	r4, r3
 8005828:	f04f 0500 	mov.w	r5, #0
 800582c:	4622      	mov	r2, r4
 800582e:	462b      	mov	r3, r5
 8005830:	1891      	adds	r1, r2, r2
 8005832:	6139      	str	r1, [r7, #16]
 8005834:	415b      	adcs	r3, r3
 8005836:	617b      	str	r3, [r7, #20]
 8005838:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800583c:	1912      	adds	r2, r2, r4
 800583e:	eb45 0303 	adc.w	r3, r5, r3
 8005842:	f04f 0000 	mov.w	r0, #0
 8005846:	f04f 0100 	mov.w	r1, #0
 800584a:	00d9      	lsls	r1, r3, #3
 800584c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005850:	00d0      	lsls	r0, r2, #3
 8005852:	4602      	mov	r2, r0
 8005854:	460b      	mov	r3, r1
 8005856:	eb12 0804 	adds.w	r8, r2, r4
 800585a:	eb43 0905 	adc.w	r9, r3, r5
 800585e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	4618      	mov	r0, r3
 8005864:	f04f 0100 	mov.w	r1, #0
 8005868:	f04f 0200 	mov.w	r2, #0
 800586c:	f04f 0300 	mov.w	r3, #0
 8005870:	008b      	lsls	r3, r1, #2
 8005872:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005876:	0082      	lsls	r2, r0, #2
 8005878:	4640      	mov	r0, r8
 800587a:	4649      	mov	r1, r9
 800587c:	f7fa fd10 	bl	80002a0 <__aeabi_uldivmod>
 8005880:	4602      	mov	r2, r0
 8005882:	460b      	mov	r3, r1
 8005884:	4b49      	ldr	r3, [pc, #292]	; (80059ac <UART_SetConfig+0x38c>)
 8005886:	fba3 2302 	umull	r2, r3, r3, r2
 800588a:	095b      	lsrs	r3, r3, #5
 800588c:	011e      	lsls	r6, r3, #4
 800588e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005890:	4618      	mov	r0, r3
 8005892:	f04f 0100 	mov.w	r1, #0
 8005896:	4602      	mov	r2, r0
 8005898:	460b      	mov	r3, r1
 800589a:	1894      	adds	r4, r2, r2
 800589c:	60bc      	str	r4, [r7, #8]
 800589e:	415b      	adcs	r3, r3
 80058a0:	60fb      	str	r3, [r7, #12]
 80058a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058a6:	1812      	adds	r2, r2, r0
 80058a8:	eb41 0303 	adc.w	r3, r1, r3
 80058ac:	f04f 0400 	mov.w	r4, #0
 80058b0:	f04f 0500 	mov.w	r5, #0
 80058b4:	00dd      	lsls	r5, r3, #3
 80058b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80058ba:	00d4      	lsls	r4, r2, #3
 80058bc:	4622      	mov	r2, r4
 80058be:	462b      	mov	r3, r5
 80058c0:	1814      	adds	r4, r2, r0
 80058c2:	64bc      	str	r4, [r7, #72]	; 0x48
 80058c4:	414b      	adcs	r3, r1
 80058c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f04f 0100 	mov.w	r1, #0
 80058d2:	f04f 0200 	mov.w	r2, #0
 80058d6:	f04f 0300 	mov.w	r3, #0
 80058da:	008b      	lsls	r3, r1, #2
 80058dc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80058e0:	0082      	lsls	r2, r0, #2
 80058e2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80058e6:	f7fa fcdb 	bl	80002a0 <__aeabi_uldivmod>
 80058ea:	4602      	mov	r2, r0
 80058ec:	460b      	mov	r3, r1
 80058ee:	4b2f      	ldr	r3, [pc, #188]	; (80059ac <UART_SetConfig+0x38c>)
 80058f0:	fba3 1302 	umull	r1, r3, r3, r2
 80058f4:	095b      	lsrs	r3, r3, #5
 80058f6:	2164      	movs	r1, #100	; 0x64
 80058f8:	fb01 f303 	mul.w	r3, r1, r3
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	011b      	lsls	r3, r3, #4
 8005900:	3332      	adds	r3, #50	; 0x32
 8005902:	4a2a      	ldr	r2, [pc, #168]	; (80059ac <UART_SetConfig+0x38c>)
 8005904:	fba2 2303 	umull	r2, r3, r2, r3
 8005908:	095b      	lsrs	r3, r3, #5
 800590a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800590e:	441e      	add	r6, r3
 8005910:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005912:	4618      	mov	r0, r3
 8005914:	f04f 0100 	mov.w	r1, #0
 8005918:	4602      	mov	r2, r0
 800591a:	460b      	mov	r3, r1
 800591c:	1894      	adds	r4, r2, r2
 800591e:	603c      	str	r4, [r7, #0]
 8005920:	415b      	adcs	r3, r3
 8005922:	607b      	str	r3, [r7, #4]
 8005924:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005928:	1812      	adds	r2, r2, r0
 800592a:	eb41 0303 	adc.w	r3, r1, r3
 800592e:	f04f 0400 	mov.w	r4, #0
 8005932:	f04f 0500 	mov.w	r5, #0
 8005936:	00dd      	lsls	r5, r3, #3
 8005938:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800593c:	00d4      	lsls	r4, r2, #3
 800593e:	4622      	mov	r2, r4
 8005940:	462b      	mov	r3, r5
 8005942:	eb12 0a00 	adds.w	sl, r2, r0
 8005946:	eb43 0b01 	adc.w	fp, r3, r1
 800594a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	4618      	mov	r0, r3
 8005950:	f04f 0100 	mov.w	r1, #0
 8005954:	f04f 0200 	mov.w	r2, #0
 8005958:	f04f 0300 	mov.w	r3, #0
 800595c:	008b      	lsls	r3, r1, #2
 800595e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005962:	0082      	lsls	r2, r0, #2
 8005964:	4650      	mov	r0, sl
 8005966:	4659      	mov	r1, fp
 8005968:	f7fa fc9a 	bl	80002a0 <__aeabi_uldivmod>
 800596c:	4602      	mov	r2, r0
 800596e:	460b      	mov	r3, r1
 8005970:	4b0e      	ldr	r3, [pc, #56]	; (80059ac <UART_SetConfig+0x38c>)
 8005972:	fba3 1302 	umull	r1, r3, r3, r2
 8005976:	095b      	lsrs	r3, r3, #5
 8005978:	2164      	movs	r1, #100	; 0x64
 800597a:	fb01 f303 	mul.w	r3, r1, r3
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	011b      	lsls	r3, r3, #4
 8005982:	3332      	adds	r3, #50	; 0x32
 8005984:	4a09      	ldr	r2, [pc, #36]	; (80059ac <UART_SetConfig+0x38c>)
 8005986:	fba2 2303 	umull	r2, r3, r2, r3
 800598a:	095b      	lsrs	r3, r3, #5
 800598c:	f003 020f 	and.w	r2, r3, #15
 8005990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4432      	add	r2, r6
 8005996:	609a      	str	r2, [r3, #8]
}
 8005998:	bf00      	nop
 800599a:	377c      	adds	r7, #124	; 0x7c
 800599c:	46bd      	mov	sp, r7
 800599e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059a2:	bf00      	nop
 80059a4:	40011000 	.word	0x40011000
 80059a8:	40011400 	.word	0x40011400
 80059ac:	51eb851f 	.word	0x51eb851f

080059b0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80059b0:	b580      	push	{r7, lr}
 80059b2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80059b4:	4b05      	ldr	r3, [pc, #20]	; (80059cc <SysTick_Handler+0x1c>)
 80059b6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80059b8:	f000 f996 	bl	8005ce8 <xTaskGetSchedulerState>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d001      	beq.n	80059c6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80059c2:	f000 fa01 	bl	8005dc8 <xPortSysTickHandler>
  }
}
 80059c6:	bf00      	nop
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	e000e010 	.word	0xe000e010

080059d0 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	689a      	ldr	r2, [r3, #8]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	683a      	ldr	r2, [r7, #0]
 80059f4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	683a      	ldr	r2, [r7, #0]
 80059fa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	1c5a      	adds	r2, r3, #1
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	601a      	str	r2, [r3, #0]
}
 8005a0c:	bf00      	nop
 8005a0e:	3714      	adds	r7, #20
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	6892      	ldr	r2, [r2, #8]
 8005a2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	6852      	ldr	r2, [r2, #4]
 8005a38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d103      	bne.n	8005a4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	689a      	ldr	r2, [r3, #8]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	1e5a      	subs	r2, r3, #1
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005a72:	2300      	movs	r3, #0
 8005a74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a76:	4b4f      	ldr	r3, [pc, #316]	; (8005bb4 <xTaskIncrementTick+0x148>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f040 808f 	bne.w	8005b9e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005a80:	4b4d      	ldr	r3, [pc, #308]	; (8005bb8 <xTaskIncrementTick+0x14c>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	3301      	adds	r3, #1
 8005a86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005a88:	4a4b      	ldr	r2, [pc, #300]	; (8005bb8 <xTaskIncrementTick+0x14c>)
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d120      	bne.n	8005ad6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a94:	4b49      	ldr	r3, [pc, #292]	; (8005bbc <xTaskIncrementTick+0x150>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00a      	beq.n	8005ab4 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa2:	f383 8811 	msr	BASEPRI, r3
 8005aa6:	f3bf 8f6f 	isb	sy
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005ab0:	bf00      	nop
 8005ab2:	e7fe      	b.n	8005ab2 <xTaskIncrementTick+0x46>
 8005ab4:	4b41      	ldr	r3, [pc, #260]	; (8005bbc <xTaskIncrementTick+0x150>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	60fb      	str	r3, [r7, #12]
 8005aba:	4b41      	ldr	r3, [pc, #260]	; (8005bc0 <xTaskIncrementTick+0x154>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a3f      	ldr	r2, [pc, #252]	; (8005bbc <xTaskIncrementTick+0x150>)
 8005ac0:	6013      	str	r3, [r2, #0]
 8005ac2:	4a3f      	ldr	r2, [pc, #252]	; (8005bc0 <xTaskIncrementTick+0x154>)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6013      	str	r3, [r2, #0]
 8005ac8:	4b3e      	ldr	r3, [pc, #248]	; (8005bc4 <xTaskIncrementTick+0x158>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	3301      	adds	r3, #1
 8005ace:	4a3d      	ldr	r2, [pc, #244]	; (8005bc4 <xTaskIncrementTick+0x158>)
 8005ad0:	6013      	str	r3, [r2, #0]
 8005ad2:	f000 f8e9 	bl	8005ca8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ad6:	4b3c      	ldr	r3, [pc, #240]	; (8005bc8 <xTaskIncrementTick+0x15c>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d349      	bcc.n	8005b74 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ae0:	4b36      	ldr	r3, [pc, #216]	; (8005bbc <xTaskIncrementTick+0x150>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d104      	bne.n	8005af4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005aea:	4b37      	ldr	r3, [pc, #220]	; (8005bc8 <xTaskIncrementTick+0x15c>)
 8005aec:	f04f 32ff 	mov.w	r2, #4294967295
 8005af0:	601a      	str	r2, [r3, #0]
					break;
 8005af2:	e03f      	b.n	8005b74 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005af4:	4b31      	ldr	r3, [pc, #196]	; (8005bbc <xTaskIncrementTick+0x150>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d203      	bcs.n	8005b14 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b0c:	4a2e      	ldr	r2, [pc, #184]	; (8005bc8 <xTaskIncrementTick+0x15c>)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005b12:	e02f      	b.n	8005b74 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	3304      	adds	r3, #4
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7ff ff7d 	bl	8005a18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d004      	beq.n	8005b30 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	3318      	adds	r3, #24
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7ff ff74 	bl	8005a18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b34:	4b25      	ldr	r3, [pc, #148]	; (8005bcc <xTaskIncrementTick+0x160>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d903      	bls.n	8005b44 <xTaskIncrementTick+0xd8>
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b40:	4a22      	ldr	r2, [pc, #136]	; (8005bcc <xTaskIncrementTick+0x160>)
 8005b42:	6013      	str	r3, [r2, #0]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b48:	4613      	mov	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4a1f      	ldr	r2, [pc, #124]	; (8005bd0 <xTaskIncrementTick+0x164>)
 8005b52:	441a      	add	r2, r3
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	3304      	adds	r3, #4
 8005b58:	4619      	mov	r1, r3
 8005b5a:	4610      	mov	r0, r2
 8005b5c:	f7ff ff38 	bl	80059d0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b64:	4b1b      	ldr	r3, [pc, #108]	; (8005bd4 <xTaskIncrementTick+0x168>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d3b8      	bcc.n	8005ae0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b72:	e7b5      	b.n	8005ae0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b74:	4b17      	ldr	r3, [pc, #92]	; (8005bd4 <xTaskIncrementTick+0x168>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b7a:	4915      	ldr	r1, [pc, #84]	; (8005bd0 <xTaskIncrementTick+0x164>)
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4413      	add	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	440b      	add	r3, r1
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d901      	bls.n	8005b90 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005b90:	4b11      	ldr	r3, [pc, #68]	; (8005bd8 <xTaskIncrementTick+0x16c>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d007      	beq.n	8005ba8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	617b      	str	r3, [r7, #20]
 8005b9c:	e004      	b.n	8005ba8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005b9e:	4b0f      	ldr	r3, [pc, #60]	; (8005bdc <xTaskIncrementTick+0x170>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	4a0d      	ldr	r2, [pc, #52]	; (8005bdc <xTaskIncrementTick+0x170>)
 8005ba6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005ba8:	697b      	ldr	r3, [r7, #20]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3718      	adds	r7, #24
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	20000524 	.word	0x20000524
 8005bb8:	20000508 	.word	0x20000508
 8005bbc:	20000500 	.word	0x20000500
 8005bc0:	20000504 	.word	0x20000504
 8005bc4:	2000051c 	.word	0x2000051c
 8005bc8:	20000520 	.word	0x20000520
 8005bcc:	2000050c 	.word	0x2000050c
 8005bd0:	200000a0 	.word	0x200000a0
 8005bd4:	2000009c 	.word	0x2000009c
 8005bd8:	20000518 	.word	0x20000518
 8005bdc:	20000514 	.word	0x20000514

08005be0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005be6:	4b2a      	ldr	r3, [pc, #168]	; (8005c90 <vTaskSwitchContext+0xb0>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d003      	beq.n	8005bf6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005bee:	4b29      	ldr	r3, [pc, #164]	; (8005c94 <vTaskSwitchContext+0xb4>)
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005bf4:	e046      	b.n	8005c84 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005bf6:	4b27      	ldr	r3, [pc, #156]	; (8005c94 <vTaskSwitchContext+0xb4>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bfc:	4b26      	ldr	r3, [pc, #152]	; (8005c98 <vTaskSwitchContext+0xb8>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	60fb      	str	r3, [r7, #12]
 8005c02:	e010      	b.n	8005c26 <vTaskSwitchContext+0x46>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10a      	bne.n	8005c20 <vTaskSwitchContext+0x40>
	__asm volatile
 8005c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0e:	f383 8811 	msr	BASEPRI, r3
 8005c12:	f3bf 8f6f 	isb	sy
 8005c16:	f3bf 8f4f 	dsb	sy
 8005c1a:	607b      	str	r3, [r7, #4]
}
 8005c1c:	bf00      	nop
 8005c1e:	e7fe      	b.n	8005c1e <vTaskSwitchContext+0x3e>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	3b01      	subs	r3, #1
 8005c24:	60fb      	str	r3, [r7, #12]
 8005c26:	491d      	ldr	r1, [pc, #116]	; (8005c9c <vTaskSwitchContext+0xbc>)
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4413      	add	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	440b      	add	r3, r1
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d0e4      	beq.n	8005c04 <vTaskSwitchContext+0x24>
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	4413      	add	r3, r2
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4a15      	ldr	r2, [pc, #84]	; (8005c9c <vTaskSwitchContext+0xbc>)
 8005c46:	4413      	add	r3, r2
 8005c48:	60bb      	str	r3, [r7, #8]
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	685a      	ldr	r2, [r3, #4]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	605a      	str	r2, [r3, #4]
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	3308      	adds	r3, #8
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d104      	bne.n	8005c6a <vTaskSwitchContext+0x8a>
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	685a      	ldr	r2, [r3, #4]
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	605a      	str	r2, [r3, #4]
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	4a0b      	ldr	r2, [pc, #44]	; (8005ca0 <vTaskSwitchContext+0xc0>)
 8005c72:	6013      	str	r3, [r2, #0]
 8005c74:	4a08      	ldr	r2, [pc, #32]	; (8005c98 <vTaskSwitchContext+0xb8>)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c7a:	4b09      	ldr	r3, [pc, #36]	; (8005ca0 <vTaskSwitchContext+0xc0>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	3354      	adds	r3, #84	; 0x54
 8005c80:	4a08      	ldr	r2, [pc, #32]	; (8005ca4 <vTaskSwitchContext+0xc4>)
 8005c82:	6013      	str	r3, [r2, #0]
}
 8005c84:	bf00      	nop
 8005c86:	3714      	adds	r7, #20
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	20000524 	.word	0x20000524
 8005c94:	20000518 	.word	0x20000518
 8005c98:	2000050c 	.word	0x2000050c
 8005c9c:	200000a0 	.word	0x200000a0
 8005ca0:	2000009c 	.word	0x2000009c
 8005ca4:	20000014 	.word	0x20000014

08005ca8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cae:	4b0c      	ldr	r3, [pc, #48]	; (8005ce0 <prvResetNextTaskUnblockTime+0x38>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d104      	bne.n	8005cc2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005cb8:	4b0a      	ldr	r3, [pc, #40]	; (8005ce4 <prvResetNextTaskUnblockTime+0x3c>)
 8005cba:	f04f 32ff 	mov.w	r2, #4294967295
 8005cbe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005cc0:	e008      	b.n	8005cd4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cc2:	4b07      	ldr	r3, [pc, #28]	; (8005ce0 <prvResetNextTaskUnblockTime+0x38>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	4a04      	ldr	r2, [pc, #16]	; (8005ce4 <prvResetNextTaskUnblockTime+0x3c>)
 8005cd2:	6013      	str	r3, [r2, #0]
}
 8005cd4:	bf00      	nop
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr
 8005ce0:	20000500 	.word	0x20000500
 8005ce4:	20000520 	.word	0x20000520

08005ce8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005cee:	4b0b      	ldr	r3, [pc, #44]	; (8005d1c <xTaskGetSchedulerState+0x34>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d102      	bne.n	8005cfc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	607b      	str	r3, [r7, #4]
 8005cfa:	e008      	b.n	8005d0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cfc:	4b08      	ldr	r3, [pc, #32]	; (8005d20 <xTaskGetSchedulerState+0x38>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d102      	bne.n	8005d0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d04:	2302      	movs	r3, #2
 8005d06:	607b      	str	r3, [r7, #4]
 8005d08:	e001      	b.n	8005d0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d0e:	687b      	ldr	r3, [r7, #4]
	}
 8005d10:	4618      	mov	r0, r3
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	20000510 	.word	0x20000510
 8005d20:	20000524 	.word	0x20000524
	...

08005d30 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005d30:	4b07      	ldr	r3, [pc, #28]	; (8005d50 <pxCurrentTCBConst2>)
 8005d32:	6819      	ldr	r1, [r3, #0]
 8005d34:	6808      	ldr	r0, [r1, #0]
 8005d36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d3a:	f380 8809 	msr	PSP, r0
 8005d3e:	f3bf 8f6f 	isb	sy
 8005d42:	f04f 0000 	mov.w	r0, #0
 8005d46:	f380 8811 	msr	BASEPRI, r0
 8005d4a:	4770      	bx	lr
 8005d4c:	f3af 8000 	nop.w

08005d50 <pxCurrentTCBConst2>:
 8005d50:	2000009c 	.word	0x2000009c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005d54:	bf00      	nop
 8005d56:	bf00      	nop
	...

08005d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d60:	f3ef 8009 	mrs	r0, PSP
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	4b15      	ldr	r3, [pc, #84]	; (8005dc0 <pxCurrentTCBConst>)
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	f01e 0f10 	tst.w	lr, #16
 8005d70:	bf08      	it	eq
 8005d72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005d76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d7a:	6010      	str	r0, [r2, #0]
 8005d7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005d80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005d84:	f380 8811 	msr	BASEPRI, r0
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	f3bf 8f6f 	isb	sy
 8005d90:	f7ff ff26 	bl	8005be0 <vTaskSwitchContext>
 8005d94:	f04f 0000 	mov.w	r0, #0
 8005d98:	f380 8811 	msr	BASEPRI, r0
 8005d9c:	bc09      	pop	{r0, r3}
 8005d9e:	6819      	ldr	r1, [r3, #0]
 8005da0:	6808      	ldr	r0, [r1, #0]
 8005da2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da6:	f01e 0f10 	tst.w	lr, #16
 8005daa:	bf08      	it	eq
 8005dac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005db0:	f380 8809 	msr	PSP, r0
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	f3af 8000 	nop.w

08005dc0 <pxCurrentTCBConst>:
 8005dc0:	2000009c 	.word	0x2000009c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005dc4:	bf00      	nop
 8005dc6:	bf00      	nop

08005dc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
	__asm volatile
 8005dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd2:	f383 8811 	msr	BASEPRI, r3
 8005dd6:	f3bf 8f6f 	isb	sy
 8005dda:	f3bf 8f4f 	dsb	sy
 8005dde:	607b      	str	r3, [r7, #4]
}
 8005de0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005de2:	f7ff fe43 	bl	8005a6c <xTaskIncrementTick>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d003      	beq.n	8005df4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005dec:	4b06      	ldr	r3, [pc, #24]	; (8005e08 <xPortSysTickHandler+0x40>)
 8005dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	2300      	movs	r3, #0
 8005df6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005dfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005e00:	bf00      	nop
 8005e02:	3708      	adds	r7, #8
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	e000ed04 	.word	0xe000ed04

08005e0c <__errno>:
 8005e0c:	4b01      	ldr	r3, [pc, #4]	; (8005e14 <__errno+0x8>)
 8005e0e:	6818      	ldr	r0, [r3, #0]
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	20000014 	.word	0x20000014

08005e18 <__libc_init_array>:
 8005e18:	b570      	push	{r4, r5, r6, lr}
 8005e1a:	4d0d      	ldr	r5, [pc, #52]	; (8005e50 <__libc_init_array+0x38>)
 8005e1c:	4c0d      	ldr	r4, [pc, #52]	; (8005e54 <__libc_init_array+0x3c>)
 8005e1e:	1b64      	subs	r4, r4, r5
 8005e20:	10a4      	asrs	r4, r4, #2
 8005e22:	2600      	movs	r6, #0
 8005e24:	42a6      	cmp	r6, r4
 8005e26:	d109      	bne.n	8005e3c <__libc_init_array+0x24>
 8005e28:	4d0b      	ldr	r5, [pc, #44]	; (8005e58 <__libc_init_array+0x40>)
 8005e2a:	4c0c      	ldr	r4, [pc, #48]	; (8005e5c <__libc_init_array+0x44>)
 8005e2c:	f000 fc4e 	bl	80066cc <_init>
 8005e30:	1b64      	subs	r4, r4, r5
 8005e32:	10a4      	asrs	r4, r4, #2
 8005e34:	2600      	movs	r6, #0
 8005e36:	42a6      	cmp	r6, r4
 8005e38:	d105      	bne.n	8005e46 <__libc_init_array+0x2e>
 8005e3a:	bd70      	pop	{r4, r5, r6, pc}
 8005e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e40:	4798      	blx	r3
 8005e42:	3601      	adds	r6, #1
 8005e44:	e7ee      	b.n	8005e24 <__libc_init_array+0xc>
 8005e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e4a:	4798      	blx	r3
 8005e4c:	3601      	adds	r6, #1
 8005e4e:	e7f2      	b.n	8005e36 <__libc_init_array+0x1e>
 8005e50:	08006818 	.word	0x08006818
 8005e54:	08006818 	.word	0x08006818
 8005e58:	08006818 	.word	0x08006818
 8005e5c:	0800681c 	.word	0x0800681c

08005e60 <__retarget_lock_acquire_recursive>:
 8005e60:	4770      	bx	lr

08005e62 <__retarget_lock_release_recursive>:
 8005e62:	4770      	bx	lr

08005e64 <memcpy>:
 8005e64:	440a      	add	r2, r1
 8005e66:	4291      	cmp	r1, r2
 8005e68:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e6c:	d100      	bne.n	8005e70 <memcpy+0xc>
 8005e6e:	4770      	bx	lr
 8005e70:	b510      	push	{r4, lr}
 8005e72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e7a:	4291      	cmp	r1, r2
 8005e7c:	d1f9      	bne.n	8005e72 <memcpy+0xe>
 8005e7e:	bd10      	pop	{r4, pc}

08005e80 <memset>:
 8005e80:	4402      	add	r2, r0
 8005e82:	4603      	mov	r3, r0
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d100      	bne.n	8005e8a <memset+0xa>
 8005e88:	4770      	bx	lr
 8005e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e8e:	e7f9      	b.n	8005e84 <memset+0x4>

08005e90 <_malloc_r>:
 8005e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e92:	1ccd      	adds	r5, r1, #3
 8005e94:	f025 0503 	bic.w	r5, r5, #3
 8005e98:	3508      	adds	r5, #8
 8005e9a:	2d0c      	cmp	r5, #12
 8005e9c:	bf38      	it	cc
 8005e9e:	250c      	movcc	r5, #12
 8005ea0:	2d00      	cmp	r5, #0
 8005ea2:	4606      	mov	r6, r0
 8005ea4:	db01      	blt.n	8005eaa <_malloc_r+0x1a>
 8005ea6:	42a9      	cmp	r1, r5
 8005ea8:	d903      	bls.n	8005eb2 <_malloc_r+0x22>
 8005eaa:	230c      	movs	r3, #12
 8005eac:	6033      	str	r3, [r6, #0]
 8005eae:	2000      	movs	r0, #0
 8005eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005eb2:	f000 f877 	bl	8005fa4 <__malloc_lock>
 8005eb6:	4921      	ldr	r1, [pc, #132]	; (8005f3c <_malloc_r+0xac>)
 8005eb8:	680a      	ldr	r2, [r1, #0]
 8005eba:	4614      	mov	r4, r2
 8005ebc:	b99c      	cbnz	r4, 8005ee6 <_malloc_r+0x56>
 8005ebe:	4f20      	ldr	r7, [pc, #128]	; (8005f40 <_malloc_r+0xb0>)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	b923      	cbnz	r3, 8005ece <_malloc_r+0x3e>
 8005ec4:	4621      	mov	r1, r4
 8005ec6:	4630      	mov	r0, r6
 8005ec8:	f000 f83c 	bl	8005f44 <_sbrk_r>
 8005ecc:	6038      	str	r0, [r7, #0]
 8005ece:	4629      	mov	r1, r5
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	f000 f837 	bl	8005f44 <_sbrk_r>
 8005ed6:	1c43      	adds	r3, r0, #1
 8005ed8:	d123      	bne.n	8005f22 <_malloc_r+0x92>
 8005eda:	230c      	movs	r3, #12
 8005edc:	6033      	str	r3, [r6, #0]
 8005ede:	4630      	mov	r0, r6
 8005ee0:	f000 f866 	bl	8005fb0 <__malloc_unlock>
 8005ee4:	e7e3      	b.n	8005eae <_malloc_r+0x1e>
 8005ee6:	6823      	ldr	r3, [r4, #0]
 8005ee8:	1b5b      	subs	r3, r3, r5
 8005eea:	d417      	bmi.n	8005f1c <_malloc_r+0x8c>
 8005eec:	2b0b      	cmp	r3, #11
 8005eee:	d903      	bls.n	8005ef8 <_malloc_r+0x68>
 8005ef0:	6023      	str	r3, [r4, #0]
 8005ef2:	441c      	add	r4, r3
 8005ef4:	6025      	str	r5, [r4, #0]
 8005ef6:	e004      	b.n	8005f02 <_malloc_r+0x72>
 8005ef8:	6863      	ldr	r3, [r4, #4]
 8005efa:	42a2      	cmp	r2, r4
 8005efc:	bf0c      	ite	eq
 8005efe:	600b      	streq	r3, [r1, #0]
 8005f00:	6053      	strne	r3, [r2, #4]
 8005f02:	4630      	mov	r0, r6
 8005f04:	f000 f854 	bl	8005fb0 <__malloc_unlock>
 8005f08:	f104 000b 	add.w	r0, r4, #11
 8005f0c:	1d23      	adds	r3, r4, #4
 8005f0e:	f020 0007 	bic.w	r0, r0, #7
 8005f12:	1ac2      	subs	r2, r0, r3
 8005f14:	d0cc      	beq.n	8005eb0 <_malloc_r+0x20>
 8005f16:	1a1b      	subs	r3, r3, r0
 8005f18:	50a3      	str	r3, [r4, r2]
 8005f1a:	e7c9      	b.n	8005eb0 <_malloc_r+0x20>
 8005f1c:	4622      	mov	r2, r4
 8005f1e:	6864      	ldr	r4, [r4, #4]
 8005f20:	e7cc      	b.n	8005ebc <_malloc_r+0x2c>
 8005f22:	1cc4      	adds	r4, r0, #3
 8005f24:	f024 0403 	bic.w	r4, r4, #3
 8005f28:	42a0      	cmp	r0, r4
 8005f2a:	d0e3      	beq.n	8005ef4 <_malloc_r+0x64>
 8005f2c:	1a21      	subs	r1, r4, r0
 8005f2e:	4630      	mov	r0, r6
 8005f30:	f000 f808 	bl	8005f44 <_sbrk_r>
 8005f34:	3001      	adds	r0, #1
 8005f36:	d1dd      	bne.n	8005ef4 <_malloc_r+0x64>
 8005f38:	e7cf      	b.n	8005eda <_malloc_r+0x4a>
 8005f3a:	bf00      	nop
 8005f3c:	20000528 	.word	0x20000528
 8005f40:	2000052c 	.word	0x2000052c

08005f44 <_sbrk_r>:
 8005f44:	b538      	push	{r3, r4, r5, lr}
 8005f46:	4d06      	ldr	r5, [pc, #24]	; (8005f60 <_sbrk_r+0x1c>)
 8005f48:	2300      	movs	r3, #0
 8005f4a:	4604      	mov	r4, r0
 8005f4c:	4608      	mov	r0, r1
 8005f4e:	602b      	str	r3, [r5, #0]
 8005f50:	f7fb fe78 	bl	8001c44 <_sbrk>
 8005f54:	1c43      	adds	r3, r0, #1
 8005f56:	d102      	bne.n	8005f5e <_sbrk_r+0x1a>
 8005f58:	682b      	ldr	r3, [r5, #0]
 8005f5a:	b103      	cbz	r3, 8005f5e <_sbrk_r+0x1a>
 8005f5c:	6023      	str	r3, [r4, #0]
 8005f5e:	bd38      	pop	{r3, r4, r5, pc}
 8005f60:	20000958 	.word	0x20000958

08005f64 <siprintf>:
 8005f64:	b40e      	push	{r1, r2, r3}
 8005f66:	b500      	push	{lr}
 8005f68:	b09c      	sub	sp, #112	; 0x70
 8005f6a:	ab1d      	add	r3, sp, #116	; 0x74
 8005f6c:	9002      	str	r0, [sp, #8]
 8005f6e:	9006      	str	r0, [sp, #24]
 8005f70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f74:	4809      	ldr	r0, [pc, #36]	; (8005f9c <siprintf+0x38>)
 8005f76:	9107      	str	r1, [sp, #28]
 8005f78:	9104      	str	r1, [sp, #16]
 8005f7a:	4909      	ldr	r1, [pc, #36]	; (8005fa0 <siprintf+0x3c>)
 8005f7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f80:	9105      	str	r1, [sp, #20]
 8005f82:	6800      	ldr	r0, [r0, #0]
 8005f84:	9301      	str	r3, [sp, #4]
 8005f86:	a902      	add	r1, sp, #8
 8005f88:	f000 f8c4 	bl	8006114 <_svfiprintf_r>
 8005f8c:	9b02      	ldr	r3, [sp, #8]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	701a      	strb	r2, [r3, #0]
 8005f92:	b01c      	add	sp, #112	; 0x70
 8005f94:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f98:	b003      	add	sp, #12
 8005f9a:	4770      	bx	lr
 8005f9c:	20000014 	.word	0x20000014
 8005fa0:	ffff0208 	.word	0xffff0208

08005fa4 <__malloc_lock>:
 8005fa4:	4801      	ldr	r0, [pc, #4]	; (8005fac <__malloc_lock+0x8>)
 8005fa6:	f7ff bf5b 	b.w	8005e60 <__retarget_lock_acquire_recursive>
 8005faa:	bf00      	nop
 8005fac:	20000950 	.word	0x20000950

08005fb0 <__malloc_unlock>:
 8005fb0:	4801      	ldr	r0, [pc, #4]	; (8005fb8 <__malloc_unlock+0x8>)
 8005fb2:	f7ff bf56 	b.w	8005e62 <__retarget_lock_release_recursive>
 8005fb6:	bf00      	nop
 8005fb8:	20000950 	.word	0x20000950

08005fbc <_free_r>:
 8005fbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005fbe:	2900      	cmp	r1, #0
 8005fc0:	d048      	beq.n	8006054 <_free_r+0x98>
 8005fc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fc6:	9001      	str	r0, [sp, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f1a1 0404 	sub.w	r4, r1, #4
 8005fce:	bfb8      	it	lt
 8005fd0:	18e4      	addlt	r4, r4, r3
 8005fd2:	f7ff ffe7 	bl	8005fa4 <__malloc_lock>
 8005fd6:	4a20      	ldr	r2, [pc, #128]	; (8006058 <_free_r+0x9c>)
 8005fd8:	9801      	ldr	r0, [sp, #4]
 8005fda:	6813      	ldr	r3, [r2, #0]
 8005fdc:	4615      	mov	r5, r2
 8005fde:	b933      	cbnz	r3, 8005fee <_free_r+0x32>
 8005fe0:	6063      	str	r3, [r4, #4]
 8005fe2:	6014      	str	r4, [r2, #0]
 8005fe4:	b003      	add	sp, #12
 8005fe6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005fea:	f7ff bfe1 	b.w	8005fb0 <__malloc_unlock>
 8005fee:	42a3      	cmp	r3, r4
 8005ff0:	d90b      	bls.n	800600a <_free_r+0x4e>
 8005ff2:	6821      	ldr	r1, [r4, #0]
 8005ff4:	1862      	adds	r2, r4, r1
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	bf04      	itt	eq
 8005ffa:	681a      	ldreq	r2, [r3, #0]
 8005ffc:	685b      	ldreq	r3, [r3, #4]
 8005ffe:	6063      	str	r3, [r4, #4]
 8006000:	bf04      	itt	eq
 8006002:	1852      	addeq	r2, r2, r1
 8006004:	6022      	streq	r2, [r4, #0]
 8006006:	602c      	str	r4, [r5, #0]
 8006008:	e7ec      	b.n	8005fe4 <_free_r+0x28>
 800600a:	461a      	mov	r2, r3
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	b10b      	cbz	r3, 8006014 <_free_r+0x58>
 8006010:	42a3      	cmp	r3, r4
 8006012:	d9fa      	bls.n	800600a <_free_r+0x4e>
 8006014:	6811      	ldr	r1, [r2, #0]
 8006016:	1855      	adds	r5, r2, r1
 8006018:	42a5      	cmp	r5, r4
 800601a:	d10b      	bne.n	8006034 <_free_r+0x78>
 800601c:	6824      	ldr	r4, [r4, #0]
 800601e:	4421      	add	r1, r4
 8006020:	1854      	adds	r4, r2, r1
 8006022:	42a3      	cmp	r3, r4
 8006024:	6011      	str	r1, [r2, #0]
 8006026:	d1dd      	bne.n	8005fe4 <_free_r+0x28>
 8006028:	681c      	ldr	r4, [r3, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	6053      	str	r3, [r2, #4]
 800602e:	4421      	add	r1, r4
 8006030:	6011      	str	r1, [r2, #0]
 8006032:	e7d7      	b.n	8005fe4 <_free_r+0x28>
 8006034:	d902      	bls.n	800603c <_free_r+0x80>
 8006036:	230c      	movs	r3, #12
 8006038:	6003      	str	r3, [r0, #0]
 800603a:	e7d3      	b.n	8005fe4 <_free_r+0x28>
 800603c:	6825      	ldr	r5, [r4, #0]
 800603e:	1961      	adds	r1, r4, r5
 8006040:	428b      	cmp	r3, r1
 8006042:	bf04      	itt	eq
 8006044:	6819      	ldreq	r1, [r3, #0]
 8006046:	685b      	ldreq	r3, [r3, #4]
 8006048:	6063      	str	r3, [r4, #4]
 800604a:	bf04      	itt	eq
 800604c:	1949      	addeq	r1, r1, r5
 800604e:	6021      	streq	r1, [r4, #0]
 8006050:	6054      	str	r4, [r2, #4]
 8006052:	e7c7      	b.n	8005fe4 <_free_r+0x28>
 8006054:	b003      	add	sp, #12
 8006056:	bd30      	pop	{r4, r5, pc}
 8006058:	20000528 	.word	0x20000528

0800605c <__ssputs_r>:
 800605c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006060:	688e      	ldr	r6, [r1, #8]
 8006062:	429e      	cmp	r6, r3
 8006064:	4682      	mov	sl, r0
 8006066:	460c      	mov	r4, r1
 8006068:	4690      	mov	r8, r2
 800606a:	461f      	mov	r7, r3
 800606c:	d838      	bhi.n	80060e0 <__ssputs_r+0x84>
 800606e:	898a      	ldrh	r2, [r1, #12]
 8006070:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006074:	d032      	beq.n	80060dc <__ssputs_r+0x80>
 8006076:	6825      	ldr	r5, [r4, #0]
 8006078:	6909      	ldr	r1, [r1, #16]
 800607a:	eba5 0901 	sub.w	r9, r5, r1
 800607e:	6965      	ldr	r5, [r4, #20]
 8006080:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006084:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006088:	3301      	adds	r3, #1
 800608a:	444b      	add	r3, r9
 800608c:	106d      	asrs	r5, r5, #1
 800608e:	429d      	cmp	r5, r3
 8006090:	bf38      	it	cc
 8006092:	461d      	movcc	r5, r3
 8006094:	0553      	lsls	r3, r2, #21
 8006096:	d531      	bpl.n	80060fc <__ssputs_r+0xa0>
 8006098:	4629      	mov	r1, r5
 800609a:	f7ff fef9 	bl	8005e90 <_malloc_r>
 800609e:	4606      	mov	r6, r0
 80060a0:	b950      	cbnz	r0, 80060b8 <__ssputs_r+0x5c>
 80060a2:	230c      	movs	r3, #12
 80060a4:	f8ca 3000 	str.w	r3, [sl]
 80060a8:	89a3      	ldrh	r3, [r4, #12]
 80060aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060ae:	81a3      	strh	r3, [r4, #12]
 80060b0:	f04f 30ff 	mov.w	r0, #4294967295
 80060b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060b8:	6921      	ldr	r1, [r4, #16]
 80060ba:	464a      	mov	r2, r9
 80060bc:	f7ff fed2 	bl	8005e64 <memcpy>
 80060c0:	89a3      	ldrh	r3, [r4, #12]
 80060c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80060c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ca:	81a3      	strh	r3, [r4, #12]
 80060cc:	6126      	str	r6, [r4, #16]
 80060ce:	6165      	str	r5, [r4, #20]
 80060d0:	444e      	add	r6, r9
 80060d2:	eba5 0509 	sub.w	r5, r5, r9
 80060d6:	6026      	str	r6, [r4, #0]
 80060d8:	60a5      	str	r5, [r4, #8]
 80060da:	463e      	mov	r6, r7
 80060dc:	42be      	cmp	r6, r7
 80060de:	d900      	bls.n	80060e2 <__ssputs_r+0x86>
 80060e0:	463e      	mov	r6, r7
 80060e2:	4632      	mov	r2, r6
 80060e4:	6820      	ldr	r0, [r4, #0]
 80060e6:	4641      	mov	r1, r8
 80060e8:	f000 faa8 	bl	800663c <memmove>
 80060ec:	68a3      	ldr	r3, [r4, #8]
 80060ee:	6822      	ldr	r2, [r4, #0]
 80060f0:	1b9b      	subs	r3, r3, r6
 80060f2:	4432      	add	r2, r6
 80060f4:	60a3      	str	r3, [r4, #8]
 80060f6:	6022      	str	r2, [r4, #0]
 80060f8:	2000      	movs	r0, #0
 80060fa:	e7db      	b.n	80060b4 <__ssputs_r+0x58>
 80060fc:	462a      	mov	r2, r5
 80060fe:	f000 fab7 	bl	8006670 <_realloc_r>
 8006102:	4606      	mov	r6, r0
 8006104:	2800      	cmp	r0, #0
 8006106:	d1e1      	bne.n	80060cc <__ssputs_r+0x70>
 8006108:	6921      	ldr	r1, [r4, #16]
 800610a:	4650      	mov	r0, sl
 800610c:	f7ff ff56 	bl	8005fbc <_free_r>
 8006110:	e7c7      	b.n	80060a2 <__ssputs_r+0x46>
	...

08006114 <_svfiprintf_r>:
 8006114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006118:	4698      	mov	r8, r3
 800611a:	898b      	ldrh	r3, [r1, #12]
 800611c:	061b      	lsls	r3, r3, #24
 800611e:	b09d      	sub	sp, #116	; 0x74
 8006120:	4607      	mov	r7, r0
 8006122:	460d      	mov	r5, r1
 8006124:	4614      	mov	r4, r2
 8006126:	d50e      	bpl.n	8006146 <_svfiprintf_r+0x32>
 8006128:	690b      	ldr	r3, [r1, #16]
 800612a:	b963      	cbnz	r3, 8006146 <_svfiprintf_r+0x32>
 800612c:	2140      	movs	r1, #64	; 0x40
 800612e:	f7ff feaf 	bl	8005e90 <_malloc_r>
 8006132:	6028      	str	r0, [r5, #0]
 8006134:	6128      	str	r0, [r5, #16]
 8006136:	b920      	cbnz	r0, 8006142 <_svfiprintf_r+0x2e>
 8006138:	230c      	movs	r3, #12
 800613a:	603b      	str	r3, [r7, #0]
 800613c:	f04f 30ff 	mov.w	r0, #4294967295
 8006140:	e0d1      	b.n	80062e6 <_svfiprintf_r+0x1d2>
 8006142:	2340      	movs	r3, #64	; 0x40
 8006144:	616b      	str	r3, [r5, #20]
 8006146:	2300      	movs	r3, #0
 8006148:	9309      	str	r3, [sp, #36]	; 0x24
 800614a:	2320      	movs	r3, #32
 800614c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006150:	f8cd 800c 	str.w	r8, [sp, #12]
 8006154:	2330      	movs	r3, #48	; 0x30
 8006156:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006300 <_svfiprintf_r+0x1ec>
 800615a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800615e:	f04f 0901 	mov.w	r9, #1
 8006162:	4623      	mov	r3, r4
 8006164:	469a      	mov	sl, r3
 8006166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800616a:	b10a      	cbz	r2, 8006170 <_svfiprintf_r+0x5c>
 800616c:	2a25      	cmp	r2, #37	; 0x25
 800616e:	d1f9      	bne.n	8006164 <_svfiprintf_r+0x50>
 8006170:	ebba 0b04 	subs.w	fp, sl, r4
 8006174:	d00b      	beq.n	800618e <_svfiprintf_r+0x7a>
 8006176:	465b      	mov	r3, fp
 8006178:	4622      	mov	r2, r4
 800617a:	4629      	mov	r1, r5
 800617c:	4638      	mov	r0, r7
 800617e:	f7ff ff6d 	bl	800605c <__ssputs_r>
 8006182:	3001      	adds	r0, #1
 8006184:	f000 80aa 	beq.w	80062dc <_svfiprintf_r+0x1c8>
 8006188:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800618a:	445a      	add	r2, fp
 800618c:	9209      	str	r2, [sp, #36]	; 0x24
 800618e:	f89a 3000 	ldrb.w	r3, [sl]
 8006192:	2b00      	cmp	r3, #0
 8006194:	f000 80a2 	beq.w	80062dc <_svfiprintf_r+0x1c8>
 8006198:	2300      	movs	r3, #0
 800619a:	f04f 32ff 	mov.w	r2, #4294967295
 800619e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061a2:	f10a 0a01 	add.w	sl, sl, #1
 80061a6:	9304      	str	r3, [sp, #16]
 80061a8:	9307      	str	r3, [sp, #28]
 80061aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061ae:	931a      	str	r3, [sp, #104]	; 0x68
 80061b0:	4654      	mov	r4, sl
 80061b2:	2205      	movs	r2, #5
 80061b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061b8:	4851      	ldr	r0, [pc, #324]	; (8006300 <_svfiprintf_r+0x1ec>)
 80061ba:	f7fa f821 	bl	8000200 <memchr>
 80061be:	9a04      	ldr	r2, [sp, #16]
 80061c0:	b9d8      	cbnz	r0, 80061fa <_svfiprintf_r+0xe6>
 80061c2:	06d0      	lsls	r0, r2, #27
 80061c4:	bf44      	itt	mi
 80061c6:	2320      	movmi	r3, #32
 80061c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061cc:	0711      	lsls	r1, r2, #28
 80061ce:	bf44      	itt	mi
 80061d0:	232b      	movmi	r3, #43	; 0x2b
 80061d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061d6:	f89a 3000 	ldrb.w	r3, [sl]
 80061da:	2b2a      	cmp	r3, #42	; 0x2a
 80061dc:	d015      	beq.n	800620a <_svfiprintf_r+0xf6>
 80061de:	9a07      	ldr	r2, [sp, #28]
 80061e0:	4654      	mov	r4, sl
 80061e2:	2000      	movs	r0, #0
 80061e4:	f04f 0c0a 	mov.w	ip, #10
 80061e8:	4621      	mov	r1, r4
 80061ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061ee:	3b30      	subs	r3, #48	; 0x30
 80061f0:	2b09      	cmp	r3, #9
 80061f2:	d94e      	bls.n	8006292 <_svfiprintf_r+0x17e>
 80061f4:	b1b0      	cbz	r0, 8006224 <_svfiprintf_r+0x110>
 80061f6:	9207      	str	r2, [sp, #28]
 80061f8:	e014      	b.n	8006224 <_svfiprintf_r+0x110>
 80061fa:	eba0 0308 	sub.w	r3, r0, r8
 80061fe:	fa09 f303 	lsl.w	r3, r9, r3
 8006202:	4313      	orrs	r3, r2
 8006204:	9304      	str	r3, [sp, #16]
 8006206:	46a2      	mov	sl, r4
 8006208:	e7d2      	b.n	80061b0 <_svfiprintf_r+0x9c>
 800620a:	9b03      	ldr	r3, [sp, #12]
 800620c:	1d19      	adds	r1, r3, #4
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	9103      	str	r1, [sp, #12]
 8006212:	2b00      	cmp	r3, #0
 8006214:	bfbb      	ittet	lt
 8006216:	425b      	neglt	r3, r3
 8006218:	f042 0202 	orrlt.w	r2, r2, #2
 800621c:	9307      	strge	r3, [sp, #28]
 800621e:	9307      	strlt	r3, [sp, #28]
 8006220:	bfb8      	it	lt
 8006222:	9204      	strlt	r2, [sp, #16]
 8006224:	7823      	ldrb	r3, [r4, #0]
 8006226:	2b2e      	cmp	r3, #46	; 0x2e
 8006228:	d10c      	bne.n	8006244 <_svfiprintf_r+0x130>
 800622a:	7863      	ldrb	r3, [r4, #1]
 800622c:	2b2a      	cmp	r3, #42	; 0x2a
 800622e:	d135      	bne.n	800629c <_svfiprintf_r+0x188>
 8006230:	9b03      	ldr	r3, [sp, #12]
 8006232:	1d1a      	adds	r2, r3, #4
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	9203      	str	r2, [sp, #12]
 8006238:	2b00      	cmp	r3, #0
 800623a:	bfb8      	it	lt
 800623c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006240:	3402      	adds	r4, #2
 8006242:	9305      	str	r3, [sp, #20]
 8006244:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006310 <_svfiprintf_r+0x1fc>
 8006248:	7821      	ldrb	r1, [r4, #0]
 800624a:	2203      	movs	r2, #3
 800624c:	4650      	mov	r0, sl
 800624e:	f7f9 ffd7 	bl	8000200 <memchr>
 8006252:	b140      	cbz	r0, 8006266 <_svfiprintf_r+0x152>
 8006254:	2340      	movs	r3, #64	; 0x40
 8006256:	eba0 000a 	sub.w	r0, r0, sl
 800625a:	fa03 f000 	lsl.w	r0, r3, r0
 800625e:	9b04      	ldr	r3, [sp, #16]
 8006260:	4303      	orrs	r3, r0
 8006262:	3401      	adds	r4, #1
 8006264:	9304      	str	r3, [sp, #16]
 8006266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800626a:	4826      	ldr	r0, [pc, #152]	; (8006304 <_svfiprintf_r+0x1f0>)
 800626c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006270:	2206      	movs	r2, #6
 8006272:	f7f9 ffc5 	bl	8000200 <memchr>
 8006276:	2800      	cmp	r0, #0
 8006278:	d038      	beq.n	80062ec <_svfiprintf_r+0x1d8>
 800627a:	4b23      	ldr	r3, [pc, #140]	; (8006308 <_svfiprintf_r+0x1f4>)
 800627c:	bb1b      	cbnz	r3, 80062c6 <_svfiprintf_r+0x1b2>
 800627e:	9b03      	ldr	r3, [sp, #12]
 8006280:	3307      	adds	r3, #7
 8006282:	f023 0307 	bic.w	r3, r3, #7
 8006286:	3308      	adds	r3, #8
 8006288:	9303      	str	r3, [sp, #12]
 800628a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800628c:	4433      	add	r3, r6
 800628e:	9309      	str	r3, [sp, #36]	; 0x24
 8006290:	e767      	b.n	8006162 <_svfiprintf_r+0x4e>
 8006292:	fb0c 3202 	mla	r2, ip, r2, r3
 8006296:	460c      	mov	r4, r1
 8006298:	2001      	movs	r0, #1
 800629a:	e7a5      	b.n	80061e8 <_svfiprintf_r+0xd4>
 800629c:	2300      	movs	r3, #0
 800629e:	3401      	adds	r4, #1
 80062a0:	9305      	str	r3, [sp, #20]
 80062a2:	4619      	mov	r1, r3
 80062a4:	f04f 0c0a 	mov.w	ip, #10
 80062a8:	4620      	mov	r0, r4
 80062aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062ae:	3a30      	subs	r2, #48	; 0x30
 80062b0:	2a09      	cmp	r2, #9
 80062b2:	d903      	bls.n	80062bc <_svfiprintf_r+0x1a8>
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d0c5      	beq.n	8006244 <_svfiprintf_r+0x130>
 80062b8:	9105      	str	r1, [sp, #20]
 80062ba:	e7c3      	b.n	8006244 <_svfiprintf_r+0x130>
 80062bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80062c0:	4604      	mov	r4, r0
 80062c2:	2301      	movs	r3, #1
 80062c4:	e7f0      	b.n	80062a8 <_svfiprintf_r+0x194>
 80062c6:	ab03      	add	r3, sp, #12
 80062c8:	9300      	str	r3, [sp, #0]
 80062ca:	462a      	mov	r2, r5
 80062cc:	4b0f      	ldr	r3, [pc, #60]	; (800630c <_svfiprintf_r+0x1f8>)
 80062ce:	a904      	add	r1, sp, #16
 80062d0:	4638      	mov	r0, r7
 80062d2:	f3af 8000 	nop.w
 80062d6:	1c42      	adds	r2, r0, #1
 80062d8:	4606      	mov	r6, r0
 80062da:	d1d6      	bne.n	800628a <_svfiprintf_r+0x176>
 80062dc:	89ab      	ldrh	r3, [r5, #12]
 80062de:	065b      	lsls	r3, r3, #25
 80062e0:	f53f af2c 	bmi.w	800613c <_svfiprintf_r+0x28>
 80062e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062e6:	b01d      	add	sp, #116	; 0x74
 80062e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ec:	ab03      	add	r3, sp, #12
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	462a      	mov	r2, r5
 80062f2:	4b06      	ldr	r3, [pc, #24]	; (800630c <_svfiprintf_r+0x1f8>)
 80062f4:	a904      	add	r1, sp, #16
 80062f6:	4638      	mov	r0, r7
 80062f8:	f000 f87a 	bl	80063f0 <_printf_i>
 80062fc:	e7eb      	b.n	80062d6 <_svfiprintf_r+0x1c2>
 80062fe:	bf00      	nop
 8006300:	080067dc 	.word	0x080067dc
 8006304:	080067e6 	.word	0x080067e6
 8006308:	00000000 	.word	0x00000000
 800630c:	0800605d 	.word	0x0800605d
 8006310:	080067e2 	.word	0x080067e2

08006314 <_printf_common>:
 8006314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006318:	4616      	mov	r6, r2
 800631a:	4699      	mov	r9, r3
 800631c:	688a      	ldr	r2, [r1, #8]
 800631e:	690b      	ldr	r3, [r1, #16]
 8006320:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006324:	4293      	cmp	r3, r2
 8006326:	bfb8      	it	lt
 8006328:	4613      	movlt	r3, r2
 800632a:	6033      	str	r3, [r6, #0]
 800632c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006330:	4607      	mov	r7, r0
 8006332:	460c      	mov	r4, r1
 8006334:	b10a      	cbz	r2, 800633a <_printf_common+0x26>
 8006336:	3301      	adds	r3, #1
 8006338:	6033      	str	r3, [r6, #0]
 800633a:	6823      	ldr	r3, [r4, #0]
 800633c:	0699      	lsls	r1, r3, #26
 800633e:	bf42      	ittt	mi
 8006340:	6833      	ldrmi	r3, [r6, #0]
 8006342:	3302      	addmi	r3, #2
 8006344:	6033      	strmi	r3, [r6, #0]
 8006346:	6825      	ldr	r5, [r4, #0]
 8006348:	f015 0506 	ands.w	r5, r5, #6
 800634c:	d106      	bne.n	800635c <_printf_common+0x48>
 800634e:	f104 0a19 	add.w	sl, r4, #25
 8006352:	68e3      	ldr	r3, [r4, #12]
 8006354:	6832      	ldr	r2, [r6, #0]
 8006356:	1a9b      	subs	r3, r3, r2
 8006358:	42ab      	cmp	r3, r5
 800635a:	dc26      	bgt.n	80063aa <_printf_common+0x96>
 800635c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006360:	1e13      	subs	r3, r2, #0
 8006362:	6822      	ldr	r2, [r4, #0]
 8006364:	bf18      	it	ne
 8006366:	2301      	movne	r3, #1
 8006368:	0692      	lsls	r2, r2, #26
 800636a:	d42b      	bmi.n	80063c4 <_printf_common+0xb0>
 800636c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006370:	4649      	mov	r1, r9
 8006372:	4638      	mov	r0, r7
 8006374:	47c0      	blx	r8
 8006376:	3001      	adds	r0, #1
 8006378:	d01e      	beq.n	80063b8 <_printf_common+0xa4>
 800637a:	6823      	ldr	r3, [r4, #0]
 800637c:	68e5      	ldr	r5, [r4, #12]
 800637e:	6832      	ldr	r2, [r6, #0]
 8006380:	f003 0306 	and.w	r3, r3, #6
 8006384:	2b04      	cmp	r3, #4
 8006386:	bf08      	it	eq
 8006388:	1aad      	subeq	r5, r5, r2
 800638a:	68a3      	ldr	r3, [r4, #8]
 800638c:	6922      	ldr	r2, [r4, #16]
 800638e:	bf0c      	ite	eq
 8006390:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006394:	2500      	movne	r5, #0
 8006396:	4293      	cmp	r3, r2
 8006398:	bfc4      	itt	gt
 800639a:	1a9b      	subgt	r3, r3, r2
 800639c:	18ed      	addgt	r5, r5, r3
 800639e:	2600      	movs	r6, #0
 80063a0:	341a      	adds	r4, #26
 80063a2:	42b5      	cmp	r5, r6
 80063a4:	d11a      	bne.n	80063dc <_printf_common+0xc8>
 80063a6:	2000      	movs	r0, #0
 80063a8:	e008      	b.n	80063bc <_printf_common+0xa8>
 80063aa:	2301      	movs	r3, #1
 80063ac:	4652      	mov	r2, sl
 80063ae:	4649      	mov	r1, r9
 80063b0:	4638      	mov	r0, r7
 80063b2:	47c0      	blx	r8
 80063b4:	3001      	adds	r0, #1
 80063b6:	d103      	bne.n	80063c0 <_printf_common+0xac>
 80063b8:	f04f 30ff 	mov.w	r0, #4294967295
 80063bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063c0:	3501      	adds	r5, #1
 80063c2:	e7c6      	b.n	8006352 <_printf_common+0x3e>
 80063c4:	18e1      	adds	r1, r4, r3
 80063c6:	1c5a      	adds	r2, r3, #1
 80063c8:	2030      	movs	r0, #48	; 0x30
 80063ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063ce:	4422      	add	r2, r4
 80063d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063d8:	3302      	adds	r3, #2
 80063da:	e7c7      	b.n	800636c <_printf_common+0x58>
 80063dc:	2301      	movs	r3, #1
 80063de:	4622      	mov	r2, r4
 80063e0:	4649      	mov	r1, r9
 80063e2:	4638      	mov	r0, r7
 80063e4:	47c0      	blx	r8
 80063e6:	3001      	adds	r0, #1
 80063e8:	d0e6      	beq.n	80063b8 <_printf_common+0xa4>
 80063ea:	3601      	adds	r6, #1
 80063ec:	e7d9      	b.n	80063a2 <_printf_common+0x8e>
	...

080063f0 <_printf_i>:
 80063f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063f4:	460c      	mov	r4, r1
 80063f6:	4691      	mov	r9, r2
 80063f8:	7e27      	ldrb	r7, [r4, #24]
 80063fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80063fc:	2f78      	cmp	r7, #120	; 0x78
 80063fe:	4680      	mov	r8, r0
 8006400:	469a      	mov	sl, r3
 8006402:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006406:	d807      	bhi.n	8006418 <_printf_i+0x28>
 8006408:	2f62      	cmp	r7, #98	; 0x62
 800640a:	d80a      	bhi.n	8006422 <_printf_i+0x32>
 800640c:	2f00      	cmp	r7, #0
 800640e:	f000 80d8 	beq.w	80065c2 <_printf_i+0x1d2>
 8006412:	2f58      	cmp	r7, #88	; 0x58
 8006414:	f000 80a3 	beq.w	800655e <_printf_i+0x16e>
 8006418:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800641c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006420:	e03a      	b.n	8006498 <_printf_i+0xa8>
 8006422:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006426:	2b15      	cmp	r3, #21
 8006428:	d8f6      	bhi.n	8006418 <_printf_i+0x28>
 800642a:	a001      	add	r0, pc, #4	; (adr r0, 8006430 <_printf_i+0x40>)
 800642c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006430:	08006489 	.word	0x08006489
 8006434:	0800649d 	.word	0x0800649d
 8006438:	08006419 	.word	0x08006419
 800643c:	08006419 	.word	0x08006419
 8006440:	08006419 	.word	0x08006419
 8006444:	08006419 	.word	0x08006419
 8006448:	0800649d 	.word	0x0800649d
 800644c:	08006419 	.word	0x08006419
 8006450:	08006419 	.word	0x08006419
 8006454:	08006419 	.word	0x08006419
 8006458:	08006419 	.word	0x08006419
 800645c:	080065a9 	.word	0x080065a9
 8006460:	080064cd 	.word	0x080064cd
 8006464:	0800658b 	.word	0x0800658b
 8006468:	08006419 	.word	0x08006419
 800646c:	08006419 	.word	0x08006419
 8006470:	080065cb 	.word	0x080065cb
 8006474:	08006419 	.word	0x08006419
 8006478:	080064cd 	.word	0x080064cd
 800647c:	08006419 	.word	0x08006419
 8006480:	08006419 	.word	0x08006419
 8006484:	08006593 	.word	0x08006593
 8006488:	680b      	ldr	r3, [r1, #0]
 800648a:	1d1a      	adds	r2, r3, #4
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	600a      	str	r2, [r1, #0]
 8006490:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006494:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006498:	2301      	movs	r3, #1
 800649a:	e0a3      	b.n	80065e4 <_printf_i+0x1f4>
 800649c:	6825      	ldr	r5, [r4, #0]
 800649e:	6808      	ldr	r0, [r1, #0]
 80064a0:	062e      	lsls	r6, r5, #24
 80064a2:	f100 0304 	add.w	r3, r0, #4
 80064a6:	d50a      	bpl.n	80064be <_printf_i+0xce>
 80064a8:	6805      	ldr	r5, [r0, #0]
 80064aa:	600b      	str	r3, [r1, #0]
 80064ac:	2d00      	cmp	r5, #0
 80064ae:	da03      	bge.n	80064b8 <_printf_i+0xc8>
 80064b0:	232d      	movs	r3, #45	; 0x2d
 80064b2:	426d      	negs	r5, r5
 80064b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064b8:	485e      	ldr	r0, [pc, #376]	; (8006634 <_printf_i+0x244>)
 80064ba:	230a      	movs	r3, #10
 80064bc:	e019      	b.n	80064f2 <_printf_i+0x102>
 80064be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80064c2:	6805      	ldr	r5, [r0, #0]
 80064c4:	600b      	str	r3, [r1, #0]
 80064c6:	bf18      	it	ne
 80064c8:	b22d      	sxthne	r5, r5
 80064ca:	e7ef      	b.n	80064ac <_printf_i+0xbc>
 80064cc:	680b      	ldr	r3, [r1, #0]
 80064ce:	6825      	ldr	r5, [r4, #0]
 80064d0:	1d18      	adds	r0, r3, #4
 80064d2:	6008      	str	r0, [r1, #0]
 80064d4:	0628      	lsls	r0, r5, #24
 80064d6:	d501      	bpl.n	80064dc <_printf_i+0xec>
 80064d8:	681d      	ldr	r5, [r3, #0]
 80064da:	e002      	b.n	80064e2 <_printf_i+0xf2>
 80064dc:	0669      	lsls	r1, r5, #25
 80064de:	d5fb      	bpl.n	80064d8 <_printf_i+0xe8>
 80064e0:	881d      	ldrh	r5, [r3, #0]
 80064e2:	4854      	ldr	r0, [pc, #336]	; (8006634 <_printf_i+0x244>)
 80064e4:	2f6f      	cmp	r7, #111	; 0x6f
 80064e6:	bf0c      	ite	eq
 80064e8:	2308      	moveq	r3, #8
 80064ea:	230a      	movne	r3, #10
 80064ec:	2100      	movs	r1, #0
 80064ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064f2:	6866      	ldr	r6, [r4, #4]
 80064f4:	60a6      	str	r6, [r4, #8]
 80064f6:	2e00      	cmp	r6, #0
 80064f8:	bfa2      	ittt	ge
 80064fa:	6821      	ldrge	r1, [r4, #0]
 80064fc:	f021 0104 	bicge.w	r1, r1, #4
 8006500:	6021      	strge	r1, [r4, #0]
 8006502:	b90d      	cbnz	r5, 8006508 <_printf_i+0x118>
 8006504:	2e00      	cmp	r6, #0
 8006506:	d04d      	beq.n	80065a4 <_printf_i+0x1b4>
 8006508:	4616      	mov	r6, r2
 800650a:	fbb5 f1f3 	udiv	r1, r5, r3
 800650e:	fb03 5711 	mls	r7, r3, r1, r5
 8006512:	5dc7      	ldrb	r7, [r0, r7]
 8006514:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006518:	462f      	mov	r7, r5
 800651a:	42bb      	cmp	r3, r7
 800651c:	460d      	mov	r5, r1
 800651e:	d9f4      	bls.n	800650a <_printf_i+0x11a>
 8006520:	2b08      	cmp	r3, #8
 8006522:	d10b      	bne.n	800653c <_printf_i+0x14c>
 8006524:	6823      	ldr	r3, [r4, #0]
 8006526:	07df      	lsls	r7, r3, #31
 8006528:	d508      	bpl.n	800653c <_printf_i+0x14c>
 800652a:	6923      	ldr	r3, [r4, #16]
 800652c:	6861      	ldr	r1, [r4, #4]
 800652e:	4299      	cmp	r1, r3
 8006530:	bfde      	ittt	le
 8006532:	2330      	movle	r3, #48	; 0x30
 8006534:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006538:	f106 36ff 	addle.w	r6, r6, #4294967295
 800653c:	1b92      	subs	r2, r2, r6
 800653e:	6122      	str	r2, [r4, #16]
 8006540:	f8cd a000 	str.w	sl, [sp]
 8006544:	464b      	mov	r3, r9
 8006546:	aa03      	add	r2, sp, #12
 8006548:	4621      	mov	r1, r4
 800654a:	4640      	mov	r0, r8
 800654c:	f7ff fee2 	bl	8006314 <_printf_common>
 8006550:	3001      	adds	r0, #1
 8006552:	d14c      	bne.n	80065ee <_printf_i+0x1fe>
 8006554:	f04f 30ff 	mov.w	r0, #4294967295
 8006558:	b004      	add	sp, #16
 800655a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800655e:	4835      	ldr	r0, [pc, #212]	; (8006634 <_printf_i+0x244>)
 8006560:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006564:	6823      	ldr	r3, [r4, #0]
 8006566:	680e      	ldr	r6, [r1, #0]
 8006568:	061f      	lsls	r7, r3, #24
 800656a:	f856 5b04 	ldr.w	r5, [r6], #4
 800656e:	600e      	str	r6, [r1, #0]
 8006570:	d514      	bpl.n	800659c <_printf_i+0x1ac>
 8006572:	07d9      	lsls	r1, r3, #31
 8006574:	bf44      	itt	mi
 8006576:	f043 0320 	orrmi.w	r3, r3, #32
 800657a:	6023      	strmi	r3, [r4, #0]
 800657c:	b91d      	cbnz	r5, 8006586 <_printf_i+0x196>
 800657e:	6823      	ldr	r3, [r4, #0]
 8006580:	f023 0320 	bic.w	r3, r3, #32
 8006584:	6023      	str	r3, [r4, #0]
 8006586:	2310      	movs	r3, #16
 8006588:	e7b0      	b.n	80064ec <_printf_i+0xfc>
 800658a:	6823      	ldr	r3, [r4, #0]
 800658c:	f043 0320 	orr.w	r3, r3, #32
 8006590:	6023      	str	r3, [r4, #0]
 8006592:	2378      	movs	r3, #120	; 0x78
 8006594:	4828      	ldr	r0, [pc, #160]	; (8006638 <_printf_i+0x248>)
 8006596:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800659a:	e7e3      	b.n	8006564 <_printf_i+0x174>
 800659c:	065e      	lsls	r6, r3, #25
 800659e:	bf48      	it	mi
 80065a0:	b2ad      	uxthmi	r5, r5
 80065a2:	e7e6      	b.n	8006572 <_printf_i+0x182>
 80065a4:	4616      	mov	r6, r2
 80065a6:	e7bb      	b.n	8006520 <_printf_i+0x130>
 80065a8:	680b      	ldr	r3, [r1, #0]
 80065aa:	6826      	ldr	r6, [r4, #0]
 80065ac:	6960      	ldr	r0, [r4, #20]
 80065ae:	1d1d      	adds	r5, r3, #4
 80065b0:	600d      	str	r5, [r1, #0]
 80065b2:	0635      	lsls	r5, r6, #24
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	d501      	bpl.n	80065bc <_printf_i+0x1cc>
 80065b8:	6018      	str	r0, [r3, #0]
 80065ba:	e002      	b.n	80065c2 <_printf_i+0x1d2>
 80065bc:	0671      	lsls	r1, r6, #25
 80065be:	d5fb      	bpl.n	80065b8 <_printf_i+0x1c8>
 80065c0:	8018      	strh	r0, [r3, #0]
 80065c2:	2300      	movs	r3, #0
 80065c4:	6123      	str	r3, [r4, #16]
 80065c6:	4616      	mov	r6, r2
 80065c8:	e7ba      	b.n	8006540 <_printf_i+0x150>
 80065ca:	680b      	ldr	r3, [r1, #0]
 80065cc:	1d1a      	adds	r2, r3, #4
 80065ce:	600a      	str	r2, [r1, #0]
 80065d0:	681e      	ldr	r6, [r3, #0]
 80065d2:	6862      	ldr	r2, [r4, #4]
 80065d4:	2100      	movs	r1, #0
 80065d6:	4630      	mov	r0, r6
 80065d8:	f7f9 fe12 	bl	8000200 <memchr>
 80065dc:	b108      	cbz	r0, 80065e2 <_printf_i+0x1f2>
 80065de:	1b80      	subs	r0, r0, r6
 80065e0:	6060      	str	r0, [r4, #4]
 80065e2:	6863      	ldr	r3, [r4, #4]
 80065e4:	6123      	str	r3, [r4, #16]
 80065e6:	2300      	movs	r3, #0
 80065e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065ec:	e7a8      	b.n	8006540 <_printf_i+0x150>
 80065ee:	6923      	ldr	r3, [r4, #16]
 80065f0:	4632      	mov	r2, r6
 80065f2:	4649      	mov	r1, r9
 80065f4:	4640      	mov	r0, r8
 80065f6:	47d0      	blx	sl
 80065f8:	3001      	adds	r0, #1
 80065fa:	d0ab      	beq.n	8006554 <_printf_i+0x164>
 80065fc:	6823      	ldr	r3, [r4, #0]
 80065fe:	079b      	lsls	r3, r3, #30
 8006600:	d413      	bmi.n	800662a <_printf_i+0x23a>
 8006602:	68e0      	ldr	r0, [r4, #12]
 8006604:	9b03      	ldr	r3, [sp, #12]
 8006606:	4298      	cmp	r0, r3
 8006608:	bfb8      	it	lt
 800660a:	4618      	movlt	r0, r3
 800660c:	e7a4      	b.n	8006558 <_printf_i+0x168>
 800660e:	2301      	movs	r3, #1
 8006610:	4632      	mov	r2, r6
 8006612:	4649      	mov	r1, r9
 8006614:	4640      	mov	r0, r8
 8006616:	47d0      	blx	sl
 8006618:	3001      	adds	r0, #1
 800661a:	d09b      	beq.n	8006554 <_printf_i+0x164>
 800661c:	3501      	adds	r5, #1
 800661e:	68e3      	ldr	r3, [r4, #12]
 8006620:	9903      	ldr	r1, [sp, #12]
 8006622:	1a5b      	subs	r3, r3, r1
 8006624:	42ab      	cmp	r3, r5
 8006626:	dcf2      	bgt.n	800660e <_printf_i+0x21e>
 8006628:	e7eb      	b.n	8006602 <_printf_i+0x212>
 800662a:	2500      	movs	r5, #0
 800662c:	f104 0619 	add.w	r6, r4, #25
 8006630:	e7f5      	b.n	800661e <_printf_i+0x22e>
 8006632:	bf00      	nop
 8006634:	080067ed 	.word	0x080067ed
 8006638:	080067fe 	.word	0x080067fe

0800663c <memmove>:
 800663c:	4288      	cmp	r0, r1
 800663e:	b510      	push	{r4, lr}
 8006640:	eb01 0402 	add.w	r4, r1, r2
 8006644:	d902      	bls.n	800664c <memmove+0x10>
 8006646:	4284      	cmp	r4, r0
 8006648:	4623      	mov	r3, r4
 800664a:	d807      	bhi.n	800665c <memmove+0x20>
 800664c:	1e43      	subs	r3, r0, #1
 800664e:	42a1      	cmp	r1, r4
 8006650:	d008      	beq.n	8006664 <memmove+0x28>
 8006652:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006656:	f803 2f01 	strb.w	r2, [r3, #1]!
 800665a:	e7f8      	b.n	800664e <memmove+0x12>
 800665c:	4402      	add	r2, r0
 800665e:	4601      	mov	r1, r0
 8006660:	428a      	cmp	r2, r1
 8006662:	d100      	bne.n	8006666 <memmove+0x2a>
 8006664:	bd10      	pop	{r4, pc}
 8006666:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800666a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800666e:	e7f7      	b.n	8006660 <memmove+0x24>

08006670 <_realloc_r>:
 8006670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006672:	4607      	mov	r7, r0
 8006674:	4614      	mov	r4, r2
 8006676:	460e      	mov	r6, r1
 8006678:	b921      	cbnz	r1, 8006684 <_realloc_r+0x14>
 800667a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800667e:	4611      	mov	r1, r2
 8006680:	f7ff bc06 	b.w	8005e90 <_malloc_r>
 8006684:	b922      	cbnz	r2, 8006690 <_realloc_r+0x20>
 8006686:	f7ff fc99 	bl	8005fbc <_free_r>
 800668a:	4625      	mov	r5, r4
 800668c:	4628      	mov	r0, r5
 800668e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006690:	f000 f814 	bl	80066bc <_malloc_usable_size_r>
 8006694:	42a0      	cmp	r0, r4
 8006696:	d20f      	bcs.n	80066b8 <_realloc_r+0x48>
 8006698:	4621      	mov	r1, r4
 800669a:	4638      	mov	r0, r7
 800669c:	f7ff fbf8 	bl	8005e90 <_malloc_r>
 80066a0:	4605      	mov	r5, r0
 80066a2:	2800      	cmp	r0, #0
 80066a4:	d0f2      	beq.n	800668c <_realloc_r+0x1c>
 80066a6:	4631      	mov	r1, r6
 80066a8:	4622      	mov	r2, r4
 80066aa:	f7ff fbdb 	bl	8005e64 <memcpy>
 80066ae:	4631      	mov	r1, r6
 80066b0:	4638      	mov	r0, r7
 80066b2:	f7ff fc83 	bl	8005fbc <_free_r>
 80066b6:	e7e9      	b.n	800668c <_realloc_r+0x1c>
 80066b8:	4635      	mov	r5, r6
 80066ba:	e7e7      	b.n	800668c <_realloc_r+0x1c>

080066bc <_malloc_usable_size_r>:
 80066bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066c0:	1f18      	subs	r0, r3, #4
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	bfbc      	itt	lt
 80066c6:	580b      	ldrlt	r3, [r1, r0]
 80066c8:	18c0      	addlt	r0, r0, r3
 80066ca:	4770      	bx	lr

080066cc <_init>:
 80066cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ce:	bf00      	nop
 80066d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066d2:	bc08      	pop	{r3}
 80066d4:	469e      	mov	lr, r3
 80066d6:	4770      	bx	lr

080066d8 <_fini>:
 80066d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066da:	bf00      	nop
 80066dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066de:	bc08      	pop	{r3}
 80066e0:	469e      	mov	lr, r3
 80066e2:	4770      	bx	lr
