
WatchDog_Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a84  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08006c34  08006c34  00016c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d64  08006d64  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006d64  08006d64  00016d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d6c  08006d6c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d6c  08006d6c  00016d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d70  08006d70  00016d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000008e4  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  2000095c  2000095c  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002369a  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000414a  00000000  00000000  00043742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c08  00000000  00000000  00047890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a98  00000000  00000000  00049498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002823a  00000000  00000000  0004af30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020e1a  00000000  00000000  0007316a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fb40c  00000000  00000000  00093f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0018f390  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007c28  00000000  00000000  0018f3e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006c1c 	.word	0x08006c1c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08006c1c 	.word	0x08006c1c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800059c:	f3bf 8f4f 	dsb	sy
}
 80005a0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005a2:	4b06      	ldr	r3, [pc, #24]	; (80005bc <__NVIC_SystemReset+0x24>)
 80005a4:	68db      	ldr	r3, [r3, #12]
 80005a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005aa:	4904      	ldr	r1, [pc, #16]	; (80005bc <__NVIC_SystemReset+0x24>)
 80005ac:	4b04      	ldr	r3, [pc, #16]	; (80005c0 <__NVIC_SystemReset+0x28>)
 80005ae:	4313      	orrs	r3, r2
 80005b0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005b2:	f3bf 8f4f 	dsb	sy
}
 80005b6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005b8:	bf00      	nop
 80005ba:	e7fd      	b.n	80005b8 <__NVIC_SystemReset+0x20>
 80005bc:	e000ed00 	.word	0xe000ed00
 80005c0:	05fa0004 	.word	0x05fa0004

080005c4 <MRT_getFlags>:


/*
 * User functions
 */
void MRT_getFlags(void){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0

	HAL_FLASH_Unlock();
 80005c8:	f002 fa6a 	bl	8002aa0 <HAL_FLASH_Unlock>

	//Reset flag
	if((EE_ReadVariable(RESET_FLAG_ADDRESS,  &reset_flag)) != HAL_OK)
 80005cc:	4b07      	ldr	r3, [pc, #28]	; (80005ec <MRT_getFlags+0x28>)
 80005ce:	881b      	ldrh	r3, [r3, #0]
 80005d0:	4907      	ldr	r1, [pc, #28]	; (80005f0 <MRT_getFlags+0x2c>)
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 fa46 	bl	8000a64 <EE_ReadVariable>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <MRT_getFlags+0x1e>
	{
	  Error_Handler();
 80005de:	f001 fa13 	bl	8001a08 <Error_Handler>
		HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
	  Error_Handler();
	}
	*/

	HAL_FLASH_Lock();
 80005e2:	f002 fa7f 	bl	8002ae4 <HAL_FLASH_Lock>

}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000000 	.word	0x20000000
 80005f0:	20000094 	.word	0x20000094

080005f4 <HAL_GPIO_EXTI_Callback>:


/*
 * Helper functions
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == IN_Button_Pin){
 80005fe:	88fb      	ldrh	r3, [r7, #6]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d101      	bne.n	8000608 <HAL_GPIO_EXTI_Callback+0x14>
		//Manual reset

		MRT_ResetFromStart();
 8000604:	f000 f804 	bl	8000610 <MRT_ResetFromStart>
	}

}
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <MRT_ResetFromStart>:


void MRT_ResetFromStart(void){
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0

	//Clear all saved data of stages


	//Clear wakeup flag and start_reset flag
	reset_flag = 0;
 8000614:	4b0d      	ldr	r3, [pc, #52]	; (800064c <MRT_ResetFromStart+0x3c>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]

	HAL_FLASH_Unlock();
 800061a:	f002 fa41 	bl	8002aa0 <HAL_FLASH_Unlock>
	if((EE_WriteVariable(RESET_FLAG_ADDRESS, reset_flag)) != HAL_OK)
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MRT_ResetFromStart+0x40>)
 8000620:	881b      	ldrh	r3, [r3, #0]
 8000622:	4a0a      	ldr	r2, [pc, #40]	; (800064c <MRT_ResetFromStart+0x3c>)
 8000624:	7812      	ldrb	r2, [r2, #0]
 8000626:	b292      	uxth	r2, r2
 8000628:	4611      	mov	r1, r2
 800062a:	4618      	mov	r0, r3
 800062c:	f000 fa64 	bl	8000af8 <EE_WriteVariable>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d006      	beq.n	8000644 <MRT_ResetFromStart+0x34>
	{
	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 8000636:	2201      	movs	r2, #1
 8000638:	2104      	movs	r1, #4
 800063a:	4806      	ldr	r0, [pc, #24]	; (8000654 <MRT_ResetFromStart+0x44>)
 800063c:	f002 fe8e 	bl	800335c <HAL_GPIO_WritePin>
	  Error_Handler();
 8000640:	f001 f9e2 	bl	8001a08 <Error_Handler>
	}
	HAL_FLASH_Lock();
 8000644:	f002 fa4e 	bl	8002ae4 <HAL_FLASH_Lock>


	//Reset function
	NVIC_SystemReset();
 8000648:	f7ff ffa6 	bl	8000598 <__NVIC_SystemReset>
 800064c:	20000094 	.word	0x20000094
 8000650:	20000000 	.word	0x20000000
 8000654:	40020800 	.word	0x40020800

08000658 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	; 0x28
 800065c:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 800065e:	2306      	movs	r3, #6
 8000660:	847b      	strh	r3, [r7, #34]	; 0x22
 8000662:	2306      	movs	r3, #6
 8000664:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	83fb      	strh	r3, [r7, #30]
 800066e:	2300      	movs	r3, #0
 8000670:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 8000672:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000676:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800067c:	4ba1      	ldr	r3, [pc, #644]	; (8000904 <EE_Init+0x2ac>)
 800067e:	881b      	ldrh	r3, [r3, #0]
 8000680:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000682:	4ba1      	ldr	r3, [pc, #644]	; (8000908 <EE_Init+0x2b0>)
 8000684:	881b      	ldrh	r3, [r3, #0]
 8000686:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000688:	2300      	movs	r3, #0
 800068a:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 800068c:	2302      	movs	r3, #2
 800068e:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 8000690:	2301      	movs	r3, #1
 8000692:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000694:	2302      	movs	r3, #2
 8000696:	613b      	str	r3, [r7, #16]

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8000698:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800069a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800069e:	4293      	cmp	r3, r2
 80006a0:	d00b      	beq.n	80006ba <EE_Init+0x62>
 80006a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006a6:	f280 8196 	bge.w	80009d6 <EE_Init+0x37e>
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	f000 80f8 	beq.w	80008a0 <EE_Init+0x248>
 80006b0:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d050      	beq.n	800075a <EE_Init+0x102>
 80006b8:	e18d      	b.n	80009d6 <EE_Init+0x37e>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 80006ba:	8c3b      	ldrh	r3, [r7, #32]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d116      	bne.n	80006ee <EE_Init+0x96>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80006c0:	4890      	ldr	r0, [pc, #576]	; (8000904 <EE_Init+0x2ac>)
 80006c2:	f000 f9a9 	bl	8000a18 <EE_VerifyPageFullyErased>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	f040 818e 	bne.w	80009ea <EE_Init+0x392>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80006ce:	f107 0214 	add.w	r2, r7, #20
 80006d2:	463b      	mov	r3, r7
 80006d4:	4611      	mov	r1, r2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f002 fb54 	bl	8002d84 <HAL_FLASHEx_Erase>
 80006dc:	4603      	mov	r3, r0
 80006de:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80006e0:	7efb      	ldrb	r3, [r7, #27]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	f000 8181 	beq.w	80009ea <EE_Init+0x392>
          {
            return FlashStatus;
 80006e8:	7efb      	ldrb	r3, [r7, #27]
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	e185      	b.n	80009fa <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 80006ee:	8c3b      	ldrh	r3, [r7, #32]
 80006f0:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d125      	bne.n	8000744 <EE_Init+0xec>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80006f8:	4882      	ldr	r0, [pc, #520]	; (8000904 <EE_Init+0x2ac>)
 80006fa:	f000 f98d 	bl	8000a18 <EE_VerifyPageFullyErased>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d10e      	bne.n	8000722 <EE_Init+0xca>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000704:	f107 0214 	add.w	r2, r7, #20
 8000708:	463b      	mov	r3, r7
 800070a:	4611      	mov	r1, r2
 800070c:	4618      	mov	r0, r3
 800070e:	f002 fb39 	bl	8002d84 <HAL_FLASHEx_Erase>
 8000712:	4603      	mov	r3, r0
 8000714:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000716:	7efb      	ldrb	r3, [r7, #27]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d002      	beq.n	8000722 <EE_Init+0xca>
          {
            return FlashStatus;
 800071c:	7efb      	ldrb	r3, [r7, #27]
 800071e:	b29b      	uxth	r3, r3
 8000720:	e16b      	b.n	80009fa <EE_Init+0x3a2>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8000722:	f04f 0200 	mov.w	r2, #0
 8000726:	f04f 0300 	mov.w	r3, #0
 800072a:	4977      	ldr	r1, [pc, #476]	; (8000908 <EE_Init+0x2b0>)
 800072c:	2001      	movs	r0, #1
 800072e:	f002 f963 	bl	80029f8 <HAL_FLASH_Program>
 8000732:	4603      	mov	r3, r0
 8000734:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8000736:	7efb      	ldrb	r3, [r7, #27]
 8000738:	2b00      	cmp	r3, #0
 800073a:	f000 8156 	beq.w	80009ea <EE_Init+0x392>
        {
          return FlashStatus;
 800073e:	7efb      	ldrb	r3, [r7, #27]
 8000740:	b29b      	uxth	r3, r3
 8000742:	e15a      	b.n	80009fa <EE_Init+0x3a2>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8000744:	f000 f9fa 	bl	8000b3c <EE_Format>
 8000748:	4603      	mov	r3, r0
 800074a:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800074c:	7efb      	ldrb	r3, [r7, #27]
 800074e:	2b00      	cmp	r3, #0
 8000750:	f000 814b 	beq.w	80009ea <EE_Init+0x392>
        {
          return FlashStatus;
 8000754:	7efb      	ldrb	r3, [r7, #27]
 8000756:	b29b      	uxth	r3, r3
 8000758:	e14f      	b.n	80009fa <EE_Init+0x3a2>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 800075a:	8c3b      	ldrh	r3, [r7, #32]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d163      	bne.n	8000828 <EE_Init+0x1d0>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000760:	2300      	movs	r3, #0
 8000762:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000764:	e030      	b.n	80007c8 <EE_Init+0x170>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8000766:	4b69      	ldr	r3, [pc, #420]	; (800090c <EE_Init+0x2b4>)
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	b29a      	uxth	r2, r3
 800076c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800076e:	4968      	ldr	r1, [pc, #416]	; (8000910 <EE_Init+0x2b8>)
 8000770:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000774:	429a      	cmp	r2, r3
 8000776:	d101      	bne.n	800077c <EE_Init+0x124>
          {
            x = VarIdx;
 8000778:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800077a:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 800077c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800077e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000782:	429a      	cmp	r2, r3
 8000784:	d01d      	beq.n	80007c2 <EE_Init+0x16a>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8000786:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000788:	4a61      	ldr	r2, [pc, #388]	; (8000910 <EE_Init+0x2b8>)
 800078a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800078e:	4961      	ldr	r1, [pc, #388]	; (8000914 <EE_Init+0x2bc>)
 8000790:	4618      	mov	r0, r3
 8000792:	f000 f967 	bl	8000a64 <EE_ReadVariable>
 8000796:	4603      	mov	r3, r0
 8000798:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 800079a:	8bbb      	ldrh	r3, [r7, #28]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d010      	beq.n	80007c2 <EE_Init+0x16a>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80007a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007a2:	4a5b      	ldr	r2, [pc, #364]	; (8000910 <EE_Init+0x2b8>)
 80007a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007a8:	4a5a      	ldr	r2, [pc, #360]	; (8000914 <EE_Init+0x2bc>)
 80007aa:	8812      	ldrh	r2, [r2, #0]
 80007ac:	4611      	mov	r1, r2
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 fa5c 	bl	8000c6c <EE_VerifyPageFullWriteVariable>
 80007b4:	4603      	mov	r3, r0
 80007b6:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80007b8:	8bfb      	ldrh	r3, [r7, #30]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <EE_Init+0x16a>
              {
                return EepromStatus;
 80007be:	8bfb      	ldrh	r3, [r7, #30]
 80007c0:	e11b      	b.n	80009fa <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80007c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007c4:	3301      	adds	r3, #1
 80007c6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80007c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d9cb      	bls.n	8000766 <EE_Init+0x10e>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80007ce:	f04f 0200 	mov.w	r2, #0
 80007d2:	f04f 0300 	mov.w	r3, #0
 80007d6:	494b      	ldr	r1, [pc, #300]	; (8000904 <EE_Init+0x2ac>)
 80007d8:	2001      	movs	r0, #1
 80007da:	f002 f90d 	bl	80029f8 <HAL_FLASH_Program>
 80007de:	4603      	mov	r3, r0
 80007e0:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80007e2:	7efb      	ldrb	r3, [r7, #27]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d002      	beq.n	80007ee <EE_Init+0x196>
        {
          return FlashStatus;
 80007e8:	7efb      	ldrb	r3, [r7, #27]
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	e105      	b.n	80009fa <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE1_ID;
 80007ee:	2303      	movs	r3, #3
 80007f0:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80007f2:	2301      	movs	r3, #1
 80007f4:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80007f6:	2302      	movs	r3, #2
 80007f8:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80007fa:	4843      	ldr	r0, [pc, #268]	; (8000908 <EE_Init+0x2b0>)
 80007fc:	f000 f90c 	bl	8000a18 <EE_VerifyPageFullyErased>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	f040 80f3 	bne.w	80009ee <EE_Init+0x396>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000808:	f107 0214 	add.w	r2, r7, #20
 800080c:	463b      	mov	r3, r7
 800080e:	4611      	mov	r1, r2
 8000810:	4618      	mov	r0, r3
 8000812:	f002 fab7 	bl	8002d84 <HAL_FLASHEx_Erase>
 8000816:	4603      	mov	r3, r0
 8000818:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800081a:	7efb      	ldrb	r3, [r7, #27]
 800081c:	2b00      	cmp	r3, #0
 800081e:	f000 80e6 	beq.w	80009ee <EE_Init+0x396>
          {
            return FlashStatus;
 8000822:	7efb      	ldrb	r3, [r7, #27]
 8000824:	b29b      	uxth	r3, r3
 8000826:	e0e8      	b.n	80009fa <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 8000828:	8c3b      	ldrh	r3, [r7, #32]
 800082a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800082e:	4293      	cmp	r3, r2
 8000830:	d12b      	bne.n	800088a <EE_Init+0x232>
      {
        pEraseInit.Sector = PAGE1_ID;
 8000832:	2303      	movs	r3, #3
 8000834:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8000836:	2301      	movs	r3, #1
 8000838:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800083a:	2302      	movs	r3, #2
 800083c:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800083e:	4832      	ldr	r0, [pc, #200]	; (8000908 <EE_Init+0x2b0>)
 8000840:	f000 f8ea 	bl	8000a18 <EE_VerifyPageFullyErased>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d10e      	bne.n	8000868 <EE_Init+0x210>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800084a:	f107 0214 	add.w	r2, r7, #20
 800084e:	463b      	mov	r3, r7
 8000850:	4611      	mov	r1, r2
 8000852:	4618      	mov	r0, r3
 8000854:	f002 fa96 	bl	8002d84 <HAL_FLASHEx_Erase>
 8000858:	4603      	mov	r3, r0
 800085a:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800085c:	7efb      	ldrb	r3, [r7, #27]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d002      	beq.n	8000868 <EE_Init+0x210>
          {
            return FlashStatus;
 8000862:	7efb      	ldrb	r3, [r7, #27]
 8000864:	b29b      	uxth	r3, r3
 8000866:	e0c8      	b.n	80009fa <EE_Init+0x3a2>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8000868:	f04f 0200 	mov.w	r2, #0
 800086c:	f04f 0300 	mov.w	r3, #0
 8000870:	4924      	ldr	r1, [pc, #144]	; (8000904 <EE_Init+0x2ac>)
 8000872:	2001      	movs	r0, #1
 8000874:	f002 f8c0 	bl	80029f8 <HAL_FLASH_Program>
 8000878:	4603      	mov	r3, r0
 800087a:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800087c:	7efb      	ldrb	r3, [r7, #27]
 800087e:	2b00      	cmp	r3, #0
 8000880:	f000 80b5 	beq.w	80009ee <EE_Init+0x396>
        {
          return FlashStatus;
 8000884:	7efb      	ldrb	r3, [r7, #27]
 8000886:	b29b      	uxth	r3, r3
 8000888:	e0b7      	b.n	80009fa <EE_Init+0x3a2>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800088a:	f000 f957 	bl	8000b3c <EE_Format>
 800088e:	4603      	mov	r3, r0
 8000890:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8000892:	7efb      	ldrb	r3, [r7, #27]
 8000894:	2b00      	cmp	r3, #0
 8000896:	f000 80aa 	beq.w	80009ee <EE_Init+0x396>
        {
          return FlashStatus;
 800089a:	7efb      	ldrb	r3, [r7, #27]
 800089c:	b29b      	uxth	r3, r3
 800089e:	e0ac      	b.n	80009fa <EE_Init+0x3a2>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80008a0:	8c3b      	ldrh	r3, [r7, #32]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d10a      	bne.n	80008bc <EE_Init+0x264>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80008a6:	f000 f949 	bl	8000b3c <EE_Format>
 80008aa:	4603      	mov	r3, r0
 80008ac:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80008ae:	7efb      	ldrb	r3, [r7, #27]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	f000 809e 	beq.w	80009f2 <EE_Init+0x39a>
        {
          return FlashStatus;
 80008b6:	7efb      	ldrb	r3, [r7, #27]
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	e09e      	b.n	80009fa <EE_Init+0x3a2>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80008bc:	8c3b      	ldrh	r3, [r7, #32]
 80008be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d11b      	bne.n	80008fe <EE_Init+0x2a6>
      {
        pEraseInit.Sector = PAGE1_ID;
 80008c6:	2303      	movs	r3, #3
 80008c8:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80008ca:	2301      	movs	r3, #1
 80008cc:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80008ce:	2302      	movs	r3, #2
 80008d0:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80008d2:	480d      	ldr	r0, [pc, #52]	; (8000908 <EE_Init+0x2b0>)
 80008d4:	f000 f8a0 	bl	8000a18 <EE_VerifyPageFullyErased>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	f040 8089 	bne.w	80009f2 <EE_Init+0x39a>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80008e0:	f107 0214 	add.w	r2, r7, #20
 80008e4:	463b      	mov	r3, r7
 80008e6:	4611      	mov	r1, r2
 80008e8:	4618      	mov	r0, r3
 80008ea:	f002 fa4b 	bl	8002d84 <HAL_FLASHEx_Erase>
 80008ee:	4603      	mov	r3, r0
 80008f0:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80008f2:	7efb      	ldrb	r3, [r7, #27]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d07c      	beq.n	80009f2 <EE_Init+0x39a>
          {
            return FlashStatus;
 80008f8:	7efb      	ldrb	r3, [r7, #27]
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	e07d      	b.n	80009fa <EE_Init+0x3a2>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80008fe:	2300      	movs	r3, #0
 8000900:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000902:	e03a      	b.n	800097a <EE_Init+0x322>
 8000904:	08008000 	.word	0x08008000
 8000908:	0800c000 	.word	0x0800c000
 800090c:	08008006 	.word	0x08008006
 8000910:	20000000 	.word	0x20000000
 8000914:	20000096 	.word	0x20000096
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8000918:	4b3a      	ldr	r3, [pc, #232]	; (8000a04 <EE_Init+0x3ac>)
 800091a:	881b      	ldrh	r3, [r3, #0]
 800091c:	b29a      	uxth	r2, r3
 800091e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000920:	4939      	ldr	r1, [pc, #228]	; (8000a08 <EE_Init+0x3b0>)
 8000922:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000926:	429a      	cmp	r2, r3
 8000928:	d101      	bne.n	800092e <EE_Init+0x2d6>
          {
            x = VarIdx;
 800092a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800092c:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 800092e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000930:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000934:	429a      	cmp	r2, r3
 8000936:	d01d      	beq.n	8000974 <EE_Init+0x31c>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8000938:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800093a:	4a33      	ldr	r2, [pc, #204]	; (8000a08 <EE_Init+0x3b0>)
 800093c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000940:	4932      	ldr	r1, [pc, #200]	; (8000a0c <EE_Init+0x3b4>)
 8000942:	4618      	mov	r0, r3
 8000944:	f000 f88e 	bl	8000a64 <EE_ReadVariable>
 8000948:	4603      	mov	r3, r0
 800094a:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 800094c:	8bbb      	ldrh	r3, [r7, #28]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d010      	beq.n	8000974 <EE_Init+0x31c>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8000952:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000954:	4a2c      	ldr	r2, [pc, #176]	; (8000a08 <EE_Init+0x3b0>)
 8000956:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800095a:	4a2c      	ldr	r2, [pc, #176]	; (8000a0c <EE_Init+0x3b4>)
 800095c:	8812      	ldrh	r2, [r2, #0]
 800095e:	4611      	mov	r1, r2
 8000960:	4618      	mov	r0, r3
 8000962:	f000 f983 	bl	8000c6c <EE_VerifyPageFullWriteVariable>
 8000966:	4603      	mov	r3, r0
 8000968:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 800096a:	8bfb      	ldrh	r3, [r7, #30]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <EE_Init+0x31c>
              {
                return EepromStatus;
 8000970:	8bfb      	ldrh	r3, [r7, #30]
 8000972:	e042      	b.n	80009fa <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000974:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000976:	3301      	adds	r3, #1
 8000978:	84fb      	strh	r3, [r7, #38]	; 0x26
 800097a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800097c:	2b02      	cmp	r3, #2
 800097e:	d9cb      	bls.n	8000918 <EE_Init+0x2c0>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8000980:	f04f 0200 	mov.w	r2, #0
 8000984:	f04f 0300 	mov.w	r3, #0
 8000988:	4921      	ldr	r1, [pc, #132]	; (8000a10 <EE_Init+0x3b8>)
 800098a:	2001      	movs	r0, #1
 800098c:	f002 f834 	bl	80029f8 <HAL_FLASH_Program>
 8000990:	4603      	mov	r3, r0
 8000992:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8000994:	7efb      	ldrb	r3, [r7, #27]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d002      	beq.n	80009a0 <EE_Init+0x348>
        {
          return FlashStatus;
 800099a:	7efb      	ldrb	r3, [r7, #27]
 800099c:	b29b      	uxth	r3, r3
 800099e:	e02c      	b.n	80009fa <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE0_ID;
 80009a0:	2302      	movs	r3, #2
 80009a2:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80009a4:	2301      	movs	r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80009a8:	2302      	movs	r3, #2
 80009aa:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80009ac:	4819      	ldr	r0, [pc, #100]	; (8000a14 <EE_Init+0x3bc>)
 80009ae:	f000 f833 	bl	8000a18 <EE_VerifyPageFullyErased>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d11c      	bne.n	80009f2 <EE_Init+0x39a>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80009b8:	f107 0214 	add.w	r2, r7, #20
 80009bc:	463b      	mov	r3, r7
 80009be:	4611      	mov	r1, r2
 80009c0:	4618      	mov	r0, r3
 80009c2:	f002 f9df 	bl	8002d84 <HAL_FLASHEx_Erase>
 80009c6:	4603      	mov	r3, r0
 80009c8:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80009ca:	7efb      	ldrb	r3, [r7, #27]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d010      	beq.n	80009f2 <EE_Init+0x39a>
          {
            return FlashStatus;
 80009d0:	7efb      	ldrb	r3, [r7, #27]
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	e011      	b.n	80009fa <EE_Init+0x3a2>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 80009d6:	f000 f8b1 	bl	8000b3c <EE_Format>
 80009da:	4603      	mov	r3, r0
 80009dc:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 80009de:	7efb      	ldrb	r3, [r7, #27]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d008      	beq.n	80009f6 <EE_Init+0x39e>
      {
        return FlashStatus;
 80009e4:	7efb      	ldrb	r3, [r7, #27]
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	e007      	b.n	80009fa <EE_Init+0x3a2>
      break;
 80009ea:	bf00      	nop
 80009ec:	e004      	b.n	80009f8 <EE_Init+0x3a0>
      break;
 80009ee:	bf00      	nop
 80009f0:	e002      	b.n	80009f8 <EE_Init+0x3a0>
      break;
 80009f2:	bf00      	nop
 80009f4:	e000      	b.n	80009f8 <EE_Init+0x3a0>
      }
      break;
 80009f6:	bf00      	nop
  }

  return HAL_OK;
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3728      	adds	r7, #40	; 0x28
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	0800c006 	.word	0x0800c006
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	20000096 	.word	0x20000096
 8000a10:	0800c000 	.word	0x0800c000
 8000a14:	08008000 	.word	0x08008000

08000a18 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 8000a20:	2301      	movs	r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]
  uint16_t AddressValue = 0x5555;
 8000a24:	f245 5355 	movw	r3, #21845	; 0x5555
 8000a28:	817b      	strh	r3, [r7, #10]

  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 8000a2a:	e00d      	b.n	8000a48 <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	881b      	ldrh	r3, [r3, #0]
 8000a30:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 8000a32:	897b      	ldrh	r3, [r7, #10]
 8000a34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d002      	beq.n	8000a42 <EE_VerifyPageFullyErased+0x2a>
    {

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]

      break;
 8000a40:	e006      	b.n	8000a50 <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	3304      	adds	r3, #4
 8000a46:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a05      	ldr	r2, [pc, #20]	; (8000a60 <EE_VerifyPageFullyErased+0x48>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d3ed      	bcc.n	8000a2c <EE_VerifyPageFullyErased+0x14>
  }

  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	b29b      	uxth	r3, r3
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	0800c000 	.word	0x0800c000

08000a64 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	6039      	str	r1, [r7, #0]
 8000a6e:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8000a74:	f245 5355 	movw	r3, #21845	; 0x5555
 8000a78:	81bb      	strh	r3, [r7, #12]
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8000a7e:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <EE_ReadVariable+0x8c>)
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	4b1b      	ldr	r3, [pc, #108]	; (8000af0 <EE_ReadVariable+0x8c>)
 8000a84:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8000a86:	2000      	movs	r0, #0
 8000a88:	f000 f8aa 	bl	8000be0 <EE_FindValidPage>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8000a90:	89fb      	ldrh	r3, [r7, #14]
 8000a92:	2bab      	cmp	r3, #171	; 0xab
 8000a94:	d101      	bne.n	8000a9a <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8000a96:	23ab      	movs	r3, #171	; 0xab
 8000a98:	e025      	b.n	8000ae6 <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8000a9a:	89fb      	ldrh	r3, [r7, #14]
 8000a9c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000aa0:	3302      	adds	r3, #2
 8000aa2:	039b      	lsls	r3, r3, #14
 8000aa4:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8000aa6:	89fb      	ldrh	r3, [r7, #14]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	039a      	lsls	r2, r3, #14
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <EE_ReadVariable+0x90>)
 8000aae:	4413      	add	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 8000ab2:	e012      	b.n	8000ada <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	881b      	ldrh	r3, [r3, #0]
 8000ab8:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 8000aba:	89ba      	ldrh	r2, [r7, #12]
 8000abc:	88fb      	ldrh	r3, [r7, #6]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d108      	bne.n	8000ad4 <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	3b02      	subs	r3, #2
 8000ac6:	881b      	ldrh	r3, [r3, #0]
 8000ac8:	b29a      	uxth	r2, r3
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	82fb      	strh	r3, [r7, #22]

      break;
 8000ad2:	e007      	b.n	8000ae4 <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	3b04      	subs	r3, #4
 8000ad8:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	3302      	adds	r3, #2
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d8e7      	bhi.n	8000ab4 <EE_ReadVariable+0x50>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8000ae4:	8afb      	ldrh	r3, [r7, #22]
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3718      	adds	r7, #24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	08008000 	.word	0x08008000
 8000af4:	08007ffe 	.word	0x08007ffe

08000af8 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	460a      	mov	r2, r1
 8000b02:	80fb      	strh	r3, [r7, #6]
 8000b04:	4613      	mov	r3, r2
 8000b06:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8000b0c:	88ba      	ldrh	r2, [r7, #4]
 8000b0e:	88fb      	ldrh	r3, [r7, #6]
 8000b10:	4611      	mov	r1, r2
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 f8aa 	bl	8000c6c <EE_VerifyPageFullWriteVariable>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8000b1c:	89fb      	ldrh	r3, [r7, #14]
 8000b1e:	2b80      	cmp	r3, #128	; 0x80
 8000b20:	d107      	bne.n	8000b32 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 8000b22:	88ba      	ldrh	r2, [r7, #4]
 8000b24:	88fb      	ldrh	r3, [r7, #6]
 8000b26:	4611      	mov	r1, r2
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 f8f9 	bl	8000d20 <EE_PageTransfer>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 8000b32:	89fb      	ldrh	r3, [r7, #14]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b088      	sub	sp, #32
 8000b40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8000b42:	2300      	movs	r3, #0
 8000b44:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 8000b52:	2301      	movs	r3, #1
 8000b54:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000b56:	2302      	movs	r3, #2
 8000b58:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000b5a:	481f      	ldr	r0, [pc, #124]	; (8000bd8 <EE_Format+0x9c>)
 8000b5c:	f7ff ff5c 	bl	8000a18 <EE_VerifyPageFullyErased>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d10d      	bne.n	8000b82 <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000b66:	f107 0218 	add.w	r2, r7, #24
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	4611      	mov	r1, r2
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f002 f908 	bl	8002d84 <HAL_FLASHEx_Erase>
 8000b74:	4603      	mov	r3, r0
 8000b76:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8000b78:	7ffb      	ldrb	r3, [r7, #31]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <EE_Format+0x46>
    {
      return FlashStatus;
 8000b7e:	7ffb      	ldrb	r3, [r7, #31]
 8000b80:	e025      	b.n	8000bce <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8000b82:	f04f 0200 	mov.w	r2, #0
 8000b86:	f04f 0300 	mov.w	r3, #0
 8000b8a:	4913      	ldr	r1, [pc, #76]	; (8000bd8 <EE_Format+0x9c>)
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f001 ff33 	bl	80029f8 <HAL_FLASH_Program>
 8000b92:	4603      	mov	r3, r0
 8000b94:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000b96:	7ffb      	ldrb	r3, [r7, #31]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <EE_Format+0x64>
  {
    return FlashStatus;
 8000b9c:	7ffb      	ldrb	r3, [r7, #31]
 8000b9e:	e016      	b.n	8000bce <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000ba4:	480d      	ldr	r0, [pc, #52]	; (8000bdc <EE_Format+0xa0>)
 8000ba6:	f7ff ff37 	bl	8000a18 <EE_VerifyPageFullyErased>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d10d      	bne.n	8000bcc <EE_Format+0x90>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000bb0:	f107 0218 	add.w	r2, r7, #24
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f002 f8e3 	bl	8002d84 <HAL_FLASHEx_Erase>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8000bc2:	7ffb      	ldrb	r3, [r7, #31]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <EE_Format+0x90>
    {
      return FlashStatus;
 8000bc8:	7ffb      	ldrb	r3, [r7, #31]
 8000bca:	e000      	b.n	8000bce <EE_Format+0x92>
    }
  }

  return HAL_OK;
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3720      	adds	r7, #32
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	08008000 	.word	0x08008000
 8000bdc:	0800c000 	.word	0x0800c000

08000be0 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000bea:	2306      	movs	r3, #6
 8000bec:	81fb      	strh	r3, [r7, #14]
 8000bee:	2306      	movs	r3, #6
 8000bf0:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <EE_FindValidPage+0x84>)
 8000bf4:	881b      	ldrh	r3, [r3, #0]
 8000bf6:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	; (8000c68 <EE_FindValidPage+0x88>)
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d01b      	beq.n	8000c3c <EE_FindValidPage+0x5c>
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d125      	bne.n	8000c54 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8000c08:	89bb      	ldrh	r3, [r7, #12]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d108      	bne.n	8000c20 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8000c0e:	89fb      	ldrh	r3, [r7, #14]
 8000c10:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d101      	bne.n	8000c1c <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8000c18:	2300      	movs	r3, #0
 8000c1a:	e01c      	b.n	8000c56 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e01a      	b.n	8000c56 <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8000c20:	89fb      	ldrh	r3, [r7, #14]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d108      	bne.n	8000c38 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8000c26:	89bb      	ldrh	r3, [r7, #12]
 8000c28:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d101      	bne.n	8000c34 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8000c30:	2301      	movs	r3, #1
 8000c32:	e010      	b.n	8000c56 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8000c34:	2300      	movs	r3, #0
 8000c36:	e00e      	b.n	8000c56 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8000c38:	23ab      	movs	r3, #171	; 0xab
 8000c3a:	e00c      	b.n	8000c56 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8000c3c:	89fb      	ldrh	r3, [r7, #14]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d101      	bne.n	8000c46 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8000c42:	2300      	movs	r3, #0
 8000c44:	e007      	b.n	8000c56 <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8000c46:	89bb      	ldrh	r3, [r7, #12]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d101      	bne.n	8000c50 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	e002      	b.n	8000c56 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8000c50:	23ab      	movs	r3, #171	; 0xab
 8000c52:	e000      	b.n	8000c56 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8000c54:	2300      	movs	r3, #0
  }
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	08008000 	.word	0x08008000
 8000c68:	0800c000 	.word	0x0800c000

08000c6c <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	460a      	mov	r2, r1
 8000c76:	80fb      	strh	r3, [r7, #6]
 8000c78:	4613      	mov	r3, r2
 8000c7a:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8000c84:	4b23      	ldr	r3, [pc, #140]	; (8000d14 <EE_VerifyPageFullWriteVariable+0xa8>)
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	4b23      	ldr	r3, [pc, #140]	; (8000d18 <EE_VerifyPageFullWriteVariable+0xac>)
 8000c8a:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	f7ff ffa7 	bl	8000be0 <EE_FindValidPage>
 8000c92:	4603      	mov	r3, r0
 8000c94:	823b      	strh	r3, [r7, #16]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8000c96:	8a3b      	ldrh	r3, [r7, #16]
 8000c98:	2bab      	cmp	r3, #171	; 0xab
 8000c9a:	d101      	bne.n	8000ca0 <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 8000c9c:	23ab      	movs	r3, #171	; 0xab
 8000c9e:	e035      	b.n	8000d0c <EE_VerifyPageFullWriteVariable+0xa0>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8000ca0:	8a3b      	ldrh	r3, [r7, #16]
 8000ca2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000ca6:	3302      	adds	r3, #2
 8000ca8:	039b      	lsls	r3, r3, #14
 8000caa:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8000cac:	8a3b      	ldrh	r3, [r7, #16]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	039a      	lsls	r2, r3, #14
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <EE_VerifyPageFullWriteVariable+0xb0>)
 8000cb4:	4413      	add	r3, r2
 8000cb6:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 8000cb8:	e023      	b.n	8000d02 <EE_VerifyPageFullWriteVariable+0x96>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc2:	d11b      	bne.n	8000cfc <EE_VerifyPageFullWriteVariable+0x90>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);
 8000cc4:	88ba      	ldrh	r2, [r7, #4]
 8000cc6:	f04f 0300 	mov.w	r3, #0
 8000cca:	6979      	ldr	r1, [r7, #20]
 8000ccc:	2001      	movs	r0, #1
 8000cce:	f001 fe93 	bl	80029f8 <HAL_FLASH_Program>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8000cd6:	7cfb      	ldrb	r3, [r7, #19]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d002      	beq.n	8000ce2 <EE_VerifyPageFullWriteVariable+0x76>
      {
        return FlashStatus;
 8000cdc:	7cfb      	ldrb	r3, [r7, #19]
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	e014      	b.n	8000d0c <EE_VerifyPageFullWriteVariable+0xa0>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	1c99      	adds	r1, r3, #2
 8000ce6:	88fa      	ldrh	r2, [r7, #6]
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	2001      	movs	r0, #1
 8000cee:	f001 fe83 	bl	80029f8 <HAL_FLASH_Program>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 8000cf6:	7cfb      	ldrb	r3, [r7, #19]
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	e007      	b.n	8000d0c <EE_VerifyPageFullWriteVariable+0xa0>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	3304      	adds	r3, #4
 8000d00:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 8000d02:	697a      	ldr	r2, [r7, #20]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d3d7      	bcc.n	8000cba <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8000d0a:	2380      	movs	r3, #128	; 0x80
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	08008000 	.word	0x08008000
 8000d18:	0800c000 	.word	0x0800c000
 8000d1c:	08007fff 	.word	0x08007fff

08000d20 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08c      	sub	sp, #48	; 0x30
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	460a      	mov	r2, r1
 8000d2a:	80fb      	strh	r3, [r7, #6]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8000d30:	2300      	movs	r3, #0
 8000d32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8000d36:	4b54      	ldr	r3, [pc, #336]	; (8000e88 <EE_PageTransfer+0x168>)
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t OldPageId=0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000d42:	2300      	movs	r3, #0
 8000d44:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	847b      	strh	r3, [r7, #34]	; 0x22
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	843b      	strh	r3, [r7, #32]
  uint32_t SectorError = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8000d52:	2000      	movs	r0, #0
 8000d54:	f7ff ff44 	bl	8000be0 <EE_FindValidPage>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (ValidPage == PAGE1)       /* Page1 valid */
 8000d5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d104      	bne.n	8000d6c <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8000d62:	4b49      	ldr	r3, [pc, #292]	; (8000e88 <EE_PageTransfer+0x168>)
 8000d64:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8000d66:	2303      	movs	r3, #3
 8000d68:	857b      	strh	r3, [r7, #42]	; 0x2a
 8000d6a:	e009      	b.n	8000d80 <EE_PageTransfer+0x60>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8000d6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d104      	bne.n	8000d7c <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8000d72:	4b46      	ldr	r3, [pc, #280]	; (8000e8c <EE_PageTransfer+0x16c>)
 8000d74:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8000d76:	2302      	movs	r3, #2
 8000d78:	857b      	strh	r3, [r7, #42]	; 0x2a
 8000d7a:	e001      	b.n	8000d80 <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8000d7c:	23ab      	movs	r3, #171	; 0xab
 8000d7e:	e07e      	b.n	8000e7e <EE_PageTransfer+0x15e>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);
 8000d80:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000d84:	f04f 0300 	mov.w	r3, #0
 8000d88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f001 fe34 	bl	80029f8 <HAL_FLASH_Program>
 8000d90:	4603      	mov	r3, r0
 8000d92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000d96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d003      	beq.n	8000da6 <EE_PageTransfer+0x86>
  {
    return FlashStatus;
 8000d9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	e06b      	b.n	8000e7e <EE_PageTransfer+0x15e>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8000da6:	88ba      	ldrh	r2, [r7, #4]
 8000da8:	88fb      	ldrh	r3, [r7, #6]
 8000daa:	4611      	mov	r1, r2
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff5d 	bl	8000c6c <EE_VerifyPageFullWriteVariable>
 8000db2:	4603      	mov	r3, r0
 8000db4:	847b      	strh	r3, [r7, #34]	; 0x22
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8000db6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <EE_PageTransfer+0xa0>
  {
    return EepromStatus;
 8000dbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000dbe:	e05e      	b.n	8000e7e <EE_PageTransfer+0x15e>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	853b      	strh	r3, [r7, #40]	; 0x28
 8000dc4:	e027      	b.n	8000e16 <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8000dc6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000dc8:	4a31      	ldr	r2, [pc, #196]	; (8000e90 <EE_PageTransfer+0x170>)
 8000dca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dce:	88fa      	ldrh	r2, [r7, #6]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d01d      	beq.n	8000e10 <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8000dd4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000dd6:	4a2e      	ldr	r2, [pc, #184]	; (8000e90 <EE_PageTransfer+0x170>)
 8000dd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ddc:	492d      	ldr	r1, [pc, #180]	; (8000e94 <EE_PageTransfer+0x174>)
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fe40 	bl	8000a64 <EE_ReadVariable>
 8000de4:	4603      	mov	r3, r0
 8000de6:	843b      	strh	r3, [r7, #32]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8000de8:	8c3b      	ldrh	r3, [r7, #32]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d010      	beq.n	8000e10 <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8000dee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000df0:	4a27      	ldr	r2, [pc, #156]	; (8000e90 <EE_PageTransfer+0x170>)
 8000df2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000df6:	4a27      	ldr	r2, [pc, #156]	; (8000e94 <EE_PageTransfer+0x174>)
 8000df8:	8812      	ldrh	r2, [r2, #0]
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff35 	bl	8000c6c <EE_VerifyPageFullWriteVariable>
 8000e02:	4603      	mov	r3, r0
 8000e04:	847b      	strh	r3, [r7, #34]	; 0x22
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8000e06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <EE_PageTransfer+0xf0>
        {
          return EepromStatus;
 8000e0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e0e:	e036      	b.n	8000e7e <EE_PageTransfer+0x15e>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000e10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e12:	3301      	adds	r3, #1
 8000e14:	853b      	strh	r3, [r7, #40]	; 0x28
 8000e16:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d9d4      	bls.n	8000dc6 <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 8000e20:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000e22:	613b      	str	r3, [r7, #16]
  pEraseInit.NbSectors = 1;
 8000e24:	2301      	movs	r3, #1
 8000e26:	617b      	str	r3, [r7, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	61bb      	str	r3, [r7, #24]

  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000e2c:	f107 021c 	add.w	r2, r7, #28
 8000e30:	f107 0308 	add.w	r3, r7, #8
 8000e34:	4611      	mov	r1, r2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f001 ffa4 	bl	8002d84 <HAL_FLASHEx_Erase>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000e42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d003      	beq.n	8000e52 <EE_PageTransfer+0x132>
  {
    return FlashStatus;
 8000e4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	e015      	b.n	8000e7e <EE_PageTransfer+0x15e>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);
 8000e52:	f04f 0200 	mov.w	r2, #0
 8000e56:	f04f 0300 	mov.w	r3, #0
 8000e5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f001 fdcb 	bl	80029f8 <HAL_FLASH_Program>
 8000e62:	4603      	mov	r3, r0
 8000e64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000e68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d003      	beq.n	8000e78 <EE_PageTransfer+0x158>
  {
    return FlashStatus;
 8000e70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	e002      	b.n	8000e7e <EE_PageTransfer+0x15e>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8000e78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e7c:	b29b      	uxth	r3, r3
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3730      	adds	r7, #48	; 0x30
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	08008000 	.word	0x08008000
 8000e8c:	0800c000 	.word	0x0800c000
 8000e90:	20000000 	.word	0x20000000
 8000e94:	20000096 	.word	0x20000096

08000e98 <__NVIC_SystemReset>:
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8000e9c:	f3bf 8f4f 	dsb	sy
}
 8000ea0:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <__NVIC_SystemReset+0x24>)
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000eaa:	4904      	ldr	r1, [pc, #16]	; (8000ebc <__NVIC_SystemReset+0x24>)
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <__NVIC_SystemReset+0x28>)
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000eb2:	f3bf 8f4f 	dsb	sy
}
 8000eb6:	bf00      	nop
    __NOP();
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <__NVIC_SystemReset+0x20>
 8000ebc:	e000ed00 	.word	0xe000ed00
 8000ec0:	05fa0004 	.word	0x05fa0004

08000ec4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08e      	sub	sp, #56	; 0x38
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eca:	f001 f9db 	bl	8002284 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ece:	f000 f87f 	bl	8000fd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed2:	f000 fbf5 	bl	80016c0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ed6:	f000 f8dd 	bl	8001094 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000eda:	f000 f92d 	bl	8001138 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000ede:	f000 f96b 	bl	80011b8 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000ee2:	f000 f9a9 	bl	8001238 <MX_I2C3_Init>
  MX_SPI2_Init();
 8000ee6:	f000 fa73 	bl	80013d0 <MX_SPI2_Init>
  MX_SPI4_Init();
 8000eea:	f000 faa7 	bl	800143c <MX_SPI4_Init>
  MX_SPI5_Init();
 8000eee:	f000 fadb 	bl	80014a8 <MX_SPI5_Init>
  MX_TIM2_Init();
 8000ef2:	f000 fb0f 	bl	8001514 <MX_TIM2_Init>
  MX_UART8_Init();
 8000ef6:	f000 fb65 	bl	80015c4 <MX_UART8_Init>
  MX_USART3_UART_Init();
 8000efa:	f000 fb8d 	bl	8001618 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000efe:	f000 fbb5 	bl	800166c <MX_USART6_UART_Init>
  MX_RTC_Init();
 8000f02:	f000 f9d9 	bl	80012b8 <MX_RTC_Init>


  //Write to flash Memory

  /* Unlock the Flash Program Erase controller */
  HAL_FLASH_Unlock();
 8000f06:	f001 fdcb 	bl	8002aa0 <HAL_FLASH_Unlock>

  /* EEPROM Init */
  if( EE_Init() != EE_OK)
 8000f0a:	f7ff fba5 	bl	8000658 <EE_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d006      	beq.n	8000f22 <main+0x5e>
  {
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 8000f14:	2201      	movs	r2, #1
 8000f16:	2102      	movs	r1, #2
 8000f18:	4827      	ldr	r0, [pc, #156]	; (8000fb8 <main+0xf4>)
 8000f1a:	f002 fa1f 	bl	800335c <HAL_GPIO_WritePin>
    Error_Handler();
 8000f1e:	f000 fd73 	bl	8001a08 <Error_Handler>
  }


  MRT_getFlags();
 8000f22:	f7ff fb4f 	bl	80005c4 <MRT_getFlags>

  memset(buffer, 0, TX_BUF_DIM);
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	2232      	movs	r2, #50	; 0x32
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f005 fa4f 	bl	80063d0 <memset>
  sprintf(buffer,"Reset: %i\r\n",reset_flag);
 8000f32:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <main+0xf8>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	461a      	mov	r2, r3
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	4921      	ldr	r1, [pc, #132]	; (8000fc0 <main+0xfc>)
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f005 fab9 	bl	80064b4 <siprintf>
  HAL_UART_Transmit(&huart8, buffer, strlen(buffer), HAL_MAX_DELAY);
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff f953 	bl	80001f0 <strlen>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	1d39      	adds	r1, r7, #4
 8000f50:	f04f 33ff 	mov.w	r3, #4294967295
 8000f54:	481b      	ldr	r0, [pc, #108]	; (8000fc4 <main+0x100>)
 8000f56:	f004 fd10 	bl	800597a <HAL_UART_Transmit>
  HAL_Delay(1000);
 8000f5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f5e:	f001 f9d3 	bl	8002308 <HAL_Delay>


  if (reset_flag==0){
 8000f62:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <main+0xf8>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d106      	bne.n	8000f78 <main+0xb4>
	  HAL_UART_Transmit(&huart8, "FC restarted\r\n", 14, HAL_MAX_DELAY);
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6e:	220e      	movs	r2, #14
 8000f70:	4915      	ldr	r1, [pc, #84]	; (8000fc8 <main+0x104>)
 8000f72:	4814      	ldr	r0, [pc, #80]	; (8000fc4 <main+0x100>)
 8000f74:	f004 fd01 	bl	800597a <HAL_UART_Transmit>
  }

  //Flip flag to signal it's not the restart
  reset_flag = 1;
 8000f78:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <main+0xf8>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	701a      	strb	r2, [r3, #0]


  HAL_FLASH_Unlock();
 8000f7e:	f001 fd8f 	bl	8002aa0 <HAL_FLASH_Unlock>

  if((EE_WriteVariable(RESET_FLAG_ADDRESS, reset_flag)) != HAL_OK)
 8000f82:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <main+0x108>)
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	4a0d      	ldr	r2, [pc, #52]	; (8000fbc <main+0xf8>)
 8000f88:	7812      	ldrb	r2, [r2, #0]
 8000f8a:	b292      	uxth	r2, r2
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fdb2 	bl	8000af8 <EE_WriteVariable>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d006      	beq.n	8000fa8 <main+0xe4>
  {
	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	2104      	movs	r1, #4
 8000f9e:	4806      	ldr	r0, [pc, #24]	; (8000fb8 <main+0xf4>)
 8000fa0:	f002 f9dc 	bl	800335c <HAL_GPIO_WritePin>
    Error_Handler();
 8000fa4:	f000 fd30 	bl	8001a08 <Error_Handler>
  }

  HAL_Delay(1000);
 8000fa8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fac:	f001 f9ac 	bl	8002308 <HAL_Delay>

  HAL_FLASH_Lock();
 8000fb0:	f001 fd98 	bl	8002ae4 <HAL_FLASH_Lock>


  //Random reset
  NVIC_SystemReset();
 8000fb4:	f7ff ff70 	bl	8000e98 <__NVIC_SystemReset>
 8000fb8:	40020800 	.word	0x40020800
 8000fbc:	20000094 	.word	0x20000094
 8000fc0:	08006c9c 	.word	0x08006c9c
 8000fc4:	20000804 	.word	0x20000804
 8000fc8:	08006ca8 	.word	0x08006ca8
 8000fcc:	20000000 	.word	0x20000000

08000fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b094      	sub	sp, #80	; 0x50
 8000fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd6:	f107 0320 	add.w	r3, r7, #32
 8000fda:	2230      	movs	r2, #48	; 0x30
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f005 f9f6 	bl	80063d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	4b24      	ldr	r3, [pc, #144]	; (800108c <SystemClock_Config+0xbc>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	4a23      	ldr	r2, [pc, #140]	; (800108c <SystemClock_Config+0xbc>)
 8000ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001002:	6413      	str	r3, [r2, #64]	; 0x40
 8001004:	4b21      	ldr	r3, [pc, #132]	; (800108c <SystemClock_Config+0xbc>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001010:	2300      	movs	r3, #0
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <SystemClock_Config+0xc0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800101c:	4a1c      	ldr	r2, [pc, #112]	; (8001090 <SystemClock_Config+0xc0>)
 800101e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <SystemClock_Config+0xc0>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001030:	2309      	movs	r3, #9
 8001032:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001034:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800103a:	2301      	movs	r3, #1
 800103c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800103e:	2300      	movs	r3, #0
 8001040:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001042:	f107 0320 	add.w	r3, r7, #32
 8001046:	4618      	mov	r0, r3
 8001048:	f002 fb7a 	bl	8003740 <HAL_RCC_OscConfig>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001052:	f000 fcd9 	bl	8001a08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001056:	230f      	movs	r3, #15
 8001058:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800105a:	2301      	movs	r3, #1
 800105c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001066:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f002 fddc 	bl	8003c30 <HAL_RCC_ClockConfig>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800107e:	f000 fcc3 	bl	8001a08 <Error_Handler>
  }
}
 8001082:	bf00      	nop
 8001084:	3750      	adds	r7, #80	; 0x50
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40023800 	.word	0x40023800
 8001090:	40007000 	.word	0x40007000

08001094 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800109a:	463b      	mov	r3, r7
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010a6:	4b21      	ldr	r3, [pc, #132]	; (800112c <MX_ADC1_Init+0x98>)
 80010a8:	4a21      	ldr	r2, [pc, #132]	; (8001130 <MX_ADC1_Init+0x9c>)
 80010aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010ac:	4b1f      	ldr	r3, [pc, #124]	; (800112c <MX_ADC1_Init+0x98>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010b2:	4b1e      	ldr	r3, [pc, #120]	; (800112c <MX_ADC1_Init+0x98>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010b8:	4b1c      	ldr	r3, [pc, #112]	; (800112c <MX_ADC1_Init+0x98>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010be:	4b1b      	ldr	r3, [pc, #108]	; (800112c <MX_ADC1_Init+0x98>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010c4:	4b19      	ldr	r3, [pc, #100]	; (800112c <MX_ADC1_Init+0x98>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010cc:	4b17      	ldr	r3, [pc, #92]	; (800112c <MX_ADC1_Init+0x98>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010d2:	4b16      	ldr	r3, [pc, #88]	; (800112c <MX_ADC1_Init+0x98>)
 80010d4:	4a17      	ldr	r2, [pc, #92]	; (8001134 <MX_ADC1_Init+0xa0>)
 80010d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010d8:	4b14      	ldr	r3, [pc, #80]	; (800112c <MX_ADC1_Init+0x98>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010de:	4b13      	ldr	r3, [pc, #76]	; (800112c <MX_ADC1_Init+0x98>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <MX_ADC1_Init+0x98>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <MX_ADC1_Init+0x98>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010f2:	480e      	ldr	r0, [pc, #56]	; (800112c <MX_ADC1_Init+0x98>)
 80010f4:	f001 f92c 	bl	8002350 <HAL_ADC_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80010fe:	f000 fc83 	bl	8001a08 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001102:	2306      	movs	r3, #6
 8001104:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001106:	2301      	movs	r3, #1
 8001108:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110e:	463b      	mov	r3, r7
 8001110:	4619      	mov	r1, r3
 8001112:	4806      	ldr	r0, [pc, #24]	; (800112c <MX_ADC1_Init+0x98>)
 8001114:	f001 f960 	bl	80023d8 <HAL_ADC_ConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800111e:	f000 fc73 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000730 	.word	0x20000730
 8001130:	40012000 	.word	0x40012000
 8001134:	0f000001 	.word	0x0f000001

08001138 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800113c:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <MX_I2C1_Init+0x74>)
 800113e:	4a1c      	ldr	r2, [pc, #112]	; (80011b0 <MX_I2C1_Init+0x78>)
 8001140:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001142:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <MX_I2C1_Init+0x74>)
 8001144:	4a1b      	ldr	r2, [pc, #108]	; (80011b4 <MX_I2C1_Init+0x7c>)
 8001146:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001148:	4b18      	ldr	r3, [pc, #96]	; (80011ac <MX_I2C1_Init+0x74>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800114e:	4b17      	ldr	r3, [pc, #92]	; (80011ac <MX_I2C1_Init+0x74>)
 8001150:	2200      	movs	r2, #0
 8001152:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001154:	4b15      	ldr	r3, [pc, #84]	; (80011ac <MX_I2C1_Init+0x74>)
 8001156:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800115a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800115c:	4b13      	ldr	r3, [pc, #76]	; (80011ac <MX_I2C1_Init+0x74>)
 800115e:	2200      	movs	r2, #0
 8001160:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <MX_I2C1_Init+0x74>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001168:	4b10      	ldr	r3, [pc, #64]	; (80011ac <MX_I2C1_Init+0x74>)
 800116a:	2200      	movs	r2, #0
 800116c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <MX_I2C1_Init+0x74>)
 8001170:	2200      	movs	r2, #0
 8001172:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001174:	480d      	ldr	r0, [pc, #52]	; (80011ac <MX_I2C1_Init+0x74>)
 8001176:	f002 f923 	bl	80033c0 <HAL_I2C_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001180:	f000 fc42 	bl	8001a08 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001184:	2100      	movs	r1, #0
 8001186:	4809      	ldr	r0, [pc, #36]	; (80011ac <MX_I2C1_Init+0x74>)
 8001188:	f002 fa5e 	bl	8003648 <HAL_I2CEx_ConfigAnalogFilter>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001192:	f000 fc39 	bl	8001a08 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001196:	2100      	movs	r1, #0
 8001198:	4804      	ldr	r0, [pc, #16]	; (80011ac <MX_I2C1_Init+0x74>)
 800119a:	f002 fa91 	bl	80036c0 <HAL_I2CEx_ConfigDigitalFilter>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80011a4:	f000 fc30 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000678 	.word	0x20000678
 80011b0:	40005400 	.word	0x40005400
 80011b4:	000186a0 	.word	0x000186a0

080011b8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <MX_I2C2_Init+0x74>)
 80011be:	4a1c      	ldr	r2, [pc, #112]	; (8001230 <MX_I2C2_Init+0x78>)
 80011c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80011c2:	4b1a      	ldr	r3, [pc, #104]	; (800122c <MX_I2C2_Init+0x74>)
 80011c4:	4a1b      	ldr	r2, [pc, #108]	; (8001234 <MX_I2C2_Init+0x7c>)
 80011c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011c8:	4b18      	ldr	r3, [pc, #96]	; (800122c <MX_I2C2_Init+0x74>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80011ce:	4b17      	ldr	r3, [pc, #92]	; (800122c <MX_I2C2_Init+0x74>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011d4:	4b15      	ldr	r3, [pc, #84]	; (800122c <MX_I2C2_Init+0x74>)
 80011d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011da:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011dc:	4b13      	ldr	r3, [pc, #76]	; (800122c <MX_I2C2_Init+0x74>)
 80011de:	2200      	movs	r2, #0
 80011e0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80011e2:	4b12      	ldr	r3, [pc, #72]	; (800122c <MX_I2C2_Init+0x74>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011e8:	4b10      	ldr	r3, [pc, #64]	; (800122c <MX_I2C2_Init+0x74>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MX_I2C2_Init+0x74>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011f4:	480d      	ldr	r0, [pc, #52]	; (800122c <MX_I2C2_Init+0x74>)
 80011f6:	f002 f8e3 	bl	80033c0 <HAL_I2C_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001200:	f000 fc02 	bl	8001a08 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001204:	2100      	movs	r1, #0
 8001206:	4809      	ldr	r0, [pc, #36]	; (800122c <MX_I2C2_Init+0x74>)
 8001208:	f002 fa1e 	bl	8003648 <HAL_I2CEx_ConfigAnalogFilter>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001212:	f000 fbf9 	bl	8001a08 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001216:	2100      	movs	r1, #0
 8001218:	4804      	ldr	r0, [pc, #16]	; (800122c <MX_I2C2_Init+0x74>)
 800121a:	f002 fa51 	bl	80036c0 <HAL_I2CEx_ConfigDigitalFilter>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001224:	f000 fbf0 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200006d8 	.word	0x200006d8
 8001230:	40005800 	.word	0x40005800
 8001234:	000186a0 	.word	0x000186a0

08001238 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <MX_I2C3_Init+0x74>)
 800123e:	4a1c      	ldr	r2, [pc, #112]	; (80012b0 <MX_I2C3_Init+0x78>)
 8001240:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001242:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <MX_I2C3_Init+0x74>)
 8001244:	4a1b      	ldr	r2, [pc, #108]	; (80012b4 <MX_I2C3_Init+0x7c>)
 8001246:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001248:	4b18      	ldr	r3, [pc, #96]	; (80012ac <MX_I2C3_Init+0x74>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800124e:	4b17      	ldr	r3, [pc, #92]	; (80012ac <MX_I2C3_Init+0x74>)
 8001250:	2200      	movs	r2, #0
 8001252:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001254:	4b15      	ldr	r3, [pc, #84]	; (80012ac <MX_I2C3_Init+0x74>)
 8001256:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800125a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800125c:	4b13      	ldr	r3, [pc, #76]	; (80012ac <MX_I2C3_Init+0x74>)
 800125e:	2200      	movs	r2, #0
 8001260:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001262:	4b12      	ldr	r3, [pc, #72]	; (80012ac <MX_I2C3_Init+0x74>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001268:	4b10      	ldr	r3, [pc, #64]	; (80012ac <MX_I2C3_Init+0x74>)
 800126a:	2200      	movs	r2, #0
 800126c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800126e:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <MX_I2C3_Init+0x74>)
 8001270:	2200      	movs	r2, #0
 8001272:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001274:	480d      	ldr	r0, [pc, #52]	; (80012ac <MX_I2C3_Init+0x74>)
 8001276:	f002 f8a3 	bl	80033c0 <HAL_I2C_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001280:	f000 fbc2 	bl	8001a08 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001284:	2100      	movs	r1, #0
 8001286:	4809      	ldr	r0, [pc, #36]	; (80012ac <MX_I2C3_Init+0x74>)
 8001288:	f002 f9de 	bl	8003648 <HAL_I2CEx_ConfigAnalogFilter>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001292:	f000 fbb9 	bl	8001a08 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001296:	2100      	movs	r1, #0
 8001298:	4804      	ldr	r0, [pc, #16]	; (80012ac <MX_I2C3_Init+0x74>)
 800129a:	f002 fa11 	bl	80036c0 <HAL_I2CEx_ConfigDigitalFilter>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80012a4:	f000 fbb0 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000530 	.word	0x20000530
 80012b0:	40005c00 	.word	0x40005c00
 80012b4:	000186a0 	.word	0x000186a0

080012b8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b090      	sub	sp, #64	; 0x40
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80012be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
 80012cc:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80012ce:	2300      	movs	r3, #0
 80012d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80012d2:	463b      	mov	r3, r7
 80012d4:	2228      	movs	r2, #40	; 0x28
 80012d6:	2100      	movs	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f005 f879 	bl	80063d0 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80012de:	4b3a      	ldr	r3, [pc, #232]	; (80013c8 <MX_RTC_Init+0x110>)
 80012e0:	4a3a      	ldr	r2, [pc, #232]	; (80013cc <MX_RTC_Init+0x114>)
 80012e2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80012e4:	4b38      	ldr	r3, [pc, #224]	; (80013c8 <MX_RTC_Init+0x110>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80012ea:	4b37      	ldr	r3, [pc, #220]	; (80013c8 <MX_RTC_Init+0x110>)
 80012ec:	227f      	movs	r2, #127	; 0x7f
 80012ee:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80012f0:	4b35      	ldr	r3, [pc, #212]	; (80013c8 <MX_RTC_Init+0x110>)
 80012f2:	22ff      	movs	r2, #255	; 0xff
 80012f4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012f6:	4b34      	ldr	r3, [pc, #208]	; (80013c8 <MX_RTC_Init+0x110>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012fc:	4b32      	ldr	r3, [pc, #200]	; (80013c8 <MX_RTC_Init+0x110>)
 80012fe:	2200      	movs	r2, #0
 8001300:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001302:	4b31      	ldr	r3, [pc, #196]	; (80013c8 <MX_RTC_Init+0x110>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001308:	482f      	ldr	r0, [pc, #188]	; (80013c8 <MX_RTC_Init+0x110>)
 800130a:	f003 f87b 	bl	8004404 <HAL_RTC_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001314:	f000 fb78 	bl	8001a08 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001318:	2300      	movs	r3, #0
 800131a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 800131e:	2300      	movs	r3, #0
 8001320:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001324:	2300      	movs	r3, #0
 8001326:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800132a:	2300      	movs	r3, #0
 800132c:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800132e:	2300      	movs	r3, #0
 8001330:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001332:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001336:	2201      	movs	r2, #1
 8001338:	4619      	mov	r1, r3
 800133a:	4823      	ldr	r0, [pc, #140]	; (80013c8 <MX_RTC_Init+0x110>)
 800133c:	f003 f8f3 	bl	8004526 <HAL_RTC_SetTime>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001346:	f000 fb5f 	bl	8001a08 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800134a:	2301      	movs	r3, #1
 800134c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001350:	2301      	movs	r3, #1
 8001352:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001356:	2301      	movs	r3, #1
 8001358:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 800135c:	2300      	movs	r3, #0
 800135e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001362:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001366:	2201      	movs	r2, #1
 8001368:	4619      	mov	r1, r3
 800136a:	4817      	ldr	r0, [pc, #92]	; (80013c8 <MX_RTC_Init+0x110>)
 800136c:	f003 f998 	bl	80046a0 <HAL_RTC_SetDate>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001376:	f000 fb47 	bl	8001a08 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800137a:	2300      	movs	r3, #0
 800137c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 800137e:	2301      	movs	r3, #1
 8001380:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001382:	2300      	movs	r3, #0
 8001384:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001396:	2300      	movs	r3, #0
 8001398:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800139e:	2301      	movs	r3, #1
 80013a0:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80013a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80013aa:	463b      	mov	r3, r7
 80013ac:	2201      	movs	r2, #1
 80013ae:	4619      	mov	r1, r3
 80013b0:	4805      	ldr	r0, [pc, #20]	; (80013c8 <MX_RTC_Init+0x110>)
 80013b2:	f003 fa1d 	bl	80047f0 <HAL_RTC_SetAlarm_IT>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80013bc:	f000 fb24 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80013c0:	bf00      	nop
 80013c2:	3740      	adds	r7, #64	; 0x40
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	200007d4 	.word	0x200007d4
 80013cc:	40002800 	.word	0x40002800

080013d0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013d4:	4b17      	ldr	r3, [pc, #92]	; (8001434 <MX_SPI2_Init+0x64>)
 80013d6:	4a18      	ldr	r2, [pc, #96]	; (8001438 <MX_SPI2_Init+0x68>)
 80013d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013da:	4b16      	ldr	r3, [pc, #88]	; (8001434 <MX_SPI2_Init+0x64>)
 80013dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013e2:	4b14      	ldr	r3, [pc, #80]	; (8001434 <MX_SPI2_Init+0x64>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <MX_SPI2_Init+0x64>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013ee:	4b11      	ldr	r3, [pc, #68]	; (8001434 <MX_SPI2_Init+0x64>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <MX_SPI2_Init+0x64>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <MX_SPI2_Init+0x64>)
 80013fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001400:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001402:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <MX_SPI2_Init+0x64>)
 8001404:	2200      	movs	r2, #0
 8001406:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001408:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <MX_SPI2_Init+0x64>)
 800140a:	2200      	movs	r2, #0
 800140c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <MX_SPI2_Init+0x64>)
 8001410:	2200      	movs	r2, #0
 8001412:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001414:	4b07      	ldr	r3, [pc, #28]	; (8001434 <MX_SPI2_Init+0x64>)
 8001416:	2200      	movs	r2, #0
 8001418:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <MX_SPI2_Init+0x64>)
 800141c:	220a      	movs	r2, #10
 800141e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001420:	4804      	ldr	r0, [pc, #16]	; (8001434 <MX_SPI2_Init+0x64>)
 8001422:	f003 fbe9 	bl	8004bf8 <HAL_SPI_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800142c:	f000 faec 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000584 	.word	0x20000584
 8001438:	40003800 	.word	0x40003800

0800143c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001440:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <MX_SPI4_Init+0x64>)
 8001442:	4a18      	ldr	r2, [pc, #96]	; (80014a4 <MX_SPI4_Init+0x68>)
 8001444:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001446:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <MX_SPI4_Init+0x64>)
 8001448:	f44f 7282 	mov.w	r2, #260	; 0x104
 800144c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800144e:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <MX_SPI4_Init+0x64>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <MX_SPI4_Init+0x64>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <MX_SPI4_Init+0x64>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001460:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <MX_SPI4_Init+0x64>)
 8001462:	2200      	movs	r2, #0
 8001464:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <MX_SPI4_Init+0x64>)
 8001468:	f44f 7200 	mov.w	r2, #512	; 0x200
 800146c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800146e:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <MX_SPI4_Init+0x64>)
 8001470:	2200      	movs	r2, #0
 8001472:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001474:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <MX_SPI4_Init+0x64>)
 8001476:	2200      	movs	r2, #0
 8001478:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <MX_SPI4_Init+0x64>)
 800147c:	2200      	movs	r2, #0
 800147e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001480:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <MX_SPI4_Init+0x64>)
 8001482:	2200      	movs	r2, #0
 8001484:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <MX_SPI4_Init+0x64>)
 8001488:	220a      	movs	r2, #10
 800148a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800148c:	4804      	ldr	r0, [pc, #16]	; (80014a0 <MX_SPI4_Init+0x64>)
 800148e:	f003 fbb3 	bl	8004bf8 <HAL_SPI_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001498:	f000 fab6 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	2000077c 	.word	0x2000077c
 80014a4:	40013400 	.word	0x40013400

080014a8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80014ac:	4b17      	ldr	r3, [pc, #92]	; (800150c <MX_SPI5_Init+0x64>)
 80014ae:	4a18      	ldr	r2, [pc, #96]	; (8001510 <MX_SPI5_Init+0x68>)
 80014b0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80014b2:	4b16      	ldr	r3, [pc, #88]	; (800150c <MX_SPI5_Init+0x64>)
 80014b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014b8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80014ba:	4b14      	ldr	r3, [pc, #80]	; (800150c <MX_SPI5_Init+0x64>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80014c0:	4b12      	ldr	r3, [pc, #72]	; (800150c <MX_SPI5_Init+0x64>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <MX_SPI5_Init+0x64>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014cc:	4b0f      	ldr	r3, [pc, #60]	; (800150c <MX_SPI5_Init+0x64>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80014d2:	4b0e      	ldr	r3, [pc, #56]	; (800150c <MX_SPI5_Init+0x64>)
 80014d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014d8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014da:	4b0c      	ldr	r3, [pc, #48]	; (800150c <MX_SPI5_Init+0x64>)
 80014dc:	2200      	movs	r2, #0
 80014de:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014e0:	4b0a      	ldr	r3, [pc, #40]	; (800150c <MX_SPI5_Init+0x64>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <MX_SPI5_Init+0x64>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014ec:	4b07      	ldr	r3, [pc, #28]	; (800150c <MX_SPI5_Init+0x64>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <MX_SPI5_Init+0x64>)
 80014f4:	220a      	movs	r2, #10
 80014f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80014f8:	4804      	ldr	r0, [pc, #16]	; (800150c <MX_SPI5_Init+0x64>)
 80014fa:	f003 fb7d 	bl	8004bf8 <HAL_SPI_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001504:	f000 fa80 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}
 800150c:	200005dc 	.word	0x200005dc
 8001510:	40015000 	.word	0x40015000

08001514 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	; 0x28
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151a:	f107 0320 	add.w	r3, r7, #32
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
 8001530:	611a      	str	r2, [r3, #16]
 8001532:	615a      	str	r2, [r3, #20]
 8001534:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001536:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <MX_TIM2_Init+0xac>)
 8001538:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800153c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800153e:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <MX_TIM2_Init+0xac>)
 8001540:	2200      	movs	r2, #0
 8001542:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001544:	4b1e      	ldr	r3, [pc, #120]	; (80015c0 <MX_TIM2_Init+0xac>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800154a:	4b1d      	ldr	r3, [pc, #116]	; (80015c0 <MX_TIM2_Init+0xac>)
 800154c:	f04f 32ff 	mov.w	r2, #4294967295
 8001550:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001552:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <MX_TIM2_Init+0xac>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001558:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <MX_TIM2_Init+0xac>)
 800155a:	2200      	movs	r2, #0
 800155c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800155e:	4818      	ldr	r0, [pc, #96]	; (80015c0 <MX_TIM2_Init+0xac>)
 8001560:	f003 fc9c 	bl	8004e9c <HAL_TIM_PWM_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800156a:	f000 fa4d 	bl	8001a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800156e:	2300      	movs	r3, #0
 8001570:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001572:	2300      	movs	r3, #0
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001576:	f107 0320 	add.w	r3, r7, #32
 800157a:	4619      	mov	r1, r3
 800157c:	4810      	ldr	r0, [pc, #64]	; (80015c0 <MX_TIM2_Init+0xac>)
 800157e:	f004 f91f 	bl	80057c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001588:	f000 fa3e 	bl	8001a08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800158c:	2360      	movs	r3, #96	; 0x60
 800158e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	2208      	movs	r2, #8
 80015a0:	4619      	mov	r1, r3
 80015a2:	4807      	ldr	r0, [pc, #28]	; (80015c0 <MX_TIM2_Init+0xac>)
 80015a4:	f003 fdd2 	bl	800514c <HAL_TIM_PWM_ConfigChannel>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80015ae:	f000 fa2b 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015b2:	4803      	ldr	r0, [pc, #12]	; (80015c0 <MX_TIM2_Init+0xac>)
 80015b4:	f000 fc7c 	bl	8001eb0 <HAL_TIM_MspPostInit>

}
 80015b8:	bf00      	nop
 80015ba:	3728      	adds	r7, #40	; 0x28
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	2000088c 	.word	0x2000088c

080015c4 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80015c8:	4b11      	ldr	r3, [pc, #68]	; (8001610 <MX_UART8_Init+0x4c>)
 80015ca:	4a12      	ldr	r2, [pc, #72]	; (8001614 <MX_UART8_Init+0x50>)
 80015cc:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80015ce:	4b10      	ldr	r3, [pc, #64]	; (8001610 <MX_UART8_Init+0x4c>)
 80015d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015d4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <MX_UART8_Init+0x4c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80015dc:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <MX_UART8_Init+0x4c>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80015e2:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <MX_UART8_Init+0x4c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80015e8:	4b09      	ldr	r3, [pc, #36]	; (8001610 <MX_UART8_Init+0x4c>)
 80015ea:	220c      	movs	r2, #12
 80015ec:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ee:	4b08      	ldr	r3, [pc, #32]	; (8001610 <MX_UART8_Init+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <MX_UART8_Init+0x4c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80015fa:	4805      	ldr	r0, [pc, #20]	; (8001610 <MX_UART8_Init+0x4c>)
 80015fc:	f004 f970 	bl	80058e0 <HAL_UART_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8001606:	f000 f9ff 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000804 	.word	0x20000804
 8001614:	40007c00 	.word	0x40007c00

08001618 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <MX_USART3_UART_Init+0x4c>)
 800161e:	4a12      	ldr	r2, [pc, #72]	; (8001668 <MX_USART3_UART_Init+0x50>)
 8001620:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <MX_USART3_UART_Init+0x4c>)
 8001624:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001628:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <MX_USART3_UART_Init+0x4c>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <MX_USART3_UART_Init+0x4c>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <MX_USART3_UART_Init+0x4c>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800163c:	4b09      	ldr	r3, [pc, #36]	; (8001664 <MX_USART3_UART_Init+0x4c>)
 800163e:	220c      	movs	r2, #12
 8001640:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001642:	4b08      	ldr	r3, [pc, #32]	; (8001664 <MX_USART3_UART_Init+0x4c>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <MX_USART3_UART_Init+0x4c>)
 800164a:	2200      	movs	r2, #0
 800164c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800164e:	4805      	ldr	r0, [pc, #20]	; (8001664 <MX_USART3_UART_Init+0x4c>)
 8001650:	f004 f946 	bl	80058e0 <HAL_UART_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800165a:	f000 f9d5 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000634 	.word	0x20000634
 8001668:	40004800 	.word	0x40004800

0800166c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <MX_USART6_UART_Init+0x4c>)
 8001672:	4a12      	ldr	r2, [pc, #72]	; (80016bc <MX_USART6_UART_Init+0x50>)
 8001674:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <MX_USART6_UART_Init+0x4c>)
 8001678:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800167c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800167e:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <MX_USART6_UART_Init+0x4c>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <MX_USART6_UART_Init+0x4c>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <MX_USART6_UART_Init+0x4c>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <MX_USART6_UART_Init+0x4c>)
 8001692:	220c      	movs	r2, #12
 8001694:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001696:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <MX_USART6_UART_Init+0x4c>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <MX_USART6_UART_Init+0x4c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80016a2:	4805      	ldr	r0, [pc, #20]	; (80016b8 <MX_USART6_UART_Init+0x4c>)
 80016a4:	f004 f91c 	bl	80058e0 <HAL_UART_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80016ae:	f000 f9ab 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000848 	.word	0x20000848
 80016bc:	40011400 	.word	0x40011400

080016c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08e      	sub	sp, #56	; 0x38
 80016c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	60da      	str	r2, [r3, #12]
 80016d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	623b      	str	r3, [r7, #32]
 80016da:	4bb5      	ldr	r3, [pc, #724]	; (80019b0 <MX_GPIO_Init+0x2f0>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4ab4      	ldr	r2, [pc, #720]	; (80019b0 <MX_GPIO_Init+0x2f0>)
 80016e0:	f043 0310 	orr.w	r3, r3, #16
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4bb2      	ldr	r3, [pc, #712]	; (80019b0 <MX_GPIO_Init+0x2f0>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0310 	and.w	r3, r3, #16
 80016ee:	623b      	str	r3, [r7, #32]
 80016f0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
 80016f6:	4bae      	ldr	r3, [pc, #696]	; (80019b0 <MX_GPIO_Init+0x2f0>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4aad      	ldr	r2, [pc, #692]	; (80019b0 <MX_GPIO_Init+0x2f0>)
 80016fc:	f043 0304 	orr.w	r3, r3, #4
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4bab      	ldr	r3, [pc, #684]	; (80019b0 <MX_GPIO_Init+0x2f0>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0304 	and.w	r3, r3, #4
 800170a:	61fb      	str	r3, [r7, #28]
 800170c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	61bb      	str	r3, [r7, #24]
 8001712:	4ba7      	ldr	r3, [pc, #668]	; (80019b0 <MX_GPIO_Init+0x2f0>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4aa6      	ldr	r2, [pc, #664]	; (80019b0 <MX_GPIO_Init+0x2f0>)
 8001718:	f043 0320 	orr.w	r3, r3, #32
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4ba4      	ldr	r3, [pc, #656]	; (80019b0 <MX_GPIO_Init+0x2f0>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0320 	and.w	r3, r3, #32
 8001726:	61bb      	str	r3, [r7, #24]
 8001728:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	4ba0      	ldr	r3, [pc, #640]	; (80019b0 <MX_GPIO_Init+0x2f0>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4a9f      	ldr	r2, [pc, #636]	; (80019b0 <MX_GPIO_Init+0x2f0>)
 8001734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001738:	6313      	str	r3, [r2, #48]	; 0x30
 800173a:	4b9d      	ldr	r3, [pc, #628]	; (80019b0 <MX_GPIO_Init+0x2f0>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	4b99      	ldr	r3, [pc, #612]	; (80019b0 <MX_GPIO_Init+0x2f0>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	4a98      	ldr	r2, [pc, #608]	; (80019b0 <MX_GPIO_Init+0x2f0>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6313      	str	r3, [r2, #48]	; 0x30
 8001756:	4b96      	ldr	r3, [pc, #600]	; (80019b0 <MX_GPIO_Init+0x2f0>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	4b92      	ldr	r3, [pc, #584]	; (80019b0 <MX_GPIO_Init+0x2f0>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	4a91      	ldr	r2, [pc, #580]	; (80019b0 <MX_GPIO_Init+0x2f0>)
 800176c:	f043 0302 	orr.w	r3, r3, #2
 8001770:	6313      	str	r3, [r2, #48]	; 0x30
 8001772:	4b8f      	ldr	r3, [pc, #572]	; (80019b0 <MX_GPIO_Init+0x2f0>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	4b8b      	ldr	r3, [pc, #556]	; (80019b0 <MX_GPIO_Init+0x2f0>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4a8a      	ldr	r2, [pc, #552]	; (80019b0 <MX_GPIO_Init+0x2f0>)
 8001788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4b88      	ldr	r3, [pc, #544]	; (80019b0 <MX_GPIO_Init+0x2f0>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	4b84      	ldr	r3, [pc, #528]	; (80019b0 <MX_GPIO_Init+0x2f0>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4a83      	ldr	r2, [pc, #524]	; (80019b0 <MX_GPIO_Init+0x2f0>)
 80017a4:	f043 0308 	orr.w	r3, r3, #8
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4b81      	ldr	r3, [pc, #516]	; (80019b0 <MX_GPIO_Init+0x2f0>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 80017b6:	2200      	movs	r2, #0
 80017b8:	f248 4184 	movw	r1, #33924	; 0x8484
 80017bc:	487d      	ldr	r0, [pc, #500]	; (80019b4 <MX_GPIO_Init+0x2f4>)
 80017be:	f001 fdcd 	bl	800335c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI5_SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 80017c2:	2200      	movs	r2, #0
 80017c4:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 80017c8:	487b      	ldr	r0, [pc, #492]	; (80019b8 <MX_GPIO_Init+0x2f8>)
 80017ca:	f001 fdc7 	bl	800335c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 80017ce:	2200      	movs	r2, #0
 80017d0:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80017d4:	4879      	ldr	r0, [pc, #484]	; (80019bc <MX_GPIO_Init+0x2fc>)
 80017d6:	f001 fdc1 	bl	800335c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 80017da:	2200      	movs	r2, #0
 80017dc:	2108      	movs	r1, #8
 80017de:	4878      	ldr	r0, [pc, #480]	; (80019c0 <MX_GPIO_Init+0x300>)
 80017e0:	f001 fdbc 	bl	800335c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 80017e4:	2200      	movs	r2, #0
 80017e6:	f645 213e 	movw	r1, #23102	; 0x5a3e
 80017ea:	4876      	ldr	r0, [pc, #472]	; (80019c4 <MX_GPIO_Init+0x304>)
 80017ec:	f001 fdb6 	bl	800335c <HAL_GPIO_WritePin>
                          |SX_RF_SW_Pin|OUT_VR_PWR_Pin|OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin
                          |OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin, GPIO_PIN_RESET);
 80017f0:	2200      	movs	r2, #0
 80017f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017f6:	4874      	ldr	r0, [pc, #464]	; (80019c8 <MX_GPIO_Init+0x308>)
 80017f8:	f001 fdb0 	bl	800335c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 80017fc:	2200      	movs	r2, #0
 80017fe:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 8001802:	4872      	ldr	r0, [pc, #456]	; (80019cc <MX_GPIO_Init+0x30c>)
 8001804:	f001 fdaa 	bl	800335c <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_12V_Buck_Pin OUT_Prop_ActuatedVent_Gate_Pin SPI4_CS_Thermocouple_Pin Iridium_RST_Pin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 8001808:	f248 4384 	movw	r3, #33924	; 0x8484
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180e:	2301      	movs	r3, #1
 8001810:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001816:	2300      	movs	r3, #0
 8001818:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800181a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181e:	4619      	mov	r1, r3
 8001820:	4864      	ldr	r0, [pc, #400]	; (80019b4 <MX_GPIO_Init+0x2f4>)
 8001822:	f001 fbef 	bl	8003004 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SD_CS_Pin OUT_PyroValve_Gate_2_Pin OUT_PyroValve_Gate_1_Pin */
  GPIO_InitStruct.Pin = SPI5_SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 8001826:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182c:	2301      	movs	r3, #1
 800182e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001834:	2300      	movs	r3, #0
 8001836:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183c:	4619      	mov	r1, r3
 800183e:	485e      	ldr	r0, [pc, #376]	; (80019b8 <MX_GPIO_Init+0x2f8>)
 8001840:	f001 fbe0 	bl	8003004 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Button_Pin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 8001844:	2301      	movs	r3, #1
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001848:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800184c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 8001852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001856:	4619      	mov	r1, r3
 8001858:	4858      	ldr	r0, [pc, #352]	; (80019bc <MX_GPIO_Init+0x2fc>)
 800185a:	f001 fbd3 	bl	8003004 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_LED1_Pin OUT_LED2_Pin OUT_LED3_Pin SX_AMPLIFIER_Pin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 800185e:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001864:	2301      	movs	r3, #1
 8001866:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2300      	movs	r3, #0
 800186e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001874:	4619      	mov	r1, r3
 8001876:	4851      	ldr	r0, [pc, #324]	; (80019bc <MX_GPIO_Init+0x2fc>)
 8001878:	f001 fbc4 	bl	8003004 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_LEDF_Pin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 800187c:	2308      	movs	r3, #8
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001880:	2301      	movs	r3, #1
 8001882:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2300      	movs	r3, #0
 800188a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 800188c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001890:	4619      	mov	r1, r3
 8001892:	484b      	ldr	r0, [pc, #300]	; (80019c0 <MX_GPIO_Init+0x300>)
 8001894:	f001 fbb6 	bl	8003004 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_Prop_PyroTurboValve_LimitSwitch_Pin IN_SD_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 8001898:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800189e:	2300      	movs	r3, #0
 80018a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018aa:	4619      	mov	r1, r3
 80018ac:	4843      	ldr	r0, [pc, #268]	; (80019bc <MX_GPIO_Init+0x2fc>)
 80018ae:	f001 fba9 	bl	8003004 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Prop_ActuatedVent_Feedback_Pin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 80018b2:	2302      	movs	r3, #2
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b6:	2300      	movs	r3, #0
 80018b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 80018be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c2:	4619      	mov	r1, r3
 80018c4:	4840      	ldr	r0, [pc, #256]	; (80019c8 <MX_GPIO_Init+0x308>)
 80018c6:	f001 fb9d 	bl	8003004 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_PyroValve_Cont_2_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 80018ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d0:	2300      	movs	r3, #0
 80018d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 80018d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018dc:	4619      	mov	r1, r3
 80018de:	4836      	ldr	r0, [pc, #216]	; (80019b8 <MX_GPIO_Init+0x2f8>)
 80018e0:	f001 fb90 	bl	8003004 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_PyroValve_Cont_1_Pin IN_EJ_Main_Cont_Pin IN_EJ_Drogue_Cont_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|IN_EJ_Main_Cont_Pin|IN_EJ_Drogue_Cont_Pin;
 80018e4:	f242 4301 	movw	r3, #9217	; 0x2401
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ea:	2300      	movs	r3, #0
 80018ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f6:	4619      	mov	r1, r3
 80018f8:	4832      	ldr	r0, [pc, #200]	; (80019c4 <MX_GPIO_Init+0x304>)
 80018fa:	f001 fb83 	bl	8003004 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_PyroValve_Arming_Pin SX_RST_Pin SX_BUSY_Pin SX_DIO_Pin
                           SX_RF_SW_Pin OUT_VR_PWR_Pin OUT_EJ_Main_Gate_Pin OUT_EJ_Drogue_Gate_Pin
                           OUT_EJ_Arming_Pin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 80018fe:	f645 233e 	movw	r3, #23102	; 0x5a3e
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
                          |SX_RF_SW_Pin|OUT_VR_PWR_Pin|OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin
                          |OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001904:	2301      	movs	r3, #1
 8001906:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190c:	2300      	movs	r3, #0
 800190e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001914:	4619      	mov	r1, r3
 8001916:	482b      	ldr	r0, [pc, #172]	; (80019c4 <MX_GPIO_Init+0x304>)
 8001918:	f001 fb74 	bl	8003004 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAYLOAD_I2C_EN_Pin IN_XTend_Continuity_Pin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 800191c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001922:	2300      	movs	r3, #0
 8001924:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800192a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800192e:	4619      	mov	r1, r3
 8001930:	4820      	ldr	r0, [pc, #128]	; (80019b4 <MX_GPIO_Init+0x2f4>)
 8001932:	f001 fb67 	bl	8003004 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SX_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin;
 8001936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193c:	2301      	movs	r3, #1
 800193e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	2300      	movs	r3, #0
 8001946:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_SX_CS_GPIO_Port, &GPIO_InitStruct);
 8001948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800194c:	4619      	mov	r1, r3
 800194e:	481e      	ldr	r0, [pc, #120]	; (80019c8 <MX_GPIO_Init+0x308>)
 8001950:	f001 fb58 	bl	8003004 <HAL_GPIO_Init>

  /*Configure GPIO pins : XTend_CTS_Pin XTend_RTS_Pin XTend_SLEEP_Pin XTend_RX_LED_Pin
                           XTend_TX_PWR_Pin OUT_FLASH_IO3_Pin OUT_FLASH_WP_Pin OUT_FLASH_CS_Pin
                           OUT_VR_REC_Pin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8001954:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195a:	2301      	movs	r3, #1
 800195c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001962:	2300      	movs	r3, #0
 8001964:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800196a:	4619      	mov	r1, r3
 800196c:	4817      	ldr	r0, [pc, #92]	; (80019cc <MX_GPIO_Init+0x30c>)
 800196e:	f001 fb49 	bl	8003004 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BANDPASS_FILTER_Pin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 8001972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001978:	2300      	movs	r3, #0
 800197a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 8001980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001984:	4619      	mov	r1, r3
 8001986:	4811      	ldr	r0, [pc, #68]	; (80019cc <MX_GPIO_Init+0x30c>)
 8001988:	f001 fb3c 	bl	8003004 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_LPS22HH_DRDY_Pin EXTI_ISM330DCL_INT2_Pin EXTI_LSM6DSR_INT1_Pin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 800198c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001992:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001996:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800199c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a0:	4619      	mov	r1, r3
 80019a2:	4808      	ldr	r0, [pc, #32]	; (80019c4 <MX_GPIO_Init+0x304>)
 80019a4:	f001 fb2e 	bl	8003004 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80019a8:	2200      	movs	r2, #0
 80019aa:	2105      	movs	r1, #5
 80019ac:	2006      	movs	r0, #6
 80019ae:	e00f      	b.n	80019d0 <MX_GPIO_Init+0x310>
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40021000 	.word	0x40021000
 80019b8:	40021400 	.word	0x40021400
 80019bc:	40020800 	.word	0x40020800
 80019c0:	40020000 	.word	0x40020000
 80019c4:	40021800 	.word	0x40021800
 80019c8:	40020400 	.word	0x40020400
 80019cc:	40020c00 	.word	0x40020c00
 80019d0:	f000 ffe8 	bl	80029a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80019d4:	2006      	movs	r0, #6
 80019d6:	f001 f801 	bl	80029dc <HAL_NVIC_EnableIRQ>

}
 80019da:	bf00      	nop
 80019dc:	3738      	adds	r7, #56	; 0x38
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop

080019e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d101      	bne.n	80019fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019f6:	f000 fc67 	bl	80022c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40001000 	.word	0x40001000

08001a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a0c:	b672      	cpsid	i
}
 8001a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a10:	e7fe      	b.n	8001a10 <Error_Handler+0x8>
	...

08001a14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	607b      	str	r3, [r7, #4]
 8001a1e:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <HAL_MspInit+0x54>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	4a11      	ldr	r2, [pc, #68]	; (8001a68 <HAL_MspInit+0x54>)
 8001a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a28:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <HAL_MspInit+0x54>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a32:	607b      	str	r3, [r7, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	603b      	str	r3, [r7, #0]
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <HAL_MspInit+0x54>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <HAL_MspInit+0x54>)
 8001a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a44:	6413      	str	r3, [r2, #64]	; 0x40
 8001a46:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <HAL_MspInit+0x54>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4e:	603b      	str	r3, [r7, #0]
 8001a50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a52:	2200      	movs	r2, #0
 8001a54:	210f      	movs	r1, #15
 8001a56:	f06f 0001 	mvn.w	r0, #1
 8001a5a:	f000 ffa3 	bl	80029a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40023800 	.word	0x40023800

08001a6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	; 0x28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a17      	ldr	r2, [pc, #92]	; (8001ae8 <HAL_ADC_MspInit+0x7c>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d127      	bne.n	8001ade <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	4b16      	ldr	r3, [pc, #88]	; (8001aec <HAL_ADC_MspInit+0x80>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a96:	4a15      	ldr	r2, [pc, #84]	; (8001aec <HAL_ADC_MspInit+0x80>)
 8001a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a9e:	4b13      	ldr	r3, [pc, #76]	; (8001aec <HAL_ADC_MspInit+0x80>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <HAL_ADC_MspInit+0x80>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a0e      	ldr	r2, [pc, #56]	; (8001aec <HAL_ADC_MspInit+0x80>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <HAL_ADC_MspInit+0x80>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 8001ac6:	2340      	movs	r3, #64	; 0x40
 8001ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aca:	2303      	movs	r3, #3
 8001acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4805      	ldr	r0, [pc, #20]	; (8001af0 <HAL_ADC_MspInit+0x84>)
 8001ada:	f001 fa93 	bl	8003004 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ade:	bf00      	nop
 8001ae0:	3728      	adds	r7, #40	; 0x28
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40012000 	.word	0x40012000
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40020000 	.word	0x40020000

08001af4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08e      	sub	sp, #56	; 0x38
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a5c      	ldr	r2, [pc, #368]	; (8001c84 <HAL_I2C_MspInit+0x190>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d12d      	bne.n	8001b72 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	623b      	str	r3, [r7, #32]
 8001b1a:	4b5b      	ldr	r3, [pc, #364]	; (8001c88 <HAL_I2C_MspInit+0x194>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	4a5a      	ldr	r2, [pc, #360]	; (8001c88 <HAL_I2C_MspInit+0x194>)
 8001b20:	f043 0302 	orr.w	r3, r3, #2
 8001b24:	6313      	str	r3, [r2, #48]	; 0x30
 8001b26:	4b58      	ldr	r3, [pc, #352]	; (8001c88 <HAL_I2C_MspInit+0x194>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	623b      	str	r3, [r7, #32]
 8001b30:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b38:	2312      	movs	r3, #18
 8001b3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b40:	2303      	movs	r3, #3
 8001b42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b44:	2304      	movs	r3, #4
 8001b46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	484f      	ldr	r0, [pc, #316]	; (8001c8c <HAL_I2C_MspInit+0x198>)
 8001b50:	f001 fa58 	bl	8003004 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
 8001b58:	4b4b      	ldr	r3, [pc, #300]	; (8001c88 <HAL_I2C_MspInit+0x194>)
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5c:	4a4a      	ldr	r2, [pc, #296]	; (8001c88 <HAL_I2C_MspInit+0x194>)
 8001b5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b62:	6413      	str	r3, [r2, #64]	; 0x40
 8001b64:	4b48      	ldr	r3, [pc, #288]	; (8001c88 <HAL_I2C_MspInit+0x194>)
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b6c:	61fb      	str	r3, [r7, #28]
 8001b6e:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001b70:	e083      	b.n	8001c7a <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a46      	ldr	r2, [pc, #280]	; (8001c90 <HAL_I2C_MspInit+0x19c>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d12d      	bne.n	8001bd8 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61bb      	str	r3, [r7, #24]
 8001b80:	4b41      	ldr	r3, [pc, #260]	; (8001c88 <HAL_I2C_MspInit+0x194>)
 8001b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b84:	4a40      	ldr	r2, [pc, #256]	; (8001c88 <HAL_I2C_MspInit+0x194>)
 8001b86:	f043 0302 	orr.w	r3, r3, #2
 8001b8a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8c:	4b3e      	ldr	r3, [pc, #248]	; (8001c88 <HAL_I2C_MspInit+0x194>)
 8001b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	61bb      	str	r3, [r7, #24]
 8001b96:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b98:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b9e:	2312      	movs	r3, #18
 8001ba0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001baa:	2304      	movs	r3, #4
 8001bac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4835      	ldr	r0, [pc, #212]	; (8001c8c <HAL_I2C_MspInit+0x198>)
 8001bb6:	f001 fa25 	bl	8003004 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	4b32      	ldr	r3, [pc, #200]	; (8001c88 <HAL_I2C_MspInit+0x194>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	4a31      	ldr	r2, [pc, #196]	; (8001c88 <HAL_I2C_MspInit+0x194>)
 8001bc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bca:	4b2f      	ldr	r3, [pc, #188]	; (8001c88 <HAL_I2C_MspInit+0x194>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	697b      	ldr	r3, [r7, #20]
}
 8001bd6:	e050      	b.n	8001c7a <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a2d      	ldr	r2, [pc, #180]	; (8001c94 <HAL_I2C_MspInit+0x1a0>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d14b      	bne.n	8001c7a <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	613b      	str	r3, [r7, #16]
 8001be6:	4b28      	ldr	r3, [pc, #160]	; (8001c88 <HAL_I2C_MspInit+0x194>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a27      	ldr	r2, [pc, #156]	; (8001c88 <HAL_I2C_MspInit+0x194>)
 8001bec:	f043 0304 	orr.w	r3, r3, #4
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b25      	ldr	r3, [pc, #148]	; (8001c88 <HAL_I2C_MspInit+0x194>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f003 0304 	and.w	r3, r3, #4
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	4b21      	ldr	r3, [pc, #132]	; (8001c88 <HAL_I2C_MspInit+0x194>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a20      	ldr	r2, [pc, #128]	; (8001c88 <HAL_I2C_MspInit+0x194>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b1e      	ldr	r3, [pc, #120]	; (8001c88 <HAL_I2C_MspInit+0x194>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c20:	2312      	movs	r3, #18
 8001c22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c24:	2301      	movs	r3, #1
 8001c26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c2c:	2304      	movs	r3, #4
 8001c2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c34:	4619      	mov	r1, r3
 8001c36:	4818      	ldr	r0, [pc, #96]	; (8001c98 <HAL_I2C_MspInit+0x1a4>)
 8001c38:	f001 f9e4 	bl	8003004 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c42:	2312      	movs	r3, #18
 8001c44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c46:	2301      	movs	r3, #1
 8001c48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c4e:	2304      	movs	r3, #4
 8001c50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c56:	4619      	mov	r1, r3
 8001c58:	4810      	ldr	r0, [pc, #64]	; (8001c9c <HAL_I2C_MspInit+0x1a8>)
 8001c5a:	f001 f9d3 	bl	8003004 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <HAL_I2C_MspInit+0x194>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	4a08      	ldr	r2, [pc, #32]	; (8001c88 <HAL_I2C_MspInit+0x194>)
 8001c68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6e:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_I2C_MspInit+0x194>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	68bb      	ldr	r3, [r7, #8]
}
 8001c7a:	bf00      	nop
 8001c7c:	3738      	adds	r7, #56	; 0x38
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40005400 	.word	0x40005400
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	40020400 	.word	0x40020400
 8001c90:	40005800 	.word	0x40005800
 8001c94:	40005c00 	.word	0x40005c00
 8001c98:	40020800 	.word	0x40020800
 8001c9c:	40020000 	.word	0x40020000

08001ca0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08e      	sub	sp, #56	; 0x38
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ca8:	f107 0308 	add.w	r3, r7, #8
 8001cac:	2230      	movs	r2, #48	; 0x30
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f004 fb8d 	bl	80063d0 <memset>
  if(hrtc->Instance==RTC)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a10      	ldr	r2, [pc, #64]	; (8001cfc <HAL_RTC_MspInit+0x5c>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d119      	bne.n	8001cf4 <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001cc0:	2320      	movs	r3, #32
 8001cc2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001cc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cc8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cca:	f107 0308 	add.w	r3, r7, #8
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f002 f9da 	bl	8004088 <HAL_RCCEx_PeriphCLKConfig>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001cda:	f7ff fe95 	bl	8001a08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001cde:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <HAL_RTC_MspInit+0x60>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2105      	movs	r1, #5
 8001ce8:	2029      	movs	r0, #41	; 0x29
 8001cea:	f000 fe5b 	bl	80029a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001cee:	2029      	movs	r0, #41	; 0x29
 8001cf0:	f000 fe74 	bl	80029dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001cf4:	bf00      	nop
 8001cf6:	3738      	adds	r7, #56	; 0x38
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40002800 	.word	0x40002800
 8001d00:	42470e3c 	.word	0x42470e3c

08001d04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08e      	sub	sp, #56	; 0x38
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a4c      	ldr	r2, [pc, #304]	; (8001e54 <HAL_SPI_MspInit+0x150>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d12d      	bne.n	8001d82 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	623b      	str	r3, [r7, #32]
 8001d2a:	4b4b      	ldr	r3, [pc, #300]	; (8001e58 <HAL_SPI_MspInit+0x154>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	4a4a      	ldr	r2, [pc, #296]	; (8001e58 <HAL_SPI_MspInit+0x154>)
 8001d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d34:	6413      	str	r3, [r2, #64]	; 0x40
 8001d36:	4b48      	ldr	r3, [pc, #288]	; (8001e58 <HAL_SPI_MspInit+0x154>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d3e:	623b      	str	r3, [r7, #32]
 8001d40:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]
 8001d46:	4b44      	ldr	r3, [pc, #272]	; (8001e58 <HAL_SPI_MspInit+0x154>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a43      	ldr	r2, [pc, #268]	; (8001e58 <HAL_SPI_MspInit+0x154>)
 8001d4c:	f043 0302 	orr.w	r3, r3, #2
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b41      	ldr	r3, [pc, #260]	; (8001e58 <HAL_SPI_MspInit+0x154>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	61fb      	str	r3, [r7, #28]
 8001d5c:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001d5e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	2302      	movs	r3, #2
 8001d66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d70:	2305      	movs	r3, #5
 8001d72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4838      	ldr	r0, [pc, #224]	; (8001e5c <HAL_SPI_MspInit+0x158>)
 8001d7c:	f001 f942 	bl	8003004 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001d80:	e064      	b.n	8001e4c <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI4)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a36      	ldr	r2, [pc, #216]	; (8001e60 <HAL_SPI_MspInit+0x15c>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d12d      	bne.n	8001de8 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61bb      	str	r3, [r7, #24]
 8001d90:	4b31      	ldr	r3, [pc, #196]	; (8001e58 <HAL_SPI_MspInit+0x154>)
 8001d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d94:	4a30      	ldr	r2, [pc, #192]	; (8001e58 <HAL_SPI_MspInit+0x154>)
 8001d96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d9a:	6453      	str	r3, [r2, #68]	; 0x44
 8001d9c:	4b2e      	ldr	r3, [pc, #184]	; (8001e58 <HAL_SPI_MspInit+0x154>)
 8001d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001da4:	61bb      	str	r3, [r7, #24]
 8001da6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	4b2a      	ldr	r3, [pc, #168]	; (8001e58 <HAL_SPI_MspInit+0x154>)
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db0:	4a29      	ldr	r2, [pc, #164]	; (8001e58 <HAL_SPI_MspInit+0x154>)
 8001db2:	f043 0310 	orr.w	r3, r3, #16
 8001db6:	6313      	str	r3, [r2, #48]	; 0x30
 8001db8:	4b27      	ldr	r3, [pc, #156]	; (8001e58 <HAL_SPI_MspInit+0x154>)
 8001dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbc:	f003 0310 	and.w	r3, r3, #16
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001dc4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001dd6:	2305      	movs	r3, #5
 8001dd8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dde:	4619      	mov	r1, r3
 8001de0:	4820      	ldr	r0, [pc, #128]	; (8001e64 <HAL_SPI_MspInit+0x160>)
 8001de2:	f001 f90f 	bl	8003004 <HAL_GPIO_Init>
}
 8001de6:	e031      	b.n	8001e4c <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI5)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a1e      	ldr	r2, [pc, #120]	; (8001e68 <HAL_SPI_MspInit+0x164>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d12c      	bne.n	8001e4c <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <HAL_SPI_MspInit+0x154>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	4a17      	ldr	r2, [pc, #92]	; (8001e58 <HAL_SPI_MspInit+0x154>)
 8001dfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e00:	6453      	str	r3, [r2, #68]	; 0x44
 8001e02:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <HAL_SPI_MspInit+0x154>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <HAL_SPI_MspInit+0x154>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a10      	ldr	r2, [pc, #64]	; (8001e58 <HAL_SPI_MspInit+0x154>)
 8001e18:	f043 0320 	orr.w	r3, r3, #32
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <HAL_SPI_MspInit+0x154>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0320 	and.w	r3, r3, #32
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001e2a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e30:	2302      	movs	r3, #2
 8001e32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001e3c:	2305      	movs	r3, #5
 8001e3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e44:	4619      	mov	r1, r3
 8001e46:	4809      	ldr	r0, [pc, #36]	; (8001e6c <HAL_SPI_MspInit+0x168>)
 8001e48:	f001 f8dc 	bl	8003004 <HAL_GPIO_Init>
}
 8001e4c:	bf00      	nop
 8001e4e:	3738      	adds	r7, #56	; 0x38
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40003800 	.word	0x40003800
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40020400 	.word	0x40020400
 8001e60:	40013400 	.word	0x40013400
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40015000 	.word	0x40015000
 8001e6c:	40021400 	.word	0x40021400

08001e70 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e80:	d10d      	bne.n	8001e9e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <HAL_TIM_PWM_MspInit+0x3c>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	4a08      	ldr	r2, [pc, #32]	; (8001eac <HAL_TIM_PWM_MspInit+0x3c>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6413      	str	r3, [r2, #64]	; 0x40
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_TIM_PWM_MspInit+0x3c>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e9e:	bf00      	nop
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	40023800 	.word	0x40023800

08001eb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 030c 	add.w	r3, r7, #12
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ed0:	d11d      	bne.n	8001f0e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60bb      	str	r3, [r7, #8]
 8001ed6:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <HAL_TIM_MspPostInit+0x68>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	4a0f      	ldr	r2, [pc, #60]	; (8001f18 <HAL_TIM_MspPostInit+0x68>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee2:	4b0d      	ldr	r3, [pc, #52]	; (8001f18 <HAL_TIM_MspPostInit+0x68>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	60bb      	str	r3, [r7, #8]
 8001eec:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8001eee:	2304      	movs	r3, #4
 8001ef0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efa:	2300      	movs	r3, #0
 8001efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001efe:	2301      	movs	r3, #1
 8001f00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001f02:	f107 030c 	add.w	r3, r7, #12
 8001f06:	4619      	mov	r1, r3
 8001f08:	4804      	ldr	r0, [pc, #16]	; (8001f1c <HAL_TIM_MspPostInit+0x6c>)
 8001f0a:	f001 f87b 	bl	8003004 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f0e:	bf00      	nop
 8001f10:	3720      	adds	r7, #32
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40020000 	.word	0x40020000

08001f20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08e      	sub	sp, #56	; 0x38
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a4b      	ldr	r2, [pc, #300]	; (800206c <HAL_UART_MspInit+0x14c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d12c      	bne.n	8001f9c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	623b      	str	r3, [r7, #32]
 8001f46:	4b4a      	ldr	r3, [pc, #296]	; (8002070 <HAL_UART_MspInit+0x150>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	4a49      	ldr	r2, [pc, #292]	; (8002070 <HAL_UART_MspInit+0x150>)
 8001f4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f50:	6413      	str	r3, [r2, #64]	; 0x40
 8001f52:	4b47      	ldr	r3, [pc, #284]	; (8002070 <HAL_UART_MspInit+0x150>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f5a:	623b      	str	r3, [r7, #32]
 8001f5c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
 8001f62:	4b43      	ldr	r3, [pc, #268]	; (8002070 <HAL_UART_MspInit+0x150>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	4a42      	ldr	r2, [pc, #264]	; (8002070 <HAL_UART_MspInit+0x150>)
 8001f68:	f043 0310 	orr.w	r3, r3, #16
 8001f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6e:	4b40      	ldr	r3, [pc, #256]	; (8002070 <HAL_UART_MspInit+0x150>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	f003 0310 	and.w	r3, r3, #16
 8001f76:	61fb      	str	r3, [r7, #28]
 8001f78:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f86:	2303      	movs	r3, #3
 8001f88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001f8a:	2308      	movs	r3, #8
 8001f8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f92:	4619      	mov	r1, r3
 8001f94:	4837      	ldr	r0, [pc, #220]	; (8002074 <HAL_UART_MspInit+0x154>)
 8001f96:	f001 f835 	bl	8003004 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001f9a:	e063      	b.n	8002064 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a35      	ldr	r2, [pc, #212]	; (8002078 <HAL_UART_MspInit+0x158>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d12d      	bne.n	8002002 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61bb      	str	r3, [r7, #24]
 8001faa:	4b31      	ldr	r3, [pc, #196]	; (8002070 <HAL_UART_MspInit+0x150>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	4a30      	ldr	r2, [pc, #192]	; (8002070 <HAL_UART_MspInit+0x150>)
 8001fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb6:	4b2e      	ldr	r3, [pc, #184]	; (8002070 <HAL_UART_MspInit+0x150>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fbe:	61bb      	str	r3, [r7, #24]
 8001fc0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]
 8001fc6:	4b2a      	ldr	r3, [pc, #168]	; (8002070 <HAL_UART_MspInit+0x150>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a29      	ldr	r2, [pc, #164]	; (8002070 <HAL_UART_MspInit+0x150>)
 8001fcc:	f043 0308 	orr.w	r3, r3, #8
 8001fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd2:	4b27      	ldr	r3, [pc, #156]	; (8002070 <HAL_UART_MspInit+0x150>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8001fde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fec:	2303      	movs	r3, #3
 8001fee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ff0:	2307      	movs	r3, #7
 8001ff2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4820      	ldr	r0, [pc, #128]	; (800207c <HAL_UART_MspInit+0x15c>)
 8001ffc:	f001 f802 	bl	8003004 <HAL_GPIO_Init>
}
 8002000:	e030      	b.n	8002064 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a1e      	ldr	r2, [pc, #120]	; (8002080 <HAL_UART_MspInit+0x160>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d12b      	bne.n	8002064 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 800200c:	2300      	movs	r3, #0
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	4b17      	ldr	r3, [pc, #92]	; (8002070 <HAL_UART_MspInit+0x150>)
 8002012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002014:	4a16      	ldr	r2, [pc, #88]	; (8002070 <HAL_UART_MspInit+0x150>)
 8002016:	f043 0320 	orr.w	r3, r3, #32
 800201a:	6453      	str	r3, [r2, #68]	; 0x44
 800201c:	4b14      	ldr	r3, [pc, #80]	; (8002070 <HAL_UART_MspInit+0x150>)
 800201e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002020:	f003 0320 	and.w	r3, r3, #32
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	4b10      	ldr	r3, [pc, #64]	; (8002070 <HAL_UART_MspInit+0x150>)
 800202e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002030:	4a0f      	ldr	r2, [pc, #60]	; (8002070 <HAL_UART_MspInit+0x150>)
 8002032:	f043 0304 	orr.w	r3, r3, #4
 8002036:	6313      	str	r3, [r2, #48]	; 0x30
 8002038:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <HAL_UART_MspInit+0x150>)
 800203a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8002044:	23c0      	movs	r3, #192	; 0xc0
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002048:	2302      	movs	r3, #2
 800204a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002050:	2303      	movs	r3, #3
 8002052:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002054:	2308      	movs	r3, #8
 8002056:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800205c:	4619      	mov	r1, r3
 800205e:	4809      	ldr	r0, [pc, #36]	; (8002084 <HAL_UART_MspInit+0x164>)
 8002060:	f000 ffd0 	bl	8003004 <HAL_GPIO_Init>
}
 8002064:	bf00      	nop
 8002066:	3738      	adds	r7, #56	; 0x38
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40007c00 	.word	0x40007c00
 8002070:	40023800 	.word	0x40023800
 8002074:	40021000 	.word	0x40021000
 8002078:	40004800 	.word	0x40004800
 800207c:	40020c00 	.word	0x40020c00
 8002080:	40011400 	.word	0x40011400
 8002084:	40020800 	.word	0x40020800

08002088 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08c      	sub	sp, #48	; 0x30
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002098:	2200      	movs	r2, #0
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	2036      	movs	r0, #54	; 0x36
 800209e:	f000 fc81 	bl	80029a4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80020a2:	2036      	movs	r0, #54	; 0x36
 80020a4:	f000 fc9a 	bl	80029dc <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80020a8:	2300      	movs	r3, #0
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	4b1f      	ldr	r3, [pc, #124]	; (800212c <HAL_InitTick+0xa4>)
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	4a1e      	ldr	r2, [pc, #120]	; (800212c <HAL_InitTick+0xa4>)
 80020b2:	f043 0310 	orr.w	r3, r3, #16
 80020b6:	6413      	str	r3, [r2, #64]	; 0x40
 80020b8:	4b1c      	ldr	r3, [pc, #112]	; (800212c <HAL_InitTick+0xa4>)
 80020ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020bc:	f003 0310 	and.w	r3, r3, #16
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020c4:	f107 0210 	add.w	r2, r7, #16
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	4611      	mov	r1, r2
 80020ce:	4618      	mov	r0, r3
 80020d0:	f001 ffa8 	bl	8004024 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80020d4:	f001 ff7e 	bl	8003fd4 <HAL_RCC_GetPCLK1Freq>
 80020d8:	4603      	mov	r3, r0
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e0:	4a13      	ldr	r2, [pc, #76]	; (8002130 <HAL_InitTick+0xa8>)
 80020e2:	fba2 2303 	umull	r2, r3, r2, r3
 80020e6:	0c9b      	lsrs	r3, r3, #18
 80020e8:	3b01      	subs	r3, #1
 80020ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80020ec:	4b11      	ldr	r3, [pc, #68]	; (8002134 <HAL_InitTick+0xac>)
 80020ee:	4a12      	ldr	r2, [pc, #72]	; (8002138 <HAL_InitTick+0xb0>)
 80020f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80020f2:	4b10      	ldr	r3, [pc, #64]	; (8002134 <HAL_InitTick+0xac>)
 80020f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020f8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80020fa:	4a0e      	ldr	r2, [pc, #56]	; (8002134 <HAL_InitTick+0xac>)
 80020fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002100:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <HAL_InitTick+0xac>)
 8002102:	2200      	movs	r2, #0
 8002104:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002106:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_InitTick+0xac>)
 8002108:	2200      	movs	r2, #0
 800210a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800210c:	4809      	ldr	r0, [pc, #36]	; (8002134 <HAL_InitTick+0xac>)
 800210e:	f002 fdfc 	bl	8004d0a <HAL_TIM_Base_Init>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d104      	bne.n	8002122 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002118:	4806      	ldr	r0, [pc, #24]	; (8002134 <HAL_InitTick+0xac>)
 800211a:	f002 fe4f 	bl	8004dbc <HAL_TIM_Base_Start_IT>
 800211e:	4603      	mov	r3, r0
 8002120:	e000      	b.n	8002124 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
}
 8002124:	4618      	mov	r0, r3
 8002126:	3730      	adds	r7, #48	; 0x30
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40023800 	.word	0x40023800
 8002130:	431bde83 	.word	0x431bde83
 8002134:	200008e0 	.word	0x200008e0
 8002138:	40001000 	.word	0x40001000

0800213c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002140:	e7fe      	b.n	8002140 <NMI_Handler+0x4>

08002142 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002146:	e7fe      	b.n	8002146 <HardFault_Handler+0x4>

08002148 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800214c:	e7fe      	b.n	800214c <MemManage_Handler+0x4>

0800214e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800214e:	b480      	push	{r7}
 8002150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002152:	e7fe      	b.n	8002152 <BusFault_Handler+0x4>

08002154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002158:	e7fe      	b.n	8002158 <UsageFault_Handler+0x4>

0800215a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800215a:	b480      	push	{r7}
 800215c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800216c:	2001      	movs	r0, #1
 800216e:	f001 f90f 	bl	8003390 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800217c:	4802      	ldr	r0, [pc, #8]	; (8002188 <RTC_Alarm_IRQHandler+0x10>)
 800217e:	f002 fc6f 	bl	8004a60 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	200007d4 	.word	0x200007d4

0800218c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002190:	4802      	ldr	r0, [pc, #8]	; (800219c <TIM6_DAC_IRQHandler+0x10>)
 8002192:	f002 fed2 	bl	8004f3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	200008e0 	.word	0x200008e0

080021a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021a8:	4a14      	ldr	r2, [pc, #80]	; (80021fc <_sbrk+0x5c>)
 80021aa:	4b15      	ldr	r3, [pc, #84]	; (8002200 <_sbrk+0x60>)
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021b4:	4b13      	ldr	r3, [pc, #76]	; (8002204 <_sbrk+0x64>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d102      	bne.n	80021c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021bc:	4b11      	ldr	r3, [pc, #68]	; (8002204 <_sbrk+0x64>)
 80021be:	4a12      	ldr	r2, [pc, #72]	; (8002208 <_sbrk+0x68>)
 80021c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021c2:	4b10      	ldr	r3, [pc, #64]	; (8002204 <_sbrk+0x64>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4413      	add	r3, r2
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d207      	bcs.n	80021e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021d0:	f004 f8c4 	bl	800635c <__errno>
 80021d4:	4603      	mov	r3, r0
 80021d6:	220c      	movs	r2, #12
 80021d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021da:	f04f 33ff 	mov.w	r3, #4294967295
 80021de:	e009      	b.n	80021f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <_sbrk+0x64>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021e6:	4b07      	ldr	r3, [pc, #28]	; (8002204 <_sbrk+0x64>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4413      	add	r3, r2
 80021ee:	4a05      	ldr	r2, [pc, #20]	; (8002204 <_sbrk+0x64>)
 80021f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021f2:	68fb      	ldr	r3, [r7, #12]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20030000 	.word	0x20030000
 8002200:	00000400 	.word	0x00000400
 8002204:	20000098 	.word	0x20000098
 8002208:	20000960 	.word	0x20000960

0800220c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <SystemInit+0x20>)
 8002212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002216:	4a05      	ldr	r2, [pc, #20]	; (800222c <SystemInit+0x20>)
 8002218:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800221c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002230:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002268 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002234:	480d      	ldr	r0, [pc, #52]	; (800226c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002236:	490e      	ldr	r1, [pc, #56]	; (8002270 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002238:	4a0e      	ldr	r2, [pc, #56]	; (8002274 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800223a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800223c:	e002      	b.n	8002244 <LoopCopyDataInit>

0800223e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800223e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002242:	3304      	adds	r3, #4

08002244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002248:	d3f9      	bcc.n	800223e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800224a:	4a0b      	ldr	r2, [pc, #44]	; (8002278 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800224c:	4c0b      	ldr	r4, [pc, #44]	; (800227c <LoopFillZerobss+0x26>)
  movs r3, #0
 800224e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002250:	e001      	b.n	8002256 <LoopFillZerobss>

08002252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002254:	3204      	adds	r2, #4

08002256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002258:	d3fb      	bcc.n	8002252 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800225a:	f7ff ffd7 	bl	800220c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800225e:	f004 f883 	bl	8006368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002262:	f7fe fe2f 	bl	8000ec4 <main>
  bx  lr    
 8002266:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002268:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800226c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002270:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002274:	08006d74 	.word	0x08006d74
  ldr r2, =_sbss
 8002278:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800227c:	2000095c 	.word	0x2000095c

08002280 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002280:	e7fe      	b.n	8002280 <ADC_IRQHandler>
	...

08002284 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002288:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <HAL_Init+0x40>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a0d      	ldr	r2, [pc, #52]	; (80022c4 <HAL_Init+0x40>)
 800228e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002292:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002294:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <HAL_Init+0x40>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a0a      	ldr	r2, [pc, #40]	; (80022c4 <HAL_Init+0x40>)
 800229a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800229e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022a0:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <HAL_Init+0x40>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a07      	ldr	r2, [pc, #28]	; (80022c4 <HAL_Init+0x40>)
 80022a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022ac:	2003      	movs	r0, #3
 80022ae:	f000 fb6e 	bl	800298e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022b2:	2000      	movs	r0, #0
 80022b4:	f7ff fee8 	bl	8002088 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022b8:	f7ff fbac 	bl	8001a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40023c00 	.word	0x40023c00

080022c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022cc:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <HAL_IncTick+0x20>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	461a      	mov	r2, r3
 80022d2:	4b06      	ldr	r3, [pc, #24]	; (80022ec <HAL_IncTick+0x24>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4413      	add	r3, r2
 80022d8:	4a04      	ldr	r2, [pc, #16]	; (80022ec <HAL_IncTick+0x24>)
 80022da:	6013      	str	r3, [r2, #0]
}
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	20000010 	.word	0x20000010
 80022ec:	20000928 	.word	0x20000928

080022f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  return uwTick;
 80022f4:	4b03      	ldr	r3, [pc, #12]	; (8002304 <HAL_GetTick+0x14>)
 80022f6:	681b      	ldr	r3, [r3, #0]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	20000928 	.word	0x20000928

08002308 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002310:	f7ff ffee 	bl	80022f0 <HAL_GetTick>
 8002314:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002320:	d005      	beq.n	800232e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002322:	4b0a      	ldr	r3, [pc, #40]	; (800234c <HAL_Delay+0x44>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	461a      	mov	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4413      	add	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800232e:	bf00      	nop
 8002330:	f7ff ffde 	bl	80022f0 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	429a      	cmp	r2, r3
 800233e:	d8f7      	bhi.n	8002330 <HAL_Delay+0x28>
  {
  }
}
 8002340:	bf00      	nop
 8002342:	bf00      	nop
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20000010 	.word	0x20000010

08002350 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e033      	b.n	80023ce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	2b00      	cmp	r3, #0
 800236c:	d109      	bne.n	8002382 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff fb7c 	bl	8001a6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f003 0310 	and.w	r3, r3, #16
 800238a:	2b00      	cmp	r3, #0
 800238c:	d118      	bne.n	80023c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002396:	f023 0302 	bic.w	r3, r3, #2
 800239a:	f043 0202 	orr.w	r2, r3, #2
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f94a 	bl	800263c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	f023 0303 	bic.w	r3, r3, #3
 80023b6:	f043 0201 	orr.w	r2, r3, #1
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	641a      	str	r2, [r3, #64]	; 0x40
 80023be:	e001      	b.n	80023c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x1c>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e113      	b.n	800261c <HAL_ADC_ConfigChannel+0x244>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b09      	cmp	r3, #9
 8002402:	d925      	bls.n	8002450 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68d9      	ldr	r1, [r3, #12]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	b29b      	uxth	r3, r3
 8002410:	461a      	mov	r2, r3
 8002412:	4613      	mov	r3, r2
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	4413      	add	r3, r2
 8002418:	3b1e      	subs	r3, #30
 800241a:	2207      	movs	r2, #7
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	43da      	mvns	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	400a      	ands	r2, r1
 8002428:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68d9      	ldr	r1, [r3, #12]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	b29b      	uxth	r3, r3
 800243a:	4618      	mov	r0, r3
 800243c:	4603      	mov	r3, r0
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	4403      	add	r3, r0
 8002442:	3b1e      	subs	r3, #30
 8002444:	409a      	lsls	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	60da      	str	r2, [r3, #12]
 800244e:	e022      	b.n	8002496 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6919      	ldr	r1, [r3, #16]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	b29b      	uxth	r3, r3
 800245c:	461a      	mov	r2, r3
 800245e:	4613      	mov	r3, r2
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	4413      	add	r3, r2
 8002464:	2207      	movs	r2, #7
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43da      	mvns	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	400a      	ands	r2, r1
 8002472:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6919      	ldr	r1, [r3, #16]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	b29b      	uxth	r3, r3
 8002484:	4618      	mov	r0, r3
 8002486:	4603      	mov	r3, r0
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	4403      	add	r3, r0
 800248c:	409a      	lsls	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b06      	cmp	r3, #6
 800249c:	d824      	bhi.n	80024e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	3b05      	subs	r3, #5
 80024b0:	221f      	movs	r2, #31
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43da      	mvns	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	400a      	ands	r2, r1
 80024be:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	4618      	mov	r0, r3
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	3b05      	subs	r3, #5
 80024da:	fa00 f203 	lsl.w	r2, r0, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	635a      	str	r2, [r3, #52]	; 0x34
 80024e6:	e04c      	b.n	8002582 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b0c      	cmp	r3, #12
 80024ee:	d824      	bhi.n	800253a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	3b23      	subs	r3, #35	; 0x23
 8002502:	221f      	movs	r2, #31
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43da      	mvns	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	400a      	ands	r2, r1
 8002510:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	b29b      	uxth	r3, r3
 800251e:	4618      	mov	r0, r3
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	3b23      	subs	r3, #35	; 0x23
 800252c:	fa00 f203 	lsl.w	r2, r0, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	631a      	str	r2, [r3, #48]	; 0x30
 8002538:	e023      	b.n	8002582 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	3b41      	subs	r3, #65	; 0x41
 800254c:	221f      	movs	r2, #31
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43da      	mvns	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	400a      	ands	r2, r1
 800255a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	b29b      	uxth	r3, r3
 8002568:	4618      	mov	r0, r3
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	4613      	mov	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	3b41      	subs	r3, #65	; 0x41
 8002576:	fa00 f203 	lsl.w	r2, r0, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002582:	4b29      	ldr	r3, [pc, #164]	; (8002628 <HAL_ADC_ConfigChannel+0x250>)
 8002584:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a28      	ldr	r2, [pc, #160]	; (800262c <HAL_ADC_ConfigChannel+0x254>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d10f      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x1d8>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b12      	cmp	r3, #18
 8002596:	d10b      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a1d      	ldr	r2, [pc, #116]	; (800262c <HAL_ADC_ConfigChannel+0x254>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d12b      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x23a>
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a1c      	ldr	r2, [pc, #112]	; (8002630 <HAL_ADC_ConfigChannel+0x258>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d003      	beq.n	80025cc <HAL_ADC_ConfigChannel+0x1f4>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b11      	cmp	r3, #17
 80025ca:	d122      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a11      	ldr	r2, [pc, #68]	; (8002630 <HAL_ADC_ConfigChannel+0x258>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d111      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025ee:	4b11      	ldr	r3, [pc, #68]	; (8002634 <HAL_ADC_ConfigChannel+0x25c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a11      	ldr	r2, [pc, #68]	; (8002638 <HAL_ADC_ConfigChannel+0x260>)
 80025f4:	fba2 2303 	umull	r2, r3, r2, r3
 80025f8:	0c9a      	lsrs	r2, r3, #18
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002604:	e002      	b.n	800260c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	3b01      	subs	r3, #1
 800260a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f9      	bne.n	8002606 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	40012300 	.word	0x40012300
 800262c:	40012000 	.word	0x40012000
 8002630:	10000012 	.word	0x10000012
 8002634:	20000008 	.word	0x20000008
 8002638:	431bde83 	.word	0x431bde83

0800263c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002644:	4b79      	ldr	r3, [pc, #484]	; (800282c <ADC_Init+0x1f0>)
 8002646:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	431a      	orrs	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002670:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6859      	ldr	r1, [r3, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	021a      	lsls	r2, r3, #8
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002694:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6859      	ldr	r1, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6899      	ldr	r1, [r3, #8]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ce:	4a58      	ldr	r2, [pc, #352]	; (8002830 <ADC_Init+0x1f4>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d022      	beq.n	800271a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689a      	ldr	r2, [r3, #8]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6899      	ldr	r1, [r3, #8]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002704:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6899      	ldr	r1, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	e00f      	b.n	800273a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002728:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002738:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0202 	bic.w	r2, r2, #2
 8002748:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6899      	ldr	r1, [r3, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	7e1b      	ldrb	r3, [r3, #24]
 8002754:	005a      	lsls	r2, r3, #1
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d01b      	beq.n	80027a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002776:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002786:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6859      	ldr	r1, [r3, #4]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	3b01      	subs	r3, #1
 8002794:	035a      	lsls	r2, r3, #13
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	605a      	str	r2, [r3, #4]
 800279e:	e007      	b.n	80027b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80027be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	051a      	lsls	r2, r3, #20
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6899      	ldr	r1, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027f2:	025a      	lsls	r2, r3, #9
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	430a      	orrs	r2, r1
 80027fa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800280a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6899      	ldr	r1, [r3, #8]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	029a      	lsls	r2, r3, #10
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	609a      	str	r2, [r3, #8]
}
 8002820:	bf00      	nop
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	40012300 	.word	0x40012300
 8002830:	0f000001 	.word	0x0f000001

08002834 <__NVIC_SetPriorityGrouping>:
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002844:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <__NVIC_SetPriorityGrouping+0x44>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002850:	4013      	ands	r3, r2
 8002852:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800285c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002866:	4a04      	ldr	r2, [pc, #16]	; (8002878 <__NVIC_SetPriorityGrouping+0x44>)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	60d3      	str	r3, [r2, #12]
}
 800286c:	bf00      	nop
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	e000ed00 	.word	0xe000ed00

0800287c <__NVIC_GetPriorityGrouping>:
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002880:	4b04      	ldr	r3, [pc, #16]	; (8002894 <__NVIC_GetPriorityGrouping+0x18>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	0a1b      	lsrs	r3, r3, #8
 8002886:	f003 0307 	and.w	r3, r3, #7
}
 800288a:	4618      	mov	r0, r3
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	e000ed00 	.word	0xe000ed00

08002898 <__NVIC_EnableIRQ>:
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	db0b      	blt.n	80028c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	f003 021f 	and.w	r2, r3, #31
 80028b0:	4907      	ldr	r1, [pc, #28]	; (80028d0 <__NVIC_EnableIRQ+0x38>)
 80028b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	2001      	movs	r0, #1
 80028ba:	fa00 f202 	lsl.w	r2, r0, r2
 80028be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	e000e100 	.word	0xe000e100

080028d4 <__NVIC_SetPriority>:
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	6039      	str	r1, [r7, #0]
 80028de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	db0a      	blt.n	80028fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	490c      	ldr	r1, [pc, #48]	; (8002920 <__NVIC_SetPriority+0x4c>)
 80028ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f2:	0112      	lsls	r2, r2, #4
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	440b      	add	r3, r1
 80028f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80028fc:	e00a      	b.n	8002914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	b2da      	uxtb	r2, r3
 8002902:	4908      	ldr	r1, [pc, #32]	; (8002924 <__NVIC_SetPriority+0x50>)
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	3b04      	subs	r3, #4
 800290c:	0112      	lsls	r2, r2, #4
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	440b      	add	r3, r1
 8002912:	761a      	strb	r2, [r3, #24]
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	e000e100 	.word	0xe000e100
 8002924:	e000ed00 	.word	0xe000ed00

08002928 <NVIC_EncodePriority>:
{
 8002928:	b480      	push	{r7}
 800292a:	b089      	sub	sp, #36	; 0x24
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f1c3 0307 	rsb	r3, r3, #7
 8002942:	2b04      	cmp	r3, #4
 8002944:	bf28      	it	cs
 8002946:	2304      	movcs	r3, #4
 8002948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	3304      	adds	r3, #4
 800294e:	2b06      	cmp	r3, #6
 8002950:	d902      	bls.n	8002958 <NVIC_EncodePriority+0x30>
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	3b03      	subs	r3, #3
 8002956:	e000      	b.n	800295a <NVIC_EncodePriority+0x32>
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800295c:	f04f 32ff 	mov.w	r2, #4294967295
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43da      	mvns	r2, r3
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	401a      	ands	r2, r3
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002970:	f04f 31ff 	mov.w	r1, #4294967295
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	fa01 f303 	lsl.w	r3, r1, r3
 800297a:	43d9      	mvns	r1, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002980:	4313      	orrs	r3, r2
}
 8002982:	4618      	mov	r0, r3
 8002984:	3724      	adds	r7, #36	; 0x24
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7ff ff4c 	bl	8002834 <__NVIC_SetPriorityGrouping>
}
 800299c:	bf00      	nop
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
 80029b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029b6:	f7ff ff61 	bl	800287c <__NVIC_GetPriorityGrouping>
 80029ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	68b9      	ldr	r1, [r7, #8]
 80029c0:	6978      	ldr	r0, [r7, #20]
 80029c2:	f7ff ffb1 	bl	8002928 <NVIC_EncodePriority>
 80029c6:	4602      	mov	r2, r0
 80029c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029cc:	4611      	mov	r1, r2
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff ff80 	bl	80028d4 <__NVIC_SetPriority>
}
 80029d4:	bf00      	nop
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff ff54 	bl	8002898 <__NVIC_EnableIRQ>
}
 80029f0:	bf00      	nop
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002a0a:	4b23      	ldr	r3, [pc, #140]	; (8002a98 <HAL_FLASH_Program+0xa0>)
 8002a0c:	7e1b      	ldrb	r3, [r3, #24]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d101      	bne.n	8002a16 <HAL_FLASH_Program+0x1e>
 8002a12:	2302      	movs	r3, #2
 8002a14:	e03b      	b.n	8002a8e <HAL_FLASH_Program+0x96>
 8002a16:	4b20      	ldr	r3, [pc, #128]	; (8002a98 <HAL_FLASH_Program+0xa0>)
 8002a18:	2201      	movs	r2, #1
 8002a1a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a20:	f000 f870 	bl	8002b04 <FLASH_WaitForLastOperation>
 8002a24:	4603      	mov	r3, r0
 8002a26:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002a28:	7dfb      	ldrb	r3, [r7, #23]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d12b      	bne.n	8002a86 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d105      	bne.n	8002a40 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002a34:	783b      	ldrb	r3, [r7, #0]
 8002a36:	4619      	mov	r1, r3
 8002a38:	68b8      	ldr	r0, [r7, #8]
 8002a3a:	f000 f91b 	bl	8002c74 <FLASH_Program_Byte>
 8002a3e:	e016      	b.n	8002a6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d105      	bne.n	8002a52 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002a46:	883b      	ldrh	r3, [r7, #0]
 8002a48:	4619      	mov	r1, r3
 8002a4a:	68b8      	ldr	r0, [r7, #8]
 8002a4c:	f000 f8ee 	bl	8002c2c <FLASH_Program_HalfWord>
 8002a50:	e00d      	b.n	8002a6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d105      	bne.n	8002a64 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	68b8      	ldr	r0, [r7, #8]
 8002a5e:	f000 f8c3 	bl	8002be8 <FLASH_Program_Word>
 8002a62:	e004      	b.n	8002a6e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002a64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a68:	68b8      	ldr	r0, [r7, #8]
 8002a6a:	f000 f88b 	bl	8002b84 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a6e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a72:	f000 f847 	bl	8002b04 <FLASH_WaitForLastOperation>
 8002a76:	4603      	mov	r3, r0
 8002a78:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8002a7a:	4b08      	ldr	r3, [pc, #32]	; (8002a9c <HAL_FLASH_Program+0xa4>)
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	4a07      	ldr	r2, [pc, #28]	; (8002a9c <HAL_FLASH_Program+0xa4>)
 8002a80:	f023 0301 	bic.w	r3, r3, #1
 8002a84:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002a86:	4b04      	ldr	r3, [pc, #16]	; (8002a98 <HAL_FLASH_Program+0xa0>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	2000092c 	.word	0x2000092c
 8002a9c:	40023c00 	.word	0x40023c00

08002aa0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_FLASH_Unlock+0x38>)
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	da0b      	bge.n	8002aca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002ab2:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <HAL_FLASH_Unlock+0x38>)
 8002ab4:	4a09      	ldr	r2, [pc, #36]	; (8002adc <HAL_FLASH_Unlock+0x3c>)
 8002ab6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002ab8:	4b07      	ldr	r3, [pc, #28]	; (8002ad8 <HAL_FLASH_Unlock+0x38>)
 8002aba:	4a09      	ldr	r2, [pc, #36]	; (8002ae0 <HAL_FLASH_Unlock+0x40>)
 8002abc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002abe:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <HAL_FLASH_Unlock+0x38>)
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	da01      	bge.n	8002aca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002aca:	79fb      	ldrb	r3, [r7, #7]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	40023c00 	.word	0x40023c00
 8002adc:	45670123 	.word	0x45670123
 8002ae0:	cdef89ab 	.word	0xcdef89ab

08002ae4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002ae8:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <HAL_FLASH_Lock+0x1c>)
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	4a04      	ldr	r2, [pc, #16]	; (8002b00 <HAL_FLASH_Lock+0x1c>)
 8002aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002af2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	40023c00 	.word	0x40023c00

08002b04 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002b10:	4b1a      	ldr	r3, [pc, #104]	; (8002b7c <FLASH_WaitForLastOperation+0x78>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002b16:	f7ff fbeb 	bl	80022f0 <HAL_GetTick>
 8002b1a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002b1c:	e010      	b.n	8002b40 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b24:	d00c      	beq.n	8002b40 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d007      	beq.n	8002b3c <FLASH_WaitForLastOperation+0x38>
 8002b2c:	f7ff fbe0 	bl	80022f0 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d201      	bcs.n	8002b40 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e019      	b.n	8002b74 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002b40:	4b0f      	ldr	r3, [pc, #60]	; (8002b80 <FLASH_WaitForLastOperation+0x7c>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1e8      	bne.n	8002b1e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <FLASH_WaitForLastOperation+0x7c>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d002      	beq.n	8002b5e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002b58:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <FLASH_WaitForLastOperation+0x7c>)
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002b5e:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <FLASH_WaitForLastOperation+0x7c>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002b6a:	f000 f8a5 	bl	8002cb8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
  
}  
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	2000092c 	.word	0x2000092c
 8002b80:	40023c00 	.word	0x40023c00

08002b84 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002b90:	4b14      	ldr	r3, [pc, #80]	; (8002be4 <FLASH_Program_DoubleWord+0x60>)
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	4a13      	ldr	r2, [pc, #76]	; (8002be4 <FLASH_Program_DoubleWord+0x60>)
 8002b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002b9c:	4b11      	ldr	r3, [pc, #68]	; (8002be4 <FLASH_Program_DoubleWord+0x60>)
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	4a10      	ldr	r2, [pc, #64]	; (8002be4 <FLASH_Program_DoubleWord+0x60>)
 8002ba2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002ba6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002ba8:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <FLASH_Program_DoubleWord+0x60>)
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	4a0d      	ldr	r2, [pc, #52]	; (8002be4 <FLASH_Program_DoubleWord+0x60>)
 8002bae:	f043 0301 	orr.w	r3, r3, #1
 8002bb2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002bba:	f3bf 8f6f 	isb	sy
}
 8002bbe:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002bc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002bc4:	f04f 0200 	mov.w	r2, #0
 8002bc8:	f04f 0300 	mov.w	r3, #0
 8002bcc:	000a      	movs	r2, r1
 8002bce:	2300      	movs	r3, #0
 8002bd0:	68f9      	ldr	r1, [r7, #12]
 8002bd2:	3104      	adds	r1, #4
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	600b      	str	r3, [r1, #0]
}
 8002bd8:	bf00      	nop
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	40023c00 	.word	0x40023c00

08002be8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002bf2:	4b0d      	ldr	r3, [pc, #52]	; (8002c28 <FLASH_Program_Word+0x40>)
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	4a0c      	ldr	r2, [pc, #48]	; (8002c28 <FLASH_Program_Word+0x40>)
 8002bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bfc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002bfe:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <FLASH_Program_Word+0x40>)
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	4a09      	ldr	r2, [pc, #36]	; (8002c28 <FLASH_Program_Word+0x40>)
 8002c04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c08:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002c0a:	4b07      	ldr	r3, [pc, #28]	; (8002c28 <FLASH_Program_Word+0x40>)
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	4a06      	ldr	r2, [pc, #24]	; (8002c28 <FLASH_Program_Word+0x40>)
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	601a      	str	r2, [r3, #0]
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	40023c00 	.word	0x40023c00

08002c2c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	460b      	mov	r3, r1
 8002c36:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002c38:	4b0d      	ldr	r3, [pc, #52]	; (8002c70 <FLASH_Program_HalfWord+0x44>)
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	4a0c      	ldr	r2, [pc, #48]	; (8002c70 <FLASH_Program_HalfWord+0x44>)
 8002c3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c42:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002c44:	4b0a      	ldr	r3, [pc, #40]	; (8002c70 <FLASH_Program_HalfWord+0x44>)
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	4a09      	ldr	r2, [pc, #36]	; (8002c70 <FLASH_Program_HalfWord+0x44>)
 8002c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002c50:	4b07      	ldr	r3, [pc, #28]	; (8002c70 <FLASH_Program_HalfWord+0x44>)
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	4a06      	ldr	r2, [pc, #24]	; (8002c70 <FLASH_Program_HalfWord+0x44>)
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	887a      	ldrh	r2, [r7, #2]
 8002c60:	801a      	strh	r2, [r3, #0]
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40023c00 	.word	0x40023c00

08002c74 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002c80:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <FLASH_Program_Byte+0x40>)
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	4a0b      	ldr	r2, [pc, #44]	; (8002cb4 <FLASH_Program_Byte+0x40>)
 8002c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002c8c:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <FLASH_Program_Byte+0x40>)
 8002c8e:	4a09      	ldr	r2, [pc, #36]	; (8002cb4 <FLASH_Program_Byte+0x40>)
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002c94:	4b07      	ldr	r3, [pc, #28]	; (8002cb4 <FLASH_Program_Byte+0x40>)
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	4a06      	ldr	r2, [pc, #24]	; (8002cb4 <FLASH_Program_Byte+0x40>)
 8002c9a:	f043 0301 	orr.w	r3, r3, #1
 8002c9e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	78fa      	ldrb	r2, [r7, #3]
 8002ca4:	701a      	strb	r2, [r3, #0]
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	40023c00 	.word	0x40023c00

08002cb8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002cbc:	4b2f      	ldr	r3, [pc, #188]	; (8002d7c <FLASH_SetErrorCode+0xc4>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f003 0310 	and.w	r3, r3, #16
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d008      	beq.n	8002cda <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002cc8:	4b2d      	ldr	r3, [pc, #180]	; (8002d80 <FLASH_SetErrorCode+0xc8>)
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	f043 0310 	orr.w	r3, r3, #16
 8002cd0:	4a2b      	ldr	r2, [pc, #172]	; (8002d80 <FLASH_SetErrorCode+0xc8>)
 8002cd2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002cd4:	4b29      	ldr	r3, [pc, #164]	; (8002d7c <FLASH_SetErrorCode+0xc4>)
 8002cd6:	2210      	movs	r2, #16
 8002cd8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002cda:	4b28      	ldr	r3, [pc, #160]	; (8002d7c <FLASH_SetErrorCode+0xc4>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	f003 0320 	and.w	r3, r3, #32
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d008      	beq.n	8002cf8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002ce6:	4b26      	ldr	r3, [pc, #152]	; (8002d80 <FLASH_SetErrorCode+0xc8>)
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	f043 0308 	orr.w	r3, r3, #8
 8002cee:	4a24      	ldr	r2, [pc, #144]	; (8002d80 <FLASH_SetErrorCode+0xc8>)
 8002cf0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002cf2:	4b22      	ldr	r3, [pc, #136]	; (8002d7c <FLASH_SetErrorCode+0xc4>)
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002cf8:	4b20      	ldr	r3, [pc, #128]	; (8002d7c <FLASH_SetErrorCode+0xc4>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d008      	beq.n	8002d16 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002d04:	4b1e      	ldr	r3, [pc, #120]	; (8002d80 <FLASH_SetErrorCode+0xc8>)
 8002d06:	69db      	ldr	r3, [r3, #28]
 8002d08:	f043 0304 	orr.w	r3, r3, #4
 8002d0c:	4a1c      	ldr	r2, [pc, #112]	; (8002d80 <FLASH_SetErrorCode+0xc8>)
 8002d0e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002d10:	4b1a      	ldr	r3, [pc, #104]	; (8002d7c <FLASH_SetErrorCode+0xc4>)
 8002d12:	2240      	movs	r2, #64	; 0x40
 8002d14:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002d16:	4b19      	ldr	r3, [pc, #100]	; (8002d7c <FLASH_SetErrorCode+0xc4>)
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d008      	beq.n	8002d34 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002d22:	4b17      	ldr	r3, [pc, #92]	; (8002d80 <FLASH_SetErrorCode+0xc8>)
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	f043 0302 	orr.w	r3, r3, #2
 8002d2a:	4a15      	ldr	r2, [pc, #84]	; (8002d80 <FLASH_SetErrorCode+0xc8>)
 8002d2c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002d2e:	4b13      	ldr	r3, [pc, #76]	; (8002d7c <FLASH_SetErrorCode+0xc4>)
 8002d30:	2280      	movs	r2, #128	; 0x80
 8002d32:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002d34:	4b11      	ldr	r3, [pc, #68]	; (8002d7c <FLASH_SetErrorCode+0xc4>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d009      	beq.n	8002d54 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002d40:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <FLASH_SetErrorCode+0xc8>)
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	f043 0301 	orr.w	r3, r3, #1
 8002d48:	4a0d      	ldr	r2, [pc, #52]	; (8002d80 <FLASH_SetErrorCode+0xc8>)
 8002d4a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <FLASH_SetErrorCode+0xc4>)
 8002d4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d52:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002d54:	4b09      	ldr	r3, [pc, #36]	; (8002d7c <FLASH_SetErrorCode+0xc4>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d008      	beq.n	8002d72 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002d60:	4b07      	ldr	r3, [pc, #28]	; (8002d80 <FLASH_SetErrorCode+0xc8>)
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	f043 0320 	orr.w	r3, r3, #32
 8002d68:	4a05      	ldr	r2, [pc, #20]	; (8002d80 <FLASH_SetErrorCode+0xc8>)
 8002d6a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002d6c:	4b03      	ldr	r3, [pc, #12]	; (8002d7c <FLASH_SetErrorCode+0xc4>)
 8002d6e:	2202      	movs	r2, #2
 8002d70:	60da      	str	r2, [r3, #12]
  }
}
 8002d72:	bf00      	nop
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	40023c00 	.word	0x40023c00
 8002d80:	2000092c 	.word	0x2000092c

08002d84 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002d92:	2300      	movs	r3, #0
 8002d94:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002d96:	4b32      	ldr	r3, [pc, #200]	; (8002e60 <HAL_FLASHEx_Erase+0xdc>)
 8002d98:	7e1b      	ldrb	r3, [r3, #24]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <HAL_FLASHEx_Erase+0x1e>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e05a      	b.n	8002e58 <HAL_FLASHEx_Erase+0xd4>
 8002da2:	4b2f      	ldr	r3, [pc, #188]	; (8002e60 <HAL_FLASHEx_Erase+0xdc>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002da8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002dac:	f7ff feaa 	bl	8002b04 <FLASH_WaitForLastOperation>
 8002db0:	4603      	mov	r3, r0
 8002db2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d14a      	bne.n	8002e50 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d117      	bne.n	8002dfa <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	f000 f846 	bl	8002e68 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ddc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002de0:	f7ff fe90 	bl	8002b04 <FLASH_WaitForLastOperation>
 8002de4:	4603      	mov	r3, r0
 8002de6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002de8:	4b1e      	ldr	r3, [pc, #120]	; (8002e64 <HAL_FLASHEx_Erase+0xe0>)
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	4a1d      	ldr	r2, [pc, #116]	; (8002e64 <HAL_FLASHEx_Erase+0xe0>)
 8002dee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002df2:	f023 0304 	bic.w	r3, r3, #4
 8002df6:	6113      	str	r3, [r2, #16]
 8002df8:	e028      	b.n	8002e4c <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	60bb      	str	r3, [r7, #8]
 8002e00:	e01c      	b.n	8002e3c <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	4619      	mov	r1, r3
 8002e0a:	68b8      	ldr	r0, [r7, #8]
 8002e0c:	f000 f866 	bl	8002edc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e10:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002e14:	f7ff fe76 	bl	8002b04 <FLASH_WaitForLastOperation>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002e1c:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <HAL_FLASHEx_Erase+0xe0>)
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	4a10      	ldr	r2, [pc, #64]	; (8002e64 <HAL_FLASHEx_Erase+0xe0>)
 8002e22:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002e26:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	601a      	str	r2, [r3, #0]
          break;
 8002e34:	e00a      	b.n	8002e4c <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	60bb      	str	r3, [r7, #8]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	4413      	add	r3, r2
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d3da      	bcc.n	8002e02 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002e4c:	f000 f894 	bl	8002f78 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002e50:	4b03      	ldr	r3, [pc, #12]	; (8002e60 <HAL_FLASHEx_Erase+0xdc>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	761a      	strb	r2, [r3, #24]

  return status;
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	2000092c 	.word	0x2000092c
 8002e64:	40023c00 	.word	0x40023c00

08002e68 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	4603      	mov	r3, r0
 8002e70:	6039      	str	r1, [r7, #0]
 8002e72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002e74:	4b18      	ldr	r3, [pc, #96]	; (8002ed8 <FLASH_MassErase+0x70>)
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	4a17      	ldr	r2, [pc, #92]	; (8002ed8 <FLASH_MassErase+0x70>)
 8002e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e7e:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	2b03      	cmp	r3, #3
 8002e84:	d108      	bne.n	8002e98 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8002e86:	4b14      	ldr	r3, [pc, #80]	; (8002ed8 <FLASH_MassErase+0x70>)
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	4a13      	ldr	r2, [pc, #76]	; (8002ed8 <FLASH_MassErase+0x70>)
 8002e8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e90:	f043 0304 	orr.w	r3, r3, #4
 8002e94:	6113      	str	r3, [r2, #16]
 8002e96:	e00f      	b.n	8002eb8 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d106      	bne.n	8002eac <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8002e9e:	4b0e      	ldr	r3, [pc, #56]	; (8002ed8 <FLASH_MassErase+0x70>)
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	4a0d      	ldr	r2, [pc, #52]	; (8002ed8 <FLASH_MassErase+0x70>)
 8002ea4:	f043 0304 	orr.w	r3, r3, #4
 8002ea8:	6113      	str	r3, [r2, #16]
 8002eaa:	e005      	b.n	8002eb8 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8002eac:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <FLASH_MassErase+0x70>)
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	4a09      	ldr	r2, [pc, #36]	; (8002ed8 <FLASH_MassErase+0x70>)
 8002eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eb6:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002eb8:	4b07      	ldr	r3, [pc, #28]	; (8002ed8 <FLASH_MassErase+0x70>)
 8002eba:	691a      	ldr	r2, [r3, #16]
 8002ebc:	79fb      	ldrb	r3, [r7, #7]
 8002ebe:	021b      	lsls	r3, r3, #8
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	4a05      	ldr	r2, [pc, #20]	; (8002ed8 <FLASH_MassErase+0x70>)
 8002ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec8:	6113      	str	r3, [r2, #16]
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	40023c00 	.word	0x40023c00

08002edc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002eec:	78fb      	ldrb	r3, [r7, #3]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d102      	bne.n	8002ef8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	e010      	b.n	8002f1a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002ef8:	78fb      	ldrb	r3, [r7, #3]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d103      	bne.n	8002f06 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002efe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	e009      	b.n	8002f1a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002f06:	78fb      	ldrb	r3, [r7, #3]
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d103      	bne.n	8002f14 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002f0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	e002      	b.n	8002f1a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002f14:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f18:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b0b      	cmp	r3, #11
 8002f1e:	d902      	bls.n	8002f26 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3304      	adds	r3, #4
 8002f24:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002f26:	4b13      	ldr	r3, [pc, #76]	; (8002f74 <FLASH_Erase_Sector+0x98>)
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	4a12      	ldr	r2, [pc, #72]	; (8002f74 <FLASH_Erase_Sector+0x98>)
 8002f2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f30:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002f32:	4b10      	ldr	r3, [pc, #64]	; (8002f74 <FLASH_Erase_Sector+0x98>)
 8002f34:	691a      	ldr	r2, [r3, #16]
 8002f36:	490f      	ldr	r1, [pc, #60]	; (8002f74 <FLASH_Erase_Sector+0x98>)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002f3e:	4b0d      	ldr	r3, [pc, #52]	; (8002f74 <FLASH_Erase_Sector+0x98>)
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	4a0c      	ldr	r2, [pc, #48]	; (8002f74 <FLASH_Erase_Sector+0x98>)
 8002f44:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002f48:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002f4a:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <FLASH_Erase_Sector+0x98>)
 8002f4c:	691a      	ldr	r2, [r3, #16]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	4313      	orrs	r3, r2
 8002f54:	4a07      	ldr	r2, [pc, #28]	; (8002f74 <FLASH_Erase_Sector+0x98>)
 8002f56:	f043 0302 	orr.w	r3, r3, #2
 8002f5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002f5c:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <FLASH_Erase_Sector+0x98>)
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	4a04      	ldr	r2, [pc, #16]	; (8002f74 <FLASH_Erase_Sector+0x98>)
 8002f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f66:	6113      	str	r3, [r2, #16]
}
 8002f68:	bf00      	nop
 8002f6a:	3714      	adds	r7, #20
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	40023c00 	.word	0x40023c00

08002f78 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002f7c:	4b20      	ldr	r3, [pc, #128]	; (8003000 <FLASH_FlushCaches+0x88>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d017      	beq.n	8002fb8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002f88:	4b1d      	ldr	r3, [pc, #116]	; (8003000 <FLASH_FlushCaches+0x88>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a1c      	ldr	r2, [pc, #112]	; (8003000 <FLASH_FlushCaches+0x88>)
 8002f8e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f92:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002f94:	4b1a      	ldr	r3, [pc, #104]	; (8003000 <FLASH_FlushCaches+0x88>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a19      	ldr	r2, [pc, #100]	; (8003000 <FLASH_FlushCaches+0x88>)
 8002f9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	4b17      	ldr	r3, [pc, #92]	; (8003000 <FLASH_FlushCaches+0x88>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a16      	ldr	r2, [pc, #88]	; (8003000 <FLASH_FlushCaches+0x88>)
 8002fa6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002faa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fac:	4b14      	ldr	r3, [pc, #80]	; (8003000 <FLASH_FlushCaches+0x88>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a13      	ldr	r2, [pc, #76]	; (8003000 <FLASH_FlushCaches+0x88>)
 8002fb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fb6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002fb8:	4b11      	ldr	r3, [pc, #68]	; (8003000 <FLASH_FlushCaches+0x88>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d017      	beq.n	8002ff4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002fc4:	4b0e      	ldr	r3, [pc, #56]	; (8003000 <FLASH_FlushCaches+0x88>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a0d      	ldr	r2, [pc, #52]	; (8003000 <FLASH_FlushCaches+0x88>)
 8002fca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fce:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002fd0:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <FLASH_FlushCaches+0x88>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a0a      	ldr	r2, [pc, #40]	; (8003000 <FLASH_FlushCaches+0x88>)
 8002fd6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fda:	6013      	str	r3, [r2, #0]
 8002fdc:	4b08      	ldr	r3, [pc, #32]	; (8003000 <FLASH_FlushCaches+0x88>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a07      	ldr	r2, [pc, #28]	; (8003000 <FLASH_FlushCaches+0x88>)
 8002fe2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fe6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fe8:	4b05      	ldr	r3, [pc, #20]	; (8003000 <FLASH_FlushCaches+0x88>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a04      	ldr	r2, [pc, #16]	; (8003000 <FLASH_FlushCaches+0x88>)
 8002fee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ff2:	6013      	str	r3, [r2, #0]
  }
}
 8002ff4:	bf00      	nop
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40023c00 	.word	0x40023c00

08003004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003004:	b480      	push	{r7}
 8003006:	b089      	sub	sp, #36	; 0x24
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800300e:	2300      	movs	r3, #0
 8003010:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003012:	2300      	movs	r3, #0
 8003014:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003016:	2300      	movs	r3, #0
 8003018:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800301a:	2300      	movs	r3, #0
 800301c:	61fb      	str	r3, [r7, #28]
 800301e:	e177      	b.n	8003310 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003020:	2201      	movs	r2, #1
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	4013      	ands	r3, r2
 8003032:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	429a      	cmp	r2, r3
 800303a:	f040 8166 	bne.w	800330a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	2b01      	cmp	r3, #1
 8003048:	d005      	beq.n	8003056 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003052:	2b02      	cmp	r3, #2
 8003054:	d130      	bne.n	80030b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	2203      	movs	r2, #3
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	43db      	mvns	r3, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4013      	ands	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4313      	orrs	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800308c:	2201      	movs	r2, #1
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	43db      	mvns	r3, r3
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4013      	ands	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	091b      	lsrs	r3, r3, #4
 80030a2:	f003 0201 	and.w	r2, r3, #1
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f003 0303 	and.w	r3, r3, #3
 80030c0:	2b03      	cmp	r3, #3
 80030c2:	d017      	beq.n	80030f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	2203      	movs	r2, #3
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	43db      	mvns	r3, r3
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	4013      	ands	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f003 0303 	and.w	r3, r3, #3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d123      	bne.n	8003148 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	08da      	lsrs	r2, r3, #3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3208      	adds	r2, #8
 8003108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800310c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	220f      	movs	r2, #15
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43db      	mvns	r3, r3
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	4013      	ands	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	691a      	ldr	r2, [r3, #16]
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4313      	orrs	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	08da      	lsrs	r2, r3, #3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	3208      	adds	r2, #8
 8003142:	69b9      	ldr	r1, [r7, #24]
 8003144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	2203      	movs	r2, #3
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	43db      	mvns	r3, r3
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	4013      	ands	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f003 0203 	and.w	r2, r3, #3
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	4313      	orrs	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 80c0 	beq.w	800330a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800318a:	2300      	movs	r3, #0
 800318c:	60fb      	str	r3, [r7, #12]
 800318e:	4b66      	ldr	r3, [pc, #408]	; (8003328 <HAL_GPIO_Init+0x324>)
 8003190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003192:	4a65      	ldr	r2, [pc, #404]	; (8003328 <HAL_GPIO_Init+0x324>)
 8003194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003198:	6453      	str	r3, [r2, #68]	; 0x44
 800319a:	4b63      	ldr	r3, [pc, #396]	; (8003328 <HAL_GPIO_Init+0x324>)
 800319c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031a6:	4a61      	ldr	r2, [pc, #388]	; (800332c <HAL_GPIO_Init+0x328>)
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	089b      	lsrs	r3, r3, #2
 80031ac:	3302      	adds	r3, #2
 80031ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	220f      	movs	r2, #15
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43db      	mvns	r3, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4013      	ands	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a58      	ldr	r2, [pc, #352]	; (8003330 <HAL_GPIO_Init+0x32c>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d037      	beq.n	8003242 <HAL_GPIO_Init+0x23e>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a57      	ldr	r2, [pc, #348]	; (8003334 <HAL_GPIO_Init+0x330>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d031      	beq.n	800323e <HAL_GPIO_Init+0x23a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a56      	ldr	r2, [pc, #344]	; (8003338 <HAL_GPIO_Init+0x334>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d02b      	beq.n	800323a <HAL_GPIO_Init+0x236>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a55      	ldr	r2, [pc, #340]	; (800333c <HAL_GPIO_Init+0x338>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d025      	beq.n	8003236 <HAL_GPIO_Init+0x232>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a54      	ldr	r2, [pc, #336]	; (8003340 <HAL_GPIO_Init+0x33c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d01f      	beq.n	8003232 <HAL_GPIO_Init+0x22e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a53      	ldr	r2, [pc, #332]	; (8003344 <HAL_GPIO_Init+0x340>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d019      	beq.n	800322e <HAL_GPIO_Init+0x22a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a52      	ldr	r2, [pc, #328]	; (8003348 <HAL_GPIO_Init+0x344>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d013      	beq.n	800322a <HAL_GPIO_Init+0x226>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a51      	ldr	r2, [pc, #324]	; (800334c <HAL_GPIO_Init+0x348>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d00d      	beq.n	8003226 <HAL_GPIO_Init+0x222>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a50      	ldr	r2, [pc, #320]	; (8003350 <HAL_GPIO_Init+0x34c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d007      	beq.n	8003222 <HAL_GPIO_Init+0x21e>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a4f      	ldr	r2, [pc, #316]	; (8003354 <HAL_GPIO_Init+0x350>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d101      	bne.n	800321e <HAL_GPIO_Init+0x21a>
 800321a:	2309      	movs	r3, #9
 800321c:	e012      	b.n	8003244 <HAL_GPIO_Init+0x240>
 800321e:	230a      	movs	r3, #10
 8003220:	e010      	b.n	8003244 <HAL_GPIO_Init+0x240>
 8003222:	2308      	movs	r3, #8
 8003224:	e00e      	b.n	8003244 <HAL_GPIO_Init+0x240>
 8003226:	2307      	movs	r3, #7
 8003228:	e00c      	b.n	8003244 <HAL_GPIO_Init+0x240>
 800322a:	2306      	movs	r3, #6
 800322c:	e00a      	b.n	8003244 <HAL_GPIO_Init+0x240>
 800322e:	2305      	movs	r3, #5
 8003230:	e008      	b.n	8003244 <HAL_GPIO_Init+0x240>
 8003232:	2304      	movs	r3, #4
 8003234:	e006      	b.n	8003244 <HAL_GPIO_Init+0x240>
 8003236:	2303      	movs	r3, #3
 8003238:	e004      	b.n	8003244 <HAL_GPIO_Init+0x240>
 800323a:	2302      	movs	r3, #2
 800323c:	e002      	b.n	8003244 <HAL_GPIO_Init+0x240>
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <HAL_GPIO_Init+0x240>
 8003242:	2300      	movs	r3, #0
 8003244:	69fa      	ldr	r2, [r7, #28]
 8003246:	f002 0203 	and.w	r2, r2, #3
 800324a:	0092      	lsls	r2, r2, #2
 800324c:	4093      	lsls	r3, r2
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4313      	orrs	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003254:	4935      	ldr	r1, [pc, #212]	; (800332c <HAL_GPIO_Init+0x328>)
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	089b      	lsrs	r3, r3, #2
 800325a:	3302      	adds	r3, #2
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003262:	4b3d      	ldr	r3, [pc, #244]	; (8003358 <HAL_GPIO_Init+0x354>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	43db      	mvns	r3, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4013      	ands	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	4313      	orrs	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003286:	4a34      	ldr	r2, [pc, #208]	; (8003358 <HAL_GPIO_Init+0x354>)
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800328c:	4b32      	ldr	r3, [pc, #200]	; (8003358 <HAL_GPIO_Init+0x354>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	43db      	mvns	r3, r3
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	4013      	ands	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032b0:	4a29      	ldr	r2, [pc, #164]	; (8003358 <HAL_GPIO_Init+0x354>)
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032b6:	4b28      	ldr	r3, [pc, #160]	; (8003358 <HAL_GPIO_Init+0x354>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	43db      	mvns	r3, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4013      	ands	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032da:	4a1f      	ldr	r2, [pc, #124]	; (8003358 <HAL_GPIO_Init+0x354>)
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032e0:	4b1d      	ldr	r3, [pc, #116]	; (8003358 <HAL_GPIO_Init+0x354>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	43db      	mvns	r3, r3
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	4013      	ands	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	4313      	orrs	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003304:	4a14      	ldr	r2, [pc, #80]	; (8003358 <HAL_GPIO_Init+0x354>)
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	3301      	adds	r3, #1
 800330e:	61fb      	str	r3, [r7, #28]
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	2b0f      	cmp	r3, #15
 8003314:	f67f ae84 	bls.w	8003020 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003318:	bf00      	nop
 800331a:	bf00      	nop
 800331c:	3724      	adds	r7, #36	; 0x24
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	40023800 	.word	0x40023800
 800332c:	40013800 	.word	0x40013800
 8003330:	40020000 	.word	0x40020000
 8003334:	40020400 	.word	0x40020400
 8003338:	40020800 	.word	0x40020800
 800333c:	40020c00 	.word	0x40020c00
 8003340:	40021000 	.word	0x40021000
 8003344:	40021400 	.word	0x40021400
 8003348:	40021800 	.word	0x40021800
 800334c:	40021c00 	.word	0x40021c00
 8003350:	40022000 	.word	0x40022000
 8003354:	40022400 	.word	0x40022400
 8003358:	40013c00 	.word	0x40013c00

0800335c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	460b      	mov	r3, r1
 8003366:	807b      	strh	r3, [r7, #2]
 8003368:	4613      	mov	r3, r2
 800336a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800336c:	787b      	ldrb	r3, [r7, #1]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003372:	887a      	ldrh	r2, [r7, #2]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003378:	e003      	b.n	8003382 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800337a:	887b      	ldrh	r3, [r7, #2]
 800337c:	041a      	lsls	r2, r3, #16
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	619a      	str	r2, [r3, #24]
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
	...

08003390 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800339a:	4b08      	ldr	r3, [pc, #32]	; (80033bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800339c:	695a      	ldr	r2, [r3, #20]
 800339e:	88fb      	ldrh	r3, [r7, #6]
 80033a0:	4013      	ands	r3, r2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d006      	beq.n	80033b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033a6:	4a05      	ldr	r2, [pc, #20]	; (80033bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033a8:	88fb      	ldrh	r3, [r7, #6]
 80033aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033ac:	88fb      	ldrh	r3, [r7, #6]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fd f920 	bl	80005f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80033b4:	bf00      	nop
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40013c00 	.word	0x40013c00

080033c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e12b      	b.n	800362a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d106      	bne.n	80033ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7fe fb84 	bl	8001af4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2224      	movs	r2, #36	; 0x24
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0201 	bic.w	r2, r2, #1
 8003402:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003412:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003422:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003424:	f000 fdd6 	bl	8003fd4 <HAL_RCC_GetPCLK1Freq>
 8003428:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	4a81      	ldr	r2, [pc, #516]	; (8003634 <HAL_I2C_Init+0x274>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d807      	bhi.n	8003444 <HAL_I2C_Init+0x84>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4a80      	ldr	r2, [pc, #512]	; (8003638 <HAL_I2C_Init+0x278>)
 8003438:	4293      	cmp	r3, r2
 800343a:	bf94      	ite	ls
 800343c:	2301      	movls	r3, #1
 800343e:	2300      	movhi	r3, #0
 8003440:	b2db      	uxtb	r3, r3
 8003442:	e006      	b.n	8003452 <HAL_I2C_Init+0x92>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4a7d      	ldr	r2, [pc, #500]	; (800363c <HAL_I2C_Init+0x27c>)
 8003448:	4293      	cmp	r3, r2
 800344a:	bf94      	ite	ls
 800344c:	2301      	movls	r3, #1
 800344e:	2300      	movhi	r3, #0
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e0e7      	b.n	800362a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4a78      	ldr	r2, [pc, #480]	; (8003640 <HAL_I2C_Init+0x280>)
 800345e:	fba2 2303 	umull	r2, r3, r2, r3
 8003462:	0c9b      	lsrs	r3, r3, #18
 8003464:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	430a      	orrs	r2, r1
 8003478:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	4a6a      	ldr	r2, [pc, #424]	; (8003634 <HAL_I2C_Init+0x274>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d802      	bhi.n	8003494 <HAL_I2C_Init+0xd4>
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	3301      	adds	r3, #1
 8003492:	e009      	b.n	80034a8 <HAL_I2C_Init+0xe8>
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800349a:	fb02 f303 	mul.w	r3, r2, r3
 800349e:	4a69      	ldr	r2, [pc, #420]	; (8003644 <HAL_I2C_Init+0x284>)
 80034a0:	fba2 2303 	umull	r2, r3, r2, r3
 80034a4:	099b      	lsrs	r3, r3, #6
 80034a6:	3301      	adds	r3, #1
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6812      	ldr	r2, [r2, #0]
 80034ac:	430b      	orrs	r3, r1
 80034ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80034ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	495c      	ldr	r1, [pc, #368]	; (8003634 <HAL_I2C_Init+0x274>)
 80034c4:	428b      	cmp	r3, r1
 80034c6:	d819      	bhi.n	80034fc <HAL_I2C_Init+0x13c>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	1e59      	subs	r1, r3, #1
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80034d6:	1c59      	adds	r1, r3, #1
 80034d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80034dc:	400b      	ands	r3, r1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <HAL_I2C_Init+0x138>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	1e59      	subs	r1, r3, #1
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80034f0:	3301      	adds	r3, #1
 80034f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f6:	e051      	b.n	800359c <HAL_I2C_Init+0x1dc>
 80034f8:	2304      	movs	r3, #4
 80034fa:	e04f      	b.n	800359c <HAL_I2C_Init+0x1dc>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d111      	bne.n	8003528 <HAL_I2C_Init+0x168>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	1e58      	subs	r0, r3, #1
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6859      	ldr	r1, [r3, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	440b      	add	r3, r1
 8003512:	fbb0 f3f3 	udiv	r3, r0, r3
 8003516:	3301      	adds	r3, #1
 8003518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800351c:	2b00      	cmp	r3, #0
 800351e:	bf0c      	ite	eq
 8003520:	2301      	moveq	r3, #1
 8003522:	2300      	movne	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	e012      	b.n	800354e <HAL_I2C_Init+0x18e>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	1e58      	subs	r0, r3, #1
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6859      	ldr	r1, [r3, #4]
 8003530:	460b      	mov	r3, r1
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	0099      	lsls	r1, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	fbb0 f3f3 	udiv	r3, r0, r3
 800353e:	3301      	adds	r3, #1
 8003540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003544:	2b00      	cmp	r3, #0
 8003546:	bf0c      	ite	eq
 8003548:	2301      	moveq	r3, #1
 800354a:	2300      	movne	r3, #0
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_I2C_Init+0x196>
 8003552:	2301      	movs	r3, #1
 8003554:	e022      	b.n	800359c <HAL_I2C_Init+0x1dc>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10e      	bne.n	800357c <HAL_I2C_Init+0x1bc>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	1e58      	subs	r0, r3, #1
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6859      	ldr	r1, [r3, #4]
 8003566:	460b      	mov	r3, r1
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	440b      	add	r3, r1
 800356c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003570:	3301      	adds	r3, #1
 8003572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800357a:	e00f      	b.n	800359c <HAL_I2C_Init+0x1dc>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	1e58      	subs	r0, r3, #1
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6859      	ldr	r1, [r3, #4]
 8003584:	460b      	mov	r3, r1
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	0099      	lsls	r1, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003592:	3301      	adds	r3, #1
 8003594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003598:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	6809      	ldr	r1, [r1, #0]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69da      	ldr	r2, [r3, #28]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	431a      	orrs	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80035ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6911      	ldr	r1, [r2, #16]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	68d2      	ldr	r2, [r2, #12]
 80035d6:	4311      	orrs	r1, r2
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6812      	ldr	r2, [r2, #0]
 80035dc:	430b      	orrs	r3, r1
 80035de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	695a      	ldr	r2, [r3, #20]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0201 	orr.w	r2, r2, #1
 800360a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2220      	movs	r2, #32
 8003616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	000186a0 	.word	0x000186a0
 8003638:	001e847f 	.word	0x001e847f
 800363c:	003d08ff 	.word	0x003d08ff
 8003640:	431bde83 	.word	0x431bde83
 8003644:	10624dd3 	.word	0x10624dd3

08003648 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b20      	cmp	r3, #32
 800365c:	d129      	bne.n	80036b2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2224      	movs	r2, #36	; 0x24
 8003662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0201 	bic.w	r2, r2, #1
 8003674:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 0210 	bic.w	r2, r2, #16
 8003684:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f042 0201 	orr.w	r2, r2, #1
 80036a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2220      	movs	r2, #32
 80036aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80036ae:	2300      	movs	r3, #0
 80036b0:	e000      	b.n	80036b4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80036b2:	2302      	movs	r3, #2
  }
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80036ca:	2300      	movs	r3, #0
 80036cc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b20      	cmp	r3, #32
 80036d8:	d12a      	bne.n	8003730 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2224      	movs	r2, #36	; 0x24
 80036de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0201 	bic.w	r2, r2, #1
 80036f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80036fa:	89fb      	ldrh	r3, [r7, #14]
 80036fc:	f023 030f 	bic.w	r3, r3, #15
 8003700:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	b29a      	uxth	r2, r3
 8003706:	89fb      	ldrh	r3, [r7, #14]
 8003708:	4313      	orrs	r3, r2
 800370a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	89fa      	ldrh	r2, [r7, #14]
 8003712:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f042 0201 	orr.w	r2, r2, #1
 8003722:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2220      	movs	r2, #32
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	e000      	b.n	8003732 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003730:	2302      	movs	r3, #2
  }
}
 8003732:	4618      	mov	r0, r3
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
	...

08003740 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e264      	b.n	8003c1c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d075      	beq.n	800384a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800375e:	4ba3      	ldr	r3, [pc, #652]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 030c 	and.w	r3, r3, #12
 8003766:	2b04      	cmp	r3, #4
 8003768:	d00c      	beq.n	8003784 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800376a:	4ba0      	ldr	r3, [pc, #640]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003772:	2b08      	cmp	r3, #8
 8003774:	d112      	bne.n	800379c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003776:	4b9d      	ldr	r3, [pc, #628]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800377e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003782:	d10b      	bne.n	800379c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003784:	4b99      	ldr	r3, [pc, #612]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d05b      	beq.n	8003848 <HAL_RCC_OscConfig+0x108>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d157      	bne.n	8003848 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e23f      	b.n	8003c1c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a4:	d106      	bne.n	80037b4 <HAL_RCC_OscConfig+0x74>
 80037a6:	4b91      	ldr	r3, [pc, #580]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a90      	ldr	r2, [pc, #576]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80037ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b0:	6013      	str	r3, [r2, #0]
 80037b2:	e01d      	b.n	80037f0 <HAL_RCC_OscConfig+0xb0>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037bc:	d10c      	bne.n	80037d8 <HAL_RCC_OscConfig+0x98>
 80037be:	4b8b      	ldr	r3, [pc, #556]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a8a      	ldr	r2, [pc, #552]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80037c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	4b88      	ldr	r3, [pc, #544]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a87      	ldr	r2, [pc, #540]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80037d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	e00b      	b.n	80037f0 <HAL_RCC_OscConfig+0xb0>
 80037d8:	4b84      	ldr	r3, [pc, #528]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a83      	ldr	r2, [pc, #524]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80037de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e2:	6013      	str	r3, [r2, #0]
 80037e4:	4b81      	ldr	r3, [pc, #516]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a80      	ldr	r2, [pc, #512]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80037ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d013      	beq.n	8003820 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f8:	f7fe fd7a 	bl	80022f0 <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003800:	f7fe fd76 	bl	80022f0 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b64      	cmp	r3, #100	; 0x64
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e204      	b.n	8003c1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003812:	4b76      	ldr	r3, [pc, #472]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0f0      	beq.n	8003800 <HAL_RCC_OscConfig+0xc0>
 800381e:	e014      	b.n	800384a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003820:	f7fe fd66 	bl	80022f0 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003828:	f7fe fd62 	bl	80022f0 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b64      	cmp	r3, #100	; 0x64
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e1f0      	b.n	8003c1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800383a:	4b6c      	ldr	r3, [pc, #432]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1f0      	bne.n	8003828 <HAL_RCC_OscConfig+0xe8>
 8003846:	e000      	b.n	800384a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d063      	beq.n	800391e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003856:	4b65      	ldr	r3, [pc, #404]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 030c 	and.w	r3, r3, #12
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00b      	beq.n	800387a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003862:	4b62      	ldr	r3, [pc, #392]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800386a:	2b08      	cmp	r3, #8
 800386c:	d11c      	bne.n	80038a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800386e:	4b5f      	ldr	r3, [pc, #380]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d116      	bne.n	80038a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800387a:	4b5c      	ldr	r3, [pc, #368]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d005      	beq.n	8003892 <HAL_RCC_OscConfig+0x152>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d001      	beq.n	8003892 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e1c4      	b.n	8003c1c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003892:	4b56      	ldr	r3, [pc, #344]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	4952      	ldr	r1, [pc, #328]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038a6:	e03a      	b.n	800391e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d020      	beq.n	80038f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038b0:	4b4f      	ldr	r3, [pc, #316]	; (80039f0 <HAL_RCC_OscConfig+0x2b0>)
 80038b2:	2201      	movs	r2, #1
 80038b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b6:	f7fe fd1b 	bl	80022f0 <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038bc:	e008      	b.n	80038d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038be:	f7fe fd17 	bl	80022f0 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e1a5      	b.n	8003c1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d0:	4b46      	ldr	r3, [pc, #280]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0f0      	beq.n	80038be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038dc:	4b43      	ldr	r3, [pc, #268]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	4940      	ldr	r1, [pc, #256]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	600b      	str	r3, [r1, #0]
 80038f0:	e015      	b.n	800391e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038f2:	4b3f      	ldr	r3, [pc, #252]	; (80039f0 <HAL_RCC_OscConfig+0x2b0>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f8:	f7fe fcfa 	bl	80022f0 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003900:	f7fe fcf6 	bl	80022f0 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e184      	b.n	8003c1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003912:	4b36      	ldr	r3, [pc, #216]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1f0      	bne.n	8003900 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0308 	and.w	r3, r3, #8
 8003926:	2b00      	cmp	r3, #0
 8003928:	d030      	beq.n	800398c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d016      	beq.n	8003960 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003932:	4b30      	ldr	r3, [pc, #192]	; (80039f4 <HAL_RCC_OscConfig+0x2b4>)
 8003934:	2201      	movs	r2, #1
 8003936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003938:	f7fe fcda 	bl	80022f0 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003940:	f7fe fcd6 	bl	80022f0 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e164      	b.n	8003c1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003952:	4b26      	ldr	r3, [pc, #152]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 8003954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0f0      	beq.n	8003940 <HAL_RCC_OscConfig+0x200>
 800395e:	e015      	b.n	800398c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003960:	4b24      	ldr	r3, [pc, #144]	; (80039f4 <HAL_RCC_OscConfig+0x2b4>)
 8003962:	2200      	movs	r2, #0
 8003964:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003966:	f7fe fcc3 	bl	80022f0 <HAL_GetTick>
 800396a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800396c:	e008      	b.n	8003980 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800396e:	f7fe fcbf 	bl	80022f0 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d901      	bls.n	8003980 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e14d      	b.n	8003c1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003980:	4b1a      	ldr	r3, [pc, #104]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 8003982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1f0      	bne.n	800396e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 80a0 	beq.w	8003ada <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800399a:	2300      	movs	r3, #0
 800399c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800399e:	4b13      	ldr	r3, [pc, #76]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10f      	bne.n	80039ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039aa:	2300      	movs	r3, #0
 80039ac:	60bb      	str	r3, [r7, #8]
 80039ae:	4b0f      	ldr	r3, [pc, #60]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	4a0e      	ldr	r2, [pc, #56]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80039b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b8:	6413      	str	r3, [r2, #64]	; 0x40
 80039ba:	4b0c      	ldr	r3, [pc, #48]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c2:	60bb      	str	r3, [r7, #8]
 80039c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039c6:	2301      	movs	r3, #1
 80039c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ca:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <HAL_RCC_OscConfig+0x2b8>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d121      	bne.n	8003a1a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039d6:	4b08      	ldr	r3, [pc, #32]	; (80039f8 <HAL_RCC_OscConfig+0x2b8>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a07      	ldr	r2, [pc, #28]	; (80039f8 <HAL_RCC_OscConfig+0x2b8>)
 80039dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039e2:	f7fe fc85 	bl	80022f0 <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e8:	e011      	b.n	8003a0e <HAL_RCC_OscConfig+0x2ce>
 80039ea:	bf00      	nop
 80039ec:	40023800 	.word	0x40023800
 80039f0:	42470000 	.word	0x42470000
 80039f4:	42470e80 	.word	0x42470e80
 80039f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039fc:	f7fe fc78 	bl	80022f0 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e106      	b.n	8003c1c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0e:	4b85      	ldr	r3, [pc, #532]	; (8003c24 <HAL_RCC_OscConfig+0x4e4>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0f0      	beq.n	80039fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d106      	bne.n	8003a30 <HAL_RCC_OscConfig+0x2f0>
 8003a22:	4b81      	ldr	r3, [pc, #516]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a26:	4a80      	ldr	r2, [pc, #512]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003a28:	f043 0301 	orr.w	r3, r3, #1
 8003a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a2e:	e01c      	b.n	8003a6a <HAL_RCC_OscConfig+0x32a>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	2b05      	cmp	r3, #5
 8003a36:	d10c      	bne.n	8003a52 <HAL_RCC_OscConfig+0x312>
 8003a38:	4b7b      	ldr	r3, [pc, #492]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3c:	4a7a      	ldr	r2, [pc, #488]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003a3e:	f043 0304 	orr.w	r3, r3, #4
 8003a42:	6713      	str	r3, [r2, #112]	; 0x70
 8003a44:	4b78      	ldr	r3, [pc, #480]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a48:	4a77      	ldr	r2, [pc, #476]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003a4a:	f043 0301 	orr.w	r3, r3, #1
 8003a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a50:	e00b      	b.n	8003a6a <HAL_RCC_OscConfig+0x32a>
 8003a52:	4b75      	ldr	r3, [pc, #468]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a56:	4a74      	ldr	r2, [pc, #464]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003a58:	f023 0301 	bic.w	r3, r3, #1
 8003a5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a5e:	4b72      	ldr	r3, [pc, #456]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a62:	4a71      	ldr	r2, [pc, #452]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003a64:	f023 0304 	bic.w	r3, r3, #4
 8003a68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d015      	beq.n	8003a9e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a72:	f7fe fc3d 	bl	80022f0 <HAL_GetTick>
 8003a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a78:	e00a      	b.n	8003a90 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a7a:	f7fe fc39 	bl	80022f0 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e0c5      	b.n	8003c1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a90:	4b65      	ldr	r3, [pc, #404]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0ee      	beq.n	8003a7a <HAL_RCC_OscConfig+0x33a>
 8003a9c:	e014      	b.n	8003ac8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a9e:	f7fe fc27 	bl	80022f0 <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aa4:	e00a      	b.n	8003abc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aa6:	f7fe fc23 	bl	80022f0 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e0af      	b.n	8003c1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003abc:	4b5a      	ldr	r3, [pc, #360]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1ee      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ac8:	7dfb      	ldrb	r3, [r7, #23]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d105      	bne.n	8003ada <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ace:	4b56      	ldr	r3, [pc, #344]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	4a55      	ldr	r2, [pc, #340]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003ad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ad8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 809b 	beq.w	8003c1a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ae4:	4b50      	ldr	r3, [pc, #320]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f003 030c 	and.w	r3, r3, #12
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d05c      	beq.n	8003baa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d141      	bne.n	8003b7c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af8:	4b4c      	ldr	r3, [pc, #304]	; (8003c2c <HAL_RCC_OscConfig+0x4ec>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afe:	f7fe fbf7 	bl	80022f0 <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b06:	f7fe fbf3 	bl	80022f0 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e081      	b.n	8003c1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b18:	4b43      	ldr	r3, [pc, #268]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1f0      	bne.n	8003b06 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	69da      	ldr	r2, [r3, #28]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	019b      	lsls	r3, r3, #6
 8003b34:	431a      	orrs	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3a:	085b      	lsrs	r3, r3, #1
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	041b      	lsls	r3, r3, #16
 8003b40:	431a      	orrs	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b46:	061b      	lsls	r3, r3, #24
 8003b48:	4937      	ldr	r1, [pc, #220]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b4e:	4b37      	ldr	r3, [pc, #220]	; (8003c2c <HAL_RCC_OscConfig+0x4ec>)
 8003b50:	2201      	movs	r2, #1
 8003b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b54:	f7fe fbcc 	bl	80022f0 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b5c:	f7fe fbc8 	bl	80022f0 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e056      	b.n	8003c1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b6e:	4b2e      	ldr	r3, [pc, #184]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0f0      	beq.n	8003b5c <HAL_RCC_OscConfig+0x41c>
 8003b7a:	e04e      	b.n	8003c1a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b7c:	4b2b      	ldr	r3, [pc, #172]	; (8003c2c <HAL_RCC_OscConfig+0x4ec>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b82:	f7fe fbb5 	bl	80022f0 <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b88:	e008      	b.n	8003b9c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b8a:	f7fe fbb1 	bl	80022f0 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e03f      	b.n	8003c1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b9c:	4b22      	ldr	r3, [pc, #136]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1f0      	bne.n	8003b8a <HAL_RCC_OscConfig+0x44a>
 8003ba8:	e037      	b.n	8003c1a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d101      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e032      	b.n	8003c1c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bb6:	4b1c      	ldr	r3, [pc, #112]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d028      	beq.n	8003c16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d121      	bne.n	8003c16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d11a      	bne.n	8003c16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003be6:	4013      	ands	r3, r2
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d111      	bne.n	8003c16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfc:	085b      	lsrs	r3, r3, #1
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d107      	bne.n	8003c16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c10:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d001      	beq.n	8003c1a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e000      	b.n	8003c1c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3718      	adds	r7, #24
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40007000 	.word	0x40007000
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	42470060 	.word	0x42470060

08003c30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e0cc      	b.n	8003dde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c44:	4b68      	ldr	r3, [pc, #416]	; (8003de8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 030f 	and.w	r3, r3, #15
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d90c      	bls.n	8003c6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c52:	4b65      	ldr	r3, [pc, #404]	; (8003de8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	b2d2      	uxtb	r2, r2
 8003c58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c5a:	4b63      	ldr	r3, [pc, #396]	; (8003de8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d001      	beq.n	8003c6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e0b8      	b.n	8003dde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d020      	beq.n	8003cba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d005      	beq.n	8003c90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c84:	4b59      	ldr	r3, [pc, #356]	; (8003dec <HAL_RCC_ClockConfig+0x1bc>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	4a58      	ldr	r2, [pc, #352]	; (8003dec <HAL_RCC_ClockConfig+0x1bc>)
 8003c8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0308 	and.w	r3, r3, #8
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d005      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c9c:	4b53      	ldr	r3, [pc, #332]	; (8003dec <HAL_RCC_ClockConfig+0x1bc>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	4a52      	ldr	r2, [pc, #328]	; (8003dec <HAL_RCC_ClockConfig+0x1bc>)
 8003ca2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ca6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ca8:	4b50      	ldr	r3, [pc, #320]	; (8003dec <HAL_RCC_ClockConfig+0x1bc>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	494d      	ldr	r1, [pc, #308]	; (8003dec <HAL_RCC_ClockConfig+0x1bc>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d044      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d107      	bne.n	8003cde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cce:	4b47      	ldr	r3, [pc, #284]	; (8003dec <HAL_RCC_ClockConfig+0x1bc>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d119      	bne.n	8003d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e07f      	b.n	8003dde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d003      	beq.n	8003cee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cea:	2b03      	cmp	r3, #3
 8003cec:	d107      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cee:	4b3f      	ldr	r3, [pc, #252]	; (8003dec <HAL_RCC_ClockConfig+0x1bc>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d109      	bne.n	8003d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e06f      	b.n	8003dde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cfe:	4b3b      	ldr	r3, [pc, #236]	; (8003dec <HAL_RCC_ClockConfig+0x1bc>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e067      	b.n	8003dde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d0e:	4b37      	ldr	r3, [pc, #220]	; (8003dec <HAL_RCC_ClockConfig+0x1bc>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f023 0203 	bic.w	r2, r3, #3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	4934      	ldr	r1, [pc, #208]	; (8003dec <HAL_RCC_ClockConfig+0x1bc>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d20:	f7fe fae6 	bl	80022f0 <HAL_GetTick>
 8003d24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d26:	e00a      	b.n	8003d3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d28:	f7fe fae2 	bl	80022f0 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e04f      	b.n	8003dde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d3e:	4b2b      	ldr	r3, [pc, #172]	; (8003dec <HAL_RCC_ClockConfig+0x1bc>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 020c 	and.w	r2, r3, #12
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d1eb      	bne.n	8003d28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d50:	4b25      	ldr	r3, [pc, #148]	; (8003de8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 030f 	and.w	r3, r3, #15
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d20c      	bcs.n	8003d78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d5e:	4b22      	ldr	r3, [pc, #136]	; (8003de8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d66:	4b20      	ldr	r3, [pc, #128]	; (8003de8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d001      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e032      	b.n	8003dde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d008      	beq.n	8003d96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d84:	4b19      	ldr	r3, [pc, #100]	; (8003dec <HAL_RCC_ClockConfig+0x1bc>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	4916      	ldr	r1, [pc, #88]	; (8003dec <HAL_RCC_ClockConfig+0x1bc>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d009      	beq.n	8003db6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003da2:	4b12      	ldr	r3, [pc, #72]	; (8003dec <HAL_RCC_ClockConfig+0x1bc>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	490e      	ldr	r1, [pc, #56]	; (8003dec <HAL_RCC_ClockConfig+0x1bc>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003db6:	f000 f821 	bl	8003dfc <HAL_RCC_GetSysClockFreq>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	4b0b      	ldr	r3, [pc, #44]	; (8003dec <HAL_RCC_ClockConfig+0x1bc>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	091b      	lsrs	r3, r3, #4
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	490a      	ldr	r1, [pc, #40]	; (8003df0 <HAL_RCC_ClockConfig+0x1c0>)
 8003dc8:	5ccb      	ldrb	r3, [r1, r3]
 8003dca:	fa22 f303 	lsr.w	r3, r2, r3
 8003dce:	4a09      	ldr	r2, [pc, #36]	; (8003df4 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003dd2:	4b09      	ldr	r3, [pc, #36]	; (8003df8 <HAL_RCC_ClockConfig+0x1c8>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7fe f956 	bl	8002088 <HAL_InitTick>

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	40023c00 	.word	0x40023c00
 8003dec:	40023800 	.word	0x40023800
 8003df0:	08006cb8 	.word	0x08006cb8
 8003df4:	20000008 	.word	0x20000008
 8003df8:	2000000c 	.word	0x2000000c

08003dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dfc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003e00:	b084      	sub	sp, #16
 8003e02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e04:	2300      	movs	r3, #0
 8003e06:	607b      	str	r3, [r7, #4]
 8003e08:	2300      	movs	r3, #0
 8003e0a:	60fb      	str	r3, [r7, #12]
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e14:	4b67      	ldr	r3, [pc, #412]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 030c 	and.w	r3, r3, #12
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	d00d      	beq.n	8003e3c <HAL_RCC_GetSysClockFreq+0x40>
 8003e20:	2b08      	cmp	r3, #8
 8003e22:	f200 80bd 	bhi.w	8003fa0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d002      	beq.n	8003e30 <HAL_RCC_GetSysClockFreq+0x34>
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	d003      	beq.n	8003e36 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e2e:	e0b7      	b.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e30:	4b61      	ldr	r3, [pc, #388]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003e32:	60bb      	str	r3, [r7, #8]
       break;
 8003e34:	e0b7      	b.n	8003fa6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e36:	4b60      	ldr	r3, [pc, #384]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003e38:	60bb      	str	r3, [r7, #8]
      break;
 8003e3a:	e0b4      	b.n	8003fa6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e3c:	4b5d      	ldr	r3, [pc, #372]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e44:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e46:	4b5b      	ldr	r3, [pc, #364]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d04d      	beq.n	8003eee <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e52:	4b58      	ldr	r3, [pc, #352]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	099b      	lsrs	r3, r3, #6
 8003e58:	461a      	mov	r2, r3
 8003e5a:	f04f 0300 	mov.w	r3, #0
 8003e5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e62:	f04f 0100 	mov.w	r1, #0
 8003e66:	ea02 0800 	and.w	r8, r2, r0
 8003e6a:	ea03 0901 	and.w	r9, r3, r1
 8003e6e:	4640      	mov	r0, r8
 8003e70:	4649      	mov	r1, r9
 8003e72:	f04f 0200 	mov.w	r2, #0
 8003e76:	f04f 0300 	mov.w	r3, #0
 8003e7a:	014b      	lsls	r3, r1, #5
 8003e7c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e80:	0142      	lsls	r2, r0, #5
 8003e82:	4610      	mov	r0, r2
 8003e84:	4619      	mov	r1, r3
 8003e86:	ebb0 0008 	subs.w	r0, r0, r8
 8003e8a:	eb61 0109 	sbc.w	r1, r1, r9
 8003e8e:	f04f 0200 	mov.w	r2, #0
 8003e92:	f04f 0300 	mov.w	r3, #0
 8003e96:	018b      	lsls	r3, r1, #6
 8003e98:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e9c:	0182      	lsls	r2, r0, #6
 8003e9e:	1a12      	subs	r2, r2, r0
 8003ea0:	eb63 0301 	sbc.w	r3, r3, r1
 8003ea4:	f04f 0000 	mov.w	r0, #0
 8003ea8:	f04f 0100 	mov.w	r1, #0
 8003eac:	00d9      	lsls	r1, r3, #3
 8003eae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003eb2:	00d0      	lsls	r0, r2, #3
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	eb12 0208 	adds.w	r2, r2, r8
 8003ebc:	eb43 0309 	adc.w	r3, r3, r9
 8003ec0:	f04f 0000 	mov.w	r0, #0
 8003ec4:	f04f 0100 	mov.w	r1, #0
 8003ec8:	0299      	lsls	r1, r3, #10
 8003eca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003ece:	0290      	lsls	r0, r2, #10
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4610      	mov	r0, r2
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	461a      	mov	r2, r3
 8003edc:	f04f 0300 	mov.w	r3, #0
 8003ee0:	f7fc f9de 	bl	80002a0 <__aeabi_uldivmod>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4613      	mov	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	e04a      	b.n	8003f84 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eee:	4b31      	ldr	r3, [pc, #196]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	099b      	lsrs	r3, r3, #6
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	f04f 0300 	mov.w	r3, #0
 8003efa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003efe:	f04f 0100 	mov.w	r1, #0
 8003f02:	ea02 0400 	and.w	r4, r2, r0
 8003f06:	ea03 0501 	and.w	r5, r3, r1
 8003f0a:	4620      	mov	r0, r4
 8003f0c:	4629      	mov	r1, r5
 8003f0e:	f04f 0200 	mov.w	r2, #0
 8003f12:	f04f 0300 	mov.w	r3, #0
 8003f16:	014b      	lsls	r3, r1, #5
 8003f18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f1c:	0142      	lsls	r2, r0, #5
 8003f1e:	4610      	mov	r0, r2
 8003f20:	4619      	mov	r1, r3
 8003f22:	1b00      	subs	r0, r0, r4
 8003f24:	eb61 0105 	sbc.w	r1, r1, r5
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	f04f 0300 	mov.w	r3, #0
 8003f30:	018b      	lsls	r3, r1, #6
 8003f32:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f36:	0182      	lsls	r2, r0, #6
 8003f38:	1a12      	subs	r2, r2, r0
 8003f3a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f3e:	f04f 0000 	mov.w	r0, #0
 8003f42:	f04f 0100 	mov.w	r1, #0
 8003f46:	00d9      	lsls	r1, r3, #3
 8003f48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f4c:	00d0      	lsls	r0, r2, #3
 8003f4e:	4602      	mov	r2, r0
 8003f50:	460b      	mov	r3, r1
 8003f52:	1912      	adds	r2, r2, r4
 8003f54:	eb45 0303 	adc.w	r3, r5, r3
 8003f58:	f04f 0000 	mov.w	r0, #0
 8003f5c:	f04f 0100 	mov.w	r1, #0
 8003f60:	0299      	lsls	r1, r3, #10
 8003f62:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003f66:	0290      	lsls	r0, r2, #10
 8003f68:	4602      	mov	r2, r0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	4619      	mov	r1, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	461a      	mov	r2, r3
 8003f74:	f04f 0300 	mov.w	r3, #0
 8003f78:	f7fc f992 	bl	80002a0 <__aeabi_uldivmod>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	460b      	mov	r3, r1
 8003f80:	4613      	mov	r3, r2
 8003f82:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f84:	4b0b      	ldr	r3, [pc, #44]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	0c1b      	lsrs	r3, r3, #16
 8003f8a:	f003 0303 	and.w	r3, r3, #3
 8003f8e:	3301      	adds	r3, #1
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f9c:	60bb      	str	r3, [r7, #8]
      break;
 8003f9e:	e002      	b.n	8003fa6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fa0:	4b05      	ldr	r3, [pc, #20]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003fa2:	60bb      	str	r3, [r7, #8]
      break;
 8003fa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fa6:	68bb      	ldr	r3, [r7, #8]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003fb2:	bf00      	nop
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	00f42400 	.word	0x00f42400

08003fbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fc0:	4b03      	ldr	r3, [pc, #12]	; (8003fd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	20000008 	.word	0x20000008

08003fd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fd8:	f7ff fff0 	bl	8003fbc <HAL_RCC_GetHCLKFreq>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	4b05      	ldr	r3, [pc, #20]	; (8003ff4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	0a9b      	lsrs	r3, r3, #10
 8003fe4:	f003 0307 	and.w	r3, r3, #7
 8003fe8:	4903      	ldr	r1, [pc, #12]	; (8003ff8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fea:	5ccb      	ldrb	r3, [r1, r3]
 8003fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40023800 	.word	0x40023800
 8003ff8:	08006cc8 	.word	0x08006cc8

08003ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004000:	f7ff ffdc 	bl	8003fbc <HAL_RCC_GetHCLKFreq>
 8004004:	4602      	mov	r2, r0
 8004006:	4b05      	ldr	r3, [pc, #20]	; (800401c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	0b5b      	lsrs	r3, r3, #13
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	4903      	ldr	r1, [pc, #12]	; (8004020 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004012:	5ccb      	ldrb	r3, [r1, r3]
 8004014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004018:	4618      	mov	r0, r3
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40023800 	.word	0x40023800
 8004020:	08006cc8 	.word	0x08006cc8

08004024 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	220f      	movs	r2, #15
 8004032:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004034:	4b12      	ldr	r3, [pc, #72]	; (8004080 <HAL_RCC_GetClockConfig+0x5c>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 0203 	and.w	r2, r3, #3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004040:	4b0f      	ldr	r3, [pc, #60]	; (8004080 <HAL_RCC_GetClockConfig+0x5c>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800404c:	4b0c      	ldr	r3, [pc, #48]	; (8004080 <HAL_RCC_GetClockConfig+0x5c>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004058:	4b09      	ldr	r3, [pc, #36]	; (8004080 <HAL_RCC_GetClockConfig+0x5c>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	08db      	lsrs	r3, r3, #3
 800405e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004066:	4b07      	ldr	r3, [pc, #28]	; (8004084 <HAL_RCC_GetClockConfig+0x60>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 020f 	and.w	r2, r3, #15
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	601a      	str	r2, [r3, #0]
}
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	40023800 	.word	0x40023800
 8004084:	40023c00 	.word	0x40023c00

08004088 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004090:	2300      	movs	r3, #0
 8004092:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004094:	2300      	movs	r3, #0
 8004096:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10b      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d105      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d075      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80040bc:	4bad      	ldr	r3, [pc, #692]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80040be:	2200      	movs	r2, #0
 80040c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040c2:	f7fe f915 	bl	80022f0 <HAL_GetTick>
 80040c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040c8:	e008      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80040ca:	f7fe f911 	bl	80022f0 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e18b      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040dc:	4ba6      	ldr	r3, [pc, #664]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1f0      	bne.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d009      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	019a      	lsls	r2, r3, #6
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	071b      	lsls	r3, r3, #28
 8004100:	499d      	ldr	r1, [pc, #628]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004102:	4313      	orrs	r3, r2
 8004104:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d01f      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004114:	4b98      	ldr	r3, [pc, #608]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800411a:	0f1b      	lsrs	r3, r3, #28
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	019a      	lsls	r2, r3, #6
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	061b      	lsls	r3, r3, #24
 800412e:	431a      	orrs	r2, r3
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	071b      	lsls	r3, r3, #28
 8004134:	4990      	ldr	r1, [pc, #576]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004136:	4313      	orrs	r3, r2
 8004138:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800413c:	4b8e      	ldr	r3, [pc, #568]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800413e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004142:	f023 021f 	bic.w	r2, r3, #31
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	3b01      	subs	r3, #1
 800414c:	498a      	ldr	r1, [pc, #552]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800414e:	4313      	orrs	r3, r2
 8004150:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00d      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	019a      	lsls	r2, r3, #6
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	061b      	lsls	r3, r3, #24
 800416c:	431a      	orrs	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	071b      	lsls	r3, r3, #28
 8004174:	4980      	ldr	r1, [pc, #512]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004176:	4313      	orrs	r3, r2
 8004178:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800417c:	4b7d      	ldr	r3, [pc, #500]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800417e:	2201      	movs	r2, #1
 8004180:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004182:	f7fe f8b5 	bl	80022f0 <HAL_GetTick>
 8004186:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004188:	e008      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800418a:	f7fe f8b1 	bl	80022f0 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d901      	bls.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e12b      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800419c:	4b76      	ldr	r3, [pc, #472]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0f0      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d105      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d079      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80041c0:	4b6e      	ldr	r3, [pc, #440]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041c6:	f7fe f893 	bl	80022f0 <HAL_GetTick>
 80041ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041cc:	e008      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80041ce:	f7fe f88f 	bl	80022f0 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d901      	bls.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e109      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041e0:	4b65      	ldr	r3, [pc, #404]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041ec:	d0ef      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0304 	and.w	r3, r3, #4
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d020      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80041fa:	4b5f      	ldr	r3, [pc, #380]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80041fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004200:	0f1b      	lsrs	r3, r3, #28
 8004202:	f003 0307 	and.w	r3, r3, #7
 8004206:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	019a      	lsls	r2, r3, #6
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	061b      	lsls	r3, r3, #24
 8004214:	431a      	orrs	r2, r3
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	071b      	lsls	r3, r3, #28
 800421a:	4957      	ldr	r1, [pc, #348]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800421c:	4313      	orrs	r3, r2
 800421e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004222:	4b55      	ldr	r3, [pc, #340]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004224:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004228:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	3b01      	subs	r3, #1
 8004232:	021b      	lsls	r3, r3, #8
 8004234:	4950      	ldr	r1, [pc, #320]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0308 	and.w	r3, r3, #8
 8004244:	2b00      	cmp	r3, #0
 8004246:	d01e      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004248:	4b4b      	ldr	r3, [pc, #300]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800424a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424e:	0e1b      	lsrs	r3, r3, #24
 8004250:	f003 030f 	and.w	r3, r3, #15
 8004254:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	019a      	lsls	r2, r3, #6
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	061b      	lsls	r3, r3, #24
 8004260:	431a      	orrs	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	071b      	lsls	r3, r3, #28
 8004268:	4943      	ldr	r1, [pc, #268]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800426a:	4313      	orrs	r3, r2
 800426c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004270:	4b41      	ldr	r3, [pc, #260]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004272:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004276:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	493e      	ldr	r1, [pc, #248]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004280:	4313      	orrs	r3, r2
 8004282:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004286:	4b3d      	ldr	r3, [pc, #244]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004288:	2201      	movs	r2, #1
 800428a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800428c:	f7fe f830 	bl	80022f0 <HAL_GetTick>
 8004290:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004292:	e008      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004294:	f7fe f82c 	bl	80022f0 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e0a6      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042a6:	4b34      	ldr	r3, [pc, #208]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042b2:	d1ef      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0320 	and.w	r3, r3, #32
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 808d 	beq.w	80043dc <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80042c2:	2300      	movs	r3, #0
 80042c4:	60fb      	str	r3, [r7, #12]
 80042c6:	4b2c      	ldr	r3, [pc, #176]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	4a2b      	ldr	r2, [pc, #172]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80042cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042d0:	6413      	str	r3, [r2, #64]	; 0x40
 80042d2:	4b29      	ldr	r3, [pc, #164]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042da:	60fb      	str	r3, [r7, #12]
 80042dc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80042de:	4b28      	ldr	r3, [pc, #160]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a27      	ldr	r2, [pc, #156]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80042e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042e8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80042ea:	f7fe f801 	bl	80022f0 <HAL_GetTick>
 80042ee:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80042f0:	e008      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80042f2:	f7fd fffd 	bl	80022f0 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d901      	bls.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e077      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004304:	4b1e      	ldr	r3, [pc, #120]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800430c:	2b00      	cmp	r3, #0
 800430e:	d0f0      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004310:	4b19      	ldr	r3, [pc, #100]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004314:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004318:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d039      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004324:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	429a      	cmp	r2, r3
 800432c:	d032      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800432e:	4b12      	ldr	r3, [pc, #72]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004336:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004338:	4b12      	ldr	r3, [pc, #72]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800433a:	2201      	movs	r2, #1
 800433c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800433e:	4b11      	ldr	r3, [pc, #68]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004340:	2200      	movs	r2, #0
 8004342:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004344:	4a0c      	ldr	r2, [pc, #48]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800434a:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800434c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b01      	cmp	r3, #1
 8004354:	d11e      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004356:	f7fd ffcb 	bl	80022f0 <HAL_GetTick>
 800435a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800435c:	e014      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800435e:	f7fd ffc7 	bl	80022f0 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	f241 3288 	movw	r2, #5000	; 0x1388
 800436c:	4293      	cmp	r3, r2
 800436e:	d90b      	bls.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e03f      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8004374:	42470068 	.word	0x42470068
 8004378:	40023800 	.word	0x40023800
 800437c:	42470070 	.word	0x42470070
 8004380:	40007000 	.word	0x40007000
 8004384:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004388:	4b1c      	ldr	r3, [pc, #112]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800438a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d0e4      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004398:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800439c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043a0:	d10d      	bne.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x336>
 80043a2:	4b16      	ldr	r3, [pc, #88]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80043b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043b6:	4911      	ldr	r1, [pc, #68]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	608b      	str	r3, [r1, #8]
 80043bc:	e005      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x342>
 80043be:	4b0f      	ldr	r3, [pc, #60]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	4a0e      	ldr	r2, [pc, #56]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80043c4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80043c8:	6093      	str	r3, [r2, #8]
 80043ca:	4b0c      	ldr	r3, [pc, #48]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80043cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043d6:	4909      	ldr	r1, [pc, #36]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0310 	and.w	r3, r3, #16
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d004      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80043ee:	4b04      	ldr	r3, [pc, #16]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80043f0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3718      	adds	r7, #24
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40023800 	.word	0x40023800
 8004400:	424711e0 	.word	0x424711e0

08004404 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e083      	b.n	800451e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	7f5b      	ldrb	r3, [r3, #29]
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d105      	bne.n	800442c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7fd fc3a 	bl	8001ca0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	22ca      	movs	r2, #202	; 0xca
 8004438:	625a      	str	r2, [r3, #36]	; 0x24
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2253      	movs	r2, #83	; 0x53
 8004440:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fb84 	bl	8004b50 <RTC_EnterInitMode>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d008      	beq.n	8004460 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	22ff      	movs	r2, #255	; 0xff
 8004454:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2204      	movs	r2, #4
 800445a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e05e      	b.n	800451e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	6812      	ldr	r2, [r2, #0]
 800446a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800446e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004472:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6899      	ldr	r1, [r3, #8]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	431a      	orrs	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	431a      	orrs	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	68d2      	ldr	r2, [r2, #12]
 800449a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6919      	ldr	r1, [r3, #16]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	041a      	lsls	r2, r3, #16
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68da      	ldr	r2, [r3, #12]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044be:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 0320 	and.w	r3, r3, #32
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10e      	bne.n	80044ec <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 fb16 	bl	8004b00 <HAL_RTC_WaitForSynchro>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d008      	beq.n	80044ec <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	22ff      	movs	r2, #255	; 0xff
 80044e0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2204      	movs	r2, #4
 80044e6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e018      	b.n	800451e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044fa:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	699a      	ldr	r2, [r3, #24]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	22ff      	movs	r2, #255	; 0xff
 8004514:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2201      	movs	r2, #1
 800451a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800451c:	2300      	movs	r3, #0
  }
}
 800451e:	4618      	mov	r0, r3
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004526:	b590      	push	{r4, r7, lr}
 8004528:	b087      	sub	sp, #28
 800452a:	af00      	add	r7, sp, #0
 800452c:	60f8      	str	r0, [r7, #12]
 800452e:	60b9      	str	r1, [r7, #8]
 8004530:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004532:	2300      	movs	r3, #0
 8004534:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	7f1b      	ldrb	r3, [r3, #28]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d101      	bne.n	8004542 <HAL_RTC_SetTime+0x1c>
 800453e:	2302      	movs	r3, #2
 8004540:	e0aa      	b.n	8004698 <HAL_RTC_SetTime+0x172>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2201      	movs	r2, #1
 8004546:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2202      	movs	r2, #2
 800454c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d126      	bne.n	80045a2 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455e:	2b00      	cmp	r3, #0
 8004560:	d102      	bne.n	8004568 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2200      	movs	r2, #0
 8004566:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	4618      	mov	r0, r3
 800456e:	f000 fb1b 	bl	8004ba8 <RTC_ByteToBcd2>
 8004572:	4603      	mov	r3, r0
 8004574:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	785b      	ldrb	r3, [r3, #1]
 800457a:	4618      	mov	r0, r3
 800457c:	f000 fb14 	bl	8004ba8 <RTC_ByteToBcd2>
 8004580:	4603      	mov	r3, r0
 8004582:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004584:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	789b      	ldrb	r3, [r3, #2]
 800458a:	4618      	mov	r0, r3
 800458c:	f000 fb0c 	bl	8004ba8 <RTC_ByteToBcd2>
 8004590:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004592:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	78db      	ldrb	r3, [r3, #3]
 800459a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800459c:	4313      	orrs	r3, r2
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	e018      	b.n	80045d4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d102      	bne.n	80045b6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2200      	movs	r2, #0
 80045b4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	785b      	ldrb	r3, [r3, #1]
 80045c0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80045c2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80045c8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	78db      	ldrb	r3, [r3, #3]
 80045ce:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80045d0:	4313      	orrs	r3, r2
 80045d2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	22ca      	movs	r2, #202	; 0xca
 80045da:	625a      	str	r2, [r3, #36]	; 0x24
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2253      	movs	r2, #83	; 0x53
 80045e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 fab3 	bl	8004b50 <RTC_EnterInitMode>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00b      	beq.n	8004608 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	22ff      	movs	r2, #255	; 0xff
 80045f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2204      	movs	r2, #4
 80045fc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e047      	b.n	8004698 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004612:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004616:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689a      	ldr	r2, [r3, #8]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004626:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6899      	ldr	r1, [r3, #8]
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	68da      	ldr	r2, [r3, #12]
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	431a      	orrs	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800464e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	2b00      	cmp	r3, #0
 800465c:	d111      	bne.n	8004682 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 fa4e 	bl	8004b00 <HAL_RTC_WaitForSynchro>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00b      	beq.n	8004682 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	22ff      	movs	r2, #255	; 0xff
 8004670:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2204      	movs	r2, #4
 8004676:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e00a      	b.n	8004698 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	22ff      	movs	r2, #255	; 0xff
 8004688:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2201      	movs	r2, #1
 800468e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8004696:	2300      	movs	r3, #0
  }
}
 8004698:	4618      	mov	r0, r3
 800469a:	371c      	adds	r7, #28
 800469c:	46bd      	mov	sp, r7
 800469e:	bd90      	pop	{r4, r7, pc}

080046a0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80046a0:	b590      	push	{r4, r7, lr}
 80046a2:	b087      	sub	sp, #28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80046ac:	2300      	movs	r3, #0
 80046ae:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	7f1b      	ldrb	r3, [r3, #28]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d101      	bne.n	80046bc <HAL_RTC_SetDate+0x1c>
 80046b8:	2302      	movs	r3, #2
 80046ba:	e094      	b.n	80047e6 <HAL_RTC_SetDate+0x146>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2201      	movs	r2, #1
 80046c0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2202      	movs	r2, #2
 80046c6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10e      	bne.n	80046ec <HAL_RTC_SetDate+0x4c>
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	785b      	ldrb	r3, [r3, #1]
 80046d2:	f003 0310 	and.w	r3, r3, #16
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d008      	beq.n	80046ec <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	785b      	ldrb	r3, [r3, #1]
 80046de:	f023 0310 	bic.w	r3, r3, #16
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	330a      	adds	r3, #10
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d11c      	bne.n	800472c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	78db      	ldrb	r3, [r3, #3]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 fa56 	bl	8004ba8 <RTC_ByteToBcd2>
 80046fc:	4603      	mov	r3, r0
 80046fe:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	785b      	ldrb	r3, [r3, #1]
 8004704:	4618      	mov	r0, r3
 8004706:	f000 fa4f 	bl	8004ba8 <RTC_ByteToBcd2>
 800470a:	4603      	mov	r3, r0
 800470c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800470e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	789b      	ldrb	r3, [r3, #2]
 8004714:	4618      	mov	r0, r3
 8004716:	f000 fa47 	bl	8004ba8 <RTC_ByteToBcd2>
 800471a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800471c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004726:	4313      	orrs	r3, r2
 8004728:	617b      	str	r3, [r7, #20]
 800472a:	e00e      	b.n	800474a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	78db      	ldrb	r3, [r3, #3]
 8004730:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	785b      	ldrb	r3, [r3, #1]
 8004736:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004738:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800473e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004746:	4313      	orrs	r3, r2
 8004748:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	22ca      	movs	r2, #202	; 0xca
 8004750:	625a      	str	r2, [r3, #36]	; 0x24
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2253      	movs	r2, #83	; 0x53
 8004758:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 f9f8 	bl	8004b50 <RTC_EnterInitMode>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00b      	beq.n	800477e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	22ff      	movs	r2, #255	; 0xff
 800476c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2204      	movs	r2, #4
 8004772:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e033      	b.n	80047e6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004788:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800478c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68da      	ldr	r2, [r3, #12]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800479c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f003 0320 	and.w	r3, r3, #32
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d111      	bne.n	80047d0 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f000 f9a7 	bl	8004b00 <HAL_RTC_WaitForSynchro>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00b      	beq.n	80047d0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	22ff      	movs	r2, #255	; 0xff
 80047be:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2204      	movs	r2, #4
 80047c4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e00a      	b.n	80047e6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	22ff      	movs	r2, #255	; 0xff
 80047d6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2201      	movs	r2, #1
 80047dc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80047e4:	2300      	movs	r3, #0
  }
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	371c      	adds	r7, #28
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd90      	pop	{r4, r7, pc}
	...

080047f0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80047f0:	b590      	push	{r4, r7, lr}
 80047f2:	b089      	sub	sp, #36	; 0x24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 80047fc:	2300      	movs	r3, #0
 80047fe:	61fb      	str	r3, [r7, #28]
 8004800:	2300      	movs	r3, #0
 8004802:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8004804:	4b93      	ldr	r3, [pc, #588]	; (8004a54 <HAL_RTC_SetAlarm_IT+0x264>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a93      	ldr	r2, [pc, #588]	; (8004a58 <HAL_RTC_SetAlarm_IT+0x268>)
 800480a:	fba2 2303 	umull	r2, r3, r2, r3
 800480e:	0adb      	lsrs	r3, r3, #11
 8004810:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004814:	fb02 f303 	mul.w	r3, r2, r3
 8004818:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	7f1b      	ldrb	r3, [r3, #28]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d101      	bne.n	8004826 <HAL_RTC_SetAlarm_IT+0x36>
 8004822:	2302      	movs	r3, #2
 8004824:	e111      	b.n	8004a4a <HAL_RTC_SetAlarm_IT+0x25a>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2201      	movs	r2, #1
 800482a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2202      	movs	r2, #2
 8004830:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d137      	bne.n	80048a8 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004842:	2b00      	cmp	r3, #0
 8004844:	d102      	bne.n	800484c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	2200      	movs	r2, #0
 800484a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	4618      	mov	r0, r3
 8004852:	f000 f9a9 	bl	8004ba8 <RTC_ByteToBcd2>
 8004856:	4603      	mov	r3, r0
 8004858:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	785b      	ldrb	r3, [r3, #1]
 800485e:	4618      	mov	r0, r3
 8004860:	f000 f9a2 	bl	8004ba8 <RTC_ByteToBcd2>
 8004864:	4603      	mov	r3, r0
 8004866:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004868:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	789b      	ldrb	r3, [r3, #2]
 800486e:	4618      	mov	r0, r3
 8004870:	f000 f99a 	bl	8004ba8 <RTC_ByteToBcd2>
 8004874:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004876:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	78db      	ldrb	r3, [r3, #3]
 800487e:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004880:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	f893 3020 	ldrb.w	r3, [r3, #32]
 800488a:	4618      	mov	r0, r3
 800488c:	f000 f98c 	bl	8004ba8 <RTC_ByteToBcd2>
 8004890:	4603      	mov	r3, r0
 8004892:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004894:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800489c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80048a2:	4313      	orrs	r3, r2
 80048a4:	61fb      	str	r3, [r7, #28]
 80048a6:	e023      	b.n	80048f0 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d102      	bne.n	80048bc <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	2200      	movs	r2, #0
 80048ba:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	785b      	ldrb	r3, [r3, #1]
 80048c6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80048c8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80048ce:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	78db      	ldrb	r3, [r3, #3]
 80048d4:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80048d6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048de:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80048e0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80048e6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80048ec:	4313      	orrs	r3, r2
 80048ee:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	22ca      	movs	r2, #202	; 0xca
 8004902:	625a      	str	r2, [r3, #36]	; 0x24
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2253      	movs	r2, #83	; 0x53
 800490a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004914:	d141      	bne.n	800499a <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004924:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	b2da      	uxtb	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004936:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	1e5a      	subs	r2, r3, #1
 800493c:	617a      	str	r2, [r7, #20]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10b      	bne.n	800495a <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	22ff      	movs	r2, #255	; 0xff
 8004948:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2203      	movs	r2, #3
 800494e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e077      	b.n	8004a4a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b00      	cmp	r3, #0
 8004966:	d0e7      	beq.n	8004938 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	69fa      	ldr	r2, [r7, #28]
 800496e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689a      	ldr	r2, [r3, #8]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004986:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689a      	ldr	r2, [r3, #8]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004996:	609a      	str	r2, [r3, #8]
 8004998:	e040      	b.n	8004a1c <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80049a8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	b2da      	uxtb	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f462 7220 	orn	r2, r2, #640	; 0x280
 80049ba:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	1e5a      	subs	r2, r3, #1
 80049c0:	617a      	str	r2, [r7, #20]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10b      	bne.n	80049de <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	22ff      	movs	r2, #255	; 0xff
 80049cc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2203      	movs	r2, #3
 80049d2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e035      	b.n	8004a4a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0e7      	beq.n	80049bc <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	69fa      	ldr	r2, [r7, #28]
 80049f2:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689a      	ldr	r2, [r3, #8]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a0a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689a      	ldr	r2, [r3, #8]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a1a:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004a1c:	4b0f      	ldr	r3, [pc, #60]	; (8004a5c <HAL_RTC_SetAlarm_IT+0x26c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a0e      	ldr	r2, [pc, #56]	; (8004a5c <HAL_RTC_SetAlarm_IT+0x26c>)
 8004a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a26:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8004a28:	4b0c      	ldr	r3, [pc, #48]	; (8004a5c <HAL_RTC_SetAlarm_IT+0x26c>)
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	4a0b      	ldr	r2, [pc, #44]	; (8004a5c <HAL_RTC_SetAlarm_IT+0x26c>)
 8004a2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a32:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	22ff      	movs	r2, #255	; 0xff
 8004a3a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3724      	adds	r7, #36	; 0x24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd90      	pop	{r4, r7, pc}
 8004a52:	bf00      	nop
 8004a54:	20000008 	.word	0x20000008
 8004a58:	10624dd3 	.word	0x10624dd3
 8004a5c:	40013c00 	.word	0x40013c00

08004a60 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d012      	beq.n	8004a9c <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00b      	beq.n	8004a9c <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f831 	bl	8004aec <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004a9a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d012      	beq.n	8004ad0 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00b      	beq.n	8004ad0 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f893 	bl	8004be4 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004ace:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004ad0:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <HAL_RTC_AlarmIRQHandler+0x88>)
 8004ad2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ad6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	775a      	strb	r2, [r3, #29]
}
 8004ade:	bf00      	nop
 8004ae0:	3708      	adds	r7, #8
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	40013c00 	.word	0x40013c00

08004aec <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b1a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b1c:	f7fd fbe8 	bl	80022f0 <HAL_GetTick>
 8004b20:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004b22:	e009      	b.n	8004b38 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004b24:	f7fd fbe4 	bl	80022f0 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b32:	d901      	bls.n	8004b38 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e007      	b.n	8004b48 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f003 0320 	and.w	r3, r3, #32
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d0ee      	beq.n	8004b24 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d119      	bne.n	8004b9e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b72:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b74:	f7fd fbbc 	bl	80022f0 <HAL_GetTick>
 8004b78:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004b7a:	e009      	b.n	8004b90 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004b7c:	f7fd fbb8 	bl	80022f0 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b8a:	d901      	bls.n	8004b90 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e007      	b.n	8004ba0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0ee      	beq.n	8004b7c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	4603      	mov	r3, r0
 8004bb0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8004bb6:	e005      	b.n	8004bc4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	3301      	adds	r3, #1
 8004bbc:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004bbe:	79fb      	ldrb	r3, [r7, #7]
 8004bc0:	3b0a      	subs	r3, #10
 8004bc2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8004bc4:	79fb      	ldrb	r3, [r7, #7]
 8004bc6:	2b09      	cmp	r3, #9
 8004bc8:	d8f6      	bhi.n	8004bb8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	011b      	lsls	r3, r3, #4
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	79fb      	ldrb	r3, [r7, #7]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	b2db      	uxtb	r3, r3
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3714      	adds	r7, #20
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e07b      	b.n	8004d02 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d108      	bne.n	8004c24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c1a:	d009      	beq.n	8004c30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	61da      	str	r2, [r3, #28]
 8004c22:	e005      	b.n	8004c30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d106      	bne.n	8004c50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7fd f85a 	bl	8001d04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2202      	movs	r2, #2
 8004c54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c82:	431a      	orrs	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	431a      	orrs	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	431a      	orrs	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004caa:	431a      	orrs	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb4:	ea42 0103 	orr.w	r1, r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cbc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	0c1b      	lsrs	r3, r3, #16
 8004cce:	f003 0104 	and.w	r1, r3, #4
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	f003 0210 	and.w	r2, r3, #16
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	69da      	ldr	r2, [r3, #28]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cf0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b082      	sub	sp, #8
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d101      	bne.n	8004d1c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e041      	b.n	8004da0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d106      	bne.n	8004d36 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 f839 	bl	8004da8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2202      	movs	r2, #2
 8004d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	3304      	adds	r3, #4
 8004d46:	4619      	mov	r1, r3
 8004d48:	4610      	mov	r0, r2
 8004d4a:	f000 fae9 	bl	8005320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3708      	adds	r7, #8
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d001      	beq.n	8004dd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e04e      	b.n	8004e72 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68da      	ldr	r2, [r3, #12]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f042 0201 	orr.w	r2, r2, #1
 8004dea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a23      	ldr	r2, [pc, #140]	; (8004e80 <HAL_TIM_Base_Start_IT+0xc4>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d022      	beq.n	8004e3c <HAL_TIM_Base_Start_IT+0x80>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dfe:	d01d      	beq.n	8004e3c <HAL_TIM_Base_Start_IT+0x80>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a1f      	ldr	r2, [pc, #124]	; (8004e84 <HAL_TIM_Base_Start_IT+0xc8>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d018      	beq.n	8004e3c <HAL_TIM_Base_Start_IT+0x80>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a1e      	ldr	r2, [pc, #120]	; (8004e88 <HAL_TIM_Base_Start_IT+0xcc>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d013      	beq.n	8004e3c <HAL_TIM_Base_Start_IT+0x80>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a1c      	ldr	r2, [pc, #112]	; (8004e8c <HAL_TIM_Base_Start_IT+0xd0>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d00e      	beq.n	8004e3c <HAL_TIM_Base_Start_IT+0x80>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a1b      	ldr	r2, [pc, #108]	; (8004e90 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d009      	beq.n	8004e3c <HAL_TIM_Base_Start_IT+0x80>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a19      	ldr	r2, [pc, #100]	; (8004e94 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d004      	beq.n	8004e3c <HAL_TIM_Base_Start_IT+0x80>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a18      	ldr	r2, [pc, #96]	; (8004e98 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d111      	bne.n	8004e60 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f003 0307 	and.w	r3, r3, #7
 8004e46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2b06      	cmp	r3, #6
 8004e4c:	d010      	beq.n	8004e70 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f042 0201 	orr.w	r2, r2, #1
 8004e5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e5e:	e007      	b.n	8004e70 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0201 	orr.w	r2, r2, #1
 8004e6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	40010000 	.word	0x40010000
 8004e84:	40000400 	.word	0x40000400
 8004e88:	40000800 	.word	0x40000800
 8004e8c:	40000c00 	.word	0x40000c00
 8004e90:	40010400 	.word	0x40010400
 8004e94:	40014000 	.word	0x40014000
 8004e98:	40001800 	.word	0x40001800

08004e9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e041      	b.n	8004f32 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d106      	bne.n	8004ec8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7fc ffd4 	bl	8001e70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2202      	movs	r2, #2
 8004ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	3304      	adds	r3, #4
 8004ed8:	4619      	mov	r1, r3
 8004eda:	4610      	mov	r0, r2
 8004edc:	f000 fa20 	bl	8005320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b082      	sub	sp, #8
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d122      	bne.n	8004f96 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d11b      	bne.n	8004f96 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f06f 0202 	mvn.w	r2, #2
 8004f66:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	f003 0303 	and.w	r3, r3, #3
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f9b1 	bl	80052e4 <HAL_TIM_IC_CaptureCallback>
 8004f82:	e005      	b.n	8004f90 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 f9a3 	bl	80052d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f9b4 	bl	80052f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	f003 0304 	and.w	r3, r3, #4
 8004fa0:	2b04      	cmp	r3, #4
 8004fa2:	d122      	bne.n	8004fea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	f003 0304 	and.w	r3, r3, #4
 8004fae:	2b04      	cmp	r3, #4
 8004fb0:	d11b      	bne.n	8004fea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f06f 0204 	mvn.w	r2, #4
 8004fba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d003      	beq.n	8004fd8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 f987 	bl	80052e4 <HAL_TIM_IC_CaptureCallback>
 8004fd6:	e005      	b.n	8004fe4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 f979 	bl	80052d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f98a 	bl	80052f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	f003 0308 	and.w	r3, r3, #8
 8004ff4:	2b08      	cmp	r3, #8
 8004ff6:	d122      	bne.n	800503e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	f003 0308 	and.w	r3, r3, #8
 8005002:	2b08      	cmp	r3, #8
 8005004:	d11b      	bne.n	800503e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f06f 0208 	mvn.w	r2, #8
 800500e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2204      	movs	r2, #4
 8005014:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	f003 0303 	and.w	r3, r3, #3
 8005020:	2b00      	cmp	r3, #0
 8005022:	d003      	beq.n	800502c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f95d 	bl	80052e4 <HAL_TIM_IC_CaptureCallback>
 800502a:	e005      	b.n	8005038 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 f94f 	bl	80052d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f960 	bl	80052f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	f003 0310 	and.w	r3, r3, #16
 8005048:	2b10      	cmp	r3, #16
 800504a:	d122      	bne.n	8005092 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f003 0310 	and.w	r3, r3, #16
 8005056:	2b10      	cmp	r3, #16
 8005058:	d11b      	bne.n	8005092 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f06f 0210 	mvn.w	r2, #16
 8005062:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2208      	movs	r2, #8
 8005068:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	69db      	ldr	r3, [r3, #28]
 8005070:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005074:	2b00      	cmp	r3, #0
 8005076:	d003      	beq.n	8005080 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f933 	bl	80052e4 <HAL_TIM_IC_CaptureCallback>
 800507e:	e005      	b.n	800508c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 f925 	bl	80052d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f936 	bl	80052f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b01      	cmp	r3, #1
 800509e:	d10e      	bne.n	80050be <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d107      	bne.n	80050be <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f06f 0201 	mvn.w	r2, #1
 80050b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f7fc fc93 	bl	80019e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c8:	2b80      	cmp	r3, #128	; 0x80
 80050ca:	d10e      	bne.n	80050ea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d6:	2b80      	cmp	r3, #128	; 0x80
 80050d8:	d107      	bne.n	80050ea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 fbf1 	bl	80058cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f4:	2b40      	cmp	r3, #64	; 0x40
 80050f6:	d10e      	bne.n	8005116 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005102:	2b40      	cmp	r3, #64	; 0x40
 8005104:	d107      	bne.n	8005116 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800510e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 f8fb 	bl	800530c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	f003 0320 	and.w	r3, r3, #32
 8005120:	2b20      	cmp	r3, #32
 8005122:	d10e      	bne.n	8005142 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	f003 0320 	and.w	r3, r3, #32
 800512e:	2b20      	cmp	r3, #32
 8005130:	d107      	bne.n	8005142 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f06f 0220 	mvn.w	r2, #32
 800513a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 fbbb 	bl	80058b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005142:	bf00      	nop
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
	...

0800514c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005158:	2300      	movs	r3, #0
 800515a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005162:	2b01      	cmp	r3, #1
 8005164:	d101      	bne.n	800516a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005166:	2302      	movs	r3, #2
 8005168:	e0ae      	b.n	80052c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2b0c      	cmp	r3, #12
 8005176:	f200 809f 	bhi.w	80052b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800517a:	a201      	add	r2, pc, #4	; (adr r2, 8005180 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800517c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005180:	080051b5 	.word	0x080051b5
 8005184:	080052b9 	.word	0x080052b9
 8005188:	080052b9 	.word	0x080052b9
 800518c:	080052b9 	.word	0x080052b9
 8005190:	080051f5 	.word	0x080051f5
 8005194:	080052b9 	.word	0x080052b9
 8005198:	080052b9 	.word	0x080052b9
 800519c:	080052b9 	.word	0x080052b9
 80051a0:	08005237 	.word	0x08005237
 80051a4:	080052b9 	.word	0x080052b9
 80051a8:	080052b9 	.word	0x080052b9
 80051ac:	080052b9 	.word	0x080052b9
 80051b0:	08005277 	.word	0x08005277
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68b9      	ldr	r1, [r7, #8]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 f950 	bl	8005460 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	699a      	ldr	r2, [r3, #24]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 0208 	orr.w	r2, r2, #8
 80051ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	699a      	ldr	r2, [r3, #24]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 0204 	bic.w	r2, r2, #4
 80051de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6999      	ldr	r1, [r3, #24]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	691a      	ldr	r2, [r3, #16]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	619a      	str	r2, [r3, #24]
      break;
 80051f2:	e064      	b.n	80052be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68b9      	ldr	r1, [r7, #8]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 f9a0 	bl	8005540 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699a      	ldr	r2, [r3, #24]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800520e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	699a      	ldr	r2, [r3, #24]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800521e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	6999      	ldr	r1, [r3, #24]
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	021a      	lsls	r2, r3, #8
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	430a      	orrs	r2, r1
 8005232:	619a      	str	r2, [r3, #24]
      break;
 8005234:	e043      	b.n	80052be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68b9      	ldr	r1, [r7, #8]
 800523c:	4618      	mov	r0, r3
 800523e:	f000 f9f5 	bl	800562c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	69da      	ldr	r2, [r3, #28]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f042 0208 	orr.w	r2, r2, #8
 8005250:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	69da      	ldr	r2, [r3, #28]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 0204 	bic.w	r2, r2, #4
 8005260:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	69d9      	ldr	r1, [r3, #28]
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	691a      	ldr	r2, [r3, #16]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	430a      	orrs	r2, r1
 8005272:	61da      	str	r2, [r3, #28]
      break;
 8005274:	e023      	b.n	80052be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68b9      	ldr	r1, [r7, #8]
 800527c:	4618      	mov	r0, r3
 800527e:	f000 fa49 	bl	8005714 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	69da      	ldr	r2, [r3, #28]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005290:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	69da      	ldr	r2, [r3, #28]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	69d9      	ldr	r1, [r3, #28]
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	021a      	lsls	r2, r3, #8
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	61da      	str	r2, [r3, #28]
      break;
 80052b6:	e002      	b.n	80052be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	75fb      	strb	r3, [r7, #23]
      break;
 80052bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3718      	adds	r7, #24
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a40      	ldr	r2, [pc, #256]	; (8005434 <TIM_Base_SetConfig+0x114>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d013      	beq.n	8005360 <TIM_Base_SetConfig+0x40>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800533e:	d00f      	beq.n	8005360 <TIM_Base_SetConfig+0x40>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a3d      	ldr	r2, [pc, #244]	; (8005438 <TIM_Base_SetConfig+0x118>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d00b      	beq.n	8005360 <TIM_Base_SetConfig+0x40>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a3c      	ldr	r2, [pc, #240]	; (800543c <TIM_Base_SetConfig+0x11c>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d007      	beq.n	8005360 <TIM_Base_SetConfig+0x40>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a3b      	ldr	r2, [pc, #236]	; (8005440 <TIM_Base_SetConfig+0x120>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d003      	beq.n	8005360 <TIM_Base_SetConfig+0x40>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a3a      	ldr	r2, [pc, #232]	; (8005444 <TIM_Base_SetConfig+0x124>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d108      	bne.n	8005372 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005366:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	4313      	orrs	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a2f      	ldr	r2, [pc, #188]	; (8005434 <TIM_Base_SetConfig+0x114>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d02b      	beq.n	80053d2 <TIM_Base_SetConfig+0xb2>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005380:	d027      	beq.n	80053d2 <TIM_Base_SetConfig+0xb2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a2c      	ldr	r2, [pc, #176]	; (8005438 <TIM_Base_SetConfig+0x118>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d023      	beq.n	80053d2 <TIM_Base_SetConfig+0xb2>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a2b      	ldr	r2, [pc, #172]	; (800543c <TIM_Base_SetConfig+0x11c>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d01f      	beq.n	80053d2 <TIM_Base_SetConfig+0xb2>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a2a      	ldr	r2, [pc, #168]	; (8005440 <TIM_Base_SetConfig+0x120>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d01b      	beq.n	80053d2 <TIM_Base_SetConfig+0xb2>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a29      	ldr	r2, [pc, #164]	; (8005444 <TIM_Base_SetConfig+0x124>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d017      	beq.n	80053d2 <TIM_Base_SetConfig+0xb2>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a28      	ldr	r2, [pc, #160]	; (8005448 <TIM_Base_SetConfig+0x128>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d013      	beq.n	80053d2 <TIM_Base_SetConfig+0xb2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a27      	ldr	r2, [pc, #156]	; (800544c <TIM_Base_SetConfig+0x12c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d00f      	beq.n	80053d2 <TIM_Base_SetConfig+0xb2>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a26      	ldr	r2, [pc, #152]	; (8005450 <TIM_Base_SetConfig+0x130>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d00b      	beq.n	80053d2 <TIM_Base_SetConfig+0xb2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a25      	ldr	r2, [pc, #148]	; (8005454 <TIM_Base_SetConfig+0x134>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d007      	beq.n	80053d2 <TIM_Base_SetConfig+0xb2>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a24      	ldr	r2, [pc, #144]	; (8005458 <TIM_Base_SetConfig+0x138>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d003      	beq.n	80053d2 <TIM_Base_SetConfig+0xb2>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a23      	ldr	r2, [pc, #140]	; (800545c <TIM_Base_SetConfig+0x13c>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d108      	bne.n	80053e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	689a      	ldr	r2, [r3, #8]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a0a      	ldr	r2, [pc, #40]	; (8005434 <TIM_Base_SetConfig+0x114>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d003      	beq.n	8005418 <TIM_Base_SetConfig+0xf8>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a0c      	ldr	r2, [pc, #48]	; (8005444 <TIM_Base_SetConfig+0x124>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d103      	bne.n	8005420 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	691a      	ldr	r2, [r3, #16]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	615a      	str	r2, [r3, #20]
}
 8005426:	bf00      	nop
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	40010000 	.word	0x40010000
 8005438:	40000400 	.word	0x40000400
 800543c:	40000800 	.word	0x40000800
 8005440:	40000c00 	.word	0x40000c00
 8005444:	40010400 	.word	0x40010400
 8005448:	40014000 	.word	0x40014000
 800544c:	40014400 	.word	0x40014400
 8005450:	40014800 	.word	0x40014800
 8005454:	40001800 	.word	0x40001800
 8005458:	40001c00 	.word	0x40001c00
 800545c:	40002000 	.word	0x40002000

08005460 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	f023 0201 	bic.w	r2, r3, #1
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f023 0303 	bic.w	r3, r3, #3
 8005496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	4313      	orrs	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f023 0302 	bic.w	r3, r3, #2
 80054a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a20      	ldr	r2, [pc, #128]	; (8005538 <TIM_OC1_SetConfig+0xd8>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d003      	beq.n	80054c4 <TIM_OC1_SetConfig+0x64>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a1f      	ldr	r2, [pc, #124]	; (800553c <TIM_OC1_SetConfig+0xdc>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d10c      	bne.n	80054de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	f023 0308 	bic.w	r3, r3, #8
 80054ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f023 0304 	bic.w	r3, r3, #4
 80054dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a15      	ldr	r2, [pc, #84]	; (8005538 <TIM_OC1_SetConfig+0xd8>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d003      	beq.n	80054ee <TIM_OC1_SetConfig+0x8e>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a14      	ldr	r2, [pc, #80]	; (800553c <TIM_OC1_SetConfig+0xdc>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d111      	bne.n	8005512 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	4313      	orrs	r3, r2
 8005506:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	4313      	orrs	r3, r2
 8005510:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	621a      	str	r2, [r3, #32]
}
 800552c:	bf00      	nop
 800552e:	371c      	adds	r7, #28
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr
 8005538:	40010000 	.word	0x40010000
 800553c:	40010400 	.word	0x40010400

08005540 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005540:	b480      	push	{r7}
 8005542:	b087      	sub	sp, #28
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	f023 0210 	bic.w	r2, r3, #16
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800556e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005576:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	021b      	lsls	r3, r3, #8
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	4313      	orrs	r3, r2
 8005582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	f023 0320 	bic.w	r3, r3, #32
 800558a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	011b      	lsls	r3, r3, #4
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	4313      	orrs	r3, r2
 8005596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a22      	ldr	r2, [pc, #136]	; (8005624 <TIM_OC2_SetConfig+0xe4>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d003      	beq.n	80055a8 <TIM_OC2_SetConfig+0x68>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a21      	ldr	r2, [pc, #132]	; (8005628 <TIM_OC2_SetConfig+0xe8>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d10d      	bne.n	80055c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	011b      	lsls	r3, r3, #4
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a17      	ldr	r2, [pc, #92]	; (8005624 <TIM_OC2_SetConfig+0xe4>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d003      	beq.n	80055d4 <TIM_OC2_SetConfig+0x94>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a16      	ldr	r2, [pc, #88]	; (8005628 <TIM_OC2_SetConfig+0xe8>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d113      	bne.n	80055fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	695b      	ldr	r3, [r3, #20]
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	621a      	str	r2, [r3, #32]
}
 8005616:	bf00      	nop
 8005618:	371c      	adds	r7, #28
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	40010000 	.word	0x40010000
 8005628:	40010400 	.word	0x40010400

0800562c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800562c:	b480      	push	{r7}
 800562e:	b087      	sub	sp, #28
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f023 0303 	bic.w	r3, r3, #3
 8005662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	4313      	orrs	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005674:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	021b      	lsls	r3, r3, #8
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	4313      	orrs	r3, r2
 8005680:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a21      	ldr	r2, [pc, #132]	; (800570c <TIM_OC3_SetConfig+0xe0>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d003      	beq.n	8005692 <TIM_OC3_SetConfig+0x66>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a20      	ldr	r2, [pc, #128]	; (8005710 <TIM_OC3_SetConfig+0xe4>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d10d      	bne.n	80056ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005698:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	021b      	lsls	r3, r3, #8
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a16      	ldr	r2, [pc, #88]	; (800570c <TIM_OC3_SetConfig+0xe0>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d003      	beq.n	80056be <TIM_OC3_SetConfig+0x92>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a15      	ldr	r2, [pc, #84]	; (8005710 <TIM_OC3_SetConfig+0xe4>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d113      	bne.n	80056e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	011b      	lsls	r3, r3, #4
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	011b      	lsls	r3, r3, #4
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	621a      	str	r2, [r3, #32]
}
 8005700:	bf00      	nop
 8005702:	371c      	adds	r7, #28
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr
 800570c:	40010000 	.word	0x40010000
 8005710:	40010400 	.word	0x40010400

08005714 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005714:	b480      	push	{r7}
 8005716:	b087      	sub	sp, #28
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	69db      	ldr	r3, [r3, #28]
 800573a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800574a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	021b      	lsls	r3, r3, #8
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	4313      	orrs	r3, r2
 8005756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800575e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	031b      	lsls	r3, r3, #12
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	4313      	orrs	r3, r2
 800576a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a12      	ldr	r2, [pc, #72]	; (80057b8 <TIM_OC4_SetConfig+0xa4>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d003      	beq.n	800577c <TIM_OC4_SetConfig+0x68>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a11      	ldr	r2, [pc, #68]	; (80057bc <TIM_OC4_SetConfig+0xa8>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d109      	bne.n	8005790 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005782:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	019b      	lsls	r3, r3, #6
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	4313      	orrs	r3, r2
 800578e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	621a      	str	r2, [r3, #32]
}
 80057aa:	bf00      	nop
 80057ac:	371c      	adds	r7, #28
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	40010000 	.word	0x40010000
 80057bc:	40010400 	.word	0x40010400

080057c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d101      	bne.n	80057d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057d4:	2302      	movs	r3, #2
 80057d6:	e05a      	b.n	800588e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2202      	movs	r2, #2
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	4313      	orrs	r3, r2
 8005808:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a21      	ldr	r2, [pc, #132]	; (800589c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d022      	beq.n	8005862 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005824:	d01d      	beq.n	8005862 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a1d      	ldr	r2, [pc, #116]	; (80058a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d018      	beq.n	8005862 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a1b      	ldr	r2, [pc, #108]	; (80058a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d013      	beq.n	8005862 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a1a      	ldr	r2, [pc, #104]	; (80058a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d00e      	beq.n	8005862 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a18      	ldr	r2, [pc, #96]	; (80058ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d009      	beq.n	8005862 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a17      	ldr	r2, [pc, #92]	; (80058b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d004      	beq.n	8005862 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a15      	ldr	r2, [pc, #84]	; (80058b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d10c      	bne.n	800587c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005868:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	4313      	orrs	r3, r2
 8005872:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3714      	adds	r7, #20
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	40010000 	.word	0x40010000
 80058a0:	40000400 	.word	0x40000400
 80058a4:	40000800 	.word	0x40000800
 80058a8:	40000c00 	.word	0x40000c00
 80058ac:	40010400 	.word	0x40010400
 80058b0:	40014000 	.word	0x40014000
 80058b4:	40001800 	.word	0x40001800

080058b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d101      	bne.n	80058f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e03f      	b.n	8005972 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d106      	bne.n	800590c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7fc fb0a 	bl	8001f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2224      	movs	r2, #36	; 0x24
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005922:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 f929 	bl	8005b7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	691a      	ldr	r2, [r3, #16]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005938:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	695a      	ldr	r2, [r3, #20]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005948:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68da      	ldr	r2, [r3, #12]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005958:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2220      	movs	r2, #32
 8005964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2220      	movs	r2, #32
 800596c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3708      	adds	r7, #8
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b08a      	sub	sp, #40	; 0x28
 800597e:	af02      	add	r7, sp, #8
 8005980:	60f8      	str	r0, [r7, #12]
 8005982:	60b9      	str	r1, [r7, #8]
 8005984:	603b      	str	r3, [r7, #0]
 8005986:	4613      	mov	r3, r2
 8005988:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800598a:	2300      	movs	r3, #0
 800598c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b20      	cmp	r3, #32
 8005998:	d17c      	bne.n	8005a94 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d002      	beq.n	80059a6 <HAL_UART_Transmit+0x2c>
 80059a0:	88fb      	ldrh	r3, [r7, #6]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e075      	b.n	8005a96 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d101      	bne.n	80059b8 <HAL_UART_Transmit+0x3e>
 80059b4:	2302      	movs	r3, #2
 80059b6:	e06e      	b.n	8005a96 <HAL_UART_Transmit+0x11c>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2221      	movs	r2, #33	; 0x21
 80059ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059ce:	f7fc fc8f 	bl	80022f0 <HAL_GetTick>
 80059d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	88fa      	ldrh	r2, [r7, #6]
 80059d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	88fa      	ldrh	r2, [r7, #6]
 80059de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059e8:	d108      	bne.n	80059fc <HAL_UART_Transmit+0x82>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d104      	bne.n	80059fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80059f2:	2300      	movs	r3, #0
 80059f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	61bb      	str	r3, [r7, #24]
 80059fa:	e003      	b.n	8005a04 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a00:	2300      	movs	r3, #0
 8005a02:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005a0c:	e02a      	b.n	8005a64 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	9300      	str	r3, [sp, #0]
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	2200      	movs	r2, #0
 8005a16:	2180      	movs	r1, #128	; 0x80
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	f000 f840 	bl	8005a9e <UART_WaitOnFlagUntilTimeout>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d001      	beq.n	8005a28 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e036      	b.n	8005a96 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10b      	bne.n	8005a46 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	881b      	ldrh	r3, [r3, #0]
 8005a32:	461a      	mov	r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	3302      	adds	r3, #2
 8005a42:	61bb      	str	r3, [r7, #24]
 8005a44:	e007      	b.n	8005a56 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	781a      	ldrb	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	3301      	adds	r3, #1
 8005a54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1cf      	bne.n	8005a0e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	9300      	str	r3, [sp, #0]
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	2200      	movs	r2, #0
 8005a76:	2140      	movs	r1, #64	; 0x40
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f000 f810 	bl	8005a9e <UART_WaitOnFlagUntilTimeout>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d001      	beq.n	8005a88 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e006      	b.n	8005a96 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005a90:	2300      	movs	r3, #0
 8005a92:	e000      	b.n	8005a96 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005a94:	2302      	movs	r3, #2
  }
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3720      	adds	r7, #32
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b090      	sub	sp, #64	; 0x40
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	60f8      	str	r0, [r7, #12]
 8005aa6:	60b9      	str	r1, [r7, #8]
 8005aa8:	603b      	str	r3, [r7, #0]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aae:	e050      	b.n	8005b52 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab6:	d04c      	beq.n	8005b52 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d007      	beq.n	8005ace <UART_WaitOnFlagUntilTimeout+0x30>
 8005abe:	f7fc fc17 	bl	80022f0 <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d241      	bcs.n	8005b52 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	330c      	adds	r3, #12
 8005ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad8:	e853 3f00 	ldrex	r3, [r3]
 8005adc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	330c      	adds	r3, #12
 8005aec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005aee:	637a      	str	r2, [r7, #52]	; 0x34
 8005af0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005af4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005af6:	e841 2300 	strex	r3, r2, [r1]
 8005afa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1e5      	bne.n	8005ace <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3314      	adds	r3, #20
 8005b08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	e853 3f00 	ldrex	r3, [r3]
 8005b10:	613b      	str	r3, [r7, #16]
   return(result);
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	f023 0301 	bic.w	r3, r3, #1
 8005b18:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	3314      	adds	r3, #20
 8005b20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b22:	623a      	str	r2, [r7, #32]
 8005b24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b26:	69f9      	ldr	r1, [r7, #28]
 8005b28:	6a3a      	ldr	r2, [r7, #32]
 8005b2a:	e841 2300 	strex	r3, r2, [r1]
 8005b2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1e5      	bne.n	8005b02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2220      	movs	r2, #32
 8005b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2220      	movs	r2, #32
 8005b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e00f      	b.n	8005b72 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	bf0c      	ite	eq
 8005b62:	2301      	moveq	r3, #1
 8005b64:	2300      	movne	r3, #0
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	461a      	mov	r2, r3
 8005b6a:	79fb      	ldrb	r3, [r7, #7]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d09f      	beq.n	8005ab0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3740      	adds	r7, #64	; 0x40
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
	...

08005b7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b80:	b09f      	sub	sp, #124	; 0x7c
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b92:	68d9      	ldr	r1, [r3, #12]
 8005b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	ea40 0301 	orr.w	r3, r0, r1
 8005b9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ba0:	689a      	ldr	r2, [r3, #8]
 8005ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	431a      	orrs	r2, r3
 8005ba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005baa:	695b      	ldr	r3, [r3, #20]
 8005bac:	431a      	orrs	r2, r3
 8005bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005bc0:	f021 010c 	bic.w	r1, r1, #12
 8005bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bca:	430b      	orrs	r3, r1
 8005bcc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bda:	6999      	ldr	r1, [r3, #24]
 8005bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	ea40 0301 	orr.w	r3, r0, r1
 8005be4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	4bc5      	ldr	r3, [pc, #788]	; (8005f00 <UART_SetConfig+0x384>)
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d004      	beq.n	8005bfa <UART_SetConfig+0x7e>
 8005bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	4bc3      	ldr	r3, [pc, #780]	; (8005f04 <UART_SetConfig+0x388>)
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d103      	bne.n	8005c02 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005bfa:	f7fe f9ff 	bl	8003ffc <HAL_RCC_GetPCLK2Freq>
 8005bfe:	6778      	str	r0, [r7, #116]	; 0x74
 8005c00:	e002      	b.n	8005c08 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c02:	f7fe f9e7 	bl	8003fd4 <HAL_RCC_GetPCLK1Freq>
 8005c06:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c0a:	69db      	ldr	r3, [r3, #28]
 8005c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c10:	f040 80b6 	bne.w	8005d80 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c16:	461c      	mov	r4, r3
 8005c18:	f04f 0500 	mov.w	r5, #0
 8005c1c:	4622      	mov	r2, r4
 8005c1e:	462b      	mov	r3, r5
 8005c20:	1891      	adds	r1, r2, r2
 8005c22:	6439      	str	r1, [r7, #64]	; 0x40
 8005c24:	415b      	adcs	r3, r3
 8005c26:	647b      	str	r3, [r7, #68]	; 0x44
 8005c28:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c2c:	1912      	adds	r2, r2, r4
 8005c2e:	eb45 0303 	adc.w	r3, r5, r3
 8005c32:	f04f 0000 	mov.w	r0, #0
 8005c36:	f04f 0100 	mov.w	r1, #0
 8005c3a:	00d9      	lsls	r1, r3, #3
 8005c3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c40:	00d0      	lsls	r0, r2, #3
 8005c42:	4602      	mov	r2, r0
 8005c44:	460b      	mov	r3, r1
 8005c46:	1911      	adds	r1, r2, r4
 8005c48:	6639      	str	r1, [r7, #96]	; 0x60
 8005c4a:	416b      	adcs	r3, r5
 8005c4c:	667b      	str	r3, [r7, #100]	; 0x64
 8005c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	461a      	mov	r2, r3
 8005c54:	f04f 0300 	mov.w	r3, #0
 8005c58:	1891      	adds	r1, r2, r2
 8005c5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c5c:	415b      	adcs	r3, r3
 8005c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c64:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005c68:	f7fa fb1a 	bl	80002a0 <__aeabi_uldivmod>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	460b      	mov	r3, r1
 8005c70:	4ba5      	ldr	r3, [pc, #660]	; (8005f08 <UART_SetConfig+0x38c>)
 8005c72:	fba3 2302 	umull	r2, r3, r3, r2
 8005c76:	095b      	lsrs	r3, r3, #5
 8005c78:	011e      	lsls	r6, r3, #4
 8005c7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c7c:	461c      	mov	r4, r3
 8005c7e:	f04f 0500 	mov.w	r5, #0
 8005c82:	4622      	mov	r2, r4
 8005c84:	462b      	mov	r3, r5
 8005c86:	1891      	adds	r1, r2, r2
 8005c88:	6339      	str	r1, [r7, #48]	; 0x30
 8005c8a:	415b      	adcs	r3, r3
 8005c8c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c8e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005c92:	1912      	adds	r2, r2, r4
 8005c94:	eb45 0303 	adc.w	r3, r5, r3
 8005c98:	f04f 0000 	mov.w	r0, #0
 8005c9c:	f04f 0100 	mov.w	r1, #0
 8005ca0:	00d9      	lsls	r1, r3, #3
 8005ca2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ca6:	00d0      	lsls	r0, r2, #3
 8005ca8:	4602      	mov	r2, r0
 8005caa:	460b      	mov	r3, r1
 8005cac:	1911      	adds	r1, r2, r4
 8005cae:	65b9      	str	r1, [r7, #88]	; 0x58
 8005cb0:	416b      	adcs	r3, r5
 8005cb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	461a      	mov	r2, r3
 8005cba:	f04f 0300 	mov.w	r3, #0
 8005cbe:	1891      	adds	r1, r2, r2
 8005cc0:	62b9      	str	r1, [r7, #40]	; 0x28
 8005cc2:	415b      	adcs	r3, r3
 8005cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005cca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005cce:	f7fa fae7 	bl	80002a0 <__aeabi_uldivmod>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	4b8c      	ldr	r3, [pc, #560]	; (8005f08 <UART_SetConfig+0x38c>)
 8005cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8005cdc:	095b      	lsrs	r3, r3, #5
 8005cde:	2164      	movs	r1, #100	; 0x64
 8005ce0:	fb01 f303 	mul.w	r3, r1, r3
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	00db      	lsls	r3, r3, #3
 8005ce8:	3332      	adds	r3, #50	; 0x32
 8005cea:	4a87      	ldr	r2, [pc, #540]	; (8005f08 <UART_SetConfig+0x38c>)
 8005cec:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf0:	095b      	lsrs	r3, r3, #5
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005cf8:	441e      	add	r6, r3
 8005cfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f04f 0100 	mov.w	r1, #0
 8005d02:	4602      	mov	r2, r0
 8005d04:	460b      	mov	r3, r1
 8005d06:	1894      	adds	r4, r2, r2
 8005d08:	623c      	str	r4, [r7, #32]
 8005d0a:	415b      	adcs	r3, r3
 8005d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d12:	1812      	adds	r2, r2, r0
 8005d14:	eb41 0303 	adc.w	r3, r1, r3
 8005d18:	f04f 0400 	mov.w	r4, #0
 8005d1c:	f04f 0500 	mov.w	r5, #0
 8005d20:	00dd      	lsls	r5, r3, #3
 8005d22:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005d26:	00d4      	lsls	r4, r2, #3
 8005d28:	4622      	mov	r2, r4
 8005d2a:	462b      	mov	r3, r5
 8005d2c:	1814      	adds	r4, r2, r0
 8005d2e:	653c      	str	r4, [r7, #80]	; 0x50
 8005d30:	414b      	adcs	r3, r1
 8005d32:	657b      	str	r3, [r7, #84]	; 0x54
 8005d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	461a      	mov	r2, r3
 8005d3a:	f04f 0300 	mov.w	r3, #0
 8005d3e:	1891      	adds	r1, r2, r2
 8005d40:	61b9      	str	r1, [r7, #24]
 8005d42:	415b      	adcs	r3, r3
 8005d44:	61fb      	str	r3, [r7, #28]
 8005d46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d4a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005d4e:	f7fa faa7 	bl	80002a0 <__aeabi_uldivmod>
 8005d52:	4602      	mov	r2, r0
 8005d54:	460b      	mov	r3, r1
 8005d56:	4b6c      	ldr	r3, [pc, #432]	; (8005f08 <UART_SetConfig+0x38c>)
 8005d58:	fba3 1302 	umull	r1, r3, r3, r2
 8005d5c:	095b      	lsrs	r3, r3, #5
 8005d5e:	2164      	movs	r1, #100	; 0x64
 8005d60:	fb01 f303 	mul.w	r3, r1, r3
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	00db      	lsls	r3, r3, #3
 8005d68:	3332      	adds	r3, #50	; 0x32
 8005d6a:	4a67      	ldr	r2, [pc, #412]	; (8005f08 <UART_SetConfig+0x38c>)
 8005d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d70:	095b      	lsrs	r3, r3, #5
 8005d72:	f003 0207 	and.w	r2, r3, #7
 8005d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4432      	add	r2, r6
 8005d7c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d7e:	e0b9      	b.n	8005ef4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d82:	461c      	mov	r4, r3
 8005d84:	f04f 0500 	mov.w	r5, #0
 8005d88:	4622      	mov	r2, r4
 8005d8a:	462b      	mov	r3, r5
 8005d8c:	1891      	adds	r1, r2, r2
 8005d8e:	6139      	str	r1, [r7, #16]
 8005d90:	415b      	adcs	r3, r3
 8005d92:	617b      	str	r3, [r7, #20]
 8005d94:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005d98:	1912      	adds	r2, r2, r4
 8005d9a:	eb45 0303 	adc.w	r3, r5, r3
 8005d9e:	f04f 0000 	mov.w	r0, #0
 8005da2:	f04f 0100 	mov.w	r1, #0
 8005da6:	00d9      	lsls	r1, r3, #3
 8005da8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005dac:	00d0      	lsls	r0, r2, #3
 8005dae:	4602      	mov	r2, r0
 8005db0:	460b      	mov	r3, r1
 8005db2:	eb12 0804 	adds.w	r8, r2, r4
 8005db6:	eb43 0905 	adc.w	r9, r3, r5
 8005dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f04f 0100 	mov.w	r1, #0
 8005dc4:	f04f 0200 	mov.w	r2, #0
 8005dc8:	f04f 0300 	mov.w	r3, #0
 8005dcc:	008b      	lsls	r3, r1, #2
 8005dce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005dd2:	0082      	lsls	r2, r0, #2
 8005dd4:	4640      	mov	r0, r8
 8005dd6:	4649      	mov	r1, r9
 8005dd8:	f7fa fa62 	bl	80002a0 <__aeabi_uldivmod>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	460b      	mov	r3, r1
 8005de0:	4b49      	ldr	r3, [pc, #292]	; (8005f08 <UART_SetConfig+0x38c>)
 8005de2:	fba3 2302 	umull	r2, r3, r3, r2
 8005de6:	095b      	lsrs	r3, r3, #5
 8005de8:	011e      	lsls	r6, r3, #4
 8005dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dec:	4618      	mov	r0, r3
 8005dee:	f04f 0100 	mov.w	r1, #0
 8005df2:	4602      	mov	r2, r0
 8005df4:	460b      	mov	r3, r1
 8005df6:	1894      	adds	r4, r2, r2
 8005df8:	60bc      	str	r4, [r7, #8]
 8005dfa:	415b      	adcs	r3, r3
 8005dfc:	60fb      	str	r3, [r7, #12]
 8005dfe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e02:	1812      	adds	r2, r2, r0
 8005e04:	eb41 0303 	adc.w	r3, r1, r3
 8005e08:	f04f 0400 	mov.w	r4, #0
 8005e0c:	f04f 0500 	mov.w	r5, #0
 8005e10:	00dd      	lsls	r5, r3, #3
 8005e12:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005e16:	00d4      	lsls	r4, r2, #3
 8005e18:	4622      	mov	r2, r4
 8005e1a:	462b      	mov	r3, r5
 8005e1c:	1814      	adds	r4, r2, r0
 8005e1e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005e20:	414b      	adcs	r3, r1
 8005e22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f04f 0100 	mov.w	r1, #0
 8005e2e:	f04f 0200 	mov.w	r2, #0
 8005e32:	f04f 0300 	mov.w	r3, #0
 8005e36:	008b      	lsls	r3, r1, #2
 8005e38:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005e3c:	0082      	lsls	r2, r0, #2
 8005e3e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005e42:	f7fa fa2d 	bl	80002a0 <__aeabi_uldivmod>
 8005e46:	4602      	mov	r2, r0
 8005e48:	460b      	mov	r3, r1
 8005e4a:	4b2f      	ldr	r3, [pc, #188]	; (8005f08 <UART_SetConfig+0x38c>)
 8005e4c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e50:	095b      	lsrs	r3, r3, #5
 8005e52:	2164      	movs	r1, #100	; 0x64
 8005e54:	fb01 f303 	mul.w	r3, r1, r3
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	011b      	lsls	r3, r3, #4
 8005e5c:	3332      	adds	r3, #50	; 0x32
 8005e5e:	4a2a      	ldr	r2, [pc, #168]	; (8005f08 <UART_SetConfig+0x38c>)
 8005e60:	fba2 2303 	umull	r2, r3, r2, r3
 8005e64:	095b      	lsrs	r3, r3, #5
 8005e66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e6a:	441e      	add	r6, r3
 8005e6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f04f 0100 	mov.w	r1, #0
 8005e74:	4602      	mov	r2, r0
 8005e76:	460b      	mov	r3, r1
 8005e78:	1894      	adds	r4, r2, r2
 8005e7a:	603c      	str	r4, [r7, #0]
 8005e7c:	415b      	adcs	r3, r3
 8005e7e:	607b      	str	r3, [r7, #4]
 8005e80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e84:	1812      	adds	r2, r2, r0
 8005e86:	eb41 0303 	adc.w	r3, r1, r3
 8005e8a:	f04f 0400 	mov.w	r4, #0
 8005e8e:	f04f 0500 	mov.w	r5, #0
 8005e92:	00dd      	lsls	r5, r3, #3
 8005e94:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005e98:	00d4      	lsls	r4, r2, #3
 8005e9a:	4622      	mov	r2, r4
 8005e9c:	462b      	mov	r3, r5
 8005e9e:	eb12 0a00 	adds.w	sl, r2, r0
 8005ea2:	eb43 0b01 	adc.w	fp, r3, r1
 8005ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f04f 0100 	mov.w	r1, #0
 8005eb0:	f04f 0200 	mov.w	r2, #0
 8005eb4:	f04f 0300 	mov.w	r3, #0
 8005eb8:	008b      	lsls	r3, r1, #2
 8005eba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ebe:	0082      	lsls	r2, r0, #2
 8005ec0:	4650      	mov	r0, sl
 8005ec2:	4659      	mov	r1, fp
 8005ec4:	f7fa f9ec 	bl	80002a0 <__aeabi_uldivmod>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	460b      	mov	r3, r1
 8005ecc:	4b0e      	ldr	r3, [pc, #56]	; (8005f08 <UART_SetConfig+0x38c>)
 8005ece:	fba3 1302 	umull	r1, r3, r3, r2
 8005ed2:	095b      	lsrs	r3, r3, #5
 8005ed4:	2164      	movs	r1, #100	; 0x64
 8005ed6:	fb01 f303 	mul.w	r3, r1, r3
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	011b      	lsls	r3, r3, #4
 8005ede:	3332      	adds	r3, #50	; 0x32
 8005ee0:	4a09      	ldr	r2, [pc, #36]	; (8005f08 <UART_SetConfig+0x38c>)
 8005ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee6:	095b      	lsrs	r3, r3, #5
 8005ee8:	f003 020f 	and.w	r2, r3, #15
 8005eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4432      	add	r2, r6
 8005ef2:	609a      	str	r2, [r3, #8]
}
 8005ef4:	bf00      	nop
 8005ef6:	377c      	adds	r7, #124	; 0x7c
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005efe:	bf00      	nop
 8005f00:	40011000 	.word	0x40011000
 8005f04:	40011400 	.word	0x40011400
 8005f08:	51eb851f 	.word	0x51eb851f

08005f0c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005f10:	4b05      	ldr	r3, [pc, #20]	; (8005f28 <SysTick_Handler+0x1c>)
 8005f12:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005f14:	f000 f996 	bl	8006244 <xTaskGetSchedulerState>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d001      	beq.n	8005f22 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005f1e:	f000 f9fb 	bl	8006318 <xPortSysTickHandler>
  }
}
 8005f22:	bf00      	nop
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	e000e010 	.word	0xe000e010

08005f2c <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	689a      	ldr	r2, [r3, #8]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	683a      	ldr	r2, [r7, #0]
 8005f56:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	1c5a      	adds	r2, r3, #1
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	601a      	str	r2, [r3, #0]
}
 8005f68:	bf00      	nop
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	6892      	ldr	r2, [r2, #8]
 8005f8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	6852      	ldr	r2, [r2, #4]
 8005f94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d103      	bne.n	8005fa8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	1e5a      	subs	r2, r3, #1
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3714      	adds	r7, #20
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fd2:	4b4f      	ldr	r3, [pc, #316]	; (8006110 <xTaskIncrementTick+0x148>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	f040 808f 	bne.w	80060fa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005fdc:	4b4d      	ldr	r3, [pc, #308]	; (8006114 <xTaskIncrementTick+0x14c>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005fe4:	4a4b      	ldr	r2, [pc, #300]	; (8006114 <xTaskIncrementTick+0x14c>)
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d120      	bne.n	8006032 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ff0:	4b49      	ldr	r3, [pc, #292]	; (8006118 <xTaskIncrementTick+0x150>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00a      	beq.n	8006010 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffe:	f383 8811 	msr	BASEPRI, r3
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	f3bf 8f4f 	dsb	sy
 800600a:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800600c:	bf00      	nop
 800600e:	e7fe      	b.n	800600e <xTaskIncrementTick+0x46>
 8006010:	4b41      	ldr	r3, [pc, #260]	; (8006118 <xTaskIncrementTick+0x150>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	60fb      	str	r3, [r7, #12]
 8006016:	4b41      	ldr	r3, [pc, #260]	; (800611c <xTaskIncrementTick+0x154>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a3f      	ldr	r2, [pc, #252]	; (8006118 <xTaskIncrementTick+0x150>)
 800601c:	6013      	str	r3, [r2, #0]
 800601e:	4a3f      	ldr	r2, [pc, #252]	; (800611c <xTaskIncrementTick+0x154>)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6013      	str	r3, [r2, #0]
 8006024:	4b3e      	ldr	r3, [pc, #248]	; (8006120 <xTaskIncrementTick+0x158>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	3301      	adds	r3, #1
 800602a:	4a3d      	ldr	r2, [pc, #244]	; (8006120 <xTaskIncrementTick+0x158>)
 800602c:	6013      	str	r3, [r2, #0]
 800602e:	f000 f8e9 	bl	8006204 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006032:	4b3c      	ldr	r3, [pc, #240]	; (8006124 <xTaskIncrementTick+0x15c>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	429a      	cmp	r2, r3
 800603a:	d349      	bcc.n	80060d0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800603c:	4b36      	ldr	r3, [pc, #216]	; (8006118 <xTaskIncrementTick+0x150>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d104      	bne.n	8006050 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006046:	4b37      	ldr	r3, [pc, #220]	; (8006124 <xTaskIncrementTick+0x15c>)
 8006048:	f04f 32ff 	mov.w	r2, #4294967295
 800604c:	601a      	str	r2, [r3, #0]
					break;
 800604e:	e03f      	b.n	80060d0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006050:	4b31      	ldr	r3, [pc, #196]	; (8006118 <xTaskIncrementTick+0x150>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	429a      	cmp	r2, r3
 8006066:	d203      	bcs.n	8006070 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006068:	4a2e      	ldr	r2, [pc, #184]	; (8006124 <xTaskIncrementTick+0x15c>)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800606e:	e02f      	b.n	80060d0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	3304      	adds	r3, #4
 8006074:	4618      	mov	r0, r3
 8006076:	f7ff ff7d 	bl	8005f74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607e:	2b00      	cmp	r3, #0
 8006080:	d004      	beq.n	800608c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	3318      	adds	r3, #24
 8006086:	4618      	mov	r0, r3
 8006088:	f7ff ff74 	bl	8005f74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006090:	4b25      	ldr	r3, [pc, #148]	; (8006128 <xTaskIncrementTick+0x160>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	429a      	cmp	r2, r3
 8006096:	d903      	bls.n	80060a0 <xTaskIncrementTick+0xd8>
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609c:	4a22      	ldr	r2, [pc, #136]	; (8006128 <xTaskIncrementTick+0x160>)
 800609e:	6013      	str	r3, [r2, #0]
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a4:	4613      	mov	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4413      	add	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4a1f      	ldr	r2, [pc, #124]	; (800612c <xTaskIncrementTick+0x164>)
 80060ae:	441a      	add	r2, r3
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	3304      	adds	r3, #4
 80060b4:	4619      	mov	r1, r3
 80060b6:	4610      	mov	r0, r2
 80060b8:	f7ff ff38 	bl	8005f2c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c0:	4b1b      	ldr	r3, [pc, #108]	; (8006130 <xTaskIncrementTick+0x168>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d3b8      	bcc.n	800603c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80060ca:	2301      	movs	r3, #1
 80060cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060ce:	e7b5      	b.n	800603c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80060d0:	4b17      	ldr	r3, [pc, #92]	; (8006130 <xTaskIncrementTick+0x168>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d6:	4915      	ldr	r1, [pc, #84]	; (800612c <xTaskIncrementTick+0x164>)
 80060d8:	4613      	mov	r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4413      	add	r3, r2
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	440b      	add	r3, r1
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d901      	bls.n	80060ec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80060e8:	2301      	movs	r3, #1
 80060ea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80060ec:	4b11      	ldr	r3, [pc, #68]	; (8006134 <xTaskIncrementTick+0x16c>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d007      	beq.n	8006104 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80060f4:	2301      	movs	r3, #1
 80060f6:	617b      	str	r3, [r7, #20]
 80060f8:	e004      	b.n	8006104 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80060fa:	4b0f      	ldr	r3, [pc, #60]	; (8006138 <xTaskIncrementTick+0x170>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	3301      	adds	r3, #1
 8006100:	4a0d      	ldr	r2, [pc, #52]	; (8006138 <xTaskIncrementTick+0x170>)
 8006102:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006104:	697b      	ldr	r3, [r7, #20]
}
 8006106:	4618      	mov	r0, r3
 8006108:	3718      	adds	r7, #24
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	20000524 	.word	0x20000524
 8006114:	20000508 	.word	0x20000508
 8006118:	20000500 	.word	0x20000500
 800611c:	20000504 	.word	0x20000504
 8006120:	2000051c 	.word	0x2000051c
 8006124:	20000520 	.word	0x20000520
 8006128:	2000050c 	.word	0x2000050c
 800612c:	200000a0 	.word	0x200000a0
 8006130:	2000009c 	.word	0x2000009c
 8006134:	20000518 	.word	0x20000518
 8006138:	20000514 	.word	0x20000514

0800613c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006142:	4b2a      	ldr	r3, [pc, #168]	; (80061ec <vTaskSwitchContext+0xb0>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d003      	beq.n	8006152 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800614a:	4b29      	ldr	r3, [pc, #164]	; (80061f0 <vTaskSwitchContext+0xb4>)
 800614c:	2201      	movs	r2, #1
 800614e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006150:	e046      	b.n	80061e0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006152:	4b27      	ldr	r3, [pc, #156]	; (80061f0 <vTaskSwitchContext+0xb4>)
 8006154:	2200      	movs	r2, #0
 8006156:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006158:	4b26      	ldr	r3, [pc, #152]	; (80061f4 <vTaskSwitchContext+0xb8>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	60fb      	str	r3, [r7, #12]
 800615e:	e010      	b.n	8006182 <vTaskSwitchContext+0x46>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10a      	bne.n	800617c <vTaskSwitchContext+0x40>
	__asm volatile
 8006166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616a:	f383 8811 	msr	BASEPRI, r3
 800616e:	f3bf 8f6f 	isb	sy
 8006172:	f3bf 8f4f 	dsb	sy
 8006176:	607b      	str	r3, [r7, #4]
}
 8006178:	bf00      	nop
 800617a:	e7fe      	b.n	800617a <vTaskSwitchContext+0x3e>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	3b01      	subs	r3, #1
 8006180:	60fb      	str	r3, [r7, #12]
 8006182:	491d      	ldr	r1, [pc, #116]	; (80061f8 <vTaskSwitchContext+0xbc>)
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	4613      	mov	r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4413      	add	r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	440b      	add	r3, r1
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d0e4      	beq.n	8006160 <vTaskSwitchContext+0x24>
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	4613      	mov	r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4413      	add	r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4a15      	ldr	r2, [pc, #84]	; (80061f8 <vTaskSwitchContext+0xbc>)
 80061a2:	4413      	add	r3, r2
 80061a4:	60bb      	str	r3, [r7, #8]
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	685a      	ldr	r2, [r3, #4]
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	605a      	str	r2, [r3, #4]
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	3308      	adds	r3, #8
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d104      	bne.n	80061c6 <vTaskSwitchContext+0x8a>
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	685a      	ldr	r2, [r3, #4]
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	605a      	str	r2, [r3, #4]
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	4a0b      	ldr	r2, [pc, #44]	; (80061fc <vTaskSwitchContext+0xc0>)
 80061ce:	6013      	str	r3, [r2, #0]
 80061d0:	4a08      	ldr	r2, [pc, #32]	; (80061f4 <vTaskSwitchContext+0xb8>)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80061d6:	4b09      	ldr	r3, [pc, #36]	; (80061fc <vTaskSwitchContext+0xc0>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	3354      	adds	r3, #84	; 0x54
 80061dc:	4a08      	ldr	r2, [pc, #32]	; (8006200 <vTaskSwitchContext+0xc4>)
 80061de:	6013      	str	r3, [r2, #0]
}
 80061e0:	bf00      	nop
 80061e2:	3714      	adds	r7, #20
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr
 80061ec:	20000524 	.word	0x20000524
 80061f0:	20000518 	.word	0x20000518
 80061f4:	2000050c 	.word	0x2000050c
 80061f8:	200000a0 	.word	0x200000a0
 80061fc:	2000009c 	.word	0x2000009c
 8006200:	20000014 	.word	0x20000014

08006204 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800620a:	4b0c      	ldr	r3, [pc, #48]	; (800623c <prvResetNextTaskUnblockTime+0x38>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d104      	bne.n	800621e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006214:	4b0a      	ldr	r3, [pc, #40]	; (8006240 <prvResetNextTaskUnblockTime+0x3c>)
 8006216:	f04f 32ff 	mov.w	r2, #4294967295
 800621a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800621c:	e008      	b.n	8006230 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800621e:	4b07      	ldr	r3, [pc, #28]	; (800623c <prvResetNextTaskUnblockTime+0x38>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	4a04      	ldr	r2, [pc, #16]	; (8006240 <prvResetNextTaskUnblockTime+0x3c>)
 800622e:	6013      	str	r3, [r2, #0]
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr
 800623c:	20000500 	.word	0x20000500
 8006240:	20000520 	.word	0x20000520

08006244 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800624a:	4b0b      	ldr	r3, [pc, #44]	; (8006278 <xTaskGetSchedulerState+0x34>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d102      	bne.n	8006258 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006252:	2301      	movs	r3, #1
 8006254:	607b      	str	r3, [r7, #4]
 8006256:	e008      	b.n	800626a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006258:	4b08      	ldr	r3, [pc, #32]	; (800627c <xTaskGetSchedulerState+0x38>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d102      	bne.n	8006266 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006260:	2302      	movs	r3, #2
 8006262:	607b      	str	r3, [r7, #4]
 8006264:	e001      	b.n	800626a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006266:	2300      	movs	r3, #0
 8006268:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800626a:	687b      	ldr	r3, [r7, #4]
	}
 800626c:	4618      	mov	r0, r3
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr
 8006278:	20000510 	.word	0x20000510
 800627c:	20000524 	.word	0x20000524

08006280 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006280:	4b07      	ldr	r3, [pc, #28]	; (80062a0 <pxCurrentTCBConst2>)
 8006282:	6819      	ldr	r1, [r3, #0]
 8006284:	6808      	ldr	r0, [r1, #0]
 8006286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800628a:	f380 8809 	msr	PSP, r0
 800628e:	f3bf 8f6f 	isb	sy
 8006292:	f04f 0000 	mov.w	r0, #0
 8006296:	f380 8811 	msr	BASEPRI, r0
 800629a:	4770      	bx	lr
 800629c:	f3af 8000 	nop.w

080062a0 <pxCurrentTCBConst2>:
 80062a0:	2000009c 	.word	0x2000009c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80062a4:	bf00      	nop
 80062a6:	bf00      	nop
	...

080062b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80062b0:	f3ef 8009 	mrs	r0, PSP
 80062b4:	f3bf 8f6f 	isb	sy
 80062b8:	4b15      	ldr	r3, [pc, #84]	; (8006310 <pxCurrentTCBConst>)
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	f01e 0f10 	tst.w	lr, #16
 80062c0:	bf08      	it	eq
 80062c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80062c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ca:	6010      	str	r0, [r2, #0]
 80062cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80062d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80062d4:	f380 8811 	msr	BASEPRI, r0
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f7ff ff2c 	bl	800613c <vTaskSwitchContext>
 80062e4:	f04f 0000 	mov.w	r0, #0
 80062e8:	f380 8811 	msr	BASEPRI, r0
 80062ec:	bc09      	pop	{r0, r3}
 80062ee:	6819      	ldr	r1, [r3, #0]
 80062f0:	6808      	ldr	r0, [r1, #0]
 80062f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f6:	f01e 0f10 	tst.w	lr, #16
 80062fa:	bf08      	it	eq
 80062fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006300:	f380 8809 	msr	PSP, r0
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	f3af 8000 	nop.w

08006310 <pxCurrentTCBConst>:
 8006310:	2000009c 	.word	0x2000009c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006314:	bf00      	nop
 8006316:	bf00      	nop

08006318 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
	__asm volatile
 800631e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	607b      	str	r3, [r7, #4]
}
 8006330:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006332:	f7ff fe49 	bl	8005fc8 <xTaskIncrementTick>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d003      	beq.n	8006344 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800633c:	4b06      	ldr	r3, [pc, #24]	; (8006358 <xPortSysTickHandler+0x40>)
 800633e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006342:	601a      	str	r2, [r3, #0]
 8006344:	2300      	movs	r3, #0
 8006346:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800634e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006350:	bf00      	nop
 8006352:	3708      	adds	r7, #8
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	e000ed04 	.word	0xe000ed04

0800635c <__errno>:
 800635c:	4b01      	ldr	r3, [pc, #4]	; (8006364 <__errno+0x8>)
 800635e:	6818      	ldr	r0, [r3, #0]
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	20000014 	.word	0x20000014

08006368 <__libc_init_array>:
 8006368:	b570      	push	{r4, r5, r6, lr}
 800636a:	4d0d      	ldr	r5, [pc, #52]	; (80063a0 <__libc_init_array+0x38>)
 800636c:	4c0d      	ldr	r4, [pc, #52]	; (80063a4 <__libc_init_array+0x3c>)
 800636e:	1b64      	subs	r4, r4, r5
 8006370:	10a4      	asrs	r4, r4, #2
 8006372:	2600      	movs	r6, #0
 8006374:	42a6      	cmp	r6, r4
 8006376:	d109      	bne.n	800638c <__libc_init_array+0x24>
 8006378:	4d0b      	ldr	r5, [pc, #44]	; (80063a8 <__libc_init_array+0x40>)
 800637a:	4c0c      	ldr	r4, [pc, #48]	; (80063ac <__libc_init_array+0x44>)
 800637c:	f000 fc4e 	bl	8006c1c <_init>
 8006380:	1b64      	subs	r4, r4, r5
 8006382:	10a4      	asrs	r4, r4, #2
 8006384:	2600      	movs	r6, #0
 8006386:	42a6      	cmp	r6, r4
 8006388:	d105      	bne.n	8006396 <__libc_init_array+0x2e>
 800638a:	bd70      	pop	{r4, r5, r6, pc}
 800638c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006390:	4798      	blx	r3
 8006392:	3601      	adds	r6, #1
 8006394:	e7ee      	b.n	8006374 <__libc_init_array+0xc>
 8006396:	f855 3b04 	ldr.w	r3, [r5], #4
 800639a:	4798      	blx	r3
 800639c:	3601      	adds	r6, #1
 800639e:	e7f2      	b.n	8006386 <__libc_init_array+0x1e>
 80063a0:	08006d6c 	.word	0x08006d6c
 80063a4:	08006d6c 	.word	0x08006d6c
 80063a8:	08006d6c 	.word	0x08006d6c
 80063ac:	08006d70 	.word	0x08006d70

080063b0 <__retarget_lock_acquire_recursive>:
 80063b0:	4770      	bx	lr

080063b2 <__retarget_lock_release_recursive>:
 80063b2:	4770      	bx	lr

080063b4 <memcpy>:
 80063b4:	440a      	add	r2, r1
 80063b6:	4291      	cmp	r1, r2
 80063b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80063bc:	d100      	bne.n	80063c0 <memcpy+0xc>
 80063be:	4770      	bx	lr
 80063c0:	b510      	push	{r4, lr}
 80063c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063ca:	4291      	cmp	r1, r2
 80063cc:	d1f9      	bne.n	80063c2 <memcpy+0xe>
 80063ce:	bd10      	pop	{r4, pc}

080063d0 <memset>:
 80063d0:	4402      	add	r2, r0
 80063d2:	4603      	mov	r3, r0
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d100      	bne.n	80063da <memset+0xa>
 80063d8:	4770      	bx	lr
 80063da:	f803 1b01 	strb.w	r1, [r3], #1
 80063de:	e7f9      	b.n	80063d4 <memset+0x4>

080063e0 <_malloc_r>:
 80063e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e2:	1ccd      	adds	r5, r1, #3
 80063e4:	f025 0503 	bic.w	r5, r5, #3
 80063e8:	3508      	adds	r5, #8
 80063ea:	2d0c      	cmp	r5, #12
 80063ec:	bf38      	it	cc
 80063ee:	250c      	movcc	r5, #12
 80063f0:	2d00      	cmp	r5, #0
 80063f2:	4606      	mov	r6, r0
 80063f4:	db01      	blt.n	80063fa <_malloc_r+0x1a>
 80063f6:	42a9      	cmp	r1, r5
 80063f8:	d903      	bls.n	8006402 <_malloc_r+0x22>
 80063fa:	230c      	movs	r3, #12
 80063fc:	6033      	str	r3, [r6, #0]
 80063fe:	2000      	movs	r0, #0
 8006400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006402:	f000 f877 	bl	80064f4 <__malloc_lock>
 8006406:	4921      	ldr	r1, [pc, #132]	; (800648c <_malloc_r+0xac>)
 8006408:	680a      	ldr	r2, [r1, #0]
 800640a:	4614      	mov	r4, r2
 800640c:	b99c      	cbnz	r4, 8006436 <_malloc_r+0x56>
 800640e:	4f20      	ldr	r7, [pc, #128]	; (8006490 <_malloc_r+0xb0>)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	b923      	cbnz	r3, 800641e <_malloc_r+0x3e>
 8006414:	4621      	mov	r1, r4
 8006416:	4630      	mov	r0, r6
 8006418:	f000 f83c 	bl	8006494 <_sbrk_r>
 800641c:	6038      	str	r0, [r7, #0]
 800641e:	4629      	mov	r1, r5
 8006420:	4630      	mov	r0, r6
 8006422:	f000 f837 	bl	8006494 <_sbrk_r>
 8006426:	1c43      	adds	r3, r0, #1
 8006428:	d123      	bne.n	8006472 <_malloc_r+0x92>
 800642a:	230c      	movs	r3, #12
 800642c:	6033      	str	r3, [r6, #0]
 800642e:	4630      	mov	r0, r6
 8006430:	f000 f866 	bl	8006500 <__malloc_unlock>
 8006434:	e7e3      	b.n	80063fe <_malloc_r+0x1e>
 8006436:	6823      	ldr	r3, [r4, #0]
 8006438:	1b5b      	subs	r3, r3, r5
 800643a:	d417      	bmi.n	800646c <_malloc_r+0x8c>
 800643c:	2b0b      	cmp	r3, #11
 800643e:	d903      	bls.n	8006448 <_malloc_r+0x68>
 8006440:	6023      	str	r3, [r4, #0]
 8006442:	441c      	add	r4, r3
 8006444:	6025      	str	r5, [r4, #0]
 8006446:	e004      	b.n	8006452 <_malloc_r+0x72>
 8006448:	6863      	ldr	r3, [r4, #4]
 800644a:	42a2      	cmp	r2, r4
 800644c:	bf0c      	ite	eq
 800644e:	600b      	streq	r3, [r1, #0]
 8006450:	6053      	strne	r3, [r2, #4]
 8006452:	4630      	mov	r0, r6
 8006454:	f000 f854 	bl	8006500 <__malloc_unlock>
 8006458:	f104 000b 	add.w	r0, r4, #11
 800645c:	1d23      	adds	r3, r4, #4
 800645e:	f020 0007 	bic.w	r0, r0, #7
 8006462:	1ac2      	subs	r2, r0, r3
 8006464:	d0cc      	beq.n	8006400 <_malloc_r+0x20>
 8006466:	1a1b      	subs	r3, r3, r0
 8006468:	50a3      	str	r3, [r4, r2]
 800646a:	e7c9      	b.n	8006400 <_malloc_r+0x20>
 800646c:	4622      	mov	r2, r4
 800646e:	6864      	ldr	r4, [r4, #4]
 8006470:	e7cc      	b.n	800640c <_malloc_r+0x2c>
 8006472:	1cc4      	adds	r4, r0, #3
 8006474:	f024 0403 	bic.w	r4, r4, #3
 8006478:	42a0      	cmp	r0, r4
 800647a:	d0e3      	beq.n	8006444 <_malloc_r+0x64>
 800647c:	1a21      	subs	r1, r4, r0
 800647e:	4630      	mov	r0, r6
 8006480:	f000 f808 	bl	8006494 <_sbrk_r>
 8006484:	3001      	adds	r0, #1
 8006486:	d1dd      	bne.n	8006444 <_malloc_r+0x64>
 8006488:	e7cf      	b.n	800642a <_malloc_r+0x4a>
 800648a:	bf00      	nop
 800648c:	20000528 	.word	0x20000528
 8006490:	2000052c 	.word	0x2000052c

08006494 <_sbrk_r>:
 8006494:	b538      	push	{r3, r4, r5, lr}
 8006496:	4d06      	ldr	r5, [pc, #24]	; (80064b0 <_sbrk_r+0x1c>)
 8006498:	2300      	movs	r3, #0
 800649a:	4604      	mov	r4, r0
 800649c:	4608      	mov	r0, r1
 800649e:	602b      	str	r3, [r5, #0]
 80064a0:	f7fb fe7e 	bl	80021a0 <_sbrk>
 80064a4:	1c43      	adds	r3, r0, #1
 80064a6:	d102      	bne.n	80064ae <_sbrk_r+0x1a>
 80064a8:	682b      	ldr	r3, [r5, #0]
 80064aa:	b103      	cbz	r3, 80064ae <_sbrk_r+0x1a>
 80064ac:	6023      	str	r3, [r4, #0]
 80064ae:	bd38      	pop	{r3, r4, r5, pc}
 80064b0:	20000958 	.word	0x20000958

080064b4 <siprintf>:
 80064b4:	b40e      	push	{r1, r2, r3}
 80064b6:	b500      	push	{lr}
 80064b8:	b09c      	sub	sp, #112	; 0x70
 80064ba:	ab1d      	add	r3, sp, #116	; 0x74
 80064bc:	9002      	str	r0, [sp, #8]
 80064be:	9006      	str	r0, [sp, #24]
 80064c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064c4:	4809      	ldr	r0, [pc, #36]	; (80064ec <siprintf+0x38>)
 80064c6:	9107      	str	r1, [sp, #28]
 80064c8:	9104      	str	r1, [sp, #16]
 80064ca:	4909      	ldr	r1, [pc, #36]	; (80064f0 <siprintf+0x3c>)
 80064cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80064d0:	9105      	str	r1, [sp, #20]
 80064d2:	6800      	ldr	r0, [r0, #0]
 80064d4:	9301      	str	r3, [sp, #4]
 80064d6:	a902      	add	r1, sp, #8
 80064d8:	f000 f8c4 	bl	8006664 <_svfiprintf_r>
 80064dc:	9b02      	ldr	r3, [sp, #8]
 80064de:	2200      	movs	r2, #0
 80064e0:	701a      	strb	r2, [r3, #0]
 80064e2:	b01c      	add	sp, #112	; 0x70
 80064e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80064e8:	b003      	add	sp, #12
 80064ea:	4770      	bx	lr
 80064ec:	20000014 	.word	0x20000014
 80064f0:	ffff0208 	.word	0xffff0208

080064f4 <__malloc_lock>:
 80064f4:	4801      	ldr	r0, [pc, #4]	; (80064fc <__malloc_lock+0x8>)
 80064f6:	f7ff bf5b 	b.w	80063b0 <__retarget_lock_acquire_recursive>
 80064fa:	bf00      	nop
 80064fc:	20000950 	.word	0x20000950

08006500 <__malloc_unlock>:
 8006500:	4801      	ldr	r0, [pc, #4]	; (8006508 <__malloc_unlock+0x8>)
 8006502:	f7ff bf56 	b.w	80063b2 <__retarget_lock_release_recursive>
 8006506:	bf00      	nop
 8006508:	20000950 	.word	0x20000950

0800650c <_free_r>:
 800650c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800650e:	2900      	cmp	r1, #0
 8006510:	d048      	beq.n	80065a4 <_free_r+0x98>
 8006512:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006516:	9001      	str	r0, [sp, #4]
 8006518:	2b00      	cmp	r3, #0
 800651a:	f1a1 0404 	sub.w	r4, r1, #4
 800651e:	bfb8      	it	lt
 8006520:	18e4      	addlt	r4, r4, r3
 8006522:	f7ff ffe7 	bl	80064f4 <__malloc_lock>
 8006526:	4a20      	ldr	r2, [pc, #128]	; (80065a8 <_free_r+0x9c>)
 8006528:	9801      	ldr	r0, [sp, #4]
 800652a:	6813      	ldr	r3, [r2, #0]
 800652c:	4615      	mov	r5, r2
 800652e:	b933      	cbnz	r3, 800653e <_free_r+0x32>
 8006530:	6063      	str	r3, [r4, #4]
 8006532:	6014      	str	r4, [r2, #0]
 8006534:	b003      	add	sp, #12
 8006536:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800653a:	f7ff bfe1 	b.w	8006500 <__malloc_unlock>
 800653e:	42a3      	cmp	r3, r4
 8006540:	d90b      	bls.n	800655a <_free_r+0x4e>
 8006542:	6821      	ldr	r1, [r4, #0]
 8006544:	1862      	adds	r2, r4, r1
 8006546:	4293      	cmp	r3, r2
 8006548:	bf04      	itt	eq
 800654a:	681a      	ldreq	r2, [r3, #0]
 800654c:	685b      	ldreq	r3, [r3, #4]
 800654e:	6063      	str	r3, [r4, #4]
 8006550:	bf04      	itt	eq
 8006552:	1852      	addeq	r2, r2, r1
 8006554:	6022      	streq	r2, [r4, #0]
 8006556:	602c      	str	r4, [r5, #0]
 8006558:	e7ec      	b.n	8006534 <_free_r+0x28>
 800655a:	461a      	mov	r2, r3
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	b10b      	cbz	r3, 8006564 <_free_r+0x58>
 8006560:	42a3      	cmp	r3, r4
 8006562:	d9fa      	bls.n	800655a <_free_r+0x4e>
 8006564:	6811      	ldr	r1, [r2, #0]
 8006566:	1855      	adds	r5, r2, r1
 8006568:	42a5      	cmp	r5, r4
 800656a:	d10b      	bne.n	8006584 <_free_r+0x78>
 800656c:	6824      	ldr	r4, [r4, #0]
 800656e:	4421      	add	r1, r4
 8006570:	1854      	adds	r4, r2, r1
 8006572:	42a3      	cmp	r3, r4
 8006574:	6011      	str	r1, [r2, #0]
 8006576:	d1dd      	bne.n	8006534 <_free_r+0x28>
 8006578:	681c      	ldr	r4, [r3, #0]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	6053      	str	r3, [r2, #4]
 800657e:	4421      	add	r1, r4
 8006580:	6011      	str	r1, [r2, #0]
 8006582:	e7d7      	b.n	8006534 <_free_r+0x28>
 8006584:	d902      	bls.n	800658c <_free_r+0x80>
 8006586:	230c      	movs	r3, #12
 8006588:	6003      	str	r3, [r0, #0]
 800658a:	e7d3      	b.n	8006534 <_free_r+0x28>
 800658c:	6825      	ldr	r5, [r4, #0]
 800658e:	1961      	adds	r1, r4, r5
 8006590:	428b      	cmp	r3, r1
 8006592:	bf04      	itt	eq
 8006594:	6819      	ldreq	r1, [r3, #0]
 8006596:	685b      	ldreq	r3, [r3, #4]
 8006598:	6063      	str	r3, [r4, #4]
 800659a:	bf04      	itt	eq
 800659c:	1949      	addeq	r1, r1, r5
 800659e:	6021      	streq	r1, [r4, #0]
 80065a0:	6054      	str	r4, [r2, #4]
 80065a2:	e7c7      	b.n	8006534 <_free_r+0x28>
 80065a4:	b003      	add	sp, #12
 80065a6:	bd30      	pop	{r4, r5, pc}
 80065a8:	20000528 	.word	0x20000528

080065ac <__ssputs_r>:
 80065ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065b0:	688e      	ldr	r6, [r1, #8]
 80065b2:	429e      	cmp	r6, r3
 80065b4:	4682      	mov	sl, r0
 80065b6:	460c      	mov	r4, r1
 80065b8:	4690      	mov	r8, r2
 80065ba:	461f      	mov	r7, r3
 80065bc:	d838      	bhi.n	8006630 <__ssputs_r+0x84>
 80065be:	898a      	ldrh	r2, [r1, #12]
 80065c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80065c4:	d032      	beq.n	800662c <__ssputs_r+0x80>
 80065c6:	6825      	ldr	r5, [r4, #0]
 80065c8:	6909      	ldr	r1, [r1, #16]
 80065ca:	eba5 0901 	sub.w	r9, r5, r1
 80065ce:	6965      	ldr	r5, [r4, #20]
 80065d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80065d8:	3301      	adds	r3, #1
 80065da:	444b      	add	r3, r9
 80065dc:	106d      	asrs	r5, r5, #1
 80065de:	429d      	cmp	r5, r3
 80065e0:	bf38      	it	cc
 80065e2:	461d      	movcc	r5, r3
 80065e4:	0553      	lsls	r3, r2, #21
 80065e6:	d531      	bpl.n	800664c <__ssputs_r+0xa0>
 80065e8:	4629      	mov	r1, r5
 80065ea:	f7ff fef9 	bl	80063e0 <_malloc_r>
 80065ee:	4606      	mov	r6, r0
 80065f0:	b950      	cbnz	r0, 8006608 <__ssputs_r+0x5c>
 80065f2:	230c      	movs	r3, #12
 80065f4:	f8ca 3000 	str.w	r3, [sl]
 80065f8:	89a3      	ldrh	r3, [r4, #12]
 80065fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065fe:	81a3      	strh	r3, [r4, #12]
 8006600:	f04f 30ff 	mov.w	r0, #4294967295
 8006604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006608:	6921      	ldr	r1, [r4, #16]
 800660a:	464a      	mov	r2, r9
 800660c:	f7ff fed2 	bl	80063b4 <memcpy>
 8006610:	89a3      	ldrh	r3, [r4, #12]
 8006612:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800661a:	81a3      	strh	r3, [r4, #12]
 800661c:	6126      	str	r6, [r4, #16]
 800661e:	6165      	str	r5, [r4, #20]
 8006620:	444e      	add	r6, r9
 8006622:	eba5 0509 	sub.w	r5, r5, r9
 8006626:	6026      	str	r6, [r4, #0]
 8006628:	60a5      	str	r5, [r4, #8]
 800662a:	463e      	mov	r6, r7
 800662c:	42be      	cmp	r6, r7
 800662e:	d900      	bls.n	8006632 <__ssputs_r+0x86>
 8006630:	463e      	mov	r6, r7
 8006632:	4632      	mov	r2, r6
 8006634:	6820      	ldr	r0, [r4, #0]
 8006636:	4641      	mov	r1, r8
 8006638:	f000 faa8 	bl	8006b8c <memmove>
 800663c:	68a3      	ldr	r3, [r4, #8]
 800663e:	6822      	ldr	r2, [r4, #0]
 8006640:	1b9b      	subs	r3, r3, r6
 8006642:	4432      	add	r2, r6
 8006644:	60a3      	str	r3, [r4, #8]
 8006646:	6022      	str	r2, [r4, #0]
 8006648:	2000      	movs	r0, #0
 800664a:	e7db      	b.n	8006604 <__ssputs_r+0x58>
 800664c:	462a      	mov	r2, r5
 800664e:	f000 fab7 	bl	8006bc0 <_realloc_r>
 8006652:	4606      	mov	r6, r0
 8006654:	2800      	cmp	r0, #0
 8006656:	d1e1      	bne.n	800661c <__ssputs_r+0x70>
 8006658:	6921      	ldr	r1, [r4, #16]
 800665a:	4650      	mov	r0, sl
 800665c:	f7ff ff56 	bl	800650c <_free_r>
 8006660:	e7c7      	b.n	80065f2 <__ssputs_r+0x46>
	...

08006664 <_svfiprintf_r>:
 8006664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006668:	4698      	mov	r8, r3
 800666a:	898b      	ldrh	r3, [r1, #12]
 800666c:	061b      	lsls	r3, r3, #24
 800666e:	b09d      	sub	sp, #116	; 0x74
 8006670:	4607      	mov	r7, r0
 8006672:	460d      	mov	r5, r1
 8006674:	4614      	mov	r4, r2
 8006676:	d50e      	bpl.n	8006696 <_svfiprintf_r+0x32>
 8006678:	690b      	ldr	r3, [r1, #16]
 800667a:	b963      	cbnz	r3, 8006696 <_svfiprintf_r+0x32>
 800667c:	2140      	movs	r1, #64	; 0x40
 800667e:	f7ff feaf 	bl	80063e0 <_malloc_r>
 8006682:	6028      	str	r0, [r5, #0]
 8006684:	6128      	str	r0, [r5, #16]
 8006686:	b920      	cbnz	r0, 8006692 <_svfiprintf_r+0x2e>
 8006688:	230c      	movs	r3, #12
 800668a:	603b      	str	r3, [r7, #0]
 800668c:	f04f 30ff 	mov.w	r0, #4294967295
 8006690:	e0d1      	b.n	8006836 <_svfiprintf_r+0x1d2>
 8006692:	2340      	movs	r3, #64	; 0x40
 8006694:	616b      	str	r3, [r5, #20]
 8006696:	2300      	movs	r3, #0
 8006698:	9309      	str	r3, [sp, #36]	; 0x24
 800669a:	2320      	movs	r3, #32
 800669c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80066a4:	2330      	movs	r3, #48	; 0x30
 80066a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006850 <_svfiprintf_r+0x1ec>
 80066aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066ae:	f04f 0901 	mov.w	r9, #1
 80066b2:	4623      	mov	r3, r4
 80066b4:	469a      	mov	sl, r3
 80066b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066ba:	b10a      	cbz	r2, 80066c0 <_svfiprintf_r+0x5c>
 80066bc:	2a25      	cmp	r2, #37	; 0x25
 80066be:	d1f9      	bne.n	80066b4 <_svfiprintf_r+0x50>
 80066c0:	ebba 0b04 	subs.w	fp, sl, r4
 80066c4:	d00b      	beq.n	80066de <_svfiprintf_r+0x7a>
 80066c6:	465b      	mov	r3, fp
 80066c8:	4622      	mov	r2, r4
 80066ca:	4629      	mov	r1, r5
 80066cc:	4638      	mov	r0, r7
 80066ce:	f7ff ff6d 	bl	80065ac <__ssputs_r>
 80066d2:	3001      	adds	r0, #1
 80066d4:	f000 80aa 	beq.w	800682c <_svfiprintf_r+0x1c8>
 80066d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066da:	445a      	add	r2, fp
 80066dc:	9209      	str	r2, [sp, #36]	; 0x24
 80066de:	f89a 3000 	ldrb.w	r3, [sl]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f000 80a2 	beq.w	800682c <_svfiprintf_r+0x1c8>
 80066e8:	2300      	movs	r3, #0
 80066ea:	f04f 32ff 	mov.w	r2, #4294967295
 80066ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066f2:	f10a 0a01 	add.w	sl, sl, #1
 80066f6:	9304      	str	r3, [sp, #16]
 80066f8:	9307      	str	r3, [sp, #28]
 80066fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066fe:	931a      	str	r3, [sp, #104]	; 0x68
 8006700:	4654      	mov	r4, sl
 8006702:	2205      	movs	r2, #5
 8006704:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006708:	4851      	ldr	r0, [pc, #324]	; (8006850 <_svfiprintf_r+0x1ec>)
 800670a:	f7f9 fd79 	bl	8000200 <memchr>
 800670e:	9a04      	ldr	r2, [sp, #16]
 8006710:	b9d8      	cbnz	r0, 800674a <_svfiprintf_r+0xe6>
 8006712:	06d0      	lsls	r0, r2, #27
 8006714:	bf44      	itt	mi
 8006716:	2320      	movmi	r3, #32
 8006718:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800671c:	0711      	lsls	r1, r2, #28
 800671e:	bf44      	itt	mi
 8006720:	232b      	movmi	r3, #43	; 0x2b
 8006722:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006726:	f89a 3000 	ldrb.w	r3, [sl]
 800672a:	2b2a      	cmp	r3, #42	; 0x2a
 800672c:	d015      	beq.n	800675a <_svfiprintf_r+0xf6>
 800672e:	9a07      	ldr	r2, [sp, #28]
 8006730:	4654      	mov	r4, sl
 8006732:	2000      	movs	r0, #0
 8006734:	f04f 0c0a 	mov.w	ip, #10
 8006738:	4621      	mov	r1, r4
 800673a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800673e:	3b30      	subs	r3, #48	; 0x30
 8006740:	2b09      	cmp	r3, #9
 8006742:	d94e      	bls.n	80067e2 <_svfiprintf_r+0x17e>
 8006744:	b1b0      	cbz	r0, 8006774 <_svfiprintf_r+0x110>
 8006746:	9207      	str	r2, [sp, #28]
 8006748:	e014      	b.n	8006774 <_svfiprintf_r+0x110>
 800674a:	eba0 0308 	sub.w	r3, r0, r8
 800674e:	fa09 f303 	lsl.w	r3, r9, r3
 8006752:	4313      	orrs	r3, r2
 8006754:	9304      	str	r3, [sp, #16]
 8006756:	46a2      	mov	sl, r4
 8006758:	e7d2      	b.n	8006700 <_svfiprintf_r+0x9c>
 800675a:	9b03      	ldr	r3, [sp, #12]
 800675c:	1d19      	adds	r1, r3, #4
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	9103      	str	r1, [sp, #12]
 8006762:	2b00      	cmp	r3, #0
 8006764:	bfbb      	ittet	lt
 8006766:	425b      	neglt	r3, r3
 8006768:	f042 0202 	orrlt.w	r2, r2, #2
 800676c:	9307      	strge	r3, [sp, #28]
 800676e:	9307      	strlt	r3, [sp, #28]
 8006770:	bfb8      	it	lt
 8006772:	9204      	strlt	r2, [sp, #16]
 8006774:	7823      	ldrb	r3, [r4, #0]
 8006776:	2b2e      	cmp	r3, #46	; 0x2e
 8006778:	d10c      	bne.n	8006794 <_svfiprintf_r+0x130>
 800677a:	7863      	ldrb	r3, [r4, #1]
 800677c:	2b2a      	cmp	r3, #42	; 0x2a
 800677e:	d135      	bne.n	80067ec <_svfiprintf_r+0x188>
 8006780:	9b03      	ldr	r3, [sp, #12]
 8006782:	1d1a      	adds	r2, r3, #4
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	9203      	str	r2, [sp, #12]
 8006788:	2b00      	cmp	r3, #0
 800678a:	bfb8      	it	lt
 800678c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006790:	3402      	adds	r4, #2
 8006792:	9305      	str	r3, [sp, #20]
 8006794:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006860 <_svfiprintf_r+0x1fc>
 8006798:	7821      	ldrb	r1, [r4, #0]
 800679a:	2203      	movs	r2, #3
 800679c:	4650      	mov	r0, sl
 800679e:	f7f9 fd2f 	bl	8000200 <memchr>
 80067a2:	b140      	cbz	r0, 80067b6 <_svfiprintf_r+0x152>
 80067a4:	2340      	movs	r3, #64	; 0x40
 80067a6:	eba0 000a 	sub.w	r0, r0, sl
 80067aa:	fa03 f000 	lsl.w	r0, r3, r0
 80067ae:	9b04      	ldr	r3, [sp, #16]
 80067b0:	4303      	orrs	r3, r0
 80067b2:	3401      	adds	r4, #1
 80067b4:	9304      	str	r3, [sp, #16]
 80067b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067ba:	4826      	ldr	r0, [pc, #152]	; (8006854 <_svfiprintf_r+0x1f0>)
 80067bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067c0:	2206      	movs	r2, #6
 80067c2:	f7f9 fd1d 	bl	8000200 <memchr>
 80067c6:	2800      	cmp	r0, #0
 80067c8:	d038      	beq.n	800683c <_svfiprintf_r+0x1d8>
 80067ca:	4b23      	ldr	r3, [pc, #140]	; (8006858 <_svfiprintf_r+0x1f4>)
 80067cc:	bb1b      	cbnz	r3, 8006816 <_svfiprintf_r+0x1b2>
 80067ce:	9b03      	ldr	r3, [sp, #12]
 80067d0:	3307      	adds	r3, #7
 80067d2:	f023 0307 	bic.w	r3, r3, #7
 80067d6:	3308      	adds	r3, #8
 80067d8:	9303      	str	r3, [sp, #12]
 80067da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067dc:	4433      	add	r3, r6
 80067de:	9309      	str	r3, [sp, #36]	; 0x24
 80067e0:	e767      	b.n	80066b2 <_svfiprintf_r+0x4e>
 80067e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80067e6:	460c      	mov	r4, r1
 80067e8:	2001      	movs	r0, #1
 80067ea:	e7a5      	b.n	8006738 <_svfiprintf_r+0xd4>
 80067ec:	2300      	movs	r3, #0
 80067ee:	3401      	adds	r4, #1
 80067f0:	9305      	str	r3, [sp, #20]
 80067f2:	4619      	mov	r1, r3
 80067f4:	f04f 0c0a 	mov.w	ip, #10
 80067f8:	4620      	mov	r0, r4
 80067fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067fe:	3a30      	subs	r2, #48	; 0x30
 8006800:	2a09      	cmp	r2, #9
 8006802:	d903      	bls.n	800680c <_svfiprintf_r+0x1a8>
 8006804:	2b00      	cmp	r3, #0
 8006806:	d0c5      	beq.n	8006794 <_svfiprintf_r+0x130>
 8006808:	9105      	str	r1, [sp, #20]
 800680a:	e7c3      	b.n	8006794 <_svfiprintf_r+0x130>
 800680c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006810:	4604      	mov	r4, r0
 8006812:	2301      	movs	r3, #1
 8006814:	e7f0      	b.n	80067f8 <_svfiprintf_r+0x194>
 8006816:	ab03      	add	r3, sp, #12
 8006818:	9300      	str	r3, [sp, #0]
 800681a:	462a      	mov	r2, r5
 800681c:	4b0f      	ldr	r3, [pc, #60]	; (800685c <_svfiprintf_r+0x1f8>)
 800681e:	a904      	add	r1, sp, #16
 8006820:	4638      	mov	r0, r7
 8006822:	f3af 8000 	nop.w
 8006826:	1c42      	adds	r2, r0, #1
 8006828:	4606      	mov	r6, r0
 800682a:	d1d6      	bne.n	80067da <_svfiprintf_r+0x176>
 800682c:	89ab      	ldrh	r3, [r5, #12]
 800682e:	065b      	lsls	r3, r3, #25
 8006830:	f53f af2c 	bmi.w	800668c <_svfiprintf_r+0x28>
 8006834:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006836:	b01d      	add	sp, #116	; 0x74
 8006838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800683c:	ab03      	add	r3, sp, #12
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	462a      	mov	r2, r5
 8006842:	4b06      	ldr	r3, [pc, #24]	; (800685c <_svfiprintf_r+0x1f8>)
 8006844:	a904      	add	r1, sp, #16
 8006846:	4638      	mov	r0, r7
 8006848:	f000 f87a 	bl	8006940 <_printf_i>
 800684c:	e7eb      	b.n	8006826 <_svfiprintf_r+0x1c2>
 800684e:	bf00      	nop
 8006850:	08006d30 	.word	0x08006d30
 8006854:	08006d3a 	.word	0x08006d3a
 8006858:	00000000 	.word	0x00000000
 800685c:	080065ad 	.word	0x080065ad
 8006860:	08006d36 	.word	0x08006d36

08006864 <_printf_common>:
 8006864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006868:	4616      	mov	r6, r2
 800686a:	4699      	mov	r9, r3
 800686c:	688a      	ldr	r2, [r1, #8]
 800686e:	690b      	ldr	r3, [r1, #16]
 8006870:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006874:	4293      	cmp	r3, r2
 8006876:	bfb8      	it	lt
 8006878:	4613      	movlt	r3, r2
 800687a:	6033      	str	r3, [r6, #0]
 800687c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006880:	4607      	mov	r7, r0
 8006882:	460c      	mov	r4, r1
 8006884:	b10a      	cbz	r2, 800688a <_printf_common+0x26>
 8006886:	3301      	adds	r3, #1
 8006888:	6033      	str	r3, [r6, #0]
 800688a:	6823      	ldr	r3, [r4, #0]
 800688c:	0699      	lsls	r1, r3, #26
 800688e:	bf42      	ittt	mi
 8006890:	6833      	ldrmi	r3, [r6, #0]
 8006892:	3302      	addmi	r3, #2
 8006894:	6033      	strmi	r3, [r6, #0]
 8006896:	6825      	ldr	r5, [r4, #0]
 8006898:	f015 0506 	ands.w	r5, r5, #6
 800689c:	d106      	bne.n	80068ac <_printf_common+0x48>
 800689e:	f104 0a19 	add.w	sl, r4, #25
 80068a2:	68e3      	ldr	r3, [r4, #12]
 80068a4:	6832      	ldr	r2, [r6, #0]
 80068a6:	1a9b      	subs	r3, r3, r2
 80068a8:	42ab      	cmp	r3, r5
 80068aa:	dc26      	bgt.n	80068fa <_printf_common+0x96>
 80068ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068b0:	1e13      	subs	r3, r2, #0
 80068b2:	6822      	ldr	r2, [r4, #0]
 80068b4:	bf18      	it	ne
 80068b6:	2301      	movne	r3, #1
 80068b8:	0692      	lsls	r2, r2, #26
 80068ba:	d42b      	bmi.n	8006914 <_printf_common+0xb0>
 80068bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068c0:	4649      	mov	r1, r9
 80068c2:	4638      	mov	r0, r7
 80068c4:	47c0      	blx	r8
 80068c6:	3001      	adds	r0, #1
 80068c8:	d01e      	beq.n	8006908 <_printf_common+0xa4>
 80068ca:	6823      	ldr	r3, [r4, #0]
 80068cc:	68e5      	ldr	r5, [r4, #12]
 80068ce:	6832      	ldr	r2, [r6, #0]
 80068d0:	f003 0306 	and.w	r3, r3, #6
 80068d4:	2b04      	cmp	r3, #4
 80068d6:	bf08      	it	eq
 80068d8:	1aad      	subeq	r5, r5, r2
 80068da:	68a3      	ldr	r3, [r4, #8]
 80068dc:	6922      	ldr	r2, [r4, #16]
 80068de:	bf0c      	ite	eq
 80068e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068e4:	2500      	movne	r5, #0
 80068e6:	4293      	cmp	r3, r2
 80068e8:	bfc4      	itt	gt
 80068ea:	1a9b      	subgt	r3, r3, r2
 80068ec:	18ed      	addgt	r5, r5, r3
 80068ee:	2600      	movs	r6, #0
 80068f0:	341a      	adds	r4, #26
 80068f2:	42b5      	cmp	r5, r6
 80068f4:	d11a      	bne.n	800692c <_printf_common+0xc8>
 80068f6:	2000      	movs	r0, #0
 80068f8:	e008      	b.n	800690c <_printf_common+0xa8>
 80068fa:	2301      	movs	r3, #1
 80068fc:	4652      	mov	r2, sl
 80068fe:	4649      	mov	r1, r9
 8006900:	4638      	mov	r0, r7
 8006902:	47c0      	blx	r8
 8006904:	3001      	adds	r0, #1
 8006906:	d103      	bne.n	8006910 <_printf_common+0xac>
 8006908:	f04f 30ff 	mov.w	r0, #4294967295
 800690c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006910:	3501      	adds	r5, #1
 8006912:	e7c6      	b.n	80068a2 <_printf_common+0x3e>
 8006914:	18e1      	adds	r1, r4, r3
 8006916:	1c5a      	adds	r2, r3, #1
 8006918:	2030      	movs	r0, #48	; 0x30
 800691a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800691e:	4422      	add	r2, r4
 8006920:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006924:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006928:	3302      	adds	r3, #2
 800692a:	e7c7      	b.n	80068bc <_printf_common+0x58>
 800692c:	2301      	movs	r3, #1
 800692e:	4622      	mov	r2, r4
 8006930:	4649      	mov	r1, r9
 8006932:	4638      	mov	r0, r7
 8006934:	47c0      	blx	r8
 8006936:	3001      	adds	r0, #1
 8006938:	d0e6      	beq.n	8006908 <_printf_common+0xa4>
 800693a:	3601      	adds	r6, #1
 800693c:	e7d9      	b.n	80068f2 <_printf_common+0x8e>
	...

08006940 <_printf_i>:
 8006940:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006944:	460c      	mov	r4, r1
 8006946:	4691      	mov	r9, r2
 8006948:	7e27      	ldrb	r7, [r4, #24]
 800694a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800694c:	2f78      	cmp	r7, #120	; 0x78
 800694e:	4680      	mov	r8, r0
 8006950:	469a      	mov	sl, r3
 8006952:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006956:	d807      	bhi.n	8006968 <_printf_i+0x28>
 8006958:	2f62      	cmp	r7, #98	; 0x62
 800695a:	d80a      	bhi.n	8006972 <_printf_i+0x32>
 800695c:	2f00      	cmp	r7, #0
 800695e:	f000 80d8 	beq.w	8006b12 <_printf_i+0x1d2>
 8006962:	2f58      	cmp	r7, #88	; 0x58
 8006964:	f000 80a3 	beq.w	8006aae <_printf_i+0x16e>
 8006968:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800696c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006970:	e03a      	b.n	80069e8 <_printf_i+0xa8>
 8006972:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006976:	2b15      	cmp	r3, #21
 8006978:	d8f6      	bhi.n	8006968 <_printf_i+0x28>
 800697a:	a001      	add	r0, pc, #4	; (adr r0, 8006980 <_printf_i+0x40>)
 800697c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006980:	080069d9 	.word	0x080069d9
 8006984:	080069ed 	.word	0x080069ed
 8006988:	08006969 	.word	0x08006969
 800698c:	08006969 	.word	0x08006969
 8006990:	08006969 	.word	0x08006969
 8006994:	08006969 	.word	0x08006969
 8006998:	080069ed 	.word	0x080069ed
 800699c:	08006969 	.word	0x08006969
 80069a0:	08006969 	.word	0x08006969
 80069a4:	08006969 	.word	0x08006969
 80069a8:	08006969 	.word	0x08006969
 80069ac:	08006af9 	.word	0x08006af9
 80069b0:	08006a1d 	.word	0x08006a1d
 80069b4:	08006adb 	.word	0x08006adb
 80069b8:	08006969 	.word	0x08006969
 80069bc:	08006969 	.word	0x08006969
 80069c0:	08006b1b 	.word	0x08006b1b
 80069c4:	08006969 	.word	0x08006969
 80069c8:	08006a1d 	.word	0x08006a1d
 80069cc:	08006969 	.word	0x08006969
 80069d0:	08006969 	.word	0x08006969
 80069d4:	08006ae3 	.word	0x08006ae3
 80069d8:	680b      	ldr	r3, [r1, #0]
 80069da:	1d1a      	adds	r2, r3, #4
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	600a      	str	r2, [r1, #0]
 80069e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80069e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069e8:	2301      	movs	r3, #1
 80069ea:	e0a3      	b.n	8006b34 <_printf_i+0x1f4>
 80069ec:	6825      	ldr	r5, [r4, #0]
 80069ee:	6808      	ldr	r0, [r1, #0]
 80069f0:	062e      	lsls	r6, r5, #24
 80069f2:	f100 0304 	add.w	r3, r0, #4
 80069f6:	d50a      	bpl.n	8006a0e <_printf_i+0xce>
 80069f8:	6805      	ldr	r5, [r0, #0]
 80069fa:	600b      	str	r3, [r1, #0]
 80069fc:	2d00      	cmp	r5, #0
 80069fe:	da03      	bge.n	8006a08 <_printf_i+0xc8>
 8006a00:	232d      	movs	r3, #45	; 0x2d
 8006a02:	426d      	negs	r5, r5
 8006a04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a08:	485e      	ldr	r0, [pc, #376]	; (8006b84 <_printf_i+0x244>)
 8006a0a:	230a      	movs	r3, #10
 8006a0c:	e019      	b.n	8006a42 <_printf_i+0x102>
 8006a0e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006a12:	6805      	ldr	r5, [r0, #0]
 8006a14:	600b      	str	r3, [r1, #0]
 8006a16:	bf18      	it	ne
 8006a18:	b22d      	sxthne	r5, r5
 8006a1a:	e7ef      	b.n	80069fc <_printf_i+0xbc>
 8006a1c:	680b      	ldr	r3, [r1, #0]
 8006a1e:	6825      	ldr	r5, [r4, #0]
 8006a20:	1d18      	adds	r0, r3, #4
 8006a22:	6008      	str	r0, [r1, #0]
 8006a24:	0628      	lsls	r0, r5, #24
 8006a26:	d501      	bpl.n	8006a2c <_printf_i+0xec>
 8006a28:	681d      	ldr	r5, [r3, #0]
 8006a2a:	e002      	b.n	8006a32 <_printf_i+0xf2>
 8006a2c:	0669      	lsls	r1, r5, #25
 8006a2e:	d5fb      	bpl.n	8006a28 <_printf_i+0xe8>
 8006a30:	881d      	ldrh	r5, [r3, #0]
 8006a32:	4854      	ldr	r0, [pc, #336]	; (8006b84 <_printf_i+0x244>)
 8006a34:	2f6f      	cmp	r7, #111	; 0x6f
 8006a36:	bf0c      	ite	eq
 8006a38:	2308      	moveq	r3, #8
 8006a3a:	230a      	movne	r3, #10
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a42:	6866      	ldr	r6, [r4, #4]
 8006a44:	60a6      	str	r6, [r4, #8]
 8006a46:	2e00      	cmp	r6, #0
 8006a48:	bfa2      	ittt	ge
 8006a4a:	6821      	ldrge	r1, [r4, #0]
 8006a4c:	f021 0104 	bicge.w	r1, r1, #4
 8006a50:	6021      	strge	r1, [r4, #0]
 8006a52:	b90d      	cbnz	r5, 8006a58 <_printf_i+0x118>
 8006a54:	2e00      	cmp	r6, #0
 8006a56:	d04d      	beq.n	8006af4 <_printf_i+0x1b4>
 8006a58:	4616      	mov	r6, r2
 8006a5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a5e:	fb03 5711 	mls	r7, r3, r1, r5
 8006a62:	5dc7      	ldrb	r7, [r0, r7]
 8006a64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a68:	462f      	mov	r7, r5
 8006a6a:	42bb      	cmp	r3, r7
 8006a6c:	460d      	mov	r5, r1
 8006a6e:	d9f4      	bls.n	8006a5a <_printf_i+0x11a>
 8006a70:	2b08      	cmp	r3, #8
 8006a72:	d10b      	bne.n	8006a8c <_printf_i+0x14c>
 8006a74:	6823      	ldr	r3, [r4, #0]
 8006a76:	07df      	lsls	r7, r3, #31
 8006a78:	d508      	bpl.n	8006a8c <_printf_i+0x14c>
 8006a7a:	6923      	ldr	r3, [r4, #16]
 8006a7c:	6861      	ldr	r1, [r4, #4]
 8006a7e:	4299      	cmp	r1, r3
 8006a80:	bfde      	ittt	le
 8006a82:	2330      	movle	r3, #48	; 0x30
 8006a84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a88:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a8c:	1b92      	subs	r2, r2, r6
 8006a8e:	6122      	str	r2, [r4, #16]
 8006a90:	f8cd a000 	str.w	sl, [sp]
 8006a94:	464b      	mov	r3, r9
 8006a96:	aa03      	add	r2, sp, #12
 8006a98:	4621      	mov	r1, r4
 8006a9a:	4640      	mov	r0, r8
 8006a9c:	f7ff fee2 	bl	8006864 <_printf_common>
 8006aa0:	3001      	adds	r0, #1
 8006aa2:	d14c      	bne.n	8006b3e <_printf_i+0x1fe>
 8006aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa8:	b004      	add	sp, #16
 8006aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aae:	4835      	ldr	r0, [pc, #212]	; (8006b84 <_printf_i+0x244>)
 8006ab0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ab4:	6823      	ldr	r3, [r4, #0]
 8006ab6:	680e      	ldr	r6, [r1, #0]
 8006ab8:	061f      	lsls	r7, r3, #24
 8006aba:	f856 5b04 	ldr.w	r5, [r6], #4
 8006abe:	600e      	str	r6, [r1, #0]
 8006ac0:	d514      	bpl.n	8006aec <_printf_i+0x1ac>
 8006ac2:	07d9      	lsls	r1, r3, #31
 8006ac4:	bf44      	itt	mi
 8006ac6:	f043 0320 	orrmi.w	r3, r3, #32
 8006aca:	6023      	strmi	r3, [r4, #0]
 8006acc:	b91d      	cbnz	r5, 8006ad6 <_printf_i+0x196>
 8006ace:	6823      	ldr	r3, [r4, #0]
 8006ad0:	f023 0320 	bic.w	r3, r3, #32
 8006ad4:	6023      	str	r3, [r4, #0]
 8006ad6:	2310      	movs	r3, #16
 8006ad8:	e7b0      	b.n	8006a3c <_printf_i+0xfc>
 8006ada:	6823      	ldr	r3, [r4, #0]
 8006adc:	f043 0320 	orr.w	r3, r3, #32
 8006ae0:	6023      	str	r3, [r4, #0]
 8006ae2:	2378      	movs	r3, #120	; 0x78
 8006ae4:	4828      	ldr	r0, [pc, #160]	; (8006b88 <_printf_i+0x248>)
 8006ae6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006aea:	e7e3      	b.n	8006ab4 <_printf_i+0x174>
 8006aec:	065e      	lsls	r6, r3, #25
 8006aee:	bf48      	it	mi
 8006af0:	b2ad      	uxthmi	r5, r5
 8006af2:	e7e6      	b.n	8006ac2 <_printf_i+0x182>
 8006af4:	4616      	mov	r6, r2
 8006af6:	e7bb      	b.n	8006a70 <_printf_i+0x130>
 8006af8:	680b      	ldr	r3, [r1, #0]
 8006afa:	6826      	ldr	r6, [r4, #0]
 8006afc:	6960      	ldr	r0, [r4, #20]
 8006afe:	1d1d      	adds	r5, r3, #4
 8006b00:	600d      	str	r5, [r1, #0]
 8006b02:	0635      	lsls	r5, r6, #24
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	d501      	bpl.n	8006b0c <_printf_i+0x1cc>
 8006b08:	6018      	str	r0, [r3, #0]
 8006b0a:	e002      	b.n	8006b12 <_printf_i+0x1d2>
 8006b0c:	0671      	lsls	r1, r6, #25
 8006b0e:	d5fb      	bpl.n	8006b08 <_printf_i+0x1c8>
 8006b10:	8018      	strh	r0, [r3, #0]
 8006b12:	2300      	movs	r3, #0
 8006b14:	6123      	str	r3, [r4, #16]
 8006b16:	4616      	mov	r6, r2
 8006b18:	e7ba      	b.n	8006a90 <_printf_i+0x150>
 8006b1a:	680b      	ldr	r3, [r1, #0]
 8006b1c:	1d1a      	adds	r2, r3, #4
 8006b1e:	600a      	str	r2, [r1, #0]
 8006b20:	681e      	ldr	r6, [r3, #0]
 8006b22:	6862      	ldr	r2, [r4, #4]
 8006b24:	2100      	movs	r1, #0
 8006b26:	4630      	mov	r0, r6
 8006b28:	f7f9 fb6a 	bl	8000200 <memchr>
 8006b2c:	b108      	cbz	r0, 8006b32 <_printf_i+0x1f2>
 8006b2e:	1b80      	subs	r0, r0, r6
 8006b30:	6060      	str	r0, [r4, #4]
 8006b32:	6863      	ldr	r3, [r4, #4]
 8006b34:	6123      	str	r3, [r4, #16]
 8006b36:	2300      	movs	r3, #0
 8006b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b3c:	e7a8      	b.n	8006a90 <_printf_i+0x150>
 8006b3e:	6923      	ldr	r3, [r4, #16]
 8006b40:	4632      	mov	r2, r6
 8006b42:	4649      	mov	r1, r9
 8006b44:	4640      	mov	r0, r8
 8006b46:	47d0      	blx	sl
 8006b48:	3001      	adds	r0, #1
 8006b4a:	d0ab      	beq.n	8006aa4 <_printf_i+0x164>
 8006b4c:	6823      	ldr	r3, [r4, #0]
 8006b4e:	079b      	lsls	r3, r3, #30
 8006b50:	d413      	bmi.n	8006b7a <_printf_i+0x23a>
 8006b52:	68e0      	ldr	r0, [r4, #12]
 8006b54:	9b03      	ldr	r3, [sp, #12]
 8006b56:	4298      	cmp	r0, r3
 8006b58:	bfb8      	it	lt
 8006b5a:	4618      	movlt	r0, r3
 8006b5c:	e7a4      	b.n	8006aa8 <_printf_i+0x168>
 8006b5e:	2301      	movs	r3, #1
 8006b60:	4632      	mov	r2, r6
 8006b62:	4649      	mov	r1, r9
 8006b64:	4640      	mov	r0, r8
 8006b66:	47d0      	blx	sl
 8006b68:	3001      	adds	r0, #1
 8006b6a:	d09b      	beq.n	8006aa4 <_printf_i+0x164>
 8006b6c:	3501      	adds	r5, #1
 8006b6e:	68e3      	ldr	r3, [r4, #12]
 8006b70:	9903      	ldr	r1, [sp, #12]
 8006b72:	1a5b      	subs	r3, r3, r1
 8006b74:	42ab      	cmp	r3, r5
 8006b76:	dcf2      	bgt.n	8006b5e <_printf_i+0x21e>
 8006b78:	e7eb      	b.n	8006b52 <_printf_i+0x212>
 8006b7a:	2500      	movs	r5, #0
 8006b7c:	f104 0619 	add.w	r6, r4, #25
 8006b80:	e7f5      	b.n	8006b6e <_printf_i+0x22e>
 8006b82:	bf00      	nop
 8006b84:	08006d41 	.word	0x08006d41
 8006b88:	08006d52 	.word	0x08006d52

08006b8c <memmove>:
 8006b8c:	4288      	cmp	r0, r1
 8006b8e:	b510      	push	{r4, lr}
 8006b90:	eb01 0402 	add.w	r4, r1, r2
 8006b94:	d902      	bls.n	8006b9c <memmove+0x10>
 8006b96:	4284      	cmp	r4, r0
 8006b98:	4623      	mov	r3, r4
 8006b9a:	d807      	bhi.n	8006bac <memmove+0x20>
 8006b9c:	1e43      	subs	r3, r0, #1
 8006b9e:	42a1      	cmp	r1, r4
 8006ba0:	d008      	beq.n	8006bb4 <memmove+0x28>
 8006ba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ba6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006baa:	e7f8      	b.n	8006b9e <memmove+0x12>
 8006bac:	4402      	add	r2, r0
 8006bae:	4601      	mov	r1, r0
 8006bb0:	428a      	cmp	r2, r1
 8006bb2:	d100      	bne.n	8006bb6 <memmove+0x2a>
 8006bb4:	bd10      	pop	{r4, pc}
 8006bb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006bbe:	e7f7      	b.n	8006bb0 <memmove+0x24>

08006bc0 <_realloc_r>:
 8006bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc2:	4607      	mov	r7, r0
 8006bc4:	4614      	mov	r4, r2
 8006bc6:	460e      	mov	r6, r1
 8006bc8:	b921      	cbnz	r1, 8006bd4 <_realloc_r+0x14>
 8006bca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006bce:	4611      	mov	r1, r2
 8006bd0:	f7ff bc06 	b.w	80063e0 <_malloc_r>
 8006bd4:	b922      	cbnz	r2, 8006be0 <_realloc_r+0x20>
 8006bd6:	f7ff fc99 	bl	800650c <_free_r>
 8006bda:	4625      	mov	r5, r4
 8006bdc:	4628      	mov	r0, r5
 8006bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006be0:	f000 f814 	bl	8006c0c <_malloc_usable_size_r>
 8006be4:	42a0      	cmp	r0, r4
 8006be6:	d20f      	bcs.n	8006c08 <_realloc_r+0x48>
 8006be8:	4621      	mov	r1, r4
 8006bea:	4638      	mov	r0, r7
 8006bec:	f7ff fbf8 	bl	80063e0 <_malloc_r>
 8006bf0:	4605      	mov	r5, r0
 8006bf2:	2800      	cmp	r0, #0
 8006bf4:	d0f2      	beq.n	8006bdc <_realloc_r+0x1c>
 8006bf6:	4631      	mov	r1, r6
 8006bf8:	4622      	mov	r2, r4
 8006bfa:	f7ff fbdb 	bl	80063b4 <memcpy>
 8006bfe:	4631      	mov	r1, r6
 8006c00:	4638      	mov	r0, r7
 8006c02:	f7ff fc83 	bl	800650c <_free_r>
 8006c06:	e7e9      	b.n	8006bdc <_realloc_r+0x1c>
 8006c08:	4635      	mov	r5, r6
 8006c0a:	e7e7      	b.n	8006bdc <_realloc_r+0x1c>

08006c0c <_malloc_usable_size_r>:
 8006c0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c10:	1f18      	subs	r0, r3, #4
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	bfbc      	itt	lt
 8006c16:	580b      	ldrlt	r3, [r1, r0]
 8006c18:	18c0      	addlt	r0, r0, r3
 8006c1a:	4770      	bx	lr

08006c1c <_init>:
 8006c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c1e:	bf00      	nop
 8006c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c22:	bc08      	pop	{r3}
 8006c24:	469e      	mov	lr, r3
 8006c26:	4770      	bx	lr

08006c28 <_fini>:
 8006c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c2a:	bf00      	nop
 8006c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c2e:	bc08      	pop	{r3}
 8006c30:	469e      	mov	lr, r3
 8006c32:	4770      	bx	lr
