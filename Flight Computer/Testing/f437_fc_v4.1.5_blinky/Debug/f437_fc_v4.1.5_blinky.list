
f437_fc_v4.1.5_blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c18  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  08010dc8  08010dc8  00020dc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801136c  0801136c  0003036c  2**0
                  CONTENTS
  4 .ARM          00000008  0801136c  0801136c  0002136c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011374  08011374  0003036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011374  08011374  00021374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011378  08011378  00021378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000036c  20000000  0801137c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003036c  2**0
                  CONTENTS
 10 .bss          0000299c  2000036c  2000036c  0003036c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002d08  20002d08  0003036c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003036c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003d3a3  00000000  00000000  0003039c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000592a  00000000  00000000  0006d73f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002590  00000000  00000000  00073070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000023a0  00000000  00000000  00075600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b9ec  00000000  00000000  000779a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000285c0  00000000  00000000  000a338c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fad11  00000000  00000000  000cb94c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001c665d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b5d4  00000000  00000000  001c66b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000036c 	.word	0x2000036c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08010db0 	.word	0x08010db0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000370 	.word	0x20000370
 80001ec:	08010db0 	.word	0x08010db0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <lsm6dsl_init>:
                             uint16_t len);
static void platform_delay(uint32_t ms);

/* LSM6DSL Functions ---------------------------------------------------------*/

stmdev_ctx_t lsm6dsl_init(void){
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b087      	sub	sp, #28
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

	stmdev_ctx_t dev_ctx_lsm6dsl;

	/* Initialize mems driver interface */
	dev_ctx_lsm6dsl.write_reg = lsm6dsl_write;
 8001014:	4b2f      	ldr	r3, [pc, #188]	; (80010d4 <lsm6dsl_init+0xc8>)
 8001016:	60fb      	str	r3, [r7, #12]
	dev_ctx_lsm6dsl.read_reg = lsm6dsl_read;
 8001018:	4b2f      	ldr	r3, [pc, #188]	; (80010d8 <lsm6dsl_init+0xcc>)
 800101a:	613b      	str	r3, [r7, #16]
	dev_ctx_lsm6dsl.handle = &SENSOR_BUS;
 800101c:	4b2f      	ldr	r3, [pc, #188]	; (80010dc <lsm6dsl_init+0xd0>)
 800101e:	617b      	str	r3, [r7, #20]

	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 8001020:	200a      	movs	r0, #10
 8001022:	f000 f92d 	bl	8001280 <platform_delay>

	/* Check device ID */
	lsm6dsl_device_id_get(&dev_ctx_lsm6dsl, &whoamI_lsm6dsl);
 8001026:	f107 030c 	add.w	r3, r7, #12
 800102a:	492d      	ldr	r1, [pc, #180]	; (80010e0 <lsm6dsl_init+0xd4>)
 800102c:	4618      	mov	r0, r3
 800102e:	f000 fb14 	bl	800165a <lsm6dsl_device_id_get>

	if (whoamI_lsm6dsl != LSM6DSL_ID){
 8001032:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <lsm6dsl_init+0xd4>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b6a      	cmp	r3, #106	; 0x6a
 8001038:	d005      	beq.n	8001046 <lsm6dsl_init+0x3a>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800103a:	2201      	movs	r2, #1
 800103c:	2102      	movs	r1, #2
 800103e:	4829      	ldr	r0, [pc, #164]	; (80010e4 <lsm6dsl_init+0xd8>)
 8001040:	f002 fb1e 	bl	8003680 <HAL_GPIO_WritePin>
		__BKPT();
 8001044:	be00      	bkpt	0x0000
//		Error_Handler();
	}

	/* Restore default configuration */
	lsm6dsl_reset_set(&dev_ctx_lsm6dsl, PROPERTY_ENABLE);
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	2101      	movs	r1, #1
 800104c:	4618      	mov	r0, r3
 800104e:	f000 fb15 	bl	800167c <lsm6dsl_reset_set>

	do {
	lsm6dsl_reset_get(&dev_ctx_lsm6dsl, &rst_lsm6dsl);
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	4924      	ldr	r1, [pc, #144]	; (80010e8 <lsm6dsl_init+0xdc>)
 8001058:	4618      	mov	r0, r3
 800105a:	f000 fb35 	bl	80016c8 <lsm6dsl_reset_get>
	} while (rst_lsm6dsl);
 800105e:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <lsm6dsl_init+0xdc>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1f5      	bne.n	8001052 <lsm6dsl_init+0x46>

	/* Enable Block Data Update */
	lsm6dsl_block_data_update_set(&dev_ctx_lsm6dsl, PROPERTY_ENABLE);
 8001066:	f107 030c 	add.w	r3, r7, #12
 800106a:	2101      	movs	r1, #1
 800106c:	4618      	mov	r0, r3
 800106e:	f000 face 	bl	800160e <lsm6dsl_block_data_update_set>

	/* Set Output Data Rate */
	lsm6dsl_xl_data_rate_set(&dev_ctx_lsm6dsl, LSM6DSL_XL_ODR_104Hz);
 8001072:	f107 030c 	add.w	r3, r7, #12
 8001076:	2104      	movs	r1, #4
 8001078:	4618      	mov	r0, r3
 800107a:	f000 fa56 	bl	800152a <lsm6dsl_xl_data_rate_set>
	lsm6dsl_gy_data_rate_set(&dev_ctx_lsm6dsl, LSM6DSL_GY_ODR_104Hz);
 800107e:	f107 030c 	add.w	r3, r7, #12
 8001082:	2104      	movs	r1, #4
 8001084:	4618      	mov	r0, r3
 8001086:	f000 fa9c 	bl	80015c2 <lsm6dsl_gy_data_rate_set>

	/* Set full scale */
	lsm6dsl_xl_full_scale_set(&dev_ctx_lsm6dsl, LSM6DSL_8g);
 800108a:	f107 030c 	add.w	r3, r7, #12
 800108e:	2103      	movs	r1, #3
 8001090:	4618      	mov	r0, r3
 8001092:	f000 fa24 	bl	80014de <lsm6dsl_xl_full_scale_set>
	lsm6dsl_gy_full_scale_set(&dev_ctx_lsm6dsl, LSM6DSL_2000dps);
 8001096:	f107 030c 	add.w	r3, r7, #12
 800109a:	2106      	movs	r1, #6
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fa6a 	bl	8001576 <lsm6dsl_gy_full_scale_set>

	/* Configure filtering chain(No aux interface)
	* Accelerometer - LPF1 + LPF2 path
	*/
	lsm6dsl_xl_lp2_bandwidth_set(&dev_ctx_lsm6dsl, LSM6DSL_XL_LOW_NOISE_LP_ODR_DIV_100);
 80010a2:	f107 030c 	add.w	r3, r7, #12
 80010a6:	2111      	movs	r1, #17
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 fb26 	bl	80016fa <lsm6dsl_xl_lp2_bandwidth_set>
	/* Accelerometer - High Pass / Slope path */
	//lsm6dsl_xl_reference_mode_set(&dev_ctx_lsm, PROPERTY_DISABLE);
	//lsm6dsl_xl_hp_bandwidth_set(&dev_ctx_lsm, LSM6DSL_XL_HP_ODR_DIV_100);
	/* Gyroscope - filtering chain */
	lsm6dsl_gy_band_pass_set(&dev_ctx_lsm6dsl, LSM6DSL_HP_260mHz_LP1_STRONG);
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	21a8      	movs	r1, #168	; 0xa8
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 fb57 	bl	8001768 <lsm6dsl_gy_band_pass_set>

	return dev_ctx_lsm6dsl;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	461c      	mov	r4, r3
 80010be:	f107 030c 	add.w	r3, r7, #12
 80010c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	371c      	adds	r7, #28
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd90      	pop	{r4, r7, pc}
 80010d2:	bf00      	nop
 80010d4:	08001199 	.word	0x08001199
 80010d8:	080011d3 	.word	0x080011d3
 80010dc:	20000628 	.word	0x20000628
 80010e0:	20000388 	.word	0x20000388
 80010e4:	40020800 	.word	0x40020800
 80010e8:	20000389 	.word	0x20000389

080010ec <lps22hh_init>:
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
	}
}

/* LPS22HH Functions ---------------------------------------------------------*/
stmdev_ctx_t lps22hh_init(void){
 80010ec:	b590      	push	{r4, r7, lr}
 80010ee:	b087      	sub	sp, #28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	stmdev_ctx_t dev_ctx_lps22hh;

	/* Initialize mems driver interface */
	dev_ctx_lps22hh.write_reg = lps22hh_write;
 80010f4:	4b22      	ldr	r3, [pc, #136]	; (8001180 <lps22hh_init+0x94>)
 80010f6:	60fb      	str	r3, [r7, #12]
	dev_ctx_lps22hh.read_reg = lps22hh_read;
 80010f8:	4b22      	ldr	r3, [pc, #136]	; (8001184 <lps22hh_init+0x98>)
 80010fa:	613b      	str	r3, [r7, #16]
	dev_ctx_lps22hh.handle = &SENSOR_BUS;
 80010fc:	4b22      	ldr	r3, [pc, #136]	; (8001188 <lps22hh_init+0x9c>)
 80010fe:	617b      	str	r3, [r7, #20]


	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 8001100:	200a      	movs	r0, #10
 8001102:	f000 f8bd 	bl	8001280 <platform_delay>

	/* Check device ID */
	whoamI_lps22hh = 0;
 8001106:	4b21      	ldr	r3, [pc, #132]	; (800118c <lps22hh_init+0xa0>)
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
	lps22hh_device_id_get(&dev_ctx_lps22hh, &whoamI_lps22hh);
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	491e      	ldr	r1, [pc, #120]	; (800118c <lps22hh_init+0xa0>)
 8001112:	4618      	mov	r0, r3
 8001114:	f000 f963 	bl	80013de <lps22hh_device_id_get>

	if ( whoamI_lps22hh != LPS22HH_ID ){
 8001118:	4b1c      	ldr	r3, [pc, #112]	; (800118c <lps22hh_init+0xa0>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2bb3      	cmp	r3, #179	; 0xb3
 800111e:	d007      	beq.n	8001130 <lps22hh_init+0x44>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001120:	2201      	movs	r2, #1
 8001122:	2104      	movs	r1, #4
 8001124:	481a      	ldr	r0, [pc, #104]	; (8001190 <lps22hh_init+0xa4>)
 8001126:	f002 faab 	bl	8003680 <HAL_GPIO_WritePin>
		__BKPT();
 800112a:	be00      	bkpt	0x0000
		Error_Handler();
 800112c:	f001 f8a6 	bl	800227c <Error_Handler>
	}


	/* Restore default configuration */
	lps22hh_reset_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	2101      	movs	r1, #1
 8001136:	4618      	mov	r0, r3
 8001138:	f000 f962 	bl	8001400 <lps22hh_reset_set>

	do {
		lps22hh_reset_get(&dev_ctx_lps22hh, &rst_lps22hh);
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	4914      	ldr	r1, [pc, #80]	; (8001194 <lps22hh_init+0xa8>)
 8001142:	4618      	mov	r0, r3
 8001144:	f000 f982 	bl	800144c <lps22hh_reset_get>
	} while (rst_lps22hh);
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <lps22hh_init+0xa8>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1f5      	bne.n	800113c <lps22hh_init+0x50>

	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	2101      	movs	r1, #1
 8001156:	4618      	mov	r0, r3
 8001158:	f000 f8cd 	bl	80012f6 <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&dev_ctx_lps22hh, LPS22HH_75_Hz_LOW_NOISE);
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	2115      	movs	r1, #21
 8001162:	4618      	mov	r0, r3
 8001164:	f000 f8ed 	bl	8001342 <lps22hh_data_rate_set>

	return dev_ctx_lps22hh;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	461c      	mov	r4, r3
 800116c:	f107 030c 	add.w	r3, r7, #12
 8001170:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001174:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	371c      	adds	r7, #28
 800117c:	46bd      	mov	sp, r7
 800117e:	bd90      	pop	{r4, r7, pc}
 8001180:	0800120d 	.word	0x0800120d
 8001184:	08001247 	.word	0x08001247
 8001188:	20000628 	.word	0x20000628
 800118c:	2000038a 	.word	0x2000038a
 8001190:	40020800 	.word	0x40020800
 8001194:	2000038b 	.word	0x2000038b

08001198 <lsm6dsl_write>:
 *
 */
static int32_t lsm6dsl_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af04      	add	r7, sp, #16
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	607a      	str	r2, [r7, #4]
 80011a2:	461a      	mov	r2, r3
 80011a4:	460b      	mov	r3, r1
 80011a6:	72fb      	strb	r3, [r7, #11]
 80011a8:	4613      	mov	r3, r2
 80011aa:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LSM6DSL_I2C_ADD_L, reg,
 80011ac:	7afb      	ldrb	r3, [r7, #11]
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b4:	9302      	str	r3, [sp, #8]
 80011b6:	893b      	ldrh	r3, [r7, #8]
 80011b8:	9301      	str	r3, [sp, #4]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	2301      	movs	r3, #1
 80011c0:	21d5      	movs	r1, #213	; 0xd5
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f002 fbec 	bl	80039a0 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <lsm6dsl_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lsm6dsl_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b088      	sub	sp, #32
 80011d6:	af04      	add	r7, sp, #16
 80011d8:	60f8      	str	r0, [r7, #12]
 80011da:	607a      	str	r2, [r7, #4]
 80011dc:	461a      	mov	r2, r3
 80011de:	460b      	mov	r3, r1
 80011e0:	72fb      	strb	r3, [r7, #11]
 80011e2:	4613      	mov	r3, r2
 80011e4:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Read(handle, LSM6DSL_I2C_ADD_L, reg,
 80011e6:	7afb      	ldrb	r3, [r7, #11]
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ee:	9302      	str	r3, [sp, #8]
 80011f0:	893b      	ldrh	r3, [r7, #8]
 80011f2:	9301      	str	r3, [sp, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2301      	movs	r3, #1
 80011fa:	21d5      	movs	r1, #213	; 0xd5
 80011fc:	68f8      	ldr	r0, [r7, #12]
 80011fe:	f002 fcc9 	bl	8003b94 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <lps22hh_write>:
 *
 */
static int32_t lps22hh_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af04      	add	r7, sp, #16
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	461a      	mov	r2, r3
 8001218:	460b      	mov	r3, r1
 800121a:	72fb      	strb	r3, [r7, #11]
 800121c:	4613      	mov	r3, r2
 800121e:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_L, reg,
 8001220:	7afb      	ldrb	r3, [r7, #11]
 8001222:	b29a      	uxth	r2, r3
 8001224:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001228:	9302      	str	r3, [sp, #8]
 800122a:	893b      	ldrh	r3, [r7, #8]
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2301      	movs	r3, #1
 8001234:	21b9      	movs	r1, #185	; 0xb9
 8001236:	68f8      	ldr	r0, [r7, #12]
 8001238:	f002 fbb2 	bl	80039a0 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <lps22hh_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lps22hh_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b088      	sub	sp, #32
 800124a:	af04      	add	r7, sp, #16
 800124c:	60f8      	str	r0, [r7, #12]
 800124e:	607a      	str	r2, [r7, #4]
 8001250:	461a      	mov	r2, r3
 8001252:	460b      	mov	r3, r1
 8001254:	72fb      	strb	r3, [r7, #11]
 8001256:	4613      	mov	r3, r2
 8001258:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_L, reg,
 800125a:	7afb      	ldrb	r3, [r7, #11]
 800125c:	b29a      	uxth	r2, r3
 800125e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001262:	9302      	str	r3, [sp, #8]
 8001264:	893b      	ldrh	r3, [r7, #8]
 8001266:	9301      	str	r3, [sp, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2301      	movs	r3, #1
 800126e:	21b9      	movs	r1, #185	; 0xb9
 8001270:	68f8      	ldr	r0, [r7, #12]
 8001272:	f002 fc8f 	bl	8003b94 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f001 fca5 	bl	8002bd8 <HAL_Delay>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001296:	b590      	push	{r4, r7, lr}
 8001298:	b087      	sub	sp, #28
 800129a:	af00      	add	r7, sp, #0
 800129c:	60f8      	str	r0, [r7, #12]
 800129e:	607a      	str	r2, [r7, #4]
 80012a0:	461a      	mov	r2, r3
 80012a2:	460b      	mov	r3, r1
 80012a4:	72fb      	strb	r3, [r7, #11]
 80012a6:	4613      	mov	r3, r2
 80012a8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	685c      	ldr	r4, [r3, #4]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6898      	ldr	r0, [r3, #8]
 80012b2:	893b      	ldrh	r3, [r7, #8]
 80012b4:	7af9      	ldrb	r1, [r7, #11]
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	47a0      	blx	r4
 80012ba:	6178      	str	r0, [r7, #20]

  return ret;
 80012bc:	697b      	ldr	r3, [r7, #20]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	371c      	adds	r7, #28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd90      	pop	{r4, r7, pc}

080012c6 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80012c6:	b590      	push	{r4, r7, lr}
 80012c8:	b087      	sub	sp, #28
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	60f8      	str	r0, [r7, #12]
 80012ce:	607a      	str	r2, [r7, #4]
 80012d0:	461a      	mov	r2, r3
 80012d2:	460b      	mov	r3, r1
 80012d4:	72fb      	strb	r3, [r7, #11]
 80012d6:	4613      	mov	r3, r2
 80012d8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681c      	ldr	r4, [r3, #0]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6898      	ldr	r0, [r3, #8]
 80012e2:	893b      	ldrh	r3, [r7, #8]
 80012e4:	7af9      	ldrb	r1, [r7, #11]
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	47a0      	blx	r4
 80012ea:	6178      	str	r0, [r7, #20]

  return ret;
 80012ec:	697b      	ldr	r3, [r7, #20]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	371c      	adds	r7, #28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd90      	pop	{r4, r7, pc}

080012f6 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b084      	sub	sp, #16
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	460b      	mov	r3, r1
 8001300:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8001302:	f107 0208 	add.w	r2, r7, #8
 8001306:	2301      	movs	r3, #1
 8001308:	2110      	movs	r1, #16
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff ffc3 	bl	8001296 <lps22hh_read_reg>
 8001310:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d10f      	bne.n	8001338 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8001318:	78fb      	ldrb	r3, [r7, #3]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	b2da      	uxtb	r2, r3
 8001320:	7a3b      	ldrb	r3, [r7, #8]
 8001322:	f362 0341 	bfi	r3, r2, #1, #1
 8001326:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8001328:	f107 0208 	add.w	r2, r7, #8
 800132c:	2301      	movs	r3, #1
 800132e:	2110      	movs	r1, #16
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ffc8 	bl	80012c6 <lps22hh_write_reg>
 8001336:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001338:	68fb      	ldr	r3, [r7, #12]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b086      	sub	sp, #24
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	460b      	mov	r3, r1
 800134c:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800134e:	f107 0210 	add.w	r2, r7, #16
 8001352:	2301      	movs	r3, #1
 8001354:	2110      	movs	r1, #16
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ff9d 	bl	8001296 <lps22hh_read_reg>
 800135c:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d107      	bne.n	8001374 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8001364:	f107 020c 	add.w	r2, r7, #12
 8001368:	2301      	movs	r3, #1
 800136a:	2111      	movs	r1, #17
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff ff92 	bl	8001296 <lps22hh_read_reg>
 8001372:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10f      	bne.n	800139a <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 800137a:	78fb      	ldrb	r3, [r7, #3]
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	b2da      	uxtb	r2, r3
 8001382:	7c3b      	ldrb	r3, [r7, #16]
 8001384:	f362 1306 	bfi	r3, r2, #4, #3
 8001388:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800138a:	f107 0210 	add.w	r2, r7, #16
 800138e:	2301      	movs	r3, #1
 8001390:	2110      	movs	r1, #16
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff ff97 	bl	80012c6 <lps22hh_write_reg>
 8001398:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d119      	bne.n	80013d4 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 80013a0:	78fb      	ldrb	r3, [r7, #3]
 80013a2:	091b      	lsrs	r3, r3, #4
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	7b3b      	ldrb	r3, [r7, #12]
 80013ac:	f362 0341 	bfi	r3, r2, #1, #1
 80013b0:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 80013b2:	78fb      	ldrb	r3, [r7, #3]
 80013b4:	08db      	lsrs	r3, r3, #3
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	7b3b      	ldrb	r3, [r7, #12]
 80013be:	f362 0300 	bfi	r3, r2, #0, #1
 80013c2:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80013c4:	f107 020c 	add.w	r2, r7, #12
 80013c8:	2301      	movs	r3, #1
 80013ca:	2111      	movs	r1, #17
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff ff7a 	bl	80012c6 <lps22hh_write_reg>
 80013d2:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80013d4:	697b      	ldr	r3, [r7, #20]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b084      	sub	sp, #16
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 80013e8:	2301      	movs	r3, #1
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	210f      	movs	r1, #15
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff ff51 	bl	8001296 <lps22hh_read_reg>
 80013f4:	60f8      	str	r0, [r7, #12]

  return ret;
 80013f6:	68fb      	ldr	r3, [r7, #12]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800140c:	f107 0208 	add.w	r2, r7, #8
 8001410:	2301      	movs	r3, #1
 8001412:	2111      	movs	r1, #17
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ff3e 	bl	8001296 <lps22hh_read_reg>
 800141a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d10f      	bne.n	8001442 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8001422:	78fb      	ldrb	r3, [r7, #3]
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	b2da      	uxtb	r2, r3
 800142a:	7a3b      	ldrb	r3, [r7, #8]
 800142c:	f362 0382 	bfi	r3, r2, #2, #1
 8001430:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8001432:	f107 0208 	add.w	r2, r7, #8
 8001436:	2301      	movs	r3, #1
 8001438:	2111      	movs	r1, #17
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff ff43 	bl	80012c6 <lps22hh_write_reg>
 8001440:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001442:	68fb      	ldr	r3, [r7, #12]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8001456:	f107 0208 	add.w	r2, r7, #8
 800145a:	2301      	movs	r3, #1
 800145c:	2111      	movs	r1, #17
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff ff19 	bl	8001296 <lps22hh_read_reg>
 8001464:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8001466:	7a3b      	ldrb	r3, [r7, #8]
 8001468:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800146c:	b2db      	uxtb	r3, r3
 800146e:	461a      	mov	r2, r3
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	701a      	strb	r2, [r3, #0]

  return ret;
 8001474:	68fb      	ldr	r3, [r7, #12]
}
 8001476:	4618      	mov	r0, r3
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800147e:	b590      	push	{r4, r7, lr}
 8001480:	b087      	sub	sp, #28
 8001482:	af00      	add	r7, sp, #0
 8001484:	60f8      	str	r0, [r7, #12]
 8001486:	607a      	str	r2, [r7, #4]
 8001488:	461a      	mov	r2, r3
 800148a:	460b      	mov	r3, r1
 800148c:	72fb      	strb	r3, [r7, #11]
 800148e:	4613      	mov	r3, r2
 8001490:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	685c      	ldr	r4, [r3, #4]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6898      	ldr	r0, [r3, #8]
 800149a:	893b      	ldrh	r3, [r7, #8]
 800149c:	7af9      	ldrb	r1, [r7, #11]
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	47a0      	blx	r4
 80014a2:	6178      	str	r0, [r7, #20]

  return ret;
 80014a4:	697b      	ldr	r3, [r7, #20]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	371c      	adds	r7, #28
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd90      	pop	{r4, r7, pc}

080014ae <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80014ae:	b590      	push	{r4, r7, lr}
 80014b0:	b087      	sub	sp, #28
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	60f8      	str	r0, [r7, #12]
 80014b6:	607a      	str	r2, [r7, #4]
 80014b8:	461a      	mov	r2, r3
 80014ba:	460b      	mov	r3, r1
 80014bc:	72fb      	strb	r3, [r7, #11]
 80014be:	4613      	mov	r3, r2
 80014c0:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681c      	ldr	r4, [r3, #0]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6898      	ldr	r0, [r3, #8]
 80014ca:	893b      	ldrh	r3, [r7, #8]
 80014cc:	7af9      	ldrb	r1, [r7, #11]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	47a0      	blx	r4
 80014d2:	6178      	str	r0, [r7, #20]

  return ret;
 80014d4:	697b      	ldr	r3, [r7, #20]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	371c      	adds	r7, #28
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd90      	pop	{r4, r7, pc}

080014de <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b084      	sub	sp, #16
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	460b      	mov	r3, r1
 80014e8:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80014ea:	f107 0208 	add.w	r2, r7, #8
 80014ee:	2301      	movs	r3, #1
 80014f0:	2110      	movs	r1, #16
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff ffc3 	bl	800147e <lsm6dsl_read_reg>
 80014f8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d10f      	bne.n	8001520 <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8001500:	78fb      	ldrb	r3, [r7, #3]
 8001502:	f003 0303 	and.w	r3, r3, #3
 8001506:	b2da      	uxtb	r2, r3
 8001508:	7a3b      	ldrb	r3, [r7, #8]
 800150a:	f362 0383 	bfi	r3, r2, #2, #2
 800150e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001510:	f107 0208 	add.w	r2, r7, #8
 8001514:	2301      	movs	r3, #1
 8001516:	2110      	movs	r1, #16
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff ffc8 	bl	80014ae <lsm6dsl_write_reg>
 800151e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001520:	68fb      	ldr	r3, [r7, #12]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b084      	sub	sp, #16
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
 8001532:	460b      	mov	r3, r1
 8001534:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001536:	f107 0208 	add.w	r2, r7, #8
 800153a:	2301      	movs	r3, #1
 800153c:	2110      	movs	r1, #16
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff ff9d 	bl	800147e <lsm6dsl_read_reg>
 8001544:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d10f      	bne.n	800156c <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 800154c:	78fb      	ldrb	r3, [r7, #3]
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	b2da      	uxtb	r2, r3
 8001554:	7a3b      	ldrb	r3, [r7, #8]
 8001556:	f362 1307 	bfi	r3, r2, #4, #4
 800155a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800155c:	f107 0208 	add.w	r2, r7, #8
 8001560:	2301      	movs	r3, #1
 8001562:	2110      	movs	r1, #16
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff ffa2 	bl	80014ae <lsm6dsl_write_reg>
 800156a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800156c:	68fb      	ldr	r3, [r7, #12]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b084      	sub	sp, #16
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	460b      	mov	r3, r1
 8001580:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001582:	f107 0208 	add.w	r2, r7, #8
 8001586:	2301      	movs	r3, #1
 8001588:	2111      	movs	r1, #17
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff ff77 	bl	800147e <lsm6dsl_read_reg>
 8001590:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10f      	bne.n	80015b8 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8001598:	78fb      	ldrb	r3, [r7, #3]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	7a3b      	ldrb	r3, [r7, #8]
 80015a2:	f362 0343 	bfi	r3, r2, #1, #3
 80015a6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80015a8:	f107 0208 	add.w	r2, r7, #8
 80015ac:	2301      	movs	r3, #1
 80015ae:	2111      	movs	r1, #17
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ff7c 	bl	80014ae <lsm6dsl_write_reg>
 80015b6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80015b8:	68fb      	ldr	r3, [r7, #12]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b084      	sub	sp, #16
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	460b      	mov	r3, r1
 80015cc:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80015ce:	f107 0208 	add.w	r2, r7, #8
 80015d2:	2301      	movs	r3, #1
 80015d4:	2111      	movs	r1, #17
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff ff51 	bl	800147e <lsm6dsl_read_reg>
 80015dc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d10f      	bne.n	8001604 <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	7a3b      	ldrb	r3, [r7, #8]
 80015ee:	f362 1307 	bfi	r3, r2, #4, #4
 80015f2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80015f4:	f107 0208 	add.w	r2, r7, #8
 80015f8:	2301      	movs	r3, #1
 80015fa:	2111      	movs	r1, #17
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff ff56 	bl	80014ae <lsm6dsl_write_reg>
 8001602:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001604:	68fb      	ldr	r3, [r7, #12]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b084      	sub	sp, #16
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	460b      	mov	r3, r1
 8001618:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800161a:	f107 0208 	add.w	r2, r7, #8
 800161e:	2301      	movs	r3, #1
 8001620:	2112      	movs	r1, #18
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff ff2b 	bl	800147e <lsm6dsl_read_reg>
 8001628:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d10f      	bne.n	8001650 <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8001630:	78fb      	ldrb	r3, [r7, #3]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	b2da      	uxtb	r2, r3
 8001638:	7a3b      	ldrb	r3, [r7, #8]
 800163a:	f362 1386 	bfi	r3, r2, #6, #1
 800163e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001640:	f107 0208 	add.w	r2, r7, #8
 8001644:	2301      	movs	r3, #1
 8001646:	2112      	movs	r1, #18
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ff30 	bl	80014ae <lsm6dsl_write_reg>
 800164e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001650:	68fb      	ldr	r3, [r7, #12]
}
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b084      	sub	sp, #16
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
 8001662:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8001664:	2301      	movs	r3, #1
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	210f      	movs	r1, #15
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff ff07 	bl	800147e <lsm6dsl_read_reg>
 8001670:	60f8      	str	r0, [r7, #12]

  return ret;
 8001672:	68fb      	ldr	r3, [r7, #12]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001688:	f107 0208 	add.w	r2, r7, #8
 800168c:	2301      	movs	r3, #1
 800168e:	2112      	movs	r1, #18
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff fef4 	bl	800147e <lsm6dsl_read_reg>
 8001696:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d10f      	bne.n	80016be <lsm6dsl_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 800169e:	78fb      	ldrb	r3, [r7, #3]
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	7a3b      	ldrb	r3, [r7, #8]
 80016a8:	f362 0300 	bfi	r3, r2, #0, #1
 80016ac:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80016ae:	f107 0208 	add.w	r2, r7, #8
 80016b2:	2301      	movs	r3, #1
 80016b4:	2112      	movs	r1, #18
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff fef9 	bl	80014ae <lsm6dsl_write_reg>
 80016bc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80016be:	68fb      	ldr	r3, [r7, #12]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <lsm6dsl_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80016d2:	f107 0208 	add.w	r2, r7, #8
 80016d6:	2301      	movs	r3, #1
 80016d8:	2112      	movs	r1, #18
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff fecf 	bl	800147e <lsm6dsl_read_reg>
 80016e0:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 80016e2:	7a3b      	ldrb	r3, [r7, #8]
 80016e4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	461a      	mov	r2, r3
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	701a      	strb	r2, [r3, #0]

  return ret;
 80016f0:	68fb      	ldr	r3, [r7, #12]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <lsm6dsl_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                     lsm6dsl_input_composite_t val)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b084      	sub	sp, #16
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	460b      	mov	r3, r1
 8001704:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8001706:	f107 0208 	add.w	r2, r7, #8
 800170a:	2301      	movs	r3, #1
 800170c:	2117      	movs	r1, #23
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff feb5 	bl	800147e <lsm6dsl_read_reg>
 8001714:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d120      	bne.n	800175e <lsm6dsl_xl_lp2_bandwidth_set+0x64>
  {
    ctrl8_xl.input_composite = ((uint8_t) val & 0x10U) >> 4;
 800171c:	78fb      	ldrb	r3, [r7, #3]
 800171e:	091b      	lsrs	r3, r3, #4
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	b2da      	uxtb	r2, r3
 8001726:	7a3b      	ldrb	r3, [r7, #8]
 8001728:	f362 03c3 	bfi	r3, r2, #3, #1
 800172c:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 800172e:	78fb      	ldrb	r3, [r7, #3]
 8001730:	f003 0303 	and.w	r3, r3, #3
 8001734:	b2da      	uxtb	r2, r3
 8001736:	7a3b      	ldrb	r3, [r7, #8]
 8001738:	f362 1346 	bfi	r3, r2, #5, #2
 800173c:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 800173e:	7a3b      	ldrb	r3, [r7, #8]
 8001740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001744:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 8001746:	7a3b      	ldrb	r3, [r7, #8]
 8001748:	f36f 0382 	bfc	r3, #2, #1
 800174c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 800174e:	f107 0208 	add.w	r2, r7, #8
 8001752:	2301      	movs	r3, #1
 8001754:	2117      	movs	r1, #23
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff fea9 	bl	80014ae <lsm6dsl_write_reg>
 800175c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800175e:	68fb      	ldr	r3, [r7, #12]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <lsm6dsl_gy_band_pass_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_band_pass_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_lpf1_sel_g_t val)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_ctrl6_c_t ctrl6_c;
  lsm6dsl_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8001774:	f107 0208 	add.w	r2, r7, #8
 8001778:	2301      	movs	r3, #1
 800177a:	2116      	movs	r1, #22
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff fe7e 	bl	800147e <lsm6dsl_read_reg>
 8001782:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d157      	bne.n	800183a <lsm6dsl_gy_band_pass_set+0xd2>
  {
    ctrl7_g.hpm_g  = ((uint8_t)val & 0x30U) >> 4;
 800178a:	78fb      	ldrb	r3, [r7, #3]
 800178c:	091b      	lsrs	r3, r3, #4
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	b2da      	uxtb	r2, r3
 8001794:	7a3b      	ldrb	r3, [r7, #8]
 8001796:	f362 1305 	bfi	r3, r2, #4, #2
 800179a:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ((uint8_t)val & 0x80U) >> 7;
 800179c:	78fb      	ldrb	r3, [r7, #3]
 800179e:	09db      	lsrs	r3, r3, #7
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	7a3b      	ldrb	r3, [r7, #8]
 80017aa:	f362 1386 	bfi	r3, r2, #6, #1
 80017ae:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 80017b0:	f107 0208 	add.w	r2, r7, #8
 80017b4:	2301      	movs	r3, #1
 80017b6:	2116      	movs	r1, #22
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff fe78 	bl	80014ae <lsm6dsl_write_reg>
 80017be:	6178      	str	r0, [r7, #20]

    if (ret == 0)
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d139      	bne.n	800183a <lsm6dsl_gy_band_pass_set+0xd2>
    {
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 80017c6:	f107 020c 	add.w	r2, r7, #12
 80017ca:	2301      	movs	r3, #1
 80017cc:	2115      	movs	r1, #21
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff fe55 	bl	800147e <lsm6dsl_read_reg>
 80017d4:	6178      	str	r0, [r7, #20]

      if (ret == 0)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d12e      	bne.n	800183a <lsm6dsl_gy_band_pass_set+0xd2>
      {
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	7b3b      	ldrb	r3, [r7, #12]
 80017e6:	f362 0301 	bfi	r3, r2, #0, #2
 80017ea:	733b      	strb	r3, [r7, #12]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 80017ec:	f107 020c 	add.w	r2, r7, #12
 80017f0:	2301      	movs	r3, #1
 80017f2:	2115      	movs	r1, #21
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff fe5a 	bl	80014ae <lsm6dsl_write_reg>
 80017fa:	6178      	str	r0, [r7, #20]

        if (ret == 0)
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d11b      	bne.n	800183a <lsm6dsl_gy_band_pass_set+0xd2>
        {
          ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C,
 8001802:	f107 0210 	add.w	r2, r7, #16
 8001806:	2301      	movs	r3, #1
 8001808:	2113      	movs	r1, #19
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff fe37 	bl	800147e <lsm6dsl_read_reg>
 8001810:	6178      	str	r0, [r7, #20]
                                 (uint8_t *)&ctrl4_c, 1);

          if (ret == 0)
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d110      	bne.n	800183a <lsm6dsl_gy_band_pass_set+0xd2>
          {
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 8001818:	78fb      	ldrb	r3, [r7, #3]
 800181a:	08db      	lsrs	r3, r3, #3
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	b2da      	uxtb	r2, r3
 8001822:	7c3b      	ldrb	r3, [r7, #16]
 8001824:	f362 0341 	bfi	r3, r2, #1, #1
 8001828:	743b      	strb	r3, [r7, #16]
            ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C,
 800182a:	f107 0210 	add.w	r2, r7, #16
 800182e:	2301      	movs	r3, #1
 8001830:	2113      	movs	r1, #19
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff fe3b 	bl	80014ae <lsm6dsl_write_reg>
 8001838:	6178      	str	r0, [r7, #20]
        }
      }
    }
  }

  return ret;
 800183a:	697b      	ldr	r3, [r7, #20]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800184c:	f001 f952 	bl	8002af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001850:	f000 f8d0 	bl	80019f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001854:	f000 fba0 	bl	8001f98 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001858:	f000 f936 	bl	8001ac8 <MX_ADC1_Init>
  MX_SPI4_Init();
 800185c:	f000 fa3c 	bl	8001cd8 <MX_SPI4_Init>
  MX_TIM2_Init();
 8001860:	f000 faa6 	bl	8001db0 <MX_TIM2_Init>
  MX_SPI5_Init();
 8001864:	f000 fa6e 	bl	8001d44 <MX_SPI5_Init>
  MX_FATFS_Init();
 8001868:	f007 ff46 	bl	80096f8 <MX_FATFS_Init>
  MX_I2C3_Init();
 800186c:	f000 f9be 	bl	8001bec <MX_I2C3_Init>
  MX_USART6_UART_Init();
 8001870:	f000 fb68 	bl	8001f44 <MX_USART6_UART_Init>
  MX_I2C2_Init();
 8001874:	f000 f97a 	bl	8001b6c <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8001878:	f00a f944 	bl	800bb04 <MX_USB_DEVICE_Init>
  MX_USART3_UART_Init();
 800187c:	f000 fb38 	bl	8001ef0 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8001880:	f000 f9f4 	bl	8001c6c <MX_SPI2_Init>
  MX_UART8_Init();
 8001884:	f000 fb0a 	bl	8001e9c <MX_UART8_Init>
  /* USER CODE BEGIN 2 */

  // reset LEDs
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8001888:	2200      	movs	r2, #0
 800188a:	2102      	movs	r1, #2
 800188c:	4850      	ldr	r0, [pc, #320]	; (80019d0 <main+0x18c>)
 800188e:	f001 fef7 	bl	8003680 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8001892:	2200      	movs	r2, #0
 8001894:	2104      	movs	r1, #4
 8001896:	484e      	ldr	r0, [pc, #312]	; (80019d0 <main+0x18c>)
 8001898:	f001 fef2 	bl	8003680 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 800189c:	2200      	movs	r2, #0
 800189e:	2108      	movs	r1, #8
 80018a0:	484b      	ldr	r0, [pc, #300]	; (80019d0 <main+0x18c>)
 80018a2:	f001 feed 	bl	8003680 <HAL_GPIO_WritePin>

  // reset recovery pyro pins
  HAL_GPIO_WritePin(Rcov_Arm_GPIO_Port, Rcov_Arm_Pin, RESET);
 80018a6:	2200      	movs	r2, #0
 80018a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018ac:	4849      	ldr	r0, [pc, #292]	; (80019d4 <main+0x190>)
 80018ae:	f001 fee7 	bl	8003680 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Rcov_Gate_Drogue_GPIO_Port, Rcov_Gate_Drogue_Pin, RESET);
 80018b2:	2200      	movs	r2, #0
 80018b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018b8:	4846      	ldr	r0, [pc, #280]	; (80019d4 <main+0x190>)
 80018ba:	f001 fee1 	bl	8003680 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Rcov_Gate_Main_GPIO_Port, Rcov_Gate_Main_Pin, RESET);
 80018be:	2200      	movs	r2, #0
 80018c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018c4:	4843      	ldr	r0, [pc, #268]	; (80019d4 <main+0x190>)
 80018c6:	f001 fedb 	bl	8003680 <HAL_GPIO_WritePin>

  // reset prop pyro pins
  HAL_GPIO_WritePin(Prop_Pyro_Arming_GPIO_Port, Prop_Pyro_Arming_Pin, RESET);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2102      	movs	r1, #2
 80018ce:	4841      	ldr	r0, [pc, #260]	; (80019d4 <main+0x190>)
 80018d0:	f001 fed6 	bl	8003680 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Prop_Gate_1_GPIO_Port, Prop_Gate_1_Pin, RESET);
 80018d4:	2200      	movs	r2, #0
 80018d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018da:	483f      	ldr	r0, [pc, #252]	; (80019d8 <main+0x194>)
 80018dc:	f001 fed0 	bl	8003680 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Prop_Gate_2_GPIO_Port, Prop_Gate_2_Pin, RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018e6:	483c      	ldr	r0, [pc, #240]	; (80019d8 <main+0x194>)
 80018e8:	f001 feca 	bl	8003680 <HAL_GPIO_WritePin>

  // reset 12 V buck converter enable pin (disable converter)
  HAL_GPIO_WritePin(PM_12V_EN_GPIO_Port, PM_12V_EN_Pin, RESET);
 80018ec:	2200      	movs	r2, #0
 80018ee:	2104      	movs	r1, #4
 80018f0:	483a      	ldr	r0, [pc, #232]	; (80019dc <main+0x198>)
 80018f2:	f001 fec5 	bl	8003680 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2180      	movs	r1, #128	; 0x80
 80018fa:	4838      	ldr	r0, [pc, #224]	; (80019dc <main+0x198>)
 80018fc:	f001 fec0 	bl	8003680 <HAL_GPIO_WritePin>

  // reset payload EN signal
  HAL_GPIO_WritePin(Payload_EN_GPIO_Port, Payload_EN_Pin, RESET);
 8001900:	2200      	movs	r2, #0
 8001902:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001906:	4835      	ldr	r0, [pc, #212]	; (80019dc <main+0x198>)
 8001908:	f001 feba 	bl	8003680 <HAL_GPIO_WritePin>

  // set CS pin for thermocouple chip high
  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

  // set power off for VR
  HAL_GPIO_WritePin(VR_CTRL_PWR_GPIO_Port, VR_CTRL_PWR_Pin, RESET);
 800190c:	2200      	movs	r2, #0
 800190e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001912:	4830      	ldr	r0, [pc, #192]	; (80019d4 <main+0x190>)
 8001914:	f001 feb4 	bl	8003680 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, RESET);
 8001918:	2200      	movs	r2, #0
 800191a:	2180      	movs	r1, #128	; 0x80
 800191c:	4830      	ldr	r0, [pc, #192]	; (80019e0 <main+0x19c>)
 800191e:	f001 feaf 	bl	8003680 <HAL_GPIO_WritePin>

  // FLASH set CS, WP and IO3 pins high
  HAL_GPIO_WritePin(CS_FLASH_GPIO_Port, CS_FLASH_Pin, SET);
 8001922:	2201      	movs	r2, #1
 8001924:	2140      	movs	r1, #64	; 0x40
 8001926:	482e      	ldr	r0, [pc, #184]	; (80019e0 <main+0x19c>)
 8001928:	f001 feaa 	bl	8003680 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FLASH_WP_GPIO_Port, FLASH_WP_Pin, SET);
 800192c:	2201      	movs	r2, #1
 800192e:	2120      	movs	r1, #32
 8001930:	482b      	ldr	r0, [pc, #172]	; (80019e0 <main+0x19c>)
 8001932:	f001 fea5 	bl	8003680 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FLASH_IO3_GPIO_Port, FLASH_IO3_Pin, SET);
 8001936:	2201      	movs	r2, #1
 8001938:	2110      	movs	r1, #16
 800193a:	4829      	ldr	r0, [pc, #164]	; (80019e0 <main+0x19c>)
 800193c:	f001 fea0 	bl	8003680 <HAL_GPIO_WritePin>


  dev_ctx_lsm = lsm6dsl_init();
 8001940:	4c28      	ldr	r4, [pc, #160]	; (80019e4 <main+0x1a0>)
 8001942:	463b      	mov	r3, r7
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fb61 	bl	800100c <lsm6dsl_init>
 800194a:	463a      	mov	r2, r7
 800194c:	4623      	mov	r3, r4
 800194e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001950:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  dev_ctx_lps = lps22hh_init();
 8001954:	4c24      	ldr	r4, [pc, #144]	; (80019e8 <main+0x1a4>)
 8001956:	463b      	mov	r3, r7
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fbc7 	bl	80010ec <lps22hh_init>
 800195e:	463a      	mov	r2, r7
 8001960:	4623      	mov	r3, r4
 8001962:	ca07      	ldmia	r2, {r0, r1, r2}
 8001964:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_TIM_Base_Start_IT(&htim2); // doing PWM of the valve
#endif


#ifdef TEST_BLINKY
	uint8_t counter = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	f887 33ff 	strb.w	r3, [r7, #1023]	; 0x3ff
	while (1)
	{
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800196e:	2102      	movs	r1, #2
 8001970:	4817      	ldr	r0, [pc, #92]	; (80019d0 <main+0x18c>)
 8001972:	f001 fe9e 	bl	80036b2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001976:	2104      	movs	r1, #4
 8001978:	4815      	ldr	r0, [pc, #84]	; (80019d0 <main+0x18c>)
 800197a:	f001 fe9a 	bl	80036b2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800197e:	2108      	movs	r1, #8
 8001980:	4813      	ldr	r0, [pc, #76]	; (80019d0 <main+0x18c>)
 8001982:	f001 fe96 	bl	80036b2 <HAL_GPIO_TogglePin>

		char msg_buffer[1000];
		sprintf(msg_buffer, "printing count = %d!\r\n", counter++);
 8001986:	f897 33ff 	ldrb.w	r3, [r7, #1023]	; 0x3ff
 800198a:	1c5a      	adds	r2, r3, #1
 800198c:	f887 23ff 	strb.w	r2, [r7, #1023]	; 0x3ff
 8001990:	461a      	mov	r2, r3
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	4915      	ldr	r1, [pc, #84]	; (80019ec <main+0x1a8>)
 8001998:	4618      	mov	r0, r3
 800199a:	f00b fd37 	bl	800d40c <siprintf>

		if (counter > 100) counter = 0;
 800199e:	f897 33ff 	ldrb.w	r3, [r7, #1023]	; 0x3ff
 80019a2:	2b64      	cmp	r3, #100	; 0x64
 80019a4:	d902      	bls.n	80019ac <main+0x168>
 80019a6:	2300      	movs	r3, #0
 80019a8:	f887 33ff 	strb.w	r3, [r7, #1023]	; 0x3ff
		HAL_UART_Transmit(&huart8, msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7fe fc1d 	bl	80001f0 <strlen>
 80019b6:	4603      	mov	r3, r0
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	f107 0114 	add.w	r1, r7, #20
 80019be:	f04f 33ff 	mov.w	r3, #4294967295
 80019c2:	480b      	ldr	r0, [pc, #44]	; (80019f0 <main+0x1ac>)
 80019c4:	f006 f855 	bl	8007a72 <HAL_UART_Transmit>

		HAL_Delay(200);
 80019c8:	20c8      	movs	r0, #200	; 0xc8
 80019ca:	f001 f905 	bl	8002bd8 <HAL_Delay>
	{
 80019ce:	e7ce      	b.n	800196e <main+0x12a>
 80019d0:	40020800 	.word	0x40020800
 80019d4:	40021800 	.word	0x40021800
 80019d8:	40021400 	.word	0x40021400
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40020c00 	.word	0x40020c00
 80019e4:	20000d60 	.word	0x20000d60
 80019e8:	20000d6c 	.word	0x20000d6c
 80019ec:	08010dc8 	.word	0x08010dc8
 80019f0:	20000c8c 	.word	0x20000c8c

080019f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b094      	sub	sp, #80	; 0x50
 80019f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019fa:	f107 0320 	add.w	r3, r7, #32
 80019fe:	2230      	movs	r2, #48	; 0x30
 8001a00:	2100      	movs	r1, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f00a fdc0 	bl	800c588 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a08:	f107 030c 	add.w	r3, r7, #12
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	4b28      	ldr	r3, [pc, #160]	; (8001ac0 <SystemClock_Config+0xcc>)
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a20:	4a27      	ldr	r2, [pc, #156]	; (8001ac0 <SystemClock_Config+0xcc>)
 8001a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a26:	6413      	str	r3, [r2, #64]	; 0x40
 8001a28:	4b25      	ldr	r3, [pc, #148]	; (8001ac0 <SystemClock_Config+0xcc>)
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a34:	2300      	movs	r3, #0
 8001a36:	607b      	str	r3, [r7, #4]
 8001a38:	4b22      	ldr	r3, [pc, #136]	; (8001ac4 <SystemClock_Config+0xd0>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a40:	4a20      	ldr	r2, [pc, #128]	; (8001ac4 <SystemClock_Config+0xd0>)
 8001a42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	4b1e      	ldr	r3, [pc, #120]	; (8001ac4 <SystemClock_Config+0xd0>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a50:	607b      	str	r3, [r7, #4]
 8001a52:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a54:	2301      	movs	r3, #1
 8001a56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a68:	2308      	movs	r3, #8
 8001a6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001a6c:	2348      	movs	r3, #72	; 0x48
 8001a6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a70:	2302      	movs	r3, #2
 8001a72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001a74:	2303      	movs	r3, #3
 8001a76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a78:	f107 0320 	add.w	r3, r7, #32
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f004 f809 	bl	8005a94 <HAL_RCC_OscConfig>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a88:	f000 fbf8 	bl	800227c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a8c:	230f      	movs	r3, #15
 8001a8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a90:	2302      	movs	r3, #2
 8001a92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001aa2:	f107 030c 	add.w	r3, r7, #12
 8001aa6:	2102      	movs	r1, #2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f004 fa6b 	bl	8005f84 <HAL_RCC_ClockConfig>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001ab4:	f000 fbe2 	bl	800227c <Error_Handler>
  }
}
 8001ab8:	bf00      	nop
 8001aba:	3750      	adds	r7, #80	; 0x50
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40007000 	.word	0x40007000

08001ac8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ace:	463b      	mov	r3, r7
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ada:	4b21      	ldr	r3, [pc, #132]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001adc:	4a21      	ldr	r2, [pc, #132]	; (8001b64 <MX_ADC1_Init+0x9c>)
 8001ade:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001ae0:	4b1f      	ldr	r3, [pc, #124]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ae6:	4b1e      	ldr	r3, [pc, #120]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001aec:	4b1c      	ldr	r3, [pc, #112]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001af2:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001af8:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b00:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b06:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001b08:	4a17      	ldr	r2, [pc, #92]	; (8001b68 <MX_ADC1_Init+0xa0>)
 8001b0a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b0c:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b12:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b20:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b26:	480e      	ldr	r0, [pc, #56]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001b28:	f001 f87a 	bl	8002c20 <HAL_ADC_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001b32:	f000 fba3 	bl	800227c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001b36:	2306      	movs	r3, #6
 8001b38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001b3e:	2307      	movs	r3, #7
 8001b40:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b42:	463b      	mov	r3, r7
 8001b44:	4619      	mov	r1, r3
 8001b46:	4806      	ldr	r0, [pc, #24]	; (8001b60 <MX_ADC1_Init+0x98>)
 8001b48:	f001 f8ae 	bl	8002ca8 <HAL_ADC_ConfigChannel>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001b52:	f000 fb93 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	200009f4 	.word	0x200009f4
 8001b64:	40012000 	.word	0x40012000
 8001b68:	0f000001 	.word	0x0f000001

08001b6c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b70:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <MX_I2C2_Init+0x74>)
 8001b72:	4a1c      	ldr	r2, [pc, #112]	; (8001be4 <MX_I2C2_Init+0x78>)
 8001b74:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001b76:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <MX_I2C2_Init+0x74>)
 8001b78:	4a1b      	ldr	r2, [pc, #108]	; (8001be8 <MX_I2C2_Init+0x7c>)
 8001b7a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b7c:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <MX_I2C2_Init+0x74>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b82:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <MX_I2C2_Init+0x74>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b88:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <MX_I2C2_Init+0x74>)
 8001b8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b8e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b90:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <MX_I2C2_Init+0x74>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b96:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <MX_I2C2_Init+0x74>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b9c:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <MX_I2C2_Init+0x74>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <MX_I2C2_Init+0x74>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ba8:	480d      	ldr	r0, [pc, #52]	; (8001be0 <MX_I2C2_Init+0x74>)
 8001baa:	f001 fdb5 	bl	8003718 <HAL_I2C_Init>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001bb4:	f000 fb62 	bl	800227c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4809      	ldr	r0, [pc, #36]	; (8001be0 <MX_I2C2_Init+0x74>)
 8001bbc:	f002 fd6b 	bl	8004696 <HAL_I2CEx_ConfigAnalogFilter>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001bc6:	f000 fb59 	bl	800227c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4804      	ldr	r0, [pc, #16]	; (8001be0 <MX_I2C2_Init+0x74>)
 8001bce:	f002 fd9e 	bl	800470e <HAL_I2CEx_ConfigDigitalFilter>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001bd8:	f000 fb50 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	200009a0 	.word	0x200009a0
 8001be4:	40005800 	.word	0x40005800
 8001be8:	000186a0 	.word	0x000186a0

08001bec <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001bf0:	4b1b      	ldr	r3, [pc, #108]	; (8001c60 <MX_I2C3_Init+0x74>)
 8001bf2:	4a1c      	ldr	r2, [pc, #112]	; (8001c64 <MX_I2C3_Init+0x78>)
 8001bf4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001bf6:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <MX_I2C3_Init+0x74>)
 8001bf8:	4a1b      	ldr	r2, [pc, #108]	; (8001c68 <MX_I2C3_Init+0x7c>)
 8001bfa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bfc:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <MX_I2C3_Init+0x74>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001c02:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <MX_I2C3_Init+0x74>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c08:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <MX_I2C3_Init+0x74>)
 8001c0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c0e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c10:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <MX_I2C3_Init+0x74>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001c16:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <MX_I2C3_Init+0x74>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c1c:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <MX_I2C3_Init+0x74>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c22:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <MX_I2C3_Init+0x74>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001c28:	480d      	ldr	r0, [pc, #52]	; (8001c60 <MX_I2C3_Init+0x74>)
 8001c2a:	f001 fd75 	bl	8003718 <HAL_I2C_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001c34:	f000 fb22 	bl	800227c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c38:	2100      	movs	r1, #0
 8001c3a:	4809      	ldr	r0, [pc, #36]	; (8001c60 <MX_I2C3_Init+0x74>)
 8001c3c:	f002 fd2b 	bl	8004696 <HAL_I2CEx_ConfigAnalogFilter>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001c46:	f000 fb19 	bl	800227c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4804      	ldr	r0, [pc, #16]	; (8001c60 <MX_I2C3_Init+0x74>)
 8001c4e:	f002 fd5e 	bl	800470e <HAL_I2CEx_ConfigDigitalFilter>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001c58:	f000 fb10 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000628 	.word	0x20000628
 8001c64:	40005c00 	.word	0x40005c00
 8001c68:	000186a0 	.word	0x000186a0

08001c6c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001c70:	4b17      	ldr	r3, [pc, #92]	; (8001cd0 <MX_SPI2_Init+0x64>)
 8001c72:	4a18      	ldr	r2, [pc, #96]	; (8001cd4 <MX_SPI2_Init+0x68>)
 8001c74:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c76:	4b16      	ldr	r3, [pc, #88]	; (8001cd0 <MX_SPI2_Init+0x64>)
 8001c78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c7c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c7e:	4b14      	ldr	r3, [pc, #80]	; (8001cd0 <MX_SPI2_Init+0x64>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c84:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <MX_SPI2_Init+0x64>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c8a:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <MX_SPI2_Init+0x64>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c90:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <MX_SPI2_Init+0x64>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c96:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <MX_SPI2_Init+0x64>)
 8001c98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c9c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001c9e:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <MX_SPI2_Init+0x64>)
 8001ca0:	2210      	movs	r2, #16
 8001ca2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ca4:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <MX_SPI2_Init+0x64>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <MX_SPI2_Init+0x64>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cb0:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <MX_SPI2_Init+0x64>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <MX_SPI2_Init+0x64>)
 8001cb8:	220a      	movs	r2, #10
 8001cba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001cbc:	4804      	ldr	r0, [pc, #16]	; (8001cd0 <MX_SPI2_Init+0x64>)
 8001cbe:	f004 fb5b 	bl	8006378 <HAL_SPI_Init>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001cc8:	f000 fad8 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ccc:	bf00      	nop
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	2000067c 	.word	0x2000067c
 8001cd4:	40003800 	.word	0x40003800

08001cd8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001cdc:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <MX_SPI4_Init+0x64>)
 8001cde:	4a18      	ldr	r2, [pc, #96]	; (8001d40 <MX_SPI4_Init+0x68>)
 8001ce0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001ce2:	4b16      	ldr	r3, [pc, #88]	; (8001d3c <MX_SPI4_Init+0x64>)
 8001ce4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ce8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001cea:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <MX_SPI4_Init+0x64>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <MX_SPI4_Init+0x64>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cf6:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <MX_SPI4_Init+0x64>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <MX_SPI4_Init+0x64>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001d02:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <MX_SPI4_Init+0x64>)
 8001d04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d08:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001d0a:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <MX_SPI4_Init+0x64>)
 8001d0c:	2230      	movs	r2, #48	; 0x30
 8001d0e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d10:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <MX_SPI4_Init+0x64>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d16:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <MX_SPI4_Init+0x64>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d1c:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <MX_SPI4_Init+0x64>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001d22:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <MX_SPI4_Init+0x64>)
 8001d24:	220a      	movs	r2, #10
 8001d26:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001d28:	4804      	ldr	r0, [pc, #16]	; (8001d3c <MX_SPI4_Init+0x64>)
 8001d2a:	f004 fb25 	bl	8006378 <HAL_SPI_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001d34:	f000 faa2 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	200005d0 	.word	0x200005d0
 8001d40:	40013400 	.word	0x40013400

08001d44 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001d48:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <MX_SPI5_Init+0x64>)
 8001d4a:	4a18      	ldr	r2, [pc, #96]	; (8001dac <MX_SPI5_Init+0x68>)
 8001d4c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001d4e:	4b16      	ldr	r3, [pc, #88]	; (8001da8 <MX_SPI5_Init+0x64>)
 8001d50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d54:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001d56:	4b14      	ldr	r3, [pc, #80]	; (8001da8 <MX_SPI5_Init+0x64>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d5c:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <MX_SPI5_Init+0x64>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d62:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <MX_SPI5_Init+0x64>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d68:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <MX_SPI5_Init+0x64>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <MX_SPI5_Init+0x64>)
 8001d70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d74:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001d76:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <MX_SPI5_Init+0x64>)
 8001d78:	2238      	movs	r2, #56	; 0x38
 8001d7a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d7c:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <MX_SPI5_Init+0x64>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d82:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <MX_SPI5_Init+0x64>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d88:	4b07      	ldr	r3, [pc, #28]	; (8001da8 <MX_SPI5_Init+0x64>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001d8e:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <MX_SPI5_Init+0x64>)
 8001d90:	220a      	movs	r2, #10
 8001d92:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001d94:	4804      	ldr	r0, [pc, #16]	; (8001da8 <MX_SPI5_Init+0x64>)
 8001d96:	f004 faef 	bl	8006378 <HAL_SPI_Init>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001da0:	f000 fa6c 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001da4:	bf00      	nop
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	200006d4 	.word	0x200006d4
 8001dac:	40015000 	.word	0x40015000

08001db0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08e      	sub	sp, #56	; 0x38
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001db6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	605a      	str	r2, [r3, #4]
 8001dc0:	609a      	str	r2, [r3, #8]
 8001dc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc4:	f107 0320 	add.w	r3, r7, #32
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]
 8001ddc:	615a      	str	r2, [r3, #20]
 8001dde:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001de0:	4b2d      	ldr	r3, [pc, #180]	; (8001e98 <MX_TIM2_Init+0xe8>)
 8001de2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001de6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50;
 8001de8:	4b2b      	ldr	r3, [pc, #172]	; (8001e98 <MX_TIM2_Init+0xe8>)
 8001dea:	2232      	movs	r2, #50	; 0x32
 8001dec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dee:	4b2a      	ldr	r3, [pc, #168]	; (8001e98 <MX_TIM2_Init+0xe8>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001df4:	4b28      	ldr	r3, [pc, #160]	; (8001e98 <MX_TIM2_Init+0xe8>)
 8001df6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dfa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dfc:	4b26      	ldr	r3, [pc, #152]	; (8001e98 <MX_TIM2_Init+0xe8>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e02:	4b25      	ldr	r3, [pc, #148]	; (8001e98 <MX_TIM2_Init+0xe8>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e08:	4823      	ldr	r0, [pc, #140]	; (8001e98 <MX_TIM2_Init+0xe8>)
 8001e0a:	f004 fdab 	bl	8006964 <HAL_TIM_Base_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001e14:	f000 fa32 	bl	800227c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e22:	4619      	mov	r1, r3
 8001e24:	481c      	ldr	r0, [pc, #112]	; (8001e98 <MX_TIM2_Init+0xe8>)
 8001e26:	f005 f947 	bl	80070b8 <HAL_TIM_ConfigClockSource>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001e30:	f000 fa24 	bl	800227c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e34:	4818      	ldr	r0, [pc, #96]	; (8001e98 <MX_TIM2_Init+0xe8>)
 8001e36:	f004 fde4 	bl	8006a02 <HAL_TIM_PWM_Init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001e40:	f000 fa1c 	bl	800227c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e44:	2320      	movs	r3, #32
 8001e46:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e4c:	f107 0320 	add.w	r3, r7, #32
 8001e50:	4619      	mov	r1, r3
 8001e52:	4811      	ldr	r0, [pc, #68]	; (8001e98 <MX_TIM2_Init+0xe8>)
 8001e54:	f005 fd30 	bl	80078b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001e5e:	f000 fa0d 	bl	800227c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e62:	2360      	movs	r3, #96	; 0x60
 8001e64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8001e66:	2364      	movs	r3, #100	; 0x64
 8001e68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e72:	1d3b      	adds	r3, r7, #4
 8001e74:	2208      	movs	r2, #8
 8001e76:	4619      	mov	r1, r3
 8001e78:	4807      	ldr	r0, [pc, #28]	; (8001e98 <MX_TIM2_Init+0xe8>)
 8001e7a:	f005 f85b 	bl	8006f34 <HAL_TIM_PWM_ConfigChannel>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001e84:	f000 f9fa 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e88:	4803      	ldr	r0, [pc, #12]	; (8001e98 <MX_TIM2_Init+0xe8>)
 8001e8a:	f000 fbff 	bl	800268c <HAL_TIM_MspPostInit>

}
 8001e8e:	bf00      	nop
 8001e90:	3738      	adds	r7, #56	; 0x38
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20000d18 	.word	0x20000d18

08001e9c <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001ea0:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <MX_UART8_Init+0x4c>)
 8001ea2:	4a12      	ldr	r2, [pc, #72]	; (8001eec <MX_UART8_Init+0x50>)
 8001ea4:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 8001ea6:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <MX_UART8_Init+0x4c>)
 8001ea8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001eac:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <MX_UART8_Init+0x4c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <MX_UART8_Init+0x4c>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001eba:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <MX_UART8_Init+0x4c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001ec0:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <MX_UART8_Init+0x4c>)
 8001ec2:	220c      	movs	r2, #12
 8001ec4:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ec6:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <MX_UART8_Init+0x4c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <MX_UART8_Init+0x4c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001ed2:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <MX_UART8_Init+0x4c>)
 8001ed4:	f005 fd80 	bl	80079d8 <HAL_UART_Init>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8001ede:	f000 f9cd 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000c8c 	.word	0x20000c8c
 8001eec:	40007c00 	.word	0x40007c00

08001ef0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ef4:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <MX_USART3_UART_Init+0x4c>)
 8001ef6:	4a12      	ldr	r2, [pc, #72]	; (8001f40 <MX_USART3_UART_Init+0x50>)
 8001ef8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001efa:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <MX_USART3_UART_Init+0x4c>)
 8001efc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f02:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <MX_USART3_UART_Init+0x4c>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f08:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <MX_USART3_UART_Init+0x4c>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f0e:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <MX_USART3_UART_Init+0x4c>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f14:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <MX_USART3_UART_Init+0x4c>)
 8001f16:	220c      	movs	r2, #12
 8001f18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f1a:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <MX_USART3_UART_Init+0x4c>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <MX_USART3_UART_Init+0x4c>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f26:	4805      	ldr	r0, [pc, #20]	; (8001f3c <MX_USART3_UART_Init+0x4c>)
 8001f28:	f005 fd56 	bl	80079d8 <HAL_UART_Init>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001f32:	f000 f9a3 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	2000072c 	.word	0x2000072c
 8001f40:	40004800 	.word	0x40004800

08001f44 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001f48:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <MX_USART6_UART_Init+0x4c>)
 8001f4a:	4a12      	ldr	r2, [pc, #72]	; (8001f94 <MX_USART6_UART_Init+0x50>)
 8001f4c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 8001f4e:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <MX_USART6_UART_Init+0x4c>)
 8001f50:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001f54:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001f56:	4b0e      	ldr	r3, [pc, #56]	; (8001f90 <MX_USART6_UART_Init+0x4c>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <MX_USART6_UART_Init+0x4c>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001f62:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <MX_USART6_UART_Init+0x4c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001f68:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <MX_USART6_UART_Init+0x4c>)
 8001f6a:	220c      	movs	r2, #12
 8001f6c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f6e:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <MX_USART6_UART_Init+0x4c>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f74:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <MX_USART6_UART_Init+0x4c>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001f7a:	4805      	ldr	r0, [pc, #20]	; (8001f90 <MX_USART6_UART_Init+0x4c>)
 8001f7c:	f005 fd2c 	bl	80079d8 <HAL_UART_Init>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001f86:	f000 f979 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20000cd0 	.word	0x20000cd0
 8001f94:	40011400 	.word	0x40011400

08001f98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08e      	sub	sp, #56	; 0x38
 8001f9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	605a      	str	r2, [r3, #4]
 8001fa8:	609a      	str	r2, [r3, #8]
 8001faa:	60da      	str	r2, [r3, #12]
 8001fac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	623b      	str	r3, [r7, #32]
 8001fb2:	4b9c      	ldr	r3, [pc, #624]	; (8002224 <MX_GPIO_Init+0x28c>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	4a9b      	ldr	r2, [pc, #620]	; (8002224 <MX_GPIO_Init+0x28c>)
 8001fb8:	f043 0310 	orr.w	r3, r3, #16
 8001fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fbe:	4b99      	ldr	r3, [pc, #612]	; (8002224 <MX_GPIO_Init+0x28c>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	f003 0310 	and.w	r3, r3, #16
 8001fc6:	623b      	str	r3, [r7, #32]
 8001fc8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
 8001fce:	4b95      	ldr	r3, [pc, #596]	; (8002224 <MX_GPIO_Init+0x28c>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	4a94      	ldr	r2, [pc, #592]	; (8002224 <MX_GPIO_Init+0x28c>)
 8001fd4:	f043 0304 	orr.w	r3, r3, #4
 8001fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fda:	4b92      	ldr	r3, [pc, #584]	; (8002224 <MX_GPIO_Init+0x28c>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	f003 0304 	and.w	r3, r3, #4
 8001fe2:	61fb      	str	r3, [r7, #28]
 8001fe4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61bb      	str	r3, [r7, #24]
 8001fea:	4b8e      	ldr	r3, [pc, #568]	; (8002224 <MX_GPIO_Init+0x28c>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	4a8d      	ldr	r2, [pc, #564]	; (8002224 <MX_GPIO_Init+0x28c>)
 8001ff0:	f043 0320 	orr.w	r3, r3, #32
 8001ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff6:	4b8b      	ldr	r3, [pc, #556]	; (8002224 <MX_GPIO_Init+0x28c>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	f003 0320 	and.w	r3, r3, #32
 8001ffe:	61bb      	str	r3, [r7, #24]
 8002000:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	4b87      	ldr	r3, [pc, #540]	; (8002224 <MX_GPIO_Init+0x28c>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	4a86      	ldr	r2, [pc, #536]	; (8002224 <MX_GPIO_Init+0x28c>)
 800200c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002010:	6313      	str	r3, [r2, #48]	; 0x30
 8002012:	4b84      	ldr	r3, [pc, #528]	; (8002224 <MX_GPIO_Init+0x28c>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	4b80      	ldr	r3, [pc, #512]	; (8002224 <MX_GPIO_Init+0x28c>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	4a7f      	ldr	r2, [pc, #508]	; (8002224 <MX_GPIO_Init+0x28c>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	6313      	str	r3, [r2, #48]	; 0x30
 800202e:	4b7d      	ldr	r3, [pc, #500]	; (8002224 <MX_GPIO_Init+0x28c>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	4b79      	ldr	r3, [pc, #484]	; (8002224 <MX_GPIO_Init+0x28c>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	4a78      	ldr	r2, [pc, #480]	; (8002224 <MX_GPIO_Init+0x28c>)
 8002044:	f043 0302 	orr.w	r3, r3, #2
 8002048:	6313      	str	r3, [r2, #48]	; 0x30
 800204a:	4b76      	ldr	r3, [pc, #472]	; (8002224 <MX_GPIO_Init+0x28c>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	4b72      	ldr	r3, [pc, #456]	; (8002224 <MX_GPIO_Init+0x28c>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	4a71      	ldr	r2, [pc, #452]	; (8002224 <MX_GPIO_Init+0x28c>)
 8002060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002064:	6313      	str	r3, [r2, #48]	; 0x30
 8002066:	4b6f      	ldr	r3, [pc, #444]	; (8002224 <MX_GPIO_Init+0x28c>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	607b      	str	r3, [r7, #4]
 8002076:	4b6b      	ldr	r3, [pc, #428]	; (8002224 <MX_GPIO_Init+0x28c>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	4a6a      	ldr	r2, [pc, #424]	; (8002224 <MX_GPIO_Init+0x28c>)
 800207c:	f043 0308 	orr.w	r3, r3, #8
 8002080:	6313      	str	r3, [r2, #48]	; 0x30
 8002082:	4b68      	ldr	r3, [pc, #416]	; (8002224 <MX_GPIO_Init+0x28c>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	607b      	str	r3, [r7, #4]
 800208c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PM_12V_EN_Pin|Vent_Valve_EN_Pin|Payload_EN_Pin|TH_CS_1_Pin
 800208e:	2200      	movs	r2, #0
 8002090:	f640 6184 	movw	r1, #3716	; 0xe84
 8002094:	4864      	ldr	r0, [pc, #400]	; (8002228 <MX_GPIO_Init+0x290>)
 8002096:	f001 faf3 	bl	8003680 <HAL_GPIO_WritePin>
                          |TH_CS_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|Prop_Gate_2_Pin|Prop_Gate_1_Pin, GPIO_PIN_RESET);
 800209a:	2200      	movs	r2, #0
 800209c:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 80020a0:	4862      	ldr	r0, [pc, #392]	; (800222c <MX_GPIO_Init+0x294>)
 80020a2:	f001 faed 	bl	8003680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80020a6:	2200      	movs	r2, #0
 80020a8:	210e      	movs	r1, #14
 80020aa:	4861      	ldr	r0, [pc, #388]	; (8002230 <MX_GPIO_Init+0x298>)
 80020ac:	f001 fae8 	bl	8003680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Prop_Pyro_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|VR_CTRL_PWR_Pin
 80020b0:	2200      	movs	r2, #0
 80020b2:	f645 2126 	movw	r1, #23078	; 0x5a26
 80020b6:	485f      	ldr	r0, [pc, #380]	; (8002234 <MX_GPIO_Init+0x29c>)
 80020b8:	f001 fae2 	bl	8003680 <HAL_GPIO_WritePin>
                          |Rcov_Gate_Main_Pin|Rcov_Gate_Drogue_Pin|Rcov_Arm_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX_NSS_GPIO_Port, SX_NSS_Pin, GPIO_PIN_RESET);
 80020bc:	2200      	movs	r2, #0
 80020be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020c2:	485d      	ldr	r0, [pc, #372]	; (8002238 <MX_GPIO_Init+0x2a0>)
 80020c4:	f001 fadc 	bl	8003680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SX_FILTER_Pin|FLASH_IO3_Pin|FLASH_WP_Pin|CS_FLASH_Pin
 80020c8:	2200      	movs	r2, #0
 80020ca:	f248 01f0 	movw	r1, #33008	; 0x80f0
 80020ce:	485b      	ldr	r0, [pc, #364]	; (800223c <MX_GPIO_Init+0x2a4>)
 80020d0:	f001 fad6 	bl	8003680 <HAL_GPIO_WritePin>
                          |VR_CTRL_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PM_12V_EN_Pin Vent_Valve_EN_Pin Payload_EN_Pin TH_CS_1_Pin
                           TH_CS_2_Pin */
  GPIO_InitStruct.Pin = PM_12V_EN_Pin|Vent_Valve_EN_Pin|Payload_EN_Pin|TH_CS_1_Pin
 80020d4:	f640 6384 	movw	r3, #3716	; 0xe84
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
                          |TH_CS_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020da:	2301      	movs	r3, #1
 80020dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e2:	2300      	movs	r3, #0
 80020e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ea:	4619      	mov	r1, r3
 80020ec:	484e      	ldr	r0, [pc, #312]	; (8002228 <MX_GPIO_Init+0x290>)
 80020ee:	f001 f91b 	bl	8003328 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80020f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f8:	2301      	movs	r3, #1
 80020fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020fc:	2301      	movs	r3, #1
 80020fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002100:	2300      	movs	r3, #0
 8002102:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8002104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002108:	4619      	mov	r1, r3
 800210a:	4848      	ldr	r0, [pc, #288]	; (800222c <MX_GPIO_Init+0x294>)
 800210c:	f001 f90c 	bl	8003328 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8002110:	2301      	movs	r3, #1
 8002112:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002114:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002118:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800211e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002122:	4619      	mov	r1, r3
 8002124:	4842      	ldr	r0, [pc, #264]	; (8002230 <MX_GPIO_Init+0x298>)
 8002126:	f001 f8ff 	bl	8003328 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 800212a:	230e      	movs	r3, #14
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800212e:	2301      	movs	r3, #1
 8002130:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002136:	2300      	movs	r3, #0
 8002138:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800213a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800213e:	4619      	mov	r1, r3
 8002140:	483b      	ldr	r0, [pc, #236]	; (8002230 <MX_GPIO_Init+0x298>)
 8002142:	f001 f8f1 	bl	8003328 <HAL_GPIO_Init>

  /*Configure GPIO pin : Vent_Valve_FB_Pin */
  GPIO_InitStruct.Pin = Vent_Valve_FB_Pin;
 8002146:	2302      	movs	r3, #2
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800214a:	2300      	movs	r3, #0
 800214c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Vent_Valve_FB_GPIO_Port, &GPIO_InitStruct);
 8002152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002156:	4619      	mov	r1, r3
 8002158:	4837      	ldr	r0, [pc, #220]	; (8002238 <MX_GPIO_Init+0x2a0>)
 800215a:	f001 f8e5 	bl	8003328 <HAL_GPIO_Init>

  /*Configure GPIO pin : Prop_Cont_2_Pin */
  GPIO_InitStruct.Pin = Prop_Cont_2_Pin;
 800215e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002164:	2300      	movs	r3, #0
 8002166:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Prop_Cont_2_GPIO_Port, &GPIO_InitStruct);
 800216c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002170:	4619      	mov	r1, r3
 8002172:	482e      	ldr	r0, [pc, #184]	; (800222c <MX_GPIO_Init+0x294>)
 8002174:	f001 f8d8 	bl	8003328 <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Gate_2_Pin Prop_Gate_1_Pin */
  GPIO_InitStruct.Pin = Prop_Gate_2_Pin|Prop_Gate_1_Pin;
 8002178:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800217e:	2301      	movs	r3, #1
 8002180:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002186:	2300      	movs	r3, #0
 8002188:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800218a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800218e:	4619      	mov	r1, r3
 8002190:	4826      	ldr	r0, [pc, #152]	; (800222c <MX_GPIO_Init+0x294>)
 8002192:	f001 f8c9 	bl	8003328 <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Cont_1_Pin SX_BUSY_Pin SX_DIO_Pin Rcov_Cont_Main_Pin
                           Rcov_Cont_Drogue_Pin */
  GPIO_InitStruct.Pin = Prop_Cont_1_Pin|SX_BUSY_Pin|SX_DIO_Pin|Rcov_Cont_Main_Pin
 8002196:	f242 4319 	movw	r3, #9241	; 0x2419
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
                          |Rcov_Cont_Drogue_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800219c:	2300      	movs	r3, #0
 800219e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a8:	4619      	mov	r1, r3
 80021aa:	4822      	ldr	r0, [pc, #136]	; (8002234 <MX_GPIO_Init+0x29c>)
 80021ac:	f001 f8bc 	bl	8003328 <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Pyro_Arming_Pin SX_RST_Pin SX_RF_SW_Pin VR_CTRL_PWR_Pin
                           Rcov_Gate_Main_Pin Rcov_Gate_Drogue_Pin Rcov_Arm_Pin */
  GPIO_InitStruct.Pin = Prop_Pyro_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|VR_CTRL_PWR_Pin
 80021b0:	f645 2326 	movw	r3, #23078	; 0x5a26
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
                          |Rcov_Gate_Main_Pin|Rcov_Gate_Drogue_Pin|Rcov_Arm_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b6:	2301      	movs	r3, #1
 80021b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021be:	2300      	movs	r3, #0
 80021c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c6:	4619      	mov	r1, r3
 80021c8:	481a      	ldr	r0, [pc, #104]	; (8002234 <MX_GPIO_Init+0x29c>)
 80021ca:	f001 f8ad 	bl	8003328 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_NSS_Pin */
  GPIO_InitStruct.Pin = SX_NSS_Pin;
 80021ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d4:	2301      	movs	r3, #1
 80021d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021d8:	2301      	movs	r3, #1
 80021da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021dc:	2300      	movs	r3, #0
 80021de:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SX_NSS_GPIO_Port, &GPIO_InitStruct);
 80021e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e4:	4619      	mov	r1, r3
 80021e6:	4814      	ldr	r0, [pc, #80]	; (8002238 <MX_GPIO_Init+0x2a0>)
 80021e8:	f001 f89e 	bl	8003328 <HAL_GPIO_Init>

  /*Configure GPIO pins : SX_FILTER_Pin FLASH_IO3_Pin FLASH_WP_Pin CS_FLASH_Pin
                           VR_CTRL_REC_Pin */
  GPIO_InitStruct.Pin = SX_FILTER_Pin|FLASH_IO3_Pin|FLASH_WP_Pin|CS_FLASH_Pin
 80021ec:	f248 03f0 	movw	r3, #33008	; 0x80f0
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
                          |VR_CTRL_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f2:	2301      	movs	r3, #1
 80021f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fa:	2300      	movs	r3, #0
 80021fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002202:	4619      	mov	r1, r3
 8002204:	480d      	ldr	r0, [pc, #52]	; (800223c <MX_GPIO_Init+0x2a4>)
 8002206:	f001 f88f 	bl	8003328 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800220a:	2200      	movs	r2, #0
 800220c:	2100      	movs	r1, #0
 800220e:	2006      	movs	r0, #6
 8002210:	f001 f853 	bl	80032ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002214:	2006      	movs	r0, #6
 8002216:	f001 f86c 	bl	80032f2 <HAL_NVIC_EnableIRQ>

}
 800221a:	bf00      	nop
 800221c:	3738      	adds	r7, #56	; 0x38
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40023800 	.word	0x40023800
 8002228:	40021000 	.word	0x40021000
 800222c:	40021400 	.word	0x40021400
 8002230:	40020800 	.word	0x40020800
 8002234:	40021800 	.word	0x40021800
 8002238:	40020400 	.word	0x40020400
 800223c:	40020c00 	.word	0x40020c00

08002240 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Button_Pin)
 800224a:	88fb      	ldrh	r3, [r7, #6]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d102      	bne.n	8002256 <HAL_GPIO_EXTI_Callback+0x16>
	{
		start_ejection = 1;
 8002250:	4b04      	ldr	r3, [pc, #16]	; (8002264 <HAL_GPIO_EXTI_Callback+0x24>)
 8002252:	2201      	movs	r2, #1
 8002254:	701a      	strb	r2, [r3, #0]
	}
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	2000038c 	.word	0x2000038c

08002268 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
//		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
//		HAL_GPIO_TogglePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin);
		timer_actuated_vent_valve = 1;
	}
#endif
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
//  __disable_irq();
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET); // error occurred, fatal
 8002280:	2201      	movs	r2, #1
 8002282:	2108      	movs	r1, #8
 8002284:	480b      	ldr	r0, [pc, #44]	; (80022b4 <Error_Handler+0x38>)
 8002286:	f001 f9fb 	bl	8003680 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800228a:	2108      	movs	r1, #8
 800228c:	480a      	ldr	r0, [pc, #40]	; (80022b8 <Error_Handler+0x3c>)
 800228e:	f004 fc11 	bl	8006ab4 <HAL_TIM_PWM_Start>
  HAL_Delay(1000);
 8002292:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002296:	f000 fc9f 	bl	8002bd8 <HAL_Delay>
  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 800229a:	2108      	movs	r1, #8
 800229c:	4806      	ldr	r0, [pc, #24]	; (80022b8 <Error_Handler+0x3c>)
 800229e:	f004 fcd1 	bl	8006c44 <HAL_TIM_PWM_Stop>
  while (1)
  {
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); // error occurred, fatal
 80022a2:	2108      	movs	r1, #8
 80022a4:	4803      	ldr	r0, [pc, #12]	; (80022b4 <Error_Handler+0x38>)
 80022a6:	f001 fa04 	bl	80036b2 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80022aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022ae:	f000 fc93 	bl	8002bd8 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); // error occurred, fatal
 80022b2:	e7f6      	b.n	80022a2 <Error_Handler+0x26>
 80022b4:	40020800 	.word	0x40020800
 80022b8:	20000d18 	.word	0x20000d18

080022bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	607b      	str	r3, [r7, #4]
 80022c6:	4b10      	ldr	r3, [pc, #64]	; (8002308 <HAL_MspInit+0x4c>)
 80022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ca:	4a0f      	ldr	r2, [pc, #60]	; (8002308 <HAL_MspInit+0x4c>)
 80022cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022d0:	6453      	str	r3, [r2, #68]	; 0x44
 80022d2:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <HAL_MspInit+0x4c>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022da:	607b      	str	r3, [r7, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	603b      	str	r3, [r7, #0]
 80022e2:	4b09      	ldr	r3, [pc, #36]	; (8002308 <HAL_MspInit+0x4c>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	4a08      	ldr	r2, [pc, #32]	; (8002308 <HAL_MspInit+0x4c>)
 80022e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ec:	6413      	str	r3, [r2, #64]	; 0x40
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <HAL_MspInit+0x4c>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40023800 	.word	0x40023800

0800230c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08a      	sub	sp, #40	; 0x28
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a17      	ldr	r2, [pc, #92]	; (8002388 <HAL_ADC_MspInit+0x7c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d127      	bne.n	800237e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	4b16      	ldr	r3, [pc, #88]	; (800238c <HAL_ADC_MspInit+0x80>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	4a15      	ldr	r2, [pc, #84]	; (800238c <HAL_ADC_MspInit+0x80>)
 8002338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800233c:	6453      	str	r3, [r2, #68]	; 0x44
 800233e:	4b13      	ldr	r3, [pc, #76]	; (800238c <HAL_ADC_MspInit+0x80>)
 8002340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002346:	613b      	str	r3, [r7, #16]
 8002348:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <HAL_ADC_MspInit+0x80>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	4a0e      	ldr	r2, [pc, #56]	; (800238c <HAL_ADC_MspInit+0x80>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	6313      	str	r3, [r2, #48]	; 0x30
 800235a:	4b0c      	ldr	r3, [pc, #48]	; (800238c <HAL_ADC_MspInit+0x80>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002366:	2340      	movs	r3, #64	; 0x40
 8002368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800236a:	2303      	movs	r3, #3
 800236c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236e:	2300      	movs	r3, #0
 8002370:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002372:	f107 0314 	add.w	r3, r7, #20
 8002376:	4619      	mov	r1, r3
 8002378:	4805      	ldr	r0, [pc, #20]	; (8002390 <HAL_ADC_MspInit+0x84>)
 800237a:	f000 ffd5 	bl	8003328 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800237e:	bf00      	nop
 8002380:	3728      	adds	r7, #40	; 0x28
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40012000 	.word	0x40012000
 800238c:	40023800 	.word	0x40023800
 8002390:	40020000 	.word	0x40020000

08002394 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08c      	sub	sp, #48	; 0x30
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239c:	f107 031c 	add.w	r3, r7, #28
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a42      	ldr	r2, [pc, #264]	; (80024bc <HAL_I2C_MspInit+0x128>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d12d      	bne.n	8002412 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	61bb      	str	r3, [r7, #24]
 80023ba:	4b41      	ldr	r3, [pc, #260]	; (80024c0 <HAL_I2C_MspInit+0x12c>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a40      	ldr	r2, [pc, #256]	; (80024c0 <HAL_I2C_MspInit+0x12c>)
 80023c0:	f043 0302 	orr.w	r3, r3, #2
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b3e      	ldr	r3, [pc, #248]	; (80024c0 <HAL_I2C_MspInit+0x12c>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	61bb      	str	r3, [r7, #24]
 80023d0:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80023d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80023d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023d8:	2312      	movs	r3, #18
 80023da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e0:	2303      	movs	r3, #3
 80023e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80023e4:	2304      	movs	r3, #4
 80023e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e8:	f107 031c 	add.w	r3, r7, #28
 80023ec:	4619      	mov	r1, r3
 80023ee:	4835      	ldr	r0, [pc, #212]	; (80024c4 <HAL_I2C_MspInit+0x130>)
 80023f0:	f000 ff9a 	bl	8003328 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	4b31      	ldr	r3, [pc, #196]	; (80024c0 <HAL_I2C_MspInit+0x12c>)
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	4a30      	ldr	r2, [pc, #192]	; (80024c0 <HAL_I2C_MspInit+0x12c>)
 80023fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002402:	6413      	str	r3, [r2, #64]	; 0x40
 8002404:	4b2e      	ldr	r3, [pc, #184]	; (80024c0 <HAL_I2C_MspInit+0x12c>)
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002410:	e050      	b.n	80024b4 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a2c      	ldr	r2, [pc, #176]	; (80024c8 <HAL_I2C_MspInit+0x134>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d14b      	bne.n	80024b4 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800241c:	2300      	movs	r3, #0
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	4b27      	ldr	r3, [pc, #156]	; (80024c0 <HAL_I2C_MspInit+0x12c>)
 8002422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002424:	4a26      	ldr	r2, [pc, #152]	; (80024c0 <HAL_I2C_MspInit+0x12c>)
 8002426:	f043 0304 	orr.w	r3, r3, #4
 800242a:	6313      	str	r3, [r2, #48]	; 0x30
 800242c:	4b24      	ldr	r3, [pc, #144]	; (80024c0 <HAL_I2C_MspInit+0x12c>)
 800242e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	613b      	str	r3, [r7, #16]
 8002436:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002438:	2300      	movs	r3, #0
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	4b20      	ldr	r3, [pc, #128]	; (80024c0 <HAL_I2C_MspInit+0x12c>)
 800243e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002440:	4a1f      	ldr	r2, [pc, #124]	; (80024c0 <HAL_I2C_MspInit+0x12c>)
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	6313      	str	r3, [r2, #48]	; 0x30
 8002448:	4b1d      	ldr	r3, [pc, #116]	; (80024c0 <HAL_I2C_MspInit+0x12c>)
 800244a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002454:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800245a:	2312      	movs	r3, #18
 800245c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	2300      	movs	r3, #0
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002462:	2303      	movs	r3, #3
 8002464:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002466:	2304      	movs	r3, #4
 8002468:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800246a:	f107 031c 	add.w	r3, r7, #28
 800246e:	4619      	mov	r1, r3
 8002470:	4816      	ldr	r0, [pc, #88]	; (80024cc <HAL_I2C_MspInit+0x138>)
 8002472:	f000 ff59 	bl	8003328 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002476:	f44f 7380 	mov.w	r3, #256	; 0x100
 800247a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800247c:	2312      	movs	r3, #18
 800247e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002484:	2303      	movs	r3, #3
 8002486:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002488:	2304      	movs	r3, #4
 800248a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248c:	f107 031c 	add.w	r3, r7, #28
 8002490:	4619      	mov	r1, r3
 8002492:	480f      	ldr	r0, [pc, #60]	; (80024d0 <HAL_I2C_MspInit+0x13c>)
 8002494:	f000 ff48 	bl	8003328 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002498:	2300      	movs	r3, #0
 800249a:	60bb      	str	r3, [r7, #8]
 800249c:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <HAL_I2C_MspInit+0x12c>)
 800249e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a0:	4a07      	ldr	r2, [pc, #28]	; (80024c0 <HAL_I2C_MspInit+0x12c>)
 80024a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024a6:	6413      	str	r3, [r2, #64]	; 0x40
 80024a8:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <HAL_I2C_MspInit+0x12c>)
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024b0:	60bb      	str	r3, [r7, #8]
 80024b2:	68bb      	ldr	r3, [r7, #8]
}
 80024b4:	bf00      	nop
 80024b6:	3730      	adds	r7, #48	; 0x30
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40005800 	.word	0x40005800
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40020400 	.word	0x40020400
 80024c8:	40005c00 	.word	0x40005c00
 80024cc:	40020800 	.word	0x40020800
 80024d0:	40020000 	.word	0x40020000

080024d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08e      	sub	sp, #56	; 0x38
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a4c      	ldr	r2, [pc, #304]	; (8002624 <HAL_SPI_MspInit+0x150>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d12d      	bne.n	8002552 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	623b      	str	r3, [r7, #32]
 80024fa:	4b4b      	ldr	r3, [pc, #300]	; (8002628 <HAL_SPI_MspInit+0x154>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	4a4a      	ldr	r2, [pc, #296]	; (8002628 <HAL_SPI_MspInit+0x154>)
 8002500:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002504:	6413      	str	r3, [r2, #64]	; 0x40
 8002506:	4b48      	ldr	r3, [pc, #288]	; (8002628 <HAL_SPI_MspInit+0x154>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800250e:	623b      	str	r3, [r7, #32]
 8002510:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
 8002516:	4b44      	ldr	r3, [pc, #272]	; (8002628 <HAL_SPI_MspInit+0x154>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	4a43      	ldr	r2, [pc, #268]	; (8002628 <HAL_SPI_MspInit+0x154>)
 800251c:	f043 0302 	orr.w	r3, r3, #2
 8002520:	6313      	str	r3, [r2, #48]	; 0x30
 8002522:	4b41      	ldr	r3, [pc, #260]	; (8002628 <HAL_SPI_MspInit+0x154>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	61fb      	str	r3, [r7, #28]
 800252c:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800252e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002534:	2302      	movs	r3, #2
 8002536:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	2300      	movs	r3, #0
 800253a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253c:	2303      	movs	r3, #3
 800253e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002540:	2305      	movs	r3, #5
 8002542:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002544:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002548:	4619      	mov	r1, r3
 800254a:	4838      	ldr	r0, [pc, #224]	; (800262c <HAL_SPI_MspInit+0x158>)
 800254c:	f000 feec 	bl	8003328 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002550:	e064      	b.n	800261c <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI4)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a36      	ldr	r2, [pc, #216]	; (8002630 <HAL_SPI_MspInit+0x15c>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d12d      	bne.n	80025b8 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800255c:	2300      	movs	r3, #0
 800255e:	61bb      	str	r3, [r7, #24]
 8002560:	4b31      	ldr	r3, [pc, #196]	; (8002628 <HAL_SPI_MspInit+0x154>)
 8002562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002564:	4a30      	ldr	r2, [pc, #192]	; (8002628 <HAL_SPI_MspInit+0x154>)
 8002566:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800256a:	6453      	str	r3, [r2, #68]	; 0x44
 800256c:	4b2e      	ldr	r3, [pc, #184]	; (8002628 <HAL_SPI_MspInit+0x154>)
 800256e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002570:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002574:	61bb      	str	r3, [r7, #24]
 8002576:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	4b2a      	ldr	r3, [pc, #168]	; (8002628 <HAL_SPI_MspInit+0x154>)
 800257e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002580:	4a29      	ldr	r2, [pc, #164]	; (8002628 <HAL_SPI_MspInit+0x154>)
 8002582:	f043 0310 	orr.w	r3, r3, #16
 8002586:	6313      	str	r3, [r2, #48]	; 0x30
 8002588:	4b27      	ldr	r3, [pc, #156]	; (8002628 <HAL_SPI_MspInit+0x154>)
 800258a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258c:	f003 0310 	and.w	r3, r3, #16
 8002590:	617b      	str	r3, [r7, #20]
 8002592:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002594:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002598:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259a:	2302      	movs	r3, #2
 800259c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259e:	2300      	movs	r3, #0
 80025a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a2:	2303      	movs	r3, #3
 80025a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80025a6:	2305      	movs	r3, #5
 80025a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ae:	4619      	mov	r1, r3
 80025b0:	4820      	ldr	r0, [pc, #128]	; (8002634 <HAL_SPI_MspInit+0x160>)
 80025b2:	f000 feb9 	bl	8003328 <HAL_GPIO_Init>
}
 80025b6:	e031      	b.n	800261c <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI5)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a1e      	ldr	r2, [pc, #120]	; (8002638 <HAL_SPI_MspInit+0x164>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d12c      	bne.n	800261c <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	4b18      	ldr	r3, [pc, #96]	; (8002628 <HAL_SPI_MspInit+0x154>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	4a17      	ldr	r2, [pc, #92]	; (8002628 <HAL_SPI_MspInit+0x154>)
 80025cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025d0:	6453      	str	r3, [r2, #68]	; 0x44
 80025d2:	4b15      	ldr	r3, [pc, #84]	; (8002628 <HAL_SPI_MspInit+0x154>)
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025da:	613b      	str	r3, [r7, #16]
 80025dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	4b11      	ldr	r3, [pc, #68]	; (8002628 <HAL_SPI_MspInit+0x154>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	4a10      	ldr	r2, [pc, #64]	; (8002628 <HAL_SPI_MspInit+0x154>)
 80025e8:	f043 0320 	orr.w	r3, r3, #32
 80025ec:	6313      	str	r3, [r2, #48]	; 0x30
 80025ee:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <HAL_SPI_MspInit+0x154>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	f003 0320 	and.w	r3, r3, #32
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80025fa:	f44f 7360 	mov.w	r3, #896	; 0x380
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002600:	2302      	movs	r3, #2
 8002602:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002604:	2301      	movs	r3, #1
 8002606:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002608:	2303      	movs	r3, #3
 800260a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800260c:	2305      	movs	r3, #5
 800260e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002614:	4619      	mov	r1, r3
 8002616:	4809      	ldr	r0, [pc, #36]	; (800263c <HAL_SPI_MspInit+0x168>)
 8002618:	f000 fe86 	bl	8003328 <HAL_GPIO_Init>
}
 800261c:	bf00      	nop
 800261e:	3738      	adds	r7, #56	; 0x38
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40003800 	.word	0x40003800
 8002628:	40023800 	.word	0x40023800
 800262c:	40020400 	.word	0x40020400
 8002630:	40013400 	.word	0x40013400
 8002634:	40021000 	.word	0x40021000
 8002638:	40015000 	.word	0x40015000
 800263c:	40021400 	.word	0x40021400

08002640 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002650:	d115      	bne.n	800267e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <HAL_TIM_Base_MspInit+0x48>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	4a0b      	ldr	r2, [pc, #44]	; (8002688 <HAL_TIM_Base_MspInit+0x48>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	6413      	str	r3, [r2, #64]	; 0x40
 8002662:	4b09      	ldr	r3, [pc, #36]	; (8002688 <HAL_TIM_Base_MspInit+0x48>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800266e:	2200      	movs	r2, #0
 8002670:	2100      	movs	r1, #0
 8002672:	201c      	movs	r0, #28
 8002674:	f000 fe21 	bl	80032ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002678:	201c      	movs	r0, #28
 800267a:	f000 fe3a 	bl	80032f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800267e:	bf00      	nop
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40023800 	.word	0x40023800

0800268c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002694:	f107 030c 	add.w	r3, r7, #12
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	60da      	str	r2, [r3, #12]
 80026a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ac:	d11d      	bne.n	80026ea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	60bb      	str	r3, [r7, #8]
 80026b2:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <HAL_TIM_MspPostInit+0x68>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	4a0f      	ldr	r2, [pc, #60]	; (80026f4 <HAL_TIM_MspPostInit+0x68>)
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	6313      	str	r3, [r2, #48]	; 0x30
 80026be:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <HAL_TIM_MspPostInit+0x68>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	60bb      	str	r3, [r7, #8]
 80026c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026ca:	2304      	movs	r3, #4
 80026cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ce:	2302      	movs	r3, #2
 80026d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026da:	2301      	movs	r3, #1
 80026dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026de:	f107 030c 	add.w	r3, r7, #12
 80026e2:	4619      	mov	r1, r3
 80026e4:	4804      	ldr	r0, [pc, #16]	; (80026f8 <HAL_TIM_MspPostInit+0x6c>)
 80026e6:	f000 fe1f 	bl	8003328 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80026ea:	bf00      	nop
 80026ec:	3720      	adds	r7, #32
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40023800 	.word	0x40023800
 80026f8:	40020000 	.word	0x40020000

080026fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08e      	sub	sp, #56	; 0x38
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	609a      	str	r2, [r3, #8]
 8002710:	60da      	str	r2, [r3, #12]
 8002712:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a4b      	ldr	r2, [pc, #300]	; (8002848 <HAL_UART_MspInit+0x14c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d12c      	bne.n	8002778 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	623b      	str	r3, [r7, #32]
 8002722:	4b4a      	ldr	r3, [pc, #296]	; (800284c <HAL_UART_MspInit+0x150>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	4a49      	ldr	r2, [pc, #292]	; (800284c <HAL_UART_MspInit+0x150>)
 8002728:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800272c:	6413      	str	r3, [r2, #64]	; 0x40
 800272e:	4b47      	ldr	r3, [pc, #284]	; (800284c <HAL_UART_MspInit+0x150>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002736:	623b      	str	r3, [r7, #32]
 8002738:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	61fb      	str	r3, [r7, #28]
 800273e:	4b43      	ldr	r3, [pc, #268]	; (800284c <HAL_UART_MspInit+0x150>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	4a42      	ldr	r2, [pc, #264]	; (800284c <HAL_UART_MspInit+0x150>)
 8002744:	f043 0310 	orr.w	r3, r3, #16
 8002748:	6313      	str	r3, [r2, #48]	; 0x30
 800274a:	4b40      	ldr	r3, [pc, #256]	; (800284c <HAL_UART_MspInit+0x150>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	f003 0310 	and.w	r3, r3, #16
 8002752:	61fb      	str	r3, [r7, #28]
 8002754:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002756:	2303      	movs	r3, #3
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275a:	2302      	movs	r3, #2
 800275c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275e:	2300      	movs	r3, #0
 8002760:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002762:	2303      	movs	r3, #3
 8002764:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002766:	2308      	movs	r3, #8
 8002768:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800276a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800276e:	4619      	mov	r1, r3
 8002770:	4837      	ldr	r0, [pc, #220]	; (8002850 <HAL_UART_MspInit+0x154>)
 8002772:	f000 fdd9 	bl	8003328 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002776:	e063      	b.n	8002840 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a35      	ldr	r2, [pc, #212]	; (8002854 <HAL_UART_MspInit+0x158>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d12d      	bne.n	80027de <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	61bb      	str	r3, [r7, #24]
 8002786:	4b31      	ldr	r3, [pc, #196]	; (800284c <HAL_UART_MspInit+0x150>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	4a30      	ldr	r2, [pc, #192]	; (800284c <HAL_UART_MspInit+0x150>)
 800278c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002790:	6413      	str	r3, [r2, #64]	; 0x40
 8002792:	4b2e      	ldr	r3, [pc, #184]	; (800284c <HAL_UART_MspInit+0x150>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800279a:	61bb      	str	r3, [r7, #24]
 800279c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	4b2a      	ldr	r3, [pc, #168]	; (800284c <HAL_UART_MspInit+0x150>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	4a29      	ldr	r2, [pc, #164]	; (800284c <HAL_UART_MspInit+0x150>)
 80027a8:	f043 0308 	orr.w	r3, r3, #8
 80027ac:	6313      	str	r3, [r2, #48]	; 0x30
 80027ae:	4b27      	ldr	r3, [pc, #156]	; (800284c <HAL_UART_MspInit+0x150>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	617b      	str	r3, [r7, #20]
 80027b8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c0:	2302      	movs	r3, #2
 80027c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c4:	2300      	movs	r3, #0
 80027c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c8:	2303      	movs	r3, #3
 80027ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027cc:	2307      	movs	r3, #7
 80027ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027d4:	4619      	mov	r1, r3
 80027d6:	4820      	ldr	r0, [pc, #128]	; (8002858 <HAL_UART_MspInit+0x15c>)
 80027d8:	f000 fda6 	bl	8003328 <HAL_GPIO_Init>
}
 80027dc:	e030      	b.n	8002840 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a1e      	ldr	r2, [pc, #120]	; (800285c <HAL_UART_MspInit+0x160>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d12b      	bne.n	8002840 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 80027e8:	2300      	movs	r3, #0
 80027ea:	613b      	str	r3, [r7, #16]
 80027ec:	4b17      	ldr	r3, [pc, #92]	; (800284c <HAL_UART_MspInit+0x150>)
 80027ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f0:	4a16      	ldr	r2, [pc, #88]	; (800284c <HAL_UART_MspInit+0x150>)
 80027f2:	f043 0320 	orr.w	r3, r3, #32
 80027f6:	6453      	str	r3, [r2, #68]	; 0x44
 80027f8:	4b14      	ldr	r3, [pc, #80]	; (800284c <HAL_UART_MspInit+0x150>)
 80027fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fc:	f003 0320 	and.w	r3, r3, #32
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002804:	2300      	movs	r3, #0
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	4b10      	ldr	r3, [pc, #64]	; (800284c <HAL_UART_MspInit+0x150>)
 800280a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280c:	4a0f      	ldr	r2, [pc, #60]	; (800284c <HAL_UART_MspInit+0x150>)
 800280e:	f043 0304 	orr.w	r3, r3, #4
 8002812:	6313      	str	r3, [r2, #48]	; 0x30
 8002814:	4b0d      	ldr	r3, [pc, #52]	; (800284c <HAL_UART_MspInit+0x150>)
 8002816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002820:	23c0      	movs	r3, #192	; 0xc0
 8002822:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002824:	2302      	movs	r3, #2
 8002826:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800282c:	2303      	movs	r3, #3
 800282e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002830:	2308      	movs	r3, #8
 8002832:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002838:	4619      	mov	r1, r3
 800283a:	4809      	ldr	r0, [pc, #36]	; (8002860 <HAL_UART_MspInit+0x164>)
 800283c:	f000 fd74 	bl	8003328 <HAL_GPIO_Init>
}
 8002840:	bf00      	nop
 8002842:	3738      	adds	r7, #56	; 0x38
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40007c00 	.word	0x40007c00
 800284c:	40023800 	.word	0x40023800
 8002850:	40021000 	.word	0x40021000
 8002854:	40004800 	.word	0x40004800
 8002858:	40020c00 	.word	0x40020c00
 800285c:	40011400 	.word	0x40011400
 8002860:	40020800 	.word	0x40020800

08002864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002868:	e7fe      	b.n	8002868 <NMI_Handler+0x4>

0800286a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800286a:	b480      	push	{r7}
 800286c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800286e:	e7fe      	b.n	800286e <HardFault_Handler+0x4>

08002870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002874:	e7fe      	b.n	8002874 <MemManage_Handler+0x4>

08002876 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002876:	b480      	push	{r7}
 8002878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800287a:	e7fe      	b.n	800287a <BusFault_Handler+0x4>

0800287c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002880:	e7fe      	b.n	8002880 <UsageFault_Handler+0x4>

08002882 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002882:	b480      	push	{r7}
 8002884:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002886:	bf00      	nop
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002894:	bf00      	nop
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800289e:	b480      	push	{r7}
 80028a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028a2:	bf00      	nop
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028b0:	f000 f972 	bl	8002b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028b4:	bf00      	nop
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80028bc:	2001      	movs	r0, #1
 80028be:	f000 ff13 	bl	80036e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}
	...

080028c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80028cc:	4802      	ldr	r0, [pc, #8]	; (80028d8 <TIM2_IRQHandler+0x10>)
 80028ce:	f004 fa29 	bl	8006d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80028d2:	bf00      	nop
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20000d18 	.word	0x20000d18

080028dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80028e0:	4802      	ldr	r0, [pc, #8]	; (80028ec <OTG_FS_IRQHandler+0x10>)
 80028e2:	f002 f8a3 	bl	8004a2c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	200028f0 	.word	0x200028f0

080028f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
	return 1;
 80028f4:	2301      	movs	r3, #1
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <_kill>:

int _kill(int pid, int sig)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800290a:	f009 fdfd 	bl	800c508 <__errno>
 800290e:	4603      	mov	r3, r0
 8002910:	2216      	movs	r2, #22
 8002912:	601a      	str	r2, [r3, #0]
	return -1;
 8002914:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002918:	4618      	mov	r0, r3
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <_exit>:

void _exit (int status)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002928:	f04f 31ff 	mov.w	r1, #4294967295
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f7ff ffe7 	bl	8002900 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002932:	e7fe      	b.n	8002932 <_exit+0x12>

08002934 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]
 8002944:	e00a      	b.n	800295c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002946:	f3af 8000 	nop.w
 800294a:	4601      	mov	r1, r0
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	1c5a      	adds	r2, r3, #1
 8002950:	60ba      	str	r2, [r7, #8]
 8002952:	b2ca      	uxtb	r2, r1
 8002954:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	3301      	adds	r3, #1
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	429a      	cmp	r2, r3
 8002962:	dbf0      	blt.n	8002946 <_read+0x12>
	}

return len;
 8002964:	687b      	ldr	r3, [r7, #4]
}
 8002966:	4618      	mov	r0, r3
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b086      	sub	sp, #24
 8002972:	af00      	add	r7, sp, #0
 8002974:	60f8      	str	r0, [r7, #12]
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
 800297e:	e009      	b.n	8002994 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	1c5a      	adds	r2, r3, #1
 8002984:	60ba      	str	r2, [r7, #8]
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	3301      	adds	r3, #1
 8002992:	617b      	str	r3, [r7, #20]
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	429a      	cmp	r2, r3
 800299a:	dbf1      	blt.n	8002980 <_write+0x12>
	}
	return len;
 800299c:	687b      	ldr	r3, [r7, #4]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <_close>:

int _close(int file)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
	return -1;
 80029ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
 80029c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029ce:	605a      	str	r2, [r3, #4]
	return 0;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <_isatty>:

int _isatty(int file)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
	return 1;
 80029e6:	2301      	movs	r3, #1
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
	return 0;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
	...

08002a10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a18:	4a14      	ldr	r2, [pc, #80]	; (8002a6c <_sbrk+0x5c>)
 8002a1a:	4b15      	ldr	r3, [pc, #84]	; (8002a70 <_sbrk+0x60>)
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a24:	4b13      	ldr	r3, [pc, #76]	; (8002a74 <_sbrk+0x64>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d102      	bne.n	8002a32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a2c:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <_sbrk+0x64>)
 8002a2e:	4a12      	ldr	r2, [pc, #72]	; (8002a78 <_sbrk+0x68>)
 8002a30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a32:	4b10      	ldr	r3, [pc, #64]	; (8002a74 <_sbrk+0x64>)
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4413      	add	r3, r2
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d207      	bcs.n	8002a50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a40:	f009 fd62 	bl	800c508 <__errno>
 8002a44:	4603      	mov	r3, r0
 8002a46:	220c      	movs	r2, #12
 8002a48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a4e:	e009      	b.n	8002a64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a50:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <_sbrk+0x64>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a56:	4b07      	ldr	r3, [pc, #28]	; (8002a74 <_sbrk+0x64>)
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	4a05      	ldr	r2, [pc, #20]	; (8002a74 <_sbrk+0x64>)
 8002a60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a62:	68fb      	ldr	r3, [r7, #12]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3718      	adds	r7, #24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	20030000 	.word	0x20030000
 8002a70:	00000400 	.word	0x00000400
 8002a74:	20000390 	.word	0x20000390
 8002a78:	20002d08 	.word	0x20002d08

08002a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a80:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <SystemInit+0x20>)
 8002a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a86:	4a05      	ldr	r2, [pc, #20]	; (8002a9c <SystemInit+0x20>)
 8002a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002aa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ad8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002aa4:	480d      	ldr	r0, [pc, #52]	; (8002adc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002aa6:	490e      	ldr	r1, [pc, #56]	; (8002ae0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002aa8:	4a0e      	ldr	r2, [pc, #56]	; (8002ae4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002aac:	e002      	b.n	8002ab4 <LoopCopyDataInit>

08002aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ab2:	3304      	adds	r3, #4

08002ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ab8:	d3f9      	bcc.n	8002aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aba:	4a0b      	ldr	r2, [pc, #44]	; (8002ae8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002abc:	4c0b      	ldr	r4, [pc, #44]	; (8002aec <LoopFillZerobss+0x26>)
  movs r3, #0
 8002abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ac0:	e001      	b.n	8002ac6 <LoopFillZerobss>

08002ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ac4:	3204      	adds	r2, #4

08002ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ac8:	d3fb      	bcc.n	8002ac2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002aca:	f7ff ffd7 	bl	8002a7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ace:	f009 fd21 	bl	800c514 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ad2:	f7fe feb7 	bl	8001844 <main>
  bx  lr    
 8002ad6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ad8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ae0:	2000036c 	.word	0x2000036c
  ldr r2, =_sidata
 8002ae4:	0801137c 	.word	0x0801137c
  ldr r2, =_sbss
 8002ae8:	2000036c 	.word	0x2000036c
  ldr r4, =_ebss
 8002aec:	20002d08 	.word	0x20002d08

08002af0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002af0:	e7fe      	b.n	8002af0 <ADC_IRQHandler>
	...

08002af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002af8:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <HAL_Init+0x40>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a0d      	ldr	r2, [pc, #52]	; (8002b34 <HAL_Init+0x40>)
 8002afe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b04:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <HAL_Init+0x40>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a0a      	ldr	r2, [pc, #40]	; (8002b34 <HAL_Init+0x40>)
 8002b0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b10:	4b08      	ldr	r3, [pc, #32]	; (8002b34 <HAL_Init+0x40>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a07      	ldr	r2, [pc, #28]	; (8002b34 <HAL_Init+0x40>)
 8002b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b1c:	2003      	movs	r0, #3
 8002b1e:	f000 fbc1 	bl	80032a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b22:	200f      	movs	r0, #15
 8002b24:	f000 f808 	bl	8002b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b28:	f7ff fbc8 	bl	80022bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40023c00 	.word	0x40023c00

08002b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b40:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <HAL_InitTick+0x54>)
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	4b12      	ldr	r3, [pc, #72]	; (8002b90 <HAL_InitTick+0x58>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	4619      	mov	r1, r3
 8002b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 fbd9 	bl	800330e <HAL_SYSTICK_Config>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e00e      	b.n	8002b84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b0f      	cmp	r3, #15
 8002b6a:	d80a      	bhi.n	8002b82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	f04f 30ff 	mov.w	r0, #4294967295
 8002b74:	f000 fba1 	bl	80032ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b78:	4a06      	ldr	r2, [pc, #24]	; (8002b94 <HAL_InitTick+0x5c>)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	e000      	b.n	8002b84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	20000000 	.word	0x20000000
 8002b90:	20000008 	.word	0x20000008
 8002b94:	20000004 	.word	0x20000004

08002b98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b9c:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <HAL_IncTick+0x20>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <HAL_IncTick+0x24>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	4a04      	ldr	r2, [pc, #16]	; (8002bbc <HAL_IncTick+0x24>)
 8002baa:	6013      	str	r3, [r2, #0]
}
 8002bac:	bf00      	nop
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	20000008 	.word	0x20000008
 8002bbc:	20000fac 	.word	0x20000fac

08002bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8002bc4:	4b03      	ldr	r3, [pc, #12]	; (8002bd4 <HAL_GetTick+0x14>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	20000fac 	.word	0x20000fac

08002bd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002be0:	f7ff ffee 	bl	8002bc0 <HAL_GetTick>
 8002be4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf0:	d005      	beq.n	8002bfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bf2:	4b0a      	ldr	r3, [pc, #40]	; (8002c1c <HAL_Delay+0x44>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bfe:	bf00      	nop
 8002c00:	f7ff ffde 	bl	8002bc0 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d8f7      	bhi.n	8002c00 <HAL_Delay+0x28>
  {
  }
}
 8002c10:	bf00      	nop
 8002c12:	bf00      	nop
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	20000008 	.word	0x20000008

08002c20 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e033      	b.n	8002c9e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d109      	bne.n	8002c52 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7ff fb64 	bl	800230c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	f003 0310 	and.w	r3, r3, #16
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d118      	bne.n	8002c90 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c66:	f023 0302 	bic.w	r3, r3, #2
 8002c6a:	f043 0202 	orr.w	r2, r3, #2
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f94a 	bl	8002f0c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f023 0303 	bic.w	r3, r3, #3
 8002c86:	f043 0201 	orr.w	r2, r3, #1
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	641a      	str	r2, [r3, #64]	; 0x40
 8002c8e:	e001      	b.n	8002c94 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
	...

08002ca8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d101      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x1c>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	e113      	b.n	8002eec <HAL_ADC_ConfigChannel+0x244>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2b09      	cmp	r3, #9
 8002cd2:	d925      	bls.n	8002d20 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68d9      	ldr	r1, [r3, #12]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	4413      	add	r3, r2
 8002ce8:	3b1e      	subs	r3, #30
 8002cea:	2207      	movs	r2, #7
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	43da      	mvns	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	400a      	ands	r2, r1
 8002cf8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68d9      	ldr	r1, [r3, #12]
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	4403      	add	r3, r0
 8002d12:	3b1e      	subs	r3, #30
 8002d14:	409a      	lsls	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	60da      	str	r2, [r3, #12]
 8002d1e:	e022      	b.n	8002d66 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6919      	ldr	r1, [r3, #16]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	4613      	mov	r3, r2
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	4413      	add	r3, r2
 8002d34:	2207      	movs	r2, #7
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	43da      	mvns	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	400a      	ands	r2, r1
 8002d42:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6919      	ldr	r1, [r3, #16]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	4618      	mov	r0, r3
 8002d56:	4603      	mov	r3, r0
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	4403      	add	r3, r0
 8002d5c:	409a      	lsls	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2b06      	cmp	r3, #6
 8002d6c:	d824      	bhi.n	8002db8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	3b05      	subs	r3, #5
 8002d80:	221f      	movs	r2, #31
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43da      	mvns	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	400a      	ands	r2, r1
 8002d8e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	4613      	mov	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	3b05      	subs	r3, #5
 8002daa:	fa00 f203 	lsl.w	r2, r0, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	635a      	str	r2, [r3, #52]	; 0x34
 8002db6:	e04c      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b0c      	cmp	r3, #12
 8002dbe:	d824      	bhi.n	8002e0a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	3b23      	subs	r3, #35	; 0x23
 8002dd2:	221f      	movs	r2, #31
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43da      	mvns	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	400a      	ands	r2, r1
 8002de0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	4618      	mov	r0, r3
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	4613      	mov	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	3b23      	subs	r3, #35	; 0x23
 8002dfc:	fa00 f203 	lsl.w	r2, r0, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	631a      	str	r2, [r3, #48]	; 0x30
 8002e08:	e023      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	4613      	mov	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4413      	add	r3, r2
 8002e1a:	3b41      	subs	r3, #65	; 0x41
 8002e1c:	221f      	movs	r2, #31
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43da      	mvns	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	400a      	ands	r2, r1
 8002e2a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	4618      	mov	r0, r3
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	3b41      	subs	r3, #65	; 0x41
 8002e46:	fa00 f203 	lsl.w	r2, r0, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e52:	4b29      	ldr	r3, [pc, #164]	; (8002ef8 <HAL_ADC_ConfigChannel+0x250>)
 8002e54:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a28      	ldr	r2, [pc, #160]	; (8002efc <HAL_ADC_ConfigChannel+0x254>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d10f      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x1d8>
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b12      	cmp	r3, #18
 8002e66:	d10b      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a1d      	ldr	r2, [pc, #116]	; (8002efc <HAL_ADC_ConfigChannel+0x254>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d12b      	bne.n	8002ee2 <HAL_ADC_ConfigChannel+0x23a>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a1c      	ldr	r2, [pc, #112]	; (8002f00 <HAL_ADC_ConfigChannel+0x258>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d003      	beq.n	8002e9c <HAL_ADC_ConfigChannel+0x1f4>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b11      	cmp	r3, #17
 8002e9a:	d122      	bne.n	8002ee2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a11      	ldr	r2, [pc, #68]	; (8002f00 <HAL_ADC_ConfigChannel+0x258>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d111      	bne.n	8002ee2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ebe:	4b11      	ldr	r3, [pc, #68]	; (8002f04 <HAL_ADC_ConfigChannel+0x25c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a11      	ldr	r2, [pc, #68]	; (8002f08 <HAL_ADC_ConfigChannel+0x260>)
 8002ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec8:	0c9a      	lsrs	r2, r3, #18
 8002eca:	4613      	mov	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ed4:	e002      	b.n	8002edc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f9      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	40012300 	.word	0x40012300
 8002efc:	40012000 	.word	0x40012000
 8002f00:	10000012 	.word	0x10000012
 8002f04:	20000000 	.word	0x20000000
 8002f08:	431bde83 	.word	0x431bde83

08002f0c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f14:	4b79      	ldr	r3, [pc, #484]	; (80030fc <ADC_Init+0x1f0>)
 8002f16:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6859      	ldr	r1, [r3, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	021a      	lsls	r2, r3, #8
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6859      	ldr	r1, [r3, #4]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689a      	ldr	r2, [r3, #8]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6899      	ldr	r1, [r3, #8]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9e:	4a58      	ldr	r2, [pc, #352]	; (8003100 <ADC_Init+0x1f4>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d022      	beq.n	8002fea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fb2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6899      	ldr	r1, [r3, #8]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6899      	ldr	r1, [r3, #8]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	609a      	str	r2, [r3, #8]
 8002fe8:	e00f      	b.n	800300a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ff8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003008:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0202 	bic.w	r2, r2, #2
 8003018:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6899      	ldr	r1, [r3, #8]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	7e1b      	ldrb	r3, [r3, #24]
 8003024:	005a      	lsls	r2, r3, #1
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d01b      	beq.n	8003070 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003046:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003056:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6859      	ldr	r1, [r3, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	3b01      	subs	r3, #1
 8003064:	035a      	lsls	r2, r3, #13
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	e007      	b.n	8003080 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800307e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800308e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	3b01      	subs	r3, #1
 800309c:	051a      	lsls	r2, r3, #20
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6899      	ldr	r1, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030c2:	025a      	lsls	r2, r3, #9
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689a      	ldr	r2, [r3, #8]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6899      	ldr	r1, [r3, #8]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	029a      	lsls	r2, r3, #10
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	609a      	str	r2, [r3, #8]
}
 80030f0:	bf00      	nop
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	40012300 	.word	0x40012300
 8003100:	0f000001 	.word	0x0f000001

08003104 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003114:	4b0c      	ldr	r3, [pc, #48]	; (8003148 <__NVIC_SetPriorityGrouping+0x44>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003120:	4013      	ands	r3, r2
 8003122:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800312c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003136:	4a04      	ldr	r2, [pc, #16]	; (8003148 <__NVIC_SetPriorityGrouping+0x44>)
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	60d3      	str	r3, [r2, #12]
}
 800313c:	bf00      	nop
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	e000ed00 	.word	0xe000ed00

0800314c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003150:	4b04      	ldr	r3, [pc, #16]	; (8003164 <__NVIC_GetPriorityGrouping+0x18>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	0a1b      	lsrs	r3, r3, #8
 8003156:	f003 0307 	and.w	r3, r3, #7
}
 800315a:	4618      	mov	r0, r3
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	e000ed00 	.word	0xe000ed00

08003168 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	4603      	mov	r3, r0
 8003170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003176:	2b00      	cmp	r3, #0
 8003178:	db0b      	blt.n	8003192 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800317a:	79fb      	ldrb	r3, [r7, #7]
 800317c:	f003 021f 	and.w	r2, r3, #31
 8003180:	4907      	ldr	r1, [pc, #28]	; (80031a0 <__NVIC_EnableIRQ+0x38>)
 8003182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003186:	095b      	lsrs	r3, r3, #5
 8003188:	2001      	movs	r0, #1
 800318a:	fa00 f202 	lsl.w	r2, r0, r2
 800318e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	e000e100 	.word	0xe000e100

080031a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	4603      	mov	r3, r0
 80031ac:	6039      	str	r1, [r7, #0]
 80031ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	db0a      	blt.n	80031ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	b2da      	uxtb	r2, r3
 80031bc:	490c      	ldr	r1, [pc, #48]	; (80031f0 <__NVIC_SetPriority+0x4c>)
 80031be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c2:	0112      	lsls	r2, r2, #4
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	440b      	add	r3, r1
 80031c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031cc:	e00a      	b.n	80031e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	4908      	ldr	r1, [pc, #32]	; (80031f4 <__NVIC_SetPriority+0x50>)
 80031d4:	79fb      	ldrb	r3, [r7, #7]
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	3b04      	subs	r3, #4
 80031dc:	0112      	lsls	r2, r2, #4
 80031de:	b2d2      	uxtb	r2, r2
 80031e0:	440b      	add	r3, r1
 80031e2:	761a      	strb	r2, [r3, #24]
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	e000e100 	.word	0xe000e100
 80031f4:	e000ed00 	.word	0xe000ed00

080031f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b089      	sub	sp, #36	; 0x24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	f1c3 0307 	rsb	r3, r3, #7
 8003212:	2b04      	cmp	r3, #4
 8003214:	bf28      	it	cs
 8003216:	2304      	movcs	r3, #4
 8003218:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	3304      	adds	r3, #4
 800321e:	2b06      	cmp	r3, #6
 8003220:	d902      	bls.n	8003228 <NVIC_EncodePriority+0x30>
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	3b03      	subs	r3, #3
 8003226:	e000      	b.n	800322a <NVIC_EncodePriority+0x32>
 8003228:	2300      	movs	r3, #0
 800322a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800322c:	f04f 32ff 	mov.w	r2, #4294967295
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	43da      	mvns	r2, r3
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	401a      	ands	r2, r3
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003240:	f04f 31ff 	mov.w	r1, #4294967295
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	fa01 f303 	lsl.w	r3, r1, r3
 800324a:	43d9      	mvns	r1, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003250:	4313      	orrs	r3, r2
         );
}
 8003252:	4618      	mov	r0, r3
 8003254:	3724      	adds	r7, #36	; 0x24
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
	...

08003260 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3b01      	subs	r3, #1
 800326c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003270:	d301      	bcc.n	8003276 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003272:	2301      	movs	r3, #1
 8003274:	e00f      	b.n	8003296 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003276:	4a0a      	ldr	r2, [pc, #40]	; (80032a0 <SysTick_Config+0x40>)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3b01      	subs	r3, #1
 800327c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800327e:	210f      	movs	r1, #15
 8003280:	f04f 30ff 	mov.w	r0, #4294967295
 8003284:	f7ff ff8e 	bl	80031a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003288:	4b05      	ldr	r3, [pc, #20]	; (80032a0 <SysTick_Config+0x40>)
 800328a:	2200      	movs	r2, #0
 800328c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800328e:	4b04      	ldr	r3, [pc, #16]	; (80032a0 <SysTick_Config+0x40>)
 8003290:	2207      	movs	r2, #7
 8003292:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	e000e010 	.word	0xe000e010

080032a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f7ff ff29 	bl	8003104 <__NVIC_SetPriorityGrouping>
}
 80032b2:	bf00      	nop
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b086      	sub	sp, #24
 80032be:	af00      	add	r7, sp, #0
 80032c0:	4603      	mov	r3, r0
 80032c2:	60b9      	str	r1, [r7, #8]
 80032c4:	607a      	str	r2, [r7, #4]
 80032c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032cc:	f7ff ff3e 	bl	800314c <__NVIC_GetPriorityGrouping>
 80032d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	68b9      	ldr	r1, [r7, #8]
 80032d6:	6978      	ldr	r0, [r7, #20]
 80032d8:	f7ff ff8e 	bl	80031f8 <NVIC_EncodePriority>
 80032dc:	4602      	mov	r2, r0
 80032de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032e2:	4611      	mov	r1, r2
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff ff5d 	bl	80031a4 <__NVIC_SetPriority>
}
 80032ea:	bf00      	nop
 80032ec:	3718      	adds	r7, #24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b082      	sub	sp, #8
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	4603      	mov	r3, r0
 80032fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff ff31 	bl	8003168 <__NVIC_EnableIRQ>
}
 8003306:	bf00      	nop
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b082      	sub	sp, #8
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7ff ffa2 	bl	8003260 <SysTick_Config>
 800331c:	4603      	mov	r3, r0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
	...

08003328 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003328:	b480      	push	{r7}
 800332a:	b089      	sub	sp, #36	; 0x24
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003332:	2300      	movs	r3, #0
 8003334:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003336:	2300      	movs	r3, #0
 8003338:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800333a:	2300      	movs	r3, #0
 800333c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800333e:	2300      	movs	r3, #0
 8003340:	61fb      	str	r3, [r7, #28]
 8003342:	e177      	b.n	8003634 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003344:	2201      	movs	r2, #1
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	4013      	ands	r3, r2
 8003356:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	429a      	cmp	r2, r3
 800335e:	f040 8166 	bne.w	800362e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f003 0303 	and.w	r3, r3, #3
 800336a:	2b01      	cmp	r3, #1
 800336c:	d005      	beq.n	800337a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003376:	2b02      	cmp	r3, #2
 8003378:	d130      	bne.n	80033dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	2203      	movs	r2, #3
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	43db      	mvns	r3, r3
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	4013      	ands	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033b0:	2201      	movs	r2, #1
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	43db      	mvns	r3, r3
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	4013      	ands	r3, r2
 80033be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	091b      	lsrs	r3, r3, #4
 80033c6:	f003 0201 	and.w	r2, r3, #1
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f003 0303 	and.w	r3, r3, #3
 80033e4:	2b03      	cmp	r3, #3
 80033e6:	d017      	beq.n	8003418 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	2203      	movs	r2, #3
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	43db      	mvns	r3, r3
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	4013      	ands	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	4313      	orrs	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f003 0303 	and.w	r3, r3, #3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d123      	bne.n	800346c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	08da      	lsrs	r2, r3, #3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	3208      	adds	r2, #8
 800342c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003430:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	220f      	movs	r2, #15
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	43db      	mvns	r3, r3
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	4013      	ands	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	691a      	ldr	r2, [r3, #16]
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	4313      	orrs	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	08da      	lsrs	r2, r3, #3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3208      	adds	r2, #8
 8003466:	69b9      	ldr	r1, [r7, #24]
 8003468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	2203      	movs	r2, #3
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	43db      	mvns	r3, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4013      	ands	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f003 0203 	and.w	r2, r3, #3
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4313      	orrs	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 80c0 	beq.w	800362e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ae:	2300      	movs	r3, #0
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	4b66      	ldr	r3, [pc, #408]	; (800364c <HAL_GPIO_Init+0x324>)
 80034b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b6:	4a65      	ldr	r2, [pc, #404]	; (800364c <HAL_GPIO_Init+0x324>)
 80034b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034bc:	6453      	str	r3, [r2, #68]	; 0x44
 80034be:	4b63      	ldr	r3, [pc, #396]	; (800364c <HAL_GPIO_Init+0x324>)
 80034c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034ca:	4a61      	ldr	r2, [pc, #388]	; (8003650 <HAL_GPIO_Init+0x328>)
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	089b      	lsrs	r3, r3, #2
 80034d0:	3302      	adds	r3, #2
 80034d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	f003 0303 	and.w	r3, r3, #3
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	220f      	movs	r2, #15
 80034e2:	fa02 f303 	lsl.w	r3, r2, r3
 80034e6:	43db      	mvns	r3, r3
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	4013      	ands	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a58      	ldr	r2, [pc, #352]	; (8003654 <HAL_GPIO_Init+0x32c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d037      	beq.n	8003566 <HAL_GPIO_Init+0x23e>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a57      	ldr	r2, [pc, #348]	; (8003658 <HAL_GPIO_Init+0x330>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d031      	beq.n	8003562 <HAL_GPIO_Init+0x23a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a56      	ldr	r2, [pc, #344]	; (800365c <HAL_GPIO_Init+0x334>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d02b      	beq.n	800355e <HAL_GPIO_Init+0x236>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a55      	ldr	r2, [pc, #340]	; (8003660 <HAL_GPIO_Init+0x338>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d025      	beq.n	800355a <HAL_GPIO_Init+0x232>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a54      	ldr	r2, [pc, #336]	; (8003664 <HAL_GPIO_Init+0x33c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d01f      	beq.n	8003556 <HAL_GPIO_Init+0x22e>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a53      	ldr	r2, [pc, #332]	; (8003668 <HAL_GPIO_Init+0x340>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d019      	beq.n	8003552 <HAL_GPIO_Init+0x22a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a52      	ldr	r2, [pc, #328]	; (800366c <HAL_GPIO_Init+0x344>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d013      	beq.n	800354e <HAL_GPIO_Init+0x226>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a51      	ldr	r2, [pc, #324]	; (8003670 <HAL_GPIO_Init+0x348>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d00d      	beq.n	800354a <HAL_GPIO_Init+0x222>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a50      	ldr	r2, [pc, #320]	; (8003674 <HAL_GPIO_Init+0x34c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d007      	beq.n	8003546 <HAL_GPIO_Init+0x21e>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a4f      	ldr	r2, [pc, #316]	; (8003678 <HAL_GPIO_Init+0x350>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d101      	bne.n	8003542 <HAL_GPIO_Init+0x21a>
 800353e:	2309      	movs	r3, #9
 8003540:	e012      	b.n	8003568 <HAL_GPIO_Init+0x240>
 8003542:	230a      	movs	r3, #10
 8003544:	e010      	b.n	8003568 <HAL_GPIO_Init+0x240>
 8003546:	2308      	movs	r3, #8
 8003548:	e00e      	b.n	8003568 <HAL_GPIO_Init+0x240>
 800354a:	2307      	movs	r3, #7
 800354c:	e00c      	b.n	8003568 <HAL_GPIO_Init+0x240>
 800354e:	2306      	movs	r3, #6
 8003550:	e00a      	b.n	8003568 <HAL_GPIO_Init+0x240>
 8003552:	2305      	movs	r3, #5
 8003554:	e008      	b.n	8003568 <HAL_GPIO_Init+0x240>
 8003556:	2304      	movs	r3, #4
 8003558:	e006      	b.n	8003568 <HAL_GPIO_Init+0x240>
 800355a:	2303      	movs	r3, #3
 800355c:	e004      	b.n	8003568 <HAL_GPIO_Init+0x240>
 800355e:	2302      	movs	r3, #2
 8003560:	e002      	b.n	8003568 <HAL_GPIO_Init+0x240>
 8003562:	2301      	movs	r3, #1
 8003564:	e000      	b.n	8003568 <HAL_GPIO_Init+0x240>
 8003566:	2300      	movs	r3, #0
 8003568:	69fa      	ldr	r2, [r7, #28]
 800356a:	f002 0203 	and.w	r2, r2, #3
 800356e:	0092      	lsls	r2, r2, #2
 8003570:	4093      	lsls	r3, r2
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4313      	orrs	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003578:	4935      	ldr	r1, [pc, #212]	; (8003650 <HAL_GPIO_Init+0x328>)
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	089b      	lsrs	r3, r3, #2
 800357e:	3302      	adds	r3, #2
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003586:	4b3d      	ldr	r3, [pc, #244]	; (800367c <HAL_GPIO_Init+0x354>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	43db      	mvns	r3, r3
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	4013      	ands	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035aa:	4a34      	ldr	r2, [pc, #208]	; (800367c <HAL_GPIO_Init+0x354>)
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035b0:	4b32      	ldr	r3, [pc, #200]	; (800367c <HAL_GPIO_Init+0x354>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	43db      	mvns	r3, r3
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	4013      	ands	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035d4:	4a29      	ldr	r2, [pc, #164]	; (800367c <HAL_GPIO_Init+0x354>)
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035da:	4b28      	ldr	r3, [pc, #160]	; (800367c <HAL_GPIO_Init+0x354>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	43db      	mvns	r3, r3
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	4013      	ands	r3, r2
 80035e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035fe:	4a1f      	ldr	r2, [pc, #124]	; (800367c <HAL_GPIO_Init+0x354>)
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003604:	4b1d      	ldr	r3, [pc, #116]	; (800367c <HAL_GPIO_Init+0x354>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	43db      	mvns	r3, r3
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	4013      	ands	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	4313      	orrs	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003628:	4a14      	ldr	r2, [pc, #80]	; (800367c <HAL_GPIO_Init+0x354>)
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	3301      	adds	r3, #1
 8003632:	61fb      	str	r3, [r7, #28]
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	2b0f      	cmp	r3, #15
 8003638:	f67f ae84 	bls.w	8003344 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800363c:	bf00      	nop
 800363e:	bf00      	nop
 8003640:	3724      	adds	r7, #36	; 0x24
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	40023800 	.word	0x40023800
 8003650:	40013800 	.word	0x40013800
 8003654:	40020000 	.word	0x40020000
 8003658:	40020400 	.word	0x40020400
 800365c:	40020800 	.word	0x40020800
 8003660:	40020c00 	.word	0x40020c00
 8003664:	40021000 	.word	0x40021000
 8003668:	40021400 	.word	0x40021400
 800366c:	40021800 	.word	0x40021800
 8003670:	40021c00 	.word	0x40021c00
 8003674:	40022000 	.word	0x40022000
 8003678:	40022400 	.word	0x40022400
 800367c:	40013c00 	.word	0x40013c00

08003680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	460b      	mov	r3, r1
 800368a:	807b      	strh	r3, [r7, #2]
 800368c:	4613      	mov	r3, r2
 800368e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003690:	787b      	ldrb	r3, [r7, #1]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003696:	887a      	ldrh	r2, [r7, #2]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800369c:	e003      	b.n	80036a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800369e:	887b      	ldrh	r3, [r7, #2]
 80036a0:	041a      	lsls	r2, r3, #16
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	619a      	str	r2, [r3, #24]
}
 80036a6:	bf00      	nop
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b085      	sub	sp, #20
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
 80036ba:	460b      	mov	r3, r1
 80036bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036c4:	887a      	ldrh	r2, [r7, #2]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	4013      	ands	r3, r2
 80036ca:	041a      	lsls	r2, r3, #16
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	43d9      	mvns	r1, r3
 80036d0:	887b      	ldrh	r3, [r7, #2]
 80036d2:	400b      	ands	r3, r1
 80036d4:	431a      	orrs	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	619a      	str	r2, [r3, #24]
}
 80036da:	bf00      	nop
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
	...

080036e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	4603      	mov	r3, r0
 80036f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80036f2:	4b08      	ldr	r3, [pc, #32]	; (8003714 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036f4:	695a      	ldr	r2, [r3, #20]
 80036f6:	88fb      	ldrh	r3, [r7, #6]
 80036f8:	4013      	ands	r3, r2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d006      	beq.n	800370c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036fe:	4a05      	ldr	r2, [pc, #20]	; (8003714 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003700:	88fb      	ldrh	r3, [r7, #6]
 8003702:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003704:	88fb      	ldrh	r3, [r7, #6]
 8003706:	4618      	mov	r0, r3
 8003708:	f7fe fd9a 	bl	8002240 <HAL_GPIO_EXTI_Callback>
  }
}
 800370c:	bf00      	nop
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40013c00 	.word	0x40013c00

08003718 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e12b      	b.n	8003982 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d106      	bne.n	8003744 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7fe fe28 	bl	8002394 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2224      	movs	r2, #36	; 0x24
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0201 	bic.w	r2, r2, #1
 800375a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800376a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800377a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800377c:	f002 fdd4 	bl	8006328 <HAL_RCC_GetPCLK1Freq>
 8003780:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	4a81      	ldr	r2, [pc, #516]	; (800398c <HAL_I2C_Init+0x274>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d807      	bhi.n	800379c <HAL_I2C_Init+0x84>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4a80      	ldr	r2, [pc, #512]	; (8003990 <HAL_I2C_Init+0x278>)
 8003790:	4293      	cmp	r3, r2
 8003792:	bf94      	ite	ls
 8003794:	2301      	movls	r3, #1
 8003796:	2300      	movhi	r3, #0
 8003798:	b2db      	uxtb	r3, r3
 800379a:	e006      	b.n	80037aa <HAL_I2C_Init+0x92>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4a7d      	ldr	r2, [pc, #500]	; (8003994 <HAL_I2C_Init+0x27c>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	bf94      	ite	ls
 80037a4:	2301      	movls	r3, #1
 80037a6:	2300      	movhi	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e0e7      	b.n	8003982 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	4a78      	ldr	r2, [pc, #480]	; (8003998 <HAL_I2C_Init+0x280>)
 80037b6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ba:	0c9b      	lsrs	r3, r3, #18
 80037bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68ba      	ldr	r2, [r7, #8]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	4a6a      	ldr	r2, [pc, #424]	; (800398c <HAL_I2C_Init+0x274>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d802      	bhi.n	80037ec <HAL_I2C_Init+0xd4>
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	3301      	adds	r3, #1
 80037ea:	e009      	b.n	8003800 <HAL_I2C_Init+0xe8>
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037f2:	fb02 f303 	mul.w	r3, r2, r3
 80037f6:	4a69      	ldr	r2, [pc, #420]	; (800399c <HAL_I2C_Init+0x284>)
 80037f8:	fba2 2303 	umull	r2, r3, r2, r3
 80037fc:	099b      	lsrs	r3, r3, #6
 80037fe:	3301      	adds	r3, #1
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6812      	ldr	r2, [r2, #0]
 8003804:	430b      	orrs	r3, r1
 8003806:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003812:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	495c      	ldr	r1, [pc, #368]	; (800398c <HAL_I2C_Init+0x274>)
 800381c:	428b      	cmp	r3, r1
 800381e:	d819      	bhi.n	8003854 <HAL_I2C_Init+0x13c>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	1e59      	subs	r1, r3, #1
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	fbb1 f3f3 	udiv	r3, r1, r3
 800382e:	1c59      	adds	r1, r3, #1
 8003830:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003834:	400b      	ands	r3, r1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00a      	beq.n	8003850 <HAL_I2C_Init+0x138>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	1e59      	subs	r1, r3, #1
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	fbb1 f3f3 	udiv	r3, r1, r3
 8003848:	3301      	adds	r3, #1
 800384a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800384e:	e051      	b.n	80038f4 <HAL_I2C_Init+0x1dc>
 8003850:	2304      	movs	r3, #4
 8003852:	e04f      	b.n	80038f4 <HAL_I2C_Init+0x1dc>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d111      	bne.n	8003880 <HAL_I2C_Init+0x168>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	1e58      	subs	r0, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6859      	ldr	r1, [r3, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	440b      	add	r3, r1
 800386a:	fbb0 f3f3 	udiv	r3, r0, r3
 800386e:	3301      	adds	r3, #1
 8003870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003874:	2b00      	cmp	r3, #0
 8003876:	bf0c      	ite	eq
 8003878:	2301      	moveq	r3, #1
 800387a:	2300      	movne	r3, #0
 800387c:	b2db      	uxtb	r3, r3
 800387e:	e012      	b.n	80038a6 <HAL_I2C_Init+0x18e>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	1e58      	subs	r0, r3, #1
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6859      	ldr	r1, [r3, #4]
 8003888:	460b      	mov	r3, r1
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	0099      	lsls	r1, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	fbb0 f3f3 	udiv	r3, r0, r3
 8003896:	3301      	adds	r3, #1
 8003898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800389c:	2b00      	cmp	r3, #0
 800389e:	bf0c      	ite	eq
 80038a0:	2301      	moveq	r3, #1
 80038a2:	2300      	movne	r3, #0
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <HAL_I2C_Init+0x196>
 80038aa:	2301      	movs	r3, #1
 80038ac:	e022      	b.n	80038f4 <HAL_I2C_Init+0x1dc>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10e      	bne.n	80038d4 <HAL_I2C_Init+0x1bc>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	1e58      	subs	r0, r3, #1
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6859      	ldr	r1, [r3, #4]
 80038be:	460b      	mov	r3, r1
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	440b      	add	r3, r1
 80038c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80038c8:	3301      	adds	r3, #1
 80038ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038d2:	e00f      	b.n	80038f4 <HAL_I2C_Init+0x1dc>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	1e58      	subs	r0, r3, #1
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6859      	ldr	r1, [r3, #4]
 80038dc:	460b      	mov	r3, r1
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	0099      	lsls	r1, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ea:	3301      	adds	r3, #1
 80038ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038f4:	6879      	ldr	r1, [r7, #4]
 80038f6:	6809      	ldr	r1, [r1, #0]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69da      	ldr	r2, [r3, #28]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003922:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6911      	ldr	r1, [r2, #16]
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	68d2      	ldr	r2, [r2, #12]
 800392e:	4311      	orrs	r1, r2
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6812      	ldr	r2, [r2, #0]
 8003934:	430b      	orrs	r3, r1
 8003936:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	695a      	ldr	r2, [r3, #20]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	431a      	orrs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0201 	orr.w	r2, r2, #1
 8003962:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2220      	movs	r2, #32
 800396e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	000186a0 	.word	0x000186a0
 8003990:	001e847f 	.word	0x001e847f
 8003994:	003d08ff 	.word	0x003d08ff
 8003998:	431bde83 	.word	0x431bde83
 800399c:	10624dd3 	.word	0x10624dd3

080039a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b088      	sub	sp, #32
 80039a4:	af02      	add	r7, sp, #8
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	4608      	mov	r0, r1
 80039aa:	4611      	mov	r1, r2
 80039ac:	461a      	mov	r2, r3
 80039ae:	4603      	mov	r3, r0
 80039b0:	817b      	strh	r3, [r7, #10]
 80039b2:	460b      	mov	r3, r1
 80039b4:	813b      	strh	r3, [r7, #8]
 80039b6:	4613      	mov	r3, r2
 80039b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039ba:	f7ff f901 	bl	8002bc0 <HAL_GetTick>
 80039be:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b20      	cmp	r3, #32
 80039ca:	f040 80d9 	bne.w	8003b80 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	2319      	movs	r3, #25
 80039d4:	2201      	movs	r2, #1
 80039d6:	496d      	ldr	r1, [pc, #436]	; (8003b8c <HAL_I2C_Mem_Write+0x1ec>)
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 fc7f 	bl	80042dc <I2C_WaitOnFlagUntilTimeout>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80039e4:	2302      	movs	r3, #2
 80039e6:	e0cc      	b.n	8003b82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d101      	bne.n	80039f6 <HAL_I2C_Mem_Write+0x56>
 80039f2:	2302      	movs	r3, #2
 80039f4:	e0c5      	b.n	8003b82 <HAL_I2C_Mem_Write+0x1e2>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d007      	beq.n	8003a1c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f042 0201 	orr.w	r2, r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2221      	movs	r2, #33	; 0x21
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2240      	movs	r2, #64	; 0x40
 8003a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6a3a      	ldr	r2, [r7, #32]
 8003a46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4a4d      	ldr	r2, [pc, #308]	; (8003b90 <HAL_I2C_Mem_Write+0x1f0>)
 8003a5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a5e:	88f8      	ldrh	r0, [r7, #6]
 8003a60:	893a      	ldrh	r2, [r7, #8]
 8003a62:	8979      	ldrh	r1, [r7, #10]
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	9301      	str	r3, [sp, #4]
 8003a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 fab6 	bl	8003fe0 <I2C_RequestMemoryWrite>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d052      	beq.n	8003b20 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e081      	b.n	8003b82 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 fd00 	bl	8004488 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00d      	beq.n	8003aaa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d107      	bne.n	8003aa6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e06b      	b.n	8003b82 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	781a      	ldrb	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	1c5a      	adds	r2, r3, #1
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	d11b      	bne.n	8003b20 <HAL_I2C_Mem_Write+0x180>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d017      	beq.n	8003b20 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	781a      	ldrb	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	1c5a      	adds	r2, r3, #1
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1aa      	bne.n	8003a7e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 fcec 	bl	800450a <I2C_WaitOnBTFFlagUntilTimeout>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00d      	beq.n	8003b54 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	d107      	bne.n	8003b50 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b4e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e016      	b.n	8003b82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2220      	movs	r2, #32
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	e000      	b.n	8003b82 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003b80:	2302      	movs	r3, #2
  }
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	00100002 	.word	0x00100002
 8003b90:	ffff0000 	.word	0xffff0000

08003b94 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08c      	sub	sp, #48	; 0x30
 8003b98:	af02      	add	r7, sp, #8
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	4608      	mov	r0, r1
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	817b      	strh	r3, [r7, #10]
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	813b      	strh	r3, [r7, #8]
 8003baa:	4613      	mov	r3, r2
 8003bac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bae:	f7ff f807 	bl	8002bc0 <HAL_GetTick>
 8003bb2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b20      	cmp	r3, #32
 8003bbe:	f040 8208 	bne.w	8003fd2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	2319      	movs	r3, #25
 8003bc8:	2201      	movs	r2, #1
 8003bca:	497b      	ldr	r1, [pc, #492]	; (8003db8 <HAL_I2C_Mem_Read+0x224>)
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 fb85 	bl	80042dc <I2C_WaitOnFlagUntilTimeout>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003bd8:	2302      	movs	r3, #2
 8003bda:	e1fb      	b.n	8003fd4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d101      	bne.n	8003bea <HAL_I2C_Mem_Read+0x56>
 8003be6:	2302      	movs	r3, #2
 8003be8:	e1f4      	b.n	8003fd4 <HAL_I2C_Mem_Read+0x440>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d007      	beq.n	8003c10 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0201 	orr.w	r2, r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2222      	movs	r2, #34	; 0x22
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2240      	movs	r2, #64	; 0x40
 8003c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003c40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4a5b      	ldr	r2, [pc, #364]	; (8003dbc <HAL_I2C_Mem_Read+0x228>)
 8003c50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c52:	88f8      	ldrh	r0, [r7, #6]
 8003c54:	893a      	ldrh	r2, [r7, #8]
 8003c56:	8979      	ldrh	r1, [r7, #10]
 8003c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5a:	9301      	str	r3, [sp, #4]
 8003c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	4603      	mov	r3, r0
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 fa52 	bl	800410c <I2C_RequestMemoryRead>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e1b0      	b.n	8003fd4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d113      	bne.n	8003ca2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	623b      	str	r3, [r7, #32]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	623b      	str	r3, [r7, #32]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	623b      	str	r3, [r7, #32]
 8003c8e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	e184      	b.n	8003fac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d11b      	bne.n	8003ce2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61fb      	str	r3, [r7, #28]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	61fb      	str	r3, [r7, #28]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	61fb      	str	r3, [r7, #28]
 8003cce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	e164      	b.n	8003fac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d11b      	bne.n	8003d22 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cf8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	61bb      	str	r3, [r7, #24]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	61bb      	str	r3, [r7, #24]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	61bb      	str	r3, [r7, #24]
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	e144      	b.n	8003fac <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d22:	2300      	movs	r3, #0
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	617b      	str	r3, [r7, #20]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	617b      	str	r3, [r7, #20]
 8003d36:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d38:	e138      	b.n	8003fac <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3e:	2b03      	cmp	r3, #3
 8003d40:	f200 80f1 	bhi.w	8003f26 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d123      	bne.n	8003d94 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f000 fc1b 	bl	800458c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e139      	b.n	8003fd4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	691a      	ldr	r2, [r3, #16]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	b2d2      	uxtb	r2, r2
 8003d6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	1c5a      	adds	r2, r3, #1
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d92:	e10b      	b.n	8003fac <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d14e      	bne.n	8003e3a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da2:	2200      	movs	r2, #0
 8003da4:	4906      	ldr	r1, [pc, #24]	; (8003dc0 <HAL_I2C_Mem_Read+0x22c>)
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 fa98 	bl	80042dc <I2C_WaitOnFlagUntilTimeout>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d008      	beq.n	8003dc4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e10e      	b.n	8003fd4 <HAL_I2C_Mem_Read+0x440>
 8003db6:	bf00      	nop
 8003db8:	00100002 	.word	0x00100002
 8003dbc:	ffff0000 	.word	0xffff0000
 8003dc0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	691a      	ldr	r2, [r3, #16]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	1c5a      	adds	r2, r3, #1
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df0:	3b01      	subs	r3, #1
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	b2d2      	uxtb	r2, r2
 8003e12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e38:	e0b8      	b.n	8003fac <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e40:	2200      	movs	r2, #0
 8003e42:	4966      	ldr	r1, [pc, #408]	; (8003fdc <HAL_I2C_Mem_Read+0x448>)
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f000 fa49 	bl	80042dc <I2C_WaitOnFlagUntilTimeout>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e0bf      	b.n	8003fd4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	691a      	ldr	r2, [r3, #16]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	b2d2      	uxtb	r2, r2
 8003e70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	1c5a      	adds	r2, r3, #1
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	494f      	ldr	r1, [pc, #316]	; (8003fdc <HAL_I2C_Mem_Read+0x448>)
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 fa1b 	bl	80042dc <I2C_WaitOnFlagUntilTimeout>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e091      	b.n	8003fd4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ebe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691a      	ldr	r2, [r3, #16]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	1c5a      	adds	r2, r3, #1
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	3b01      	subs	r3, #1
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	691a      	ldr	r2, [r3, #16]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	b2d2      	uxtb	r2, r2
 8003efe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f24:	e042      	b.n	8003fac <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 fb2e 	bl	800458c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e04c      	b.n	8003fd4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	691a      	ldr	r2, [r3, #16]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	b2d2      	uxtb	r2, r2
 8003f46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	1c5a      	adds	r2, r3, #1
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	f003 0304 	and.w	r3, r3, #4
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d118      	bne.n	8003fac <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	691a      	ldr	r2, [r3, #16]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	b2d2      	uxtb	r2, r2
 8003f86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	1c5a      	adds	r2, r3, #1
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f96:	3b01      	subs	r3, #1
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f47f aec2 	bne.w	8003d3a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	e000      	b.n	8003fd4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003fd2:	2302      	movs	r3, #2
  }
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3728      	adds	r7, #40	; 0x28
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	00010004 	.word	0x00010004

08003fe0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b088      	sub	sp, #32
 8003fe4:	af02      	add	r7, sp, #8
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	4608      	mov	r0, r1
 8003fea:	4611      	mov	r1, r2
 8003fec:	461a      	mov	r2, r3
 8003fee:	4603      	mov	r3, r0
 8003ff0:	817b      	strh	r3, [r7, #10]
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	813b      	strh	r3, [r7, #8]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004008:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	2200      	movs	r2, #0
 8004012:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 f960 	bl	80042dc <I2C_WaitOnFlagUntilTimeout>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00d      	beq.n	800403e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004030:	d103      	bne.n	800403a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004038:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e05f      	b.n	80040fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800403e:	897b      	ldrh	r3, [r7, #10]
 8004040:	b2db      	uxtb	r3, r3
 8004042:	461a      	mov	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800404c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004050:	6a3a      	ldr	r2, [r7, #32]
 8004052:	492d      	ldr	r1, [pc, #180]	; (8004108 <I2C_RequestMemoryWrite+0x128>)
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 f998 	bl	800438a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e04c      	b.n	80040fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004064:	2300      	movs	r3, #0
 8004066:	617b      	str	r3, [r7, #20]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	617b      	str	r3, [r7, #20]
 8004078:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800407a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800407c:	6a39      	ldr	r1, [r7, #32]
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 fa02 	bl	8004488 <I2C_WaitOnTXEFlagUntilTimeout>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00d      	beq.n	80040a6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	2b04      	cmp	r3, #4
 8004090:	d107      	bne.n	80040a2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e02b      	b.n	80040fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040a6:	88fb      	ldrh	r3, [r7, #6]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d105      	bne.n	80040b8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040ac:	893b      	ldrh	r3, [r7, #8]
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	611a      	str	r2, [r3, #16]
 80040b6:	e021      	b.n	80040fc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80040b8:	893b      	ldrh	r3, [r7, #8]
 80040ba:	0a1b      	lsrs	r3, r3, #8
 80040bc:	b29b      	uxth	r3, r3
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c8:	6a39      	ldr	r1, [r7, #32]
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 f9dc 	bl	8004488 <I2C_WaitOnTXEFlagUntilTimeout>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00d      	beq.n	80040f2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	2b04      	cmp	r3, #4
 80040dc:	d107      	bne.n	80040ee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e005      	b.n	80040fe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040f2:	893b      	ldrh	r3, [r7, #8]
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3718      	adds	r7, #24
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	00010002 	.word	0x00010002

0800410c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b088      	sub	sp, #32
 8004110:	af02      	add	r7, sp, #8
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	4608      	mov	r0, r1
 8004116:	4611      	mov	r1, r2
 8004118:	461a      	mov	r2, r3
 800411a:	4603      	mov	r3, r0
 800411c:	817b      	strh	r3, [r7, #10]
 800411e:	460b      	mov	r3, r1
 8004120:	813b      	strh	r3, [r7, #8]
 8004122:	4613      	mov	r3, r2
 8004124:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004134:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004144:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	2200      	movs	r2, #0
 800414e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 f8c2 	bl	80042dc <I2C_WaitOnFlagUntilTimeout>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00d      	beq.n	800417a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800416c:	d103      	bne.n	8004176 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004174:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e0aa      	b.n	80042d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800417a:	897b      	ldrh	r3, [r7, #10]
 800417c:	b2db      	uxtb	r3, r3
 800417e:	461a      	mov	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004188:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	6a3a      	ldr	r2, [r7, #32]
 800418e:	4952      	ldr	r1, [pc, #328]	; (80042d8 <I2C_RequestMemoryRead+0x1cc>)
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f000 f8fa 	bl	800438a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e097      	b.n	80042d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041a0:	2300      	movs	r3, #0
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b8:	6a39      	ldr	r1, [r7, #32]
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f000 f964 	bl	8004488 <I2C_WaitOnTXEFlagUntilTimeout>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00d      	beq.n	80041e2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	2b04      	cmp	r3, #4
 80041cc:	d107      	bne.n	80041de <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e076      	b.n	80042d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041e2:	88fb      	ldrh	r3, [r7, #6]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d105      	bne.n	80041f4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041e8:	893b      	ldrh	r3, [r7, #8]
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	611a      	str	r2, [r3, #16]
 80041f2:	e021      	b.n	8004238 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041f4:	893b      	ldrh	r3, [r7, #8]
 80041f6:	0a1b      	lsrs	r3, r3, #8
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004204:	6a39      	ldr	r1, [r7, #32]
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 f93e 	bl	8004488 <I2C_WaitOnTXEFlagUntilTimeout>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00d      	beq.n	800422e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	2b04      	cmp	r3, #4
 8004218:	d107      	bne.n	800422a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004228:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e050      	b.n	80042d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800422e:	893b      	ldrh	r3, [r7, #8]
 8004230:	b2da      	uxtb	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800423a:	6a39      	ldr	r1, [r7, #32]
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 f923 	bl	8004488 <I2C_WaitOnTXEFlagUntilTimeout>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00d      	beq.n	8004264 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424c:	2b04      	cmp	r3, #4
 800424e:	d107      	bne.n	8004260 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800425e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e035      	b.n	80042d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004272:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	6a3b      	ldr	r3, [r7, #32]
 800427a:	2200      	movs	r2, #0
 800427c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 f82b 	bl	80042dc <I2C_WaitOnFlagUntilTimeout>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00d      	beq.n	80042a8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800429a:	d103      	bne.n	80042a4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e013      	b.n	80042d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80042a8:	897b      	ldrh	r3, [r7, #10]
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	f043 0301 	orr.w	r3, r3, #1
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	6a3a      	ldr	r2, [r7, #32]
 80042bc:	4906      	ldr	r1, [pc, #24]	; (80042d8 <I2C_RequestMemoryRead+0x1cc>)
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f000 f863 	bl	800438a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e000      	b.n	80042d0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	00010002 	.word	0x00010002

080042dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	603b      	str	r3, [r7, #0]
 80042e8:	4613      	mov	r3, r2
 80042ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042ec:	e025      	b.n	800433a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f4:	d021      	beq.n	800433a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042f6:	f7fe fc63 	bl	8002bc0 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	429a      	cmp	r2, r3
 8004304:	d302      	bcc.n	800430c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d116      	bne.n	800433a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2220      	movs	r2, #32
 8004316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	f043 0220 	orr.w	r2, r3, #32
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e023      	b.n	8004382 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	0c1b      	lsrs	r3, r3, #16
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b01      	cmp	r3, #1
 8004342:	d10d      	bne.n	8004360 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	43da      	mvns	r2, r3
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	4013      	ands	r3, r2
 8004350:	b29b      	uxth	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	bf0c      	ite	eq
 8004356:	2301      	moveq	r3, #1
 8004358:	2300      	movne	r3, #0
 800435a:	b2db      	uxtb	r3, r3
 800435c:	461a      	mov	r2, r3
 800435e:	e00c      	b.n	800437a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	43da      	mvns	r2, r3
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	4013      	ands	r3, r2
 800436c:	b29b      	uxth	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	bf0c      	ite	eq
 8004372:	2301      	moveq	r3, #1
 8004374:	2300      	movne	r3, #0
 8004376:	b2db      	uxtb	r3, r3
 8004378:	461a      	mov	r2, r3
 800437a:	79fb      	ldrb	r3, [r7, #7]
 800437c:	429a      	cmp	r2, r3
 800437e:	d0b6      	beq.n	80042ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b084      	sub	sp, #16
 800438e:	af00      	add	r7, sp, #0
 8004390:	60f8      	str	r0, [r7, #12]
 8004392:	60b9      	str	r1, [r7, #8]
 8004394:	607a      	str	r2, [r7, #4]
 8004396:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004398:	e051      	b.n	800443e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a8:	d123      	bne.n	80043f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	f043 0204 	orr.w	r2, r3, #4
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e046      	b.n	8004480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f8:	d021      	beq.n	800443e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043fa:	f7fe fbe1 	bl	8002bc0 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	429a      	cmp	r2, r3
 8004408:	d302      	bcc.n	8004410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d116      	bne.n	800443e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2220      	movs	r2, #32
 800441a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	f043 0220 	orr.w	r2, r3, #32
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e020      	b.n	8004480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	0c1b      	lsrs	r3, r3, #16
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b01      	cmp	r3, #1
 8004446:	d10c      	bne.n	8004462 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	43da      	mvns	r2, r3
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	4013      	ands	r3, r2
 8004454:	b29b      	uxth	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	bf14      	ite	ne
 800445a:	2301      	movne	r3, #1
 800445c:	2300      	moveq	r3, #0
 800445e:	b2db      	uxtb	r3, r3
 8004460:	e00b      	b.n	800447a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	43da      	mvns	r2, r3
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	4013      	ands	r3, r2
 800446e:	b29b      	uxth	r3, r3
 8004470:	2b00      	cmp	r3, #0
 8004472:	bf14      	ite	ne
 8004474:	2301      	movne	r3, #1
 8004476:	2300      	moveq	r3, #0
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d18d      	bne.n	800439a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004494:	e02d      	b.n	80044f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f000 f8ce 	bl	8004638 <I2C_IsAcknowledgeFailed>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e02d      	b.n	8004502 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ac:	d021      	beq.n	80044f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ae:	f7fe fb87 	bl	8002bc0 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d302      	bcc.n	80044c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d116      	bne.n	80044f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2220      	movs	r2, #32
 80044ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	f043 0220 	orr.w	r2, r3, #32
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e007      	b.n	8004502 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fc:	2b80      	cmp	r3, #128	; 0x80
 80044fe:	d1ca      	bne.n	8004496 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b084      	sub	sp, #16
 800450e:	af00      	add	r7, sp, #0
 8004510:	60f8      	str	r0, [r7, #12]
 8004512:	60b9      	str	r1, [r7, #8]
 8004514:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004516:	e02d      	b.n	8004574 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 f88d 	bl	8004638 <I2C_IsAcknowledgeFailed>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e02d      	b.n	8004584 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800452e:	d021      	beq.n	8004574 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004530:	f7fe fb46 	bl	8002bc0 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	429a      	cmp	r2, r3
 800453e:	d302      	bcc.n	8004546 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d116      	bne.n	8004574 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2220      	movs	r2, #32
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004560:	f043 0220 	orr.w	r2, r3, #32
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e007      	b.n	8004584 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	f003 0304 	and.w	r3, r3, #4
 800457e:	2b04      	cmp	r3, #4
 8004580:	d1ca      	bne.n	8004518 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004598:	e042      	b.n	8004620 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	f003 0310 	and.w	r3, r3, #16
 80045a4:	2b10      	cmp	r3, #16
 80045a6:	d119      	bne.n	80045dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f06f 0210 	mvn.w	r2, #16
 80045b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2220      	movs	r2, #32
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e029      	b.n	8004630 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045dc:	f7fe faf0 	bl	8002bc0 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d302      	bcc.n	80045f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d116      	bne.n	8004620 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2220      	movs	r2, #32
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460c:	f043 0220 	orr.w	r2, r3, #32
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e007      	b.n	8004630 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462a:	2b40      	cmp	r3, #64	; 0x40
 800462c:	d1b5      	bne.n	800459a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800464a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800464e:	d11b      	bne.n	8004688 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004658:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2220      	movs	r2, #32
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004674:	f043 0204 	orr.w	r2, r3, #4
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e000      	b.n	800468a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
 800469e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b20      	cmp	r3, #32
 80046aa:	d129      	bne.n	8004700 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2224      	movs	r2, #36	; 0x24
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0201 	bic.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 0210 	bic.w	r2, r2, #16
 80046d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f042 0201 	orr.w	r2, r2, #1
 80046f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2220      	movs	r2, #32
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80046fc:	2300      	movs	r3, #0
 80046fe:	e000      	b.n	8004702 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004700:	2302      	movs	r3, #2
  }
}
 8004702:	4618      	mov	r0, r3
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800470e:	b480      	push	{r7}
 8004710:	b085      	sub	sp, #20
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
 8004716:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004718:	2300      	movs	r3, #0
 800471a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b20      	cmp	r3, #32
 8004726:	d12a      	bne.n	800477e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2224      	movs	r2, #36	; 0x24
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 0201 	bic.w	r2, r2, #1
 800473e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004748:	89fb      	ldrh	r3, [r7, #14]
 800474a:	f023 030f 	bic.w	r3, r3, #15
 800474e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	b29a      	uxth	r2, r3
 8004754:	89fb      	ldrh	r3, [r7, #14]
 8004756:	4313      	orrs	r3, r2
 8004758:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	89fa      	ldrh	r2, [r7, #14]
 8004760:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f042 0201 	orr.w	r2, r2, #1
 8004770:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2220      	movs	r2, #32
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	e000      	b.n	8004780 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800477e:	2302      	movs	r3, #2
  }
}
 8004780:	4618      	mov	r0, r3
 8004782:	3714      	adds	r7, #20
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800478c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800478e:	b08f      	sub	sp, #60	; 0x3c
 8004790:	af0a      	add	r7, sp, #40	; 0x28
 8004792:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e10f      	b.n	80049be <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d106      	bne.n	80047be <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f007 fb83 	bl	800bec4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2203      	movs	r2, #3
 80047c2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d102      	bne.n	80047d8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4618      	mov	r0, r3
 80047de:	f003 fd26 	bl	800822e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	603b      	str	r3, [r7, #0]
 80047e8:	687e      	ldr	r6, [r7, #4]
 80047ea:	466d      	mov	r5, sp
 80047ec:	f106 0410 	add.w	r4, r6, #16
 80047f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80047fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8004800:	1d33      	adds	r3, r6, #4
 8004802:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004804:	6838      	ldr	r0, [r7, #0]
 8004806:	f003 fbfd 	bl	8008004 <USB_CoreInit>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d005      	beq.n	800481c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e0d0      	b.n	80049be <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2100      	movs	r1, #0
 8004822:	4618      	mov	r0, r3
 8004824:	f003 fd14 	bl	8008250 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004828:	2300      	movs	r3, #0
 800482a:	73fb      	strb	r3, [r7, #15]
 800482c:	e04a      	b.n	80048c4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800482e:	7bfa      	ldrb	r2, [r7, #15]
 8004830:	6879      	ldr	r1, [r7, #4]
 8004832:	4613      	mov	r3, r2
 8004834:	00db      	lsls	r3, r3, #3
 8004836:	1a9b      	subs	r3, r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	440b      	add	r3, r1
 800483c:	333d      	adds	r3, #61	; 0x3d
 800483e:	2201      	movs	r2, #1
 8004840:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004842:	7bfa      	ldrb	r2, [r7, #15]
 8004844:	6879      	ldr	r1, [r7, #4]
 8004846:	4613      	mov	r3, r2
 8004848:	00db      	lsls	r3, r3, #3
 800484a:	1a9b      	subs	r3, r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	440b      	add	r3, r1
 8004850:	333c      	adds	r3, #60	; 0x3c
 8004852:	7bfa      	ldrb	r2, [r7, #15]
 8004854:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004856:	7bfa      	ldrb	r2, [r7, #15]
 8004858:	7bfb      	ldrb	r3, [r7, #15]
 800485a:	b298      	uxth	r0, r3
 800485c:	6879      	ldr	r1, [r7, #4]
 800485e:	4613      	mov	r3, r2
 8004860:	00db      	lsls	r3, r3, #3
 8004862:	1a9b      	subs	r3, r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	440b      	add	r3, r1
 8004868:	3342      	adds	r3, #66	; 0x42
 800486a:	4602      	mov	r2, r0
 800486c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800486e:	7bfa      	ldrb	r2, [r7, #15]
 8004870:	6879      	ldr	r1, [r7, #4]
 8004872:	4613      	mov	r3, r2
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	1a9b      	subs	r3, r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	440b      	add	r3, r1
 800487c:	333f      	adds	r3, #63	; 0x3f
 800487e:	2200      	movs	r2, #0
 8004880:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004882:	7bfa      	ldrb	r2, [r7, #15]
 8004884:	6879      	ldr	r1, [r7, #4]
 8004886:	4613      	mov	r3, r2
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	1a9b      	subs	r3, r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	440b      	add	r3, r1
 8004890:	3344      	adds	r3, #68	; 0x44
 8004892:	2200      	movs	r2, #0
 8004894:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004896:	7bfa      	ldrb	r2, [r7, #15]
 8004898:	6879      	ldr	r1, [r7, #4]
 800489a:	4613      	mov	r3, r2
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	1a9b      	subs	r3, r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	440b      	add	r3, r1
 80048a4:	3348      	adds	r3, #72	; 0x48
 80048a6:	2200      	movs	r2, #0
 80048a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80048aa:	7bfa      	ldrb	r2, [r7, #15]
 80048ac:	6879      	ldr	r1, [r7, #4]
 80048ae:	4613      	mov	r3, r2
 80048b0:	00db      	lsls	r3, r3, #3
 80048b2:	1a9b      	subs	r3, r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	440b      	add	r3, r1
 80048b8:	3350      	adds	r3, #80	; 0x50
 80048ba:	2200      	movs	r2, #0
 80048bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048be:	7bfb      	ldrb	r3, [r7, #15]
 80048c0:	3301      	adds	r3, #1
 80048c2:	73fb      	strb	r3, [r7, #15]
 80048c4:	7bfa      	ldrb	r2, [r7, #15]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d3af      	bcc.n	800482e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048ce:	2300      	movs	r3, #0
 80048d0:	73fb      	strb	r3, [r7, #15]
 80048d2:	e044      	b.n	800495e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80048d4:	7bfa      	ldrb	r2, [r7, #15]
 80048d6:	6879      	ldr	r1, [r7, #4]
 80048d8:	4613      	mov	r3, r2
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	1a9b      	subs	r3, r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	440b      	add	r3, r1
 80048e2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80048e6:	2200      	movs	r2, #0
 80048e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80048ea:	7bfa      	ldrb	r2, [r7, #15]
 80048ec:	6879      	ldr	r1, [r7, #4]
 80048ee:	4613      	mov	r3, r2
 80048f0:	00db      	lsls	r3, r3, #3
 80048f2:	1a9b      	subs	r3, r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	440b      	add	r3, r1
 80048f8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80048fc:	7bfa      	ldrb	r2, [r7, #15]
 80048fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004900:	7bfa      	ldrb	r2, [r7, #15]
 8004902:	6879      	ldr	r1, [r7, #4]
 8004904:	4613      	mov	r3, r2
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	1a9b      	subs	r3, r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	440b      	add	r3, r1
 800490e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004912:	2200      	movs	r2, #0
 8004914:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004916:	7bfa      	ldrb	r2, [r7, #15]
 8004918:	6879      	ldr	r1, [r7, #4]
 800491a:	4613      	mov	r3, r2
 800491c:	00db      	lsls	r3, r3, #3
 800491e:	1a9b      	subs	r3, r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	440b      	add	r3, r1
 8004924:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004928:	2200      	movs	r2, #0
 800492a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800492c:	7bfa      	ldrb	r2, [r7, #15]
 800492e:	6879      	ldr	r1, [r7, #4]
 8004930:	4613      	mov	r3, r2
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	1a9b      	subs	r3, r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	440b      	add	r3, r1
 800493a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800493e:	2200      	movs	r2, #0
 8004940:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004942:	7bfa      	ldrb	r2, [r7, #15]
 8004944:	6879      	ldr	r1, [r7, #4]
 8004946:	4613      	mov	r3, r2
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	1a9b      	subs	r3, r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	440b      	add	r3, r1
 8004950:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004954:	2200      	movs	r2, #0
 8004956:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004958:	7bfb      	ldrb	r3, [r7, #15]
 800495a:	3301      	adds	r3, #1
 800495c:	73fb      	strb	r3, [r7, #15]
 800495e:	7bfa      	ldrb	r2, [r7, #15]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	429a      	cmp	r2, r3
 8004966:	d3b5      	bcc.n	80048d4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	603b      	str	r3, [r7, #0]
 800496e:	687e      	ldr	r6, [r7, #4]
 8004970:	466d      	mov	r5, sp
 8004972:	f106 0410 	add.w	r4, r6, #16
 8004976:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004978:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800497a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800497c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800497e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004982:	e885 0003 	stmia.w	r5, {r0, r1}
 8004986:	1d33      	adds	r3, r6, #4
 8004988:	cb0e      	ldmia	r3, {r1, r2, r3}
 800498a:	6838      	ldr	r0, [r7, #0]
 800498c:	f003 fcac 	bl	80082e8 <USB_DevInit>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d005      	beq.n	80049a2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2202      	movs	r2, #2
 800499a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e00d      	b.n	80049be <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f004 fd28 	bl	800940c <USB_DevDisconnect>

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049c6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b084      	sub	sp, #16
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d101      	bne.n	80049e2 <HAL_PCD_Start+0x1c>
 80049de:	2302      	movs	r3, #2
 80049e0:	e020      	b.n	8004a24 <HAL_PCD_Start+0x5e>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d109      	bne.n	8004a06 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d005      	beq.n	8004a06 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f003 fbfe 	bl	800820c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4618      	mov	r0, r3
 8004a16:	f004 fcd8 	bl	80093ca <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004a2c:	b590      	push	{r4, r7, lr}
 8004a2e:	b08d      	sub	sp, #52	; 0x34
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f004 fd96 	bl	8009574 <USB_GetMode>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f040 839d 	bne.w	800518a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f004 fcfa 	bl	800944e <USB_ReadInterrupts>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 8393 	beq.w	8005188 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f004 fcf1 	bl	800944e <USB_ReadInterrupts>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d107      	bne.n	8004a86 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	695a      	ldr	r2, [r3, #20]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f002 0202 	and.w	r2, r2, #2
 8004a84:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f004 fcdf 	bl	800944e <USB_ReadInterrupts>
 8004a90:	4603      	mov	r3, r0
 8004a92:	f003 0310 	and.w	r3, r3, #16
 8004a96:	2b10      	cmp	r3, #16
 8004a98:	d161      	bne.n	8004b5e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	699a      	ldr	r2, [r3, #24]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 0210 	bic.w	r2, r2, #16
 8004aa8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004aaa:	6a3b      	ldr	r3, [r7, #32]
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	f003 020f 	and.w	r2, r3, #15
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	00db      	lsls	r3, r3, #3
 8004aba:	1a9b      	subs	r3, r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	3304      	adds	r3, #4
 8004ac8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	0c5b      	lsrs	r3, r3, #17
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d124      	bne.n	8004b20 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004ad6:	69ba      	ldr	r2, [r7, #24]
 8004ad8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004adc:	4013      	ands	r3, r2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d035      	beq.n	8004b4e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	091b      	lsrs	r3, r3, #4
 8004aea:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004aec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	461a      	mov	r2, r3
 8004af4:	6a38      	ldr	r0, [r7, #32]
 8004af6:	f004 fb16 	bl	8009126 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	68da      	ldr	r2, [r3, #12]
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	091b      	lsrs	r3, r3, #4
 8004b02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b06:	441a      	add	r2, r3
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	699a      	ldr	r2, [r3, #24]
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	091b      	lsrs	r3, r3, #4
 8004b14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b18:	441a      	add	r2, r3
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	619a      	str	r2, [r3, #24]
 8004b1e:	e016      	b.n	8004b4e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	0c5b      	lsrs	r3, r3, #17
 8004b24:	f003 030f 	and.w	r3, r3, #15
 8004b28:	2b06      	cmp	r3, #6
 8004b2a:	d110      	bne.n	8004b4e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004b32:	2208      	movs	r2, #8
 8004b34:	4619      	mov	r1, r3
 8004b36:	6a38      	ldr	r0, [r7, #32]
 8004b38:	f004 faf5 	bl	8009126 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	699a      	ldr	r2, [r3, #24]
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	091b      	lsrs	r3, r3, #4
 8004b44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b48:	441a      	add	r2, r3
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	699a      	ldr	r2, [r3, #24]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f042 0210 	orr.w	r2, r2, #16
 8004b5c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f004 fc73 	bl	800944e <USB_ReadInterrupts>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b6e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b72:	d16e      	bne.n	8004c52 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f004 fc79 	bl	8009474 <USB_ReadDevAllOutEpInterrupt>
 8004b82:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004b84:	e062      	b.n	8004c4c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d057      	beq.n	8004c40 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b96:	b2d2      	uxtb	r2, r2
 8004b98:	4611      	mov	r1, r2
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f004 fc9e 	bl	80094dc <USB_ReadDevOutEPInterrupt>
 8004ba0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00c      	beq.n	8004bc6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bae:	015a      	lsls	r2, r3, #5
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb8:	461a      	mov	r2, r3
 8004bba:	2301      	movs	r3, #1
 8004bbc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004bbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 fdb1 	bl	8005728 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	f003 0308 	and.w	r3, r3, #8
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00c      	beq.n	8004bea <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bdc:	461a      	mov	r2, r3
 8004bde:	2308      	movs	r3, #8
 8004be0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004be2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 feab 	bl	8005940 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	f003 0310 	and.w	r3, r3, #16
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d008      	beq.n	8004c06 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c00:	461a      	mov	r2, r3
 8004c02:	2310      	movs	r3, #16
 8004c04:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	f003 0320 	and.w	r3, r3, #32
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d008      	beq.n	8004c22 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	2320      	movs	r3, #32
 8004c20:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d009      	beq.n	8004c40 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c38:	461a      	mov	r2, r3
 8004c3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c3e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c42:	3301      	adds	r3, #1
 8004c44:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c48:	085b      	lsrs	r3, r3, #1
 8004c4a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d199      	bne.n	8004b86 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f004 fbf9 	bl	800944e <USB_ReadInterrupts>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c66:	f040 80c0 	bne.w	8004dea <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f004 fc1a 	bl	80094a8 <USB_ReadDevAllInEpInterrupt>
 8004c74:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004c7a:	e0b2      	b.n	8004de2 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 80a7 	beq.w	8004dd6 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	4611      	mov	r1, r2
 8004c92:	4618      	mov	r0, r3
 8004c94:	f004 fc40 	bl	8009518 <USB_ReadDevInEPInterrupt>
 8004c98:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d057      	beq.n	8004d54 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	f003 030f 	and.w	r3, r3, #15
 8004caa:	2201      	movs	r2, #1
 8004cac:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	43db      	mvns	r3, r3
 8004cbe:	69f9      	ldr	r1, [r7, #28]
 8004cc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d132      	bne.n	8004d48 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004ce2:	6879      	ldr	r1, [r7, #4]
 8004ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	00db      	lsls	r3, r3, #3
 8004cea:	1a9b      	subs	r3, r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	440b      	add	r3, r1
 8004cf0:	3348      	adds	r3, #72	; 0x48
 8004cf2:	6819      	ldr	r1, [r3, #0]
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	1a9b      	subs	r3, r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	4403      	add	r3, r0
 8004d02:	3344      	adds	r3, #68	; 0x44
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4419      	add	r1, r3
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	1a9b      	subs	r3, r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4403      	add	r3, r0
 8004d16:	3348      	adds	r3, #72	; 0x48
 8004d18:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d113      	bne.n	8004d48 <HAL_PCD_IRQHandler+0x31c>
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d24:	4613      	mov	r3, r2
 8004d26:	00db      	lsls	r3, r3, #3
 8004d28:	1a9b      	subs	r3, r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	440b      	add	r3, r1
 8004d2e:	3350      	adds	r3, #80	; 0x50
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d108      	bne.n	8004d48 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6818      	ldr	r0, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004d40:	461a      	mov	r2, r3
 8004d42:	2101      	movs	r1, #1
 8004d44:	f004 fc48 	bl	80095d8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f007 f947 	bl	800bfe2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f003 0308 	and.w	r3, r3, #8
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d008      	beq.n	8004d70 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	015a      	lsls	r2, r3, #5
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	4413      	add	r3, r2
 8004d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	2308      	movs	r3, #8
 8004d6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	f003 0310 	and.w	r3, r3, #16
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d008      	beq.n	8004d8c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7c:	015a      	lsls	r2, r3, #5
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	4413      	add	r3, r2
 8004d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d86:	461a      	mov	r2, r3
 8004d88:	2310      	movs	r3, #16
 8004d8a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d008      	beq.n	8004da8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d98:	015a      	lsls	r2, r3, #5
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da2:	461a      	mov	r2, r3
 8004da4:	2340      	movs	r3, #64	; 0x40
 8004da6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d008      	beq.n	8004dc4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db4:	015a      	lsls	r2, r3, #5
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	4413      	add	r3, r2
 8004dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004dce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 fc1b 	bl	800560c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd8:	3301      	adds	r3, #1
 8004dda:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dde:	085b      	lsrs	r3, r3, #1
 8004de0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f47f af49 	bne.w	8004c7c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f004 fb2d 	bl	800944e <USB_ReadInterrupts>
 8004df4:	4603      	mov	r3, r0
 8004df6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dfe:	d122      	bne.n	8004e46 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	69fa      	ldr	r2, [r7, #28]
 8004e0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e0e:	f023 0301 	bic.w	r3, r3, #1
 8004e12:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d108      	bne.n	8004e30 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004e26:	2100      	movs	r1, #0
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 fe27 	bl	8005a7c <HAL_PCDEx_LPM_Callback>
 8004e2e:	e002      	b.n	8004e36 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f007 f94d 	bl	800c0d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	695a      	ldr	r2, [r3, #20]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004e44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f004 faff 	bl	800944e <USB_ReadInterrupts>
 8004e50:	4603      	mov	r3, r0
 8004e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e5a:	d112      	bne.n	8004e82 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d102      	bne.n	8004e72 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f007 f909 	bl	800c084 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	695a      	ldr	r2, [r3, #20]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004e80:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f004 fae1 	bl	800944e <USB_ReadInterrupts>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e96:	f040 80c7 	bne.w	8005028 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	69fa      	ldr	r2, [r7, #28]
 8004ea4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ea8:	f023 0301 	bic.w	r3, r3, #1
 8004eac:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2110      	movs	r1, #16
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f003 fb7b 	bl	80085b0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004eba:	2300      	movs	r3, #0
 8004ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ebe:	e056      	b.n	8004f6e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ecc:	461a      	mov	r2, r3
 8004ece:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ed2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed6:	015a      	lsls	r2, r3, #5
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	4413      	add	r3, r2
 8004edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ee4:	0151      	lsls	r1, r2, #5
 8004ee6:	69fa      	ldr	r2, [r7, #28]
 8004ee8:	440a      	add	r2, r1
 8004eea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ef2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef6:	015a      	lsls	r2, r3, #5
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f04:	0151      	lsls	r1, r2, #5
 8004f06:	69fa      	ldr	r2, [r7, #28]
 8004f08:	440a      	add	r2, r1
 8004f0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f12:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f16:	015a      	lsls	r2, r3, #5
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f20:	461a      	mov	r2, r3
 8004f22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f26:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f2a:	015a      	lsls	r2, r3, #5
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f38:	0151      	lsls	r1, r2, #5
 8004f3a:	69fa      	ldr	r2, [r7, #28]
 8004f3c:	440a      	add	r2, r1
 8004f3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f46:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4a:	015a      	lsls	r2, r3, #5
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	4413      	add	r3, r2
 8004f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f58:	0151      	lsls	r1, r2, #5
 8004f5a:	69fa      	ldr	r2, [r7, #28]
 8004f5c:	440a      	add	r2, r1
 8004f5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f66:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d3a3      	bcc.n	8004ec0 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f7e:	69db      	ldr	r3, [r3, #28]
 8004f80:	69fa      	ldr	r2, [r7, #28]
 8004f82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f86:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004f8a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d016      	beq.n	8004fc2 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f9e:	69fa      	ldr	r2, [r7, #28]
 8004fa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fa4:	f043 030b 	orr.w	r3, r3, #11
 8004fa8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb4:	69fa      	ldr	r2, [r7, #28]
 8004fb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fba:	f043 030b 	orr.w	r3, r3, #11
 8004fbe:	6453      	str	r3, [r2, #68]	; 0x44
 8004fc0:	e015      	b.n	8004fee <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	69fa      	ldr	r2, [r7, #28]
 8004fcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fd0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004fd4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004fd8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	69fa      	ldr	r2, [r7, #28]
 8004fe4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fe8:	f043 030b 	orr.w	r3, r3, #11
 8004fec:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69fa      	ldr	r2, [r7, #28]
 8004ff8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ffc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005000:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6818      	ldr	r0, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005012:	461a      	mov	r2, r3
 8005014:	f004 fae0 	bl	80095d8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	695a      	ldr	r2, [r3, #20]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005026:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4618      	mov	r0, r3
 800502e:	f004 fa0e 	bl	800944e <USB_ReadInterrupts>
 8005032:	4603      	mov	r3, r0
 8005034:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005038:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800503c:	d124      	bne.n	8005088 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4618      	mov	r0, r3
 8005044:	f004 faa4 	bl	8009590 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4618      	mov	r0, r3
 800504e:	f003 fb0c 	bl	800866a <USB_GetDevSpeed>
 8005052:	4603      	mov	r3, r0
 8005054:	461a      	mov	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681c      	ldr	r4, [r3, #0]
 800505e:	f001 f957 	bl	8006310 <HAL_RCC_GetHCLKFreq>
 8005062:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005068:	b2db      	uxtb	r3, r3
 800506a:	461a      	mov	r2, r3
 800506c:	4620      	mov	r0, r4
 800506e:	f003 f82b 	bl	80080c8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f006 ffdd 	bl	800c032 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	695a      	ldr	r2, [r3, #20]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005086:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4618      	mov	r0, r3
 800508e:	f004 f9de 	bl	800944e <USB_ReadInterrupts>
 8005092:	4603      	mov	r3, r0
 8005094:	f003 0308 	and.w	r3, r3, #8
 8005098:	2b08      	cmp	r3, #8
 800509a:	d10a      	bne.n	80050b2 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f006 ffba 	bl	800c016 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	695a      	ldr	r2, [r3, #20]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f002 0208 	and.w	r2, r2, #8
 80050b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f004 f9c9 	bl	800944e <USB_ReadInterrupts>
 80050bc:	4603      	mov	r3, r0
 80050be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050c6:	d10f      	bne.n	80050e8 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	4619      	mov	r1, r3
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f007 f81c 	bl	800c110 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	695a      	ldr	r2, [r3, #20]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80050e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4618      	mov	r0, r3
 80050ee:	f004 f9ae 	bl	800944e <USB_ReadInterrupts>
 80050f2:	4603      	mov	r3, r0
 80050f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050fc:	d10f      	bne.n	800511e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80050fe:	2300      	movs	r3, #0
 8005100:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	b2db      	uxtb	r3, r3
 8005106:	4619      	mov	r1, r3
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f006 ffef 	bl	800c0ec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	695a      	ldr	r2, [r3, #20]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800511c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4618      	mov	r0, r3
 8005124:	f004 f993 	bl	800944e <USB_ReadInterrupts>
 8005128:	4603      	mov	r3, r0
 800512a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800512e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005132:	d10a      	bne.n	800514a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f006 fffd 	bl	800c134 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	695a      	ldr	r2, [r3, #20]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005148:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4618      	mov	r0, r3
 8005150:	f004 f97d 	bl	800944e <USB_ReadInterrupts>
 8005154:	4603      	mov	r3, r0
 8005156:	f003 0304 	and.w	r3, r3, #4
 800515a:	2b04      	cmp	r3, #4
 800515c:	d115      	bne.n	800518a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b00      	cmp	r3, #0
 800516e:	d002      	beq.n	8005176 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f006 ffed 	bl	800c150 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6859      	ldr	r1, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	430a      	orrs	r2, r1
 8005184:	605a      	str	r2, [r3, #4]
 8005186:	e000      	b.n	800518a <HAL_PCD_IRQHandler+0x75e>
      return;
 8005188:	bf00      	nop
    }
  }
}
 800518a:	3734      	adds	r7, #52	; 0x34
 800518c:	46bd      	mov	sp, r7
 800518e:	bd90      	pop	{r4, r7, pc}

08005190 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	460b      	mov	r3, r1
 800519a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d101      	bne.n	80051aa <HAL_PCD_SetAddress+0x1a>
 80051a6:	2302      	movs	r3, #2
 80051a8:	e013      	b.n	80051d2 <HAL_PCD_SetAddress+0x42>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	78fa      	ldrb	r2, [r7, #3]
 80051b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	78fa      	ldrb	r2, [r7, #3]
 80051c0:	4611      	mov	r1, r2
 80051c2:	4618      	mov	r0, r3
 80051c4:	f004 f8db 	bl	800937e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3708      	adds	r7, #8
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b084      	sub	sp, #16
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
 80051e2:	4608      	mov	r0, r1
 80051e4:	4611      	mov	r1, r2
 80051e6:	461a      	mov	r2, r3
 80051e8:	4603      	mov	r3, r0
 80051ea:	70fb      	strb	r3, [r7, #3]
 80051ec:	460b      	mov	r3, r1
 80051ee:	803b      	strh	r3, [r7, #0]
 80051f0:	4613      	mov	r3, r2
 80051f2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80051f4:	2300      	movs	r3, #0
 80051f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80051f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	da0f      	bge.n	8005220 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005200:	78fb      	ldrb	r3, [r7, #3]
 8005202:	f003 020f 	and.w	r2, r3, #15
 8005206:	4613      	mov	r3, r2
 8005208:	00db      	lsls	r3, r3, #3
 800520a:	1a9b      	subs	r3, r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	3338      	adds	r3, #56	; 0x38
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	4413      	add	r3, r2
 8005214:	3304      	adds	r3, #4
 8005216:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2201      	movs	r2, #1
 800521c:	705a      	strb	r2, [r3, #1]
 800521e:	e00f      	b.n	8005240 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005220:	78fb      	ldrb	r3, [r7, #3]
 8005222:	f003 020f 	and.w	r2, r3, #15
 8005226:	4613      	mov	r3, r2
 8005228:	00db      	lsls	r3, r3, #3
 800522a:	1a9b      	subs	r3, r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	4413      	add	r3, r2
 8005236:	3304      	adds	r3, #4
 8005238:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005240:	78fb      	ldrb	r3, [r7, #3]
 8005242:	f003 030f 	and.w	r3, r3, #15
 8005246:	b2da      	uxtb	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800524c:	883a      	ldrh	r2, [r7, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	78ba      	ldrb	r2, [r7, #2]
 8005256:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	785b      	ldrb	r3, [r3, #1]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d004      	beq.n	800526a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	b29a      	uxth	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800526a:	78bb      	ldrb	r3, [r7, #2]
 800526c:	2b02      	cmp	r3, #2
 800526e:	d102      	bne.n	8005276 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800527c:	2b01      	cmp	r3, #1
 800527e:	d101      	bne.n	8005284 <HAL_PCD_EP_Open+0xaa>
 8005280:	2302      	movs	r3, #2
 8005282:	e00e      	b.n	80052a2 <HAL_PCD_EP_Open+0xc8>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68f9      	ldr	r1, [r7, #12]
 8005292:	4618      	mov	r0, r3
 8005294:	f003 fa0e 	bl	80086b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80052a0:	7afb      	ldrb	r3, [r7, #11]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b084      	sub	sp, #16
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	460b      	mov	r3, r1
 80052b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80052b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	da0f      	bge.n	80052de <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052be:	78fb      	ldrb	r3, [r7, #3]
 80052c0:	f003 020f 	and.w	r2, r3, #15
 80052c4:	4613      	mov	r3, r2
 80052c6:	00db      	lsls	r3, r3, #3
 80052c8:	1a9b      	subs	r3, r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	3338      	adds	r3, #56	; 0x38
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	4413      	add	r3, r2
 80052d2:	3304      	adds	r3, #4
 80052d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2201      	movs	r2, #1
 80052da:	705a      	strb	r2, [r3, #1]
 80052dc:	e00f      	b.n	80052fe <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052de:	78fb      	ldrb	r3, [r7, #3]
 80052e0:	f003 020f 	and.w	r2, r3, #15
 80052e4:	4613      	mov	r3, r2
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	1a9b      	subs	r3, r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	4413      	add	r3, r2
 80052f4:	3304      	adds	r3, #4
 80052f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80052fe:	78fb      	ldrb	r3, [r7, #3]
 8005300:	f003 030f 	and.w	r3, r3, #15
 8005304:	b2da      	uxtb	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005310:	2b01      	cmp	r3, #1
 8005312:	d101      	bne.n	8005318 <HAL_PCD_EP_Close+0x6e>
 8005314:	2302      	movs	r3, #2
 8005316:	e00e      	b.n	8005336 <HAL_PCD_EP_Close+0x8c>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68f9      	ldr	r1, [r7, #12]
 8005326:	4618      	mov	r0, r3
 8005328:	f003 fa4c 	bl	80087c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b086      	sub	sp, #24
 8005342:	af00      	add	r7, sp, #0
 8005344:	60f8      	str	r0, [r7, #12]
 8005346:	607a      	str	r2, [r7, #4]
 8005348:	603b      	str	r3, [r7, #0]
 800534a:	460b      	mov	r3, r1
 800534c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800534e:	7afb      	ldrb	r3, [r7, #11]
 8005350:	f003 020f 	and.w	r2, r3, #15
 8005354:	4613      	mov	r3, r2
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	1a9b      	subs	r3, r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	4413      	add	r3, r2
 8005364:	3304      	adds	r3, #4
 8005366:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	2200      	movs	r2, #0
 8005378:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	2200      	movs	r2, #0
 800537e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005380:	7afb      	ldrb	r3, [r7, #11]
 8005382:	f003 030f 	and.w	r3, r3, #15
 8005386:	b2da      	uxtb	r2, r3
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d102      	bne.n	800539a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800539a:	7afb      	ldrb	r3, [r7, #11]
 800539c:	f003 030f 	and.w	r3, r3, #15
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d109      	bne.n	80053b8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6818      	ldr	r0, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	461a      	mov	r2, r3
 80053b0:	6979      	ldr	r1, [r7, #20]
 80053b2:	f003 fd27 	bl	8008e04 <USB_EP0StartXfer>
 80053b6:	e008      	b.n	80053ca <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6818      	ldr	r0, [r3, #0]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	461a      	mov	r2, r3
 80053c4:	6979      	ldr	r1, [r7, #20]
 80053c6:	f003 fad9 	bl	800897c <USB_EPStartXfer>
  }

  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3718      	adds	r7, #24
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	460b      	mov	r3, r1
 80053de:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80053e0:	78fb      	ldrb	r3, [r7, #3]
 80053e2:	f003 020f 	and.w	r2, r3, #15
 80053e6:	6879      	ldr	r1, [r7, #4]
 80053e8:	4613      	mov	r3, r2
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	1a9b      	subs	r3, r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	440b      	add	r3, r1
 80053f2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80053f6:	681b      	ldr	r3, [r3, #0]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	607a      	str	r2, [r7, #4]
 800540e:	603b      	str	r3, [r7, #0]
 8005410:	460b      	mov	r3, r1
 8005412:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005414:	7afb      	ldrb	r3, [r7, #11]
 8005416:	f003 020f 	and.w	r2, r3, #15
 800541a:	4613      	mov	r3, r2
 800541c:	00db      	lsls	r3, r3, #3
 800541e:	1a9b      	subs	r3, r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	3338      	adds	r3, #56	; 0x38
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	4413      	add	r3, r2
 8005428:	3304      	adds	r3, #4
 800542a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	2200      	movs	r2, #0
 800543c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	2201      	movs	r2, #1
 8005442:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005444:	7afb      	ldrb	r3, [r7, #11]
 8005446:	f003 030f 	and.w	r3, r3, #15
 800544a:	b2da      	uxtb	r2, r3
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d102      	bne.n	800545e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800545e:	7afb      	ldrb	r3, [r7, #11]
 8005460:	f003 030f 	and.w	r3, r3, #15
 8005464:	2b00      	cmp	r3, #0
 8005466:	d109      	bne.n	800547c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6818      	ldr	r0, [r3, #0]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	b2db      	uxtb	r3, r3
 8005472:	461a      	mov	r2, r3
 8005474:	6979      	ldr	r1, [r7, #20]
 8005476:	f003 fcc5 	bl	8008e04 <USB_EP0StartXfer>
 800547a:	e008      	b.n	800548e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6818      	ldr	r0, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	b2db      	uxtb	r3, r3
 8005486:	461a      	mov	r2, r3
 8005488:	6979      	ldr	r1, [r7, #20]
 800548a:	f003 fa77 	bl	800897c <USB_EPStartXfer>
  }

  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3718      	adds	r7, #24
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	460b      	mov	r3, r1
 80054a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80054a4:	78fb      	ldrb	r3, [r7, #3]
 80054a6:	f003 020f 	and.w	r2, r3, #15
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d901      	bls.n	80054b6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e050      	b.n	8005558 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80054b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	da0f      	bge.n	80054de <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054be:	78fb      	ldrb	r3, [r7, #3]
 80054c0:	f003 020f 	and.w	r2, r3, #15
 80054c4:	4613      	mov	r3, r2
 80054c6:	00db      	lsls	r3, r3, #3
 80054c8:	1a9b      	subs	r3, r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	3338      	adds	r3, #56	; 0x38
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	4413      	add	r3, r2
 80054d2:	3304      	adds	r3, #4
 80054d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2201      	movs	r2, #1
 80054da:	705a      	strb	r2, [r3, #1]
 80054dc:	e00d      	b.n	80054fa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80054de:	78fa      	ldrb	r2, [r7, #3]
 80054e0:	4613      	mov	r3, r2
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	1a9b      	subs	r3, r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	4413      	add	r3, r2
 80054f0:	3304      	adds	r3, #4
 80054f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2201      	movs	r2, #1
 80054fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005500:	78fb      	ldrb	r3, [r7, #3]
 8005502:	f003 030f 	and.w	r3, r3, #15
 8005506:	b2da      	uxtb	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005512:	2b01      	cmp	r3, #1
 8005514:	d101      	bne.n	800551a <HAL_PCD_EP_SetStall+0x82>
 8005516:	2302      	movs	r3, #2
 8005518:	e01e      	b.n	8005558 <HAL_PCD_EP_SetStall+0xc0>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68f9      	ldr	r1, [r7, #12]
 8005528:	4618      	mov	r0, r3
 800552a:	f003 fe54 	bl	80091d6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800552e:	78fb      	ldrb	r3, [r7, #3]
 8005530:	f003 030f 	and.w	r3, r3, #15
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10a      	bne.n	800554e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6818      	ldr	r0, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	b2d9      	uxtb	r1, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005548:	461a      	mov	r2, r3
 800554a:	f004 f845 	bl	80095d8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	460b      	mov	r3, r1
 800556a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800556c:	78fb      	ldrb	r3, [r7, #3]
 800556e:	f003 020f 	and.w	r2, r3, #15
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	429a      	cmp	r2, r3
 8005578:	d901      	bls.n	800557e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e042      	b.n	8005604 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800557e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005582:	2b00      	cmp	r3, #0
 8005584:	da0f      	bge.n	80055a6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005586:	78fb      	ldrb	r3, [r7, #3]
 8005588:	f003 020f 	and.w	r2, r3, #15
 800558c:	4613      	mov	r3, r2
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	1a9b      	subs	r3, r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	3338      	adds	r3, #56	; 0x38
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	4413      	add	r3, r2
 800559a:	3304      	adds	r3, #4
 800559c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2201      	movs	r2, #1
 80055a2:	705a      	strb	r2, [r3, #1]
 80055a4:	e00f      	b.n	80055c6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055a6:	78fb      	ldrb	r3, [r7, #3]
 80055a8:	f003 020f 	and.w	r2, r3, #15
 80055ac:	4613      	mov	r3, r2
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	1a9b      	subs	r3, r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	4413      	add	r3, r2
 80055bc:	3304      	adds	r3, #4
 80055be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055cc:	78fb      	ldrb	r3, [r7, #3]
 80055ce:	f003 030f 	and.w	r3, r3, #15
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d101      	bne.n	80055e6 <HAL_PCD_EP_ClrStall+0x86>
 80055e2:	2302      	movs	r3, #2
 80055e4:	e00e      	b.n	8005604 <HAL_PCD_EP_ClrStall+0xa4>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68f9      	ldr	r1, [r7, #12]
 80055f4:	4618      	mov	r0, r3
 80055f6:	f003 fe5c 	bl	80092b2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b08a      	sub	sp, #40	; 0x28
 8005610:	af02      	add	r7, sp, #8
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	4613      	mov	r3, r2
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	1a9b      	subs	r3, r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	3338      	adds	r3, #56	; 0x38
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	4413      	add	r3, r2
 8005630:	3304      	adds	r3, #4
 8005632:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	699a      	ldr	r2, [r3, #24]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	429a      	cmp	r2, r3
 800563e:	d901      	bls.n	8005644 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e06c      	b.n	800571e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	695a      	ldr	r2, [r3, #20]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	69fa      	ldr	r2, [r7, #28]
 8005656:	429a      	cmp	r2, r3
 8005658:	d902      	bls.n	8005660 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	3303      	adds	r3, #3
 8005664:	089b      	lsrs	r3, r3, #2
 8005666:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005668:	e02b      	b.n	80056c2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	695a      	ldr	r2, [r3, #20]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	69fa      	ldr	r2, [r7, #28]
 800567c:	429a      	cmp	r2, r3
 800567e:	d902      	bls.n	8005686 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	3303      	adds	r3, #3
 800568a:	089b      	lsrs	r3, r3, #2
 800568c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	68d9      	ldr	r1, [r3, #12]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	b2da      	uxtb	r2, r3
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	4603      	mov	r3, r0
 80056a4:	6978      	ldr	r0, [r7, #20]
 80056a6:	f003 fd00 	bl	80090aa <USB_WritePacket>

    ep->xfer_buff  += len;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	68da      	ldr	r2, [r3, #12]
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	441a      	add	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	699a      	ldr	r2, [r3, #24]
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	441a      	add	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	015a      	lsls	r2, r3, #5
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	4413      	add	r3, r2
 80056ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	69ba      	ldr	r2, [r7, #24]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d809      	bhi.n	80056ec <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	699a      	ldr	r2, [r3, #24]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d203      	bcs.n	80056ec <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	695b      	ldr	r3, [r3, #20]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1be      	bne.n	800566a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	695a      	ldr	r2, [r3, #20]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d811      	bhi.n	800571c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	f003 030f 	and.w	r3, r3, #15
 80056fe:	2201      	movs	r2, #1
 8005700:	fa02 f303 	lsl.w	r3, r2, r3
 8005704:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800570c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	43db      	mvns	r3, r3
 8005712:	6939      	ldr	r1, [r7, #16]
 8005714:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005718:	4013      	ands	r3, r2
 800571a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3720      	adds	r7, #32
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
	...

08005728 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	333c      	adds	r3, #60	; 0x3c
 8005740:	3304      	adds	r3, #4
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	015a      	lsls	r2, r3, #5
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	4413      	add	r3, r2
 800574e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	2b01      	cmp	r3, #1
 800575c:	f040 80a0 	bne.w	80058a0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	f003 0308 	and.w	r3, r3, #8
 8005766:	2b00      	cmp	r3, #0
 8005768:	d015      	beq.n	8005796 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	4a72      	ldr	r2, [pc, #456]	; (8005938 <PCD_EP_OutXfrComplete_int+0x210>)
 800576e:	4293      	cmp	r3, r2
 8005770:	f240 80dd 	bls.w	800592e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800577a:	2b00      	cmp	r3, #0
 800577c:	f000 80d7 	beq.w	800592e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	4413      	add	r3, r2
 8005788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800578c:	461a      	mov	r2, r3
 800578e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005792:	6093      	str	r3, [r2, #8]
 8005794:	e0cb      	b.n	800592e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	f003 0320 	and.w	r3, r3, #32
 800579c:	2b00      	cmp	r3, #0
 800579e:	d009      	beq.n	80057b4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ac:	461a      	mov	r2, r3
 80057ae:	2320      	movs	r3, #32
 80057b0:	6093      	str	r3, [r2, #8]
 80057b2:	e0bc      	b.n	800592e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f040 80b7 	bne.w	800592e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4a5d      	ldr	r2, [pc, #372]	; (8005938 <PCD_EP_OutXfrComplete_int+0x210>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d90f      	bls.n	80057e8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057de:	461a      	mov	r2, r3
 80057e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057e4:	6093      	str	r3, [r2, #8]
 80057e6:	e0a2      	b.n	800592e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80057e8:	6879      	ldr	r1, [r7, #4]
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	4613      	mov	r3, r2
 80057ee:	00db      	lsls	r3, r3, #3
 80057f0:	1a9b      	subs	r3, r3, r2
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	440b      	add	r3, r1
 80057f6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80057fa:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	0159      	lsls	r1, r3, #5
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	440b      	add	r3, r1
 8005804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800580e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	4613      	mov	r3, r2
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	1a9b      	subs	r3, r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4403      	add	r3, r0
 800581e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005822:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005824:	6879      	ldr	r1, [r7, #4]
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	4613      	mov	r3, r2
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	1a9b      	subs	r3, r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	440b      	add	r3, r1
 8005832:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005836:	6819      	ldr	r1, [r3, #0]
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	4613      	mov	r3, r2
 800583e:	00db      	lsls	r3, r3, #3
 8005840:	1a9b      	subs	r3, r3, r2
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	4403      	add	r3, r0
 8005846:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4419      	add	r1, r3
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	683a      	ldr	r2, [r7, #0]
 8005852:	4613      	mov	r3, r2
 8005854:	00db      	lsls	r3, r3, #3
 8005856:	1a9b      	subs	r3, r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4403      	add	r3, r0
 800585c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005860:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d114      	bne.n	8005892 <PCD_EP_OutXfrComplete_int+0x16a>
 8005868:	6879      	ldr	r1, [r7, #4]
 800586a:	683a      	ldr	r2, [r7, #0]
 800586c:	4613      	mov	r3, r2
 800586e:	00db      	lsls	r3, r3, #3
 8005870:	1a9b      	subs	r3, r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	440b      	add	r3, r1
 8005876:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d108      	bne.n	8005892 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6818      	ldr	r0, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800588a:	461a      	mov	r2, r3
 800588c:	2101      	movs	r1, #1
 800588e:	f003 fea3 	bl	80095d8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	b2db      	uxtb	r3, r3
 8005896:	4619      	mov	r1, r3
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f006 fb87 	bl	800bfac <HAL_PCD_DataOutStageCallback>
 800589e:	e046      	b.n	800592e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4a26      	ldr	r2, [pc, #152]	; (800593c <PCD_EP_OutXfrComplete_int+0x214>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d124      	bne.n	80058f2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00a      	beq.n	80058c8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	015a      	lsls	r2, r3, #5
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	4413      	add	r3, r2
 80058ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058be:	461a      	mov	r2, r3
 80058c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058c4:	6093      	str	r3, [r2, #8]
 80058c6:	e032      	b.n	800592e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	f003 0320 	and.w	r3, r3, #32
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d008      	beq.n	80058e4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	015a      	lsls	r2, r3, #5
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	4413      	add	r3, r2
 80058da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058de:	461a      	mov	r2, r3
 80058e0:	2320      	movs	r3, #32
 80058e2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	4619      	mov	r1, r3
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f006 fb5e 	bl	800bfac <HAL_PCD_DataOutStageCallback>
 80058f0:	e01d      	b.n	800592e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d114      	bne.n	8005922 <PCD_EP_OutXfrComplete_int+0x1fa>
 80058f8:	6879      	ldr	r1, [r7, #4]
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	4613      	mov	r3, r2
 80058fe:	00db      	lsls	r3, r3, #3
 8005900:	1a9b      	subs	r3, r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	440b      	add	r3, r1
 8005906:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d108      	bne.n	8005922 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6818      	ldr	r0, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800591a:	461a      	mov	r2, r3
 800591c:	2100      	movs	r1, #0
 800591e:	f003 fe5b 	bl	80095d8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	b2db      	uxtb	r3, r3
 8005926:	4619      	mov	r1, r3
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f006 fb3f 	bl	800bfac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3718      	adds	r7, #24
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	4f54300a 	.word	0x4f54300a
 800593c:	4f54310a 	.word	0x4f54310a

08005940 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	333c      	adds	r3, #60	; 0x3c
 8005958:	3304      	adds	r3, #4
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	015a      	lsls	r2, r3, #5
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	4413      	add	r3, r2
 8005966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	4a15      	ldr	r2, [pc, #84]	; (80059c8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d90e      	bls.n	8005994 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800597c:	2b00      	cmp	r3, #0
 800597e:	d009      	beq.n	8005994 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	4413      	add	r3, r2
 8005988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800598c:	461a      	mov	r2, r3
 800598e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005992:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f006 faf7 	bl	800bf88 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	4a0a      	ldr	r2, [pc, #40]	; (80059c8 <PCD_EP_OutSetupPacket_int+0x88>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d90c      	bls.n	80059bc <PCD_EP_OutSetupPacket_int+0x7c>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d108      	bne.n	80059bc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6818      	ldr	r0, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80059b4:	461a      	mov	r2, r3
 80059b6:	2101      	movs	r1, #1
 80059b8:	f003 fe0e 	bl	80095d8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3718      	adds	r7, #24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	4f54300a 	.word	0x4f54300a

080059cc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	460b      	mov	r3, r1
 80059d6:	70fb      	strb	r3, [r7, #3]
 80059d8:	4613      	mov	r3, r2
 80059da:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80059e4:	78fb      	ldrb	r3, [r7, #3]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d107      	bne.n	80059fa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80059ea:	883b      	ldrh	r3, [r7, #0]
 80059ec:	0419      	lsls	r1, r3, #16
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	430a      	orrs	r2, r1
 80059f6:	629a      	str	r2, [r3, #40]	; 0x28
 80059f8:	e028      	b.n	8005a4c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a00:	0c1b      	lsrs	r3, r3, #16
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	4413      	add	r3, r2
 8005a06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005a08:	2300      	movs	r3, #0
 8005a0a:	73fb      	strb	r3, [r7, #15]
 8005a0c:	e00d      	b.n	8005a2a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	7bfb      	ldrb	r3, [r7, #15]
 8005a14:	3340      	adds	r3, #64	; 0x40
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	0c1b      	lsrs	r3, r3, #16
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	4413      	add	r3, r2
 8005a22:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005a24:	7bfb      	ldrb	r3, [r7, #15]
 8005a26:	3301      	adds	r3, #1
 8005a28:	73fb      	strb	r3, [r7, #15]
 8005a2a:	7bfa      	ldrb	r2, [r7, #15]
 8005a2c:	78fb      	ldrb	r3, [r7, #3]
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d3ec      	bcc.n	8005a0e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005a34:	883b      	ldrh	r3, [r7, #0]
 8005a36:	0418      	lsls	r0, r3, #16
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6819      	ldr	r1, [r3, #0]
 8005a3c:	78fb      	ldrb	r3, [r7, #3]
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	4302      	orrs	r2, r0
 8005a44:	3340      	adds	r3, #64	; 0x40
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	440b      	add	r3, r1
 8005a4a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b083      	sub	sp, #12
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
 8005a62:	460b      	mov	r3, r1
 8005a64:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	887a      	ldrh	r2, [r7, #2]
 8005a6c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	460b      	mov	r3, r1
 8005a86:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d101      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e264      	b.n	8005f70 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d075      	beq.n	8005b9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ab2:	4ba3      	ldr	r3, [pc, #652]	; (8005d40 <HAL_RCC_OscConfig+0x2ac>)
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f003 030c 	and.w	r3, r3, #12
 8005aba:	2b04      	cmp	r3, #4
 8005abc:	d00c      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005abe:	4ba0      	ldr	r3, [pc, #640]	; (8005d40 <HAL_RCC_OscConfig+0x2ac>)
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ac6:	2b08      	cmp	r3, #8
 8005ac8:	d112      	bne.n	8005af0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005aca:	4b9d      	ldr	r3, [pc, #628]	; (8005d40 <HAL_RCC_OscConfig+0x2ac>)
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ad2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ad6:	d10b      	bne.n	8005af0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ad8:	4b99      	ldr	r3, [pc, #612]	; (8005d40 <HAL_RCC_OscConfig+0x2ac>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d05b      	beq.n	8005b9c <HAL_RCC_OscConfig+0x108>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d157      	bne.n	8005b9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e23f      	b.n	8005f70 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005af8:	d106      	bne.n	8005b08 <HAL_RCC_OscConfig+0x74>
 8005afa:	4b91      	ldr	r3, [pc, #580]	; (8005d40 <HAL_RCC_OscConfig+0x2ac>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a90      	ldr	r2, [pc, #576]	; (8005d40 <HAL_RCC_OscConfig+0x2ac>)
 8005b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b04:	6013      	str	r3, [r2, #0]
 8005b06:	e01d      	b.n	8005b44 <HAL_RCC_OscConfig+0xb0>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b10:	d10c      	bne.n	8005b2c <HAL_RCC_OscConfig+0x98>
 8005b12:	4b8b      	ldr	r3, [pc, #556]	; (8005d40 <HAL_RCC_OscConfig+0x2ac>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a8a      	ldr	r2, [pc, #552]	; (8005d40 <HAL_RCC_OscConfig+0x2ac>)
 8005b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b1c:	6013      	str	r3, [r2, #0]
 8005b1e:	4b88      	ldr	r3, [pc, #544]	; (8005d40 <HAL_RCC_OscConfig+0x2ac>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a87      	ldr	r2, [pc, #540]	; (8005d40 <HAL_RCC_OscConfig+0x2ac>)
 8005b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b28:	6013      	str	r3, [r2, #0]
 8005b2a:	e00b      	b.n	8005b44 <HAL_RCC_OscConfig+0xb0>
 8005b2c:	4b84      	ldr	r3, [pc, #528]	; (8005d40 <HAL_RCC_OscConfig+0x2ac>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a83      	ldr	r2, [pc, #524]	; (8005d40 <HAL_RCC_OscConfig+0x2ac>)
 8005b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b36:	6013      	str	r3, [r2, #0]
 8005b38:	4b81      	ldr	r3, [pc, #516]	; (8005d40 <HAL_RCC_OscConfig+0x2ac>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a80      	ldr	r2, [pc, #512]	; (8005d40 <HAL_RCC_OscConfig+0x2ac>)
 8005b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d013      	beq.n	8005b74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b4c:	f7fd f838 	bl	8002bc0 <HAL_GetTick>
 8005b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b52:	e008      	b.n	8005b66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b54:	f7fd f834 	bl	8002bc0 <HAL_GetTick>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	2b64      	cmp	r3, #100	; 0x64
 8005b60:	d901      	bls.n	8005b66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e204      	b.n	8005f70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b66:	4b76      	ldr	r3, [pc, #472]	; (8005d40 <HAL_RCC_OscConfig+0x2ac>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d0f0      	beq.n	8005b54 <HAL_RCC_OscConfig+0xc0>
 8005b72:	e014      	b.n	8005b9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b74:	f7fd f824 	bl	8002bc0 <HAL_GetTick>
 8005b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b7a:	e008      	b.n	8005b8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b7c:	f7fd f820 	bl	8002bc0 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	2b64      	cmp	r3, #100	; 0x64
 8005b88:	d901      	bls.n	8005b8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e1f0      	b.n	8005f70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b8e:	4b6c      	ldr	r3, [pc, #432]	; (8005d40 <HAL_RCC_OscConfig+0x2ac>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1f0      	bne.n	8005b7c <HAL_RCC_OscConfig+0xe8>
 8005b9a:	e000      	b.n	8005b9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0302 	and.w	r3, r3, #2
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d063      	beq.n	8005c72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005baa:	4b65      	ldr	r3, [pc, #404]	; (8005d40 <HAL_RCC_OscConfig+0x2ac>)
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f003 030c 	and.w	r3, r3, #12
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00b      	beq.n	8005bce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bb6:	4b62      	ldr	r3, [pc, #392]	; (8005d40 <HAL_RCC_OscConfig+0x2ac>)
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005bbe:	2b08      	cmp	r3, #8
 8005bc0:	d11c      	bne.n	8005bfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bc2:	4b5f      	ldr	r3, [pc, #380]	; (8005d40 <HAL_RCC_OscConfig+0x2ac>)
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d116      	bne.n	8005bfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bce:	4b5c      	ldr	r3, [pc, #368]	; (8005d40 <HAL_RCC_OscConfig+0x2ac>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d005      	beq.n	8005be6 <HAL_RCC_OscConfig+0x152>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d001      	beq.n	8005be6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e1c4      	b.n	8005f70 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005be6:	4b56      	ldr	r3, [pc, #344]	; (8005d40 <HAL_RCC_OscConfig+0x2ac>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	4952      	ldr	r1, [pc, #328]	; (8005d40 <HAL_RCC_OscConfig+0x2ac>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bfa:	e03a      	b.n	8005c72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d020      	beq.n	8005c46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c04:	4b4f      	ldr	r3, [pc, #316]	; (8005d44 <HAL_RCC_OscConfig+0x2b0>)
 8005c06:	2201      	movs	r2, #1
 8005c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c0a:	f7fc ffd9 	bl	8002bc0 <HAL_GetTick>
 8005c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c10:	e008      	b.n	8005c24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c12:	f7fc ffd5 	bl	8002bc0 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d901      	bls.n	8005c24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e1a5      	b.n	8005f70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c24:	4b46      	ldr	r3, [pc, #280]	; (8005d40 <HAL_RCC_OscConfig+0x2ac>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d0f0      	beq.n	8005c12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c30:	4b43      	ldr	r3, [pc, #268]	; (8005d40 <HAL_RCC_OscConfig+0x2ac>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	00db      	lsls	r3, r3, #3
 8005c3e:	4940      	ldr	r1, [pc, #256]	; (8005d40 <HAL_RCC_OscConfig+0x2ac>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	600b      	str	r3, [r1, #0]
 8005c44:	e015      	b.n	8005c72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c46:	4b3f      	ldr	r3, [pc, #252]	; (8005d44 <HAL_RCC_OscConfig+0x2b0>)
 8005c48:	2200      	movs	r2, #0
 8005c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c4c:	f7fc ffb8 	bl	8002bc0 <HAL_GetTick>
 8005c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c52:	e008      	b.n	8005c66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c54:	f7fc ffb4 	bl	8002bc0 <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d901      	bls.n	8005c66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e184      	b.n	8005f70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c66:	4b36      	ldr	r3, [pc, #216]	; (8005d40 <HAL_RCC_OscConfig+0x2ac>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0302 	and.w	r3, r3, #2
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1f0      	bne.n	8005c54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0308 	and.w	r3, r3, #8
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d030      	beq.n	8005ce0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d016      	beq.n	8005cb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c86:	4b30      	ldr	r3, [pc, #192]	; (8005d48 <HAL_RCC_OscConfig+0x2b4>)
 8005c88:	2201      	movs	r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c8c:	f7fc ff98 	bl	8002bc0 <HAL_GetTick>
 8005c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c92:	e008      	b.n	8005ca6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c94:	f7fc ff94 	bl	8002bc0 <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d901      	bls.n	8005ca6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e164      	b.n	8005f70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ca6:	4b26      	ldr	r3, [pc, #152]	; (8005d40 <HAL_RCC_OscConfig+0x2ac>)
 8005ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005caa:	f003 0302 	and.w	r3, r3, #2
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d0f0      	beq.n	8005c94 <HAL_RCC_OscConfig+0x200>
 8005cb2:	e015      	b.n	8005ce0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cb4:	4b24      	ldr	r3, [pc, #144]	; (8005d48 <HAL_RCC_OscConfig+0x2b4>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cba:	f7fc ff81 	bl	8002bc0 <HAL_GetTick>
 8005cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cc0:	e008      	b.n	8005cd4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cc2:	f7fc ff7d 	bl	8002bc0 <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d901      	bls.n	8005cd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e14d      	b.n	8005f70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cd4:	4b1a      	ldr	r3, [pc, #104]	; (8005d40 <HAL_RCC_OscConfig+0x2ac>)
 8005cd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cd8:	f003 0302 	and.w	r3, r3, #2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1f0      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0304 	and.w	r3, r3, #4
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 80a0 	beq.w	8005e2e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cf2:	4b13      	ldr	r3, [pc, #76]	; (8005d40 <HAL_RCC_OscConfig+0x2ac>)
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10f      	bne.n	8005d1e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60bb      	str	r3, [r7, #8]
 8005d02:	4b0f      	ldr	r3, [pc, #60]	; (8005d40 <HAL_RCC_OscConfig+0x2ac>)
 8005d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d06:	4a0e      	ldr	r2, [pc, #56]	; (8005d40 <HAL_RCC_OscConfig+0x2ac>)
 8005d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8005d0e:	4b0c      	ldr	r3, [pc, #48]	; (8005d40 <HAL_RCC_OscConfig+0x2ac>)
 8005d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d16:	60bb      	str	r3, [r7, #8]
 8005d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d1e:	4b0b      	ldr	r3, [pc, #44]	; (8005d4c <HAL_RCC_OscConfig+0x2b8>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d121      	bne.n	8005d6e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d2a:	4b08      	ldr	r3, [pc, #32]	; (8005d4c <HAL_RCC_OscConfig+0x2b8>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a07      	ldr	r2, [pc, #28]	; (8005d4c <HAL_RCC_OscConfig+0x2b8>)
 8005d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d36:	f7fc ff43 	bl	8002bc0 <HAL_GetTick>
 8005d3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d3c:	e011      	b.n	8005d62 <HAL_RCC_OscConfig+0x2ce>
 8005d3e:	bf00      	nop
 8005d40:	40023800 	.word	0x40023800
 8005d44:	42470000 	.word	0x42470000
 8005d48:	42470e80 	.word	0x42470e80
 8005d4c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d50:	f7fc ff36 	bl	8002bc0 <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d901      	bls.n	8005d62 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e106      	b.n	8005f70 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d62:	4b85      	ldr	r3, [pc, #532]	; (8005f78 <HAL_RCC_OscConfig+0x4e4>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d0f0      	beq.n	8005d50 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d106      	bne.n	8005d84 <HAL_RCC_OscConfig+0x2f0>
 8005d76:	4b81      	ldr	r3, [pc, #516]	; (8005f7c <HAL_RCC_OscConfig+0x4e8>)
 8005d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d7a:	4a80      	ldr	r2, [pc, #512]	; (8005f7c <HAL_RCC_OscConfig+0x4e8>)
 8005d7c:	f043 0301 	orr.w	r3, r3, #1
 8005d80:	6713      	str	r3, [r2, #112]	; 0x70
 8005d82:	e01c      	b.n	8005dbe <HAL_RCC_OscConfig+0x32a>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	2b05      	cmp	r3, #5
 8005d8a:	d10c      	bne.n	8005da6 <HAL_RCC_OscConfig+0x312>
 8005d8c:	4b7b      	ldr	r3, [pc, #492]	; (8005f7c <HAL_RCC_OscConfig+0x4e8>)
 8005d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d90:	4a7a      	ldr	r2, [pc, #488]	; (8005f7c <HAL_RCC_OscConfig+0x4e8>)
 8005d92:	f043 0304 	orr.w	r3, r3, #4
 8005d96:	6713      	str	r3, [r2, #112]	; 0x70
 8005d98:	4b78      	ldr	r3, [pc, #480]	; (8005f7c <HAL_RCC_OscConfig+0x4e8>)
 8005d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d9c:	4a77      	ldr	r2, [pc, #476]	; (8005f7c <HAL_RCC_OscConfig+0x4e8>)
 8005d9e:	f043 0301 	orr.w	r3, r3, #1
 8005da2:	6713      	str	r3, [r2, #112]	; 0x70
 8005da4:	e00b      	b.n	8005dbe <HAL_RCC_OscConfig+0x32a>
 8005da6:	4b75      	ldr	r3, [pc, #468]	; (8005f7c <HAL_RCC_OscConfig+0x4e8>)
 8005da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005daa:	4a74      	ldr	r2, [pc, #464]	; (8005f7c <HAL_RCC_OscConfig+0x4e8>)
 8005dac:	f023 0301 	bic.w	r3, r3, #1
 8005db0:	6713      	str	r3, [r2, #112]	; 0x70
 8005db2:	4b72      	ldr	r3, [pc, #456]	; (8005f7c <HAL_RCC_OscConfig+0x4e8>)
 8005db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db6:	4a71      	ldr	r2, [pc, #452]	; (8005f7c <HAL_RCC_OscConfig+0x4e8>)
 8005db8:	f023 0304 	bic.w	r3, r3, #4
 8005dbc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d015      	beq.n	8005df2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dc6:	f7fc fefb 	bl	8002bc0 <HAL_GetTick>
 8005dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dcc:	e00a      	b.n	8005de4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005dce:	f7fc fef7 	bl	8002bc0 <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d901      	bls.n	8005de4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e0c5      	b.n	8005f70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005de4:	4b65      	ldr	r3, [pc, #404]	; (8005f7c <HAL_RCC_OscConfig+0x4e8>)
 8005de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de8:	f003 0302 	and.w	r3, r3, #2
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d0ee      	beq.n	8005dce <HAL_RCC_OscConfig+0x33a>
 8005df0:	e014      	b.n	8005e1c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005df2:	f7fc fee5 	bl	8002bc0 <HAL_GetTick>
 8005df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005df8:	e00a      	b.n	8005e10 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005dfa:	f7fc fee1 	bl	8002bc0 <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d901      	bls.n	8005e10 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e0af      	b.n	8005f70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e10:	4b5a      	ldr	r3, [pc, #360]	; (8005f7c <HAL_RCC_OscConfig+0x4e8>)
 8005e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e14:	f003 0302 	and.w	r3, r3, #2
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1ee      	bne.n	8005dfa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e1c:	7dfb      	ldrb	r3, [r7, #23]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d105      	bne.n	8005e2e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e22:	4b56      	ldr	r3, [pc, #344]	; (8005f7c <HAL_RCC_OscConfig+0x4e8>)
 8005e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e26:	4a55      	ldr	r2, [pc, #340]	; (8005f7c <HAL_RCC_OscConfig+0x4e8>)
 8005e28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 809b 	beq.w	8005f6e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e38:	4b50      	ldr	r3, [pc, #320]	; (8005f7c <HAL_RCC_OscConfig+0x4e8>)
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f003 030c 	and.w	r3, r3, #12
 8005e40:	2b08      	cmp	r3, #8
 8005e42:	d05c      	beq.n	8005efe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d141      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e4c:	4b4c      	ldr	r3, [pc, #304]	; (8005f80 <HAL_RCC_OscConfig+0x4ec>)
 8005e4e:	2200      	movs	r2, #0
 8005e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e52:	f7fc feb5 	bl	8002bc0 <HAL_GetTick>
 8005e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e58:	e008      	b.n	8005e6c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e5a:	f7fc feb1 	bl	8002bc0 <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d901      	bls.n	8005e6c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e081      	b.n	8005f70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e6c:	4b43      	ldr	r3, [pc, #268]	; (8005f7c <HAL_RCC_OscConfig+0x4e8>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1f0      	bne.n	8005e5a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	69da      	ldr	r2, [r3, #28]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a1b      	ldr	r3, [r3, #32]
 8005e80:	431a      	orrs	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e86:	019b      	lsls	r3, r3, #6
 8005e88:	431a      	orrs	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8e:	085b      	lsrs	r3, r3, #1
 8005e90:	3b01      	subs	r3, #1
 8005e92:	041b      	lsls	r3, r3, #16
 8005e94:	431a      	orrs	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9a:	061b      	lsls	r3, r3, #24
 8005e9c:	4937      	ldr	r1, [pc, #220]	; (8005f7c <HAL_RCC_OscConfig+0x4e8>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ea2:	4b37      	ldr	r3, [pc, #220]	; (8005f80 <HAL_RCC_OscConfig+0x4ec>)
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ea8:	f7fc fe8a 	bl	8002bc0 <HAL_GetTick>
 8005eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eae:	e008      	b.n	8005ec2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005eb0:	f7fc fe86 	bl	8002bc0 <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d901      	bls.n	8005ec2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e056      	b.n	8005f70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ec2:	4b2e      	ldr	r3, [pc, #184]	; (8005f7c <HAL_RCC_OscConfig+0x4e8>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d0f0      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x41c>
 8005ece:	e04e      	b.n	8005f6e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ed0:	4b2b      	ldr	r3, [pc, #172]	; (8005f80 <HAL_RCC_OscConfig+0x4ec>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ed6:	f7fc fe73 	bl	8002bc0 <HAL_GetTick>
 8005eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005edc:	e008      	b.n	8005ef0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ede:	f7fc fe6f 	bl	8002bc0 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d901      	bls.n	8005ef0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e03f      	b.n	8005f70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ef0:	4b22      	ldr	r3, [pc, #136]	; (8005f7c <HAL_RCC_OscConfig+0x4e8>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1f0      	bne.n	8005ede <HAL_RCC_OscConfig+0x44a>
 8005efc:	e037      	b.n	8005f6e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d101      	bne.n	8005f0a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e032      	b.n	8005f70 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f0a:	4b1c      	ldr	r3, [pc, #112]	; (8005f7c <HAL_RCC_OscConfig+0x4e8>)
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d028      	beq.n	8005f6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d121      	bne.n	8005f6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d11a      	bne.n	8005f6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f40:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d111      	bne.n	8005f6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f50:	085b      	lsrs	r3, r3, #1
 8005f52:	3b01      	subs	r3, #1
 8005f54:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d107      	bne.n	8005f6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f64:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d001      	beq.n	8005f6e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e000      	b.n	8005f70 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3718      	adds	r7, #24
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	40007000 	.word	0x40007000
 8005f7c:	40023800 	.word	0x40023800
 8005f80:	42470060 	.word	0x42470060

08005f84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d101      	bne.n	8005f98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e0cc      	b.n	8006132 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f98:	4b68      	ldr	r3, [pc, #416]	; (800613c <HAL_RCC_ClockConfig+0x1b8>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 030f 	and.w	r3, r3, #15
 8005fa0:	683a      	ldr	r2, [r7, #0]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d90c      	bls.n	8005fc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fa6:	4b65      	ldr	r3, [pc, #404]	; (800613c <HAL_RCC_ClockConfig+0x1b8>)
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	b2d2      	uxtb	r2, r2
 8005fac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fae:	4b63      	ldr	r3, [pc, #396]	; (800613c <HAL_RCC_ClockConfig+0x1b8>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 030f 	and.w	r3, r3, #15
 8005fb6:	683a      	ldr	r2, [r7, #0]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d001      	beq.n	8005fc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e0b8      	b.n	8006132 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d020      	beq.n	800600e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0304 	and.w	r3, r3, #4
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d005      	beq.n	8005fe4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fd8:	4b59      	ldr	r3, [pc, #356]	; (8006140 <HAL_RCC_ClockConfig+0x1bc>)
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	4a58      	ldr	r2, [pc, #352]	; (8006140 <HAL_RCC_ClockConfig+0x1bc>)
 8005fde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005fe2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0308 	and.w	r3, r3, #8
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d005      	beq.n	8005ffc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ff0:	4b53      	ldr	r3, [pc, #332]	; (8006140 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	4a52      	ldr	r2, [pc, #328]	; (8006140 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ffa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ffc:	4b50      	ldr	r3, [pc, #320]	; (8006140 <HAL_RCC_ClockConfig+0x1bc>)
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	494d      	ldr	r1, [pc, #308]	; (8006140 <HAL_RCC_ClockConfig+0x1bc>)
 800600a:	4313      	orrs	r3, r2
 800600c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	2b00      	cmp	r3, #0
 8006018:	d044      	beq.n	80060a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d107      	bne.n	8006032 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006022:	4b47      	ldr	r3, [pc, #284]	; (8006140 <HAL_RCC_ClockConfig+0x1bc>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d119      	bne.n	8006062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e07f      	b.n	8006132 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	2b02      	cmp	r3, #2
 8006038:	d003      	beq.n	8006042 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800603e:	2b03      	cmp	r3, #3
 8006040:	d107      	bne.n	8006052 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006042:	4b3f      	ldr	r3, [pc, #252]	; (8006140 <HAL_RCC_ClockConfig+0x1bc>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d109      	bne.n	8006062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e06f      	b.n	8006132 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006052:	4b3b      	ldr	r3, [pc, #236]	; (8006140 <HAL_RCC_ClockConfig+0x1bc>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0302 	and.w	r3, r3, #2
 800605a:	2b00      	cmp	r3, #0
 800605c:	d101      	bne.n	8006062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e067      	b.n	8006132 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006062:	4b37      	ldr	r3, [pc, #220]	; (8006140 <HAL_RCC_ClockConfig+0x1bc>)
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f023 0203 	bic.w	r2, r3, #3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	4934      	ldr	r1, [pc, #208]	; (8006140 <HAL_RCC_ClockConfig+0x1bc>)
 8006070:	4313      	orrs	r3, r2
 8006072:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006074:	f7fc fda4 	bl	8002bc0 <HAL_GetTick>
 8006078:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800607a:	e00a      	b.n	8006092 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800607c:	f7fc fda0 	bl	8002bc0 <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	f241 3288 	movw	r2, #5000	; 0x1388
 800608a:	4293      	cmp	r3, r2
 800608c:	d901      	bls.n	8006092 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e04f      	b.n	8006132 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006092:	4b2b      	ldr	r3, [pc, #172]	; (8006140 <HAL_RCC_ClockConfig+0x1bc>)
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f003 020c 	and.w	r2, r3, #12
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d1eb      	bne.n	800607c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060a4:	4b25      	ldr	r3, [pc, #148]	; (800613c <HAL_RCC_ClockConfig+0x1b8>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 030f 	and.w	r3, r3, #15
 80060ac:	683a      	ldr	r2, [r7, #0]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d20c      	bcs.n	80060cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060b2:	4b22      	ldr	r3, [pc, #136]	; (800613c <HAL_RCC_ClockConfig+0x1b8>)
 80060b4:	683a      	ldr	r2, [r7, #0]
 80060b6:	b2d2      	uxtb	r2, r2
 80060b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ba:	4b20      	ldr	r3, [pc, #128]	; (800613c <HAL_RCC_ClockConfig+0x1b8>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 030f 	and.w	r3, r3, #15
 80060c2:	683a      	ldr	r2, [r7, #0]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d001      	beq.n	80060cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e032      	b.n	8006132 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0304 	and.w	r3, r3, #4
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d008      	beq.n	80060ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060d8:	4b19      	ldr	r3, [pc, #100]	; (8006140 <HAL_RCC_ClockConfig+0x1bc>)
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	4916      	ldr	r1, [pc, #88]	; (8006140 <HAL_RCC_ClockConfig+0x1bc>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0308 	and.w	r3, r3, #8
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d009      	beq.n	800610a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060f6:	4b12      	ldr	r3, [pc, #72]	; (8006140 <HAL_RCC_ClockConfig+0x1bc>)
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	00db      	lsls	r3, r3, #3
 8006104:	490e      	ldr	r1, [pc, #56]	; (8006140 <HAL_RCC_ClockConfig+0x1bc>)
 8006106:	4313      	orrs	r3, r2
 8006108:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800610a:	f000 f821 	bl	8006150 <HAL_RCC_GetSysClockFreq>
 800610e:	4602      	mov	r2, r0
 8006110:	4b0b      	ldr	r3, [pc, #44]	; (8006140 <HAL_RCC_ClockConfig+0x1bc>)
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	091b      	lsrs	r3, r3, #4
 8006116:	f003 030f 	and.w	r3, r3, #15
 800611a:	490a      	ldr	r1, [pc, #40]	; (8006144 <HAL_RCC_ClockConfig+0x1c0>)
 800611c:	5ccb      	ldrb	r3, [r1, r3]
 800611e:	fa22 f303 	lsr.w	r3, r2, r3
 8006122:	4a09      	ldr	r2, [pc, #36]	; (8006148 <HAL_RCC_ClockConfig+0x1c4>)
 8006124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006126:	4b09      	ldr	r3, [pc, #36]	; (800614c <HAL_RCC_ClockConfig+0x1c8>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4618      	mov	r0, r3
 800612c:	f7fc fd04 	bl	8002b38 <HAL_InitTick>

  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	40023c00 	.word	0x40023c00
 8006140:	40023800 	.word	0x40023800
 8006144:	08010e9c 	.word	0x08010e9c
 8006148:	20000000 	.word	0x20000000
 800614c:	20000004 	.word	0x20000004

08006150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006150:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006154:	b084      	sub	sp, #16
 8006156:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006158:	2300      	movs	r3, #0
 800615a:	607b      	str	r3, [r7, #4]
 800615c:	2300      	movs	r3, #0
 800615e:	60fb      	str	r3, [r7, #12]
 8006160:	2300      	movs	r3, #0
 8006162:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006164:	2300      	movs	r3, #0
 8006166:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006168:	4b67      	ldr	r3, [pc, #412]	; (8006308 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	f003 030c 	and.w	r3, r3, #12
 8006170:	2b08      	cmp	r3, #8
 8006172:	d00d      	beq.n	8006190 <HAL_RCC_GetSysClockFreq+0x40>
 8006174:	2b08      	cmp	r3, #8
 8006176:	f200 80bd 	bhi.w	80062f4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800617a:	2b00      	cmp	r3, #0
 800617c:	d002      	beq.n	8006184 <HAL_RCC_GetSysClockFreq+0x34>
 800617e:	2b04      	cmp	r3, #4
 8006180:	d003      	beq.n	800618a <HAL_RCC_GetSysClockFreq+0x3a>
 8006182:	e0b7      	b.n	80062f4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006184:	4b61      	ldr	r3, [pc, #388]	; (800630c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006186:	60bb      	str	r3, [r7, #8]
       break;
 8006188:	e0b7      	b.n	80062fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800618a:	4b60      	ldr	r3, [pc, #384]	; (800630c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800618c:	60bb      	str	r3, [r7, #8]
      break;
 800618e:	e0b4      	b.n	80062fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006190:	4b5d      	ldr	r3, [pc, #372]	; (8006308 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006198:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800619a:	4b5b      	ldr	r3, [pc, #364]	; (8006308 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d04d      	beq.n	8006242 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061a6:	4b58      	ldr	r3, [pc, #352]	; (8006308 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	099b      	lsrs	r3, r3, #6
 80061ac:	461a      	mov	r2, r3
 80061ae:	f04f 0300 	mov.w	r3, #0
 80061b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80061b6:	f04f 0100 	mov.w	r1, #0
 80061ba:	ea02 0800 	and.w	r8, r2, r0
 80061be:	ea03 0901 	and.w	r9, r3, r1
 80061c2:	4640      	mov	r0, r8
 80061c4:	4649      	mov	r1, r9
 80061c6:	f04f 0200 	mov.w	r2, #0
 80061ca:	f04f 0300 	mov.w	r3, #0
 80061ce:	014b      	lsls	r3, r1, #5
 80061d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80061d4:	0142      	lsls	r2, r0, #5
 80061d6:	4610      	mov	r0, r2
 80061d8:	4619      	mov	r1, r3
 80061da:	ebb0 0008 	subs.w	r0, r0, r8
 80061de:	eb61 0109 	sbc.w	r1, r1, r9
 80061e2:	f04f 0200 	mov.w	r2, #0
 80061e6:	f04f 0300 	mov.w	r3, #0
 80061ea:	018b      	lsls	r3, r1, #6
 80061ec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80061f0:	0182      	lsls	r2, r0, #6
 80061f2:	1a12      	subs	r2, r2, r0
 80061f4:	eb63 0301 	sbc.w	r3, r3, r1
 80061f8:	f04f 0000 	mov.w	r0, #0
 80061fc:	f04f 0100 	mov.w	r1, #0
 8006200:	00d9      	lsls	r1, r3, #3
 8006202:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006206:	00d0      	lsls	r0, r2, #3
 8006208:	4602      	mov	r2, r0
 800620a:	460b      	mov	r3, r1
 800620c:	eb12 0208 	adds.w	r2, r2, r8
 8006210:	eb43 0309 	adc.w	r3, r3, r9
 8006214:	f04f 0000 	mov.w	r0, #0
 8006218:	f04f 0100 	mov.w	r1, #0
 800621c:	0299      	lsls	r1, r3, #10
 800621e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006222:	0290      	lsls	r0, r2, #10
 8006224:	4602      	mov	r2, r0
 8006226:	460b      	mov	r3, r1
 8006228:	4610      	mov	r0, r2
 800622a:	4619      	mov	r1, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	461a      	mov	r2, r3
 8006230:	f04f 0300 	mov.w	r3, #0
 8006234:	f7fa fd38 	bl	8000ca8 <__aeabi_uldivmod>
 8006238:	4602      	mov	r2, r0
 800623a:	460b      	mov	r3, r1
 800623c:	4613      	mov	r3, r2
 800623e:	60fb      	str	r3, [r7, #12]
 8006240:	e04a      	b.n	80062d8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006242:	4b31      	ldr	r3, [pc, #196]	; (8006308 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	099b      	lsrs	r3, r3, #6
 8006248:	461a      	mov	r2, r3
 800624a:	f04f 0300 	mov.w	r3, #0
 800624e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006252:	f04f 0100 	mov.w	r1, #0
 8006256:	ea02 0400 	and.w	r4, r2, r0
 800625a:	ea03 0501 	and.w	r5, r3, r1
 800625e:	4620      	mov	r0, r4
 8006260:	4629      	mov	r1, r5
 8006262:	f04f 0200 	mov.w	r2, #0
 8006266:	f04f 0300 	mov.w	r3, #0
 800626a:	014b      	lsls	r3, r1, #5
 800626c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006270:	0142      	lsls	r2, r0, #5
 8006272:	4610      	mov	r0, r2
 8006274:	4619      	mov	r1, r3
 8006276:	1b00      	subs	r0, r0, r4
 8006278:	eb61 0105 	sbc.w	r1, r1, r5
 800627c:	f04f 0200 	mov.w	r2, #0
 8006280:	f04f 0300 	mov.w	r3, #0
 8006284:	018b      	lsls	r3, r1, #6
 8006286:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800628a:	0182      	lsls	r2, r0, #6
 800628c:	1a12      	subs	r2, r2, r0
 800628e:	eb63 0301 	sbc.w	r3, r3, r1
 8006292:	f04f 0000 	mov.w	r0, #0
 8006296:	f04f 0100 	mov.w	r1, #0
 800629a:	00d9      	lsls	r1, r3, #3
 800629c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80062a0:	00d0      	lsls	r0, r2, #3
 80062a2:	4602      	mov	r2, r0
 80062a4:	460b      	mov	r3, r1
 80062a6:	1912      	adds	r2, r2, r4
 80062a8:	eb45 0303 	adc.w	r3, r5, r3
 80062ac:	f04f 0000 	mov.w	r0, #0
 80062b0:	f04f 0100 	mov.w	r1, #0
 80062b4:	0299      	lsls	r1, r3, #10
 80062b6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80062ba:	0290      	lsls	r0, r2, #10
 80062bc:	4602      	mov	r2, r0
 80062be:	460b      	mov	r3, r1
 80062c0:	4610      	mov	r0, r2
 80062c2:	4619      	mov	r1, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	461a      	mov	r2, r3
 80062c8:	f04f 0300 	mov.w	r3, #0
 80062cc:	f7fa fcec 	bl	8000ca8 <__aeabi_uldivmod>
 80062d0:	4602      	mov	r2, r0
 80062d2:	460b      	mov	r3, r1
 80062d4:	4613      	mov	r3, r2
 80062d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80062d8:	4b0b      	ldr	r3, [pc, #44]	; (8006308 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	0c1b      	lsrs	r3, r3, #16
 80062de:	f003 0303 	and.w	r3, r3, #3
 80062e2:	3301      	adds	r3, #1
 80062e4:	005b      	lsls	r3, r3, #1
 80062e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f0:	60bb      	str	r3, [r7, #8]
      break;
 80062f2:	e002      	b.n	80062fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062f4:	4b05      	ldr	r3, [pc, #20]	; (800630c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80062f6:	60bb      	str	r3, [r7, #8]
      break;
 80062f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062fa:	68bb      	ldr	r3, [r7, #8]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006306:	bf00      	nop
 8006308:	40023800 	.word	0x40023800
 800630c:	00f42400 	.word	0x00f42400

08006310 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006310:	b480      	push	{r7}
 8006312:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006314:	4b03      	ldr	r3, [pc, #12]	; (8006324 <HAL_RCC_GetHCLKFreq+0x14>)
 8006316:	681b      	ldr	r3, [r3, #0]
}
 8006318:	4618      	mov	r0, r3
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	20000000 	.word	0x20000000

08006328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800632c:	f7ff fff0 	bl	8006310 <HAL_RCC_GetHCLKFreq>
 8006330:	4602      	mov	r2, r0
 8006332:	4b05      	ldr	r3, [pc, #20]	; (8006348 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	0a9b      	lsrs	r3, r3, #10
 8006338:	f003 0307 	and.w	r3, r3, #7
 800633c:	4903      	ldr	r1, [pc, #12]	; (800634c <HAL_RCC_GetPCLK1Freq+0x24>)
 800633e:	5ccb      	ldrb	r3, [r1, r3]
 8006340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006344:	4618      	mov	r0, r3
 8006346:	bd80      	pop	{r7, pc}
 8006348:	40023800 	.word	0x40023800
 800634c:	08010eac 	.word	0x08010eac

08006350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006354:	f7ff ffdc 	bl	8006310 <HAL_RCC_GetHCLKFreq>
 8006358:	4602      	mov	r2, r0
 800635a:	4b05      	ldr	r3, [pc, #20]	; (8006370 <HAL_RCC_GetPCLK2Freq+0x20>)
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	0b5b      	lsrs	r3, r3, #13
 8006360:	f003 0307 	and.w	r3, r3, #7
 8006364:	4903      	ldr	r1, [pc, #12]	; (8006374 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006366:	5ccb      	ldrb	r3, [r1, r3]
 8006368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800636c:	4618      	mov	r0, r3
 800636e:	bd80      	pop	{r7, pc}
 8006370:	40023800 	.word	0x40023800
 8006374:	08010eac 	.word	0x08010eac

08006378 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d101      	bne.n	800638a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e07b      	b.n	8006482 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638e:	2b00      	cmp	r3, #0
 8006390:	d108      	bne.n	80063a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800639a:	d009      	beq.n	80063b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	61da      	str	r2, [r3, #28]
 80063a2:	e005      	b.n	80063b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d106      	bne.n	80063d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7fc f882 	bl	80024d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2202      	movs	r2, #2
 80063d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80063f8:	431a      	orrs	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006402:	431a      	orrs	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	f003 0302 	and.w	r3, r3, #2
 800640c:	431a      	orrs	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	431a      	orrs	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006420:	431a      	orrs	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	69db      	ldr	r3, [r3, #28]
 8006426:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800642a:	431a      	orrs	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a1b      	ldr	r3, [r3, #32]
 8006430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006434:	ea42 0103 	orr.w	r1, r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	430a      	orrs	r2, r1
 8006446:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	0c1b      	lsrs	r3, r3, #16
 800644e:	f003 0104 	and.w	r1, r3, #4
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006456:	f003 0210 	and.w	r2, r3, #16
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	69da      	ldr	r2, [r3, #28]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006470:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3708      	adds	r7, #8
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b08c      	sub	sp, #48	; 0x30
 800648e:	af00      	add	r7, sp, #0
 8006490:	60f8      	str	r0, [r7, #12]
 8006492:	60b9      	str	r1, [r7, #8]
 8006494:	607a      	str	r2, [r7, #4]
 8006496:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006498:	2301      	movs	r3, #1
 800649a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800649c:	2300      	movs	r3, #0
 800649e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d101      	bne.n	80064b0 <HAL_SPI_TransmitReceive+0x26>
 80064ac:	2302      	movs	r3, #2
 80064ae:	e18a      	b.n	80067c6 <HAL_SPI_TransmitReceive+0x33c>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064b8:	f7fc fb82 	bl	8002bc0 <HAL_GetTick>
 80064bc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80064ce:	887b      	ldrh	r3, [r7, #2]
 80064d0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80064d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d00f      	beq.n	80064fa <HAL_SPI_TransmitReceive+0x70>
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064e0:	d107      	bne.n	80064f2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d103      	bne.n	80064f2 <HAL_SPI_TransmitReceive+0x68>
 80064ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064ee:	2b04      	cmp	r3, #4
 80064f0:	d003      	beq.n	80064fa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80064f2:	2302      	movs	r3, #2
 80064f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80064f8:	e15b      	b.n	80067b2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d005      	beq.n	800650c <HAL_SPI_TransmitReceive+0x82>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d002      	beq.n	800650c <HAL_SPI_TransmitReceive+0x82>
 8006506:	887b      	ldrh	r3, [r7, #2]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d103      	bne.n	8006514 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006512:	e14e      	b.n	80067b2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800651a:	b2db      	uxtb	r3, r3
 800651c:	2b04      	cmp	r3, #4
 800651e:	d003      	beq.n	8006528 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2205      	movs	r2, #5
 8006524:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	887a      	ldrh	r2, [r7, #2]
 8006538:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	887a      	ldrh	r2, [r7, #2]
 800653e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	887a      	ldrh	r2, [r7, #2]
 800654a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	887a      	ldrh	r2, [r7, #2]
 8006550:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006568:	2b40      	cmp	r3, #64	; 0x40
 800656a:	d007      	beq.n	800657c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800657a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006584:	d178      	bne.n	8006678 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d002      	beq.n	8006594 <HAL_SPI_TransmitReceive+0x10a>
 800658e:	8b7b      	ldrh	r3, [r7, #26]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d166      	bne.n	8006662 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006598:	881a      	ldrh	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a4:	1c9a      	adds	r2, r3, #2
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	3b01      	subs	r3, #1
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065b8:	e053      	b.n	8006662 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f003 0302 	and.w	r3, r3, #2
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d11b      	bne.n	8006600 <HAL_SPI_TransmitReceive+0x176>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d016      	beq.n	8006600 <HAL_SPI_TransmitReceive+0x176>
 80065d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d113      	bne.n	8006600 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065dc:	881a      	ldrh	r2, [r3, #0]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e8:	1c9a      	adds	r2, r3, #2
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	3b01      	subs	r3, #1
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065fc:	2300      	movs	r3, #0
 80065fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	2b01      	cmp	r3, #1
 800660c:	d119      	bne.n	8006642 <HAL_SPI_TransmitReceive+0x1b8>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006612:	b29b      	uxth	r3, r3
 8006614:	2b00      	cmp	r3, #0
 8006616:	d014      	beq.n	8006642 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68da      	ldr	r2, [r3, #12]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006622:	b292      	uxth	r2, r2
 8006624:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662a:	1c9a      	adds	r2, r3, #2
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006634:	b29b      	uxth	r3, r3
 8006636:	3b01      	subs	r3, #1
 8006638:	b29a      	uxth	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800663e:	2301      	movs	r3, #1
 8006640:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006642:	f7fc fabd 	bl	8002bc0 <HAL_GetTick>
 8006646:	4602      	mov	r2, r0
 8006648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800664e:	429a      	cmp	r2, r3
 8006650:	d807      	bhi.n	8006662 <HAL_SPI_TransmitReceive+0x1d8>
 8006652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006658:	d003      	beq.n	8006662 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006660:	e0a7      	b.n	80067b2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006666:	b29b      	uxth	r3, r3
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1a6      	bne.n	80065ba <HAL_SPI_TransmitReceive+0x130>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006670:	b29b      	uxth	r3, r3
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1a1      	bne.n	80065ba <HAL_SPI_TransmitReceive+0x130>
 8006676:	e07c      	b.n	8006772 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d002      	beq.n	8006686 <HAL_SPI_TransmitReceive+0x1fc>
 8006680:	8b7b      	ldrh	r3, [r7, #26]
 8006682:	2b01      	cmp	r3, #1
 8006684:	d16b      	bne.n	800675e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	330c      	adds	r3, #12
 8006690:	7812      	ldrb	r2, [r2, #0]
 8006692:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006698:	1c5a      	adds	r2, r3, #1
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	3b01      	subs	r3, #1
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066ac:	e057      	b.n	800675e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f003 0302 	and.w	r3, r3, #2
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d11c      	bne.n	80066f6 <HAL_SPI_TransmitReceive+0x26c>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d017      	beq.n	80066f6 <HAL_SPI_TransmitReceive+0x26c>
 80066c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d114      	bne.n	80066f6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	330c      	adds	r3, #12
 80066d6:	7812      	ldrb	r2, [r2, #0]
 80066d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066de:	1c5a      	adds	r2, r3, #1
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	3b01      	subs	r3, #1
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066f2:	2300      	movs	r3, #0
 80066f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f003 0301 	and.w	r3, r3, #1
 8006700:	2b01      	cmp	r3, #1
 8006702:	d119      	bne.n	8006738 <HAL_SPI_TransmitReceive+0x2ae>
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006708:	b29b      	uxth	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d014      	beq.n	8006738 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68da      	ldr	r2, [r3, #12]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006718:	b2d2      	uxtb	r2, r2
 800671a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006720:	1c5a      	adds	r2, r3, #1
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800672a:	b29b      	uxth	r3, r3
 800672c:	3b01      	subs	r3, #1
 800672e:	b29a      	uxth	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006734:	2301      	movs	r3, #1
 8006736:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006738:	f7fc fa42 	bl	8002bc0 <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006744:	429a      	cmp	r2, r3
 8006746:	d803      	bhi.n	8006750 <HAL_SPI_TransmitReceive+0x2c6>
 8006748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800674e:	d102      	bne.n	8006756 <HAL_SPI_TransmitReceive+0x2cc>
 8006750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006752:	2b00      	cmp	r3, #0
 8006754:	d103      	bne.n	800675e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800675c:	e029      	b.n	80067b2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006762:	b29b      	uxth	r3, r3
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1a2      	bne.n	80066ae <HAL_SPI_TransmitReceive+0x224>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800676c:	b29b      	uxth	r3, r3
 800676e:	2b00      	cmp	r3, #0
 8006770:	d19d      	bne.n	80066ae <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006774:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f000 f8b2 	bl	80068e0 <SPI_EndRxTxTransaction>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d006      	beq.n	8006790 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2220      	movs	r2, #32
 800678c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800678e:	e010      	b.n	80067b2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10b      	bne.n	80067b0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006798:	2300      	movs	r3, #0
 800679a:	617b      	str	r3, [r7, #20]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	617b      	str	r3, [r7, #20]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	617b      	str	r3, [r7, #20]
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	e000      	b.n	80067b2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80067b0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80067c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3730      	adds	r7, #48	; 0x30
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
	...

080067d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b088      	sub	sp, #32
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	603b      	str	r3, [r7, #0]
 80067dc:	4613      	mov	r3, r2
 80067de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80067e0:	f7fc f9ee 	bl	8002bc0 <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e8:	1a9b      	subs	r3, r3, r2
 80067ea:	683a      	ldr	r2, [r7, #0]
 80067ec:	4413      	add	r3, r2
 80067ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80067f0:	f7fc f9e6 	bl	8002bc0 <HAL_GetTick>
 80067f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80067f6:	4b39      	ldr	r3, [pc, #228]	; (80068dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	015b      	lsls	r3, r3, #5
 80067fc:	0d1b      	lsrs	r3, r3, #20
 80067fe:	69fa      	ldr	r2, [r7, #28]
 8006800:	fb02 f303 	mul.w	r3, r2, r3
 8006804:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006806:	e054      	b.n	80068b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800680e:	d050      	beq.n	80068b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006810:	f7fc f9d6 	bl	8002bc0 <HAL_GetTick>
 8006814:	4602      	mov	r2, r0
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	69fa      	ldr	r2, [r7, #28]
 800681c:	429a      	cmp	r2, r3
 800681e:	d902      	bls.n	8006826 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d13d      	bne.n	80068a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	685a      	ldr	r2, [r3, #4]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006834:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800683e:	d111      	bne.n	8006864 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006848:	d004      	beq.n	8006854 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006852:	d107      	bne.n	8006864 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006862:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006868:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800686c:	d10f      	bne.n	800688e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800687c:	601a      	str	r2, [r3, #0]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800688c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e017      	b.n	80068d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d101      	bne.n	80068ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80068a8:	2300      	movs	r3, #0
 80068aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	3b01      	subs	r3, #1
 80068b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	689a      	ldr	r2, [r3, #8]
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	4013      	ands	r3, r2
 80068bc:	68ba      	ldr	r2, [r7, #8]
 80068be:	429a      	cmp	r2, r3
 80068c0:	bf0c      	ite	eq
 80068c2:	2301      	moveq	r3, #1
 80068c4:	2300      	movne	r3, #0
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	461a      	mov	r2, r3
 80068ca:	79fb      	ldrb	r3, [r7, #7]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d19b      	bne.n	8006808 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3720      	adds	r7, #32
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	20000000 	.word	0x20000000

080068e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b088      	sub	sp, #32
 80068e4:	af02      	add	r7, sp, #8
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80068ec:	4b1b      	ldr	r3, [pc, #108]	; (800695c <SPI_EndRxTxTransaction+0x7c>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a1b      	ldr	r2, [pc, #108]	; (8006960 <SPI_EndRxTxTransaction+0x80>)
 80068f2:	fba2 2303 	umull	r2, r3, r2, r3
 80068f6:	0d5b      	lsrs	r3, r3, #21
 80068f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80068fc:	fb02 f303 	mul.w	r3, r2, r3
 8006900:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800690a:	d112      	bne.n	8006932 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	2200      	movs	r2, #0
 8006914:	2180      	movs	r1, #128	; 0x80
 8006916:	68f8      	ldr	r0, [r7, #12]
 8006918:	f7ff ff5a 	bl	80067d0 <SPI_WaitFlagStateUntilTimeout>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d016      	beq.n	8006950 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006926:	f043 0220 	orr.w	r2, r3, #32
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e00f      	b.n	8006952 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00a      	beq.n	800694e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	3b01      	subs	r3, #1
 800693c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006948:	2b80      	cmp	r3, #128	; 0x80
 800694a:	d0f2      	beq.n	8006932 <SPI_EndRxTxTransaction+0x52>
 800694c:	e000      	b.n	8006950 <SPI_EndRxTxTransaction+0x70>
        break;
 800694e:	bf00      	nop
  }

  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3718      	adds	r7, #24
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	20000000 	.word	0x20000000
 8006960:	165e9f81 	.word	0x165e9f81

08006964 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d101      	bne.n	8006976 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e041      	b.n	80069fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800697c:	b2db      	uxtb	r3, r3
 800697e:	2b00      	cmp	r3, #0
 8006980:	d106      	bne.n	8006990 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f7fb fe58 	bl	8002640 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2202      	movs	r2, #2
 8006994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	3304      	adds	r3, #4
 80069a0:	4619      	mov	r1, r3
 80069a2:	4610      	mov	r0, r2
 80069a4:	f000 fc78 	bl	8007298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3708      	adds	r7, #8
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b082      	sub	sp, #8
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d101      	bne.n	8006a14 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e041      	b.n	8006a98 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d106      	bne.n	8006a2e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 f839 	bl	8006aa0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2202      	movs	r2, #2
 8006a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	3304      	adds	r3, #4
 8006a3e:	4619      	mov	r1, r3
 8006a40:	4610      	mov	r0, r2
 8006a42:	f000 fc29 	bl	8007298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2201      	movs	r2, #1
 8006a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2201      	movs	r2, #1
 8006a72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2201      	movs	r2, #1
 8006a82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2201      	movs	r2, #1
 8006a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3708      	adds	r7, #8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006aa8:	bf00      	nop
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d109      	bne.n	8006ad8 <HAL_TIM_PWM_Start+0x24>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	bf14      	ite	ne
 8006ad0:	2301      	movne	r3, #1
 8006ad2:	2300      	moveq	r3, #0
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	e022      	b.n	8006b1e <HAL_TIM_PWM_Start+0x6a>
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	2b04      	cmp	r3, #4
 8006adc:	d109      	bne.n	8006af2 <HAL_TIM_PWM_Start+0x3e>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	bf14      	ite	ne
 8006aea:	2301      	movne	r3, #1
 8006aec:	2300      	moveq	r3, #0
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	e015      	b.n	8006b1e <HAL_TIM_PWM_Start+0x6a>
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	2b08      	cmp	r3, #8
 8006af6:	d109      	bne.n	8006b0c <HAL_TIM_PWM_Start+0x58>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	bf14      	ite	ne
 8006b04:	2301      	movne	r3, #1
 8006b06:	2300      	moveq	r3, #0
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	e008      	b.n	8006b1e <HAL_TIM_PWM_Start+0x6a>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	bf14      	ite	ne
 8006b18:	2301      	movne	r3, #1
 8006b1a:	2300      	moveq	r3, #0
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d001      	beq.n	8006b26 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e07c      	b.n	8006c20 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d104      	bne.n	8006b36 <HAL_TIM_PWM_Start+0x82>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2202      	movs	r2, #2
 8006b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b34:	e013      	b.n	8006b5e <HAL_TIM_PWM_Start+0xaa>
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	2b04      	cmp	r3, #4
 8006b3a:	d104      	bne.n	8006b46 <HAL_TIM_PWM_Start+0x92>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2202      	movs	r2, #2
 8006b40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b44:	e00b      	b.n	8006b5e <HAL_TIM_PWM_Start+0xaa>
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	2b08      	cmp	r3, #8
 8006b4a:	d104      	bne.n	8006b56 <HAL_TIM_PWM_Start+0xa2>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b54:	e003      	b.n	8006b5e <HAL_TIM_PWM_Start+0xaa>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2202      	movs	r2, #2
 8006b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2201      	movs	r2, #1
 8006b64:	6839      	ldr	r1, [r7, #0]
 8006b66:	4618      	mov	r0, r3
 8006b68:	f000 fe80 	bl	800786c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a2d      	ldr	r2, [pc, #180]	; (8006c28 <HAL_TIM_PWM_Start+0x174>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d004      	beq.n	8006b80 <HAL_TIM_PWM_Start+0xcc>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a2c      	ldr	r2, [pc, #176]	; (8006c2c <HAL_TIM_PWM_Start+0x178>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d101      	bne.n	8006b84 <HAL_TIM_PWM_Start+0xd0>
 8006b80:	2301      	movs	r3, #1
 8006b82:	e000      	b.n	8006b86 <HAL_TIM_PWM_Start+0xd2>
 8006b84:	2300      	movs	r3, #0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d007      	beq.n	8006b9a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a22      	ldr	r2, [pc, #136]	; (8006c28 <HAL_TIM_PWM_Start+0x174>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d022      	beq.n	8006bea <HAL_TIM_PWM_Start+0x136>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bac:	d01d      	beq.n	8006bea <HAL_TIM_PWM_Start+0x136>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a1f      	ldr	r2, [pc, #124]	; (8006c30 <HAL_TIM_PWM_Start+0x17c>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d018      	beq.n	8006bea <HAL_TIM_PWM_Start+0x136>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a1d      	ldr	r2, [pc, #116]	; (8006c34 <HAL_TIM_PWM_Start+0x180>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d013      	beq.n	8006bea <HAL_TIM_PWM_Start+0x136>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a1c      	ldr	r2, [pc, #112]	; (8006c38 <HAL_TIM_PWM_Start+0x184>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d00e      	beq.n	8006bea <HAL_TIM_PWM_Start+0x136>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a16      	ldr	r2, [pc, #88]	; (8006c2c <HAL_TIM_PWM_Start+0x178>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d009      	beq.n	8006bea <HAL_TIM_PWM_Start+0x136>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a18      	ldr	r2, [pc, #96]	; (8006c3c <HAL_TIM_PWM_Start+0x188>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d004      	beq.n	8006bea <HAL_TIM_PWM_Start+0x136>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a16      	ldr	r2, [pc, #88]	; (8006c40 <HAL_TIM_PWM_Start+0x18c>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d111      	bne.n	8006c0e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	f003 0307 	and.w	r3, r3, #7
 8006bf4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2b06      	cmp	r3, #6
 8006bfa:	d010      	beq.n	8006c1e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f042 0201 	orr.w	r2, r2, #1
 8006c0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c0c:	e007      	b.n	8006c1e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f042 0201 	orr.w	r2, r2, #1
 8006c1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3710      	adds	r7, #16
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	40010000 	.word	0x40010000
 8006c2c:	40010400 	.word	0x40010400
 8006c30:	40000400 	.word	0x40000400
 8006c34:	40000800 	.word	0x40000800
 8006c38:	40000c00 	.word	0x40000c00
 8006c3c:	40014000 	.word	0x40014000
 8006c40:	40001800 	.word	0x40001800

08006c44 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2200      	movs	r2, #0
 8006c54:	6839      	ldr	r1, [r7, #0]
 8006c56:	4618      	mov	r0, r3
 8006c58:	f000 fe08 	bl	800786c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a2e      	ldr	r2, [pc, #184]	; (8006d1c <HAL_TIM_PWM_Stop+0xd8>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d004      	beq.n	8006c70 <HAL_TIM_PWM_Stop+0x2c>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a2d      	ldr	r2, [pc, #180]	; (8006d20 <HAL_TIM_PWM_Stop+0xdc>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d101      	bne.n	8006c74 <HAL_TIM_PWM_Stop+0x30>
 8006c70:	2301      	movs	r3, #1
 8006c72:	e000      	b.n	8006c76 <HAL_TIM_PWM_Stop+0x32>
 8006c74:	2300      	movs	r3, #0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d017      	beq.n	8006caa <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	6a1a      	ldr	r2, [r3, #32]
 8006c80:	f241 1311 	movw	r3, #4369	; 0x1111
 8006c84:	4013      	ands	r3, r2
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d10f      	bne.n	8006caa <HAL_TIM_PWM_Stop+0x66>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	6a1a      	ldr	r2, [r3, #32]
 8006c90:	f240 4344 	movw	r3, #1092	; 0x444
 8006c94:	4013      	ands	r3, r2
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d107      	bne.n	8006caa <HAL_TIM_PWM_Stop+0x66>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ca8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	6a1a      	ldr	r2, [r3, #32]
 8006cb0:	f241 1311 	movw	r3, #4369	; 0x1111
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d10f      	bne.n	8006cda <HAL_TIM_PWM_Stop+0x96>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	6a1a      	ldr	r2, [r3, #32]
 8006cc0:	f240 4344 	movw	r3, #1092	; 0x444
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d107      	bne.n	8006cda <HAL_TIM_PWM_Stop+0x96>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f022 0201 	bic.w	r2, r2, #1
 8006cd8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d104      	bne.n	8006cea <HAL_TIM_PWM_Stop+0xa6>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ce8:	e013      	b.n	8006d12 <HAL_TIM_PWM_Stop+0xce>
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	2b04      	cmp	r3, #4
 8006cee:	d104      	bne.n	8006cfa <HAL_TIM_PWM_Stop+0xb6>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cf8:	e00b      	b.n	8006d12 <HAL_TIM_PWM_Stop+0xce>
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	2b08      	cmp	r3, #8
 8006cfe:	d104      	bne.n	8006d0a <HAL_TIM_PWM_Stop+0xc6>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d08:	e003      	b.n	8006d12 <HAL_TIM_PWM_Stop+0xce>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3708      	adds	r7, #8
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	40010000 	.word	0x40010000
 8006d20:	40010400 	.word	0x40010400

08006d24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	f003 0302 	and.w	r3, r3, #2
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d122      	bne.n	8006d80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	f003 0302 	and.w	r3, r3, #2
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d11b      	bne.n	8006d80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f06f 0202 	mvn.w	r2, #2
 8006d50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	f003 0303 	and.w	r3, r3, #3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d003      	beq.n	8006d6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 fa77 	bl	800725a <HAL_TIM_IC_CaptureCallback>
 8006d6c:	e005      	b.n	8006d7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 fa69 	bl	8007246 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 fa7a 	bl	800726e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	f003 0304 	and.w	r3, r3, #4
 8006d8a:	2b04      	cmp	r3, #4
 8006d8c:	d122      	bne.n	8006dd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	f003 0304 	and.w	r3, r3, #4
 8006d98:	2b04      	cmp	r3, #4
 8006d9a:	d11b      	bne.n	8006dd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f06f 0204 	mvn.w	r2, #4
 8006da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2202      	movs	r2, #2
 8006daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	699b      	ldr	r3, [r3, #24]
 8006db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d003      	beq.n	8006dc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 fa4d 	bl	800725a <HAL_TIM_IC_CaptureCallback>
 8006dc0:	e005      	b.n	8006dce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fa3f 	bl	8007246 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fa50 	bl	800726e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	f003 0308 	and.w	r3, r3, #8
 8006dde:	2b08      	cmp	r3, #8
 8006de0:	d122      	bne.n	8006e28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	f003 0308 	and.w	r3, r3, #8
 8006dec:	2b08      	cmp	r3, #8
 8006dee:	d11b      	bne.n	8006e28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f06f 0208 	mvn.w	r2, #8
 8006df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2204      	movs	r2, #4
 8006dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	69db      	ldr	r3, [r3, #28]
 8006e06:	f003 0303 	and.w	r3, r3, #3
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d003      	beq.n	8006e16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fa23 	bl	800725a <HAL_TIM_IC_CaptureCallback>
 8006e14:	e005      	b.n	8006e22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 fa15 	bl	8007246 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 fa26 	bl	800726e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	f003 0310 	and.w	r3, r3, #16
 8006e32:	2b10      	cmp	r3, #16
 8006e34:	d122      	bne.n	8006e7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	f003 0310 	and.w	r3, r3, #16
 8006e40:	2b10      	cmp	r3, #16
 8006e42:	d11b      	bne.n	8006e7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f06f 0210 	mvn.w	r2, #16
 8006e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2208      	movs	r2, #8
 8006e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	69db      	ldr	r3, [r3, #28]
 8006e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d003      	beq.n	8006e6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f9f9 	bl	800725a <HAL_TIM_IC_CaptureCallback>
 8006e68:	e005      	b.n	8006e76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 f9eb 	bl	8007246 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 f9fc 	bl	800726e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	f003 0301 	and.w	r3, r3, #1
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d10e      	bne.n	8006ea8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	f003 0301 	and.w	r3, r3, #1
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d107      	bne.n	8006ea8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f06f 0201 	mvn.w	r2, #1
 8006ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f7fb f9e0 	bl	8002268 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eb2:	2b80      	cmp	r3, #128	; 0x80
 8006eb4:	d10e      	bne.n	8006ed4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ec0:	2b80      	cmp	r3, #128	; 0x80
 8006ec2:	d107      	bne.n	8006ed4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 fd78 	bl	80079c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ede:	2b40      	cmp	r3, #64	; 0x40
 8006ee0:	d10e      	bne.n	8006f00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eec:	2b40      	cmp	r3, #64	; 0x40
 8006eee:	d107      	bne.n	8006f00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f9c1 	bl	8007282 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	f003 0320 	and.w	r3, r3, #32
 8006f0a:	2b20      	cmp	r3, #32
 8006f0c:	d10e      	bne.n	8006f2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	f003 0320 	and.w	r3, r3, #32
 8006f18:	2b20      	cmp	r3, #32
 8006f1a:	d107      	bne.n	8006f2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f06f 0220 	mvn.w	r2, #32
 8006f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 fd42 	bl	80079b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f2c:	bf00      	nop
 8006f2e:	3708      	adds	r7, #8
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b086      	sub	sp, #24
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f40:	2300      	movs	r3, #0
 8006f42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d101      	bne.n	8006f52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006f4e:	2302      	movs	r3, #2
 8006f50:	e0ae      	b.n	80070b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2b0c      	cmp	r3, #12
 8006f5e:	f200 809f 	bhi.w	80070a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006f62:	a201      	add	r2, pc, #4	; (adr r2, 8006f68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f68:	08006f9d 	.word	0x08006f9d
 8006f6c:	080070a1 	.word	0x080070a1
 8006f70:	080070a1 	.word	0x080070a1
 8006f74:	080070a1 	.word	0x080070a1
 8006f78:	08006fdd 	.word	0x08006fdd
 8006f7c:	080070a1 	.word	0x080070a1
 8006f80:	080070a1 	.word	0x080070a1
 8006f84:	080070a1 	.word	0x080070a1
 8006f88:	0800701f 	.word	0x0800701f
 8006f8c:	080070a1 	.word	0x080070a1
 8006f90:	080070a1 	.word	0x080070a1
 8006f94:	080070a1 	.word	0x080070a1
 8006f98:	0800705f 	.word	0x0800705f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68b9      	ldr	r1, [r7, #8]
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f000 fa18 	bl	80073d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	699a      	ldr	r2, [r3, #24]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f042 0208 	orr.w	r2, r2, #8
 8006fb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	699a      	ldr	r2, [r3, #24]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f022 0204 	bic.w	r2, r2, #4
 8006fc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	6999      	ldr	r1, [r3, #24]
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	691a      	ldr	r2, [r3, #16]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	619a      	str	r2, [r3, #24]
      break;
 8006fda:	e064      	b.n	80070a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68b9      	ldr	r1, [r7, #8]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f000 fa68 	bl	80074b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	699a      	ldr	r2, [r3, #24]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ff6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	699a      	ldr	r2, [r3, #24]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007006:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6999      	ldr	r1, [r3, #24]
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	021a      	lsls	r2, r3, #8
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	430a      	orrs	r2, r1
 800701a:	619a      	str	r2, [r3, #24]
      break;
 800701c:	e043      	b.n	80070a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68b9      	ldr	r1, [r7, #8]
 8007024:	4618      	mov	r0, r3
 8007026:	f000 fabd 	bl	80075a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	69da      	ldr	r2, [r3, #28]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f042 0208 	orr.w	r2, r2, #8
 8007038:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	69da      	ldr	r2, [r3, #28]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f022 0204 	bic.w	r2, r2, #4
 8007048:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	69d9      	ldr	r1, [r3, #28]
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	691a      	ldr	r2, [r3, #16]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	430a      	orrs	r2, r1
 800705a:	61da      	str	r2, [r3, #28]
      break;
 800705c:	e023      	b.n	80070a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68b9      	ldr	r1, [r7, #8]
 8007064:	4618      	mov	r0, r3
 8007066:	f000 fb11 	bl	800768c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	69da      	ldr	r2, [r3, #28]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007078:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	69da      	ldr	r2, [r3, #28]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007088:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	69d9      	ldr	r1, [r3, #28]
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	021a      	lsls	r2, r3, #8
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	430a      	orrs	r2, r1
 800709c:	61da      	str	r2, [r3, #28]
      break;
 800709e:	e002      	b.n	80070a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	75fb      	strb	r3, [r7, #23]
      break;
 80070a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3718      	adds	r7, #24
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070c2:	2300      	movs	r3, #0
 80070c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d101      	bne.n	80070d4 <HAL_TIM_ConfigClockSource+0x1c>
 80070d0:	2302      	movs	r3, #2
 80070d2:	e0b4      	b.n	800723e <HAL_TIM_ConfigClockSource+0x186>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2202      	movs	r2, #2
 80070e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80070f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68ba      	ldr	r2, [r7, #8]
 8007102:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800710c:	d03e      	beq.n	800718c <HAL_TIM_ConfigClockSource+0xd4>
 800710e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007112:	f200 8087 	bhi.w	8007224 <HAL_TIM_ConfigClockSource+0x16c>
 8007116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800711a:	f000 8086 	beq.w	800722a <HAL_TIM_ConfigClockSource+0x172>
 800711e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007122:	d87f      	bhi.n	8007224 <HAL_TIM_ConfigClockSource+0x16c>
 8007124:	2b70      	cmp	r3, #112	; 0x70
 8007126:	d01a      	beq.n	800715e <HAL_TIM_ConfigClockSource+0xa6>
 8007128:	2b70      	cmp	r3, #112	; 0x70
 800712a:	d87b      	bhi.n	8007224 <HAL_TIM_ConfigClockSource+0x16c>
 800712c:	2b60      	cmp	r3, #96	; 0x60
 800712e:	d050      	beq.n	80071d2 <HAL_TIM_ConfigClockSource+0x11a>
 8007130:	2b60      	cmp	r3, #96	; 0x60
 8007132:	d877      	bhi.n	8007224 <HAL_TIM_ConfigClockSource+0x16c>
 8007134:	2b50      	cmp	r3, #80	; 0x50
 8007136:	d03c      	beq.n	80071b2 <HAL_TIM_ConfigClockSource+0xfa>
 8007138:	2b50      	cmp	r3, #80	; 0x50
 800713a:	d873      	bhi.n	8007224 <HAL_TIM_ConfigClockSource+0x16c>
 800713c:	2b40      	cmp	r3, #64	; 0x40
 800713e:	d058      	beq.n	80071f2 <HAL_TIM_ConfigClockSource+0x13a>
 8007140:	2b40      	cmp	r3, #64	; 0x40
 8007142:	d86f      	bhi.n	8007224 <HAL_TIM_ConfigClockSource+0x16c>
 8007144:	2b30      	cmp	r3, #48	; 0x30
 8007146:	d064      	beq.n	8007212 <HAL_TIM_ConfigClockSource+0x15a>
 8007148:	2b30      	cmp	r3, #48	; 0x30
 800714a:	d86b      	bhi.n	8007224 <HAL_TIM_ConfigClockSource+0x16c>
 800714c:	2b20      	cmp	r3, #32
 800714e:	d060      	beq.n	8007212 <HAL_TIM_ConfigClockSource+0x15a>
 8007150:	2b20      	cmp	r3, #32
 8007152:	d867      	bhi.n	8007224 <HAL_TIM_ConfigClockSource+0x16c>
 8007154:	2b00      	cmp	r3, #0
 8007156:	d05c      	beq.n	8007212 <HAL_TIM_ConfigClockSource+0x15a>
 8007158:	2b10      	cmp	r3, #16
 800715a:	d05a      	beq.n	8007212 <HAL_TIM_ConfigClockSource+0x15a>
 800715c:	e062      	b.n	8007224 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6818      	ldr	r0, [r3, #0]
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	6899      	ldr	r1, [r3, #8]
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	f000 fb5d 	bl	800782c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007180:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	609a      	str	r2, [r3, #8]
      break;
 800718a:	e04f      	b.n	800722c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6818      	ldr	r0, [r3, #0]
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	6899      	ldr	r1, [r3, #8]
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	685a      	ldr	r2, [r3, #4]
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	f000 fb46 	bl	800782c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	689a      	ldr	r2, [r3, #8]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071ae:	609a      	str	r2, [r3, #8]
      break;
 80071b0:	e03c      	b.n	800722c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6818      	ldr	r0, [r3, #0]
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	6859      	ldr	r1, [r3, #4]
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	461a      	mov	r2, r3
 80071c0:	f000 faba 	bl	8007738 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2150      	movs	r1, #80	; 0x50
 80071ca:	4618      	mov	r0, r3
 80071cc:	f000 fb13 	bl	80077f6 <TIM_ITRx_SetConfig>
      break;
 80071d0:	e02c      	b.n	800722c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6818      	ldr	r0, [r3, #0]
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	6859      	ldr	r1, [r3, #4]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	461a      	mov	r2, r3
 80071e0:	f000 fad9 	bl	8007796 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2160      	movs	r1, #96	; 0x60
 80071ea:	4618      	mov	r0, r3
 80071ec:	f000 fb03 	bl	80077f6 <TIM_ITRx_SetConfig>
      break;
 80071f0:	e01c      	b.n	800722c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6818      	ldr	r0, [r3, #0]
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	6859      	ldr	r1, [r3, #4]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	461a      	mov	r2, r3
 8007200:	f000 fa9a 	bl	8007738 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2140      	movs	r1, #64	; 0x40
 800720a:	4618      	mov	r0, r3
 800720c:	f000 faf3 	bl	80077f6 <TIM_ITRx_SetConfig>
      break;
 8007210:	e00c      	b.n	800722c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4619      	mov	r1, r3
 800721c:	4610      	mov	r0, r2
 800721e:	f000 faea 	bl	80077f6 <TIM_ITRx_SetConfig>
      break;
 8007222:	e003      	b.n	800722c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	73fb      	strb	r3, [r7, #15]
      break;
 8007228:	e000      	b.n	800722c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800722a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800723c:	7bfb      	ldrb	r3, [r7, #15]
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007246:	b480      	push	{r7}
 8007248:	b083      	sub	sp, #12
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800724e:	bf00      	nop
 8007250:	370c      	adds	r7, #12
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr

0800725a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800725a:	b480      	push	{r7}
 800725c:	b083      	sub	sp, #12
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007262:	bf00      	nop
 8007264:	370c      	adds	r7, #12
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800726e:	b480      	push	{r7}
 8007270:	b083      	sub	sp, #12
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007276:	bf00      	nop
 8007278:	370c      	adds	r7, #12
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr

08007282 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007282:	b480      	push	{r7}
 8007284:	b083      	sub	sp, #12
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800728a:	bf00      	nop
 800728c:	370c      	adds	r7, #12
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
	...

08007298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a40      	ldr	r2, [pc, #256]	; (80073ac <TIM_Base_SetConfig+0x114>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d013      	beq.n	80072d8 <TIM_Base_SetConfig+0x40>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072b6:	d00f      	beq.n	80072d8 <TIM_Base_SetConfig+0x40>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a3d      	ldr	r2, [pc, #244]	; (80073b0 <TIM_Base_SetConfig+0x118>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d00b      	beq.n	80072d8 <TIM_Base_SetConfig+0x40>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a3c      	ldr	r2, [pc, #240]	; (80073b4 <TIM_Base_SetConfig+0x11c>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d007      	beq.n	80072d8 <TIM_Base_SetConfig+0x40>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a3b      	ldr	r2, [pc, #236]	; (80073b8 <TIM_Base_SetConfig+0x120>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d003      	beq.n	80072d8 <TIM_Base_SetConfig+0x40>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a3a      	ldr	r2, [pc, #232]	; (80073bc <TIM_Base_SetConfig+0x124>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d108      	bne.n	80072ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a2f      	ldr	r2, [pc, #188]	; (80073ac <TIM_Base_SetConfig+0x114>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d02b      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072f8:	d027      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a2c      	ldr	r2, [pc, #176]	; (80073b0 <TIM_Base_SetConfig+0x118>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d023      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a2b      	ldr	r2, [pc, #172]	; (80073b4 <TIM_Base_SetConfig+0x11c>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d01f      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a2a      	ldr	r2, [pc, #168]	; (80073b8 <TIM_Base_SetConfig+0x120>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d01b      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a29      	ldr	r2, [pc, #164]	; (80073bc <TIM_Base_SetConfig+0x124>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d017      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a28      	ldr	r2, [pc, #160]	; (80073c0 <TIM_Base_SetConfig+0x128>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d013      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a27      	ldr	r2, [pc, #156]	; (80073c4 <TIM_Base_SetConfig+0x12c>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d00f      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a26      	ldr	r2, [pc, #152]	; (80073c8 <TIM_Base_SetConfig+0x130>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d00b      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a25      	ldr	r2, [pc, #148]	; (80073cc <TIM_Base_SetConfig+0x134>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d007      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a24      	ldr	r2, [pc, #144]	; (80073d0 <TIM_Base_SetConfig+0x138>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d003      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a23      	ldr	r2, [pc, #140]	; (80073d4 <TIM_Base_SetConfig+0x13c>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d108      	bne.n	800735c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	4313      	orrs	r3, r2
 800735a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	695b      	ldr	r3, [r3, #20]
 8007366:	4313      	orrs	r3, r2
 8007368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	689a      	ldr	r2, [r3, #8]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a0a      	ldr	r2, [pc, #40]	; (80073ac <TIM_Base_SetConfig+0x114>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d003      	beq.n	8007390 <TIM_Base_SetConfig+0xf8>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a0c      	ldr	r2, [pc, #48]	; (80073bc <TIM_Base_SetConfig+0x124>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d103      	bne.n	8007398 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	691a      	ldr	r2, [r3, #16]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	615a      	str	r2, [r3, #20]
}
 800739e:	bf00      	nop
 80073a0:	3714      	adds	r7, #20
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	40010000 	.word	0x40010000
 80073b0:	40000400 	.word	0x40000400
 80073b4:	40000800 	.word	0x40000800
 80073b8:	40000c00 	.word	0x40000c00
 80073bc:	40010400 	.word	0x40010400
 80073c0:	40014000 	.word	0x40014000
 80073c4:	40014400 	.word	0x40014400
 80073c8:	40014800 	.word	0x40014800
 80073cc:	40001800 	.word	0x40001800
 80073d0:	40001c00 	.word	0x40001c00
 80073d4:	40002000 	.word	0x40002000

080073d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073d8:	b480      	push	{r7}
 80073da:	b087      	sub	sp, #28
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a1b      	ldr	r3, [r3, #32]
 80073e6:	f023 0201 	bic.w	r2, r3, #1
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a1b      	ldr	r3, [r3, #32]
 80073f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	699b      	ldr	r3, [r3, #24]
 80073fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f023 0303 	bic.w	r3, r3, #3
 800740e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	4313      	orrs	r3, r2
 8007418:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	f023 0302 	bic.w	r3, r3, #2
 8007420:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	697a      	ldr	r2, [r7, #20]
 8007428:	4313      	orrs	r3, r2
 800742a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a20      	ldr	r2, [pc, #128]	; (80074b0 <TIM_OC1_SetConfig+0xd8>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d003      	beq.n	800743c <TIM_OC1_SetConfig+0x64>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a1f      	ldr	r2, [pc, #124]	; (80074b4 <TIM_OC1_SetConfig+0xdc>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d10c      	bne.n	8007456 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	f023 0308 	bic.w	r3, r3, #8
 8007442:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	697a      	ldr	r2, [r7, #20]
 800744a:	4313      	orrs	r3, r2
 800744c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	f023 0304 	bic.w	r3, r3, #4
 8007454:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a15      	ldr	r2, [pc, #84]	; (80074b0 <TIM_OC1_SetConfig+0xd8>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d003      	beq.n	8007466 <TIM_OC1_SetConfig+0x8e>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a14      	ldr	r2, [pc, #80]	; (80074b4 <TIM_OC1_SetConfig+0xdc>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d111      	bne.n	800748a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800746c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007474:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	695b      	ldr	r3, [r3, #20]
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	4313      	orrs	r3, r2
 800747e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	4313      	orrs	r3, r2
 8007488:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	693a      	ldr	r2, [r7, #16]
 800748e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	685a      	ldr	r2, [r3, #4]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	697a      	ldr	r2, [r7, #20]
 80074a2:	621a      	str	r2, [r3, #32]
}
 80074a4:	bf00      	nop
 80074a6:	371c      	adds	r7, #28
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr
 80074b0:	40010000 	.word	0x40010000
 80074b4:	40010400 	.word	0x40010400

080074b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b087      	sub	sp, #28
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	f023 0210 	bic.w	r2, r3, #16
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a1b      	ldr	r3, [r3, #32]
 80074d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	021b      	lsls	r3, r3, #8
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	f023 0320 	bic.w	r3, r3, #32
 8007502:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	011b      	lsls	r3, r3, #4
 800750a:	697a      	ldr	r2, [r7, #20]
 800750c:	4313      	orrs	r3, r2
 800750e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a22      	ldr	r2, [pc, #136]	; (800759c <TIM_OC2_SetConfig+0xe4>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d003      	beq.n	8007520 <TIM_OC2_SetConfig+0x68>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a21      	ldr	r2, [pc, #132]	; (80075a0 <TIM_OC2_SetConfig+0xe8>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d10d      	bne.n	800753c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007526:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	011b      	lsls	r3, r3, #4
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	4313      	orrs	r3, r2
 8007532:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800753a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a17      	ldr	r2, [pc, #92]	; (800759c <TIM_OC2_SetConfig+0xe4>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d003      	beq.n	800754c <TIM_OC2_SetConfig+0x94>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a16      	ldr	r2, [pc, #88]	; (80075a0 <TIM_OC2_SetConfig+0xe8>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d113      	bne.n	8007574 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007552:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800755a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	695b      	ldr	r3, [r3, #20]
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	4313      	orrs	r3, r2
 8007566:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	693a      	ldr	r2, [r7, #16]
 8007570:	4313      	orrs	r3, r2
 8007572:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	693a      	ldr	r2, [r7, #16]
 8007578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	685a      	ldr	r2, [r3, #4]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	697a      	ldr	r2, [r7, #20]
 800758c:	621a      	str	r2, [r3, #32]
}
 800758e:	bf00      	nop
 8007590:	371c      	adds	r7, #28
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	40010000 	.word	0x40010000
 80075a0:	40010400 	.word	0x40010400

080075a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b087      	sub	sp, #28
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a1b      	ldr	r3, [r3, #32]
 80075b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a1b      	ldr	r3, [r3, #32]
 80075be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	69db      	ldr	r3, [r3, #28]
 80075ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f023 0303 	bic.w	r3, r3, #3
 80075da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	021b      	lsls	r3, r3, #8
 80075f4:	697a      	ldr	r2, [r7, #20]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a21      	ldr	r2, [pc, #132]	; (8007684 <TIM_OC3_SetConfig+0xe0>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d003      	beq.n	800760a <TIM_OC3_SetConfig+0x66>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a20      	ldr	r2, [pc, #128]	; (8007688 <TIM_OC3_SetConfig+0xe4>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d10d      	bne.n	8007626 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007610:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	021b      	lsls	r3, r3, #8
 8007618:	697a      	ldr	r2, [r7, #20]
 800761a:	4313      	orrs	r3, r2
 800761c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007624:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4a16      	ldr	r2, [pc, #88]	; (8007684 <TIM_OC3_SetConfig+0xe0>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d003      	beq.n	8007636 <TIM_OC3_SetConfig+0x92>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a15      	ldr	r2, [pc, #84]	; (8007688 <TIM_OC3_SetConfig+0xe4>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d113      	bne.n	800765e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800763c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007644:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	695b      	ldr	r3, [r3, #20]
 800764a:	011b      	lsls	r3, r3, #4
 800764c:	693a      	ldr	r2, [r7, #16]
 800764e:	4313      	orrs	r3, r2
 8007650:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	011b      	lsls	r3, r3, #4
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	4313      	orrs	r3, r2
 800765c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	693a      	ldr	r2, [r7, #16]
 8007662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	685a      	ldr	r2, [r3, #4]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	697a      	ldr	r2, [r7, #20]
 8007676:	621a      	str	r2, [r3, #32]
}
 8007678:	bf00      	nop
 800767a:	371c      	adds	r7, #28
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr
 8007684:	40010000 	.word	0x40010000
 8007688:	40010400 	.word	0x40010400

0800768c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800768c:	b480      	push	{r7}
 800768e:	b087      	sub	sp, #28
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a1b      	ldr	r3, [r3, #32]
 800769a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a1b      	ldr	r3, [r3, #32]
 80076a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	69db      	ldr	r3, [r3, #28]
 80076b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	021b      	lsls	r3, r3, #8
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80076d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	031b      	lsls	r3, r3, #12
 80076de:	693a      	ldr	r2, [r7, #16]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4a12      	ldr	r2, [pc, #72]	; (8007730 <TIM_OC4_SetConfig+0xa4>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d003      	beq.n	80076f4 <TIM_OC4_SetConfig+0x68>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a11      	ldr	r2, [pc, #68]	; (8007734 <TIM_OC4_SetConfig+0xa8>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d109      	bne.n	8007708 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	695b      	ldr	r3, [r3, #20]
 8007700:	019b      	lsls	r3, r3, #6
 8007702:	697a      	ldr	r2, [r7, #20]
 8007704:	4313      	orrs	r3, r2
 8007706:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	685a      	ldr	r2, [r3, #4]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	621a      	str	r2, [r3, #32]
}
 8007722:	bf00      	nop
 8007724:	371c      	adds	r7, #28
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	40010000 	.word	0x40010000
 8007734:	40010400 	.word	0x40010400

08007738 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007738:	b480      	push	{r7}
 800773a:	b087      	sub	sp, #28
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6a1b      	ldr	r3, [r3, #32]
 8007748:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6a1b      	ldr	r3, [r3, #32]
 800774e:	f023 0201 	bic.w	r2, r3, #1
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	699b      	ldr	r3, [r3, #24]
 800775a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007762:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	011b      	lsls	r3, r3, #4
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	4313      	orrs	r3, r2
 800776c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	f023 030a 	bic.w	r3, r3, #10
 8007774:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007776:	697a      	ldr	r2, [r7, #20]
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	4313      	orrs	r3, r2
 800777c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	693a      	ldr	r2, [r7, #16]
 8007782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	697a      	ldr	r2, [r7, #20]
 8007788:	621a      	str	r2, [r3, #32]
}
 800778a:	bf00      	nop
 800778c:	371c      	adds	r7, #28
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr

08007796 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007796:	b480      	push	{r7}
 8007798:	b087      	sub	sp, #28
 800779a:	af00      	add	r7, sp, #0
 800779c:	60f8      	str	r0, [r7, #12]
 800779e:	60b9      	str	r1, [r7, #8]
 80077a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	f023 0210 	bic.w	r2, r3, #16
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6a1b      	ldr	r3, [r3, #32]
 80077b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80077c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	031b      	lsls	r3, r3, #12
 80077c6:	697a      	ldr	r2, [r7, #20]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80077d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	011b      	lsls	r3, r3, #4
 80077d8:	693a      	ldr	r2, [r7, #16]
 80077da:	4313      	orrs	r3, r2
 80077dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	697a      	ldr	r2, [r7, #20]
 80077e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	693a      	ldr	r2, [r7, #16]
 80077e8:	621a      	str	r2, [r3, #32]
}
 80077ea:	bf00      	nop
 80077ec:	371c      	adds	r7, #28
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr

080077f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80077f6:	b480      	push	{r7}
 80077f8:	b085      	sub	sp, #20
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
 80077fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800780c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	4313      	orrs	r3, r2
 8007814:	f043 0307 	orr.w	r3, r3, #7
 8007818:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	609a      	str	r2, [r3, #8]
}
 8007820:	bf00      	nop
 8007822:	3714      	adds	r7, #20
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800782c:	b480      	push	{r7}
 800782e:	b087      	sub	sp, #28
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]
 8007838:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007846:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	021a      	lsls	r2, r3, #8
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	431a      	orrs	r2, r3
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	4313      	orrs	r3, r2
 8007854:	697a      	ldr	r2, [r7, #20]
 8007856:	4313      	orrs	r3, r2
 8007858:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	697a      	ldr	r2, [r7, #20]
 800785e:	609a      	str	r2, [r3, #8]
}
 8007860:	bf00      	nop
 8007862:	371c      	adds	r7, #28
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800786c:	b480      	push	{r7}
 800786e:	b087      	sub	sp, #28
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	f003 031f 	and.w	r3, r3, #31
 800787e:	2201      	movs	r2, #1
 8007880:	fa02 f303 	lsl.w	r3, r2, r3
 8007884:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6a1a      	ldr	r2, [r3, #32]
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	43db      	mvns	r3, r3
 800788e:	401a      	ands	r2, r3
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6a1a      	ldr	r2, [r3, #32]
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	f003 031f 	and.w	r3, r3, #31
 800789e:	6879      	ldr	r1, [r7, #4]
 80078a0:	fa01 f303 	lsl.w	r3, r1, r3
 80078a4:	431a      	orrs	r2, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	621a      	str	r2, [r3, #32]
}
 80078aa:	bf00      	nop
 80078ac:	371c      	adds	r7, #28
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr
	...

080078b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d101      	bne.n	80078d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80078cc:	2302      	movs	r3, #2
 80078ce:	e05a      	b.n	8007986 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2202      	movs	r2, #2
 80078dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	4313      	orrs	r3, r2
 8007900:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a21      	ldr	r2, [pc, #132]	; (8007994 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d022      	beq.n	800795a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800791c:	d01d      	beq.n	800795a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a1d      	ldr	r2, [pc, #116]	; (8007998 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d018      	beq.n	800795a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a1b      	ldr	r2, [pc, #108]	; (800799c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d013      	beq.n	800795a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a1a      	ldr	r2, [pc, #104]	; (80079a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d00e      	beq.n	800795a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a18      	ldr	r2, [pc, #96]	; (80079a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d009      	beq.n	800795a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a17      	ldr	r2, [pc, #92]	; (80079a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d004      	beq.n	800795a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a15      	ldr	r2, [pc, #84]	; (80079ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d10c      	bne.n	8007974 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007960:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	68ba      	ldr	r2, [r7, #8]
 8007968:	4313      	orrs	r3, r2
 800796a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68ba      	ldr	r2, [r7, #8]
 8007972:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3714      	adds	r7, #20
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	40010000 	.word	0x40010000
 8007998:	40000400 	.word	0x40000400
 800799c:	40000800 	.word	0x40000800
 80079a0:	40000c00 	.word	0x40000c00
 80079a4:	40010400 	.word	0x40010400
 80079a8:	40014000 	.word	0x40014000
 80079ac:	40001800 	.word	0x40001800

080079b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80079b8:	bf00      	nop
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80079cc:	bf00      	nop
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d101      	bne.n	80079ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e03f      	b.n	8007a6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d106      	bne.n	8007a04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f7fa fe7c 	bl	80026fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2224      	movs	r2, #36	; 0x24
 8007a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	68da      	ldr	r2, [r3, #12]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 f929 	bl	8007c74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	691a      	ldr	r2, [r3, #16]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	695a      	ldr	r2, [r3, #20]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68da      	ldr	r2, [r3, #12]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2220      	movs	r2, #32
 8007a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2220      	movs	r2, #32
 8007a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3708      	adds	r7, #8
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a72:	b580      	push	{r7, lr}
 8007a74:	b08a      	sub	sp, #40	; 0x28
 8007a76:	af02      	add	r7, sp, #8
 8007a78:	60f8      	str	r0, [r7, #12]
 8007a7a:	60b9      	str	r1, [r7, #8]
 8007a7c:	603b      	str	r3, [r7, #0]
 8007a7e:	4613      	mov	r3, r2
 8007a80:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007a82:	2300      	movs	r3, #0
 8007a84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b20      	cmp	r3, #32
 8007a90:	d17c      	bne.n	8007b8c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d002      	beq.n	8007a9e <HAL_UART_Transmit+0x2c>
 8007a98:	88fb      	ldrh	r3, [r7, #6]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d101      	bne.n	8007aa2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e075      	b.n	8007b8e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d101      	bne.n	8007ab0 <HAL_UART_Transmit+0x3e>
 8007aac:	2302      	movs	r3, #2
 8007aae:	e06e      	b.n	8007b8e <HAL_UART_Transmit+0x11c>
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2221      	movs	r2, #33	; 0x21
 8007ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ac6:	f7fb f87b 	bl	8002bc0 <HAL_GetTick>
 8007aca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	88fa      	ldrh	r2, [r7, #6]
 8007ad0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	88fa      	ldrh	r2, [r7, #6]
 8007ad6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ae0:	d108      	bne.n	8007af4 <HAL_UART_Transmit+0x82>
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d104      	bne.n	8007af4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007aea:	2300      	movs	r3, #0
 8007aec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	61bb      	str	r3, [r7, #24]
 8007af2:	e003      	b.n	8007afc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007af8:	2300      	movs	r3, #0
 8007afa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007b04:	e02a      	b.n	8007b5c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	9300      	str	r3, [sp, #0]
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	2180      	movs	r1, #128	; 0x80
 8007b10:	68f8      	ldr	r0, [r7, #12]
 8007b12:	f000 f840 	bl	8007b96 <UART_WaitOnFlagUntilTimeout>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d001      	beq.n	8007b20 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	e036      	b.n	8007b8e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d10b      	bne.n	8007b3e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	881b      	ldrh	r3, [r3, #0]
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	3302      	adds	r3, #2
 8007b3a:	61bb      	str	r3, [r7, #24]
 8007b3c:	e007      	b.n	8007b4e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	781a      	ldrb	r2, [r3, #0]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	3b01      	subs	r3, #1
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d1cf      	bne.n	8007b06 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	9300      	str	r3, [sp, #0]
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	2140      	movs	r1, #64	; 0x40
 8007b70:	68f8      	ldr	r0, [r7, #12]
 8007b72:	f000 f810 	bl	8007b96 <UART_WaitOnFlagUntilTimeout>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d001      	beq.n	8007b80 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	e006      	b.n	8007b8e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2220      	movs	r2, #32
 8007b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	e000      	b.n	8007b8e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007b8c:	2302      	movs	r3, #2
  }
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3720      	adds	r7, #32
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b090      	sub	sp, #64	; 0x40
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	60f8      	str	r0, [r7, #12]
 8007b9e:	60b9      	str	r1, [r7, #8]
 8007ba0:	603b      	str	r3, [r7, #0]
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ba6:	e050      	b.n	8007c4a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ba8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bae:	d04c      	beq.n	8007c4a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d007      	beq.n	8007bc6 <UART_WaitOnFlagUntilTimeout+0x30>
 8007bb6:	f7fb f803 	bl	8002bc0 <HAL_GetTick>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d241      	bcs.n	8007c4a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	330c      	adds	r3, #12
 8007bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd0:	e853 3f00 	ldrex	r3, [r3]
 8007bd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	330c      	adds	r3, #12
 8007be4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007be6:	637a      	str	r2, [r7, #52]	; 0x34
 8007be8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007bec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bee:	e841 2300 	strex	r3, r2, [r1]
 8007bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d1e5      	bne.n	8007bc6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	3314      	adds	r3, #20
 8007c00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	e853 3f00 	ldrex	r3, [r3]
 8007c08:	613b      	str	r3, [r7, #16]
   return(result);
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	f023 0301 	bic.w	r3, r3, #1
 8007c10:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	3314      	adds	r3, #20
 8007c18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c1a:	623a      	str	r2, [r7, #32]
 8007c1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c1e:	69f9      	ldr	r1, [r7, #28]
 8007c20:	6a3a      	ldr	r2, [r7, #32]
 8007c22:	e841 2300 	strex	r3, r2, [r1]
 8007c26:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d1e5      	bne.n	8007bfa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2220      	movs	r2, #32
 8007c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2220      	movs	r2, #32
 8007c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e00f      	b.n	8007c6a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	4013      	ands	r3, r2
 8007c54:	68ba      	ldr	r2, [r7, #8]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	bf0c      	ite	eq
 8007c5a:	2301      	moveq	r3, #1
 8007c5c:	2300      	movne	r3, #0
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	461a      	mov	r2, r3
 8007c62:	79fb      	ldrb	r3, [r7, #7]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d09f      	beq.n	8007ba8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3740      	adds	r7, #64	; 0x40
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
	...

08007c74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c78:	b09f      	sub	sp, #124	; 0x7c
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c8a:	68d9      	ldr	r1, [r3, #12]
 8007c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	ea40 0301 	orr.w	r3, r0, r1
 8007c94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c98:	689a      	ldr	r2, [r3, #8]
 8007c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	431a      	orrs	r2, r3
 8007ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ca2:	695b      	ldr	r3, [r3, #20]
 8007ca4:	431a      	orrs	r2, r3
 8007ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ca8:	69db      	ldr	r3, [r3, #28]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007cb8:	f021 010c 	bic.w	r1, r1, #12
 8007cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cc2:	430b      	orrs	r3, r1
 8007cc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	695b      	ldr	r3, [r3, #20]
 8007ccc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cd2:	6999      	ldr	r1, [r3, #24]
 8007cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	ea40 0301 	orr.w	r3, r0, r1
 8007cdc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	4bc5      	ldr	r3, [pc, #788]	; (8007ff8 <UART_SetConfig+0x384>)
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d004      	beq.n	8007cf2 <UART_SetConfig+0x7e>
 8007ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	4bc3      	ldr	r3, [pc, #780]	; (8007ffc <UART_SetConfig+0x388>)
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d103      	bne.n	8007cfa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007cf2:	f7fe fb2d 	bl	8006350 <HAL_RCC_GetPCLK2Freq>
 8007cf6:	6778      	str	r0, [r7, #116]	; 0x74
 8007cf8:	e002      	b.n	8007d00 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007cfa:	f7fe fb15 	bl	8006328 <HAL_RCC_GetPCLK1Freq>
 8007cfe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d02:	69db      	ldr	r3, [r3, #28]
 8007d04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d08:	f040 80b6 	bne.w	8007e78 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d0e:	461c      	mov	r4, r3
 8007d10:	f04f 0500 	mov.w	r5, #0
 8007d14:	4622      	mov	r2, r4
 8007d16:	462b      	mov	r3, r5
 8007d18:	1891      	adds	r1, r2, r2
 8007d1a:	6439      	str	r1, [r7, #64]	; 0x40
 8007d1c:	415b      	adcs	r3, r3
 8007d1e:	647b      	str	r3, [r7, #68]	; 0x44
 8007d20:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007d24:	1912      	adds	r2, r2, r4
 8007d26:	eb45 0303 	adc.w	r3, r5, r3
 8007d2a:	f04f 0000 	mov.w	r0, #0
 8007d2e:	f04f 0100 	mov.w	r1, #0
 8007d32:	00d9      	lsls	r1, r3, #3
 8007d34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d38:	00d0      	lsls	r0, r2, #3
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	1911      	adds	r1, r2, r4
 8007d40:	6639      	str	r1, [r7, #96]	; 0x60
 8007d42:	416b      	adcs	r3, r5
 8007d44:	667b      	str	r3, [r7, #100]	; 0x64
 8007d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	f04f 0300 	mov.w	r3, #0
 8007d50:	1891      	adds	r1, r2, r2
 8007d52:	63b9      	str	r1, [r7, #56]	; 0x38
 8007d54:	415b      	adcs	r3, r3
 8007d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007d5c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007d60:	f7f8 ffa2 	bl	8000ca8 <__aeabi_uldivmod>
 8007d64:	4602      	mov	r2, r0
 8007d66:	460b      	mov	r3, r1
 8007d68:	4ba5      	ldr	r3, [pc, #660]	; (8008000 <UART_SetConfig+0x38c>)
 8007d6a:	fba3 2302 	umull	r2, r3, r3, r2
 8007d6e:	095b      	lsrs	r3, r3, #5
 8007d70:	011e      	lsls	r6, r3, #4
 8007d72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d74:	461c      	mov	r4, r3
 8007d76:	f04f 0500 	mov.w	r5, #0
 8007d7a:	4622      	mov	r2, r4
 8007d7c:	462b      	mov	r3, r5
 8007d7e:	1891      	adds	r1, r2, r2
 8007d80:	6339      	str	r1, [r7, #48]	; 0x30
 8007d82:	415b      	adcs	r3, r3
 8007d84:	637b      	str	r3, [r7, #52]	; 0x34
 8007d86:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007d8a:	1912      	adds	r2, r2, r4
 8007d8c:	eb45 0303 	adc.w	r3, r5, r3
 8007d90:	f04f 0000 	mov.w	r0, #0
 8007d94:	f04f 0100 	mov.w	r1, #0
 8007d98:	00d9      	lsls	r1, r3, #3
 8007d9a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d9e:	00d0      	lsls	r0, r2, #3
 8007da0:	4602      	mov	r2, r0
 8007da2:	460b      	mov	r3, r1
 8007da4:	1911      	adds	r1, r2, r4
 8007da6:	65b9      	str	r1, [r7, #88]	; 0x58
 8007da8:	416b      	adcs	r3, r5
 8007daa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	461a      	mov	r2, r3
 8007db2:	f04f 0300 	mov.w	r3, #0
 8007db6:	1891      	adds	r1, r2, r2
 8007db8:	62b9      	str	r1, [r7, #40]	; 0x28
 8007dba:	415b      	adcs	r3, r3
 8007dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007dc2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007dc6:	f7f8 ff6f 	bl	8000ca8 <__aeabi_uldivmod>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	460b      	mov	r3, r1
 8007dce:	4b8c      	ldr	r3, [pc, #560]	; (8008000 <UART_SetConfig+0x38c>)
 8007dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8007dd4:	095b      	lsrs	r3, r3, #5
 8007dd6:	2164      	movs	r1, #100	; 0x64
 8007dd8:	fb01 f303 	mul.w	r3, r1, r3
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	00db      	lsls	r3, r3, #3
 8007de0:	3332      	adds	r3, #50	; 0x32
 8007de2:	4a87      	ldr	r2, [pc, #540]	; (8008000 <UART_SetConfig+0x38c>)
 8007de4:	fba2 2303 	umull	r2, r3, r2, r3
 8007de8:	095b      	lsrs	r3, r3, #5
 8007dea:	005b      	lsls	r3, r3, #1
 8007dec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007df0:	441e      	add	r6, r3
 8007df2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007df4:	4618      	mov	r0, r3
 8007df6:	f04f 0100 	mov.w	r1, #0
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	1894      	adds	r4, r2, r2
 8007e00:	623c      	str	r4, [r7, #32]
 8007e02:	415b      	adcs	r3, r3
 8007e04:	627b      	str	r3, [r7, #36]	; 0x24
 8007e06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e0a:	1812      	adds	r2, r2, r0
 8007e0c:	eb41 0303 	adc.w	r3, r1, r3
 8007e10:	f04f 0400 	mov.w	r4, #0
 8007e14:	f04f 0500 	mov.w	r5, #0
 8007e18:	00dd      	lsls	r5, r3, #3
 8007e1a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007e1e:	00d4      	lsls	r4, r2, #3
 8007e20:	4622      	mov	r2, r4
 8007e22:	462b      	mov	r3, r5
 8007e24:	1814      	adds	r4, r2, r0
 8007e26:	653c      	str	r4, [r7, #80]	; 0x50
 8007e28:	414b      	adcs	r3, r1
 8007e2a:	657b      	str	r3, [r7, #84]	; 0x54
 8007e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	461a      	mov	r2, r3
 8007e32:	f04f 0300 	mov.w	r3, #0
 8007e36:	1891      	adds	r1, r2, r2
 8007e38:	61b9      	str	r1, [r7, #24]
 8007e3a:	415b      	adcs	r3, r3
 8007e3c:	61fb      	str	r3, [r7, #28]
 8007e3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e42:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007e46:	f7f8 ff2f 	bl	8000ca8 <__aeabi_uldivmod>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	4b6c      	ldr	r3, [pc, #432]	; (8008000 <UART_SetConfig+0x38c>)
 8007e50:	fba3 1302 	umull	r1, r3, r3, r2
 8007e54:	095b      	lsrs	r3, r3, #5
 8007e56:	2164      	movs	r1, #100	; 0x64
 8007e58:	fb01 f303 	mul.w	r3, r1, r3
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	00db      	lsls	r3, r3, #3
 8007e60:	3332      	adds	r3, #50	; 0x32
 8007e62:	4a67      	ldr	r2, [pc, #412]	; (8008000 <UART_SetConfig+0x38c>)
 8007e64:	fba2 2303 	umull	r2, r3, r2, r3
 8007e68:	095b      	lsrs	r3, r3, #5
 8007e6a:	f003 0207 	and.w	r2, r3, #7
 8007e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4432      	add	r2, r6
 8007e74:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e76:	e0b9      	b.n	8007fec <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e7a:	461c      	mov	r4, r3
 8007e7c:	f04f 0500 	mov.w	r5, #0
 8007e80:	4622      	mov	r2, r4
 8007e82:	462b      	mov	r3, r5
 8007e84:	1891      	adds	r1, r2, r2
 8007e86:	6139      	str	r1, [r7, #16]
 8007e88:	415b      	adcs	r3, r3
 8007e8a:	617b      	str	r3, [r7, #20]
 8007e8c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007e90:	1912      	adds	r2, r2, r4
 8007e92:	eb45 0303 	adc.w	r3, r5, r3
 8007e96:	f04f 0000 	mov.w	r0, #0
 8007e9a:	f04f 0100 	mov.w	r1, #0
 8007e9e:	00d9      	lsls	r1, r3, #3
 8007ea0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007ea4:	00d0      	lsls	r0, r2, #3
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	eb12 0804 	adds.w	r8, r2, r4
 8007eae:	eb43 0905 	adc.w	r9, r3, r5
 8007eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f04f 0100 	mov.w	r1, #0
 8007ebc:	f04f 0200 	mov.w	r2, #0
 8007ec0:	f04f 0300 	mov.w	r3, #0
 8007ec4:	008b      	lsls	r3, r1, #2
 8007ec6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007eca:	0082      	lsls	r2, r0, #2
 8007ecc:	4640      	mov	r0, r8
 8007ece:	4649      	mov	r1, r9
 8007ed0:	f7f8 feea 	bl	8000ca8 <__aeabi_uldivmod>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	4b49      	ldr	r3, [pc, #292]	; (8008000 <UART_SetConfig+0x38c>)
 8007eda:	fba3 2302 	umull	r2, r3, r3, r2
 8007ede:	095b      	lsrs	r3, r3, #5
 8007ee0:	011e      	lsls	r6, r3, #4
 8007ee2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f04f 0100 	mov.w	r1, #0
 8007eea:	4602      	mov	r2, r0
 8007eec:	460b      	mov	r3, r1
 8007eee:	1894      	adds	r4, r2, r2
 8007ef0:	60bc      	str	r4, [r7, #8]
 8007ef2:	415b      	adcs	r3, r3
 8007ef4:	60fb      	str	r3, [r7, #12]
 8007ef6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007efa:	1812      	adds	r2, r2, r0
 8007efc:	eb41 0303 	adc.w	r3, r1, r3
 8007f00:	f04f 0400 	mov.w	r4, #0
 8007f04:	f04f 0500 	mov.w	r5, #0
 8007f08:	00dd      	lsls	r5, r3, #3
 8007f0a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007f0e:	00d4      	lsls	r4, r2, #3
 8007f10:	4622      	mov	r2, r4
 8007f12:	462b      	mov	r3, r5
 8007f14:	1814      	adds	r4, r2, r0
 8007f16:	64bc      	str	r4, [r7, #72]	; 0x48
 8007f18:	414b      	adcs	r3, r1
 8007f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	4618      	mov	r0, r3
 8007f22:	f04f 0100 	mov.w	r1, #0
 8007f26:	f04f 0200 	mov.w	r2, #0
 8007f2a:	f04f 0300 	mov.w	r3, #0
 8007f2e:	008b      	lsls	r3, r1, #2
 8007f30:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007f34:	0082      	lsls	r2, r0, #2
 8007f36:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007f3a:	f7f8 feb5 	bl	8000ca8 <__aeabi_uldivmod>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	460b      	mov	r3, r1
 8007f42:	4b2f      	ldr	r3, [pc, #188]	; (8008000 <UART_SetConfig+0x38c>)
 8007f44:	fba3 1302 	umull	r1, r3, r3, r2
 8007f48:	095b      	lsrs	r3, r3, #5
 8007f4a:	2164      	movs	r1, #100	; 0x64
 8007f4c:	fb01 f303 	mul.w	r3, r1, r3
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	011b      	lsls	r3, r3, #4
 8007f54:	3332      	adds	r3, #50	; 0x32
 8007f56:	4a2a      	ldr	r2, [pc, #168]	; (8008000 <UART_SetConfig+0x38c>)
 8007f58:	fba2 2303 	umull	r2, r3, r2, r3
 8007f5c:	095b      	lsrs	r3, r3, #5
 8007f5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f62:	441e      	add	r6, r3
 8007f64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f66:	4618      	mov	r0, r3
 8007f68:	f04f 0100 	mov.w	r1, #0
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	460b      	mov	r3, r1
 8007f70:	1894      	adds	r4, r2, r2
 8007f72:	603c      	str	r4, [r7, #0]
 8007f74:	415b      	adcs	r3, r3
 8007f76:	607b      	str	r3, [r7, #4]
 8007f78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f7c:	1812      	adds	r2, r2, r0
 8007f7e:	eb41 0303 	adc.w	r3, r1, r3
 8007f82:	f04f 0400 	mov.w	r4, #0
 8007f86:	f04f 0500 	mov.w	r5, #0
 8007f8a:	00dd      	lsls	r5, r3, #3
 8007f8c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007f90:	00d4      	lsls	r4, r2, #3
 8007f92:	4622      	mov	r2, r4
 8007f94:	462b      	mov	r3, r5
 8007f96:	eb12 0a00 	adds.w	sl, r2, r0
 8007f9a:	eb43 0b01 	adc.w	fp, r3, r1
 8007f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f04f 0100 	mov.w	r1, #0
 8007fa8:	f04f 0200 	mov.w	r2, #0
 8007fac:	f04f 0300 	mov.w	r3, #0
 8007fb0:	008b      	lsls	r3, r1, #2
 8007fb2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007fb6:	0082      	lsls	r2, r0, #2
 8007fb8:	4650      	mov	r0, sl
 8007fba:	4659      	mov	r1, fp
 8007fbc:	f7f8 fe74 	bl	8000ca8 <__aeabi_uldivmod>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	4b0e      	ldr	r3, [pc, #56]	; (8008000 <UART_SetConfig+0x38c>)
 8007fc6:	fba3 1302 	umull	r1, r3, r3, r2
 8007fca:	095b      	lsrs	r3, r3, #5
 8007fcc:	2164      	movs	r1, #100	; 0x64
 8007fce:	fb01 f303 	mul.w	r3, r1, r3
 8007fd2:	1ad3      	subs	r3, r2, r3
 8007fd4:	011b      	lsls	r3, r3, #4
 8007fd6:	3332      	adds	r3, #50	; 0x32
 8007fd8:	4a09      	ldr	r2, [pc, #36]	; (8008000 <UART_SetConfig+0x38c>)
 8007fda:	fba2 2303 	umull	r2, r3, r2, r3
 8007fde:	095b      	lsrs	r3, r3, #5
 8007fe0:	f003 020f 	and.w	r2, r3, #15
 8007fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4432      	add	r2, r6
 8007fea:	609a      	str	r2, [r3, #8]
}
 8007fec:	bf00      	nop
 8007fee:	377c      	adds	r7, #124	; 0x7c
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ff6:	bf00      	nop
 8007ff8:	40011000 	.word	0x40011000
 8007ffc:	40011400 	.word	0x40011400
 8008000:	51eb851f 	.word	0x51eb851f

08008004 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008004:	b084      	sub	sp, #16
 8008006:	b580      	push	{r7, lr}
 8008008:	b084      	sub	sp, #16
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
 800800e:	f107 001c 	add.w	r0, r7, #28
 8008012:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008018:	2b01      	cmp	r3, #1
 800801a:	d122      	bne.n	8008062 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008020:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008030:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008046:	2b01      	cmp	r3, #1
 8008048:	d105      	bne.n	8008056 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f001 fb1c 	bl	8009694 <USB_CoreReset>
 800805c:	4603      	mov	r3, r0
 800805e:	73fb      	strb	r3, [r7, #15]
 8008060:	e01a      	b.n	8008098 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f001 fb10 	bl	8009694 <USB_CoreReset>
 8008074:	4603      	mov	r3, r0
 8008076:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800807a:	2b00      	cmp	r3, #0
 800807c:	d106      	bne.n	800808c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008082:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	639a      	str	r2, [r3, #56]	; 0x38
 800808a:	e005      	b.n	8008098 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008090:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809a:	2b01      	cmp	r3, #1
 800809c:	d10b      	bne.n	80080b6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	f043 0206 	orr.w	r2, r3, #6
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	f043 0220 	orr.w	r2, r3, #32
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80080b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80080c2:	b004      	add	sp, #16
 80080c4:	4770      	bx	lr
	...

080080c8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b087      	sub	sp, #28
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	4613      	mov	r3, r2
 80080d4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80080d6:	79fb      	ldrb	r3, [r7, #7]
 80080d8:	2b02      	cmp	r3, #2
 80080da:	d165      	bne.n	80081a8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	4a41      	ldr	r2, [pc, #260]	; (80081e4 <USB_SetTurnaroundTime+0x11c>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d906      	bls.n	80080f2 <USB_SetTurnaroundTime+0x2a>
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	4a40      	ldr	r2, [pc, #256]	; (80081e8 <USB_SetTurnaroundTime+0x120>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d202      	bcs.n	80080f2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80080ec:	230f      	movs	r3, #15
 80080ee:	617b      	str	r3, [r7, #20]
 80080f0:	e062      	b.n	80081b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	4a3c      	ldr	r2, [pc, #240]	; (80081e8 <USB_SetTurnaroundTime+0x120>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d306      	bcc.n	8008108 <USB_SetTurnaroundTime+0x40>
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	4a3b      	ldr	r2, [pc, #236]	; (80081ec <USB_SetTurnaroundTime+0x124>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d202      	bcs.n	8008108 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008102:	230e      	movs	r3, #14
 8008104:	617b      	str	r3, [r7, #20]
 8008106:	e057      	b.n	80081b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	4a38      	ldr	r2, [pc, #224]	; (80081ec <USB_SetTurnaroundTime+0x124>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d306      	bcc.n	800811e <USB_SetTurnaroundTime+0x56>
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	4a37      	ldr	r2, [pc, #220]	; (80081f0 <USB_SetTurnaroundTime+0x128>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d202      	bcs.n	800811e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008118:	230d      	movs	r3, #13
 800811a:	617b      	str	r3, [r7, #20]
 800811c:	e04c      	b.n	80081b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	4a33      	ldr	r2, [pc, #204]	; (80081f0 <USB_SetTurnaroundTime+0x128>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d306      	bcc.n	8008134 <USB_SetTurnaroundTime+0x6c>
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	4a32      	ldr	r2, [pc, #200]	; (80081f4 <USB_SetTurnaroundTime+0x12c>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d802      	bhi.n	8008134 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800812e:	230c      	movs	r3, #12
 8008130:	617b      	str	r3, [r7, #20]
 8008132:	e041      	b.n	80081b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	4a2f      	ldr	r2, [pc, #188]	; (80081f4 <USB_SetTurnaroundTime+0x12c>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d906      	bls.n	800814a <USB_SetTurnaroundTime+0x82>
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	4a2e      	ldr	r2, [pc, #184]	; (80081f8 <USB_SetTurnaroundTime+0x130>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d802      	bhi.n	800814a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008144:	230b      	movs	r3, #11
 8008146:	617b      	str	r3, [r7, #20]
 8008148:	e036      	b.n	80081b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	4a2a      	ldr	r2, [pc, #168]	; (80081f8 <USB_SetTurnaroundTime+0x130>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d906      	bls.n	8008160 <USB_SetTurnaroundTime+0x98>
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	4a29      	ldr	r2, [pc, #164]	; (80081fc <USB_SetTurnaroundTime+0x134>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d802      	bhi.n	8008160 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800815a:	230a      	movs	r3, #10
 800815c:	617b      	str	r3, [r7, #20]
 800815e:	e02b      	b.n	80081b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	4a26      	ldr	r2, [pc, #152]	; (80081fc <USB_SetTurnaroundTime+0x134>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d906      	bls.n	8008176 <USB_SetTurnaroundTime+0xae>
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	4a25      	ldr	r2, [pc, #148]	; (8008200 <USB_SetTurnaroundTime+0x138>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d202      	bcs.n	8008176 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008170:	2309      	movs	r3, #9
 8008172:	617b      	str	r3, [r7, #20]
 8008174:	e020      	b.n	80081b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	4a21      	ldr	r2, [pc, #132]	; (8008200 <USB_SetTurnaroundTime+0x138>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d306      	bcc.n	800818c <USB_SetTurnaroundTime+0xc4>
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	4a20      	ldr	r2, [pc, #128]	; (8008204 <USB_SetTurnaroundTime+0x13c>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d802      	bhi.n	800818c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008186:	2308      	movs	r3, #8
 8008188:	617b      	str	r3, [r7, #20]
 800818a:	e015      	b.n	80081b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	4a1d      	ldr	r2, [pc, #116]	; (8008204 <USB_SetTurnaroundTime+0x13c>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d906      	bls.n	80081a2 <USB_SetTurnaroundTime+0xda>
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	4a1c      	ldr	r2, [pc, #112]	; (8008208 <USB_SetTurnaroundTime+0x140>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d202      	bcs.n	80081a2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800819c:	2307      	movs	r3, #7
 800819e:	617b      	str	r3, [r7, #20]
 80081a0:	e00a      	b.n	80081b8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80081a2:	2306      	movs	r3, #6
 80081a4:	617b      	str	r3, [r7, #20]
 80081a6:	e007      	b.n	80081b8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80081a8:	79fb      	ldrb	r3, [r7, #7]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d102      	bne.n	80081b4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80081ae:	2309      	movs	r3, #9
 80081b0:	617b      	str	r3, [r7, #20]
 80081b2:	e001      	b.n	80081b8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80081b4:	2309      	movs	r3, #9
 80081b6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	68da      	ldr	r2, [r3, #12]
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	029b      	lsls	r3, r3, #10
 80081cc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80081d0:	431a      	orrs	r2, r3
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	371c      	adds	r7, #28
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr
 80081e4:	00d8acbf 	.word	0x00d8acbf
 80081e8:	00e4e1c0 	.word	0x00e4e1c0
 80081ec:	00f42400 	.word	0x00f42400
 80081f0:	01067380 	.word	0x01067380
 80081f4:	011a499f 	.word	0x011a499f
 80081f8:	01312cff 	.word	0x01312cff
 80081fc:	014ca43f 	.word	0x014ca43f
 8008200:	016e3600 	.word	0x016e3600
 8008204:	01a6ab1f 	.word	0x01a6ab1f
 8008208:	01e84800 	.word	0x01e84800

0800820c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	f043 0201 	orr.w	r2, r3, #1
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	370c      	adds	r7, #12
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr

0800822e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800822e:	b480      	push	{r7}
 8008230:	b083      	sub	sp, #12
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	f023 0201 	bic.w	r2, r3, #1
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008242:	2300      	movs	r3, #0
}
 8008244:	4618      	mov	r0, r3
 8008246:	370c      	adds	r7, #12
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	460b      	mov	r3, r1
 800825a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800825c:	2300      	movs	r3, #0
 800825e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800826c:	78fb      	ldrb	r3, [r7, #3]
 800826e:	2b01      	cmp	r3, #1
 8008270:	d115      	bne.n	800829e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800827e:	2001      	movs	r0, #1
 8008280:	f7fa fcaa 	bl	8002bd8 <HAL_Delay>
      ms++;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	3301      	adds	r3, #1
 8008288:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f001 f972 	bl	8009574 <USB_GetMode>
 8008290:	4603      	mov	r3, r0
 8008292:	2b01      	cmp	r3, #1
 8008294:	d01e      	beq.n	80082d4 <USB_SetCurrentMode+0x84>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2b31      	cmp	r3, #49	; 0x31
 800829a:	d9f0      	bls.n	800827e <USB_SetCurrentMode+0x2e>
 800829c:	e01a      	b.n	80082d4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800829e:	78fb      	ldrb	r3, [r7, #3]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d115      	bne.n	80082d0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80082b0:	2001      	movs	r0, #1
 80082b2:	f7fa fc91 	bl	8002bd8 <HAL_Delay>
      ms++;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	3301      	adds	r3, #1
 80082ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f001 f959 	bl	8009574 <USB_GetMode>
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d005      	beq.n	80082d4 <USB_SetCurrentMode+0x84>
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2b31      	cmp	r3, #49	; 0x31
 80082cc:	d9f0      	bls.n	80082b0 <USB_SetCurrentMode+0x60>
 80082ce:	e001      	b.n	80082d4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	e005      	b.n	80082e0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2b32      	cmp	r3, #50	; 0x32
 80082d8:	d101      	bne.n	80082de <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	e000      	b.n	80082e0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80082e8:	b084      	sub	sp, #16
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b086      	sub	sp, #24
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
 80082f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80082f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80082fa:	2300      	movs	r3, #0
 80082fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008302:	2300      	movs	r3, #0
 8008304:	613b      	str	r3, [r7, #16]
 8008306:	e009      	b.n	800831c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	3340      	adds	r3, #64	; 0x40
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	4413      	add	r3, r2
 8008312:	2200      	movs	r2, #0
 8008314:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	3301      	adds	r3, #1
 800831a:	613b      	str	r3, [r7, #16]
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	2b0e      	cmp	r3, #14
 8008320:	d9f2      	bls.n	8008308 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008324:	2b00      	cmp	r3, #0
 8008326:	d11c      	bne.n	8008362 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008336:	f043 0302 	orr.w	r3, r3, #2
 800833a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008340:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800834c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008358:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	639a      	str	r2, [r3, #56]	; 0x38
 8008360:	e00b      	b.n	800837a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008366:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008372:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008380:	461a      	mov	r2, r3
 8008382:	2300      	movs	r3, #0
 8008384:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800838c:	4619      	mov	r1, r3
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008394:	461a      	mov	r2, r3
 8008396:	680b      	ldr	r3, [r1, #0]
 8008398:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800839a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800839c:	2b01      	cmp	r3, #1
 800839e:	d10c      	bne.n	80083ba <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80083a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d104      	bne.n	80083b0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80083a6:	2100      	movs	r1, #0
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 f945 	bl	8008638 <USB_SetDevSpeed>
 80083ae:	e008      	b.n	80083c2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80083b0:	2101      	movs	r1, #1
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 f940 	bl	8008638 <USB_SetDevSpeed>
 80083b8:	e003      	b.n	80083c2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80083ba:	2103      	movs	r1, #3
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 f93b 	bl	8008638 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80083c2:	2110      	movs	r1, #16
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 f8f3 	bl	80085b0 <USB_FlushTxFifo>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d001      	beq.n	80083d4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 f90f 	bl	80085f8 <USB_FlushRxFifo>
 80083da:	4603      	mov	r3, r0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d001      	beq.n	80083e4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ea:	461a      	mov	r2, r3
 80083ec:	2300      	movs	r3, #0
 80083ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083f6:	461a      	mov	r2, r3
 80083f8:	2300      	movs	r3, #0
 80083fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008402:	461a      	mov	r2, r3
 8008404:	2300      	movs	r3, #0
 8008406:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008408:	2300      	movs	r3, #0
 800840a:	613b      	str	r3, [r7, #16]
 800840c:	e043      	b.n	8008496 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	015a      	lsls	r2, r3, #5
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	4413      	add	r3, r2
 8008416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008420:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008424:	d118      	bne.n	8008458 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d10a      	bne.n	8008442 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	015a      	lsls	r2, r3, #5
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	4413      	add	r3, r2
 8008434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008438:	461a      	mov	r2, r3
 800843a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800843e:	6013      	str	r3, [r2, #0]
 8008440:	e013      	b.n	800846a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	015a      	lsls	r2, r3, #5
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	4413      	add	r3, r2
 800844a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800844e:	461a      	mov	r2, r3
 8008450:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008454:	6013      	str	r3, [r2, #0]
 8008456:	e008      	b.n	800846a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	015a      	lsls	r2, r3, #5
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	4413      	add	r3, r2
 8008460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008464:	461a      	mov	r2, r3
 8008466:	2300      	movs	r3, #0
 8008468:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	015a      	lsls	r2, r3, #5
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	4413      	add	r3, r2
 8008472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008476:	461a      	mov	r2, r3
 8008478:	2300      	movs	r3, #0
 800847a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	015a      	lsls	r2, r3, #5
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	4413      	add	r3, r2
 8008484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008488:	461a      	mov	r2, r3
 800848a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800848e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	3301      	adds	r3, #1
 8008494:	613b      	str	r3, [r7, #16]
 8008496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008498:	693a      	ldr	r2, [r7, #16]
 800849a:	429a      	cmp	r2, r3
 800849c:	d3b7      	bcc.n	800840e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800849e:	2300      	movs	r3, #0
 80084a0:	613b      	str	r3, [r7, #16]
 80084a2:	e043      	b.n	800852c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	015a      	lsls	r2, r3, #5
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	4413      	add	r3, r2
 80084ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084ba:	d118      	bne.n	80084ee <USB_DevInit+0x206>
    {
      if (i == 0U)
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d10a      	bne.n	80084d8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	015a      	lsls	r2, r3, #5
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	4413      	add	r3, r2
 80084ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ce:	461a      	mov	r2, r3
 80084d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80084d4:	6013      	str	r3, [r2, #0]
 80084d6:	e013      	b.n	8008500 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	015a      	lsls	r2, r3, #5
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	4413      	add	r3, r2
 80084e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084e4:	461a      	mov	r2, r3
 80084e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80084ea:	6013      	str	r3, [r2, #0]
 80084ec:	e008      	b.n	8008500 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	015a      	lsls	r2, r3, #5
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	4413      	add	r3, r2
 80084f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084fa:	461a      	mov	r2, r3
 80084fc:	2300      	movs	r3, #0
 80084fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	015a      	lsls	r2, r3, #5
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	4413      	add	r3, r2
 8008508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800850c:	461a      	mov	r2, r3
 800850e:	2300      	movs	r3, #0
 8008510:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	015a      	lsls	r2, r3, #5
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	4413      	add	r3, r2
 800851a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800851e:	461a      	mov	r2, r3
 8008520:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008524:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	3301      	adds	r3, #1
 800852a:	613b      	str	r3, [r7, #16]
 800852c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852e:	693a      	ldr	r2, [r7, #16]
 8008530:	429a      	cmp	r2, r3
 8008532:	d3b7      	bcc.n	80084a4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008542:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008546:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008554:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008558:	2b00      	cmp	r3, #0
 800855a:	d105      	bne.n	8008568 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	699b      	ldr	r3, [r3, #24]
 8008560:	f043 0210 	orr.w	r2, r3, #16
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	699a      	ldr	r2, [r3, #24]
 800856c:	4b0f      	ldr	r3, [pc, #60]	; (80085ac <USB_DevInit+0x2c4>)
 800856e:	4313      	orrs	r3, r2
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008576:	2b00      	cmp	r3, #0
 8008578:	d005      	beq.n	8008586 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	699b      	ldr	r3, [r3, #24]
 800857e:	f043 0208 	orr.w	r2, r3, #8
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008588:	2b01      	cmp	r3, #1
 800858a:	d107      	bne.n	800859c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	699b      	ldr	r3, [r3, #24]
 8008590:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008594:	f043 0304 	orr.w	r3, r3, #4
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800859c:	7dfb      	ldrb	r3, [r7, #23]
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3718      	adds	r7, #24
 80085a2:	46bd      	mov	sp, r7
 80085a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80085a8:	b004      	add	sp, #16
 80085aa:	4770      	bx	lr
 80085ac:	803c3800 	.word	0x803c3800

080085b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80085ba:	2300      	movs	r3, #0
 80085bc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	019b      	lsls	r3, r3, #6
 80085c2:	f043 0220 	orr.w	r2, r3, #32
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	3301      	adds	r3, #1
 80085ce:	60fb      	str	r3, [r7, #12]
 80085d0:	4a08      	ldr	r2, [pc, #32]	; (80085f4 <USB_FlushTxFifo+0x44>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d901      	bls.n	80085da <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80085d6:	2303      	movs	r3, #3
 80085d8:	e006      	b.n	80085e8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	f003 0320 	and.w	r3, r3, #32
 80085e2:	2b20      	cmp	r3, #32
 80085e4:	d0f1      	beq.n	80085ca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3714      	adds	r7, #20
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr
 80085f4:	00030d40 	.word	0x00030d40

080085f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b085      	sub	sp, #20
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008600:	2300      	movs	r3, #0
 8008602:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2210      	movs	r2, #16
 8008608:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	3301      	adds	r3, #1
 800860e:	60fb      	str	r3, [r7, #12]
 8008610:	4a08      	ldr	r2, [pc, #32]	; (8008634 <USB_FlushRxFifo+0x3c>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d901      	bls.n	800861a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8008616:	2303      	movs	r3, #3
 8008618:	e006      	b.n	8008628 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	f003 0310 	and.w	r3, r3, #16
 8008622:	2b10      	cmp	r3, #16
 8008624:	d0f1      	beq.n	800860a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008626:	2300      	movs	r3, #0
}
 8008628:	4618      	mov	r0, r3
 800862a:	3714      	adds	r7, #20
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr
 8008634:	00030d40 	.word	0x00030d40

08008638 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008638:	b480      	push	{r7}
 800863a:	b085      	sub	sp, #20
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	460b      	mov	r3, r1
 8008642:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	78fb      	ldrb	r3, [r7, #3]
 8008652:	68f9      	ldr	r1, [r7, #12]
 8008654:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008658:	4313      	orrs	r3, r2
 800865a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3714      	adds	r7, #20
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr

0800866a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800866a:	b480      	push	{r7}
 800866c:	b087      	sub	sp, #28
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	f003 0306 	and.w	r3, r3, #6
 8008682:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d102      	bne.n	8008690 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800868a:	2300      	movs	r3, #0
 800868c:	75fb      	strb	r3, [r7, #23]
 800868e:	e00a      	b.n	80086a6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2b02      	cmp	r3, #2
 8008694:	d002      	beq.n	800869c <USB_GetDevSpeed+0x32>
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2b06      	cmp	r3, #6
 800869a:	d102      	bne.n	80086a2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800869c:	2302      	movs	r3, #2
 800869e:	75fb      	strb	r3, [r7, #23]
 80086a0:	e001      	b.n	80086a6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80086a2:	230f      	movs	r3, #15
 80086a4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80086a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	371c      	adds	r7, #28
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	785b      	ldrb	r3, [r3, #1]
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d13a      	bne.n	8008746 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086d6:	69da      	ldr	r2, [r3, #28]
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	f003 030f 	and.w	r3, r3, #15
 80086e0:	2101      	movs	r1, #1
 80086e2:	fa01 f303 	lsl.w	r3, r1, r3
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	68f9      	ldr	r1, [r7, #12]
 80086ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086ee:	4313      	orrs	r3, r2
 80086f0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	015a      	lsls	r2, r3, #5
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	4413      	add	r3, r2
 80086fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008704:	2b00      	cmp	r3, #0
 8008706:	d155      	bne.n	80087b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	015a      	lsls	r2, r3, #5
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	4413      	add	r3, r2
 8008710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	78db      	ldrb	r3, [r3, #3]
 8008722:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008724:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	059b      	lsls	r3, r3, #22
 800872a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800872c:	4313      	orrs	r3, r2
 800872e:	68ba      	ldr	r2, [r7, #8]
 8008730:	0151      	lsls	r1, r2, #5
 8008732:	68fa      	ldr	r2, [r7, #12]
 8008734:	440a      	add	r2, r1
 8008736:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800873a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800873e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008742:	6013      	str	r3, [r2, #0]
 8008744:	e036      	b.n	80087b4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800874c:	69da      	ldr	r2, [r3, #28]
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	f003 030f 	and.w	r3, r3, #15
 8008756:	2101      	movs	r1, #1
 8008758:	fa01 f303 	lsl.w	r3, r1, r3
 800875c:	041b      	lsls	r3, r3, #16
 800875e:	68f9      	ldr	r1, [r7, #12]
 8008760:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008764:	4313      	orrs	r3, r2
 8008766:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	015a      	lsls	r2, r3, #5
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	4413      	add	r3, r2
 8008770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800877a:	2b00      	cmp	r3, #0
 800877c:	d11a      	bne.n	80087b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	015a      	lsls	r2, r3, #5
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	4413      	add	r3, r2
 8008786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	689b      	ldr	r3, [r3, #8]
 8008790:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	78db      	ldrb	r3, [r3, #3]
 8008798:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800879a:	430b      	orrs	r3, r1
 800879c:	4313      	orrs	r3, r2
 800879e:	68ba      	ldr	r2, [r7, #8]
 80087a0:	0151      	lsls	r1, r2, #5
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	440a      	add	r2, r1
 80087a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087b2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3714      	adds	r7, #20
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr
	...

080087c4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	785b      	ldrb	r3, [r3, #1]
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d161      	bne.n	80088a4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	015a      	lsls	r2, r3, #5
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	4413      	add	r3, r2
 80087e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087f6:	d11f      	bne.n	8008838 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	015a      	lsls	r2, r3, #5
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	4413      	add	r3, r2
 8008800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	68ba      	ldr	r2, [r7, #8]
 8008808:	0151      	lsls	r1, r2, #5
 800880a:	68fa      	ldr	r2, [r7, #12]
 800880c:	440a      	add	r2, r1
 800880e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008812:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008816:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	015a      	lsls	r2, r3, #5
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	4413      	add	r3, r2
 8008820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	68ba      	ldr	r2, [r7, #8]
 8008828:	0151      	lsls	r1, r2, #5
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	440a      	add	r2, r1
 800882e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008832:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008836:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800883e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	f003 030f 	and.w	r3, r3, #15
 8008848:	2101      	movs	r1, #1
 800884a:	fa01 f303 	lsl.w	r3, r1, r3
 800884e:	b29b      	uxth	r3, r3
 8008850:	43db      	mvns	r3, r3
 8008852:	68f9      	ldr	r1, [r7, #12]
 8008854:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008858:	4013      	ands	r3, r2
 800885a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008862:	69da      	ldr	r2, [r3, #28]
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	f003 030f 	and.w	r3, r3, #15
 800886c:	2101      	movs	r1, #1
 800886e:	fa01 f303 	lsl.w	r3, r1, r3
 8008872:	b29b      	uxth	r3, r3
 8008874:	43db      	mvns	r3, r3
 8008876:	68f9      	ldr	r1, [r7, #12]
 8008878:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800887c:	4013      	ands	r3, r2
 800887e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	015a      	lsls	r2, r3, #5
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	4413      	add	r3, r2
 8008888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	0159      	lsls	r1, r3, #5
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	440b      	add	r3, r1
 8008896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800889a:	4619      	mov	r1, r3
 800889c:	4b35      	ldr	r3, [pc, #212]	; (8008974 <USB_DeactivateEndpoint+0x1b0>)
 800889e:	4013      	ands	r3, r2
 80088a0:	600b      	str	r3, [r1, #0]
 80088a2:	e060      	b.n	8008966 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	015a      	lsls	r2, r3, #5
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	4413      	add	r3, r2
 80088ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088ba:	d11f      	bne.n	80088fc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	015a      	lsls	r2, r3, #5
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	4413      	add	r3, r2
 80088c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	68ba      	ldr	r2, [r7, #8]
 80088cc:	0151      	lsls	r1, r2, #5
 80088ce:	68fa      	ldr	r2, [r7, #12]
 80088d0:	440a      	add	r2, r1
 80088d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80088da:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	015a      	lsls	r2, r3, #5
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	4413      	add	r3, r2
 80088e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	68ba      	ldr	r2, [r7, #8]
 80088ec:	0151      	lsls	r1, r2, #5
 80088ee:	68fa      	ldr	r2, [r7, #12]
 80088f0:	440a      	add	r2, r1
 80088f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008902:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	f003 030f 	and.w	r3, r3, #15
 800890c:	2101      	movs	r1, #1
 800890e:	fa01 f303 	lsl.w	r3, r1, r3
 8008912:	041b      	lsls	r3, r3, #16
 8008914:	43db      	mvns	r3, r3
 8008916:	68f9      	ldr	r1, [r7, #12]
 8008918:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800891c:	4013      	ands	r3, r2
 800891e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008926:	69da      	ldr	r2, [r3, #28]
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	f003 030f 	and.w	r3, r3, #15
 8008930:	2101      	movs	r1, #1
 8008932:	fa01 f303 	lsl.w	r3, r1, r3
 8008936:	041b      	lsls	r3, r3, #16
 8008938:	43db      	mvns	r3, r3
 800893a:	68f9      	ldr	r1, [r7, #12]
 800893c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008940:	4013      	ands	r3, r2
 8008942:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	015a      	lsls	r2, r3, #5
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	4413      	add	r3, r2
 800894c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	0159      	lsls	r1, r3, #5
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	440b      	add	r3, r1
 800895a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800895e:	4619      	mov	r1, r3
 8008960:	4b05      	ldr	r3, [pc, #20]	; (8008978 <USB_DeactivateEndpoint+0x1b4>)
 8008962:	4013      	ands	r3, r2
 8008964:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	3714      	adds	r7, #20
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr
 8008974:	ec337800 	.word	0xec337800
 8008978:	eff37800 	.word	0xeff37800

0800897c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b08a      	sub	sp, #40	; 0x28
 8008980:	af02      	add	r7, sp, #8
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	4613      	mov	r3, r2
 8008988:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	785b      	ldrb	r3, [r3, #1]
 8008998:	2b01      	cmp	r3, #1
 800899a:	f040 815c 	bne.w	8008c56 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	695b      	ldr	r3, [r3, #20]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d132      	bne.n	8008a0c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	015a      	lsls	r2, r3, #5
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	4413      	add	r3, r2
 80089ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089b2:	691b      	ldr	r3, [r3, #16]
 80089b4:	69ba      	ldr	r2, [r7, #24]
 80089b6:	0151      	lsls	r1, r2, #5
 80089b8:	69fa      	ldr	r2, [r7, #28]
 80089ba:	440a      	add	r2, r1
 80089bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80089c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80089c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	015a      	lsls	r2, r3, #5
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	4413      	add	r3, r2
 80089d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	69ba      	ldr	r2, [r7, #24]
 80089da:	0151      	lsls	r1, r2, #5
 80089dc:	69fa      	ldr	r2, [r7, #28]
 80089de:	440a      	add	r2, r1
 80089e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	015a      	lsls	r2, r3, #5
 80089ee:	69fb      	ldr	r3, [r7, #28]
 80089f0:	4413      	add	r3, r2
 80089f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089f6:	691b      	ldr	r3, [r3, #16]
 80089f8:	69ba      	ldr	r2, [r7, #24]
 80089fa:	0151      	lsls	r1, r2, #5
 80089fc:	69fa      	ldr	r2, [r7, #28]
 80089fe:	440a      	add	r2, r1
 8008a00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a04:	0cdb      	lsrs	r3, r3, #19
 8008a06:	04db      	lsls	r3, r3, #19
 8008a08:	6113      	str	r3, [r2, #16]
 8008a0a:	e074      	b.n	8008af6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	015a      	lsls	r2, r3, #5
 8008a10:	69fb      	ldr	r3, [r7, #28]
 8008a12:	4413      	add	r3, r2
 8008a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a18:	691b      	ldr	r3, [r3, #16]
 8008a1a:	69ba      	ldr	r2, [r7, #24]
 8008a1c:	0151      	lsls	r1, r2, #5
 8008a1e:	69fa      	ldr	r2, [r7, #28]
 8008a20:	440a      	add	r2, r1
 8008a22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a26:	0cdb      	lsrs	r3, r3, #19
 8008a28:	04db      	lsls	r3, r3, #19
 8008a2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a2c:	69bb      	ldr	r3, [r7, #24]
 8008a2e:	015a      	lsls	r2, r3, #5
 8008a30:	69fb      	ldr	r3, [r7, #28]
 8008a32:	4413      	add	r3, r2
 8008a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	69ba      	ldr	r2, [r7, #24]
 8008a3c:	0151      	lsls	r1, r2, #5
 8008a3e:	69fa      	ldr	r2, [r7, #28]
 8008a40:	440a      	add	r2, r1
 8008a42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a46:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008a4a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008a4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	015a      	lsls	r2, r3, #5
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	4413      	add	r3, r2
 8008a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a5c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	6959      	ldr	r1, [r3, #20]
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	440b      	add	r3, r1
 8008a68:	1e59      	subs	r1, r3, #1
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008a72:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008a74:	4b9d      	ldr	r3, [pc, #628]	; (8008cec <USB_EPStartXfer+0x370>)
 8008a76:	400b      	ands	r3, r1
 8008a78:	69b9      	ldr	r1, [r7, #24]
 8008a7a:	0148      	lsls	r0, r1, #5
 8008a7c:	69f9      	ldr	r1, [r7, #28]
 8008a7e:	4401      	add	r1, r0
 8008a80:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008a84:	4313      	orrs	r3, r2
 8008a86:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	015a      	lsls	r2, r3, #5
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	4413      	add	r3, r2
 8008a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a94:	691a      	ldr	r2, [r3, #16]
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	695b      	ldr	r3, [r3, #20]
 8008a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a9e:	69b9      	ldr	r1, [r7, #24]
 8008aa0:	0148      	lsls	r0, r1, #5
 8008aa2:	69f9      	ldr	r1, [r7, #28]
 8008aa4:	4401      	add	r1, r0
 8008aa6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	78db      	ldrb	r3, [r3, #3]
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d11f      	bne.n	8008af6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	015a      	lsls	r2, r3, #5
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	4413      	add	r3, r2
 8008abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ac2:	691b      	ldr	r3, [r3, #16]
 8008ac4:	69ba      	ldr	r2, [r7, #24]
 8008ac6:	0151      	lsls	r1, r2, #5
 8008ac8:	69fa      	ldr	r2, [r7, #28]
 8008aca:	440a      	add	r2, r1
 8008acc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ad0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008ad4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	015a      	lsls	r2, r3, #5
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	4413      	add	r3, r2
 8008ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ae2:	691b      	ldr	r3, [r3, #16]
 8008ae4:	69ba      	ldr	r2, [r7, #24]
 8008ae6:	0151      	lsls	r1, r2, #5
 8008ae8:	69fa      	ldr	r2, [r7, #28]
 8008aea:	440a      	add	r2, r1
 8008aec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008af0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008af4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008af6:	79fb      	ldrb	r3, [r7, #7]
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d14b      	bne.n	8008b94 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	691b      	ldr	r3, [r3, #16]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d009      	beq.n	8008b18 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008b04:	69bb      	ldr	r3, [r7, #24]
 8008b06:	015a      	lsls	r2, r3, #5
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b10:	461a      	mov	r2, r3
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	78db      	ldrb	r3, [r3, #3]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d128      	bne.n	8008b72 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d110      	bne.n	8008b52 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	015a      	lsls	r2, r3, #5
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	4413      	add	r3, r2
 8008b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	69ba      	ldr	r2, [r7, #24]
 8008b40:	0151      	lsls	r1, r2, #5
 8008b42:	69fa      	ldr	r2, [r7, #28]
 8008b44:	440a      	add	r2, r1
 8008b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b4e:	6013      	str	r3, [r2, #0]
 8008b50:	e00f      	b.n	8008b72 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	015a      	lsls	r2, r3, #5
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	4413      	add	r3, r2
 8008b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	69ba      	ldr	r2, [r7, #24]
 8008b62:	0151      	lsls	r1, r2, #5
 8008b64:	69fa      	ldr	r2, [r7, #28]
 8008b66:	440a      	add	r2, r1
 8008b68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b70:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	015a      	lsls	r2, r3, #5
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	4413      	add	r3, r2
 8008b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	69ba      	ldr	r2, [r7, #24]
 8008b82:	0151      	lsls	r1, r2, #5
 8008b84:	69fa      	ldr	r2, [r7, #28]
 8008b86:	440a      	add	r2, r1
 8008b88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b8c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b90:	6013      	str	r3, [r2, #0]
 8008b92:	e12f      	b.n	8008df4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	015a      	lsls	r2, r3, #5
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	69ba      	ldr	r2, [r7, #24]
 8008ba4:	0151      	lsls	r1, r2, #5
 8008ba6:	69fa      	ldr	r2, [r7, #28]
 8008ba8:	440a      	add	r2, r1
 8008baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008bb2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	78db      	ldrb	r3, [r3, #3]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d015      	beq.n	8008be8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	695b      	ldr	r3, [r3, #20]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	f000 8117 	beq.w	8008df4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008bc6:	69fb      	ldr	r3, [r7, #28]
 8008bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	f003 030f 	and.w	r3, r3, #15
 8008bd6:	2101      	movs	r1, #1
 8008bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8008bdc:	69f9      	ldr	r1, [r7, #28]
 8008bde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008be2:	4313      	orrs	r3, r2
 8008be4:	634b      	str	r3, [r1, #52]	; 0x34
 8008be6:	e105      	b.n	8008df4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d110      	bne.n	8008c1a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	015a      	lsls	r2, r3, #5
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	4413      	add	r3, r2
 8008c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	69ba      	ldr	r2, [r7, #24]
 8008c08:	0151      	lsls	r1, r2, #5
 8008c0a:	69fa      	ldr	r2, [r7, #28]
 8008c0c:	440a      	add	r2, r1
 8008c0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008c16:	6013      	str	r3, [r2, #0]
 8008c18:	e00f      	b.n	8008c3a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008c1a:	69bb      	ldr	r3, [r7, #24]
 8008c1c:	015a      	lsls	r2, r3, #5
 8008c1e:	69fb      	ldr	r3, [r7, #28]
 8008c20:	4413      	add	r3, r2
 8008c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	69ba      	ldr	r2, [r7, #24]
 8008c2a:	0151      	lsls	r1, r2, #5
 8008c2c:	69fa      	ldr	r2, [r7, #28]
 8008c2e:	440a      	add	r2, r1
 8008c30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c38:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	68d9      	ldr	r1, [r3, #12]
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	781a      	ldrb	r2, [r3, #0]
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	695b      	ldr	r3, [r3, #20]
 8008c46:	b298      	uxth	r0, r3
 8008c48:	79fb      	ldrb	r3, [r7, #7]
 8008c4a:	9300      	str	r3, [sp, #0]
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	f000 fa2b 	bl	80090aa <USB_WritePacket>
 8008c54:	e0ce      	b.n	8008df4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	015a      	lsls	r2, r3, #5
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c62:	691b      	ldr	r3, [r3, #16]
 8008c64:	69ba      	ldr	r2, [r7, #24]
 8008c66:	0151      	lsls	r1, r2, #5
 8008c68:	69fa      	ldr	r2, [r7, #28]
 8008c6a:	440a      	add	r2, r1
 8008c6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c70:	0cdb      	lsrs	r3, r3, #19
 8008c72:	04db      	lsls	r3, r3, #19
 8008c74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	015a      	lsls	r2, r3, #5
 8008c7a:	69fb      	ldr	r3, [r7, #28]
 8008c7c:	4413      	add	r3, r2
 8008c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c82:	691b      	ldr	r3, [r3, #16]
 8008c84:	69ba      	ldr	r2, [r7, #24]
 8008c86:	0151      	lsls	r1, r2, #5
 8008c88:	69fa      	ldr	r2, [r7, #28]
 8008c8a:	440a      	add	r2, r1
 8008c8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008c98:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	695b      	ldr	r3, [r3, #20]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d126      	bne.n	8008cf0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008ca2:	69bb      	ldr	r3, [r7, #24]
 8008ca4:	015a      	lsls	r2, r3, #5
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	4413      	add	r3, r2
 8008caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cae:	691a      	ldr	r2, [r3, #16]
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cb8:	69b9      	ldr	r1, [r7, #24]
 8008cba:	0148      	lsls	r0, r1, #5
 8008cbc:	69f9      	ldr	r1, [r7, #28]
 8008cbe:	4401      	add	r1, r0
 8008cc0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008cc8:	69bb      	ldr	r3, [r7, #24]
 8008cca:	015a      	lsls	r2, r3, #5
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	4413      	add	r3, r2
 8008cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cd4:	691b      	ldr	r3, [r3, #16]
 8008cd6:	69ba      	ldr	r2, [r7, #24]
 8008cd8:	0151      	lsls	r1, r2, #5
 8008cda:	69fa      	ldr	r2, [r7, #28]
 8008cdc:	440a      	add	r2, r1
 8008cde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ce2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ce6:	6113      	str	r3, [r2, #16]
 8008ce8:	e036      	b.n	8008d58 <USB_EPStartXfer+0x3dc>
 8008cea:	bf00      	nop
 8008cec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	695a      	ldr	r2, [r3, #20]
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	1e5a      	subs	r2, r3, #1
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d04:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008d06:	69bb      	ldr	r3, [r7, #24]
 8008d08:	015a      	lsls	r2, r3, #5
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d12:	691a      	ldr	r2, [r3, #16]
 8008d14:	8afb      	ldrh	r3, [r7, #22]
 8008d16:	04d9      	lsls	r1, r3, #19
 8008d18:	4b39      	ldr	r3, [pc, #228]	; (8008e00 <USB_EPStartXfer+0x484>)
 8008d1a:	400b      	ands	r3, r1
 8008d1c:	69b9      	ldr	r1, [r7, #24]
 8008d1e:	0148      	lsls	r0, r1, #5
 8008d20:	69f9      	ldr	r1, [r7, #28]
 8008d22:	4401      	add	r1, r0
 8008d24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	015a      	lsls	r2, r3, #5
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	4413      	add	r3, r2
 8008d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d38:	691a      	ldr	r2, [r3, #16]
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	8af9      	ldrh	r1, [r7, #22]
 8008d40:	fb01 f303 	mul.w	r3, r1, r3
 8008d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d48:	69b9      	ldr	r1, [r7, #24]
 8008d4a:	0148      	lsls	r0, r1, #5
 8008d4c:	69f9      	ldr	r1, [r7, #28]
 8008d4e:	4401      	add	r1, r0
 8008d50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008d54:	4313      	orrs	r3, r2
 8008d56:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008d58:	79fb      	ldrb	r3, [r7, #7]
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d10d      	bne.n	8008d7a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d009      	beq.n	8008d7a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	68d9      	ldr	r1, [r3, #12]
 8008d6a:	69bb      	ldr	r3, [r7, #24]
 8008d6c:	015a      	lsls	r2, r3, #5
 8008d6e:	69fb      	ldr	r3, [r7, #28]
 8008d70:	4413      	add	r3, r2
 8008d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d76:	460a      	mov	r2, r1
 8008d78:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	78db      	ldrb	r3, [r3, #3]
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d128      	bne.n	8008dd4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d110      	bne.n	8008db4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	015a      	lsls	r2, r3, #5
 8008d96:	69fb      	ldr	r3, [r7, #28]
 8008d98:	4413      	add	r3, r2
 8008d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	69ba      	ldr	r2, [r7, #24]
 8008da2:	0151      	lsls	r1, r2, #5
 8008da4:	69fa      	ldr	r2, [r7, #28]
 8008da6:	440a      	add	r2, r1
 8008da8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008db0:	6013      	str	r3, [r2, #0]
 8008db2:	e00f      	b.n	8008dd4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008db4:	69bb      	ldr	r3, [r7, #24]
 8008db6:	015a      	lsls	r2, r3, #5
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	4413      	add	r3, r2
 8008dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	69ba      	ldr	r2, [r7, #24]
 8008dc4:	0151      	lsls	r1, r2, #5
 8008dc6:	69fa      	ldr	r2, [r7, #28]
 8008dc8:	440a      	add	r2, r1
 8008dca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dd2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008dd4:	69bb      	ldr	r3, [r7, #24]
 8008dd6:	015a      	lsls	r2, r3, #5
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	4413      	add	r3, r2
 8008ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	69ba      	ldr	r2, [r7, #24]
 8008de4:	0151      	lsls	r1, r2, #5
 8008de6:	69fa      	ldr	r2, [r7, #28]
 8008de8:	440a      	add	r2, r1
 8008dea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008df2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008df4:	2300      	movs	r3, #0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3720      	adds	r7, #32
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	1ff80000 	.word	0x1ff80000

08008e04 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b087      	sub	sp, #28
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	4613      	mov	r3, r2
 8008e10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	785b      	ldrb	r3, [r3, #1]
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	f040 80cd 	bne.w	8008fc0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	695b      	ldr	r3, [r3, #20]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d132      	bne.n	8008e94 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	015a      	lsls	r2, r3, #5
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	4413      	add	r3, r2
 8008e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e3a:	691b      	ldr	r3, [r3, #16]
 8008e3c:	693a      	ldr	r2, [r7, #16]
 8008e3e:	0151      	lsls	r1, r2, #5
 8008e40:	697a      	ldr	r2, [r7, #20]
 8008e42:	440a      	add	r2, r1
 8008e44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008e4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008e50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	015a      	lsls	r2, r3, #5
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	4413      	add	r3, r2
 8008e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	693a      	ldr	r2, [r7, #16]
 8008e62:	0151      	lsls	r1, r2, #5
 8008e64:	697a      	ldr	r2, [r7, #20]
 8008e66:	440a      	add	r2, r1
 8008e68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	015a      	lsls	r2, r3, #5
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	4413      	add	r3, r2
 8008e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e7e:	691b      	ldr	r3, [r3, #16]
 8008e80:	693a      	ldr	r2, [r7, #16]
 8008e82:	0151      	lsls	r1, r2, #5
 8008e84:	697a      	ldr	r2, [r7, #20]
 8008e86:	440a      	add	r2, r1
 8008e88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e8c:	0cdb      	lsrs	r3, r3, #19
 8008e8e:	04db      	lsls	r3, r3, #19
 8008e90:	6113      	str	r3, [r2, #16]
 8008e92:	e04e      	b.n	8008f32 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	015a      	lsls	r2, r3, #5
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	693a      	ldr	r2, [r7, #16]
 8008ea4:	0151      	lsls	r1, r2, #5
 8008ea6:	697a      	ldr	r2, [r7, #20]
 8008ea8:	440a      	add	r2, r1
 8008eaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eae:	0cdb      	lsrs	r3, r3, #19
 8008eb0:	04db      	lsls	r3, r3, #19
 8008eb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	015a      	lsls	r2, r3, #5
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	4413      	add	r3, r2
 8008ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	693a      	ldr	r2, [r7, #16]
 8008ec4:	0151      	lsls	r1, r2, #5
 8008ec6:	697a      	ldr	r2, [r7, #20]
 8008ec8:	440a      	add	r2, r1
 8008eca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ece:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008ed2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008ed6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	695a      	ldr	r2, [r3, #20]
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d903      	bls.n	8008eec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	689a      	ldr	r2, [r3, #8]
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	015a      	lsls	r2, r3, #5
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	693a      	ldr	r2, [r7, #16]
 8008efc:	0151      	lsls	r1, r2, #5
 8008efe:	697a      	ldr	r2, [r7, #20]
 8008f00:	440a      	add	r2, r1
 8008f02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	015a      	lsls	r2, r3, #5
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	4413      	add	r3, r2
 8008f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f18:	691a      	ldr	r2, [r3, #16]
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	695b      	ldr	r3, [r3, #20]
 8008f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f22:	6939      	ldr	r1, [r7, #16]
 8008f24:	0148      	lsls	r0, r1, #5
 8008f26:	6979      	ldr	r1, [r7, #20]
 8008f28:	4401      	add	r1, r0
 8008f2a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008f32:	79fb      	ldrb	r3, [r7, #7]
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d11e      	bne.n	8008f76 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	691b      	ldr	r3, [r3, #16]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d009      	beq.n	8008f54 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	015a      	lsls	r2, r3, #5
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	4413      	add	r3, r2
 8008f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	691b      	ldr	r3, [r3, #16]
 8008f52:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	015a      	lsls	r2, r3, #5
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	693a      	ldr	r2, [r7, #16]
 8008f64:	0151      	lsls	r1, r2, #5
 8008f66:	697a      	ldr	r2, [r7, #20]
 8008f68:	440a      	add	r2, r1
 8008f6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f72:	6013      	str	r3, [r2, #0]
 8008f74:	e092      	b.n	800909c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	015a      	lsls	r2, r3, #5
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	693a      	ldr	r2, [r7, #16]
 8008f86:	0151      	lsls	r1, r2, #5
 8008f88:	697a      	ldr	r2, [r7, #20]
 8008f8a:	440a      	add	r2, r1
 8008f8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f94:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	695b      	ldr	r3, [r3, #20]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d07e      	beq.n	800909c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	f003 030f 	and.w	r3, r3, #15
 8008fae:	2101      	movs	r1, #1
 8008fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8008fb4:	6979      	ldr	r1, [r7, #20]
 8008fb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	634b      	str	r3, [r1, #52]	; 0x34
 8008fbe:	e06d      	b.n	800909c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	015a      	lsls	r2, r3, #5
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	4413      	add	r3, r2
 8008fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fcc:	691b      	ldr	r3, [r3, #16]
 8008fce:	693a      	ldr	r2, [r7, #16]
 8008fd0:	0151      	lsls	r1, r2, #5
 8008fd2:	697a      	ldr	r2, [r7, #20]
 8008fd4:	440a      	add	r2, r1
 8008fd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fda:	0cdb      	lsrs	r3, r3, #19
 8008fdc:	04db      	lsls	r3, r3, #19
 8008fde:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	015a      	lsls	r2, r3, #5
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	4413      	add	r3, r2
 8008fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	693a      	ldr	r2, [r7, #16]
 8008ff0:	0151      	lsls	r1, r2, #5
 8008ff2:	697a      	ldr	r2, [r7, #20]
 8008ff4:	440a      	add	r2, r1
 8008ff6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ffa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008ffe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009002:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	695b      	ldr	r3, [r3, #20]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d003      	beq.n	8009014 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	689a      	ldr	r2, [r3, #8]
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	015a      	lsls	r2, r3, #5
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	4413      	add	r3, r2
 800901c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009020:	691b      	ldr	r3, [r3, #16]
 8009022:	693a      	ldr	r2, [r7, #16]
 8009024:	0151      	lsls	r1, r2, #5
 8009026:	697a      	ldr	r2, [r7, #20]
 8009028:	440a      	add	r2, r1
 800902a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800902e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009032:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	015a      	lsls	r2, r3, #5
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	4413      	add	r3, r2
 800903c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009040:	691a      	ldr	r2, [r3, #16]
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800904a:	6939      	ldr	r1, [r7, #16]
 800904c:	0148      	lsls	r0, r1, #5
 800904e:	6979      	ldr	r1, [r7, #20]
 8009050:	4401      	add	r1, r0
 8009052:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009056:	4313      	orrs	r3, r2
 8009058:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800905a:	79fb      	ldrb	r3, [r7, #7]
 800905c:	2b01      	cmp	r3, #1
 800905e:	d10d      	bne.n	800907c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d009      	beq.n	800907c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	68d9      	ldr	r1, [r3, #12]
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	015a      	lsls	r2, r3, #5
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	4413      	add	r3, r2
 8009074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009078:	460a      	mov	r2, r1
 800907a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	015a      	lsls	r2, r3, #5
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	4413      	add	r3, r2
 8009084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	693a      	ldr	r2, [r7, #16]
 800908c:	0151      	lsls	r1, r2, #5
 800908e:	697a      	ldr	r2, [r7, #20]
 8009090:	440a      	add	r2, r1
 8009092:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009096:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800909a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800909c:	2300      	movs	r3, #0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	371c      	adds	r7, #28
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr

080090aa <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80090aa:	b480      	push	{r7}
 80090ac:	b089      	sub	sp, #36	; 0x24
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	60f8      	str	r0, [r7, #12]
 80090b2:	60b9      	str	r1, [r7, #8]
 80090b4:	4611      	mov	r1, r2
 80090b6:	461a      	mov	r2, r3
 80090b8:	460b      	mov	r3, r1
 80090ba:	71fb      	strb	r3, [r7, #7]
 80090bc:	4613      	mov	r3, r2
 80090be:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80090c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d123      	bne.n	8009118 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80090d0:	88bb      	ldrh	r3, [r7, #4]
 80090d2:	3303      	adds	r3, #3
 80090d4:	089b      	lsrs	r3, r3, #2
 80090d6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80090d8:	2300      	movs	r3, #0
 80090da:	61bb      	str	r3, [r7, #24]
 80090dc:	e018      	b.n	8009110 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80090de:	79fb      	ldrb	r3, [r7, #7]
 80090e0:	031a      	lsls	r2, r3, #12
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	4413      	add	r3, r2
 80090e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090ea:	461a      	mov	r2, r3
 80090ec:	69fb      	ldr	r3, [r7, #28]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80090f2:	69fb      	ldr	r3, [r7, #28]
 80090f4:	3301      	adds	r3, #1
 80090f6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80090f8:	69fb      	ldr	r3, [r7, #28]
 80090fa:	3301      	adds	r3, #1
 80090fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80090fe:	69fb      	ldr	r3, [r7, #28]
 8009100:	3301      	adds	r3, #1
 8009102:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009104:	69fb      	ldr	r3, [r7, #28]
 8009106:	3301      	adds	r3, #1
 8009108:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	3301      	adds	r3, #1
 800910e:	61bb      	str	r3, [r7, #24]
 8009110:	69ba      	ldr	r2, [r7, #24]
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	429a      	cmp	r2, r3
 8009116:	d3e2      	bcc.n	80090de <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009118:	2300      	movs	r3, #0
}
 800911a:	4618      	mov	r0, r3
 800911c:	3724      	adds	r7, #36	; 0x24
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr

08009126 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009126:	b480      	push	{r7}
 8009128:	b08b      	sub	sp, #44	; 0x2c
 800912a:	af00      	add	r7, sp, #0
 800912c:	60f8      	str	r0, [r7, #12]
 800912e:	60b9      	str	r1, [r7, #8]
 8009130:	4613      	mov	r3, r2
 8009132:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800913c:	88fb      	ldrh	r3, [r7, #6]
 800913e:	089b      	lsrs	r3, r3, #2
 8009140:	b29b      	uxth	r3, r3
 8009142:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009144:	88fb      	ldrh	r3, [r7, #6]
 8009146:	f003 0303 	and.w	r3, r3, #3
 800914a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800914c:	2300      	movs	r3, #0
 800914e:	623b      	str	r3, [r7, #32]
 8009150:	e014      	b.n	800917c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915c:	601a      	str	r2, [r3, #0]
    pDest++;
 800915e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009160:	3301      	adds	r3, #1
 8009162:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009166:	3301      	adds	r3, #1
 8009168:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800916a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916c:	3301      	adds	r3, #1
 800916e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009172:	3301      	adds	r3, #1
 8009174:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009176:	6a3b      	ldr	r3, [r7, #32]
 8009178:	3301      	adds	r3, #1
 800917a:	623b      	str	r3, [r7, #32]
 800917c:	6a3a      	ldr	r2, [r7, #32]
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	429a      	cmp	r2, r3
 8009182:	d3e6      	bcc.n	8009152 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009184:	8bfb      	ldrh	r3, [r7, #30]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d01e      	beq.n	80091c8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800918a:	2300      	movs	r3, #0
 800918c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009194:	461a      	mov	r2, r3
 8009196:	f107 0310 	add.w	r3, r7, #16
 800919a:	6812      	ldr	r2, [r2, #0]
 800919c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800919e:	693a      	ldr	r2, [r7, #16]
 80091a0:	6a3b      	ldr	r3, [r7, #32]
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	00db      	lsls	r3, r3, #3
 80091a6:	fa22 f303 	lsr.w	r3, r2, r3
 80091aa:	b2da      	uxtb	r2, r3
 80091ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ae:	701a      	strb	r2, [r3, #0]
      i++;
 80091b0:	6a3b      	ldr	r3, [r7, #32]
 80091b2:	3301      	adds	r3, #1
 80091b4:	623b      	str	r3, [r7, #32]
      pDest++;
 80091b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b8:	3301      	adds	r3, #1
 80091ba:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80091bc:	8bfb      	ldrh	r3, [r7, #30]
 80091be:	3b01      	subs	r3, #1
 80091c0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80091c2:	8bfb      	ldrh	r3, [r7, #30]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d1ea      	bne.n	800919e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80091c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	372c      	adds	r7, #44	; 0x2c
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr

080091d6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80091d6:	b480      	push	{r7}
 80091d8:	b085      	sub	sp, #20
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
 80091de:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	785b      	ldrb	r3, [r3, #1]
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d12c      	bne.n	800924c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	015a      	lsls	r2, r3, #5
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	4413      	add	r3, r2
 80091fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	db12      	blt.n	800922a <USB_EPSetStall+0x54>
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00f      	beq.n	800922a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	015a      	lsls	r2, r3, #5
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	4413      	add	r3, r2
 8009212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	68ba      	ldr	r2, [r7, #8]
 800921a:	0151      	lsls	r1, r2, #5
 800921c:	68fa      	ldr	r2, [r7, #12]
 800921e:	440a      	add	r2, r1
 8009220:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009224:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009228:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	015a      	lsls	r2, r3, #5
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	4413      	add	r3, r2
 8009232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	68ba      	ldr	r2, [r7, #8]
 800923a:	0151      	lsls	r1, r2, #5
 800923c:	68fa      	ldr	r2, [r7, #12]
 800923e:	440a      	add	r2, r1
 8009240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009244:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009248:	6013      	str	r3, [r2, #0]
 800924a:	e02b      	b.n	80092a4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	015a      	lsls	r2, r3, #5
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	4413      	add	r3, r2
 8009254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	db12      	blt.n	8009284 <USB_EPSetStall+0xae>
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d00f      	beq.n	8009284 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	015a      	lsls	r2, r3, #5
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	4413      	add	r3, r2
 800926c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	68ba      	ldr	r2, [r7, #8]
 8009274:	0151      	lsls	r1, r2, #5
 8009276:	68fa      	ldr	r2, [r7, #12]
 8009278:	440a      	add	r2, r1
 800927a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800927e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009282:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	015a      	lsls	r2, r3, #5
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	4413      	add	r3, r2
 800928c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	68ba      	ldr	r2, [r7, #8]
 8009294:	0151      	lsls	r1, r2, #5
 8009296:	68fa      	ldr	r2, [r7, #12]
 8009298:	440a      	add	r2, r1
 800929a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800929e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80092a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3714      	adds	r7, #20
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr

080092b2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80092b2:	b480      	push	{r7}
 80092b4:	b085      	sub	sp, #20
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
 80092ba:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	785b      	ldrb	r3, [r3, #1]
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d128      	bne.n	8009320 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	015a      	lsls	r2, r3, #5
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	4413      	add	r3, r2
 80092d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	68ba      	ldr	r2, [r7, #8]
 80092de:	0151      	lsls	r1, r2, #5
 80092e0:	68fa      	ldr	r2, [r7, #12]
 80092e2:	440a      	add	r2, r1
 80092e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80092ec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	78db      	ldrb	r3, [r3, #3]
 80092f2:	2b03      	cmp	r3, #3
 80092f4:	d003      	beq.n	80092fe <USB_EPClearStall+0x4c>
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	78db      	ldrb	r3, [r3, #3]
 80092fa:	2b02      	cmp	r3, #2
 80092fc:	d138      	bne.n	8009370 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	015a      	lsls	r2, r3, #5
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	4413      	add	r3, r2
 8009306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	68ba      	ldr	r2, [r7, #8]
 800930e:	0151      	lsls	r1, r2, #5
 8009310:	68fa      	ldr	r2, [r7, #12]
 8009312:	440a      	add	r2, r1
 8009314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800931c:	6013      	str	r3, [r2, #0]
 800931e:	e027      	b.n	8009370 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	015a      	lsls	r2, r3, #5
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	4413      	add	r3, r2
 8009328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	68ba      	ldr	r2, [r7, #8]
 8009330:	0151      	lsls	r1, r2, #5
 8009332:	68fa      	ldr	r2, [r7, #12]
 8009334:	440a      	add	r2, r1
 8009336:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800933a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800933e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	78db      	ldrb	r3, [r3, #3]
 8009344:	2b03      	cmp	r3, #3
 8009346:	d003      	beq.n	8009350 <USB_EPClearStall+0x9e>
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	78db      	ldrb	r3, [r3, #3]
 800934c:	2b02      	cmp	r3, #2
 800934e:	d10f      	bne.n	8009370 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	015a      	lsls	r2, r3, #5
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	4413      	add	r3, r2
 8009358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	68ba      	ldr	r2, [r7, #8]
 8009360:	0151      	lsls	r1, r2, #5
 8009362:	68fa      	ldr	r2, [r7, #12]
 8009364:	440a      	add	r2, r1
 8009366:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800936a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800936e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	3714      	adds	r7, #20
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr

0800937e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800937e:	b480      	push	{r7}
 8009380:	b085      	sub	sp, #20
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
 8009386:	460b      	mov	r3, r1
 8009388:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68fa      	ldr	r2, [r7, #12]
 8009398:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800939c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80093a0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	78fb      	ldrb	r3, [r7, #3]
 80093ac:	011b      	lsls	r3, r3, #4
 80093ae:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80093b2:	68f9      	ldr	r1, [r7, #12]
 80093b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093b8:	4313      	orrs	r3, r2
 80093ba:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80093bc:	2300      	movs	r3, #0
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3714      	adds	r7, #20
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr

080093ca <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80093ca:	b480      	push	{r7}
 80093cc:	b085      	sub	sp, #20
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	68fa      	ldr	r2, [r7, #12]
 80093e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80093e4:	f023 0303 	bic.w	r3, r3, #3
 80093e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	68fa      	ldr	r2, [r7, #12]
 80093f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093f8:	f023 0302 	bic.w	r3, r3, #2
 80093fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	3714      	adds	r7, #20
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800940c:	b480      	push	{r7}
 800940e:	b085      	sub	sp, #20
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009426:	f023 0303 	bic.w	r3, r3, #3
 800942a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	68fa      	ldr	r2, [r7, #12]
 8009436:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800943a:	f043 0302 	orr.w	r3, r3, #2
 800943e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009440:	2300      	movs	r3, #0
}
 8009442:	4618      	mov	r0, r3
 8009444:	3714      	adds	r7, #20
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr

0800944e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800944e:	b480      	push	{r7}
 8009450:	b085      	sub	sp, #20
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	695b      	ldr	r3, [r3, #20]
 800945a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	699b      	ldr	r3, [r3, #24]
 8009460:	68fa      	ldr	r2, [r7, #12]
 8009462:	4013      	ands	r3, r2
 8009464:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009466:	68fb      	ldr	r3, [r7, #12]
}
 8009468:	4618      	mov	r0, r3
 800946a:	3714      	adds	r7, #20
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009474:	b480      	push	{r7}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009486:	699b      	ldr	r3, [r3, #24]
 8009488:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009490:	69db      	ldr	r3, [r3, #28]
 8009492:	68ba      	ldr	r2, [r7, #8]
 8009494:	4013      	ands	r3, r2
 8009496:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	0c1b      	lsrs	r3, r3, #16
}
 800949c:	4618      	mov	r0, r3
 800949e:	3714      	adds	r7, #20
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094ba:	699b      	ldr	r3, [r3, #24]
 80094bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094c4:	69db      	ldr	r3, [r3, #28]
 80094c6:	68ba      	ldr	r2, [r7, #8]
 80094c8:	4013      	ands	r3, r2
 80094ca:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	b29b      	uxth	r3, r3
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3714      	adds	r7, #20
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80094dc:	b480      	push	{r7}
 80094de:	b085      	sub	sp, #20
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	460b      	mov	r3, r1
 80094e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80094ec:	78fb      	ldrb	r3, [r7, #3]
 80094ee:	015a      	lsls	r2, r3, #5
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	4413      	add	r3, r2
 80094f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009502:	695b      	ldr	r3, [r3, #20]
 8009504:	68ba      	ldr	r2, [r7, #8]
 8009506:	4013      	ands	r3, r2
 8009508:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800950a:	68bb      	ldr	r3, [r7, #8]
}
 800950c:	4618      	mov	r0, r3
 800950e:	3714      	adds	r7, #20
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009518:	b480      	push	{r7}
 800951a:	b087      	sub	sp, #28
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	460b      	mov	r3, r1
 8009522:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800952e:	691b      	ldr	r3, [r3, #16]
 8009530:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800953a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800953c:	78fb      	ldrb	r3, [r7, #3]
 800953e:	f003 030f 	and.w	r3, r3, #15
 8009542:	68fa      	ldr	r2, [r7, #12]
 8009544:	fa22 f303 	lsr.w	r3, r2, r3
 8009548:	01db      	lsls	r3, r3, #7
 800954a:	b2db      	uxtb	r3, r3
 800954c:	693a      	ldr	r2, [r7, #16]
 800954e:	4313      	orrs	r3, r2
 8009550:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009552:	78fb      	ldrb	r3, [r7, #3]
 8009554:	015a      	lsls	r2, r3, #5
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	4413      	add	r3, r2
 800955a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	693a      	ldr	r2, [r7, #16]
 8009562:	4013      	ands	r3, r2
 8009564:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009566:	68bb      	ldr	r3, [r7, #8]
}
 8009568:	4618      	mov	r0, r3
 800956a:	371c      	adds	r7, #28
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	695b      	ldr	r3, [r3, #20]
 8009580:	f003 0301 	and.w	r3, r3, #1
}
 8009584:	4618      	mov	r0, r3
 8009586:	370c      	adds	r7, #12
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009590:	b480      	push	{r7}
 8009592:	b085      	sub	sp, #20
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	68fa      	ldr	r2, [r7, #12]
 80095a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095aa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80095ae:	f023 0307 	bic.w	r3, r3, #7
 80095b2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	68fa      	ldr	r2, [r7, #12]
 80095be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095c6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80095c8:	2300      	movs	r3, #0
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3714      	adds	r7, #20
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr
	...

080095d8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80095d8:	b480      	push	{r7}
 80095da:	b087      	sub	sp, #28
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	460b      	mov	r3, r1
 80095e2:	607a      	str	r2, [r7, #4]
 80095e4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	333c      	adds	r3, #60	; 0x3c
 80095ee:	3304      	adds	r3, #4
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	4a26      	ldr	r2, [pc, #152]	; (8009690 <USB_EP0_OutStart+0xb8>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d90a      	bls.n	8009612 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009608:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800960c:	d101      	bne.n	8009612 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800960e:	2300      	movs	r3, #0
 8009610:	e037      	b.n	8009682 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009618:	461a      	mov	r2, r3
 800961a:	2300      	movs	r3, #0
 800961c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009624:	691b      	ldr	r3, [r3, #16]
 8009626:	697a      	ldr	r2, [r7, #20]
 8009628:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800962c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009630:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	697a      	ldr	r2, [r7, #20]
 800963c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009640:	f043 0318 	orr.w	r3, r3, #24
 8009644:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	697a      	ldr	r2, [r7, #20]
 8009650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009654:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009658:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800965a:	7afb      	ldrb	r3, [r7, #11]
 800965c:	2b01      	cmp	r3, #1
 800965e:	d10f      	bne.n	8009680 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009666:	461a      	mov	r2, r3
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	697a      	ldr	r2, [r7, #20]
 8009676:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800967a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800967e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009680:	2300      	movs	r3, #0
}
 8009682:	4618      	mov	r0, r3
 8009684:	371c      	adds	r7, #28
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr
 800968e:	bf00      	nop
 8009690:	4f54300a 	.word	0x4f54300a

08009694 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009694:	b480      	push	{r7}
 8009696:	b085      	sub	sp, #20
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800969c:	2300      	movs	r3, #0
 800969e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	3301      	adds	r3, #1
 80096a4:	60fb      	str	r3, [r7, #12]
 80096a6:	4a13      	ldr	r2, [pc, #76]	; (80096f4 <USB_CoreReset+0x60>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d901      	bls.n	80096b0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80096ac:	2303      	movs	r3, #3
 80096ae:	e01a      	b.n	80096e6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	691b      	ldr	r3, [r3, #16]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	daf3      	bge.n	80096a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80096b8:	2300      	movs	r3, #0
 80096ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	691b      	ldr	r3, [r3, #16]
 80096c0:	f043 0201 	orr.w	r2, r3, #1
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	3301      	adds	r3, #1
 80096cc:	60fb      	str	r3, [r7, #12]
 80096ce:	4a09      	ldr	r2, [pc, #36]	; (80096f4 <USB_CoreReset+0x60>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d901      	bls.n	80096d8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80096d4:	2303      	movs	r3, #3
 80096d6:	e006      	b.n	80096e6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	691b      	ldr	r3, [r3, #16]
 80096dc:	f003 0301 	and.w	r3, r3, #1
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d0f1      	beq.n	80096c8 <USB_CoreReset+0x34>

  return HAL_OK;
 80096e4:	2300      	movs	r3, #0
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3714      	adds	r7, #20
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop
 80096f4:	00030d40 	.word	0x00030d40

080096f8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80096fc:	4904      	ldr	r1, [pc, #16]	; (8009710 <MX_FATFS_Init+0x18>)
 80096fe:	4805      	ldr	r0, [pc, #20]	; (8009714 <MX_FATFS_Init+0x1c>)
 8009700:	f002 f9f0 	bl	800bae4 <FATFS_LinkDriver>
 8009704:	4603      	mov	r3, r0
 8009706:	461a      	mov	r2, r3
 8009708:	4b03      	ldr	r3, [pc, #12]	; (8009718 <MX_FATFS_Init+0x20>)
 800970a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800970c:	bf00      	nop
 800970e:	bd80      	pop	{r7, pc}
 8009710:	20000fb0 	.word	0x20000fb0
 8009714:	2000000c 	.word	0x2000000c
 8009718:	20000fb4 	.word	0x20000fb4

0800971c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	4603      	mov	r3, r0
 8009724:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8009726:	79fb      	ldrb	r3, [r7, #7]
 8009728:	4618      	mov	r0, r3
 800972a:	f000 f9dd 	bl	8009ae8 <USER_SPI_initialize>
 800972e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8009730:	4618      	mov	r0, r3
 8009732:	3708      	adds	r7, #8
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	4603      	mov	r3, r0
 8009740:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8009742:	79fb      	ldrb	r3, [r7, #7]
 8009744:	4618      	mov	r0, r3
 8009746:	f000 fab9 	bl	8009cbc <USER_SPI_status>
 800974a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800974c:	4618      	mov	r0, r3
 800974e:	3708      	adds	r7, #8
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	60b9      	str	r1, [r7, #8]
 800975c:	607a      	str	r2, [r7, #4]
 800975e:	603b      	str	r3, [r7, #0]
 8009760:	4603      	mov	r3, r0
 8009762:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8009764:	7bf8      	ldrb	r0, [r7, #15]
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	68b9      	ldr	r1, [r7, #8]
 800976c:	f000 fabc 	bl	8009ce8 <USER_SPI_read>
 8009770:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8009772:	4618      	mov	r0, r3
 8009774:	3710      	adds	r7, #16
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}

0800977a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800977a:	b580      	push	{r7, lr}
 800977c:	b084      	sub	sp, #16
 800977e:	af00      	add	r7, sp, #0
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	607a      	str	r2, [r7, #4]
 8009784:	603b      	str	r3, [r7, #0]
 8009786:	4603      	mov	r3, r0
 8009788:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800978a:	7bf8      	ldrb	r0, [r7, #15]
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	68b9      	ldr	r1, [r7, #8]
 8009792:	f000 fb0f 	bl	8009db4 <USER_SPI_write>
 8009796:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8009798:	4618      	mov	r0, r3
 800979a:	3710      	adds	r7, #16
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	4603      	mov	r3, r0
 80097a8:	603a      	str	r2, [r7, #0]
 80097aa:	71fb      	strb	r3, [r7, #7]
 80097ac:	460b      	mov	r3, r1
 80097ae:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 80097b0:	79b9      	ldrb	r1, [r7, #6]
 80097b2:	79fb      	ldrb	r3, [r7, #7]
 80097b4:	683a      	ldr	r2, [r7, #0]
 80097b6:	4618      	mov	r0, r3
 80097b8:	f000 fb78 	bl	8009eac <USER_SPI_ioctl>
 80097bc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3708      	adds	r7, #8
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
	...

080097c8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80097d0:	f7f9 f9f6 	bl	8002bc0 <HAL_GetTick>
 80097d4:	4603      	mov	r3, r0
 80097d6:	4a04      	ldr	r2, [pc, #16]	; (80097e8 <SPI_Timer_On+0x20>)
 80097d8:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80097da:	4a04      	ldr	r2, [pc, #16]	; (80097ec <SPI_Timer_On+0x24>)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6013      	str	r3, [r2, #0]
}
 80097e0:	bf00      	nop
 80097e2:	3708      	adds	r7, #8
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}
 80097e8:	20001418 	.word	0x20001418
 80097ec:	2000141c 	.word	0x2000141c

080097f0 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80097f0:	b580      	push	{r7, lr}
 80097f2:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80097f4:	f7f9 f9e4 	bl	8002bc0 <HAL_GetTick>
 80097f8:	4602      	mov	r2, r0
 80097fa:	4b06      	ldr	r3, [pc, #24]	; (8009814 <SPI_Timer_Status+0x24>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	1ad2      	subs	r2, r2, r3
 8009800:	4b05      	ldr	r3, [pc, #20]	; (8009818 <SPI_Timer_Status+0x28>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	429a      	cmp	r2, r3
 8009806:	bf34      	ite	cc
 8009808:	2301      	movcc	r3, #1
 800980a:	2300      	movcs	r3, #0
 800980c:	b2db      	uxtb	r3, r3
}
 800980e:	4618      	mov	r0, r3
 8009810:	bd80      	pop	{r7, pc}
 8009812:	bf00      	nop
 8009814:	20001418 	.word	0x20001418
 8009818:	2000141c 	.word	0x2000141c

0800981c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b086      	sub	sp, #24
 8009820:	af02      	add	r7, sp, #8
 8009822:	4603      	mov	r3, r0
 8009824:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009826:	f107 020f 	add.w	r2, r7, #15
 800982a:	1df9      	adds	r1, r7, #7
 800982c:	2332      	movs	r3, #50	; 0x32
 800982e:	9300      	str	r3, [sp, #0]
 8009830:	2301      	movs	r3, #1
 8009832:	4804      	ldr	r0, [pc, #16]	; (8009844 <xchg_spi+0x28>)
 8009834:	f7fc fe29 	bl	800648a <HAL_SPI_TransmitReceive>
    return rxDat;
 8009838:	7bfb      	ldrb	r3, [r7, #15]
}
 800983a:	4618      	mov	r0, r3
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	200006d4 	.word	0x200006d4

08009848 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8009848:	b590      	push	{r4, r7, lr}
 800984a:	b085      	sub	sp, #20
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8009852:	2300      	movs	r3, #0
 8009854:	60fb      	str	r3, [r7, #12]
 8009856:	e00a      	b.n	800986e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	18d4      	adds	r4, r2, r3
 800985e:	20ff      	movs	r0, #255	; 0xff
 8009860:	f7ff ffdc 	bl	800981c <xchg_spi>
 8009864:	4603      	mov	r3, r0
 8009866:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	3301      	adds	r3, #1
 800986c:	60fb      	str	r3, [r7, #12]
 800986e:	68fa      	ldr	r2, [r7, #12]
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	429a      	cmp	r2, r3
 8009874:	d3f0      	bcc.n	8009858 <rcvr_spi_multi+0x10>
	}
}
 8009876:	bf00      	nop
 8009878:	bf00      	nop
 800987a:	3714      	adds	r7, #20
 800987c:	46bd      	mov	sp, r7
 800987e:	bd90      	pop	{r4, r7, pc}

08009880 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800988a:	2300      	movs	r3, #0
 800988c:	60fb      	str	r3, [r7, #12]
 800988e:	e009      	b.n	80098a4 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	4413      	add	r3, r2
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	4618      	mov	r0, r3
 800989a:	f7ff ffbf 	bl	800981c <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	3301      	adds	r3, #1
 80098a2:	60fb      	str	r3, [r7, #12]
 80098a4:	68fa      	ldr	r2, [r7, #12]
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d3f1      	bcc.n	8009890 <xmit_spi_multi+0x10>
	}
}
 80098ac:	bf00      	nop
 80098ae:	bf00      	nop
 80098b0:	3710      	adds	r7, #16
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}

080098b6 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80098b6:	b580      	push	{r7, lr}
 80098b8:	b086      	sub	sp, #24
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80098be:	f7f9 f97f 	bl	8002bc0 <HAL_GetTick>
 80098c2:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80098c8:	20ff      	movs	r0, #255	; 0xff
 80098ca:	f7ff ffa7 	bl	800981c <xchg_spi>
 80098ce:	4603      	mov	r3, r0
 80098d0:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80098d2:	7bfb      	ldrb	r3, [r7, #15]
 80098d4:	2bff      	cmp	r3, #255	; 0xff
 80098d6:	d007      	beq.n	80098e8 <wait_ready+0x32>
 80098d8:	f7f9 f972 	bl	8002bc0 <HAL_GetTick>
 80098dc:	4602      	mov	r2, r0
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	1ad3      	subs	r3, r2, r3
 80098e2:	693a      	ldr	r2, [r7, #16]
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d8ef      	bhi.n	80098c8 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80098e8:	7bfb      	ldrb	r3, [r7, #15]
 80098ea:	2bff      	cmp	r3, #255	; 0xff
 80098ec:	bf0c      	ite	eq
 80098ee:	2301      	moveq	r3, #1
 80098f0:	2300      	movne	r3, #0
 80098f2:	b2db      	uxtb	r3, r3
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3718      	adds	r7, #24
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8009900:	2201      	movs	r2, #1
 8009902:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009906:	4804      	ldr	r0, [pc, #16]	; (8009918 <despiselect+0x1c>)
 8009908:	f7f9 feba 	bl	8003680 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800990c:	20ff      	movs	r0, #255	; 0xff
 800990e:	f7ff ff85 	bl	800981c <xchg_spi>

}
 8009912:	bf00      	nop
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	40021400 	.word	0x40021400

0800991c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800991c:	b580      	push	{r7, lr}
 800991e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8009920:	2200      	movs	r2, #0
 8009922:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009926:	480a      	ldr	r0, [pc, #40]	; (8009950 <spiselect+0x34>)
 8009928:	f7f9 feaa 	bl	8003680 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800992c:	20ff      	movs	r0, #255	; 0xff
 800992e:	f7ff ff75 	bl	800981c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8009932:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009936:	f7ff ffbe 	bl	80098b6 <wait_ready>
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d001      	beq.n	8009944 <spiselect+0x28>
 8009940:	2301      	movs	r3, #1
 8009942:	e002      	b.n	800994a <spiselect+0x2e>

	despiselect();
 8009944:	f7ff ffda 	bl	80098fc <despiselect>
	return 0;	/* Timeout */
 8009948:	2300      	movs	r3, #0
}
 800994a:	4618      	mov	r0, r3
 800994c:	bd80      	pop	{r7, pc}
 800994e:	bf00      	nop
 8009950:	40021400 	.word	0x40021400

08009954 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800995e:	20c8      	movs	r0, #200	; 0xc8
 8009960:	f7ff ff32 	bl	80097c8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8009964:	20ff      	movs	r0, #255	; 0xff
 8009966:	f7ff ff59 	bl	800981c <xchg_spi>
 800996a:	4603      	mov	r3, r0
 800996c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800996e:	7bfb      	ldrb	r3, [r7, #15]
 8009970:	2bff      	cmp	r3, #255	; 0xff
 8009972:	d104      	bne.n	800997e <rcvr_datablock+0x2a>
 8009974:	f7ff ff3c 	bl	80097f0 <SPI_Timer_Status>
 8009978:	4603      	mov	r3, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d1f2      	bne.n	8009964 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800997e:	7bfb      	ldrb	r3, [r7, #15]
 8009980:	2bfe      	cmp	r3, #254	; 0xfe
 8009982:	d001      	beq.n	8009988 <rcvr_datablock+0x34>
 8009984:	2300      	movs	r3, #0
 8009986:	e00a      	b.n	800999e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8009988:	6839      	ldr	r1, [r7, #0]
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f7ff ff5c 	bl	8009848 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8009990:	20ff      	movs	r0, #255	; 0xff
 8009992:	f7ff ff43 	bl	800981c <xchg_spi>
 8009996:	20ff      	movs	r0, #255	; 0xff
 8009998:	f7ff ff40 	bl	800981c <xchg_spi>

	return 1;						/* Function succeeded */
 800999c:	2301      	movs	r3, #1
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}

080099a6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80099a6:	b580      	push	{r7, lr}
 80099a8:	b084      	sub	sp, #16
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	6078      	str	r0, [r7, #4]
 80099ae:	460b      	mov	r3, r1
 80099b0:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80099b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80099b6:	f7ff ff7e 	bl	80098b6 <wait_ready>
 80099ba:	4603      	mov	r3, r0
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d101      	bne.n	80099c4 <xmit_datablock+0x1e>
 80099c0:	2300      	movs	r3, #0
 80099c2:	e01e      	b.n	8009a02 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80099c4:	78fb      	ldrb	r3, [r7, #3]
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7ff ff28 	bl	800981c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80099cc:	78fb      	ldrb	r3, [r7, #3]
 80099ce:	2bfd      	cmp	r3, #253	; 0xfd
 80099d0:	d016      	beq.n	8009a00 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80099d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f7ff ff52 	bl	8009880 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80099dc:	20ff      	movs	r0, #255	; 0xff
 80099de:	f7ff ff1d 	bl	800981c <xchg_spi>
 80099e2:	20ff      	movs	r0, #255	; 0xff
 80099e4:	f7ff ff1a 	bl	800981c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80099e8:	20ff      	movs	r0, #255	; 0xff
 80099ea:	f7ff ff17 	bl	800981c <xchg_spi>
 80099ee:	4603      	mov	r3, r0
 80099f0:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80099f2:	7bfb      	ldrb	r3, [r7, #15]
 80099f4:	f003 031f 	and.w	r3, r3, #31
 80099f8:	2b05      	cmp	r3, #5
 80099fa:	d001      	beq.n	8009a00 <xmit_datablock+0x5a>
 80099fc:	2300      	movs	r3, #0
 80099fe:	e000      	b.n	8009a02 <xmit_datablock+0x5c>
	}
	return 1;
 8009a00:	2301      	movs	r3, #1
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3710      	adds	r7, #16
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b084      	sub	sp, #16
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	4603      	mov	r3, r0
 8009a12:	6039      	str	r1, [r7, #0]
 8009a14:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8009a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	da0e      	bge.n	8009a3c <send_cmd+0x32>
		cmd &= 0x7F;
 8009a1e:	79fb      	ldrb	r3, [r7, #7]
 8009a20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a24:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8009a26:	2100      	movs	r1, #0
 8009a28:	2037      	movs	r0, #55	; 0x37
 8009a2a:	f7ff ffee 	bl	8009a0a <send_cmd>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8009a32:	7bbb      	ldrb	r3, [r7, #14]
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d901      	bls.n	8009a3c <send_cmd+0x32>
 8009a38:	7bbb      	ldrb	r3, [r7, #14]
 8009a3a:	e051      	b.n	8009ae0 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8009a3c:	79fb      	ldrb	r3, [r7, #7]
 8009a3e:	2b0c      	cmp	r3, #12
 8009a40:	d008      	beq.n	8009a54 <send_cmd+0x4a>
		despiselect();
 8009a42:	f7ff ff5b 	bl	80098fc <despiselect>
		if (!spiselect()) return 0xFF;
 8009a46:	f7ff ff69 	bl	800991c <spiselect>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d101      	bne.n	8009a54 <send_cmd+0x4a>
 8009a50:	23ff      	movs	r3, #255	; 0xff
 8009a52:	e045      	b.n	8009ae0 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8009a54:	79fb      	ldrb	r3, [r7, #7]
 8009a56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f7ff fedd 	bl	800981c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	0e1b      	lsrs	r3, r3, #24
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f7ff fed7 	bl	800981c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	0c1b      	lsrs	r3, r3, #16
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7ff fed1 	bl	800981c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	0a1b      	lsrs	r3, r3, #8
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	4618      	mov	r0, r3
 8009a82:	f7ff fecb 	bl	800981c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7ff fec6 	bl	800981c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8009a90:	2301      	movs	r3, #1
 8009a92:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8009a94:	79fb      	ldrb	r3, [r7, #7]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d101      	bne.n	8009a9e <send_cmd+0x94>
 8009a9a:	2395      	movs	r3, #149	; 0x95
 8009a9c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8009a9e:	79fb      	ldrb	r3, [r7, #7]
 8009aa0:	2b08      	cmp	r3, #8
 8009aa2:	d101      	bne.n	8009aa8 <send_cmd+0x9e>
 8009aa4:	2387      	movs	r3, #135	; 0x87
 8009aa6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8009aa8:	7bfb      	ldrb	r3, [r7, #15]
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7ff feb6 	bl	800981c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8009ab0:	79fb      	ldrb	r3, [r7, #7]
 8009ab2:	2b0c      	cmp	r3, #12
 8009ab4:	d102      	bne.n	8009abc <send_cmd+0xb2>
 8009ab6:	20ff      	movs	r0, #255	; 0xff
 8009ab8:	f7ff feb0 	bl	800981c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8009abc:	230a      	movs	r3, #10
 8009abe:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8009ac0:	20ff      	movs	r0, #255	; 0xff
 8009ac2:	f7ff feab 	bl	800981c <xchg_spi>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8009aca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	da05      	bge.n	8009ade <send_cmd+0xd4>
 8009ad2:	7bfb      	ldrb	r3, [r7, #15]
 8009ad4:	3b01      	subs	r3, #1
 8009ad6:	73fb      	strb	r3, [r7, #15]
 8009ad8:	7bfb      	ldrb	r3, [r7, #15]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d1f0      	bne.n	8009ac0 <send_cmd+0xb6>

	return res;							/* Return received response */
 8009ade:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3710      	adds	r7, #16
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8009ae8:	b590      	push	{r4, r7, lr}
 8009aea:	b085      	sub	sp, #20
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	4603      	mov	r3, r0
 8009af0:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8009af2:	79fb      	ldrb	r3, [r7, #7]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d001      	beq.n	8009afc <USER_SPI_initialize+0x14>
 8009af8:	2301      	movs	r3, #1
 8009afa:	e0d4      	b.n	8009ca6 <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8009afc:	4b6c      	ldr	r3, [pc, #432]	; (8009cb0 <USER_SPI_initialize+0x1c8>)
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	f003 0302 	and.w	r3, r3, #2
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d003      	beq.n	8009b12 <USER_SPI_initialize+0x2a>
 8009b0a:	4b69      	ldr	r3, [pc, #420]	; (8009cb0 <USER_SPI_initialize+0x1c8>)
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	b2db      	uxtb	r3, r3
 8009b10:	e0c9      	b.n	8009ca6 <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 8009b12:	4b68      	ldr	r3, [pc, #416]	; (8009cb4 <USER_SPI_initialize+0x1cc>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	4b66      	ldr	r3, [pc, #408]	; (8009cb4 <USER_SPI_initialize+0x1cc>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8009b20:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8009b22:	230a      	movs	r3, #10
 8009b24:	73fb      	strb	r3, [r7, #15]
 8009b26:	e005      	b.n	8009b34 <USER_SPI_initialize+0x4c>
 8009b28:	20ff      	movs	r0, #255	; 0xff
 8009b2a:	f7ff fe77 	bl	800981c <xchg_spi>
 8009b2e:	7bfb      	ldrb	r3, [r7, #15]
 8009b30:	3b01      	subs	r3, #1
 8009b32:	73fb      	strb	r3, [r7, #15]
 8009b34:	7bfb      	ldrb	r3, [r7, #15]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d1f6      	bne.n	8009b28 <USER_SPI_initialize+0x40>

	ty = 0;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8009b3e:	2100      	movs	r1, #0
 8009b40:	2000      	movs	r0, #0
 8009b42:	f7ff ff62 	bl	8009a0a <send_cmd>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	f040 808b 	bne.w	8009c64 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8009b4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009b52:	f7ff fe39 	bl	80097c8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8009b56:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009b5a:	2008      	movs	r0, #8
 8009b5c:	f7ff ff55 	bl	8009a0a <send_cmd>
 8009b60:	4603      	mov	r3, r0
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d151      	bne.n	8009c0a <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8009b66:	2300      	movs	r3, #0
 8009b68:	73fb      	strb	r3, [r7, #15]
 8009b6a:	e00d      	b.n	8009b88 <USER_SPI_initialize+0xa0>
 8009b6c:	7bfc      	ldrb	r4, [r7, #15]
 8009b6e:	20ff      	movs	r0, #255	; 0xff
 8009b70:	f7ff fe54 	bl	800981c <xchg_spi>
 8009b74:	4603      	mov	r3, r0
 8009b76:	461a      	mov	r2, r3
 8009b78:	f107 0310 	add.w	r3, r7, #16
 8009b7c:	4423      	add	r3, r4
 8009b7e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8009b82:	7bfb      	ldrb	r3, [r7, #15]
 8009b84:	3301      	adds	r3, #1
 8009b86:	73fb      	strb	r3, [r7, #15]
 8009b88:	7bfb      	ldrb	r3, [r7, #15]
 8009b8a:	2b03      	cmp	r3, #3
 8009b8c:	d9ee      	bls.n	8009b6c <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8009b8e:	7abb      	ldrb	r3, [r7, #10]
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	d167      	bne.n	8009c64 <USER_SPI_initialize+0x17c>
 8009b94:	7afb      	ldrb	r3, [r7, #11]
 8009b96:	2baa      	cmp	r3, #170	; 0xaa
 8009b98:	d164      	bne.n	8009c64 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8009b9a:	bf00      	nop
 8009b9c:	f7ff fe28 	bl	80097f0 <SPI_Timer_Status>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d007      	beq.n	8009bb6 <USER_SPI_initialize+0xce>
 8009ba6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009baa:	20a9      	movs	r0, #169	; 0xa9
 8009bac:	f7ff ff2d 	bl	8009a0a <send_cmd>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d1f2      	bne.n	8009b9c <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8009bb6:	f7ff fe1b 	bl	80097f0 <SPI_Timer_Status>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d051      	beq.n	8009c64 <USER_SPI_initialize+0x17c>
 8009bc0:	2100      	movs	r1, #0
 8009bc2:	203a      	movs	r0, #58	; 0x3a
 8009bc4:	f7ff ff21 	bl	8009a0a <send_cmd>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d14a      	bne.n	8009c64 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8009bce:	2300      	movs	r3, #0
 8009bd0:	73fb      	strb	r3, [r7, #15]
 8009bd2:	e00d      	b.n	8009bf0 <USER_SPI_initialize+0x108>
 8009bd4:	7bfc      	ldrb	r4, [r7, #15]
 8009bd6:	20ff      	movs	r0, #255	; 0xff
 8009bd8:	f7ff fe20 	bl	800981c <xchg_spi>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	461a      	mov	r2, r3
 8009be0:	f107 0310 	add.w	r3, r7, #16
 8009be4:	4423      	add	r3, r4
 8009be6:	f803 2c08 	strb.w	r2, [r3, #-8]
 8009bea:	7bfb      	ldrb	r3, [r7, #15]
 8009bec:	3301      	adds	r3, #1
 8009bee:	73fb      	strb	r3, [r7, #15]
 8009bf0:	7bfb      	ldrb	r3, [r7, #15]
 8009bf2:	2b03      	cmp	r3, #3
 8009bf4:	d9ee      	bls.n	8009bd4 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8009bf6:	7a3b      	ldrb	r3, [r7, #8]
 8009bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d001      	beq.n	8009c04 <USER_SPI_initialize+0x11c>
 8009c00:	230c      	movs	r3, #12
 8009c02:	e000      	b.n	8009c06 <USER_SPI_initialize+0x11e>
 8009c04:	2304      	movs	r3, #4
 8009c06:	737b      	strb	r3, [r7, #13]
 8009c08:	e02c      	b.n	8009c64 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8009c0a:	2100      	movs	r1, #0
 8009c0c:	20a9      	movs	r0, #169	; 0xa9
 8009c0e:	f7ff fefc 	bl	8009a0a <send_cmd>
 8009c12:	4603      	mov	r3, r0
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d804      	bhi.n	8009c22 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8009c18:	2302      	movs	r3, #2
 8009c1a:	737b      	strb	r3, [r7, #13]
 8009c1c:	23a9      	movs	r3, #169	; 0xa9
 8009c1e:	73bb      	strb	r3, [r7, #14]
 8009c20:	e003      	b.n	8009c2a <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8009c22:	2301      	movs	r3, #1
 8009c24:	737b      	strb	r3, [r7, #13]
 8009c26:	2301      	movs	r3, #1
 8009c28:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8009c2a:	bf00      	nop
 8009c2c:	f7ff fde0 	bl	80097f0 <SPI_Timer_Status>
 8009c30:	4603      	mov	r3, r0
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d007      	beq.n	8009c46 <USER_SPI_initialize+0x15e>
 8009c36:	7bbb      	ldrb	r3, [r7, #14]
 8009c38:	2100      	movs	r1, #0
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7ff fee5 	bl	8009a0a <send_cmd>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d1f2      	bne.n	8009c2c <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8009c46:	f7ff fdd3 	bl	80097f0 <SPI_Timer_Status>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d007      	beq.n	8009c60 <USER_SPI_initialize+0x178>
 8009c50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009c54:	2010      	movs	r0, #16
 8009c56:	f7ff fed8 	bl	8009a0a <send_cmd>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d001      	beq.n	8009c64 <USER_SPI_initialize+0x17c>
				ty = 0;
 8009c60:	2300      	movs	r3, #0
 8009c62:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8009c64:	4a14      	ldr	r2, [pc, #80]	; (8009cb8 <USER_SPI_initialize+0x1d0>)
 8009c66:	7b7b      	ldrb	r3, [r7, #13]
 8009c68:	7013      	strb	r3, [r2, #0]
	despiselect();
 8009c6a:	f7ff fe47 	bl	80098fc <despiselect>

	if (ty) {			/* OK */
 8009c6e:	7b7b      	ldrb	r3, [r7, #13]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d012      	beq.n	8009c9a <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 8009c74:	4b0f      	ldr	r3, [pc, #60]	; (8009cb4 <USER_SPI_initialize+0x1cc>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009c7e:	4b0d      	ldr	r3, [pc, #52]	; (8009cb4 <USER_SPI_initialize+0x1cc>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f042 0220 	orr.w	r2, r2, #32
 8009c86:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8009c88:	4b09      	ldr	r3, [pc, #36]	; (8009cb0 <USER_SPI_initialize+0x1c8>)
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	f023 0301 	bic.w	r3, r3, #1
 8009c92:	b2da      	uxtb	r2, r3
 8009c94:	4b06      	ldr	r3, [pc, #24]	; (8009cb0 <USER_SPI_initialize+0x1c8>)
 8009c96:	701a      	strb	r2, [r3, #0]
 8009c98:	e002      	b.n	8009ca0 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8009c9a:	4b05      	ldr	r3, [pc, #20]	; (8009cb0 <USER_SPI_initialize+0x1c8>)
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8009ca0:	4b03      	ldr	r3, [pc, #12]	; (8009cb0 <USER_SPI_initialize+0x1c8>)
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	b2db      	uxtb	r3, r3
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3714      	adds	r7, #20
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd90      	pop	{r4, r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	20000020 	.word	0x20000020
 8009cb4:	200006d4 	.word	0x200006d4
 8009cb8:	20000394 	.word	0x20000394

08009cbc <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b083      	sub	sp, #12
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8009cc6:	79fb      	ldrb	r3, [r7, #7]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d001      	beq.n	8009cd0 <USER_SPI_status+0x14>
 8009ccc:	2301      	movs	r3, #1
 8009cce:	e002      	b.n	8009cd6 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8009cd0:	4b04      	ldr	r3, [pc, #16]	; (8009ce4 <USER_SPI_status+0x28>)
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	b2db      	uxtb	r3, r3
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	370c      	adds	r7, #12
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop
 8009ce4:	20000020 	.word	0x20000020

08009ce8 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b084      	sub	sp, #16
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	60b9      	str	r1, [r7, #8]
 8009cf0:	607a      	str	r2, [r7, #4]
 8009cf2:	603b      	str	r3, [r7, #0]
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009cf8:	7bfb      	ldrb	r3, [r7, #15]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d102      	bne.n	8009d04 <USER_SPI_read+0x1c>
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d101      	bne.n	8009d08 <USER_SPI_read+0x20>
 8009d04:	2304      	movs	r3, #4
 8009d06:	e04d      	b.n	8009da4 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8009d08:	4b28      	ldr	r3, [pc, #160]	; (8009dac <USER_SPI_read+0xc4>)
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	f003 0301 	and.w	r3, r3, #1
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d001      	beq.n	8009d1a <USER_SPI_read+0x32>
 8009d16:	2303      	movs	r3, #3
 8009d18:	e044      	b.n	8009da4 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8009d1a:	4b25      	ldr	r3, [pc, #148]	; (8009db0 <USER_SPI_read+0xc8>)
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	f003 0308 	and.w	r3, r3, #8
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d102      	bne.n	8009d2c <USER_SPI_read+0x44>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	025b      	lsls	r3, r3, #9
 8009d2a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d111      	bne.n	8009d56 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8009d32:	6879      	ldr	r1, [r7, #4]
 8009d34:	2011      	movs	r0, #17
 8009d36:	f7ff fe68 	bl	8009a0a <send_cmd>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d129      	bne.n	8009d94 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8009d40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009d44:	68b8      	ldr	r0, [r7, #8]
 8009d46:	f7ff fe05 	bl	8009954 <rcvr_datablock>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d021      	beq.n	8009d94 <USER_SPI_read+0xac>
			count = 0;
 8009d50:	2300      	movs	r3, #0
 8009d52:	603b      	str	r3, [r7, #0]
 8009d54:	e01e      	b.n	8009d94 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8009d56:	6879      	ldr	r1, [r7, #4]
 8009d58:	2012      	movs	r0, #18
 8009d5a:	f7ff fe56 	bl	8009a0a <send_cmd>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d117      	bne.n	8009d94 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8009d64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009d68:	68b8      	ldr	r0, [r7, #8]
 8009d6a:	f7ff fdf3 	bl	8009954 <rcvr_datablock>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d00a      	beq.n	8009d8a <USER_SPI_read+0xa2>
				buff += 512;
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009d7a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	3b01      	subs	r3, #1
 8009d80:	603b      	str	r3, [r7, #0]
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d1ed      	bne.n	8009d64 <USER_SPI_read+0x7c>
 8009d88:	e000      	b.n	8009d8c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8009d8a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8009d8c:	2100      	movs	r1, #0
 8009d8e:	200c      	movs	r0, #12
 8009d90:	f7ff fe3b 	bl	8009a0a <send_cmd>
		}
	}
	despiselect();
 8009d94:	f7ff fdb2 	bl	80098fc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	bf14      	ite	ne
 8009d9e:	2301      	movne	r3, #1
 8009da0:	2300      	moveq	r3, #0
 8009da2:	b2db      	uxtb	r3, r3
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3710      	adds	r7, #16
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}
 8009dac:	20000020 	.word	0x20000020
 8009db0:	20000394 	.word	0x20000394

08009db4 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	60b9      	str	r1, [r7, #8]
 8009dbc:	607a      	str	r2, [r7, #4]
 8009dbe:	603b      	str	r3, [r7, #0]
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009dc4:	7bfb      	ldrb	r3, [r7, #15]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d102      	bne.n	8009dd0 <USER_SPI_write+0x1c>
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d101      	bne.n	8009dd4 <USER_SPI_write+0x20>
 8009dd0:	2304      	movs	r3, #4
 8009dd2:	e063      	b.n	8009e9c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8009dd4:	4b33      	ldr	r3, [pc, #204]	; (8009ea4 <USER_SPI_write+0xf0>)
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	b2db      	uxtb	r3, r3
 8009dda:	f003 0301 	and.w	r3, r3, #1
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d001      	beq.n	8009de6 <USER_SPI_write+0x32>
 8009de2:	2303      	movs	r3, #3
 8009de4:	e05a      	b.n	8009e9c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8009de6:	4b2f      	ldr	r3, [pc, #188]	; (8009ea4 <USER_SPI_write+0xf0>)
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	f003 0304 	and.w	r3, r3, #4
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d001      	beq.n	8009df8 <USER_SPI_write+0x44>
 8009df4:	2302      	movs	r3, #2
 8009df6:	e051      	b.n	8009e9c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8009df8:	4b2b      	ldr	r3, [pc, #172]	; (8009ea8 <USER_SPI_write+0xf4>)
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	f003 0308 	and.w	r3, r3, #8
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d102      	bne.n	8009e0a <USER_SPI_write+0x56>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	025b      	lsls	r3, r3, #9
 8009e08:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d110      	bne.n	8009e32 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8009e10:	6879      	ldr	r1, [r7, #4]
 8009e12:	2018      	movs	r0, #24
 8009e14:	f7ff fdf9 	bl	8009a0a <send_cmd>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d136      	bne.n	8009e8c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8009e1e:	21fe      	movs	r1, #254	; 0xfe
 8009e20:	68b8      	ldr	r0, [r7, #8]
 8009e22:	f7ff fdc0 	bl	80099a6 <xmit_datablock>
 8009e26:	4603      	mov	r3, r0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d02f      	beq.n	8009e8c <USER_SPI_write+0xd8>
			count = 0;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	603b      	str	r3, [r7, #0]
 8009e30:	e02c      	b.n	8009e8c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8009e32:	4b1d      	ldr	r3, [pc, #116]	; (8009ea8 <USER_SPI_write+0xf4>)
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	f003 0306 	and.w	r3, r3, #6
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d003      	beq.n	8009e46 <USER_SPI_write+0x92>
 8009e3e:	6839      	ldr	r1, [r7, #0]
 8009e40:	2097      	movs	r0, #151	; 0x97
 8009e42:	f7ff fde2 	bl	8009a0a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8009e46:	6879      	ldr	r1, [r7, #4]
 8009e48:	2019      	movs	r0, #25
 8009e4a:	f7ff fdde 	bl	8009a0a <send_cmd>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d11b      	bne.n	8009e8c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8009e54:	21fc      	movs	r1, #252	; 0xfc
 8009e56:	68b8      	ldr	r0, [r7, #8]
 8009e58:	f7ff fda5 	bl	80099a6 <xmit_datablock>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d00a      	beq.n	8009e78 <USER_SPI_write+0xc4>
				buff += 512;
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009e68:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	3b01      	subs	r3, #1
 8009e6e:	603b      	str	r3, [r7, #0]
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d1ee      	bne.n	8009e54 <USER_SPI_write+0xa0>
 8009e76:	e000      	b.n	8009e7a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8009e78:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8009e7a:	21fd      	movs	r1, #253	; 0xfd
 8009e7c:	2000      	movs	r0, #0
 8009e7e:	f7ff fd92 	bl	80099a6 <xmit_datablock>
 8009e82:	4603      	mov	r3, r0
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d101      	bne.n	8009e8c <USER_SPI_write+0xd8>
 8009e88:	2301      	movs	r3, #1
 8009e8a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8009e8c:	f7ff fd36 	bl	80098fc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	bf14      	ite	ne
 8009e96:	2301      	movne	r3, #1
 8009e98:	2300      	moveq	r3, #0
 8009e9a:	b2db      	uxtb	r3, r3
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3710      	adds	r7, #16
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}
 8009ea4:	20000020 	.word	0x20000020
 8009ea8:	20000394 	.word	0x20000394

08009eac <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b08c      	sub	sp, #48	; 0x30
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	603a      	str	r2, [r7, #0]
 8009eb6:	71fb      	strb	r3, [r7, #7]
 8009eb8:	460b      	mov	r3, r1
 8009eba:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8009ebc:	79fb      	ldrb	r3, [r7, #7]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d001      	beq.n	8009ec6 <USER_SPI_ioctl+0x1a>
 8009ec2:	2304      	movs	r3, #4
 8009ec4:	e15a      	b.n	800a17c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8009ec6:	4baf      	ldr	r3, [pc, #700]	; (800a184 <USER_SPI_ioctl+0x2d8>)
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	f003 0301 	and.w	r3, r3, #1
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d001      	beq.n	8009ed8 <USER_SPI_ioctl+0x2c>
 8009ed4:	2303      	movs	r3, #3
 8009ed6:	e151      	b.n	800a17c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8009ede:	79bb      	ldrb	r3, [r7, #6]
 8009ee0:	2b04      	cmp	r3, #4
 8009ee2:	f200 8136 	bhi.w	800a152 <USER_SPI_ioctl+0x2a6>
 8009ee6:	a201      	add	r2, pc, #4	; (adr r2, 8009eec <USER_SPI_ioctl+0x40>)
 8009ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eec:	08009f01 	.word	0x08009f01
 8009ef0:	08009f15 	.word	0x08009f15
 8009ef4:	0800a153 	.word	0x0800a153
 8009ef8:	08009fc1 	.word	0x08009fc1
 8009efc:	0800a0b7 	.word	0x0800a0b7
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8009f00:	f7ff fd0c 	bl	800991c <spiselect>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	f000 8127 	beq.w	800a15a <USER_SPI_ioctl+0x2ae>
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8009f12:	e122      	b.n	800a15a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8009f14:	2100      	movs	r1, #0
 8009f16:	2009      	movs	r0, #9
 8009f18:	f7ff fd77 	bl	8009a0a <send_cmd>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	f040 811d 	bne.w	800a15e <USER_SPI_ioctl+0x2b2>
 8009f24:	f107 030c 	add.w	r3, r7, #12
 8009f28:	2110      	movs	r1, #16
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7ff fd12 	bl	8009954 <rcvr_datablock>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	f000 8113 	beq.w	800a15e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8009f38:	7b3b      	ldrb	r3, [r7, #12]
 8009f3a:	099b      	lsrs	r3, r3, #6
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d111      	bne.n	8009f66 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8009f42:	7d7b      	ldrb	r3, [r7, #21]
 8009f44:	461a      	mov	r2, r3
 8009f46:	7d3b      	ldrb	r3, [r7, #20]
 8009f48:	021b      	lsls	r3, r3, #8
 8009f4a:	4413      	add	r3, r2
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	7cfb      	ldrb	r3, [r7, #19]
 8009f50:	041b      	lsls	r3, r3, #16
 8009f52:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8009f56:	4413      	add	r3, r2
 8009f58:	3301      	adds	r3, #1
 8009f5a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8009f5c:	69fb      	ldr	r3, [r7, #28]
 8009f5e:	029a      	lsls	r2, r3, #10
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	601a      	str	r2, [r3, #0]
 8009f64:	e028      	b.n	8009fb8 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8009f66:	7c7b      	ldrb	r3, [r7, #17]
 8009f68:	f003 030f 	and.w	r3, r3, #15
 8009f6c:	b2da      	uxtb	r2, r3
 8009f6e:	7dbb      	ldrb	r3, [r7, #22]
 8009f70:	09db      	lsrs	r3, r3, #7
 8009f72:	b2db      	uxtb	r3, r3
 8009f74:	4413      	add	r3, r2
 8009f76:	b2da      	uxtb	r2, r3
 8009f78:	7d7b      	ldrb	r3, [r7, #21]
 8009f7a:	005b      	lsls	r3, r3, #1
 8009f7c:	b2db      	uxtb	r3, r3
 8009f7e:	f003 0306 	and.w	r3, r3, #6
 8009f82:	b2db      	uxtb	r3, r3
 8009f84:	4413      	add	r3, r2
 8009f86:	b2db      	uxtb	r3, r3
 8009f88:	3302      	adds	r3, #2
 8009f8a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8009f8e:	7d3b      	ldrb	r3, [r7, #20]
 8009f90:	099b      	lsrs	r3, r3, #6
 8009f92:	b2db      	uxtb	r3, r3
 8009f94:	461a      	mov	r2, r3
 8009f96:	7cfb      	ldrb	r3, [r7, #19]
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	441a      	add	r2, r3
 8009f9c:	7cbb      	ldrb	r3, [r7, #18]
 8009f9e:	029b      	lsls	r3, r3, #10
 8009fa0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009fa4:	4413      	add	r3, r2
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8009faa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009fae:	3b09      	subs	r3, #9
 8009fb0:	69fa      	ldr	r2, [r7, #28]
 8009fb2:	409a      	lsls	r2, r3
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8009fbe:	e0ce      	b.n	800a15e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8009fc0:	4b71      	ldr	r3, [pc, #452]	; (800a188 <USER_SPI_ioctl+0x2dc>)
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	f003 0304 	and.w	r3, r3, #4
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d031      	beq.n	800a030 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8009fcc:	2100      	movs	r1, #0
 8009fce:	208d      	movs	r0, #141	; 0x8d
 8009fd0:	f7ff fd1b 	bl	8009a0a <send_cmd>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	f040 80c3 	bne.w	800a162 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8009fdc:	20ff      	movs	r0, #255	; 0xff
 8009fde:	f7ff fc1d 	bl	800981c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8009fe2:	f107 030c 	add.w	r3, r7, #12
 8009fe6:	2110      	movs	r1, #16
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f7ff fcb3 	bl	8009954 <rcvr_datablock>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	f000 80b6 	beq.w	800a162 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8009ff6:	2330      	movs	r3, #48	; 0x30
 8009ff8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009ffc:	e007      	b.n	800a00e <USER_SPI_ioctl+0x162>
 8009ffe:	20ff      	movs	r0, #255	; 0xff
 800a000:	f7ff fc0c 	bl	800981c <xchg_spi>
 800a004:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a008:	3b01      	subs	r3, #1
 800a00a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a00e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a012:	2b00      	cmp	r3, #0
 800a014:	d1f3      	bne.n	8009ffe <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800a016:	7dbb      	ldrb	r3, [r7, #22]
 800a018:	091b      	lsrs	r3, r3, #4
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	461a      	mov	r2, r3
 800a01e:	2310      	movs	r3, #16
 800a020:	fa03 f202 	lsl.w	r2, r3, r2
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800a028:	2300      	movs	r3, #0
 800a02a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800a02e:	e098      	b.n	800a162 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800a030:	2100      	movs	r1, #0
 800a032:	2009      	movs	r0, #9
 800a034:	f7ff fce9 	bl	8009a0a <send_cmd>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	f040 8091 	bne.w	800a162 <USER_SPI_ioctl+0x2b6>
 800a040:	f107 030c 	add.w	r3, r7, #12
 800a044:	2110      	movs	r1, #16
 800a046:	4618      	mov	r0, r3
 800a048:	f7ff fc84 	bl	8009954 <rcvr_datablock>
 800a04c:	4603      	mov	r3, r0
 800a04e:	2b00      	cmp	r3, #0
 800a050:	f000 8087 	beq.w	800a162 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800a054:	4b4c      	ldr	r3, [pc, #304]	; (800a188 <USER_SPI_ioctl+0x2dc>)
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	f003 0302 	and.w	r3, r3, #2
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d012      	beq.n	800a086 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800a060:	7dbb      	ldrb	r3, [r7, #22]
 800a062:	005b      	lsls	r3, r3, #1
 800a064:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800a068:	7dfa      	ldrb	r2, [r7, #23]
 800a06a:	09d2      	lsrs	r2, r2, #7
 800a06c:	b2d2      	uxtb	r2, r2
 800a06e:	4413      	add	r3, r2
 800a070:	1c5a      	adds	r2, r3, #1
 800a072:	7e7b      	ldrb	r3, [r7, #25]
 800a074:	099b      	lsrs	r3, r3, #6
 800a076:	b2db      	uxtb	r3, r3
 800a078:	3b01      	subs	r3, #1
 800a07a:	fa02 f303 	lsl.w	r3, r2, r3
 800a07e:	461a      	mov	r2, r3
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	601a      	str	r2, [r3, #0]
 800a084:	e013      	b.n	800a0ae <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800a086:	7dbb      	ldrb	r3, [r7, #22]
 800a088:	109b      	asrs	r3, r3, #2
 800a08a:	b29b      	uxth	r3, r3
 800a08c:	f003 031f 	and.w	r3, r3, #31
 800a090:	3301      	adds	r3, #1
 800a092:	7dfa      	ldrb	r2, [r7, #23]
 800a094:	00d2      	lsls	r2, r2, #3
 800a096:	f002 0218 	and.w	r2, r2, #24
 800a09a:	7df9      	ldrb	r1, [r7, #23]
 800a09c:	0949      	lsrs	r1, r1, #5
 800a09e:	b2c9      	uxtb	r1, r1
 800a0a0:	440a      	add	r2, r1
 800a0a2:	3201      	adds	r2, #1
 800a0a4:	fb02 f303 	mul.w	r3, r2, r3
 800a0a8:	461a      	mov	r2, r3
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800a0b4:	e055      	b.n	800a162 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800a0b6:	4b34      	ldr	r3, [pc, #208]	; (800a188 <USER_SPI_ioctl+0x2dc>)
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	f003 0306 	and.w	r3, r3, #6
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d051      	beq.n	800a166 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800a0c2:	f107 020c 	add.w	r2, r7, #12
 800a0c6:	79fb      	ldrb	r3, [r7, #7]
 800a0c8:	210b      	movs	r1, #11
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7ff feee 	bl	8009eac <USER_SPI_ioctl>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d149      	bne.n	800a16a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800a0d6:	7b3b      	ldrb	r3, [r7, #12]
 800a0d8:	099b      	lsrs	r3, r3, #6
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d104      	bne.n	800a0ea <USER_SPI_ioctl+0x23e>
 800a0e0:	7dbb      	ldrb	r3, [r7, #22]
 800a0e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d041      	beq.n	800a16e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	623b      	str	r3, [r7, #32]
 800a0ee:	6a3b      	ldr	r3, [r7, #32]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0f4:	6a3b      	ldr	r3, [r7, #32]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800a0fa:	4b23      	ldr	r3, [pc, #140]	; (800a188 <USER_SPI_ioctl+0x2dc>)
 800a0fc:	781b      	ldrb	r3, [r3, #0]
 800a0fe:	f003 0308 	and.w	r3, r3, #8
 800a102:	2b00      	cmp	r3, #0
 800a104:	d105      	bne.n	800a112 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800a106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a108:	025b      	lsls	r3, r3, #9
 800a10a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10e:	025b      	lsls	r3, r3, #9
 800a110:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800a112:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a114:	2020      	movs	r0, #32
 800a116:	f7ff fc78 	bl	8009a0a <send_cmd>
 800a11a:	4603      	mov	r3, r0
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d128      	bne.n	800a172 <USER_SPI_ioctl+0x2c6>
 800a120:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a122:	2021      	movs	r0, #33	; 0x21
 800a124:	f7ff fc71 	bl	8009a0a <send_cmd>
 800a128:	4603      	mov	r3, r0
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d121      	bne.n	800a172 <USER_SPI_ioctl+0x2c6>
 800a12e:	2100      	movs	r1, #0
 800a130:	2026      	movs	r0, #38	; 0x26
 800a132:	f7ff fc6a 	bl	8009a0a <send_cmd>
 800a136:	4603      	mov	r3, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d11a      	bne.n	800a172 <USER_SPI_ioctl+0x2c6>
 800a13c:	f247 5030 	movw	r0, #30000	; 0x7530
 800a140:	f7ff fbb9 	bl	80098b6 <wait_ready>
 800a144:	4603      	mov	r3, r0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d013      	beq.n	800a172 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800a14a:	2300      	movs	r3, #0
 800a14c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800a150:	e00f      	b.n	800a172 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800a152:	2304      	movs	r3, #4
 800a154:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a158:	e00c      	b.n	800a174 <USER_SPI_ioctl+0x2c8>
		break;
 800a15a:	bf00      	nop
 800a15c:	e00a      	b.n	800a174 <USER_SPI_ioctl+0x2c8>
		break;
 800a15e:	bf00      	nop
 800a160:	e008      	b.n	800a174 <USER_SPI_ioctl+0x2c8>
		break;
 800a162:	bf00      	nop
 800a164:	e006      	b.n	800a174 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800a166:	bf00      	nop
 800a168:	e004      	b.n	800a174 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800a16a:	bf00      	nop
 800a16c:	e002      	b.n	800a174 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800a16e:	bf00      	nop
 800a170:	e000      	b.n	800a174 <USER_SPI_ioctl+0x2c8>
		break;
 800a172:	bf00      	nop
	}

	despiselect();
 800a174:	f7ff fbc2 	bl	80098fc <despiselect>

	return res;
 800a178:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3730      	adds	r7, #48	; 0x30
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	20000020 	.word	0x20000020
 800a188:	20000394 	.word	0x20000394

0800a18c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	460b      	mov	r3, r1
 800a196:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a198:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a19c:	f002 f970 	bl	800c480 <USBD_static_malloc>
 800a1a0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d105      	bne.n	800a1b4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a1b0:	2302      	movs	r3, #2
 800a1b2:	e066      	b.n	800a282 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	68fa      	ldr	r2, [r7, #12]
 800a1b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	7c1b      	ldrb	r3, [r3, #16]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d119      	bne.n	800a1f8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a1c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1c8:	2202      	movs	r2, #2
 800a1ca:	2181      	movs	r1, #129	; 0x81
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f002 f834 	bl	800c23a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a1d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1dc:	2202      	movs	r2, #2
 800a1de:	2101      	movs	r1, #1
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f002 f82a 	bl	800c23a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2210      	movs	r2, #16
 800a1f2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a1f6:	e016      	b.n	800a226 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a1f8:	2340      	movs	r3, #64	; 0x40
 800a1fa:	2202      	movs	r2, #2
 800a1fc:	2181      	movs	r1, #129	; 0x81
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f002 f81b 	bl	800c23a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2201      	movs	r2, #1
 800a208:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a20a:	2340      	movs	r3, #64	; 0x40
 800a20c:	2202      	movs	r2, #2
 800a20e:	2101      	movs	r1, #1
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f002 f812 	bl	800c23a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2201      	movs	r2, #1
 800a21a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2210      	movs	r2, #16
 800a222:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a226:	2308      	movs	r3, #8
 800a228:	2203      	movs	r2, #3
 800a22a:	2182      	movs	r1, #130	; 0x82
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f002 f804 	bl	800c23a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2201      	movs	r2, #1
 800a236:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2200      	movs	r2, #0
 800a248:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2200      	movs	r2, #0
 800a250:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	7c1b      	ldrb	r3, [r3, #16]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d109      	bne.n	800a270 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a262:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a266:	2101      	movs	r1, #1
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f002 f8d5 	bl	800c418 <USBD_LL_PrepareReceive>
 800a26e:	e007      	b.n	800a280 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a276:	2340      	movs	r3, #64	; 0x40
 800a278:	2101      	movs	r1, #1
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f002 f8cc 	bl	800c418 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a280:	2300      	movs	r3, #0
}
 800a282:	4618      	mov	r0, r3
 800a284:	3710      	adds	r7, #16
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}

0800a28a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b082      	sub	sp, #8
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
 800a292:	460b      	mov	r3, r1
 800a294:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a296:	2181      	movs	r1, #129	; 0x81
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f001 fff4 	bl	800c286 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a2a4:	2101      	movs	r1, #1
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f001 ffed 	bl	800c286 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a2b4:	2182      	movs	r1, #130	; 0x82
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f001 ffe5 	bl	800c286 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d00e      	beq.n	800a2f4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f002 f8d8 	bl	800c49c <USBD_static_free>
    pdev->pClassData = NULL;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a2f4:	2300      	movs	r3, #0
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3708      	adds	r7, #8
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
	...

0800a300 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b086      	sub	sp, #24
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a310:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a312:	2300      	movs	r3, #0
 800a314:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a316:	2300      	movs	r3, #0
 800a318:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a31a:	2300      	movs	r3, #0
 800a31c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d101      	bne.n	800a328 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a324:	2303      	movs	r3, #3
 800a326:	e0af      	b.n	800a488 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a330:	2b00      	cmp	r3, #0
 800a332:	d03f      	beq.n	800a3b4 <USBD_CDC_Setup+0xb4>
 800a334:	2b20      	cmp	r3, #32
 800a336:	f040 809f 	bne.w	800a478 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	88db      	ldrh	r3, [r3, #6]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d02e      	beq.n	800a3a0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	b25b      	sxtb	r3, r3
 800a348:	2b00      	cmp	r3, #0
 800a34a:	da16      	bge.n	800a37a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a352:	689b      	ldr	r3, [r3, #8]
 800a354:	683a      	ldr	r2, [r7, #0]
 800a356:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a358:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a35a:	683a      	ldr	r2, [r7, #0]
 800a35c:	88d2      	ldrh	r2, [r2, #6]
 800a35e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	88db      	ldrh	r3, [r3, #6]
 800a364:	2b07      	cmp	r3, #7
 800a366:	bf28      	it	cs
 800a368:	2307      	movcs	r3, #7
 800a36a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	89fa      	ldrh	r2, [r7, #14]
 800a370:	4619      	mov	r1, r3
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f001 fae9 	bl	800b94a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a378:	e085      	b.n	800a486 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	785a      	ldrb	r2, [r3, #1]
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	88db      	ldrh	r3, [r3, #6]
 800a388:	b2da      	uxtb	r2, r3
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a390:	6939      	ldr	r1, [r7, #16]
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	88db      	ldrh	r3, [r3, #6]
 800a396:	461a      	mov	r2, r3
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f001 fb02 	bl	800b9a2 <USBD_CtlPrepareRx>
      break;
 800a39e:	e072      	b.n	800a486 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a3a6:	689b      	ldr	r3, [r3, #8]
 800a3a8:	683a      	ldr	r2, [r7, #0]
 800a3aa:	7850      	ldrb	r0, [r2, #1]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	6839      	ldr	r1, [r7, #0]
 800a3b0:	4798      	blx	r3
      break;
 800a3b2:	e068      	b.n	800a486 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	785b      	ldrb	r3, [r3, #1]
 800a3b8:	2b0b      	cmp	r3, #11
 800a3ba:	d852      	bhi.n	800a462 <USBD_CDC_Setup+0x162>
 800a3bc:	a201      	add	r2, pc, #4	; (adr r2, 800a3c4 <USBD_CDC_Setup+0xc4>)
 800a3be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c2:	bf00      	nop
 800a3c4:	0800a3f5 	.word	0x0800a3f5
 800a3c8:	0800a471 	.word	0x0800a471
 800a3cc:	0800a463 	.word	0x0800a463
 800a3d0:	0800a463 	.word	0x0800a463
 800a3d4:	0800a463 	.word	0x0800a463
 800a3d8:	0800a463 	.word	0x0800a463
 800a3dc:	0800a463 	.word	0x0800a463
 800a3e0:	0800a463 	.word	0x0800a463
 800a3e4:	0800a463 	.word	0x0800a463
 800a3e8:	0800a463 	.word	0x0800a463
 800a3ec:	0800a41f 	.word	0x0800a41f
 800a3f0:	0800a449 	.word	0x0800a449
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3fa:	b2db      	uxtb	r3, r3
 800a3fc:	2b03      	cmp	r3, #3
 800a3fe:	d107      	bne.n	800a410 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a400:	f107 030a 	add.w	r3, r7, #10
 800a404:	2202      	movs	r2, #2
 800a406:	4619      	mov	r1, r3
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f001 fa9e 	bl	800b94a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a40e:	e032      	b.n	800a476 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a410:	6839      	ldr	r1, [r7, #0]
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f001 fa28 	bl	800b868 <USBD_CtlError>
            ret = USBD_FAIL;
 800a418:	2303      	movs	r3, #3
 800a41a:	75fb      	strb	r3, [r7, #23]
          break;
 800a41c:	e02b      	b.n	800a476 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a424:	b2db      	uxtb	r3, r3
 800a426:	2b03      	cmp	r3, #3
 800a428:	d107      	bne.n	800a43a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a42a:	f107 030d 	add.w	r3, r7, #13
 800a42e:	2201      	movs	r2, #1
 800a430:	4619      	mov	r1, r3
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f001 fa89 	bl	800b94a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a438:	e01d      	b.n	800a476 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a43a:	6839      	ldr	r1, [r7, #0]
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f001 fa13 	bl	800b868 <USBD_CtlError>
            ret = USBD_FAIL;
 800a442:	2303      	movs	r3, #3
 800a444:	75fb      	strb	r3, [r7, #23]
          break;
 800a446:	e016      	b.n	800a476 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a44e:	b2db      	uxtb	r3, r3
 800a450:	2b03      	cmp	r3, #3
 800a452:	d00f      	beq.n	800a474 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a454:	6839      	ldr	r1, [r7, #0]
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f001 fa06 	bl	800b868 <USBD_CtlError>
            ret = USBD_FAIL;
 800a45c:	2303      	movs	r3, #3
 800a45e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a460:	e008      	b.n	800a474 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a462:	6839      	ldr	r1, [r7, #0]
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f001 f9ff 	bl	800b868 <USBD_CtlError>
          ret = USBD_FAIL;
 800a46a:	2303      	movs	r3, #3
 800a46c:	75fb      	strb	r3, [r7, #23]
          break;
 800a46e:	e002      	b.n	800a476 <USBD_CDC_Setup+0x176>
          break;
 800a470:	bf00      	nop
 800a472:	e008      	b.n	800a486 <USBD_CDC_Setup+0x186>
          break;
 800a474:	bf00      	nop
      }
      break;
 800a476:	e006      	b.n	800a486 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a478:	6839      	ldr	r1, [r7, #0]
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f001 f9f4 	bl	800b868 <USBD_CtlError>
      ret = USBD_FAIL;
 800a480:	2303      	movs	r3, #3
 800a482:	75fb      	strb	r3, [r7, #23]
      break;
 800a484:	bf00      	nop
  }

  return (uint8_t)ret;
 800a486:	7dfb      	ldrb	r3, [r7, #23]
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3718      	adds	r7, #24
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	460b      	mov	r3, r1
 800a49a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a4a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d101      	bne.n	800a4b2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a4ae:	2303      	movs	r3, #3
 800a4b0:	e04f      	b.n	800a552 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a4b8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a4ba:	78fa      	ldrb	r2, [r7, #3]
 800a4bc:	6879      	ldr	r1, [r7, #4]
 800a4be:	4613      	mov	r3, r2
 800a4c0:	009b      	lsls	r3, r3, #2
 800a4c2:	4413      	add	r3, r2
 800a4c4:	009b      	lsls	r3, r3, #2
 800a4c6:	440b      	add	r3, r1
 800a4c8:	3318      	adds	r3, #24
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d029      	beq.n	800a524 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a4d0:	78fa      	ldrb	r2, [r7, #3]
 800a4d2:	6879      	ldr	r1, [r7, #4]
 800a4d4:	4613      	mov	r3, r2
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	4413      	add	r3, r2
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	440b      	add	r3, r1
 800a4de:	3318      	adds	r3, #24
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	78f9      	ldrb	r1, [r7, #3]
 800a4e4:	68f8      	ldr	r0, [r7, #12]
 800a4e6:	460b      	mov	r3, r1
 800a4e8:	00db      	lsls	r3, r3, #3
 800a4ea:	1a5b      	subs	r3, r3, r1
 800a4ec:	009b      	lsls	r3, r3, #2
 800a4ee:	4403      	add	r3, r0
 800a4f0:	3344      	adds	r3, #68	; 0x44
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	fbb2 f1f3 	udiv	r1, r2, r3
 800a4f8:	fb03 f301 	mul.w	r3, r3, r1
 800a4fc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d110      	bne.n	800a524 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a502:	78fa      	ldrb	r2, [r7, #3]
 800a504:	6879      	ldr	r1, [r7, #4]
 800a506:	4613      	mov	r3, r2
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	4413      	add	r3, r2
 800a50c:	009b      	lsls	r3, r3, #2
 800a50e:	440b      	add	r3, r1
 800a510:	3318      	adds	r3, #24
 800a512:	2200      	movs	r2, #0
 800a514:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a516:	78f9      	ldrb	r1, [r7, #3]
 800a518:	2300      	movs	r3, #0
 800a51a:	2200      	movs	r2, #0
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f001 ff5a 	bl	800c3d6 <USBD_LL_Transmit>
 800a522:	e015      	b.n	800a550 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	2200      	movs	r2, #0
 800a528:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a532:	691b      	ldr	r3, [r3, #16]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d00b      	beq.n	800a550 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a53e:	691b      	ldr	r3, [r3, #16]
 800a540:	68ba      	ldr	r2, [r7, #8]
 800a542:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a546:	68ba      	ldr	r2, [r7, #8]
 800a548:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a54c:	78fa      	ldrb	r2, [r7, #3]
 800a54e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a550:	2300      	movs	r3, #0
}
 800a552:	4618      	mov	r0, r3
 800a554:	3710      	adds	r7, #16
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}

0800a55a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a55a:	b580      	push	{r7, lr}
 800a55c:	b084      	sub	sp, #16
 800a55e:	af00      	add	r7, sp, #0
 800a560:	6078      	str	r0, [r7, #4]
 800a562:	460b      	mov	r3, r1
 800a564:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a56c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a574:	2b00      	cmp	r3, #0
 800a576:	d101      	bne.n	800a57c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a578:	2303      	movs	r3, #3
 800a57a:	e015      	b.n	800a5a8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a57c:	78fb      	ldrb	r3, [r7, #3]
 800a57e:	4619      	mov	r1, r3
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f001 ff6a 	bl	800c45a <USBD_LL_GetRxDataSize>
 800a586:	4602      	mov	r2, r0
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a594:	68db      	ldr	r3, [r3, #12]
 800a596:	68fa      	ldr	r2, [r7, #12]
 800a598:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a59c:	68fa      	ldr	r2, [r7, #12]
 800a59e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a5a2:	4611      	mov	r1, r2
 800a5a4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a5a6:	2300      	movs	r3, #0
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3710      	adds	r7, #16
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b084      	sub	sp, #16
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5be:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d101      	bne.n	800a5ca <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a5c6:	2303      	movs	r3, #3
 800a5c8:	e01b      	b.n	800a602 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d015      	beq.n	800a600 <USBD_CDC_EP0_RxReady+0x50>
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a5da:	2bff      	cmp	r3, #255	; 0xff
 800a5dc:	d010      	beq.n	800a600 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a5e4:	689b      	ldr	r3, [r3, #8]
 800a5e6:	68fa      	ldr	r2, [r7, #12]
 800a5e8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a5ec:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a5ee:	68fa      	ldr	r2, [r7, #12]
 800a5f0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a5f4:	b292      	uxth	r2, r2
 800a5f6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	22ff      	movs	r2, #255	; 0xff
 800a5fc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a600:	2300      	movs	r3, #0
}
 800a602:	4618      	mov	r0, r3
 800a604:	3710      	adds	r7, #16
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
	...

0800a60c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2243      	movs	r2, #67	; 0x43
 800a618:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a61a:	4b03      	ldr	r3, [pc, #12]	; (800a628 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	370c      	adds	r7, #12
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr
 800a628:	200000ac 	.word	0x200000ac

0800a62c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a62c:	b480      	push	{r7}
 800a62e:	b083      	sub	sp, #12
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2243      	movs	r2, #67	; 0x43
 800a638:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a63a:	4b03      	ldr	r3, [pc, #12]	; (800a648 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	370c      	adds	r7, #12
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr
 800a648:	20000068 	.word	0x20000068

0800a64c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2243      	movs	r2, #67	; 0x43
 800a658:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a65a:	4b03      	ldr	r3, [pc, #12]	; (800a668 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	370c      	adds	r7, #12
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr
 800a668:	200000f0 	.word	0x200000f0

0800a66c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b083      	sub	sp, #12
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	220a      	movs	r2, #10
 800a678:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a67a:	4b03      	ldr	r3, [pc, #12]	; (800a688 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	370c      	adds	r7, #12
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr
 800a688:	20000024 	.word	0x20000024

0800a68c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b083      	sub	sp, #12
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d101      	bne.n	800a6a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a69c:	2303      	movs	r3, #3
 800a69e:	e004      	b.n	800a6aa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	683a      	ldr	r2, [r7, #0]
 800a6a4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a6a8:	2300      	movs	r3, #0
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	370c      	adds	r7, #12
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b4:	4770      	bx	lr

0800a6b6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a6b6:	b480      	push	{r7}
 800a6b8:	b087      	sub	sp, #28
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	60f8      	str	r0, [r7, #12]
 800a6be:	60b9      	str	r1, [r7, #8]
 800a6c0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6c8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d101      	bne.n	800a6d4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a6d0:	2303      	movs	r3, #3
 800a6d2:	e008      	b.n	800a6e6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	68ba      	ldr	r2, [r7, #8]
 800a6d8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a6e4:	2300      	movs	r3, #0
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	371c      	adds	r7, #28
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f0:	4770      	bx	lr

0800a6f2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a6f2:	b480      	push	{r7}
 800a6f4:	b085      	sub	sp, #20
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
 800a6fa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a702:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d101      	bne.n	800a70e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a70a:	2303      	movs	r3, #3
 800a70c:	e004      	b.n	800a718 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	683a      	ldr	r2, [r7, #0]
 800a712:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a716:	2300      	movs	r3, #0
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3714      	adds	r7, #20
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a732:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d101      	bne.n	800a742 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a73e:	2303      	movs	r3, #3
 800a740:	e016      	b.n	800a770 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	7c1b      	ldrb	r3, [r3, #16]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d109      	bne.n	800a75e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a750:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a754:	2101      	movs	r1, #1
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f001 fe5e 	bl	800c418 <USBD_LL_PrepareReceive>
 800a75c:	e007      	b.n	800a76e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a764:	2340      	movs	r3, #64	; 0x40
 800a766:	2101      	movs	r1, #1
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f001 fe55 	bl	800c418 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a76e:	2300      	movs	r3, #0
}
 800a770:	4618      	mov	r0, r3
 800a772:	3710      	adds	r7, #16
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b086      	sub	sp, #24
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	4613      	mov	r3, r2
 800a784:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d101      	bne.n	800a790 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a78c:	2303      	movs	r3, #3
 800a78e:	e01f      	b.n	800a7d0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2200      	movs	r2, #0
 800a794:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2200      	movs	r2, #0
 800a79c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d003      	beq.n	800a7b6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	68ba      	ldr	r2, [r7, #8]
 800a7b2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	79fa      	ldrb	r2, [r7, #7]
 800a7c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a7c4:	68f8      	ldr	r0, [r7, #12]
 800a7c6:	f001 fcd1 	bl	800c16c <USBD_LL_Init>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a7ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3718      	adds	r7, #24
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b084      	sub	sp, #16
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d101      	bne.n	800a7f0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a7ec:	2303      	movs	r3, #3
 800a7ee:	e016      	b.n	800a81e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	683a      	ldr	r2, [r7, #0]
 800a7f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a800:	2b00      	cmp	r3, #0
 800a802:	d00b      	beq.n	800a81c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a80c:	f107 020e 	add.w	r2, r7, #14
 800a810:	4610      	mov	r0, r2
 800a812:	4798      	blx	r3
 800a814:	4602      	mov	r2, r0
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a81c:	2300      	movs	r3, #0
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3710      	adds	r7, #16
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}

0800a826 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a826:	b580      	push	{r7, lr}
 800a828:	b082      	sub	sp, #8
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f001 fce8 	bl	800c204 <USBD_LL_Start>
 800a834:	4603      	mov	r3, r0
}
 800a836:	4618      	mov	r0, r3
 800a838:	3708      	adds	r7, #8
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}

0800a83e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a83e:	b480      	push	{r7}
 800a840:	b083      	sub	sp, #12
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a846:	2300      	movs	r3, #0
}
 800a848:	4618      	mov	r0, r3
 800a84a:	370c      	adds	r7, #12
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr

0800a854 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	460b      	mov	r3, r1
 800a85e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a860:	2303      	movs	r3, #3
 800a862:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d009      	beq.n	800a882 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	78fa      	ldrb	r2, [r7, #3]
 800a878:	4611      	mov	r1, r2
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	4798      	blx	r3
 800a87e:	4603      	mov	r3, r0
 800a880:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a882:	7bfb      	ldrb	r3, [r7, #15]
}
 800a884:	4618      	mov	r0, r3
 800a886:	3710      	adds	r7, #16
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b082      	sub	sp, #8
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	460b      	mov	r3, r1
 800a896:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d007      	beq.n	800a8b2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	78fa      	ldrb	r2, [r7, #3]
 800a8ac:	4611      	mov	r1, r2
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	4798      	blx	r3
  }

  return USBD_OK;
 800a8b2:	2300      	movs	r3, #0
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3708      	adds	r7, #8
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}

0800a8bc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b084      	sub	sp, #16
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a8cc:	6839      	ldr	r1, [r7, #0]
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f000 ff90 	bl	800b7f4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a8e2:	461a      	mov	r2, r3
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a8f0:	f003 031f 	and.w	r3, r3, #31
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	d01a      	beq.n	800a92e <USBD_LL_SetupStage+0x72>
 800a8f8:	2b02      	cmp	r3, #2
 800a8fa:	d822      	bhi.n	800a942 <USBD_LL_SetupStage+0x86>
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d002      	beq.n	800a906 <USBD_LL_SetupStage+0x4a>
 800a900:	2b01      	cmp	r3, #1
 800a902:	d00a      	beq.n	800a91a <USBD_LL_SetupStage+0x5e>
 800a904:	e01d      	b.n	800a942 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a90c:	4619      	mov	r1, r3
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 fa62 	bl	800add8 <USBD_StdDevReq>
 800a914:	4603      	mov	r3, r0
 800a916:	73fb      	strb	r3, [r7, #15]
      break;
 800a918:	e020      	b.n	800a95c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a920:	4619      	mov	r1, r3
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 fac6 	bl	800aeb4 <USBD_StdItfReq>
 800a928:	4603      	mov	r3, r0
 800a92a:	73fb      	strb	r3, [r7, #15]
      break;
 800a92c:	e016      	b.n	800a95c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a934:	4619      	mov	r1, r3
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 fb05 	bl	800af46 <USBD_StdEPReq>
 800a93c:	4603      	mov	r3, r0
 800a93e:	73fb      	strb	r3, [r7, #15]
      break;
 800a940:	e00c      	b.n	800a95c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a948:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	4619      	mov	r1, r3
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f001 fcb7 	bl	800c2c4 <USBD_LL_StallEP>
 800a956:	4603      	mov	r3, r0
 800a958:	73fb      	strb	r3, [r7, #15]
      break;
 800a95a:	bf00      	nop
  }

  return ret;
 800a95c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3710      	adds	r7, #16
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}

0800a966 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a966:	b580      	push	{r7, lr}
 800a968:	b086      	sub	sp, #24
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	60f8      	str	r0, [r7, #12]
 800a96e:	460b      	mov	r3, r1
 800a970:	607a      	str	r2, [r7, #4]
 800a972:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a974:	7afb      	ldrb	r3, [r7, #11]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d138      	bne.n	800a9ec <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a980:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a988:	2b03      	cmp	r3, #3
 800a98a:	d14a      	bne.n	800aa22 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	689a      	ldr	r2, [r3, #8]
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	68db      	ldr	r3, [r3, #12]
 800a994:	429a      	cmp	r2, r3
 800a996:	d913      	bls.n	800a9c0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	689a      	ldr	r2, [r3, #8]
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	68db      	ldr	r3, [r3, #12]
 800a9a0:	1ad2      	subs	r2, r2, r3
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	68da      	ldr	r2, [r3, #12]
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	689b      	ldr	r3, [r3, #8]
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	bf28      	it	cs
 800a9b2:	4613      	movcs	r3, r2
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	6879      	ldr	r1, [r7, #4]
 800a9b8:	68f8      	ldr	r0, [r7, #12]
 800a9ba:	f001 f80f 	bl	800b9dc <USBD_CtlContinueRx>
 800a9be:	e030      	b.n	800aa22 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	2b03      	cmp	r3, #3
 800a9ca:	d10b      	bne.n	800a9e4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9d2:	691b      	ldr	r3, [r3, #16]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d005      	beq.n	800a9e4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9de:	691b      	ldr	r3, [r3, #16]
 800a9e0:	68f8      	ldr	r0, [r7, #12]
 800a9e2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a9e4:	68f8      	ldr	r0, [r7, #12]
 800a9e6:	f001 f80a 	bl	800b9fe <USBD_CtlSendStatus>
 800a9ea:	e01a      	b.n	800aa22 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	2b03      	cmp	r3, #3
 800a9f6:	d114      	bne.n	800aa22 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9fe:	699b      	ldr	r3, [r3, #24]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d00e      	beq.n	800aa22 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa0a:	699b      	ldr	r3, [r3, #24]
 800aa0c:	7afa      	ldrb	r2, [r7, #11]
 800aa0e:	4611      	mov	r1, r2
 800aa10:	68f8      	ldr	r0, [r7, #12]
 800aa12:	4798      	blx	r3
 800aa14:	4603      	mov	r3, r0
 800aa16:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800aa18:	7dfb      	ldrb	r3, [r7, #23]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d001      	beq.n	800aa22 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800aa1e:	7dfb      	ldrb	r3, [r7, #23]
 800aa20:	e000      	b.n	800aa24 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800aa22:	2300      	movs	r3, #0
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3718      	adds	r7, #24
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b086      	sub	sp, #24
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	60f8      	str	r0, [r7, #12]
 800aa34:	460b      	mov	r3, r1
 800aa36:	607a      	str	r2, [r7, #4]
 800aa38:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800aa3a:	7afb      	ldrb	r3, [r7, #11]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d16b      	bne.n	800ab18 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	3314      	adds	r3, #20
 800aa44:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aa4c:	2b02      	cmp	r3, #2
 800aa4e:	d156      	bne.n	800aafe <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	689a      	ldr	r2, [r3, #8]
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	68db      	ldr	r3, [r3, #12]
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d914      	bls.n	800aa86 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	689a      	ldr	r2, [r3, #8]
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	68db      	ldr	r3, [r3, #12]
 800aa64:	1ad2      	subs	r2, r2, r3
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	689b      	ldr	r3, [r3, #8]
 800aa6e:	461a      	mov	r2, r3
 800aa70:	6879      	ldr	r1, [r7, #4]
 800aa72:	68f8      	ldr	r0, [r7, #12]
 800aa74:	f000 ff84 	bl	800b980 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa78:	2300      	movs	r3, #0
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	2100      	movs	r1, #0
 800aa7e:	68f8      	ldr	r0, [r7, #12]
 800aa80:	f001 fcca 	bl	800c418 <USBD_LL_PrepareReceive>
 800aa84:	e03b      	b.n	800aafe <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	68da      	ldr	r2, [r3, #12]
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	689b      	ldr	r3, [r3, #8]
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	d11c      	bne.n	800aacc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	685a      	ldr	r2, [r3, #4]
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	d316      	bcc.n	800aacc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	685a      	ldr	r2, [r3, #4]
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d20f      	bcs.n	800aacc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aaac:	2200      	movs	r2, #0
 800aaae:	2100      	movs	r1, #0
 800aab0:	68f8      	ldr	r0, [r7, #12]
 800aab2:	f000 ff65 	bl	800b980 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2200      	movs	r2, #0
 800aaba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aabe:	2300      	movs	r3, #0
 800aac0:	2200      	movs	r2, #0
 800aac2:	2100      	movs	r1, #0
 800aac4:	68f8      	ldr	r0, [r7, #12]
 800aac6:	f001 fca7 	bl	800c418 <USBD_LL_PrepareReceive>
 800aaca:	e018      	b.n	800aafe <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aad2:	b2db      	uxtb	r3, r3
 800aad4:	2b03      	cmp	r3, #3
 800aad6:	d10b      	bne.n	800aaf0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aade:	68db      	ldr	r3, [r3, #12]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d005      	beq.n	800aaf0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaea:	68db      	ldr	r3, [r3, #12]
 800aaec:	68f8      	ldr	r0, [r7, #12]
 800aaee:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aaf0:	2180      	movs	r1, #128	; 0x80
 800aaf2:	68f8      	ldr	r0, [r7, #12]
 800aaf4:	f001 fbe6 	bl	800c2c4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800aaf8:	68f8      	ldr	r0, [r7, #12]
 800aafa:	f000 ff93 	bl	800ba24 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	d122      	bne.n	800ab4e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ab08:	68f8      	ldr	r0, [r7, #12]
 800ab0a:	f7ff fe98 	bl	800a83e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2200      	movs	r2, #0
 800ab12:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ab16:	e01a      	b.n	800ab4e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	2b03      	cmp	r3, #3
 800ab22:	d114      	bne.n	800ab4e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab2a:	695b      	ldr	r3, [r3, #20]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d00e      	beq.n	800ab4e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab36:	695b      	ldr	r3, [r3, #20]
 800ab38:	7afa      	ldrb	r2, [r7, #11]
 800ab3a:	4611      	mov	r1, r2
 800ab3c:	68f8      	ldr	r0, [r7, #12]
 800ab3e:	4798      	blx	r3
 800ab40:	4603      	mov	r3, r0
 800ab42:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ab44:	7dfb      	ldrb	r3, [r7, #23]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d001      	beq.n	800ab4e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ab4a:	7dfb      	ldrb	r3, [r7, #23]
 800ab4c:	e000      	b.n	800ab50 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ab4e:	2300      	movs	r3, #0
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3718      	adds	r7, #24
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b082      	sub	sp, #8
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2201      	movs	r2, #1
 800ab64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2200      	movs	r2, #0
 800ab74:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d101      	bne.n	800ab8c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ab88:	2303      	movs	r3, #3
 800ab8a:	e02f      	b.n	800abec <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d00f      	beq.n	800abb6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d009      	beq.n	800abb6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	6852      	ldr	r2, [r2, #4]
 800abae:	b2d2      	uxtb	r2, r2
 800abb0:	4611      	mov	r1, r2
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800abb6:	2340      	movs	r3, #64	; 0x40
 800abb8:	2200      	movs	r2, #0
 800abba:	2100      	movs	r1, #0
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f001 fb3c 	bl	800c23a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2201      	movs	r2, #1
 800abc6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2240      	movs	r2, #64	; 0x40
 800abce:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800abd2:	2340      	movs	r3, #64	; 0x40
 800abd4:	2200      	movs	r2, #0
 800abd6:	2180      	movs	r1, #128	; 0x80
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f001 fb2e 	bl	800c23a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2201      	movs	r2, #1
 800abe2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2240      	movs	r2, #64	; 0x40
 800abe8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800abea:	2300      	movs	r3, #0
}
 800abec:	4618      	mov	r0, r3
 800abee:	3708      	adds	r7, #8
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b083      	sub	sp, #12
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	460b      	mov	r3, r1
 800abfe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	78fa      	ldrb	r2, [r7, #3]
 800ac04:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ac06:	2300      	movs	r3, #0
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	370c      	adds	r7, #12
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr

0800ac14 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b083      	sub	sp, #12
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac22:	b2da      	uxtb	r2, r3
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2204      	movs	r2, #4
 800ac2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ac32:	2300      	movs	r3, #0
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	370c      	adds	r7, #12
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr

0800ac40 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac4e:	b2db      	uxtb	r3, r3
 800ac50:	2b04      	cmp	r3, #4
 800ac52:	d106      	bne.n	800ac62 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ac5a:	b2da      	uxtb	r2, r3
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ac62:	2300      	movs	r3, #0
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	370c      	adds	r7, #12
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr

0800ac70 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b082      	sub	sp, #8
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d101      	bne.n	800ac86 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800ac82:	2303      	movs	r3, #3
 800ac84:	e012      	b.n	800acac <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac8c:	b2db      	uxtb	r3, r3
 800ac8e:	2b03      	cmp	r3, #3
 800ac90:	d10b      	bne.n	800acaa <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac98:	69db      	ldr	r3, [r3, #28]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d005      	beq.n	800acaa <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aca4:	69db      	ldr	r3, [r3, #28]
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800acaa:	2300      	movs	r3, #0
}
 800acac:	4618      	mov	r0, r3
 800acae:	3708      	adds	r7, #8
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b082      	sub	sp, #8
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	460b      	mov	r3, r1
 800acbe:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d101      	bne.n	800acce <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800acca:	2303      	movs	r3, #3
 800accc:	e014      	b.n	800acf8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acd4:	b2db      	uxtb	r3, r3
 800acd6:	2b03      	cmp	r3, #3
 800acd8:	d10d      	bne.n	800acf6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ace0:	6a1b      	ldr	r3, [r3, #32]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d007      	beq.n	800acf6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acec:	6a1b      	ldr	r3, [r3, #32]
 800acee:	78fa      	ldrb	r2, [r7, #3]
 800acf0:	4611      	mov	r1, r2
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800acf6:	2300      	movs	r3, #0
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3708      	adds	r7, #8
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}

0800ad00 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	460b      	mov	r3, r1
 800ad0a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d101      	bne.n	800ad1a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800ad16:	2303      	movs	r3, #3
 800ad18:	e014      	b.n	800ad44 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	2b03      	cmp	r3, #3
 800ad24:	d10d      	bne.n	800ad42 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d007      	beq.n	800ad42 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad3a:	78fa      	ldrb	r2, [r7, #3]
 800ad3c:	4611      	mov	r1, r2
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ad42:	2300      	movs	r3, #0
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3708      	adds	r7, #8
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b083      	sub	sp, #12
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ad54:	2300      	movs	r3, #0
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	370c      	adds	r7, #12
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr

0800ad62 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ad62:	b580      	push	{r7, lr}
 800ad64:	b082      	sub	sp, #8
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d009      	beq.n	800ad90 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	6852      	ldr	r2, [r2, #4]
 800ad88:	b2d2      	uxtb	r2, r2
 800ad8a:	4611      	mov	r1, r2
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	4798      	blx	r3
  }

  return USBD_OK;
 800ad90:	2300      	movs	r3, #0
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3708      	adds	r7, #8
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}

0800ad9a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ad9a:	b480      	push	{r7}
 800ad9c:	b087      	sub	sp, #28
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	3301      	adds	r3, #1
 800adb0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	781b      	ldrb	r3, [r3, #0]
 800adb6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800adb8:	8a3b      	ldrh	r3, [r7, #16]
 800adba:	021b      	lsls	r3, r3, #8
 800adbc:	b21a      	sxth	r2, r3
 800adbe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800adc2:	4313      	orrs	r3, r2
 800adc4:	b21b      	sxth	r3, r3
 800adc6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800adc8:	89fb      	ldrh	r3, [r7, #14]
}
 800adca:	4618      	mov	r0, r3
 800adcc:	371c      	adds	r7, #28
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr
	...

0800add8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ade2:	2300      	movs	r3, #0
 800ade4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800adee:	2b40      	cmp	r3, #64	; 0x40
 800adf0:	d005      	beq.n	800adfe <USBD_StdDevReq+0x26>
 800adf2:	2b40      	cmp	r3, #64	; 0x40
 800adf4:	d853      	bhi.n	800ae9e <USBD_StdDevReq+0xc6>
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d00b      	beq.n	800ae12 <USBD_StdDevReq+0x3a>
 800adfa:	2b20      	cmp	r3, #32
 800adfc:	d14f      	bne.n	800ae9e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae04:	689b      	ldr	r3, [r3, #8]
 800ae06:	6839      	ldr	r1, [r7, #0]
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	4798      	blx	r3
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	73fb      	strb	r3, [r7, #15]
      break;
 800ae10:	e04a      	b.n	800aea8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	785b      	ldrb	r3, [r3, #1]
 800ae16:	2b09      	cmp	r3, #9
 800ae18:	d83b      	bhi.n	800ae92 <USBD_StdDevReq+0xba>
 800ae1a:	a201      	add	r2, pc, #4	; (adr r2, 800ae20 <USBD_StdDevReq+0x48>)
 800ae1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae20:	0800ae75 	.word	0x0800ae75
 800ae24:	0800ae89 	.word	0x0800ae89
 800ae28:	0800ae93 	.word	0x0800ae93
 800ae2c:	0800ae7f 	.word	0x0800ae7f
 800ae30:	0800ae93 	.word	0x0800ae93
 800ae34:	0800ae53 	.word	0x0800ae53
 800ae38:	0800ae49 	.word	0x0800ae49
 800ae3c:	0800ae93 	.word	0x0800ae93
 800ae40:	0800ae6b 	.word	0x0800ae6b
 800ae44:	0800ae5d 	.word	0x0800ae5d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ae48:	6839      	ldr	r1, [r7, #0]
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 f9de 	bl	800b20c <USBD_GetDescriptor>
          break;
 800ae50:	e024      	b.n	800ae9c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ae52:	6839      	ldr	r1, [r7, #0]
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 fb43 	bl	800b4e0 <USBD_SetAddress>
          break;
 800ae5a:	e01f      	b.n	800ae9c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ae5c:	6839      	ldr	r1, [r7, #0]
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 fb82 	bl	800b568 <USBD_SetConfig>
 800ae64:	4603      	mov	r3, r0
 800ae66:	73fb      	strb	r3, [r7, #15]
          break;
 800ae68:	e018      	b.n	800ae9c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ae6a:	6839      	ldr	r1, [r7, #0]
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 fc21 	bl	800b6b4 <USBD_GetConfig>
          break;
 800ae72:	e013      	b.n	800ae9c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ae74:	6839      	ldr	r1, [r7, #0]
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 fc52 	bl	800b720 <USBD_GetStatus>
          break;
 800ae7c:	e00e      	b.n	800ae9c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ae7e:	6839      	ldr	r1, [r7, #0]
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 fc81 	bl	800b788 <USBD_SetFeature>
          break;
 800ae86:	e009      	b.n	800ae9c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ae88:	6839      	ldr	r1, [r7, #0]
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f000 fc90 	bl	800b7b0 <USBD_ClrFeature>
          break;
 800ae90:	e004      	b.n	800ae9c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ae92:	6839      	ldr	r1, [r7, #0]
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 fce7 	bl	800b868 <USBD_CtlError>
          break;
 800ae9a:	bf00      	nop
      }
      break;
 800ae9c:	e004      	b.n	800aea8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ae9e:	6839      	ldr	r1, [r7, #0]
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f000 fce1 	bl	800b868 <USBD_CtlError>
      break;
 800aea6:	bf00      	nop
  }

  return ret;
 800aea8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3710      	adds	r7, #16
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
 800aeb2:	bf00      	nop

0800aeb4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aebe:	2300      	movs	r3, #0
 800aec0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aeca:	2b40      	cmp	r3, #64	; 0x40
 800aecc:	d005      	beq.n	800aeda <USBD_StdItfReq+0x26>
 800aece:	2b40      	cmp	r3, #64	; 0x40
 800aed0:	d82f      	bhi.n	800af32 <USBD_StdItfReq+0x7e>
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d001      	beq.n	800aeda <USBD_StdItfReq+0x26>
 800aed6:	2b20      	cmp	r3, #32
 800aed8:	d12b      	bne.n	800af32 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aee0:	b2db      	uxtb	r3, r3
 800aee2:	3b01      	subs	r3, #1
 800aee4:	2b02      	cmp	r3, #2
 800aee6:	d81d      	bhi.n	800af24 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	889b      	ldrh	r3, [r3, #4]
 800aeec:	b2db      	uxtb	r3, r3
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	d813      	bhi.n	800af1a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aef8:	689b      	ldr	r3, [r3, #8]
 800aefa:	6839      	ldr	r1, [r7, #0]
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	4798      	blx	r3
 800af00:	4603      	mov	r3, r0
 800af02:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	88db      	ldrh	r3, [r3, #6]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d110      	bne.n	800af2e <USBD_StdItfReq+0x7a>
 800af0c:	7bfb      	ldrb	r3, [r7, #15]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d10d      	bne.n	800af2e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 fd73 	bl	800b9fe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800af18:	e009      	b.n	800af2e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800af1a:	6839      	ldr	r1, [r7, #0]
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f000 fca3 	bl	800b868 <USBD_CtlError>
          break;
 800af22:	e004      	b.n	800af2e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800af24:	6839      	ldr	r1, [r7, #0]
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f000 fc9e 	bl	800b868 <USBD_CtlError>
          break;
 800af2c:	e000      	b.n	800af30 <USBD_StdItfReq+0x7c>
          break;
 800af2e:	bf00      	nop
      }
      break;
 800af30:	e004      	b.n	800af3c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800af32:	6839      	ldr	r1, [r7, #0]
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f000 fc97 	bl	800b868 <USBD_CtlError>
      break;
 800af3a:	bf00      	nop
  }

  return ret;
 800af3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3710      	adds	r7, #16
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}

0800af46 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af46:	b580      	push	{r7, lr}
 800af48:	b084      	sub	sp, #16
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]
 800af4e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800af50:	2300      	movs	r3, #0
 800af52:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	889b      	ldrh	r3, [r3, #4]
 800af58:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	781b      	ldrb	r3, [r3, #0]
 800af5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af62:	2b40      	cmp	r3, #64	; 0x40
 800af64:	d007      	beq.n	800af76 <USBD_StdEPReq+0x30>
 800af66:	2b40      	cmp	r3, #64	; 0x40
 800af68:	f200 8145 	bhi.w	800b1f6 <USBD_StdEPReq+0x2b0>
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d00c      	beq.n	800af8a <USBD_StdEPReq+0x44>
 800af70:	2b20      	cmp	r3, #32
 800af72:	f040 8140 	bne.w	800b1f6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af7c:	689b      	ldr	r3, [r3, #8]
 800af7e:	6839      	ldr	r1, [r7, #0]
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	4798      	blx	r3
 800af84:	4603      	mov	r3, r0
 800af86:	73fb      	strb	r3, [r7, #15]
      break;
 800af88:	e13a      	b.n	800b200 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	785b      	ldrb	r3, [r3, #1]
 800af8e:	2b03      	cmp	r3, #3
 800af90:	d007      	beq.n	800afa2 <USBD_StdEPReq+0x5c>
 800af92:	2b03      	cmp	r3, #3
 800af94:	f300 8129 	bgt.w	800b1ea <USBD_StdEPReq+0x2a4>
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d07f      	beq.n	800b09c <USBD_StdEPReq+0x156>
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d03c      	beq.n	800b01a <USBD_StdEPReq+0xd4>
 800afa0:	e123      	b.n	800b1ea <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afa8:	b2db      	uxtb	r3, r3
 800afaa:	2b02      	cmp	r3, #2
 800afac:	d002      	beq.n	800afb4 <USBD_StdEPReq+0x6e>
 800afae:	2b03      	cmp	r3, #3
 800afb0:	d016      	beq.n	800afe0 <USBD_StdEPReq+0x9a>
 800afb2:	e02c      	b.n	800b00e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afb4:	7bbb      	ldrb	r3, [r7, #14]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d00d      	beq.n	800afd6 <USBD_StdEPReq+0x90>
 800afba:	7bbb      	ldrb	r3, [r7, #14]
 800afbc:	2b80      	cmp	r3, #128	; 0x80
 800afbe:	d00a      	beq.n	800afd6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800afc0:	7bbb      	ldrb	r3, [r7, #14]
 800afc2:	4619      	mov	r1, r3
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f001 f97d 	bl	800c2c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800afca:	2180      	movs	r1, #128	; 0x80
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f001 f979 	bl	800c2c4 <USBD_LL_StallEP>
 800afd2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800afd4:	e020      	b.n	800b018 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800afd6:	6839      	ldr	r1, [r7, #0]
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f000 fc45 	bl	800b868 <USBD_CtlError>
              break;
 800afde:	e01b      	b.n	800b018 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	885b      	ldrh	r3, [r3, #2]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d10e      	bne.n	800b006 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800afe8:	7bbb      	ldrb	r3, [r7, #14]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d00b      	beq.n	800b006 <USBD_StdEPReq+0xc0>
 800afee:	7bbb      	ldrb	r3, [r7, #14]
 800aff0:	2b80      	cmp	r3, #128	; 0x80
 800aff2:	d008      	beq.n	800b006 <USBD_StdEPReq+0xc0>
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	88db      	ldrh	r3, [r3, #6]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d104      	bne.n	800b006 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800affc:	7bbb      	ldrb	r3, [r7, #14]
 800affe:	4619      	mov	r1, r3
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f001 f95f 	bl	800c2c4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f000 fcf9 	bl	800b9fe <USBD_CtlSendStatus>

              break;
 800b00c:	e004      	b.n	800b018 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b00e:	6839      	ldr	r1, [r7, #0]
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f000 fc29 	bl	800b868 <USBD_CtlError>
              break;
 800b016:	bf00      	nop
          }
          break;
 800b018:	e0ec      	b.n	800b1f4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b020:	b2db      	uxtb	r3, r3
 800b022:	2b02      	cmp	r3, #2
 800b024:	d002      	beq.n	800b02c <USBD_StdEPReq+0xe6>
 800b026:	2b03      	cmp	r3, #3
 800b028:	d016      	beq.n	800b058 <USBD_StdEPReq+0x112>
 800b02a:	e030      	b.n	800b08e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b02c:	7bbb      	ldrb	r3, [r7, #14]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d00d      	beq.n	800b04e <USBD_StdEPReq+0x108>
 800b032:	7bbb      	ldrb	r3, [r7, #14]
 800b034:	2b80      	cmp	r3, #128	; 0x80
 800b036:	d00a      	beq.n	800b04e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b038:	7bbb      	ldrb	r3, [r7, #14]
 800b03a:	4619      	mov	r1, r3
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f001 f941 	bl	800c2c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b042:	2180      	movs	r1, #128	; 0x80
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f001 f93d 	bl	800c2c4 <USBD_LL_StallEP>
 800b04a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b04c:	e025      	b.n	800b09a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b04e:	6839      	ldr	r1, [r7, #0]
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f000 fc09 	bl	800b868 <USBD_CtlError>
              break;
 800b056:	e020      	b.n	800b09a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	885b      	ldrh	r3, [r3, #2]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d11b      	bne.n	800b098 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b060:	7bbb      	ldrb	r3, [r7, #14]
 800b062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b066:	2b00      	cmp	r3, #0
 800b068:	d004      	beq.n	800b074 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b06a:	7bbb      	ldrb	r3, [r7, #14]
 800b06c:	4619      	mov	r1, r3
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f001 f947 	bl	800c302 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 fcc2 	bl	800b9fe <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b080:	689b      	ldr	r3, [r3, #8]
 800b082:	6839      	ldr	r1, [r7, #0]
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	4798      	blx	r3
 800b088:	4603      	mov	r3, r0
 800b08a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b08c:	e004      	b.n	800b098 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b08e:	6839      	ldr	r1, [r7, #0]
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f000 fbe9 	bl	800b868 <USBD_CtlError>
              break;
 800b096:	e000      	b.n	800b09a <USBD_StdEPReq+0x154>
              break;
 800b098:	bf00      	nop
          }
          break;
 800b09a:	e0ab      	b.n	800b1f4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0a2:	b2db      	uxtb	r3, r3
 800b0a4:	2b02      	cmp	r3, #2
 800b0a6:	d002      	beq.n	800b0ae <USBD_StdEPReq+0x168>
 800b0a8:	2b03      	cmp	r3, #3
 800b0aa:	d032      	beq.n	800b112 <USBD_StdEPReq+0x1cc>
 800b0ac:	e097      	b.n	800b1de <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b0ae:	7bbb      	ldrb	r3, [r7, #14]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d007      	beq.n	800b0c4 <USBD_StdEPReq+0x17e>
 800b0b4:	7bbb      	ldrb	r3, [r7, #14]
 800b0b6:	2b80      	cmp	r3, #128	; 0x80
 800b0b8:	d004      	beq.n	800b0c4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b0ba:	6839      	ldr	r1, [r7, #0]
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f000 fbd3 	bl	800b868 <USBD_CtlError>
                break;
 800b0c2:	e091      	b.n	800b1e8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	da0b      	bge.n	800b0e4 <USBD_StdEPReq+0x19e>
 800b0cc:	7bbb      	ldrb	r3, [r7, #14]
 800b0ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b0d2:	4613      	mov	r3, r2
 800b0d4:	009b      	lsls	r3, r3, #2
 800b0d6:	4413      	add	r3, r2
 800b0d8:	009b      	lsls	r3, r3, #2
 800b0da:	3310      	adds	r3, #16
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	4413      	add	r3, r2
 800b0e0:	3304      	adds	r3, #4
 800b0e2:	e00b      	b.n	800b0fc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b0e4:	7bbb      	ldrb	r3, [r7, #14]
 800b0e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0ea:	4613      	mov	r3, r2
 800b0ec:	009b      	lsls	r3, r3, #2
 800b0ee:	4413      	add	r3, r2
 800b0f0:	009b      	lsls	r3, r3, #2
 800b0f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b0f6:	687a      	ldr	r2, [r7, #4]
 800b0f8:	4413      	add	r3, r2
 800b0fa:	3304      	adds	r3, #4
 800b0fc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	2200      	movs	r2, #0
 800b102:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	2202      	movs	r2, #2
 800b108:	4619      	mov	r1, r3
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 fc1d 	bl	800b94a <USBD_CtlSendData>
              break;
 800b110:	e06a      	b.n	800b1e8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b112:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b116:	2b00      	cmp	r3, #0
 800b118:	da11      	bge.n	800b13e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b11a:	7bbb      	ldrb	r3, [r7, #14]
 800b11c:	f003 020f 	and.w	r2, r3, #15
 800b120:	6879      	ldr	r1, [r7, #4]
 800b122:	4613      	mov	r3, r2
 800b124:	009b      	lsls	r3, r3, #2
 800b126:	4413      	add	r3, r2
 800b128:	009b      	lsls	r3, r3, #2
 800b12a:	440b      	add	r3, r1
 800b12c:	3324      	adds	r3, #36	; 0x24
 800b12e:	881b      	ldrh	r3, [r3, #0]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d117      	bne.n	800b164 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b134:	6839      	ldr	r1, [r7, #0]
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 fb96 	bl	800b868 <USBD_CtlError>
                  break;
 800b13c:	e054      	b.n	800b1e8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b13e:	7bbb      	ldrb	r3, [r7, #14]
 800b140:	f003 020f 	and.w	r2, r3, #15
 800b144:	6879      	ldr	r1, [r7, #4]
 800b146:	4613      	mov	r3, r2
 800b148:	009b      	lsls	r3, r3, #2
 800b14a:	4413      	add	r3, r2
 800b14c:	009b      	lsls	r3, r3, #2
 800b14e:	440b      	add	r3, r1
 800b150:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b154:	881b      	ldrh	r3, [r3, #0]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d104      	bne.n	800b164 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b15a:	6839      	ldr	r1, [r7, #0]
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f000 fb83 	bl	800b868 <USBD_CtlError>
                  break;
 800b162:	e041      	b.n	800b1e8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b164:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	da0b      	bge.n	800b184 <USBD_StdEPReq+0x23e>
 800b16c:	7bbb      	ldrb	r3, [r7, #14]
 800b16e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b172:	4613      	mov	r3, r2
 800b174:	009b      	lsls	r3, r3, #2
 800b176:	4413      	add	r3, r2
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	3310      	adds	r3, #16
 800b17c:	687a      	ldr	r2, [r7, #4]
 800b17e:	4413      	add	r3, r2
 800b180:	3304      	adds	r3, #4
 800b182:	e00b      	b.n	800b19c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b184:	7bbb      	ldrb	r3, [r7, #14]
 800b186:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b18a:	4613      	mov	r3, r2
 800b18c:	009b      	lsls	r3, r3, #2
 800b18e:	4413      	add	r3, r2
 800b190:	009b      	lsls	r3, r3, #2
 800b192:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b196:	687a      	ldr	r2, [r7, #4]
 800b198:	4413      	add	r3, r2
 800b19a:	3304      	adds	r3, #4
 800b19c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b19e:	7bbb      	ldrb	r3, [r7, #14]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d002      	beq.n	800b1aa <USBD_StdEPReq+0x264>
 800b1a4:	7bbb      	ldrb	r3, [r7, #14]
 800b1a6:	2b80      	cmp	r3, #128	; 0x80
 800b1a8:	d103      	bne.n	800b1b2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	601a      	str	r2, [r3, #0]
 800b1b0:	e00e      	b.n	800b1d0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b1b2:	7bbb      	ldrb	r3, [r7, #14]
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f001 f8c2 	bl	800c340 <USBD_LL_IsStallEP>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d003      	beq.n	800b1ca <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	601a      	str	r2, [r3, #0]
 800b1c8:	e002      	b.n	800b1d0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	2202      	movs	r2, #2
 800b1d4:	4619      	mov	r1, r3
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f000 fbb7 	bl	800b94a <USBD_CtlSendData>
              break;
 800b1dc:	e004      	b.n	800b1e8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b1de:	6839      	ldr	r1, [r7, #0]
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f000 fb41 	bl	800b868 <USBD_CtlError>
              break;
 800b1e6:	bf00      	nop
          }
          break;
 800b1e8:	e004      	b.n	800b1f4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b1ea:	6839      	ldr	r1, [r7, #0]
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f000 fb3b 	bl	800b868 <USBD_CtlError>
          break;
 800b1f2:	bf00      	nop
      }
      break;
 800b1f4:	e004      	b.n	800b200 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b1f6:	6839      	ldr	r1, [r7, #0]
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f000 fb35 	bl	800b868 <USBD_CtlError>
      break;
 800b1fe:	bf00      	nop
  }

  return ret;
 800b200:	7bfb      	ldrb	r3, [r7, #15]
}
 800b202:	4618      	mov	r0, r3
 800b204:	3710      	adds	r7, #16
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}
	...

0800b20c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b216:	2300      	movs	r3, #0
 800b218:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b21a:	2300      	movs	r3, #0
 800b21c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b21e:	2300      	movs	r3, #0
 800b220:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	885b      	ldrh	r3, [r3, #2]
 800b226:	0a1b      	lsrs	r3, r3, #8
 800b228:	b29b      	uxth	r3, r3
 800b22a:	3b01      	subs	r3, #1
 800b22c:	2b06      	cmp	r3, #6
 800b22e:	f200 8128 	bhi.w	800b482 <USBD_GetDescriptor+0x276>
 800b232:	a201      	add	r2, pc, #4	; (adr r2, 800b238 <USBD_GetDescriptor+0x2c>)
 800b234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b238:	0800b255 	.word	0x0800b255
 800b23c:	0800b26d 	.word	0x0800b26d
 800b240:	0800b2ad 	.word	0x0800b2ad
 800b244:	0800b483 	.word	0x0800b483
 800b248:	0800b483 	.word	0x0800b483
 800b24c:	0800b423 	.word	0x0800b423
 800b250:	0800b44f 	.word	0x0800b44f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	687a      	ldr	r2, [r7, #4]
 800b25e:	7c12      	ldrb	r2, [r2, #16]
 800b260:	f107 0108 	add.w	r1, r7, #8
 800b264:	4610      	mov	r0, r2
 800b266:	4798      	blx	r3
 800b268:	60f8      	str	r0, [r7, #12]
      break;
 800b26a:	e112      	b.n	800b492 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	7c1b      	ldrb	r3, [r3, #16]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d10d      	bne.n	800b290 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b27a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b27c:	f107 0208 	add.w	r2, r7, #8
 800b280:	4610      	mov	r0, r2
 800b282:	4798      	blx	r3
 800b284:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	3301      	adds	r3, #1
 800b28a:	2202      	movs	r2, #2
 800b28c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b28e:	e100      	b.n	800b492 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b298:	f107 0208 	add.w	r2, r7, #8
 800b29c:	4610      	mov	r0, r2
 800b29e:	4798      	blx	r3
 800b2a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	3301      	adds	r3, #1
 800b2a6:	2202      	movs	r2, #2
 800b2a8:	701a      	strb	r2, [r3, #0]
      break;
 800b2aa:	e0f2      	b.n	800b492 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	885b      	ldrh	r3, [r3, #2]
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	2b05      	cmp	r3, #5
 800b2b4:	f200 80ac 	bhi.w	800b410 <USBD_GetDescriptor+0x204>
 800b2b8:	a201      	add	r2, pc, #4	; (adr r2, 800b2c0 <USBD_GetDescriptor+0xb4>)
 800b2ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2be:	bf00      	nop
 800b2c0:	0800b2d9 	.word	0x0800b2d9
 800b2c4:	0800b30d 	.word	0x0800b30d
 800b2c8:	0800b341 	.word	0x0800b341
 800b2cc:	0800b375 	.word	0x0800b375
 800b2d0:	0800b3a9 	.word	0x0800b3a9
 800b2d4:	0800b3dd 	.word	0x0800b3dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d00b      	beq.n	800b2fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	687a      	ldr	r2, [r7, #4]
 800b2ee:	7c12      	ldrb	r2, [r2, #16]
 800b2f0:	f107 0108 	add.w	r1, r7, #8
 800b2f4:	4610      	mov	r0, r2
 800b2f6:	4798      	blx	r3
 800b2f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2fa:	e091      	b.n	800b420 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b2fc:	6839      	ldr	r1, [r7, #0]
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f000 fab2 	bl	800b868 <USBD_CtlError>
            err++;
 800b304:	7afb      	ldrb	r3, [r7, #11]
 800b306:	3301      	adds	r3, #1
 800b308:	72fb      	strb	r3, [r7, #11]
          break;
 800b30a:	e089      	b.n	800b420 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b312:	689b      	ldr	r3, [r3, #8]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d00b      	beq.n	800b330 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b31e:	689b      	ldr	r3, [r3, #8]
 800b320:	687a      	ldr	r2, [r7, #4]
 800b322:	7c12      	ldrb	r2, [r2, #16]
 800b324:	f107 0108 	add.w	r1, r7, #8
 800b328:	4610      	mov	r0, r2
 800b32a:	4798      	blx	r3
 800b32c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b32e:	e077      	b.n	800b420 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b330:	6839      	ldr	r1, [r7, #0]
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f000 fa98 	bl	800b868 <USBD_CtlError>
            err++;
 800b338:	7afb      	ldrb	r3, [r7, #11]
 800b33a:	3301      	adds	r3, #1
 800b33c:	72fb      	strb	r3, [r7, #11]
          break;
 800b33e:	e06f      	b.n	800b420 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b346:	68db      	ldr	r3, [r3, #12]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d00b      	beq.n	800b364 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b352:	68db      	ldr	r3, [r3, #12]
 800b354:	687a      	ldr	r2, [r7, #4]
 800b356:	7c12      	ldrb	r2, [r2, #16]
 800b358:	f107 0108 	add.w	r1, r7, #8
 800b35c:	4610      	mov	r0, r2
 800b35e:	4798      	blx	r3
 800b360:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b362:	e05d      	b.n	800b420 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b364:	6839      	ldr	r1, [r7, #0]
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f000 fa7e 	bl	800b868 <USBD_CtlError>
            err++;
 800b36c:	7afb      	ldrb	r3, [r7, #11]
 800b36e:	3301      	adds	r3, #1
 800b370:	72fb      	strb	r3, [r7, #11]
          break;
 800b372:	e055      	b.n	800b420 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b37a:	691b      	ldr	r3, [r3, #16]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d00b      	beq.n	800b398 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b386:	691b      	ldr	r3, [r3, #16]
 800b388:	687a      	ldr	r2, [r7, #4]
 800b38a:	7c12      	ldrb	r2, [r2, #16]
 800b38c:	f107 0108 	add.w	r1, r7, #8
 800b390:	4610      	mov	r0, r2
 800b392:	4798      	blx	r3
 800b394:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b396:	e043      	b.n	800b420 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b398:	6839      	ldr	r1, [r7, #0]
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f000 fa64 	bl	800b868 <USBD_CtlError>
            err++;
 800b3a0:	7afb      	ldrb	r3, [r7, #11]
 800b3a2:	3301      	adds	r3, #1
 800b3a4:	72fb      	strb	r3, [r7, #11]
          break;
 800b3a6:	e03b      	b.n	800b420 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3ae:	695b      	ldr	r3, [r3, #20]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d00b      	beq.n	800b3cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3ba:	695b      	ldr	r3, [r3, #20]
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	7c12      	ldrb	r2, [r2, #16]
 800b3c0:	f107 0108 	add.w	r1, r7, #8
 800b3c4:	4610      	mov	r0, r2
 800b3c6:	4798      	blx	r3
 800b3c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3ca:	e029      	b.n	800b420 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3cc:	6839      	ldr	r1, [r7, #0]
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f000 fa4a 	bl	800b868 <USBD_CtlError>
            err++;
 800b3d4:	7afb      	ldrb	r3, [r7, #11]
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	72fb      	strb	r3, [r7, #11]
          break;
 800b3da:	e021      	b.n	800b420 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3e2:	699b      	ldr	r3, [r3, #24]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d00b      	beq.n	800b400 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3ee:	699b      	ldr	r3, [r3, #24]
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	7c12      	ldrb	r2, [r2, #16]
 800b3f4:	f107 0108 	add.w	r1, r7, #8
 800b3f8:	4610      	mov	r0, r2
 800b3fa:	4798      	blx	r3
 800b3fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3fe:	e00f      	b.n	800b420 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b400:	6839      	ldr	r1, [r7, #0]
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 fa30 	bl	800b868 <USBD_CtlError>
            err++;
 800b408:	7afb      	ldrb	r3, [r7, #11]
 800b40a:	3301      	adds	r3, #1
 800b40c:	72fb      	strb	r3, [r7, #11]
          break;
 800b40e:	e007      	b.n	800b420 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b410:	6839      	ldr	r1, [r7, #0]
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f000 fa28 	bl	800b868 <USBD_CtlError>
          err++;
 800b418:	7afb      	ldrb	r3, [r7, #11]
 800b41a:	3301      	adds	r3, #1
 800b41c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b41e:	bf00      	nop
      }
      break;
 800b420:	e037      	b.n	800b492 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	7c1b      	ldrb	r3, [r3, #16]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d109      	bne.n	800b43e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b432:	f107 0208 	add.w	r2, r7, #8
 800b436:	4610      	mov	r0, r2
 800b438:	4798      	blx	r3
 800b43a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b43c:	e029      	b.n	800b492 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b43e:	6839      	ldr	r1, [r7, #0]
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f000 fa11 	bl	800b868 <USBD_CtlError>
        err++;
 800b446:	7afb      	ldrb	r3, [r7, #11]
 800b448:	3301      	adds	r3, #1
 800b44a:	72fb      	strb	r3, [r7, #11]
      break;
 800b44c:	e021      	b.n	800b492 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	7c1b      	ldrb	r3, [r3, #16]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d10d      	bne.n	800b472 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b45c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b45e:	f107 0208 	add.w	r2, r7, #8
 800b462:	4610      	mov	r0, r2
 800b464:	4798      	blx	r3
 800b466:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	3301      	adds	r3, #1
 800b46c:	2207      	movs	r2, #7
 800b46e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b470:	e00f      	b.n	800b492 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b472:	6839      	ldr	r1, [r7, #0]
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f000 f9f7 	bl	800b868 <USBD_CtlError>
        err++;
 800b47a:	7afb      	ldrb	r3, [r7, #11]
 800b47c:	3301      	adds	r3, #1
 800b47e:	72fb      	strb	r3, [r7, #11]
      break;
 800b480:	e007      	b.n	800b492 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b482:	6839      	ldr	r1, [r7, #0]
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f000 f9ef 	bl	800b868 <USBD_CtlError>
      err++;
 800b48a:	7afb      	ldrb	r3, [r7, #11]
 800b48c:	3301      	adds	r3, #1
 800b48e:	72fb      	strb	r3, [r7, #11]
      break;
 800b490:	bf00      	nop
  }

  if (err != 0U)
 800b492:	7afb      	ldrb	r3, [r7, #11]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d11e      	bne.n	800b4d6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	88db      	ldrh	r3, [r3, #6]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d016      	beq.n	800b4ce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b4a0:	893b      	ldrh	r3, [r7, #8]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d00e      	beq.n	800b4c4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	88da      	ldrh	r2, [r3, #6]
 800b4aa:	893b      	ldrh	r3, [r7, #8]
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	bf28      	it	cs
 800b4b0:	4613      	movcs	r3, r2
 800b4b2:	b29b      	uxth	r3, r3
 800b4b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b4b6:	893b      	ldrh	r3, [r7, #8]
 800b4b8:	461a      	mov	r2, r3
 800b4ba:	68f9      	ldr	r1, [r7, #12]
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f000 fa44 	bl	800b94a <USBD_CtlSendData>
 800b4c2:	e009      	b.n	800b4d8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b4c4:	6839      	ldr	r1, [r7, #0]
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f000 f9ce 	bl	800b868 <USBD_CtlError>
 800b4cc:	e004      	b.n	800b4d8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 fa95 	bl	800b9fe <USBD_CtlSendStatus>
 800b4d4:	e000      	b.n	800b4d8 <USBD_GetDescriptor+0x2cc>
    return;
 800b4d6:	bf00      	nop
  }
}
 800b4d8:	3710      	adds	r7, #16
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
 800b4de:	bf00      	nop

0800b4e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b084      	sub	sp, #16
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	889b      	ldrh	r3, [r3, #4]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d131      	bne.n	800b556 <USBD_SetAddress+0x76>
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	88db      	ldrh	r3, [r3, #6]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d12d      	bne.n	800b556 <USBD_SetAddress+0x76>
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	885b      	ldrh	r3, [r3, #2]
 800b4fe:	2b7f      	cmp	r3, #127	; 0x7f
 800b500:	d829      	bhi.n	800b556 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	885b      	ldrh	r3, [r3, #2]
 800b506:	b2db      	uxtb	r3, r3
 800b508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b50c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b514:	b2db      	uxtb	r3, r3
 800b516:	2b03      	cmp	r3, #3
 800b518:	d104      	bne.n	800b524 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b51a:	6839      	ldr	r1, [r7, #0]
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f000 f9a3 	bl	800b868 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b522:	e01d      	b.n	800b560 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	7bfa      	ldrb	r2, [r7, #15]
 800b528:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b52c:	7bfb      	ldrb	r3, [r7, #15]
 800b52e:	4619      	mov	r1, r3
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f000 ff31 	bl	800c398 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 fa61 	bl	800b9fe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b53c:	7bfb      	ldrb	r3, [r7, #15]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d004      	beq.n	800b54c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2202      	movs	r2, #2
 800b546:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b54a:	e009      	b.n	800b560 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2201      	movs	r2, #1
 800b550:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b554:	e004      	b.n	800b560 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b556:	6839      	ldr	r1, [r7, #0]
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f000 f985 	bl	800b868 <USBD_CtlError>
  }
}
 800b55e:	bf00      	nop
 800b560:	bf00      	nop
 800b562:	3710      	adds	r7, #16
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b084      	sub	sp, #16
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b572:	2300      	movs	r3, #0
 800b574:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	885b      	ldrh	r3, [r3, #2]
 800b57a:	b2da      	uxtb	r2, r3
 800b57c:	4b4c      	ldr	r3, [pc, #304]	; (800b6b0 <USBD_SetConfig+0x148>)
 800b57e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b580:	4b4b      	ldr	r3, [pc, #300]	; (800b6b0 <USBD_SetConfig+0x148>)
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	2b01      	cmp	r3, #1
 800b586:	d905      	bls.n	800b594 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b588:	6839      	ldr	r1, [r7, #0]
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 f96c 	bl	800b868 <USBD_CtlError>
    return USBD_FAIL;
 800b590:	2303      	movs	r3, #3
 800b592:	e088      	b.n	800b6a6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b59a:	b2db      	uxtb	r3, r3
 800b59c:	2b02      	cmp	r3, #2
 800b59e:	d002      	beq.n	800b5a6 <USBD_SetConfig+0x3e>
 800b5a0:	2b03      	cmp	r3, #3
 800b5a2:	d025      	beq.n	800b5f0 <USBD_SetConfig+0x88>
 800b5a4:	e071      	b.n	800b68a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b5a6:	4b42      	ldr	r3, [pc, #264]	; (800b6b0 <USBD_SetConfig+0x148>)
 800b5a8:	781b      	ldrb	r3, [r3, #0]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d01c      	beq.n	800b5e8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b5ae:	4b40      	ldr	r3, [pc, #256]	; (800b6b0 <USBD_SetConfig+0x148>)
 800b5b0:	781b      	ldrb	r3, [r3, #0]
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b5b8:	4b3d      	ldr	r3, [pc, #244]	; (800b6b0 <USBD_SetConfig+0x148>)
 800b5ba:	781b      	ldrb	r3, [r3, #0]
 800b5bc:	4619      	mov	r1, r3
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f7ff f948 	bl	800a854 <USBD_SetClassConfig>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b5c8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d004      	beq.n	800b5d8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b5ce:	6839      	ldr	r1, [r7, #0]
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f000 f949 	bl	800b868 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b5d6:	e065      	b.n	800b6a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f000 fa10 	bl	800b9fe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2203      	movs	r2, #3
 800b5e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b5e6:	e05d      	b.n	800b6a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f000 fa08 	bl	800b9fe <USBD_CtlSendStatus>
      break;
 800b5ee:	e059      	b.n	800b6a4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b5f0:	4b2f      	ldr	r3, [pc, #188]	; (800b6b0 <USBD_SetConfig+0x148>)
 800b5f2:	781b      	ldrb	r3, [r3, #0]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d112      	bne.n	800b61e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2202      	movs	r2, #2
 800b5fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b600:	4b2b      	ldr	r3, [pc, #172]	; (800b6b0 <USBD_SetConfig+0x148>)
 800b602:	781b      	ldrb	r3, [r3, #0]
 800b604:	461a      	mov	r2, r3
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b60a:	4b29      	ldr	r3, [pc, #164]	; (800b6b0 <USBD_SetConfig+0x148>)
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	4619      	mov	r1, r3
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f7ff f93b 	bl	800a88c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 f9f1 	bl	800b9fe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b61c:	e042      	b.n	800b6a4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b61e:	4b24      	ldr	r3, [pc, #144]	; (800b6b0 <USBD_SetConfig+0x148>)
 800b620:	781b      	ldrb	r3, [r3, #0]
 800b622:	461a      	mov	r2, r3
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	429a      	cmp	r2, r3
 800b62a:	d02a      	beq.n	800b682 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	b2db      	uxtb	r3, r3
 800b632:	4619      	mov	r1, r3
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f7ff f929 	bl	800a88c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b63a:	4b1d      	ldr	r3, [pc, #116]	; (800b6b0 <USBD_SetConfig+0x148>)
 800b63c:	781b      	ldrb	r3, [r3, #0]
 800b63e:	461a      	mov	r2, r3
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b644:	4b1a      	ldr	r3, [pc, #104]	; (800b6b0 <USBD_SetConfig+0x148>)
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	4619      	mov	r1, r3
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f7ff f902 	bl	800a854 <USBD_SetClassConfig>
 800b650:	4603      	mov	r3, r0
 800b652:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b654:	7bfb      	ldrb	r3, [r7, #15]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d00f      	beq.n	800b67a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b65a:	6839      	ldr	r1, [r7, #0]
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 f903 	bl	800b868 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	685b      	ldr	r3, [r3, #4]
 800b666:	b2db      	uxtb	r3, r3
 800b668:	4619      	mov	r1, r3
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f7ff f90e 	bl	800a88c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2202      	movs	r2, #2
 800b674:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b678:	e014      	b.n	800b6a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f000 f9bf 	bl	800b9fe <USBD_CtlSendStatus>
      break;
 800b680:	e010      	b.n	800b6a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 f9bb 	bl	800b9fe <USBD_CtlSendStatus>
      break;
 800b688:	e00c      	b.n	800b6a4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b68a:	6839      	ldr	r1, [r7, #0]
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f000 f8eb 	bl	800b868 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b692:	4b07      	ldr	r3, [pc, #28]	; (800b6b0 <USBD_SetConfig+0x148>)
 800b694:	781b      	ldrb	r3, [r3, #0]
 800b696:	4619      	mov	r1, r3
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f7ff f8f7 	bl	800a88c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b69e:	2303      	movs	r3, #3
 800b6a0:	73fb      	strb	r3, [r7, #15]
      break;
 800b6a2:	bf00      	nop
  }

  return ret;
 800b6a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3710      	adds	r7, #16
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	20000395 	.word	0x20000395

0800b6b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b082      	sub	sp, #8
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	88db      	ldrh	r3, [r3, #6]
 800b6c2:	2b01      	cmp	r3, #1
 800b6c4:	d004      	beq.n	800b6d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b6c6:	6839      	ldr	r1, [r7, #0]
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f000 f8cd 	bl	800b868 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b6ce:	e023      	b.n	800b718 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	2b02      	cmp	r3, #2
 800b6da:	dc02      	bgt.n	800b6e2 <USBD_GetConfig+0x2e>
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	dc03      	bgt.n	800b6e8 <USBD_GetConfig+0x34>
 800b6e0:	e015      	b.n	800b70e <USBD_GetConfig+0x5a>
 800b6e2:	2b03      	cmp	r3, #3
 800b6e4:	d00b      	beq.n	800b6fe <USBD_GetConfig+0x4a>
 800b6e6:	e012      	b.n	800b70e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	3308      	adds	r3, #8
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f000 f927 	bl	800b94a <USBD_CtlSendData>
        break;
 800b6fc:	e00c      	b.n	800b718 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	3304      	adds	r3, #4
 800b702:	2201      	movs	r2, #1
 800b704:	4619      	mov	r1, r3
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 f91f 	bl	800b94a <USBD_CtlSendData>
        break;
 800b70c:	e004      	b.n	800b718 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b70e:	6839      	ldr	r1, [r7, #0]
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f000 f8a9 	bl	800b868 <USBD_CtlError>
        break;
 800b716:	bf00      	nop
}
 800b718:	bf00      	nop
 800b71a:	3708      	adds	r7, #8
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b082      	sub	sp, #8
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b730:	b2db      	uxtb	r3, r3
 800b732:	3b01      	subs	r3, #1
 800b734:	2b02      	cmp	r3, #2
 800b736:	d81e      	bhi.n	800b776 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	88db      	ldrh	r3, [r3, #6]
 800b73c:	2b02      	cmp	r3, #2
 800b73e:	d004      	beq.n	800b74a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b740:	6839      	ldr	r1, [r7, #0]
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f000 f890 	bl	800b868 <USBD_CtlError>
        break;
 800b748:	e01a      	b.n	800b780 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2201      	movs	r2, #1
 800b74e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b756:	2b00      	cmp	r3, #0
 800b758:	d005      	beq.n	800b766 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	68db      	ldr	r3, [r3, #12]
 800b75e:	f043 0202 	orr.w	r2, r3, #2
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	330c      	adds	r3, #12
 800b76a:	2202      	movs	r2, #2
 800b76c:	4619      	mov	r1, r3
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 f8eb 	bl	800b94a <USBD_CtlSendData>
      break;
 800b774:	e004      	b.n	800b780 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b776:	6839      	ldr	r1, [r7, #0]
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 f875 	bl	800b868 <USBD_CtlError>
      break;
 800b77e:	bf00      	nop
  }
}
 800b780:	bf00      	nop
 800b782:	3708      	adds	r7, #8
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b082      	sub	sp, #8
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	885b      	ldrh	r3, [r3, #2]
 800b796:	2b01      	cmp	r3, #1
 800b798:	d106      	bne.n	800b7a8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2201      	movs	r2, #1
 800b79e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f000 f92b 	bl	800b9fe <USBD_CtlSendStatus>
  }
}
 800b7a8:	bf00      	nop
 800b7aa:	3708      	adds	r7, #8
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	3b01      	subs	r3, #1
 800b7c4:	2b02      	cmp	r3, #2
 800b7c6:	d80b      	bhi.n	800b7e0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	885b      	ldrh	r3, [r3, #2]
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	d10c      	bne.n	800b7ea <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f000 f910 	bl	800b9fe <USBD_CtlSendStatus>
      }
      break;
 800b7de:	e004      	b.n	800b7ea <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b7e0:	6839      	ldr	r1, [r7, #0]
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f000 f840 	bl	800b868 <USBD_CtlError>
      break;
 800b7e8:	e000      	b.n	800b7ec <USBD_ClrFeature+0x3c>
      break;
 800b7ea:	bf00      	nop
  }
}
 800b7ec:	bf00      	nop
 800b7ee:	3708      	adds	r7, #8
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b084      	sub	sp, #16
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	781a      	ldrb	r2, [r3, #0]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	3301      	adds	r3, #1
 800b80e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	781a      	ldrb	r2, [r3, #0]
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	3301      	adds	r3, #1
 800b81c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b81e:	68f8      	ldr	r0, [r7, #12]
 800b820:	f7ff fabb 	bl	800ad9a <SWAPBYTE>
 800b824:	4603      	mov	r3, r0
 800b826:	461a      	mov	r2, r3
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	3301      	adds	r3, #1
 800b830:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	3301      	adds	r3, #1
 800b836:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b838:	68f8      	ldr	r0, [r7, #12]
 800b83a:	f7ff faae 	bl	800ad9a <SWAPBYTE>
 800b83e:	4603      	mov	r3, r0
 800b840:	461a      	mov	r2, r3
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	3301      	adds	r3, #1
 800b84a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	3301      	adds	r3, #1
 800b850:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b852:	68f8      	ldr	r0, [r7, #12]
 800b854:	f7ff faa1 	bl	800ad9a <SWAPBYTE>
 800b858:	4603      	mov	r3, r0
 800b85a:	461a      	mov	r2, r3
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	80da      	strh	r2, [r3, #6]
}
 800b860:	bf00      	nop
 800b862:	3710      	adds	r7, #16
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}

0800b868 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b082      	sub	sp, #8
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
 800b870:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b872:	2180      	movs	r1, #128	; 0x80
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f000 fd25 	bl	800c2c4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b87a:	2100      	movs	r1, #0
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f000 fd21 	bl	800c2c4 <USBD_LL_StallEP>
}
 800b882:	bf00      	nop
 800b884:	3708      	adds	r7, #8
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}

0800b88a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b88a:	b580      	push	{r7, lr}
 800b88c:	b086      	sub	sp, #24
 800b88e:	af00      	add	r7, sp, #0
 800b890:	60f8      	str	r0, [r7, #12]
 800b892:	60b9      	str	r1, [r7, #8]
 800b894:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b896:	2300      	movs	r3, #0
 800b898:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d036      	beq.n	800b90e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b8a4:	6938      	ldr	r0, [r7, #16]
 800b8a6:	f000 f836 	bl	800b916 <USBD_GetLen>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	3301      	adds	r3, #1
 800b8ae:	b29b      	uxth	r3, r3
 800b8b0:	005b      	lsls	r3, r3, #1
 800b8b2:	b29a      	uxth	r2, r3
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b8b8:	7dfb      	ldrb	r3, [r7, #23]
 800b8ba:	68ba      	ldr	r2, [r7, #8]
 800b8bc:	4413      	add	r3, r2
 800b8be:	687a      	ldr	r2, [r7, #4]
 800b8c0:	7812      	ldrb	r2, [r2, #0]
 800b8c2:	701a      	strb	r2, [r3, #0]
  idx++;
 800b8c4:	7dfb      	ldrb	r3, [r7, #23]
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b8ca:	7dfb      	ldrb	r3, [r7, #23]
 800b8cc:	68ba      	ldr	r2, [r7, #8]
 800b8ce:	4413      	add	r3, r2
 800b8d0:	2203      	movs	r2, #3
 800b8d2:	701a      	strb	r2, [r3, #0]
  idx++;
 800b8d4:	7dfb      	ldrb	r3, [r7, #23]
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b8da:	e013      	b.n	800b904 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b8dc:	7dfb      	ldrb	r3, [r7, #23]
 800b8de:	68ba      	ldr	r2, [r7, #8]
 800b8e0:	4413      	add	r3, r2
 800b8e2:	693a      	ldr	r2, [r7, #16]
 800b8e4:	7812      	ldrb	r2, [r2, #0]
 800b8e6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	3301      	adds	r3, #1
 800b8ec:	613b      	str	r3, [r7, #16]
    idx++;
 800b8ee:	7dfb      	ldrb	r3, [r7, #23]
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b8f4:	7dfb      	ldrb	r3, [r7, #23]
 800b8f6:	68ba      	ldr	r2, [r7, #8]
 800b8f8:	4413      	add	r3, r2
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	701a      	strb	r2, [r3, #0]
    idx++;
 800b8fe:	7dfb      	ldrb	r3, [r7, #23]
 800b900:	3301      	adds	r3, #1
 800b902:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	781b      	ldrb	r3, [r3, #0]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d1e7      	bne.n	800b8dc <USBD_GetString+0x52>
 800b90c:	e000      	b.n	800b910 <USBD_GetString+0x86>
    return;
 800b90e:	bf00      	nop
  }
}
 800b910:	3718      	adds	r7, #24
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}

0800b916 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b916:	b480      	push	{r7}
 800b918:	b085      	sub	sp, #20
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b91e:	2300      	movs	r3, #0
 800b920:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b926:	e005      	b.n	800b934 <USBD_GetLen+0x1e>
  {
    len++;
 800b928:	7bfb      	ldrb	r3, [r7, #15]
 800b92a:	3301      	adds	r3, #1
 800b92c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	3301      	adds	r3, #1
 800b932:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d1f5      	bne.n	800b928 <USBD_GetLen+0x12>
  }

  return len;
 800b93c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3714      	adds	r7, #20
 800b942:	46bd      	mov	sp, r7
 800b944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b948:	4770      	bx	lr

0800b94a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b94a:	b580      	push	{r7, lr}
 800b94c:	b084      	sub	sp, #16
 800b94e:	af00      	add	r7, sp, #0
 800b950:	60f8      	str	r0, [r7, #12]
 800b952:	60b9      	str	r1, [r7, #8]
 800b954:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	2202      	movs	r2, #2
 800b95a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	687a      	ldr	r2, [r7, #4]
 800b962:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	687a      	ldr	r2, [r7, #4]
 800b968:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	68ba      	ldr	r2, [r7, #8]
 800b96e:	2100      	movs	r1, #0
 800b970:	68f8      	ldr	r0, [r7, #12]
 800b972:	f000 fd30 	bl	800c3d6 <USBD_LL_Transmit>

  return USBD_OK;
 800b976:	2300      	movs	r3, #0
}
 800b978:	4618      	mov	r0, r3
 800b97a:	3710      	adds	r7, #16
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}

0800b980 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b084      	sub	sp, #16
 800b984:	af00      	add	r7, sp, #0
 800b986:	60f8      	str	r0, [r7, #12]
 800b988:	60b9      	str	r1, [r7, #8]
 800b98a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	68ba      	ldr	r2, [r7, #8]
 800b990:	2100      	movs	r1, #0
 800b992:	68f8      	ldr	r0, [r7, #12]
 800b994:	f000 fd1f 	bl	800c3d6 <USBD_LL_Transmit>

  return USBD_OK;
 800b998:	2300      	movs	r3, #0
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3710      	adds	r7, #16
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}

0800b9a2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b9a2:	b580      	push	{r7, lr}
 800b9a4:	b084      	sub	sp, #16
 800b9a6:	af00      	add	r7, sp, #0
 800b9a8:	60f8      	str	r0, [r7, #12]
 800b9aa:	60b9      	str	r1, [r7, #8]
 800b9ac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	2203      	movs	r2, #3
 800b9b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	687a      	ldr	r2, [r7, #4]
 800b9ba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	687a      	ldr	r2, [r7, #4]
 800b9c2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	68ba      	ldr	r2, [r7, #8]
 800b9ca:	2100      	movs	r1, #0
 800b9cc:	68f8      	ldr	r0, [r7, #12]
 800b9ce:	f000 fd23 	bl	800c418 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9d2:	2300      	movs	r3, #0
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	3710      	adds	r7, #16
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}

0800b9dc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b084      	sub	sp, #16
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	60f8      	str	r0, [r7, #12]
 800b9e4:	60b9      	str	r1, [r7, #8]
 800b9e6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	68ba      	ldr	r2, [r7, #8]
 800b9ec:	2100      	movs	r1, #0
 800b9ee:	68f8      	ldr	r0, [r7, #12]
 800b9f0:	f000 fd12 	bl	800c418 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9f4:	2300      	movs	r3, #0
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3710      	adds	r7, #16
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}

0800b9fe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b9fe:	b580      	push	{r7, lr}
 800ba00:	b082      	sub	sp, #8
 800ba02:	af00      	add	r7, sp, #0
 800ba04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2204      	movs	r2, #4
 800ba0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ba0e:	2300      	movs	r3, #0
 800ba10:	2200      	movs	r2, #0
 800ba12:	2100      	movs	r1, #0
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f000 fcde 	bl	800c3d6 <USBD_LL_Transmit>

  return USBD_OK;
 800ba1a:	2300      	movs	r3, #0
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	3708      	adds	r7, #8
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}

0800ba24 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2205      	movs	r2, #5
 800ba30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba34:	2300      	movs	r3, #0
 800ba36:	2200      	movs	r2, #0
 800ba38:	2100      	movs	r1, #0
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f000 fcec 	bl	800c418 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba40:	2300      	movs	r3, #0
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3708      	adds	r7, #8
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
	...

0800ba4c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b087      	sub	sp, #28
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	60f8      	str	r0, [r7, #12]
 800ba54:	60b9      	str	r1, [r7, #8]
 800ba56:	4613      	mov	r3, r2
 800ba58:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ba62:	4b1f      	ldr	r3, [pc, #124]	; (800bae0 <FATFS_LinkDriverEx+0x94>)
 800ba64:	7a5b      	ldrb	r3, [r3, #9]
 800ba66:	b2db      	uxtb	r3, r3
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d131      	bne.n	800bad0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ba6c:	4b1c      	ldr	r3, [pc, #112]	; (800bae0 <FATFS_LinkDriverEx+0x94>)
 800ba6e:	7a5b      	ldrb	r3, [r3, #9]
 800ba70:	b2db      	uxtb	r3, r3
 800ba72:	461a      	mov	r2, r3
 800ba74:	4b1a      	ldr	r3, [pc, #104]	; (800bae0 <FATFS_LinkDriverEx+0x94>)
 800ba76:	2100      	movs	r1, #0
 800ba78:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ba7a:	4b19      	ldr	r3, [pc, #100]	; (800bae0 <FATFS_LinkDriverEx+0x94>)
 800ba7c:	7a5b      	ldrb	r3, [r3, #9]
 800ba7e:	b2db      	uxtb	r3, r3
 800ba80:	4a17      	ldr	r2, [pc, #92]	; (800bae0 <FATFS_LinkDriverEx+0x94>)
 800ba82:	009b      	lsls	r3, r3, #2
 800ba84:	4413      	add	r3, r2
 800ba86:	68fa      	ldr	r2, [r7, #12]
 800ba88:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ba8a:	4b15      	ldr	r3, [pc, #84]	; (800bae0 <FATFS_LinkDriverEx+0x94>)
 800ba8c:	7a5b      	ldrb	r3, [r3, #9]
 800ba8e:	b2db      	uxtb	r3, r3
 800ba90:	461a      	mov	r2, r3
 800ba92:	4b13      	ldr	r3, [pc, #76]	; (800bae0 <FATFS_LinkDriverEx+0x94>)
 800ba94:	4413      	add	r3, r2
 800ba96:	79fa      	ldrb	r2, [r7, #7]
 800ba98:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ba9a:	4b11      	ldr	r3, [pc, #68]	; (800bae0 <FATFS_LinkDriverEx+0x94>)
 800ba9c:	7a5b      	ldrb	r3, [r3, #9]
 800ba9e:	b2db      	uxtb	r3, r3
 800baa0:	1c5a      	adds	r2, r3, #1
 800baa2:	b2d1      	uxtb	r1, r2
 800baa4:	4a0e      	ldr	r2, [pc, #56]	; (800bae0 <FATFS_LinkDriverEx+0x94>)
 800baa6:	7251      	strb	r1, [r2, #9]
 800baa8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800baaa:	7dbb      	ldrb	r3, [r7, #22]
 800baac:	3330      	adds	r3, #48	; 0x30
 800baae:	b2da      	uxtb	r2, r3
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	3301      	adds	r3, #1
 800bab8:	223a      	movs	r2, #58	; 0x3a
 800baba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	3302      	adds	r3, #2
 800bac0:	222f      	movs	r2, #47	; 0x2f
 800bac2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	3303      	adds	r3, #3
 800bac8:	2200      	movs	r2, #0
 800baca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bacc:	2300      	movs	r3, #0
 800bace:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bad0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	371c      	adds	r7, #28
 800bad6:	46bd      	mov	sp, r7
 800bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800badc:	4770      	bx	lr
 800bade:	bf00      	nop
 800bae0:	20000398 	.word	0x20000398

0800bae4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b082      	sub	sp, #8
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800baee:	2200      	movs	r2, #0
 800baf0:	6839      	ldr	r1, [r7, #0]
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f7ff ffaa 	bl	800ba4c <FATFS_LinkDriverEx>
 800baf8:	4603      	mov	r3, r0
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3708      	adds	r7, #8
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}
	...

0800bb04 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bb08:	2200      	movs	r2, #0
 800bb0a:	4912      	ldr	r1, [pc, #72]	; (800bb54 <MX_USB_DEVICE_Init+0x50>)
 800bb0c:	4812      	ldr	r0, [pc, #72]	; (800bb58 <MX_USB_DEVICE_Init+0x54>)
 800bb0e:	f7fe fe33 	bl	800a778 <USBD_Init>
 800bb12:	4603      	mov	r3, r0
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d001      	beq.n	800bb1c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bb18:	f7f6 fbb0 	bl	800227c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bb1c:	490f      	ldr	r1, [pc, #60]	; (800bb5c <MX_USB_DEVICE_Init+0x58>)
 800bb1e:	480e      	ldr	r0, [pc, #56]	; (800bb58 <MX_USB_DEVICE_Init+0x54>)
 800bb20:	f7fe fe5a 	bl	800a7d8 <USBD_RegisterClass>
 800bb24:	4603      	mov	r3, r0
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d001      	beq.n	800bb2e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bb2a:	f7f6 fba7 	bl	800227c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bb2e:	490c      	ldr	r1, [pc, #48]	; (800bb60 <MX_USB_DEVICE_Init+0x5c>)
 800bb30:	4809      	ldr	r0, [pc, #36]	; (800bb58 <MX_USB_DEVICE_Init+0x54>)
 800bb32:	f7fe fdab 	bl	800a68c <USBD_CDC_RegisterInterface>
 800bb36:	4603      	mov	r3, r0
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d001      	beq.n	800bb40 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bb3c:	f7f6 fb9e 	bl	800227c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bb40:	4805      	ldr	r0, [pc, #20]	; (800bb58 <MX_USB_DEVICE_Init+0x54>)
 800bb42:	f7fe fe70 	bl	800a826 <USBD_Start>
 800bb46:	4603      	mov	r3, r0
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d001      	beq.n	800bb50 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bb4c:	f7f6 fb96 	bl	800227c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bb50:	bf00      	nop
 800bb52:	bd80      	pop	{r7, pc}
 800bb54:	20000148 	.word	0x20000148
 800bb58:	20001420 	.word	0x20001420
 800bb5c:	20000030 	.word	0x20000030
 800bb60:	20000134 	.word	0x20000134

0800bb64 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bb68:	2200      	movs	r2, #0
 800bb6a:	4905      	ldr	r1, [pc, #20]	; (800bb80 <CDC_Init_FS+0x1c>)
 800bb6c:	4805      	ldr	r0, [pc, #20]	; (800bb84 <CDC_Init_FS+0x20>)
 800bb6e:	f7fe fda2 	bl	800a6b6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bb72:	4905      	ldr	r1, [pc, #20]	; (800bb88 <CDC_Init_FS+0x24>)
 800bb74:	4803      	ldr	r0, [pc, #12]	; (800bb84 <CDC_Init_FS+0x20>)
 800bb76:	f7fe fdbc 	bl	800a6f2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bb7a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	bd80      	pop	{r7, pc}
 800bb80:	20001ef0 	.word	0x20001ef0
 800bb84:	20001420 	.word	0x20001420
 800bb88:	200016f0 	.word	0x200016f0

0800bb8c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bb90:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr

0800bb9c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b083      	sub	sp, #12
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	4603      	mov	r3, r0
 800bba4:	6039      	str	r1, [r7, #0]
 800bba6:	71fb      	strb	r3, [r7, #7]
 800bba8:	4613      	mov	r3, r2
 800bbaa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bbac:	79fb      	ldrb	r3, [r7, #7]
 800bbae:	2b23      	cmp	r3, #35	; 0x23
 800bbb0:	d84a      	bhi.n	800bc48 <CDC_Control_FS+0xac>
 800bbb2:	a201      	add	r2, pc, #4	; (adr r2, 800bbb8 <CDC_Control_FS+0x1c>)
 800bbb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbb8:	0800bc49 	.word	0x0800bc49
 800bbbc:	0800bc49 	.word	0x0800bc49
 800bbc0:	0800bc49 	.word	0x0800bc49
 800bbc4:	0800bc49 	.word	0x0800bc49
 800bbc8:	0800bc49 	.word	0x0800bc49
 800bbcc:	0800bc49 	.word	0x0800bc49
 800bbd0:	0800bc49 	.word	0x0800bc49
 800bbd4:	0800bc49 	.word	0x0800bc49
 800bbd8:	0800bc49 	.word	0x0800bc49
 800bbdc:	0800bc49 	.word	0x0800bc49
 800bbe0:	0800bc49 	.word	0x0800bc49
 800bbe4:	0800bc49 	.word	0x0800bc49
 800bbe8:	0800bc49 	.word	0x0800bc49
 800bbec:	0800bc49 	.word	0x0800bc49
 800bbf0:	0800bc49 	.word	0x0800bc49
 800bbf4:	0800bc49 	.word	0x0800bc49
 800bbf8:	0800bc49 	.word	0x0800bc49
 800bbfc:	0800bc49 	.word	0x0800bc49
 800bc00:	0800bc49 	.word	0x0800bc49
 800bc04:	0800bc49 	.word	0x0800bc49
 800bc08:	0800bc49 	.word	0x0800bc49
 800bc0c:	0800bc49 	.word	0x0800bc49
 800bc10:	0800bc49 	.word	0x0800bc49
 800bc14:	0800bc49 	.word	0x0800bc49
 800bc18:	0800bc49 	.word	0x0800bc49
 800bc1c:	0800bc49 	.word	0x0800bc49
 800bc20:	0800bc49 	.word	0x0800bc49
 800bc24:	0800bc49 	.word	0x0800bc49
 800bc28:	0800bc49 	.word	0x0800bc49
 800bc2c:	0800bc49 	.word	0x0800bc49
 800bc30:	0800bc49 	.word	0x0800bc49
 800bc34:	0800bc49 	.word	0x0800bc49
 800bc38:	0800bc49 	.word	0x0800bc49
 800bc3c:	0800bc49 	.word	0x0800bc49
 800bc40:	0800bc49 	.word	0x0800bc49
 800bc44:	0800bc49 	.word	0x0800bc49
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bc48:	bf00      	nop
  }

  return (USBD_OK);
 800bc4a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	370c      	adds	r7, #12
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr

0800bc58 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b082      	sub	sp, #8
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bc62:	6879      	ldr	r1, [r7, #4]
 800bc64:	4805      	ldr	r0, [pc, #20]	; (800bc7c <CDC_Receive_FS+0x24>)
 800bc66:	f7fe fd44 	bl	800a6f2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bc6a:	4804      	ldr	r0, [pc, #16]	; (800bc7c <CDC_Receive_FS+0x24>)
 800bc6c:	f7fe fd5a 	bl	800a724 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bc70:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3708      	adds	r7, #8
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}
 800bc7a:	bf00      	nop
 800bc7c:	20001420 	.word	0x20001420

0800bc80 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bc80:	b480      	push	{r7}
 800bc82:	b087      	sub	sp, #28
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	60f8      	str	r0, [r7, #12]
 800bc88:	60b9      	str	r1, [r7, #8]
 800bc8a:	4613      	mov	r3, r2
 800bc8c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bc92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	371c      	adds	r7, #28
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr
	...

0800bca4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b083      	sub	sp, #12
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	4603      	mov	r3, r0
 800bcac:	6039      	str	r1, [r7, #0]
 800bcae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	2212      	movs	r2, #18
 800bcb4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bcb6:	4b03      	ldr	r3, [pc, #12]	; (800bcc4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	370c      	adds	r7, #12
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr
 800bcc4:	20000164 	.word	0x20000164

0800bcc8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b083      	sub	sp, #12
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	4603      	mov	r3, r0
 800bcd0:	6039      	str	r1, [r7, #0]
 800bcd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	2204      	movs	r2, #4
 800bcd8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bcda:	4b03      	ldr	r3, [pc, #12]	; (800bce8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	370c      	adds	r7, #12
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr
 800bce8:	20000178 	.word	0x20000178

0800bcec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b082      	sub	sp, #8
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	6039      	str	r1, [r7, #0]
 800bcf6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bcf8:	79fb      	ldrb	r3, [r7, #7]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d105      	bne.n	800bd0a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bcfe:	683a      	ldr	r2, [r7, #0]
 800bd00:	4907      	ldr	r1, [pc, #28]	; (800bd20 <USBD_FS_ProductStrDescriptor+0x34>)
 800bd02:	4808      	ldr	r0, [pc, #32]	; (800bd24 <USBD_FS_ProductStrDescriptor+0x38>)
 800bd04:	f7ff fdc1 	bl	800b88a <USBD_GetString>
 800bd08:	e004      	b.n	800bd14 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bd0a:	683a      	ldr	r2, [r7, #0]
 800bd0c:	4904      	ldr	r1, [pc, #16]	; (800bd20 <USBD_FS_ProductStrDescriptor+0x34>)
 800bd0e:	4805      	ldr	r0, [pc, #20]	; (800bd24 <USBD_FS_ProductStrDescriptor+0x38>)
 800bd10:	f7ff fdbb 	bl	800b88a <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd14:	4b02      	ldr	r3, [pc, #8]	; (800bd20 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3708      	adds	r7, #8
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}
 800bd1e:	bf00      	nop
 800bd20:	200026f0 	.word	0x200026f0
 800bd24:	08010e54 	.word	0x08010e54

0800bd28 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b082      	sub	sp, #8
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	4603      	mov	r3, r0
 800bd30:	6039      	str	r1, [r7, #0]
 800bd32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bd34:	683a      	ldr	r2, [r7, #0]
 800bd36:	4904      	ldr	r1, [pc, #16]	; (800bd48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bd38:	4804      	ldr	r0, [pc, #16]	; (800bd4c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bd3a:	f7ff fda6 	bl	800b88a <USBD_GetString>
  return USBD_StrDesc;
 800bd3e:	4b02      	ldr	r3, [pc, #8]	; (800bd48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3708      	adds	r7, #8
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}
 800bd48:	200026f0 	.word	0x200026f0
 800bd4c:	08010e6c 	.word	0x08010e6c

0800bd50 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b082      	sub	sp, #8
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	4603      	mov	r3, r0
 800bd58:	6039      	str	r1, [r7, #0]
 800bd5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	221a      	movs	r2, #26
 800bd60:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bd62:	f000 f843 	bl	800bdec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bd66:	4b02      	ldr	r3, [pc, #8]	; (800bd70 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3708      	adds	r7, #8
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}
 800bd70:	2000017c 	.word	0x2000017c

0800bd74 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b082      	sub	sp, #8
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	6039      	str	r1, [r7, #0]
 800bd7e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bd80:	79fb      	ldrb	r3, [r7, #7]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d105      	bne.n	800bd92 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bd86:	683a      	ldr	r2, [r7, #0]
 800bd88:	4907      	ldr	r1, [pc, #28]	; (800bda8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd8a:	4808      	ldr	r0, [pc, #32]	; (800bdac <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd8c:	f7ff fd7d 	bl	800b88a <USBD_GetString>
 800bd90:	e004      	b.n	800bd9c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bd92:	683a      	ldr	r2, [r7, #0]
 800bd94:	4904      	ldr	r1, [pc, #16]	; (800bda8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd96:	4805      	ldr	r0, [pc, #20]	; (800bdac <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd98:	f7ff fd77 	bl	800b88a <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd9c:	4b02      	ldr	r3, [pc, #8]	; (800bda8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3708      	adds	r7, #8
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}
 800bda6:	bf00      	nop
 800bda8:	200026f0 	.word	0x200026f0
 800bdac:	08010e80 	.word	0x08010e80

0800bdb0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b082      	sub	sp, #8
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	6039      	str	r1, [r7, #0]
 800bdba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bdbc:	79fb      	ldrb	r3, [r7, #7]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d105      	bne.n	800bdce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bdc2:	683a      	ldr	r2, [r7, #0]
 800bdc4:	4907      	ldr	r1, [pc, #28]	; (800bde4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bdc6:	4808      	ldr	r0, [pc, #32]	; (800bde8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bdc8:	f7ff fd5f 	bl	800b88a <USBD_GetString>
 800bdcc:	e004      	b.n	800bdd8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bdce:	683a      	ldr	r2, [r7, #0]
 800bdd0:	4904      	ldr	r1, [pc, #16]	; (800bde4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bdd2:	4805      	ldr	r0, [pc, #20]	; (800bde8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bdd4:	f7ff fd59 	bl	800b88a <USBD_GetString>
  }
  return USBD_StrDesc;
 800bdd8:	4b02      	ldr	r3, [pc, #8]	; (800bde4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	3708      	adds	r7, #8
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
 800bde2:	bf00      	nop
 800bde4:	200026f0 	.word	0x200026f0
 800bde8:	08010e8c 	.word	0x08010e8c

0800bdec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b084      	sub	sp, #16
 800bdf0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bdf2:	4b0f      	ldr	r3, [pc, #60]	; (800be30 <Get_SerialNum+0x44>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bdf8:	4b0e      	ldr	r3, [pc, #56]	; (800be34 <Get_SerialNum+0x48>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bdfe:	4b0e      	ldr	r3, [pc, #56]	; (800be38 <Get_SerialNum+0x4c>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800be04:	68fa      	ldr	r2, [r7, #12]
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	4413      	add	r3, r2
 800be0a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d009      	beq.n	800be26 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800be12:	2208      	movs	r2, #8
 800be14:	4909      	ldr	r1, [pc, #36]	; (800be3c <Get_SerialNum+0x50>)
 800be16:	68f8      	ldr	r0, [r7, #12]
 800be18:	f000 f814 	bl	800be44 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800be1c:	2204      	movs	r2, #4
 800be1e:	4908      	ldr	r1, [pc, #32]	; (800be40 <Get_SerialNum+0x54>)
 800be20:	68b8      	ldr	r0, [r7, #8]
 800be22:	f000 f80f 	bl	800be44 <IntToUnicode>
  }
}
 800be26:	bf00      	nop
 800be28:	3710      	adds	r7, #16
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}
 800be2e:	bf00      	nop
 800be30:	1fff7a10 	.word	0x1fff7a10
 800be34:	1fff7a14 	.word	0x1fff7a14
 800be38:	1fff7a18 	.word	0x1fff7a18
 800be3c:	2000017e 	.word	0x2000017e
 800be40:	2000018e 	.word	0x2000018e

0800be44 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800be44:	b480      	push	{r7}
 800be46:	b087      	sub	sp, #28
 800be48:	af00      	add	r7, sp, #0
 800be4a:	60f8      	str	r0, [r7, #12]
 800be4c:	60b9      	str	r1, [r7, #8]
 800be4e:	4613      	mov	r3, r2
 800be50:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800be52:	2300      	movs	r3, #0
 800be54:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800be56:	2300      	movs	r3, #0
 800be58:	75fb      	strb	r3, [r7, #23]
 800be5a:	e027      	b.n	800beac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	0f1b      	lsrs	r3, r3, #28
 800be60:	2b09      	cmp	r3, #9
 800be62:	d80b      	bhi.n	800be7c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	0f1b      	lsrs	r3, r3, #28
 800be68:	b2da      	uxtb	r2, r3
 800be6a:	7dfb      	ldrb	r3, [r7, #23]
 800be6c:	005b      	lsls	r3, r3, #1
 800be6e:	4619      	mov	r1, r3
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	440b      	add	r3, r1
 800be74:	3230      	adds	r2, #48	; 0x30
 800be76:	b2d2      	uxtb	r2, r2
 800be78:	701a      	strb	r2, [r3, #0]
 800be7a:	e00a      	b.n	800be92 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	0f1b      	lsrs	r3, r3, #28
 800be80:	b2da      	uxtb	r2, r3
 800be82:	7dfb      	ldrb	r3, [r7, #23]
 800be84:	005b      	lsls	r3, r3, #1
 800be86:	4619      	mov	r1, r3
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	440b      	add	r3, r1
 800be8c:	3237      	adds	r2, #55	; 0x37
 800be8e:	b2d2      	uxtb	r2, r2
 800be90:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	011b      	lsls	r3, r3, #4
 800be96:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800be98:	7dfb      	ldrb	r3, [r7, #23]
 800be9a:	005b      	lsls	r3, r3, #1
 800be9c:	3301      	adds	r3, #1
 800be9e:	68ba      	ldr	r2, [r7, #8]
 800bea0:	4413      	add	r3, r2
 800bea2:	2200      	movs	r2, #0
 800bea4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bea6:	7dfb      	ldrb	r3, [r7, #23]
 800bea8:	3301      	adds	r3, #1
 800beaa:	75fb      	strb	r3, [r7, #23]
 800beac:	7dfa      	ldrb	r2, [r7, #23]
 800beae:	79fb      	ldrb	r3, [r7, #7]
 800beb0:	429a      	cmp	r2, r3
 800beb2:	d3d3      	bcc.n	800be5c <IntToUnicode+0x18>
  }
}
 800beb4:	bf00      	nop
 800beb6:	bf00      	nop
 800beb8:	371c      	adds	r7, #28
 800beba:	46bd      	mov	sp, r7
 800bebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec0:	4770      	bx	lr
	...

0800bec4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b08a      	sub	sp, #40	; 0x28
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800becc:	f107 0314 	add.w	r3, r7, #20
 800bed0:	2200      	movs	r2, #0
 800bed2:	601a      	str	r2, [r3, #0]
 800bed4:	605a      	str	r2, [r3, #4]
 800bed6:	609a      	str	r2, [r3, #8]
 800bed8:	60da      	str	r2, [r3, #12]
 800beda:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bee4:	d147      	bne.n	800bf76 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bee6:	2300      	movs	r3, #0
 800bee8:	613b      	str	r3, [r7, #16]
 800beea:	4b25      	ldr	r3, [pc, #148]	; (800bf80 <HAL_PCD_MspInit+0xbc>)
 800beec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beee:	4a24      	ldr	r2, [pc, #144]	; (800bf80 <HAL_PCD_MspInit+0xbc>)
 800bef0:	f043 0301 	orr.w	r3, r3, #1
 800bef4:	6313      	str	r3, [r2, #48]	; 0x30
 800bef6:	4b22      	ldr	r3, [pc, #136]	; (800bf80 <HAL_PCD_MspInit+0xbc>)
 800bef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800befa:	f003 0301 	and.w	r3, r3, #1
 800befe:	613b      	str	r3, [r7, #16]
 800bf00:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800bf02:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bf10:	f107 0314 	add.w	r3, r7, #20
 800bf14:	4619      	mov	r1, r3
 800bf16:	481b      	ldr	r0, [pc, #108]	; (800bf84 <HAL_PCD_MspInit+0xc0>)
 800bf18:	f7f7 fa06 	bl	8003328 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bf1c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bf20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf22:	2302      	movs	r3, #2
 800bf24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf26:	2300      	movs	r3, #0
 800bf28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf2a:	2303      	movs	r3, #3
 800bf2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bf2e:	230a      	movs	r3, #10
 800bf30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bf32:	f107 0314 	add.w	r3, r7, #20
 800bf36:	4619      	mov	r1, r3
 800bf38:	4812      	ldr	r0, [pc, #72]	; (800bf84 <HAL_PCD_MspInit+0xc0>)
 800bf3a:	f7f7 f9f5 	bl	8003328 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bf3e:	4b10      	ldr	r3, [pc, #64]	; (800bf80 <HAL_PCD_MspInit+0xbc>)
 800bf40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf42:	4a0f      	ldr	r2, [pc, #60]	; (800bf80 <HAL_PCD_MspInit+0xbc>)
 800bf44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf48:	6353      	str	r3, [r2, #52]	; 0x34
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	60fb      	str	r3, [r7, #12]
 800bf4e:	4b0c      	ldr	r3, [pc, #48]	; (800bf80 <HAL_PCD_MspInit+0xbc>)
 800bf50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf52:	4a0b      	ldr	r2, [pc, #44]	; (800bf80 <HAL_PCD_MspInit+0xbc>)
 800bf54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bf58:	6453      	str	r3, [r2, #68]	; 0x44
 800bf5a:	4b09      	ldr	r3, [pc, #36]	; (800bf80 <HAL_PCD_MspInit+0xbc>)
 800bf5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf62:	60fb      	str	r3, [r7, #12]
 800bf64:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bf66:	2200      	movs	r2, #0
 800bf68:	2100      	movs	r1, #0
 800bf6a:	2043      	movs	r0, #67	; 0x43
 800bf6c:	f7f7 f9a5 	bl	80032ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bf70:	2043      	movs	r0, #67	; 0x43
 800bf72:	f7f7 f9be 	bl	80032f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bf76:	bf00      	nop
 800bf78:	3728      	adds	r7, #40	; 0x28
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
 800bf7e:	bf00      	nop
 800bf80:	40023800 	.word	0x40023800
 800bf84:	40020000 	.word	0x40020000

0800bf88 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b082      	sub	sp, #8
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	4610      	mov	r0, r2
 800bfa0:	f7fe fc8c 	bl	800a8bc <USBD_LL_SetupStage>
}
 800bfa4:	bf00      	nop
 800bfa6:	3708      	adds	r7, #8
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}

0800bfac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b082      	sub	sp, #8
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
 800bfb4:	460b      	mov	r3, r1
 800bfb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800bfbe:	78fa      	ldrb	r2, [r7, #3]
 800bfc0:	6879      	ldr	r1, [r7, #4]
 800bfc2:	4613      	mov	r3, r2
 800bfc4:	00db      	lsls	r3, r3, #3
 800bfc6:	1a9b      	subs	r3, r3, r2
 800bfc8:	009b      	lsls	r3, r3, #2
 800bfca:	440b      	add	r3, r1
 800bfcc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	78fb      	ldrb	r3, [r7, #3]
 800bfd4:	4619      	mov	r1, r3
 800bfd6:	f7fe fcc6 	bl	800a966 <USBD_LL_DataOutStage>
}
 800bfda:	bf00      	nop
 800bfdc:	3708      	adds	r7, #8
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}

0800bfe2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfe2:	b580      	push	{r7, lr}
 800bfe4:	b082      	sub	sp, #8
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	6078      	str	r0, [r7, #4]
 800bfea:	460b      	mov	r3, r1
 800bfec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800bff4:	78fa      	ldrb	r2, [r7, #3]
 800bff6:	6879      	ldr	r1, [r7, #4]
 800bff8:	4613      	mov	r3, r2
 800bffa:	00db      	lsls	r3, r3, #3
 800bffc:	1a9b      	subs	r3, r3, r2
 800bffe:	009b      	lsls	r3, r3, #2
 800c000:	440b      	add	r3, r1
 800c002:	3348      	adds	r3, #72	; 0x48
 800c004:	681a      	ldr	r2, [r3, #0]
 800c006:	78fb      	ldrb	r3, [r7, #3]
 800c008:	4619      	mov	r1, r3
 800c00a:	f7fe fd0f 	bl	800aa2c <USBD_LL_DataInStage>
}
 800c00e:	bf00      	nop
 800c010:	3708      	adds	r7, #8
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}

0800c016 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c016:	b580      	push	{r7, lr}
 800c018:	b082      	sub	sp, #8
 800c01a:	af00      	add	r7, sp, #0
 800c01c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c024:	4618      	mov	r0, r3
 800c026:	f7fe fe23 	bl	800ac70 <USBD_LL_SOF>
}
 800c02a:	bf00      	nop
 800c02c:	3708      	adds	r7, #8
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}

0800c032 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c032:	b580      	push	{r7, lr}
 800c034:	b084      	sub	sp, #16
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c03a:	2301      	movs	r3, #1
 800c03c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	68db      	ldr	r3, [r3, #12]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d102      	bne.n	800c04c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c046:	2300      	movs	r3, #0
 800c048:	73fb      	strb	r3, [r7, #15]
 800c04a:	e008      	b.n	800c05e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	68db      	ldr	r3, [r3, #12]
 800c050:	2b02      	cmp	r3, #2
 800c052:	d102      	bne.n	800c05a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c054:	2301      	movs	r3, #1
 800c056:	73fb      	strb	r3, [r7, #15]
 800c058:	e001      	b.n	800c05e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c05a:	f7f6 f90f 	bl	800227c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c064:	7bfa      	ldrb	r2, [r7, #15]
 800c066:	4611      	mov	r1, r2
 800c068:	4618      	mov	r0, r3
 800c06a:	f7fe fdc3 	bl	800abf4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c074:	4618      	mov	r0, r3
 800c076:	f7fe fd6f 	bl	800ab58 <USBD_LL_Reset>
}
 800c07a:	bf00      	nop
 800c07c:	3710      	adds	r7, #16
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
	...

0800c084 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b082      	sub	sp, #8
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c092:	4618      	mov	r0, r3
 800c094:	f7fe fdbe 	bl	800ac14 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	687a      	ldr	r2, [r7, #4]
 800c0a4:	6812      	ldr	r2, [r2, #0]
 800c0a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c0aa:	f043 0301 	orr.w	r3, r3, #1
 800c0ae:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6a1b      	ldr	r3, [r3, #32]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d005      	beq.n	800c0c4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c0b8:	4b04      	ldr	r3, [pc, #16]	; (800c0cc <HAL_PCD_SuspendCallback+0x48>)
 800c0ba:	691b      	ldr	r3, [r3, #16]
 800c0bc:	4a03      	ldr	r2, [pc, #12]	; (800c0cc <HAL_PCD_SuspendCallback+0x48>)
 800c0be:	f043 0306 	orr.w	r3, r3, #6
 800c0c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c0c4:	bf00      	nop
 800c0c6:	3708      	adds	r7, #8
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}
 800c0cc:	e000ed00 	.word	0xe000ed00

0800c0d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b082      	sub	sp, #8
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f7fe fdae 	bl	800ac40 <USBD_LL_Resume>
}
 800c0e4:	bf00      	nop
 800c0e6:	3708      	adds	r7, #8
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}

0800c0ec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b082      	sub	sp, #8
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
 800c0f4:	460b      	mov	r3, r1
 800c0f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c0fe:	78fa      	ldrb	r2, [r7, #3]
 800c100:	4611      	mov	r1, r2
 800c102:	4618      	mov	r0, r3
 800c104:	f7fe fdfc 	bl	800ad00 <USBD_LL_IsoOUTIncomplete>
}
 800c108:	bf00      	nop
 800c10a:	3708      	adds	r7, #8
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}

0800c110 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b082      	sub	sp, #8
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
 800c118:	460b      	mov	r3, r1
 800c11a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c122:	78fa      	ldrb	r2, [r7, #3]
 800c124:	4611      	mov	r1, r2
 800c126:	4618      	mov	r0, r3
 800c128:	f7fe fdc4 	bl	800acb4 <USBD_LL_IsoINIncomplete>
}
 800c12c:	bf00      	nop
 800c12e:	3708      	adds	r7, #8
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}

0800c134 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b082      	sub	sp, #8
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c142:	4618      	mov	r0, r3
 800c144:	f7fe fe02 	bl	800ad4c <USBD_LL_DevConnected>
}
 800c148:	bf00      	nop
 800c14a:	3708      	adds	r7, #8
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}

0800c150 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b082      	sub	sp, #8
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c15e:	4618      	mov	r0, r3
 800c160:	f7fe fdff 	bl	800ad62 <USBD_LL_DevDisconnected>
}
 800c164:	bf00      	nop
 800c166:	3708      	adds	r7, #8
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}

0800c16c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b082      	sub	sp, #8
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	781b      	ldrb	r3, [r3, #0]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d13c      	bne.n	800c1f6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c17c:	4a20      	ldr	r2, [pc, #128]	; (800c200 <USBD_LL_Init+0x94>)
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	4a1e      	ldr	r2, [pc, #120]	; (800c200 <USBD_LL_Init+0x94>)
 800c188:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c18c:	4b1c      	ldr	r3, [pc, #112]	; (800c200 <USBD_LL_Init+0x94>)
 800c18e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c192:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c194:	4b1a      	ldr	r3, [pc, #104]	; (800c200 <USBD_LL_Init+0x94>)
 800c196:	2204      	movs	r2, #4
 800c198:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c19a:	4b19      	ldr	r3, [pc, #100]	; (800c200 <USBD_LL_Init+0x94>)
 800c19c:	2202      	movs	r2, #2
 800c19e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c1a0:	4b17      	ldr	r3, [pc, #92]	; (800c200 <USBD_LL_Init+0x94>)
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c1a6:	4b16      	ldr	r3, [pc, #88]	; (800c200 <USBD_LL_Init+0x94>)
 800c1a8:	2202      	movs	r2, #2
 800c1aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c1ac:	4b14      	ldr	r3, [pc, #80]	; (800c200 <USBD_LL_Init+0x94>)
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c1b2:	4b13      	ldr	r3, [pc, #76]	; (800c200 <USBD_LL_Init+0x94>)
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c1b8:	4b11      	ldr	r3, [pc, #68]	; (800c200 <USBD_LL_Init+0x94>)
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800c1be:	4b10      	ldr	r3, [pc, #64]	; (800c200 <USBD_LL_Init+0x94>)
 800c1c0:	2201      	movs	r2, #1
 800c1c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c1c4:	4b0e      	ldr	r3, [pc, #56]	; (800c200 <USBD_LL_Init+0x94>)
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c1ca:	480d      	ldr	r0, [pc, #52]	; (800c200 <USBD_LL_Init+0x94>)
 800c1cc:	f7f8 fade 	bl	800478c <HAL_PCD_Init>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d001      	beq.n	800c1da <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c1d6:	f7f6 f851 	bl	800227c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c1da:	2180      	movs	r1, #128	; 0x80
 800c1dc:	4808      	ldr	r0, [pc, #32]	; (800c200 <USBD_LL_Init+0x94>)
 800c1de:	f7f9 fc3c 	bl	8005a5a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c1e2:	2240      	movs	r2, #64	; 0x40
 800c1e4:	2100      	movs	r1, #0
 800c1e6:	4806      	ldr	r0, [pc, #24]	; (800c200 <USBD_LL_Init+0x94>)
 800c1e8:	f7f9 fbf0 	bl	80059cc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c1ec:	2280      	movs	r2, #128	; 0x80
 800c1ee:	2101      	movs	r1, #1
 800c1f0:	4803      	ldr	r0, [pc, #12]	; (800c200 <USBD_LL_Init+0x94>)
 800c1f2:	f7f9 fbeb 	bl	80059cc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c1f6:	2300      	movs	r3, #0
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3708      	adds	r7, #8
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}
 800c200:	200028f0 	.word	0x200028f0

0800c204 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b084      	sub	sp, #16
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c20c:	2300      	movs	r3, #0
 800c20e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c210:	2300      	movs	r3, #0
 800c212:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c21a:	4618      	mov	r0, r3
 800c21c:	f7f8 fbd3 	bl	80049c6 <HAL_PCD_Start>
 800c220:	4603      	mov	r3, r0
 800c222:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c224:	7bfb      	ldrb	r3, [r7, #15]
 800c226:	4618      	mov	r0, r3
 800c228:	f000 f942 	bl	800c4b0 <USBD_Get_USB_Status>
 800c22c:	4603      	mov	r3, r0
 800c22e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c230:	7bbb      	ldrb	r3, [r7, #14]
}
 800c232:	4618      	mov	r0, r3
 800c234:	3710      	adds	r7, #16
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}

0800c23a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c23a:	b580      	push	{r7, lr}
 800c23c:	b084      	sub	sp, #16
 800c23e:	af00      	add	r7, sp, #0
 800c240:	6078      	str	r0, [r7, #4]
 800c242:	4608      	mov	r0, r1
 800c244:	4611      	mov	r1, r2
 800c246:	461a      	mov	r2, r3
 800c248:	4603      	mov	r3, r0
 800c24a:	70fb      	strb	r3, [r7, #3]
 800c24c:	460b      	mov	r3, r1
 800c24e:	70bb      	strb	r3, [r7, #2]
 800c250:	4613      	mov	r3, r2
 800c252:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c254:	2300      	movs	r3, #0
 800c256:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c258:	2300      	movs	r3, #0
 800c25a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c262:	78bb      	ldrb	r3, [r7, #2]
 800c264:	883a      	ldrh	r2, [r7, #0]
 800c266:	78f9      	ldrb	r1, [r7, #3]
 800c268:	f7f8 ffb7 	bl	80051da <HAL_PCD_EP_Open>
 800c26c:	4603      	mov	r3, r0
 800c26e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c270:	7bfb      	ldrb	r3, [r7, #15]
 800c272:	4618      	mov	r0, r3
 800c274:	f000 f91c 	bl	800c4b0 <USBD_Get_USB_Status>
 800c278:	4603      	mov	r3, r0
 800c27a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c27c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3710      	adds	r7, #16
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}

0800c286 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c286:	b580      	push	{r7, lr}
 800c288:	b084      	sub	sp, #16
 800c28a:	af00      	add	r7, sp, #0
 800c28c:	6078      	str	r0, [r7, #4]
 800c28e:	460b      	mov	r3, r1
 800c290:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c292:	2300      	movs	r3, #0
 800c294:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c296:	2300      	movs	r3, #0
 800c298:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c2a0:	78fa      	ldrb	r2, [r7, #3]
 800c2a2:	4611      	mov	r1, r2
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f7f9 f800 	bl	80052aa <HAL_PCD_EP_Close>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2ae:	7bfb      	ldrb	r3, [r7, #15]
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f000 f8fd 	bl	800c4b0 <USBD_Get_USB_Status>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	3710      	adds	r7, #16
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}

0800c2c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b084      	sub	sp, #16
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	460b      	mov	r3, r1
 800c2ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c2de:	78fa      	ldrb	r2, [r7, #3]
 800c2e0:	4611      	mov	r1, r2
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7f9 f8d8 	bl	8005498 <HAL_PCD_EP_SetStall>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2ec:	7bfb      	ldrb	r3, [r7, #15]
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f000 f8de 	bl	800c4b0 <USBD_Get_USB_Status>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3710      	adds	r7, #16
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}

0800c302 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c302:	b580      	push	{r7, lr}
 800c304:	b084      	sub	sp, #16
 800c306:	af00      	add	r7, sp, #0
 800c308:	6078      	str	r0, [r7, #4]
 800c30a:	460b      	mov	r3, r1
 800c30c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c30e:	2300      	movs	r3, #0
 800c310:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c312:	2300      	movs	r3, #0
 800c314:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c31c:	78fa      	ldrb	r2, [r7, #3]
 800c31e:	4611      	mov	r1, r2
 800c320:	4618      	mov	r0, r3
 800c322:	f7f9 f91d 	bl	8005560 <HAL_PCD_EP_ClrStall>
 800c326:	4603      	mov	r3, r0
 800c328:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c32a:	7bfb      	ldrb	r3, [r7, #15]
 800c32c:	4618      	mov	r0, r3
 800c32e:	f000 f8bf 	bl	800c4b0 <USBD_Get_USB_Status>
 800c332:	4603      	mov	r3, r0
 800c334:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c336:	7bbb      	ldrb	r3, [r7, #14]
}
 800c338:	4618      	mov	r0, r3
 800c33a:	3710      	adds	r7, #16
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}

0800c340 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c340:	b480      	push	{r7}
 800c342:	b085      	sub	sp, #20
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	460b      	mov	r3, r1
 800c34a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c352:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c354:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	da0b      	bge.n	800c374 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c35c:	78fb      	ldrb	r3, [r7, #3]
 800c35e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c362:	68f9      	ldr	r1, [r7, #12]
 800c364:	4613      	mov	r3, r2
 800c366:	00db      	lsls	r3, r3, #3
 800c368:	1a9b      	subs	r3, r3, r2
 800c36a:	009b      	lsls	r3, r3, #2
 800c36c:	440b      	add	r3, r1
 800c36e:	333e      	adds	r3, #62	; 0x3e
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	e00b      	b.n	800c38c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c374:	78fb      	ldrb	r3, [r7, #3]
 800c376:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c37a:	68f9      	ldr	r1, [r7, #12]
 800c37c:	4613      	mov	r3, r2
 800c37e:	00db      	lsls	r3, r3, #3
 800c380:	1a9b      	subs	r3, r3, r2
 800c382:	009b      	lsls	r3, r3, #2
 800c384:	440b      	add	r3, r1
 800c386:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c38a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3714      	adds	r7, #20
 800c390:	46bd      	mov	sp, r7
 800c392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c396:	4770      	bx	lr

0800c398 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b084      	sub	sp, #16
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
 800c3a0:	460b      	mov	r3, r1
 800c3a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c3b2:	78fa      	ldrb	r2, [r7, #3]
 800c3b4:	4611      	mov	r1, r2
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7f8 feea 	bl	8005190 <HAL_PCD_SetAddress>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3c0:	7bfb      	ldrb	r3, [r7, #15]
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f000 f874 	bl	800c4b0 <USBD_Get_USB_Status>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3710      	adds	r7, #16
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}

0800c3d6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c3d6:	b580      	push	{r7, lr}
 800c3d8:	b086      	sub	sp, #24
 800c3da:	af00      	add	r7, sp, #0
 800c3dc:	60f8      	str	r0, [r7, #12]
 800c3de:	607a      	str	r2, [r7, #4]
 800c3e0:	603b      	str	r3, [r7, #0]
 800c3e2:	460b      	mov	r3, r1
 800c3e4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c3f4:	7af9      	ldrb	r1, [r7, #11]
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	687a      	ldr	r2, [r7, #4]
 800c3fa:	f7f9 f803 	bl	8005404 <HAL_PCD_EP_Transmit>
 800c3fe:	4603      	mov	r3, r0
 800c400:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c402:	7dfb      	ldrb	r3, [r7, #23]
 800c404:	4618      	mov	r0, r3
 800c406:	f000 f853 	bl	800c4b0 <USBD_Get_USB_Status>
 800c40a:	4603      	mov	r3, r0
 800c40c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c40e:	7dbb      	ldrb	r3, [r7, #22]
}
 800c410:	4618      	mov	r0, r3
 800c412:	3718      	adds	r7, #24
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}

0800c418 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b086      	sub	sp, #24
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	60f8      	str	r0, [r7, #12]
 800c420:	607a      	str	r2, [r7, #4]
 800c422:	603b      	str	r3, [r7, #0]
 800c424:	460b      	mov	r3, r1
 800c426:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c428:	2300      	movs	r3, #0
 800c42a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c42c:	2300      	movs	r3, #0
 800c42e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c436:	7af9      	ldrb	r1, [r7, #11]
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	687a      	ldr	r2, [r7, #4]
 800c43c:	f7f8 ff7f 	bl	800533e <HAL_PCD_EP_Receive>
 800c440:	4603      	mov	r3, r0
 800c442:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c444:	7dfb      	ldrb	r3, [r7, #23]
 800c446:	4618      	mov	r0, r3
 800c448:	f000 f832 	bl	800c4b0 <USBD_Get_USB_Status>
 800c44c:	4603      	mov	r3, r0
 800c44e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c450:	7dbb      	ldrb	r3, [r7, #22]
}
 800c452:	4618      	mov	r0, r3
 800c454:	3718      	adds	r7, #24
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}

0800c45a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c45a:	b580      	push	{r7, lr}
 800c45c:	b082      	sub	sp, #8
 800c45e:	af00      	add	r7, sp, #0
 800c460:	6078      	str	r0, [r7, #4]
 800c462:	460b      	mov	r3, r1
 800c464:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c46c:	78fa      	ldrb	r2, [r7, #3]
 800c46e:	4611      	mov	r1, r2
 800c470:	4618      	mov	r0, r3
 800c472:	f7f8 ffaf 	bl	80053d4 <HAL_PCD_EP_GetRxCount>
 800c476:	4603      	mov	r3, r0
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3708      	adds	r7, #8
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}

0800c480 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c480:	b480      	push	{r7}
 800c482:	b083      	sub	sp, #12
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c488:	4b03      	ldr	r3, [pc, #12]	; (800c498 <USBD_static_malloc+0x18>)
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	370c      	adds	r7, #12
 800c48e:	46bd      	mov	sp, r7
 800c490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c494:	4770      	bx	lr
 800c496:	bf00      	nop
 800c498:	200003a4 	.word	0x200003a4

0800c49c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c49c:	b480      	push	{r7}
 800c49e:	b083      	sub	sp, #12
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]

}
 800c4a4:	bf00      	nop
 800c4a6:	370c      	adds	r7, #12
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr

0800c4b0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	b085      	sub	sp, #20
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c4be:	79fb      	ldrb	r3, [r7, #7]
 800c4c0:	2b03      	cmp	r3, #3
 800c4c2:	d817      	bhi.n	800c4f4 <USBD_Get_USB_Status+0x44>
 800c4c4:	a201      	add	r2, pc, #4	; (adr r2, 800c4cc <USBD_Get_USB_Status+0x1c>)
 800c4c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ca:	bf00      	nop
 800c4cc:	0800c4dd 	.word	0x0800c4dd
 800c4d0:	0800c4e3 	.word	0x0800c4e3
 800c4d4:	0800c4e9 	.word	0x0800c4e9
 800c4d8:	0800c4ef 	.word	0x0800c4ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	73fb      	strb	r3, [r7, #15]
    break;
 800c4e0:	e00b      	b.n	800c4fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c4e2:	2303      	movs	r3, #3
 800c4e4:	73fb      	strb	r3, [r7, #15]
    break;
 800c4e6:	e008      	b.n	800c4fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	73fb      	strb	r3, [r7, #15]
    break;
 800c4ec:	e005      	b.n	800c4fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c4ee:	2303      	movs	r3, #3
 800c4f0:	73fb      	strb	r3, [r7, #15]
    break;
 800c4f2:	e002      	b.n	800c4fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c4f4:	2303      	movs	r3, #3
 800c4f6:	73fb      	strb	r3, [r7, #15]
    break;
 800c4f8:	bf00      	nop
  }
  return usb_status;
 800c4fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3714      	adds	r7, #20
 800c500:	46bd      	mov	sp, r7
 800c502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c506:	4770      	bx	lr

0800c508 <__errno>:
 800c508:	4b01      	ldr	r3, [pc, #4]	; (800c510 <__errno+0x8>)
 800c50a:	6818      	ldr	r0, [r3, #0]
 800c50c:	4770      	bx	lr
 800c50e:	bf00      	nop
 800c510:	20000198 	.word	0x20000198

0800c514 <__libc_init_array>:
 800c514:	b570      	push	{r4, r5, r6, lr}
 800c516:	4d0d      	ldr	r5, [pc, #52]	; (800c54c <__libc_init_array+0x38>)
 800c518:	4c0d      	ldr	r4, [pc, #52]	; (800c550 <__libc_init_array+0x3c>)
 800c51a:	1b64      	subs	r4, r4, r5
 800c51c:	10a4      	asrs	r4, r4, #2
 800c51e:	2600      	movs	r6, #0
 800c520:	42a6      	cmp	r6, r4
 800c522:	d109      	bne.n	800c538 <__libc_init_array+0x24>
 800c524:	4d0b      	ldr	r5, [pc, #44]	; (800c554 <__libc_init_array+0x40>)
 800c526:	4c0c      	ldr	r4, [pc, #48]	; (800c558 <__libc_init_array+0x44>)
 800c528:	f004 fc42 	bl	8010db0 <_init>
 800c52c:	1b64      	subs	r4, r4, r5
 800c52e:	10a4      	asrs	r4, r4, #2
 800c530:	2600      	movs	r6, #0
 800c532:	42a6      	cmp	r6, r4
 800c534:	d105      	bne.n	800c542 <__libc_init_array+0x2e>
 800c536:	bd70      	pop	{r4, r5, r6, pc}
 800c538:	f855 3b04 	ldr.w	r3, [r5], #4
 800c53c:	4798      	blx	r3
 800c53e:	3601      	adds	r6, #1
 800c540:	e7ee      	b.n	800c520 <__libc_init_array+0xc>
 800c542:	f855 3b04 	ldr.w	r3, [r5], #4
 800c546:	4798      	blx	r3
 800c548:	3601      	adds	r6, #1
 800c54a:	e7f2      	b.n	800c532 <__libc_init_array+0x1e>
 800c54c:	08011374 	.word	0x08011374
 800c550:	08011374 	.word	0x08011374
 800c554:	08011374 	.word	0x08011374
 800c558:	08011378 	.word	0x08011378

0800c55c <malloc>:
 800c55c:	4b02      	ldr	r3, [pc, #8]	; (800c568 <malloc+0xc>)
 800c55e:	4601      	mov	r1, r0
 800c560:	6818      	ldr	r0, [r3, #0]
 800c562:	f000 b869 	b.w	800c638 <_malloc_r>
 800c566:	bf00      	nop
 800c568:	20000198 	.word	0x20000198

0800c56c <memcpy>:
 800c56c:	440a      	add	r2, r1
 800c56e:	4291      	cmp	r1, r2
 800c570:	f100 33ff 	add.w	r3, r0, #4294967295
 800c574:	d100      	bne.n	800c578 <memcpy+0xc>
 800c576:	4770      	bx	lr
 800c578:	b510      	push	{r4, lr}
 800c57a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c57e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c582:	4291      	cmp	r1, r2
 800c584:	d1f9      	bne.n	800c57a <memcpy+0xe>
 800c586:	bd10      	pop	{r4, pc}

0800c588 <memset>:
 800c588:	4402      	add	r2, r0
 800c58a:	4603      	mov	r3, r0
 800c58c:	4293      	cmp	r3, r2
 800c58e:	d100      	bne.n	800c592 <memset+0xa>
 800c590:	4770      	bx	lr
 800c592:	f803 1b01 	strb.w	r1, [r3], #1
 800c596:	e7f9      	b.n	800c58c <memset+0x4>

0800c598 <_free_r>:
 800c598:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c59a:	2900      	cmp	r1, #0
 800c59c:	d048      	beq.n	800c630 <_free_r+0x98>
 800c59e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5a2:	9001      	str	r0, [sp, #4]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	f1a1 0404 	sub.w	r4, r1, #4
 800c5aa:	bfb8      	it	lt
 800c5ac:	18e4      	addlt	r4, r4, r3
 800c5ae:	f003 fb65 	bl	800fc7c <__malloc_lock>
 800c5b2:	4a20      	ldr	r2, [pc, #128]	; (800c634 <_free_r+0x9c>)
 800c5b4:	9801      	ldr	r0, [sp, #4]
 800c5b6:	6813      	ldr	r3, [r2, #0]
 800c5b8:	4615      	mov	r5, r2
 800c5ba:	b933      	cbnz	r3, 800c5ca <_free_r+0x32>
 800c5bc:	6063      	str	r3, [r4, #4]
 800c5be:	6014      	str	r4, [r2, #0]
 800c5c0:	b003      	add	sp, #12
 800c5c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c5c6:	f003 bb5f 	b.w	800fc88 <__malloc_unlock>
 800c5ca:	42a3      	cmp	r3, r4
 800c5cc:	d90b      	bls.n	800c5e6 <_free_r+0x4e>
 800c5ce:	6821      	ldr	r1, [r4, #0]
 800c5d0:	1862      	adds	r2, r4, r1
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	bf04      	itt	eq
 800c5d6:	681a      	ldreq	r2, [r3, #0]
 800c5d8:	685b      	ldreq	r3, [r3, #4]
 800c5da:	6063      	str	r3, [r4, #4]
 800c5dc:	bf04      	itt	eq
 800c5de:	1852      	addeq	r2, r2, r1
 800c5e0:	6022      	streq	r2, [r4, #0]
 800c5e2:	602c      	str	r4, [r5, #0]
 800c5e4:	e7ec      	b.n	800c5c0 <_free_r+0x28>
 800c5e6:	461a      	mov	r2, r3
 800c5e8:	685b      	ldr	r3, [r3, #4]
 800c5ea:	b10b      	cbz	r3, 800c5f0 <_free_r+0x58>
 800c5ec:	42a3      	cmp	r3, r4
 800c5ee:	d9fa      	bls.n	800c5e6 <_free_r+0x4e>
 800c5f0:	6811      	ldr	r1, [r2, #0]
 800c5f2:	1855      	adds	r5, r2, r1
 800c5f4:	42a5      	cmp	r5, r4
 800c5f6:	d10b      	bne.n	800c610 <_free_r+0x78>
 800c5f8:	6824      	ldr	r4, [r4, #0]
 800c5fa:	4421      	add	r1, r4
 800c5fc:	1854      	adds	r4, r2, r1
 800c5fe:	42a3      	cmp	r3, r4
 800c600:	6011      	str	r1, [r2, #0]
 800c602:	d1dd      	bne.n	800c5c0 <_free_r+0x28>
 800c604:	681c      	ldr	r4, [r3, #0]
 800c606:	685b      	ldr	r3, [r3, #4]
 800c608:	6053      	str	r3, [r2, #4]
 800c60a:	4421      	add	r1, r4
 800c60c:	6011      	str	r1, [r2, #0]
 800c60e:	e7d7      	b.n	800c5c0 <_free_r+0x28>
 800c610:	d902      	bls.n	800c618 <_free_r+0x80>
 800c612:	230c      	movs	r3, #12
 800c614:	6003      	str	r3, [r0, #0]
 800c616:	e7d3      	b.n	800c5c0 <_free_r+0x28>
 800c618:	6825      	ldr	r5, [r4, #0]
 800c61a:	1961      	adds	r1, r4, r5
 800c61c:	428b      	cmp	r3, r1
 800c61e:	bf04      	itt	eq
 800c620:	6819      	ldreq	r1, [r3, #0]
 800c622:	685b      	ldreq	r3, [r3, #4]
 800c624:	6063      	str	r3, [r4, #4]
 800c626:	bf04      	itt	eq
 800c628:	1949      	addeq	r1, r1, r5
 800c62a:	6021      	streq	r1, [r4, #0]
 800c62c:	6054      	str	r4, [r2, #4]
 800c62e:	e7c7      	b.n	800c5c0 <_free_r+0x28>
 800c630:	b003      	add	sp, #12
 800c632:	bd30      	pop	{r4, r5, pc}
 800c634:	200005c4 	.word	0x200005c4

0800c638 <_malloc_r>:
 800c638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c63a:	1ccd      	adds	r5, r1, #3
 800c63c:	f025 0503 	bic.w	r5, r5, #3
 800c640:	3508      	adds	r5, #8
 800c642:	2d0c      	cmp	r5, #12
 800c644:	bf38      	it	cc
 800c646:	250c      	movcc	r5, #12
 800c648:	2d00      	cmp	r5, #0
 800c64a:	4606      	mov	r6, r0
 800c64c:	db01      	blt.n	800c652 <_malloc_r+0x1a>
 800c64e:	42a9      	cmp	r1, r5
 800c650:	d903      	bls.n	800c65a <_malloc_r+0x22>
 800c652:	230c      	movs	r3, #12
 800c654:	6033      	str	r3, [r6, #0]
 800c656:	2000      	movs	r0, #0
 800c658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c65a:	f003 fb0f 	bl	800fc7c <__malloc_lock>
 800c65e:	4921      	ldr	r1, [pc, #132]	; (800c6e4 <_malloc_r+0xac>)
 800c660:	680a      	ldr	r2, [r1, #0]
 800c662:	4614      	mov	r4, r2
 800c664:	b99c      	cbnz	r4, 800c68e <_malloc_r+0x56>
 800c666:	4f20      	ldr	r7, [pc, #128]	; (800c6e8 <_malloc_r+0xb0>)
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	b923      	cbnz	r3, 800c676 <_malloc_r+0x3e>
 800c66c:	4621      	mov	r1, r4
 800c66e:	4630      	mov	r0, r6
 800c670:	f000 feb6 	bl	800d3e0 <_sbrk_r>
 800c674:	6038      	str	r0, [r7, #0]
 800c676:	4629      	mov	r1, r5
 800c678:	4630      	mov	r0, r6
 800c67a:	f000 feb1 	bl	800d3e0 <_sbrk_r>
 800c67e:	1c43      	adds	r3, r0, #1
 800c680:	d123      	bne.n	800c6ca <_malloc_r+0x92>
 800c682:	230c      	movs	r3, #12
 800c684:	6033      	str	r3, [r6, #0]
 800c686:	4630      	mov	r0, r6
 800c688:	f003 fafe 	bl	800fc88 <__malloc_unlock>
 800c68c:	e7e3      	b.n	800c656 <_malloc_r+0x1e>
 800c68e:	6823      	ldr	r3, [r4, #0]
 800c690:	1b5b      	subs	r3, r3, r5
 800c692:	d417      	bmi.n	800c6c4 <_malloc_r+0x8c>
 800c694:	2b0b      	cmp	r3, #11
 800c696:	d903      	bls.n	800c6a0 <_malloc_r+0x68>
 800c698:	6023      	str	r3, [r4, #0]
 800c69a:	441c      	add	r4, r3
 800c69c:	6025      	str	r5, [r4, #0]
 800c69e:	e004      	b.n	800c6aa <_malloc_r+0x72>
 800c6a0:	6863      	ldr	r3, [r4, #4]
 800c6a2:	42a2      	cmp	r2, r4
 800c6a4:	bf0c      	ite	eq
 800c6a6:	600b      	streq	r3, [r1, #0]
 800c6a8:	6053      	strne	r3, [r2, #4]
 800c6aa:	4630      	mov	r0, r6
 800c6ac:	f003 faec 	bl	800fc88 <__malloc_unlock>
 800c6b0:	f104 000b 	add.w	r0, r4, #11
 800c6b4:	1d23      	adds	r3, r4, #4
 800c6b6:	f020 0007 	bic.w	r0, r0, #7
 800c6ba:	1ac2      	subs	r2, r0, r3
 800c6bc:	d0cc      	beq.n	800c658 <_malloc_r+0x20>
 800c6be:	1a1b      	subs	r3, r3, r0
 800c6c0:	50a3      	str	r3, [r4, r2]
 800c6c2:	e7c9      	b.n	800c658 <_malloc_r+0x20>
 800c6c4:	4622      	mov	r2, r4
 800c6c6:	6864      	ldr	r4, [r4, #4]
 800c6c8:	e7cc      	b.n	800c664 <_malloc_r+0x2c>
 800c6ca:	1cc4      	adds	r4, r0, #3
 800c6cc:	f024 0403 	bic.w	r4, r4, #3
 800c6d0:	42a0      	cmp	r0, r4
 800c6d2:	d0e3      	beq.n	800c69c <_malloc_r+0x64>
 800c6d4:	1a21      	subs	r1, r4, r0
 800c6d6:	4630      	mov	r0, r6
 800c6d8:	f000 fe82 	bl	800d3e0 <_sbrk_r>
 800c6dc:	3001      	adds	r0, #1
 800c6de:	d1dd      	bne.n	800c69c <_malloc_r+0x64>
 800c6e0:	e7cf      	b.n	800c682 <_malloc_r+0x4a>
 800c6e2:	bf00      	nop
 800c6e4:	200005c4 	.word	0x200005c4
 800c6e8:	200005c8 	.word	0x200005c8

0800c6ec <__cvt>:
 800c6ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c6f0:	ec55 4b10 	vmov	r4, r5, d0
 800c6f4:	2d00      	cmp	r5, #0
 800c6f6:	460e      	mov	r6, r1
 800c6f8:	4619      	mov	r1, r3
 800c6fa:	462b      	mov	r3, r5
 800c6fc:	bfbb      	ittet	lt
 800c6fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c702:	461d      	movlt	r5, r3
 800c704:	2300      	movge	r3, #0
 800c706:	232d      	movlt	r3, #45	; 0x2d
 800c708:	700b      	strb	r3, [r1, #0]
 800c70a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c70c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c710:	4691      	mov	r9, r2
 800c712:	f023 0820 	bic.w	r8, r3, #32
 800c716:	bfbc      	itt	lt
 800c718:	4622      	movlt	r2, r4
 800c71a:	4614      	movlt	r4, r2
 800c71c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c720:	d005      	beq.n	800c72e <__cvt+0x42>
 800c722:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c726:	d100      	bne.n	800c72a <__cvt+0x3e>
 800c728:	3601      	adds	r6, #1
 800c72a:	2102      	movs	r1, #2
 800c72c:	e000      	b.n	800c730 <__cvt+0x44>
 800c72e:	2103      	movs	r1, #3
 800c730:	ab03      	add	r3, sp, #12
 800c732:	9301      	str	r3, [sp, #4]
 800c734:	ab02      	add	r3, sp, #8
 800c736:	9300      	str	r3, [sp, #0]
 800c738:	ec45 4b10 	vmov	d0, r4, r5
 800c73c:	4653      	mov	r3, sl
 800c73e:	4632      	mov	r2, r6
 800c740:	f001 fefa 	bl	800e538 <_dtoa_r>
 800c744:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c748:	4607      	mov	r7, r0
 800c74a:	d102      	bne.n	800c752 <__cvt+0x66>
 800c74c:	f019 0f01 	tst.w	r9, #1
 800c750:	d022      	beq.n	800c798 <__cvt+0xac>
 800c752:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c756:	eb07 0906 	add.w	r9, r7, r6
 800c75a:	d110      	bne.n	800c77e <__cvt+0x92>
 800c75c:	783b      	ldrb	r3, [r7, #0]
 800c75e:	2b30      	cmp	r3, #48	; 0x30
 800c760:	d10a      	bne.n	800c778 <__cvt+0x8c>
 800c762:	2200      	movs	r2, #0
 800c764:	2300      	movs	r3, #0
 800c766:	4620      	mov	r0, r4
 800c768:	4629      	mov	r1, r5
 800c76a:	f7f4 f9bd 	bl	8000ae8 <__aeabi_dcmpeq>
 800c76e:	b918      	cbnz	r0, 800c778 <__cvt+0x8c>
 800c770:	f1c6 0601 	rsb	r6, r6, #1
 800c774:	f8ca 6000 	str.w	r6, [sl]
 800c778:	f8da 3000 	ldr.w	r3, [sl]
 800c77c:	4499      	add	r9, r3
 800c77e:	2200      	movs	r2, #0
 800c780:	2300      	movs	r3, #0
 800c782:	4620      	mov	r0, r4
 800c784:	4629      	mov	r1, r5
 800c786:	f7f4 f9af 	bl	8000ae8 <__aeabi_dcmpeq>
 800c78a:	b108      	cbz	r0, 800c790 <__cvt+0xa4>
 800c78c:	f8cd 900c 	str.w	r9, [sp, #12]
 800c790:	2230      	movs	r2, #48	; 0x30
 800c792:	9b03      	ldr	r3, [sp, #12]
 800c794:	454b      	cmp	r3, r9
 800c796:	d307      	bcc.n	800c7a8 <__cvt+0xbc>
 800c798:	9b03      	ldr	r3, [sp, #12]
 800c79a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c79c:	1bdb      	subs	r3, r3, r7
 800c79e:	4638      	mov	r0, r7
 800c7a0:	6013      	str	r3, [r2, #0]
 800c7a2:	b004      	add	sp, #16
 800c7a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7a8:	1c59      	adds	r1, r3, #1
 800c7aa:	9103      	str	r1, [sp, #12]
 800c7ac:	701a      	strb	r2, [r3, #0]
 800c7ae:	e7f0      	b.n	800c792 <__cvt+0xa6>

0800c7b0 <__exponent>:
 800c7b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	2900      	cmp	r1, #0
 800c7b6:	bfb8      	it	lt
 800c7b8:	4249      	neglt	r1, r1
 800c7ba:	f803 2b02 	strb.w	r2, [r3], #2
 800c7be:	bfb4      	ite	lt
 800c7c0:	222d      	movlt	r2, #45	; 0x2d
 800c7c2:	222b      	movge	r2, #43	; 0x2b
 800c7c4:	2909      	cmp	r1, #9
 800c7c6:	7042      	strb	r2, [r0, #1]
 800c7c8:	dd2a      	ble.n	800c820 <__exponent+0x70>
 800c7ca:	f10d 0407 	add.w	r4, sp, #7
 800c7ce:	46a4      	mov	ip, r4
 800c7d0:	270a      	movs	r7, #10
 800c7d2:	46a6      	mov	lr, r4
 800c7d4:	460a      	mov	r2, r1
 800c7d6:	fb91 f6f7 	sdiv	r6, r1, r7
 800c7da:	fb07 1516 	mls	r5, r7, r6, r1
 800c7de:	3530      	adds	r5, #48	; 0x30
 800c7e0:	2a63      	cmp	r2, #99	; 0x63
 800c7e2:	f104 34ff 	add.w	r4, r4, #4294967295
 800c7e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c7ea:	4631      	mov	r1, r6
 800c7ec:	dcf1      	bgt.n	800c7d2 <__exponent+0x22>
 800c7ee:	3130      	adds	r1, #48	; 0x30
 800c7f0:	f1ae 0502 	sub.w	r5, lr, #2
 800c7f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c7f8:	1c44      	adds	r4, r0, #1
 800c7fa:	4629      	mov	r1, r5
 800c7fc:	4561      	cmp	r1, ip
 800c7fe:	d30a      	bcc.n	800c816 <__exponent+0x66>
 800c800:	f10d 0209 	add.w	r2, sp, #9
 800c804:	eba2 020e 	sub.w	r2, r2, lr
 800c808:	4565      	cmp	r5, ip
 800c80a:	bf88      	it	hi
 800c80c:	2200      	movhi	r2, #0
 800c80e:	4413      	add	r3, r2
 800c810:	1a18      	subs	r0, r3, r0
 800c812:	b003      	add	sp, #12
 800c814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c816:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c81a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c81e:	e7ed      	b.n	800c7fc <__exponent+0x4c>
 800c820:	2330      	movs	r3, #48	; 0x30
 800c822:	3130      	adds	r1, #48	; 0x30
 800c824:	7083      	strb	r3, [r0, #2]
 800c826:	70c1      	strb	r1, [r0, #3]
 800c828:	1d03      	adds	r3, r0, #4
 800c82a:	e7f1      	b.n	800c810 <__exponent+0x60>

0800c82c <_printf_float>:
 800c82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c830:	ed2d 8b02 	vpush	{d8}
 800c834:	b08d      	sub	sp, #52	; 0x34
 800c836:	460c      	mov	r4, r1
 800c838:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c83c:	4616      	mov	r6, r2
 800c83e:	461f      	mov	r7, r3
 800c840:	4605      	mov	r5, r0
 800c842:	f003 f98b 	bl	800fb5c <_localeconv_r>
 800c846:	f8d0 a000 	ldr.w	sl, [r0]
 800c84a:	4650      	mov	r0, sl
 800c84c:	f7f3 fcd0 	bl	80001f0 <strlen>
 800c850:	2300      	movs	r3, #0
 800c852:	930a      	str	r3, [sp, #40]	; 0x28
 800c854:	6823      	ldr	r3, [r4, #0]
 800c856:	9305      	str	r3, [sp, #20]
 800c858:	f8d8 3000 	ldr.w	r3, [r8]
 800c85c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c860:	3307      	adds	r3, #7
 800c862:	f023 0307 	bic.w	r3, r3, #7
 800c866:	f103 0208 	add.w	r2, r3, #8
 800c86a:	f8c8 2000 	str.w	r2, [r8]
 800c86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c872:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c876:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c87a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c87e:	9307      	str	r3, [sp, #28]
 800c880:	f8cd 8018 	str.w	r8, [sp, #24]
 800c884:	ee08 0a10 	vmov	s16, r0
 800c888:	4b9f      	ldr	r3, [pc, #636]	; (800cb08 <_printf_float+0x2dc>)
 800c88a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c88e:	f04f 32ff 	mov.w	r2, #4294967295
 800c892:	f7f4 f95b 	bl	8000b4c <__aeabi_dcmpun>
 800c896:	bb88      	cbnz	r0, 800c8fc <_printf_float+0xd0>
 800c898:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c89c:	4b9a      	ldr	r3, [pc, #616]	; (800cb08 <_printf_float+0x2dc>)
 800c89e:	f04f 32ff 	mov.w	r2, #4294967295
 800c8a2:	f7f4 f935 	bl	8000b10 <__aeabi_dcmple>
 800c8a6:	bb48      	cbnz	r0, 800c8fc <_printf_float+0xd0>
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	4640      	mov	r0, r8
 800c8ae:	4649      	mov	r1, r9
 800c8b0:	f7f4 f924 	bl	8000afc <__aeabi_dcmplt>
 800c8b4:	b110      	cbz	r0, 800c8bc <_printf_float+0x90>
 800c8b6:	232d      	movs	r3, #45	; 0x2d
 800c8b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8bc:	4b93      	ldr	r3, [pc, #588]	; (800cb0c <_printf_float+0x2e0>)
 800c8be:	4894      	ldr	r0, [pc, #592]	; (800cb10 <_printf_float+0x2e4>)
 800c8c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c8c4:	bf94      	ite	ls
 800c8c6:	4698      	movls	r8, r3
 800c8c8:	4680      	movhi	r8, r0
 800c8ca:	2303      	movs	r3, #3
 800c8cc:	6123      	str	r3, [r4, #16]
 800c8ce:	9b05      	ldr	r3, [sp, #20]
 800c8d0:	f023 0204 	bic.w	r2, r3, #4
 800c8d4:	6022      	str	r2, [r4, #0]
 800c8d6:	f04f 0900 	mov.w	r9, #0
 800c8da:	9700      	str	r7, [sp, #0]
 800c8dc:	4633      	mov	r3, r6
 800c8de:	aa0b      	add	r2, sp, #44	; 0x2c
 800c8e0:	4621      	mov	r1, r4
 800c8e2:	4628      	mov	r0, r5
 800c8e4:	f000 f9d8 	bl	800cc98 <_printf_common>
 800c8e8:	3001      	adds	r0, #1
 800c8ea:	f040 8090 	bne.w	800ca0e <_printf_float+0x1e2>
 800c8ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c8f2:	b00d      	add	sp, #52	; 0x34
 800c8f4:	ecbd 8b02 	vpop	{d8}
 800c8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8fc:	4642      	mov	r2, r8
 800c8fe:	464b      	mov	r3, r9
 800c900:	4640      	mov	r0, r8
 800c902:	4649      	mov	r1, r9
 800c904:	f7f4 f922 	bl	8000b4c <__aeabi_dcmpun>
 800c908:	b140      	cbz	r0, 800c91c <_printf_float+0xf0>
 800c90a:	464b      	mov	r3, r9
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	bfbc      	itt	lt
 800c910:	232d      	movlt	r3, #45	; 0x2d
 800c912:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c916:	487f      	ldr	r0, [pc, #508]	; (800cb14 <_printf_float+0x2e8>)
 800c918:	4b7f      	ldr	r3, [pc, #508]	; (800cb18 <_printf_float+0x2ec>)
 800c91a:	e7d1      	b.n	800c8c0 <_printf_float+0x94>
 800c91c:	6863      	ldr	r3, [r4, #4]
 800c91e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c922:	9206      	str	r2, [sp, #24]
 800c924:	1c5a      	adds	r2, r3, #1
 800c926:	d13f      	bne.n	800c9a8 <_printf_float+0x17c>
 800c928:	2306      	movs	r3, #6
 800c92a:	6063      	str	r3, [r4, #4]
 800c92c:	9b05      	ldr	r3, [sp, #20]
 800c92e:	6861      	ldr	r1, [r4, #4]
 800c930:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c934:	2300      	movs	r3, #0
 800c936:	9303      	str	r3, [sp, #12]
 800c938:	ab0a      	add	r3, sp, #40	; 0x28
 800c93a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c93e:	ab09      	add	r3, sp, #36	; 0x24
 800c940:	ec49 8b10 	vmov	d0, r8, r9
 800c944:	9300      	str	r3, [sp, #0]
 800c946:	6022      	str	r2, [r4, #0]
 800c948:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c94c:	4628      	mov	r0, r5
 800c94e:	f7ff fecd 	bl	800c6ec <__cvt>
 800c952:	9b06      	ldr	r3, [sp, #24]
 800c954:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c956:	2b47      	cmp	r3, #71	; 0x47
 800c958:	4680      	mov	r8, r0
 800c95a:	d108      	bne.n	800c96e <_printf_float+0x142>
 800c95c:	1cc8      	adds	r0, r1, #3
 800c95e:	db02      	blt.n	800c966 <_printf_float+0x13a>
 800c960:	6863      	ldr	r3, [r4, #4]
 800c962:	4299      	cmp	r1, r3
 800c964:	dd41      	ble.n	800c9ea <_printf_float+0x1be>
 800c966:	f1ab 0b02 	sub.w	fp, fp, #2
 800c96a:	fa5f fb8b 	uxtb.w	fp, fp
 800c96e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c972:	d820      	bhi.n	800c9b6 <_printf_float+0x18a>
 800c974:	3901      	subs	r1, #1
 800c976:	465a      	mov	r2, fp
 800c978:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c97c:	9109      	str	r1, [sp, #36]	; 0x24
 800c97e:	f7ff ff17 	bl	800c7b0 <__exponent>
 800c982:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c984:	1813      	adds	r3, r2, r0
 800c986:	2a01      	cmp	r2, #1
 800c988:	4681      	mov	r9, r0
 800c98a:	6123      	str	r3, [r4, #16]
 800c98c:	dc02      	bgt.n	800c994 <_printf_float+0x168>
 800c98e:	6822      	ldr	r2, [r4, #0]
 800c990:	07d2      	lsls	r2, r2, #31
 800c992:	d501      	bpl.n	800c998 <_printf_float+0x16c>
 800c994:	3301      	adds	r3, #1
 800c996:	6123      	str	r3, [r4, #16]
 800c998:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d09c      	beq.n	800c8da <_printf_float+0xae>
 800c9a0:	232d      	movs	r3, #45	; 0x2d
 800c9a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9a6:	e798      	b.n	800c8da <_printf_float+0xae>
 800c9a8:	9a06      	ldr	r2, [sp, #24]
 800c9aa:	2a47      	cmp	r2, #71	; 0x47
 800c9ac:	d1be      	bne.n	800c92c <_printf_float+0x100>
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d1bc      	bne.n	800c92c <_printf_float+0x100>
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	e7b9      	b.n	800c92a <_printf_float+0xfe>
 800c9b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c9ba:	d118      	bne.n	800c9ee <_printf_float+0x1c2>
 800c9bc:	2900      	cmp	r1, #0
 800c9be:	6863      	ldr	r3, [r4, #4]
 800c9c0:	dd0b      	ble.n	800c9da <_printf_float+0x1ae>
 800c9c2:	6121      	str	r1, [r4, #16]
 800c9c4:	b913      	cbnz	r3, 800c9cc <_printf_float+0x1a0>
 800c9c6:	6822      	ldr	r2, [r4, #0]
 800c9c8:	07d0      	lsls	r0, r2, #31
 800c9ca:	d502      	bpl.n	800c9d2 <_printf_float+0x1a6>
 800c9cc:	3301      	adds	r3, #1
 800c9ce:	440b      	add	r3, r1
 800c9d0:	6123      	str	r3, [r4, #16]
 800c9d2:	65a1      	str	r1, [r4, #88]	; 0x58
 800c9d4:	f04f 0900 	mov.w	r9, #0
 800c9d8:	e7de      	b.n	800c998 <_printf_float+0x16c>
 800c9da:	b913      	cbnz	r3, 800c9e2 <_printf_float+0x1b6>
 800c9dc:	6822      	ldr	r2, [r4, #0]
 800c9de:	07d2      	lsls	r2, r2, #31
 800c9e0:	d501      	bpl.n	800c9e6 <_printf_float+0x1ba>
 800c9e2:	3302      	adds	r3, #2
 800c9e4:	e7f4      	b.n	800c9d0 <_printf_float+0x1a4>
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	e7f2      	b.n	800c9d0 <_printf_float+0x1a4>
 800c9ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c9ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9f0:	4299      	cmp	r1, r3
 800c9f2:	db05      	blt.n	800ca00 <_printf_float+0x1d4>
 800c9f4:	6823      	ldr	r3, [r4, #0]
 800c9f6:	6121      	str	r1, [r4, #16]
 800c9f8:	07d8      	lsls	r0, r3, #31
 800c9fa:	d5ea      	bpl.n	800c9d2 <_printf_float+0x1a6>
 800c9fc:	1c4b      	adds	r3, r1, #1
 800c9fe:	e7e7      	b.n	800c9d0 <_printf_float+0x1a4>
 800ca00:	2900      	cmp	r1, #0
 800ca02:	bfd4      	ite	le
 800ca04:	f1c1 0202 	rsble	r2, r1, #2
 800ca08:	2201      	movgt	r2, #1
 800ca0a:	4413      	add	r3, r2
 800ca0c:	e7e0      	b.n	800c9d0 <_printf_float+0x1a4>
 800ca0e:	6823      	ldr	r3, [r4, #0]
 800ca10:	055a      	lsls	r2, r3, #21
 800ca12:	d407      	bmi.n	800ca24 <_printf_float+0x1f8>
 800ca14:	6923      	ldr	r3, [r4, #16]
 800ca16:	4642      	mov	r2, r8
 800ca18:	4631      	mov	r1, r6
 800ca1a:	4628      	mov	r0, r5
 800ca1c:	47b8      	blx	r7
 800ca1e:	3001      	adds	r0, #1
 800ca20:	d12c      	bne.n	800ca7c <_printf_float+0x250>
 800ca22:	e764      	b.n	800c8ee <_printf_float+0xc2>
 800ca24:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ca28:	f240 80e0 	bls.w	800cbec <_printf_float+0x3c0>
 800ca2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ca30:	2200      	movs	r2, #0
 800ca32:	2300      	movs	r3, #0
 800ca34:	f7f4 f858 	bl	8000ae8 <__aeabi_dcmpeq>
 800ca38:	2800      	cmp	r0, #0
 800ca3a:	d034      	beq.n	800caa6 <_printf_float+0x27a>
 800ca3c:	4a37      	ldr	r2, [pc, #220]	; (800cb1c <_printf_float+0x2f0>)
 800ca3e:	2301      	movs	r3, #1
 800ca40:	4631      	mov	r1, r6
 800ca42:	4628      	mov	r0, r5
 800ca44:	47b8      	blx	r7
 800ca46:	3001      	adds	r0, #1
 800ca48:	f43f af51 	beq.w	800c8ee <_printf_float+0xc2>
 800ca4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca50:	429a      	cmp	r2, r3
 800ca52:	db02      	blt.n	800ca5a <_printf_float+0x22e>
 800ca54:	6823      	ldr	r3, [r4, #0]
 800ca56:	07d8      	lsls	r0, r3, #31
 800ca58:	d510      	bpl.n	800ca7c <_printf_float+0x250>
 800ca5a:	ee18 3a10 	vmov	r3, s16
 800ca5e:	4652      	mov	r2, sl
 800ca60:	4631      	mov	r1, r6
 800ca62:	4628      	mov	r0, r5
 800ca64:	47b8      	blx	r7
 800ca66:	3001      	adds	r0, #1
 800ca68:	f43f af41 	beq.w	800c8ee <_printf_float+0xc2>
 800ca6c:	f04f 0800 	mov.w	r8, #0
 800ca70:	f104 091a 	add.w	r9, r4, #26
 800ca74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca76:	3b01      	subs	r3, #1
 800ca78:	4543      	cmp	r3, r8
 800ca7a:	dc09      	bgt.n	800ca90 <_printf_float+0x264>
 800ca7c:	6823      	ldr	r3, [r4, #0]
 800ca7e:	079b      	lsls	r3, r3, #30
 800ca80:	f100 8105 	bmi.w	800cc8e <_printf_float+0x462>
 800ca84:	68e0      	ldr	r0, [r4, #12]
 800ca86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca88:	4298      	cmp	r0, r3
 800ca8a:	bfb8      	it	lt
 800ca8c:	4618      	movlt	r0, r3
 800ca8e:	e730      	b.n	800c8f2 <_printf_float+0xc6>
 800ca90:	2301      	movs	r3, #1
 800ca92:	464a      	mov	r2, r9
 800ca94:	4631      	mov	r1, r6
 800ca96:	4628      	mov	r0, r5
 800ca98:	47b8      	blx	r7
 800ca9a:	3001      	adds	r0, #1
 800ca9c:	f43f af27 	beq.w	800c8ee <_printf_float+0xc2>
 800caa0:	f108 0801 	add.w	r8, r8, #1
 800caa4:	e7e6      	b.n	800ca74 <_printf_float+0x248>
 800caa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	dc39      	bgt.n	800cb20 <_printf_float+0x2f4>
 800caac:	4a1b      	ldr	r2, [pc, #108]	; (800cb1c <_printf_float+0x2f0>)
 800caae:	2301      	movs	r3, #1
 800cab0:	4631      	mov	r1, r6
 800cab2:	4628      	mov	r0, r5
 800cab4:	47b8      	blx	r7
 800cab6:	3001      	adds	r0, #1
 800cab8:	f43f af19 	beq.w	800c8ee <_printf_float+0xc2>
 800cabc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cac0:	4313      	orrs	r3, r2
 800cac2:	d102      	bne.n	800caca <_printf_float+0x29e>
 800cac4:	6823      	ldr	r3, [r4, #0]
 800cac6:	07d9      	lsls	r1, r3, #31
 800cac8:	d5d8      	bpl.n	800ca7c <_printf_float+0x250>
 800caca:	ee18 3a10 	vmov	r3, s16
 800cace:	4652      	mov	r2, sl
 800cad0:	4631      	mov	r1, r6
 800cad2:	4628      	mov	r0, r5
 800cad4:	47b8      	blx	r7
 800cad6:	3001      	adds	r0, #1
 800cad8:	f43f af09 	beq.w	800c8ee <_printf_float+0xc2>
 800cadc:	f04f 0900 	mov.w	r9, #0
 800cae0:	f104 0a1a 	add.w	sl, r4, #26
 800cae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cae6:	425b      	negs	r3, r3
 800cae8:	454b      	cmp	r3, r9
 800caea:	dc01      	bgt.n	800caf0 <_printf_float+0x2c4>
 800caec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800caee:	e792      	b.n	800ca16 <_printf_float+0x1ea>
 800caf0:	2301      	movs	r3, #1
 800caf2:	4652      	mov	r2, sl
 800caf4:	4631      	mov	r1, r6
 800caf6:	4628      	mov	r0, r5
 800caf8:	47b8      	blx	r7
 800cafa:	3001      	adds	r0, #1
 800cafc:	f43f aef7 	beq.w	800c8ee <_printf_float+0xc2>
 800cb00:	f109 0901 	add.w	r9, r9, #1
 800cb04:	e7ee      	b.n	800cae4 <_printf_float+0x2b8>
 800cb06:	bf00      	nop
 800cb08:	7fefffff 	.word	0x7fefffff
 800cb0c:	08010fbc 	.word	0x08010fbc
 800cb10:	08010fc0 	.word	0x08010fc0
 800cb14:	08010fc8 	.word	0x08010fc8
 800cb18:	08010fc4 	.word	0x08010fc4
 800cb1c:	08010fcc 	.word	0x08010fcc
 800cb20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb24:	429a      	cmp	r2, r3
 800cb26:	bfa8      	it	ge
 800cb28:	461a      	movge	r2, r3
 800cb2a:	2a00      	cmp	r2, #0
 800cb2c:	4691      	mov	r9, r2
 800cb2e:	dc37      	bgt.n	800cba0 <_printf_float+0x374>
 800cb30:	f04f 0b00 	mov.w	fp, #0
 800cb34:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb38:	f104 021a 	add.w	r2, r4, #26
 800cb3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb3e:	9305      	str	r3, [sp, #20]
 800cb40:	eba3 0309 	sub.w	r3, r3, r9
 800cb44:	455b      	cmp	r3, fp
 800cb46:	dc33      	bgt.n	800cbb0 <_printf_float+0x384>
 800cb48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	db3b      	blt.n	800cbc8 <_printf_float+0x39c>
 800cb50:	6823      	ldr	r3, [r4, #0]
 800cb52:	07da      	lsls	r2, r3, #31
 800cb54:	d438      	bmi.n	800cbc8 <_printf_float+0x39c>
 800cb56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb58:	9b05      	ldr	r3, [sp, #20]
 800cb5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb5c:	1ad3      	subs	r3, r2, r3
 800cb5e:	eba2 0901 	sub.w	r9, r2, r1
 800cb62:	4599      	cmp	r9, r3
 800cb64:	bfa8      	it	ge
 800cb66:	4699      	movge	r9, r3
 800cb68:	f1b9 0f00 	cmp.w	r9, #0
 800cb6c:	dc35      	bgt.n	800cbda <_printf_float+0x3ae>
 800cb6e:	f04f 0800 	mov.w	r8, #0
 800cb72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb76:	f104 0a1a 	add.w	sl, r4, #26
 800cb7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb7e:	1a9b      	subs	r3, r3, r2
 800cb80:	eba3 0309 	sub.w	r3, r3, r9
 800cb84:	4543      	cmp	r3, r8
 800cb86:	f77f af79 	ble.w	800ca7c <_printf_float+0x250>
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	4652      	mov	r2, sl
 800cb8e:	4631      	mov	r1, r6
 800cb90:	4628      	mov	r0, r5
 800cb92:	47b8      	blx	r7
 800cb94:	3001      	adds	r0, #1
 800cb96:	f43f aeaa 	beq.w	800c8ee <_printf_float+0xc2>
 800cb9a:	f108 0801 	add.w	r8, r8, #1
 800cb9e:	e7ec      	b.n	800cb7a <_printf_float+0x34e>
 800cba0:	4613      	mov	r3, r2
 800cba2:	4631      	mov	r1, r6
 800cba4:	4642      	mov	r2, r8
 800cba6:	4628      	mov	r0, r5
 800cba8:	47b8      	blx	r7
 800cbaa:	3001      	adds	r0, #1
 800cbac:	d1c0      	bne.n	800cb30 <_printf_float+0x304>
 800cbae:	e69e      	b.n	800c8ee <_printf_float+0xc2>
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	4631      	mov	r1, r6
 800cbb4:	4628      	mov	r0, r5
 800cbb6:	9205      	str	r2, [sp, #20]
 800cbb8:	47b8      	blx	r7
 800cbba:	3001      	adds	r0, #1
 800cbbc:	f43f ae97 	beq.w	800c8ee <_printf_float+0xc2>
 800cbc0:	9a05      	ldr	r2, [sp, #20]
 800cbc2:	f10b 0b01 	add.w	fp, fp, #1
 800cbc6:	e7b9      	b.n	800cb3c <_printf_float+0x310>
 800cbc8:	ee18 3a10 	vmov	r3, s16
 800cbcc:	4652      	mov	r2, sl
 800cbce:	4631      	mov	r1, r6
 800cbd0:	4628      	mov	r0, r5
 800cbd2:	47b8      	blx	r7
 800cbd4:	3001      	adds	r0, #1
 800cbd6:	d1be      	bne.n	800cb56 <_printf_float+0x32a>
 800cbd8:	e689      	b.n	800c8ee <_printf_float+0xc2>
 800cbda:	9a05      	ldr	r2, [sp, #20]
 800cbdc:	464b      	mov	r3, r9
 800cbde:	4442      	add	r2, r8
 800cbe0:	4631      	mov	r1, r6
 800cbe2:	4628      	mov	r0, r5
 800cbe4:	47b8      	blx	r7
 800cbe6:	3001      	adds	r0, #1
 800cbe8:	d1c1      	bne.n	800cb6e <_printf_float+0x342>
 800cbea:	e680      	b.n	800c8ee <_printf_float+0xc2>
 800cbec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cbee:	2a01      	cmp	r2, #1
 800cbf0:	dc01      	bgt.n	800cbf6 <_printf_float+0x3ca>
 800cbf2:	07db      	lsls	r3, r3, #31
 800cbf4:	d538      	bpl.n	800cc68 <_printf_float+0x43c>
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	4642      	mov	r2, r8
 800cbfa:	4631      	mov	r1, r6
 800cbfc:	4628      	mov	r0, r5
 800cbfe:	47b8      	blx	r7
 800cc00:	3001      	adds	r0, #1
 800cc02:	f43f ae74 	beq.w	800c8ee <_printf_float+0xc2>
 800cc06:	ee18 3a10 	vmov	r3, s16
 800cc0a:	4652      	mov	r2, sl
 800cc0c:	4631      	mov	r1, r6
 800cc0e:	4628      	mov	r0, r5
 800cc10:	47b8      	blx	r7
 800cc12:	3001      	adds	r0, #1
 800cc14:	f43f ae6b 	beq.w	800c8ee <_printf_float+0xc2>
 800cc18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	2300      	movs	r3, #0
 800cc20:	f7f3 ff62 	bl	8000ae8 <__aeabi_dcmpeq>
 800cc24:	b9d8      	cbnz	r0, 800cc5e <_printf_float+0x432>
 800cc26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc28:	f108 0201 	add.w	r2, r8, #1
 800cc2c:	3b01      	subs	r3, #1
 800cc2e:	4631      	mov	r1, r6
 800cc30:	4628      	mov	r0, r5
 800cc32:	47b8      	blx	r7
 800cc34:	3001      	adds	r0, #1
 800cc36:	d10e      	bne.n	800cc56 <_printf_float+0x42a>
 800cc38:	e659      	b.n	800c8ee <_printf_float+0xc2>
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	4652      	mov	r2, sl
 800cc3e:	4631      	mov	r1, r6
 800cc40:	4628      	mov	r0, r5
 800cc42:	47b8      	blx	r7
 800cc44:	3001      	adds	r0, #1
 800cc46:	f43f ae52 	beq.w	800c8ee <_printf_float+0xc2>
 800cc4a:	f108 0801 	add.w	r8, r8, #1
 800cc4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc50:	3b01      	subs	r3, #1
 800cc52:	4543      	cmp	r3, r8
 800cc54:	dcf1      	bgt.n	800cc3a <_printf_float+0x40e>
 800cc56:	464b      	mov	r3, r9
 800cc58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cc5c:	e6dc      	b.n	800ca18 <_printf_float+0x1ec>
 800cc5e:	f04f 0800 	mov.w	r8, #0
 800cc62:	f104 0a1a 	add.w	sl, r4, #26
 800cc66:	e7f2      	b.n	800cc4e <_printf_float+0x422>
 800cc68:	2301      	movs	r3, #1
 800cc6a:	4642      	mov	r2, r8
 800cc6c:	e7df      	b.n	800cc2e <_printf_float+0x402>
 800cc6e:	2301      	movs	r3, #1
 800cc70:	464a      	mov	r2, r9
 800cc72:	4631      	mov	r1, r6
 800cc74:	4628      	mov	r0, r5
 800cc76:	47b8      	blx	r7
 800cc78:	3001      	adds	r0, #1
 800cc7a:	f43f ae38 	beq.w	800c8ee <_printf_float+0xc2>
 800cc7e:	f108 0801 	add.w	r8, r8, #1
 800cc82:	68e3      	ldr	r3, [r4, #12]
 800cc84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cc86:	1a5b      	subs	r3, r3, r1
 800cc88:	4543      	cmp	r3, r8
 800cc8a:	dcf0      	bgt.n	800cc6e <_printf_float+0x442>
 800cc8c:	e6fa      	b.n	800ca84 <_printf_float+0x258>
 800cc8e:	f04f 0800 	mov.w	r8, #0
 800cc92:	f104 0919 	add.w	r9, r4, #25
 800cc96:	e7f4      	b.n	800cc82 <_printf_float+0x456>

0800cc98 <_printf_common>:
 800cc98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc9c:	4616      	mov	r6, r2
 800cc9e:	4699      	mov	r9, r3
 800cca0:	688a      	ldr	r2, [r1, #8]
 800cca2:	690b      	ldr	r3, [r1, #16]
 800cca4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cca8:	4293      	cmp	r3, r2
 800ccaa:	bfb8      	it	lt
 800ccac:	4613      	movlt	r3, r2
 800ccae:	6033      	str	r3, [r6, #0]
 800ccb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ccb4:	4607      	mov	r7, r0
 800ccb6:	460c      	mov	r4, r1
 800ccb8:	b10a      	cbz	r2, 800ccbe <_printf_common+0x26>
 800ccba:	3301      	adds	r3, #1
 800ccbc:	6033      	str	r3, [r6, #0]
 800ccbe:	6823      	ldr	r3, [r4, #0]
 800ccc0:	0699      	lsls	r1, r3, #26
 800ccc2:	bf42      	ittt	mi
 800ccc4:	6833      	ldrmi	r3, [r6, #0]
 800ccc6:	3302      	addmi	r3, #2
 800ccc8:	6033      	strmi	r3, [r6, #0]
 800ccca:	6825      	ldr	r5, [r4, #0]
 800cccc:	f015 0506 	ands.w	r5, r5, #6
 800ccd0:	d106      	bne.n	800cce0 <_printf_common+0x48>
 800ccd2:	f104 0a19 	add.w	sl, r4, #25
 800ccd6:	68e3      	ldr	r3, [r4, #12]
 800ccd8:	6832      	ldr	r2, [r6, #0]
 800ccda:	1a9b      	subs	r3, r3, r2
 800ccdc:	42ab      	cmp	r3, r5
 800ccde:	dc26      	bgt.n	800cd2e <_printf_common+0x96>
 800cce0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cce4:	1e13      	subs	r3, r2, #0
 800cce6:	6822      	ldr	r2, [r4, #0]
 800cce8:	bf18      	it	ne
 800ccea:	2301      	movne	r3, #1
 800ccec:	0692      	lsls	r2, r2, #26
 800ccee:	d42b      	bmi.n	800cd48 <_printf_common+0xb0>
 800ccf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ccf4:	4649      	mov	r1, r9
 800ccf6:	4638      	mov	r0, r7
 800ccf8:	47c0      	blx	r8
 800ccfa:	3001      	adds	r0, #1
 800ccfc:	d01e      	beq.n	800cd3c <_printf_common+0xa4>
 800ccfe:	6823      	ldr	r3, [r4, #0]
 800cd00:	68e5      	ldr	r5, [r4, #12]
 800cd02:	6832      	ldr	r2, [r6, #0]
 800cd04:	f003 0306 	and.w	r3, r3, #6
 800cd08:	2b04      	cmp	r3, #4
 800cd0a:	bf08      	it	eq
 800cd0c:	1aad      	subeq	r5, r5, r2
 800cd0e:	68a3      	ldr	r3, [r4, #8]
 800cd10:	6922      	ldr	r2, [r4, #16]
 800cd12:	bf0c      	ite	eq
 800cd14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd18:	2500      	movne	r5, #0
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	bfc4      	itt	gt
 800cd1e:	1a9b      	subgt	r3, r3, r2
 800cd20:	18ed      	addgt	r5, r5, r3
 800cd22:	2600      	movs	r6, #0
 800cd24:	341a      	adds	r4, #26
 800cd26:	42b5      	cmp	r5, r6
 800cd28:	d11a      	bne.n	800cd60 <_printf_common+0xc8>
 800cd2a:	2000      	movs	r0, #0
 800cd2c:	e008      	b.n	800cd40 <_printf_common+0xa8>
 800cd2e:	2301      	movs	r3, #1
 800cd30:	4652      	mov	r2, sl
 800cd32:	4649      	mov	r1, r9
 800cd34:	4638      	mov	r0, r7
 800cd36:	47c0      	blx	r8
 800cd38:	3001      	adds	r0, #1
 800cd3a:	d103      	bne.n	800cd44 <_printf_common+0xac>
 800cd3c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd44:	3501      	adds	r5, #1
 800cd46:	e7c6      	b.n	800ccd6 <_printf_common+0x3e>
 800cd48:	18e1      	adds	r1, r4, r3
 800cd4a:	1c5a      	adds	r2, r3, #1
 800cd4c:	2030      	movs	r0, #48	; 0x30
 800cd4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cd52:	4422      	add	r2, r4
 800cd54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cd58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cd5c:	3302      	adds	r3, #2
 800cd5e:	e7c7      	b.n	800ccf0 <_printf_common+0x58>
 800cd60:	2301      	movs	r3, #1
 800cd62:	4622      	mov	r2, r4
 800cd64:	4649      	mov	r1, r9
 800cd66:	4638      	mov	r0, r7
 800cd68:	47c0      	blx	r8
 800cd6a:	3001      	adds	r0, #1
 800cd6c:	d0e6      	beq.n	800cd3c <_printf_common+0xa4>
 800cd6e:	3601      	adds	r6, #1
 800cd70:	e7d9      	b.n	800cd26 <_printf_common+0x8e>
	...

0800cd74 <_printf_i>:
 800cd74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd78:	460c      	mov	r4, r1
 800cd7a:	4691      	mov	r9, r2
 800cd7c:	7e27      	ldrb	r7, [r4, #24]
 800cd7e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cd80:	2f78      	cmp	r7, #120	; 0x78
 800cd82:	4680      	mov	r8, r0
 800cd84:	469a      	mov	sl, r3
 800cd86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd8a:	d807      	bhi.n	800cd9c <_printf_i+0x28>
 800cd8c:	2f62      	cmp	r7, #98	; 0x62
 800cd8e:	d80a      	bhi.n	800cda6 <_printf_i+0x32>
 800cd90:	2f00      	cmp	r7, #0
 800cd92:	f000 80d8 	beq.w	800cf46 <_printf_i+0x1d2>
 800cd96:	2f58      	cmp	r7, #88	; 0x58
 800cd98:	f000 80a3 	beq.w	800cee2 <_printf_i+0x16e>
 800cd9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cda0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cda4:	e03a      	b.n	800ce1c <_printf_i+0xa8>
 800cda6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cdaa:	2b15      	cmp	r3, #21
 800cdac:	d8f6      	bhi.n	800cd9c <_printf_i+0x28>
 800cdae:	a001      	add	r0, pc, #4	; (adr r0, 800cdb4 <_printf_i+0x40>)
 800cdb0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800cdb4:	0800ce0d 	.word	0x0800ce0d
 800cdb8:	0800ce21 	.word	0x0800ce21
 800cdbc:	0800cd9d 	.word	0x0800cd9d
 800cdc0:	0800cd9d 	.word	0x0800cd9d
 800cdc4:	0800cd9d 	.word	0x0800cd9d
 800cdc8:	0800cd9d 	.word	0x0800cd9d
 800cdcc:	0800ce21 	.word	0x0800ce21
 800cdd0:	0800cd9d 	.word	0x0800cd9d
 800cdd4:	0800cd9d 	.word	0x0800cd9d
 800cdd8:	0800cd9d 	.word	0x0800cd9d
 800cddc:	0800cd9d 	.word	0x0800cd9d
 800cde0:	0800cf2d 	.word	0x0800cf2d
 800cde4:	0800ce51 	.word	0x0800ce51
 800cde8:	0800cf0f 	.word	0x0800cf0f
 800cdec:	0800cd9d 	.word	0x0800cd9d
 800cdf0:	0800cd9d 	.word	0x0800cd9d
 800cdf4:	0800cf4f 	.word	0x0800cf4f
 800cdf8:	0800cd9d 	.word	0x0800cd9d
 800cdfc:	0800ce51 	.word	0x0800ce51
 800ce00:	0800cd9d 	.word	0x0800cd9d
 800ce04:	0800cd9d 	.word	0x0800cd9d
 800ce08:	0800cf17 	.word	0x0800cf17
 800ce0c:	680b      	ldr	r3, [r1, #0]
 800ce0e:	1d1a      	adds	r2, r3, #4
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	600a      	str	r2, [r1, #0]
 800ce14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ce18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	e0a3      	b.n	800cf68 <_printf_i+0x1f4>
 800ce20:	6825      	ldr	r5, [r4, #0]
 800ce22:	6808      	ldr	r0, [r1, #0]
 800ce24:	062e      	lsls	r6, r5, #24
 800ce26:	f100 0304 	add.w	r3, r0, #4
 800ce2a:	d50a      	bpl.n	800ce42 <_printf_i+0xce>
 800ce2c:	6805      	ldr	r5, [r0, #0]
 800ce2e:	600b      	str	r3, [r1, #0]
 800ce30:	2d00      	cmp	r5, #0
 800ce32:	da03      	bge.n	800ce3c <_printf_i+0xc8>
 800ce34:	232d      	movs	r3, #45	; 0x2d
 800ce36:	426d      	negs	r5, r5
 800ce38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce3c:	485e      	ldr	r0, [pc, #376]	; (800cfb8 <_printf_i+0x244>)
 800ce3e:	230a      	movs	r3, #10
 800ce40:	e019      	b.n	800ce76 <_printf_i+0x102>
 800ce42:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ce46:	6805      	ldr	r5, [r0, #0]
 800ce48:	600b      	str	r3, [r1, #0]
 800ce4a:	bf18      	it	ne
 800ce4c:	b22d      	sxthne	r5, r5
 800ce4e:	e7ef      	b.n	800ce30 <_printf_i+0xbc>
 800ce50:	680b      	ldr	r3, [r1, #0]
 800ce52:	6825      	ldr	r5, [r4, #0]
 800ce54:	1d18      	adds	r0, r3, #4
 800ce56:	6008      	str	r0, [r1, #0]
 800ce58:	0628      	lsls	r0, r5, #24
 800ce5a:	d501      	bpl.n	800ce60 <_printf_i+0xec>
 800ce5c:	681d      	ldr	r5, [r3, #0]
 800ce5e:	e002      	b.n	800ce66 <_printf_i+0xf2>
 800ce60:	0669      	lsls	r1, r5, #25
 800ce62:	d5fb      	bpl.n	800ce5c <_printf_i+0xe8>
 800ce64:	881d      	ldrh	r5, [r3, #0]
 800ce66:	4854      	ldr	r0, [pc, #336]	; (800cfb8 <_printf_i+0x244>)
 800ce68:	2f6f      	cmp	r7, #111	; 0x6f
 800ce6a:	bf0c      	ite	eq
 800ce6c:	2308      	moveq	r3, #8
 800ce6e:	230a      	movne	r3, #10
 800ce70:	2100      	movs	r1, #0
 800ce72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ce76:	6866      	ldr	r6, [r4, #4]
 800ce78:	60a6      	str	r6, [r4, #8]
 800ce7a:	2e00      	cmp	r6, #0
 800ce7c:	bfa2      	ittt	ge
 800ce7e:	6821      	ldrge	r1, [r4, #0]
 800ce80:	f021 0104 	bicge.w	r1, r1, #4
 800ce84:	6021      	strge	r1, [r4, #0]
 800ce86:	b90d      	cbnz	r5, 800ce8c <_printf_i+0x118>
 800ce88:	2e00      	cmp	r6, #0
 800ce8a:	d04d      	beq.n	800cf28 <_printf_i+0x1b4>
 800ce8c:	4616      	mov	r6, r2
 800ce8e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ce92:	fb03 5711 	mls	r7, r3, r1, r5
 800ce96:	5dc7      	ldrb	r7, [r0, r7]
 800ce98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ce9c:	462f      	mov	r7, r5
 800ce9e:	42bb      	cmp	r3, r7
 800cea0:	460d      	mov	r5, r1
 800cea2:	d9f4      	bls.n	800ce8e <_printf_i+0x11a>
 800cea4:	2b08      	cmp	r3, #8
 800cea6:	d10b      	bne.n	800cec0 <_printf_i+0x14c>
 800cea8:	6823      	ldr	r3, [r4, #0]
 800ceaa:	07df      	lsls	r7, r3, #31
 800ceac:	d508      	bpl.n	800cec0 <_printf_i+0x14c>
 800ceae:	6923      	ldr	r3, [r4, #16]
 800ceb0:	6861      	ldr	r1, [r4, #4]
 800ceb2:	4299      	cmp	r1, r3
 800ceb4:	bfde      	ittt	le
 800ceb6:	2330      	movle	r3, #48	; 0x30
 800ceb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cebc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cec0:	1b92      	subs	r2, r2, r6
 800cec2:	6122      	str	r2, [r4, #16]
 800cec4:	f8cd a000 	str.w	sl, [sp]
 800cec8:	464b      	mov	r3, r9
 800ceca:	aa03      	add	r2, sp, #12
 800cecc:	4621      	mov	r1, r4
 800cece:	4640      	mov	r0, r8
 800ced0:	f7ff fee2 	bl	800cc98 <_printf_common>
 800ced4:	3001      	adds	r0, #1
 800ced6:	d14c      	bne.n	800cf72 <_printf_i+0x1fe>
 800ced8:	f04f 30ff 	mov.w	r0, #4294967295
 800cedc:	b004      	add	sp, #16
 800cede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cee2:	4835      	ldr	r0, [pc, #212]	; (800cfb8 <_printf_i+0x244>)
 800cee4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cee8:	6823      	ldr	r3, [r4, #0]
 800ceea:	680e      	ldr	r6, [r1, #0]
 800ceec:	061f      	lsls	r7, r3, #24
 800ceee:	f856 5b04 	ldr.w	r5, [r6], #4
 800cef2:	600e      	str	r6, [r1, #0]
 800cef4:	d514      	bpl.n	800cf20 <_printf_i+0x1ac>
 800cef6:	07d9      	lsls	r1, r3, #31
 800cef8:	bf44      	itt	mi
 800cefa:	f043 0320 	orrmi.w	r3, r3, #32
 800cefe:	6023      	strmi	r3, [r4, #0]
 800cf00:	b91d      	cbnz	r5, 800cf0a <_printf_i+0x196>
 800cf02:	6823      	ldr	r3, [r4, #0]
 800cf04:	f023 0320 	bic.w	r3, r3, #32
 800cf08:	6023      	str	r3, [r4, #0]
 800cf0a:	2310      	movs	r3, #16
 800cf0c:	e7b0      	b.n	800ce70 <_printf_i+0xfc>
 800cf0e:	6823      	ldr	r3, [r4, #0]
 800cf10:	f043 0320 	orr.w	r3, r3, #32
 800cf14:	6023      	str	r3, [r4, #0]
 800cf16:	2378      	movs	r3, #120	; 0x78
 800cf18:	4828      	ldr	r0, [pc, #160]	; (800cfbc <_printf_i+0x248>)
 800cf1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cf1e:	e7e3      	b.n	800cee8 <_printf_i+0x174>
 800cf20:	065e      	lsls	r6, r3, #25
 800cf22:	bf48      	it	mi
 800cf24:	b2ad      	uxthmi	r5, r5
 800cf26:	e7e6      	b.n	800cef6 <_printf_i+0x182>
 800cf28:	4616      	mov	r6, r2
 800cf2a:	e7bb      	b.n	800cea4 <_printf_i+0x130>
 800cf2c:	680b      	ldr	r3, [r1, #0]
 800cf2e:	6826      	ldr	r6, [r4, #0]
 800cf30:	6960      	ldr	r0, [r4, #20]
 800cf32:	1d1d      	adds	r5, r3, #4
 800cf34:	600d      	str	r5, [r1, #0]
 800cf36:	0635      	lsls	r5, r6, #24
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	d501      	bpl.n	800cf40 <_printf_i+0x1cc>
 800cf3c:	6018      	str	r0, [r3, #0]
 800cf3e:	e002      	b.n	800cf46 <_printf_i+0x1d2>
 800cf40:	0671      	lsls	r1, r6, #25
 800cf42:	d5fb      	bpl.n	800cf3c <_printf_i+0x1c8>
 800cf44:	8018      	strh	r0, [r3, #0]
 800cf46:	2300      	movs	r3, #0
 800cf48:	6123      	str	r3, [r4, #16]
 800cf4a:	4616      	mov	r6, r2
 800cf4c:	e7ba      	b.n	800cec4 <_printf_i+0x150>
 800cf4e:	680b      	ldr	r3, [r1, #0]
 800cf50:	1d1a      	adds	r2, r3, #4
 800cf52:	600a      	str	r2, [r1, #0]
 800cf54:	681e      	ldr	r6, [r3, #0]
 800cf56:	6862      	ldr	r2, [r4, #4]
 800cf58:	2100      	movs	r1, #0
 800cf5a:	4630      	mov	r0, r6
 800cf5c:	f7f3 f950 	bl	8000200 <memchr>
 800cf60:	b108      	cbz	r0, 800cf66 <_printf_i+0x1f2>
 800cf62:	1b80      	subs	r0, r0, r6
 800cf64:	6060      	str	r0, [r4, #4]
 800cf66:	6863      	ldr	r3, [r4, #4]
 800cf68:	6123      	str	r3, [r4, #16]
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf70:	e7a8      	b.n	800cec4 <_printf_i+0x150>
 800cf72:	6923      	ldr	r3, [r4, #16]
 800cf74:	4632      	mov	r2, r6
 800cf76:	4649      	mov	r1, r9
 800cf78:	4640      	mov	r0, r8
 800cf7a:	47d0      	blx	sl
 800cf7c:	3001      	adds	r0, #1
 800cf7e:	d0ab      	beq.n	800ced8 <_printf_i+0x164>
 800cf80:	6823      	ldr	r3, [r4, #0]
 800cf82:	079b      	lsls	r3, r3, #30
 800cf84:	d413      	bmi.n	800cfae <_printf_i+0x23a>
 800cf86:	68e0      	ldr	r0, [r4, #12]
 800cf88:	9b03      	ldr	r3, [sp, #12]
 800cf8a:	4298      	cmp	r0, r3
 800cf8c:	bfb8      	it	lt
 800cf8e:	4618      	movlt	r0, r3
 800cf90:	e7a4      	b.n	800cedc <_printf_i+0x168>
 800cf92:	2301      	movs	r3, #1
 800cf94:	4632      	mov	r2, r6
 800cf96:	4649      	mov	r1, r9
 800cf98:	4640      	mov	r0, r8
 800cf9a:	47d0      	blx	sl
 800cf9c:	3001      	adds	r0, #1
 800cf9e:	d09b      	beq.n	800ced8 <_printf_i+0x164>
 800cfa0:	3501      	adds	r5, #1
 800cfa2:	68e3      	ldr	r3, [r4, #12]
 800cfa4:	9903      	ldr	r1, [sp, #12]
 800cfa6:	1a5b      	subs	r3, r3, r1
 800cfa8:	42ab      	cmp	r3, r5
 800cfaa:	dcf2      	bgt.n	800cf92 <_printf_i+0x21e>
 800cfac:	e7eb      	b.n	800cf86 <_printf_i+0x212>
 800cfae:	2500      	movs	r5, #0
 800cfb0:	f104 0619 	add.w	r6, r4, #25
 800cfb4:	e7f5      	b.n	800cfa2 <_printf_i+0x22e>
 800cfb6:	bf00      	nop
 800cfb8:	08010fce 	.word	0x08010fce
 800cfbc:	08010fdf 	.word	0x08010fdf

0800cfc0 <_scanf_float>:
 800cfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfc4:	b087      	sub	sp, #28
 800cfc6:	4617      	mov	r7, r2
 800cfc8:	9303      	str	r3, [sp, #12]
 800cfca:	688b      	ldr	r3, [r1, #8]
 800cfcc:	1e5a      	subs	r2, r3, #1
 800cfce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cfd2:	bf83      	ittte	hi
 800cfd4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cfd8:	195b      	addhi	r3, r3, r5
 800cfda:	9302      	strhi	r3, [sp, #8]
 800cfdc:	2300      	movls	r3, #0
 800cfde:	bf86      	itte	hi
 800cfe0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cfe4:	608b      	strhi	r3, [r1, #8]
 800cfe6:	9302      	strls	r3, [sp, #8]
 800cfe8:	680b      	ldr	r3, [r1, #0]
 800cfea:	468b      	mov	fp, r1
 800cfec:	2500      	movs	r5, #0
 800cfee:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800cff2:	f84b 3b1c 	str.w	r3, [fp], #28
 800cff6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cffa:	4680      	mov	r8, r0
 800cffc:	460c      	mov	r4, r1
 800cffe:	465e      	mov	r6, fp
 800d000:	46aa      	mov	sl, r5
 800d002:	46a9      	mov	r9, r5
 800d004:	9501      	str	r5, [sp, #4]
 800d006:	68a2      	ldr	r2, [r4, #8]
 800d008:	b152      	cbz	r2, 800d020 <_scanf_float+0x60>
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	781b      	ldrb	r3, [r3, #0]
 800d00e:	2b4e      	cmp	r3, #78	; 0x4e
 800d010:	d864      	bhi.n	800d0dc <_scanf_float+0x11c>
 800d012:	2b40      	cmp	r3, #64	; 0x40
 800d014:	d83c      	bhi.n	800d090 <_scanf_float+0xd0>
 800d016:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800d01a:	b2c8      	uxtb	r0, r1
 800d01c:	280e      	cmp	r0, #14
 800d01e:	d93a      	bls.n	800d096 <_scanf_float+0xd6>
 800d020:	f1b9 0f00 	cmp.w	r9, #0
 800d024:	d003      	beq.n	800d02e <_scanf_float+0x6e>
 800d026:	6823      	ldr	r3, [r4, #0]
 800d028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d02c:	6023      	str	r3, [r4, #0]
 800d02e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d032:	f1ba 0f01 	cmp.w	sl, #1
 800d036:	f200 8113 	bhi.w	800d260 <_scanf_float+0x2a0>
 800d03a:	455e      	cmp	r6, fp
 800d03c:	f200 8105 	bhi.w	800d24a <_scanf_float+0x28a>
 800d040:	2501      	movs	r5, #1
 800d042:	4628      	mov	r0, r5
 800d044:	b007      	add	sp, #28
 800d046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d04a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800d04e:	2a0d      	cmp	r2, #13
 800d050:	d8e6      	bhi.n	800d020 <_scanf_float+0x60>
 800d052:	a101      	add	r1, pc, #4	; (adr r1, 800d058 <_scanf_float+0x98>)
 800d054:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d058:	0800d197 	.word	0x0800d197
 800d05c:	0800d021 	.word	0x0800d021
 800d060:	0800d021 	.word	0x0800d021
 800d064:	0800d021 	.word	0x0800d021
 800d068:	0800d1f7 	.word	0x0800d1f7
 800d06c:	0800d1cf 	.word	0x0800d1cf
 800d070:	0800d021 	.word	0x0800d021
 800d074:	0800d021 	.word	0x0800d021
 800d078:	0800d1a5 	.word	0x0800d1a5
 800d07c:	0800d021 	.word	0x0800d021
 800d080:	0800d021 	.word	0x0800d021
 800d084:	0800d021 	.word	0x0800d021
 800d088:	0800d021 	.word	0x0800d021
 800d08c:	0800d15d 	.word	0x0800d15d
 800d090:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800d094:	e7db      	b.n	800d04e <_scanf_float+0x8e>
 800d096:	290e      	cmp	r1, #14
 800d098:	d8c2      	bhi.n	800d020 <_scanf_float+0x60>
 800d09a:	a001      	add	r0, pc, #4	; (adr r0, 800d0a0 <_scanf_float+0xe0>)
 800d09c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d0a0:	0800d14f 	.word	0x0800d14f
 800d0a4:	0800d021 	.word	0x0800d021
 800d0a8:	0800d14f 	.word	0x0800d14f
 800d0ac:	0800d1e3 	.word	0x0800d1e3
 800d0b0:	0800d021 	.word	0x0800d021
 800d0b4:	0800d0fd 	.word	0x0800d0fd
 800d0b8:	0800d139 	.word	0x0800d139
 800d0bc:	0800d139 	.word	0x0800d139
 800d0c0:	0800d139 	.word	0x0800d139
 800d0c4:	0800d139 	.word	0x0800d139
 800d0c8:	0800d139 	.word	0x0800d139
 800d0cc:	0800d139 	.word	0x0800d139
 800d0d0:	0800d139 	.word	0x0800d139
 800d0d4:	0800d139 	.word	0x0800d139
 800d0d8:	0800d139 	.word	0x0800d139
 800d0dc:	2b6e      	cmp	r3, #110	; 0x6e
 800d0de:	d809      	bhi.n	800d0f4 <_scanf_float+0x134>
 800d0e0:	2b60      	cmp	r3, #96	; 0x60
 800d0e2:	d8b2      	bhi.n	800d04a <_scanf_float+0x8a>
 800d0e4:	2b54      	cmp	r3, #84	; 0x54
 800d0e6:	d077      	beq.n	800d1d8 <_scanf_float+0x218>
 800d0e8:	2b59      	cmp	r3, #89	; 0x59
 800d0ea:	d199      	bne.n	800d020 <_scanf_float+0x60>
 800d0ec:	2d07      	cmp	r5, #7
 800d0ee:	d197      	bne.n	800d020 <_scanf_float+0x60>
 800d0f0:	2508      	movs	r5, #8
 800d0f2:	e029      	b.n	800d148 <_scanf_float+0x188>
 800d0f4:	2b74      	cmp	r3, #116	; 0x74
 800d0f6:	d06f      	beq.n	800d1d8 <_scanf_float+0x218>
 800d0f8:	2b79      	cmp	r3, #121	; 0x79
 800d0fa:	e7f6      	b.n	800d0ea <_scanf_float+0x12a>
 800d0fc:	6821      	ldr	r1, [r4, #0]
 800d0fe:	05c8      	lsls	r0, r1, #23
 800d100:	d51a      	bpl.n	800d138 <_scanf_float+0x178>
 800d102:	9b02      	ldr	r3, [sp, #8]
 800d104:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d108:	6021      	str	r1, [r4, #0]
 800d10a:	f109 0901 	add.w	r9, r9, #1
 800d10e:	b11b      	cbz	r3, 800d118 <_scanf_float+0x158>
 800d110:	3b01      	subs	r3, #1
 800d112:	3201      	adds	r2, #1
 800d114:	9302      	str	r3, [sp, #8]
 800d116:	60a2      	str	r2, [r4, #8]
 800d118:	68a3      	ldr	r3, [r4, #8]
 800d11a:	3b01      	subs	r3, #1
 800d11c:	60a3      	str	r3, [r4, #8]
 800d11e:	6923      	ldr	r3, [r4, #16]
 800d120:	3301      	adds	r3, #1
 800d122:	6123      	str	r3, [r4, #16]
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	3b01      	subs	r3, #1
 800d128:	2b00      	cmp	r3, #0
 800d12a:	607b      	str	r3, [r7, #4]
 800d12c:	f340 8084 	ble.w	800d238 <_scanf_float+0x278>
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	3301      	adds	r3, #1
 800d134:	603b      	str	r3, [r7, #0]
 800d136:	e766      	b.n	800d006 <_scanf_float+0x46>
 800d138:	eb1a 0f05 	cmn.w	sl, r5
 800d13c:	f47f af70 	bne.w	800d020 <_scanf_float+0x60>
 800d140:	6822      	ldr	r2, [r4, #0]
 800d142:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800d146:	6022      	str	r2, [r4, #0]
 800d148:	f806 3b01 	strb.w	r3, [r6], #1
 800d14c:	e7e4      	b.n	800d118 <_scanf_float+0x158>
 800d14e:	6822      	ldr	r2, [r4, #0]
 800d150:	0610      	lsls	r0, r2, #24
 800d152:	f57f af65 	bpl.w	800d020 <_scanf_float+0x60>
 800d156:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d15a:	e7f4      	b.n	800d146 <_scanf_float+0x186>
 800d15c:	f1ba 0f00 	cmp.w	sl, #0
 800d160:	d10e      	bne.n	800d180 <_scanf_float+0x1c0>
 800d162:	f1b9 0f00 	cmp.w	r9, #0
 800d166:	d10e      	bne.n	800d186 <_scanf_float+0x1c6>
 800d168:	6822      	ldr	r2, [r4, #0]
 800d16a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d16e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d172:	d108      	bne.n	800d186 <_scanf_float+0x1c6>
 800d174:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d178:	6022      	str	r2, [r4, #0]
 800d17a:	f04f 0a01 	mov.w	sl, #1
 800d17e:	e7e3      	b.n	800d148 <_scanf_float+0x188>
 800d180:	f1ba 0f02 	cmp.w	sl, #2
 800d184:	d055      	beq.n	800d232 <_scanf_float+0x272>
 800d186:	2d01      	cmp	r5, #1
 800d188:	d002      	beq.n	800d190 <_scanf_float+0x1d0>
 800d18a:	2d04      	cmp	r5, #4
 800d18c:	f47f af48 	bne.w	800d020 <_scanf_float+0x60>
 800d190:	3501      	adds	r5, #1
 800d192:	b2ed      	uxtb	r5, r5
 800d194:	e7d8      	b.n	800d148 <_scanf_float+0x188>
 800d196:	f1ba 0f01 	cmp.w	sl, #1
 800d19a:	f47f af41 	bne.w	800d020 <_scanf_float+0x60>
 800d19e:	f04f 0a02 	mov.w	sl, #2
 800d1a2:	e7d1      	b.n	800d148 <_scanf_float+0x188>
 800d1a4:	b97d      	cbnz	r5, 800d1c6 <_scanf_float+0x206>
 800d1a6:	f1b9 0f00 	cmp.w	r9, #0
 800d1aa:	f47f af3c 	bne.w	800d026 <_scanf_float+0x66>
 800d1ae:	6822      	ldr	r2, [r4, #0]
 800d1b0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d1b4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d1b8:	f47f af39 	bne.w	800d02e <_scanf_float+0x6e>
 800d1bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d1c0:	6022      	str	r2, [r4, #0]
 800d1c2:	2501      	movs	r5, #1
 800d1c4:	e7c0      	b.n	800d148 <_scanf_float+0x188>
 800d1c6:	2d03      	cmp	r5, #3
 800d1c8:	d0e2      	beq.n	800d190 <_scanf_float+0x1d0>
 800d1ca:	2d05      	cmp	r5, #5
 800d1cc:	e7de      	b.n	800d18c <_scanf_float+0x1cc>
 800d1ce:	2d02      	cmp	r5, #2
 800d1d0:	f47f af26 	bne.w	800d020 <_scanf_float+0x60>
 800d1d4:	2503      	movs	r5, #3
 800d1d6:	e7b7      	b.n	800d148 <_scanf_float+0x188>
 800d1d8:	2d06      	cmp	r5, #6
 800d1da:	f47f af21 	bne.w	800d020 <_scanf_float+0x60>
 800d1de:	2507      	movs	r5, #7
 800d1e0:	e7b2      	b.n	800d148 <_scanf_float+0x188>
 800d1e2:	6822      	ldr	r2, [r4, #0]
 800d1e4:	0591      	lsls	r1, r2, #22
 800d1e6:	f57f af1b 	bpl.w	800d020 <_scanf_float+0x60>
 800d1ea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800d1ee:	6022      	str	r2, [r4, #0]
 800d1f0:	f8cd 9004 	str.w	r9, [sp, #4]
 800d1f4:	e7a8      	b.n	800d148 <_scanf_float+0x188>
 800d1f6:	6822      	ldr	r2, [r4, #0]
 800d1f8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800d1fc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d200:	d006      	beq.n	800d210 <_scanf_float+0x250>
 800d202:	0550      	lsls	r0, r2, #21
 800d204:	f57f af0c 	bpl.w	800d020 <_scanf_float+0x60>
 800d208:	f1b9 0f00 	cmp.w	r9, #0
 800d20c:	f43f af0f 	beq.w	800d02e <_scanf_float+0x6e>
 800d210:	0591      	lsls	r1, r2, #22
 800d212:	bf58      	it	pl
 800d214:	9901      	ldrpl	r1, [sp, #4]
 800d216:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d21a:	bf58      	it	pl
 800d21c:	eba9 0101 	subpl.w	r1, r9, r1
 800d220:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800d224:	bf58      	it	pl
 800d226:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d22a:	6022      	str	r2, [r4, #0]
 800d22c:	f04f 0900 	mov.w	r9, #0
 800d230:	e78a      	b.n	800d148 <_scanf_float+0x188>
 800d232:	f04f 0a03 	mov.w	sl, #3
 800d236:	e787      	b.n	800d148 <_scanf_float+0x188>
 800d238:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d23c:	4639      	mov	r1, r7
 800d23e:	4640      	mov	r0, r8
 800d240:	4798      	blx	r3
 800d242:	2800      	cmp	r0, #0
 800d244:	f43f aedf 	beq.w	800d006 <_scanf_float+0x46>
 800d248:	e6ea      	b.n	800d020 <_scanf_float+0x60>
 800d24a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d24e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d252:	463a      	mov	r2, r7
 800d254:	4640      	mov	r0, r8
 800d256:	4798      	blx	r3
 800d258:	6923      	ldr	r3, [r4, #16]
 800d25a:	3b01      	subs	r3, #1
 800d25c:	6123      	str	r3, [r4, #16]
 800d25e:	e6ec      	b.n	800d03a <_scanf_float+0x7a>
 800d260:	1e6b      	subs	r3, r5, #1
 800d262:	2b06      	cmp	r3, #6
 800d264:	d825      	bhi.n	800d2b2 <_scanf_float+0x2f2>
 800d266:	2d02      	cmp	r5, #2
 800d268:	d836      	bhi.n	800d2d8 <_scanf_float+0x318>
 800d26a:	455e      	cmp	r6, fp
 800d26c:	f67f aee8 	bls.w	800d040 <_scanf_float+0x80>
 800d270:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d274:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d278:	463a      	mov	r2, r7
 800d27a:	4640      	mov	r0, r8
 800d27c:	4798      	blx	r3
 800d27e:	6923      	ldr	r3, [r4, #16]
 800d280:	3b01      	subs	r3, #1
 800d282:	6123      	str	r3, [r4, #16]
 800d284:	e7f1      	b.n	800d26a <_scanf_float+0x2aa>
 800d286:	9802      	ldr	r0, [sp, #8]
 800d288:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d28c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800d290:	9002      	str	r0, [sp, #8]
 800d292:	463a      	mov	r2, r7
 800d294:	4640      	mov	r0, r8
 800d296:	4798      	blx	r3
 800d298:	6923      	ldr	r3, [r4, #16]
 800d29a:	3b01      	subs	r3, #1
 800d29c:	6123      	str	r3, [r4, #16]
 800d29e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d2a2:	fa5f fa8a 	uxtb.w	sl, sl
 800d2a6:	f1ba 0f02 	cmp.w	sl, #2
 800d2aa:	d1ec      	bne.n	800d286 <_scanf_float+0x2c6>
 800d2ac:	3d03      	subs	r5, #3
 800d2ae:	b2ed      	uxtb	r5, r5
 800d2b0:	1b76      	subs	r6, r6, r5
 800d2b2:	6823      	ldr	r3, [r4, #0]
 800d2b4:	05da      	lsls	r2, r3, #23
 800d2b6:	d52f      	bpl.n	800d318 <_scanf_float+0x358>
 800d2b8:	055b      	lsls	r3, r3, #21
 800d2ba:	d510      	bpl.n	800d2de <_scanf_float+0x31e>
 800d2bc:	455e      	cmp	r6, fp
 800d2be:	f67f aebf 	bls.w	800d040 <_scanf_float+0x80>
 800d2c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d2c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d2ca:	463a      	mov	r2, r7
 800d2cc:	4640      	mov	r0, r8
 800d2ce:	4798      	blx	r3
 800d2d0:	6923      	ldr	r3, [r4, #16]
 800d2d2:	3b01      	subs	r3, #1
 800d2d4:	6123      	str	r3, [r4, #16]
 800d2d6:	e7f1      	b.n	800d2bc <_scanf_float+0x2fc>
 800d2d8:	46aa      	mov	sl, r5
 800d2da:	9602      	str	r6, [sp, #8]
 800d2dc:	e7df      	b.n	800d29e <_scanf_float+0x2de>
 800d2de:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d2e2:	6923      	ldr	r3, [r4, #16]
 800d2e4:	2965      	cmp	r1, #101	; 0x65
 800d2e6:	f103 33ff 	add.w	r3, r3, #4294967295
 800d2ea:	f106 35ff 	add.w	r5, r6, #4294967295
 800d2ee:	6123      	str	r3, [r4, #16]
 800d2f0:	d00c      	beq.n	800d30c <_scanf_float+0x34c>
 800d2f2:	2945      	cmp	r1, #69	; 0x45
 800d2f4:	d00a      	beq.n	800d30c <_scanf_float+0x34c>
 800d2f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d2fa:	463a      	mov	r2, r7
 800d2fc:	4640      	mov	r0, r8
 800d2fe:	4798      	blx	r3
 800d300:	6923      	ldr	r3, [r4, #16]
 800d302:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d306:	3b01      	subs	r3, #1
 800d308:	1eb5      	subs	r5, r6, #2
 800d30a:	6123      	str	r3, [r4, #16]
 800d30c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d310:	463a      	mov	r2, r7
 800d312:	4640      	mov	r0, r8
 800d314:	4798      	blx	r3
 800d316:	462e      	mov	r6, r5
 800d318:	6825      	ldr	r5, [r4, #0]
 800d31a:	f015 0510 	ands.w	r5, r5, #16
 800d31e:	d158      	bne.n	800d3d2 <_scanf_float+0x412>
 800d320:	7035      	strb	r5, [r6, #0]
 800d322:	6823      	ldr	r3, [r4, #0]
 800d324:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d32c:	d11c      	bne.n	800d368 <_scanf_float+0x3a8>
 800d32e:	9b01      	ldr	r3, [sp, #4]
 800d330:	454b      	cmp	r3, r9
 800d332:	eba3 0209 	sub.w	r2, r3, r9
 800d336:	d124      	bne.n	800d382 <_scanf_float+0x3c2>
 800d338:	2200      	movs	r2, #0
 800d33a:	4659      	mov	r1, fp
 800d33c:	4640      	mov	r0, r8
 800d33e:	f000 ff01 	bl	800e144 <_strtod_r>
 800d342:	9b03      	ldr	r3, [sp, #12]
 800d344:	6821      	ldr	r1, [r4, #0]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	f011 0f02 	tst.w	r1, #2
 800d34c:	ec57 6b10 	vmov	r6, r7, d0
 800d350:	f103 0204 	add.w	r2, r3, #4
 800d354:	d020      	beq.n	800d398 <_scanf_float+0x3d8>
 800d356:	9903      	ldr	r1, [sp, #12]
 800d358:	600a      	str	r2, [r1, #0]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	e9c3 6700 	strd	r6, r7, [r3]
 800d360:	68e3      	ldr	r3, [r4, #12]
 800d362:	3301      	adds	r3, #1
 800d364:	60e3      	str	r3, [r4, #12]
 800d366:	e66c      	b.n	800d042 <_scanf_float+0x82>
 800d368:	9b04      	ldr	r3, [sp, #16]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d0e4      	beq.n	800d338 <_scanf_float+0x378>
 800d36e:	9905      	ldr	r1, [sp, #20]
 800d370:	230a      	movs	r3, #10
 800d372:	462a      	mov	r2, r5
 800d374:	3101      	adds	r1, #1
 800d376:	4640      	mov	r0, r8
 800d378:	f000 ff6e 	bl	800e258 <_strtol_r>
 800d37c:	9b04      	ldr	r3, [sp, #16]
 800d37e:	9e05      	ldr	r6, [sp, #20]
 800d380:	1ac2      	subs	r2, r0, r3
 800d382:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d386:	429e      	cmp	r6, r3
 800d388:	bf28      	it	cs
 800d38a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800d38e:	4912      	ldr	r1, [pc, #72]	; (800d3d8 <_scanf_float+0x418>)
 800d390:	4630      	mov	r0, r6
 800d392:	f000 f83b 	bl	800d40c <siprintf>
 800d396:	e7cf      	b.n	800d338 <_scanf_float+0x378>
 800d398:	f011 0f04 	tst.w	r1, #4
 800d39c:	9903      	ldr	r1, [sp, #12]
 800d39e:	600a      	str	r2, [r1, #0]
 800d3a0:	d1db      	bne.n	800d35a <_scanf_float+0x39a>
 800d3a2:	f8d3 8000 	ldr.w	r8, [r3]
 800d3a6:	ee10 2a10 	vmov	r2, s0
 800d3aa:	ee10 0a10 	vmov	r0, s0
 800d3ae:	463b      	mov	r3, r7
 800d3b0:	4639      	mov	r1, r7
 800d3b2:	f7f3 fbcb 	bl	8000b4c <__aeabi_dcmpun>
 800d3b6:	b128      	cbz	r0, 800d3c4 <_scanf_float+0x404>
 800d3b8:	4808      	ldr	r0, [pc, #32]	; (800d3dc <_scanf_float+0x41c>)
 800d3ba:	f000 f821 	bl	800d400 <nanf>
 800d3be:	ed88 0a00 	vstr	s0, [r8]
 800d3c2:	e7cd      	b.n	800d360 <_scanf_float+0x3a0>
 800d3c4:	4630      	mov	r0, r6
 800d3c6:	4639      	mov	r1, r7
 800d3c8:	f7f3 fc1e 	bl	8000c08 <__aeabi_d2f>
 800d3cc:	f8c8 0000 	str.w	r0, [r8]
 800d3d0:	e7c6      	b.n	800d360 <_scanf_float+0x3a0>
 800d3d2:	2500      	movs	r5, #0
 800d3d4:	e635      	b.n	800d042 <_scanf_float+0x82>
 800d3d6:	bf00      	nop
 800d3d8:	08010ff0 	.word	0x08010ff0
 800d3dc:	08011368 	.word	0x08011368

0800d3e0 <_sbrk_r>:
 800d3e0:	b538      	push	{r3, r4, r5, lr}
 800d3e2:	4d06      	ldr	r5, [pc, #24]	; (800d3fc <_sbrk_r+0x1c>)
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	4604      	mov	r4, r0
 800d3e8:	4608      	mov	r0, r1
 800d3ea:	602b      	str	r3, [r5, #0]
 800d3ec:	f7f5 fb10 	bl	8002a10 <_sbrk>
 800d3f0:	1c43      	adds	r3, r0, #1
 800d3f2:	d102      	bne.n	800d3fa <_sbrk_r+0x1a>
 800d3f4:	682b      	ldr	r3, [r5, #0]
 800d3f6:	b103      	cbz	r3, 800d3fa <_sbrk_r+0x1a>
 800d3f8:	6023      	str	r3, [r4, #0]
 800d3fa:	bd38      	pop	{r3, r4, r5, pc}
 800d3fc:	20002d04 	.word	0x20002d04

0800d400 <nanf>:
 800d400:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d408 <nanf+0x8>
 800d404:	4770      	bx	lr
 800d406:	bf00      	nop
 800d408:	7fc00000 	.word	0x7fc00000

0800d40c <siprintf>:
 800d40c:	b40e      	push	{r1, r2, r3}
 800d40e:	b500      	push	{lr}
 800d410:	b09c      	sub	sp, #112	; 0x70
 800d412:	ab1d      	add	r3, sp, #116	; 0x74
 800d414:	9002      	str	r0, [sp, #8]
 800d416:	9006      	str	r0, [sp, #24]
 800d418:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d41c:	4809      	ldr	r0, [pc, #36]	; (800d444 <siprintf+0x38>)
 800d41e:	9107      	str	r1, [sp, #28]
 800d420:	9104      	str	r1, [sp, #16]
 800d422:	4909      	ldr	r1, [pc, #36]	; (800d448 <siprintf+0x3c>)
 800d424:	f853 2b04 	ldr.w	r2, [r3], #4
 800d428:	9105      	str	r1, [sp, #20]
 800d42a:	6800      	ldr	r0, [r0, #0]
 800d42c:	9301      	str	r3, [sp, #4]
 800d42e:	a902      	add	r1, sp, #8
 800d430:	f003 f956 	bl	80106e0 <_svfiprintf_r>
 800d434:	9b02      	ldr	r3, [sp, #8]
 800d436:	2200      	movs	r2, #0
 800d438:	701a      	strb	r2, [r3, #0]
 800d43a:	b01c      	add	sp, #112	; 0x70
 800d43c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d440:	b003      	add	sp, #12
 800d442:	4770      	bx	lr
 800d444:	20000198 	.word	0x20000198
 800d448:	ffff0208 	.word	0xffff0208

0800d44c <__sread>:
 800d44c:	b510      	push	{r4, lr}
 800d44e:	460c      	mov	r4, r1
 800d450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d454:	f003 fb9e 	bl	8010b94 <_read_r>
 800d458:	2800      	cmp	r0, #0
 800d45a:	bfab      	itete	ge
 800d45c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d45e:	89a3      	ldrhlt	r3, [r4, #12]
 800d460:	181b      	addge	r3, r3, r0
 800d462:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d466:	bfac      	ite	ge
 800d468:	6563      	strge	r3, [r4, #84]	; 0x54
 800d46a:	81a3      	strhlt	r3, [r4, #12]
 800d46c:	bd10      	pop	{r4, pc}

0800d46e <__swrite>:
 800d46e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d472:	461f      	mov	r7, r3
 800d474:	898b      	ldrh	r3, [r1, #12]
 800d476:	05db      	lsls	r3, r3, #23
 800d478:	4605      	mov	r5, r0
 800d47a:	460c      	mov	r4, r1
 800d47c:	4616      	mov	r6, r2
 800d47e:	d505      	bpl.n	800d48c <__swrite+0x1e>
 800d480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d484:	2302      	movs	r3, #2
 800d486:	2200      	movs	r2, #0
 800d488:	f002 fb70 	bl	800fb6c <_lseek_r>
 800d48c:	89a3      	ldrh	r3, [r4, #12]
 800d48e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d492:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d496:	81a3      	strh	r3, [r4, #12]
 800d498:	4632      	mov	r2, r6
 800d49a:	463b      	mov	r3, r7
 800d49c:	4628      	mov	r0, r5
 800d49e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4a2:	f000 bf2d 	b.w	800e300 <_write_r>

0800d4a6 <__sseek>:
 800d4a6:	b510      	push	{r4, lr}
 800d4a8:	460c      	mov	r4, r1
 800d4aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4ae:	f002 fb5d 	bl	800fb6c <_lseek_r>
 800d4b2:	1c43      	adds	r3, r0, #1
 800d4b4:	89a3      	ldrh	r3, [r4, #12]
 800d4b6:	bf15      	itete	ne
 800d4b8:	6560      	strne	r0, [r4, #84]	; 0x54
 800d4ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d4be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d4c2:	81a3      	strheq	r3, [r4, #12]
 800d4c4:	bf18      	it	ne
 800d4c6:	81a3      	strhne	r3, [r4, #12]
 800d4c8:	bd10      	pop	{r4, pc}

0800d4ca <__sclose>:
 800d4ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4ce:	f000 bf97 	b.w	800e400 <_close_r>

0800d4d2 <strncmp>:
 800d4d2:	b510      	push	{r4, lr}
 800d4d4:	b16a      	cbz	r2, 800d4f2 <strncmp+0x20>
 800d4d6:	3901      	subs	r1, #1
 800d4d8:	1884      	adds	r4, r0, r2
 800d4da:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d4de:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d4e2:	4293      	cmp	r3, r2
 800d4e4:	d103      	bne.n	800d4ee <strncmp+0x1c>
 800d4e6:	42a0      	cmp	r0, r4
 800d4e8:	d001      	beq.n	800d4ee <strncmp+0x1c>
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d1f5      	bne.n	800d4da <strncmp+0x8>
 800d4ee:	1a98      	subs	r0, r3, r2
 800d4f0:	bd10      	pop	{r4, pc}
 800d4f2:	4610      	mov	r0, r2
 800d4f4:	e7fc      	b.n	800d4f0 <strncmp+0x1e>

0800d4f6 <sulp>:
 800d4f6:	b570      	push	{r4, r5, r6, lr}
 800d4f8:	4604      	mov	r4, r0
 800d4fa:	460d      	mov	r5, r1
 800d4fc:	ec45 4b10 	vmov	d0, r4, r5
 800d500:	4616      	mov	r6, r2
 800d502:	f002 ff33 	bl	801036c <__ulp>
 800d506:	ec51 0b10 	vmov	r0, r1, d0
 800d50a:	b17e      	cbz	r6, 800d52c <sulp+0x36>
 800d50c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d510:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d514:	2b00      	cmp	r3, #0
 800d516:	dd09      	ble.n	800d52c <sulp+0x36>
 800d518:	051b      	lsls	r3, r3, #20
 800d51a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d51e:	2400      	movs	r4, #0
 800d520:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d524:	4622      	mov	r2, r4
 800d526:	462b      	mov	r3, r5
 800d528:	f7f3 f876 	bl	8000618 <__aeabi_dmul>
 800d52c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d530 <_strtod_l>:
 800d530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d534:	b0a3      	sub	sp, #140	; 0x8c
 800d536:	461f      	mov	r7, r3
 800d538:	2300      	movs	r3, #0
 800d53a:	931e      	str	r3, [sp, #120]	; 0x78
 800d53c:	4ba4      	ldr	r3, [pc, #656]	; (800d7d0 <_strtod_l+0x2a0>)
 800d53e:	9219      	str	r2, [sp, #100]	; 0x64
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	9307      	str	r3, [sp, #28]
 800d544:	4604      	mov	r4, r0
 800d546:	4618      	mov	r0, r3
 800d548:	4688      	mov	r8, r1
 800d54a:	f7f2 fe51 	bl	80001f0 <strlen>
 800d54e:	f04f 0a00 	mov.w	sl, #0
 800d552:	4605      	mov	r5, r0
 800d554:	f04f 0b00 	mov.w	fp, #0
 800d558:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d55c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d55e:	781a      	ldrb	r2, [r3, #0]
 800d560:	2a2b      	cmp	r2, #43	; 0x2b
 800d562:	d04c      	beq.n	800d5fe <_strtod_l+0xce>
 800d564:	d839      	bhi.n	800d5da <_strtod_l+0xaa>
 800d566:	2a0d      	cmp	r2, #13
 800d568:	d832      	bhi.n	800d5d0 <_strtod_l+0xa0>
 800d56a:	2a08      	cmp	r2, #8
 800d56c:	d832      	bhi.n	800d5d4 <_strtod_l+0xa4>
 800d56e:	2a00      	cmp	r2, #0
 800d570:	d03c      	beq.n	800d5ec <_strtod_l+0xbc>
 800d572:	2300      	movs	r3, #0
 800d574:	930e      	str	r3, [sp, #56]	; 0x38
 800d576:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800d578:	7833      	ldrb	r3, [r6, #0]
 800d57a:	2b30      	cmp	r3, #48	; 0x30
 800d57c:	f040 80b4 	bne.w	800d6e8 <_strtod_l+0x1b8>
 800d580:	7873      	ldrb	r3, [r6, #1]
 800d582:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d586:	2b58      	cmp	r3, #88	; 0x58
 800d588:	d16c      	bne.n	800d664 <_strtod_l+0x134>
 800d58a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d58c:	9301      	str	r3, [sp, #4]
 800d58e:	ab1e      	add	r3, sp, #120	; 0x78
 800d590:	9702      	str	r7, [sp, #8]
 800d592:	9300      	str	r3, [sp, #0]
 800d594:	4a8f      	ldr	r2, [pc, #572]	; (800d7d4 <_strtod_l+0x2a4>)
 800d596:	ab1f      	add	r3, sp, #124	; 0x7c
 800d598:	a91d      	add	r1, sp, #116	; 0x74
 800d59a:	4620      	mov	r0, r4
 800d59c:	f001 ffd6 	bl	800f54c <__gethex>
 800d5a0:	f010 0707 	ands.w	r7, r0, #7
 800d5a4:	4605      	mov	r5, r0
 800d5a6:	d005      	beq.n	800d5b4 <_strtod_l+0x84>
 800d5a8:	2f06      	cmp	r7, #6
 800d5aa:	d12a      	bne.n	800d602 <_strtod_l+0xd2>
 800d5ac:	3601      	adds	r6, #1
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	961d      	str	r6, [sp, #116]	; 0x74
 800d5b2:	930e      	str	r3, [sp, #56]	; 0x38
 800d5b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	f040 8596 	bne.w	800e0e8 <_strtod_l+0xbb8>
 800d5bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d5be:	b1db      	cbz	r3, 800d5f8 <_strtod_l+0xc8>
 800d5c0:	4652      	mov	r2, sl
 800d5c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d5c6:	ec43 2b10 	vmov	d0, r2, r3
 800d5ca:	b023      	add	sp, #140	; 0x8c
 800d5cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5d0:	2a20      	cmp	r2, #32
 800d5d2:	d1ce      	bne.n	800d572 <_strtod_l+0x42>
 800d5d4:	3301      	adds	r3, #1
 800d5d6:	931d      	str	r3, [sp, #116]	; 0x74
 800d5d8:	e7c0      	b.n	800d55c <_strtod_l+0x2c>
 800d5da:	2a2d      	cmp	r2, #45	; 0x2d
 800d5dc:	d1c9      	bne.n	800d572 <_strtod_l+0x42>
 800d5de:	2201      	movs	r2, #1
 800d5e0:	920e      	str	r2, [sp, #56]	; 0x38
 800d5e2:	1c5a      	adds	r2, r3, #1
 800d5e4:	921d      	str	r2, [sp, #116]	; 0x74
 800d5e6:	785b      	ldrb	r3, [r3, #1]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d1c4      	bne.n	800d576 <_strtod_l+0x46>
 800d5ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d5ee:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	f040 8576 	bne.w	800e0e4 <_strtod_l+0xbb4>
 800d5f8:	4652      	mov	r2, sl
 800d5fa:	465b      	mov	r3, fp
 800d5fc:	e7e3      	b.n	800d5c6 <_strtod_l+0x96>
 800d5fe:	2200      	movs	r2, #0
 800d600:	e7ee      	b.n	800d5e0 <_strtod_l+0xb0>
 800d602:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d604:	b13a      	cbz	r2, 800d616 <_strtod_l+0xe6>
 800d606:	2135      	movs	r1, #53	; 0x35
 800d608:	a820      	add	r0, sp, #128	; 0x80
 800d60a:	f002 ffba 	bl	8010582 <__copybits>
 800d60e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d610:	4620      	mov	r0, r4
 800d612:	f002 fb7f 	bl	800fd14 <_Bfree>
 800d616:	3f01      	subs	r7, #1
 800d618:	2f05      	cmp	r7, #5
 800d61a:	d807      	bhi.n	800d62c <_strtod_l+0xfc>
 800d61c:	e8df f007 	tbb	[pc, r7]
 800d620:	1d180b0e 	.word	0x1d180b0e
 800d624:	030e      	.short	0x030e
 800d626:	f04f 0b00 	mov.w	fp, #0
 800d62a:	46da      	mov	sl, fp
 800d62c:	0728      	lsls	r0, r5, #28
 800d62e:	d5c1      	bpl.n	800d5b4 <_strtod_l+0x84>
 800d630:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d634:	e7be      	b.n	800d5b4 <_strtod_l+0x84>
 800d636:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800d63a:	e7f7      	b.n	800d62c <_strtod_l+0xfc>
 800d63c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800d640:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d642:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d646:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d64a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d64e:	e7ed      	b.n	800d62c <_strtod_l+0xfc>
 800d650:	f8df b184 	ldr.w	fp, [pc, #388]	; 800d7d8 <_strtod_l+0x2a8>
 800d654:	f04f 0a00 	mov.w	sl, #0
 800d658:	e7e8      	b.n	800d62c <_strtod_l+0xfc>
 800d65a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d65e:	f04f 3aff 	mov.w	sl, #4294967295
 800d662:	e7e3      	b.n	800d62c <_strtod_l+0xfc>
 800d664:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d666:	1c5a      	adds	r2, r3, #1
 800d668:	921d      	str	r2, [sp, #116]	; 0x74
 800d66a:	785b      	ldrb	r3, [r3, #1]
 800d66c:	2b30      	cmp	r3, #48	; 0x30
 800d66e:	d0f9      	beq.n	800d664 <_strtod_l+0x134>
 800d670:	2b00      	cmp	r3, #0
 800d672:	d09f      	beq.n	800d5b4 <_strtod_l+0x84>
 800d674:	2301      	movs	r3, #1
 800d676:	f04f 0900 	mov.w	r9, #0
 800d67a:	9304      	str	r3, [sp, #16]
 800d67c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d67e:	930a      	str	r3, [sp, #40]	; 0x28
 800d680:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800d684:	464f      	mov	r7, r9
 800d686:	220a      	movs	r2, #10
 800d688:	981d      	ldr	r0, [sp, #116]	; 0x74
 800d68a:	7806      	ldrb	r6, [r0, #0]
 800d68c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d690:	b2d9      	uxtb	r1, r3
 800d692:	2909      	cmp	r1, #9
 800d694:	d92a      	bls.n	800d6ec <_strtod_l+0x1bc>
 800d696:	9907      	ldr	r1, [sp, #28]
 800d698:	462a      	mov	r2, r5
 800d69a:	f7ff ff1a 	bl	800d4d2 <strncmp>
 800d69e:	b398      	cbz	r0, 800d708 <_strtod_l+0x1d8>
 800d6a0:	2000      	movs	r0, #0
 800d6a2:	4633      	mov	r3, r6
 800d6a4:	463d      	mov	r5, r7
 800d6a6:	9007      	str	r0, [sp, #28]
 800d6a8:	4602      	mov	r2, r0
 800d6aa:	2b65      	cmp	r3, #101	; 0x65
 800d6ac:	d001      	beq.n	800d6b2 <_strtod_l+0x182>
 800d6ae:	2b45      	cmp	r3, #69	; 0x45
 800d6b0:	d118      	bne.n	800d6e4 <_strtod_l+0x1b4>
 800d6b2:	b91d      	cbnz	r5, 800d6bc <_strtod_l+0x18c>
 800d6b4:	9b04      	ldr	r3, [sp, #16]
 800d6b6:	4303      	orrs	r3, r0
 800d6b8:	d098      	beq.n	800d5ec <_strtod_l+0xbc>
 800d6ba:	2500      	movs	r5, #0
 800d6bc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800d6c0:	f108 0301 	add.w	r3, r8, #1
 800d6c4:	931d      	str	r3, [sp, #116]	; 0x74
 800d6c6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d6ca:	2b2b      	cmp	r3, #43	; 0x2b
 800d6cc:	d075      	beq.n	800d7ba <_strtod_l+0x28a>
 800d6ce:	2b2d      	cmp	r3, #45	; 0x2d
 800d6d0:	d07b      	beq.n	800d7ca <_strtod_l+0x29a>
 800d6d2:	f04f 0c00 	mov.w	ip, #0
 800d6d6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800d6da:	2909      	cmp	r1, #9
 800d6dc:	f240 8082 	bls.w	800d7e4 <_strtod_l+0x2b4>
 800d6e0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d6e4:	2600      	movs	r6, #0
 800d6e6:	e09d      	b.n	800d824 <_strtod_l+0x2f4>
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	e7c4      	b.n	800d676 <_strtod_l+0x146>
 800d6ec:	2f08      	cmp	r7, #8
 800d6ee:	bfd8      	it	le
 800d6f0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800d6f2:	f100 0001 	add.w	r0, r0, #1
 800d6f6:	bfda      	itte	le
 800d6f8:	fb02 3301 	mlale	r3, r2, r1, r3
 800d6fc:	9309      	strle	r3, [sp, #36]	; 0x24
 800d6fe:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d702:	3701      	adds	r7, #1
 800d704:	901d      	str	r0, [sp, #116]	; 0x74
 800d706:	e7bf      	b.n	800d688 <_strtod_l+0x158>
 800d708:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d70a:	195a      	adds	r2, r3, r5
 800d70c:	921d      	str	r2, [sp, #116]	; 0x74
 800d70e:	5d5b      	ldrb	r3, [r3, r5]
 800d710:	2f00      	cmp	r7, #0
 800d712:	d037      	beq.n	800d784 <_strtod_l+0x254>
 800d714:	9007      	str	r0, [sp, #28]
 800d716:	463d      	mov	r5, r7
 800d718:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800d71c:	2a09      	cmp	r2, #9
 800d71e:	d912      	bls.n	800d746 <_strtod_l+0x216>
 800d720:	2201      	movs	r2, #1
 800d722:	e7c2      	b.n	800d6aa <_strtod_l+0x17a>
 800d724:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d726:	1c5a      	adds	r2, r3, #1
 800d728:	921d      	str	r2, [sp, #116]	; 0x74
 800d72a:	785b      	ldrb	r3, [r3, #1]
 800d72c:	3001      	adds	r0, #1
 800d72e:	2b30      	cmp	r3, #48	; 0x30
 800d730:	d0f8      	beq.n	800d724 <_strtod_l+0x1f4>
 800d732:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800d736:	2a08      	cmp	r2, #8
 800d738:	f200 84db 	bhi.w	800e0f2 <_strtod_l+0xbc2>
 800d73c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d73e:	9007      	str	r0, [sp, #28]
 800d740:	2000      	movs	r0, #0
 800d742:	920a      	str	r2, [sp, #40]	; 0x28
 800d744:	4605      	mov	r5, r0
 800d746:	3b30      	subs	r3, #48	; 0x30
 800d748:	f100 0201 	add.w	r2, r0, #1
 800d74c:	d014      	beq.n	800d778 <_strtod_l+0x248>
 800d74e:	9907      	ldr	r1, [sp, #28]
 800d750:	4411      	add	r1, r2
 800d752:	9107      	str	r1, [sp, #28]
 800d754:	462a      	mov	r2, r5
 800d756:	eb00 0e05 	add.w	lr, r0, r5
 800d75a:	210a      	movs	r1, #10
 800d75c:	4572      	cmp	r2, lr
 800d75e:	d113      	bne.n	800d788 <_strtod_l+0x258>
 800d760:	182a      	adds	r2, r5, r0
 800d762:	2a08      	cmp	r2, #8
 800d764:	f105 0501 	add.w	r5, r5, #1
 800d768:	4405      	add	r5, r0
 800d76a:	dc1c      	bgt.n	800d7a6 <_strtod_l+0x276>
 800d76c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d76e:	220a      	movs	r2, #10
 800d770:	fb02 3301 	mla	r3, r2, r1, r3
 800d774:	9309      	str	r3, [sp, #36]	; 0x24
 800d776:	2200      	movs	r2, #0
 800d778:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d77a:	1c59      	adds	r1, r3, #1
 800d77c:	911d      	str	r1, [sp, #116]	; 0x74
 800d77e:	785b      	ldrb	r3, [r3, #1]
 800d780:	4610      	mov	r0, r2
 800d782:	e7c9      	b.n	800d718 <_strtod_l+0x1e8>
 800d784:	4638      	mov	r0, r7
 800d786:	e7d2      	b.n	800d72e <_strtod_l+0x1fe>
 800d788:	2a08      	cmp	r2, #8
 800d78a:	dc04      	bgt.n	800d796 <_strtod_l+0x266>
 800d78c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d78e:	434e      	muls	r6, r1
 800d790:	9609      	str	r6, [sp, #36]	; 0x24
 800d792:	3201      	adds	r2, #1
 800d794:	e7e2      	b.n	800d75c <_strtod_l+0x22c>
 800d796:	f102 0c01 	add.w	ip, r2, #1
 800d79a:	f1bc 0f10 	cmp.w	ip, #16
 800d79e:	bfd8      	it	le
 800d7a0:	fb01 f909 	mulle.w	r9, r1, r9
 800d7a4:	e7f5      	b.n	800d792 <_strtod_l+0x262>
 800d7a6:	2d10      	cmp	r5, #16
 800d7a8:	bfdc      	itt	le
 800d7aa:	220a      	movle	r2, #10
 800d7ac:	fb02 3909 	mlale	r9, r2, r9, r3
 800d7b0:	e7e1      	b.n	800d776 <_strtod_l+0x246>
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	9307      	str	r3, [sp, #28]
 800d7b6:	2201      	movs	r2, #1
 800d7b8:	e77c      	b.n	800d6b4 <_strtod_l+0x184>
 800d7ba:	f04f 0c00 	mov.w	ip, #0
 800d7be:	f108 0302 	add.w	r3, r8, #2
 800d7c2:	931d      	str	r3, [sp, #116]	; 0x74
 800d7c4:	f898 3002 	ldrb.w	r3, [r8, #2]
 800d7c8:	e785      	b.n	800d6d6 <_strtod_l+0x1a6>
 800d7ca:	f04f 0c01 	mov.w	ip, #1
 800d7ce:	e7f6      	b.n	800d7be <_strtod_l+0x28e>
 800d7d0:	080111a8 	.word	0x080111a8
 800d7d4:	08010ff8 	.word	0x08010ff8
 800d7d8:	7ff00000 	.word	0x7ff00000
 800d7dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d7de:	1c59      	adds	r1, r3, #1
 800d7e0:	911d      	str	r1, [sp, #116]	; 0x74
 800d7e2:	785b      	ldrb	r3, [r3, #1]
 800d7e4:	2b30      	cmp	r3, #48	; 0x30
 800d7e6:	d0f9      	beq.n	800d7dc <_strtod_l+0x2ac>
 800d7e8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800d7ec:	2908      	cmp	r1, #8
 800d7ee:	f63f af79 	bhi.w	800d6e4 <_strtod_l+0x1b4>
 800d7f2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800d7f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d7f8:	9308      	str	r3, [sp, #32]
 800d7fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d7fc:	1c59      	adds	r1, r3, #1
 800d7fe:	911d      	str	r1, [sp, #116]	; 0x74
 800d800:	785b      	ldrb	r3, [r3, #1]
 800d802:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800d806:	2e09      	cmp	r6, #9
 800d808:	d937      	bls.n	800d87a <_strtod_l+0x34a>
 800d80a:	9e08      	ldr	r6, [sp, #32]
 800d80c:	1b89      	subs	r1, r1, r6
 800d80e:	2908      	cmp	r1, #8
 800d810:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d814:	dc02      	bgt.n	800d81c <_strtod_l+0x2ec>
 800d816:	4576      	cmp	r6, lr
 800d818:	bfa8      	it	ge
 800d81a:	4676      	movge	r6, lr
 800d81c:	f1bc 0f00 	cmp.w	ip, #0
 800d820:	d000      	beq.n	800d824 <_strtod_l+0x2f4>
 800d822:	4276      	negs	r6, r6
 800d824:	2d00      	cmp	r5, #0
 800d826:	d14f      	bne.n	800d8c8 <_strtod_l+0x398>
 800d828:	9904      	ldr	r1, [sp, #16]
 800d82a:	4301      	orrs	r1, r0
 800d82c:	f47f aec2 	bne.w	800d5b4 <_strtod_l+0x84>
 800d830:	2a00      	cmp	r2, #0
 800d832:	f47f aedb 	bne.w	800d5ec <_strtod_l+0xbc>
 800d836:	2b69      	cmp	r3, #105	; 0x69
 800d838:	d027      	beq.n	800d88a <_strtod_l+0x35a>
 800d83a:	dc24      	bgt.n	800d886 <_strtod_l+0x356>
 800d83c:	2b49      	cmp	r3, #73	; 0x49
 800d83e:	d024      	beq.n	800d88a <_strtod_l+0x35a>
 800d840:	2b4e      	cmp	r3, #78	; 0x4e
 800d842:	f47f aed3 	bne.w	800d5ec <_strtod_l+0xbc>
 800d846:	499e      	ldr	r1, [pc, #632]	; (800dac0 <_strtod_l+0x590>)
 800d848:	a81d      	add	r0, sp, #116	; 0x74
 800d84a:	f002 f8d7 	bl	800f9fc <__match>
 800d84e:	2800      	cmp	r0, #0
 800d850:	f43f aecc 	beq.w	800d5ec <_strtod_l+0xbc>
 800d854:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d856:	781b      	ldrb	r3, [r3, #0]
 800d858:	2b28      	cmp	r3, #40	; 0x28
 800d85a:	d12d      	bne.n	800d8b8 <_strtod_l+0x388>
 800d85c:	4999      	ldr	r1, [pc, #612]	; (800dac4 <_strtod_l+0x594>)
 800d85e:	aa20      	add	r2, sp, #128	; 0x80
 800d860:	a81d      	add	r0, sp, #116	; 0x74
 800d862:	f002 f8df 	bl	800fa24 <__hexnan>
 800d866:	2805      	cmp	r0, #5
 800d868:	d126      	bne.n	800d8b8 <_strtod_l+0x388>
 800d86a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d86c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800d870:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d874:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d878:	e69c      	b.n	800d5b4 <_strtod_l+0x84>
 800d87a:	210a      	movs	r1, #10
 800d87c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800d880:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d884:	e7b9      	b.n	800d7fa <_strtod_l+0x2ca>
 800d886:	2b6e      	cmp	r3, #110	; 0x6e
 800d888:	e7db      	b.n	800d842 <_strtod_l+0x312>
 800d88a:	498f      	ldr	r1, [pc, #572]	; (800dac8 <_strtod_l+0x598>)
 800d88c:	a81d      	add	r0, sp, #116	; 0x74
 800d88e:	f002 f8b5 	bl	800f9fc <__match>
 800d892:	2800      	cmp	r0, #0
 800d894:	f43f aeaa 	beq.w	800d5ec <_strtod_l+0xbc>
 800d898:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d89a:	498c      	ldr	r1, [pc, #560]	; (800dacc <_strtod_l+0x59c>)
 800d89c:	3b01      	subs	r3, #1
 800d89e:	a81d      	add	r0, sp, #116	; 0x74
 800d8a0:	931d      	str	r3, [sp, #116]	; 0x74
 800d8a2:	f002 f8ab 	bl	800f9fc <__match>
 800d8a6:	b910      	cbnz	r0, 800d8ae <_strtod_l+0x37e>
 800d8a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d8aa:	3301      	adds	r3, #1
 800d8ac:	931d      	str	r3, [sp, #116]	; 0x74
 800d8ae:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800dadc <_strtod_l+0x5ac>
 800d8b2:	f04f 0a00 	mov.w	sl, #0
 800d8b6:	e67d      	b.n	800d5b4 <_strtod_l+0x84>
 800d8b8:	4885      	ldr	r0, [pc, #532]	; (800dad0 <_strtod_l+0x5a0>)
 800d8ba:	f003 f97d 	bl	8010bb8 <nan>
 800d8be:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d8c2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800d8c6:	e675      	b.n	800d5b4 <_strtod_l+0x84>
 800d8c8:	9b07      	ldr	r3, [sp, #28]
 800d8ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d8cc:	1af3      	subs	r3, r6, r3
 800d8ce:	2f00      	cmp	r7, #0
 800d8d0:	bf08      	it	eq
 800d8d2:	462f      	moveq	r7, r5
 800d8d4:	2d10      	cmp	r5, #16
 800d8d6:	9308      	str	r3, [sp, #32]
 800d8d8:	46a8      	mov	r8, r5
 800d8da:	bfa8      	it	ge
 800d8dc:	f04f 0810 	movge.w	r8, #16
 800d8e0:	f7f2 fe20 	bl	8000524 <__aeabi_ui2d>
 800d8e4:	2d09      	cmp	r5, #9
 800d8e6:	4682      	mov	sl, r0
 800d8e8:	468b      	mov	fp, r1
 800d8ea:	dd13      	ble.n	800d914 <_strtod_l+0x3e4>
 800d8ec:	4b79      	ldr	r3, [pc, #484]	; (800dad4 <_strtod_l+0x5a4>)
 800d8ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d8f2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d8f6:	f7f2 fe8f 	bl	8000618 <__aeabi_dmul>
 800d8fa:	4682      	mov	sl, r0
 800d8fc:	4648      	mov	r0, r9
 800d8fe:	468b      	mov	fp, r1
 800d900:	f7f2 fe10 	bl	8000524 <__aeabi_ui2d>
 800d904:	4602      	mov	r2, r0
 800d906:	460b      	mov	r3, r1
 800d908:	4650      	mov	r0, sl
 800d90a:	4659      	mov	r1, fp
 800d90c:	f7f2 fcce 	bl	80002ac <__adddf3>
 800d910:	4682      	mov	sl, r0
 800d912:	468b      	mov	fp, r1
 800d914:	2d0f      	cmp	r5, #15
 800d916:	dc38      	bgt.n	800d98a <_strtod_l+0x45a>
 800d918:	9b08      	ldr	r3, [sp, #32]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	f43f ae4a 	beq.w	800d5b4 <_strtod_l+0x84>
 800d920:	dd24      	ble.n	800d96c <_strtod_l+0x43c>
 800d922:	2b16      	cmp	r3, #22
 800d924:	dc0b      	bgt.n	800d93e <_strtod_l+0x40e>
 800d926:	4d6b      	ldr	r5, [pc, #428]	; (800dad4 <_strtod_l+0x5a4>)
 800d928:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800d92c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d930:	4652      	mov	r2, sl
 800d932:	465b      	mov	r3, fp
 800d934:	f7f2 fe70 	bl	8000618 <__aeabi_dmul>
 800d938:	4682      	mov	sl, r0
 800d93a:	468b      	mov	fp, r1
 800d93c:	e63a      	b.n	800d5b4 <_strtod_l+0x84>
 800d93e:	9a08      	ldr	r2, [sp, #32]
 800d940:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d944:	4293      	cmp	r3, r2
 800d946:	db20      	blt.n	800d98a <_strtod_l+0x45a>
 800d948:	4c62      	ldr	r4, [pc, #392]	; (800dad4 <_strtod_l+0x5a4>)
 800d94a:	f1c5 050f 	rsb	r5, r5, #15
 800d94e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d952:	4652      	mov	r2, sl
 800d954:	465b      	mov	r3, fp
 800d956:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d95a:	f7f2 fe5d 	bl	8000618 <__aeabi_dmul>
 800d95e:	9b08      	ldr	r3, [sp, #32]
 800d960:	1b5d      	subs	r5, r3, r5
 800d962:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d966:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d96a:	e7e3      	b.n	800d934 <_strtod_l+0x404>
 800d96c:	9b08      	ldr	r3, [sp, #32]
 800d96e:	3316      	adds	r3, #22
 800d970:	db0b      	blt.n	800d98a <_strtod_l+0x45a>
 800d972:	9b07      	ldr	r3, [sp, #28]
 800d974:	4a57      	ldr	r2, [pc, #348]	; (800dad4 <_strtod_l+0x5a4>)
 800d976:	1b9e      	subs	r6, r3, r6
 800d978:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800d97c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d980:	4650      	mov	r0, sl
 800d982:	4659      	mov	r1, fp
 800d984:	f7f2 ff72 	bl	800086c <__aeabi_ddiv>
 800d988:	e7d6      	b.n	800d938 <_strtod_l+0x408>
 800d98a:	9b08      	ldr	r3, [sp, #32]
 800d98c:	eba5 0808 	sub.w	r8, r5, r8
 800d990:	4498      	add	r8, r3
 800d992:	f1b8 0f00 	cmp.w	r8, #0
 800d996:	dd71      	ble.n	800da7c <_strtod_l+0x54c>
 800d998:	f018 030f 	ands.w	r3, r8, #15
 800d99c:	d00a      	beq.n	800d9b4 <_strtod_l+0x484>
 800d99e:	494d      	ldr	r1, [pc, #308]	; (800dad4 <_strtod_l+0x5a4>)
 800d9a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d9a4:	4652      	mov	r2, sl
 800d9a6:	465b      	mov	r3, fp
 800d9a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9ac:	f7f2 fe34 	bl	8000618 <__aeabi_dmul>
 800d9b0:	4682      	mov	sl, r0
 800d9b2:	468b      	mov	fp, r1
 800d9b4:	f038 080f 	bics.w	r8, r8, #15
 800d9b8:	d04d      	beq.n	800da56 <_strtod_l+0x526>
 800d9ba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d9be:	dd22      	ble.n	800da06 <_strtod_l+0x4d6>
 800d9c0:	2500      	movs	r5, #0
 800d9c2:	462e      	mov	r6, r5
 800d9c4:	9509      	str	r5, [sp, #36]	; 0x24
 800d9c6:	9507      	str	r5, [sp, #28]
 800d9c8:	2322      	movs	r3, #34	; 0x22
 800d9ca:	f8df b110 	ldr.w	fp, [pc, #272]	; 800dadc <_strtod_l+0x5ac>
 800d9ce:	6023      	str	r3, [r4, #0]
 800d9d0:	f04f 0a00 	mov.w	sl, #0
 800d9d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	f43f adec 	beq.w	800d5b4 <_strtod_l+0x84>
 800d9dc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d9de:	4620      	mov	r0, r4
 800d9e0:	f002 f998 	bl	800fd14 <_Bfree>
 800d9e4:	9907      	ldr	r1, [sp, #28]
 800d9e6:	4620      	mov	r0, r4
 800d9e8:	f002 f994 	bl	800fd14 <_Bfree>
 800d9ec:	4631      	mov	r1, r6
 800d9ee:	4620      	mov	r0, r4
 800d9f0:	f002 f990 	bl	800fd14 <_Bfree>
 800d9f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d9f6:	4620      	mov	r0, r4
 800d9f8:	f002 f98c 	bl	800fd14 <_Bfree>
 800d9fc:	4629      	mov	r1, r5
 800d9fe:	4620      	mov	r0, r4
 800da00:	f002 f988 	bl	800fd14 <_Bfree>
 800da04:	e5d6      	b.n	800d5b4 <_strtod_l+0x84>
 800da06:	2300      	movs	r3, #0
 800da08:	ea4f 1828 	mov.w	r8, r8, asr #4
 800da0c:	4650      	mov	r0, sl
 800da0e:	4659      	mov	r1, fp
 800da10:	4699      	mov	r9, r3
 800da12:	f1b8 0f01 	cmp.w	r8, #1
 800da16:	dc21      	bgt.n	800da5c <_strtod_l+0x52c>
 800da18:	b10b      	cbz	r3, 800da1e <_strtod_l+0x4ee>
 800da1a:	4682      	mov	sl, r0
 800da1c:	468b      	mov	fp, r1
 800da1e:	4b2e      	ldr	r3, [pc, #184]	; (800dad8 <_strtod_l+0x5a8>)
 800da20:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800da24:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800da28:	4652      	mov	r2, sl
 800da2a:	465b      	mov	r3, fp
 800da2c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800da30:	f7f2 fdf2 	bl	8000618 <__aeabi_dmul>
 800da34:	4b29      	ldr	r3, [pc, #164]	; (800dadc <_strtod_l+0x5ac>)
 800da36:	460a      	mov	r2, r1
 800da38:	400b      	ands	r3, r1
 800da3a:	4929      	ldr	r1, [pc, #164]	; (800dae0 <_strtod_l+0x5b0>)
 800da3c:	428b      	cmp	r3, r1
 800da3e:	4682      	mov	sl, r0
 800da40:	d8be      	bhi.n	800d9c0 <_strtod_l+0x490>
 800da42:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800da46:	428b      	cmp	r3, r1
 800da48:	bf86      	itte	hi
 800da4a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800dae4 <_strtod_l+0x5b4>
 800da4e:	f04f 3aff 	movhi.w	sl, #4294967295
 800da52:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800da56:	2300      	movs	r3, #0
 800da58:	9304      	str	r3, [sp, #16]
 800da5a:	e081      	b.n	800db60 <_strtod_l+0x630>
 800da5c:	f018 0f01 	tst.w	r8, #1
 800da60:	d007      	beq.n	800da72 <_strtod_l+0x542>
 800da62:	4b1d      	ldr	r3, [pc, #116]	; (800dad8 <_strtod_l+0x5a8>)
 800da64:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800da68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da6c:	f7f2 fdd4 	bl	8000618 <__aeabi_dmul>
 800da70:	2301      	movs	r3, #1
 800da72:	f109 0901 	add.w	r9, r9, #1
 800da76:	ea4f 0868 	mov.w	r8, r8, asr #1
 800da7a:	e7ca      	b.n	800da12 <_strtod_l+0x4e2>
 800da7c:	d0eb      	beq.n	800da56 <_strtod_l+0x526>
 800da7e:	f1c8 0800 	rsb	r8, r8, #0
 800da82:	f018 020f 	ands.w	r2, r8, #15
 800da86:	d00a      	beq.n	800da9e <_strtod_l+0x56e>
 800da88:	4b12      	ldr	r3, [pc, #72]	; (800dad4 <_strtod_l+0x5a4>)
 800da8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da8e:	4650      	mov	r0, sl
 800da90:	4659      	mov	r1, fp
 800da92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da96:	f7f2 fee9 	bl	800086c <__aeabi_ddiv>
 800da9a:	4682      	mov	sl, r0
 800da9c:	468b      	mov	fp, r1
 800da9e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800daa2:	d0d8      	beq.n	800da56 <_strtod_l+0x526>
 800daa4:	f1b8 0f1f 	cmp.w	r8, #31
 800daa8:	dd1e      	ble.n	800dae8 <_strtod_l+0x5b8>
 800daaa:	2500      	movs	r5, #0
 800daac:	462e      	mov	r6, r5
 800daae:	9509      	str	r5, [sp, #36]	; 0x24
 800dab0:	9507      	str	r5, [sp, #28]
 800dab2:	2322      	movs	r3, #34	; 0x22
 800dab4:	f04f 0a00 	mov.w	sl, #0
 800dab8:	f04f 0b00 	mov.w	fp, #0
 800dabc:	6023      	str	r3, [r4, #0]
 800dabe:	e789      	b.n	800d9d4 <_strtod_l+0x4a4>
 800dac0:	08010fc9 	.word	0x08010fc9
 800dac4:	0801100c 	.word	0x0801100c
 800dac8:	08010fc1 	.word	0x08010fc1
 800dacc:	0801104b 	.word	0x0801104b
 800dad0:	08011368 	.word	0x08011368
 800dad4:	08011248 	.word	0x08011248
 800dad8:	08011220 	.word	0x08011220
 800dadc:	7ff00000 	.word	0x7ff00000
 800dae0:	7ca00000 	.word	0x7ca00000
 800dae4:	7fefffff 	.word	0x7fefffff
 800dae8:	f018 0310 	ands.w	r3, r8, #16
 800daec:	bf18      	it	ne
 800daee:	236a      	movne	r3, #106	; 0x6a
 800daf0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800dea8 <_strtod_l+0x978>
 800daf4:	9304      	str	r3, [sp, #16]
 800daf6:	4650      	mov	r0, sl
 800daf8:	4659      	mov	r1, fp
 800dafa:	2300      	movs	r3, #0
 800dafc:	f018 0f01 	tst.w	r8, #1
 800db00:	d004      	beq.n	800db0c <_strtod_l+0x5dc>
 800db02:	e9d9 2300 	ldrd	r2, r3, [r9]
 800db06:	f7f2 fd87 	bl	8000618 <__aeabi_dmul>
 800db0a:	2301      	movs	r3, #1
 800db0c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800db10:	f109 0908 	add.w	r9, r9, #8
 800db14:	d1f2      	bne.n	800dafc <_strtod_l+0x5cc>
 800db16:	b10b      	cbz	r3, 800db1c <_strtod_l+0x5ec>
 800db18:	4682      	mov	sl, r0
 800db1a:	468b      	mov	fp, r1
 800db1c:	9b04      	ldr	r3, [sp, #16]
 800db1e:	b1bb      	cbz	r3, 800db50 <_strtod_l+0x620>
 800db20:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800db24:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800db28:	2b00      	cmp	r3, #0
 800db2a:	4659      	mov	r1, fp
 800db2c:	dd10      	ble.n	800db50 <_strtod_l+0x620>
 800db2e:	2b1f      	cmp	r3, #31
 800db30:	f340 8128 	ble.w	800dd84 <_strtod_l+0x854>
 800db34:	2b34      	cmp	r3, #52	; 0x34
 800db36:	bfde      	ittt	le
 800db38:	3b20      	suble	r3, #32
 800db3a:	f04f 32ff 	movle.w	r2, #4294967295
 800db3e:	fa02 f303 	lslle.w	r3, r2, r3
 800db42:	f04f 0a00 	mov.w	sl, #0
 800db46:	bfcc      	ite	gt
 800db48:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800db4c:	ea03 0b01 	andle.w	fp, r3, r1
 800db50:	2200      	movs	r2, #0
 800db52:	2300      	movs	r3, #0
 800db54:	4650      	mov	r0, sl
 800db56:	4659      	mov	r1, fp
 800db58:	f7f2 ffc6 	bl	8000ae8 <__aeabi_dcmpeq>
 800db5c:	2800      	cmp	r0, #0
 800db5e:	d1a4      	bne.n	800daaa <_strtod_l+0x57a>
 800db60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db62:	9300      	str	r3, [sp, #0]
 800db64:	990a      	ldr	r1, [sp, #40]	; 0x28
 800db66:	462b      	mov	r3, r5
 800db68:	463a      	mov	r2, r7
 800db6a:	4620      	mov	r0, r4
 800db6c:	f002 f93e 	bl	800fdec <__s2b>
 800db70:	9009      	str	r0, [sp, #36]	; 0x24
 800db72:	2800      	cmp	r0, #0
 800db74:	f43f af24 	beq.w	800d9c0 <_strtod_l+0x490>
 800db78:	9b07      	ldr	r3, [sp, #28]
 800db7a:	1b9e      	subs	r6, r3, r6
 800db7c:	9b08      	ldr	r3, [sp, #32]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	bfb4      	ite	lt
 800db82:	4633      	movlt	r3, r6
 800db84:	2300      	movge	r3, #0
 800db86:	9310      	str	r3, [sp, #64]	; 0x40
 800db88:	9b08      	ldr	r3, [sp, #32]
 800db8a:	2500      	movs	r5, #0
 800db8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800db90:	9318      	str	r3, [sp, #96]	; 0x60
 800db92:	462e      	mov	r6, r5
 800db94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db96:	4620      	mov	r0, r4
 800db98:	6859      	ldr	r1, [r3, #4]
 800db9a:	f002 f87b 	bl	800fc94 <_Balloc>
 800db9e:	9007      	str	r0, [sp, #28]
 800dba0:	2800      	cmp	r0, #0
 800dba2:	f43f af11 	beq.w	800d9c8 <_strtod_l+0x498>
 800dba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dba8:	691a      	ldr	r2, [r3, #16]
 800dbaa:	3202      	adds	r2, #2
 800dbac:	f103 010c 	add.w	r1, r3, #12
 800dbb0:	0092      	lsls	r2, r2, #2
 800dbb2:	300c      	adds	r0, #12
 800dbb4:	f7fe fcda 	bl	800c56c <memcpy>
 800dbb8:	ec4b ab10 	vmov	d0, sl, fp
 800dbbc:	aa20      	add	r2, sp, #128	; 0x80
 800dbbe:	a91f      	add	r1, sp, #124	; 0x7c
 800dbc0:	4620      	mov	r0, r4
 800dbc2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800dbc6:	f002 fc4d 	bl	8010464 <__d2b>
 800dbca:	901e      	str	r0, [sp, #120]	; 0x78
 800dbcc:	2800      	cmp	r0, #0
 800dbce:	f43f aefb 	beq.w	800d9c8 <_strtod_l+0x498>
 800dbd2:	2101      	movs	r1, #1
 800dbd4:	4620      	mov	r0, r4
 800dbd6:	f002 f9a3 	bl	800ff20 <__i2b>
 800dbda:	4606      	mov	r6, r0
 800dbdc:	2800      	cmp	r0, #0
 800dbde:	f43f aef3 	beq.w	800d9c8 <_strtod_l+0x498>
 800dbe2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800dbe4:	9904      	ldr	r1, [sp, #16]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	bfab      	itete	ge
 800dbea:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800dbec:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800dbee:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800dbf0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800dbf4:	bfac      	ite	ge
 800dbf6:	eb03 0902 	addge.w	r9, r3, r2
 800dbfa:	1ad7      	sublt	r7, r2, r3
 800dbfc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dbfe:	eba3 0801 	sub.w	r8, r3, r1
 800dc02:	4490      	add	r8, r2
 800dc04:	4ba3      	ldr	r3, [pc, #652]	; (800de94 <_strtod_l+0x964>)
 800dc06:	f108 38ff 	add.w	r8, r8, #4294967295
 800dc0a:	4598      	cmp	r8, r3
 800dc0c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800dc10:	f280 80cc 	bge.w	800ddac <_strtod_l+0x87c>
 800dc14:	eba3 0308 	sub.w	r3, r3, r8
 800dc18:	2b1f      	cmp	r3, #31
 800dc1a:	eba2 0203 	sub.w	r2, r2, r3
 800dc1e:	f04f 0101 	mov.w	r1, #1
 800dc22:	f300 80b6 	bgt.w	800dd92 <_strtod_l+0x862>
 800dc26:	fa01 f303 	lsl.w	r3, r1, r3
 800dc2a:	9311      	str	r3, [sp, #68]	; 0x44
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	930c      	str	r3, [sp, #48]	; 0x30
 800dc30:	eb09 0802 	add.w	r8, r9, r2
 800dc34:	9b04      	ldr	r3, [sp, #16]
 800dc36:	45c1      	cmp	r9, r8
 800dc38:	4417      	add	r7, r2
 800dc3a:	441f      	add	r7, r3
 800dc3c:	464b      	mov	r3, r9
 800dc3e:	bfa8      	it	ge
 800dc40:	4643      	movge	r3, r8
 800dc42:	42bb      	cmp	r3, r7
 800dc44:	bfa8      	it	ge
 800dc46:	463b      	movge	r3, r7
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	bfc2      	ittt	gt
 800dc4c:	eba8 0803 	subgt.w	r8, r8, r3
 800dc50:	1aff      	subgt	r7, r7, r3
 800dc52:	eba9 0903 	subgt.w	r9, r9, r3
 800dc56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	dd17      	ble.n	800dc8c <_strtod_l+0x75c>
 800dc5c:	4631      	mov	r1, r6
 800dc5e:	461a      	mov	r2, r3
 800dc60:	4620      	mov	r0, r4
 800dc62:	f002 fa19 	bl	8010098 <__pow5mult>
 800dc66:	4606      	mov	r6, r0
 800dc68:	2800      	cmp	r0, #0
 800dc6a:	f43f aead 	beq.w	800d9c8 <_strtod_l+0x498>
 800dc6e:	4601      	mov	r1, r0
 800dc70:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800dc72:	4620      	mov	r0, r4
 800dc74:	f002 f96a 	bl	800ff4c <__multiply>
 800dc78:	900f      	str	r0, [sp, #60]	; 0x3c
 800dc7a:	2800      	cmp	r0, #0
 800dc7c:	f43f aea4 	beq.w	800d9c8 <_strtod_l+0x498>
 800dc80:	991e      	ldr	r1, [sp, #120]	; 0x78
 800dc82:	4620      	mov	r0, r4
 800dc84:	f002 f846 	bl	800fd14 <_Bfree>
 800dc88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dc8a:	931e      	str	r3, [sp, #120]	; 0x78
 800dc8c:	f1b8 0f00 	cmp.w	r8, #0
 800dc90:	f300 8091 	bgt.w	800ddb6 <_strtod_l+0x886>
 800dc94:	9b08      	ldr	r3, [sp, #32]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	dd08      	ble.n	800dcac <_strtod_l+0x77c>
 800dc9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800dc9c:	9907      	ldr	r1, [sp, #28]
 800dc9e:	4620      	mov	r0, r4
 800dca0:	f002 f9fa 	bl	8010098 <__pow5mult>
 800dca4:	9007      	str	r0, [sp, #28]
 800dca6:	2800      	cmp	r0, #0
 800dca8:	f43f ae8e 	beq.w	800d9c8 <_strtod_l+0x498>
 800dcac:	2f00      	cmp	r7, #0
 800dcae:	dd08      	ble.n	800dcc2 <_strtod_l+0x792>
 800dcb0:	9907      	ldr	r1, [sp, #28]
 800dcb2:	463a      	mov	r2, r7
 800dcb4:	4620      	mov	r0, r4
 800dcb6:	f002 fa49 	bl	801014c <__lshift>
 800dcba:	9007      	str	r0, [sp, #28]
 800dcbc:	2800      	cmp	r0, #0
 800dcbe:	f43f ae83 	beq.w	800d9c8 <_strtod_l+0x498>
 800dcc2:	f1b9 0f00 	cmp.w	r9, #0
 800dcc6:	dd08      	ble.n	800dcda <_strtod_l+0x7aa>
 800dcc8:	4631      	mov	r1, r6
 800dcca:	464a      	mov	r2, r9
 800dccc:	4620      	mov	r0, r4
 800dcce:	f002 fa3d 	bl	801014c <__lshift>
 800dcd2:	4606      	mov	r6, r0
 800dcd4:	2800      	cmp	r0, #0
 800dcd6:	f43f ae77 	beq.w	800d9c8 <_strtod_l+0x498>
 800dcda:	9a07      	ldr	r2, [sp, #28]
 800dcdc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800dcde:	4620      	mov	r0, r4
 800dce0:	f002 fabc 	bl	801025c <__mdiff>
 800dce4:	4605      	mov	r5, r0
 800dce6:	2800      	cmp	r0, #0
 800dce8:	f43f ae6e 	beq.w	800d9c8 <_strtod_l+0x498>
 800dcec:	68c3      	ldr	r3, [r0, #12]
 800dcee:	930f      	str	r3, [sp, #60]	; 0x3c
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	60c3      	str	r3, [r0, #12]
 800dcf4:	4631      	mov	r1, r6
 800dcf6:	f002 fa95 	bl	8010224 <__mcmp>
 800dcfa:	2800      	cmp	r0, #0
 800dcfc:	da65      	bge.n	800ddca <_strtod_l+0x89a>
 800dcfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dd00:	ea53 030a 	orrs.w	r3, r3, sl
 800dd04:	f040 8087 	bne.w	800de16 <_strtod_l+0x8e6>
 800dd08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	f040 8082 	bne.w	800de16 <_strtod_l+0x8e6>
 800dd12:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dd16:	0d1b      	lsrs	r3, r3, #20
 800dd18:	051b      	lsls	r3, r3, #20
 800dd1a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800dd1e:	d97a      	bls.n	800de16 <_strtod_l+0x8e6>
 800dd20:	696b      	ldr	r3, [r5, #20]
 800dd22:	b913      	cbnz	r3, 800dd2a <_strtod_l+0x7fa>
 800dd24:	692b      	ldr	r3, [r5, #16]
 800dd26:	2b01      	cmp	r3, #1
 800dd28:	dd75      	ble.n	800de16 <_strtod_l+0x8e6>
 800dd2a:	4629      	mov	r1, r5
 800dd2c:	2201      	movs	r2, #1
 800dd2e:	4620      	mov	r0, r4
 800dd30:	f002 fa0c 	bl	801014c <__lshift>
 800dd34:	4631      	mov	r1, r6
 800dd36:	4605      	mov	r5, r0
 800dd38:	f002 fa74 	bl	8010224 <__mcmp>
 800dd3c:	2800      	cmp	r0, #0
 800dd3e:	dd6a      	ble.n	800de16 <_strtod_l+0x8e6>
 800dd40:	9904      	ldr	r1, [sp, #16]
 800dd42:	4a55      	ldr	r2, [pc, #340]	; (800de98 <_strtod_l+0x968>)
 800dd44:	465b      	mov	r3, fp
 800dd46:	2900      	cmp	r1, #0
 800dd48:	f000 8085 	beq.w	800de56 <_strtod_l+0x926>
 800dd4c:	ea02 010b 	and.w	r1, r2, fp
 800dd50:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800dd54:	dc7f      	bgt.n	800de56 <_strtod_l+0x926>
 800dd56:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800dd5a:	f77f aeaa 	ble.w	800dab2 <_strtod_l+0x582>
 800dd5e:	4a4f      	ldr	r2, [pc, #316]	; (800de9c <_strtod_l+0x96c>)
 800dd60:	2300      	movs	r3, #0
 800dd62:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800dd66:	4650      	mov	r0, sl
 800dd68:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800dd6c:	4659      	mov	r1, fp
 800dd6e:	f7f2 fc53 	bl	8000618 <__aeabi_dmul>
 800dd72:	460b      	mov	r3, r1
 800dd74:	4303      	orrs	r3, r0
 800dd76:	bf08      	it	eq
 800dd78:	2322      	moveq	r3, #34	; 0x22
 800dd7a:	4682      	mov	sl, r0
 800dd7c:	468b      	mov	fp, r1
 800dd7e:	bf08      	it	eq
 800dd80:	6023      	streq	r3, [r4, #0]
 800dd82:	e62b      	b.n	800d9dc <_strtod_l+0x4ac>
 800dd84:	f04f 32ff 	mov.w	r2, #4294967295
 800dd88:	fa02 f303 	lsl.w	r3, r2, r3
 800dd8c:	ea03 0a0a 	and.w	sl, r3, sl
 800dd90:	e6de      	b.n	800db50 <_strtod_l+0x620>
 800dd92:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800dd96:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800dd9a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800dd9e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800dda2:	fa01 f308 	lsl.w	r3, r1, r8
 800dda6:	930c      	str	r3, [sp, #48]	; 0x30
 800dda8:	9111      	str	r1, [sp, #68]	; 0x44
 800ddaa:	e741      	b.n	800dc30 <_strtod_l+0x700>
 800ddac:	2300      	movs	r3, #0
 800ddae:	930c      	str	r3, [sp, #48]	; 0x30
 800ddb0:	2301      	movs	r3, #1
 800ddb2:	9311      	str	r3, [sp, #68]	; 0x44
 800ddb4:	e73c      	b.n	800dc30 <_strtod_l+0x700>
 800ddb6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ddb8:	4642      	mov	r2, r8
 800ddba:	4620      	mov	r0, r4
 800ddbc:	f002 f9c6 	bl	801014c <__lshift>
 800ddc0:	901e      	str	r0, [sp, #120]	; 0x78
 800ddc2:	2800      	cmp	r0, #0
 800ddc4:	f47f af66 	bne.w	800dc94 <_strtod_l+0x764>
 800ddc8:	e5fe      	b.n	800d9c8 <_strtod_l+0x498>
 800ddca:	465f      	mov	r7, fp
 800ddcc:	d16e      	bne.n	800deac <_strtod_l+0x97c>
 800ddce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ddd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ddd4:	b342      	cbz	r2, 800de28 <_strtod_l+0x8f8>
 800ddd6:	4a32      	ldr	r2, [pc, #200]	; (800dea0 <_strtod_l+0x970>)
 800ddd8:	4293      	cmp	r3, r2
 800ddda:	d128      	bne.n	800de2e <_strtod_l+0x8fe>
 800dddc:	9b04      	ldr	r3, [sp, #16]
 800ddde:	4650      	mov	r0, sl
 800dde0:	b1eb      	cbz	r3, 800de1e <_strtod_l+0x8ee>
 800dde2:	4a2d      	ldr	r2, [pc, #180]	; (800de98 <_strtod_l+0x968>)
 800dde4:	403a      	ands	r2, r7
 800dde6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ddea:	f04f 31ff 	mov.w	r1, #4294967295
 800ddee:	d819      	bhi.n	800de24 <_strtod_l+0x8f4>
 800ddf0:	0d12      	lsrs	r2, r2, #20
 800ddf2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ddf6:	fa01 f303 	lsl.w	r3, r1, r3
 800ddfa:	4298      	cmp	r0, r3
 800ddfc:	d117      	bne.n	800de2e <_strtod_l+0x8fe>
 800ddfe:	4b29      	ldr	r3, [pc, #164]	; (800dea4 <_strtod_l+0x974>)
 800de00:	429f      	cmp	r7, r3
 800de02:	d102      	bne.n	800de0a <_strtod_l+0x8da>
 800de04:	3001      	adds	r0, #1
 800de06:	f43f addf 	beq.w	800d9c8 <_strtod_l+0x498>
 800de0a:	4b23      	ldr	r3, [pc, #140]	; (800de98 <_strtod_l+0x968>)
 800de0c:	403b      	ands	r3, r7
 800de0e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800de12:	f04f 0a00 	mov.w	sl, #0
 800de16:	9b04      	ldr	r3, [sp, #16]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d1a0      	bne.n	800dd5e <_strtod_l+0x82e>
 800de1c:	e5de      	b.n	800d9dc <_strtod_l+0x4ac>
 800de1e:	f04f 33ff 	mov.w	r3, #4294967295
 800de22:	e7ea      	b.n	800ddfa <_strtod_l+0x8ca>
 800de24:	460b      	mov	r3, r1
 800de26:	e7e8      	b.n	800ddfa <_strtod_l+0x8ca>
 800de28:	ea53 030a 	orrs.w	r3, r3, sl
 800de2c:	d088      	beq.n	800dd40 <_strtod_l+0x810>
 800de2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800de30:	b1db      	cbz	r3, 800de6a <_strtod_l+0x93a>
 800de32:	423b      	tst	r3, r7
 800de34:	d0ef      	beq.n	800de16 <_strtod_l+0x8e6>
 800de36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de38:	9a04      	ldr	r2, [sp, #16]
 800de3a:	4650      	mov	r0, sl
 800de3c:	4659      	mov	r1, fp
 800de3e:	b1c3      	cbz	r3, 800de72 <_strtod_l+0x942>
 800de40:	f7ff fb59 	bl	800d4f6 <sulp>
 800de44:	4602      	mov	r2, r0
 800de46:	460b      	mov	r3, r1
 800de48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800de4c:	f7f2 fa2e 	bl	80002ac <__adddf3>
 800de50:	4682      	mov	sl, r0
 800de52:	468b      	mov	fp, r1
 800de54:	e7df      	b.n	800de16 <_strtod_l+0x8e6>
 800de56:	4013      	ands	r3, r2
 800de58:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800de5c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800de60:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800de64:	f04f 3aff 	mov.w	sl, #4294967295
 800de68:	e7d5      	b.n	800de16 <_strtod_l+0x8e6>
 800de6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800de6c:	ea13 0f0a 	tst.w	r3, sl
 800de70:	e7e0      	b.n	800de34 <_strtod_l+0x904>
 800de72:	f7ff fb40 	bl	800d4f6 <sulp>
 800de76:	4602      	mov	r2, r0
 800de78:	460b      	mov	r3, r1
 800de7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800de7e:	f7f2 fa13 	bl	80002a8 <__aeabi_dsub>
 800de82:	2200      	movs	r2, #0
 800de84:	2300      	movs	r3, #0
 800de86:	4682      	mov	sl, r0
 800de88:	468b      	mov	fp, r1
 800de8a:	f7f2 fe2d 	bl	8000ae8 <__aeabi_dcmpeq>
 800de8e:	2800      	cmp	r0, #0
 800de90:	d0c1      	beq.n	800de16 <_strtod_l+0x8e6>
 800de92:	e60e      	b.n	800dab2 <_strtod_l+0x582>
 800de94:	fffffc02 	.word	0xfffffc02
 800de98:	7ff00000 	.word	0x7ff00000
 800de9c:	39500000 	.word	0x39500000
 800dea0:	000fffff 	.word	0x000fffff
 800dea4:	7fefffff 	.word	0x7fefffff
 800dea8:	08011020 	.word	0x08011020
 800deac:	4631      	mov	r1, r6
 800deae:	4628      	mov	r0, r5
 800deb0:	f002 fb34 	bl	801051c <__ratio>
 800deb4:	ec59 8b10 	vmov	r8, r9, d0
 800deb8:	ee10 0a10 	vmov	r0, s0
 800debc:	2200      	movs	r2, #0
 800debe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dec2:	4649      	mov	r1, r9
 800dec4:	f7f2 fe24 	bl	8000b10 <__aeabi_dcmple>
 800dec8:	2800      	cmp	r0, #0
 800deca:	d07c      	beq.n	800dfc6 <_strtod_l+0xa96>
 800decc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d04c      	beq.n	800df6c <_strtod_l+0xa3c>
 800ded2:	4b95      	ldr	r3, [pc, #596]	; (800e128 <_strtod_l+0xbf8>)
 800ded4:	2200      	movs	r2, #0
 800ded6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800deda:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800e128 <_strtod_l+0xbf8>
 800dede:	f04f 0800 	mov.w	r8, #0
 800dee2:	4b92      	ldr	r3, [pc, #584]	; (800e12c <_strtod_l+0xbfc>)
 800dee4:	403b      	ands	r3, r7
 800dee6:	9311      	str	r3, [sp, #68]	; 0x44
 800dee8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800deea:	4b91      	ldr	r3, [pc, #580]	; (800e130 <_strtod_l+0xc00>)
 800deec:	429a      	cmp	r2, r3
 800deee:	f040 80b2 	bne.w	800e056 <_strtod_l+0xb26>
 800def2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800def6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800defa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800defe:	ec4b ab10 	vmov	d0, sl, fp
 800df02:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800df06:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800df0a:	f002 fa2f 	bl	801036c <__ulp>
 800df0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800df12:	ec53 2b10 	vmov	r2, r3, d0
 800df16:	f7f2 fb7f 	bl	8000618 <__aeabi_dmul>
 800df1a:	4652      	mov	r2, sl
 800df1c:	465b      	mov	r3, fp
 800df1e:	f7f2 f9c5 	bl	80002ac <__adddf3>
 800df22:	460b      	mov	r3, r1
 800df24:	4981      	ldr	r1, [pc, #516]	; (800e12c <_strtod_l+0xbfc>)
 800df26:	4a83      	ldr	r2, [pc, #524]	; (800e134 <_strtod_l+0xc04>)
 800df28:	4019      	ands	r1, r3
 800df2a:	4291      	cmp	r1, r2
 800df2c:	4682      	mov	sl, r0
 800df2e:	d95e      	bls.n	800dfee <_strtod_l+0xabe>
 800df30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df32:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800df36:	4293      	cmp	r3, r2
 800df38:	d103      	bne.n	800df42 <_strtod_l+0xa12>
 800df3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df3c:	3301      	adds	r3, #1
 800df3e:	f43f ad43 	beq.w	800d9c8 <_strtod_l+0x498>
 800df42:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800e140 <_strtod_l+0xc10>
 800df46:	f04f 3aff 	mov.w	sl, #4294967295
 800df4a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800df4c:	4620      	mov	r0, r4
 800df4e:	f001 fee1 	bl	800fd14 <_Bfree>
 800df52:	9907      	ldr	r1, [sp, #28]
 800df54:	4620      	mov	r0, r4
 800df56:	f001 fedd 	bl	800fd14 <_Bfree>
 800df5a:	4631      	mov	r1, r6
 800df5c:	4620      	mov	r0, r4
 800df5e:	f001 fed9 	bl	800fd14 <_Bfree>
 800df62:	4629      	mov	r1, r5
 800df64:	4620      	mov	r0, r4
 800df66:	f001 fed5 	bl	800fd14 <_Bfree>
 800df6a:	e613      	b.n	800db94 <_strtod_l+0x664>
 800df6c:	f1ba 0f00 	cmp.w	sl, #0
 800df70:	d11b      	bne.n	800dfaa <_strtod_l+0xa7a>
 800df72:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800df76:	b9f3      	cbnz	r3, 800dfb6 <_strtod_l+0xa86>
 800df78:	4b6b      	ldr	r3, [pc, #428]	; (800e128 <_strtod_l+0xbf8>)
 800df7a:	2200      	movs	r2, #0
 800df7c:	4640      	mov	r0, r8
 800df7e:	4649      	mov	r1, r9
 800df80:	f7f2 fdbc 	bl	8000afc <__aeabi_dcmplt>
 800df84:	b9d0      	cbnz	r0, 800dfbc <_strtod_l+0xa8c>
 800df86:	4640      	mov	r0, r8
 800df88:	4649      	mov	r1, r9
 800df8a:	4b6b      	ldr	r3, [pc, #428]	; (800e138 <_strtod_l+0xc08>)
 800df8c:	2200      	movs	r2, #0
 800df8e:	f7f2 fb43 	bl	8000618 <__aeabi_dmul>
 800df92:	4680      	mov	r8, r0
 800df94:	4689      	mov	r9, r1
 800df96:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800df9a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800df9e:	931b      	str	r3, [sp, #108]	; 0x6c
 800dfa0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800dfa4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800dfa8:	e79b      	b.n	800dee2 <_strtod_l+0x9b2>
 800dfaa:	f1ba 0f01 	cmp.w	sl, #1
 800dfae:	d102      	bne.n	800dfb6 <_strtod_l+0xa86>
 800dfb0:	2f00      	cmp	r7, #0
 800dfb2:	f43f ad7e 	beq.w	800dab2 <_strtod_l+0x582>
 800dfb6:	4b61      	ldr	r3, [pc, #388]	; (800e13c <_strtod_l+0xc0c>)
 800dfb8:	2200      	movs	r2, #0
 800dfba:	e78c      	b.n	800ded6 <_strtod_l+0x9a6>
 800dfbc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800e138 <_strtod_l+0xc08>
 800dfc0:	f04f 0800 	mov.w	r8, #0
 800dfc4:	e7e7      	b.n	800df96 <_strtod_l+0xa66>
 800dfc6:	4b5c      	ldr	r3, [pc, #368]	; (800e138 <_strtod_l+0xc08>)
 800dfc8:	4640      	mov	r0, r8
 800dfca:	4649      	mov	r1, r9
 800dfcc:	2200      	movs	r2, #0
 800dfce:	f7f2 fb23 	bl	8000618 <__aeabi_dmul>
 800dfd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dfd4:	4680      	mov	r8, r0
 800dfd6:	4689      	mov	r9, r1
 800dfd8:	b933      	cbnz	r3, 800dfe8 <_strtod_l+0xab8>
 800dfda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dfde:	9012      	str	r0, [sp, #72]	; 0x48
 800dfe0:	9313      	str	r3, [sp, #76]	; 0x4c
 800dfe2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800dfe6:	e7dd      	b.n	800dfa4 <_strtod_l+0xa74>
 800dfe8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800dfec:	e7f9      	b.n	800dfe2 <_strtod_l+0xab2>
 800dfee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800dff2:	9b04      	ldr	r3, [sp, #16]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d1a8      	bne.n	800df4a <_strtod_l+0xa1a>
 800dff8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dffc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800dffe:	0d1b      	lsrs	r3, r3, #20
 800e000:	051b      	lsls	r3, r3, #20
 800e002:	429a      	cmp	r2, r3
 800e004:	d1a1      	bne.n	800df4a <_strtod_l+0xa1a>
 800e006:	4640      	mov	r0, r8
 800e008:	4649      	mov	r1, r9
 800e00a:	f7f2 fe65 	bl	8000cd8 <__aeabi_d2lz>
 800e00e:	f7f2 fad5 	bl	80005bc <__aeabi_l2d>
 800e012:	4602      	mov	r2, r0
 800e014:	460b      	mov	r3, r1
 800e016:	4640      	mov	r0, r8
 800e018:	4649      	mov	r1, r9
 800e01a:	f7f2 f945 	bl	80002a8 <__aeabi_dsub>
 800e01e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e020:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e024:	ea43 030a 	orr.w	r3, r3, sl
 800e028:	4313      	orrs	r3, r2
 800e02a:	4680      	mov	r8, r0
 800e02c:	4689      	mov	r9, r1
 800e02e:	d053      	beq.n	800e0d8 <_strtod_l+0xba8>
 800e030:	a335      	add	r3, pc, #212	; (adr r3, 800e108 <_strtod_l+0xbd8>)
 800e032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e036:	f7f2 fd61 	bl	8000afc <__aeabi_dcmplt>
 800e03a:	2800      	cmp	r0, #0
 800e03c:	f47f acce 	bne.w	800d9dc <_strtod_l+0x4ac>
 800e040:	a333      	add	r3, pc, #204	; (adr r3, 800e110 <_strtod_l+0xbe0>)
 800e042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e046:	4640      	mov	r0, r8
 800e048:	4649      	mov	r1, r9
 800e04a:	f7f2 fd75 	bl	8000b38 <__aeabi_dcmpgt>
 800e04e:	2800      	cmp	r0, #0
 800e050:	f43f af7b 	beq.w	800df4a <_strtod_l+0xa1a>
 800e054:	e4c2      	b.n	800d9dc <_strtod_l+0x4ac>
 800e056:	9b04      	ldr	r3, [sp, #16]
 800e058:	b333      	cbz	r3, 800e0a8 <_strtod_l+0xb78>
 800e05a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e05c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e060:	d822      	bhi.n	800e0a8 <_strtod_l+0xb78>
 800e062:	a32d      	add	r3, pc, #180	; (adr r3, 800e118 <_strtod_l+0xbe8>)
 800e064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e068:	4640      	mov	r0, r8
 800e06a:	4649      	mov	r1, r9
 800e06c:	f7f2 fd50 	bl	8000b10 <__aeabi_dcmple>
 800e070:	b1a0      	cbz	r0, 800e09c <_strtod_l+0xb6c>
 800e072:	4649      	mov	r1, r9
 800e074:	4640      	mov	r0, r8
 800e076:	f7f2 fda7 	bl	8000bc8 <__aeabi_d2uiz>
 800e07a:	2801      	cmp	r0, #1
 800e07c:	bf38      	it	cc
 800e07e:	2001      	movcc	r0, #1
 800e080:	f7f2 fa50 	bl	8000524 <__aeabi_ui2d>
 800e084:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e086:	4680      	mov	r8, r0
 800e088:	4689      	mov	r9, r1
 800e08a:	bb13      	cbnz	r3, 800e0d2 <_strtod_l+0xba2>
 800e08c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e090:	9014      	str	r0, [sp, #80]	; 0x50
 800e092:	9315      	str	r3, [sp, #84]	; 0x54
 800e094:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800e098:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e09c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e09e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e0a0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e0a4:	1a9b      	subs	r3, r3, r2
 800e0a6:	930d      	str	r3, [sp, #52]	; 0x34
 800e0a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e0ac:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e0b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e0b4:	f002 f95a 	bl	801036c <__ulp>
 800e0b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e0bc:	ec53 2b10 	vmov	r2, r3, d0
 800e0c0:	f7f2 faaa 	bl	8000618 <__aeabi_dmul>
 800e0c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e0c8:	f7f2 f8f0 	bl	80002ac <__adddf3>
 800e0cc:	4682      	mov	sl, r0
 800e0ce:	468b      	mov	fp, r1
 800e0d0:	e78f      	b.n	800dff2 <_strtod_l+0xac2>
 800e0d2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800e0d6:	e7dd      	b.n	800e094 <_strtod_l+0xb64>
 800e0d8:	a311      	add	r3, pc, #68	; (adr r3, 800e120 <_strtod_l+0xbf0>)
 800e0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0de:	f7f2 fd0d 	bl	8000afc <__aeabi_dcmplt>
 800e0e2:	e7b4      	b.n	800e04e <_strtod_l+0xb1e>
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	930e      	str	r3, [sp, #56]	; 0x38
 800e0e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e0ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e0ec:	6013      	str	r3, [r2, #0]
 800e0ee:	f7ff ba65 	b.w	800d5bc <_strtod_l+0x8c>
 800e0f2:	2b65      	cmp	r3, #101	; 0x65
 800e0f4:	f43f ab5d 	beq.w	800d7b2 <_strtod_l+0x282>
 800e0f8:	2b45      	cmp	r3, #69	; 0x45
 800e0fa:	f43f ab5a 	beq.w	800d7b2 <_strtod_l+0x282>
 800e0fe:	2201      	movs	r2, #1
 800e100:	f7ff bb92 	b.w	800d828 <_strtod_l+0x2f8>
 800e104:	f3af 8000 	nop.w
 800e108:	94a03595 	.word	0x94a03595
 800e10c:	3fdfffff 	.word	0x3fdfffff
 800e110:	35afe535 	.word	0x35afe535
 800e114:	3fe00000 	.word	0x3fe00000
 800e118:	ffc00000 	.word	0xffc00000
 800e11c:	41dfffff 	.word	0x41dfffff
 800e120:	94a03595 	.word	0x94a03595
 800e124:	3fcfffff 	.word	0x3fcfffff
 800e128:	3ff00000 	.word	0x3ff00000
 800e12c:	7ff00000 	.word	0x7ff00000
 800e130:	7fe00000 	.word	0x7fe00000
 800e134:	7c9fffff 	.word	0x7c9fffff
 800e138:	3fe00000 	.word	0x3fe00000
 800e13c:	bff00000 	.word	0xbff00000
 800e140:	7fefffff 	.word	0x7fefffff

0800e144 <_strtod_r>:
 800e144:	4b01      	ldr	r3, [pc, #4]	; (800e14c <_strtod_r+0x8>)
 800e146:	f7ff b9f3 	b.w	800d530 <_strtod_l>
 800e14a:	bf00      	nop
 800e14c:	20000200 	.word	0x20000200

0800e150 <_strtol_l.isra.0>:
 800e150:	2b01      	cmp	r3, #1
 800e152:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e156:	d001      	beq.n	800e15c <_strtol_l.isra.0+0xc>
 800e158:	2b24      	cmp	r3, #36	; 0x24
 800e15a:	d906      	bls.n	800e16a <_strtol_l.isra.0+0x1a>
 800e15c:	f7fe f9d4 	bl	800c508 <__errno>
 800e160:	2316      	movs	r3, #22
 800e162:	6003      	str	r3, [r0, #0]
 800e164:	2000      	movs	r0, #0
 800e166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e16a:	4f3a      	ldr	r7, [pc, #232]	; (800e254 <_strtol_l.isra.0+0x104>)
 800e16c:	468e      	mov	lr, r1
 800e16e:	4676      	mov	r6, lr
 800e170:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800e174:	5de5      	ldrb	r5, [r4, r7]
 800e176:	f015 0508 	ands.w	r5, r5, #8
 800e17a:	d1f8      	bne.n	800e16e <_strtol_l.isra.0+0x1e>
 800e17c:	2c2d      	cmp	r4, #45	; 0x2d
 800e17e:	d134      	bne.n	800e1ea <_strtol_l.isra.0+0x9a>
 800e180:	f89e 4000 	ldrb.w	r4, [lr]
 800e184:	f04f 0801 	mov.w	r8, #1
 800e188:	f106 0e02 	add.w	lr, r6, #2
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d05c      	beq.n	800e24a <_strtol_l.isra.0+0xfa>
 800e190:	2b10      	cmp	r3, #16
 800e192:	d10c      	bne.n	800e1ae <_strtol_l.isra.0+0x5e>
 800e194:	2c30      	cmp	r4, #48	; 0x30
 800e196:	d10a      	bne.n	800e1ae <_strtol_l.isra.0+0x5e>
 800e198:	f89e 4000 	ldrb.w	r4, [lr]
 800e19c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e1a0:	2c58      	cmp	r4, #88	; 0x58
 800e1a2:	d14d      	bne.n	800e240 <_strtol_l.isra.0+0xf0>
 800e1a4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800e1a8:	2310      	movs	r3, #16
 800e1aa:	f10e 0e02 	add.w	lr, lr, #2
 800e1ae:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800e1b2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e1b6:	2600      	movs	r6, #0
 800e1b8:	fbbc f9f3 	udiv	r9, ip, r3
 800e1bc:	4635      	mov	r5, r6
 800e1be:	fb03 ca19 	mls	sl, r3, r9, ip
 800e1c2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800e1c6:	2f09      	cmp	r7, #9
 800e1c8:	d818      	bhi.n	800e1fc <_strtol_l.isra.0+0xac>
 800e1ca:	463c      	mov	r4, r7
 800e1cc:	42a3      	cmp	r3, r4
 800e1ce:	dd24      	ble.n	800e21a <_strtol_l.isra.0+0xca>
 800e1d0:	2e00      	cmp	r6, #0
 800e1d2:	db1f      	blt.n	800e214 <_strtol_l.isra.0+0xc4>
 800e1d4:	45a9      	cmp	r9, r5
 800e1d6:	d31d      	bcc.n	800e214 <_strtol_l.isra.0+0xc4>
 800e1d8:	d101      	bne.n	800e1de <_strtol_l.isra.0+0x8e>
 800e1da:	45a2      	cmp	sl, r4
 800e1dc:	db1a      	blt.n	800e214 <_strtol_l.isra.0+0xc4>
 800e1de:	fb05 4503 	mla	r5, r5, r3, r4
 800e1e2:	2601      	movs	r6, #1
 800e1e4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800e1e8:	e7eb      	b.n	800e1c2 <_strtol_l.isra.0+0x72>
 800e1ea:	2c2b      	cmp	r4, #43	; 0x2b
 800e1ec:	bf08      	it	eq
 800e1ee:	f89e 4000 	ldrbeq.w	r4, [lr]
 800e1f2:	46a8      	mov	r8, r5
 800e1f4:	bf08      	it	eq
 800e1f6:	f106 0e02 	addeq.w	lr, r6, #2
 800e1fa:	e7c7      	b.n	800e18c <_strtol_l.isra.0+0x3c>
 800e1fc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800e200:	2f19      	cmp	r7, #25
 800e202:	d801      	bhi.n	800e208 <_strtol_l.isra.0+0xb8>
 800e204:	3c37      	subs	r4, #55	; 0x37
 800e206:	e7e1      	b.n	800e1cc <_strtol_l.isra.0+0x7c>
 800e208:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800e20c:	2f19      	cmp	r7, #25
 800e20e:	d804      	bhi.n	800e21a <_strtol_l.isra.0+0xca>
 800e210:	3c57      	subs	r4, #87	; 0x57
 800e212:	e7db      	b.n	800e1cc <_strtol_l.isra.0+0x7c>
 800e214:	f04f 36ff 	mov.w	r6, #4294967295
 800e218:	e7e4      	b.n	800e1e4 <_strtol_l.isra.0+0x94>
 800e21a:	2e00      	cmp	r6, #0
 800e21c:	da05      	bge.n	800e22a <_strtol_l.isra.0+0xda>
 800e21e:	2322      	movs	r3, #34	; 0x22
 800e220:	6003      	str	r3, [r0, #0]
 800e222:	4665      	mov	r5, ip
 800e224:	b942      	cbnz	r2, 800e238 <_strtol_l.isra.0+0xe8>
 800e226:	4628      	mov	r0, r5
 800e228:	e79d      	b.n	800e166 <_strtol_l.isra.0+0x16>
 800e22a:	f1b8 0f00 	cmp.w	r8, #0
 800e22e:	d000      	beq.n	800e232 <_strtol_l.isra.0+0xe2>
 800e230:	426d      	negs	r5, r5
 800e232:	2a00      	cmp	r2, #0
 800e234:	d0f7      	beq.n	800e226 <_strtol_l.isra.0+0xd6>
 800e236:	b10e      	cbz	r6, 800e23c <_strtol_l.isra.0+0xec>
 800e238:	f10e 31ff 	add.w	r1, lr, #4294967295
 800e23c:	6011      	str	r1, [r2, #0]
 800e23e:	e7f2      	b.n	800e226 <_strtol_l.isra.0+0xd6>
 800e240:	2430      	movs	r4, #48	; 0x30
 800e242:	2b00      	cmp	r3, #0
 800e244:	d1b3      	bne.n	800e1ae <_strtol_l.isra.0+0x5e>
 800e246:	2308      	movs	r3, #8
 800e248:	e7b1      	b.n	800e1ae <_strtol_l.isra.0+0x5e>
 800e24a:	2c30      	cmp	r4, #48	; 0x30
 800e24c:	d0a4      	beq.n	800e198 <_strtol_l.isra.0+0x48>
 800e24e:	230a      	movs	r3, #10
 800e250:	e7ad      	b.n	800e1ae <_strtol_l.isra.0+0x5e>
 800e252:	bf00      	nop
 800e254:	08010eb5 	.word	0x08010eb5

0800e258 <_strtol_r>:
 800e258:	f7ff bf7a 	b.w	800e150 <_strtol_l.isra.0>

0800e25c <__swbuf_r>:
 800e25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e25e:	460e      	mov	r6, r1
 800e260:	4614      	mov	r4, r2
 800e262:	4605      	mov	r5, r0
 800e264:	b118      	cbz	r0, 800e26e <__swbuf_r+0x12>
 800e266:	6983      	ldr	r3, [r0, #24]
 800e268:	b90b      	cbnz	r3, 800e26e <__swbuf_r+0x12>
 800e26a:	f001 f86b 	bl	800f344 <__sinit>
 800e26e:	4b21      	ldr	r3, [pc, #132]	; (800e2f4 <__swbuf_r+0x98>)
 800e270:	429c      	cmp	r4, r3
 800e272:	d12b      	bne.n	800e2cc <__swbuf_r+0x70>
 800e274:	686c      	ldr	r4, [r5, #4]
 800e276:	69a3      	ldr	r3, [r4, #24]
 800e278:	60a3      	str	r3, [r4, #8]
 800e27a:	89a3      	ldrh	r3, [r4, #12]
 800e27c:	071a      	lsls	r2, r3, #28
 800e27e:	d52f      	bpl.n	800e2e0 <__swbuf_r+0x84>
 800e280:	6923      	ldr	r3, [r4, #16]
 800e282:	b36b      	cbz	r3, 800e2e0 <__swbuf_r+0x84>
 800e284:	6923      	ldr	r3, [r4, #16]
 800e286:	6820      	ldr	r0, [r4, #0]
 800e288:	1ac0      	subs	r0, r0, r3
 800e28a:	6963      	ldr	r3, [r4, #20]
 800e28c:	b2f6      	uxtb	r6, r6
 800e28e:	4283      	cmp	r3, r0
 800e290:	4637      	mov	r7, r6
 800e292:	dc04      	bgt.n	800e29e <__swbuf_r+0x42>
 800e294:	4621      	mov	r1, r4
 800e296:	4628      	mov	r0, r5
 800e298:	f000 ffc0 	bl	800f21c <_fflush_r>
 800e29c:	bb30      	cbnz	r0, 800e2ec <__swbuf_r+0x90>
 800e29e:	68a3      	ldr	r3, [r4, #8]
 800e2a0:	3b01      	subs	r3, #1
 800e2a2:	60a3      	str	r3, [r4, #8]
 800e2a4:	6823      	ldr	r3, [r4, #0]
 800e2a6:	1c5a      	adds	r2, r3, #1
 800e2a8:	6022      	str	r2, [r4, #0]
 800e2aa:	701e      	strb	r6, [r3, #0]
 800e2ac:	6963      	ldr	r3, [r4, #20]
 800e2ae:	3001      	adds	r0, #1
 800e2b0:	4283      	cmp	r3, r0
 800e2b2:	d004      	beq.n	800e2be <__swbuf_r+0x62>
 800e2b4:	89a3      	ldrh	r3, [r4, #12]
 800e2b6:	07db      	lsls	r3, r3, #31
 800e2b8:	d506      	bpl.n	800e2c8 <__swbuf_r+0x6c>
 800e2ba:	2e0a      	cmp	r6, #10
 800e2bc:	d104      	bne.n	800e2c8 <__swbuf_r+0x6c>
 800e2be:	4621      	mov	r1, r4
 800e2c0:	4628      	mov	r0, r5
 800e2c2:	f000 ffab 	bl	800f21c <_fflush_r>
 800e2c6:	b988      	cbnz	r0, 800e2ec <__swbuf_r+0x90>
 800e2c8:	4638      	mov	r0, r7
 800e2ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2cc:	4b0a      	ldr	r3, [pc, #40]	; (800e2f8 <__swbuf_r+0x9c>)
 800e2ce:	429c      	cmp	r4, r3
 800e2d0:	d101      	bne.n	800e2d6 <__swbuf_r+0x7a>
 800e2d2:	68ac      	ldr	r4, [r5, #8]
 800e2d4:	e7cf      	b.n	800e276 <__swbuf_r+0x1a>
 800e2d6:	4b09      	ldr	r3, [pc, #36]	; (800e2fc <__swbuf_r+0xa0>)
 800e2d8:	429c      	cmp	r4, r3
 800e2da:	bf08      	it	eq
 800e2dc:	68ec      	ldreq	r4, [r5, #12]
 800e2de:	e7ca      	b.n	800e276 <__swbuf_r+0x1a>
 800e2e0:	4621      	mov	r1, r4
 800e2e2:	4628      	mov	r0, r5
 800e2e4:	f000 f81e 	bl	800e324 <__swsetup_r>
 800e2e8:	2800      	cmp	r0, #0
 800e2ea:	d0cb      	beq.n	800e284 <__swbuf_r+0x28>
 800e2ec:	f04f 37ff 	mov.w	r7, #4294967295
 800e2f0:	e7ea      	b.n	800e2c8 <__swbuf_r+0x6c>
 800e2f2:	bf00      	nop
 800e2f4:	080110fc 	.word	0x080110fc
 800e2f8:	0801111c 	.word	0x0801111c
 800e2fc:	080110dc 	.word	0x080110dc

0800e300 <_write_r>:
 800e300:	b538      	push	{r3, r4, r5, lr}
 800e302:	4d07      	ldr	r5, [pc, #28]	; (800e320 <_write_r+0x20>)
 800e304:	4604      	mov	r4, r0
 800e306:	4608      	mov	r0, r1
 800e308:	4611      	mov	r1, r2
 800e30a:	2200      	movs	r2, #0
 800e30c:	602a      	str	r2, [r5, #0]
 800e30e:	461a      	mov	r2, r3
 800e310:	f7f4 fb2d 	bl	800296e <_write>
 800e314:	1c43      	adds	r3, r0, #1
 800e316:	d102      	bne.n	800e31e <_write_r+0x1e>
 800e318:	682b      	ldr	r3, [r5, #0]
 800e31a:	b103      	cbz	r3, 800e31e <_write_r+0x1e>
 800e31c:	6023      	str	r3, [r4, #0]
 800e31e:	bd38      	pop	{r3, r4, r5, pc}
 800e320:	20002d04 	.word	0x20002d04

0800e324 <__swsetup_r>:
 800e324:	4b32      	ldr	r3, [pc, #200]	; (800e3f0 <__swsetup_r+0xcc>)
 800e326:	b570      	push	{r4, r5, r6, lr}
 800e328:	681d      	ldr	r5, [r3, #0]
 800e32a:	4606      	mov	r6, r0
 800e32c:	460c      	mov	r4, r1
 800e32e:	b125      	cbz	r5, 800e33a <__swsetup_r+0x16>
 800e330:	69ab      	ldr	r3, [r5, #24]
 800e332:	b913      	cbnz	r3, 800e33a <__swsetup_r+0x16>
 800e334:	4628      	mov	r0, r5
 800e336:	f001 f805 	bl	800f344 <__sinit>
 800e33a:	4b2e      	ldr	r3, [pc, #184]	; (800e3f4 <__swsetup_r+0xd0>)
 800e33c:	429c      	cmp	r4, r3
 800e33e:	d10f      	bne.n	800e360 <__swsetup_r+0x3c>
 800e340:	686c      	ldr	r4, [r5, #4]
 800e342:	89a3      	ldrh	r3, [r4, #12]
 800e344:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e348:	0719      	lsls	r1, r3, #28
 800e34a:	d42c      	bmi.n	800e3a6 <__swsetup_r+0x82>
 800e34c:	06dd      	lsls	r5, r3, #27
 800e34e:	d411      	bmi.n	800e374 <__swsetup_r+0x50>
 800e350:	2309      	movs	r3, #9
 800e352:	6033      	str	r3, [r6, #0]
 800e354:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e358:	81a3      	strh	r3, [r4, #12]
 800e35a:	f04f 30ff 	mov.w	r0, #4294967295
 800e35e:	e03e      	b.n	800e3de <__swsetup_r+0xba>
 800e360:	4b25      	ldr	r3, [pc, #148]	; (800e3f8 <__swsetup_r+0xd4>)
 800e362:	429c      	cmp	r4, r3
 800e364:	d101      	bne.n	800e36a <__swsetup_r+0x46>
 800e366:	68ac      	ldr	r4, [r5, #8]
 800e368:	e7eb      	b.n	800e342 <__swsetup_r+0x1e>
 800e36a:	4b24      	ldr	r3, [pc, #144]	; (800e3fc <__swsetup_r+0xd8>)
 800e36c:	429c      	cmp	r4, r3
 800e36e:	bf08      	it	eq
 800e370:	68ec      	ldreq	r4, [r5, #12]
 800e372:	e7e6      	b.n	800e342 <__swsetup_r+0x1e>
 800e374:	0758      	lsls	r0, r3, #29
 800e376:	d512      	bpl.n	800e39e <__swsetup_r+0x7a>
 800e378:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e37a:	b141      	cbz	r1, 800e38e <__swsetup_r+0x6a>
 800e37c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e380:	4299      	cmp	r1, r3
 800e382:	d002      	beq.n	800e38a <__swsetup_r+0x66>
 800e384:	4630      	mov	r0, r6
 800e386:	f7fe f907 	bl	800c598 <_free_r>
 800e38a:	2300      	movs	r3, #0
 800e38c:	6363      	str	r3, [r4, #52]	; 0x34
 800e38e:	89a3      	ldrh	r3, [r4, #12]
 800e390:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e394:	81a3      	strh	r3, [r4, #12]
 800e396:	2300      	movs	r3, #0
 800e398:	6063      	str	r3, [r4, #4]
 800e39a:	6923      	ldr	r3, [r4, #16]
 800e39c:	6023      	str	r3, [r4, #0]
 800e39e:	89a3      	ldrh	r3, [r4, #12]
 800e3a0:	f043 0308 	orr.w	r3, r3, #8
 800e3a4:	81a3      	strh	r3, [r4, #12]
 800e3a6:	6923      	ldr	r3, [r4, #16]
 800e3a8:	b94b      	cbnz	r3, 800e3be <__swsetup_r+0x9a>
 800e3aa:	89a3      	ldrh	r3, [r4, #12]
 800e3ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e3b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3b4:	d003      	beq.n	800e3be <__swsetup_r+0x9a>
 800e3b6:	4621      	mov	r1, r4
 800e3b8:	4630      	mov	r0, r6
 800e3ba:	f001 fc0d 	bl	800fbd8 <__smakebuf_r>
 800e3be:	89a0      	ldrh	r0, [r4, #12]
 800e3c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e3c4:	f010 0301 	ands.w	r3, r0, #1
 800e3c8:	d00a      	beq.n	800e3e0 <__swsetup_r+0xbc>
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	60a3      	str	r3, [r4, #8]
 800e3ce:	6963      	ldr	r3, [r4, #20]
 800e3d0:	425b      	negs	r3, r3
 800e3d2:	61a3      	str	r3, [r4, #24]
 800e3d4:	6923      	ldr	r3, [r4, #16]
 800e3d6:	b943      	cbnz	r3, 800e3ea <__swsetup_r+0xc6>
 800e3d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e3dc:	d1ba      	bne.n	800e354 <__swsetup_r+0x30>
 800e3de:	bd70      	pop	{r4, r5, r6, pc}
 800e3e0:	0781      	lsls	r1, r0, #30
 800e3e2:	bf58      	it	pl
 800e3e4:	6963      	ldrpl	r3, [r4, #20]
 800e3e6:	60a3      	str	r3, [r4, #8]
 800e3e8:	e7f4      	b.n	800e3d4 <__swsetup_r+0xb0>
 800e3ea:	2000      	movs	r0, #0
 800e3ec:	e7f7      	b.n	800e3de <__swsetup_r+0xba>
 800e3ee:	bf00      	nop
 800e3f0:	20000198 	.word	0x20000198
 800e3f4:	080110fc 	.word	0x080110fc
 800e3f8:	0801111c 	.word	0x0801111c
 800e3fc:	080110dc 	.word	0x080110dc

0800e400 <_close_r>:
 800e400:	b538      	push	{r3, r4, r5, lr}
 800e402:	4d06      	ldr	r5, [pc, #24]	; (800e41c <_close_r+0x1c>)
 800e404:	2300      	movs	r3, #0
 800e406:	4604      	mov	r4, r0
 800e408:	4608      	mov	r0, r1
 800e40a:	602b      	str	r3, [r5, #0]
 800e40c:	f7f4 facb 	bl	80029a6 <_close>
 800e410:	1c43      	adds	r3, r0, #1
 800e412:	d102      	bne.n	800e41a <_close_r+0x1a>
 800e414:	682b      	ldr	r3, [r5, #0]
 800e416:	b103      	cbz	r3, 800e41a <_close_r+0x1a>
 800e418:	6023      	str	r3, [r4, #0]
 800e41a:	bd38      	pop	{r3, r4, r5, pc}
 800e41c:	20002d04 	.word	0x20002d04

0800e420 <quorem>:
 800e420:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e424:	6903      	ldr	r3, [r0, #16]
 800e426:	690c      	ldr	r4, [r1, #16]
 800e428:	42a3      	cmp	r3, r4
 800e42a:	4607      	mov	r7, r0
 800e42c:	f2c0 8081 	blt.w	800e532 <quorem+0x112>
 800e430:	3c01      	subs	r4, #1
 800e432:	f101 0814 	add.w	r8, r1, #20
 800e436:	f100 0514 	add.w	r5, r0, #20
 800e43a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e43e:	9301      	str	r3, [sp, #4]
 800e440:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e444:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e448:	3301      	adds	r3, #1
 800e44a:	429a      	cmp	r2, r3
 800e44c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e450:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e454:	fbb2 f6f3 	udiv	r6, r2, r3
 800e458:	d331      	bcc.n	800e4be <quorem+0x9e>
 800e45a:	f04f 0e00 	mov.w	lr, #0
 800e45e:	4640      	mov	r0, r8
 800e460:	46ac      	mov	ip, r5
 800e462:	46f2      	mov	sl, lr
 800e464:	f850 2b04 	ldr.w	r2, [r0], #4
 800e468:	b293      	uxth	r3, r2
 800e46a:	fb06 e303 	mla	r3, r6, r3, lr
 800e46e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e472:	b29b      	uxth	r3, r3
 800e474:	ebaa 0303 	sub.w	r3, sl, r3
 800e478:	0c12      	lsrs	r2, r2, #16
 800e47a:	f8dc a000 	ldr.w	sl, [ip]
 800e47e:	fb06 e202 	mla	r2, r6, r2, lr
 800e482:	fa13 f38a 	uxtah	r3, r3, sl
 800e486:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e48a:	fa1f fa82 	uxth.w	sl, r2
 800e48e:	f8dc 2000 	ldr.w	r2, [ip]
 800e492:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800e496:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e49a:	b29b      	uxth	r3, r3
 800e49c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e4a0:	4581      	cmp	r9, r0
 800e4a2:	f84c 3b04 	str.w	r3, [ip], #4
 800e4a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e4aa:	d2db      	bcs.n	800e464 <quorem+0x44>
 800e4ac:	f855 300b 	ldr.w	r3, [r5, fp]
 800e4b0:	b92b      	cbnz	r3, 800e4be <quorem+0x9e>
 800e4b2:	9b01      	ldr	r3, [sp, #4]
 800e4b4:	3b04      	subs	r3, #4
 800e4b6:	429d      	cmp	r5, r3
 800e4b8:	461a      	mov	r2, r3
 800e4ba:	d32e      	bcc.n	800e51a <quorem+0xfa>
 800e4bc:	613c      	str	r4, [r7, #16]
 800e4be:	4638      	mov	r0, r7
 800e4c0:	f001 feb0 	bl	8010224 <__mcmp>
 800e4c4:	2800      	cmp	r0, #0
 800e4c6:	db24      	blt.n	800e512 <quorem+0xf2>
 800e4c8:	3601      	adds	r6, #1
 800e4ca:	4628      	mov	r0, r5
 800e4cc:	f04f 0c00 	mov.w	ip, #0
 800e4d0:	f858 2b04 	ldr.w	r2, [r8], #4
 800e4d4:	f8d0 e000 	ldr.w	lr, [r0]
 800e4d8:	b293      	uxth	r3, r2
 800e4da:	ebac 0303 	sub.w	r3, ip, r3
 800e4de:	0c12      	lsrs	r2, r2, #16
 800e4e0:	fa13 f38e 	uxtah	r3, r3, lr
 800e4e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e4e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e4ec:	b29b      	uxth	r3, r3
 800e4ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e4f2:	45c1      	cmp	r9, r8
 800e4f4:	f840 3b04 	str.w	r3, [r0], #4
 800e4f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e4fc:	d2e8      	bcs.n	800e4d0 <quorem+0xb0>
 800e4fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e502:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e506:	b922      	cbnz	r2, 800e512 <quorem+0xf2>
 800e508:	3b04      	subs	r3, #4
 800e50a:	429d      	cmp	r5, r3
 800e50c:	461a      	mov	r2, r3
 800e50e:	d30a      	bcc.n	800e526 <quorem+0x106>
 800e510:	613c      	str	r4, [r7, #16]
 800e512:	4630      	mov	r0, r6
 800e514:	b003      	add	sp, #12
 800e516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e51a:	6812      	ldr	r2, [r2, #0]
 800e51c:	3b04      	subs	r3, #4
 800e51e:	2a00      	cmp	r2, #0
 800e520:	d1cc      	bne.n	800e4bc <quorem+0x9c>
 800e522:	3c01      	subs	r4, #1
 800e524:	e7c7      	b.n	800e4b6 <quorem+0x96>
 800e526:	6812      	ldr	r2, [r2, #0]
 800e528:	3b04      	subs	r3, #4
 800e52a:	2a00      	cmp	r2, #0
 800e52c:	d1f0      	bne.n	800e510 <quorem+0xf0>
 800e52e:	3c01      	subs	r4, #1
 800e530:	e7eb      	b.n	800e50a <quorem+0xea>
 800e532:	2000      	movs	r0, #0
 800e534:	e7ee      	b.n	800e514 <quorem+0xf4>
	...

0800e538 <_dtoa_r>:
 800e538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e53c:	ed2d 8b02 	vpush	{d8}
 800e540:	ec57 6b10 	vmov	r6, r7, d0
 800e544:	b095      	sub	sp, #84	; 0x54
 800e546:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e548:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e54c:	9105      	str	r1, [sp, #20]
 800e54e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800e552:	4604      	mov	r4, r0
 800e554:	9209      	str	r2, [sp, #36]	; 0x24
 800e556:	930f      	str	r3, [sp, #60]	; 0x3c
 800e558:	b975      	cbnz	r5, 800e578 <_dtoa_r+0x40>
 800e55a:	2010      	movs	r0, #16
 800e55c:	f7fd fffe 	bl	800c55c <malloc>
 800e560:	4602      	mov	r2, r0
 800e562:	6260      	str	r0, [r4, #36]	; 0x24
 800e564:	b920      	cbnz	r0, 800e570 <_dtoa_r+0x38>
 800e566:	4bb2      	ldr	r3, [pc, #712]	; (800e830 <_dtoa_r+0x2f8>)
 800e568:	21ea      	movs	r1, #234	; 0xea
 800e56a:	48b2      	ldr	r0, [pc, #712]	; (800e834 <_dtoa_r+0x2fc>)
 800e56c:	f002 fb3a 	bl	8010be4 <__assert_func>
 800e570:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e574:	6005      	str	r5, [r0, #0]
 800e576:	60c5      	str	r5, [r0, #12]
 800e578:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e57a:	6819      	ldr	r1, [r3, #0]
 800e57c:	b151      	cbz	r1, 800e594 <_dtoa_r+0x5c>
 800e57e:	685a      	ldr	r2, [r3, #4]
 800e580:	604a      	str	r2, [r1, #4]
 800e582:	2301      	movs	r3, #1
 800e584:	4093      	lsls	r3, r2
 800e586:	608b      	str	r3, [r1, #8]
 800e588:	4620      	mov	r0, r4
 800e58a:	f001 fbc3 	bl	800fd14 <_Bfree>
 800e58e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e590:	2200      	movs	r2, #0
 800e592:	601a      	str	r2, [r3, #0]
 800e594:	1e3b      	subs	r3, r7, #0
 800e596:	bfb9      	ittee	lt
 800e598:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e59c:	9303      	strlt	r3, [sp, #12]
 800e59e:	2300      	movge	r3, #0
 800e5a0:	f8c8 3000 	strge.w	r3, [r8]
 800e5a4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e5a8:	4ba3      	ldr	r3, [pc, #652]	; (800e838 <_dtoa_r+0x300>)
 800e5aa:	bfbc      	itt	lt
 800e5ac:	2201      	movlt	r2, #1
 800e5ae:	f8c8 2000 	strlt.w	r2, [r8]
 800e5b2:	ea33 0309 	bics.w	r3, r3, r9
 800e5b6:	d11b      	bne.n	800e5f0 <_dtoa_r+0xb8>
 800e5b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e5ba:	f242 730f 	movw	r3, #9999	; 0x270f
 800e5be:	6013      	str	r3, [r2, #0]
 800e5c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e5c4:	4333      	orrs	r3, r6
 800e5c6:	f000 857a 	beq.w	800f0be <_dtoa_r+0xb86>
 800e5ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e5cc:	b963      	cbnz	r3, 800e5e8 <_dtoa_r+0xb0>
 800e5ce:	4b9b      	ldr	r3, [pc, #620]	; (800e83c <_dtoa_r+0x304>)
 800e5d0:	e024      	b.n	800e61c <_dtoa_r+0xe4>
 800e5d2:	4b9b      	ldr	r3, [pc, #620]	; (800e840 <_dtoa_r+0x308>)
 800e5d4:	9300      	str	r3, [sp, #0]
 800e5d6:	3308      	adds	r3, #8
 800e5d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e5da:	6013      	str	r3, [r2, #0]
 800e5dc:	9800      	ldr	r0, [sp, #0]
 800e5de:	b015      	add	sp, #84	; 0x54
 800e5e0:	ecbd 8b02 	vpop	{d8}
 800e5e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5e8:	4b94      	ldr	r3, [pc, #592]	; (800e83c <_dtoa_r+0x304>)
 800e5ea:	9300      	str	r3, [sp, #0]
 800e5ec:	3303      	adds	r3, #3
 800e5ee:	e7f3      	b.n	800e5d8 <_dtoa_r+0xa0>
 800e5f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	ec51 0b17 	vmov	r0, r1, d7
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800e600:	f7f2 fa72 	bl	8000ae8 <__aeabi_dcmpeq>
 800e604:	4680      	mov	r8, r0
 800e606:	b158      	cbz	r0, 800e620 <_dtoa_r+0xe8>
 800e608:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e60a:	2301      	movs	r3, #1
 800e60c:	6013      	str	r3, [r2, #0]
 800e60e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e610:	2b00      	cmp	r3, #0
 800e612:	f000 8551 	beq.w	800f0b8 <_dtoa_r+0xb80>
 800e616:	488b      	ldr	r0, [pc, #556]	; (800e844 <_dtoa_r+0x30c>)
 800e618:	6018      	str	r0, [r3, #0]
 800e61a:	1e43      	subs	r3, r0, #1
 800e61c:	9300      	str	r3, [sp, #0]
 800e61e:	e7dd      	b.n	800e5dc <_dtoa_r+0xa4>
 800e620:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e624:	aa12      	add	r2, sp, #72	; 0x48
 800e626:	a913      	add	r1, sp, #76	; 0x4c
 800e628:	4620      	mov	r0, r4
 800e62a:	f001 ff1b 	bl	8010464 <__d2b>
 800e62e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e632:	4683      	mov	fp, r0
 800e634:	2d00      	cmp	r5, #0
 800e636:	d07c      	beq.n	800e732 <_dtoa_r+0x1fa>
 800e638:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e63a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800e63e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e642:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800e646:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e64a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e64e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e652:	4b7d      	ldr	r3, [pc, #500]	; (800e848 <_dtoa_r+0x310>)
 800e654:	2200      	movs	r2, #0
 800e656:	4630      	mov	r0, r6
 800e658:	4639      	mov	r1, r7
 800e65a:	f7f1 fe25 	bl	80002a8 <__aeabi_dsub>
 800e65e:	a36e      	add	r3, pc, #440	; (adr r3, 800e818 <_dtoa_r+0x2e0>)
 800e660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e664:	f7f1 ffd8 	bl	8000618 <__aeabi_dmul>
 800e668:	a36d      	add	r3, pc, #436	; (adr r3, 800e820 <_dtoa_r+0x2e8>)
 800e66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e66e:	f7f1 fe1d 	bl	80002ac <__adddf3>
 800e672:	4606      	mov	r6, r0
 800e674:	4628      	mov	r0, r5
 800e676:	460f      	mov	r7, r1
 800e678:	f7f1 ff64 	bl	8000544 <__aeabi_i2d>
 800e67c:	a36a      	add	r3, pc, #424	; (adr r3, 800e828 <_dtoa_r+0x2f0>)
 800e67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e682:	f7f1 ffc9 	bl	8000618 <__aeabi_dmul>
 800e686:	4602      	mov	r2, r0
 800e688:	460b      	mov	r3, r1
 800e68a:	4630      	mov	r0, r6
 800e68c:	4639      	mov	r1, r7
 800e68e:	f7f1 fe0d 	bl	80002ac <__adddf3>
 800e692:	4606      	mov	r6, r0
 800e694:	460f      	mov	r7, r1
 800e696:	f7f2 fa6f 	bl	8000b78 <__aeabi_d2iz>
 800e69a:	2200      	movs	r2, #0
 800e69c:	4682      	mov	sl, r0
 800e69e:	2300      	movs	r3, #0
 800e6a0:	4630      	mov	r0, r6
 800e6a2:	4639      	mov	r1, r7
 800e6a4:	f7f2 fa2a 	bl	8000afc <__aeabi_dcmplt>
 800e6a8:	b148      	cbz	r0, 800e6be <_dtoa_r+0x186>
 800e6aa:	4650      	mov	r0, sl
 800e6ac:	f7f1 ff4a 	bl	8000544 <__aeabi_i2d>
 800e6b0:	4632      	mov	r2, r6
 800e6b2:	463b      	mov	r3, r7
 800e6b4:	f7f2 fa18 	bl	8000ae8 <__aeabi_dcmpeq>
 800e6b8:	b908      	cbnz	r0, 800e6be <_dtoa_r+0x186>
 800e6ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e6be:	f1ba 0f16 	cmp.w	sl, #22
 800e6c2:	d854      	bhi.n	800e76e <_dtoa_r+0x236>
 800e6c4:	4b61      	ldr	r3, [pc, #388]	; (800e84c <_dtoa_r+0x314>)
 800e6c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e6d2:	f7f2 fa13 	bl	8000afc <__aeabi_dcmplt>
 800e6d6:	2800      	cmp	r0, #0
 800e6d8:	d04b      	beq.n	800e772 <_dtoa_r+0x23a>
 800e6da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e6de:	2300      	movs	r3, #0
 800e6e0:	930e      	str	r3, [sp, #56]	; 0x38
 800e6e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e6e4:	1b5d      	subs	r5, r3, r5
 800e6e6:	1e6b      	subs	r3, r5, #1
 800e6e8:	9304      	str	r3, [sp, #16]
 800e6ea:	bf43      	ittte	mi
 800e6ec:	2300      	movmi	r3, #0
 800e6ee:	f1c5 0801 	rsbmi	r8, r5, #1
 800e6f2:	9304      	strmi	r3, [sp, #16]
 800e6f4:	f04f 0800 	movpl.w	r8, #0
 800e6f8:	f1ba 0f00 	cmp.w	sl, #0
 800e6fc:	db3b      	blt.n	800e776 <_dtoa_r+0x23e>
 800e6fe:	9b04      	ldr	r3, [sp, #16]
 800e700:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800e704:	4453      	add	r3, sl
 800e706:	9304      	str	r3, [sp, #16]
 800e708:	2300      	movs	r3, #0
 800e70a:	9306      	str	r3, [sp, #24]
 800e70c:	9b05      	ldr	r3, [sp, #20]
 800e70e:	2b09      	cmp	r3, #9
 800e710:	d869      	bhi.n	800e7e6 <_dtoa_r+0x2ae>
 800e712:	2b05      	cmp	r3, #5
 800e714:	bfc4      	itt	gt
 800e716:	3b04      	subgt	r3, #4
 800e718:	9305      	strgt	r3, [sp, #20]
 800e71a:	9b05      	ldr	r3, [sp, #20]
 800e71c:	f1a3 0302 	sub.w	r3, r3, #2
 800e720:	bfcc      	ite	gt
 800e722:	2500      	movgt	r5, #0
 800e724:	2501      	movle	r5, #1
 800e726:	2b03      	cmp	r3, #3
 800e728:	d869      	bhi.n	800e7fe <_dtoa_r+0x2c6>
 800e72a:	e8df f003 	tbb	[pc, r3]
 800e72e:	4e2c      	.short	0x4e2c
 800e730:	5a4c      	.short	0x5a4c
 800e732:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800e736:	441d      	add	r5, r3
 800e738:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e73c:	2b20      	cmp	r3, #32
 800e73e:	bfc1      	itttt	gt
 800e740:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e744:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e748:	fa09 f303 	lslgt.w	r3, r9, r3
 800e74c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e750:	bfda      	itte	le
 800e752:	f1c3 0320 	rsble	r3, r3, #32
 800e756:	fa06 f003 	lslle.w	r0, r6, r3
 800e75a:	4318      	orrgt	r0, r3
 800e75c:	f7f1 fee2 	bl	8000524 <__aeabi_ui2d>
 800e760:	2301      	movs	r3, #1
 800e762:	4606      	mov	r6, r0
 800e764:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e768:	3d01      	subs	r5, #1
 800e76a:	9310      	str	r3, [sp, #64]	; 0x40
 800e76c:	e771      	b.n	800e652 <_dtoa_r+0x11a>
 800e76e:	2301      	movs	r3, #1
 800e770:	e7b6      	b.n	800e6e0 <_dtoa_r+0x1a8>
 800e772:	900e      	str	r0, [sp, #56]	; 0x38
 800e774:	e7b5      	b.n	800e6e2 <_dtoa_r+0x1aa>
 800e776:	f1ca 0300 	rsb	r3, sl, #0
 800e77a:	9306      	str	r3, [sp, #24]
 800e77c:	2300      	movs	r3, #0
 800e77e:	eba8 080a 	sub.w	r8, r8, sl
 800e782:	930d      	str	r3, [sp, #52]	; 0x34
 800e784:	e7c2      	b.n	800e70c <_dtoa_r+0x1d4>
 800e786:	2300      	movs	r3, #0
 800e788:	9308      	str	r3, [sp, #32]
 800e78a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	dc39      	bgt.n	800e804 <_dtoa_r+0x2cc>
 800e790:	f04f 0901 	mov.w	r9, #1
 800e794:	f8cd 9004 	str.w	r9, [sp, #4]
 800e798:	464b      	mov	r3, r9
 800e79a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e79e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	6042      	str	r2, [r0, #4]
 800e7a4:	2204      	movs	r2, #4
 800e7a6:	f102 0614 	add.w	r6, r2, #20
 800e7aa:	429e      	cmp	r6, r3
 800e7ac:	6841      	ldr	r1, [r0, #4]
 800e7ae:	d92f      	bls.n	800e810 <_dtoa_r+0x2d8>
 800e7b0:	4620      	mov	r0, r4
 800e7b2:	f001 fa6f 	bl	800fc94 <_Balloc>
 800e7b6:	9000      	str	r0, [sp, #0]
 800e7b8:	2800      	cmp	r0, #0
 800e7ba:	d14b      	bne.n	800e854 <_dtoa_r+0x31c>
 800e7bc:	4b24      	ldr	r3, [pc, #144]	; (800e850 <_dtoa_r+0x318>)
 800e7be:	4602      	mov	r2, r0
 800e7c0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e7c4:	e6d1      	b.n	800e56a <_dtoa_r+0x32>
 800e7c6:	2301      	movs	r3, #1
 800e7c8:	e7de      	b.n	800e788 <_dtoa_r+0x250>
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	9308      	str	r3, [sp, #32]
 800e7ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7d0:	eb0a 0903 	add.w	r9, sl, r3
 800e7d4:	f109 0301 	add.w	r3, r9, #1
 800e7d8:	2b01      	cmp	r3, #1
 800e7da:	9301      	str	r3, [sp, #4]
 800e7dc:	bfb8      	it	lt
 800e7de:	2301      	movlt	r3, #1
 800e7e0:	e7dd      	b.n	800e79e <_dtoa_r+0x266>
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	e7f2      	b.n	800e7cc <_dtoa_r+0x294>
 800e7e6:	2501      	movs	r5, #1
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	9305      	str	r3, [sp, #20]
 800e7ec:	9508      	str	r5, [sp, #32]
 800e7ee:	f04f 39ff 	mov.w	r9, #4294967295
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	f8cd 9004 	str.w	r9, [sp, #4]
 800e7f8:	2312      	movs	r3, #18
 800e7fa:	9209      	str	r2, [sp, #36]	; 0x24
 800e7fc:	e7cf      	b.n	800e79e <_dtoa_r+0x266>
 800e7fe:	2301      	movs	r3, #1
 800e800:	9308      	str	r3, [sp, #32]
 800e802:	e7f4      	b.n	800e7ee <_dtoa_r+0x2b6>
 800e804:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e808:	f8cd 9004 	str.w	r9, [sp, #4]
 800e80c:	464b      	mov	r3, r9
 800e80e:	e7c6      	b.n	800e79e <_dtoa_r+0x266>
 800e810:	3101      	adds	r1, #1
 800e812:	6041      	str	r1, [r0, #4]
 800e814:	0052      	lsls	r2, r2, #1
 800e816:	e7c6      	b.n	800e7a6 <_dtoa_r+0x26e>
 800e818:	636f4361 	.word	0x636f4361
 800e81c:	3fd287a7 	.word	0x3fd287a7
 800e820:	8b60c8b3 	.word	0x8b60c8b3
 800e824:	3fc68a28 	.word	0x3fc68a28
 800e828:	509f79fb 	.word	0x509f79fb
 800e82c:	3fd34413 	.word	0x3fd34413
 800e830:	08011055 	.word	0x08011055
 800e834:	0801106c 	.word	0x0801106c
 800e838:	7ff00000 	.word	0x7ff00000
 800e83c:	08011051 	.word	0x08011051
 800e840:	08011048 	.word	0x08011048
 800e844:	08010fcd 	.word	0x08010fcd
 800e848:	3ff80000 	.word	0x3ff80000
 800e84c:	08011248 	.word	0x08011248
 800e850:	080110cb 	.word	0x080110cb
 800e854:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e856:	9a00      	ldr	r2, [sp, #0]
 800e858:	601a      	str	r2, [r3, #0]
 800e85a:	9b01      	ldr	r3, [sp, #4]
 800e85c:	2b0e      	cmp	r3, #14
 800e85e:	f200 80ad 	bhi.w	800e9bc <_dtoa_r+0x484>
 800e862:	2d00      	cmp	r5, #0
 800e864:	f000 80aa 	beq.w	800e9bc <_dtoa_r+0x484>
 800e868:	f1ba 0f00 	cmp.w	sl, #0
 800e86c:	dd36      	ble.n	800e8dc <_dtoa_r+0x3a4>
 800e86e:	4ac3      	ldr	r2, [pc, #780]	; (800eb7c <_dtoa_r+0x644>)
 800e870:	f00a 030f 	and.w	r3, sl, #15
 800e874:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e878:	ed93 7b00 	vldr	d7, [r3]
 800e87c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800e880:	ea4f 172a 	mov.w	r7, sl, asr #4
 800e884:	eeb0 8a47 	vmov.f32	s16, s14
 800e888:	eef0 8a67 	vmov.f32	s17, s15
 800e88c:	d016      	beq.n	800e8bc <_dtoa_r+0x384>
 800e88e:	4bbc      	ldr	r3, [pc, #752]	; (800eb80 <_dtoa_r+0x648>)
 800e890:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e894:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e898:	f7f1 ffe8 	bl	800086c <__aeabi_ddiv>
 800e89c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8a0:	f007 070f 	and.w	r7, r7, #15
 800e8a4:	2503      	movs	r5, #3
 800e8a6:	4eb6      	ldr	r6, [pc, #728]	; (800eb80 <_dtoa_r+0x648>)
 800e8a8:	b957      	cbnz	r7, 800e8c0 <_dtoa_r+0x388>
 800e8aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e8ae:	ec53 2b18 	vmov	r2, r3, d8
 800e8b2:	f7f1 ffdb 	bl	800086c <__aeabi_ddiv>
 800e8b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8ba:	e029      	b.n	800e910 <_dtoa_r+0x3d8>
 800e8bc:	2502      	movs	r5, #2
 800e8be:	e7f2      	b.n	800e8a6 <_dtoa_r+0x36e>
 800e8c0:	07f9      	lsls	r1, r7, #31
 800e8c2:	d508      	bpl.n	800e8d6 <_dtoa_r+0x39e>
 800e8c4:	ec51 0b18 	vmov	r0, r1, d8
 800e8c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e8cc:	f7f1 fea4 	bl	8000618 <__aeabi_dmul>
 800e8d0:	ec41 0b18 	vmov	d8, r0, r1
 800e8d4:	3501      	adds	r5, #1
 800e8d6:	107f      	asrs	r7, r7, #1
 800e8d8:	3608      	adds	r6, #8
 800e8da:	e7e5      	b.n	800e8a8 <_dtoa_r+0x370>
 800e8dc:	f000 80a6 	beq.w	800ea2c <_dtoa_r+0x4f4>
 800e8e0:	f1ca 0600 	rsb	r6, sl, #0
 800e8e4:	4ba5      	ldr	r3, [pc, #660]	; (800eb7c <_dtoa_r+0x644>)
 800e8e6:	4fa6      	ldr	r7, [pc, #664]	; (800eb80 <_dtoa_r+0x648>)
 800e8e8:	f006 020f 	and.w	r2, r6, #15
 800e8ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e8f8:	f7f1 fe8e 	bl	8000618 <__aeabi_dmul>
 800e8fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e900:	1136      	asrs	r6, r6, #4
 800e902:	2300      	movs	r3, #0
 800e904:	2502      	movs	r5, #2
 800e906:	2e00      	cmp	r6, #0
 800e908:	f040 8085 	bne.w	800ea16 <_dtoa_r+0x4de>
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d1d2      	bne.n	800e8b6 <_dtoa_r+0x37e>
 800e910:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e912:	2b00      	cmp	r3, #0
 800e914:	f000 808c 	beq.w	800ea30 <_dtoa_r+0x4f8>
 800e918:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e91c:	4b99      	ldr	r3, [pc, #612]	; (800eb84 <_dtoa_r+0x64c>)
 800e91e:	2200      	movs	r2, #0
 800e920:	4630      	mov	r0, r6
 800e922:	4639      	mov	r1, r7
 800e924:	f7f2 f8ea 	bl	8000afc <__aeabi_dcmplt>
 800e928:	2800      	cmp	r0, #0
 800e92a:	f000 8081 	beq.w	800ea30 <_dtoa_r+0x4f8>
 800e92e:	9b01      	ldr	r3, [sp, #4]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d07d      	beq.n	800ea30 <_dtoa_r+0x4f8>
 800e934:	f1b9 0f00 	cmp.w	r9, #0
 800e938:	dd3c      	ble.n	800e9b4 <_dtoa_r+0x47c>
 800e93a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e93e:	9307      	str	r3, [sp, #28]
 800e940:	2200      	movs	r2, #0
 800e942:	4b91      	ldr	r3, [pc, #580]	; (800eb88 <_dtoa_r+0x650>)
 800e944:	4630      	mov	r0, r6
 800e946:	4639      	mov	r1, r7
 800e948:	f7f1 fe66 	bl	8000618 <__aeabi_dmul>
 800e94c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e950:	3501      	adds	r5, #1
 800e952:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800e956:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e95a:	4628      	mov	r0, r5
 800e95c:	f7f1 fdf2 	bl	8000544 <__aeabi_i2d>
 800e960:	4632      	mov	r2, r6
 800e962:	463b      	mov	r3, r7
 800e964:	f7f1 fe58 	bl	8000618 <__aeabi_dmul>
 800e968:	4b88      	ldr	r3, [pc, #544]	; (800eb8c <_dtoa_r+0x654>)
 800e96a:	2200      	movs	r2, #0
 800e96c:	f7f1 fc9e 	bl	80002ac <__adddf3>
 800e970:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e974:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e978:	9303      	str	r3, [sp, #12]
 800e97a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d15c      	bne.n	800ea3a <_dtoa_r+0x502>
 800e980:	4b83      	ldr	r3, [pc, #524]	; (800eb90 <_dtoa_r+0x658>)
 800e982:	2200      	movs	r2, #0
 800e984:	4630      	mov	r0, r6
 800e986:	4639      	mov	r1, r7
 800e988:	f7f1 fc8e 	bl	80002a8 <__aeabi_dsub>
 800e98c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e990:	4606      	mov	r6, r0
 800e992:	460f      	mov	r7, r1
 800e994:	f7f2 f8d0 	bl	8000b38 <__aeabi_dcmpgt>
 800e998:	2800      	cmp	r0, #0
 800e99a:	f040 8296 	bne.w	800eeca <_dtoa_r+0x992>
 800e99e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e9a2:	4630      	mov	r0, r6
 800e9a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e9a8:	4639      	mov	r1, r7
 800e9aa:	f7f2 f8a7 	bl	8000afc <__aeabi_dcmplt>
 800e9ae:	2800      	cmp	r0, #0
 800e9b0:	f040 8288 	bne.w	800eec4 <_dtoa_r+0x98c>
 800e9b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e9b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e9bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	f2c0 8158 	blt.w	800ec74 <_dtoa_r+0x73c>
 800e9c4:	f1ba 0f0e 	cmp.w	sl, #14
 800e9c8:	f300 8154 	bgt.w	800ec74 <_dtoa_r+0x73c>
 800e9cc:	4b6b      	ldr	r3, [pc, #428]	; (800eb7c <_dtoa_r+0x644>)
 800e9ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e9d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e9d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	f280 80e3 	bge.w	800eba4 <_dtoa_r+0x66c>
 800e9de:	9b01      	ldr	r3, [sp, #4]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	f300 80df 	bgt.w	800eba4 <_dtoa_r+0x66c>
 800e9e6:	f040 826d 	bne.w	800eec4 <_dtoa_r+0x98c>
 800e9ea:	4b69      	ldr	r3, [pc, #420]	; (800eb90 <_dtoa_r+0x658>)
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	4640      	mov	r0, r8
 800e9f0:	4649      	mov	r1, r9
 800e9f2:	f7f1 fe11 	bl	8000618 <__aeabi_dmul>
 800e9f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e9fa:	f7f2 f893 	bl	8000b24 <__aeabi_dcmpge>
 800e9fe:	9e01      	ldr	r6, [sp, #4]
 800ea00:	4637      	mov	r7, r6
 800ea02:	2800      	cmp	r0, #0
 800ea04:	f040 8243 	bne.w	800ee8e <_dtoa_r+0x956>
 800ea08:	9d00      	ldr	r5, [sp, #0]
 800ea0a:	2331      	movs	r3, #49	; 0x31
 800ea0c:	f805 3b01 	strb.w	r3, [r5], #1
 800ea10:	f10a 0a01 	add.w	sl, sl, #1
 800ea14:	e23f      	b.n	800ee96 <_dtoa_r+0x95e>
 800ea16:	07f2      	lsls	r2, r6, #31
 800ea18:	d505      	bpl.n	800ea26 <_dtoa_r+0x4ee>
 800ea1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea1e:	f7f1 fdfb 	bl	8000618 <__aeabi_dmul>
 800ea22:	3501      	adds	r5, #1
 800ea24:	2301      	movs	r3, #1
 800ea26:	1076      	asrs	r6, r6, #1
 800ea28:	3708      	adds	r7, #8
 800ea2a:	e76c      	b.n	800e906 <_dtoa_r+0x3ce>
 800ea2c:	2502      	movs	r5, #2
 800ea2e:	e76f      	b.n	800e910 <_dtoa_r+0x3d8>
 800ea30:	9b01      	ldr	r3, [sp, #4]
 800ea32:	f8cd a01c 	str.w	sl, [sp, #28]
 800ea36:	930c      	str	r3, [sp, #48]	; 0x30
 800ea38:	e78d      	b.n	800e956 <_dtoa_r+0x41e>
 800ea3a:	9900      	ldr	r1, [sp, #0]
 800ea3c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ea3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ea40:	4b4e      	ldr	r3, [pc, #312]	; (800eb7c <_dtoa_r+0x644>)
 800ea42:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ea46:	4401      	add	r1, r0
 800ea48:	9102      	str	r1, [sp, #8]
 800ea4a:	9908      	ldr	r1, [sp, #32]
 800ea4c:	eeb0 8a47 	vmov.f32	s16, s14
 800ea50:	eef0 8a67 	vmov.f32	s17, s15
 800ea54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea58:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ea5c:	2900      	cmp	r1, #0
 800ea5e:	d045      	beq.n	800eaec <_dtoa_r+0x5b4>
 800ea60:	494c      	ldr	r1, [pc, #304]	; (800eb94 <_dtoa_r+0x65c>)
 800ea62:	2000      	movs	r0, #0
 800ea64:	f7f1 ff02 	bl	800086c <__aeabi_ddiv>
 800ea68:	ec53 2b18 	vmov	r2, r3, d8
 800ea6c:	f7f1 fc1c 	bl	80002a8 <__aeabi_dsub>
 800ea70:	9d00      	ldr	r5, [sp, #0]
 800ea72:	ec41 0b18 	vmov	d8, r0, r1
 800ea76:	4639      	mov	r1, r7
 800ea78:	4630      	mov	r0, r6
 800ea7a:	f7f2 f87d 	bl	8000b78 <__aeabi_d2iz>
 800ea7e:	900c      	str	r0, [sp, #48]	; 0x30
 800ea80:	f7f1 fd60 	bl	8000544 <__aeabi_i2d>
 800ea84:	4602      	mov	r2, r0
 800ea86:	460b      	mov	r3, r1
 800ea88:	4630      	mov	r0, r6
 800ea8a:	4639      	mov	r1, r7
 800ea8c:	f7f1 fc0c 	bl	80002a8 <__aeabi_dsub>
 800ea90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ea92:	3330      	adds	r3, #48	; 0x30
 800ea94:	f805 3b01 	strb.w	r3, [r5], #1
 800ea98:	ec53 2b18 	vmov	r2, r3, d8
 800ea9c:	4606      	mov	r6, r0
 800ea9e:	460f      	mov	r7, r1
 800eaa0:	f7f2 f82c 	bl	8000afc <__aeabi_dcmplt>
 800eaa4:	2800      	cmp	r0, #0
 800eaa6:	d165      	bne.n	800eb74 <_dtoa_r+0x63c>
 800eaa8:	4632      	mov	r2, r6
 800eaaa:	463b      	mov	r3, r7
 800eaac:	4935      	ldr	r1, [pc, #212]	; (800eb84 <_dtoa_r+0x64c>)
 800eaae:	2000      	movs	r0, #0
 800eab0:	f7f1 fbfa 	bl	80002a8 <__aeabi_dsub>
 800eab4:	ec53 2b18 	vmov	r2, r3, d8
 800eab8:	f7f2 f820 	bl	8000afc <__aeabi_dcmplt>
 800eabc:	2800      	cmp	r0, #0
 800eabe:	f040 80b9 	bne.w	800ec34 <_dtoa_r+0x6fc>
 800eac2:	9b02      	ldr	r3, [sp, #8]
 800eac4:	429d      	cmp	r5, r3
 800eac6:	f43f af75 	beq.w	800e9b4 <_dtoa_r+0x47c>
 800eaca:	4b2f      	ldr	r3, [pc, #188]	; (800eb88 <_dtoa_r+0x650>)
 800eacc:	ec51 0b18 	vmov	r0, r1, d8
 800ead0:	2200      	movs	r2, #0
 800ead2:	f7f1 fda1 	bl	8000618 <__aeabi_dmul>
 800ead6:	4b2c      	ldr	r3, [pc, #176]	; (800eb88 <_dtoa_r+0x650>)
 800ead8:	ec41 0b18 	vmov	d8, r0, r1
 800eadc:	2200      	movs	r2, #0
 800eade:	4630      	mov	r0, r6
 800eae0:	4639      	mov	r1, r7
 800eae2:	f7f1 fd99 	bl	8000618 <__aeabi_dmul>
 800eae6:	4606      	mov	r6, r0
 800eae8:	460f      	mov	r7, r1
 800eaea:	e7c4      	b.n	800ea76 <_dtoa_r+0x53e>
 800eaec:	ec51 0b17 	vmov	r0, r1, d7
 800eaf0:	f7f1 fd92 	bl	8000618 <__aeabi_dmul>
 800eaf4:	9b02      	ldr	r3, [sp, #8]
 800eaf6:	9d00      	ldr	r5, [sp, #0]
 800eaf8:	930c      	str	r3, [sp, #48]	; 0x30
 800eafa:	ec41 0b18 	vmov	d8, r0, r1
 800eafe:	4639      	mov	r1, r7
 800eb00:	4630      	mov	r0, r6
 800eb02:	f7f2 f839 	bl	8000b78 <__aeabi_d2iz>
 800eb06:	9011      	str	r0, [sp, #68]	; 0x44
 800eb08:	f7f1 fd1c 	bl	8000544 <__aeabi_i2d>
 800eb0c:	4602      	mov	r2, r0
 800eb0e:	460b      	mov	r3, r1
 800eb10:	4630      	mov	r0, r6
 800eb12:	4639      	mov	r1, r7
 800eb14:	f7f1 fbc8 	bl	80002a8 <__aeabi_dsub>
 800eb18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eb1a:	3330      	adds	r3, #48	; 0x30
 800eb1c:	f805 3b01 	strb.w	r3, [r5], #1
 800eb20:	9b02      	ldr	r3, [sp, #8]
 800eb22:	429d      	cmp	r5, r3
 800eb24:	4606      	mov	r6, r0
 800eb26:	460f      	mov	r7, r1
 800eb28:	f04f 0200 	mov.w	r2, #0
 800eb2c:	d134      	bne.n	800eb98 <_dtoa_r+0x660>
 800eb2e:	4b19      	ldr	r3, [pc, #100]	; (800eb94 <_dtoa_r+0x65c>)
 800eb30:	ec51 0b18 	vmov	r0, r1, d8
 800eb34:	f7f1 fbba 	bl	80002ac <__adddf3>
 800eb38:	4602      	mov	r2, r0
 800eb3a:	460b      	mov	r3, r1
 800eb3c:	4630      	mov	r0, r6
 800eb3e:	4639      	mov	r1, r7
 800eb40:	f7f1 fffa 	bl	8000b38 <__aeabi_dcmpgt>
 800eb44:	2800      	cmp	r0, #0
 800eb46:	d175      	bne.n	800ec34 <_dtoa_r+0x6fc>
 800eb48:	ec53 2b18 	vmov	r2, r3, d8
 800eb4c:	4911      	ldr	r1, [pc, #68]	; (800eb94 <_dtoa_r+0x65c>)
 800eb4e:	2000      	movs	r0, #0
 800eb50:	f7f1 fbaa 	bl	80002a8 <__aeabi_dsub>
 800eb54:	4602      	mov	r2, r0
 800eb56:	460b      	mov	r3, r1
 800eb58:	4630      	mov	r0, r6
 800eb5a:	4639      	mov	r1, r7
 800eb5c:	f7f1 ffce 	bl	8000afc <__aeabi_dcmplt>
 800eb60:	2800      	cmp	r0, #0
 800eb62:	f43f af27 	beq.w	800e9b4 <_dtoa_r+0x47c>
 800eb66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800eb68:	1e6b      	subs	r3, r5, #1
 800eb6a:	930c      	str	r3, [sp, #48]	; 0x30
 800eb6c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800eb70:	2b30      	cmp	r3, #48	; 0x30
 800eb72:	d0f8      	beq.n	800eb66 <_dtoa_r+0x62e>
 800eb74:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800eb78:	e04a      	b.n	800ec10 <_dtoa_r+0x6d8>
 800eb7a:	bf00      	nop
 800eb7c:	08011248 	.word	0x08011248
 800eb80:	08011220 	.word	0x08011220
 800eb84:	3ff00000 	.word	0x3ff00000
 800eb88:	40240000 	.word	0x40240000
 800eb8c:	401c0000 	.word	0x401c0000
 800eb90:	40140000 	.word	0x40140000
 800eb94:	3fe00000 	.word	0x3fe00000
 800eb98:	4baf      	ldr	r3, [pc, #700]	; (800ee58 <_dtoa_r+0x920>)
 800eb9a:	f7f1 fd3d 	bl	8000618 <__aeabi_dmul>
 800eb9e:	4606      	mov	r6, r0
 800eba0:	460f      	mov	r7, r1
 800eba2:	e7ac      	b.n	800eafe <_dtoa_r+0x5c6>
 800eba4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800eba8:	9d00      	ldr	r5, [sp, #0]
 800ebaa:	4642      	mov	r2, r8
 800ebac:	464b      	mov	r3, r9
 800ebae:	4630      	mov	r0, r6
 800ebb0:	4639      	mov	r1, r7
 800ebb2:	f7f1 fe5b 	bl	800086c <__aeabi_ddiv>
 800ebb6:	f7f1 ffdf 	bl	8000b78 <__aeabi_d2iz>
 800ebba:	9002      	str	r0, [sp, #8]
 800ebbc:	f7f1 fcc2 	bl	8000544 <__aeabi_i2d>
 800ebc0:	4642      	mov	r2, r8
 800ebc2:	464b      	mov	r3, r9
 800ebc4:	f7f1 fd28 	bl	8000618 <__aeabi_dmul>
 800ebc8:	4602      	mov	r2, r0
 800ebca:	460b      	mov	r3, r1
 800ebcc:	4630      	mov	r0, r6
 800ebce:	4639      	mov	r1, r7
 800ebd0:	f7f1 fb6a 	bl	80002a8 <__aeabi_dsub>
 800ebd4:	9e02      	ldr	r6, [sp, #8]
 800ebd6:	9f01      	ldr	r7, [sp, #4]
 800ebd8:	3630      	adds	r6, #48	; 0x30
 800ebda:	f805 6b01 	strb.w	r6, [r5], #1
 800ebde:	9e00      	ldr	r6, [sp, #0]
 800ebe0:	1bae      	subs	r6, r5, r6
 800ebe2:	42b7      	cmp	r7, r6
 800ebe4:	4602      	mov	r2, r0
 800ebe6:	460b      	mov	r3, r1
 800ebe8:	d137      	bne.n	800ec5a <_dtoa_r+0x722>
 800ebea:	f7f1 fb5f 	bl	80002ac <__adddf3>
 800ebee:	4642      	mov	r2, r8
 800ebf0:	464b      	mov	r3, r9
 800ebf2:	4606      	mov	r6, r0
 800ebf4:	460f      	mov	r7, r1
 800ebf6:	f7f1 ff9f 	bl	8000b38 <__aeabi_dcmpgt>
 800ebfa:	b9c8      	cbnz	r0, 800ec30 <_dtoa_r+0x6f8>
 800ebfc:	4642      	mov	r2, r8
 800ebfe:	464b      	mov	r3, r9
 800ec00:	4630      	mov	r0, r6
 800ec02:	4639      	mov	r1, r7
 800ec04:	f7f1 ff70 	bl	8000ae8 <__aeabi_dcmpeq>
 800ec08:	b110      	cbz	r0, 800ec10 <_dtoa_r+0x6d8>
 800ec0a:	9b02      	ldr	r3, [sp, #8]
 800ec0c:	07d9      	lsls	r1, r3, #31
 800ec0e:	d40f      	bmi.n	800ec30 <_dtoa_r+0x6f8>
 800ec10:	4620      	mov	r0, r4
 800ec12:	4659      	mov	r1, fp
 800ec14:	f001 f87e 	bl	800fd14 <_Bfree>
 800ec18:	2300      	movs	r3, #0
 800ec1a:	702b      	strb	r3, [r5, #0]
 800ec1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec1e:	f10a 0001 	add.w	r0, sl, #1
 800ec22:	6018      	str	r0, [r3, #0]
 800ec24:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	f43f acd8 	beq.w	800e5dc <_dtoa_r+0xa4>
 800ec2c:	601d      	str	r5, [r3, #0]
 800ec2e:	e4d5      	b.n	800e5dc <_dtoa_r+0xa4>
 800ec30:	f8cd a01c 	str.w	sl, [sp, #28]
 800ec34:	462b      	mov	r3, r5
 800ec36:	461d      	mov	r5, r3
 800ec38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ec3c:	2a39      	cmp	r2, #57	; 0x39
 800ec3e:	d108      	bne.n	800ec52 <_dtoa_r+0x71a>
 800ec40:	9a00      	ldr	r2, [sp, #0]
 800ec42:	429a      	cmp	r2, r3
 800ec44:	d1f7      	bne.n	800ec36 <_dtoa_r+0x6fe>
 800ec46:	9a07      	ldr	r2, [sp, #28]
 800ec48:	9900      	ldr	r1, [sp, #0]
 800ec4a:	3201      	adds	r2, #1
 800ec4c:	9207      	str	r2, [sp, #28]
 800ec4e:	2230      	movs	r2, #48	; 0x30
 800ec50:	700a      	strb	r2, [r1, #0]
 800ec52:	781a      	ldrb	r2, [r3, #0]
 800ec54:	3201      	adds	r2, #1
 800ec56:	701a      	strb	r2, [r3, #0]
 800ec58:	e78c      	b.n	800eb74 <_dtoa_r+0x63c>
 800ec5a:	4b7f      	ldr	r3, [pc, #508]	; (800ee58 <_dtoa_r+0x920>)
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	f7f1 fcdb 	bl	8000618 <__aeabi_dmul>
 800ec62:	2200      	movs	r2, #0
 800ec64:	2300      	movs	r3, #0
 800ec66:	4606      	mov	r6, r0
 800ec68:	460f      	mov	r7, r1
 800ec6a:	f7f1 ff3d 	bl	8000ae8 <__aeabi_dcmpeq>
 800ec6e:	2800      	cmp	r0, #0
 800ec70:	d09b      	beq.n	800ebaa <_dtoa_r+0x672>
 800ec72:	e7cd      	b.n	800ec10 <_dtoa_r+0x6d8>
 800ec74:	9a08      	ldr	r2, [sp, #32]
 800ec76:	2a00      	cmp	r2, #0
 800ec78:	f000 80c4 	beq.w	800ee04 <_dtoa_r+0x8cc>
 800ec7c:	9a05      	ldr	r2, [sp, #20]
 800ec7e:	2a01      	cmp	r2, #1
 800ec80:	f300 80a8 	bgt.w	800edd4 <_dtoa_r+0x89c>
 800ec84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ec86:	2a00      	cmp	r2, #0
 800ec88:	f000 80a0 	beq.w	800edcc <_dtoa_r+0x894>
 800ec8c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ec90:	9e06      	ldr	r6, [sp, #24]
 800ec92:	4645      	mov	r5, r8
 800ec94:	9a04      	ldr	r2, [sp, #16]
 800ec96:	2101      	movs	r1, #1
 800ec98:	441a      	add	r2, r3
 800ec9a:	4620      	mov	r0, r4
 800ec9c:	4498      	add	r8, r3
 800ec9e:	9204      	str	r2, [sp, #16]
 800eca0:	f001 f93e 	bl	800ff20 <__i2b>
 800eca4:	4607      	mov	r7, r0
 800eca6:	2d00      	cmp	r5, #0
 800eca8:	dd0b      	ble.n	800ecc2 <_dtoa_r+0x78a>
 800ecaa:	9b04      	ldr	r3, [sp, #16]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	dd08      	ble.n	800ecc2 <_dtoa_r+0x78a>
 800ecb0:	42ab      	cmp	r3, r5
 800ecb2:	9a04      	ldr	r2, [sp, #16]
 800ecb4:	bfa8      	it	ge
 800ecb6:	462b      	movge	r3, r5
 800ecb8:	eba8 0803 	sub.w	r8, r8, r3
 800ecbc:	1aed      	subs	r5, r5, r3
 800ecbe:	1ad3      	subs	r3, r2, r3
 800ecc0:	9304      	str	r3, [sp, #16]
 800ecc2:	9b06      	ldr	r3, [sp, #24]
 800ecc4:	b1fb      	cbz	r3, 800ed06 <_dtoa_r+0x7ce>
 800ecc6:	9b08      	ldr	r3, [sp, #32]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	f000 809f 	beq.w	800ee0c <_dtoa_r+0x8d4>
 800ecce:	2e00      	cmp	r6, #0
 800ecd0:	dd11      	ble.n	800ecf6 <_dtoa_r+0x7be>
 800ecd2:	4639      	mov	r1, r7
 800ecd4:	4632      	mov	r2, r6
 800ecd6:	4620      	mov	r0, r4
 800ecd8:	f001 f9de 	bl	8010098 <__pow5mult>
 800ecdc:	465a      	mov	r2, fp
 800ecde:	4601      	mov	r1, r0
 800ece0:	4607      	mov	r7, r0
 800ece2:	4620      	mov	r0, r4
 800ece4:	f001 f932 	bl	800ff4c <__multiply>
 800ece8:	4659      	mov	r1, fp
 800ecea:	9007      	str	r0, [sp, #28]
 800ecec:	4620      	mov	r0, r4
 800ecee:	f001 f811 	bl	800fd14 <_Bfree>
 800ecf2:	9b07      	ldr	r3, [sp, #28]
 800ecf4:	469b      	mov	fp, r3
 800ecf6:	9b06      	ldr	r3, [sp, #24]
 800ecf8:	1b9a      	subs	r2, r3, r6
 800ecfa:	d004      	beq.n	800ed06 <_dtoa_r+0x7ce>
 800ecfc:	4659      	mov	r1, fp
 800ecfe:	4620      	mov	r0, r4
 800ed00:	f001 f9ca 	bl	8010098 <__pow5mult>
 800ed04:	4683      	mov	fp, r0
 800ed06:	2101      	movs	r1, #1
 800ed08:	4620      	mov	r0, r4
 800ed0a:	f001 f909 	bl	800ff20 <__i2b>
 800ed0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	4606      	mov	r6, r0
 800ed14:	dd7c      	ble.n	800ee10 <_dtoa_r+0x8d8>
 800ed16:	461a      	mov	r2, r3
 800ed18:	4601      	mov	r1, r0
 800ed1a:	4620      	mov	r0, r4
 800ed1c:	f001 f9bc 	bl	8010098 <__pow5mult>
 800ed20:	9b05      	ldr	r3, [sp, #20]
 800ed22:	2b01      	cmp	r3, #1
 800ed24:	4606      	mov	r6, r0
 800ed26:	dd76      	ble.n	800ee16 <_dtoa_r+0x8de>
 800ed28:	2300      	movs	r3, #0
 800ed2a:	9306      	str	r3, [sp, #24]
 800ed2c:	6933      	ldr	r3, [r6, #16]
 800ed2e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ed32:	6918      	ldr	r0, [r3, #16]
 800ed34:	f001 f8a4 	bl	800fe80 <__hi0bits>
 800ed38:	f1c0 0020 	rsb	r0, r0, #32
 800ed3c:	9b04      	ldr	r3, [sp, #16]
 800ed3e:	4418      	add	r0, r3
 800ed40:	f010 001f 	ands.w	r0, r0, #31
 800ed44:	f000 8086 	beq.w	800ee54 <_dtoa_r+0x91c>
 800ed48:	f1c0 0320 	rsb	r3, r0, #32
 800ed4c:	2b04      	cmp	r3, #4
 800ed4e:	dd7f      	ble.n	800ee50 <_dtoa_r+0x918>
 800ed50:	f1c0 001c 	rsb	r0, r0, #28
 800ed54:	9b04      	ldr	r3, [sp, #16]
 800ed56:	4403      	add	r3, r0
 800ed58:	4480      	add	r8, r0
 800ed5a:	4405      	add	r5, r0
 800ed5c:	9304      	str	r3, [sp, #16]
 800ed5e:	f1b8 0f00 	cmp.w	r8, #0
 800ed62:	dd05      	ble.n	800ed70 <_dtoa_r+0x838>
 800ed64:	4659      	mov	r1, fp
 800ed66:	4642      	mov	r2, r8
 800ed68:	4620      	mov	r0, r4
 800ed6a:	f001 f9ef 	bl	801014c <__lshift>
 800ed6e:	4683      	mov	fp, r0
 800ed70:	9b04      	ldr	r3, [sp, #16]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	dd05      	ble.n	800ed82 <_dtoa_r+0x84a>
 800ed76:	4631      	mov	r1, r6
 800ed78:	461a      	mov	r2, r3
 800ed7a:	4620      	mov	r0, r4
 800ed7c:	f001 f9e6 	bl	801014c <__lshift>
 800ed80:	4606      	mov	r6, r0
 800ed82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d069      	beq.n	800ee5c <_dtoa_r+0x924>
 800ed88:	4631      	mov	r1, r6
 800ed8a:	4658      	mov	r0, fp
 800ed8c:	f001 fa4a 	bl	8010224 <__mcmp>
 800ed90:	2800      	cmp	r0, #0
 800ed92:	da63      	bge.n	800ee5c <_dtoa_r+0x924>
 800ed94:	2300      	movs	r3, #0
 800ed96:	4659      	mov	r1, fp
 800ed98:	220a      	movs	r2, #10
 800ed9a:	4620      	mov	r0, r4
 800ed9c:	f000 ffdc 	bl	800fd58 <__multadd>
 800eda0:	9b08      	ldr	r3, [sp, #32]
 800eda2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eda6:	4683      	mov	fp, r0
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	f000 818f 	beq.w	800f0cc <_dtoa_r+0xb94>
 800edae:	4639      	mov	r1, r7
 800edb0:	2300      	movs	r3, #0
 800edb2:	220a      	movs	r2, #10
 800edb4:	4620      	mov	r0, r4
 800edb6:	f000 ffcf 	bl	800fd58 <__multadd>
 800edba:	f1b9 0f00 	cmp.w	r9, #0
 800edbe:	4607      	mov	r7, r0
 800edc0:	f300 808e 	bgt.w	800eee0 <_dtoa_r+0x9a8>
 800edc4:	9b05      	ldr	r3, [sp, #20]
 800edc6:	2b02      	cmp	r3, #2
 800edc8:	dc50      	bgt.n	800ee6c <_dtoa_r+0x934>
 800edca:	e089      	b.n	800eee0 <_dtoa_r+0x9a8>
 800edcc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800edce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800edd2:	e75d      	b.n	800ec90 <_dtoa_r+0x758>
 800edd4:	9b01      	ldr	r3, [sp, #4]
 800edd6:	1e5e      	subs	r6, r3, #1
 800edd8:	9b06      	ldr	r3, [sp, #24]
 800edda:	42b3      	cmp	r3, r6
 800eddc:	bfbf      	itttt	lt
 800edde:	9b06      	ldrlt	r3, [sp, #24]
 800ede0:	9606      	strlt	r6, [sp, #24]
 800ede2:	1af2      	sublt	r2, r6, r3
 800ede4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800ede6:	bfb6      	itet	lt
 800ede8:	189b      	addlt	r3, r3, r2
 800edea:	1b9e      	subge	r6, r3, r6
 800edec:	930d      	strlt	r3, [sp, #52]	; 0x34
 800edee:	9b01      	ldr	r3, [sp, #4]
 800edf0:	bfb8      	it	lt
 800edf2:	2600      	movlt	r6, #0
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	bfb5      	itete	lt
 800edf8:	eba8 0503 	sublt.w	r5, r8, r3
 800edfc:	9b01      	ldrge	r3, [sp, #4]
 800edfe:	2300      	movlt	r3, #0
 800ee00:	4645      	movge	r5, r8
 800ee02:	e747      	b.n	800ec94 <_dtoa_r+0x75c>
 800ee04:	9e06      	ldr	r6, [sp, #24]
 800ee06:	9f08      	ldr	r7, [sp, #32]
 800ee08:	4645      	mov	r5, r8
 800ee0a:	e74c      	b.n	800eca6 <_dtoa_r+0x76e>
 800ee0c:	9a06      	ldr	r2, [sp, #24]
 800ee0e:	e775      	b.n	800ecfc <_dtoa_r+0x7c4>
 800ee10:	9b05      	ldr	r3, [sp, #20]
 800ee12:	2b01      	cmp	r3, #1
 800ee14:	dc18      	bgt.n	800ee48 <_dtoa_r+0x910>
 800ee16:	9b02      	ldr	r3, [sp, #8]
 800ee18:	b9b3      	cbnz	r3, 800ee48 <_dtoa_r+0x910>
 800ee1a:	9b03      	ldr	r3, [sp, #12]
 800ee1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ee20:	b9a3      	cbnz	r3, 800ee4c <_dtoa_r+0x914>
 800ee22:	9b03      	ldr	r3, [sp, #12]
 800ee24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ee28:	0d1b      	lsrs	r3, r3, #20
 800ee2a:	051b      	lsls	r3, r3, #20
 800ee2c:	b12b      	cbz	r3, 800ee3a <_dtoa_r+0x902>
 800ee2e:	9b04      	ldr	r3, [sp, #16]
 800ee30:	3301      	adds	r3, #1
 800ee32:	9304      	str	r3, [sp, #16]
 800ee34:	f108 0801 	add.w	r8, r8, #1
 800ee38:	2301      	movs	r3, #1
 800ee3a:	9306      	str	r3, [sp, #24]
 800ee3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	f47f af74 	bne.w	800ed2c <_dtoa_r+0x7f4>
 800ee44:	2001      	movs	r0, #1
 800ee46:	e779      	b.n	800ed3c <_dtoa_r+0x804>
 800ee48:	2300      	movs	r3, #0
 800ee4a:	e7f6      	b.n	800ee3a <_dtoa_r+0x902>
 800ee4c:	9b02      	ldr	r3, [sp, #8]
 800ee4e:	e7f4      	b.n	800ee3a <_dtoa_r+0x902>
 800ee50:	d085      	beq.n	800ed5e <_dtoa_r+0x826>
 800ee52:	4618      	mov	r0, r3
 800ee54:	301c      	adds	r0, #28
 800ee56:	e77d      	b.n	800ed54 <_dtoa_r+0x81c>
 800ee58:	40240000 	.word	0x40240000
 800ee5c:	9b01      	ldr	r3, [sp, #4]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	dc38      	bgt.n	800eed4 <_dtoa_r+0x99c>
 800ee62:	9b05      	ldr	r3, [sp, #20]
 800ee64:	2b02      	cmp	r3, #2
 800ee66:	dd35      	ble.n	800eed4 <_dtoa_r+0x99c>
 800ee68:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ee6c:	f1b9 0f00 	cmp.w	r9, #0
 800ee70:	d10d      	bne.n	800ee8e <_dtoa_r+0x956>
 800ee72:	4631      	mov	r1, r6
 800ee74:	464b      	mov	r3, r9
 800ee76:	2205      	movs	r2, #5
 800ee78:	4620      	mov	r0, r4
 800ee7a:	f000 ff6d 	bl	800fd58 <__multadd>
 800ee7e:	4601      	mov	r1, r0
 800ee80:	4606      	mov	r6, r0
 800ee82:	4658      	mov	r0, fp
 800ee84:	f001 f9ce 	bl	8010224 <__mcmp>
 800ee88:	2800      	cmp	r0, #0
 800ee8a:	f73f adbd 	bgt.w	800ea08 <_dtoa_r+0x4d0>
 800ee8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee90:	9d00      	ldr	r5, [sp, #0]
 800ee92:	ea6f 0a03 	mvn.w	sl, r3
 800ee96:	f04f 0800 	mov.w	r8, #0
 800ee9a:	4631      	mov	r1, r6
 800ee9c:	4620      	mov	r0, r4
 800ee9e:	f000 ff39 	bl	800fd14 <_Bfree>
 800eea2:	2f00      	cmp	r7, #0
 800eea4:	f43f aeb4 	beq.w	800ec10 <_dtoa_r+0x6d8>
 800eea8:	f1b8 0f00 	cmp.w	r8, #0
 800eeac:	d005      	beq.n	800eeba <_dtoa_r+0x982>
 800eeae:	45b8      	cmp	r8, r7
 800eeb0:	d003      	beq.n	800eeba <_dtoa_r+0x982>
 800eeb2:	4641      	mov	r1, r8
 800eeb4:	4620      	mov	r0, r4
 800eeb6:	f000 ff2d 	bl	800fd14 <_Bfree>
 800eeba:	4639      	mov	r1, r7
 800eebc:	4620      	mov	r0, r4
 800eebe:	f000 ff29 	bl	800fd14 <_Bfree>
 800eec2:	e6a5      	b.n	800ec10 <_dtoa_r+0x6d8>
 800eec4:	2600      	movs	r6, #0
 800eec6:	4637      	mov	r7, r6
 800eec8:	e7e1      	b.n	800ee8e <_dtoa_r+0x956>
 800eeca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800eecc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800eed0:	4637      	mov	r7, r6
 800eed2:	e599      	b.n	800ea08 <_dtoa_r+0x4d0>
 800eed4:	9b08      	ldr	r3, [sp, #32]
 800eed6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	f000 80fd 	beq.w	800f0da <_dtoa_r+0xba2>
 800eee0:	2d00      	cmp	r5, #0
 800eee2:	dd05      	ble.n	800eef0 <_dtoa_r+0x9b8>
 800eee4:	4639      	mov	r1, r7
 800eee6:	462a      	mov	r2, r5
 800eee8:	4620      	mov	r0, r4
 800eeea:	f001 f92f 	bl	801014c <__lshift>
 800eeee:	4607      	mov	r7, r0
 800eef0:	9b06      	ldr	r3, [sp, #24]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d05c      	beq.n	800efb0 <_dtoa_r+0xa78>
 800eef6:	6879      	ldr	r1, [r7, #4]
 800eef8:	4620      	mov	r0, r4
 800eefa:	f000 fecb 	bl	800fc94 <_Balloc>
 800eefe:	4605      	mov	r5, r0
 800ef00:	b928      	cbnz	r0, 800ef0e <_dtoa_r+0x9d6>
 800ef02:	4b80      	ldr	r3, [pc, #512]	; (800f104 <_dtoa_r+0xbcc>)
 800ef04:	4602      	mov	r2, r0
 800ef06:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ef0a:	f7ff bb2e 	b.w	800e56a <_dtoa_r+0x32>
 800ef0e:	693a      	ldr	r2, [r7, #16]
 800ef10:	3202      	adds	r2, #2
 800ef12:	0092      	lsls	r2, r2, #2
 800ef14:	f107 010c 	add.w	r1, r7, #12
 800ef18:	300c      	adds	r0, #12
 800ef1a:	f7fd fb27 	bl	800c56c <memcpy>
 800ef1e:	2201      	movs	r2, #1
 800ef20:	4629      	mov	r1, r5
 800ef22:	4620      	mov	r0, r4
 800ef24:	f001 f912 	bl	801014c <__lshift>
 800ef28:	9b00      	ldr	r3, [sp, #0]
 800ef2a:	3301      	adds	r3, #1
 800ef2c:	9301      	str	r3, [sp, #4]
 800ef2e:	9b00      	ldr	r3, [sp, #0]
 800ef30:	444b      	add	r3, r9
 800ef32:	9307      	str	r3, [sp, #28]
 800ef34:	9b02      	ldr	r3, [sp, #8]
 800ef36:	f003 0301 	and.w	r3, r3, #1
 800ef3a:	46b8      	mov	r8, r7
 800ef3c:	9306      	str	r3, [sp, #24]
 800ef3e:	4607      	mov	r7, r0
 800ef40:	9b01      	ldr	r3, [sp, #4]
 800ef42:	4631      	mov	r1, r6
 800ef44:	3b01      	subs	r3, #1
 800ef46:	4658      	mov	r0, fp
 800ef48:	9302      	str	r3, [sp, #8]
 800ef4a:	f7ff fa69 	bl	800e420 <quorem>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	3330      	adds	r3, #48	; 0x30
 800ef52:	9004      	str	r0, [sp, #16]
 800ef54:	4641      	mov	r1, r8
 800ef56:	4658      	mov	r0, fp
 800ef58:	9308      	str	r3, [sp, #32]
 800ef5a:	f001 f963 	bl	8010224 <__mcmp>
 800ef5e:	463a      	mov	r2, r7
 800ef60:	4681      	mov	r9, r0
 800ef62:	4631      	mov	r1, r6
 800ef64:	4620      	mov	r0, r4
 800ef66:	f001 f979 	bl	801025c <__mdiff>
 800ef6a:	68c2      	ldr	r2, [r0, #12]
 800ef6c:	9b08      	ldr	r3, [sp, #32]
 800ef6e:	4605      	mov	r5, r0
 800ef70:	bb02      	cbnz	r2, 800efb4 <_dtoa_r+0xa7c>
 800ef72:	4601      	mov	r1, r0
 800ef74:	4658      	mov	r0, fp
 800ef76:	f001 f955 	bl	8010224 <__mcmp>
 800ef7a:	9b08      	ldr	r3, [sp, #32]
 800ef7c:	4602      	mov	r2, r0
 800ef7e:	4629      	mov	r1, r5
 800ef80:	4620      	mov	r0, r4
 800ef82:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ef86:	f000 fec5 	bl	800fd14 <_Bfree>
 800ef8a:	9b05      	ldr	r3, [sp, #20]
 800ef8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef8e:	9d01      	ldr	r5, [sp, #4]
 800ef90:	ea43 0102 	orr.w	r1, r3, r2
 800ef94:	9b06      	ldr	r3, [sp, #24]
 800ef96:	430b      	orrs	r3, r1
 800ef98:	9b08      	ldr	r3, [sp, #32]
 800ef9a:	d10d      	bne.n	800efb8 <_dtoa_r+0xa80>
 800ef9c:	2b39      	cmp	r3, #57	; 0x39
 800ef9e:	d029      	beq.n	800eff4 <_dtoa_r+0xabc>
 800efa0:	f1b9 0f00 	cmp.w	r9, #0
 800efa4:	dd01      	ble.n	800efaa <_dtoa_r+0xa72>
 800efa6:	9b04      	ldr	r3, [sp, #16]
 800efa8:	3331      	adds	r3, #49	; 0x31
 800efaa:	9a02      	ldr	r2, [sp, #8]
 800efac:	7013      	strb	r3, [r2, #0]
 800efae:	e774      	b.n	800ee9a <_dtoa_r+0x962>
 800efb0:	4638      	mov	r0, r7
 800efb2:	e7b9      	b.n	800ef28 <_dtoa_r+0x9f0>
 800efb4:	2201      	movs	r2, #1
 800efb6:	e7e2      	b.n	800ef7e <_dtoa_r+0xa46>
 800efb8:	f1b9 0f00 	cmp.w	r9, #0
 800efbc:	db06      	blt.n	800efcc <_dtoa_r+0xa94>
 800efbe:	9905      	ldr	r1, [sp, #20]
 800efc0:	ea41 0909 	orr.w	r9, r1, r9
 800efc4:	9906      	ldr	r1, [sp, #24]
 800efc6:	ea59 0101 	orrs.w	r1, r9, r1
 800efca:	d120      	bne.n	800f00e <_dtoa_r+0xad6>
 800efcc:	2a00      	cmp	r2, #0
 800efce:	ddec      	ble.n	800efaa <_dtoa_r+0xa72>
 800efd0:	4659      	mov	r1, fp
 800efd2:	2201      	movs	r2, #1
 800efd4:	4620      	mov	r0, r4
 800efd6:	9301      	str	r3, [sp, #4]
 800efd8:	f001 f8b8 	bl	801014c <__lshift>
 800efdc:	4631      	mov	r1, r6
 800efde:	4683      	mov	fp, r0
 800efe0:	f001 f920 	bl	8010224 <__mcmp>
 800efe4:	2800      	cmp	r0, #0
 800efe6:	9b01      	ldr	r3, [sp, #4]
 800efe8:	dc02      	bgt.n	800eff0 <_dtoa_r+0xab8>
 800efea:	d1de      	bne.n	800efaa <_dtoa_r+0xa72>
 800efec:	07da      	lsls	r2, r3, #31
 800efee:	d5dc      	bpl.n	800efaa <_dtoa_r+0xa72>
 800eff0:	2b39      	cmp	r3, #57	; 0x39
 800eff2:	d1d8      	bne.n	800efa6 <_dtoa_r+0xa6e>
 800eff4:	9a02      	ldr	r2, [sp, #8]
 800eff6:	2339      	movs	r3, #57	; 0x39
 800eff8:	7013      	strb	r3, [r2, #0]
 800effa:	462b      	mov	r3, r5
 800effc:	461d      	mov	r5, r3
 800effe:	3b01      	subs	r3, #1
 800f000:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f004:	2a39      	cmp	r2, #57	; 0x39
 800f006:	d050      	beq.n	800f0aa <_dtoa_r+0xb72>
 800f008:	3201      	adds	r2, #1
 800f00a:	701a      	strb	r2, [r3, #0]
 800f00c:	e745      	b.n	800ee9a <_dtoa_r+0x962>
 800f00e:	2a00      	cmp	r2, #0
 800f010:	dd03      	ble.n	800f01a <_dtoa_r+0xae2>
 800f012:	2b39      	cmp	r3, #57	; 0x39
 800f014:	d0ee      	beq.n	800eff4 <_dtoa_r+0xabc>
 800f016:	3301      	adds	r3, #1
 800f018:	e7c7      	b.n	800efaa <_dtoa_r+0xa72>
 800f01a:	9a01      	ldr	r2, [sp, #4]
 800f01c:	9907      	ldr	r1, [sp, #28]
 800f01e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f022:	428a      	cmp	r2, r1
 800f024:	d02a      	beq.n	800f07c <_dtoa_r+0xb44>
 800f026:	4659      	mov	r1, fp
 800f028:	2300      	movs	r3, #0
 800f02a:	220a      	movs	r2, #10
 800f02c:	4620      	mov	r0, r4
 800f02e:	f000 fe93 	bl	800fd58 <__multadd>
 800f032:	45b8      	cmp	r8, r7
 800f034:	4683      	mov	fp, r0
 800f036:	f04f 0300 	mov.w	r3, #0
 800f03a:	f04f 020a 	mov.w	r2, #10
 800f03e:	4641      	mov	r1, r8
 800f040:	4620      	mov	r0, r4
 800f042:	d107      	bne.n	800f054 <_dtoa_r+0xb1c>
 800f044:	f000 fe88 	bl	800fd58 <__multadd>
 800f048:	4680      	mov	r8, r0
 800f04a:	4607      	mov	r7, r0
 800f04c:	9b01      	ldr	r3, [sp, #4]
 800f04e:	3301      	adds	r3, #1
 800f050:	9301      	str	r3, [sp, #4]
 800f052:	e775      	b.n	800ef40 <_dtoa_r+0xa08>
 800f054:	f000 fe80 	bl	800fd58 <__multadd>
 800f058:	4639      	mov	r1, r7
 800f05a:	4680      	mov	r8, r0
 800f05c:	2300      	movs	r3, #0
 800f05e:	220a      	movs	r2, #10
 800f060:	4620      	mov	r0, r4
 800f062:	f000 fe79 	bl	800fd58 <__multadd>
 800f066:	4607      	mov	r7, r0
 800f068:	e7f0      	b.n	800f04c <_dtoa_r+0xb14>
 800f06a:	f1b9 0f00 	cmp.w	r9, #0
 800f06e:	9a00      	ldr	r2, [sp, #0]
 800f070:	bfcc      	ite	gt
 800f072:	464d      	movgt	r5, r9
 800f074:	2501      	movle	r5, #1
 800f076:	4415      	add	r5, r2
 800f078:	f04f 0800 	mov.w	r8, #0
 800f07c:	4659      	mov	r1, fp
 800f07e:	2201      	movs	r2, #1
 800f080:	4620      	mov	r0, r4
 800f082:	9301      	str	r3, [sp, #4]
 800f084:	f001 f862 	bl	801014c <__lshift>
 800f088:	4631      	mov	r1, r6
 800f08a:	4683      	mov	fp, r0
 800f08c:	f001 f8ca 	bl	8010224 <__mcmp>
 800f090:	2800      	cmp	r0, #0
 800f092:	dcb2      	bgt.n	800effa <_dtoa_r+0xac2>
 800f094:	d102      	bne.n	800f09c <_dtoa_r+0xb64>
 800f096:	9b01      	ldr	r3, [sp, #4]
 800f098:	07db      	lsls	r3, r3, #31
 800f09a:	d4ae      	bmi.n	800effa <_dtoa_r+0xac2>
 800f09c:	462b      	mov	r3, r5
 800f09e:	461d      	mov	r5, r3
 800f0a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f0a4:	2a30      	cmp	r2, #48	; 0x30
 800f0a6:	d0fa      	beq.n	800f09e <_dtoa_r+0xb66>
 800f0a8:	e6f7      	b.n	800ee9a <_dtoa_r+0x962>
 800f0aa:	9a00      	ldr	r2, [sp, #0]
 800f0ac:	429a      	cmp	r2, r3
 800f0ae:	d1a5      	bne.n	800effc <_dtoa_r+0xac4>
 800f0b0:	f10a 0a01 	add.w	sl, sl, #1
 800f0b4:	2331      	movs	r3, #49	; 0x31
 800f0b6:	e779      	b.n	800efac <_dtoa_r+0xa74>
 800f0b8:	4b13      	ldr	r3, [pc, #76]	; (800f108 <_dtoa_r+0xbd0>)
 800f0ba:	f7ff baaf 	b.w	800e61c <_dtoa_r+0xe4>
 800f0be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	f47f aa86 	bne.w	800e5d2 <_dtoa_r+0x9a>
 800f0c6:	4b11      	ldr	r3, [pc, #68]	; (800f10c <_dtoa_r+0xbd4>)
 800f0c8:	f7ff baa8 	b.w	800e61c <_dtoa_r+0xe4>
 800f0cc:	f1b9 0f00 	cmp.w	r9, #0
 800f0d0:	dc03      	bgt.n	800f0da <_dtoa_r+0xba2>
 800f0d2:	9b05      	ldr	r3, [sp, #20]
 800f0d4:	2b02      	cmp	r3, #2
 800f0d6:	f73f aec9 	bgt.w	800ee6c <_dtoa_r+0x934>
 800f0da:	9d00      	ldr	r5, [sp, #0]
 800f0dc:	4631      	mov	r1, r6
 800f0de:	4658      	mov	r0, fp
 800f0e0:	f7ff f99e 	bl	800e420 <quorem>
 800f0e4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f0e8:	f805 3b01 	strb.w	r3, [r5], #1
 800f0ec:	9a00      	ldr	r2, [sp, #0]
 800f0ee:	1aaa      	subs	r2, r5, r2
 800f0f0:	4591      	cmp	r9, r2
 800f0f2:	ddba      	ble.n	800f06a <_dtoa_r+0xb32>
 800f0f4:	4659      	mov	r1, fp
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	220a      	movs	r2, #10
 800f0fa:	4620      	mov	r0, r4
 800f0fc:	f000 fe2c 	bl	800fd58 <__multadd>
 800f100:	4683      	mov	fp, r0
 800f102:	e7eb      	b.n	800f0dc <_dtoa_r+0xba4>
 800f104:	080110cb 	.word	0x080110cb
 800f108:	08010fcc 	.word	0x08010fcc
 800f10c:	08011048 	.word	0x08011048

0800f110 <__sflush_r>:
 800f110:	898a      	ldrh	r2, [r1, #12]
 800f112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f116:	4605      	mov	r5, r0
 800f118:	0710      	lsls	r0, r2, #28
 800f11a:	460c      	mov	r4, r1
 800f11c:	d458      	bmi.n	800f1d0 <__sflush_r+0xc0>
 800f11e:	684b      	ldr	r3, [r1, #4]
 800f120:	2b00      	cmp	r3, #0
 800f122:	dc05      	bgt.n	800f130 <__sflush_r+0x20>
 800f124:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f126:	2b00      	cmp	r3, #0
 800f128:	dc02      	bgt.n	800f130 <__sflush_r+0x20>
 800f12a:	2000      	movs	r0, #0
 800f12c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f130:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f132:	2e00      	cmp	r6, #0
 800f134:	d0f9      	beq.n	800f12a <__sflush_r+0x1a>
 800f136:	2300      	movs	r3, #0
 800f138:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f13c:	682f      	ldr	r7, [r5, #0]
 800f13e:	602b      	str	r3, [r5, #0]
 800f140:	d032      	beq.n	800f1a8 <__sflush_r+0x98>
 800f142:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f144:	89a3      	ldrh	r3, [r4, #12]
 800f146:	075a      	lsls	r2, r3, #29
 800f148:	d505      	bpl.n	800f156 <__sflush_r+0x46>
 800f14a:	6863      	ldr	r3, [r4, #4]
 800f14c:	1ac0      	subs	r0, r0, r3
 800f14e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f150:	b10b      	cbz	r3, 800f156 <__sflush_r+0x46>
 800f152:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f154:	1ac0      	subs	r0, r0, r3
 800f156:	2300      	movs	r3, #0
 800f158:	4602      	mov	r2, r0
 800f15a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f15c:	6a21      	ldr	r1, [r4, #32]
 800f15e:	4628      	mov	r0, r5
 800f160:	47b0      	blx	r6
 800f162:	1c43      	adds	r3, r0, #1
 800f164:	89a3      	ldrh	r3, [r4, #12]
 800f166:	d106      	bne.n	800f176 <__sflush_r+0x66>
 800f168:	6829      	ldr	r1, [r5, #0]
 800f16a:	291d      	cmp	r1, #29
 800f16c:	d82c      	bhi.n	800f1c8 <__sflush_r+0xb8>
 800f16e:	4a2a      	ldr	r2, [pc, #168]	; (800f218 <__sflush_r+0x108>)
 800f170:	40ca      	lsrs	r2, r1
 800f172:	07d6      	lsls	r6, r2, #31
 800f174:	d528      	bpl.n	800f1c8 <__sflush_r+0xb8>
 800f176:	2200      	movs	r2, #0
 800f178:	6062      	str	r2, [r4, #4]
 800f17a:	04d9      	lsls	r1, r3, #19
 800f17c:	6922      	ldr	r2, [r4, #16]
 800f17e:	6022      	str	r2, [r4, #0]
 800f180:	d504      	bpl.n	800f18c <__sflush_r+0x7c>
 800f182:	1c42      	adds	r2, r0, #1
 800f184:	d101      	bne.n	800f18a <__sflush_r+0x7a>
 800f186:	682b      	ldr	r3, [r5, #0]
 800f188:	b903      	cbnz	r3, 800f18c <__sflush_r+0x7c>
 800f18a:	6560      	str	r0, [r4, #84]	; 0x54
 800f18c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f18e:	602f      	str	r7, [r5, #0]
 800f190:	2900      	cmp	r1, #0
 800f192:	d0ca      	beq.n	800f12a <__sflush_r+0x1a>
 800f194:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f198:	4299      	cmp	r1, r3
 800f19a:	d002      	beq.n	800f1a2 <__sflush_r+0x92>
 800f19c:	4628      	mov	r0, r5
 800f19e:	f7fd f9fb 	bl	800c598 <_free_r>
 800f1a2:	2000      	movs	r0, #0
 800f1a4:	6360      	str	r0, [r4, #52]	; 0x34
 800f1a6:	e7c1      	b.n	800f12c <__sflush_r+0x1c>
 800f1a8:	6a21      	ldr	r1, [r4, #32]
 800f1aa:	2301      	movs	r3, #1
 800f1ac:	4628      	mov	r0, r5
 800f1ae:	47b0      	blx	r6
 800f1b0:	1c41      	adds	r1, r0, #1
 800f1b2:	d1c7      	bne.n	800f144 <__sflush_r+0x34>
 800f1b4:	682b      	ldr	r3, [r5, #0]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d0c4      	beq.n	800f144 <__sflush_r+0x34>
 800f1ba:	2b1d      	cmp	r3, #29
 800f1bc:	d001      	beq.n	800f1c2 <__sflush_r+0xb2>
 800f1be:	2b16      	cmp	r3, #22
 800f1c0:	d101      	bne.n	800f1c6 <__sflush_r+0xb6>
 800f1c2:	602f      	str	r7, [r5, #0]
 800f1c4:	e7b1      	b.n	800f12a <__sflush_r+0x1a>
 800f1c6:	89a3      	ldrh	r3, [r4, #12]
 800f1c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1cc:	81a3      	strh	r3, [r4, #12]
 800f1ce:	e7ad      	b.n	800f12c <__sflush_r+0x1c>
 800f1d0:	690f      	ldr	r7, [r1, #16]
 800f1d2:	2f00      	cmp	r7, #0
 800f1d4:	d0a9      	beq.n	800f12a <__sflush_r+0x1a>
 800f1d6:	0793      	lsls	r3, r2, #30
 800f1d8:	680e      	ldr	r6, [r1, #0]
 800f1da:	bf08      	it	eq
 800f1dc:	694b      	ldreq	r3, [r1, #20]
 800f1de:	600f      	str	r7, [r1, #0]
 800f1e0:	bf18      	it	ne
 800f1e2:	2300      	movne	r3, #0
 800f1e4:	eba6 0807 	sub.w	r8, r6, r7
 800f1e8:	608b      	str	r3, [r1, #8]
 800f1ea:	f1b8 0f00 	cmp.w	r8, #0
 800f1ee:	dd9c      	ble.n	800f12a <__sflush_r+0x1a>
 800f1f0:	6a21      	ldr	r1, [r4, #32]
 800f1f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f1f4:	4643      	mov	r3, r8
 800f1f6:	463a      	mov	r2, r7
 800f1f8:	4628      	mov	r0, r5
 800f1fa:	47b0      	blx	r6
 800f1fc:	2800      	cmp	r0, #0
 800f1fe:	dc06      	bgt.n	800f20e <__sflush_r+0xfe>
 800f200:	89a3      	ldrh	r3, [r4, #12]
 800f202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f206:	81a3      	strh	r3, [r4, #12]
 800f208:	f04f 30ff 	mov.w	r0, #4294967295
 800f20c:	e78e      	b.n	800f12c <__sflush_r+0x1c>
 800f20e:	4407      	add	r7, r0
 800f210:	eba8 0800 	sub.w	r8, r8, r0
 800f214:	e7e9      	b.n	800f1ea <__sflush_r+0xda>
 800f216:	bf00      	nop
 800f218:	20400001 	.word	0x20400001

0800f21c <_fflush_r>:
 800f21c:	b538      	push	{r3, r4, r5, lr}
 800f21e:	690b      	ldr	r3, [r1, #16]
 800f220:	4605      	mov	r5, r0
 800f222:	460c      	mov	r4, r1
 800f224:	b913      	cbnz	r3, 800f22c <_fflush_r+0x10>
 800f226:	2500      	movs	r5, #0
 800f228:	4628      	mov	r0, r5
 800f22a:	bd38      	pop	{r3, r4, r5, pc}
 800f22c:	b118      	cbz	r0, 800f236 <_fflush_r+0x1a>
 800f22e:	6983      	ldr	r3, [r0, #24]
 800f230:	b90b      	cbnz	r3, 800f236 <_fflush_r+0x1a>
 800f232:	f000 f887 	bl	800f344 <__sinit>
 800f236:	4b14      	ldr	r3, [pc, #80]	; (800f288 <_fflush_r+0x6c>)
 800f238:	429c      	cmp	r4, r3
 800f23a:	d11b      	bne.n	800f274 <_fflush_r+0x58>
 800f23c:	686c      	ldr	r4, [r5, #4]
 800f23e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d0ef      	beq.n	800f226 <_fflush_r+0xa>
 800f246:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f248:	07d0      	lsls	r0, r2, #31
 800f24a:	d404      	bmi.n	800f256 <_fflush_r+0x3a>
 800f24c:	0599      	lsls	r1, r3, #22
 800f24e:	d402      	bmi.n	800f256 <_fflush_r+0x3a>
 800f250:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f252:	f000 fc88 	bl	800fb66 <__retarget_lock_acquire_recursive>
 800f256:	4628      	mov	r0, r5
 800f258:	4621      	mov	r1, r4
 800f25a:	f7ff ff59 	bl	800f110 <__sflush_r>
 800f25e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f260:	07da      	lsls	r2, r3, #31
 800f262:	4605      	mov	r5, r0
 800f264:	d4e0      	bmi.n	800f228 <_fflush_r+0xc>
 800f266:	89a3      	ldrh	r3, [r4, #12]
 800f268:	059b      	lsls	r3, r3, #22
 800f26a:	d4dd      	bmi.n	800f228 <_fflush_r+0xc>
 800f26c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f26e:	f000 fc7b 	bl	800fb68 <__retarget_lock_release_recursive>
 800f272:	e7d9      	b.n	800f228 <_fflush_r+0xc>
 800f274:	4b05      	ldr	r3, [pc, #20]	; (800f28c <_fflush_r+0x70>)
 800f276:	429c      	cmp	r4, r3
 800f278:	d101      	bne.n	800f27e <_fflush_r+0x62>
 800f27a:	68ac      	ldr	r4, [r5, #8]
 800f27c:	e7df      	b.n	800f23e <_fflush_r+0x22>
 800f27e:	4b04      	ldr	r3, [pc, #16]	; (800f290 <_fflush_r+0x74>)
 800f280:	429c      	cmp	r4, r3
 800f282:	bf08      	it	eq
 800f284:	68ec      	ldreq	r4, [r5, #12]
 800f286:	e7da      	b.n	800f23e <_fflush_r+0x22>
 800f288:	080110fc 	.word	0x080110fc
 800f28c:	0801111c 	.word	0x0801111c
 800f290:	080110dc 	.word	0x080110dc

0800f294 <std>:
 800f294:	2300      	movs	r3, #0
 800f296:	b510      	push	{r4, lr}
 800f298:	4604      	mov	r4, r0
 800f29a:	e9c0 3300 	strd	r3, r3, [r0]
 800f29e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f2a2:	6083      	str	r3, [r0, #8]
 800f2a4:	8181      	strh	r1, [r0, #12]
 800f2a6:	6643      	str	r3, [r0, #100]	; 0x64
 800f2a8:	81c2      	strh	r2, [r0, #14]
 800f2aa:	6183      	str	r3, [r0, #24]
 800f2ac:	4619      	mov	r1, r3
 800f2ae:	2208      	movs	r2, #8
 800f2b0:	305c      	adds	r0, #92	; 0x5c
 800f2b2:	f7fd f969 	bl	800c588 <memset>
 800f2b6:	4b05      	ldr	r3, [pc, #20]	; (800f2cc <std+0x38>)
 800f2b8:	6263      	str	r3, [r4, #36]	; 0x24
 800f2ba:	4b05      	ldr	r3, [pc, #20]	; (800f2d0 <std+0x3c>)
 800f2bc:	62a3      	str	r3, [r4, #40]	; 0x28
 800f2be:	4b05      	ldr	r3, [pc, #20]	; (800f2d4 <std+0x40>)
 800f2c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f2c2:	4b05      	ldr	r3, [pc, #20]	; (800f2d8 <std+0x44>)
 800f2c4:	6224      	str	r4, [r4, #32]
 800f2c6:	6323      	str	r3, [r4, #48]	; 0x30
 800f2c8:	bd10      	pop	{r4, pc}
 800f2ca:	bf00      	nop
 800f2cc:	0800d44d 	.word	0x0800d44d
 800f2d0:	0800d46f 	.word	0x0800d46f
 800f2d4:	0800d4a7 	.word	0x0800d4a7
 800f2d8:	0800d4cb 	.word	0x0800d4cb

0800f2dc <_cleanup_r>:
 800f2dc:	4901      	ldr	r1, [pc, #4]	; (800f2e4 <_cleanup_r+0x8>)
 800f2de:	f000 b8af 	b.w	800f440 <_fwalk_reent>
 800f2e2:	bf00      	nop
 800f2e4:	0800f21d 	.word	0x0800f21d

0800f2e8 <__sfmoreglue>:
 800f2e8:	b570      	push	{r4, r5, r6, lr}
 800f2ea:	1e4a      	subs	r2, r1, #1
 800f2ec:	2568      	movs	r5, #104	; 0x68
 800f2ee:	4355      	muls	r5, r2
 800f2f0:	460e      	mov	r6, r1
 800f2f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f2f6:	f7fd f99f 	bl	800c638 <_malloc_r>
 800f2fa:	4604      	mov	r4, r0
 800f2fc:	b140      	cbz	r0, 800f310 <__sfmoreglue+0x28>
 800f2fe:	2100      	movs	r1, #0
 800f300:	e9c0 1600 	strd	r1, r6, [r0]
 800f304:	300c      	adds	r0, #12
 800f306:	60a0      	str	r0, [r4, #8]
 800f308:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f30c:	f7fd f93c 	bl	800c588 <memset>
 800f310:	4620      	mov	r0, r4
 800f312:	bd70      	pop	{r4, r5, r6, pc}

0800f314 <__sfp_lock_acquire>:
 800f314:	4801      	ldr	r0, [pc, #4]	; (800f31c <__sfp_lock_acquire+0x8>)
 800f316:	f000 bc26 	b.w	800fb66 <__retarget_lock_acquire_recursive>
 800f31a:	bf00      	nop
 800f31c:	20002d00 	.word	0x20002d00

0800f320 <__sfp_lock_release>:
 800f320:	4801      	ldr	r0, [pc, #4]	; (800f328 <__sfp_lock_release+0x8>)
 800f322:	f000 bc21 	b.w	800fb68 <__retarget_lock_release_recursive>
 800f326:	bf00      	nop
 800f328:	20002d00 	.word	0x20002d00

0800f32c <__sinit_lock_acquire>:
 800f32c:	4801      	ldr	r0, [pc, #4]	; (800f334 <__sinit_lock_acquire+0x8>)
 800f32e:	f000 bc1a 	b.w	800fb66 <__retarget_lock_acquire_recursive>
 800f332:	bf00      	nop
 800f334:	20002cfb 	.word	0x20002cfb

0800f338 <__sinit_lock_release>:
 800f338:	4801      	ldr	r0, [pc, #4]	; (800f340 <__sinit_lock_release+0x8>)
 800f33a:	f000 bc15 	b.w	800fb68 <__retarget_lock_release_recursive>
 800f33e:	bf00      	nop
 800f340:	20002cfb 	.word	0x20002cfb

0800f344 <__sinit>:
 800f344:	b510      	push	{r4, lr}
 800f346:	4604      	mov	r4, r0
 800f348:	f7ff fff0 	bl	800f32c <__sinit_lock_acquire>
 800f34c:	69a3      	ldr	r3, [r4, #24]
 800f34e:	b11b      	cbz	r3, 800f358 <__sinit+0x14>
 800f350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f354:	f7ff bff0 	b.w	800f338 <__sinit_lock_release>
 800f358:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f35c:	6523      	str	r3, [r4, #80]	; 0x50
 800f35e:	4b13      	ldr	r3, [pc, #76]	; (800f3ac <__sinit+0x68>)
 800f360:	4a13      	ldr	r2, [pc, #76]	; (800f3b0 <__sinit+0x6c>)
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	62a2      	str	r2, [r4, #40]	; 0x28
 800f366:	42a3      	cmp	r3, r4
 800f368:	bf04      	itt	eq
 800f36a:	2301      	moveq	r3, #1
 800f36c:	61a3      	streq	r3, [r4, #24]
 800f36e:	4620      	mov	r0, r4
 800f370:	f000 f820 	bl	800f3b4 <__sfp>
 800f374:	6060      	str	r0, [r4, #4]
 800f376:	4620      	mov	r0, r4
 800f378:	f000 f81c 	bl	800f3b4 <__sfp>
 800f37c:	60a0      	str	r0, [r4, #8]
 800f37e:	4620      	mov	r0, r4
 800f380:	f000 f818 	bl	800f3b4 <__sfp>
 800f384:	2200      	movs	r2, #0
 800f386:	60e0      	str	r0, [r4, #12]
 800f388:	2104      	movs	r1, #4
 800f38a:	6860      	ldr	r0, [r4, #4]
 800f38c:	f7ff ff82 	bl	800f294 <std>
 800f390:	68a0      	ldr	r0, [r4, #8]
 800f392:	2201      	movs	r2, #1
 800f394:	2109      	movs	r1, #9
 800f396:	f7ff ff7d 	bl	800f294 <std>
 800f39a:	68e0      	ldr	r0, [r4, #12]
 800f39c:	2202      	movs	r2, #2
 800f39e:	2112      	movs	r1, #18
 800f3a0:	f7ff ff78 	bl	800f294 <std>
 800f3a4:	2301      	movs	r3, #1
 800f3a6:	61a3      	str	r3, [r4, #24]
 800f3a8:	e7d2      	b.n	800f350 <__sinit+0xc>
 800f3aa:	bf00      	nop
 800f3ac:	08010fb8 	.word	0x08010fb8
 800f3b0:	0800f2dd 	.word	0x0800f2dd

0800f3b4 <__sfp>:
 800f3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3b6:	4607      	mov	r7, r0
 800f3b8:	f7ff ffac 	bl	800f314 <__sfp_lock_acquire>
 800f3bc:	4b1e      	ldr	r3, [pc, #120]	; (800f438 <__sfp+0x84>)
 800f3be:	681e      	ldr	r6, [r3, #0]
 800f3c0:	69b3      	ldr	r3, [r6, #24]
 800f3c2:	b913      	cbnz	r3, 800f3ca <__sfp+0x16>
 800f3c4:	4630      	mov	r0, r6
 800f3c6:	f7ff ffbd 	bl	800f344 <__sinit>
 800f3ca:	3648      	adds	r6, #72	; 0x48
 800f3cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f3d0:	3b01      	subs	r3, #1
 800f3d2:	d503      	bpl.n	800f3dc <__sfp+0x28>
 800f3d4:	6833      	ldr	r3, [r6, #0]
 800f3d6:	b30b      	cbz	r3, 800f41c <__sfp+0x68>
 800f3d8:	6836      	ldr	r6, [r6, #0]
 800f3da:	e7f7      	b.n	800f3cc <__sfp+0x18>
 800f3dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f3e0:	b9d5      	cbnz	r5, 800f418 <__sfp+0x64>
 800f3e2:	4b16      	ldr	r3, [pc, #88]	; (800f43c <__sfp+0x88>)
 800f3e4:	60e3      	str	r3, [r4, #12]
 800f3e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f3ea:	6665      	str	r5, [r4, #100]	; 0x64
 800f3ec:	f000 fbba 	bl	800fb64 <__retarget_lock_init_recursive>
 800f3f0:	f7ff ff96 	bl	800f320 <__sfp_lock_release>
 800f3f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f3f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f3fc:	6025      	str	r5, [r4, #0]
 800f3fe:	61a5      	str	r5, [r4, #24]
 800f400:	2208      	movs	r2, #8
 800f402:	4629      	mov	r1, r5
 800f404:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f408:	f7fd f8be 	bl	800c588 <memset>
 800f40c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f410:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f414:	4620      	mov	r0, r4
 800f416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f418:	3468      	adds	r4, #104	; 0x68
 800f41a:	e7d9      	b.n	800f3d0 <__sfp+0x1c>
 800f41c:	2104      	movs	r1, #4
 800f41e:	4638      	mov	r0, r7
 800f420:	f7ff ff62 	bl	800f2e8 <__sfmoreglue>
 800f424:	4604      	mov	r4, r0
 800f426:	6030      	str	r0, [r6, #0]
 800f428:	2800      	cmp	r0, #0
 800f42a:	d1d5      	bne.n	800f3d8 <__sfp+0x24>
 800f42c:	f7ff ff78 	bl	800f320 <__sfp_lock_release>
 800f430:	230c      	movs	r3, #12
 800f432:	603b      	str	r3, [r7, #0]
 800f434:	e7ee      	b.n	800f414 <__sfp+0x60>
 800f436:	bf00      	nop
 800f438:	08010fb8 	.word	0x08010fb8
 800f43c:	ffff0001 	.word	0xffff0001

0800f440 <_fwalk_reent>:
 800f440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f444:	4606      	mov	r6, r0
 800f446:	4688      	mov	r8, r1
 800f448:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f44c:	2700      	movs	r7, #0
 800f44e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f452:	f1b9 0901 	subs.w	r9, r9, #1
 800f456:	d505      	bpl.n	800f464 <_fwalk_reent+0x24>
 800f458:	6824      	ldr	r4, [r4, #0]
 800f45a:	2c00      	cmp	r4, #0
 800f45c:	d1f7      	bne.n	800f44e <_fwalk_reent+0xe>
 800f45e:	4638      	mov	r0, r7
 800f460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f464:	89ab      	ldrh	r3, [r5, #12]
 800f466:	2b01      	cmp	r3, #1
 800f468:	d907      	bls.n	800f47a <_fwalk_reent+0x3a>
 800f46a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f46e:	3301      	adds	r3, #1
 800f470:	d003      	beq.n	800f47a <_fwalk_reent+0x3a>
 800f472:	4629      	mov	r1, r5
 800f474:	4630      	mov	r0, r6
 800f476:	47c0      	blx	r8
 800f478:	4307      	orrs	r7, r0
 800f47a:	3568      	adds	r5, #104	; 0x68
 800f47c:	e7e9      	b.n	800f452 <_fwalk_reent+0x12>

0800f47e <rshift>:
 800f47e:	6903      	ldr	r3, [r0, #16]
 800f480:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f484:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f488:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f48c:	f100 0414 	add.w	r4, r0, #20
 800f490:	dd45      	ble.n	800f51e <rshift+0xa0>
 800f492:	f011 011f 	ands.w	r1, r1, #31
 800f496:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f49a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f49e:	d10c      	bne.n	800f4ba <rshift+0x3c>
 800f4a0:	f100 0710 	add.w	r7, r0, #16
 800f4a4:	4629      	mov	r1, r5
 800f4a6:	42b1      	cmp	r1, r6
 800f4a8:	d334      	bcc.n	800f514 <rshift+0x96>
 800f4aa:	1a9b      	subs	r3, r3, r2
 800f4ac:	009b      	lsls	r3, r3, #2
 800f4ae:	1eea      	subs	r2, r5, #3
 800f4b0:	4296      	cmp	r6, r2
 800f4b2:	bf38      	it	cc
 800f4b4:	2300      	movcc	r3, #0
 800f4b6:	4423      	add	r3, r4
 800f4b8:	e015      	b.n	800f4e6 <rshift+0x68>
 800f4ba:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f4be:	f1c1 0820 	rsb	r8, r1, #32
 800f4c2:	40cf      	lsrs	r7, r1
 800f4c4:	f105 0e04 	add.w	lr, r5, #4
 800f4c8:	46a1      	mov	r9, r4
 800f4ca:	4576      	cmp	r6, lr
 800f4cc:	46f4      	mov	ip, lr
 800f4ce:	d815      	bhi.n	800f4fc <rshift+0x7e>
 800f4d0:	1a9b      	subs	r3, r3, r2
 800f4d2:	009a      	lsls	r2, r3, #2
 800f4d4:	3a04      	subs	r2, #4
 800f4d6:	3501      	adds	r5, #1
 800f4d8:	42ae      	cmp	r6, r5
 800f4da:	bf38      	it	cc
 800f4dc:	2200      	movcc	r2, #0
 800f4de:	18a3      	adds	r3, r4, r2
 800f4e0:	50a7      	str	r7, [r4, r2]
 800f4e2:	b107      	cbz	r7, 800f4e6 <rshift+0x68>
 800f4e4:	3304      	adds	r3, #4
 800f4e6:	1b1a      	subs	r2, r3, r4
 800f4e8:	42a3      	cmp	r3, r4
 800f4ea:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f4ee:	bf08      	it	eq
 800f4f0:	2300      	moveq	r3, #0
 800f4f2:	6102      	str	r2, [r0, #16]
 800f4f4:	bf08      	it	eq
 800f4f6:	6143      	streq	r3, [r0, #20]
 800f4f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f4fc:	f8dc c000 	ldr.w	ip, [ip]
 800f500:	fa0c fc08 	lsl.w	ip, ip, r8
 800f504:	ea4c 0707 	orr.w	r7, ip, r7
 800f508:	f849 7b04 	str.w	r7, [r9], #4
 800f50c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f510:	40cf      	lsrs	r7, r1
 800f512:	e7da      	b.n	800f4ca <rshift+0x4c>
 800f514:	f851 cb04 	ldr.w	ip, [r1], #4
 800f518:	f847 cf04 	str.w	ip, [r7, #4]!
 800f51c:	e7c3      	b.n	800f4a6 <rshift+0x28>
 800f51e:	4623      	mov	r3, r4
 800f520:	e7e1      	b.n	800f4e6 <rshift+0x68>

0800f522 <__hexdig_fun>:
 800f522:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f526:	2b09      	cmp	r3, #9
 800f528:	d802      	bhi.n	800f530 <__hexdig_fun+0xe>
 800f52a:	3820      	subs	r0, #32
 800f52c:	b2c0      	uxtb	r0, r0
 800f52e:	4770      	bx	lr
 800f530:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f534:	2b05      	cmp	r3, #5
 800f536:	d801      	bhi.n	800f53c <__hexdig_fun+0x1a>
 800f538:	3847      	subs	r0, #71	; 0x47
 800f53a:	e7f7      	b.n	800f52c <__hexdig_fun+0xa>
 800f53c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f540:	2b05      	cmp	r3, #5
 800f542:	d801      	bhi.n	800f548 <__hexdig_fun+0x26>
 800f544:	3827      	subs	r0, #39	; 0x27
 800f546:	e7f1      	b.n	800f52c <__hexdig_fun+0xa>
 800f548:	2000      	movs	r0, #0
 800f54a:	4770      	bx	lr

0800f54c <__gethex>:
 800f54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f550:	ed2d 8b02 	vpush	{d8}
 800f554:	b089      	sub	sp, #36	; 0x24
 800f556:	ee08 0a10 	vmov	s16, r0
 800f55a:	9304      	str	r3, [sp, #16]
 800f55c:	4bbc      	ldr	r3, [pc, #752]	; (800f850 <__gethex+0x304>)
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	9301      	str	r3, [sp, #4]
 800f562:	4618      	mov	r0, r3
 800f564:	468b      	mov	fp, r1
 800f566:	4690      	mov	r8, r2
 800f568:	f7f0 fe42 	bl	80001f0 <strlen>
 800f56c:	9b01      	ldr	r3, [sp, #4]
 800f56e:	f8db 2000 	ldr.w	r2, [fp]
 800f572:	4403      	add	r3, r0
 800f574:	4682      	mov	sl, r0
 800f576:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f57a:	9305      	str	r3, [sp, #20]
 800f57c:	1c93      	adds	r3, r2, #2
 800f57e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f582:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f586:	32fe      	adds	r2, #254	; 0xfe
 800f588:	18d1      	adds	r1, r2, r3
 800f58a:	461f      	mov	r7, r3
 800f58c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f590:	9100      	str	r1, [sp, #0]
 800f592:	2830      	cmp	r0, #48	; 0x30
 800f594:	d0f8      	beq.n	800f588 <__gethex+0x3c>
 800f596:	f7ff ffc4 	bl	800f522 <__hexdig_fun>
 800f59a:	4604      	mov	r4, r0
 800f59c:	2800      	cmp	r0, #0
 800f59e:	d13a      	bne.n	800f616 <__gethex+0xca>
 800f5a0:	9901      	ldr	r1, [sp, #4]
 800f5a2:	4652      	mov	r2, sl
 800f5a4:	4638      	mov	r0, r7
 800f5a6:	f7fd ff94 	bl	800d4d2 <strncmp>
 800f5aa:	4605      	mov	r5, r0
 800f5ac:	2800      	cmp	r0, #0
 800f5ae:	d168      	bne.n	800f682 <__gethex+0x136>
 800f5b0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f5b4:	eb07 060a 	add.w	r6, r7, sl
 800f5b8:	f7ff ffb3 	bl	800f522 <__hexdig_fun>
 800f5bc:	2800      	cmp	r0, #0
 800f5be:	d062      	beq.n	800f686 <__gethex+0x13a>
 800f5c0:	4633      	mov	r3, r6
 800f5c2:	7818      	ldrb	r0, [r3, #0]
 800f5c4:	2830      	cmp	r0, #48	; 0x30
 800f5c6:	461f      	mov	r7, r3
 800f5c8:	f103 0301 	add.w	r3, r3, #1
 800f5cc:	d0f9      	beq.n	800f5c2 <__gethex+0x76>
 800f5ce:	f7ff ffa8 	bl	800f522 <__hexdig_fun>
 800f5d2:	2301      	movs	r3, #1
 800f5d4:	fab0 f480 	clz	r4, r0
 800f5d8:	0964      	lsrs	r4, r4, #5
 800f5da:	4635      	mov	r5, r6
 800f5dc:	9300      	str	r3, [sp, #0]
 800f5de:	463a      	mov	r2, r7
 800f5e0:	4616      	mov	r6, r2
 800f5e2:	3201      	adds	r2, #1
 800f5e4:	7830      	ldrb	r0, [r6, #0]
 800f5e6:	f7ff ff9c 	bl	800f522 <__hexdig_fun>
 800f5ea:	2800      	cmp	r0, #0
 800f5ec:	d1f8      	bne.n	800f5e0 <__gethex+0x94>
 800f5ee:	9901      	ldr	r1, [sp, #4]
 800f5f0:	4652      	mov	r2, sl
 800f5f2:	4630      	mov	r0, r6
 800f5f4:	f7fd ff6d 	bl	800d4d2 <strncmp>
 800f5f8:	b980      	cbnz	r0, 800f61c <__gethex+0xd0>
 800f5fa:	b94d      	cbnz	r5, 800f610 <__gethex+0xc4>
 800f5fc:	eb06 050a 	add.w	r5, r6, sl
 800f600:	462a      	mov	r2, r5
 800f602:	4616      	mov	r6, r2
 800f604:	3201      	adds	r2, #1
 800f606:	7830      	ldrb	r0, [r6, #0]
 800f608:	f7ff ff8b 	bl	800f522 <__hexdig_fun>
 800f60c:	2800      	cmp	r0, #0
 800f60e:	d1f8      	bne.n	800f602 <__gethex+0xb6>
 800f610:	1bad      	subs	r5, r5, r6
 800f612:	00ad      	lsls	r5, r5, #2
 800f614:	e004      	b.n	800f620 <__gethex+0xd4>
 800f616:	2400      	movs	r4, #0
 800f618:	4625      	mov	r5, r4
 800f61a:	e7e0      	b.n	800f5de <__gethex+0x92>
 800f61c:	2d00      	cmp	r5, #0
 800f61e:	d1f7      	bne.n	800f610 <__gethex+0xc4>
 800f620:	7833      	ldrb	r3, [r6, #0]
 800f622:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f626:	2b50      	cmp	r3, #80	; 0x50
 800f628:	d13b      	bne.n	800f6a2 <__gethex+0x156>
 800f62a:	7873      	ldrb	r3, [r6, #1]
 800f62c:	2b2b      	cmp	r3, #43	; 0x2b
 800f62e:	d02c      	beq.n	800f68a <__gethex+0x13e>
 800f630:	2b2d      	cmp	r3, #45	; 0x2d
 800f632:	d02e      	beq.n	800f692 <__gethex+0x146>
 800f634:	1c71      	adds	r1, r6, #1
 800f636:	f04f 0900 	mov.w	r9, #0
 800f63a:	7808      	ldrb	r0, [r1, #0]
 800f63c:	f7ff ff71 	bl	800f522 <__hexdig_fun>
 800f640:	1e43      	subs	r3, r0, #1
 800f642:	b2db      	uxtb	r3, r3
 800f644:	2b18      	cmp	r3, #24
 800f646:	d82c      	bhi.n	800f6a2 <__gethex+0x156>
 800f648:	f1a0 0210 	sub.w	r2, r0, #16
 800f64c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f650:	f7ff ff67 	bl	800f522 <__hexdig_fun>
 800f654:	1e43      	subs	r3, r0, #1
 800f656:	b2db      	uxtb	r3, r3
 800f658:	2b18      	cmp	r3, #24
 800f65a:	d91d      	bls.n	800f698 <__gethex+0x14c>
 800f65c:	f1b9 0f00 	cmp.w	r9, #0
 800f660:	d000      	beq.n	800f664 <__gethex+0x118>
 800f662:	4252      	negs	r2, r2
 800f664:	4415      	add	r5, r2
 800f666:	f8cb 1000 	str.w	r1, [fp]
 800f66a:	b1e4      	cbz	r4, 800f6a6 <__gethex+0x15a>
 800f66c:	9b00      	ldr	r3, [sp, #0]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	bf14      	ite	ne
 800f672:	2700      	movne	r7, #0
 800f674:	2706      	moveq	r7, #6
 800f676:	4638      	mov	r0, r7
 800f678:	b009      	add	sp, #36	; 0x24
 800f67a:	ecbd 8b02 	vpop	{d8}
 800f67e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f682:	463e      	mov	r6, r7
 800f684:	4625      	mov	r5, r4
 800f686:	2401      	movs	r4, #1
 800f688:	e7ca      	b.n	800f620 <__gethex+0xd4>
 800f68a:	f04f 0900 	mov.w	r9, #0
 800f68e:	1cb1      	adds	r1, r6, #2
 800f690:	e7d3      	b.n	800f63a <__gethex+0xee>
 800f692:	f04f 0901 	mov.w	r9, #1
 800f696:	e7fa      	b.n	800f68e <__gethex+0x142>
 800f698:	230a      	movs	r3, #10
 800f69a:	fb03 0202 	mla	r2, r3, r2, r0
 800f69e:	3a10      	subs	r2, #16
 800f6a0:	e7d4      	b.n	800f64c <__gethex+0x100>
 800f6a2:	4631      	mov	r1, r6
 800f6a4:	e7df      	b.n	800f666 <__gethex+0x11a>
 800f6a6:	1bf3      	subs	r3, r6, r7
 800f6a8:	3b01      	subs	r3, #1
 800f6aa:	4621      	mov	r1, r4
 800f6ac:	2b07      	cmp	r3, #7
 800f6ae:	dc0b      	bgt.n	800f6c8 <__gethex+0x17c>
 800f6b0:	ee18 0a10 	vmov	r0, s16
 800f6b4:	f000 faee 	bl	800fc94 <_Balloc>
 800f6b8:	4604      	mov	r4, r0
 800f6ba:	b940      	cbnz	r0, 800f6ce <__gethex+0x182>
 800f6bc:	4b65      	ldr	r3, [pc, #404]	; (800f854 <__gethex+0x308>)
 800f6be:	4602      	mov	r2, r0
 800f6c0:	21de      	movs	r1, #222	; 0xde
 800f6c2:	4865      	ldr	r0, [pc, #404]	; (800f858 <__gethex+0x30c>)
 800f6c4:	f001 fa8e 	bl	8010be4 <__assert_func>
 800f6c8:	3101      	adds	r1, #1
 800f6ca:	105b      	asrs	r3, r3, #1
 800f6cc:	e7ee      	b.n	800f6ac <__gethex+0x160>
 800f6ce:	f100 0914 	add.w	r9, r0, #20
 800f6d2:	f04f 0b00 	mov.w	fp, #0
 800f6d6:	f1ca 0301 	rsb	r3, sl, #1
 800f6da:	f8cd 9008 	str.w	r9, [sp, #8]
 800f6de:	f8cd b000 	str.w	fp, [sp]
 800f6e2:	9306      	str	r3, [sp, #24]
 800f6e4:	42b7      	cmp	r7, r6
 800f6e6:	d340      	bcc.n	800f76a <__gethex+0x21e>
 800f6e8:	9802      	ldr	r0, [sp, #8]
 800f6ea:	9b00      	ldr	r3, [sp, #0]
 800f6ec:	f840 3b04 	str.w	r3, [r0], #4
 800f6f0:	eba0 0009 	sub.w	r0, r0, r9
 800f6f4:	1080      	asrs	r0, r0, #2
 800f6f6:	0146      	lsls	r6, r0, #5
 800f6f8:	6120      	str	r0, [r4, #16]
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	f000 fbc0 	bl	800fe80 <__hi0bits>
 800f700:	1a30      	subs	r0, r6, r0
 800f702:	f8d8 6000 	ldr.w	r6, [r8]
 800f706:	42b0      	cmp	r0, r6
 800f708:	dd63      	ble.n	800f7d2 <__gethex+0x286>
 800f70a:	1b87      	subs	r7, r0, r6
 800f70c:	4639      	mov	r1, r7
 800f70e:	4620      	mov	r0, r4
 800f710:	f000 ff5a 	bl	80105c8 <__any_on>
 800f714:	4682      	mov	sl, r0
 800f716:	b1a8      	cbz	r0, 800f744 <__gethex+0x1f8>
 800f718:	1e7b      	subs	r3, r7, #1
 800f71a:	1159      	asrs	r1, r3, #5
 800f71c:	f003 021f 	and.w	r2, r3, #31
 800f720:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f724:	f04f 0a01 	mov.w	sl, #1
 800f728:	fa0a f202 	lsl.w	r2, sl, r2
 800f72c:	420a      	tst	r2, r1
 800f72e:	d009      	beq.n	800f744 <__gethex+0x1f8>
 800f730:	4553      	cmp	r3, sl
 800f732:	dd05      	ble.n	800f740 <__gethex+0x1f4>
 800f734:	1eb9      	subs	r1, r7, #2
 800f736:	4620      	mov	r0, r4
 800f738:	f000 ff46 	bl	80105c8 <__any_on>
 800f73c:	2800      	cmp	r0, #0
 800f73e:	d145      	bne.n	800f7cc <__gethex+0x280>
 800f740:	f04f 0a02 	mov.w	sl, #2
 800f744:	4639      	mov	r1, r7
 800f746:	4620      	mov	r0, r4
 800f748:	f7ff fe99 	bl	800f47e <rshift>
 800f74c:	443d      	add	r5, r7
 800f74e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f752:	42ab      	cmp	r3, r5
 800f754:	da4c      	bge.n	800f7f0 <__gethex+0x2a4>
 800f756:	ee18 0a10 	vmov	r0, s16
 800f75a:	4621      	mov	r1, r4
 800f75c:	f000 fada 	bl	800fd14 <_Bfree>
 800f760:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f762:	2300      	movs	r3, #0
 800f764:	6013      	str	r3, [r2, #0]
 800f766:	27a3      	movs	r7, #163	; 0xa3
 800f768:	e785      	b.n	800f676 <__gethex+0x12a>
 800f76a:	1e73      	subs	r3, r6, #1
 800f76c:	9a05      	ldr	r2, [sp, #20]
 800f76e:	9303      	str	r3, [sp, #12]
 800f770:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f774:	4293      	cmp	r3, r2
 800f776:	d019      	beq.n	800f7ac <__gethex+0x260>
 800f778:	f1bb 0f20 	cmp.w	fp, #32
 800f77c:	d107      	bne.n	800f78e <__gethex+0x242>
 800f77e:	9b02      	ldr	r3, [sp, #8]
 800f780:	9a00      	ldr	r2, [sp, #0]
 800f782:	f843 2b04 	str.w	r2, [r3], #4
 800f786:	9302      	str	r3, [sp, #8]
 800f788:	2300      	movs	r3, #0
 800f78a:	9300      	str	r3, [sp, #0]
 800f78c:	469b      	mov	fp, r3
 800f78e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f792:	f7ff fec6 	bl	800f522 <__hexdig_fun>
 800f796:	9b00      	ldr	r3, [sp, #0]
 800f798:	f000 000f 	and.w	r0, r0, #15
 800f79c:	fa00 f00b 	lsl.w	r0, r0, fp
 800f7a0:	4303      	orrs	r3, r0
 800f7a2:	9300      	str	r3, [sp, #0]
 800f7a4:	f10b 0b04 	add.w	fp, fp, #4
 800f7a8:	9b03      	ldr	r3, [sp, #12]
 800f7aa:	e00d      	b.n	800f7c8 <__gethex+0x27c>
 800f7ac:	9b03      	ldr	r3, [sp, #12]
 800f7ae:	9a06      	ldr	r2, [sp, #24]
 800f7b0:	4413      	add	r3, r2
 800f7b2:	42bb      	cmp	r3, r7
 800f7b4:	d3e0      	bcc.n	800f778 <__gethex+0x22c>
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	9901      	ldr	r1, [sp, #4]
 800f7ba:	9307      	str	r3, [sp, #28]
 800f7bc:	4652      	mov	r2, sl
 800f7be:	f7fd fe88 	bl	800d4d2 <strncmp>
 800f7c2:	9b07      	ldr	r3, [sp, #28]
 800f7c4:	2800      	cmp	r0, #0
 800f7c6:	d1d7      	bne.n	800f778 <__gethex+0x22c>
 800f7c8:	461e      	mov	r6, r3
 800f7ca:	e78b      	b.n	800f6e4 <__gethex+0x198>
 800f7cc:	f04f 0a03 	mov.w	sl, #3
 800f7d0:	e7b8      	b.n	800f744 <__gethex+0x1f8>
 800f7d2:	da0a      	bge.n	800f7ea <__gethex+0x29e>
 800f7d4:	1a37      	subs	r7, r6, r0
 800f7d6:	4621      	mov	r1, r4
 800f7d8:	ee18 0a10 	vmov	r0, s16
 800f7dc:	463a      	mov	r2, r7
 800f7de:	f000 fcb5 	bl	801014c <__lshift>
 800f7e2:	1bed      	subs	r5, r5, r7
 800f7e4:	4604      	mov	r4, r0
 800f7e6:	f100 0914 	add.w	r9, r0, #20
 800f7ea:	f04f 0a00 	mov.w	sl, #0
 800f7ee:	e7ae      	b.n	800f74e <__gethex+0x202>
 800f7f0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f7f4:	42a8      	cmp	r0, r5
 800f7f6:	dd72      	ble.n	800f8de <__gethex+0x392>
 800f7f8:	1b45      	subs	r5, r0, r5
 800f7fa:	42ae      	cmp	r6, r5
 800f7fc:	dc36      	bgt.n	800f86c <__gethex+0x320>
 800f7fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f802:	2b02      	cmp	r3, #2
 800f804:	d02a      	beq.n	800f85c <__gethex+0x310>
 800f806:	2b03      	cmp	r3, #3
 800f808:	d02c      	beq.n	800f864 <__gethex+0x318>
 800f80a:	2b01      	cmp	r3, #1
 800f80c:	d115      	bne.n	800f83a <__gethex+0x2ee>
 800f80e:	42ae      	cmp	r6, r5
 800f810:	d113      	bne.n	800f83a <__gethex+0x2ee>
 800f812:	2e01      	cmp	r6, #1
 800f814:	d10b      	bne.n	800f82e <__gethex+0x2e2>
 800f816:	9a04      	ldr	r2, [sp, #16]
 800f818:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f81c:	6013      	str	r3, [r2, #0]
 800f81e:	2301      	movs	r3, #1
 800f820:	6123      	str	r3, [r4, #16]
 800f822:	f8c9 3000 	str.w	r3, [r9]
 800f826:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f828:	2762      	movs	r7, #98	; 0x62
 800f82a:	601c      	str	r4, [r3, #0]
 800f82c:	e723      	b.n	800f676 <__gethex+0x12a>
 800f82e:	1e71      	subs	r1, r6, #1
 800f830:	4620      	mov	r0, r4
 800f832:	f000 fec9 	bl	80105c8 <__any_on>
 800f836:	2800      	cmp	r0, #0
 800f838:	d1ed      	bne.n	800f816 <__gethex+0x2ca>
 800f83a:	ee18 0a10 	vmov	r0, s16
 800f83e:	4621      	mov	r1, r4
 800f840:	f000 fa68 	bl	800fd14 <_Bfree>
 800f844:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f846:	2300      	movs	r3, #0
 800f848:	6013      	str	r3, [r2, #0]
 800f84a:	2750      	movs	r7, #80	; 0x50
 800f84c:	e713      	b.n	800f676 <__gethex+0x12a>
 800f84e:	bf00      	nop
 800f850:	080111a8 	.word	0x080111a8
 800f854:	080110cb 	.word	0x080110cb
 800f858:	0801113c 	.word	0x0801113c
 800f85c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d1eb      	bne.n	800f83a <__gethex+0x2ee>
 800f862:	e7d8      	b.n	800f816 <__gethex+0x2ca>
 800f864:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f866:	2b00      	cmp	r3, #0
 800f868:	d1d5      	bne.n	800f816 <__gethex+0x2ca>
 800f86a:	e7e6      	b.n	800f83a <__gethex+0x2ee>
 800f86c:	1e6f      	subs	r7, r5, #1
 800f86e:	f1ba 0f00 	cmp.w	sl, #0
 800f872:	d131      	bne.n	800f8d8 <__gethex+0x38c>
 800f874:	b127      	cbz	r7, 800f880 <__gethex+0x334>
 800f876:	4639      	mov	r1, r7
 800f878:	4620      	mov	r0, r4
 800f87a:	f000 fea5 	bl	80105c8 <__any_on>
 800f87e:	4682      	mov	sl, r0
 800f880:	117b      	asrs	r3, r7, #5
 800f882:	2101      	movs	r1, #1
 800f884:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f888:	f007 071f 	and.w	r7, r7, #31
 800f88c:	fa01 f707 	lsl.w	r7, r1, r7
 800f890:	421f      	tst	r7, r3
 800f892:	4629      	mov	r1, r5
 800f894:	4620      	mov	r0, r4
 800f896:	bf18      	it	ne
 800f898:	f04a 0a02 	orrne.w	sl, sl, #2
 800f89c:	1b76      	subs	r6, r6, r5
 800f89e:	f7ff fdee 	bl	800f47e <rshift>
 800f8a2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f8a6:	2702      	movs	r7, #2
 800f8a8:	f1ba 0f00 	cmp.w	sl, #0
 800f8ac:	d048      	beq.n	800f940 <__gethex+0x3f4>
 800f8ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f8b2:	2b02      	cmp	r3, #2
 800f8b4:	d015      	beq.n	800f8e2 <__gethex+0x396>
 800f8b6:	2b03      	cmp	r3, #3
 800f8b8:	d017      	beq.n	800f8ea <__gethex+0x39e>
 800f8ba:	2b01      	cmp	r3, #1
 800f8bc:	d109      	bne.n	800f8d2 <__gethex+0x386>
 800f8be:	f01a 0f02 	tst.w	sl, #2
 800f8c2:	d006      	beq.n	800f8d2 <__gethex+0x386>
 800f8c4:	f8d9 0000 	ldr.w	r0, [r9]
 800f8c8:	ea4a 0a00 	orr.w	sl, sl, r0
 800f8cc:	f01a 0f01 	tst.w	sl, #1
 800f8d0:	d10e      	bne.n	800f8f0 <__gethex+0x3a4>
 800f8d2:	f047 0710 	orr.w	r7, r7, #16
 800f8d6:	e033      	b.n	800f940 <__gethex+0x3f4>
 800f8d8:	f04f 0a01 	mov.w	sl, #1
 800f8dc:	e7d0      	b.n	800f880 <__gethex+0x334>
 800f8de:	2701      	movs	r7, #1
 800f8e0:	e7e2      	b.n	800f8a8 <__gethex+0x35c>
 800f8e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f8e4:	f1c3 0301 	rsb	r3, r3, #1
 800f8e8:	9315      	str	r3, [sp, #84]	; 0x54
 800f8ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d0f0      	beq.n	800f8d2 <__gethex+0x386>
 800f8f0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f8f4:	f104 0314 	add.w	r3, r4, #20
 800f8f8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f8fc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f900:	f04f 0c00 	mov.w	ip, #0
 800f904:	4618      	mov	r0, r3
 800f906:	f853 2b04 	ldr.w	r2, [r3], #4
 800f90a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f90e:	d01c      	beq.n	800f94a <__gethex+0x3fe>
 800f910:	3201      	adds	r2, #1
 800f912:	6002      	str	r2, [r0, #0]
 800f914:	2f02      	cmp	r7, #2
 800f916:	f104 0314 	add.w	r3, r4, #20
 800f91a:	d13f      	bne.n	800f99c <__gethex+0x450>
 800f91c:	f8d8 2000 	ldr.w	r2, [r8]
 800f920:	3a01      	subs	r2, #1
 800f922:	42b2      	cmp	r2, r6
 800f924:	d10a      	bne.n	800f93c <__gethex+0x3f0>
 800f926:	1171      	asrs	r1, r6, #5
 800f928:	2201      	movs	r2, #1
 800f92a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f92e:	f006 061f 	and.w	r6, r6, #31
 800f932:	fa02 f606 	lsl.w	r6, r2, r6
 800f936:	421e      	tst	r6, r3
 800f938:	bf18      	it	ne
 800f93a:	4617      	movne	r7, r2
 800f93c:	f047 0720 	orr.w	r7, r7, #32
 800f940:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f942:	601c      	str	r4, [r3, #0]
 800f944:	9b04      	ldr	r3, [sp, #16]
 800f946:	601d      	str	r5, [r3, #0]
 800f948:	e695      	b.n	800f676 <__gethex+0x12a>
 800f94a:	4299      	cmp	r1, r3
 800f94c:	f843 cc04 	str.w	ip, [r3, #-4]
 800f950:	d8d8      	bhi.n	800f904 <__gethex+0x3b8>
 800f952:	68a3      	ldr	r3, [r4, #8]
 800f954:	459b      	cmp	fp, r3
 800f956:	db19      	blt.n	800f98c <__gethex+0x440>
 800f958:	6861      	ldr	r1, [r4, #4]
 800f95a:	ee18 0a10 	vmov	r0, s16
 800f95e:	3101      	adds	r1, #1
 800f960:	f000 f998 	bl	800fc94 <_Balloc>
 800f964:	4681      	mov	r9, r0
 800f966:	b918      	cbnz	r0, 800f970 <__gethex+0x424>
 800f968:	4b1a      	ldr	r3, [pc, #104]	; (800f9d4 <__gethex+0x488>)
 800f96a:	4602      	mov	r2, r0
 800f96c:	2184      	movs	r1, #132	; 0x84
 800f96e:	e6a8      	b.n	800f6c2 <__gethex+0x176>
 800f970:	6922      	ldr	r2, [r4, #16]
 800f972:	3202      	adds	r2, #2
 800f974:	f104 010c 	add.w	r1, r4, #12
 800f978:	0092      	lsls	r2, r2, #2
 800f97a:	300c      	adds	r0, #12
 800f97c:	f7fc fdf6 	bl	800c56c <memcpy>
 800f980:	4621      	mov	r1, r4
 800f982:	ee18 0a10 	vmov	r0, s16
 800f986:	f000 f9c5 	bl	800fd14 <_Bfree>
 800f98a:	464c      	mov	r4, r9
 800f98c:	6923      	ldr	r3, [r4, #16]
 800f98e:	1c5a      	adds	r2, r3, #1
 800f990:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f994:	6122      	str	r2, [r4, #16]
 800f996:	2201      	movs	r2, #1
 800f998:	615a      	str	r2, [r3, #20]
 800f99a:	e7bb      	b.n	800f914 <__gethex+0x3c8>
 800f99c:	6922      	ldr	r2, [r4, #16]
 800f99e:	455a      	cmp	r2, fp
 800f9a0:	dd0b      	ble.n	800f9ba <__gethex+0x46e>
 800f9a2:	2101      	movs	r1, #1
 800f9a4:	4620      	mov	r0, r4
 800f9a6:	f7ff fd6a 	bl	800f47e <rshift>
 800f9aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f9ae:	3501      	adds	r5, #1
 800f9b0:	42ab      	cmp	r3, r5
 800f9b2:	f6ff aed0 	blt.w	800f756 <__gethex+0x20a>
 800f9b6:	2701      	movs	r7, #1
 800f9b8:	e7c0      	b.n	800f93c <__gethex+0x3f0>
 800f9ba:	f016 061f 	ands.w	r6, r6, #31
 800f9be:	d0fa      	beq.n	800f9b6 <__gethex+0x46a>
 800f9c0:	449a      	add	sl, r3
 800f9c2:	f1c6 0620 	rsb	r6, r6, #32
 800f9c6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800f9ca:	f000 fa59 	bl	800fe80 <__hi0bits>
 800f9ce:	42b0      	cmp	r0, r6
 800f9d0:	dbe7      	blt.n	800f9a2 <__gethex+0x456>
 800f9d2:	e7f0      	b.n	800f9b6 <__gethex+0x46a>
 800f9d4:	080110cb 	.word	0x080110cb

0800f9d8 <L_shift>:
 800f9d8:	f1c2 0208 	rsb	r2, r2, #8
 800f9dc:	0092      	lsls	r2, r2, #2
 800f9de:	b570      	push	{r4, r5, r6, lr}
 800f9e0:	f1c2 0620 	rsb	r6, r2, #32
 800f9e4:	6843      	ldr	r3, [r0, #4]
 800f9e6:	6804      	ldr	r4, [r0, #0]
 800f9e8:	fa03 f506 	lsl.w	r5, r3, r6
 800f9ec:	432c      	orrs	r4, r5
 800f9ee:	40d3      	lsrs	r3, r2
 800f9f0:	6004      	str	r4, [r0, #0]
 800f9f2:	f840 3f04 	str.w	r3, [r0, #4]!
 800f9f6:	4288      	cmp	r0, r1
 800f9f8:	d3f4      	bcc.n	800f9e4 <L_shift+0xc>
 800f9fa:	bd70      	pop	{r4, r5, r6, pc}

0800f9fc <__match>:
 800f9fc:	b530      	push	{r4, r5, lr}
 800f9fe:	6803      	ldr	r3, [r0, #0]
 800fa00:	3301      	adds	r3, #1
 800fa02:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fa06:	b914      	cbnz	r4, 800fa0e <__match+0x12>
 800fa08:	6003      	str	r3, [r0, #0]
 800fa0a:	2001      	movs	r0, #1
 800fa0c:	bd30      	pop	{r4, r5, pc}
 800fa0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa12:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800fa16:	2d19      	cmp	r5, #25
 800fa18:	bf98      	it	ls
 800fa1a:	3220      	addls	r2, #32
 800fa1c:	42a2      	cmp	r2, r4
 800fa1e:	d0f0      	beq.n	800fa02 <__match+0x6>
 800fa20:	2000      	movs	r0, #0
 800fa22:	e7f3      	b.n	800fa0c <__match+0x10>

0800fa24 <__hexnan>:
 800fa24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa28:	680b      	ldr	r3, [r1, #0]
 800fa2a:	6801      	ldr	r1, [r0, #0]
 800fa2c:	115e      	asrs	r6, r3, #5
 800fa2e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fa32:	f013 031f 	ands.w	r3, r3, #31
 800fa36:	b087      	sub	sp, #28
 800fa38:	bf18      	it	ne
 800fa3a:	3604      	addne	r6, #4
 800fa3c:	2500      	movs	r5, #0
 800fa3e:	1f37      	subs	r7, r6, #4
 800fa40:	4682      	mov	sl, r0
 800fa42:	4690      	mov	r8, r2
 800fa44:	9301      	str	r3, [sp, #4]
 800fa46:	f846 5c04 	str.w	r5, [r6, #-4]
 800fa4a:	46b9      	mov	r9, r7
 800fa4c:	463c      	mov	r4, r7
 800fa4e:	9502      	str	r5, [sp, #8]
 800fa50:	46ab      	mov	fp, r5
 800fa52:	784a      	ldrb	r2, [r1, #1]
 800fa54:	1c4b      	adds	r3, r1, #1
 800fa56:	9303      	str	r3, [sp, #12]
 800fa58:	b342      	cbz	r2, 800faac <__hexnan+0x88>
 800fa5a:	4610      	mov	r0, r2
 800fa5c:	9105      	str	r1, [sp, #20]
 800fa5e:	9204      	str	r2, [sp, #16]
 800fa60:	f7ff fd5f 	bl	800f522 <__hexdig_fun>
 800fa64:	2800      	cmp	r0, #0
 800fa66:	d14f      	bne.n	800fb08 <__hexnan+0xe4>
 800fa68:	9a04      	ldr	r2, [sp, #16]
 800fa6a:	9905      	ldr	r1, [sp, #20]
 800fa6c:	2a20      	cmp	r2, #32
 800fa6e:	d818      	bhi.n	800faa2 <__hexnan+0x7e>
 800fa70:	9b02      	ldr	r3, [sp, #8]
 800fa72:	459b      	cmp	fp, r3
 800fa74:	dd13      	ble.n	800fa9e <__hexnan+0x7a>
 800fa76:	454c      	cmp	r4, r9
 800fa78:	d206      	bcs.n	800fa88 <__hexnan+0x64>
 800fa7a:	2d07      	cmp	r5, #7
 800fa7c:	dc04      	bgt.n	800fa88 <__hexnan+0x64>
 800fa7e:	462a      	mov	r2, r5
 800fa80:	4649      	mov	r1, r9
 800fa82:	4620      	mov	r0, r4
 800fa84:	f7ff ffa8 	bl	800f9d8 <L_shift>
 800fa88:	4544      	cmp	r4, r8
 800fa8a:	d950      	bls.n	800fb2e <__hexnan+0x10a>
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	f1a4 0904 	sub.w	r9, r4, #4
 800fa92:	f844 3c04 	str.w	r3, [r4, #-4]
 800fa96:	f8cd b008 	str.w	fp, [sp, #8]
 800fa9a:	464c      	mov	r4, r9
 800fa9c:	461d      	mov	r5, r3
 800fa9e:	9903      	ldr	r1, [sp, #12]
 800faa0:	e7d7      	b.n	800fa52 <__hexnan+0x2e>
 800faa2:	2a29      	cmp	r2, #41	; 0x29
 800faa4:	d156      	bne.n	800fb54 <__hexnan+0x130>
 800faa6:	3102      	adds	r1, #2
 800faa8:	f8ca 1000 	str.w	r1, [sl]
 800faac:	f1bb 0f00 	cmp.w	fp, #0
 800fab0:	d050      	beq.n	800fb54 <__hexnan+0x130>
 800fab2:	454c      	cmp	r4, r9
 800fab4:	d206      	bcs.n	800fac4 <__hexnan+0xa0>
 800fab6:	2d07      	cmp	r5, #7
 800fab8:	dc04      	bgt.n	800fac4 <__hexnan+0xa0>
 800faba:	462a      	mov	r2, r5
 800fabc:	4649      	mov	r1, r9
 800fabe:	4620      	mov	r0, r4
 800fac0:	f7ff ff8a 	bl	800f9d8 <L_shift>
 800fac4:	4544      	cmp	r4, r8
 800fac6:	d934      	bls.n	800fb32 <__hexnan+0x10e>
 800fac8:	f1a8 0204 	sub.w	r2, r8, #4
 800facc:	4623      	mov	r3, r4
 800face:	f853 1b04 	ldr.w	r1, [r3], #4
 800fad2:	f842 1f04 	str.w	r1, [r2, #4]!
 800fad6:	429f      	cmp	r7, r3
 800fad8:	d2f9      	bcs.n	800face <__hexnan+0xaa>
 800fada:	1b3b      	subs	r3, r7, r4
 800fadc:	f023 0303 	bic.w	r3, r3, #3
 800fae0:	3304      	adds	r3, #4
 800fae2:	3401      	adds	r4, #1
 800fae4:	3e03      	subs	r6, #3
 800fae6:	42b4      	cmp	r4, r6
 800fae8:	bf88      	it	hi
 800faea:	2304      	movhi	r3, #4
 800faec:	4443      	add	r3, r8
 800faee:	2200      	movs	r2, #0
 800faf0:	f843 2b04 	str.w	r2, [r3], #4
 800faf4:	429f      	cmp	r7, r3
 800faf6:	d2fb      	bcs.n	800faf0 <__hexnan+0xcc>
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	b91b      	cbnz	r3, 800fb04 <__hexnan+0xe0>
 800fafc:	4547      	cmp	r7, r8
 800fafe:	d127      	bne.n	800fb50 <__hexnan+0x12c>
 800fb00:	2301      	movs	r3, #1
 800fb02:	603b      	str	r3, [r7, #0]
 800fb04:	2005      	movs	r0, #5
 800fb06:	e026      	b.n	800fb56 <__hexnan+0x132>
 800fb08:	3501      	adds	r5, #1
 800fb0a:	2d08      	cmp	r5, #8
 800fb0c:	f10b 0b01 	add.w	fp, fp, #1
 800fb10:	dd06      	ble.n	800fb20 <__hexnan+0xfc>
 800fb12:	4544      	cmp	r4, r8
 800fb14:	d9c3      	bls.n	800fa9e <__hexnan+0x7a>
 800fb16:	2300      	movs	r3, #0
 800fb18:	f844 3c04 	str.w	r3, [r4, #-4]
 800fb1c:	2501      	movs	r5, #1
 800fb1e:	3c04      	subs	r4, #4
 800fb20:	6822      	ldr	r2, [r4, #0]
 800fb22:	f000 000f 	and.w	r0, r0, #15
 800fb26:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800fb2a:	6022      	str	r2, [r4, #0]
 800fb2c:	e7b7      	b.n	800fa9e <__hexnan+0x7a>
 800fb2e:	2508      	movs	r5, #8
 800fb30:	e7b5      	b.n	800fa9e <__hexnan+0x7a>
 800fb32:	9b01      	ldr	r3, [sp, #4]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d0df      	beq.n	800faf8 <__hexnan+0xd4>
 800fb38:	f04f 32ff 	mov.w	r2, #4294967295
 800fb3c:	f1c3 0320 	rsb	r3, r3, #32
 800fb40:	fa22 f303 	lsr.w	r3, r2, r3
 800fb44:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fb48:	401a      	ands	r2, r3
 800fb4a:	f846 2c04 	str.w	r2, [r6, #-4]
 800fb4e:	e7d3      	b.n	800faf8 <__hexnan+0xd4>
 800fb50:	3f04      	subs	r7, #4
 800fb52:	e7d1      	b.n	800faf8 <__hexnan+0xd4>
 800fb54:	2004      	movs	r0, #4
 800fb56:	b007      	add	sp, #28
 800fb58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fb5c <_localeconv_r>:
 800fb5c:	4800      	ldr	r0, [pc, #0]	; (800fb60 <_localeconv_r+0x4>)
 800fb5e:	4770      	bx	lr
 800fb60:	200002f0 	.word	0x200002f0

0800fb64 <__retarget_lock_init_recursive>:
 800fb64:	4770      	bx	lr

0800fb66 <__retarget_lock_acquire_recursive>:
 800fb66:	4770      	bx	lr

0800fb68 <__retarget_lock_release_recursive>:
 800fb68:	4770      	bx	lr
	...

0800fb6c <_lseek_r>:
 800fb6c:	b538      	push	{r3, r4, r5, lr}
 800fb6e:	4d07      	ldr	r5, [pc, #28]	; (800fb8c <_lseek_r+0x20>)
 800fb70:	4604      	mov	r4, r0
 800fb72:	4608      	mov	r0, r1
 800fb74:	4611      	mov	r1, r2
 800fb76:	2200      	movs	r2, #0
 800fb78:	602a      	str	r2, [r5, #0]
 800fb7a:	461a      	mov	r2, r3
 800fb7c:	f7f2 ff3a 	bl	80029f4 <_lseek>
 800fb80:	1c43      	adds	r3, r0, #1
 800fb82:	d102      	bne.n	800fb8a <_lseek_r+0x1e>
 800fb84:	682b      	ldr	r3, [r5, #0]
 800fb86:	b103      	cbz	r3, 800fb8a <_lseek_r+0x1e>
 800fb88:	6023      	str	r3, [r4, #0]
 800fb8a:	bd38      	pop	{r3, r4, r5, pc}
 800fb8c:	20002d04 	.word	0x20002d04

0800fb90 <__swhatbuf_r>:
 800fb90:	b570      	push	{r4, r5, r6, lr}
 800fb92:	460e      	mov	r6, r1
 800fb94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb98:	2900      	cmp	r1, #0
 800fb9a:	b096      	sub	sp, #88	; 0x58
 800fb9c:	4614      	mov	r4, r2
 800fb9e:	461d      	mov	r5, r3
 800fba0:	da07      	bge.n	800fbb2 <__swhatbuf_r+0x22>
 800fba2:	2300      	movs	r3, #0
 800fba4:	602b      	str	r3, [r5, #0]
 800fba6:	89b3      	ldrh	r3, [r6, #12]
 800fba8:	061a      	lsls	r2, r3, #24
 800fbaa:	d410      	bmi.n	800fbce <__swhatbuf_r+0x3e>
 800fbac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fbb0:	e00e      	b.n	800fbd0 <__swhatbuf_r+0x40>
 800fbb2:	466a      	mov	r2, sp
 800fbb4:	f001 f846 	bl	8010c44 <_fstat_r>
 800fbb8:	2800      	cmp	r0, #0
 800fbba:	dbf2      	blt.n	800fba2 <__swhatbuf_r+0x12>
 800fbbc:	9a01      	ldr	r2, [sp, #4]
 800fbbe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fbc2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fbc6:	425a      	negs	r2, r3
 800fbc8:	415a      	adcs	r2, r3
 800fbca:	602a      	str	r2, [r5, #0]
 800fbcc:	e7ee      	b.n	800fbac <__swhatbuf_r+0x1c>
 800fbce:	2340      	movs	r3, #64	; 0x40
 800fbd0:	2000      	movs	r0, #0
 800fbd2:	6023      	str	r3, [r4, #0]
 800fbd4:	b016      	add	sp, #88	; 0x58
 800fbd6:	bd70      	pop	{r4, r5, r6, pc}

0800fbd8 <__smakebuf_r>:
 800fbd8:	898b      	ldrh	r3, [r1, #12]
 800fbda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fbdc:	079d      	lsls	r5, r3, #30
 800fbde:	4606      	mov	r6, r0
 800fbe0:	460c      	mov	r4, r1
 800fbe2:	d507      	bpl.n	800fbf4 <__smakebuf_r+0x1c>
 800fbe4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fbe8:	6023      	str	r3, [r4, #0]
 800fbea:	6123      	str	r3, [r4, #16]
 800fbec:	2301      	movs	r3, #1
 800fbee:	6163      	str	r3, [r4, #20]
 800fbf0:	b002      	add	sp, #8
 800fbf2:	bd70      	pop	{r4, r5, r6, pc}
 800fbf4:	ab01      	add	r3, sp, #4
 800fbf6:	466a      	mov	r2, sp
 800fbf8:	f7ff ffca 	bl	800fb90 <__swhatbuf_r>
 800fbfc:	9900      	ldr	r1, [sp, #0]
 800fbfe:	4605      	mov	r5, r0
 800fc00:	4630      	mov	r0, r6
 800fc02:	f7fc fd19 	bl	800c638 <_malloc_r>
 800fc06:	b948      	cbnz	r0, 800fc1c <__smakebuf_r+0x44>
 800fc08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc0c:	059a      	lsls	r2, r3, #22
 800fc0e:	d4ef      	bmi.n	800fbf0 <__smakebuf_r+0x18>
 800fc10:	f023 0303 	bic.w	r3, r3, #3
 800fc14:	f043 0302 	orr.w	r3, r3, #2
 800fc18:	81a3      	strh	r3, [r4, #12]
 800fc1a:	e7e3      	b.n	800fbe4 <__smakebuf_r+0xc>
 800fc1c:	4b0d      	ldr	r3, [pc, #52]	; (800fc54 <__smakebuf_r+0x7c>)
 800fc1e:	62b3      	str	r3, [r6, #40]	; 0x28
 800fc20:	89a3      	ldrh	r3, [r4, #12]
 800fc22:	6020      	str	r0, [r4, #0]
 800fc24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc28:	81a3      	strh	r3, [r4, #12]
 800fc2a:	9b00      	ldr	r3, [sp, #0]
 800fc2c:	6163      	str	r3, [r4, #20]
 800fc2e:	9b01      	ldr	r3, [sp, #4]
 800fc30:	6120      	str	r0, [r4, #16]
 800fc32:	b15b      	cbz	r3, 800fc4c <__smakebuf_r+0x74>
 800fc34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc38:	4630      	mov	r0, r6
 800fc3a:	f001 f815 	bl	8010c68 <_isatty_r>
 800fc3e:	b128      	cbz	r0, 800fc4c <__smakebuf_r+0x74>
 800fc40:	89a3      	ldrh	r3, [r4, #12]
 800fc42:	f023 0303 	bic.w	r3, r3, #3
 800fc46:	f043 0301 	orr.w	r3, r3, #1
 800fc4a:	81a3      	strh	r3, [r4, #12]
 800fc4c:	89a0      	ldrh	r0, [r4, #12]
 800fc4e:	4305      	orrs	r5, r0
 800fc50:	81a5      	strh	r5, [r4, #12]
 800fc52:	e7cd      	b.n	800fbf0 <__smakebuf_r+0x18>
 800fc54:	0800f2dd 	.word	0x0800f2dd

0800fc58 <__ascii_mbtowc>:
 800fc58:	b082      	sub	sp, #8
 800fc5a:	b901      	cbnz	r1, 800fc5e <__ascii_mbtowc+0x6>
 800fc5c:	a901      	add	r1, sp, #4
 800fc5e:	b142      	cbz	r2, 800fc72 <__ascii_mbtowc+0x1a>
 800fc60:	b14b      	cbz	r3, 800fc76 <__ascii_mbtowc+0x1e>
 800fc62:	7813      	ldrb	r3, [r2, #0]
 800fc64:	600b      	str	r3, [r1, #0]
 800fc66:	7812      	ldrb	r2, [r2, #0]
 800fc68:	1e10      	subs	r0, r2, #0
 800fc6a:	bf18      	it	ne
 800fc6c:	2001      	movne	r0, #1
 800fc6e:	b002      	add	sp, #8
 800fc70:	4770      	bx	lr
 800fc72:	4610      	mov	r0, r2
 800fc74:	e7fb      	b.n	800fc6e <__ascii_mbtowc+0x16>
 800fc76:	f06f 0001 	mvn.w	r0, #1
 800fc7a:	e7f8      	b.n	800fc6e <__ascii_mbtowc+0x16>

0800fc7c <__malloc_lock>:
 800fc7c:	4801      	ldr	r0, [pc, #4]	; (800fc84 <__malloc_lock+0x8>)
 800fc7e:	f7ff bf72 	b.w	800fb66 <__retarget_lock_acquire_recursive>
 800fc82:	bf00      	nop
 800fc84:	20002cfc 	.word	0x20002cfc

0800fc88 <__malloc_unlock>:
 800fc88:	4801      	ldr	r0, [pc, #4]	; (800fc90 <__malloc_unlock+0x8>)
 800fc8a:	f7ff bf6d 	b.w	800fb68 <__retarget_lock_release_recursive>
 800fc8e:	bf00      	nop
 800fc90:	20002cfc 	.word	0x20002cfc

0800fc94 <_Balloc>:
 800fc94:	b570      	push	{r4, r5, r6, lr}
 800fc96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fc98:	4604      	mov	r4, r0
 800fc9a:	460d      	mov	r5, r1
 800fc9c:	b976      	cbnz	r6, 800fcbc <_Balloc+0x28>
 800fc9e:	2010      	movs	r0, #16
 800fca0:	f7fc fc5c 	bl	800c55c <malloc>
 800fca4:	4602      	mov	r2, r0
 800fca6:	6260      	str	r0, [r4, #36]	; 0x24
 800fca8:	b920      	cbnz	r0, 800fcb4 <_Balloc+0x20>
 800fcaa:	4b18      	ldr	r3, [pc, #96]	; (800fd0c <_Balloc+0x78>)
 800fcac:	4818      	ldr	r0, [pc, #96]	; (800fd10 <_Balloc+0x7c>)
 800fcae:	2166      	movs	r1, #102	; 0x66
 800fcb0:	f000 ff98 	bl	8010be4 <__assert_func>
 800fcb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fcb8:	6006      	str	r6, [r0, #0]
 800fcba:	60c6      	str	r6, [r0, #12]
 800fcbc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fcbe:	68f3      	ldr	r3, [r6, #12]
 800fcc0:	b183      	cbz	r3, 800fce4 <_Balloc+0x50>
 800fcc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fcc4:	68db      	ldr	r3, [r3, #12]
 800fcc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fcca:	b9b8      	cbnz	r0, 800fcfc <_Balloc+0x68>
 800fccc:	2101      	movs	r1, #1
 800fcce:	fa01 f605 	lsl.w	r6, r1, r5
 800fcd2:	1d72      	adds	r2, r6, #5
 800fcd4:	0092      	lsls	r2, r2, #2
 800fcd6:	4620      	mov	r0, r4
 800fcd8:	f000 fc97 	bl	801060a <_calloc_r>
 800fcdc:	b160      	cbz	r0, 800fcf8 <_Balloc+0x64>
 800fcde:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fce2:	e00e      	b.n	800fd02 <_Balloc+0x6e>
 800fce4:	2221      	movs	r2, #33	; 0x21
 800fce6:	2104      	movs	r1, #4
 800fce8:	4620      	mov	r0, r4
 800fcea:	f000 fc8e 	bl	801060a <_calloc_r>
 800fcee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fcf0:	60f0      	str	r0, [r6, #12]
 800fcf2:	68db      	ldr	r3, [r3, #12]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d1e4      	bne.n	800fcc2 <_Balloc+0x2e>
 800fcf8:	2000      	movs	r0, #0
 800fcfa:	bd70      	pop	{r4, r5, r6, pc}
 800fcfc:	6802      	ldr	r2, [r0, #0]
 800fcfe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fd02:	2300      	movs	r3, #0
 800fd04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fd08:	e7f7      	b.n	800fcfa <_Balloc+0x66>
 800fd0a:	bf00      	nop
 800fd0c:	08011055 	.word	0x08011055
 800fd10:	080111bc 	.word	0x080111bc

0800fd14 <_Bfree>:
 800fd14:	b570      	push	{r4, r5, r6, lr}
 800fd16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fd18:	4605      	mov	r5, r0
 800fd1a:	460c      	mov	r4, r1
 800fd1c:	b976      	cbnz	r6, 800fd3c <_Bfree+0x28>
 800fd1e:	2010      	movs	r0, #16
 800fd20:	f7fc fc1c 	bl	800c55c <malloc>
 800fd24:	4602      	mov	r2, r0
 800fd26:	6268      	str	r0, [r5, #36]	; 0x24
 800fd28:	b920      	cbnz	r0, 800fd34 <_Bfree+0x20>
 800fd2a:	4b09      	ldr	r3, [pc, #36]	; (800fd50 <_Bfree+0x3c>)
 800fd2c:	4809      	ldr	r0, [pc, #36]	; (800fd54 <_Bfree+0x40>)
 800fd2e:	218a      	movs	r1, #138	; 0x8a
 800fd30:	f000 ff58 	bl	8010be4 <__assert_func>
 800fd34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fd38:	6006      	str	r6, [r0, #0]
 800fd3a:	60c6      	str	r6, [r0, #12]
 800fd3c:	b13c      	cbz	r4, 800fd4e <_Bfree+0x3a>
 800fd3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fd40:	6862      	ldr	r2, [r4, #4]
 800fd42:	68db      	ldr	r3, [r3, #12]
 800fd44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fd48:	6021      	str	r1, [r4, #0]
 800fd4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fd4e:	bd70      	pop	{r4, r5, r6, pc}
 800fd50:	08011055 	.word	0x08011055
 800fd54:	080111bc 	.word	0x080111bc

0800fd58 <__multadd>:
 800fd58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd5c:	690e      	ldr	r6, [r1, #16]
 800fd5e:	4607      	mov	r7, r0
 800fd60:	4698      	mov	r8, r3
 800fd62:	460c      	mov	r4, r1
 800fd64:	f101 0014 	add.w	r0, r1, #20
 800fd68:	2300      	movs	r3, #0
 800fd6a:	6805      	ldr	r5, [r0, #0]
 800fd6c:	b2a9      	uxth	r1, r5
 800fd6e:	fb02 8101 	mla	r1, r2, r1, r8
 800fd72:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800fd76:	0c2d      	lsrs	r5, r5, #16
 800fd78:	fb02 c505 	mla	r5, r2, r5, ip
 800fd7c:	b289      	uxth	r1, r1
 800fd7e:	3301      	adds	r3, #1
 800fd80:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800fd84:	429e      	cmp	r6, r3
 800fd86:	f840 1b04 	str.w	r1, [r0], #4
 800fd8a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800fd8e:	dcec      	bgt.n	800fd6a <__multadd+0x12>
 800fd90:	f1b8 0f00 	cmp.w	r8, #0
 800fd94:	d022      	beq.n	800fddc <__multadd+0x84>
 800fd96:	68a3      	ldr	r3, [r4, #8]
 800fd98:	42b3      	cmp	r3, r6
 800fd9a:	dc19      	bgt.n	800fdd0 <__multadd+0x78>
 800fd9c:	6861      	ldr	r1, [r4, #4]
 800fd9e:	4638      	mov	r0, r7
 800fda0:	3101      	adds	r1, #1
 800fda2:	f7ff ff77 	bl	800fc94 <_Balloc>
 800fda6:	4605      	mov	r5, r0
 800fda8:	b928      	cbnz	r0, 800fdb6 <__multadd+0x5e>
 800fdaa:	4602      	mov	r2, r0
 800fdac:	4b0d      	ldr	r3, [pc, #52]	; (800fde4 <__multadd+0x8c>)
 800fdae:	480e      	ldr	r0, [pc, #56]	; (800fde8 <__multadd+0x90>)
 800fdb0:	21b5      	movs	r1, #181	; 0xb5
 800fdb2:	f000 ff17 	bl	8010be4 <__assert_func>
 800fdb6:	6922      	ldr	r2, [r4, #16]
 800fdb8:	3202      	adds	r2, #2
 800fdba:	f104 010c 	add.w	r1, r4, #12
 800fdbe:	0092      	lsls	r2, r2, #2
 800fdc0:	300c      	adds	r0, #12
 800fdc2:	f7fc fbd3 	bl	800c56c <memcpy>
 800fdc6:	4621      	mov	r1, r4
 800fdc8:	4638      	mov	r0, r7
 800fdca:	f7ff ffa3 	bl	800fd14 <_Bfree>
 800fdce:	462c      	mov	r4, r5
 800fdd0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800fdd4:	3601      	adds	r6, #1
 800fdd6:	f8c3 8014 	str.w	r8, [r3, #20]
 800fdda:	6126      	str	r6, [r4, #16]
 800fddc:	4620      	mov	r0, r4
 800fdde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fde2:	bf00      	nop
 800fde4:	080110cb 	.word	0x080110cb
 800fde8:	080111bc 	.word	0x080111bc

0800fdec <__s2b>:
 800fdec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fdf0:	460c      	mov	r4, r1
 800fdf2:	4615      	mov	r5, r2
 800fdf4:	461f      	mov	r7, r3
 800fdf6:	2209      	movs	r2, #9
 800fdf8:	3308      	adds	r3, #8
 800fdfa:	4606      	mov	r6, r0
 800fdfc:	fb93 f3f2 	sdiv	r3, r3, r2
 800fe00:	2100      	movs	r1, #0
 800fe02:	2201      	movs	r2, #1
 800fe04:	429a      	cmp	r2, r3
 800fe06:	db09      	blt.n	800fe1c <__s2b+0x30>
 800fe08:	4630      	mov	r0, r6
 800fe0a:	f7ff ff43 	bl	800fc94 <_Balloc>
 800fe0e:	b940      	cbnz	r0, 800fe22 <__s2b+0x36>
 800fe10:	4602      	mov	r2, r0
 800fe12:	4b19      	ldr	r3, [pc, #100]	; (800fe78 <__s2b+0x8c>)
 800fe14:	4819      	ldr	r0, [pc, #100]	; (800fe7c <__s2b+0x90>)
 800fe16:	21ce      	movs	r1, #206	; 0xce
 800fe18:	f000 fee4 	bl	8010be4 <__assert_func>
 800fe1c:	0052      	lsls	r2, r2, #1
 800fe1e:	3101      	adds	r1, #1
 800fe20:	e7f0      	b.n	800fe04 <__s2b+0x18>
 800fe22:	9b08      	ldr	r3, [sp, #32]
 800fe24:	6143      	str	r3, [r0, #20]
 800fe26:	2d09      	cmp	r5, #9
 800fe28:	f04f 0301 	mov.w	r3, #1
 800fe2c:	6103      	str	r3, [r0, #16]
 800fe2e:	dd16      	ble.n	800fe5e <__s2b+0x72>
 800fe30:	f104 0909 	add.w	r9, r4, #9
 800fe34:	46c8      	mov	r8, r9
 800fe36:	442c      	add	r4, r5
 800fe38:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fe3c:	4601      	mov	r1, r0
 800fe3e:	3b30      	subs	r3, #48	; 0x30
 800fe40:	220a      	movs	r2, #10
 800fe42:	4630      	mov	r0, r6
 800fe44:	f7ff ff88 	bl	800fd58 <__multadd>
 800fe48:	45a0      	cmp	r8, r4
 800fe4a:	d1f5      	bne.n	800fe38 <__s2b+0x4c>
 800fe4c:	f1a5 0408 	sub.w	r4, r5, #8
 800fe50:	444c      	add	r4, r9
 800fe52:	1b2d      	subs	r5, r5, r4
 800fe54:	1963      	adds	r3, r4, r5
 800fe56:	42bb      	cmp	r3, r7
 800fe58:	db04      	blt.n	800fe64 <__s2b+0x78>
 800fe5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe5e:	340a      	adds	r4, #10
 800fe60:	2509      	movs	r5, #9
 800fe62:	e7f6      	b.n	800fe52 <__s2b+0x66>
 800fe64:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fe68:	4601      	mov	r1, r0
 800fe6a:	3b30      	subs	r3, #48	; 0x30
 800fe6c:	220a      	movs	r2, #10
 800fe6e:	4630      	mov	r0, r6
 800fe70:	f7ff ff72 	bl	800fd58 <__multadd>
 800fe74:	e7ee      	b.n	800fe54 <__s2b+0x68>
 800fe76:	bf00      	nop
 800fe78:	080110cb 	.word	0x080110cb
 800fe7c:	080111bc 	.word	0x080111bc

0800fe80 <__hi0bits>:
 800fe80:	0c03      	lsrs	r3, r0, #16
 800fe82:	041b      	lsls	r3, r3, #16
 800fe84:	b9d3      	cbnz	r3, 800febc <__hi0bits+0x3c>
 800fe86:	0400      	lsls	r0, r0, #16
 800fe88:	2310      	movs	r3, #16
 800fe8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fe8e:	bf04      	itt	eq
 800fe90:	0200      	lsleq	r0, r0, #8
 800fe92:	3308      	addeq	r3, #8
 800fe94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fe98:	bf04      	itt	eq
 800fe9a:	0100      	lsleq	r0, r0, #4
 800fe9c:	3304      	addeq	r3, #4
 800fe9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fea2:	bf04      	itt	eq
 800fea4:	0080      	lsleq	r0, r0, #2
 800fea6:	3302      	addeq	r3, #2
 800fea8:	2800      	cmp	r0, #0
 800feaa:	db05      	blt.n	800feb8 <__hi0bits+0x38>
 800feac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800feb0:	f103 0301 	add.w	r3, r3, #1
 800feb4:	bf08      	it	eq
 800feb6:	2320      	moveq	r3, #32
 800feb8:	4618      	mov	r0, r3
 800feba:	4770      	bx	lr
 800febc:	2300      	movs	r3, #0
 800febe:	e7e4      	b.n	800fe8a <__hi0bits+0xa>

0800fec0 <__lo0bits>:
 800fec0:	6803      	ldr	r3, [r0, #0]
 800fec2:	f013 0207 	ands.w	r2, r3, #7
 800fec6:	4601      	mov	r1, r0
 800fec8:	d00b      	beq.n	800fee2 <__lo0bits+0x22>
 800feca:	07da      	lsls	r2, r3, #31
 800fecc:	d424      	bmi.n	800ff18 <__lo0bits+0x58>
 800fece:	0798      	lsls	r0, r3, #30
 800fed0:	bf49      	itett	mi
 800fed2:	085b      	lsrmi	r3, r3, #1
 800fed4:	089b      	lsrpl	r3, r3, #2
 800fed6:	2001      	movmi	r0, #1
 800fed8:	600b      	strmi	r3, [r1, #0]
 800feda:	bf5c      	itt	pl
 800fedc:	600b      	strpl	r3, [r1, #0]
 800fede:	2002      	movpl	r0, #2
 800fee0:	4770      	bx	lr
 800fee2:	b298      	uxth	r0, r3
 800fee4:	b9b0      	cbnz	r0, 800ff14 <__lo0bits+0x54>
 800fee6:	0c1b      	lsrs	r3, r3, #16
 800fee8:	2010      	movs	r0, #16
 800feea:	f013 0fff 	tst.w	r3, #255	; 0xff
 800feee:	bf04      	itt	eq
 800fef0:	0a1b      	lsreq	r3, r3, #8
 800fef2:	3008      	addeq	r0, #8
 800fef4:	071a      	lsls	r2, r3, #28
 800fef6:	bf04      	itt	eq
 800fef8:	091b      	lsreq	r3, r3, #4
 800fefa:	3004      	addeq	r0, #4
 800fefc:	079a      	lsls	r2, r3, #30
 800fefe:	bf04      	itt	eq
 800ff00:	089b      	lsreq	r3, r3, #2
 800ff02:	3002      	addeq	r0, #2
 800ff04:	07da      	lsls	r2, r3, #31
 800ff06:	d403      	bmi.n	800ff10 <__lo0bits+0x50>
 800ff08:	085b      	lsrs	r3, r3, #1
 800ff0a:	f100 0001 	add.w	r0, r0, #1
 800ff0e:	d005      	beq.n	800ff1c <__lo0bits+0x5c>
 800ff10:	600b      	str	r3, [r1, #0]
 800ff12:	4770      	bx	lr
 800ff14:	4610      	mov	r0, r2
 800ff16:	e7e8      	b.n	800feea <__lo0bits+0x2a>
 800ff18:	2000      	movs	r0, #0
 800ff1a:	4770      	bx	lr
 800ff1c:	2020      	movs	r0, #32
 800ff1e:	4770      	bx	lr

0800ff20 <__i2b>:
 800ff20:	b510      	push	{r4, lr}
 800ff22:	460c      	mov	r4, r1
 800ff24:	2101      	movs	r1, #1
 800ff26:	f7ff feb5 	bl	800fc94 <_Balloc>
 800ff2a:	4602      	mov	r2, r0
 800ff2c:	b928      	cbnz	r0, 800ff3a <__i2b+0x1a>
 800ff2e:	4b05      	ldr	r3, [pc, #20]	; (800ff44 <__i2b+0x24>)
 800ff30:	4805      	ldr	r0, [pc, #20]	; (800ff48 <__i2b+0x28>)
 800ff32:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ff36:	f000 fe55 	bl	8010be4 <__assert_func>
 800ff3a:	2301      	movs	r3, #1
 800ff3c:	6144      	str	r4, [r0, #20]
 800ff3e:	6103      	str	r3, [r0, #16]
 800ff40:	bd10      	pop	{r4, pc}
 800ff42:	bf00      	nop
 800ff44:	080110cb 	.word	0x080110cb
 800ff48:	080111bc 	.word	0x080111bc

0800ff4c <__multiply>:
 800ff4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff50:	4614      	mov	r4, r2
 800ff52:	690a      	ldr	r2, [r1, #16]
 800ff54:	6923      	ldr	r3, [r4, #16]
 800ff56:	429a      	cmp	r2, r3
 800ff58:	bfb8      	it	lt
 800ff5a:	460b      	movlt	r3, r1
 800ff5c:	460d      	mov	r5, r1
 800ff5e:	bfbc      	itt	lt
 800ff60:	4625      	movlt	r5, r4
 800ff62:	461c      	movlt	r4, r3
 800ff64:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ff68:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ff6c:	68ab      	ldr	r3, [r5, #8]
 800ff6e:	6869      	ldr	r1, [r5, #4]
 800ff70:	eb0a 0709 	add.w	r7, sl, r9
 800ff74:	42bb      	cmp	r3, r7
 800ff76:	b085      	sub	sp, #20
 800ff78:	bfb8      	it	lt
 800ff7a:	3101      	addlt	r1, #1
 800ff7c:	f7ff fe8a 	bl	800fc94 <_Balloc>
 800ff80:	b930      	cbnz	r0, 800ff90 <__multiply+0x44>
 800ff82:	4602      	mov	r2, r0
 800ff84:	4b42      	ldr	r3, [pc, #264]	; (8010090 <__multiply+0x144>)
 800ff86:	4843      	ldr	r0, [pc, #268]	; (8010094 <__multiply+0x148>)
 800ff88:	f240 115d 	movw	r1, #349	; 0x15d
 800ff8c:	f000 fe2a 	bl	8010be4 <__assert_func>
 800ff90:	f100 0614 	add.w	r6, r0, #20
 800ff94:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ff98:	4633      	mov	r3, r6
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	4543      	cmp	r3, r8
 800ff9e:	d31e      	bcc.n	800ffde <__multiply+0x92>
 800ffa0:	f105 0c14 	add.w	ip, r5, #20
 800ffa4:	f104 0314 	add.w	r3, r4, #20
 800ffa8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ffac:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ffb0:	9202      	str	r2, [sp, #8]
 800ffb2:	ebac 0205 	sub.w	r2, ip, r5
 800ffb6:	3a15      	subs	r2, #21
 800ffb8:	f022 0203 	bic.w	r2, r2, #3
 800ffbc:	3204      	adds	r2, #4
 800ffbe:	f105 0115 	add.w	r1, r5, #21
 800ffc2:	458c      	cmp	ip, r1
 800ffc4:	bf38      	it	cc
 800ffc6:	2204      	movcc	r2, #4
 800ffc8:	9201      	str	r2, [sp, #4]
 800ffca:	9a02      	ldr	r2, [sp, #8]
 800ffcc:	9303      	str	r3, [sp, #12]
 800ffce:	429a      	cmp	r2, r3
 800ffd0:	d808      	bhi.n	800ffe4 <__multiply+0x98>
 800ffd2:	2f00      	cmp	r7, #0
 800ffd4:	dc55      	bgt.n	8010082 <__multiply+0x136>
 800ffd6:	6107      	str	r7, [r0, #16]
 800ffd8:	b005      	add	sp, #20
 800ffda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffde:	f843 2b04 	str.w	r2, [r3], #4
 800ffe2:	e7db      	b.n	800ff9c <__multiply+0x50>
 800ffe4:	f8b3 a000 	ldrh.w	sl, [r3]
 800ffe8:	f1ba 0f00 	cmp.w	sl, #0
 800ffec:	d020      	beq.n	8010030 <__multiply+0xe4>
 800ffee:	f105 0e14 	add.w	lr, r5, #20
 800fff2:	46b1      	mov	r9, r6
 800fff4:	2200      	movs	r2, #0
 800fff6:	f85e 4b04 	ldr.w	r4, [lr], #4
 800fffa:	f8d9 b000 	ldr.w	fp, [r9]
 800fffe:	b2a1      	uxth	r1, r4
 8010000:	fa1f fb8b 	uxth.w	fp, fp
 8010004:	fb0a b101 	mla	r1, sl, r1, fp
 8010008:	4411      	add	r1, r2
 801000a:	f8d9 2000 	ldr.w	r2, [r9]
 801000e:	0c24      	lsrs	r4, r4, #16
 8010010:	0c12      	lsrs	r2, r2, #16
 8010012:	fb0a 2404 	mla	r4, sl, r4, r2
 8010016:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801001a:	b289      	uxth	r1, r1
 801001c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010020:	45f4      	cmp	ip, lr
 8010022:	f849 1b04 	str.w	r1, [r9], #4
 8010026:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801002a:	d8e4      	bhi.n	800fff6 <__multiply+0xaa>
 801002c:	9901      	ldr	r1, [sp, #4]
 801002e:	5072      	str	r2, [r6, r1]
 8010030:	9a03      	ldr	r2, [sp, #12]
 8010032:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010036:	3304      	adds	r3, #4
 8010038:	f1b9 0f00 	cmp.w	r9, #0
 801003c:	d01f      	beq.n	801007e <__multiply+0x132>
 801003e:	6834      	ldr	r4, [r6, #0]
 8010040:	f105 0114 	add.w	r1, r5, #20
 8010044:	46b6      	mov	lr, r6
 8010046:	f04f 0a00 	mov.w	sl, #0
 801004a:	880a      	ldrh	r2, [r1, #0]
 801004c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8010050:	fb09 b202 	mla	r2, r9, r2, fp
 8010054:	4492      	add	sl, r2
 8010056:	b2a4      	uxth	r4, r4
 8010058:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801005c:	f84e 4b04 	str.w	r4, [lr], #4
 8010060:	f851 4b04 	ldr.w	r4, [r1], #4
 8010064:	f8be 2000 	ldrh.w	r2, [lr]
 8010068:	0c24      	lsrs	r4, r4, #16
 801006a:	fb09 2404 	mla	r4, r9, r4, r2
 801006e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8010072:	458c      	cmp	ip, r1
 8010074:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010078:	d8e7      	bhi.n	801004a <__multiply+0xfe>
 801007a:	9a01      	ldr	r2, [sp, #4]
 801007c:	50b4      	str	r4, [r6, r2]
 801007e:	3604      	adds	r6, #4
 8010080:	e7a3      	b.n	800ffca <__multiply+0x7e>
 8010082:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010086:	2b00      	cmp	r3, #0
 8010088:	d1a5      	bne.n	800ffd6 <__multiply+0x8a>
 801008a:	3f01      	subs	r7, #1
 801008c:	e7a1      	b.n	800ffd2 <__multiply+0x86>
 801008e:	bf00      	nop
 8010090:	080110cb 	.word	0x080110cb
 8010094:	080111bc 	.word	0x080111bc

08010098 <__pow5mult>:
 8010098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801009c:	4615      	mov	r5, r2
 801009e:	f012 0203 	ands.w	r2, r2, #3
 80100a2:	4606      	mov	r6, r0
 80100a4:	460f      	mov	r7, r1
 80100a6:	d007      	beq.n	80100b8 <__pow5mult+0x20>
 80100a8:	4c25      	ldr	r4, [pc, #148]	; (8010140 <__pow5mult+0xa8>)
 80100aa:	3a01      	subs	r2, #1
 80100ac:	2300      	movs	r3, #0
 80100ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80100b2:	f7ff fe51 	bl	800fd58 <__multadd>
 80100b6:	4607      	mov	r7, r0
 80100b8:	10ad      	asrs	r5, r5, #2
 80100ba:	d03d      	beq.n	8010138 <__pow5mult+0xa0>
 80100bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80100be:	b97c      	cbnz	r4, 80100e0 <__pow5mult+0x48>
 80100c0:	2010      	movs	r0, #16
 80100c2:	f7fc fa4b 	bl	800c55c <malloc>
 80100c6:	4602      	mov	r2, r0
 80100c8:	6270      	str	r0, [r6, #36]	; 0x24
 80100ca:	b928      	cbnz	r0, 80100d8 <__pow5mult+0x40>
 80100cc:	4b1d      	ldr	r3, [pc, #116]	; (8010144 <__pow5mult+0xac>)
 80100ce:	481e      	ldr	r0, [pc, #120]	; (8010148 <__pow5mult+0xb0>)
 80100d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80100d4:	f000 fd86 	bl	8010be4 <__assert_func>
 80100d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80100dc:	6004      	str	r4, [r0, #0]
 80100de:	60c4      	str	r4, [r0, #12]
 80100e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80100e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80100e8:	b94c      	cbnz	r4, 80100fe <__pow5mult+0x66>
 80100ea:	f240 2171 	movw	r1, #625	; 0x271
 80100ee:	4630      	mov	r0, r6
 80100f0:	f7ff ff16 	bl	800ff20 <__i2b>
 80100f4:	2300      	movs	r3, #0
 80100f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80100fa:	4604      	mov	r4, r0
 80100fc:	6003      	str	r3, [r0, #0]
 80100fe:	f04f 0900 	mov.w	r9, #0
 8010102:	07eb      	lsls	r3, r5, #31
 8010104:	d50a      	bpl.n	801011c <__pow5mult+0x84>
 8010106:	4639      	mov	r1, r7
 8010108:	4622      	mov	r2, r4
 801010a:	4630      	mov	r0, r6
 801010c:	f7ff ff1e 	bl	800ff4c <__multiply>
 8010110:	4639      	mov	r1, r7
 8010112:	4680      	mov	r8, r0
 8010114:	4630      	mov	r0, r6
 8010116:	f7ff fdfd 	bl	800fd14 <_Bfree>
 801011a:	4647      	mov	r7, r8
 801011c:	106d      	asrs	r5, r5, #1
 801011e:	d00b      	beq.n	8010138 <__pow5mult+0xa0>
 8010120:	6820      	ldr	r0, [r4, #0]
 8010122:	b938      	cbnz	r0, 8010134 <__pow5mult+0x9c>
 8010124:	4622      	mov	r2, r4
 8010126:	4621      	mov	r1, r4
 8010128:	4630      	mov	r0, r6
 801012a:	f7ff ff0f 	bl	800ff4c <__multiply>
 801012e:	6020      	str	r0, [r4, #0]
 8010130:	f8c0 9000 	str.w	r9, [r0]
 8010134:	4604      	mov	r4, r0
 8010136:	e7e4      	b.n	8010102 <__pow5mult+0x6a>
 8010138:	4638      	mov	r0, r7
 801013a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801013e:	bf00      	nop
 8010140:	08011310 	.word	0x08011310
 8010144:	08011055 	.word	0x08011055
 8010148:	080111bc 	.word	0x080111bc

0801014c <__lshift>:
 801014c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010150:	460c      	mov	r4, r1
 8010152:	6849      	ldr	r1, [r1, #4]
 8010154:	6923      	ldr	r3, [r4, #16]
 8010156:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801015a:	68a3      	ldr	r3, [r4, #8]
 801015c:	4607      	mov	r7, r0
 801015e:	4691      	mov	r9, r2
 8010160:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010164:	f108 0601 	add.w	r6, r8, #1
 8010168:	42b3      	cmp	r3, r6
 801016a:	db0b      	blt.n	8010184 <__lshift+0x38>
 801016c:	4638      	mov	r0, r7
 801016e:	f7ff fd91 	bl	800fc94 <_Balloc>
 8010172:	4605      	mov	r5, r0
 8010174:	b948      	cbnz	r0, 801018a <__lshift+0x3e>
 8010176:	4602      	mov	r2, r0
 8010178:	4b28      	ldr	r3, [pc, #160]	; (801021c <__lshift+0xd0>)
 801017a:	4829      	ldr	r0, [pc, #164]	; (8010220 <__lshift+0xd4>)
 801017c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010180:	f000 fd30 	bl	8010be4 <__assert_func>
 8010184:	3101      	adds	r1, #1
 8010186:	005b      	lsls	r3, r3, #1
 8010188:	e7ee      	b.n	8010168 <__lshift+0x1c>
 801018a:	2300      	movs	r3, #0
 801018c:	f100 0114 	add.w	r1, r0, #20
 8010190:	f100 0210 	add.w	r2, r0, #16
 8010194:	4618      	mov	r0, r3
 8010196:	4553      	cmp	r3, sl
 8010198:	db33      	blt.n	8010202 <__lshift+0xb6>
 801019a:	6920      	ldr	r0, [r4, #16]
 801019c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80101a0:	f104 0314 	add.w	r3, r4, #20
 80101a4:	f019 091f 	ands.w	r9, r9, #31
 80101a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80101ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80101b0:	d02b      	beq.n	801020a <__lshift+0xbe>
 80101b2:	f1c9 0e20 	rsb	lr, r9, #32
 80101b6:	468a      	mov	sl, r1
 80101b8:	2200      	movs	r2, #0
 80101ba:	6818      	ldr	r0, [r3, #0]
 80101bc:	fa00 f009 	lsl.w	r0, r0, r9
 80101c0:	4302      	orrs	r2, r0
 80101c2:	f84a 2b04 	str.w	r2, [sl], #4
 80101c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80101ca:	459c      	cmp	ip, r3
 80101cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80101d0:	d8f3      	bhi.n	80101ba <__lshift+0x6e>
 80101d2:	ebac 0304 	sub.w	r3, ip, r4
 80101d6:	3b15      	subs	r3, #21
 80101d8:	f023 0303 	bic.w	r3, r3, #3
 80101dc:	3304      	adds	r3, #4
 80101de:	f104 0015 	add.w	r0, r4, #21
 80101e2:	4584      	cmp	ip, r0
 80101e4:	bf38      	it	cc
 80101e6:	2304      	movcc	r3, #4
 80101e8:	50ca      	str	r2, [r1, r3]
 80101ea:	b10a      	cbz	r2, 80101f0 <__lshift+0xa4>
 80101ec:	f108 0602 	add.w	r6, r8, #2
 80101f0:	3e01      	subs	r6, #1
 80101f2:	4638      	mov	r0, r7
 80101f4:	612e      	str	r6, [r5, #16]
 80101f6:	4621      	mov	r1, r4
 80101f8:	f7ff fd8c 	bl	800fd14 <_Bfree>
 80101fc:	4628      	mov	r0, r5
 80101fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010202:	f842 0f04 	str.w	r0, [r2, #4]!
 8010206:	3301      	adds	r3, #1
 8010208:	e7c5      	b.n	8010196 <__lshift+0x4a>
 801020a:	3904      	subs	r1, #4
 801020c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010210:	f841 2f04 	str.w	r2, [r1, #4]!
 8010214:	459c      	cmp	ip, r3
 8010216:	d8f9      	bhi.n	801020c <__lshift+0xc0>
 8010218:	e7ea      	b.n	80101f0 <__lshift+0xa4>
 801021a:	bf00      	nop
 801021c:	080110cb 	.word	0x080110cb
 8010220:	080111bc 	.word	0x080111bc

08010224 <__mcmp>:
 8010224:	b530      	push	{r4, r5, lr}
 8010226:	6902      	ldr	r2, [r0, #16]
 8010228:	690c      	ldr	r4, [r1, #16]
 801022a:	1b12      	subs	r2, r2, r4
 801022c:	d10e      	bne.n	801024c <__mcmp+0x28>
 801022e:	f100 0314 	add.w	r3, r0, #20
 8010232:	3114      	adds	r1, #20
 8010234:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010238:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801023c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010240:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010244:	42a5      	cmp	r5, r4
 8010246:	d003      	beq.n	8010250 <__mcmp+0x2c>
 8010248:	d305      	bcc.n	8010256 <__mcmp+0x32>
 801024a:	2201      	movs	r2, #1
 801024c:	4610      	mov	r0, r2
 801024e:	bd30      	pop	{r4, r5, pc}
 8010250:	4283      	cmp	r3, r0
 8010252:	d3f3      	bcc.n	801023c <__mcmp+0x18>
 8010254:	e7fa      	b.n	801024c <__mcmp+0x28>
 8010256:	f04f 32ff 	mov.w	r2, #4294967295
 801025a:	e7f7      	b.n	801024c <__mcmp+0x28>

0801025c <__mdiff>:
 801025c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010260:	460c      	mov	r4, r1
 8010262:	4606      	mov	r6, r0
 8010264:	4611      	mov	r1, r2
 8010266:	4620      	mov	r0, r4
 8010268:	4617      	mov	r7, r2
 801026a:	f7ff ffdb 	bl	8010224 <__mcmp>
 801026e:	1e05      	subs	r5, r0, #0
 8010270:	d110      	bne.n	8010294 <__mdiff+0x38>
 8010272:	4629      	mov	r1, r5
 8010274:	4630      	mov	r0, r6
 8010276:	f7ff fd0d 	bl	800fc94 <_Balloc>
 801027a:	b930      	cbnz	r0, 801028a <__mdiff+0x2e>
 801027c:	4b39      	ldr	r3, [pc, #228]	; (8010364 <__mdiff+0x108>)
 801027e:	4602      	mov	r2, r0
 8010280:	f240 2132 	movw	r1, #562	; 0x232
 8010284:	4838      	ldr	r0, [pc, #224]	; (8010368 <__mdiff+0x10c>)
 8010286:	f000 fcad 	bl	8010be4 <__assert_func>
 801028a:	2301      	movs	r3, #1
 801028c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010290:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010294:	bfa4      	itt	ge
 8010296:	463b      	movge	r3, r7
 8010298:	4627      	movge	r7, r4
 801029a:	4630      	mov	r0, r6
 801029c:	6879      	ldr	r1, [r7, #4]
 801029e:	bfa6      	itte	ge
 80102a0:	461c      	movge	r4, r3
 80102a2:	2500      	movge	r5, #0
 80102a4:	2501      	movlt	r5, #1
 80102a6:	f7ff fcf5 	bl	800fc94 <_Balloc>
 80102aa:	b920      	cbnz	r0, 80102b6 <__mdiff+0x5a>
 80102ac:	4b2d      	ldr	r3, [pc, #180]	; (8010364 <__mdiff+0x108>)
 80102ae:	4602      	mov	r2, r0
 80102b0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80102b4:	e7e6      	b.n	8010284 <__mdiff+0x28>
 80102b6:	693e      	ldr	r6, [r7, #16]
 80102b8:	60c5      	str	r5, [r0, #12]
 80102ba:	6925      	ldr	r5, [r4, #16]
 80102bc:	f107 0114 	add.w	r1, r7, #20
 80102c0:	f104 0914 	add.w	r9, r4, #20
 80102c4:	f100 0e14 	add.w	lr, r0, #20
 80102c8:	f107 0210 	add.w	r2, r7, #16
 80102cc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80102d0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80102d4:	46f2      	mov	sl, lr
 80102d6:	2700      	movs	r7, #0
 80102d8:	f859 3b04 	ldr.w	r3, [r9], #4
 80102dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80102e0:	fa1f f883 	uxth.w	r8, r3
 80102e4:	fa17 f78b 	uxtah	r7, r7, fp
 80102e8:	0c1b      	lsrs	r3, r3, #16
 80102ea:	eba7 0808 	sub.w	r8, r7, r8
 80102ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80102f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80102f6:	fa1f f888 	uxth.w	r8, r8
 80102fa:	141f      	asrs	r7, r3, #16
 80102fc:	454d      	cmp	r5, r9
 80102fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010302:	f84a 3b04 	str.w	r3, [sl], #4
 8010306:	d8e7      	bhi.n	80102d8 <__mdiff+0x7c>
 8010308:	1b2b      	subs	r3, r5, r4
 801030a:	3b15      	subs	r3, #21
 801030c:	f023 0303 	bic.w	r3, r3, #3
 8010310:	3304      	adds	r3, #4
 8010312:	3415      	adds	r4, #21
 8010314:	42a5      	cmp	r5, r4
 8010316:	bf38      	it	cc
 8010318:	2304      	movcc	r3, #4
 801031a:	4419      	add	r1, r3
 801031c:	4473      	add	r3, lr
 801031e:	469e      	mov	lr, r3
 8010320:	460d      	mov	r5, r1
 8010322:	4565      	cmp	r5, ip
 8010324:	d30e      	bcc.n	8010344 <__mdiff+0xe8>
 8010326:	f10c 0203 	add.w	r2, ip, #3
 801032a:	1a52      	subs	r2, r2, r1
 801032c:	f022 0203 	bic.w	r2, r2, #3
 8010330:	3903      	subs	r1, #3
 8010332:	458c      	cmp	ip, r1
 8010334:	bf38      	it	cc
 8010336:	2200      	movcc	r2, #0
 8010338:	441a      	add	r2, r3
 801033a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801033e:	b17b      	cbz	r3, 8010360 <__mdiff+0x104>
 8010340:	6106      	str	r6, [r0, #16]
 8010342:	e7a5      	b.n	8010290 <__mdiff+0x34>
 8010344:	f855 8b04 	ldr.w	r8, [r5], #4
 8010348:	fa17 f488 	uxtah	r4, r7, r8
 801034c:	1422      	asrs	r2, r4, #16
 801034e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8010352:	b2a4      	uxth	r4, r4
 8010354:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010358:	f84e 4b04 	str.w	r4, [lr], #4
 801035c:	1417      	asrs	r7, r2, #16
 801035e:	e7e0      	b.n	8010322 <__mdiff+0xc6>
 8010360:	3e01      	subs	r6, #1
 8010362:	e7ea      	b.n	801033a <__mdiff+0xde>
 8010364:	080110cb 	.word	0x080110cb
 8010368:	080111bc 	.word	0x080111bc

0801036c <__ulp>:
 801036c:	b082      	sub	sp, #8
 801036e:	ed8d 0b00 	vstr	d0, [sp]
 8010372:	9b01      	ldr	r3, [sp, #4]
 8010374:	4912      	ldr	r1, [pc, #72]	; (80103c0 <__ulp+0x54>)
 8010376:	4019      	ands	r1, r3
 8010378:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801037c:	2900      	cmp	r1, #0
 801037e:	dd05      	ble.n	801038c <__ulp+0x20>
 8010380:	2200      	movs	r2, #0
 8010382:	460b      	mov	r3, r1
 8010384:	ec43 2b10 	vmov	d0, r2, r3
 8010388:	b002      	add	sp, #8
 801038a:	4770      	bx	lr
 801038c:	4249      	negs	r1, r1
 801038e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8010392:	ea4f 5021 	mov.w	r0, r1, asr #20
 8010396:	f04f 0200 	mov.w	r2, #0
 801039a:	f04f 0300 	mov.w	r3, #0
 801039e:	da04      	bge.n	80103aa <__ulp+0x3e>
 80103a0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80103a4:	fa41 f300 	asr.w	r3, r1, r0
 80103a8:	e7ec      	b.n	8010384 <__ulp+0x18>
 80103aa:	f1a0 0114 	sub.w	r1, r0, #20
 80103ae:	291e      	cmp	r1, #30
 80103b0:	bfda      	itte	le
 80103b2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80103b6:	fa20 f101 	lsrle.w	r1, r0, r1
 80103ba:	2101      	movgt	r1, #1
 80103bc:	460a      	mov	r2, r1
 80103be:	e7e1      	b.n	8010384 <__ulp+0x18>
 80103c0:	7ff00000 	.word	0x7ff00000

080103c4 <__b2d>:
 80103c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103c6:	6905      	ldr	r5, [r0, #16]
 80103c8:	f100 0714 	add.w	r7, r0, #20
 80103cc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80103d0:	1f2e      	subs	r6, r5, #4
 80103d2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80103d6:	4620      	mov	r0, r4
 80103d8:	f7ff fd52 	bl	800fe80 <__hi0bits>
 80103dc:	f1c0 0320 	rsb	r3, r0, #32
 80103e0:	280a      	cmp	r0, #10
 80103e2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010460 <__b2d+0x9c>
 80103e6:	600b      	str	r3, [r1, #0]
 80103e8:	dc14      	bgt.n	8010414 <__b2d+0x50>
 80103ea:	f1c0 0e0b 	rsb	lr, r0, #11
 80103ee:	fa24 f10e 	lsr.w	r1, r4, lr
 80103f2:	42b7      	cmp	r7, r6
 80103f4:	ea41 030c 	orr.w	r3, r1, ip
 80103f8:	bf34      	ite	cc
 80103fa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80103fe:	2100      	movcs	r1, #0
 8010400:	3015      	adds	r0, #21
 8010402:	fa04 f000 	lsl.w	r0, r4, r0
 8010406:	fa21 f10e 	lsr.w	r1, r1, lr
 801040a:	ea40 0201 	orr.w	r2, r0, r1
 801040e:	ec43 2b10 	vmov	d0, r2, r3
 8010412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010414:	42b7      	cmp	r7, r6
 8010416:	bf3a      	itte	cc
 8010418:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801041c:	f1a5 0608 	subcc.w	r6, r5, #8
 8010420:	2100      	movcs	r1, #0
 8010422:	380b      	subs	r0, #11
 8010424:	d017      	beq.n	8010456 <__b2d+0x92>
 8010426:	f1c0 0c20 	rsb	ip, r0, #32
 801042a:	fa04 f500 	lsl.w	r5, r4, r0
 801042e:	42be      	cmp	r6, r7
 8010430:	fa21 f40c 	lsr.w	r4, r1, ip
 8010434:	ea45 0504 	orr.w	r5, r5, r4
 8010438:	bf8c      	ite	hi
 801043a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801043e:	2400      	movls	r4, #0
 8010440:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010444:	fa01 f000 	lsl.w	r0, r1, r0
 8010448:	fa24 f40c 	lsr.w	r4, r4, ip
 801044c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010450:	ea40 0204 	orr.w	r2, r0, r4
 8010454:	e7db      	b.n	801040e <__b2d+0x4a>
 8010456:	ea44 030c 	orr.w	r3, r4, ip
 801045a:	460a      	mov	r2, r1
 801045c:	e7d7      	b.n	801040e <__b2d+0x4a>
 801045e:	bf00      	nop
 8010460:	3ff00000 	.word	0x3ff00000

08010464 <__d2b>:
 8010464:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010468:	4689      	mov	r9, r1
 801046a:	2101      	movs	r1, #1
 801046c:	ec57 6b10 	vmov	r6, r7, d0
 8010470:	4690      	mov	r8, r2
 8010472:	f7ff fc0f 	bl	800fc94 <_Balloc>
 8010476:	4604      	mov	r4, r0
 8010478:	b930      	cbnz	r0, 8010488 <__d2b+0x24>
 801047a:	4602      	mov	r2, r0
 801047c:	4b25      	ldr	r3, [pc, #148]	; (8010514 <__d2b+0xb0>)
 801047e:	4826      	ldr	r0, [pc, #152]	; (8010518 <__d2b+0xb4>)
 8010480:	f240 310a 	movw	r1, #778	; 0x30a
 8010484:	f000 fbae 	bl	8010be4 <__assert_func>
 8010488:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801048c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010490:	bb35      	cbnz	r5, 80104e0 <__d2b+0x7c>
 8010492:	2e00      	cmp	r6, #0
 8010494:	9301      	str	r3, [sp, #4]
 8010496:	d028      	beq.n	80104ea <__d2b+0x86>
 8010498:	4668      	mov	r0, sp
 801049a:	9600      	str	r6, [sp, #0]
 801049c:	f7ff fd10 	bl	800fec0 <__lo0bits>
 80104a0:	9900      	ldr	r1, [sp, #0]
 80104a2:	b300      	cbz	r0, 80104e6 <__d2b+0x82>
 80104a4:	9a01      	ldr	r2, [sp, #4]
 80104a6:	f1c0 0320 	rsb	r3, r0, #32
 80104aa:	fa02 f303 	lsl.w	r3, r2, r3
 80104ae:	430b      	orrs	r3, r1
 80104b0:	40c2      	lsrs	r2, r0
 80104b2:	6163      	str	r3, [r4, #20]
 80104b4:	9201      	str	r2, [sp, #4]
 80104b6:	9b01      	ldr	r3, [sp, #4]
 80104b8:	61a3      	str	r3, [r4, #24]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	bf14      	ite	ne
 80104be:	2202      	movne	r2, #2
 80104c0:	2201      	moveq	r2, #1
 80104c2:	6122      	str	r2, [r4, #16]
 80104c4:	b1d5      	cbz	r5, 80104fc <__d2b+0x98>
 80104c6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80104ca:	4405      	add	r5, r0
 80104cc:	f8c9 5000 	str.w	r5, [r9]
 80104d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80104d4:	f8c8 0000 	str.w	r0, [r8]
 80104d8:	4620      	mov	r0, r4
 80104da:	b003      	add	sp, #12
 80104dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80104e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80104e4:	e7d5      	b.n	8010492 <__d2b+0x2e>
 80104e6:	6161      	str	r1, [r4, #20]
 80104e8:	e7e5      	b.n	80104b6 <__d2b+0x52>
 80104ea:	a801      	add	r0, sp, #4
 80104ec:	f7ff fce8 	bl	800fec0 <__lo0bits>
 80104f0:	9b01      	ldr	r3, [sp, #4]
 80104f2:	6163      	str	r3, [r4, #20]
 80104f4:	2201      	movs	r2, #1
 80104f6:	6122      	str	r2, [r4, #16]
 80104f8:	3020      	adds	r0, #32
 80104fa:	e7e3      	b.n	80104c4 <__d2b+0x60>
 80104fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010500:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010504:	f8c9 0000 	str.w	r0, [r9]
 8010508:	6918      	ldr	r0, [r3, #16]
 801050a:	f7ff fcb9 	bl	800fe80 <__hi0bits>
 801050e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010512:	e7df      	b.n	80104d4 <__d2b+0x70>
 8010514:	080110cb 	.word	0x080110cb
 8010518:	080111bc 	.word	0x080111bc

0801051c <__ratio>:
 801051c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010520:	4688      	mov	r8, r1
 8010522:	4669      	mov	r1, sp
 8010524:	4681      	mov	r9, r0
 8010526:	f7ff ff4d 	bl	80103c4 <__b2d>
 801052a:	a901      	add	r1, sp, #4
 801052c:	4640      	mov	r0, r8
 801052e:	ec55 4b10 	vmov	r4, r5, d0
 8010532:	f7ff ff47 	bl	80103c4 <__b2d>
 8010536:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801053a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801053e:	eba3 0c02 	sub.w	ip, r3, r2
 8010542:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010546:	1a9b      	subs	r3, r3, r2
 8010548:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801054c:	ec51 0b10 	vmov	r0, r1, d0
 8010550:	2b00      	cmp	r3, #0
 8010552:	bfd6      	itet	le
 8010554:	460a      	movle	r2, r1
 8010556:	462a      	movgt	r2, r5
 8010558:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801055c:	468b      	mov	fp, r1
 801055e:	462f      	mov	r7, r5
 8010560:	bfd4      	ite	le
 8010562:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010566:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801056a:	4620      	mov	r0, r4
 801056c:	ee10 2a10 	vmov	r2, s0
 8010570:	465b      	mov	r3, fp
 8010572:	4639      	mov	r1, r7
 8010574:	f7f0 f97a 	bl	800086c <__aeabi_ddiv>
 8010578:	ec41 0b10 	vmov	d0, r0, r1
 801057c:	b003      	add	sp, #12
 801057e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010582 <__copybits>:
 8010582:	3901      	subs	r1, #1
 8010584:	b570      	push	{r4, r5, r6, lr}
 8010586:	1149      	asrs	r1, r1, #5
 8010588:	6914      	ldr	r4, [r2, #16]
 801058a:	3101      	adds	r1, #1
 801058c:	f102 0314 	add.w	r3, r2, #20
 8010590:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010594:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010598:	1f05      	subs	r5, r0, #4
 801059a:	42a3      	cmp	r3, r4
 801059c:	d30c      	bcc.n	80105b8 <__copybits+0x36>
 801059e:	1aa3      	subs	r3, r4, r2
 80105a0:	3b11      	subs	r3, #17
 80105a2:	f023 0303 	bic.w	r3, r3, #3
 80105a6:	3211      	adds	r2, #17
 80105a8:	42a2      	cmp	r2, r4
 80105aa:	bf88      	it	hi
 80105ac:	2300      	movhi	r3, #0
 80105ae:	4418      	add	r0, r3
 80105b0:	2300      	movs	r3, #0
 80105b2:	4288      	cmp	r0, r1
 80105b4:	d305      	bcc.n	80105c2 <__copybits+0x40>
 80105b6:	bd70      	pop	{r4, r5, r6, pc}
 80105b8:	f853 6b04 	ldr.w	r6, [r3], #4
 80105bc:	f845 6f04 	str.w	r6, [r5, #4]!
 80105c0:	e7eb      	b.n	801059a <__copybits+0x18>
 80105c2:	f840 3b04 	str.w	r3, [r0], #4
 80105c6:	e7f4      	b.n	80105b2 <__copybits+0x30>

080105c8 <__any_on>:
 80105c8:	f100 0214 	add.w	r2, r0, #20
 80105cc:	6900      	ldr	r0, [r0, #16]
 80105ce:	114b      	asrs	r3, r1, #5
 80105d0:	4298      	cmp	r0, r3
 80105d2:	b510      	push	{r4, lr}
 80105d4:	db11      	blt.n	80105fa <__any_on+0x32>
 80105d6:	dd0a      	ble.n	80105ee <__any_on+0x26>
 80105d8:	f011 011f 	ands.w	r1, r1, #31
 80105dc:	d007      	beq.n	80105ee <__any_on+0x26>
 80105de:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80105e2:	fa24 f001 	lsr.w	r0, r4, r1
 80105e6:	fa00 f101 	lsl.w	r1, r0, r1
 80105ea:	428c      	cmp	r4, r1
 80105ec:	d10b      	bne.n	8010606 <__any_on+0x3e>
 80105ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80105f2:	4293      	cmp	r3, r2
 80105f4:	d803      	bhi.n	80105fe <__any_on+0x36>
 80105f6:	2000      	movs	r0, #0
 80105f8:	bd10      	pop	{r4, pc}
 80105fa:	4603      	mov	r3, r0
 80105fc:	e7f7      	b.n	80105ee <__any_on+0x26>
 80105fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010602:	2900      	cmp	r1, #0
 8010604:	d0f5      	beq.n	80105f2 <__any_on+0x2a>
 8010606:	2001      	movs	r0, #1
 8010608:	e7f6      	b.n	80105f8 <__any_on+0x30>

0801060a <_calloc_r>:
 801060a:	b513      	push	{r0, r1, r4, lr}
 801060c:	434a      	muls	r2, r1
 801060e:	4611      	mov	r1, r2
 8010610:	9201      	str	r2, [sp, #4]
 8010612:	f7fc f811 	bl	800c638 <_malloc_r>
 8010616:	4604      	mov	r4, r0
 8010618:	b118      	cbz	r0, 8010622 <_calloc_r+0x18>
 801061a:	9a01      	ldr	r2, [sp, #4]
 801061c:	2100      	movs	r1, #0
 801061e:	f7fb ffb3 	bl	800c588 <memset>
 8010622:	4620      	mov	r0, r4
 8010624:	b002      	add	sp, #8
 8010626:	bd10      	pop	{r4, pc}

08010628 <__ssputs_r>:
 8010628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801062c:	688e      	ldr	r6, [r1, #8]
 801062e:	429e      	cmp	r6, r3
 8010630:	4682      	mov	sl, r0
 8010632:	460c      	mov	r4, r1
 8010634:	4690      	mov	r8, r2
 8010636:	461f      	mov	r7, r3
 8010638:	d838      	bhi.n	80106ac <__ssputs_r+0x84>
 801063a:	898a      	ldrh	r2, [r1, #12]
 801063c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010640:	d032      	beq.n	80106a8 <__ssputs_r+0x80>
 8010642:	6825      	ldr	r5, [r4, #0]
 8010644:	6909      	ldr	r1, [r1, #16]
 8010646:	eba5 0901 	sub.w	r9, r5, r1
 801064a:	6965      	ldr	r5, [r4, #20]
 801064c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010650:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010654:	3301      	adds	r3, #1
 8010656:	444b      	add	r3, r9
 8010658:	106d      	asrs	r5, r5, #1
 801065a:	429d      	cmp	r5, r3
 801065c:	bf38      	it	cc
 801065e:	461d      	movcc	r5, r3
 8010660:	0553      	lsls	r3, r2, #21
 8010662:	d531      	bpl.n	80106c8 <__ssputs_r+0xa0>
 8010664:	4629      	mov	r1, r5
 8010666:	f7fb ffe7 	bl	800c638 <_malloc_r>
 801066a:	4606      	mov	r6, r0
 801066c:	b950      	cbnz	r0, 8010684 <__ssputs_r+0x5c>
 801066e:	230c      	movs	r3, #12
 8010670:	f8ca 3000 	str.w	r3, [sl]
 8010674:	89a3      	ldrh	r3, [r4, #12]
 8010676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801067a:	81a3      	strh	r3, [r4, #12]
 801067c:	f04f 30ff 	mov.w	r0, #4294967295
 8010680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010684:	6921      	ldr	r1, [r4, #16]
 8010686:	464a      	mov	r2, r9
 8010688:	f7fb ff70 	bl	800c56c <memcpy>
 801068c:	89a3      	ldrh	r3, [r4, #12]
 801068e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010696:	81a3      	strh	r3, [r4, #12]
 8010698:	6126      	str	r6, [r4, #16]
 801069a:	6165      	str	r5, [r4, #20]
 801069c:	444e      	add	r6, r9
 801069e:	eba5 0509 	sub.w	r5, r5, r9
 80106a2:	6026      	str	r6, [r4, #0]
 80106a4:	60a5      	str	r5, [r4, #8]
 80106a6:	463e      	mov	r6, r7
 80106a8:	42be      	cmp	r6, r7
 80106aa:	d900      	bls.n	80106ae <__ssputs_r+0x86>
 80106ac:	463e      	mov	r6, r7
 80106ae:	4632      	mov	r2, r6
 80106b0:	6820      	ldr	r0, [r4, #0]
 80106b2:	4641      	mov	r1, r8
 80106b4:	f000 fae8 	bl	8010c88 <memmove>
 80106b8:	68a3      	ldr	r3, [r4, #8]
 80106ba:	6822      	ldr	r2, [r4, #0]
 80106bc:	1b9b      	subs	r3, r3, r6
 80106be:	4432      	add	r2, r6
 80106c0:	60a3      	str	r3, [r4, #8]
 80106c2:	6022      	str	r2, [r4, #0]
 80106c4:	2000      	movs	r0, #0
 80106c6:	e7db      	b.n	8010680 <__ssputs_r+0x58>
 80106c8:	462a      	mov	r2, r5
 80106ca:	f000 faf7 	bl	8010cbc <_realloc_r>
 80106ce:	4606      	mov	r6, r0
 80106d0:	2800      	cmp	r0, #0
 80106d2:	d1e1      	bne.n	8010698 <__ssputs_r+0x70>
 80106d4:	6921      	ldr	r1, [r4, #16]
 80106d6:	4650      	mov	r0, sl
 80106d8:	f7fb ff5e 	bl	800c598 <_free_r>
 80106dc:	e7c7      	b.n	801066e <__ssputs_r+0x46>
	...

080106e0 <_svfiprintf_r>:
 80106e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106e4:	4698      	mov	r8, r3
 80106e6:	898b      	ldrh	r3, [r1, #12]
 80106e8:	061b      	lsls	r3, r3, #24
 80106ea:	b09d      	sub	sp, #116	; 0x74
 80106ec:	4607      	mov	r7, r0
 80106ee:	460d      	mov	r5, r1
 80106f0:	4614      	mov	r4, r2
 80106f2:	d50e      	bpl.n	8010712 <_svfiprintf_r+0x32>
 80106f4:	690b      	ldr	r3, [r1, #16]
 80106f6:	b963      	cbnz	r3, 8010712 <_svfiprintf_r+0x32>
 80106f8:	2140      	movs	r1, #64	; 0x40
 80106fa:	f7fb ff9d 	bl	800c638 <_malloc_r>
 80106fe:	6028      	str	r0, [r5, #0]
 8010700:	6128      	str	r0, [r5, #16]
 8010702:	b920      	cbnz	r0, 801070e <_svfiprintf_r+0x2e>
 8010704:	230c      	movs	r3, #12
 8010706:	603b      	str	r3, [r7, #0]
 8010708:	f04f 30ff 	mov.w	r0, #4294967295
 801070c:	e0d1      	b.n	80108b2 <_svfiprintf_r+0x1d2>
 801070e:	2340      	movs	r3, #64	; 0x40
 8010710:	616b      	str	r3, [r5, #20]
 8010712:	2300      	movs	r3, #0
 8010714:	9309      	str	r3, [sp, #36]	; 0x24
 8010716:	2320      	movs	r3, #32
 8010718:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801071c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010720:	2330      	movs	r3, #48	; 0x30
 8010722:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80108cc <_svfiprintf_r+0x1ec>
 8010726:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801072a:	f04f 0901 	mov.w	r9, #1
 801072e:	4623      	mov	r3, r4
 8010730:	469a      	mov	sl, r3
 8010732:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010736:	b10a      	cbz	r2, 801073c <_svfiprintf_r+0x5c>
 8010738:	2a25      	cmp	r2, #37	; 0x25
 801073a:	d1f9      	bne.n	8010730 <_svfiprintf_r+0x50>
 801073c:	ebba 0b04 	subs.w	fp, sl, r4
 8010740:	d00b      	beq.n	801075a <_svfiprintf_r+0x7a>
 8010742:	465b      	mov	r3, fp
 8010744:	4622      	mov	r2, r4
 8010746:	4629      	mov	r1, r5
 8010748:	4638      	mov	r0, r7
 801074a:	f7ff ff6d 	bl	8010628 <__ssputs_r>
 801074e:	3001      	adds	r0, #1
 8010750:	f000 80aa 	beq.w	80108a8 <_svfiprintf_r+0x1c8>
 8010754:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010756:	445a      	add	r2, fp
 8010758:	9209      	str	r2, [sp, #36]	; 0x24
 801075a:	f89a 3000 	ldrb.w	r3, [sl]
 801075e:	2b00      	cmp	r3, #0
 8010760:	f000 80a2 	beq.w	80108a8 <_svfiprintf_r+0x1c8>
 8010764:	2300      	movs	r3, #0
 8010766:	f04f 32ff 	mov.w	r2, #4294967295
 801076a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801076e:	f10a 0a01 	add.w	sl, sl, #1
 8010772:	9304      	str	r3, [sp, #16]
 8010774:	9307      	str	r3, [sp, #28]
 8010776:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801077a:	931a      	str	r3, [sp, #104]	; 0x68
 801077c:	4654      	mov	r4, sl
 801077e:	2205      	movs	r2, #5
 8010780:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010784:	4851      	ldr	r0, [pc, #324]	; (80108cc <_svfiprintf_r+0x1ec>)
 8010786:	f7ef fd3b 	bl	8000200 <memchr>
 801078a:	9a04      	ldr	r2, [sp, #16]
 801078c:	b9d8      	cbnz	r0, 80107c6 <_svfiprintf_r+0xe6>
 801078e:	06d0      	lsls	r0, r2, #27
 8010790:	bf44      	itt	mi
 8010792:	2320      	movmi	r3, #32
 8010794:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010798:	0711      	lsls	r1, r2, #28
 801079a:	bf44      	itt	mi
 801079c:	232b      	movmi	r3, #43	; 0x2b
 801079e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80107a2:	f89a 3000 	ldrb.w	r3, [sl]
 80107a6:	2b2a      	cmp	r3, #42	; 0x2a
 80107a8:	d015      	beq.n	80107d6 <_svfiprintf_r+0xf6>
 80107aa:	9a07      	ldr	r2, [sp, #28]
 80107ac:	4654      	mov	r4, sl
 80107ae:	2000      	movs	r0, #0
 80107b0:	f04f 0c0a 	mov.w	ip, #10
 80107b4:	4621      	mov	r1, r4
 80107b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80107ba:	3b30      	subs	r3, #48	; 0x30
 80107bc:	2b09      	cmp	r3, #9
 80107be:	d94e      	bls.n	801085e <_svfiprintf_r+0x17e>
 80107c0:	b1b0      	cbz	r0, 80107f0 <_svfiprintf_r+0x110>
 80107c2:	9207      	str	r2, [sp, #28]
 80107c4:	e014      	b.n	80107f0 <_svfiprintf_r+0x110>
 80107c6:	eba0 0308 	sub.w	r3, r0, r8
 80107ca:	fa09 f303 	lsl.w	r3, r9, r3
 80107ce:	4313      	orrs	r3, r2
 80107d0:	9304      	str	r3, [sp, #16]
 80107d2:	46a2      	mov	sl, r4
 80107d4:	e7d2      	b.n	801077c <_svfiprintf_r+0x9c>
 80107d6:	9b03      	ldr	r3, [sp, #12]
 80107d8:	1d19      	adds	r1, r3, #4
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	9103      	str	r1, [sp, #12]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	bfbb      	ittet	lt
 80107e2:	425b      	neglt	r3, r3
 80107e4:	f042 0202 	orrlt.w	r2, r2, #2
 80107e8:	9307      	strge	r3, [sp, #28]
 80107ea:	9307      	strlt	r3, [sp, #28]
 80107ec:	bfb8      	it	lt
 80107ee:	9204      	strlt	r2, [sp, #16]
 80107f0:	7823      	ldrb	r3, [r4, #0]
 80107f2:	2b2e      	cmp	r3, #46	; 0x2e
 80107f4:	d10c      	bne.n	8010810 <_svfiprintf_r+0x130>
 80107f6:	7863      	ldrb	r3, [r4, #1]
 80107f8:	2b2a      	cmp	r3, #42	; 0x2a
 80107fa:	d135      	bne.n	8010868 <_svfiprintf_r+0x188>
 80107fc:	9b03      	ldr	r3, [sp, #12]
 80107fe:	1d1a      	adds	r2, r3, #4
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	9203      	str	r2, [sp, #12]
 8010804:	2b00      	cmp	r3, #0
 8010806:	bfb8      	it	lt
 8010808:	f04f 33ff 	movlt.w	r3, #4294967295
 801080c:	3402      	adds	r4, #2
 801080e:	9305      	str	r3, [sp, #20]
 8010810:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80108dc <_svfiprintf_r+0x1fc>
 8010814:	7821      	ldrb	r1, [r4, #0]
 8010816:	2203      	movs	r2, #3
 8010818:	4650      	mov	r0, sl
 801081a:	f7ef fcf1 	bl	8000200 <memchr>
 801081e:	b140      	cbz	r0, 8010832 <_svfiprintf_r+0x152>
 8010820:	2340      	movs	r3, #64	; 0x40
 8010822:	eba0 000a 	sub.w	r0, r0, sl
 8010826:	fa03 f000 	lsl.w	r0, r3, r0
 801082a:	9b04      	ldr	r3, [sp, #16]
 801082c:	4303      	orrs	r3, r0
 801082e:	3401      	adds	r4, #1
 8010830:	9304      	str	r3, [sp, #16]
 8010832:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010836:	4826      	ldr	r0, [pc, #152]	; (80108d0 <_svfiprintf_r+0x1f0>)
 8010838:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801083c:	2206      	movs	r2, #6
 801083e:	f7ef fcdf 	bl	8000200 <memchr>
 8010842:	2800      	cmp	r0, #0
 8010844:	d038      	beq.n	80108b8 <_svfiprintf_r+0x1d8>
 8010846:	4b23      	ldr	r3, [pc, #140]	; (80108d4 <_svfiprintf_r+0x1f4>)
 8010848:	bb1b      	cbnz	r3, 8010892 <_svfiprintf_r+0x1b2>
 801084a:	9b03      	ldr	r3, [sp, #12]
 801084c:	3307      	adds	r3, #7
 801084e:	f023 0307 	bic.w	r3, r3, #7
 8010852:	3308      	adds	r3, #8
 8010854:	9303      	str	r3, [sp, #12]
 8010856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010858:	4433      	add	r3, r6
 801085a:	9309      	str	r3, [sp, #36]	; 0x24
 801085c:	e767      	b.n	801072e <_svfiprintf_r+0x4e>
 801085e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010862:	460c      	mov	r4, r1
 8010864:	2001      	movs	r0, #1
 8010866:	e7a5      	b.n	80107b4 <_svfiprintf_r+0xd4>
 8010868:	2300      	movs	r3, #0
 801086a:	3401      	adds	r4, #1
 801086c:	9305      	str	r3, [sp, #20]
 801086e:	4619      	mov	r1, r3
 8010870:	f04f 0c0a 	mov.w	ip, #10
 8010874:	4620      	mov	r0, r4
 8010876:	f810 2b01 	ldrb.w	r2, [r0], #1
 801087a:	3a30      	subs	r2, #48	; 0x30
 801087c:	2a09      	cmp	r2, #9
 801087e:	d903      	bls.n	8010888 <_svfiprintf_r+0x1a8>
 8010880:	2b00      	cmp	r3, #0
 8010882:	d0c5      	beq.n	8010810 <_svfiprintf_r+0x130>
 8010884:	9105      	str	r1, [sp, #20]
 8010886:	e7c3      	b.n	8010810 <_svfiprintf_r+0x130>
 8010888:	fb0c 2101 	mla	r1, ip, r1, r2
 801088c:	4604      	mov	r4, r0
 801088e:	2301      	movs	r3, #1
 8010890:	e7f0      	b.n	8010874 <_svfiprintf_r+0x194>
 8010892:	ab03      	add	r3, sp, #12
 8010894:	9300      	str	r3, [sp, #0]
 8010896:	462a      	mov	r2, r5
 8010898:	4b0f      	ldr	r3, [pc, #60]	; (80108d8 <_svfiprintf_r+0x1f8>)
 801089a:	a904      	add	r1, sp, #16
 801089c:	4638      	mov	r0, r7
 801089e:	f7fb ffc5 	bl	800c82c <_printf_float>
 80108a2:	1c42      	adds	r2, r0, #1
 80108a4:	4606      	mov	r6, r0
 80108a6:	d1d6      	bne.n	8010856 <_svfiprintf_r+0x176>
 80108a8:	89ab      	ldrh	r3, [r5, #12]
 80108aa:	065b      	lsls	r3, r3, #25
 80108ac:	f53f af2c 	bmi.w	8010708 <_svfiprintf_r+0x28>
 80108b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80108b2:	b01d      	add	sp, #116	; 0x74
 80108b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108b8:	ab03      	add	r3, sp, #12
 80108ba:	9300      	str	r3, [sp, #0]
 80108bc:	462a      	mov	r2, r5
 80108be:	4b06      	ldr	r3, [pc, #24]	; (80108d8 <_svfiprintf_r+0x1f8>)
 80108c0:	a904      	add	r1, sp, #16
 80108c2:	4638      	mov	r0, r7
 80108c4:	f7fc fa56 	bl	800cd74 <_printf_i>
 80108c8:	e7eb      	b.n	80108a2 <_svfiprintf_r+0x1c2>
 80108ca:	bf00      	nop
 80108cc:	0801131c 	.word	0x0801131c
 80108d0:	08011326 	.word	0x08011326
 80108d4:	0800c82d 	.word	0x0800c82d
 80108d8:	08010629 	.word	0x08010629
 80108dc:	08011322 	.word	0x08011322

080108e0 <__sfputc_r>:
 80108e0:	6893      	ldr	r3, [r2, #8]
 80108e2:	3b01      	subs	r3, #1
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	b410      	push	{r4}
 80108e8:	6093      	str	r3, [r2, #8]
 80108ea:	da08      	bge.n	80108fe <__sfputc_r+0x1e>
 80108ec:	6994      	ldr	r4, [r2, #24]
 80108ee:	42a3      	cmp	r3, r4
 80108f0:	db01      	blt.n	80108f6 <__sfputc_r+0x16>
 80108f2:	290a      	cmp	r1, #10
 80108f4:	d103      	bne.n	80108fe <__sfputc_r+0x1e>
 80108f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80108fa:	f7fd bcaf 	b.w	800e25c <__swbuf_r>
 80108fe:	6813      	ldr	r3, [r2, #0]
 8010900:	1c58      	adds	r0, r3, #1
 8010902:	6010      	str	r0, [r2, #0]
 8010904:	7019      	strb	r1, [r3, #0]
 8010906:	4608      	mov	r0, r1
 8010908:	f85d 4b04 	ldr.w	r4, [sp], #4
 801090c:	4770      	bx	lr

0801090e <__sfputs_r>:
 801090e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010910:	4606      	mov	r6, r0
 8010912:	460f      	mov	r7, r1
 8010914:	4614      	mov	r4, r2
 8010916:	18d5      	adds	r5, r2, r3
 8010918:	42ac      	cmp	r4, r5
 801091a:	d101      	bne.n	8010920 <__sfputs_r+0x12>
 801091c:	2000      	movs	r0, #0
 801091e:	e007      	b.n	8010930 <__sfputs_r+0x22>
 8010920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010924:	463a      	mov	r2, r7
 8010926:	4630      	mov	r0, r6
 8010928:	f7ff ffda 	bl	80108e0 <__sfputc_r>
 801092c:	1c43      	adds	r3, r0, #1
 801092e:	d1f3      	bne.n	8010918 <__sfputs_r+0xa>
 8010930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010934 <_vfiprintf_r>:
 8010934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010938:	460d      	mov	r5, r1
 801093a:	b09d      	sub	sp, #116	; 0x74
 801093c:	4614      	mov	r4, r2
 801093e:	4698      	mov	r8, r3
 8010940:	4606      	mov	r6, r0
 8010942:	b118      	cbz	r0, 801094c <_vfiprintf_r+0x18>
 8010944:	6983      	ldr	r3, [r0, #24]
 8010946:	b90b      	cbnz	r3, 801094c <_vfiprintf_r+0x18>
 8010948:	f7fe fcfc 	bl	800f344 <__sinit>
 801094c:	4b89      	ldr	r3, [pc, #548]	; (8010b74 <_vfiprintf_r+0x240>)
 801094e:	429d      	cmp	r5, r3
 8010950:	d11b      	bne.n	801098a <_vfiprintf_r+0x56>
 8010952:	6875      	ldr	r5, [r6, #4]
 8010954:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010956:	07d9      	lsls	r1, r3, #31
 8010958:	d405      	bmi.n	8010966 <_vfiprintf_r+0x32>
 801095a:	89ab      	ldrh	r3, [r5, #12]
 801095c:	059a      	lsls	r2, r3, #22
 801095e:	d402      	bmi.n	8010966 <_vfiprintf_r+0x32>
 8010960:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010962:	f7ff f900 	bl	800fb66 <__retarget_lock_acquire_recursive>
 8010966:	89ab      	ldrh	r3, [r5, #12]
 8010968:	071b      	lsls	r3, r3, #28
 801096a:	d501      	bpl.n	8010970 <_vfiprintf_r+0x3c>
 801096c:	692b      	ldr	r3, [r5, #16]
 801096e:	b9eb      	cbnz	r3, 80109ac <_vfiprintf_r+0x78>
 8010970:	4629      	mov	r1, r5
 8010972:	4630      	mov	r0, r6
 8010974:	f7fd fcd6 	bl	800e324 <__swsetup_r>
 8010978:	b1c0      	cbz	r0, 80109ac <_vfiprintf_r+0x78>
 801097a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801097c:	07dc      	lsls	r4, r3, #31
 801097e:	d50e      	bpl.n	801099e <_vfiprintf_r+0x6a>
 8010980:	f04f 30ff 	mov.w	r0, #4294967295
 8010984:	b01d      	add	sp, #116	; 0x74
 8010986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801098a:	4b7b      	ldr	r3, [pc, #492]	; (8010b78 <_vfiprintf_r+0x244>)
 801098c:	429d      	cmp	r5, r3
 801098e:	d101      	bne.n	8010994 <_vfiprintf_r+0x60>
 8010990:	68b5      	ldr	r5, [r6, #8]
 8010992:	e7df      	b.n	8010954 <_vfiprintf_r+0x20>
 8010994:	4b79      	ldr	r3, [pc, #484]	; (8010b7c <_vfiprintf_r+0x248>)
 8010996:	429d      	cmp	r5, r3
 8010998:	bf08      	it	eq
 801099a:	68f5      	ldreq	r5, [r6, #12]
 801099c:	e7da      	b.n	8010954 <_vfiprintf_r+0x20>
 801099e:	89ab      	ldrh	r3, [r5, #12]
 80109a0:	0598      	lsls	r0, r3, #22
 80109a2:	d4ed      	bmi.n	8010980 <_vfiprintf_r+0x4c>
 80109a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80109a6:	f7ff f8df 	bl	800fb68 <__retarget_lock_release_recursive>
 80109aa:	e7e9      	b.n	8010980 <_vfiprintf_r+0x4c>
 80109ac:	2300      	movs	r3, #0
 80109ae:	9309      	str	r3, [sp, #36]	; 0x24
 80109b0:	2320      	movs	r3, #32
 80109b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80109b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80109ba:	2330      	movs	r3, #48	; 0x30
 80109bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010b80 <_vfiprintf_r+0x24c>
 80109c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80109c4:	f04f 0901 	mov.w	r9, #1
 80109c8:	4623      	mov	r3, r4
 80109ca:	469a      	mov	sl, r3
 80109cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80109d0:	b10a      	cbz	r2, 80109d6 <_vfiprintf_r+0xa2>
 80109d2:	2a25      	cmp	r2, #37	; 0x25
 80109d4:	d1f9      	bne.n	80109ca <_vfiprintf_r+0x96>
 80109d6:	ebba 0b04 	subs.w	fp, sl, r4
 80109da:	d00b      	beq.n	80109f4 <_vfiprintf_r+0xc0>
 80109dc:	465b      	mov	r3, fp
 80109de:	4622      	mov	r2, r4
 80109e0:	4629      	mov	r1, r5
 80109e2:	4630      	mov	r0, r6
 80109e4:	f7ff ff93 	bl	801090e <__sfputs_r>
 80109e8:	3001      	adds	r0, #1
 80109ea:	f000 80aa 	beq.w	8010b42 <_vfiprintf_r+0x20e>
 80109ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80109f0:	445a      	add	r2, fp
 80109f2:	9209      	str	r2, [sp, #36]	; 0x24
 80109f4:	f89a 3000 	ldrb.w	r3, [sl]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	f000 80a2 	beq.w	8010b42 <_vfiprintf_r+0x20e>
 80109fe:	2300      	movs	r3, #0
 8010a00:	f04f 32ff 	mov.w	r2, #4294967295
 8010a04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a08:	f10a 0a01 	add.w	sl, sl, #1
 8010a0c:	9304      	str	r3, [sp, #16]
 8010a0e:	9307      	str	r3, [sp, #28]
 8010a10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010a14:	931a      	str	r3, [sp, #104]	; 0x68
 8010a16:	4654      	mov	r4, sl
 8010a18:	2205      	movs	r2, #5
 8010a1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a1e:	4858      	ldr	r0, [pc, #352]	; (8010b80 <_vfiprintf_r+0x24c>)
 8010a20:	f7ef fbee 	bl	8000200 <memchr>
 8010a24:	9a04      	ldr	r2, [sp, #16]
 8010a26:	b9d8      	cbnz	r0, 8010a60 <_vfiprintf_r+0x12c>
 8010a28:	06d1      	lsls	r1, r2, #27
 8010a2a:	bf44      	itt	mi
 8010a2c:	2320      	movmi	r3, #32
 8010a2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010a32:	0713      	lsls	r3, r2, #28
 8010a34:	bf44      	itt	mi
 8010a36:	232b      	movmi	r3, #43	; 0x2b
 8010a38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010a3c:	f89a 3000 	ldrb.w	r3, [sl]
 8010a40:	2b2a      	cmp	r3, #42	; 0x2a
 8010a42:	d015      	beq.n	8010a70 <_vfiprintf_r+0x13c>
 8010a44:	9a07      	ldr	r2, [sp, #28]
 8010a46:	4654      	mov	r4, sl
 8010a48:	2000      	movs	r0, #0
 8010a4a:	f04f 0c0a 	mov.w	ip, #10
 8010a4e:	4621      	mov	r1, r4
 8010a50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a54:	3b30      	subs	r3, #48	; 0x30
 8010a56:	2b09      	cmp	r3, #9
 8010a58:	d94e      	bls.n	8010af8 <_vfiprintf_r+0x1c4>
 8010a5a:	b1b0      	cbz	r0, 8010a8a <_vfiprintf_r+0x156>
 8010a5c:	9207      	str	r2, [sp, #28]
 8010a5e:	e014      	b.n	8010a8a <_vfiprintf_r+0x156>
 8010a60:	eba0 0308 	sub.w	r3, r0, r8
 8010a64:	fa09 f303 	lsl.w	r3, r9, r3
 8010a68:	4313      	orrs	r3, r2
 8010a6a:	9304      	str	r3, [sp, #16]
 8010a6c:	46a2      	mov	sl, r4
 8010a6e:	e7d2      	b.n	8010a16 <_vfiprintf_r+0xe2>
 8010a70:	9b03      	ldr	r3, [sp, #12]
 8010a72:	1d19      	adds	r1, r3, #4
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	9103      	str	r1, [sp, #12]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	bfbb      	ittet	lt
 8010a7c:	425b      	neglt	r3, r3
 8010a7e:	f042 0202 	orrlt.w	r2, r2, #2
 8010a82:	9307      	strge	r3, [sp, #28]
 8010a84:	9307      	strlt	r3, [sp, #28]
 8010a86:	bfb8      	it	lt
 8010a88:	9204      	strlt	r2, [sp, #16]
 8010a8a:	7823      	ldrb	r3, [r4, #0]
 8010a8c:	2b2e      	cmp	r3, #46	; 0x2e
 8010a8e:	d10c      	bne.n	8010aaa <_vfiprintf_r+0x176>
 8010a90:	7863      	ldrb	r3, [r4, #1]
 8010a92:	2b2a      	cmp	r3, #42	; 0x2a
 8010a94:	d135      	bne.n	8010b02 <_vfiprintf_r+0x1ce>
 8010a96:	9b03      	ldr	r3, [sp, #12]
 8010a98:	1d1a      	adds	r2, r3, #4
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	9203      	str	r2, [sp, #12]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	bfb8      	it	lt
 8010aa2:	f04f 33ff 	movlt.w	r3, #4294967295
 8010aa6:	3402      	adds	r4, #2
 8010aa8:	9305      	str	r3, [sp, #20]
 8010aaa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010b90 <_vfiprintf_r+0x25c>
 8010aae:	7821      	ldrb	r1, [r4, #0]
 8010ab0:	2203      	movs	r2, #3
 8010ab2:	4650      	mov	r0, sl
 8010ab4:	f7ef fba4 	bl	8000200 <memchr>
 8010ab8:	b140      	cbz	r0, 8010acc <_vfiprintf_r+0x198>
 8010aba:	2340      	movs	r3, #64	; 0x40
 8010abc:	eba0 000a 	sub.w	r0, r0, sl
 8010ac0:	fa03 f000 	lsl.w	r0, r3, r0
 8010ac4:	9b04      	ldr	r3, [sp, #16]
 8010ac6:	4303      	orrs	r3, r0
 8010ac8:	3401      	adds	r4, #1
 8010aca:	9304      	str	r3, [sp, #16]
 8010acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ad0:	482c      	ldr	r0, [pc, #176]	; (8010b84 <_vfiprintf_r+0x250>)
 8010ad2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010ad6:	2206      	movs	r2, #6
 8010ad8:	f7ef fb92 	bl	8000200 <memchr>
 8010adc:	2800      	cmp	r0, #0
 8010ade:	d03f      	beq.n	8010b60 <_vfiprintf_r+0x22c>
 8010ae0:	4b29      	ldr	r3, [pc, #164]	; (8010b88 <_vfiprintf_r+0x254>)
 8010ae2:	bb1b      	cbnz	r3, 8010b2c <_vfiprintf_r+0x1f8>
 8010ae4:	9b03      	ldr	r3, [sp, #12]
 8010ae6:	3307      	adds	r3, #7
 8010ae8:	f023 0307 	bic.w	r3, r3, #7
 8010aec:	3308      	adds	r3, #8
 8010aee:	9303      	str	r3, [sp, #12]
 8010af0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010af2:	443b      	add	r3, r7
 8010af4:	9309      	str	r3, [sp, #36]	; 0x24
 8010af6:	e767      	b.n	80109c8 <_vfiprintf_r+0x94>
 8010af8:	fb0c 3202 	mla	r2, ip, r2, r3
 8010afc:	460c      	mov	r4, r1
 8010afe:	2001      	movs	r0, #1
 8010b00:	e7a5      	b.n	8010a4e <_vfiprintf_r+0x11a>
 8010b02:	2300      	movs	r3, #0
 8010b04:	3401      	adds	r4, #1
 8010b06:	9305      	str	r3, [sp, #20]
 8010b08:	4619      	mov	r1, r3
 8010b0a:	f04f 0c0a 	mov.w	ip, #10
 8010b0e:	4620      	mov	r0, r4
 8010b10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b14:	3a30      	subs	r2, #48	; 0x30
 8010b16:	2a09      	cmp	r2, #9
 8010b18:	d903      	bls.n	8010b22 <_vfiprintf_r+0x1ee>
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d0c5      	beq.n	8010aaa <_vfiprintf_r+0x176>
 8010b1e:	9105      	str	r1, [sp, #20]
 8010b20:	e7c3      	b.n	8010aaa <_vfiprintf_r+0x176>
 8010b22:	fb0c 2101 	mla	r1, ip, r1, r2
 8010b26:	4604      	mov	r4, r0
 8010b28:	2301      	movs	r3, #1
 8010b2a:	e7f0      	b.n	8010b0e <_vfiprintf_r+0x1da>
 8010b2c:	ab03      	add	r3, sp, #12
 8010b2e:	9300      	str	r3, [sp, #0]
 8010b30:	462a      	mov	r2, r5
 8010b32:	4b16      	ldr	r3, [pc, #88]	; (8010b8c <_vfiprintf_r+0x258>)
 8010b34:	a904      	add	r1, sp, #16
 8010b36:	4630      	mov	r0, r6
 8010b38:	f7fb fe78 	bl	800c82c <_printf_float>
 8010b3c:	4607      	mov	r7, r0
 8010b3e:	1c78      	adds	r0, r7, #1
 8010b40:	d1d6      	bne.n	8010af0 <_vfiprintf_r+0x1bc>
 8010b42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010b44:	07d9      	lsls	r1, r3, #31
 8010b46:	d405      	bmi.n	8010b54 <_vfiprintf_r+0x220>
 8010b48:	89ab      	ldrh	r3, [r5, #12]
 8010b4a:	059a      	lsls	r2, r3, #22
 8010b4c:	d402      	bmi.n	8010b54 <_vfiprintf_r+0x220>
 8010b4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010b50:	f7ff f80a 	bl	800fb68 <__retarget_lock_release_recursive>
 8010b54:	89ab      	ldrh	r3, [r5, #12]
 8010b56:	065b      	lsls	r3, r3, #25
 8010b58:	f53f af12 	bmi.w	8010980 <_vfiprintf_r+0x4c>
 8010b5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010b5e:	e711      	b.n	8010984 <_vfiprintf_r+0x50>
 8010b60:	ab03      	add	r3, sp, #12
 8010b62:	9300      	str	r3, [sp, #0]
 8010b64:	462a      	mov	r2, r5
 8010b66:	4b09      	ldr	r3, [pc, #36]	; (8010b8c <_vfiprintf_r+0x258>)
 8010b68:	a904      	add	r1, sp, #16
 8010b6a:	4630      	mov	r0, r6
 8010b6c:	f7fc f902 	bl	800cd74 <_printf_i>
 8010b70:	e7e4      	b.n	8010b3c <_vfiprintf_r+0x208>
 8010b72:	bf00      	nop
 8010b74:	080110fc 	.word	0x080110fc
 8010b78:	0801111c 	.word	0x0801111c
 8010b7c:	080110dc 	.word	0x080110dc
 8010b80:	0801131c 	.word	0x0801131c
 8010b84:	08011326 	.word	0x08011326
 8010b88:	0800c82d 	.word	0x0800c82d
 8010b8c:	0801090f 	.word	0x0801090f
 8010b90:	08011322 	.word	0x08011322

08010b94 <_read_r>:
 8010b94:	b538      	push	{r3, r4, r5, lr}
 8010b96:	4d07      	ldr	r5, [pc, #28]	; (8010bb4 <_read_r+0x20>)
 8010b98:	4604      	mov	r4, r0
 8010b9a:	4608      	mov	r0, r1
 8010b9c:	4611      	mov	r1, r2
 8010b9e:	2200      	movs	r2, #0
 8010ba0:	602a      	str	r2, [r5, #0]
 8010ba2:	461a      	mov	r2, r3
 8010ba4:	f7f1 fec6 	bl	8002934 <_read>
 8010ba8:	1c43      	adds	r3, r0, #1
 8010baa:	d102      	bne.n	8010bb2 <_read_r+0x1e>
 8010bac:	682b      	ldr	r3, [r5, #0]
 8010bae:	b103      	cbz	r3, 8010bb2 <_read_r+0x1e>
 8010bb0:	6023      	str	r3, [r4, #0]
 8010bb2:	bd38      	pop	{r3, r4, r5, pc}
 8010bb4:	20002d04 	.word	0x20002d04

08010bb8 <nan>:
 8010bb8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010bc0 <nan+0x8>
 8010bbc:	4770      	bx	lr
 8010bbe:	bf00      	nop
 8010bc0:	00000000 	.word	0x00000000
 8010bc4:	7ff80000 	.word	0x7ff80000

08010bc8 <__ascii_wctomb>:
 8010bc8:	b149      	cbz	r1, 8010bde <__ascii_wctomb+0x16>
 8010bca:	2aff      	cmp	r2, #255	; 0xff
 8010bcc:	bf85      	ittet	hi
 8010bce:	238a      	movhi	r3, #138	; 0x8a
 8010bd0:	6003      	strhi	r3, [r0, #0]
 8010bd2:	700a      	strbls	r2, [r1, #0]
 8010bd4:	f04f 30ff 	movhi.w	r0, #4294967295
 8010bd8:	bf98      	it	ls
 8010bda:	2001      	movls	r0, #1
 8010bdc:	4770      	bx	lr
 8010bde:	4608      	mov	r0, r1
 8010be0:	4770      	bx	lr
	...

08010be4 <__assert_func>:
 8010be4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010be6:	4614      	mov	r4, r2
 8010be8:	461a      	mov	r2, r3
 8010bea:	4b09      	ldr	r3, [pc, #36]	; (8010c10 <__assert_func+0x2c>)
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	4605      	mov	r5, r0
 8010bf0:	68d8      	ldr	r0, [r3, #12]
 8010bf2:	b14c      	cbz	r4, 8010c08 <__assert_func+0x24>
 8010bf4:	4b07      	ldr	r3, [pc, #28]	; (8010c14 <__assert_func+0x30>)
 8010bf6:	9100      	str	r1, [sp, #0]
 8010bf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010bfc:	4906      	ldr	r1, [pc, #24]	; (8010c18 <__assert_func+0x34>)
 8010bfe:	462b      	mov	r3, r5
 8010c00:	f000 f80e 	bl	8010c20 <fiprintf>
 8010c04:	f000 f880 	bl	8010d08 <abort>
 8010c08:	4b04      	ldr	r3, [pc, #16]	; (8010c1c <__assert_func+0x38>)
 8010c0a:	461c      	mov	r4, r3
 8010c0c:	e7f3      	b.n	8010bf6 <__assert_func+0x12>
 8010c0e:	bf00      	nop
 8010c10:	20000198 	.word	0x20000198
 8010c14:	0801132d 	.word	0x0801132d
 8010c18:	0801133a 	.word	0x0801133a
 8010c1c:	08011368 	.word	0x08011368

08010c20 <fiprintf>:
 8010c20:	b40e      	push	{r1, r2, r3}
 8010c22:	b503      	push	{r0, r1, lr}
 8010c24:	4601      	mov	r1, r0
 8010c26:	ab03      	add	r3, sp, #12
 8010c28:	4805      	ldr	r0, [pc, #20]	; (8010c40 <fiprintf+0x20>)
 8010c2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c2e:	6800      	ldr	r0, [r0, #0]
 8010c30:	9301      	str	r3, [sp, #4]
 8010c32:	f7ff fe7f 	bl	8010934 <_vfiprintf_r>
 8010c36:	b002      	add	sp, #8
 8010c38:	f85d eb04 	ldr.w	lr, [sp], #4
 8010c3c:	b003      	add	sp, #12
 8010c3e:	4770      	bx	lr
 8010c40:	20000198 	.word	0x20000198

08010c44 <_fstat_r>:
 8010c44:	b538      	push	{r3, r4, r5, lr}
 8010c46:	4d07      	ldr	r5, [pc, #28]	; (8010c64 <_fstat_r+0x20>)
 8010c48:	2300      	movs	r3, #0
 8010c4a:	4604      	mov	r4, r0
 8010c4c:	4608      	mov	r0, r1
 8010c4e:	4611      	mov	r1, r2
 8010c50:	602b      	str	r3, [r5, #0]
 8010c52:	f7f1 feb4 	bl	80029be <_fstat>
 8010c56:	1c43      	adds	r3, r0, #1
 8010c58:	d102      	bne.n	8010c60 <_fstat_r+0x1c>
 8010c5a:	682b      	ldr	r3, [r5, #0]
 8010c5c:	b103      	cbz	r3, 8010c60 <_fstat_r+0x1c>
 8010c5e:	6023      	str	r3, [r4, #0]
 8010c60:	bd38      	pop	{r3, r4, r5, pc}
 8010c62:	bf00      	nop
 8010c64:	20002d04 	.word	0x20002d04

08010c68 <_isatty_r>:
 8010c68:	b538      	push	{r3, r4, r5, lr}
 8010c6a:	4d06      	ldr	r5, [pc, #24]	; (8010c84 <_isatty_r+0x1c>)
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	4604      	mov	r4, r0
 8010c70:	4608      	mov	r0, r1
 8010c72:	602b      	str	r3, [r5, #0]
 8010c74:	f7f1 feb3 	bl	80029de <_isatty>
 8010c78:	1c43      	adds	r3, r0, #1
 8010c7a:	d102      	bne.n	8010c82 <_isatty_r+0x1a>
 8010c7c:	682b      	ldr	r3, [r5, #0]
 8010c7e:	b103      	cbz	r3, 8010c82 <_isatty_r+0x1a>
 8010c80:	6023      	str	r3, [r4, #0]
 8010c82:	bd38      	pop	{r3, r4, r5, pc}
 8010c84:	20002d04 	.word	0x20002d04

08010c88 <memmove>:
 8010c88:	4288      	cmp	r0, r1
 8010c8a:	b510      	push	{r4, lr}
 8010c8c:	eb01 0402 	add.w	r4, r1, r2
 8010c90:	d902      	bls.n	8010c98 <memmove+0x10>
 8010c92:	4284      	cmp	r4, r0
 8010c94:	4623      	mov	r3, r4
 8010c96:	d807      	bhi.n	8010ca8 <memmove+0x20>
 8010c98:	1e43      	subs	r3, r0, #1
 8010c9a:	42a1      	cmp	r1, r4
 8010c9c:	d008      	beq.n	8010cb0 <memmove+0x28>
 8010c9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010ca2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010ca6:	e7f8      	b.n	8010c9a <memmove+0x12>
 8010ca8:	4402      	add	r2, r0
 8010caa:	4601      	mov	r1, r0
 8010cac:	428a      	cmp	r2, r1
 8010cae:	d100      	bne.n	8010cb2 <memmove+0x2a>
 8010cb0:	bd10      	pop	{r4, pc}
 8010cb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010cb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010cba:	e7f7      	b.n	8010cac <memmove+0x24>

08010cbc <_realloc_r>:
 8010cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cbe:	4607      	mov	r7, r0
 8010cc0:	4614      	mov	r4, r2
 8010cc2:	460e      	mov	r6, r1
 8010cc4:	b921      	cbnz	r1, 8010cd0 <_realloc_r+0x14>
 8010cc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010cca:	4611      	mov	r1, r2
 8010ccc:	f7fb bcb4 	b.w	800c638 <_malloc_r>
 8010cd0:	b922      	cbnz	r2, 8010cdc <_realloc_r+0x20>
 8010cd2:	f7fb fc61 	bl	800c598 <_free_r>
 8010cd6:	4625      	mov	r5, r4
 8010cd8:	4628      	mov	r0, r5
 8010cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010cdc:	f000 f81b 	bl	8010d16 <_malloc_usable_size_r>
 8010ce0:	42a0      	cmp	r0, r4
 8010ce2:	d20f      	bcs.n	8010d04 <_realloc_r+0x48>
 8010ce4:	4621      	mov	r1, r4
 8010ce6:	4638      	mov	r0, r7
 8010ce8:	f7fb fca6 	bl	800c638 <_malloc_r>
 8010cec:	4605      	mov	r5, r0
 8010cee:	2800      	cmp	r0, #0
 8010cf0:	d0f2      	beq.n	8010cd8 <_realloc_r+0x1c>
 8010cf2:	4631      	mov	r1, r6
 8010cf4:	4622      	mov	r2, r4
 8010cf6:	f7fb fc39 	bl	800c56c <memcpy>
 8010cfa:	4631      	mov	r1, r6
 8010cfc:	4638      	mov	r0, r7
 8010cfe:	f7fb fc4b 	bl	800c598 <_free_r>
 8010d02:	e7e9      	b.n	8010cd8 <_realloc_r+0x1c>
 8010d04:	4635      	mov	r5, r6
 8010d06:	e7e7      	b.n	8010cd8 <_realloc_r+0x1c>

08010d08 <abort>:
 8010d08:	b508      	push	{r3, lr}
 8010d0a:	2006      	movs	r0, #6
 8010d0c:	f000 f834 	bl	8010d78 <raise>
 8010d10:	2001      	movs	r0, #1
 8010d12:	f7f1 fe05 	bl	8002920 <_exit>

08010d16 <_malloc_usable_size_r>:
 8010d16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d1a:	1f18      	subs	r0, r3, #4
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	bfbc      	itt	lt
 8010d20:	580b      	ldrlt	r3, [r1, r0]
 8010d22:	18c0      	addlt	r0, r0, r3
 8010d24:	4770      	bx	lr

08010d26 <_raise_r>:
 8010d26:	291f      	cmp	r1, #31
 8010d28:	b538      	push	{r3, r4, r5, lr}
 8010d2a:	4604      	mov	r4, r0
 8010d2c:	460d      	mov	r5, r1
 8010d2e:	d904      	bls.n	8010d3a <_raise_r+0x14>
 8010d30:	2316      	movs	r3, #22
 8010d32:	6003      	str	r3, [r0, #0]
 8010d34:	f04f 30ff 	mov.w	r0, #4294967295
 8010d38:	bd38      	pop	{r3, r4, r5, pc}
 8010d3a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010d3c:	b112      	cbz	r2, 8010d44 <_raise_r+0x1e>
 8010d3e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010d42:	b94b      	cbnz	r3, 8010d58 <_raise_r+0x32>
 8010d44:	4620      	mov	r0, r4
 8010d46:	f000 f831 	bl	8010dac <_getpid_r>
 8010d4a:	462a      	mov	r2, r5
 8010d4c:	4601      	mov	r1, r0
 8010d4e:	4620      	mov	r0, r4
 8010d50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d54:	f000 b818 	b.w	8010d88 <_kill_r>
 8010d58:	2b01      	cmp	r3, #1
 8010d5a:	d00a      	beq.n	8010d72 <_raise_r+0x4c>
 8010d5c:	1c59      	adds	r1, r3, #1
 8010d5e:	d103      	bne.n	8010d68 <_raise_r+0x42>
 8010d60:	2316      	movs	r3, #22
 8010d62:	6003      	str	r3, [r0, #0]
 8010d64:	2001      	movs	r0, #1
 8010d66:	e7e7      	b.n	8010d38 <_raise_r+0x12>
 8010d68:	2400      	movs	r4, #0
 8010d6a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010d6e:	4628      	mov	r0, r5
 8010d70:	4798      	blx	r3
 8010d72:	2000      	movs	r0, #0
 8010d74:	e7e0      	b.n	8010d38 <_raise_r+0x12>
	...

08010d78 <raise>:
 8010d78:	4b02      	ldr	r3, [pc, #8]	; (8010d84 <raise+0xc>)
 8010d7a:	4601      	mov	r1, r0
 8010d7c:	6818      	ldr	r0, [r3, #0]
 8010d7e:	f7ff bfd2 	b.w	8010d26 <_raise_r>
 8010d82:	bf00      	nop
 8010d84:	20000198 	.word	0x20000198

08010d88 <_kill_r>:
 8010d88:	b538      	push	{r3, r4, r5, lr}
 8010d8a:	4d07      	ldr	r5, [pc, #28]	; (8010da8 <_kill_r+0x20>)
 8010d8c:	2300      	movs	r3, #0
 8010d8e:	4604      	mov	r4, r0
 8010d90:	4608      	mov	r0, r1
 8010d92:	4611      	mov	r1, r2
 8010d94:	602b      	str	r3, [r5, #0]
 8010d96:	f7f1 fdb3 	bl	8002900 <_kill>
 8010d9a:	1c43      	adds	r3, r0, #1
 8010d9c:	d102      	bne.n	8010da4 <_kill_r+0x1c>
 8010d9e:	682b      	ldr	r3, [r5, #0]
 8010da0:	b103      	cbz	r3, 8010da4 <_kill_r+0x1c>
 8010da2:	6023      	str	r3, [r4, #0]
 8010da4:	bd38      	pop	{r3, r4, r5, pc}
 8010da6:	bf00      	nop
 8010da8:	20002d04 	.word	0x20002d04

08010dac <_getpid_r>:
 8010dac:	f7f1 bda0 	b.w	80028f0 <_getpid>

08010db0 <_init>:
 8010db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010db2:	bf00      	nop
 8010db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010db6:	bc08      	pop	{r3}
 8010db8:	469e      	mov	lr, r3
 8010dba:	4770      	bx	lr

08010dbc <_fini>:
 8010dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dbe:	bf00      	nop
 8010dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010dc2:	bc08      	pop	{r3}
 8010dc4:	469e      	mov	lr, r3
 8010dc6:	4770      	bx	lr
