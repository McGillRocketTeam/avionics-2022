
f437_fc_v4.1.5_blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010738  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  080108e8  080108e8  000208e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010e04  08010e04  0003036c  2**0
                  CONTENTS
  4 .ARM          00000008  08010e04  08010e04  00020e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010e0c  08010e0c  0003036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010e0c  08010e0c  00020e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010e10  08010e10  00020e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000036c  20000000  08010e14  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003036c  2**0
                  CONTENTS
 10 .bss          000028bc  2000036c  2000036c  0003036c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002c28  20002c28  0003036c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003036c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003d23c  00000000  00000000  0003039c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005921  00000000  00000000  0006d5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002578  00000000  00000000  00072f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002388  00000000  00000000  00075478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b7c1  00000000  00000000  00077800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002843f  00000000  00000000  000a2fc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fa0be  00000000  00000000  000cb400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001c54be  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b580  00000000  00000000  001c5514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000036c 	.word	0x2000036c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080108d0 	.word	0x080108d0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000370 	.word	0x20000370
 80001ec:	080108d0 	.word	0x080108d0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <lsm6dsl_init>:
                             uint16_t len);
static void platform_delay(uint32_t ms);

/* LSM6DSL Functions ---------------------------------------------------------*/

stmdev_ctx_t lsm6dsl_init(void){
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b087      	sub	sp, #28
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

	stmdev_ctx_t dev_ctx_lsm6dsl;

	/* Initialize mems driver interface */
	dev_ctx_lsm6dsl.write_reg = lsm6dsl_write;
 8001014:	4b2f      	ldr	r3, [pc, #188]	; (80010d4 <lsm6dsl_init+0xc8>)
 8001016:	60fb      	str	r3, [r7, #12]
	dev_ctx_lsm6dsl.read_reg = lsm6dsl_read;
 8001018:	4b2f      	ldr	r3, [pc, #188]	; (80010d8 <lsm6dsl_init+0xcc>)
 800101a:	613b      	str	r3, [r7, #16]
	dev_ctx_lsm6dsl.handle = &SENSOR_BUS;
 800101c:	4b2f      	ldr	r3, [pc, #188]	; (80010dc <lsm6dsl_init+0xd0>)
 800101e:	617b      	str	r3, [r7, #20]

	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 8001020:	200a      	movs	r0, #10
 8001022:	f000 f92d 	bl	8001280 <platform_delay>

	/* Check device ID */
	lsm6dsl_device_id_get(&dev_ctx_lsm6dsl, &whoamI_lsm6dsl);
 8001026:	f107 030c 	add.w	r3, r7, #12
 800102a:	492d      	ldr	r1, [pc, #180]	; (80010e0 <lsm6dsl_init+0xd4>)
 800102c:	4618      	mov	r0, r3
 800102e:	f000 fb14 	bl	800165a <lsm6dsl_device_id_get>

	if (whoamI_lsm6dsl != LSM6DSL_ID){
 8001032:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <lsm6dsl_init+0xd4>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b6a      	cmp	r3, #106	; 0x6a
 8001038:	d005      	beq.n	8001046 <lsm6dsl_init+0x3a>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800103a:	2201      	movs	r2, #1
 800103c:	2102      	movs	r1, #2
 800103e:	4829      	ldr	r0, [pc, #164]	; (80010e4 <lsm6dsl_init+0xd8>)
 8001040:	f002 f9ac 	bl	800339c <HAL_GPIO_WritePin>
		__BKPT();
 8001044:	be00      	bkpt	0x0000
//		Error_Handler();
	}

	/* Restore default configuration */
	lsm6dsl_reset_set(&dev_ctx_lsm6dsl, PROPERTY_ENABLE);
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	2101      	movs	r1, #1
 800104c:	4618      	mov	r0, r3
 800104e:	f000 fb15 	bl	800167c <lsm6dsl_reset_set>

	do {
	lsm6dsl_reset_get(&dev_ctx_lsm6dsl, &rst_lsm6dsl);
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	4924      	ldr	r1, [pc, #144]	; (80010e8 <lsm6dsl_init+0xdc>)
 8001058:	4618      	mov	r0, r3
 800105a:	f000 fb35 	bl	80016c8 <lsm6dsl_reset_get>
	} while (rst_lsm6dsl);
 800105e:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <lsm6dsl_init+0xdc>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1f5      	bne.n	8001052 <lsm6dsl_init+0x46>

	/* Enable Block Data Update */
	lsm6dsl_block_data_update_set(&dev_ctx_lsm6dsl, PROPERTY_ENABLE);
 8001066:	f107 030c 	add.w	r3, r7, #12
 800106a:	2101      	movs	r1, #1
 800106c:	4618      	mov	r0, r3
 800106e:	f000 face 	bl	800160e <lsm6dsl_block_data_update_set>

	/* Set Output Data Rate */
	lsm6dsl_xl_data_rate_set(&dev_ctx_lsm6dsl, LSM6DSL_XL_ODR_104Hz);
 8001072:	f107 030c 	add.w	r3, r7, #12
 8001076:	2104      	movs	r1, #4
 8001078:	4618      	mov	r0, r3
 800107a:	f000 fa56 	bl	800152a <lsm6dsl_xl_data_rate_set>
	lsm6dsl_gy_data_rate_set(&dev_ctx_lsm6dsl, LSM6DSL_GY_ODR_104Hz);
 800107e:	f107 030c 	add.w	r3, r7, #12
 8001082:	2104      	movs	r1, #4
 8001084:	4618      	mov	r0, r3
 8001086:	f000 fa9c 	bl	80015c2 <lsm6dsl_gy_data_rate_set>

	/* Set full scale */
	lsm6dsl_xl_full_scale_set(&dev_ctx_lsm6dsl, LSM6DSL_8g);
 800108a:	f107 030c 	add.w	r3, r7, #12
 800108e:	2103      	movs	r1, #3
 8001090:	4618      	mov	r0, r3
 8001092:	f000 fa24 	bl	80014de <lsm6dsl_xl_full_scale_set>
	lsm6dsl_gy_full_scale_set(&dev_ctx_lsm6dsl, LSM6DSL_2000dps);
 8001096:	f107 030c 	add.w	r3, r7, #12
 800109a:	2106      	movs	r1, #6
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fa6a 	bl	8001576 <lsm6dsl_gy_full_scale_set>

	/* Configure filtering chain(No aux interface)
	* Accelerometer - LPF1 + LPF2 path
	*/
	lsm6dsl_xl_lp2_bandwidth_set(&dev_ctx_lsm6dsl, LSM6DSL_XL_LOW_NOISE_LP_ODR_DIV_100);
 80010a2:	f107 030c 	add.w	r3, r7, #12
 80010a6:	2111      	movs	r1, #17
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 fb26 	bl	80016fa <lsm6dsl_xl_lp2_bandwidth_set>
	/* Accelerometer - High Pass / Slope path */
	//lsm6dsl_xl_reference_mode_set(&dev_ctx_lsm, PROPERTY_DISABLE);
	//lsm6dsl_xl_hp_bandwidth_set(&dev_ctx_lsm, LSM6DSL_XL_HP_ODR_DIV_100);
	/* Gyroscope - filtering chain */
	lsm6dsl_gy_band_pass_set(&dev_ctx_lsm6dsl, LSM6DSL_HP_260mHz_LP1_STRONG);
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	21a8      	movs	r1, #168	; 0xa8
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 fb57 	bl	8001768 <lsm6dsl_gy_band_pass_set>

	return dev_ctx_lsm6dsl;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	461c      	mov	r4, r3
 80010be:	f107 030c 	add.w	r3, r7, #12
 80010c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	371c      	adds	r7, #28
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd90      	pop	{r4, r7, pc}
 80010d2:	bf00      	nop
 80010d4:	08001199 	.word	0x08001199
 80010d8:	080011d3 	.word	0x080011d3
 80010dc:	20000628 	.word	0x20000628
 80010e0:	20000388 	.word	0x20000388
 80010e4:	40020800 	.word	0x40020800
 80010e8:	20000389 	.word	0x20000389

080010ec <lps22hh_init>:
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
	}
}

/* LPS22HH Functions ---------------------------------------------------------*/
stmdev_ctx_t lps22hh_init(void){
 80010ec:	b590      	push	{r4, r7, lr}
 80010ee:	b087      	sub	sp, #28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	stmdev_ctx_t dev_ctx_lps22hh;

	/* Initialize mems driver interface */
	dev_ctx_lps22hh.write_reg = lps22hh_write;
 80010f4:	4b22      	ldr	r3, [pc, #136]	; (8001180 <lps22hh_init+0x94>)
 80010f6:	60fb      	str	r3, [r7, #12]
	dev_ctx_lps22hh.read_reg = lps22hh_read;
 80010f8:	4b22      	ldr	r3, [pc, #136]	; (8001184 <lps22hh_init+0x98>)
 80010fa:	613b      	str	r3, [r7, #16]
	dev_ctx_lps22hh.handle = &SENSOR_BUS;
 80010fc:	4b22      	ldr	r3, [pc, #136]	; (8001188 <lps22hh_init+0x9c>)
 80010fe:	617b      	str	r3, [r7, #20]


	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 8001100:	200a      	movs	r0, #10
 8001102:	f000 f8bd 	bl	8001280 <platform_delay>

	/* Check device ID */
	whoamI_lps22hh = 0;
 8001106:	4b21      	ldr	r3, [pc, #132]	; (800118c <lps22hh_init+0xa0>)
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
	lps22hh_device_id_get(&dev_ctx_lps22hh, &whoamI_lps22hh);
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	491e      	ldr	r1, [pc, #120]	; (800118c <lps22hh_init+0xa0>)
 8001112:	4618      	mov	r0, r3
 8001114:	f000 f963 	bl	80013de <lps22hh_device_id_get>

	if ( whoamI_lps22hh != LPS22HH_ID ){
 8001118:	4b1c      	ldr	r3, [pc, #112]	; (800118c <lps22hh_init+0xa0>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2bb3      	cmp	r3, #179	; 0xb3
 800111e:	d007      	beq.n	8001130 <lps22hh_init+0x44>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001120:	2201      	movs	r2, #1
 8001122:	2104      	movs	r1, #4
 8001124:	481a      	ldr	r0, [pc, #104]	; (8001190 <lps22hh_init+0xa4>)
 8001126:	f002 f939 	bl	800339c <HAL_GPIO_WritePin>
		__BKPT();
 800112a:	be00      	bkpt	0x0000
		Error_Handler();
 800112c:	f000 ffd6 	bl	80020dc <Error_Handler>
	}


	/* Restore default configuration */
	lps22hh_reset_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	2101      	movs	r1, #1
 8001136:	4618      	mov	r0, r3
 8001138:	f000 f962 	bl	8001400 <lps22hh_reset_set>

	do {
		lps22hh_reset_get(&dev_ctx_lps22hh, &rst_lps22hh);
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	4914      	ldr	r1, [pc, #80]	; (8001194 <lps22hh_init+0xa8>)
 8001142:	4618      	mov	r0, r3
 8001144:	f000 f982 	bl	800144c <lps22hh_reset_get>
	} while (rst_lps22hh);
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <lps22hh_init+0xa8>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1f5      	bne.n	800113c <lps22hh_init+0x50>

	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	2101      	movs	r1, #1
 8001156:	4618      	mov	r0, r3
 8001158:	f000 f8cd 	bl	80012f6 <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&dev_ctx_lps22hh, LPS22HH_75_Hz_LOW_NOISE);
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	2115      	movs	r1, #21
 8001162:	4618      	mov	r0, r3
 8001164:	f000 f8ed 	bl	8001342 <lps22hh_data_rate_set>

	return dev_ctx_lps22hh;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	461c      	mov	r4, r3
 800116c:	f107 030c 	add.w	r3, r7, #12
 8001170:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001174:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	371c      	adds	r7, #28
 800117c:	46bd      	mov	sp, r7
 800117e:	bd90      	pop	{r4, r7, pc}
 8001180:	0800120d 	.word	0x0800120d
 8001184:	08001247 	.word	0x08001247
 8001188:	20000628 	.word	0x20000628
 800118c:	2000038a 	.word	0x2000038a
 8001190:	40020800 	.word	0x40020800
 8001194:	2000038b 	.word	0x2000038b

08001198 <lsm6dsl_write>:
 *
 */
static int32_t lsm6dsl_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af04      	add	r7, sp, #16
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	607a      	str	r2, [r7, #4]
 80011a2:	461a      	mov	r2, r3
 80011a4:	460b      	mov	r3, r1
 80011a6:	72fb      	strb	r3, [r7, #11]
 80011a8:	4613      	mov	r3, r2
 80011aa:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LSM6DSL_I2C_ADD_L, reg,
 80011ac:	7afb      	ldrb	r3, [r7, #11]
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b4:	9302      	str	r3, [sp, #8]
 80011b6:	893b      	ldrh	r3, [r7, #8]
 80011b8:	9301      	str	r3, [sp, #4]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	2301      	movs	r3, #1
 80011c0:	21d5      	movs	r1, #213	; 0xd5
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f002 fa7a 	bl	80036bc <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <lsm6dsl_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lsm6dsl_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b088      	sub	sp, #32
 80011d6:	af04      	add	r7, sp, #16
 80011d8:	60f8      	str	r0, [r7, #12]
 80011da:	607a      	str	r2, [r7, #4]
 80011dc:	461a      	mov	r2, r3
 80011de:	460b      	mov	r3, r1
 80011e0:	72fb      	strb	r3, [r7, #11]
 80011e2:	4613      	mov	r3, r2
 80011e4:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Read(handle, LSM6DSL_I2C_ADD_L, reg,
 80011e6:	7afb      	ldrb	r3, [r7, #11]
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ee:	9302      	str	r3, [sp, #8]
 80011f0:	893b      	ldrh	r3, [r7, #8]
 80011f2:	9301      	str	r3, [sp, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2301      	movs	r3, #1
 80011fa:	21d5      	movs	r1, #213	; 0xd5
 80011fc:	68f8      	ldr	r0, [r7, #12]
 80011fe:	f002 fb57 	bl	80038b0 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <lps22hh_write>:
 *
 */
static int32_t lps22hh_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af04      	add	r7, sp, #16
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	461a      	mov	r2, r3
 8001218:	460b      	mov	r3, r1
 800121a:	72fb      	strb	r3, [r7, #11]
 800121c:	4613      	mov	r3, r2
 800121e:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_L, reg,
 8001220:	7afb      	ldrb	r3, [r7, #11]
 8001222:	b29a      	uxth	r2, r3
 8001224:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001228:	9302      	str	r3, [sp, #8]
 800122a:	893b      	ldrh	r3, [r7, #8]
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2301      	movs	r3, #1
 8001234:	21b9      	movs	r1, #185	; 0xb9
 8001236:	68f8      	ldr	r0, [r7, #12]
 8001238:	f002 fa40 	bl	80036bc <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <lps22hh_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lps22hh_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b088      	sub	sp, #32
 800124a:	af04      	add	r7, sp, #16
 800124c:	60f8      	str	r0, [r7, #12]
 800124e:	607a      	str	r2, [r7, #4]
 8001250:	461a      	mov	r2, r3
 8001252:	460b      	mov	r3, r1
 8001254:	72fb      	strb	r3, [r7, #11]
 8001256:	4613      	mov	r3, r2
 8001258:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_L, reg,
 800125a:	7afb      	ldrb	r3, [r7, #11]
 800125c:	b29a      	uxth	r2, r3
 800125e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001262:	9302      	str	r3, [sp, #8]
 8001264:	893b      	ldrh	r3, [r7, #8]
 8001266:	9301      	str	r3, [sp, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2301      	movs	r3, #1
 800126e:	21b9      	movs	r1, #185	; 0xb9
 8001270:	68f8      	ldr	r0, [r7, #12]
 8001272:	f002 fb1d 	bl	80038b0 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f001 fb33 	bl	80028f4 <HAL_Delay>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001296:	b590      	push	{r4, r7, lr}
 8001298:	b087      	sub	sp, #28
 800129a:	af00      	add	r7, sp, #0
 800129c:	60f8      	str	r0, [r7, #12]
 800129e:	607a      	str	r2, [r7, #4]
 80012a0:	461a      	mov	r2, r3
 80012a2:	460b      	mov	r3, r1
 80012a4:	72fb      	strb	r3, [r7, #11]
 80012a6:	4613      	mov	r3, r2
 80012a8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	685c      	ldr	r4, [r3, #4]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6898      	ldr	r0, [r3, #8]
 80012b2:	893b      	ldrh	r3, [r7, #8]
 80012b4:	7af9      	ldrb	r1, [r7, #11]
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	47a0      	blx	r4
 80012ba:	6178      	str	r0, [r7, #20]

  return ret;
 80012bc:	697b      	ldr	r3, [r7, #20]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	371c      	adds	r7, #28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd90      	pop	{r4, r7, pc}

080012c6 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80012c6:	b590      	push	{r4, r7, lr}
 80012c8:	b087      	sub	sp, #28
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	60f8      	str	r0, [r7, #12]
 80012ce:	607a      	str	r2, [r7, #4]
 80012d0:	461a      	mov	r2, r3
 80012d2:	460b      	mov	r3, r1
 80012d4:	72fb      	strb	r3, [r7, #11]
 80012d6:	4613      	mov	r3, r2
 80012d8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681c      	ldr	r4, [r3, #0]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6898      	ldr	r0, [r3, #8]
 80012e2:	893b      	ldrh	r3, [r7, #8]
 80012e4:	7af9      	ldrb	r1, [r7, #11]
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	47a0      	blx	r4
 80012ea:	6178      	str	r0, [r7, #20]

  return ret;
 80012ec:	697b      	ldr	r3, [r7, #20]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	371c      	adds	r7, #28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd90      	pop	{r4, r7, pc}

080012f6 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b084      	sub	sp, #16
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	460b      	mov	r3, r1
 8001300:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8001302:	f107 0208 	add.w	r2, r7, #8
 8001306:	2301      	movs	r3, #1
 8001308:	2110      	movs	r1, #16
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff ffc3 	bl	8001296 <lps22hh_read_reg>
 8001310:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d10f      	bne.n	8001338 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8001318:	78fb      	ldrb	r3, [r7, #3]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	b2da      	uxtb	r2, r3
 8001320:	7a3b      	ldrb	r3, [r7, #8]
 8001322:	f362 0341 	bfi	r3, r2, #1, #1
 8001326:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8001328:	f107 0208 	add.w	r2, r7, #8
 800132c:	2301      	movs	r3, #1
 800132e:	2110      	movs	r1, #16
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ffc8 	bl	80012c6 <lps22hh_write_reg>
 8001336:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001338:	68fb      	ldr	r3, [r7, #12]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b086      	sub	sp, #24
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	460b      	mov	r3, r1
 800134c:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800134e:	f107 0210 	add.w	r2, r7, #16
 8001352:	2301      	movs	r3, #1
 8001354:	2110      	movs	r1, #16
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ff9d 	bl	8001296 <lps22hh_read_reg>
 800135c:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d107      	bne.n	8001374 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8001364:	f107 020c 	add.w	r2, r7, #12
 8001368:	2301      	movs	r3, #1
 800136a:	2111      	movs	r1, #17
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff ff92 	bl	8001296 <lps22hh_read_reg>
 8001372:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10f      	bne.n	800139a <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 800137a:	78fb      	ldrb	r3, [r7, #3]
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	b2da      	uxtb	r2, r3
 8001382:	7c3b      	ldrb	r3, [r7, #16]
 8001384:	f362 1306 	bfi	r3, r2, #4, #3
 8001388:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800138a:	f107 0210 	add.w	r2, r7, #16
 800138e:	2301      	movs	r3, #1
 8001390:	2110      	movs	r1, #16
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff ff97 	bl	80012c6 <lps22hh_write_reg>
 8001398:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d119      	bne.n	80013d4 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 80013a0:	78fb      	ldrb	r3, [r7, #3]
 80013a2:	091b      	lsrs	r3, r3, #4
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	7b3b      	ldrb	r3, [r7, #12]
 80013ac:	f362 0341 	bfi	r3, r2, #1, #1
 80013b0:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 80013b2:	78fb      	ldrb	r3, [r7, #3]
 80013b4:	08db      	lsrs	r3, r3, #3
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	7b3b      	ldrb	r3, [r7, #12]
 80013be:	f362 0300 	bfi	r3, r2, #0, #1
 80013c2:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80013c4:	f107 020c 	add.w	r2, r7, #12
 80013c8:	2301      	movs	r3, #1
 80013ca:	2111      	movs	r1, #17
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff ff7a 	bl	80012c6 <lps22hh_write_reg>
 80013d2:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80013d4:	697b      	ldr	r3, [r7, #20]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b084      	sub	sp, #16
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 80013e8:	2301      	movs	r3, #1
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	210f      	movs	r1, #15
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff ff51 	bl	8001296 <lps22hh_read_reg>
 80013f4:	60f8      	str	r0, [r7, #12]

  return ret;
 80013f6:	68fb      	ldr	r3, [r7, #12]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800140c:	f107 0208 	add.w	r2, r7, #8
 8001410:	2301      	movs	r3, #1
 8001412:	2111      	movs	r1, #17
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ff3e 	bl	8001296 <lps22hh_read_reg>
 800141a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d10f      	bne.n	8001442 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8001422:	78fb      	ldrb	r3, [r7, #3]
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	b2da      	uxtb	r2, r3
 800142a:	7a3b      	ldrb	r3, [r7, #8]
 800142c:	f362 0382 	bfi	r3, r2, #2, #1
 8001430:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8001432:	f107 0208 	add.w	r2, r7, #8
 8001436:	2301      	movs	r3, #1
 8001438:	2111      	movs	r1, #17
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff ff43 	bl	80012c6 <lps22hh_write_reg>
 8001440:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001442:	68fb      	ldr	r3, [r7, #12]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8001456:	f107 0208 	add.w	r2, r7, #8
 800145a:	2301      	movs	r3, #1
 800145c:	2111      	movs	r1, #17
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff ff19 	bl	8001296 <lps22hh_read_reg>
 8001464:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8001466:	7a3b      	ldrb	r3, [r7, #8]
 8001468:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800146c:	b2db      	uxtb	r3, r3
 800146e:	461a      	mov	r2, r3
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	701a      	strb	r2, [r3, #0]

  return ret;
 8001474:	68fb      	ldr	r3, [r7, #12]
}
 8001476:	4618      	mov	r0, r3
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800147e:	b590      	push	{r4, r7, lr}
 8001480:	b087      	sub	sp, #28
 8001482:	af00      	add	r7, sp, #0
 8001484:	60f8      	str	r0, [r7, #12]
 8001486:	607a      	str	r2, [r7, #4]
 8001488:	461a      	mov	r2, r3
 800148a:	460b      	mov	r3, r1
 800148c:	72fb      	strb	r3, [r7, #11]
 800148e:	4613      	mov	r3, r2
 8001490:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	685c      	ldr	r4, [r3, #4]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6898      	ldr	r0, [r3, #8]
 800149a:	893b      	ldrh	r3, [r7, #8]
 800149c:	7af9      	ldrb	r1, [r7, #11]
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	47a0      	blx	r4
 80014a2:	6178      	str	r0, [r7, #20]

  return ret;
 80014a4:	697b      	ldr	r3, [r7, #20]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	371c      	adds	r7, #28
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd90      	pop	{r4, r7, pc}

080014ae <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80014ae:	b590      	push	{r4, r7, lr}
 80014b0:	b087      	sub	sp, #28
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	60f8      	str	r0, [r7, #12]
 80014b6:	607a      	str	r2, [r7, #4]
 80014b8:	461a      	mov	r2, r3
 80014ba:	460b      	mov	r3, r1
 80014bc:	72fb      	strb	r3, [r7, #11]
 80014be:	4613      	mov	r3, r2
 80014c0:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681c      	ldr	r4, [r3, #0]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6898      	ldr	r0, [r3, #8]
 80014ca:	893b      	ldrh	r3, [r7, #8]
 80014cc:	7af9      	ldrb	r1, [r7, #11]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	47a0      	blx	r4
 80014d2:	6178      	str	r0, [r7, #20]

  return ret;
 80014d4:	697b      	ldr	r3, [r7, #20]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	371c      	adds	r7, #28
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd90      	pop	{r4, r7, pc}

080014de <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b084      	sub	sp, #16
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	460b      	mov	r3, r1
 80014e8:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80014ea:	f107 0208 	add.w	r2, r7, #8
 80014ee:	2301      	movs	r3, #1
 80014f0:	2110      	movs	r1, #16
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff ffc3 	bl	800147e <lsm6dsl_read_reg>
 80014f8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d10f      	bne.n	8001520 <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8001500:	78fb      	ldrb	r3, [r7, #3]
 8001502:	f003 0303 	and.w	r3, r3, #3
 8001506:	b2da      	uxtb	r2, r3
 8001508:	7a3b      	ldrb	r3, [r7, #8]
 800150a:	f362 0383 	bfi	r3, r2, #2, #2
 800150e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001510:	f107 0208 	add.w	r2, r7, #8
 8001514:	2301      	movs	r3, #1
 8001516:	2110      	movs	r1, #16
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff ffc8 	bl	80014ae <lsm6dsl_write_reg>
 800151e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001520:	68fb      	ldr	r3, [r7, #12]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b084      	sub	sp, #16
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
 8001532:	460b      	mov	r3, r1
 8001534:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001536:	f107 0208 	add.w	r2, r7, #8
 800153a:	2301      	movs	r3, #1
 800153c:	2110      	movs	r1, #16
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff ff9d 	bl	800147e <lsm6dsl_read_reg>
 8001544:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d10f      	bne.n	800156c <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 800154c:	78fb      	ldrb	r3, [r7, #3]
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	b2da      	uxtb	r2, r3
 8001554:	7a3b      	ldrb	r3, [r7, #8]
 8001556:	f362 1307 	bfi	r3, r2, #4, #4
 800155a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800155c:	f107 0208 	add.w	r2, r7, #8
 8001560:	2301      	movs	r3, #1
 8001562:	2110      	movs	r1, #16
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff ffa2 	bl	80014ae <lsm6dsl_write_reg>
 800156a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800156c:	68fb      	ldr	r3, [r7, #12]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b084      	sub	sp, #16
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	460b      	mov	r3, r1
 8001580:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001582:	f107 0208 	add.w	r2, r7, #8
 8001586:	2301      	movs	r3, #1
 8001588:	2111      	movs	r1, #17
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff ff77 	bl	800147e <lsm6dsl_read_reg>
 8001590:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10f      	bne.n	80015b8 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8001598:	78fb      	ldrb	r3, [r7, #3]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	7a3b      	ldrb	r3, [r7, #8]
 80015a2:	f362 0343 	bfi	r3, r2, #1, #3
 80015a6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80015a8:	f107 0208 	add.w	r2, r7, #8
 80015ac:	2301      	movs	r3, #1
 80015ae:	2111      	movs	r1, #17
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ff7c 	bl	80014ae <lsm6dsl_write_reg>
 80015b6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80015b8:	68fb      	ldr	r3, [r7, #12]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b084      	sub	sp, #16
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	460b      	mov	r3, r1
 80015cc:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80015ce:	f107 0208 	add.w	r2, r7, #8
 80015d2:	2301      	movs	r3, #1
 80015d4:	2111      	movs	r1, #17
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff ff51 	bl	800147e <lsm6dsl_read_reg>
 80015dc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d10f      	bne.n	8001604 <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	7a3b      	ldrb	r3, [r7, #8]
 80015ee:	f362 1307 	bfi	r3, r2, #4, #4
 80015f2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80015f4:	f107 0208 	add.w	r2, r7, #8
 80015f8:	2301      	movs	r3, #1
 80015fa:	2111      	movs	r1, #17
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff ff56 	bl	80014ae <lsm6dsl_write_reg>
 8001602:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001604:	68fb      	ldr	r3, [r7, #12]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b084      	sub	sp, #16
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	460b      	mov	r3, r1
 8001618:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800161a:	f107 0208 	add.w	r2, r7, #8
 800161e:	2301      	movs	r3, #1
 8001620:	2112      	movs	r1, #18
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff ff2b 	bl	800147e <lsm6dsl_read_reg>
 8001628:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d10f      	bne.n	8001650 <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8001630:	78fb      	ldrb	r3, [r7, #3]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	b2da      	uxtb	r2, r3
 8001638:	7a3b      	ldrb	r3, [r7, #8]
 800163a:	f362 1386 	bfi	r3, r2, #6, #1
 800163e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001640:	f107 0208 	add.w	r2, r7, #8
 8001644:	2301      	movs	r3, #1
 8001646:	2112      	movs	r1, #18
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ff30 	bl	80014ae <lsm6dsl_write_reg>
 800164e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001650:	68fb      	ldr	r3, [r7, #12]
}
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b084      	sub	sp, #16
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
 8001662:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8001664:	2301      	movs	r3, #1
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	210f      	movs	r1, #15
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff ff07 	bl	800147e <lsm6dsl_read_reg>
 8001670:	60f8      	str	r0, [r7, #12]

  return ret;
 8001672:	68fb      	ldr	r3, [r7, #12]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001688:	f107 0208 	add.w	r2, r7, #8
 800168c:	2301      	movs	r3, #1
 800168e:	2112      	movs	r1, #18
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff fef4 	bl	800147e <lsm6dsl_read_reg>
 8001696:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d10f      	bne.n	80016be <lsm6dsl_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 800169e:	78fb      	ldrb	r3, [r7, #3]
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	7a3b      	ldrb	r3, [r7, #8]
 80016a8:	f362 0300 	bfi	r3, r2, #0, #1
 80016ac:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80016ae:	f107 0208 	add.w	r2, r7, #8
 80016b2:	2301      	movs	r3, #1
 80016b4:	2112      	movs	r1, #18
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff fef9 	bl	80014ae <lsm6dsl_write_reg>
 80016bc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80016be:	68fb      	ldr	r3, [r7, #12]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <lsm6dsl_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80016d2:	f107 0208 	add.w	r2, r7, #8
 80016d6:	2301      	movs	r3, #1
 80016d8:	2112      	movs	r1, #18
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff fecf 	bl	800147e <lsm6dsl_read_reg>
 80016e0:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 80016e2:	7a3b      	ldrb	r3, [r7, #8]
 80016e4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	461a      	mov	r2, r3
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	701a      	strb	r2, [r3, #0]

  return ret;
 80016f0:	68fb      	ldr	r3, [r7, #12]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <lsm6dsl_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                     lsm6dsl_input_composite_t val)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b084      	sub	sp, #16
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	460b      	mov	r3, r1
 8001704:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8001706:	f107 0208 	add.w	r2, r7, #8
 800170a:	2301      	movs	r3, #1
 800170c:	2117      	movs	r1, #23
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff feb5 	bl	800147e <lsm6dsl_read_reg>
 8001714:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d120      	bne.n	800175e <lsm6dsl_xl_lp2_bandwidth_set+0x64>
  {
    ctrl8_xl.input_composite = ((uint8_t) val & 0x10U) >> 4;
 800171c:	78fb      	ldrb	r3, [r7, #3]
 800171e:	091b      	lsrs	r3, r3, #4
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	b2da      	uxtb	r2, r3
 8001726:	7a3b      	ldrb	r3, [r7, #8]
 8001728:	f362 03c3 	bfi	r3, r2, #3, #1
 800172c:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 800172e:	78fb      	ldrb	r3, [r7, #3]
 8001730:	f003 0303 	and.w	r3, r3, #3
 8001734:	b2da      	uxtb	r2, r3
 8001736:	7a3b      	ldrb	r3, [r7, #8]
 8001738:	f362 1346 	bfi	r3, r2, #5, #2
 800173c:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 800173e:	7a3b      	ldrb	r3, [r7, #8]
 8001740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001744:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 8001746:	7a3b      	ldrb	r3, [r7, #8]
 8001748:	f36f 0382 	bfc	r3, #2, #1
 800174c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 800174e:	f107 0208 	add.w	r2, r7, #8
 8001752:	2301      	movs	r3, #1
 8001754:	2117      	movs	r1, #23
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff fea9 	bl	80014ae <lsm6dsl_write_reg>
 800175c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800175e:	68fb      	ldr	r3, [r7, #12]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <lsm6dsl_gy_band_pass_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_band_pass_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_lpf1_sel_g_t val)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_ctrl6_c_t ctrl6_c;
  lsm6dsl_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8001774:	f107 0208 	add.w	r2, r7, #8
 8001778:	2301      	movs	r3, #1
 800177a:	2116      	movs	r1, #22
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff fe7e 	bl	800147e <lsm6dsl_read_reg>
 8001782:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d157      	bne.n	800183a <lsm6dsl_gy_band_pass_set+0xd2>
  {
    ctrl7_g.hpm_g  = ((uint8_t)val & 0x30U) >> 4;
 800178a:	78fb      	ldrb	r3, [r7, #3]
 800178c:	091b      	lsrs	r3, r3, #4
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	b2da      	uxtb	r2, r3
 8001794:	7a3b      	ldrb	r3, [r7, #8]
 8001796:	f362 1305 	bfi	r3, r2, #4, #2
 800179a:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ((uint8_t)val & 0x80U) >> 7;
 800179c:	78fb      	ldrb	r3, [r7, #3]
 800179e:	09db      	lsrs	r3, r3, #7
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	7a3b      	ldrb	r3, [r7, #8]
 80017aa:	f362 1386 	bfi	r3, r2, #6, #1
 80017ae:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 80017b0:	f107 0208 	add.w	r2, r7, #8
 80017b4:	2301      	movs	r3, #1
 80017b6:	2116      	movs	r1, #22
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff fe78 	bl	80014ae <lsm6dsl_write_reg>
 80017be:	6178      	str	r0, [r7, #20]

    if (ret == 0)
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d139      	bne.n	800183a <lsm6dsl_gy_band_pass_set+0xd2>
    {
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 80017c6:	f107 020c 	add.w	r2, r7, #12
 80017ca:	2301      	movs	r3, #1
 80017cc:	2115      	movs	r1, #21
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff fe55 	bl	800147e <lsm6dsl_read_reg>
 80017d4:	6178      	str	r0, [r7, #20]

      if (ret == 0)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d12e      	bne.n	800183a <lsm6dsl_gy_band_pass_set+0xd2>
      {
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	7b3b      	ldrb	r3, [r7, #12]
 80017e6:	f362 0301 	bfi	r3, r2, #0, #2
 80017ea:	733b      	strb	r3, [r7, #12]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 80017ec:	f107 020c 	add.w	r2, r7, #12
 80017f0:	2301      	movs	r3, #1
 80017f2:	2115      	movs	r1, #21
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff fe5a 	bl	80014ae <lsm6dsl_write_reg>
 80017fa:	6178      	str	r0, [r7, #20]

        if (ret == 0)
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d11b      	bne.n	800183a <lsm6dsl_gy_band_pass_set+0xd2>
        {
          ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C,
 8001802:	f107 0210 	add.w	r2, r7, #16
 8001806:	2301      	movs	r3, #1
 8001808:	2113      	movs	r1, #19
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff fe37 	bl	800147e <lsm6dsl_read_reg>
 8001810:	6178      	str	r0, [r7, #20]
                                 (uint8_t *)&ctrl4_c, 1);

          if (ret == 0)
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d110      	bne.n	800183a <lsm6dsl_gy_band_pass_set+0xd2>
          {
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 8001818:	78fb      	ldrb	r3, [r7, #3]
 800181a:	08db      	lsrs	r3, r3, #3
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	b2da      	uxtb	r2, r3
 8001822:	7c3b      	ldrb	r3, [r7, #16]
 8001824:	f362 0341 	bfi	r3, r2, #1, #1
 8001828:	743b      	strb	r3, [r7, #16]
            ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C,
 800182a:	f107 0210 	add.w	r2, r7, #16
 800182e:	2301      	movs	r3, #1
 8001830:	2113      	movs	r1, #19
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff fe3b 	bl	80014ae <lsm6dsl_write_reg>
 8001838:	6178      	str	r0, [r7, #20]
        }
      }
    }
  }

  return ret;
 800183a:	697b      	ldr	r3, [r7, #20]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800184a:	f000 ffe1 	bl	8002810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800184e:	f000 f8a3 	bl	8001998 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001852:	f000 fae9 	bl	8001e28 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001856:	f000 f909 	bl	8001a6c <MX_ADC1_Init>
  MX_SPI4_Init();
 800185a:	f000 f9d9 	bl	8001c10 <MX_SPI4_Init>
  MX_TIM2_Init();
 800185e:	f000 fa43 	bl	8001ce8 <MX_TIM2_Init>
  MX_SPI5_Init();
 8001862:	f000 fa0b 	bl	8001c7c <MX_SPI5_Init>
  MX_FATFS_Init();
 8001866:	f007 fcd5 	bl	8009214 <MX_FATFS_Init>
  MX_I2C3_Init();
 800186a:	f000 f991 	bl	8001b90 <MX_I2C3_Init>
  MX_USART6_UART_Init();
 800186e:	f000 fab1 	bl	8001dd4 <MX_USART6_UART_Init>
  MX_I2C2_Init();
 8001872:	f000 f94d 	bl	8001b10 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8001876:	f009 fed3 	bl	800b620 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // reset LEDs
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 800187a:	2200      	movs	r2, #0
 800187c:	2102      	movs	r1, #2
 800187e:	483f      	ldr	r0, [pc, #252]	; (800197c <main+0x138>)
 8001880:	f001 fd8c 	bl	800339c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8001884:	2200      	movs	r2, #0
 8001886:	2104      	movs	r1, #4
 8001888:	483c      	ldr	r0, [pc, #240]	; (800197c <main+0x138>)
 800188a:	f001 fd87 	bl	800339c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 800188e:	2200      	movs	r2, #0
 8001890:	2108      	movs	r1, #8
 8001892:	483a      	ldr	r0, [pc, #232]	; (800197c <main+0x138>)
 8001894:	f001 fd82 	bl	800339c <HAL_GPIO_WritePin>

  // reset recovery pyro pins
  HAL_GPIO_WritePin(Rcov_Arm_GPIO_Port, Rcov_Arm_Pin, RESET);
 8001898:	2200      	movs	r2, #0
 800189a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800189e:	4838      	ldr	r0, [pc, #224]	; (8001980 <main+0x13c>)
 80018a0:	f001 fd7c 	bl	800339c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Rcov_Gate_Drogue_GPIO_Port, Rcov_Gate_Drogue_Pin, RESET);
 80018a4:	2200      	movs	r2, #0
 80018a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018aa:	4835      	ldr	r0, [pc, #212]	; (8001980 <main+0x13c>)
 80018ac:	f001 fd76 	bl	800339c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Rcov_Gate_Main_GPIO_Port, Rcov_Gate_Main_Pin, RESET);
 80018b0:	2200      	movs	r2, #0
 80018b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018b6:	4832      	ldr	r0, [pc, #200]	; (8001980 <main+0x13c>)
 80018b8:	f001 fd70 	bl	800339c <HAL_GPIO_WritePin>

  // reset prop pyro pins
  HAL_GPIO_WritePin(Prop_Pyro_Arming_GPIO_Port, Prop_Pyro_Arming_Pin, RESET);
 80018bc:	2200      	movs	r2, #0
 80018be:	2102      	movs	r1, #2
 80018c0:	482f      	ldr	r0, [pc, #188]	; (8001980 <main+0x13c>)
 80018c2:	f001 fd6b 	bl	800339c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Prop_Gate_1_GPIO_Port, Prop_Gate_1_Pin, RESET);
 80018c6:	2200      	movs	r2, #0
 80018c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018cc:	482d      	ldr	r0, [pc, #180]	; (8001984 <main+0x140>)
 80018ce:	f001 fd65 	bl	800339c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Prop_Gate_2_GPIO_Port, Prop_Gate_2_Pin, RESET);
 80018d2:	2200      	movs	r2, #0
 80018d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018d8:	482a      	ldr	r0, [pc, #168]	; (8001984 <main+0x140>)
 80018da:	f001 fd5f 	bl	800339c <HAL_GPIO_WritePin>

  // reset 12 V buck converter enable pin (disable converter)
  HAL_GPIO_WritePin(PM_12V_EN_GPIO_Port, PM_12V_EN_Pin, RESET);
 80018de:	2200      	movs	r2, #0
 80018e0:	2104      	movs	r1, #4
 80018e2:	4829      	ldr	r0, [pc, #164]	; (8001988 <main+0x144>)
 80018e4:	f001 fd5a 	bl	800339c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET);
 80018e8:	2200      	movs	r2, #0
 80018ea:	2180      	movs	r1, #128	; 0x80
 80018ec:	4826      	ldr	r0, [pc, #152]	; (8001988 <main+0x144>)
 80018ee:	f001 fd55 	bl	800339c <HAL_GPIO_WritePin>

  // reset payload EN signal
  HAL_GPIO_WritePin(Payload_EN_GPIO_Port, Payload_EN_Pin, RESET);
 80018f2:	2200      	movs	r2, #0
 80018f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018f8:	4823      	ldr	r0, [pc, #140]	; (8001988 <main+0x144>)
 80018fa:	f001 fd4f 	bl	800339c <HAL_GPIO_WritePin>

  // set CS pin for thermocouple chip high
  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

  // set power off for VR
  HAL_GPIO_WritePin(VR_CTRL_PWR_GPIO_Port, VR_CTRL_PWR_Pin, RESET);
 80018fe:	2200      	movs	r2, #0
 8001900:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001904:	481e      	ldr	r0, [pc, #120]	; (8001980 <main+0x13c>)
 8001906:	f001 fd49 	bl	800339c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, RESET);
 800190a:	2200      	movs	r2, #0
 800190c:	2180      	movs	r1, #128	; 0x80
 800190e:	481f      	ldr	r0, [pc, #124]	; (800198c <main+0x148>)
 8001910:	f001 fd44 	bl	800339c <HAL_GPIO_WritePin>

  // FLASH set CS, WP and IO3 pins high
  HAL_GPIO_WritePin(CS_FLASH_GPIO_Port, CS_FLASH_Pin, SET);
 8001914:	2201      	movs	r2, #1
 8001916:	2140      	movs	r1, #64	; 0x40
 8001918:	481c      	ldr	r0, [pc, #112]	; (800198c <main+0x148>)
 800191a:	f001 fd3f 	bl	800339c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FLASH_WP_GPIO_Port, FLASH_WP_Pin, SET);
 800191e:	2201      	movs	r2, #1
 8001920:	2120      	movs	r1, #32
 8001922:	481a      	ldr	r0, [pc, #104]	; (800198c <main+0x148>)
 8001924:	f001 fd3a 	bl	800339c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FLASH_IO3_GPIO_Port, FLASH_IO3_Pin, SET);
 8001928:	2201      	movs	r2, #1
 800192a:	2110      	movs	r1, #16
 800192c:	4817      	ldr	r0, [pc, #92]	; (800198c <main+0x148>)
 800192e:	f001 fd35 	bl	800339c <HAL_GPIO_WritePin>


  dev_ctx_lsm = lsm6dsl_init();
 8001932:	4c17      	ldr	r4, [pc, #92]	; (8001990 <main+0x14c>)
 8001934:	463b      	mov	r3, r7
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fb68 	bl	800100c <lsm6dsl_init>
 800193c:	463b      	mov	r3, r7
 800193e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001942:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  dev_ctx_lps = lps22hh_init();
 8001946:	4c13      	ldr	r4, [pc, #76]	; (8001994 <main+0x150>)
 8001948:	463b      	mov	r3, r7
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fbce 	bl	80010ec <lps22hh_init>
 8001950:	463b      	mov	r3, r7
 8001952:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001956:	e884 0007 	stmia.w	r4, {r0, r1, r2}


#ifdef TEST_BLINKY
	while (1)
	{
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800195a:	2102      	movs	r1, #2
 800195c:	4807      	ldr	r0, [pc, #28]	; (800197c <main+0x138>)
 800195e:	f001 fd36 	bl	80033ce <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001962:	2104      	movs	r1, #4
 8001964:	4805      	ldr	r0, [pc, #20]	; (800197c <main+0x138>)
 8001966:	f001 fd32 	bl	80033ce <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800196a:	2108      	movs	r1, #8
 800196c:	4803      	ldr	r0, [pc, #12]	; (800197c <main+0x138>)
 800196e:	f001 fd2e 	bl	80033ce <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8001972:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001976:	f000 ffbd 	bl	80028f4 <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800197a:	e7ee      	b.n	800195a <main+0x116>
 800197c:	40020800 	.word	0x40020800
 8001980:	40021800 	.word	0x40021800
 8001984:	40021400 	.word	0x40021400
 8001988:	40021000 	.word	0x40021000
 800198c:	40020c00 	.word	0x40020c00
 8001990:	20000c80 	.word	0x20000c80
 8001994:	20000c8c 	.word	0x20000c8c

08001998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b094      	sub	sp, #80	; 0x50
 800199c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800199e:	f107 0320 	add.w	r3, r7, #32
 80019a2:	2230      	movs	r2, #48	; 0x30
 80019a4:	2100      	movs	r1, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f00a fb66 	bl	800c078 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019ac:	f107 030c 	add.w	r3, r7, #12
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019bc:	2300      	movs	r3, #0
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	4b28      	ldr	r3, [pc, #160]	; (8001a64 <SystemClock_Config+0xcc>)
 80019c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c4:	4a27      	ldr	r2, [pc, #156]	; (8001a64 <SystemClock_Config+0xcc>)
 80019c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ca:	6413      	str	r3, [r2, #64]	; 0x40
 80019cc:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <SystemClock_Config+0xcc>)
 80019ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019d8:	2300      	movs	r3, #0
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	4b22      	ldr	r3, [pc, #136]	; (8001a68 <SystemClock_Config+0xd0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019e4:	4a20      	ldr	r2, [pc, #128]	; (8001a68 <SystemClock_Config+0xd0>)
 80019e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ea:	6013      	str	r3, [r2, #0]
 80019ec:	4b1e      	ldr	r3, [pc, #120]	; (8001a68 <SystemClock_Config+0xd0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019f4:	607b      	str	r3, [r7, #4]
 80019f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019f8:	2301      	movs	r3, #1
 80019fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a02:	2302      	movs	r3, #2
 8001a04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a0c:	2308      	movs	r3, #8
 8001a0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001a10:	2348      	movs	r3, #72	; 0x48
 8001a12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a14:	2302      	movs	r3, #2
 8001a16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a1c:	f107 0320 	add.w	r3, r7, #32
 8001a20:	4618      	mov	r0, r3
 8001a22:	f003 fec5 	bl	80057b0 <HAL_RCC_OscConfig>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a2c:	f000 fb56 	bl	80020dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a30:	230f      	movs	r3, #15
 8001a32:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a34:	2302      	movs	r3, #2
 8001a36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a46:	f107 030c 	add.w	r3, r7, #12
 8001a4a:	2102      	movs	r1, #2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f004 f927 	bl	8005ca0 <HAL_RCC_ClockConfig>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001a58:	f000 fb40 	bl	80020dc <Error_Handler>
  }
}
 8001a5c:	bf00      	nop
 8001a5e:	3750      	adds	r7, #80	; 0x50
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40007000 	.word	0x40007000

08001a6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a72:	463b      	mov	r3, r7
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a7e:	4b21      	ldr	r3, [pc, #132]	; (8001b04 <MX_ADC1_Init+0x98>)
 8001a80:	4a21      	ldr	r2, [pc, #132]	; (8001b08 <MX_ADC1_Init+0x9c>)
 8001a82:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a84:	4b1f      	ldr	r3, [pc, #124]	; (8001b04 <MX_ADC1_Init+0x98>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a8a:	4b1e      	ldr	r3, [pc, #120]	; (8001b04 <MX_ADC1_Init+0x98>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a90:	4b1c      	ldr	r3, [pc, #112]	; (8001b04 <MX_ADC1_Init+0x98>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a96:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <MX_ADC1_Init+0x98>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a9c:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <MX_ADC1_Init+0x98>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001aa4:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <MX_ADC1_Init+0x98>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001aaa:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <MX_ADC1_Init+0x98>)
 8001aac:	4a17      	ldr	r2, [pc, #92]	; (8001b0c <MX_ADC1_Init+0xa0>)
 8001aae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ab0:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <MX_ADC1_Init+0x98>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001ab6:	4b13      	ldr	r3, [pc, #76]	; (8001b04 <MX_ADC1_Init+0x98>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001abc:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <MX_ADC1_Init+0x98>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <MX_ADC1_Init+0x98>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001aca:	480e      	ldr	r0, [pc, #56]	; (8001b04 <MX_ADC1_Init+0x98>)
 8001acc:	f000 ff36 	bl	800293c <HAL_ADC_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001ad6:	f000 fb01 	bl	80020dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001ada:	2306      	movs	r3, #6
 8001adc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001ae2:	2307      	movs	r3, #7
 8001ae4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ae6:	463b      	mov	r3, r7
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4806      	ldr	r0, [pc, #24]	; (8001b04 <MX_ADC1_Init+0x98>)
 8001aec:	f000 ff6a 	bl	80029c4 <HAL_ADC_ConfigChannel>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001af6:	f000 faf1 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001afa:	bf00      	nop
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000958 	.word	0x20000958
 8001b08:	40012000 	.word	0x40012000
 8001b0c:	0f000001 	.word	0x0f000001

08001b10 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b14:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <MX_I2C2_Init+0x74>)
 8001b16:	4a1c      	ldr	r2, [pc, #112]	; (8001b88 <MX_I2C2_Init+0x78>)
 8001b18:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001b1a:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <MX_I2C2_Init+0x74>)
 8001b1c:	4a1b      	ldr	r2, [pc, #108]	; (8001b8c <MX_I2C2_Init+0x7c>)
 8001b1e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b20:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <MX_I2C2_Init+0x74>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b26:	4b17      	ldr	r3, [pc, #92]	; (8001b84 <MX_I2C2_Init+0x74>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b2c:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <MX_I2C2_Init+0x74>)
 8001b2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b32:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b34:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <MX_I2C2_Init+0x74>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b3a:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <MX_I2C2_Init+0x74>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b40:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <MX_I2C2_Init+0x74>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b46:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <MX_I2C2_Init+0x74>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b4c:	480d      	ldr	r0, [pc, #52]	; (8001b84 <MX_I2C2_Init+0x74>)
 8001b4e:	f001 fc71 	bl	8003434 <HAL_I2C_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001b58:	f000 fac0 	bl	80020dc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4809      	ldr	r0, [pc, #36]	; (8001b84 <MX_I2C2_Init+0x74>)
 8001b60:	f002 fc27 	bl	80043b2 <HAL_I2CEx_ConfigAnalogFilter>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001b6a:	f000 fab7 	bl	80020dc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4804      	ldr	r0, [pc, #16]	; (8001b84 <MX_I2C2_Init+0x74>)
 8001b72:	f002 fc5a 	bl	800442a <HAL_I2CEx_ConfigDigitalFilter>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001b7c:	f000 faae 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000904 	.word	0x20000904
 8001b88:	40005800 	.word	0x40005800
 8001b8c:	000186a0 	.word	0x000186a0

08001b90 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001b94:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <MX_I2C3_Init+0x74>)
 8001b96:	4a1c      	ldr	r2, [pc, #112]	; (8001c08 <MX_I2C3_Init+0x78>)
 8001b98:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <MX_I2C3_Init+0x74>)
 8001b9c:	4a1b      	ldr	r2, [pc, #108]	; (8001c0c <MX_I2C3_Init+0x7c>)
 8001b9e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ba0:	4b18      	ldr	r3, [pc, #96]	; (8001c04 <MX_I2C3_Init+0x74>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001ba6:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <MX_I2C3_Init+0x74>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bac:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <MX_I2C3_Init+0x74>)
 8001bae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bb2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bb4:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <MX_I2C3_Init+0x74>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001bba:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <MX_I2C3_Init+0x74>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bc0:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <MX_I2C3_Init+0x74>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bc6:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <MX_I2C3_Init+0x74>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001bcc:	480d      	ldr	r0, [pc, #52]	; (8001c04 <MX_I2C3_Init+0x74>)
 8001bce:	f001 fc31 	bl	8003434 <HAL_I2C_Init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001bd8:	f000 fa80 	bl	80020dc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4809      	ldr	r0, [pc, #36]	; (8001c04 <MX_I2C3_Init+0x74>)
 8001be0:	f002 fbe7 	bl	80043b2 <HAL_I2CEx_ConfigAnalogFilter>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001bea:	f000 fa77 	bl	80020dc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001bee:	2100      	movs	r1, #0
 8001bf0:	4804      	ldr	r0, [pc, #16]	; (8001c04 <MX_I2C3_Init+0x74>)
 8001bf2:	f002 fc1a 	bl	800442a <HAL_I2CEx_ConfigDigitalFilter>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001bfc:	f000 fa6e 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000628 	.word	0x20000628
 8001c08:	40005c00 	.word	0x40005c00
 8001c0c:	000186a0 	.word	0x000186a0

08001c10 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001c14:	4b17      	ldr	r3, [pc, #92]	; (8001c74 <MX_SPI4_Init+0x64>)
 8001c16:	4a18      	ldr	r2, [pc, #96]	; (8001c78 <MX_SPI4_Init+0x68>)
 8001c18:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001c1a:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <MX_SPI4_Init+0x64>)
 8001c1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c20:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001c22:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <MX_SPI4_Init+0x64>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c28:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <MX_SPI4_Init+0x64>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c2e:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <MX_SPI4_Init+0x64>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c34:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <MX_SPI4_Init+0x64>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <MX_SPI4_Init+0x64>)
 8001c3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c40:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001c42:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <MX_SPI4_Init+0x64>)
 8001c44:	2230      	movs	r2, #48	; 0x30
 8001c46:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c48:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <MX_SPI4_Init+0x64>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <MX_SPI4_Init+0x64>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c54:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <MX_SPI4_Init+0x64>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <MX_SPI4_Init+0x64>)
 8001c5c:	220a      	movs	r2, #10
 8001c5e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001c60:	4804      	ldr	r0, [pc, #16]	; (8001c74 <MX_SPI4_Init+0x64>)
 8001c62:	f004 fa17 	bl	8006094 <HAL_SPI_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001c6c:	f000 fa36 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001c70:	bf00      	nop
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	200005d0 	.word	0x200005d0
 8001c78:	40013400 	.word	0x40013400

08001c7c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001c80:	4b17      	ldr	r3, [pc, #92]	; (8001ce0 <MX_SPI5_Init+0x64>)
 8001c82:	4a18      	ldr	r2, [pc, #96]	; (8001ce4 <MX_SPI5_Init+0x68>)
 8001c84:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001c86:	4b16      	ldr	r3, [pc, #88]	; (8001ce0 <MX_SPI5_Init+0x64>)
 8001c88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c8c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001c8e:	4b14      	ldr	r3, [pc, #80]	; (8001ce0 <MX_SPI5_Init+0x64>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c94:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <MX_SPI5_Init+0x64>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c9a:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <MX_SPI5_Init+0x64>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ca0:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <MX_SPI5_Init+0x64>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <MX_SPI5_Init+0x64>)
 8001ca8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cac:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001cae:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <MX_SPI5_Init+0x64>)
 8001cb0:	2238      	movs	r2, #56	; 0x38
 8001cb2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cb4:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <MX_SPI5_Init+0x64>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <MX_SPI5_Init+0x64>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cc0:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <MX_SPI5_Init+0x64>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001cc6:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <MX_SPI5_Init+0x64>)
 8001cc8:	220a      	movs	r2, #10
 8001cca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001ccc:	4804      	ldr	r0, [pc, #16]	; (8001ce0 <MX_SPI5_Init+0x64>)
 8001cce:	f004 f9e1 	bl	8006094 <HAL_SPI_Init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001cd8:	f000 fa00 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	2000067c 	.word	0x2000067c
 8001ce4:	40015000 	.word	0x40015000

08001ce8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08e      	sub	sp, #56	; 0x38
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	605a      	str	r2, [r3, #4]
 8001cf8:	609a      	str	r2, [r3, #8]
 8001cfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cfc:	f107 0320 	add.w	r3, r7, #32
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d06:	1d3b      	adds	r3, r7, #4
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
 8001d14:	615a      	str	r2, [r3, #20]
 8001d16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d18:	4b2d      	ldr	r3, [pc, #180]	; (8001dd0 <MX_TIM2_Init+0xe8>)
 8001d1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50;
 8001d20:	4b2b      	ldr	r3, [pc, #172]	; (8001dd0 <MX_TIM2_Init+0xe8>)
 8001d22:	2232      	movs	r2, #50	; 0x32
 8001d24:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d26:	4b2a      	ldr	r3, [pc, #168]	; (8001dd0 <MX_TIM2_Init+0xe8>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001d2c:	4b28      	ldr	r3, [pc, #160]	; (8001dd0 <MX_TIM2_Init+0xe8>)
 8001d2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d34:	4b26      	ldr	r3, [pc, #152]	; (8001dd0 <MX_TIM2_Init+0xe8>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d3a:	4b25      	ldr	r3, [pc, #148]	; (8001dd0 <MX_TIM2_Init+0xe8>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d40:	4823      	ldr	r0, [pc, #140]	; (8001dd0 <MX_TIM2_Init+0xe8>)
 8001d42:	f004 fc9d 	bl	8006680 <HAL_TIM_Base_Init>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001d4c:	f000 f9c6 	bl	80020dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d54:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	481c      	ldr	r0, [pc, #112]	; (8001dd0 <MX_TIM2_Init+0xe8>)
 8001d5e:	f005 f839 	bl	8006dd4 <HAL_TIM_ConfigClockSource>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001d68:	f000 f9b8 	bl	80020dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d6c:	4818      	ldr	r0, [pc, #96]	; (8001dd0 <MX_TIM2_Init+0xe8>)
 8001d6e:	f004 fcd6 	bl	800671e <HAL_TIM_PWM_Init>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001d78:	f000 f9b0 	bl	80020dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d7c:	2320      	movs	r3, #32
 8001d7e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d80:	2300      	movs	r3, #0
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d84:	f107 0320 	add.w	r3, r7, #32
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4811      	ldr	r0, [pc, #68]	; (8001dd0 <MX_TIM2_Init+0xe8>)
 8001d8c:	f005 fc22 	bl	80075d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001d96:	f000 f9a1 	bl	80020dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d9a:	2360      	movs	r3, #96	; 0x60
 8001d9c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8001d9e:	2364      	movs	r3, #100	; 0x64
 8001da0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	2208      	movs	r2, #8
 8001dae:	4619      	mov	r1, r3
 8001db0:	4807      	ldr	r0, [pc, #28]	; (8001dd0 <MX_TIM2_Init+0xe8>)
 8001db2:	f004 ff4d 	bl	8006c50 <HAL_TIM_PWM_ConfigChannel>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001dbc:	f000 f98e 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001dc0:	4803      	ldr	r0, [pc, #12]	; (8001dd0 <MX_TIM2_Init+0xe8>)
 8001dc2:	f000 fb5d 	bl	8002480 <HAL_TIM_MspPostInit>

}
 8001dc6:	bf00      	nop
 8001dc8:	3738      	adds	r7, #56	; 0x38
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000c38 	.word	0x20000c38

08001dd4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001dd8:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <MX_USART6_UART_Init+0x4c>)
 8001dda:	4a12      	ldr	r2, [pc, #72]	; (8001e24 <MX_USART6_UART_Init+0x50>)
 8001ddc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 8001dde:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <MX_USART6_UART_Init+0x4c>)
 8001de0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001de4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001de6:	4b0e      	ldr	r3, [pc, #56]	; (8001e20 <MX_USART6_UART_Init+0x4c>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <MX_USART6_UART_Init+0x4c>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001df2:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <MX_USART6_UART_Init+0x4c>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001df8:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <MX_USART6_UART_Init+0x4c>)
 8001dfa:	220c      	movs	r2, #12
 8001dfc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dfe:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <MX_USART6_UART_Init+0x4c>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e04:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <MX_USART6_UART_Init+0x4c>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001e0a:	4805      	ldr	r0, [pc, #20]	; (8001e20 <MX_USART6_UART_Init+0x4c>)
 8001e0c:	f005 fc72 	bl	80076f4 <HAL_UART_Init>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001e16:	f000 f961 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000bf0 	.word	0x20000bf0
 8001e24:	40011400 	.word	0x40011400

08001e28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08e      	sub	sp, #56	; 0x38
 8001e2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	605a      	str	r2, [r3, #4]
 8001e38:	609a      	str	r2, [r3, #8]
 8001e3a:	60da      	str	r2, [r3, #12]
 8001e3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	623b      	str	r3, [r7, #32]
 8001e42:	4b90      	ldr	r3, [pc, #576]	; (8002084 <MX_GPIO_Init+0x25c>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a8f      	ldr	r2, [pc, #572]	; (8002084 <MX_GPIO_Init+0x25c>)
 8001e48:	f043 0310 	orr.w	r3, r3, #16
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b8d      	ldr	r3, [pc, #564]	; (8002084 <MX_GPIO_Init+0x25c>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0310 	and.w	r3, r3, #16
 8001e56:	623b      	str	r3, [r7, #32]
 8001e58:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
 8001e5e:	4b89      	ldr	r3, [pc, #548]	; (8002084 <MX_GPIO_Init+0x25c>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	4a88      	ldr	r2, [pc, #544]	; (8002084 <MX_GPIO_Init+0x25c>)
 8001e64:	f043 0304 	orr.w	r3, r3, #4
 8001e68:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6a:	4b86      	ldr	r3, [pc, #536]	; (8002084 <MX_GPIO_Init+0x25c>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	61fb      	str	r3, [r7, #28]
 8001e74:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	61bb      	str	r3, [r7, #24]
 8001e7a:	4b82      	ldr	r3, [pc, #520]	; (8002084 <MX_GPIO_Init+0x25c>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	4a81      	ldr	r2, [pc, #516]	; (8002084 <MX_GPIO_Init+0x25c>)
 8001e80:	f043 0320 	orr.w	r3, r3, #32
 8001e84:	6313      	str	r3, [r2, #48]	; 0x30
 8001e86:	4b7f      	ldr	r3, [pc, #508]	; (8002084 <MX_GPIO_Init+0x25c>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f003 0320 	and.w	r3, r3, #32
 8001e8e:	61bb      	str	r3, [r7, #24]
 8001e90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	4b7b      	ldr	r3, [pc, #492]	; (8002084 <MX_GPIO_Init+0x25c>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	4a7a      	ldr	r2, [pc, #488]	; (8002084 <MX_GPIO_Init+0x25c>)
 8001e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea2:	4b78      	ldr	r3, [pc, #480]	; (8002084 <MX_GPIO_Init+0x25c>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	4b74      	ldr	r3, [pc, #464]	; (8002084 <MX_GPIO_Init+0x25c>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	4a73      	ldr	r2, [pc, #460]	; (8002084 <MX_GPIO_Init+0x25c>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ebe:	4b71      	ldr	r3, [pc, #452]	; (8002084 <MX_GPIO_Init+0x25c>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	613b      	str	r3, [r7, #16]
 8001ec8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	4b6d      	ldr	r3, [pc, #436]	; (8002084 <MX_GPIO_Init+0x25c>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	4a6c      	ldr	r2, [pc, #432]	; (8002084 <MX_GPIO_Init+0x25c>)
 8001ed4:	f043 0302 	orr.w	r3, r3, #2
 8001ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eda:	4b6a      	ldr	r3, [pc, #424]	; (8002084 <MX_GPIO_Init+0x25c>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	4b66      	ldr	r3, [pc, #408]	; (8002084 <MX_GPIO_Init+0x25c>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	4a65      	ldr	r2, [pc, #404]	; (8002084 <MX_GPIO_Init+0x25c>)
 8001ef0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef6:	4b63      	ldr	r3, [pc, #396]	; (8002084 <MX_GPIO_Init+0x25c>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001efe:	60bb      	str	r3, [r7, #8]
 8001f00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	607b      	str	r3, [r7, #4]
 8001f06:	4b5f      	ldr	r3, [pc, #380]	; (8002084 <MX_GPIO_Init+0x25c>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	4a5e      	ldr	r2, [pc, #376]	; (8002084 <MX_GPIO_Init+0x25c>)
 8001f0c:	f043 0308 	orr.w	r3, r3, #8
 8001f10:	6313      	str	r3, [r2, #48]	; 0x30
 8001f12:	4b5c      	ldr	r3, [pc, #368]	; (8002084 <MX_GPIO_Init+0x25c>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	607b      	str	r3, [r7, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PM_12V_EN_Pin|Vent_Valve_EN_Pin|Payload_EN_Pin|TH_CS_1_Pin
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f640 6184 	movw	r1, #3716	; 0xe84
 8001f24:	4858      	ldr	r0, [pc, #352]	; (8002088 <MX_GPIO_Init+0x260>)
 8001f26:	f001 fa39 	bl	800339c <HAL_GPIO_WritePin>
                          |TH_CS_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|Prop_Gate_2_Pin|Prop_Gate_1_Pin, GPIO_PIN_RESET);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8001f30:	4856      	ldr	r0, [pc, #344]	; (800208c <MX_GPIO_Init+0x264>)
 8001f32:	f001 fa33 	bl	800339c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001f36:	2200      	movs	r2, #0
 8001f38:	210e      	movs	r1, #14
 8001f3a:	4855      	ldr	r0, [pc, #340]	; (8002090 <MX_GPIO_Init+0x268>)
 8001f3c:	f001 fa2e 	bl	800339c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Prop_Pyro_Arming_Pin|VR_CTRL_PWR_Pin|Rcov_Gate_Main_Pin|Rcov_Gate_Drogue_Pin
 8001f40:	2200      	movs	r2, #0
 8001f42:	f645 2102 	movw	r1, #23042	; 0x5a02
 8001f46:	4853      	ldr	r0, [pc, #332]	; (8002094 <MX_GPIO_Init+0x26c>)
 8001f48:	f001 fa28 	bl	800339c <HAL_GPIO_WritePin>
                          |Rcov_Arm_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FLASH_IO3_Pin|FLASH_WP_Pin|CS_FLASH_Pin|VR_CTRL_REC_Pin, GPIO_PIN_RESET);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	21f0      	movs	r1, #240	; 0xf0
 8001f50:	4851      	ldr	r0, [pc, #324]	; (8002098 <MX_GPIO_Init+0x270>)
 8001f52:	f001 fa23 	bl	800339c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PM_12V_EN_Pin Vent_Valve_EN_Pin Payload_EN_Pin TH_CS_1_Pin
                           TH_CS_2_Pin */
  GPIO_InitStruct.Pin = PM_12V_EN_Pin|Vent_Valve_EN_Pin|Payload_EN_Pin|TH_CS_1_Pin
 8001f56:	f640 6384 	movw	r3, #3716	; 0xe84
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24
                          |TH_CS_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f64:	2300      	movs	r3, #0
 8001f66:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4846      	ldr	r0, [pc, #280]	; (8002088 <MX_GPIO_Init+0x260>)
 8001f70:	f001 f868 	bl	8003044 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001f74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f82:	2300      	movs	r3, #0
 8001f84:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	483f      	ldr	r0, [pc, #252]	; (800208c <MX_GPIO_Init+0x264>)
 8001f8e:	f001 f859 	bl	8003044 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001f92:	2301      	movs	r3, #1
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f96:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	483a      	ldr	r0, [pc, #232]	; (8002090 <MX_GPIO_Init+0x268>)
 8001fa8:	f001 f84c 	bl	8003044 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8001fac:	230e      	movs	r3, #14
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4833      	ldr	r0, [pc, #204]	; (8002090 <MX_GPIO_Init+0x268>)
 8001fc4:	f001 f83e 	bl	8003044 <HAL_GPIO_Init>

  /*Configure GPIO pin : Vent_Valve_FB_Pin */
  GPIO_InitStruct.Pin = Vent_Valve_FB_Pin;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Vent_Valve_FB_GPIO_Port, &GPIO_InitStruct);
 8001fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4830      	ldr	r0, [pc, #192]	; (800209c <MX_GPIO_Init+0x274>)
 8001fdc:	f001 f832 	bl	8003044 <HAL_GPIO_Init>

  /*Configure GPIO pin : Prop_Cont_2_Pin */
  GPIO_InitStruct.Pin = Prop_Cont_2_Pin;
 8001fe0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Prop_Cont_2_GPIO_Port, &GPIO_InitStruct);
 8001fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4825      	ldr	r0, [pc, #148]	; (800208c <MX_GPIO_Init+0x264>)
 8001ff6:	f001 f825 	bl	8003044 <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Gate_2_Pin Prop_Gate_1_Pin */
  GPIO_InitStruct.Pin = Prop_Gate_2_Pin|Prop_Gate_1_Pin;
 8001ffa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002000:	2301      	movs	r3, #1
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002008:	2300      	movs	r3, #0
 800200a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800200c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002010:	4619      	mov	r1, r3
 8002012:	481e      	ldr	r0, [pc, #120]	; (800208c <MX_GPIO_Init+0x264>)
 8002014:	f001 f816 	bl	8003044 <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Cont_1_Pin Rcov_Cont_Main_Pin Rcov_Cont_Drogue_Pin */
  GPIO_InitStruct.Pin = Prop_Cont_1_Pin|Rcov_Cont_Main_Pin|Rcov_Cont_Drogue_Pin;
 8002018:	f242 4301 	movw	r3, #9217	; 0x2401
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800201e:	2300      	movs	r3, #0
 8002020:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800202a:	4619      	mov	r1, r3
 800202c:	4819      	ldr	r0, [pc, #100]	; (8002094 <MX_GPIO_Init+0x26c>)
 800202e:	f001 f809 	bl	8003044 <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Pyro_Arming_Pin VR_CTRL_PWR_Pin Rcov_Gate_Main_Pin Rcov_Gate_Drogue_Pin
                           Rcov_Arm_Pin */
  GPIO_InitStruct.Pin = Prop_Pyro_Arming_Pin|VR_CTRL_PWR_Pin|Rcov_Gate_Main_Pin|Rcov_Gate_Drogue_Pin
 8002032:	f645 2302 	movw	r3, #23042	; 0x5a02
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
                          |Rcov_Arm_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002038:	2301      	movs	r3, #1
 800203a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002040:	2300      	movs	r3, #0
 8002042:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002048:	4619      	mov	r1, r3
 800204a:	4812      	ldr	r0, [pc, #72]	; (8002094 <MX_GPIO_Init+0x26c>)
 800204c:	f000 fffa 	bl	8003044 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLASH_IO3_Pin FLASH_WP_Pin CS_FLASH_Pin VR_CTRL_REC_Pin */
  GPIO_InitStruct.Pin = FLASH_IO3_Pin|FLASH_WP_Pin|CS_FLASH_Pin|VR_CTRL_REC_Pin;
 8002050:	23f0      	movs	r3, #240	; 0xf0
 8002052:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002054:	2301      	movs	r3, #1
 8002056:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205c:	2300      	movs	r3, #0
 800205e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002064:	4619      	mov	r1, r3
 8002066:	480c      	ldr	r0, [pc, #48]	; (8002098 <MX_GPIO_Init+0x270>)
 8002068:	f000 ffec 	bl	8003044 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800206c:	2200      	movs	r2, #0
 800206e:	2100      	movs	r1, #0
 8002070:	2006      	movs	r0, #6
 8002072:	f000 ffb0 	bl	8002fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002076:	2006      	movs	r0, #6
 8002078:	f000 ffc9 	bl	800300e <HAL_NVIC_EnableIRQ>

}
 800207c:	bf00      	nop
 800207e:	3738      	adds	r7, #56	; 0x38
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40023800 	.word	0x40023800
 8002088:	40021000 	.word	0x40021000
 800208c:	40021400 	.word	0x40021400
 8002090:	40020800 	.word	0x40020800
 8002094:	40021800 	.word	0x40021800
 8002098:	40020c00 	.word	0x40020c00
 800209c:	40020400 	.word	0x40020400

080020a0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Button_Pin)
 80020aa:	88fb      	ldrh	r3, [r7, #6]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d102      	bne.n	80020b6 <HAL_GPIO_EXTI_Callback+0x16>
	{
		start_ejection = 1;
 80020b0:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <HAL_GPIO_EXTI_Callback+0x24>)
 80020b2:	2201      	movs	r2, #1
 80020b4:	701a      	strb	r2, [r3, #0]
	}
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	2000038c 	.word	0x2000038c

080020c8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
//		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
//		HAL_GPIO_TogglePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin);
		timer_actuated_vent_valve = 1;
	}
#endif
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
//  __disable_irq();
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET); // error occurred, fatal
 80020e0:	2201      	movs	r2, #1
 80020e2:	2108      	movs	r1, #8
 80020e4:	480b      	ldr	r0, [pc, #44]	; (8002114 <Error_Handler+0x38>)
 80020e6:	f001 f959 	bl	800339c <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80020ea:	2108      	movs	r1, #8
 80020ec:	480a      	ldr	r0, [pc, #40]	; (8002118 <Error_Handler+0x3c>)
 80020ee:	f004 fb6f 	bl	80067d0 <HAL_TIM_PWM_Start>
  HAL_Delay(1000);
 80020f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020f6:	f000 fbfd 	bl	80028f4 <HAL_Delay>
  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80020fa:	2108      	movs	r1, #8
 80020fc:	4806      	ldr	r0, [pc, #24]	; (8002118 <Error_Handler+0x3c>)
 80020fe:	f004 fc2f 	bl	8006960 <HAL_TIM_PWM_Stop>
  while (1)
  {
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); // error occurred, fatal
 8002102:	2108      	movs	r1, #8
 8002104:	4803      	ldr	r0, [pc, #12]	; (8002114 <Error_Handler+0x38>)
 8002106:	f001 f962 	bl	80033ce <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800210a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800210e:	f000 fbf1 	bl	80028f4 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); // error occurred, fatal
 8002112:	e7f6      	b.n	8002102 <Error_Handler+0x26>
 8002114:	40020800 	.word	0x40020800
 8002118:	20000c38 	.word	0x20000c38

0800211c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	607b      	str	r3, [r7, #4]
 8002126:	4b10      	ldr	r3, [pc, #64]	; (8002168 <HAL_MspInit+0x4c>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	4a0f      	ldr	r2, [pc, #60]	; (8002168 <HAL_MspInit+0x4c>)
 800212c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002130:	6453      	str	r3, [r2, #68]	; 0x44
 8002132:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <HAL_MspInit+0x4c>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213a:	607b      	str	r3, [r7, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	603b      	str	r3, [r7, #0]
 8002142:	4b09      	ldr	r3, [pc, #36]	; (8002168 <HAL_MspInit+0x4c>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	4a08      	ldr	r2, [pc, #32]	; (8002168 <HAL_MspInit+0x4c>)
 8002148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800214c:	6413      	str	r3, [r2, #64]	; 0x40
 800214e:	4b06      	ldr	r3, [pc, #24]	; (8002168 <HAL_MspInit+0x4c>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002156:	603b      	str	r3, [r7, #0]
 8002158:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40023800 	.word	0x40023800

0800216c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08a      	sub	sp, #40	; 0x28
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002174:	f107 0314 	add.w	r3, r7, #20
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a17      	ldr	r2, [pc, #92]	; (80021e8 <HAL_ADC_MspInit+0x7c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d127      	bne.n	80021de <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	4b16      	ldr	r3, [pc, #88]	; (80021ec <HAL_ADC_MspInit+0x80>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	4a15      	ldr	r2, [pc, #84]	; (80021ec <HAL_ADC_MspInit+0x80>)
 8002198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800219c:	6453      	str	r3, [r2, #68]	; 0x44
 800219e:	4b13      	ldr	r3, [pc, #76]	; (80021ec <HAL_ADC_MspInit+0x80>)
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <HAL_ADC_MspInit+0x80>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	4a0e      	ldr	r2, [pc, #56]	; (80021ec <HAL_ADC_MspInit+0x80>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ba:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <HAL_ADC_MspInit+0x80>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021c6:	2340      	movs	r3, #64	; 0x40
 80021c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021ca:	2303      	movs	r3, #3
 80021cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d2:	f107 0314 	add.w	r3, r7, #20
 80021d6:	4619      	mov	r1, r3
 80021d8:	4805      	ldr	r0, [pc, #20]	; (80021f0 <HAL_ADC_MspInit+0x84>)
 80021da:	f000 ff33 	bl	8003044 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80021de:	bf00      	nop
 80021e0:	3728      	adds	r7, #40	; 0x28
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40012000 	.word	0x40012000
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40020000 	.word	0x40020000

080021f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08c      	sub	sp, #48	; 0x30
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fc:	f107 031c 	add.w	r3, r7, #28
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	60da      	str	r2, [r3, #12]
 800220a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a42      	ldr	r2, [pc, #264]	; (800231c <HAL_I2C_MspInit+0x128>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d12d      	bne.n	8002272 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	61bb      	str	r3, [r7, #24]
 800221a:	4b41      	ldr	r3, [pc, #260]	; (8002320 <HAL_I2C_MspInit+0x12c>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	4a40      	ldr	r2, [pc, #256]	; (8002320 <HAL_I2C_MspInit+0x12c>)
 8002220:	f043 0302 	orr.w	r3, r3, #2
 8002224:	6313      	str	r3, [r2, #48]	; 0x30
 8002226:	4b3e      	ldr	r3, [pc, #248]	; (8002320 <HAL_I2C_MspInit+0x12c>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	61bb      	str	r3, [r7, #24]
 8002230:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002232:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002238:	2312      	movs	r3, #18
 800223a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002240:	2303      	movs	r3, #3
 8002242:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002244:	2304      	movs	r3, #4
 8002246:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002248:	f107 031c 	add.w	r3, r7, #28
 800224c:	4619      	mov	r1, r3
 800224e:	4835      	ldr	r0, [pc, #212]	; (8002324 <HAL_I2C_MspInit+0x130>)
 8002250:	f000 fef8 	bl	8003044 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
 8002258:	4b31      	ldr	r3, [pc, #196]	; (8002320 <HAL_I2C_MspInit+0x12c>)
 800225a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225c:	4a30      	ldr	r2, [pc, #192]	; (8002320 <HAL_I2C_MspInit+0x12c>)
 800225e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002262:	6413      	str	r3, [r2, #64]	; 0x40
 8002264:	4b2e      	ldr	r3, [pc, #184]	; (8002320 <HAL_I2C_MspInit+0x12c>)
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800226c:	617b      	str	r3, [r7, #20]
 800226e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002270:	e050      	b.n	8002314 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a2c      	ldr	r2, [pc, #176]	; (8002328 <HAL_I2C_MspInit+0x134>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d14b      	bne.n	8002314 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800227c:	2300      	movs	r3, #0
 800227e:	613b      	str	r3, [r7, #16]
 8002280:	4b27      	ldr	r3, [pc, #156]	; (8002320 <HAL_I2C_MspInit+0x12c>)
 8002282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002284:	4a26      	ldr	r2, [pc, #152]	; (8002320 <HAL_I2C_MspInit+0x12c>)
 8002286:	f043 0304 	orr.w	r3, r3, #4
 800228a:	6313      	str	r3, [r2, #48]	; 0x30
 800228c:	4b24      	ldr	r3, [pc, #144]	; (8002320 <HAL_I2C_MspInit+0x12c>)
 800228e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002298:	2300      	movs	r3, #0
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	4b20      	ldr	r3, [pc, #128]	; (8002320 <HAL_I2C_MspInit+0x12c>)
 800229e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a0:	4a1f      	ldr	r2, [pc, #124]	; (8002320 <HAL_I2C_MspInit+0x12c>)
 80022a2:	f043 0301 	orr.w	r3, r3, #1
 80022a6:	6313      	str	r3, [r2, #48]	; 0x30
 80022a8:	4b1d      	ldr	r3, [pc, #116]	; (8002320 <HAL_I2C_MspInit+0x12c>)
 80022aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022ba:	2312      	movs	r3, #18
 80022bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c2:	2303      	movs	r3, #3
 80022c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80022c6:	2304      	movs	r3, #4
 80022c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ca:	f107 031c 	add.w	r3, r7, #28
 80022ce:	4619      	mov	r1, r3
 80022d0:	4816      	ldr	r0, [pc, #88]	; (800232c <HAL_I2C_MspInit+0x138>)
 80022d2:	f000 feb7 	bl	8003044 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022dc:	2312      	movs	r3, #18
 80022de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e4:	2303      	movs	r3, #3
 80022e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80022e8:	2304      	movs	r3, #4
 80022ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ec:	f107 031c 	add.w	r3, r7, #28
 80022f0:	4619      	mov	r1, r3
 80022f2:	480f      	ldr	r0, [pc, #60]	; (8002330 <HAL_I2C_MspInit+0x13c>)
 80022f4:	f000 fea6 	bl	8003044 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80022f8:	2300      	movs	r3, #0
 80022fa:	60bb      	str	r3, [r7, #8]
 80022fc:	4b08      	ldr	r3, [pc, #32]	; (8002320 <HAL_I2C_MspInit+0x12c>)
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	4a07      	ldr	r2, [pc, #28]	; (8002320 <HAL_I2C_MspInit+0x12c>)
 8002302:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002306:	6413      	str	r3, [r2, #64]	; 0x40
 8002308:	4b05      	ldr	r3, [pc, #20]	; (8002320 <HAL_I2C_MspInit+0x12c>)
 800230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	68bb      	ldr	r3, [r7, #8]
}
 8002314:	bf00      	nop
 8002316:	3730      	adds	r7, #48	; 0x30
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40005800 	.word	0x40005800
 8002320:	40023800 	.word	0x40023800
 8002324:	40020400 	.word	0x40020400
 8002328:	40005c00 	.word	0x40005c00
 800232c:	40020800 	.word	0x40020800
 8002330:	40020000 	.word	0x40020000

08002334 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08c      	sub	sp, #48	; 0x30
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233c:	f107 031c 	add.w	r3, r7, #28
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a33      	ldr	r2, [pc, #204]	; (8002420 <HAL_SPI_MspInit+0xec>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d12d      	bne.n	80023b2 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	61bb      	str	r3, [r7, #24]
 800235a:	4b32      	ldr	r3, [pc, #200]	; (8002424 <HAL_SPI_MspInit+0xf0>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	4a31      	ldr	r2, [pc, #196]	; (8002424 <HAL_SPI_MspInit+0xf0>)
 8002360:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002364:	6453      	str	r3, [r2, #68]	; 0x44
 8002366:	4b2f      	ldr	r3, [pc, #188]	; (8002424 <HAL_SPI_MspInit+0xf0>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800236e:	61bb      	str	r3, [r7, #24]
 8002370:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	4b2b      	ldr	r3, [pc, #172]	; (8002424 <HAL_SPI_MspInit+0xf0>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	4a2a      	ldr	r2, [pc, #168]	; (8002424 <HAL_SPI_MspInit+0xf0>)
 800237c:	f043 0310 	orr.w	r3, r3, #16
 8002380:	6313      	str	r3, [r2, #48]	; 0x30
 8002382:	4b28      	ldr	r3, [pc, #160]	; (8002424 <HAL_SPI_MspInit+0xf0>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	f003 0310 	and.w	r3, r3, #16
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	697b      	ldr	r3, [r7, #20]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800238e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002394:	2302      	movs	r3, #2
 8002396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800239c:	2303      	movs	r3, #3
 800239e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80023a0:	2305      	movs	r3, #5
 80023a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023a4:	f107 031c 	add.w	r3, r7, #28
 80023a8:	4619      	mov	r1, r3
 80023aa:	481f      	ldr	r0, [pc, #124]	; (8002428 <HAL_SPI_MspInit+0xf4>)
 80023ac:	f000 fe4a 	bl	8003044 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80023b0:	e031      	b.n	8002416 <HAL_SPI_MspInit+0xe2>
  else if(hspi->Instance==SPI5)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a1d      	ldr	r2, [pc, #116]	; (800242c <HAL_SPI_MspInit+0xf8>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d12c      	bne.n	8002416 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80023bc:	2300      	movs	r3, #0
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	4b18      	ldr	r3, [pc, #96]	; (8002424 <HAL_SPI_MspInit+0xf0>)
 80023c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c4:	4a17      	ldr	r2, [pc, #92]	; (8002424 <HAL_SPI_MspInit+0xf0>)
 80023c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023ca:	6453      	str	r3, [r2, #68]	; 0x44
 80023cc:	4b15      	ldr	r3, [pc, #84]	; (8002424 <HAL_SPI_MspInit+0xf0>)
 80023ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023d4:	613b      	str	r3, [r7, #16]
 80023d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80023d8:	2300      	movs	r3, #0
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	4b11      	ldr	r3, [pc, #68]	; (8002424 <HAL_SPI_MspInit+0xf0>)
 80023de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e0:	4a10      	ldr	r2, [pc, #64]	; (8002424 <HAL_SPI_MspInit+0xf0>)
 80023e2:	f043 0320 	orr.w	r3, r3, #32
 80023e6:	6313      	str	r3, [r2, #48]	; 0x30
 80023e8:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <HAL_SPI_MspInit+0xf0>)
 80023ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ec:	f003 0320 	and.w	r3, r3, #32
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80023f4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80023f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fa:	2302      	movs	r3, #2
 80023fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023fe:	2301      	movs	r3, #1
 8002400:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002402:	2303      	movs	r3, #3
 8002404:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002406:	2305      	movs	r3, #5
 8002408:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800240a:	f107 031c 	add.w	r3, r7, #28
 800240e:	4619      	mov	r1, r3
 8002410:	4807      	ldr	r0, [pc, #28]	; (8002430 <HAL_SPI_MspInit+0xfc>)
 8002412:	f000 fe17 	bl	8003044 <HAL_GPIO_Init>
}
 8002416:	bf00      	nop
 8002418:	3730      	adds	r7, #48	; 0x30
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40013400 	.word	0x40013400
 8002424:	40023800 	.word	0x40023800
 8002428:	40021000 	.word	0x40021000
 800242c:	40015000 	.word	0x40015000
 8002430:	40021400 	.word	0x40021400

08002434 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002444:	d115      	bne.n	8002472 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	4b0c      	ldr	r3, [pc, #48]	; (800247c <HAL_TIM_Base_MspInit+0x48>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	4a0b      	ldr	r2, [pc, #44]	; (800247c <HAL_TIM_Base_MspInit+0x48>)
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	6413      	str	r3, [r2, #64]	; 0x40
 8002456:	4b09      	ldr	r3, [pc, #36]	; (800247c <HAL_TIM_Base_MspInit+0x48>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002462:	2200      	movs	r2, #0
 8002464:	2100      	movs	r1, #0
 8002466:	201c      	movs	r0, #28
 8002468:	f000 fdb5 	bl	8002fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800246c:	201c      	movs	r0, #28
 800246e:	f000 fdce 	bl	800300e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002472:	bf00      	nop
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40023800 	.word	0x40023800

08002480 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002488:	f107 030c 	add.w	r3, r7, #12
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a0:	d11d      	bne.n	80024de <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <HAL_TIM_MspPostInit+0x68>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	4a0f      	ldr	r2, [pc, #60]	; (80024e8 <HAL_TIM_MspPostInit+0x68>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	6313      	str	r3, [r2, #48]	; 0x30
 80024b2:	4b0d      	ldr	r3, [pc, #52]	; (80024e8 <HAL_TIM_MspPostInit+0x68>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	60bb      	str	r3, [r7, #8]
 80024bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024be:	2304      	movs	r3, #4
 80024c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c2:	2302      	movs	r3, #2
 80024c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ca:	2300      	movs	r3, #0
 80024cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80024ce:	2301      	movs	r3, #1
 80024d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d2:	f107 030c 	add.w	r3, r7, #12
 80024d6:	4619      	mov	r1, r3
 80024d8:	4804      	ldr	r0, [pc, #16]	; (80024ec <HAL_TIM_MspPostInit+0x6c>)
 80024da:	f000 fdb3 	bl	8003044 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80024de:	bf00      	nop
 80024e0:	3720      	adds	r7, #32
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40023800 	.word	0x40023800
 80024ec:	40020000 	.word	0x40020000

080024f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08a      	sub	sp, #40	; 0x28
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f8:	f107 0314 	add.w	r3, r7, #20
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	60da      	str	r2, [r3, #12]
 8002506:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a19      	ldr	r2, [pc, #100]	; (8002574 <HAL_UART_MspInit+0x84>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d12b      	bne.n	800256a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	4b18      	ldr	r3, [pc, #96]	; (8002578 <HAL_UART_MspInit+0x88>)
 8002518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251a:	4a17      	ldr	r2, [pc, #92]	; (8002578 <HAL_UART_MspInit+0x88>)
 800251c:	f043 0320 	orr.w	r3, r3, #32
 8002520:	6453      	str	r3, [r2, #68]	; 0x44
 8002522:	4b15      	ldr	r3, [pc, #84]	; (8002578 <HAL_UART_MspInit+0x88>)
 8002524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002526:	f003 0320 	and.w	r3, r3, #32
 800252a:	613b      	str	r3, [r7, #16]
 800252c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	4b11      	ldr	r3, [pc, #68]	; (8002578 <HAL_UART_MspInit+0x88>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	4a10      	ldr	r2, [pc, #64]	; (8002578 <HAL_UART_MspInit+0x88>)
 8002538:	f043 0304 	orr.w	r3, r3, #4
 800253c:	6313      	str	r3, [r2, #48]	; 0x30
 800253e:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <HAL_UART_MspInit+0x88>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	f003 0304 	and.w	r3, r3, #4
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800254a:	23c0      	movs	r3, #192	; 0xc0
 800254c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254e:	2302      	movs	r3, #2
 8002550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002552:	2300      	movs	r3, #0
 8002554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002556:	2303      	movs	r3, #3
 8002558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800255a:	2308      	movs	r3, #8
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800255e:	f107 0314 	add.w	r3, r7, #20
 8002562:	4619      	mov	r1, r3
 8002564:	4805      	ldr	r0, [pc, #20]	; (800257c <HAL_UART_MspInit+0x8c>)
 8002566:	f000 fd6d 	bl	8003044 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800256a:	bf00      	nop
 800256c:	3728      	adds	r7, #40	; 0x28
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40011400 	.word	0x40011400
 8002578:	40023800 	.word	0x40023800
 800257c:	40020800 	.word	0x40020800

08002580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002584:	e7fe      	b.n	8002584 <NMI_Handler+0x4>

08002586 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002586:	b480      	push	{r7}
 8002588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800258a:	e7fe      	b.n	800258a <HardFault_Handler+0x4>

0800258c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002590:	e7fe      	b.n	8002590 <MemManage_Handler+0x4>

08002592 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002592:	b480      	push	{r7}
 8002594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002596:	e7fe      	b.n	8002596 <BusFault_Handler+0x4>

08002598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800259c:	e7fe      	b.n	800259c <UsageFault_Handler+0x4>

0800259e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800259e:	b480      	push	{r7}
 80025a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025b0:	bf00      	nop
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025ba:	b480      	push	{r7}
 80025bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025cc:	f000 f972 	bl	80028b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025d0:	bf00      	nop
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80025d8:	2001      	movs	r0, #1
 80025da:	f000 ff13 	bl	8003404 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025e8:	4802      	ldr	r0, [pc, #8]	; (80025f4 <TIM2_IRQHandler+0x10>)
 80025ea:	f004 fa29 	bl	8006a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000c38 	.word	0x20000c38

080025f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80025fc:	4802      	ldr	r0, [pc, #8]	; (8002608 <OTG_FS_IRQHandler+0x10>)
 80025fe:	f002 f8a3 	bl	8004748 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20002810 	.word	0x20002810

0800260c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
	return 1;
 8002610:	2301      	movs	r3, #1
}
 8002612:	4618      	mov	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <_kill>:

int _kill(int pid, int sig)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002626:	f009 fcfd 	bl	800c024 <__errno>
 800262a:	4603      	mov	r3, r0
 800262c:	2216      	movs	r2, #22
 800262e:	601a      	str	r2, [r3, #0]
	return -1;
 8002630:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002634:	4618      	mov	r0, r3
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <_exit>:

void _exit (int status)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002644:	f04f 31ff 	mov.w	r1, #4294967295
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7ff ffe7 	bl	800261c <_kill>
	while (1) {}		/* Make sure we hang here */
 800264e:	e7fe      	b.n	800264e <_exit+0x12>

08002650 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	e00a      	b.n	8002678 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002662:	f3af 8000 	nop.w
 8002666:	4601      	mov	r1, r0
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	1c5a      	adds	r2, r3, #1
 800266c:	60ba      	str	r2, [r7, #8]
 800266e:	b2ca      	uxtb	r2, r1
 8002670:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	3301      	adds	r3, #1
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	429a      	cmp	r2, r3
 800267e:	dbf0      	blt.n	8002662 <_read+0x12>
	}

return len;
 8002680:	687b      	ldr	r3, [r7, #4]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b086      	sub	sp, #24
 800268e:	af00      	add	r7, sp, #0
 8002690:	60f8      	str	r0, [r7, #12]
 8002692:	60b9      	str	r1, [r7, #8]
 8002694:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]
 800269a:	e009      	b.n	80026b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	1c5a      	adds	r2, r3, #1
 80026a0:	60ba      	str	r2, [r7, #8]
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	3301      	adds	r3, #1
 80026ae:	617b      	str	r3, [r7, #20]
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	dbf1      	blt.n	800269c <_write+0x12>
	}
	return len;
 80026b8:	687b      	ldr	r3, [r7, #4]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <_close>:

int _close(int file)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
	return -1;
 80026ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026ea:	605a      	str	r2, [r3, #4]
	return 0;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <_isatty>:

int _isatty(int file)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
	return 1;
 8002702:	2301      	movs	r3, #1
}
 8002704:	4618      	mov	r0, r3
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
	return 0;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
	...

0800272c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002734:	4a14      	ldr	r2, [pc, #80]	; (8002788 <_sbrk+0x5c>)
 8002736:	4b15      	ldr	r3, [pc, #84]	; (800278c <_sbrk+0x60>)
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002740:	4b13      	ldr	r3, [pc, #76]	; (8002790 <_sbrk+0x64>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d102      	bne.n	800274e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002748:	4b11      	ldr	r3, [pc, #68]	; (8002790 <_sbrk+0x64>)
 800274a:	4a12      	ldr	r2, [pc, #72]	; (8002794 <_sbrk+0x68>)
 800274c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800274e:	4b10      	ldr	r3, [pc, #64]	; (8002790 <_sbrk+0x64>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4413      	add	r3, r2
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	429a      	cmp	r2, r3
 800275a:	d207      	bcs.n	800276c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800275c:	f009 fc62 	bl	800c024 <__errno>
 8002760:	4603      	mov	r3, r0
 8002762:	220c      	movs	r2, #12
 8002764:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002766:	f04f 33ff 	mov.w	r3, #4294967295
 800276a:	e009      	b.n	8002780 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800276c:	4b08      	ldr	r3, [pc, #32]	; (8002790 <_sbrk+0x64>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002772:	4b07      	ldr	r3, [pc, #28]	; (8002790 <_sbrk+0x64>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4413      	add	r3, r2
 800277a:	4a05      	ldr	r2, [pc, #20]	; (8002790 <_sbrk+0x64>)
 800277c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800277e:	68fb      	ldr	r3, [r7, #12]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	20030000 	.word	0x20030000
 800278c:	00000400 	.word	0x00000400
 8002790:	20000390 	.word	0x20000390
 8002794:	20002c28 	.word	0x20002c28

08002798 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <SystemInit+0x20>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	4a05      	ldr	r2, [pc, #20]	; (80027b8 <SystemInit+0x20>)
 80027a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	e000ed00 	.word	0xe000ed00

080027bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80027bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027c0:	480d      	ldr	r0, [pc, #52]	; (80027f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027c2:	490e      	ldr	r1, [pc, #56]	; (80027fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027c4:	4a0e      	ldr	r2, [pc, #56]	; (8002800 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027c8:	e002      	b.n	80027d0 <LoopCopyDataInit>

080027ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ce:	3304      	adds	r3, #4

080027d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027d4:	d3f9      	bcc.n	80027ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027d6:	4a0b      	ldr	r2, [pc, #44]	; (8002804 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027d8:	4c0b      	ldr	r4, [pc, #44]	; (8002808 <LoopFillZerobss+0x26>)
  movs r3, #0
 80027da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027dc:	e001      	b.n	80027e2 <LoopFillZerobss>

080027de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027e0:	3204      	adds	r2, #4

080027e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027e4:	d3fb      	bcc.n	80027de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80027e6:	f7ff ffd7 	bl	8002798 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027ea:	f009 fc21 	bl	800c030 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027ee:	f7ff f829 	bl	8001844 <main>
  bx  lr    
 80027f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80027f4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80027f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027fc:	2000036c 	.word	0x2000036c
  ldr r2, =_sidata
 8002800:	08010e14 	.word	0x08010e14
  ldr r2, =_sbss
 8002804:	2000036c 	.word	0x2000036c
  ldr r4, =_ebss
 8002808:	20002c28 	.word	0x20002c28

0800280c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800280c:	e7fe      	b.n	800280c <ADC_IRQHandler>
	...

08002810 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002814:	4b0e      	ldr	r3, [pc, #56]	; (8002850 <HAL_Init+0x40>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a0d      	ldr	r2, [pc, #52]	; (8002850 <HAL_Init+0x40>)
 800281a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800281e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002820:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <HAL_Init+0x40>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a0a      	ldr	r2, [pc, #40]	; (8002850 <HAL_Init+0x40>)
 8002826:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800282a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800282c:	4b08      	ldr	r3, [pc, #32]	; (8002850 <HAL_Init+0x40>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a07      	ldr	r2, [pc, #28]	; (8002850 <HAL_Init+0x40>)
 8002832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002836:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002838:	2003      	movs	r0, #3
 800283a:	f000 fbc1 	bl	8002fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800283e:	200f      	movs	r0, #15
 8002840:	f000 f808 	bl	8002854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002844:	f7ff fc6a 	bl	800211c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40023c00 	.word	0x40023c00

08002854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800285c:	4b12      	ldr	r3, [pc, #72]	; (80028a8 <HAL_InitTick+0x54>)
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4b12      	ldr	r3, [pc, #72]	; (80028ac <HAL_InitTick+0x58>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	4619      	mov	r1, r3
 8002866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800286a:	fbb3 f3f1 	udiv	r3, r3, r1
 800286e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002872:	4618      	mov	r0, r3
 8002874:	f000 fbd9 	bl	800302a <HAL_SYSTICK_Config>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e00e      	b.n	80028a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b0f      	cmp	r3, #15
 8002886:	d80a      	bhi.n	800289e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002888:	2200      	movs	r2, #0
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	f04f 30ff 	mov.w	r0, #4294967295
 8002890:	f000 fba1 	bl	8002fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002894:	4a06      	ldr	r2, [pc, #24]	; (80028b0 <HAL_InitTick+0x5c>)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	e000      	b.n	80028a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	20000000 	.word	0x20000000
 80028ac:	20000008 	.word	0x20000008
 80028b0:	20000004 	.word	0x20000004

080028b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028b8:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <HAL_IncTick+0x20>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	461a      	mov	r2, r3
 80028be:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <HAL_IncTick+0x24>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4413      	add	r3, r2
 80028c4:	4a04      	ldr	r2, [pc, #16]	; (80028d8 <HAL_IncTick+0x24>)
 80028c6:	6013      	str	r3, [r2, #0]
}
 80028c8:	bf00      	nop
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	20000008 	.word	0x20000008
 80028d8:	20000ecc 	.word	0x20000ecc

080028dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  return uwTick;
 80028e0:	4b03      	ldr	r3, [pc, #12]	; (80028f0 <HAL_GetTick+0x14>)
 80028e2:	681b      	ldr	r3, [r3, #0]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	20000ecc 	.word	0x20000ecc

080028f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028fc:	f7ff ffee 	bl	80028dc <HAL_GetTick>
 8002900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290c:	d005      	beq.n	800291a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800290e:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <HAL_Delay+0x44>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	461a      	mov	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4413      	add	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800291a:	bf00      	nop
 800291c:	f7ff ffde 	bl	80028dc <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	429a      	cmp	r2, r3
 800292a:	d8f7      	bhi.n	800291c <HAL_Delay+0x28>
  {
  }
}
 800292c:	bf00      	nop
 800292e:	bf00      	nop
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20000008 	.word	0x20000008

0800293c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e033      	b.n	80029ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	2b00      	cmp	r3, #0
 8002958:	d109      	bne.n	800296e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7ff fc06 	bl	800216c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	f003 0310 	and.w	r3, r3, #16
 8002976:	2b00      	cmp	r3, #0
 8002978:	d118      	bne.n	80029ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002982:	f023 0302 	bic.w	r3, r3, #2
 8002986:	f043 0202 	orr.w	r2, r3, #2
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f94a 	bl	8002c28 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f023 0303 	bic.w	r3, r3, #3
 80029a2:	f043 0201 	orr.w	r2, r3, #1
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	641a      	str	r2, [r3, #64]	; 0x40
 80029aa:	e001      	b.n	80029b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
	...

080029c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d101      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x1c>
 80029dc:	2302      	movs	r3, #2
 80029de:	e113      	b.n	8002c08 <HAL_ADC_ConfigChannel+0x244>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2b09      	cmp	r3, #9
 80029ee:	d925      	bls.n	8002a3c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68d9      	ldr	r1, [r3, #12]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	461a      	mov	r2, r3
 80029fe:	4613      	mov	r3, r2
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	4413      	add	r3, r2
 8002a04:	3b1e      	subs	r3, #30
 8002a06:	2207      	movs	r2, #7
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43da      	mvns	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	400a      	ands	r2, r1
 8002a14:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68d9      	ldr	r1, [r3, #12]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	4618      	mov	r0, r3
 8002a28:	4603      	mov	r3, r0
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	4403      	add	r3, r0
 8002a2e:	3b1e      	subs	r3, #30
 8002a30:	409a      	lsls	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	60da      	str	r2, [r3, #12]
 8002a3a:	e022      	b.n	8002a82 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6919      	ldr	r1, [r3, #16]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	4413      	add	r3, r2
 8002a50:	2207      	movs	r2, #7
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43da      	mvns	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	400a      	ands	r2, r1
 8002a5e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6919      	ldr	r1, [r3, #16]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	689a      	ldr	r2, [r3, #8]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	4618      	mov	r0, r3
 8002a72:	4603      	mov	r3, r0
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	4403      	add	r3, r0
 8002a78:	409a      	lsls	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b06      	cmp	r3, #6
 8002a88:	d824      	bhi.n	8002ad4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	3b05      	subs	r3, #5
 8002a9c:	221f      	movs	r2, #31
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	43da      	mvns	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	400a      	ands	r2, r1
 8002aaa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	4618      	mov	r0, r3
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3b05      	subs	r3, #5
 8002ac6:	fa00 f203 	lsl.w	r2, r0, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	635a      	str	r2, [r3, #52]	; 0x34
 8002ad2:	e04c      	b.n	8002b6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b0c      	cmp	r3, #12
 8002ada:	d824      	bhi.n	8002b26 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	3b23      	subs	r3, #35	; 0x23
 8002aee:	221f      	movs	r2, #31
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	43da      	mvns	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	400a      	ands	r2, r1
 8002afc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	3b23      	subs	r3, #35	; 0x23
 8002b18:	fa00 f203 	lsl.w	r2, r0, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	631a      	str	r2, [r3, #48]	; 0x30
 8002b24:	e023      	b.n	8002b6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	4613      	mov	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	3b41      	subs	r3, #65	; 0x41
 8002b38:	221f      	movs	r2, #31
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43da      	mvns	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	400a      	ands	r2, r1
 8002b46:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	4618      	mov	r0, r3
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	3b41      	subs	r3, #65	; 0x41
 8002b62:	fa00 f203 	lsl.w	r2, r0, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b6e:	4b29      	ldr	r3, [pc, #164]	; (8002c14 <HAL_ADC_ConfigChannel+0x250>)
 8002b70:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a28      	ldr	r2, [pc, #160]	; (8002c18 <HAL_ADC_ConfigChannel+0x254>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d10f      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x1d8>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b12      	cmp	r3, #18
 8002b82:	d10b      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a1d      	ldr	r2, [pc, #116]	; (8002c18 <HAL_ADC_ConfigChannel+0x254>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d12b      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x23a>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a1c      	ldr	r2, [pc, #112]	; (8002c1c <HAL_ADC_ConfigChannel+0x258>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d003      	beq.n	8002bb8 <HAL_ADC_ConfigChannel+0x1f4>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b11      	cmp	r3, #17
 8002bb6:	d122      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a11      	ldr	r2, [pc, #68]	; (8002c1c <HAL_ADC_ConfigChannel+0x258>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d111      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bda:	4b11      	ldr	r3, [pc, #68]	; (8002c20 <HAL_ADC_ConfigChannel+0x25c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a11      	ldr	r2, [pc, #68]	; (8002c24 <HAL_ADC_ConfigChannel+0x260>)
 8002be0:	fba2 2303 	umull	r2, r3, r2, r3
 8002be4:	0c9a      	lsrs	r2, r3, #18
 8002be6:	4613      	mov	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bf0:	e002      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1f9      	bne.n	8002bf2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	40012300 	.word	0x40012300
 8002c18:	40012000 	.word	0x40012000
 8002c1c:	10000012 	.word	0x10000012
 8002c20:	20000000 	.word	0x20000000
 8002c24:	431bde83 	.word	0x431bde83

08002c28 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c30:	4b79      	ldr	r3, [pc, #484]	; (8002e18 <ADC_Init+0x1f0>)
 8002c32:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6859      	ldr	r1, [r3, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	021a      	lsls	r2, r3, #8
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6859      	ldr	r1, [r3, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ca2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6899      	ldr	r1, [r3, #8]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cba:	4a58      	ldr	r2, [pc, #352]	; (8002e1c <ADC_Init+0x1f4>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d022      	beq.n	8002d06 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6899      	ldr	r1, [r3, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cf0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6899      	ldr	r1, [r3, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	609a      	str	r2, [r3, #8]
 8002d04:	e00f      	b.n	8002d26 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d24:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0202 	bic.w	r2, r2, #2
 8002d34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6899      	ldr	r1, [r3, #8]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	7e1b      	ldrb	r3, [r3, #24]
 8002d40:	005a      	lsls	r2, r3, #1
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d01b      	beq.n	8002d8c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d62:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d72:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6859      	ldr	r1, [r3, #4]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	035a      	lsls	r2, r3, #13
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	605a      	str	r2, [r3, #4]
 8002d8a:	e007      	b.n	8002d9c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d9a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002daa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	051a      	lsls	r2, r3, #20
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002dd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6899      	ldr	r1, [r3, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dde:	025a      	lsls	r2, r3, #9
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002df6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6899      	ldr	r1, [r3, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	029a      	lsls	r2, r3, #10
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	609a      	str	r2, [r3, #8]
}
 8002e0c:	bf00      	nop
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	40012300 	.word	0x40012300
 8002e1c:	0f000001 	.word	0x0f000001

08002e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e30:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <__NVIC_SetPriorityGrouping+0x44>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e52:	4a04      	ldr	r2, [pc, #16]	; (8002e64 <__NVIC_SetPriorityGrouping+0x44>)
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	60d3      	str	r3, [r2, #12]
}
 8002e58:	bf00      	nop
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	e000ed00 	.word	0xe000ed00

08002e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e6c:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <__NVIC_GetPriorityGrouping+0x18>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	0a1b      	lsrs	r3, r3, #8
 8002e72:	f003 0307 	and.w	r3, r3, #7
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	e000ed00 	.word	0xe000ed00

08002e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	db0b      	blt.n	8002eae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e96:	79fb      	ldrb	r3, [r7, #7]
 8002e98:	f003 021f 	and.w	r2, r3, #31
 8002e9c:	4907      	ldr	r1, [pc, #28]	; (8002ebc <__NVIC_EnableIRQ+0x38>)
 8002e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea2:	095b      	lsrs	r3, r3, #5
 8002ea4:	2001      	movs	r0, #1
 8002ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	e000e100 	.word	0xe000e100

08002ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	6039      	str	r1, [r7, #0]
 8002eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	db0a      	blt.n	8002eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	b2da      	uxtb	r2, r3
 8002ed8:	490c      	ldr	r1, [pc, #48]	; (8002f0c <__NVIC_SetPriority+0x4c>)
 8002eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ede:	0112      	lsls	r2, r2, #4
 8002ee0:	b2d2      	uxtb	r2, r2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ee8:	e00a      	b.n	8002f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	4908      	ldr	r1, [pc, #32]	; (8002f10 <__NVIC_SetPriority+0x50>)
 8002ef0:	79fb      	ldrb	r3, [r7, #7]
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	3b04      	subs	r3, #4
 8002ef8:	0112      	lsls	r2, r2, #4
 8002efa:	b2d2      	uxtb	r2, r2
 8002efc:	440b      	add	r3, r1
 8002efe:	761a      	strb	r2, [r3, #24]
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	e000e100 	.word	0xe000e100
 8002f10:	e000ed00 	.word	0xe000ed00

08002f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b089      	sub	sp, #36	; 0x24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	f1c3 0307 	rsb	r3, r3, #7
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	bf28      	it	cs
 8002f32:	2304      	movcs	r3, #4
 8002f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	3304      	adds	r3, #4
 8002f3a:	2b06      	cmp	r3, #6
 8002f3c:	d902      	bls.n	8002f44 <NVIC_EncodePriority+0x30>
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	3b03      	subs	r3, #3
 8002f42:	e000      	b.n	8002f46 <NVIC_EncodePriority+0x32>
 8002f44:	2300      	movs	r3, #0
 8002f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f48:	f04f 32ff 	mov.w	r2, #4294967295
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43da      	mvns	r2, r3
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	401a      	ands	r2, r3
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	fa01 f303 	lsl.w	r3, r1, r3
 8002f66:	43d9      	mvns	r1, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f6c:	4313      	orrs	r3, r2
         );
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3724      	adds	r7, #36	; 0x24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
	...

08002f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f8c:	d301      	bcc.n	8002f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e00f      	b.n	8002fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f92:	4a0a      	ldr	r2, [pc, #40]	; (8002fbc <SysTick_Config+0x40>)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f9a:	210f      	movs	r1, #15
 8002f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa0:	f7ff ff8e 	bl	8002ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fa4:	4b05      	ldr	r3, [pc, #20]	; (8002fbc <SysTick_Config+0x40>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002faa:	4b04      	ldr	r3, [pc, #16]	; (8002fbc <SysTick_Config+0x40>)
 8002fac:	2207      	movs	r2, #7
 8002fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	e000e010 	.word	0xe000e010

08002fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f7ff ff29 	bl	8002e20 <__NVIC_SetPriorityGrouping>
}
 8002fce:	bf00      	nop
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b086      	sub	sp, #24
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	4603      	mov	r3, r0
 8002fde:	60b9      	str	r1, [r7, #8]
 8002fe0:	607a      	str	r2, [r7, #4]
 8002fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fe8:	f7ff ff3e 	bl	8002e68 <__NVIC_GetPriorityGrouping>
 8002fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	68b9      	ldr	r1, [r7, #8]
 8002ff2:	6978      	ldr	r0, [r7, #20]
 8002ff4:	f7ff ff8e 	bl	8002f14 <NVIC_EncodePriority>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ffe:	4611      	mov	r1, r2
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff ff5d 	bl	8002ec0 <__NVIC_SetPriority>
}
 8003006:	bf00      	nop
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b082      	sub	sp, #8
 8003012:	af00      	add	r7, sp, #0
 8003014:	4603      	mov	r3, r0
 8003016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff ff31 	bl	8002e84 <__NVIC_EnableIRQ>
}
 8003022:	bf00      	nop
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b082      	sub	sp, #8
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7ff ffa2 	bl	8002f7c <SysTick_Config>
 8003038:	4603      	mov	r3, r0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003044:	b480      	push	{r7}
 8003046:	b089      	sub	sp, #36	; 0x24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800304e:	2300      	movs	r3, #0
 8003050:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003052:	2300      	movs	r3, #0
 8003054:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003056:	2300      	movs	r3, #0
 8003058:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800305a:	2300      	movs	r3, #0
 800305c:	61fb      	str	r3, [r7, #28]
 800305e:	e177      	b.n	8003350 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003060:	2201      	movs	r2, #1
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	4013      	ands	r3, r2
 8003072:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	429a      	cmp	r2, r3
 800307a:	f040 8166 	bne.w	800334a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	2b01      	cmp	r3, #1
 8003088:	d005      	beq.n	8003096 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003092:	2b02      	cmp	r3, #2
 8003094:	d130      	bne.n	80030f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	2203      	movs	r2, #3
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	43db      	mvns	r3, r3
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	4013      	ands	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4313      	orrs	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030cc:	2201      	movs	r2, #1
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	43db      	mvns	r3, r3
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	4013      	ands	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	091b      	lsrs	r3, r3, #4
 80030e2:	f003 0201 	and.w	r2, r3, #1
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f003 0303 	and.w	r3, r3, #3
 8003100:	2b03      	cmp	r3, #3
 8003102:	d017      	beq.n	8003134 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	2203      	movs	r2, #3
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	43db      	mvns	r3, r3
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	4013      	ands	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4313      	orrs	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f003 0303 	and.w	r3, r3, #3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d123      	bne.n	8003188 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	08da      	lsrs	r2, r3, #3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3208      	adds	r2, #8
 8003148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800314c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	220f      	movs	r2, #15
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	43db      	mvns	r3, r3
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4013      	ands	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4313      	orrs	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	08da      	lsrs	r2, r3, #3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	3208      	adds	r2, #8
 8003182:	69b9      	ldr	r1, [r7, #24]
 8003184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	2203      	movs	r2, #3
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	43db      	mvns	r3, r3
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4013      	ands	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f003 0203 	and.w	r2, r3, #3
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 80c0 	beq.w	800334a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	4b66      	ldr	r3, [pc, #408]	; (8003368 <HAL_GPIO_Init+0x324>)
 80031d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d2:	4a65      	ldr	r2, [pc, #404]	; (8003368 <HAL_GPIO_Init+0x324>)
 80031d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031d8:	6453      	str	r3, [r2, #68]	; 0x44
 80031da:	4b63      	ldr	r3, [pc, #396]	; (8003368 <HAL_GPIO_Init+0x324>)
 80031dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031e6:	4a61      	ldr	r2, [pc, #388]	; (800336c <HAL_GPIO_Init+0x328>)
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	089b      	lsrs	r3, r3, #2
 80031ec:	3302      	adds	r3, #2
 80031ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	f003 0303 	and.w	r3, r3, #3
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	220f      	movs	r2, #15
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43db      	mvns	r3, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4013      	ands	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a58      	ldr	r2, [pc, #352]	; (8003370 <HAL_GPIO_Init+0x32c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d037      	beq.n	8003282 <HAL_GPIO_Init+0x23e>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a57      	ldr	r2, [pc, #348]	; (8003374 <HAL_GPIO_Init+0x330>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d031      	beq.n	800327e <HAL_GPIO_Init+0x23a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a56      	ldr	r2, [pc, #344]	; (8003378 <HAL_GPIO_Init+0x334>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d02b      	beq.n	800327a <HAL_GPIO_Init+0x236>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a55      	ldr	r2, [pc, #340]	; (800337c <HAL_GPIO_Init+0x338>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d025      	beq.n	8003276 <HAL_GPIO_Init+0x232>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a54      	ldr	r2, [pc, #336]	; (8003380 <HAL_GPIO_Init+0x33c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d01f      	beq.n	8003272 <HAL_GPIO_Init+0x22e>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a53      	ldr	r2, [pc, #332]	; (8003384 <HAL_GPIO_Init+0x340>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d019      	beq.n	800326e <HAL_GPIO_Init+0x22a>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a52      	ldr	r2, [pc, #328]	; (8003388 <HAL_GPIO_Init+0x344>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d013      	beq.n	800326a <HAL_GPIO_Init+0x226>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a51      	ldr	r2, [pc, #324]	; (800338c <HAL_GPIO_Init+0x348>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d00d      	beq.n	8003266 <HAL_GPIO_Init+0x222>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a50      	ldr	r2, [pc, #320]	; (8003390 <HAL_GPIO_Init+0x34c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d007      	beq.n	8003262 <HAL_GPIO_Init+0x21e>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a4f      	ldr	r2, [pc, #316]	; (8003394 <HAL_GPIO_Init+0x350>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d101      	bne.n	800325e <HAL_GPIO_Init+0x21a>
 800325a:	2309      	movs	r3, #9
 800325c:	e012      	b.n	8003284 <HAL_GPIO_Init+0x240>
 800325e:	230a      	movs	r3, #10
 8003260:	e010      	b.n	8003284 <HAL_GPIO_Init+0x240>
 8003262:	2308      	movs	r3, #8
 8003264:	e00e      	b.n	8003284 <HAL_GPIO_Init+0x240>
 8003266:	2307      	movs	r3, #7
 8003268:	e00c      	b.n	8003284 <HAL_GPIO_Init+0x240>
 800326a:	2306      	movs	r3, #6
 800326c:	e00a      	b.n	8003284 <HAL_GPIO_Init+0x240>
 800326e:	2305      	movs	r3, #5
 8003270:	e008      	b.n	8003284 <HAL_GPIO_Init+0x240>
 8003272:	2304      	movs	r3, #4
 8003274:	e006      	b.n	8003284 <HAL_GPIO_Init+0x240>
 8003276:	2303      	movs	r3, #3
 8003278:	e004      	b.n	8003284 <HAL_GPIO_Init+0x240>
 800327a:	2302      	movs	r3, #2
 800327c:	e002      	b.n	8003284 <HAL_GPIO_Init+0x240>
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <HAL_GPIO_Init+0x240>
 8003282:	2300      	movs	r3, #0
 8003284:	69fa      	ldr	r2, [r7, #28]
 8003286:	f002 0203 	and.w	r2, r2, #3
 800328a:	0092      	lsls	r2, r2, #2
 800328c:	4093      	lsls	r3, r2
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4313      	orrs	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003294:	4935      	ldr	r1, [pc, #212]	; (800336c <HAL_GPIO_Init+0x328>)
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	089b      	lsrs	r3, r3, #2
 800329a:	3302      	adds	r3, #2
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032a2:	4b3d      	ldr	r3, [pc, #244]	; (8003398 <HAL_GPIO_Init+0x354>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	43db      	mvns	r3, r3
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	4013      	ands	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032c6:	4a34      	ldr	r2, [pc, #208]	; (8003398 <HAL_GPIO_Init+0x354>)
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80032cc:	4b32      	ldr	r3, [pc, #200]	; (8003398 <HAL_GPIO_Init+0x354>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	43db      	mvns	r3, r3
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4013      	ands	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032f0:	4a29      	ldr	r2, [pc, #164]	; (8003398 <HAL_GPIO_Init+0x354>)
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032f6:	4b28      	ldr	r3, [pc, #160]	; (8003398 <HAL_GPIO_Init+0x354>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	43db      	mvns	r3, r3
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	4013      	ands	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	4313      	orrs	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800331a:	4a1f      	ldr	r2, [pc, #124]	; (8003398 <HAL_GPIO_Init+0x354>)
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003320:	4b1d      	ldr	r3, [pc, #116]	; (8003398 <HAL_GPIO_Init+0x354>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	43db      	mvns	r3, r3
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4013      	ands	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	4313      	orrs	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003344:	4a14      	ldr	r2, [pc, #80]	; (8003398 <HAL_GPIO_Init+0x354>)
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	3301      	adds	r3, #1
 800334e:	61fb      	str	r3, [r7, #28]
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	2b0f      	cmp	r3, #15
 8003354:	f67f ae84 	bls.w	8003060 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003358:	bf00      	nop
 800335a:	bf00      	nop
 800335c:	3724      	adds	r7, #36	; 0x24
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	40023800 	.word	0x40023800
 800336c:	40013800 	.word	0x40013800
 8003370:	40020000 	.word	0x40020000
 8003374:	40020400 	.word	0x40020400
 8003378:	40020800 	.word	0x40020800
 800337c:	40020c00 	.word	0x40020c00
 8003380:	40021000 	.word	0x40021000
 8003384:	40021400 	.word	0x40021400
 8003388:	40021800 	.word	0x40021800
 800338c:	40021c00 	.word	0x40021c00
 8003390:	40022000 	.word	0x40022000
 8003394:	40022400 	.word	0x40022400
 8003398:	40013c00 	.word	0x40013c00

0800339c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	460b      	mov	r3, r1
 80033a6:	807b      	strh	r3, [r7, #2]
 80033a8:	4613      	mov	r3, r2
 80033aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033ac:	787b      	ldrb	r3, [r7, #1]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033b2:	887a      	ldrh	r2, [r7, #2]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033b8:	e003      	b.n	80033c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033ba:	887b      	ldrh	r3, [r7, #2]
 80033bc:	041a      	lsls	r2, r3, #16
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	619a      	str	r2, [r3, #24]
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b085      	sub	sp, #20
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
 80033d6:	460b      	mov	r3, r1
 80033d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033e0:	887a      	ldrh	r2, [r7, #2]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	4013      	ands	r3, r2
 80033e6:	041a      	lsls	r2, r3, #16
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	43d9      	mvns	r1, r3
 80033ec:	887b      	ldrh	r3, [r7, #2]
 80033ee:	400b      	ands	r3, r1
 80033f0:	431a      	orrs	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	619a      	str	r2, [r3, #24]
}
 80033f6:	bf00      	nop
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
	...

08003404 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	4603      	mov	r3, r0
 800340c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800340e:	4b08      	ldr	r3, [pc, #32]	; (8003430 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003410:	695a      	ldr	r2, [r3, #20]
 8003412:	88fb      	ldrh	r3, [r7, #6]
 8003414:	4013      	ands	r3, r2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d006      	beq.n	8003428 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800341a:	4a05      	ldr	r2, [pc, #20]	; (8003430 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800341c:	88fb      	ldrh	r3, [r7, #6]
 800341e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003420:	88fb      	ldrh	r3, [r7, #6]
 8003422:	4618      	mov	r0, r3
 8003424:	f7fe fe3c 	bl	80020a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003428:	bf00      	nop
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40013c00 	.word	0x40013c00

08003434 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e12b      	b.n	800369e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d106      	bne.n	8003460 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7fe feca 	bl	80021f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2224      	movs	r2, #36	; 0x24
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 0201 	bic.w	r2, r2, #1
 8003476:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003486:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003496:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003498:	f002 fdd4 	bl	8006044 <HAL_RCC_GetPCLK1Freq>
 800349c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	4a81      	ldr	r2, [pc, #516]	; (80036a8 <HAL_I2C_Init+0x274>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d807      	bhi.n	80034b8 <HAL_I2C_Init+0x84>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4a80      	ldr	r2, [pc, #512]	; (80036ac <HAL_I2C_Init+0x278>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	bf94      	ite	ls
 80034b0:	2301      	movls	r3, #1
 80034b2:	2300      	movhi	r3, #0
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	e006      	b.n	80034c6 <HAL_I2C_Init+0x92>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4a7d      	ldr	r2, [pc, #500]	; (80036b0 <HAL_I2C_Init+0x27c>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	bf94      	ite	ls
 80034c0:	2301      	movls	r3, #1
 80034c2:	2300      	movhi	r3, #0
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e0e7      	b.n	800369e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	4a78      	ldr	r2, [pc, #480]	; (80036b4 <HAL_I2C_Init+0x280>)
 80034d2:	fba2 2303 	umull	r2, r3, r2, r3
 80034d6:	0c9b      	lsrs	r3, r3, #18
 80034d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	4a6a      	ldr	r2, [pc, #424]	; (80036a8 <HAL_I2C_Init+0x274>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d802      	bhi.n	8003508 <HAL_I2C_Init+0xd4>
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	3301      	adds	r3, #1
 8003506:	e009      	b.n	800351c <HAL_I2C_Init+0xe8>
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800350e:	fb02 f303 	mul.w	r3, r2, r3
 8003512:	4a69      	ldr	r2, [pc, #420]	; (80036b8 <HAL_I2C_Init+0x284>)
 8003514:	fba2 2303 	umull	r2, r3, r2, r3
 8003518:	099b      	lsrs	r3, r3, #6
 800351a:	3301      	adds	r3, #1
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6812      	ldr	r2, [r2, #0]
 8003520:	430b      	orrs	r3, r1
 8003522:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800352e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	495c      	ldr	r1, [pc, #368]	; (80036a8 <HAL_I2C_Init+0x274>)
 8003538:	428b      	cmp	r3, r1
 800353a:	d819      	bhi.n	8003570 <HAL_I2C_Init+0x13c>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	1e59      	subs	r1, r3, #1
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	fbb1 f3f3 	udiv	r3, r1, r3
 800354a:	1c59      	adds	r1, r3, #1
 800354c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003550:	400b      	ands	r3, r1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00a      	beq.n	800356c <HAL_I2C_Init+0x138>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	1e59      	subs	r1, r3, #1
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	fbb1 f3f3 	udiv	r3, r1, r3
 8003564:	3301      	adds	r3, #1
 8003566:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800356a:	e051      	b.n	8003610 <HAL_I2C_Init+0x1dc>
 800356c:	2304      	movs	r3, #4
 800356e:	e04f      	b.n	8003610 <HAL_I2C_Init+0x1dc>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d111      	bne.n	800359c <HAL_I2C_Init+0x168>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	1e58      	subs	r0, r3, #1
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6859      	ldr	r1, [r3, #4]
 8003580:	460b      	mov	r3, r1
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	440b      	add	r3, r1
 8003586:	fbb0 f3f3 	udiv	r3, r0, r3
 800358a:	3301      	adds	r3, #1
 800358c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003590:	2b00      	cmp	r3, #0
 8003592:	bf0c      	ite	eq
 8003594:	2301      	moveq	r3, #1
 8003596:	2300      	movne	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	e012      	b.n	80035c2 <HAL_I2C_Init+0x18e>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	1e58      	subs	r0, r3, #1
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6859      	ldr	r1, [r3, #4]
 80035a4:	460b      	mov	r3, r1
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	0099      	lsls	r1, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80035b2:	3301      	adds	r3, #1
 80035b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	bf0c      	ite	eq
 80035bc:	2301      	moveq	r3, #1
 80035be:	2300      	movne	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <HAL_I2C_Init+0x196>
 80035c6:	2301      	movs	r3, #1
 80035c8:	e022      	b.n	8003610 <HAL_I2C_Init+0x1dc>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10e      	bne.n	80035f0 <HAL_I2C_Init+0x1bc>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	1e58      	subs	r0, r3, #1
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6859      	ldr	r1, [r3, #4]
 80035da:	460b      	mov	r3, r1
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	440b      	add	r3, r1
 80035e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80035e4:	3301      	adds	r3, #1
 80035e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035ee:	e00f      	b.n	8003610 <HAL_I2C_Init+0x1dc>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	1e58      	subs	r0, r3, #1
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6859      	ldr	r1, [r3, #4]
 80035f8:	460b      	mov	r3, r1
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	0099      	lsls	r1, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	fbb0 f3f3 	udiv	r3, r0, r3
 8003606:	3301      	adds	r3, #1
 8003608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800360c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	6809      	ldr	r1, [r1, #0]
 8003614:	4313      	orrs	r3, r2
 8003616:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69da      	ldr	r2, [r3, #28]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800363e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6911      	ldr	r1, [r2, #16]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	68d2      	ldr	r2, [r2, #12]
 800364a:	4311      	orrs	r1, r2
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6812      	ldr	r2, [r2, #0]
 8003650:	430b      	orrs	r3, r1
 8003652:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	695a      	ldr	r2, [r3, #20]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	431a      	orrs	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0201 	orr.w	r2, r2, #1
 800367e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2220      	movs	r2, #32
 800368a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	000186a0 	.word	0x000186a0
 80036ac:	001e847f 	.word	0x001e847f
 80036b0:	003d08ff 	.word	0x003d08ff
 80036b4:	431bde83 	.word	0x431bde83
 80036b8:	10624dd3 	.word	0x10624dd3

080036bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b088      	sub	sp, #32
 80036c0:	af02      	add	r7, sp, #8
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	4608      	mov	r0, r1
 80036c6:	4611      	mov	r1, r2
 80036c8:	461a      	mov	r2, r3
 80036ca:	4603      	mov	r3, r0
 80036cc:	817b      	strh	r3, [r7, #10]
 80036ce:	460b      	mov	r3, r1
 80036d0:	813b      	strh	r3, [r7, #8]
 80036d2:	4613      	mov	r3, r2
 80036d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036d6:	f7ff f901 	bl	80028dc <HAL_GetTick>
 80036da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b20      	cmp	r3, #32
 80036e6:	f040 80d9 	bne.w	800389c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	2319      	movs	r3, #25
 80036f0:	2201      	movs	r2, #1
 80036f2:	496d      	ldr	r1, [pc, #436]	; (80038a8 <HAL_I2C_Mem_Write+0x1ec>)
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 fc7f 	bl	8003ff8 <I2C_WaitOnFlagUntilTimeout>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003700:	2302      	movs	r3, #2
 8003702:	e0cc      	b.n	800389e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800370a:	2b01      	cmp	r3, #1
 800370c:	d101      	bne.n	8003712 <HAL_I2C_Mem_Write+0x56>
 800370e:	2302      	movs	r3, #2
 8003710:	e0c5      	b.n	800389e <HAL_I2C_Mem_Write+0x1e2>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b01      	cmp	r3, #1
 8003726:	d007      	beq.n	8003738 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0201 	orr.w	r2, r2, #1
 8003736:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003746:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2221      	movs	r2, #33	; 0x21
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2240      	movs	r2, #64	; 0x40
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6a3a      	ldr	r2, [r7, #32]
 8003762:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003768:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376e:	b29a      	uxth	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4a4d      	ldr	r2, [pc, #308]	; (80038ac <HAL_I2C_Mem_Write+0x1f0>)
 8003778:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800377a:	88f8      	ldrh	r0, [r7, #6]
 800377c:	893a      	ldrh	r2, [r7, #8]
 800377e:	8979      	ldrh	r1, [r7, #10]
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	9301      	str	r3, [sp, #4]
 8003784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	4603      	mov	r3, r0
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f000 fab6 	bl	8003cfc <I2C_RequestMemoryWrite>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d052      	beq.n	800383c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e081      	b.n	800389e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 fd00 	bl	80041a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00d      	beq.n	80037c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d107      	bne.n	80037c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e06b      	b.n	800389e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ca:	781a      	ldrb	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	1c5a      	adds	r2, r3, #1
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	3b01      	subs	r3, #1
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b04      	cmp	r3, #4
 8003802:	d11b      	bne.n	800383c <HAL_I2C_Mem_Write+0x180>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003808:	2b00      	cmp	r3, #0
 800380a:	d017      	beq.n	800383c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	781a      	ldrb	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	1c5a      	adds	r2, r3, #1
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003826:	3b01      	subs	r3, #1
 8003828:	b29a      	uxth	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003832:	b29b      	uxth	r3, r3
 8003834:	3b01      	subs	r3, #1
 8003836:	b29a      	uxth	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1aa      	bne.n	800379a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 fcec 	bl	8004226 <I2C_WaitOnBTFFlagUntilTimeout>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00d      	beq.n	8003870 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003858:	2b04      	cmp	r3, #4
 800385a:	d107      	bne.n	800386c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800386a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e016      	b.n	800389e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800387e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003898:	2300      	movs	r3, #0
 800389a:	e000      	b.n	800389e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800389c:	2302      	movs	r3, #2
  }
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	00100002 	.word	0x00100002
 80038ac:	ffff0000 	.word	0xffff0000

080038b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b08c      	sub	sp, #48	; 0x30
 80038b4:	af02      	add	r7, sp, #8
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	4608      	mov	r0, r1
 80038ba:	4611      	mov	r1, r2
 80038bc:	461a      	mov	r2, r3
 80038be:	4603      	mov	r3, r0
 80038c0:	817b      	strh	r3, [r7, #10]
 80038c2:	460b      	mov	r3, r1
 80038c4:	813b      	strh	r3, [r7, #8]
 80038c6:	4613      	mov	r3, r2
 80038c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038ca:	f7ff f807 	bl	80028dc <HAL_GetTick>
 80038ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b20      	cmp	r3, #32
 80038da:	f040 8208 	bne.w	8003cee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	2319      	movs	r3, #25
 80038e4:	2201      	movs	r2, #1
 80038e6:	497b      	ldr	r1, [pc, #492]	; (8003ad4 <HAL_I2C_Mem_Read+0x224>)
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 fb85 	bl	8003ff8 <I2C_WaitOnFlagUntilTimeout>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80038f4:	2302      	movs	r3, #2
 80038f6:	e1fb      	b.n	8003cf0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d101      	bne.n	8003906 <HAL_I2C_Mem_Read+0x56>
 8003902:	2302      	movs	r3, #2
 8003904:	e1f4      	b.n	8003cf0 <HAL_I2C_Mem_Read+0x440>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b01      	cmp	r3, #1
 800391a:	d007      	beq.n	800392c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 0201 	orr.w	r2, r2, #1
 800392a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800393a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2222      	movs	r2, #34	; 0x22
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2240      	movs	r2, #64	; 0x40
 8003948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003956:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800395c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4a5b      	ldr	r2, [pc, #364]	; (8003ad8 <HAL_I2C_Mem_Read+0x228>)
 800396c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800396e:	88f8      	ldrh	r0, [r7, #6]
 8003970:	893a      	ldrh	r2, [r7, #8]
 8003972:	8979      	ldrh	r1, [r7, #10]
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	9301      	str	r3, [sp, #4]
 8003978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	4603      	mov	r3, r0
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 fa52 	bl	8003e28 <I2C_RequestMemoryRead>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e1b0      	b.n	8003cf0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003992:	2b00      	cmp	r3, #0
 8003994:	d113      	bne.n	80039be <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003996:	2300      	movs	r3, #0
 8003998:	623b      	str	r3, [r7, #32]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	623b      	str	r3, [r7, #32]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	623b      	str	r3, [r7, #32]
 80039aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	e184      	b.n	8003cc8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d11b      	bne.n	80039fe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039d6:	2300      	movs	r3, #0
 80039d8:	61fb      	str	r3, [r7, #28]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	61fb      	str	r3, [r7, #28]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	61fb      	str	r3, [r7, #28]
 80039ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	e164      	b.n	8003cc8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d11b      	bne.n	8003a3e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a26:	2300      	movs	r3, #0
 8003a28:	61bb      	str	r3, [r7, #24]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	61bb      	str	r3, [r7, #24]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	61bb      	str	r3, [r7, #24]
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	e144      	b.n	8003cc8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a3e:	2300      	movs	r3, #0
 8003a40:	617b      	str	r3, [r7, #20]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	617b      	str	r3, [r7, #20]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	617b      	str	r3, [r7, #20]
 8003a52:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a54:	e138      	b.n	8003cc8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	f200 80f1 	bhi.w	8003c42 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d123      	bne.n	8003ab0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f000 fc1b 	bl	80042a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e139      	b.n	8003cf0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	691a      	ldr	r2, [r3, #16]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003aae:	e10b      	b.n	8003cc8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d14e      	bne.n	8003b56 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003abe:	2200      	movs	r2, #0
 8003ac0:	4906      	ldr	r1, [pc, #24]	; (8003adc <HAL_I2C_Mem_Read+0x22c>)
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f000 fa98 	bl	8003ff8 <I2C_WaitOnFlagUntilTimeout>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d008      	beq.n	8003ae0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e10e      	b.n	8003cf0 <HAL_I2C_Mem_Read+0x440>
 8003ad2:	bf00      	nop
 8003ad4:	00100002 	.word	0x00100002
 8003ad8:	ffff0000 	.word	0xffff0000
 8003adc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691a      	ldr	r2, [r3, #16]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	b2d2      	uxtb	r2, r2
 8003afc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	1c5a      	adds	r2, r3, #1
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	691a      	ldr	r2, [r3, #16]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	b2d2      	uxtb	r2, r2
 8003b2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	1c5a      	adds	r2, r3, #1
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b54:	e0b8      	b.n	8003cc8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	4966      	ldr	r1, [pc, #408]	; (8003cf8 <HAL_I2C_Mem_Read+0x448>)
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f000 fa49 	bl	8003ff8 <I2C_WaitOnFlagUntilTimeout>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e0bf      	b.n	8003cf0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	691a      	ldr	r2, [r3, #16]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb8:	2200      	movs	r2, #0
 8003bba:	494f      	ldr	r1, [pc, #316]	; (8003cf8 <HAL_I2C_Mem_Read+0x448>)
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 fa1b 	bl	8003ff8 <I2C_WaitOnFlagUntilTimeout>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e091      	b.n	8003cf0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	691a      	ldr	r2, [r3, #16]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	1c5a      	adds	r2, r3, #1
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c40:	e042      	b.n	8003cc8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 fb2e 	bl	80042a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e04c      	b.n	8003cf0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	691a      	ldr	r2, [r3, #16]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c72:	3b01      	subs	r3, #1
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	f003 0304 	and.w	r3, r3, #4
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d118      	bne.n	8003cc8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	691a      	ldr	r2, [r3, #16]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	b2d2      	uxtb	r2, r2
 8003ca2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	1c5a      	adds	r2, r3, #1
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f47f aec2 	bne.w	8003a56 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cea:	2300      	movs	r3, #0
 8003cec:	e000      	b.n	8003cf0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003cee:	2302      	movs	r3, #2
  }
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3728      	adds	r7, #40	; 0x28
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	00010004 	.word	0x00010004

08003cfc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b088      	sub	sp, #32
 8003d00:	af02      	add	r7, sp, #8
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	4608      	mov	r0, r1
 8003d06:	4611      	mov	r1, r2
 8003d08:	461a      	mov	r2, r3
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	817b      	strh	r3, [r7, #10]
 8003d0e:	460b      	mov	r3, r1
 8003d10:	813b      	strh	r3, [r7, #8]
 8003d12:	4613      	mov	r3, r2
 8003d14:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	6a3b      	ldr	r3, [r7, #32]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f000 f960 	bl	8003ff8 <I2C_WaitOnFlagUntilTimeout>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00d      	beq.n	8003d5a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d4c:	d103      	bne.n	8003d56 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e05f      	b.n	8003e1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d5a:	897b      	ldrh	r3, [r7, #10]
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	461a      	mov	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6c:	6a3a      	ldr	r2, [r7, #32]
 8003d6e:	492d      	ldr	r1, [pc, #180]	; (8003e24 <I2C_RequestMemoryWrite+0x128>)
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 f998 	bl	80040a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e04c      	b.n	8003e1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d80:	2300      	movs	r3, #0
 8003d82:	617b      	str	r3, [r7, #20]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	617b      	str	r3, [r7, #20]
 8003d94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d98:	6a39      	ldr	r1, [r7, #32]
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 fa02 	bl	80041a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00d      	beq.n	8003dc2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	d107      	bne.n	8003dbe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dbc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e02b      	b.n	8003e1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dc2:	88fb      	ldrh	r3, [r7, #6]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d105      	bne.n	8003dd4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dc8:	893b      	ldrh	r3, [r7, #8]
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	611a      	str	r2, [r3, #16]
 8003dd2:	e021      	b.n	8003e18 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003dd4:	893b      	ldrh	r3, [r7, #8]
 8003dd6:	0a1b      	lsrs	r3, r3, #8
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de4:	6a39      	ldr	r1, [r7, #32]
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 f9dc 	bl	80041a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00d      	beq.n	8003e0e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d107      	bne.n	8003e0a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e005      	b.n	8003e1a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e0e:	893b      	ldrh	r3, [r7, #8]
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3718      	adds	r7, #24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	00010002 	.word	0x00010002

08003e28 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b088      	sub	sp, #32
 8003e2c:	af02      	add	r7, sp, #8
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	4608      	mov	r0, r1
 8003e32:	4611      	mov	r1, r2
 8003e34:	461a      	mov	r2, r3
 8003e36:	4603      	mov	r3, r0
 8003e38:	817b      	strh	r3, [r7, #10]
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	813b      	strh	r3, [r7, #8]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e50:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 f8c2 	bl	8003ff8 <I2C_WaitOnFlagUntilTimeout>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00d      	beq.n	8003e96 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e88:	d103      	bne.n	8003e92 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e90:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e0aa      	b.n	8003fec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e96:	897b      	ldrh	r3, [r7, #10]
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ea4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	6a3a      	ldr	r2, [r7, #32]
 8003eaa:	4952      	ldr	r1, [pc, #328]	; (8003ff4 <I2C_RequestMemoryRead+0x1cc>)
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 f8fa 	bl	80040a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e097      	b.n	8003fec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	617b      	str	r3, [r7, #20]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	617b      	str	r3, [r7, #20]
 8003ed0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed4:	6a39      	ldr	r1, [r7, #32]
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 f964 	bl	80041a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00d      	beq.n	8003efe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	d107      	bne.n	8003efa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e076      	b.n	8003fec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003efe:	88fb      	ldrh	r3, [r7, #6]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d105      	bne.n	8003f10 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f04:	893b      	ldrh	r3, [r7, #8]
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	611a      	str	r2, [r3, #16]
 8003f0e:	e021      	b.n	8003f54 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f10:	893b      	ldrh	r3, [r7, #8]
 8003f12:	0a1b      	lsrs	r3, r3, #8
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f20:	6a39      	ldr	r1, [r7, #32]
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 f93e 	bl	80041a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00d      	beq.n	8003f4a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d107      	bne.n	8003f46 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e050      	b.n	8003fec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f4a:	893b      	ldrh	r3, [r7, #8]
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f56:	6a39      	ldr	r1, [r7, #32]
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 f923 	bl	80041a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00d      	beq.n	8003f80 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f68:	2b04      	cmp	r3, #4
 8003f6a:	d107      	bne.n	8003f7c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f7a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e035      	b.n	8003fec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f8e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 f82b 	bl	8003ff8 <I2C_WaitOnFlagUntilTimeout>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00d      	beq.n	8003fc4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fb6:	d103      	bne.n	8003fc0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e013      	b.n	8003fec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003fc4:	897b      	ldrh	r3, [r7, #10]
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	f043 0301 	orr.w	r3, r3, #1
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	6a3a      	ldr	r2, [r7, #32]
 8003fd8:	4906      	ldr	r1, [pc, #24]	; (8003ff4 <I2C_RequestMemoryRead+0x1cc>)
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 f863 	bl	80040a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e000      	b.n	8003fec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3718      	adds	r7, #24
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	00010002 	.word	0x00010002

08003ff8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	603b      	str	r3, [r7, #0]
 8004004:	4613      	mov	r3, r2
 8004006:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004008:	e025      	b.n	8004056 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004010:	d021      	beq.n	8004056 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004012:	f7fe fc63 	bl	80028dc <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d302      	bcc.n	8004028 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d116      	bne.n	8004056 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2220      	movs	r2, #32
 8004032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	f043 0220 	orr.w	r2, r3, #32
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e023      	b.n	800409e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	0c1b      	lsrs	r3, r3, #16
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b01      	cmp	r3, #1
 800405e:	d10d      	bne.n	800407c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	43da      	mvns	r2, r3
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	4013      	ands	r3, r2
 800406c:	b29b      	uxth	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	bf0c      	ite	eq
 8004072:	2301      	moveq	r3, #1
 8004074:	2300      	movne	r3, #0
 8004076:	b2db      	uxtb	r3, r3
 8004078:	461a      	mov	r2, r3
 800407a:	e00c      	b.n	8004096 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	43da      	mvns	r2, r3
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	4013      	ands	r3, r2
 8004088:	b29b      	uxth	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	bf0c      	ite	eq
 800408e:	2301      	moveq	r3, #1
 8004090:	2300      	movne	r3, #0
 8004092:	b2db      	uxtb	r3, r3
 8004094:	461a      	mov	r2, r3
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	429a      	cmp	r2, r3
 800409a:	d0b6      	beq.n	800400a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b084      	sub	sp, #16
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	60f8      	str	r0, [r7, #12]
 80040ae:	60b9      	str	r1, [r7, #8]
 80040b0:	607a      	str	r2, [r7, #4]
 80040b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040b4:	e051      	b.n	800415a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040c4:	d123      	bne.n	800410e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2220      	movs	r2, #32
 80040ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	f043 0204 	orr.w	r2, r3, #4
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e046      	b.n	800419c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004114:	d021      	beq.n	800415a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004116:	f7fe fbe1 	bl	80028dc <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	429a      	cmp	r2, r3
 8004124:	d302      	bcc.n	800412c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d116      	bne.n	800415a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2220      	movs	r2, #32
 8004136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	f043 0220 	orr.w	r2, r3, #32
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e020      	b.n	800419c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	0c1b      	lsrs	r3, r3, #16
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b01      	cmp	r3, #1
 8004162:	d10c      	bne.n	800417e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	43da      	mvns	r2, r3
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	4013      	ands	r3, r2
 8004170:	b29b      	uxth	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	bf14      	ite	ne
 8004176:	2301      	movne	r3, #1
 8004178:	2300      	moveq	r3, #0
 800417a:	b2db      	uxtb	r3, r3
 800417c:	e00b      	b.n	8004196 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	43da      	mvns	r2, r3
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	4013      	ands	r3, r2
 800418a:	b29b      	uxth	r3, r3
 800418c:	2b00      	cmp	r3, #0
 800418e:	bf14      	ite	ne
 8004190:	2301      	movne	r3, #1
 8004192:	2300      	moveq	r3, #0
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d18d      	bne.n	80040b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041b0:	e02d      	b.n	800420e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f000 f8ce 	bl	8004354 <I2C_IsAcknowledgeFailed>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e02d      	b.n	800421e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c8:	d021      	beq.n	800420e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ca:	f7fe fb87 	bl	80028dc <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d302      	bcc.n	80041e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d116      	bne.n	800420e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	f043 0220 	orr.w	r2, r3, #32
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e007      	b.n	800421e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004218:	2b80      	cmp	r3, #128	; 0x80
 800421a:	d1ca      	bne.n	80041b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b084      	sub	sp, #16
 800422a:	af00      	add	r7, sp, #0
 800422c:	60f8      	str	r0, [r7, #12]
 800422e:	60b9      	str	r1, [r7, #8]
 8004230:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004232:	e02d      	b.n	8004290 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 f88d 	bl	8004354 <I2C_IsAcknowledgeFailed>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e02d      	b.n	80042a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424a:	d021      	beq.n	8004290 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800424c:	f7fe fb46 	bl	80028dc <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	429a      	cmp	r2, r3
 800425a:	d302      	bcc.n	8004262 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d116      	bne.n	8004290 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2220      	movs	r2, #32
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	f043 0220 	orr.w	r2, r3, #32
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e007      	b.n	80042a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	f003 0304 	and.w	r3, r3, #4
 800429a:	2b04      	cmp	r3, #4
 800429c:	d1ca      	bne.n	8004234 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042b4:	e042      	b.n	800433c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	f003 0310 	and.w	r3, r3, #16
 80042c0:	2b10      	cmp	r3, #16
 80042c2:	d119      	bne.n	80042f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f06f 0210 	mvn.w	r2, #16
 80042cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e029      	b.n	800434c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042f8:	f7fe faf0 	bl	80028dc <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	429a      	cmp	r2, r3
 8004306:	d302      	bcc.n	800430e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d116      	bne.n	800433c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2220      	movs	r2, #32
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004328:	f043 0220 	orr.w	r2, r3, #32
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e007      	b.n	800434c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004346:	2b40      	cmp	r3, #64	; 0x40
 8004348:	d1b5      	bne.n	80042b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800436a:	d11b      	bne.n	80043a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004374:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2220      	movs	r2, #32
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	f043 0204 	orr.w	r2, r3, #4
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e000      	b.n	80043a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b083      	sub	sp, #12
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
 80043ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b20      	cmp	r3, #32
 80043c6:	d129      	bne.n	800441c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2224      	movs	r2, #36	; 0x24
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 0201 	bic.w	r2, r2, #1
 80043de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 0210 	bic.w	r2, r2, #16
 80043ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f042 0201 	orr.w	r2, r2, #1
 800440e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004418:	2300      	movs	r3, #0
 800441a:	e000      	b.n	800441e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800441c:	2302      	movs	r3, #2
  }
}
 800441e:	4618      	mov	r0, r3
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800442a:	b480      	push	{r7}
 800442c:	b085      	sub	sp, #20
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
 8004432:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004434:	2300      	movs	r3, #0
 8004436:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b20      	cmp	r3, #32
 8004442:	d12a      	bne.n	800449a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2224      	movs	r2, #36	; 0x24
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0201 	bic.w	r2, r2, #1
 800445a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004464:	89fb      	ldrh	r3, [r7, #14]
 8004466:	f023 030f 	bic.w	r3, r3, #15
 800446a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	b29a      	uxth	r2, r3
 8004470:	89fb      	ldrh	r3, [r7, #14]
 8004472:	4313      	orrs	r3, r2
 8004474:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	89fa      	ldrh	r2, [r7, #14]
 800447c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 0201 	orr.w	r2, r2, #1
 800448c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2220      	movs	r2, #32
 8004492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004496:	2300      	movs	r3, #0
 8004498:	e000      	b.n	800449c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800449a:	2302      	movs	r3, #2
  }
}
 800449c:	4618      	mov	r0, r3
 800449e:	3714      	adds	r7, #20
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80044a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044aa:	b08f      	sub	sp, #60	; 0x3c
 80044ac:	af0a      	add	r7, sp, #40	; 0x28
 80044ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e10f      	b.n	80046da <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d106      	bne.n	80044da <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f007 fa83 	bl	800b9e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2203      	movs	r2, #3
 80044de:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d102      	bne.n	80044f4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f003 fc26 	bl	8007d4a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	603b      	str	r3, [r7, #0]
 8004504:	687e      	ldr	r6, [r7, #4]
 8004506:	466d      	mov	r5, sp
 8004508:	f106 0410 	add.w	r4, r6, #16
 800450c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800450e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004510:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004512:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004514:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004518:	e885 0003 	stmia.w	r5, {r0, r1}
 800451c:	1d33      	adds	r3, r6, #4
 800451e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004520:	6838      	ldr	r0, [r7, #0]
 8004522:	f003 fafd 	bl	8007b20 <USB_CoreInit>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d005      	beq.n	8004538 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e0d0      	b.n	80046da <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2100      	movs	r1, #0
 800453e:	4618      	mov	r0, r3
 8004540:	f003 fc14 	bl	8007d6c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004544:	2300      	movs	r3, #0
 8004546:	73fb      	strb	r3, [r7, #15]
 8004548:	e04a      	b.n	80045e0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800454a:	7bfa      	ldrb	r2, [r7, #15]
 800454c:	6879      	ldr	r1, [r7, #4]
 800454e:	4613      	mov	r3, r2
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	1a9b      	subs	r3, r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	440b      	add	r3, r1
 8004558:	333d      	adds	r3, #61	; 0x3d
 800455a:	2201      	movs	r2, #1
 800455c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800455e:	7bfa      	ldrb	r2, [r7, #15]
 8004560:	6879      	ldr	r1, [r7, #4]
 8004562:	4613      	mov	r3, r2
 8004564:	00db      	lsls	r3, r3, #3
 8004566:	1a9b      	subs	r3, r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	440b      	add	r3, r1
 800456c:	333c      	adds	r3, #60	; 0x3c
 800456e:	7bfa      	ldrb	r2, [r7, #15]
 8004570:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004572:	7bfa      	ldrb	r2, [r7, #15]
 8004574:	7bfb      	ldrb	r3, [r7, #15]
 8004576:	b298      	uxth	r0, r3
 8004578:	6879      	ldr	r1, [r7, #4]
 800457a:	4613      	mov	r3, r2
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	1a9b      	subs	r3, r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	440b      	add	r3, r1
 8004584:	3342      	adds	r3, #66	; 0x42
 8004586:	4602      	mov	r2, r0
 8004588:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800458a:	7bfa      	ldrb	r2, [r7, #15]
 800458c:	6879      	ldr	r1, [r7, #4]
 800458e:	4613      	mov	r3, r2
 8004590:	00db      	lsls	r3, r3, #3
 8004592:	1a9b      	subs	r3, r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	440b      	add	r3, r1
 8004598:	333f      	adds	r3, #63	; 0x3f
 800459a:	2200      	movs	r2, #0
 800459c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800459e:	7bfa      	ldrb	r2, [r7, #15]
 80045a0:	6879      	ldr	r1, [r7, #4]
 80045a2:	4613      	mov	r3, r2
 80045a4:	00db      	lsls	r3, r3, #3
 80045a6:	1a9b      	subs	r3, r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	440b      	add	r3, r1
 80045ac:	3344      	adds	r3, #68	; 0x44
 80045ae:	2200      	movs	r2, #0
 80045b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80045b2:	7bfa      	ldrb	r2, [r7, #15]
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	4613      	mov	r3, r2
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	1a9b      	subs	r3, r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	440b      	add	r3, r1
 80045c0:	3348      	adds	r3, #72	; 0x48
 80045c2:	2200      	movs	r2, #0
 80045c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80045c6:	7bfa      	ldrb	r2, [r7, #15]
 80045c8:	6879      	ldr	r1, [r7, #4]
 80045ca:	4613      	mov	r3, r2
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	1a9b      	subs	r3, r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	440b      	add	r3, r1
 80045d4:	3350      	adds	r3, #80	; 0x50
 80045d6:	2200      	movs	r2, #0
 80045d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045da:	7bfb      	ldrb	r3, [r7, #15]
 80045dc:	3301      	adds	r3, #1
 80045de:	73fb      	strb	r3, [r7, #15]
 80045e0:	7bfa      	ldrb	r2, [r7, #15]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d3af      	bcc.n	800454a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045ea:	2300      	movs	r3, #0
 80045ec:	73fb      	strb	r3, [r7, #15]
 80045ee:	e044      	b.n	800467a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80045f0:	7bfa      	ldrb	r2, [r7, #15]
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	4613      	mov	r3, r2
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	1a9b      	subs	r3, r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	440b      	add	r3, r1
 80045fe:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004602:	2200      	movs	r2, #0
 8004604:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004606:	7bfa      	ldrb	r2, [r7, #15]
 8004608:	6879      	ldr	r1, [r7, #4]
 800460a:	4613      	mov	r3, r2
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	1a9b      	subs	r3, r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	440b      	add	r3, r1
 8004614:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004618:	7bfa      	ldrb	r2, [r7, #15]
 800461a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800461c:	7bfa      	ldrb	r2, [r7, #15]
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	4613      	mov	r3, r2
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	1a9b      	subs	r3, r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800462e:	2200      	movs	r2, #0
 8004630:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004632:	7bfa      	ldrb	r2, [r7, #15]
 8004634:	6879      	ldr	r1, [r7, #4]
 8004636:	4613      	mov	r3, r2
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	1a9b      	subs	r3, r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	440b      	add	r3, r1
 8004640:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004648:	7bfa      	ldrb	r2, [r7, #15]
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	4613      	mov	r3, r2
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	1a9b      	subs	r3, r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800465a:	2200      	movs	r2, #0
 800465c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800465e:	7bfa      	ldrb	r2, [r7, #15]
 8004660:	6879      	ldr	r1, [r7, #4]
 8004662:	4613      	mov	r3, r2
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	1a9b      	subs	r3, r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	440b      	add	r3, r1
 800466c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004674:	7bfb      	ldrb	r3, [r7, #15]
 8004676:	3301      	adds	r3, #1
 8004678:	73fb      	strb	r3, [r7, #15]
 800467a:	7bfa      	ldrb	r2, [r7, #15]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	429a      	cmp	r2, r3
 8004682:	d3b5      	bcc.n	80045f0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	603b      	str	r3, [r7, #0]
 800468a:	687e      	ldr	r6, [r7, #4]
 800468c:	466d      	mov	r5, sp
 800468e:	f106 0410 	add.w	r4, r6, #16
 8004692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004694:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004698:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800469a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800469e:	e885 0003 	stmia.w	r5, {r0, r1}
 80046a2:	1d33      	adds	r3, r6, #4
 80046a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046a6:	6838      	ldr	r0, [r7, #0]
 80046a8:	f003 fbac 	bl	8007e04 <USB_DevInit>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d005      	beq.n	80046be <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2202      	movs	r2, #2
 80046b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e00d      	b.n	80046da <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f004 fc28 	bl	8008f28 <USB_DevDisconnect>

  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046e2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b084      	sub	sp, #16
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d101      	bne.n	80046fe <HAL_PCD_Start+0x1c>
 80046fa:	2302      	movs	r3, #2
 80046fc:	e020      	b.n	8004740 <HAL_PCD_Start+0x5e>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470a:	2b01      	cmp	r3, #1
 800470c:	d109      	bne.n	8004722 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004712:	2b01      	cmp	r3, #1
 8004714:	d005      	beq.n	8004722 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f003 fafe 	bl	8007d28 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4618      	mov	r0, r3
 8004732:	f004 fbd8 	bl	8008ee6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004748:	b590      	push	{r4, r7, lr}
 800474a:	b08d      	sub	sp, #52	; 0x34
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4618      	mov	r0, r3
 8004760:	f004 fc96 	bl	8009090 <USB_GetMode>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	f040 839d 	bne.w	8004ea6 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4618      	mov	r0, r3
 8004772:	f004 fbfa 	bl	8008f6a <USB_ReadInterrupts>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 8393 	beq.w	8004ea4 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4618      	mov	r0, r3
 8004784:	f004 fbf1 	bl	8008f6a <USB_ReadInterrupts>
 8004788:	4603      	mov	r3, r0
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b02      	cmp	r3, #2
 8004790:	d107      	bne.n	80047a2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695a      	ldr	r2, [r3, #20]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f002 0202 	and.w	r2, r2, #2
 80047a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f004 fbdf 	bl	8008f6a <USB_ReadInterrupts>
 80047ac:	4603      	mov	r3, r0
 80047ae:	f003 0310 	and.w	r3, r3, #16
 80047b2:	2b10      	cmp	r3, #16
 80047b4:	d161      	bne.n	800487a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	699a      	ldr	r2, [r3, #24]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 0210 	bic.w	r2, r2, #16
 80047c4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80047c6:	6a3b      	ldr	r3, [r7, #32]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	f003 020f 	and.w	r2, r3, #15
 80047d2:	4613      	mov	r3, r2
 80047d4:	00db      	lsls	r3, r3, #3
 80047d6:	1a9b      	subs	r3, r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	4413      	add	r3, r2
 80047e2:	3304      	adds	r3, #4
 80047e4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	0c5b      	lsrs	r3, r3, #17
 80047ea:	f003 030f 	and.w	r3, r3, #15
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d124      	bne.n	800483c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80047f8:	4013      	ands	r3, r2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d035      	beq.n	800486a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	091b      	lsrs	r3, r3, #4
 8004806:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004808:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800480c:	b29b      	uxth	r3, r3
 800480e:	461a      	mov	r2, r3
 8004810:	6a38      	ldr	r0, [r7, #32]
 8004812:	f004 fa16 	bl	8008c42 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	091b      	lsrs	r3, r3, #4
 800481e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004822:	441a      	add	r2, r3
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	699a      	ldr	r2, [r3, #24]
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	091b      	lsrs	r3, r3, #4
 8004830:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004834:	441a      	add	r2, r3
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	619a      	str	r2, [r3, #24]
 800483a:	e016      	b.n	800486a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	0c5b      	lsrs	r3, r3, #17
 8004840:	f003 030f 	and.w	r3, r3, #15
 8004844:	2b06      	cmp	r3, #6
 8004846:	d110      	bne.n	800486a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800484e:	2208      	movs	r2, #8
 8004850:	4619      	mov	r1, r3
 8004852:	6a38      	ldr	r0, [r7, #32]
 8004854:	f004 f9f5 	bl	8008c42 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	699a      	ldr	r2, [r3, #24]
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	091b      	lsrs	r3, r3, #4
 8004860:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004864:	441a      	add	r2, r3
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	699a      	ldr	r2, [r3, #24]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f042 0210 	orr.w	r2, r2, #16
 8004878:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4618      	mov	r0, r3
 8004880:	f004 fb73 	bl	8008f6a <USB_ReadInterrupts>
 8004884:	4603      	mov	r3, r0
 8004886:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800488a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800488e:	d16e      	bne.n	800496e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004890:	2300      	movs	r3, #0
 8004892:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4618      	mov	r0, r3
 800489a:	f004 fb79 	bl	8008f90 <USB_ReadDevAllOutEpInterrupt>
 800489e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80048a0:	e062      	b.n	8004968 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80048a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d057      	beq.n	800495c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b2:	b2d2      	uxtb	r2, r2
 80048b4:	4611      	mov	r1, r2
 80048b6:	4618      	mov	r0, r3
 80048b8:	f004 fb9e 	bl	8008ff8 <USB_ReadDevOutEPInterrupt>
 80048bc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00c      	beq.n	80048e2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ca:	015a      	lsls	r2, r3, #5
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	4413      	add	r3, r2
 80048d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d4:	461a      	mov	r2, r3
 80048d6:	2301      	movs	r3, #1
 80048d8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80048da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 fdb1 	bl	8005444 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	f003 0308 	and.w	r3, r3, #8
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00c      	beq.n	8004906 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	015a      	lsls	r2, r3, #5
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	4413      	add	r3, r2
 80048f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f8:	461a      	mov	r2, r3
 80048fa:	2308      	movs	r3, #8
 80048fc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80048fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 feab 	bl	800565c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	f003 0310 	and.w	r3, r3, #16
 800490c:	2b00      	cmp	r3, #0
 800490e:	d008      	beq.n	8004922 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	4413      	add	r3, r2
 8004918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800491c:	461a      	mov	r2, r3
 800491e:	2310      	movs	r3, #16
 8004920:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	f003 0320 	and.w	r3, r3, #32
 8004928:	2b00      	cmp	r3, #0
 800492a:	d008      	beq.n	800493e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	4413      	add	r3, r2
 8004934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004938:	461a      	mov	r2, r3
 800493a:	2320      	movs	r3, #32
 800493c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d009      	beq.n	800495c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	4413      	add	r3, r2
 8004950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004954:	461a      	mov	r2, r3
 8004956:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800495a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	3301      	adds	r3, #1
 8004960:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004964:	085b      	lsrs	r3, r3, #1
 8004966:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496a:	2b00      	cmp	r3, #0
 800496c:	d199      	bne.n	80048a2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4618      	mov	r0, r3
 8004974:	f004 faf9 	bl	8008f6a <USB_ReadInterrupts>
 8004978:	4603      	mov	r3, r0
 800497a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800497e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004982:	f040 80c0 	bne.w	8004b06 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4618      	mov	r0, r3
 800498c:	f004 fb1a 	bl	8008fc4 <USB_ReadDevAllInEpInterrupt>
 8004990:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004992:	2300      	movs	r3, #0
 8004994:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004996:	e0b2      	b.n	8004afe <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f000 80a7 	beq.w	8004af2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	4611      	mov	r1, r2
 80049ae:	4618      	mov	r0, r3
 80049b0:	f004 fb40 	bl	8009034 <USB_ReadDevInEPInterrupt>
 80049b4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d057      	beq.n	8004a70 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	f003 030f 	and.w	r3, r3, #15
 80049c6:	2201      	movs	r2, #1
 80049c8:	fa02 f303 	lsl.w	r3, r2, r3
 80049cc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	43db      	mvns	r3, r3
 80049da:	69f9      	ldr	r1, [r7, #28]
 80049dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049e0:	4013      	ands	r3, r2
 80049e2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f0:	461a      	mov	r2, r3
 80049f2:	2301      	movs	r3, #1
 80049f4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d132      	bne.n	8004a64 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80049fe:	6879      	ldr	r1, [r7, #4]
 8004a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a02:	4613      	mov	r3, r2
 8004a04:	00db      	lsls	r3, r3, #3
 8004a06:	1a9b      	subs	r3, r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	440b      	add	r3, r1
 8004a0c:	3348      	adds	r3, #72	; 0x48
 8004a0e:	6819      	ldr	r1, [r3, #0]
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a14:	4613      	mov	r3, r2
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	1a9b      	subs	r3, r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4403      	add	r3, r0
 8004a1e:	3344      	adds	r3, #68	; 0x44
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4419      	add	r1, r3
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a28:	4613      	mov	r3, r2
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	1a9b      	subs	r3, r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4403      	add	r3, r0
 8004a32:	3348      	adds	r3, #72	; 0x48
 8004a34:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d113      	bne.n	8004a64 <HAL_PCD_IRQHandler+0x31c>
 8004a3c:	6879      	ldr	r1, [r7, #4]
 8004a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a40:	4613      	mov	r3, r2
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	1a9b      	subs	r3, r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	440b      	add	r3, r1
 8004a4a:	3350      	adds	r3, #80	; 0x50
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d108      	bne.n	8004a64 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6818      	ldr	r0, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	2101      	movs	r1, #1
 8004a60:	f004 fb48 	bl	80090f4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	4619      	mov	r1, r3
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f007 f847 	bl	800bafe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	f003 0308 	and.w	r3, r3, #8
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d008      	beq.n	8004a8c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	015a      	lsls	r2, r3, #5
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a86:	461a      	mov	r2, r3
 8004a88:	2308      	movs	r3, #8
 8004a8a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	f003 0310 	and.w	r3, r3, #16
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d008      	beq.n	8004aa8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	015a      	lsls	r2, r3, #5
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	2310      	movs	r3, #16
 8004aa6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d008      	beq.n	8004ac4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	015a      	lsls	r2, r3, #5
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004abe:	461a      	mov	r2, r3
 8004ac0:	2340      	movs	r3, #64	; 0x40
 8004ac2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d008      	beq.n	8004ae0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	015a      	lsls	r2, r3, #5
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ada:	461a      	mov	r2, r3
 8004adc:	2302      	movs	r3, #2
 8004ade:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004aea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 fc1b 	bl	8005328 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	3301      	adds	r3, #1
 8004af6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afa:	085b      	lsrs	r3, r3, #1
 8004afc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f47f af49 	bne.w	8004998 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f004 fa2d 	bl	8008f6a <USB_ReadInterrupts>
 8004b10:	4603      	mov	r3, r0
 8004b12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b1a:	d122      	bne.n	8004b62 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	69fa      	ldr	r2, [r7, #28]
 8004b26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b2a:	f023 0301 	bic.w	r3, r3, #1
 8004b2e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d108      	bne.n	8004b4c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004b42:	2100      	movs	r1, #0
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 fe27 	bl	8005798 <HAL_PCDEx_LPM_Callback>
 8004b4a:	e002      	b.n	8004b52 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f007 f84d 	bl	800bbec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	695a      	ldr	r2, [r3, #20]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004b60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f004 f9ff 	bl	8008f6a <USB_ReadInterrupts>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b76:	d112      	bne.n	8004b9e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d102      	bne.n	8004b8e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f007 f809 	bl	800bba0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695a      	ldr	r2, [r3, #20]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004b9c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f004 f9e1 	bl	8008f6a <USB_ReadInterrupts>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bb2:	f040 80c7 	bne.w	8004d44 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	69fa      	ldr	r2, [r7, #28]
 8004bc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bc4:	f023 0301 	bic.w	r3, r3, #1
 8004bc8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2110      	movs	r1, #16
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f003 fa7b 	bl	80080cc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bda:	e056      	b.n	8004c8a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be8:	461a      	mov	r2, r3
 8004bea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bee:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf2:	015a      	lsls	r2, r3, #5
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c00:	0151      	lsls	r1, r2, #5
 8004c02:	69fa      	ldr	r2, [r7, #28]
 8004c04:	440a      	add	r2, r1
 8004c06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c0e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c20:	0151      	lsls	r1, r2, #5
 8004c22:	69fa      	ldr	r2, [r7, #28]
 8004c24:	440a      	add	r2, r1
 8004c26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c2e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c42:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c54:	0151      	lsls	r1, r2, #5
 8004c56:	69fa      	ldr	r2, [r7, #28]
 8004c58:	440a      	add	r2, r1
 8004c5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c62:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c74:	0151      	lsls	r1, r2, #5
 8004c76:	69fa      	ldr	r2, [r7, #28]
 8004c78:	440a      	add	r2, r1
 8004c7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c82:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c86:	3301      	adds	r3, #1
 8004c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d3a3      	bcc.n	8004bdc <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c9a:	69db      	ldr	r3, [r3, #28]
 8004c9c:	69fa      	ldr	r2, [r7, #28]
 8004c9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ca2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004ca6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d016      	beq.n	8004cde <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cba:	69fa      	ldr	r2, [r7, #28]
 8004cbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cc0:	f043 030b 	orr.w	r3, r3, #11
 8004cc4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd0:	69fa      	ldr	r2, [r7, #28]
 8004cd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cd6:	f043 030b 	orr.w	r3, r3, #11
 8004cda:	6453      	str	r3, [r2, #68]	; 0x44
 8004cdc:	e015      	b.n	8004d0a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	69fa      	ldr	r2, [r7, #28]
 8004ce8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004cf0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004cf4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	69fa      	ldr	r2, [r7, #28]
 8004d00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d04:	f043 030b 	orr.w	r3, r3, #11
 8004d08:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	69fa      	ldr	r2, [r7, #28]
 8004d14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d18:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004d1c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6818      	ldr	r0, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004d2e:	461a      	mov	r2, r3
 8004d30:	f004 f9e0 	bl	80090f4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	695a      	ldr	r2, [r3, #20]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004d42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f004 f90e 	bl	8008f6a <USB_ReadInterrupts>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d58:	d124      	bne.n	8004da4 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f004 f9a4 	bl	80090ac <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f003 fa0c 	bl	8008186 <USB_GetDevSpeed>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	461a      	mov	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681c      	ldr	r4, [r3, #0]
 8004d7a:	f001 f957 	bl	800602c <HAL_RCC_GetHCLKFreq>
 8004d7e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	461a      	mov	r2, r3
 8004d88:	4620      	mov	r0, r4
 8004d8a:	f002 ff2b 	bl	8007be4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f006 fedd 	bl	800bb4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	695a      	ldr	r2, [r3, #20]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004da2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4618      	mov	r0, r3
 8004daa:	f004 f8de 	bl	8008f6a <USB_ReadInterrupts>
 8004dae:	4603      	mov	r3, r0
 8004db0:	f003 0308 	and.w	r3, r3, #8
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	d10a      	bne.n	8004dce <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f006 feba 	bl	800bb32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	695a      	ldr	r2, [r3, #20]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f002 0208 	and.w	r2, r2, #8
 8004dcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f004 f8c9 	bl	8008f6a <USB_ReadInterrupts>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004de2:	d10f      	bne.n	8004e04 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004de4:	2300      	movs	r3, #0
 8004de6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	4619      	mov	r1, r3
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f006 ff1c 	bl	800bc2c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	695a      	ldr	r2, [r3, #20]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004e02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f004 f8ae 	bl	8008f6a <USB_ReadInterrupts>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e18:	d10f      	bne.n	8004e3a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	4619      	mov	r1, r3
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f006 feef 	bl	800bc08 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	695a      	ldr	r2, [r3, #20]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004e38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f004 f893 	bl	8008f6a <USB_ReadInterrupts>
 8004e44:	4603      	mov	r3, r0
 8004e46:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e4e:	d10a      	bne.n	8004e66 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f006 fefd 	bl	800bc50 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695a      	ldr	r2, [r3, #20]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004e64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f004 f87d 	bl	8008f6a <USB_ReadInterrupts>
 8004e70:	4603      	mov	r3, r0
 8004e72:	f003 0304 	and.w	r3, r3, #4
 8004e76:	2b04      	cmp	r3, #4
 8004e78:	d115      	bne.n	8004ea6 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	f003 0304 	and.w	r3, r3, #4
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f006 feed 	bl	800bc6c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6859      	ldr	r1, [r3, #4]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	605a      	str	r2, [r3, #4]
 8004ea2:	e000      	b.n	8004ea6 <HAL_PCD_IRQHandler+0x75e>
      return;
 8004ea4:	bf00      	nop
    }
  }
}
 8004ea6:	3734      	adds	r7, #52	; 0x34
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd90      	pop	{r4, r7, pc}

08004eac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d101      	bne.n	8004ec6 <HAL_PCD_SetAddress+0x1a>
 8004ec2:	2302      	movs	r3, #2
 8004ec4:	e013      	b.n	8004eee <HAL_PCD_SetAddress+0x42>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	78fa      	ldrb	r2, [r7, #3]
 8004ed2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	78fa      	ldrb	r2, [r7, #3]
 8004edc:	4611      	mov	r1, r2
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f003 ffdb 	bl	8008e9a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b084      	sub	sp, #16
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
 8004efe:	4608      	mov	r0, r1
 8004f00:	4611      	mov	r1, r2
 8004f02:	461a      	mov	r2, r3
 8004f04:	4603      	mov	r3, r0
 8004f06:	70fb      	strb	r3, [r7, #3]
 8004f08:	460b      	mov	r3, r1
 8004f0a:	803b      	strh	r3, [r7, #0]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004f10:	2300      	movs	r3, #0
 8004f12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	da0f      	bge.n	8004f3c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f1c:	78fb      	ldrb	r3, [r7, #3]
 8004f1e:	f003 020f 	and.w	r2, r3, #15
 8004f22:	4613      	mov	r3, r2
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	1a9b      	subs	r3, r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	3338      	adds	r3, #56	; 0x38
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	4413      	add	r3, r2
 8004f30:	3304      	adds	r3, #4
 8004f32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2201      	movs	r2, #1
 8004f38:	705a      	strb	r2, [r3, #1]
 8004f3a:	e00f      	b.n	8004f5c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f3c:	78fb      	ldrb	r3, [r7, #3]
 8004f3e:	f003 020f 	and.w	r2, r3, #15
 8004f42:	4613      	mov	r3, r2
 8004f44:	00db      	lsls	r3, r3, #3
 8004f46:	1a9b      	subs	r3, r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	4413      	add	r3, r2
 8004f52:	3304      	adds	r3, #4
 8004f54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004f5c:	78fb      	ldrb	r3, [r7, #3]
 8004f5e:	f003 030f 	and.w	r3, r3, #15
 8004f62:	b2da      	uxtb	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004f68:	883a      	ldrh	r2, [r7, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	78ba      	ldrb	r2, [r7, #2]
 8004f72:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	785b      	ldrb	r3, [r3, #1]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d004      	beq.n	8004f86 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004f86:	78bb      	ldrb	r3, [r7, #2]
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d102      	bne.n	8004f92 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d101      	bne.n	8004fa0 <HAL_PCD_EP_Open+0xaa>
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	e00e      	b.n	8004fbe <HAL_PCD_EP_Open+0xc8>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68f9      	ldr	r1, [r7, #12]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f003 f90e 	bl	80081d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004fbc:	7afb      	ldrb	r3, [r7, #11]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b084      	sub	sp, #16
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
 8004fce:	460b      	mov	r3, r1
 8004fd0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004fd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	da0f      	bge.n	8004ffa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fda:	78fb      	ldrb	r3, [r7, #3]
 8004fdc:	f003 020f 	and.w	r2, r3, #15
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	1a9b      	subs	r3, r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	3338      	adds	r3, #56	; 0x38
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	4413      	add	r3, r2
 8004fee:	3304      	adds	r3, #4
 8004ff0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	705a      	strb	r2, [r3, #1]
 8004ff8:	e00f      	b.n	800501a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ffa:	78fb      	ldrb	r3, [r7, #3]
 8004ffc:	f003 020f 	and.w	r2, r3, #15
 8005000:	4613      	mov	r3, r2
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	1a9b      	subs	r3, r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	4413      	add	r3, r2
 8005010:	3304      	adds	r3, #4
 8005012:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800501a:	78fb      	ldrb	r3, [r7, #3]
 800501c:	f003 030f 	and.w	r3, r3, #15
 8005020:	b2da      	uxtb	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800502c:	2b01      	cmp	r3, #1
 800502e:	d101      	bne.n	8005034 <HAL_PCD_EP_Close+0x6e>
 8005030:	2302      	movs	r3, #2
 8005032:	e00e      	b.n	8005052 <HAL_PCD_EP_Close+0x8c>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68f9      	ldr	r1, [r7, #12]
 8005042:	4618      	mov	r0, r3
 8005044:	f003 f94c 	bl	80082e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b086      	sub	sp, #24
 800505e:	af00      	add	r7, sp, #0
 8005060:	60f8      	str	r0, [r7, #12]
 8005062:	607a      	str	r2, [r7, #4]
 8005064:	603b      	str	r3, [r7, #0]
 8005066:	460b      	mov	r3, r1
 8005068:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800506a:	7afb      	ldrb	r3, [r7, #11]
 800506c:	f003 020f 	and.w	r2, r3, #15
 8005070:	4613      	mov	r3, r2
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	1a9b      	subs	r3, r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	4413      	add	r3, r2
 8005080:	3304      	adds	r3, #4
 8005082:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	683a      	ldr	r2, [r7, #0]
 800508e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	2200      	movs	r2, #0
 8005094:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2200      	movs	r2, #0
 800509a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800509c:	7afb      	ldrb	r3, [r7, #11]
 800509e:	f003 030f 	and.w	r3, r3, #15
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d102      	bne.n	80050b6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80050b6:	7afb      	ldrb	r3, [r7, #11]
 80050b8:	f003 030f 	and.w	r3, r3, #15
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d109      	bne.n	80050d4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6818      	ldr	r0, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	461a      	mov	r2, r3
 80050cc:	6979      	ldr	r1, [r7, #20]
 80050ce:	f003 fc27 	bl	8008920 <USB_EP0StartXfer>
 80050d2:	e008      	b.n	80050e6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6818      	ldr	r0, [r3, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	461a      	mov	r2, r3
 80050e0:	6979      	ldr	r1, [r7, #20]
 80050e2:	f003 f9d9 	bl	8008498 <USB_EPStartXfer>
  }

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3718      	adds	r7, #24
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	460b      	mov	r3, r1
 80050fa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80050fc:	78fb      	ldrb	r3, [r7, #3]
 80050fe:	f003 020f 	and.w	r2, r3, #15
 8005102:	6879      	ldr	r1, [r7, #4]
 8005104:	4613      	mov	r3, r2
 8005106:	00db      	lsls	r3, r3, #3
 8005108:	1a9b      	subs	r3, r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	440b      	add	r3, r1
 800510e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005112:	681b      	ldr	r3, [r3, #0]
}
 8005114:	4618      	mov	r0, r3
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	607a      	str	r2, [r7, #4]
 800512a:	603b      	str	r3, [r7, #0]
 800512c:	460b      	mov	r3, r1
 800512e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005130:	7afb      	ldrb	r3, [r7, #11]
 8005132:	f003 020f 	and.w	r2, r3, #15
 8005136:	4613      	mov	r3, r2
 8005138:	00db      	lsls	r3, r3, #3
 800513a:	1a9b      	subs	r3, r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	3338      	adds	r3, #56	; 0x38
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	4413      	add	r3, r2
 8005144:	3304      	adds	r3, #4
 8005146:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	2200      	movs	r2, #0
 8005158:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	2201      	movs	r2, #1
 800515e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005160:	7afb      	ldrb	r3, [r7, #11]
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	b2da      	uxtb	r2, r3
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d102      	bne.n	800517a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800517a:	7afb      	ldrb	r3, [r7, #11]
 800517c:	f003 030f 	and.w	r3, r3, #15
 8005180:	2b00      	cmp	r3, #0
 8005182:	d109      	bne.n	8005198 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6818      	ldr	r0, [r3, #0]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	b2db      	uxtb	r3, r3
 800518e:	461a      	mov	r2, r3
 8005190:	6979      	ldr	r1, [r7, #20]
 8005192:	f003 fbc5 	bl	8008920 <USB_EP0StartXfer>
 8005196:	e008      	b.n	80051aa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6818      	ldr	r0, [r3, #0]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	461a      	mov	r2, r3
 80051a4:	6979      	ldr	r1, [r7, #20]
 80051a6:	f003 f977 	bl	8008498 <USB_EPStartXfer>
  }

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3718      	adds	r7, #24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	460b      	mov	r3, r1
 80051be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80051c0:	78fb      	ldrb	r3, [r7, #3]
 80051c2:	f003 020f 	and.w	r2, r3, #15
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d901      	bls.n	80051d2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e050      	b.n	8005274 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80051d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	da0f      	bge.n	80051fa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051da:	78fb      	ldrb	r3, [r7, #3]
 80051dc:	f003 020f 	and.w	r2, r3, #15
 80051e0:	4613      	mov	r3, r2
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	1a9b      	subs	r3, r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	3338      	adds	r3, #56	; 0x38
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	4413      	add	r3, r2
 80051ee:	3304      	adds	r3, #4
 80051f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2201      	movs	r2, #1
 80051f6:	705a      	strb	r2, [r3, #1]
 80051f8:	e00d      	b.n	8005216 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80051fa:	78fa      	ldrb	r2, [r7, #3]
 80051fc:	4613      	mov	r3, r2
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	1a9b      	subs	r3, r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	4413      	add	r3, r2
 800520c:	3304      	adds	r3, #4
 800520e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2201      	movs	r2, #1
 800521a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800521c:	78fb      	ldrb	r3, [r7, #3]
 800521e:	f003 030f 	and.w	r3, r3, #15
 8005222:	b2da      	uxtb	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800522e:	2b01      	cmp	r3, #1
 8005230:	d101      	bne.n	8005236 <HAL_PCD_EP_SetStall+0x82>
 8005232:	2302      	movs	r3, #2
 8005234:	e01e      	b.n	8005274 <HAL_PCD_EP_SetStall+0xc0>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68f9      	ldr	r1, [r7, #12]
 8005244:	4618      	mov	r0, r3
 8005246:	f003 fd54 	bl	8008cf2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800524a:	78fb      	ldrb	r3, [r7, #3]
 800524c:	f003 030f 	and.w	r3, r3, #15
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10a      	bne.n	800526a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6818      	ldr	r0, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	b2d9      	uxtb	r1, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005264:	461a      	mov	r2, r3
 8005266:	f003 ff45 	bl	80090f4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	460b      	mov	r3, r1
 8005286:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005288:	78fb      	ldrb	r3, [r7, #3]
 800528a:	f003 020f 	and.w	r2, r3, #15
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	429a      	cmp	r2, r3
 8005294:	d901      	bls.n	800529a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e042      	b.n	8005320 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800529a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	da0f      	bge.n	80052c2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052a2:	78fb      	ldrb	r3, [r7, #3]
 80052a4:	f003 020f 	and.w	r2, r3, #15
 80052a8:	4613      	mov	r3, r2
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	1a9b      	subs	r3, r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	3338      	adds	r3, #56	; 0x38
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	4413      	add	r3, r2
 80052b6:	3304      	adds	r3, #4
 80052b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2201      	movs	r2, #1
 80052be:	705a      	strb	r2, [r3, #1]
 80052c0:	e00f      	b.n	80052e2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052c2:	78fb      	ldrb	r3, [r7, #3]
 80052c4:	f003 020f 	and.w	r2, r3, #15
 80052c8:	4613      	mov	r3, r2
 80052ca:	00db      	lsls	r3, r3, #3
 80052cc:	1a9b      	subs	r3, r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	4413      	add	r3, r2
 80052d8:	3304      	adds	r3, #4
 80052da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052e8:	78fb      	ldrb	r3, [r7, #3]
 80052ea:	f003 030f 	and.w	r3, r3, #15
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d101      	bne.n	8005302 <HAL_PCD_EP_ClrStall+0x86>
 80052fe:	2302      	movs	r3, #2
 8005300:	e00e      	b.n	8005320 <HAL_PCD_EP_ClrStall+0xa4>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68f9      	ldr	r1, [r7, #12]
 8005310:	4618      	mov	r0, r3
 8005312:	f003 fd5c 	bl	8008dce <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b08a      	sub	sp, #40	; 0x28
 800532c:	af02      	add	r7, sp, #8
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	4613      	mov	r3, r2
 8005340:	00db      	lsls	r3, r3, #3
 8005342:	1a9b      	subs	r3, r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	3338      	adds	r3, #56	; 0x38
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	4413      	add	r3, r2
 800534c:	3304      	adds	r3, #4
 800534e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	699a      	ldr	r2, [r3, #24]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	429a      	cmp	r2, r3
 800535a:	d901      	bls.n	8005360 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e06c      	b.n	800543a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	695a      	ldr	r2, [r3, #20]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	69fa      	ldr	r2, [r7, #28]
 8005372:	429a      	cmp	r2, r3
 8005374:	d902      	bls.n	800537c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	3303      	adds	r3, #3
 8005380:	089b      	lsrs	r3, r3, #2
 8005382:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005384:	e02b      	b.n	80053de <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	695a      	ldr	r2, [r3, #20]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	69fa      	ldr	r2, [r7, #28]
 8005398:	429a      	cmp	r2, r3
 800539a:	d902      	bls.n	80053a2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	3303      	adds	r3, #3
 80053a6:	089b      	lsrs	r3, r3, #2
 80053a8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	68d9      	ldr	r1, [r3, #12]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	b2da      	uxtb	r2, r3
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	4603      	mov	r3, r0
 80053c0:	6978      	ldr	r0, [r7, #20]
 80053c2:	f003 fc00 	bl	8008bc6 <USB_WritePacket>

    ep->xfer_buff  += len;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	441a      	add	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	699a      	ldr	r2, [r3, #24]
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	441a      	add	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	69ba      	ldr	r2, [r7, #24]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d809      	bhi.n	8005408 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	699a      	ldr	r2, [r3, #24]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d203      	bcs.n	8005408 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1be      	bne.n	8005386 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	695a      	ldr	r2, [r3, #20]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	429a      	cmp	r2, r3
 8005412:	d811      	bhi.n	8005438 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	f003 030f 	and.w	r3, r3, #15
 800541a:	2201      	movs	r2, #1
 800541c:	fa02 f303 	lsl.w	r3, r2, r3
 8005420:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005428:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	43db      	mvns	r3, r3
 800542e:	6939      	ldr	r1, [r7, #16]
 8005430:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005434:	4013      	ands	r3, r2
 8005436:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3720      	adds	r7, #32
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
	...

08005444 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b086      	sub	sp, #24
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	333c      	adds	r3, #60	; 0x3c
 800545c:	3304      	adds	r3, #4
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	015a      	lsls	r2, r3, #5
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	4413      	add	r3, r2
 800546a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	2b01      	cmp	r3, #1
 8005478:	f040 80a0 	bne.w	80055bc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	f003 0308 	and.w	r3, r3, #8
 8005482:	2b00      	cmp	r3, #0
 8005484:	d015      	beq.n	80054b2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	4a72      	ldr	r2, [pc, #456]	; (8005654 <PCD_EP_OutXfrComplete_int+0x210>)
 800548a:	4293      	cmp	r3, r2
 800548c:	f240 80dd 	bls.w	800564a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005496:	2b00      	cmp	r3, #0
 8005498:	f000 80d7 	beq.w	800564a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	015a      	lsls	r2, r3, #5
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a8:	461a      	mov	r2, r3
 80054aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054ae:	6093      	str	r3, [r2, #8]
 80054b0:	e0cb      	b.n	800564a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	f003 0320 	and.w	r3, r3, #32
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d009      	beq.n	80054d0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c8:	461a      	mov	r2, r3
 80054ca:	2320      	movs	r3, #32
 80054cc:	6093      	str	r3, [r2, #8]
 80054ce:	e0bc      	b.n	800564a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f040 80b7 	bne.w	800564a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4a5d      	ldr	r2, [pc, #372]	; (8005654 <PCD_EP_OutXfrComplete_int+0x210>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d90f      	bls.n	8005504 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054fa:	461a      	mov	r2, r3
 80054fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005500:	6093      	str	r3, [r2, #8]
 8005502:	e0a2      	b.n	800564a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005504:	6879      	ldr	r1, [r7, #4]
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	4613      	mov	r3, r2
 800550a:	00db      	lsls	r3, r3, #3
 800550c:	1a9b      	subs	r3, r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	440b      	add	r3, r1
 8005512:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005516:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	0159      	lsls	r1, r3, #5
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	440b      	add	r3, r1
 8005520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800552a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	683a      	ldr	r2, [r7, #0]
 8005530:	4613      	mov	r3, r2
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	1a9b      	subs	r3, r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4403      	add	r3, r0
 800553a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800553e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005540:	6879      	ldr	r1, [r7, #4]
 8005542:	683a      	ldr	r2, [r7, #0]
 8005544:	4613      	mov	r3, r2
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	1a9b      	subs	r3, r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	440b      	add	r3, r1
 800554e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005552:	6819      	ldr	r1, [r3, #0]
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	683a      	ldr	r2, [r7, #0]
 8005558:	4613      	mov	r3, r2
 800555a:	00db      	lsls	r3, r3, #3
 800555c:	1a9b      	subs	r3, r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4403      	add	r3, r0
 8005562:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4419      	add	r1, r3
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	4613      	mov	r3, r2
 8005570:	00db      	lsls	r3, r3, #3
 8005572:	1a9b      	subs	r3, r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4403      	add	r3, r0
 8005578:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800557c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d114      	bne.n	80055ae <PCD_EP_OutXfrComplete_int+0x16a>
 8005584:	6879      	ldr	r1, [r7, #4]
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	4613      	mov	r3, r2
 800558a:	00db      	lsls	r3, r3, #3
 800558c:	1a9b      	subs	r3, r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	440b      	add	r3, r1
 8005592:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d108      	bne.n	80055ae <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6818      	ldr	r0, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80055a6:	461a      	mov	r2, r3
 80055a8:	2101      	movs	r1, #1
 80055aa:	f003 fda3 	bl	80090f4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	4619      	mov	r1, r3
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f006 fa87 	bl	800bac8 <HAL_PCD_DataOutStageCallback>
 80055ba:	e046      	b.n	800564a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4a26      	ldr	r2, [pc, #152]	; (8005658 <PCD_EP_OutXfrComplete_int+0x214>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d124      	bne.n	800560e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00a      	beq.n	80055e4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	015a      	lsls	r2, r3, #5
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	4413      	add	r3, r2
 80055d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055da:	461a      	mov	r2, r3
 80055dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055e0:	6093      	str	r3, [r2, #8]
 80055e2:	e032      	b.n	800564a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	f003 0320 	and.w	r3, r3, #32
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d008      	beq.n	8005600 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	015a      	lsls	r2, r3, #5
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	4413      	add	r3, r2
 80055f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055fa:	461a      	mov	r2, r3
 80055fc:	2320      	movs	r3, #32
 80055fe:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	b2db      	uxtb	r3, r3
 8005604:	4619      	mov	r1, r3
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f006 fa5e 	bl	800bac8 <HAL_PCD_DataOutStageCallback>
 800560c:	e01d      	b.n	800564a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d114      	bne.n	800563e <PCD_EP_OutXfrComplete_int+0x1fa>
 8005614:	6879      	ldr	r1, [r7, #4]
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	4613      	mov	r3, r2
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	1a9b      	subs	r3, r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	440b      	add	r3, r1
 8005622:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d108      	bne.n	800563e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6818      	ldr	r0, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005636:	461a      	mov	r2, r3
 8005638:	2100      	movs	r1, #0
 800563a:	f003 fd5b 	bl	80090f4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	b2db      	uxtb	r3, r3
 8005642:	4619      	mov	r1, r3
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f006 fa3f 	bl	800bac8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3718      	adds	r7, #24
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	4f54300a 	.word	0x4f54300a
 8005658:	4f54310a 	.word	0x4f54310a

0800565c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	333c      	adds	r3, #60	; 0x3c
 8005674:	3304      	adds	r3, #4
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	4413      	add	r3, r2
 8005682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	4a15      	ldr	r2, [pc, #84]	; (80056e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d90e      	bls.n	80056b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005698:	2b00      	cmp	r3, #0
 800569a:	d009      	beq.n	80056b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a8:	461a      	mov	r2, r3
 80056aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f006 f9f7 	bl	800baa4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	4a0a      	ldr	r2, [pc, #40]	; (80056e4 <PCD_EP_OutSetupPacket_int+0x88>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d90c      	bls.n	80056d8 <PCD_EP_OutSetupPacket_int+0x7c>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d108      	bne.n	80056d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6818      	ldr	r0, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80056d0:	461a      	mov	r2, r3
 80056d2:	2101      	movs	r1, #1
 80056d4:	f003 fd0e 	bl	80090f4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3718      	adds	r7, #24
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	4f54300a 	.word	0x4f54300a

080056e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	460b      	mov	r3, r1
 80056f2:	70fb      	strb	r3, [r7, #3]
 80056f4:	4613      	mov	r3, r2
 80056f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005700:	78fb      	ldrb	r3, [r7, #3]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d107      	bne.n	8005716 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005706:	883b      	ldrh	r3, [r7, #0]
 8005708:	0419      	lsls	r1, r3, #16
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	430a      	orrs	r2, r1
 8005712:	629a      	str	r2, [r3, #40]	; 0x28
 8005714:	e028      	b.n	8005768 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571c:	0c1b      	lsrs	r3, r3, #16
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	4413      	add	r3, r2
 8005722:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005724:	2300      	movs	r3, #0
 8005726:	73fb      	strb	r3, [r7, #15]
 8005728:	e00d      	b.n	8005746 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	7bfb      	ldrb	r3, [r7, #15]
 8005730:	3340      	adds	r3, #64	; 0x40
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4413      	add	r3, r2
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	0c1b      	lsrs	r3, r3, #16
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	4413      	add	r3, r2
 800573e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005740:	7bfb      	ldrb	r3, [r7, #15]
 8005742:	3301      	adds	r3, #1
 8005744:	73fb      	strb	r3, [r7, #15]
 8005746:	7bfa      	ldrb	r2, [r7, #15]
 8005748:	78fb      	ldrb	r3, [r7, #3]
 800574a:	3b01      	subs	r3, #1
 800574c:	429a      	cmp	r2, r3
 800574e:	d3ec      	bcc.n	800572a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005750:	883b      	ldrh	r3, [r7, #0]
 8005752:	0418      	lsls	r0, r3, #16
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6819      	ldr	r1, [r3, #0]
 8005758:	78fb      	ldrb	r3, [r7, #3]
 800575a:	3b01      	subs	r3, #1
 800575c:	68ba      	ldr	r2, [r7, #8]
 800575e:	4302      	orrs	r2, r0
 8005760:	3340      	adds	r3, #64	; 0x40
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	440b      	add	r3, r1
 8005766:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005776:	b480      	push	{r7}
 8005778:	b083      	sub	sp, #12
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
 800577e:	460b      	mov	r3, r1
 8005780:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	887a      	ldrh	r2, [r7, #2]
 8005788:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	460b      	mov	r3, r1
 80057a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e264      	b.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d075      	beq.n	80058ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057ce:	4ba3      	ldr	r3, [pc, #652]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f003 030c 	and.w	r3, r3, #12
 80057d6:	2b04      	cmp	r3, #4
 80057d8:	d00c      	beq.n	80057f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057da:	4ba0      	ldr	r3, [pc, #640]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057e2:	2b08      	cmp	r3, #8
 80057e4:	d112      	bne.n	800580c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057e6:	4b9d      	ldr	r3, [pc, #628]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057f2:	d10b      	bne.n	800580c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057f4:	4b99      	ldr	r3, [pc, #612]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d05b      	beq.n	80058b8 <HAL_RCC_OscConfig+0x108>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d157      	bne.n	80058b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e23f      	b.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005814:	d106      	bne.n	8005824 <HAL_RCC_OscConfig+0x74>
 8005816:	4b91      	ldr	r3, [pc, #580]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a90      	ldr	r2, [pc, #576]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 800581c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005820:	6013      	str	r3, [r2, #0]
 8005822:	e01d      	b.n	8005860 <HAL_RCC_OscConfig+0xb0>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800582c:	d10c      	bne.n	8005848 <HAL_RCC_OscConfig+0x98>
 800582e:	4b8b      	ldr	r3, [pc, #556]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a8a      	ldr	r2, [pc, #552]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 8005834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005838:	6013      	str	r3, [r2, #0]
 800583a:	4b88      	ldr	r3, [pc, #544]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a87      	ldr	r2, [pc, #540]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 8005840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005844:	6013      	str	r3, [r2, #0]
 8005846:	e00b      	b.n	8005860 <HAL_RCC_OscConfig+0xb0>
 8005848:	4b84      	ldr	r3, [pc, #528]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a83      	ldr	r2, [pc, #524]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 800584e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005852:	6013      	str	r3, [r2, #0]
 8005854:	4b81      	ldr	r3, [pc, #516]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a80      	ldr	r2, [pc, #512]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 800585a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800585e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d013      	beq.n	8005890 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005868:	f7fd f838 	bl	80028dc <HAL_GetTick>
 800586c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800586e:	e008      	b.n	8005882 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005870:	f7fd f834 	bl	80028dc <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b64      	cmp	r3, #100	; 0x64
 800587c:	d901      	bls.n	8005882 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e204      	b.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005882:	4b76      	ldr	r3, [pc, #472]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d0f0      	beq.n	8005870 <HAL_RCC_OscConfig+0xc0>
 800588e:	e014      	b.n	80058ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005890:	f7fd f824 	bl	80028dc <HAL_GetTick>
 8005894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005896:	e008      	b.n	80058aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005898:	f7fd f820 	bl	80028dc <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b64      	cmp	r3, #100	; 0x64
 80058a4:	d901      	bls.n	80058aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e1f0      	b.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058aa:	4b6c      	ldr	r3, [pc, #432]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1f0      	bne.n	8005898 <HAL_RCC_OscConfig+0xe8>
 80058b6:	e000      	b.n	80058ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d063      	beq.n	800598e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80058c6:	4b65      	ldr	r3, [pc, #404]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f003 030c 	and.w	r3, r3, #12
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00b      	beq.n	80058ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058d2:	4b62      	ldr	r3, [pc, #392]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80058da:	2b08      	cmp	r3, #8
 80058dc:	d11c      	bne.n	8005918 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058de:	4b5f      	ldr	r3, [pc, #380]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d116      	bne.n	8005918 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058ea:	4b5c      	ldr	r3, [pc, #368]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d005      	beq.n	8005902 <HAL_RCC_OscConfig+0x152>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d001      	beq.n	8005902 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e1c4      	b.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005902:	4b56      	ldr	r3, [pc, #344]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	4952      	ldr	r1, [pc, #328]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 8005912:	4313      	orrs	r3, r2
 8005914:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005916:	e03a      	b.n	800598e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d020      	beq.n	8005962 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005920:	4b4f      	ldr	r3, [pc, #316]	; (8005a60 <HAL_RCC_OscConfig+0x2b0>)
 8005922:	2201      	movs	r2, #1
 8005924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005926:	f7fc ffd9 	bl	80028dc <HAL_GetTick>
 800592a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800592c:	e008      	b.n	8005940 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800592e:	f7fc ffd5 	bl	80028dc <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	2b02      	cmp	r3, #2
 800593a:	d901      	bls.n	8005940 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e1a5      	b.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005940:	4b46      	ldr	r3, [pc, #280]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0302 	and.w	r3, r3, #2
 8005948:	2b00      	cmp	r3, #0
 800594a:	d0f0      	beq.n	800592e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800594c:	4b43      	ldr	r3, [pc, #268]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	00db      	lsls	r3, r3, #3
 800595a:	4940      	ldr	r1, [pc, #256]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 800595c:	4313      	orrs	r3, r2
 800595e:	600b      	str	r3, [r1, #0]
 8005960:	e015      	b.n	800598e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005962:	4b3f      	ldr	r3, [pc, #252]	; (8005a60 <HAL_RCC_OscConfig+0x2b0>)
 8005964:	2200      	movs	r2, #0
 8005966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005968:	f7fc ffb8 	bl	80028dc <HAL_GetTick>
 800596c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800596e:	e008      	b.n	8005982 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005970:	f7fc ffb4 	bl	80028dc <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	2b02      	cmp	r3, #2
 800597c:	d901      	bls.n	8005982 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e184      	b.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005982:	4b36      	ldr	r3, [pc, #216]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1f0      	bne.n	8005970 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0308 	and.w	r3, r3, #8
 8005996:	2b00      	cmp	r3, #0
 8005998:	d030      	beq.n	80059fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d016      	beq.n	80059d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059a2:	4b30      	ldr	r3, [pc, #192]	; (8005a64 <HAL_RCC_OscConfig+0x2b4>)
 80059a4:	2201      	movs	r2, #1
 80059a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a8:	f7fc ff98 	bl	80028dc <HAL_GetTick>
 80059ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059ae:	e008      	b.n	80059c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059b0:	f7fc ff94 	bl	80028dc <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d901      	bls.n	80059c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e164      	b.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059c2:	4b26      	ldr	r3, [pc, #152]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 80059c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d0f0      	beq.n	80059b0 <HAL_RCC_OscConfig+0x200>
 80059ce:	e015      	b.n	80059fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059d0:	4b24      	ldr	r3, [pc, #144]	; (8005a64 <HAL_RCC_OscConfig+0x2b4>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059d6:	f7fc ff81 	bl	80028dc <HAL_GetTick>
 80059da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059dc:	e008      	b.n	80059f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059de:	f7fc ff7d 	bl	80028dc <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d901      	bls.n	80059f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e14d      	b.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059f0:	4b1a      	ldr	r3, [pc, #104]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 80059f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059f4:	f003 0302 	and.w	r3, r3, #2
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1f0      	bne.n	80059de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0304 	and.w	r3, r3, #4
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f000 80a0 	beq.w	8005b4a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a0e:	4b13      	ldr	r3, [pc, #76]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 8005a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10f      	bne.n	8005a3a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	60bb      	str	r3, [r7, #8]
 8005a1e:	4b0f      	ldr	r3, [pc, #60]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 8005a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a22:	4a0e      	ldr	r2, [pc, #56]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 8005a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a28:	6413      	str	r3, [r2, #64]	; 0x40
 8005a2a:	4b0c      	ldr	r3, [pc, #48]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a32:	60bb      	str	r3, [r7, #8]
 8005a34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a36:	2301      	movs	r3, #1
 8005a38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a3a:	4b0b      	ldr	r3, [pc, #44]	; (8005a68 <HAL_RCC_OscConfig+0x2b8>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d121      	bne.n	8005a8a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a46:	4b08      	ldr	r3, [pc, #32]	; (8005a68 <HAL_RCC_OscConfig+0x2b8>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a07      	ldr	r2, [pc, #28]	; (8005a68 <HAL_RCC_OscConfig+0x2b8>)
 8005a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a52:	f7fc ff43 	bl	80028dc <HAL_GetTick>
 8005a56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a58:	e011      	b.n	8005a7e <HAL_RCC_OscConfig+0x2ce>
 8005a5a:	bf00      	nop
 8005a5c:	40023800 	.word	0x40023800
 8005a60:	42470000 	.word	0x42470000
 8005a64:	42470e80 	.word	0x42470e80
 8005a68:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a6c:	f7fc ff36 	bl	80028dc <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d901      	bls.n	8005a7e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e106      	b.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a7e:	4b85      	ldr	r3, [pc, #532]	; (8005c94 <HAL_RCC_OscConfig+0x4e4>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d0f0      	beq.n	8005a6c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d106      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x2f0>
 8005a92:	4b81      	ldr	r3, [pc, #516]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a96:	4a80      	ldr	r2, [pc, #512]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005a98:	f043 0301 	orr.w	r3, r3, #1
 8005a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8005a9e:	e01c      	b.n	8005ada <HAL_RCC_OscConfig+0x32a>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	2b05      	cmp	r3, #5
 8005aa6:	d10c      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x312>
 8005aa8:	4b7b      	ldr	r3, [pc, #492]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aac:	4a7a      	ldr	r2, [pc, #488]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005aae:	f043 0304 	orr.w	r3, r3, #4
 8005ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ab4:	4b78      	ldr	r3, [pc, #480]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab8:	4a77      	ldr	r2, [pc, #476]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005aba:	f043 0301 	orr.w	r3, r3, #1
 8005abe:	6713      	str	r3, [r2, #112]	; 0x70
 8005ac0:	e00b      	b.n	8005ada <HAL_RCC_OscConfig+0x32a>
 8005ac2:	4b75      	ldr	r3, [pc, #468]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac6:	4a74      	ldr	r2, [pc, #464]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005ac8:	f023 0301 	bic.w	r3, r3, #1
 8005acc:	6713      	str	r3, [r2, #112]	; 0x70
 8005ace:	4b72      	ldr	r3, [pc, #456]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad2:	4a71      	ldr	r2, [pc, #452]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005ad4:	f023 0304 	bic.w	r3, r3, #4
 8005ad8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d015      	beq.n	8005b0e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ae2:	f7fc fefb 	bl	80028dc <HAL_GetTick>
 8005ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ae8:	e00a      	b.n	8005b00 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005aea:	f7fc fef7 	bl	80028dc <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e0c5      	b.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b00:	4b65      	ldr	r3, [pc, #404]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b04:	f003 0302 	and.w	r3, r3, #2
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d0ee      	beq.n	8005aea <HAL_RCC_OscConfig+0x33a>
 8005b0c:	e014      	b.n	8005b38 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b0e:	f7fc fee5 	bl	80028dc <HAL_GetTick>
 8005b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b14:	e00a      	b.n	8005b2c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b16:	f7fc fee1 	bl	80028dc <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d901      	bls.n	8005b2c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e0af      	b.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b2c:	4b5a      	ldr	r3, [pc, #360]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1ee      	bne.n	8005b16 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b38:	7dfb      	ldrb	r3, [r7, #23]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d105      	bne.n	8005b4a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b3e:	4b56      	ldr	r3, [pc, #344]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	4a55      	ldr	r2, [pc, #340]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005b44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f000 809b 	beq.w	8005c8a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b54:	4b50      	ldr	r3, [pc, #320]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	f003 030c 	and.w	r3, r3, #12
 8005b5c:	2b08      	cmp	r3, #8
 8005b5e:	d05c      	beq.n	8005c1a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d141      	bne.n	8005bec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b68:	4b4c      	ldr	r3, [pc, #304]	; (8005c9c <HAL_RCC_OscConfig+0x4ec>)
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b6e:	f7fc feb5 	bl	80028dc <HAL_GetTick>
 8005b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b74:	e008      	b.n	8005b88 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b76:	f7fc feb1 	bl	80028dc <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d901      	bls.n	8005b88 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e081      	b.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b88:	4b43      	ldr	r3, [pc, #268]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1f0      	bne.n	8005b76 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	69da      	ldr	r2, [r3, #28]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	431a      	orrs	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	019b      	lsls	r3, r3, #6
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005baa:	085b      	lsrs	r3, r3, #1
 8005bac:	3b01      	subs	r3, #1
 8005bae:	041b      	lsls	r3, r3, #16
 8005bb0:	431a      	orrs	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb6:	061b      	lsls	r3, r3, #24
 8005bb8:	4937      	ldr	r1, [pc, #220]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bbe:	4b37      	ldr	r3, [pc, #220]	; (8005c9c <HAL_RCC_OscConfig+0x4ec>)
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bc4:	f7fc fe8a 	bl	80028dc <HAL_GetTick>
 8005bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bca:	e008      	b.n	8005bde <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bcc:	f7fc fe86 	bl	80028dc <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d901      	bls.n	8005bde <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e056      	b.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bde:	4b2e      	ldr	r3, [pc, #184]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d0f0      	beq.n	8005bcc <HAL_RCC_OscConfig+0x41c>
 8005bea:	e04e      	b.n	8005c8a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bec:	4b2b      	ldr	r3, [pc, #172]	; (8005c9c <HAL_RCC_OscConfig+0x4ec>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bf2:	f7fc fe73 	bl	80028dc <HAL_GetTick>
 8005bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bf8:	e008      	b.n	8005c0c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bfa:	f7fc fe6f 	bl	80028dc <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d901      	bls.n	8005c0c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e03f      	b.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c0c:	4b22      	ldr	r3, [pc, #136]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1f0      	bne.n	8005bfa <HAL_RCC_OscConfig+0x44a>
 8005c18:	e037      	b.n	8005c8a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d101      	bne.n	8005c26 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e032      	b.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c26:	4b1c      	ldr	r3, [pc, #112]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d028      	beq.n	8005c86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d121      	bne.n	8005c86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d11a      	bne.n	8005c86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c56:	4013      	ands	r3, r2
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c5c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d111      	bne.n	8005c86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6c:	085b      	lsrs	r3, r3, #1
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d107      	bne.n	8005c86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c80:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d001      	beq.n	8005c8a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e000      	b.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3718      	adds	r7, #24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	40007000 	.word	0x40007000
 8005c98:	40023800 	.word	0x40023800
 8005c9c:	42470060 	.word	0x42470060

08005ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d101      	bne.n	8005cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e0cc      	b.n	8005e4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005cb4:	4b68      	ldr	r3, [pc, #416]	; (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 030f 	and.w	r3, r3, #15
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d90c      	bls.n	8005cdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cc2:	4b65      	ldr	r3, [pc, #404]	; (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005cc4:	683a      	ldr	r2, [r7, #0]
 8005cc6:	b2d2      	uxtb	r2, r2
 8005cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cca:	4b63      	ldr	r3, [pc, #396]	; (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 030f 	and.w	r3, r3, #15
 8005cd2:	683a      	ldr	r2, [r7, #0]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d001      	beq.n	8005cdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e0b8      	b.n	8005e4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0302 	and.w	r3, r3, #2
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d020      	beq.n	8005d2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0304 	and.w	r3, r3, #4
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d005      	beq.n	8005d00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cf4:	4b59      	ldr	r3, [pc, #356]	; (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	4a58      	ldr	r2, [pc, #352]	; (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005cfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005cfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0308 	and.w	r3, r3, #8
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d005      	beq.n	8005d18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d0c:	4b53      	ldr	r3, [pc, #332]	; (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	4a52      	ldr	r2, [pc, #328]	; (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d18:	4b50      	ldr	r3, [pc, #320]	; (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	494d      	ldr	r1, [pc, #308]	; (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d044      	beq.n	8005dc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d107      	bne.n	8005d4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d3e:	4b47      	ldr	r3, [pc, #284]	; (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d119      	bne.n	8005d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e07f      	b.n	8005e4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d003      	beq.n	8005d5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d5a:	2b03      	cmp	r3, #3
 8005d5c:	d107      	bne.n	8005d6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d5e:	4b3f      	ldr	r3, [pc, #252]	; (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d109      	bne.n	8005d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e06f      	b.n	8005e4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d6e:	4b3b      	ldr	r3, [pc, #236]	; (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e067      	b.n	8005e4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d7e:	4b37      	ldr	r3, [pc, #220]	; (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f023 0203 	bic.w	r2, r3, #3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	4934      	ldr	r1, [pc, #208]	; (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d90:	f7fc fda4 	bl	80028dc <HAL_GetTick>
 8005d94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d96:	e00a      	b.n	8005dae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d98:	f7fc fda0 	bl	80028dc <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e04f      	b.n	8005e4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dae:	4b2b      	ldr	r3, [pc, #172]	; (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f003 020c 	and.w	r2, r3, #12
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d1eb      	bne.n	8005d98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005dc0:	4b25      	ldr	r3, [pc, #148]	; (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 030f 	and.w	r3, r3, #15
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d20c      	bcs.n	8005de8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dce:	4b22      	ldr	r3, [pc, #136]	; (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	b2d2      	uxtb	r2, r2
 8005dd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dd6:	4b20      	ldr	r3, [pc, #128]	; (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 030f 	and.w	r3, r3, #15
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d001      	beq.n	8005de8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e032      	b.n	8005e4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0304 	and.w	r3, r3, #4
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d008      	beq.n	8005e06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005df4:	4b19      	ldr	r3, [pc, #100]	; (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	4916      	ldr	r1, [pc, #88]	; (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0308 	and.w	r3, r3, #8
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d009      	beq.n	8005e26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e12:	4b12      	ldr	r3, [pc, #72]	; (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	490e      	ldr	r1, [pc, #56]	; (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e26:	f000 f821 	bl	8005e6c <HAL_RCC_GetSysClockFreq>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	4b0b      	ldr	r3, [pc, #44]	; (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	091b      	lsrs	r3, r3, #4
 8005e32:	f003 030f 	and.w	r3, r3, #15
 8005e36:	490a      	ldr	r1, [pc, #40]	; (8005e60 <HAL_RCC_ClockConfig+0x1c0>)
 8005e38:	5ccb      	ldrb	r3, [r1, r3]
 8005e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e3e:	4a09      	ldr	r2, [pc, #36]	; (8005e64 <HAL_RCC_ClockConfig+0x1c4>)
 8005e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e42:	4b09      	ldr	r3, [pc, #36]	; (8005e68 <HAL_RCC_ClockConfig+0x1c8>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7fc fd04 	bl	8002854 <HAL_InitTick>

  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	40023c00 	.word	0x40023c00
 8005e5c:	40023800 	.word	0x40023800
 8005e60:	08010930 	.word	0x08010930
 8005e64:	20000000 	.word	0x20000000
 8005e68:	20000004 	.word	0x20000004

08005e6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005e70:	b084      	sub	sp, #16
 8005e72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e74:	2300      	movs	r3, #0
 8005e76:	607b      	str	r3, [r7, #4]
 8005e78:	2300      	movs	r3, #0
 8005e7a:	60fb      	str	r3, [r7, #12]
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005e80:	2300      	movs	r3, #0
 8005e82:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e84:	4b67      	ldr	r3, [pc, #412]	; (8006024 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f003 030c 	and.w	r3, r3, #12
 8005e8c:	2b08      	cmp	r3, #8
 8005e8e:	d00d      	beq.n	8005eac <HAL_RCC_GetSysClockFreq+0x40>
 8005e90:	2b08      	cmp	r3, #8
 8005e92:	f200 80bd 	bhi.w	8006010 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d002      	beq.n	8005ea0 <HAL_RCC_GetSysClockFreq+0x34>
 8005e9a:	2b04      	cmp	r3, #4
 8005e9c:	d003      	beq.n	8005ea6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005e9e:	e0b7      	b.n	8006010 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ea0:	4b61      	ldr	r3, [pc, #388]	; (8006028 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005ea2:	60bb      	str	r3, [r7, #8]
       break;
 8005ea4:	e0b7      	b.n	8006016 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ea6:	4b60      	ldr	r3, [pc, #384]	; (8006028 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005ea8:	60bb      	str	r3, [r7, #8]
      break;
 8005eaa:	e0b4      	b.n	8006016 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005eac:	4b5d      	ldr	r3, [pc, #372]	; (8006024 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005eb4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005eb6:	4b5b      	ldr	r3, [pc, #364]	; (8006024 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d04d      	beq.n	8005f5e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ec2:	4b58      	ldr	r3, [pc, #352]	; (8006024 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	099b      	lsrs	r3, r3, #6
 8005ec8:	461a      	mov	r2, r3
 8005eca:	f04f 0300 	mov.w	r3, #0
 8005ece:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005ed2:	f04f 0100 	mov.w	r1, #0
 8005ed6:	ea02 0800 	and.w	r8, r2, r0
 8005eda:	ea03 0901 	and.w	r9, r3, r1
 8005ede:	4640      	mov	r0, r8
 8005ee0:	4649      	mov	r1, r9
 8005ee2:	f04f 0200 	mov.w	r2, #0
 8005ee6:	f04f 0300 	mov.w	r3, #0
 8005eea:	014b      	lsls	r3, r1, #5
 8005eec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005ef0:	0142      	lsls	r2, r0, #5
 8005ef2:	4610      	mov	r0, r2
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	ebb0 0008 	subs.w	r0, r0, r8
 8005efa:	eb61 0109 	sbc.w	r1, r1, r9
 8005efe:	f04f 0200 	mov.w	r2, #0
 8005f02:	f04f 0300 	mov.w	r3, #0
 8005f06:	018b      	lsls	r3, r1, #6
 8005f08:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005f0c:	0182      	lsls	r2, r0, #6
 8005f0e:	1a12      	subs	r2, r2, r0
 8005f10:	eb63 0301 	sbc.w	r3, r3, r1
 8005f14:	f04f 0000 	mov.w	r0, #0
 8005f18:	f04f 0100 	mov.w	r1, #0
 8005f1c:	00d9      	lsls	r1, r3, #3
 8005f1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f22:	00d0      	lsls	r0, r2, #3
 8005f24:	4602      	mov	r2, r0
 8005f26:	460b      	mov	r3, r1
 8005f28:	eb12 0208 	adds.w	r2, r2, r8
 8005f2c:	eb43 0309 	adc.w	r3, r3, r9
 8005f30:	f04f 0000 	mov.w	r0, #0
 8005f34:	f04f 0100 	mov.w	r1, #0
 8005f38:	0299      	lsls	r1, r3, #10
 8005f3a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005f3e:	0290      	lsls	r0, r2, #10
 8005f40:	4602      	mov	r2, r0
 8005f42:	460b      	mov	r3, r1
 8005f44:	4610      	mov	r0, r2
 8005f46:	4619      	mov	r1, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	f04f 0300 	mov.w	r3, #0
 8005f50:	f7fa feaa 	bl	8000ca8 <__aeabi_uldivmod>
 8005f54:	4602      	mov	r2, r0
 8005f56:	460b      	mov	r3, r1
 8005f58:	4613      	mov	r3, r2
 8005f5a:	60fb      	str	r3, [r7, #12]
 8005f5c:	e04a      	b.n	8005ff4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f5e:	4b31      	ldr	r3, [pc, #196]	; (8006024 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	099b      	lsrs	r3, r3, #6
 8005f64:	461a      	mov	r2, r3
 8005f66:	f04f 0300 	mov.w	r3, #0
 8005f6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005f6e:	f04f 0100 	mov.w	r1, #0
 8005f72:	ea02 0400 	and.w	r4, r2, r0
 8005f76:	ea03 0501 	and.w	r5, r3, r1
 8005f7a:	4620      	mov	r0, r4
 8005f7c:	4629      	mov	r1, r5
 8005f7e:	f04f 0200 	mov.w	r2, #0
 8005f82:	f04f 0300 	mov.w	r3, #0
 8005f86:	014b      	lsls	r3, r1, #5
 8005f88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005f8c:	0142      	lsls	r2, r0, #5
 8005f8e:	4610      	mov	r0, r2
 8005f90:	4619      	mov	r1, r3
 8005f92:	1b00      	subs	r0, r0, r4
 8005f94:	eb61 0105 	sbc.w	r1, r1, r5
 8005f98:	f04f 0200 	mov.w	r2, #0
 8005f9c:	f04f 0300 	mov.w	r3, #0
 8005fa0:	018b      	lsls	r3, r1, #6
 8005fa2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005fa6:	0182      	lsls	r2, r0, #6
 8005fa8:	1a12      	subs	r2, r2, r0
 8005faa:	eb63 0301 	sbc.w	r3, r3, r1
 8005fae:	f04f 0000 	mov.w	r0, #0
 8005fb2:	f04f 0100 	mov.w	r1, #0
 8005fb6:	00d9      	lsls	r1, r3, #3
 8005fb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fbc:	00d0      	lsls	r0, r2, #3
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	1912      	adds	r2, r2, r4
 8005fc4:	eb45 0303 	adc.w	r3, r5, r3
 8005fc8:	f04f 0000 	mov.w	r0, #0
 8005fcc:	f04f 0100 	mov.w	r1, #0
 8005fd0:	0299      	lsls	r1, r3, #10
 8005fd2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005fd6:	0290      	lsls	r0, r2, #10
 8005fd8:	4602      	mov	r2, r0
 8005fda:	460b      	mov	r3, r1
 8005fdc:	4610      	mov	r0, r2
 8005fde:	4619      	mov	r1, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	f04f 0300 	mov.w	r3, #0
 8005fe8:	f7fa fe5e 	bl	8000ca8 <__aeabi_uldivmod>
 8005fec:	4602      	mov	r2, r0
 8005fee:	460b      	mov	r3, r1
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ff4:	4b0b      	ldr	r3, [pc, #44]	; (8006024 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	0c1b      	lsrs	r3, r3, #16
 8005ffa:	f003 0303 	and.w	r3, r3, #3
 8005ffe:	3301      	adds	r3, #1
 8006000:	005b      	lsls	r3, r3, #1
 8006002:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	fbb2 f3f3 	udiv	r3, r2, r3
 800600c:	60bb      	str	r3, [r7, #8]
      break;
 800600e:	e002      	b.n	8006016 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006010:	4b05      	ldr	r3, [pc, #20]	; (8006028 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006012:	60bb      	str	r3, [r7, #8]
      break;
 8006014:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006016:	68bb      	ldr	r3, [r7, #8]
}
 8006018:	4618      	mov	r0, r3
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006022:	bf00      	nop
 8006024:	40023800 	.word	0x40023800
 8006028:	00f42400 	.word	0x00f42400

0800602c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800602c:	b480      	push	{r7}
 800602e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006030:	4b03      	ldr	r3, [pc, #12]	; (8006040 <HAL_RCC_GetHCLKFreq+0x14>)
 8006032:	681b      	ldr	r3, [r3, #0]
}
 8006034:	4618      	mov	r0, r3
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	20000000 	.word	0x20000000

08006044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006048:	f7ff fff0 	bl	800602c <HAL_RCC_GetHCLKFreq>
 800604c:	4602      	mov	r2, r0
 800604e:	4b05      	ldr	r3, [pc, #20]	; (8006064 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	0a9b      	lsrs	r3, r3, #10
 8006054:	f003 0307 	and.w	r3, r3, #7
 8006058:	4903      	ldr	r1, [pc, #12]	; (8006068 <HAL_RCC_GetPCLK1Freq+0x24>)
 800605a:	5ccb      	ldrb	r3, [r1, r3]
 800605c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006060:	4618      	mov	r0, r3
 8006062:	bd80      	pop	{r7, pc}
 8006064:	40023800 	.word	0x40023800
 8006068:	08010940 	.word	0x08010940

0800606c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006070:	f7ff ffdc 	bl	800602c <HAL_RCC_GetHCLKFreq>
 8006074:	4602      	mov	r2, r0
 8006076:	4b05      	ldr	r3, [pc, #20]	; (800608c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	0b5b      	lsrs	r3, r3, #13
 800607c:	f003 0307 	and.w	r3, r3, #7
 8006080:	4903      	ldr	r1, [pc, #12]	; (8006090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006082:	5ccb      	ldrb	r3, [r1, r3]
 8006084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006088:	4618      	mov	r0, r3
 800608a:	bd80      	pop	{r7, pc}
 800608c:	40023800 	.word	0x40023800
 8006090:	08010940 	.word	0x08010940

08006094 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e07b      	b.n	800619e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d108      	bne.n	80060c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060b6:	d009      	beq.n	80060cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	61da      	str	r2, [r3, #28]
 80060be:	e005      	b.n	80060cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d106      	bne.n	80060ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f7fc f924 	bl	8002334 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2202      	movs	r2, #2
 80060f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006102:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006114:	431a      	orrs	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800611e:	431a      	orrs	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	f003 0302 	and.w	r3, r3, #2
 8006128:	431a      	orrs	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	f003 0301 	and.w	r3, r3, #1
 8006132:	431a      	orrs	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	699b      	ldr	r3, [r3, #24]
 8006138:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800613c:	431a      	orrs	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006146:	431a      	orrs	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006150:	ea42 0103 	orr.w	r1, r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006158:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	430a      	orrs	r2, r1
 8006162:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	0c1b      	lsrs	r3, r3, #16
 800616a:	f003 0104 	and.w	r1, r3, #4
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006172:	f003 0210 	and.w	r2, r3, #16
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	430a      	orrs	r2, r1
 800617c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	69da      	ldr	r2, [r3, #28]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800618c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3708      	adds	r7, #8
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b08c      	sub	sp, #48	; 0x30
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	60f8      	str	r0, [r7, #12]
 80061ae:	60b9      	str	r1, [r7, #8]
 80061b0:	607a      	str	r2, [r7, #4]
 80061b2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80061b4:	2301      	movs	r3, #1
 80061b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80061b8:	2300      	movs	r3, #0
 80061ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d101      	bne.n	80061cc <HAL_SPI_TransmitReceive+0x26>
 80061c8:	2302      	movs	r3, #2
 80061ca:	e18a      	b.n	80064e2 <HAL_SPI_TransmitReceive+0x33c>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061d4:	f7fc fb82 	bl	80028dc <HAL_GetTick>
 80061d8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80061ea:	887b      	ldrh	r3, [r7, #2]
 80061ec:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80061ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d00f      	beq.n	8006216 <HAL_SPI_TransmitReceive+0x70>
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061fc:	d107      	bne.n	800620e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d103      	bne.n	800620e <HAL_SPI_TransmitReceive+0x68>
 8006206:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800620a:	2b04      	cmp	r3, #4
 800620c:	d003      	beq.n	8006216 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800620e:	2302      	movs	r3, #2
 8006210:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006214:	e15b      	b.n	80064ce <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d005      	beq.n	8006228 <HAL_SPI_TransmitReceive+0x82>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d002      	beq.n	8006228 <HAL_SPI_TransmitReceive+0x82>
 8006222:	887b      	ldrh	r3, [r7, #2]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d103      	bne.n	8006230 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800622e:	e14e      	b.n	80064ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b04      	cmp	r3, #4
 800623a:	d003      	beq.n	8006244 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2205      	movs	r2, #5
 8006240:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	887a      	ldrh	r2, [r7, #2]
 8006254:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	887a      	ldrh	r2, [r7, #2]
 800625a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	887a      	ldrh	r2, [r7, #2]
 8006266:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	887a      	ldrh	r2, [r7, #2]
 800626c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006284:	2b40      	cmp	r3, #64	; 0x40
 8006286:	d007      	beq.n	8006298 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006296:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062a0:	d178      	bne.n	8006394 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d002      	beq.n	80062b0 <HAL_SPI_TransmitReceive+0x10a>
 80062aa:	8b7b      	ldrh	r3, [r7, #26]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d166      	bne.n	800637e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b4:	881a      	ldrh	r2, [r3, #0]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c0:	1c9a      	adds	r2, r3, #2
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	3b01      	subs	r3, #1
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062d4:	e053      	b.n	800637e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f003 0302 	and.w	r3, r3, #2
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d11b      	bne.n	800631c <HAL_SPI_TransmitReceive+0x176>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d016      	beq.n	800631c <HAL_SPI_TransmitReceive+0x176>
 80062ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d113      	bne.n	800631c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f8:	881a      	ldrh	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006304:	1c9a      	adds	r2, r3, #2
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800630e:	b29b      	uxth	r3, r3
 8006310:	3b01      	subs	r3, #1
 8006312:	b29a      	uxth	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006318:	2300      	movs	r3, #0
 800631a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b01      	cmp	r3, #1
 8006328:	d119      	bne.n	800635e <HAL_SPI_TransmitReceive+0x1b8>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800632e:	b29b      	uxth	r3, r3
 8006330:	2b00      	cmp	r3, #0
 8006332:	d014      	beq.n	800635e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68da      	ldr	r2, [r3, #12]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633e:	b292      	uxth	r2, r2
 8006340:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006346:	1c9a      	adds	r2, r3, #2
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006350:	b29b      	uxth	r3, r3
 8006352:	3b01      	subs	r3, #1
 8006354:	b29a      	uxth	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800635a:	2301      	movs	r3, #1
 800635c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800635e:	f7fc fabd 	bl	80028dc <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800636a:	429a      	cmp	r2, r3
 800636c:	d807      	bhi.n	800637e <HAL_SPI_TransmitReceive+0x1d8>
 800636e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006374:	d003      	beq.n	800637e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800637c:	e0a7      	b.n	80064ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006382:	b29b      	uxth	r3, r3
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1a6      	bne.n	80062d6 <HAL_SPI_TransmitReceive+0x130>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800638c:	b29b      	uxth	r3, r3
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1a1      	bne.n	80062d6 <HAL_SPI_TransmitReceive+0x130>
 8006392:	e07c      	b.n	800648e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d002      	beq.n	80063a2 <HAL_SPI_TransmitReceive+0x1fc>
 800639c:	8b7b      	ldrh	r3, [r7, #26]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d16b      	bne.n	800647a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	330c      	adds	r3, #12
 80063ac:	7812      	ldrb	r2, [r2, #0]
 80063ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b4:	1c5a      	adds	r2, r3, #1
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063be:	b29b      	uxth	r3, r3
 80063c0:	3b01      	subs	r3, #1
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063c8:	e057      	b.n	800647a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	f003 0302 	and.w	r3, r3, #2
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d11c      	bne.n	8006412 <HAL_SPI_TransmitReceive+0x26c>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063dc:	b29b      	uxth	r3, r3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d017      	beq.n	8006412 <HAL_SPI_TransmitReceive+0x26c>
 80063e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d114      	bne.n	8006412 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	330c      	adds	r3, #12
 80063f2:	7812      	ldrb	r2, [r2, #0]
 80063f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fa:	1c5a      	adds	r2, r3, #1
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006404:	b29b      	uxth	r3, r3
 8006406:	3b01      	subs	r3, #1
 8006408:	b29a      	uxth	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800640e:	2300      	movs	r3, #0
 8006410:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	2b01      	cmp	r3, #1
 800641e:	d119      	bne.n	8006454 <HAL_SPI_TransmitReceive+0x2ae>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006424:	b29b      	uxth	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d014      	beq.n	8006454 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68da      	ldr	r2, [r3, #12]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006434:	b2d2      	uxtb	r2, r2
 8006436:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643c:	1c5a      	adds	r2, r3, #1
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006446:	b29b      	uxth	r3, r3
 8006448:	3b01      	subs	r3, #1
 800644a:	b29a      	uxth	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006450:	2301      	movs	r3, #1
 8006452:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006454:	f7fc fa42 	bl	80028dc <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006460:	429a      	cmp	r2, r3
 8006462:	d803      	bhi.n	800646c <HAL_SPI_TransmitReceive+0x2c6>
 8006464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800646a:	d102      	bne.n	8006472 <HAL_SPI_TransmitReceive+0x2cc>
 800646c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646e:	2b00      	cmp	r3, #0
 8006470:	d103      	bne.n	800647a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006478:	e029      	b.n	80064ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800647e:	b29b      	uxth	r3, r3
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1a2      	bne.n	80063ca <HAL_SPI_TransmitReceive+0x224>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006488:	b29b      	uxth	r3, r3
 800648a:	2b00      	cmp	r3, #0
 800648c:	d19d      	bne.n	80063ca <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800648e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006490:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f000 f8b2 	bl	80065fc <SPI_EndRxTxTransaction>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d006      	beq.n	80064ac <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2220      	movs	r2, #32
 80064a8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80064aa:	e010      	b.n	80064ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10b      	bne.n	80064cc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064b4:	2300      	movs	r3, #0
 80064b6:	617b      	str	r3, [r7, #20]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	617b      	str	r3, [r7, #20]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	e000      	b.n	80064ce <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80064cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80064de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3730      	adds	r7, #48	; 0x30
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
	...

080064ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b088      	sub	sp, #32
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	603b      	str	r3, [r7, #0]
 80064f8:	4613      	mov	r3, r2
 80064fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80064fc:	f7fc f9ee 	bl	80028dc <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006504:	1a9b      	subs	r3, r3, r2
 8006506:	683a      	ldr	r2, [r7, #0]
 8006508:	4413      	add	r3, r2
 800650a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800650c:	f7fc f9e6 	bl	80028dc <HAL_GetTick>
 8006510:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006512:	4b39      	ldr	r3, [pc, #228]	; (80065f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	015b      	lsls	r3, r3, #5
 8006518:	0d1b      	lsrs	r3, r3, #20
 800651a:	69fa      	ldr	r2, [r7, #28]
 800651c:	fb02 f303 	mul.w	r3, r2, r3
 8006520:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006522:	e054      	b.n	80065ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652a:	d050      	beq.n	80065ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800652c:	f7fc f9d6 	bl	80028dc <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	69fa      	ldr	r2, [r7, #28]
 8006538:	429a      	cmp	r2, r3
 800653a:	d902      	bls.n	8006542 <SPI_WaitFlagStateUntilTimeout+0x56>
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d13d      	bne.n	80065be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	685a      	ldr	r2, [r3, #4]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006550:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800655a:	d111      	bne.n	8006580 <SPI_WaitFlagStateUntilTimeout+0x94>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006564:	d004      	beq.n	8006570 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800656e:	d107      	bne.n	8006580 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800657e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006584:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006588:	d10f      	bne.n	80065aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006598:	601a      	str	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e017      	b.n	80065ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d101      	bne.n	80065c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	3b01      	subs	r3, #1
 80065cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	689a      	ldr	r2, [r3, #8]
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	4013      	ands	r3, r2
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	429a      	cmp	r2, r3
 80065dc:	bf0c      	ite	eq
 80065de:	2301      	moveq	r3, #1
 80065e0:	2300      	movne	r3, #0
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	461a      	mov	r2, r3
 80065e6:	79fb      	ldrb	r3, [r7, #7]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d19b      	bne.n	8006524 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3720      	adds	r7, #32
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	20000000 	.word	0x20000000

080065fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b088      	sub	sp, #32
 8006600:	af02      	add	r7, sp, #8
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006608:	4b1b      	ldr	r3, [pc, #108]	; (8006678 <SPI_EndRxTxTransaction+0x7c>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a1b      	ldr	r2, [pc, #108]	; (800667c <SPI_EndRxTxTransaction+0x80>)
 800660e:	fba2 2303 	umull	r2, r3, r2, r3
 8006612:	0d5b      	lsrs	r3, r3, #21
 8006614:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006618:	fb02 f303 	mul.w	r3, r2, r3
 800661c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006626:	d112      	bne.n	800664e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	9300      	str	r3, [sp, #0]
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	2200      	movs	r2, #0
 8006630:	2180      	movs	r1, #128	; 0x80
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f7ff ff5a 	bl	80064ec <SPI_WaitFlagStateUntilTimeout>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d016      	beq.n	800666c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006642:	f043 0220 	orr.w	r2, r3, #32
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e00f      	b.n	800666e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00a      	beq.n	800666a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	3b01      	subs	r3, #1
 8006658:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006664:	2b80      	cmp	r3, #128	; 0x80
 8006666:	d0f2      	beq.n	800664e <SPI_EndRxTxTransaction+0x52>
 8006668:	e000      	b.n	800666c <SPI_EndRxTxTransaction+0x70>
        break;
 800666a:	bf00      	nop
  }

  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3718      	adds	r7, #24
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	20000000 	.word	0x20000000
 800667c:	165e9f81 	.word	0x165e9f81

08006680 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d101      	bne.n	8006692 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e041      	b.n	8006716 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d106      	bne.n	80066ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7fb fec4 	bl	8002434 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2202      	movs	r2, #2
 80066b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	3304      	adds	r3, #4
 80066bc:	4619      	mov	r1, r3
 80066be:	4610      	mov	r0, r2
 80066c0:	f000 fc78 	bl	8006fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3708      	adds	r7, #8
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800671e:	b580      	push	{r7, lr}
 8006720:	b082      	sub	sp, #8
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d101      	bne.n	8006730 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e041      	b.n	80067b4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006736:	b2db      	uxtb	r3, r3
 8006738:	2b00      	cmp	r3, #0
 800673a:	d106      	bne.n	800674a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 f839 	bl	80067bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2202      	movs	r2, #2
 800674e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	3304      	adds	r3, #4
 800675a:	4619      	mov	r1, r3
 800675c:	4610      	mov	r0, r2
 800675e:	f000 fc29 	bl	8006fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2201      	movs	r2, #1
 800676e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2201      	movs	r2, #1
 80067ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3708      	adds	r7, #8
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80067c4:	bf00      	nop
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d109      	bne.n	80067f4 <HAL_TIM_PWM_Start+0x24>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	bf14      	ite	ne
 80067ec:	2301      	movne	r3, #1
 80067ee:	2300      	moveq	r3, #0
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	e022      	b.n	800683a <HAL_TIM_PWM_Start+0x6a>
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	2b04      	cmp	r3, #4
 80067f8:	d109      	bne.n	800680e <HAL_TIM_PWM_Start+0x3e>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b01      	cmp	r3, #1
 8006804:	bf14      	ite	ne
 8006806:	2301      	movne	r3, #1
 8006808:	2300      	moveq	r3, #0
 800680a:	b2db      	uxtb	r3, r3
 800680c:	e015      	b.n	800683a <HAL_TIM_PWM_Start+0x6a>
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	2b08      	cmp	r3, #8
 8006812:	d109      	bne.n	8006828 <HAL_TIM_PWM_Start+0x58>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b01      	cmp	r3, #1
 800681e:	bf14      	ite	ne
 8006820:	2301      	movne	r3, #1
 8006822:	2300      	moveq	r3, #0
 8006824:	b2db      	uxtb	r3, r3
 8006826:	e008      	b.n	800683a <HAL_TIM_PWM_Start+0x6a>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b01      	cmp	r3, #1
 8006832:	bf14      	ite	ne
 8006834:	2301      	movne	r3, #1
 8006836:	2300      	moveq	r3, #0
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	d001      	beq.n	8006842 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e07c      	b.n	800693c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d104      	bne.n	8006852 <HAL_TIM_PWM_Start+0x82>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2202      	movs	r2, #2
 800684c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006850:	e013      	b.n	800687a <HAL_TIM_PWM_Start+0xaa>
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	2b04      	cmp	r3, #4
 8006856:	d104      	bne.n	8006862 <HAL_TIM_PWM_Start+0x92>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006860:	e00b      	b.n	800687a <HAL_TIM_PWM_Start+0xaa>
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	2b08      	cmp	r3, #8
 8006866:	d104      	bne.n	8006872 <HAL_TIM_PWM_Start+0xa2>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2202      	movs	r2, #2
 800686c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006870:	e003      	b.n	800687a <HAL_TIM_PWM_Start+0xaa>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2202      	movs	r2, #2
 8006876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2201      	movs	r2, #1
 8006880:	6839      	ldr	r1, [r7, #0]
 8006882:	4618      	mov	r0, r3
 8006884:	f000 fe80 	bl	8007588 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a2d      	ldr	r2, [pc, #180]	; (8006944 <HAL_TIM_PWM_Start+0x174>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d004      	beq.n	800689c <HAL_TIM_PWM_Start+0xcc>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a2c      	ldr	r2, [pc, #176]	; (8006948 <HAL_TIM_PWM_Start+0x178>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d101      	bne.n	80068a0 <HAL_TIM_PWM_Start+0xd0>
 800689c:	2301      	movs	r3, #1
 800689e:	e000      	b.n	80068a2 <HAL_TIM_PWM_Start+0xd2>
 80068a0:	2300      	movs	r3, #0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d007      	beq.n	80068b6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a22      	ldr	r2, [pc, #136]	; (8006944 <HAL_TIM_PWM_Start+0x174>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d022      	beq.n	8006906 <HAL_TIM_PWM_Start+0x136>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068c8:	d01d      	beq.n	8006906 <HAL_TIM_PWM_Start+0x136>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a1f      	ldr	r2, [pc, #124]	; (800694c <HAL_TIM_PWM_Start+0x17c>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d018      	beq.n	8006906 <HAL_TIM_PWM_Start+0x136>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a1d      	ldr	r2, [pc, #116]	; (8006950 <HAL_TIM_PWM_Start+0x180>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d013      	beq.n	8006906 <HAL_TIM_PWM_Start+0x136>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a1c      	ldr	r2, [pc, #112]	; (8006954 <HAL_TIM_PWM_Start+0x184>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d00e      	beq.n	8006906 <HAL_TIM_PWM_Start+0x136>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a16      	ldr	r2, [pc, #88]	; (8006948 <HAL_TIM_PWM_Start+0x178>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d009      	beq.n	8006906 <HAL_TIM_PWM_Start+0x136>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a18      	ldr	r2, [pc, #96]	; (8006958 <HAL_TIM_PWM_Start+0x188>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d004      	beq.n	8006906 <HAL_TIM_PWM_Start+0x136>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a16      	ldr	r2, [pc, #88]	; (800695c <HAL_TIM_PWM_Start+0x18c>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d111      	bne.n	800692a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	f003 0307 	and.w	r3, r3, #7
 8006910:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2b06      	cmp	r3, #6
 8006916:	d010      	beq.n	800693a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f042 0201 	orr.w	r2, r2, #1
 8006926:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006928:	e007      	b.n	800693a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f042 0201 	orr.w	r2, r2, #1
 8006938:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	40010000 	.word	0x40010000
 8006948:	40010400 	.word	0x40010400
 800694c:	40000400 	.word	0x40000400
 8006950:	40000800 	.word	0x40000800
 8006954:	40000c00 	.word	0x40000c00
 8006958:	40014000 	.word	0x40014000
 800695c:	40001800 	.word	0x40001800

08006960 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2200      	movs	r2, #0
 8006970:	6839      	ldr	r1, [r7, #0]
 8006972:	4618      	mov	r0, r3
 8006974:	f000 fe08 	bl	8007588 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a2e      	ldr	r2, [pc, #184]	; (8006a38 <HAL_TIM_PWM_Stop+0xd8>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d004      	beq.n	800698c <HAL_TIM_PWM_Stop+0x2c>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a2d      	ldr	r2, [pc, #180]	; (8006a3c <HAL_TIM_PWM_Stop+0xdc>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d101      	bne.n	8006990 <HAL_TIM_PWM_Stop+0x30>
 800698c:	2301      	movs	r3, #1
 800698e:	e000      	b.n	8006992 <HAL_TIM_PWM_Stop+0x32>
 8006990:	2300      	movs	r3, #0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d017      	beq.n	80069c6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	6a1a      	ldr	r2, [r3, #32]
 800699c:	f241 1311 	movw	r3, #4369	; 0x1111
 80069a0:	4013      	ands	r3, r2
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d10f      	bne.n	80069c6 <HAL_TIM_PWM_Stop+0x66>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	6a1a      	ldr	r2, [r3, #32]
 80069ac:	f240 4344 	movw	r3, #1092	; 0x444
 80069b0:	4013      	ands	r3, r2
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d107      	bne.n	80069c6 <HAL_TIM_PWM_Stop+0x66>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	6a1a      	ldr	r2, [r3, #32]
 80069cc:	f241 1311 	movw	r3, #4369	; 0x1111
 80069d0:	4013      	ands	r3, r2
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10f      	bne.n	80069f6 <HAL_TIM_PWM_Stop+0x96>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	6a1a      	ldr	r2, [r3, #32]
 80069dc:	f240 4344 	movw	r3, #1092	; 0x444
 80069e0:	4013      	ands	r3, r2
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d107      	bne.n	80069f6 <HAL_TIM_PWM_Stop+0x96>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f022 0201 	bic.w	r2, r2, #1
 80069f4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d104      	bne.n	8006a06 <HAL_TIM_PWM_Stop+0xa6>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a04:	e013      	b.n	8006a2e <HAL_TIM_PWM_Stop+0xce>
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	2b04      	cmp	r3, #4
 8006a0a:	d104      	bne.n	8006a16 <HAL_TIM_PWM_Stop+0xb6>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a14:	e00b      	b.n	8006a2e <HAL_TIM_PWM_Stop+0xce>
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	2b08      	cmp	r3, #8
 8006a1a:	d104      	bne.n	8006a26 <HAL_TIM_PWM_Stop+0xc6>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a24:	e003      	b.n	8006a2e <HAL_TIM_PWM_Stop+0xce>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3708      	adds	r7, #8
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	40010000 	.word	0x40010000
 8006a3c:	40010400 	.word	0x40010400

08006a40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	f003 0302 	and.w	r3, r3, #2
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d122      	bne.n	8006a9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	f003 0302 	and.w	r3, r3, #2
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d11b      	bne.n	8006a9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f06f 0202 	mvn.w	r2, #2
 8006a6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2201      	movs	r2, #1
 8006a72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	f003 0303 	and.w	r3, r3, #3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d003      	beq.n	8006a8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 fa77 	bl	8006f76 <HAL_TIM_IC_CaptureCallback>
 8006a88:	e005      	b.n	8006a96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 fa69 	bl	8006f62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 fa7a 	bl	8006f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	f003 0304 	and.w	r3, r3, #4
 8006aa6:	2b04      	cmp	r3, #4
 8006aa8:	d122      	bne.n	8006af0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	f003 0304 	and.w	r3, r3, #4
 8006ab4:	2b04      	cmp	r3, #4
 8006ab6:	d11b      	bne.n	8006af0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f06f 0204 	mvn.w	r2, #4
 8006ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2202      	movs	r2, #2
 8006ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	699b      	ldr	r3, [r3, #24]
 8006ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d003      	beq.n	8006ade <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 fa4d 	bl	8006f76 <HAL_TIM_IC_CaptureCallback>
 8006adc:	e005      	b.n	8006aea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fa3f 	bl	8006f62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 fa50 	bl	8006f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	f003 0308 	and.w	r3, r3, #8
 8006afa:	2b08      	cmp	r3, #8
 8006afc:	d122      	bne.n	8006b44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	f003 0308 	and.w	r3, r3, #8
 8006b08:	2b08      	cmp	r3, #8
 8006b0a:	d11b      	bne.n	8006b44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f06f 0208 	mvn.w	r2, #8
 8006b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2204      	movs	r2, #4
 8006b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	69db      	ldr	r3, [r3, #28]
 8006b22:	f003 0303 	and.w	r3, r3, #3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d003      	beq.n	8006b32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 fa23 	bl	8006f76 <HAL_TIM_IC_CaptureCallback>
 8006b30:	e005      	b.n	8006b3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 fa15 	bl	8006f62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 fa26 	bl	8006f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	f003 0310 	and.w	r3, r3, #16
 8006b4e:	2b10      	cmp	r3, #16
 8006b50:	d122      	bne.n	8006b98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	f003 0310 	and.w	r3, r3, #16
 8006b5c:	2b10      	cmp	r3, #16
 8006b5e:	d11b      	bne.n	8006b98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f06f 0210 	mvn.w	r2, #16
 8006b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2208      	movs	r2, #8
 8006b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	69db      	ldr	r3, [r3, #28]
 8006b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d003      	beq.n	8006b86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f9f9 	bl	8006f76 <HAL_TIM_IC_CaptureCallback>
 8006b84:	e005      	b.n	8006b92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f9eb 	bl	8006f62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 f9fc 	bl	8006f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d10e      	bne.n	8006bc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	f003 0301 	and.w	r3, r3, #1
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d107      	bne.n	8006bc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f06f 0201 	mvn.w	r2, #1
 8006bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f7fb fa82 	bl	80020c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bce:	2b80      	cmp	r3, #128	; 0x80
 8006bd0:	d10e      	bne.n	8006bf0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bdc:	2b80      	cmp	r3, #128	; 0x80
 8006bde:	d107      	bne.n	8006bf0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fd78 	bl	80076e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bfa:	2b40      	cmp	r3, #64	; 0x40
 8006bfc:	d10e      	bne.n	8006c1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c08:	2b40      	cmp	r3, #64	; 0x40
 8006c0a:	d107      	bne.n	8006c1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 f9c1 	bl	8006f9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	f003 0320 	and.w	r3, r3, #32
 8006c26:	2b20      	cmp	r3, #32
 8006c28:	d10e      	bne.n	8006c48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	f003 0320 	and.w	r3, r3, #32
 8006c34:	2b20      	cmp	r3, #32
 8006c36:	d107      	bne.n	8006c48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f06f 0220 	mvn.w	r2, #32
 8006c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 fd42 	bl	80076cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c48:	bf00      	nop
 8006c4a:	3708      	adds	r7, #8
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b086      	sub	sp, #24
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d101      	bne.n	8006c6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	e0ae      	b.n	8006dcc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2b0c      	cmp	r3, #12
 8006c7a:	f200 809f 	bhi.w	8006dbc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006c7e:	a201      	add	r2, pc, #4	; (adr r2, 8006c84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c84:	08006cb9 	.word	0x08006cb9
 8006c88:	08006dbd 	.word	0x08006dbd
 8006c8c:	08006dbd 	.word	0x08006dbd
 8006c90:	08006dbd 	.word	0x08006dbd
 8006c94:	08006cf9 	.word	0x08006cf9
 8006c98:	08006dbd 	.word	0x08006dbd
 8006c9c:	08006dbd 	.word	0x08006dbd
 8006ca0:	08006dbd 	.word	0x08006dbd
 8006ca4:	08006d3b 	.word	0x08006d3b
 8006ca8:	08006dbd 	.word	0x08006dbd
 8006cac:	08006dbd 	.word	0x08006dbd
 8006cb0:	08006dbd 	.word	0x08006dbd
 8006cb4:	08006d7b 	.word	0x08006d7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68b9      	ldr	r1, [r7, #8]
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f000 fa18 	bl	80070f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	699a      	ldr	r2, [r3, #24]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f042 0208 	orr.w	r2, r2, #8
 8006cd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	699a      	ldr	r2, [r3, #24]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f022 0204 	bic.w	r2, r2, #4
 8006ce2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6999      	ldr	r1, [r3, #24]
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	691a      	ldr	r2, [r3, #16]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	619a      	str	r2, [r3, #24]
      break;
 8006cf6:	e064      	b.n	8006dc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68b9      	ldr	r1, [r7, #8]
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f000 fa68 	bl	80071d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	699a      	ldr	r2, [r3, #24]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	699a      	ldr	r2, [r3, #24]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6999      	ldr	r1, [r3, #24]
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	021a      	lsls	r2, r3, #8
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	430a      	orrs	r2, r1
 8006d36:	619a      	str	r2, [r3, #24]
      break;
 8006d38:	e043      	b.n	8006dc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68b9      	ldr	r1, [r7, #8]
 8006d40:	4618      	mov	r0, r3
 8006d42:	f000 fabd 	bl	80072c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	69da      	ldr	r2, [r3, #28]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f042 0208 	orr.w	r2, r2, #8
 8006d54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	69da      	ldr	r2, [r3, #28]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f022 0204 	bic.w	r2, r2, #4
 8006d64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	69d9      	ldr	r1, [r3, #28]
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	691a      	ldr	r2, [r3, #16]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	430a      	orrs	r2, r1
 8006d76:	61da      	str	r2, [r3, #28]
      break;
 8006d78:	e023      	b.n	8006dc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68b9      	ldr	r1, [r7, #8]
 8006d80:	4618      	mov	r0, r3
 8006d82:	f000 fb11 	bl	80073a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	69da      	ldr	r2, [r3, #28]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	69da      	ldr	r2, [r3, #28]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006da4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	69d9      	ldr	r1, [r3, #28]
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	021a      	lsls	r2, r3, #8
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	430a      	orrs	r2, r1
 8006db8:	61da      	str	r2, [r3, #28]
      break;
 8006dba:	e002      	b.n	8006dc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	75fb      	strb	r3, [r7, #23]
      break;
 8006dc0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3718      	adds	r7, #24
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006dde:	2300      	movs	r3, #0
 8006de0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d101      	bne.n	8006df0 <HAL_TIM_ConfigClockSource+0x1c>
 8006dec:	2302      	movs	r3, #2
 8006dee:	e0b4      	b.n	8006f5a <HAL_TIM_ConfigClockSource+0x186>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68ba      	ldr	r2, [r7, #8]
 8006e1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e28:	d03e      	beq.n	8006ea8 <HAL_TIM_ConfigClockSource+0xd4>
 8006e2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e2e:	f200 8087 	bhi.w	8006f40 <HAL_TIM_ConfigClockSource+0x16c>
 8006e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e36:	f000 8086 	beq.w	8006f46 <HAL_TIM_ConfigClockSource+0x172>
 8006e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e3e:	d87f      	bhi.n	8006f40 <HAL_TIM_ConfigClockSource+0x16c>
 8006e40:	2b70      	cmp	r3, #112	; 0x70
 8006e42:	d01a      	beq.n	8006e7a <HAL_TIM_ConfigClockSource+0xa6>
 8006e44:	2b70      	cmp	r3, #112	; 0x70
 8006e46:	d87b      	bhi.n	8006f40 <HAL_TIM_ConfigClockSource+0x16c>
 8006e48:	2b60      	cmp	r3, #96	; 0x60
 8006e4a:	d050      	beq.n	8006eee <HAL_TIM_ConfigClockSource+0x11a>
 8006e4c:	2b60      	cmp	r3, #96	; 0x60
 8006e4e:	d877      	bhi.n	8006f40 <HAL_TIM_ConfigClockSource+0x16c>
 8006e50:	2b50      	cmp	r3, #80	; 0x50
 8006e52:	d03c      	beq.n	8006ece <HAL_TIM_ConfigClockSource+0xfa>
 8006e54:	2b50      	cmp	r3, #80	; 0x50
 8006e56:	d873      	bhi.n	8006f40 <HAL_TIM_ConfigClockSource+0x16c>
 8006e58:	2b40      	cmp	r3, #64	; 0x40
 8006e5a:	d058      	beq.n	8006f0e <HAL_TIM_ConfigClockSource+0x13a>
 8006e5c:	2b40      	cmp	r3, #64	; 0x40
 8006e5e:	d86f      	bhi.n	8006f40 <HAL_TIM_ConfigClockSource+0x16c>
 8006e60:	2b30      	cmp	r3, #48	; 0x30
 8006e62:	d064      	beq.n	8006f2e <HAL_TIM_ConfigClockSource+0x15a>
 8006e64:	2b30      	cmp	r3, #48	; 0x30
 8006e66:	d86b      	bhi.n	8006f40 <HAL_TIM_ConfigClockSource+0x16c>
 8006e68:	2b20      	cmp	r3, #32
 8006e6a:	d060      	beq.n	8006f2e <HAL_TIM_ConfigClockSource+0x15a>
 8006e6c:	2b20      	cmp	r3, #32
 8006e6e:	d867      	bhi.n	8006f40 <HAL_TIM_ConfigClockSource+0x16c>
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d05c      	beq.n	8006f2e <HAL_TIM_ConfigClockSource+0x15a>
 8006e74:	2b10      	cmp	r3, #16
 8006e76:	d05a      	beq.n	8006f2e <HAL_TIM_ConfigClockSource+0x15a>
 8006e78:	e062      	b.n	8006f40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6818      	ldr	r0, [r3, #0]
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	6899      	ldr	r1, [r3, #8]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	685a      	ldr	r2, [r3, #4]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	f000 fb5d 	bl	8007548 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68ba      	ldr	r2, [r7, #8]
 8006ea4:	609a      	str	r2, [r3, #8]
      break;
 8006ea6:	e04f      	b.n	8006f48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6818      	ldr	r0, [r3, #0]
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	6899      	ldr	r1, [r3, #8]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	685a      	ldr	r2, [r3, #4]
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	f000 fb46 	bl	8007548 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	689a      	ldr	r2, [r3, #8]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006eca:	609a      	str	r2, [r3, #8]
      break;
 8006ecc:	e03c      	b.n	8006f48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6818      	ldr	r0, [r3, #0]
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	6859      	ldr	r1, [r3, #4]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	461a      	mov	r2, r3
 8006edc:	f000 faba 	bl	8007454 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2150      	movs	r1, #80	; 0x50
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f000 fb13 	bl	8007512 <TIM_ITRx_SetConfig>
      break;
 8006eec:	e02c      	b.n	8006f48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6818      	ldr	r0, [r3, #0]
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	6859      	ldr	r1, [r3, #4]
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	461a      	mov	r2, r3
 8006efc:	f000 fad9 	bl	80074b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2160      	movs	r1, #96	; 0x60
 8006f06:	4618      	mov	r0, r3
 8006f08:	f000 fb03 	bl	8007512 <TIM_ITRx_SetConfig>
      break;
 8006f0c:	e01c      	b.n	8006f48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6818      	ldr	r0, [r3, #0]
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	6859      	ldr	r1, [r3, #4]
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	f000 fa9a 	bl	8007454 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2140      	movs	r1, #64	; 0x40
 8006f26:	4618      	mov	r0, r3
 8006f28:	f000 faf3 	bl	8007512 <TIM_ITRx_SetConfig>
      break;
 8006f2c:	e00c      	b.n	8006f48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4619      	mov	r1, r3
 8006f38:	4610      	mov	r0, r2
 8006f3a:	f000 faea 	bl	8007512 <TIM_ITRx_SetConfig>
      break;
 8006f3e:	e003      	b.n	8006f48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	73fb      	strb	r3, [r7, #15]
      break;
 8006f44:	e000      	b.n	8006f48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006f46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b083      	sub	sp, #12
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f6a:	bf00      	nop
 8006f6c:	370c      	adds	r7, #12
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f76:	b480      	push	{r7}
 8006f78:	b083      	sub	sp, #12
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f7e:	bf00      	nop
 8006f80:	370c      	adds	r7, #12
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr

08006f8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f8a:	b480      	push	{r7}
 8006f8c:	b083      	sub	sp, #12
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f92:	bf00      	nop
 8006f94:	370c      	adds	r7, #12
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr

08006f9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b083      	sub	sp, #12
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fa6:	bf00      	nop
 8006fa8:	370c      	adds	r7, #12
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
	...

08006fb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a40      	ldr	r2, [pc, #256]	; (80070c8 <TIM_Base_SetConfig+0x114>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d013      	beq.n	8006ff4 <TIM_Base_SetConfig+0x40>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fd2:	d00f      	beq.n	8006ff4 <TIM_Base_SetConfig+0x40>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a3d      	ldr	r2, [pc, #244]	; (80070cc <TIM_Base_SetConfig+0x118>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d00b      	beq.n	8006ff4 <TIM_Base_SetConfig+0x40>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a3c      	ldr	r2, [pc, #240]	; (80070d0 <TIM_Base_SetConfig+0x11c>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d007      	beq.n	8006ff4 <TIM_Base_SetConfig+0x40>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4a3b      	ldr	r2, [pc, #236]	; (80070d4 <TIM_Base_SetConfig+0x120>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d003      	beq.n	8006ff4 <TIM_Base_SetConfig+0x40>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4a3a      	ldr	r2, [pc, #232]	; (80070d8 <TIM_Base_SetConfig+0x124>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d108      	bne.n	8007006 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ffa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	4313      	orrs	r3, r2
 8007004:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a2f      	ldr	r2, [pc, #188]	; (80070c8 <TIM_Base_SetConfig+0x114>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d02b      	beq.n	8007066 <TIM_Base_SetConfig+0xb2>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007014:	d027      	beq.n	8007066 <TIM_Base_SetConfig+0xb2>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4a2c      	ldr	r2, [pc, #176]	; (80070cc <TIM_Base_SetConfig+0x118>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d023      	beq.n	8007066 <TIM_Base_SetConfig+0xb2>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a2b      	ldr	r2, [pc, #172]	; (80070d0 <TIM_Base_SetConfig+0x11c>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d01f      	beq.n	8007066 <TIM_Base_SetConfig+0xb2>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	4a2a      	ldr	r2, [pc, #168]	; (80070d4 <TIM_Base_SetConfig+0x120>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d01b      	beq.n	8007066 <TIM_Base_SetConfig+0xb2>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a29      	ldr	r2, [pc, #164]	; (80070d8 <TIM_Base_SetConfig+0x124>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d017      	beq.n	8007066 <TIM_Base_SetConfig+0xb2>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a28      	ldr	r2, [pc, #160]	; (80070dc <TIM_Base_SetConfig+0x128>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d013      	beq.n	8007066 <TIM_Base_SetConfig+0xb2>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a27      	ldr	r2, [pc, #156]	; (80070e0 <TIM_Base_SetConfig+0x12c>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d00f      	beq.n	8007066 <TIM_Base_SetConfig+0xb2>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a26      	ldr	r2, [pc, #152]	; (80070e4 <TIM_Base_SetConfig+0x130>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d00b      	beq.n	8007066 <TIM_Base_SetConfig+0xb2>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a25      	ldr	r2, [pc, #148]	; (80070e8 <TIM_Base_SetConfig+0x134>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d007      	beq.n	8007066 <TIM_Base_SetConfig+0xb2>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a24      	ldr	r2, [pc, #144]	; (80070ec <TIM_Base_SetConfig+0x138>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d003      	beq.n	8007066 <TIM_Base_SetConfig+0xb2>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a23      	ldr	r2, [pc, #140]	; (80070f0 <TIM_Base_SetConfig+0x13c>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d108      	bne.n	8007078 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800706c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	4313      	orrs	r3, r2
 8007076:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	695b      	ldr	r3, [r3, #20]
 8007082:	4313      	orrs	r3, r2
 8007084:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	689a      	ldr	r2, [r3, #8]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a0a      	ldr	r2, [pc, #40]	; (80070c8 <TIM_Base_SetConfig+0x114>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d003      	beq.n	80070ac <TIM_Base_SetConfig+0xf8>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a0c      	ldr	r2, [pc, #48]	; (80070d8 <TIM_Base_SetConfig+0x124>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d103      	bne.n	80070b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	691a      	ldr	r2, [r3, #16]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	615a      	str	r2, [r3, #20]
}
 80070ba:	bf00      	nop
 80070bc:	3714      	adds	r7, #20
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	40010000 	.word	0x40010000
 80070cc:	40000400 	.word	0x40000400
 80070d0:	40000800 	.word	0x40000800
 80070d4:	40000c00 	.word	0x40000c00
 80070d8:	40010400 	.word	0x40010400
 80070dc:	40014000 	.word	0x40014000
 80070e0:	40014400 	.word	0x40014400
 80070e4:	40014800 	.word	0x40014800
 80070e8:	40001800 	.word	0x40001800
 80070ec:	40001c00 	.word	0x40001c00
 80070f0:	40002000 	.word	0x40002000

080070f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b087      	sub	sp, #28
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a1b      	ldr	r3, [r3, #32]
 8007102:	f023 0201 	bic.w	r2, r3, #1
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f023 0303 	bic.w	r3, r3, #3
 800712a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	4313      	orrs	r3, r2
 8007134:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f023 0302 	bic.w	r3, r3, #2
 800713c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	4313      	orrs	r3, r2
 8007146:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a20      	ldr	r2, [pc, #128]	; (80071cc <TIM_OC1_SetConfig+0xd8>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d003      	beq.n	8007158 <TIM_OC1_SetConfig+0x64>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a1f      	ldr	r2, [pc, #124]	; (80071d0 <TIM_OC1_SetConfig+0xdc>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d10c      	bne.n	8007172 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	f023 0308 	bic.w	r3, r3, #8
 800715e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	697a      	ldr	r2, [r7, #20]
 8007166:	4313      	orrs	r3, r2
 8007168:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	f023 0304 	bic.w	r3, r3, #4
 8007170:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a15      	ldr	r2, [pc, #84]	; (80071cc <TIM_OC1_SetConfig+0xd8>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d003      	beq.n	8007182 <TIM_OC1_SetConfig+0x8e>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a14      	ldr	r2, [pc, #80]	; (80071d0 <TIM_OC1_SetConfig+0xdc>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d111      	bne.n	80071a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007188:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007190:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	693a      	ldr	r2, [r7, #16]
 8007198:	4313      	orrs	r3, r2
 800719a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	699b      	ldr	r3, [r3, #24]
 80071a0:	693a      	ldr	r2, [r7, #16]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	693a      	ldr	r2, [r7, #16]
 80071aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	685a      	ldr	r2, [r3, #4]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	697a      	ldr	r2, [r7, #20]
 80071be:	621a      	str	r2, [r3, #32]
}
 80071c0:	bf00      	nop
 80071c2:	371c      	adds	r7, #28
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr
 80071cc:	40010000 	.word	0x40010000
 80071d0:	40010400 	.word	0x40010400

080071d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b087      	sub	sp, #28
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a1b      	ldr	r3, [r3, #32]
 80071e2:	f023 0210 	bic.w	r2, r3, #16
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a1b      	ldr	r3, [r3, #32]
 80071ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	699b      	ldr	r3, [r3, #24]
 80071fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800720a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	021b      	lsls	r3, r3, #8
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	4313      	orrs	r3, r2
 8007216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	f023 0320 	bic.w	r3, r3, #32
 800721e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	011b      	lsls	r3, r3, #4
 8007226:	697a      	ldr	r2, [r7, #20]
 8007228:	4313      	orrs	r3, r2
 800722a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	4a22      	ldr	r2, [pc, #136]	; (80072b8 <TIM_OC2_SetConfig+0xe4>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d003      	beq.n	800723c <TIM_OC2_SetConfig+0x68>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	4a21      	ldr	r2, [pc, #132]	; (80072bc <TIM_OC2_SetConfig+0xe8>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d10d      	bne.n	8007258 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007242:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	011b      	lsls	r3, r3, #4
 800724a:	697a      	ldr	r2, [r7, #20]
 800724c:	4313      	orrs	r3, r2
 800724e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007256:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a17      	ldr	r2, [pc, #92]	; (80072b8 <TIM_OC2_SetConfig+0xe4>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d003      	beq.n	8007268 <TIM_OC2_SetConfig+0x94>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a16      	ldr	r2, [pc, #88]	; (80072bc <TIM_OC2_SetConfig+0xe8>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d113      	bne.n	8007290 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800726e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007276:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	695b      	ldr	r3, [r3, #20]
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	4313      	orrs	r3, r2
 8007282:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	693a      	ldr	r2, [r7, #16]
 800728c:	4313      	orrs	r3, r2
 800728e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	693a      	ldr	r2, [r7, #16]
 8007294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	685a      	ldr	r2, [r3, #4]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	621a      	str	r2, [r3, #32]
}
 80072aa:	bf00      	nop
 80072ac:	371c      	adds	r7, #28
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	40010000 	.word	0x40010000
 80072bc:	40010400 	.word	0x40010400

080072c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b087      	sub	sp, #28
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a1b      	ldr	r3, [r3, #32]
 80072da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	69db      	ldr	r3, [r3, #28]
 80072e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f023 0303 	bic.w	r3, r3, #3
 80072f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	4313      	orrs	r3, r2
 8007300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007308:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	021b      	lsls	r3, r3, #8
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	4313      	orrs	r3, r2
 8007314:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4a21      	ldr	r2, [pc, #132]	; (80073a0 <TIM_OC3_SetConfig+0xe0>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d003      	beq.n	8007326 <TIM_OC3_SetConfig+0x66>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a20      	ldr	r2, [pc, #128]	; (80073a4 <TIM_OC3_SetConfig+0xe4>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d10d      	bne.n	8007342 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800732c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	021b      	lsls	r3, r3, #8
 8007334:	697a      	ldr	r2, [r7, #20]
 8007336:	4313      	orrs	r3, r2
 8007338:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007340:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a16      	ldr	r2, [pc, #88]	; (80073a0 <TIM_OC3_SetConfig+0xe0>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d003      	beq.n	8007352 <TIM_OC3_SetConfig+0x92>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a15      	ldr	r2, [pc, #84]	; (80073a4 <TIM_OC3_SetConfig+0xe4>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d113      	bne.n	800737a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007358:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007360:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	695b      	ldr	r3, [r3, #20]
 8007366:	011b      	lsls	r3, r3, #4
 8007368:	693a      	ldr	r2, [r7, #16]
 800736a:	4313      	orrs	r3, r2
 800736c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	011b      	lsls	r3, r3, #4
 8007374:	693a      	ldr	r2, [r7, #16]
 8007376:	4313      	orrs	r3, r2
 8007378:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	693a      	ldr	r2, [r7, #16]
 800737e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	685a      	ldr	r2, [r3, #4]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	697a      	ldr	r2, [r7, #20]
 8007392:	621a      	str	r2, [r3, #32]
}
 8007394:	bf00      	nop
 8007396:	371c      	adds	r7, #28
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr
 80073a0:	40010000 	.word	0x40010000
 80073a4:	40010400 	.word	0x40010400

080073a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b087      	sub	sp, #28
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a1b      	ldr	r3, [r3, #32]
 80073b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a1b      	ldr	r3, [r3, #32]
 80073c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	69db      	ldr	r3, [r3, #28]
 80073ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	021b      	lsls	r3, r3, #8
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	031b      	lsls	r3, r3, #12
 80073fa:	693a      	ldr	r2, [r7, #16]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a12      	ldr	r2, [pc, #72]	; (800744c <TIM_OC4_SetConfig+0xa4>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d003      	beq.n	8007410 <TIM_OC4_SetConfig+0x68>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4a11      	ldr	r2, [pc, #68]	; (8007450 <TIM_OC4_SetConfig+0xa8>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d109      	bne.n	8007424 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007416:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	695b      	ldr	r3, [r3, #20]
 800741c:	019b      	lsls	r3, r3, #6
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	4313      	orrs	r3, r2
 8007422:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	697a      	ldr	r2, [r7, #20]
 8007428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	685a      	ldr	r2, [r3, #4]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	693a      	ldr	r2, [r7, #16]
 800743c:	621a      	str	r2, [r3, #32]
}
 800743e:	bf00      	nop
 8007440:	371c      	adds	r7, #28
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop
 800744c:	40010000 	.word	0x40010000
 8007450:	40010400 	.word	0x40010400

08007454 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007454:	b480      	push	{r7}
 8007456:	b087      	sub	sp, #28
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6a1b      	ldr	r3, [r3, #32]
 8007464:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6a1b      	ldr	r3, [r3, #32]
 800746a:	f023 0201 	bic.w	r2, r3, #1
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800747e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	011b      	lsls	r3, r3, #4
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	4313      	orrs	r3, r2
 8007488:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	f023 030a 	bic.w	r3, r3, #10
 8007490:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007492:	697a      	ldr	r2, [r7, #20]
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	4313      	orrs	r3, r2
 8007498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	621a      	str	r2, [r3, #32]
}
 80074a6:	bf00      	nop
 80074a8:	371c      	adds	r7, #28
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b087      	sub	sp, #28
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	60f8      	str	r0, [r7, #12]
 80074ba:	60b9      	str	r1, [r7, #8]
 80074bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	f023 0210 	bic.w	r2, r3, #16
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6a1b      	ldr	r3, [r3, #32]
 80074d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	031b      	lsls	r3, r3, #12
 80074e2:	697a      	ldr	r2, [r7, #20]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80074ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	011b      	lsls	r3, r3, #4
 80074f4:	693a      	ldr	r2, [r7, #16]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	697a      	ldr	r2, [r7, #20]
 80074fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	693a      	ldr	r2, [r7, #16]
 8007504:	621a      	str	r2, [r3, #32]
}
 8007506:	bf00      	nop
 8007508:	371c      	adds	r7, #28
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007512:	b480      	push	{r7}
 8007514:	b085      	sub	sp, #20
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
 800751a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007528:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800752a:	683a      	ldr	r2, [r7, #0]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	4313      	orrs	r3, r2
 8007530:	f043 0307 	orr.w	r3, r3, #7
 8007534:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	609a      	str	r2, [r3, #8]
}
 800753c:	bf00      	nop
 800753e:	3714      	adds	r7, #20
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007548:	b480      	push	{r7}
 800754a:	b087      	sub	sp, #28
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
 8007554:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007562:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	021a      	lsls	r2, r3, #8
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	431a      	orrs	r2, r3
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	4313      	orrs	r3, r2
 8007570:	697a      	ldr	r2, [r7, #20]
 8007572:	4313      	orrs	r3, r2
 8007574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	697a      	ldr	r2, [r7, #20]
 800757a:	609a      	str	r2, [r3, #8]
}
 800757c:	bf00      	nop
 800757e:	371c      	adds	r7, #28
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007588:	b480      	push	{r7}
 800758a:	b087      	sub	sp, #28
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	f003 031f 	and.w	r3, r3, #31
 800759a:	2201      	movs	r2, #1
 800759c:	fa02 f303 	lsl.w	r3, r2, r3
 80075a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6a1a      	ldr	r2, [r3, #32]
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	43db      	mvns	r3, r3
 80075aa:	401a      	ands	r2, r3
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6a1a      	ldr	r2, [r3, #32]
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	f003 031f 	and.w	r3, r3, #31
 80075ba:	6879      	ldr	r1, [r7, #4]
 80075bc:	fa01 f303 	lsl.w	r3, r1, r3
 80075c0:	431a      	orrs	r2, r3
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	621a      	str	r2, [r3, #32]
}
 80075c6:	bf00      	nop
 80075c8:	371c      	adds	r7, #28
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
	...

080075d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d101      	bne.n	80075ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075e8:	2302      	movs	r3, #2
 80075ea:	e05a      	b.n	80076a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2202      	movs	r2, #2
 80075f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007612:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	4313      	orrs	r3, r2
 800761c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a21      	ldr	r2, [pc, #132]	; (80076b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d022      	beq.n	8007676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007638:	d01d      	beq.n	8007676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a1d      	ldr	r2, [pc, #116]	; (80076b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d018      	beq.n	8007676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a1b      	ldr	r2, [pc, #108]	; (80076b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d013      	beq.n	8007676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a1a      	ldr	r2, [pc, #104]	; (80076bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d00e      	beq.n	8007676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a18      	ldr	r2, [pc, #96]	; (80076c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d009      	beq.n	8007676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a17      	ldr	r2, [pc, #92]	; (80076c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d004      	beq.n	8007676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a15      	ldr	r2, [pc, #84]	; (80076c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d10c      	bne.n	8007690 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800767c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	4313      	orrs	r3, r2
 8007686:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68ba      	ldr	r2, [r7, #8]
 800768e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3714      	adds	r7, #20
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	40010000 	.word	0x40010000
 80076b4:	40000400 	.word	0x40000400
 80076b8:	40000800 	.word	0x40000800
 80076bc:	40000c00 	.word	0x40000c00
 80076c0:	40010400 	.word	0x40010400
 80076c4:	40014000 	.word	0x40014000
 80076c8:	40001800 	.word	0x40001800

080076cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076e8:	bf00      	nop
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d101      	bne.n	8007706 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e03f      	b.n	8007786 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800770c:	b2db      	uxtb	r3, r3
 800770e:	2b00      	cmp	r3, #0
 8007710:	d106      	bne.n	8007720 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f7fa fee8 	bl	80024f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2224      	movs	r2, #36	; 0x24
 8007724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68da      	ldr	r2, [r3, #12]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007736:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 f829 	bl	8007790 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	691a      	ldr	r2, [r3, #16]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800774c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	695a      	ldr	r2, [r3, #20]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800775c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68da      	ldr	r2, [r3, #12]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800776c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2220      	movs	r2, #32
 8007778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2220      	movs	r2, #32
 8007780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3708      	adds	r7, #8
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
	...

08007790 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007794:	b09f      	sub	sp, #124	; 0x7c
 8007796:	af00      	add	r7, sp, #0
 8007798:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800779a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80077a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077a6:	68d9      	ldr	r1, [r3, #12]
 80077a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	ea40 0301 	orr.w	r3, r0, r1
 80077b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80077b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077b4:	689a      	ldr	r2, [r3, #8]
 80077b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	431a      	orrs	r2, r3
 80077bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077be:	695b      	ldr	r3, [r3, #20]
 80077c0:	431a      	orrs	r2, r3
 80077c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077c4:	69db      	ldr	r3, [r3, #28]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80077ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80077d4:	f021 010c 	bic.w	r1, r1, #12
 80077d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077de:	430b      	orrs	r3, r1
 80077e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80077e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	695b      	ldr	r3, [r3, #20]
 80077e8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80077ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077ee:	6999      	ldr	r1, [r3, #24]
 80077f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	ea40 0301 	orr.w	r3, r0, r1
 80077f8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80077fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	4bc5      	ldr	r3, [pc, #788]	; (8007b14 <UART_SetConfig+0x384>)
 8007800:	429a      	cmp	r2, r3
 8007802:	d004      	beq.n	800780e <UART_SetConfig+0x7e>
 8007804:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	4bc3      	ldr	r3, [pc, #780]	; (8007b18 <UART_SetConfig+0x388>)
 800780a:	429a      	cmp	r2, r3
 800780c:	d103      	bne.n	8007816 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800780e:	f7fe fc2d 	bl	800606c <HAL_RCC_GetPCLK2Freq>
 8007812:	6778      	str	r0, [r7, #116]	; 0x74
 8007814:	e002      	b.n	800781c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007816:	f7fe fc15 	bl	8006044 <HAL_RCC_GetPCLK1Freq>
 800781a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800781c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800781e:	69db      	ldr	r3, [r3, #28]
 8007820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007824:	f040 80b6 	bne.w	8007994 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007828:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800782a:	461c      	mov	r4, r3
 800782c:	f04f 0500 	mov.w	r5, #0
 8007830:	4622      	mov	r2, r4
 8007832:	462b      	mov	r3, r5
 8007834:	1891      	adds	r1, r2, r2
 8007836:	6439      	str	r1, [r7, #64]	; 0x40
 8007838:	415b      	adcs	r3, r3
 800783a:	647b      	str	r3, [r7, #68]	; 0x44
 800783c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007840:	1912      	adds	r2, r2, r4
 8007842:	eb45 0303 	adc.w	r3, r5, r3
 8007846:	f04f 0000 	mov.w	r0, #0
 800784a:	f04f 0100 	mov.w	r1, #0
 800784e:	00d9      	lsls	r1, r3, #3
 8007850:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007854:	00d0      	lsls	r0, r2, #3
 8007856:	4602      	mov	r2, r0
 8007858:	460b      	mov	r3, r1
 800785a:	1911      	adds	r1, r2, r4
 800785c:	6639      	str	r1, [r7, #96]	; 0x60
 800785e:	416b      	adcs	r3, r5
 8007860:	667b      	str	r3, [r7, #100]	; 0x64
 8007862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	461a      	mov	r2, r3
 8007868:	f04f 0300 	mov.w	r3, #0
 800786c:	1891      	adds	r1, r2, r2
 800786e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007870:	415b      	adcs	r3, r3
 8007872:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007874:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007878:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800787c:	f7f9 fa14 	bl	8000ca8 <__aeabi_uldivmod>
 8007880:	4602      	mov	r2, r0
 8007882:	460b      	mov	r3, r1
 8007884:	4ba5      	ldr	r3, [pc, #660]	; (8007b1c <UART_SetConfig+0x38c>)
 8007886:	fba3 2302 	umull	r2, r3, r3, r2
 800788a:	095b      	lsrs	r3, r3, #5
 800788c:	011e      	lsls	r6, r3, #4
 800788e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007890:	461c      	mov	r4, r3
 8007892:	f04f 0500 	mov.w	r5, #0
 8007896:	4622      	mov	r2, r4
 8007898:	462b      	mov	r3, r5
 800789a:	1891      	adds	r1, r2, r2
 800789c:	6339      	str	r1, [r7, #48]	; 0x30
 800789e:	415b      	adcs	r3, r3
 80078a0:	637b      	str	r3, [r7, #52]	; 0x34
 80078a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80078a6:	1912      	adds	r2, r2, r4
 80078a8:	eb45 0303 	adc.w	r3, r5, r3
 80078ac:	f04f 0000 	mov.w	r0, #0
 80078b0:	f04f 0100 	mov.w	r1, #0
 80078b4:	00d9      	lsls	r1, r3, #3
 80078b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80078ba:	00d0      	lsls	r0, r2, #3
 80078bc:	4602      	mov	r2, r0
 80078be:	460b      	mov	r3, r1
 80078c0:	1911      	adds	r1, r2, r4
 80078c2:	65b9      	str	r1, [r7, #88]	; 0x58
 80078c4:	416b      	adcs	r3, r5
 80078c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	461a      	mov	r2, r3
 80078ce:	f04f 0300 	mov.w	r3, #0
 80078d2:	1891      	adds	r1, r2, r2
 80078d4:	62b9      	str	r1, [r7, #40]	; 0x28
 80078d6:	415b      	adcs	r3, r3
 80078d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80078de:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80078e2:	f7f9 f9e1 	bl	8000ca8 <__aeabi_uldivmod>
 80078e6:	4602      	mov	r2, r0
 80078e8:	460b      	mov	r3, r1
 80078ea:	4b8c      	ldr	r3, [pc, #560]	; (8007b1c <UART_SetConfig+0x38c>)
 80078ec:	fba3 1302 	umull	r1, r3, r3, r2
 80078f0:	095b      	lsrs	r3, r3, #5
 80078f2:	2164      	movs	r1, #100	; 0x64
 80078f4:	fb01 f303 	mul.w	r3, r1, r3
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	00db      	lsls	r3, r3, #3
 80078fc:	3332      	adds	r3, #50	; 0x32
 80078fe:	4a87      	ldr	r2, [pc, #540]	; (8007b1c <UART_SetConfig+0x38c>)
 8007900:	fba2 2303 	umull	r2, r3, r2, r3
 8007904:	095b      	lsrs	r3, r3, #5
 8007906:	005b      	lsls	r3, r3, #1
 8007908:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800790c:	441e      	add	r6, r3
 800790e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007910:	4618      	mov	r0, r3
 8007912:	f04f 0100 	mov.w	r1, #0
 8007916:	4602      	mov	r2, r0
 8007918:	460b      	mov	r3, r1
 800791a:	1894      	adds	r4, r2, r2
 800791c:	623c      	str	r4, [r7, #32]
 800791e:	415b      	adcs	r3, r3
 8007920:	627b      	str	r3, [r7, #36]	; 0x24
 8007922:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007926:	1812      	adds	r2, r2, r0
 8007928:	eb41 0303 	adc.w	r3, r1, r3
 800792c:	f04f 0400 	mov.w	r4, #0
 8007930:	f04f 0500 	mov.w	r5, #0
 8007934:	00dd      	lsls	r5, r3, #3
 8007936:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800793a:	00d4      	lsls	r4, r2, #3
 800793c:	4622      	mov	r2, r4
 800793e:	462b      	mov	r3, r5
 8007940:	1814      	adds	r4, r2, r0
 8007942:	653c      	str	r4, [r7, #80]	; 0x50
 8007944:	414b      	adcs	r3, r1
 8007946:	657b      	str	r3, [r7, #84]	; 0x54
 8007948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	461a      	mov	r2, r3
 800794e:	f04f 0300 	mov.w	r3, #0
 8007952:	1891      	adds	r1, r2, r2
 8007954:	61b9      	str	r1, [r7, #24]
 8007956:	415b      	adcs	r3, r3
 8007958:	61fb      	str	r3, [r7, #28]
 800795a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800795e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007962:	f7f9 f9a1 	bl	8000ca8 <__aeabi_uldivmod>
 8007966:	4602      	mov	r2, r0
 8007968:	460b      	mov	r3, r1
 800796a:	4b6c      	ldr	r3, [pc, #432]	; (8007b1c <UART_SetConfig+0x38c>)
 800796c:	fba3 1302 	umull	r1, r3, r3, r2
 8007970:	095b      	lsrs	r3, r3, #5
 8007972:	2164      	movs	r1, #100	; 0x64
 8007974:	fb01 f303 	mul.w	r3, r1, r3
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	00db      	lsls	r3, r3, #3
 800797c:	3332      	adds	r3, #50	; 0x32
 800797e:	4a67      	ldr	r2, [pc, #412]	; (8007b1c <UART_SetConfig+0x38c>)
 8007980:	fba2 2303 	umull	r2, r3, r2, r3
 8007984:	095b      	lsrs	r3, r3, #5
 8007986:	f003 0207 	and.w	r2, r3, #7
 800798a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4432      	add	r2, r6
 8007990:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007992:	e0b9      	b.n	8007b08 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007994:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007996:	461c      	mov	r4, r3
 8007998:	f04f 0500 	mov.w	r5, #0
 800799c:	4622      	mov	r2, r4
 800799e:	462b      	mov	r3, r5
 80079a0:	1891      	adds	r1, r2, r2
 80079a2:	6139      	str	r1, [r7, #16]
 80079a4:	415b      	adcs	r3, r3
 80079a6:	617b      	str	r3, [r7, #20]
 80079a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80079ac:	1912      	adds	r2, r2, r4
 80079ae:	eb45 0303 	adc.w	r3, r5, r3
 80079b2:	f04f 0000 	mov.w	r0, #0
 80079b6:	f04f 0100 	mov.w	r1, #0
 80079ba:	00d9      	lsls	r1, r3, #3
 80079bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80079c0:	00d0      	lsls	r0, r2, #3
 80079c2:	4602      	mov	r2, r0
 80079c4:	460b      	mov	r3, r1
 80079c6:	eb12 0804 	adds.w	r8, r2, r4
 80079ca:	eb43 0905 	adc.w	r9, r3, r5
 80079ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	4618      	mov	r0, r3
 80079d4:	f04f 0100 	mov.w	r1, #0
 80079d8:	f04f 0200 	mov.w	r2, #0
 80079dc:	f04f 0300 	mov.w	r3, #0
 80079e0:	008b      	lsls	r3, r1, #2
 80079e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80079e6:	0082      	lsls	r2, r0, #2
 80079e8:	4640      	mov	r0, r8
 80079ea:	4649      	mov	r1, r9
 80079ec:	f7f9 f95c 	bl	8000ca8 <__aeabi_uldivmod>
 80079f0:	4602      	mov	r2, r0
 80079f2:	460b      	mov	r3, r1
 80079f4:	4b49      	ldr	r3, [pc, #292]	; (8007b1c <UART_SetConfig+0x38c>)
 80079f6:	fba3 2302 	umull	r2, r3, r3, r2
 80079fa:	095b      	lsrs	r3, r3, #5
 80079fc:	011e      	lsls	r6, r3, #4
 80079fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a00:	4618      	mov	r0, r3
 8007a02:	f04f 0100 	mov.w	r1, #0
 8007a06:	4602      	mov	r2, r0
 8007a08:	460b      	mov	r3, r1
 8007a0a:	1894      	adds	r4, r2, r2
 8007a0c:	60bc      	str	r4, [r7, #8]
 8007a0e:	415b      	adcs	r3, r3
 8007a10:	60fb      	str	r3, [r7, #12]
 8007a12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a16:	1812      	adds	r2, r2, r0
 8007a18:	eb41 0303 	adc.w	r3, r1, r3
 8007a1c:	f04f 0400 	mov.w	r4, #0
 8007a20:	f04f 0500 	mov.w	r5, #0
 8007a24:	00dd      	lsls	r5, r3, #3
 8007a26:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007a2a:	00d4      	lsls	r4, r2, #3
 8007a2c:	4622      	mov	r2, r4
 8007a2e:	462b      	mov	r3, r5
 8007a30:	1814      	adds	r4, r2, r0
 8007a32:	64bc      	str	r4, [r7, #72]	; 0x48
 8007a34:	414b      	adcs	r3, r1
 8007a36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f04f 0100 	mov.w	r1, #0
 8007a42:	f04f 0200 	mov.w	r2, #0
 8007a46:	f04f 0300 	mov.w	r3, #0
 8007a4a:	008b      	lsls	r3, r1, #2
 8007a4c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007a50:	0082      	lsls	r2, r0, #2
 8007a52:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007a56:	f7f9 f927 	bl	8000ca8 <__aeabi_uldivmod>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	4b2f      	ldr	r3, [pc, #188]	; (8007b1c <UART_SetConfig+0x38c>)
 8007a60:	fba3 1302 	umull	r1, r3, r3, r2
 8007a64:	095b      	lsrs	r3, r3, #5
 8007a66:	2164      	movs	r1, #100	; 0x64
 8007a68:	fb01 f303 	mul.w	r3, r1, r3
 8007a6c:	1ad3      	subs	r3, r2, r3
 8007a6e:	011b      	lsls	r3, r3, #4
 8007a70:	3332      	adds	r3, #50	; 0x32
 8007a72:	4a2a      	ldr	r2, [pc, #168]	; (8007b1c <UART_SetConfig+0x38c>)
 8007a74:	fba2 2303 	umull	r2, r3, r2, r3
 8007a78:	095b      	lsrs	r3, r3, #5
 8007a7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a7e:	441e      	add	r6, r3
 8007a80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a82:	4618      	mov	r0, r3
 8007a84:	f04f 0100 	mov.w	r1, #0
 8007a88:	4602      	mov	r2, r0
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	1894      	adds	r4, r2, r2
 8007a8e:	603c      	str	r4, [r7, #0]
 8007a90:	415b      	adcs	r3, r3
 8007a92:	607b      	str	r3, [r7, #4]
 8007a94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a98:	1812      	adds	r2, r2, r0
 8007a9a:	eb41 0303 	adc.w	r3, r1, r3
 8007a9e:	f04f 0400 	mov.w	r4, #0
 8007aa2:	f04f 0500 	mov.w	r5, #0
 8007aa6:	00dd      	lsls	r5, r3, #3
 8007aa8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007aac:	00d4      	lsls	r4, r2, #3
 8007aae:	4622      	mov	r2, r4
 8007ab0:	462b      	mov	r3, r5
 8007ab2:	eb12 0a00 	adds.w	sl, r2, r0
 8007ab6:	eb43 0b01 	adc.w	fp, r3, r1
 8007aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f04f 0100 	mov.w	r1, #0
 8007ac4:	f04f 0200 	mov.w	r2, #0
 8007ac8:	f04f 0300 	mov.w	r3, #0
 8007acc:	008b      	lsls	r3, r1, #2
 8007ace:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007ad2:	0082      	lsls	r2, r0, #2
 8007ad4:	4650      	mov	r0, sl
 8007ad6:	4659      	mov	r1, fp
 8007ad8:	f7f9 f8e6 	bl	8000ca8 <__aeabi_uldivmod>
 8007adc:	4602      	mov	r2, r0
 8007ade:	460b      	mov	r3, r1
 8007ae0:	4b0e      	ldr	r3, [pc, #56]	; (8007b1c <UART_SetConfig+0x38c>)
 8007ae2:	fba3 1302 	umull	r1, r3, r3, r2
 8007ae6:	095b      	lsrs	r3, r3, #5
 8007ae8:	2164      	movs	r1, #100	; 0x64
 8007aea:	fb01 f303 	mul.w	r3, r1, r3
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	011b      	lsls	r3, r3, #4
 8007af2:	3332      	adds	r3, #50	; 0x32
 8007af4:	4a09      	ldr	r2, [pc, #36]	; (8007b1c <UART_SetConfig+0x38c>)
 8007af6:	fba2 2303 	umull	r2, r3, r2, r3
 8007afa:	095b      	lsrs	r3, r3, #5
 8007afc:	f003 020f 	and.w	r2, r3, #15
 8007b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4432      	add	r2, r6
 8007b06:	609a      	str	r2, [r3, #8]
}
 8007b08:	bf00      	nop
 8007b0a:	377c      	adds	r7, #124	; 0x7c
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b12:	bf00      	nop
 8007b14:	40011000 	.word	0x40011000
 8007b18:	40011400 	.word	0x40011400
 8007b1c:	51eb851f 	.word	0x51eb851f

08007b20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b20:	b084      	sub	sp, #16
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b084      	sub	sp, #16
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
 8007b2a:	f107 001c 	add.w	r0, r7, #28
 8007b2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d122      	bne.n	8007b7e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d105      	bne.n	8007b72 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f001 fb1c 	bl	80091b0 <USB_CoreReset>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	73fb      	strb	r3, [r7, #15]
 8007b7c:	e01a      	b.n	8007bb4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f001 fb10 	bl	80091b0 <USB_CoreReset>
 8007b90:	4603      	mov	r3, r0
 8007b92:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d106      	bne.n	8007ba8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	639a      	str	r2, [r3, #56]	; 0x38
 8007ba6:	e005      	b.n	8007bb4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d10b      	bne.n	8007bd2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	f043 0206 	orr.w	r2, r3, #6
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	f043 0220 	orr.w	r2, r3, #32
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007bde:	b004      	add	sp, #16
 8007be0:	4770      	bx	lr
	...

08007be4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b087      	sub	sp, #28
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007bf2:	79fb      	ldrb	r3, [r7, #7]
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d165      	bne.n	8007cc4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	4a41      	ldr	r2, [pc, #260]	; (8007d00 <USB_SetTurnaroundTime+0x11c>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d906      	bls.n	8007c0e <USB_SetTurnaroundTime+0x2a>
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	4a40      	ldr	r2, [pc, #256]	; (8007d04 <USB_SetTurnaroundTime+0x120>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d202      	bcs.n	8007c0e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007c08:	230f      	movs	r3, #15
 8007c0a:	617b      	str	r3, [r7, #20]
 8007c0c:	e062      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	4a3c      	ldr	r2, [pc, #240]	; (8007d04 <USB_SetTurnaroundTime+0x120>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d306      	bcc.n	8007c24 <USB_SetTurnaroundTime+0x40>
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	4a3b      	ldr	r2, [pc, #236]	; (8007d08 <USB_SetTurnaroundTime+0x124>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d202      	bcs.n	8007c24 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007c1e:	230e      	movs	r3, #14
 8007c20:	617b      	str	r3, [r7, #20]
 8007c22:	e057      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	4a38      	ldr	r2, [pc, #224]	; (8007d08 <USB_SetTurnaroundTime+0x124>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d306      	bcc.n	8007c3a <USB_SetTurnaroundTime+0x56>
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	4a37      	ldr	r2, [pc, #220]	; (8007d0c <USB_SetTurnaroundTime+0x128>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d202      	bcs.n	8007c3a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007c34:	230d      	movs	r3, #13
 8007c36:	617b      	str	r3, [r7, #20]
 8007c38:	e04c      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	4a33      	ldr	r2, [pc, #204]	; (8007d0c <USB_SetTurnaroundTime+0x128>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d306      	bcc.n	8007c50 <USB_SetTurnaroundTime+0x6c>
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	4a32      	ldr	r2, [pc, #200]	; (8007d10 <USB_SetTurnaroundTime+0x12c>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d802      	bhi.n	8007c50 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007c4a:	230c      	movs	r3, #12
 8007c4c:	617b      	str	r3, [r7, #20]
 8007c4e:	e041      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	4a2f      	ldr	r2, [pc, #188]	; (8007d10 <USB_SetTurnaroundTime+0x12c>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d906      	bls.n	8007c66 <USB_SetTurnaroundTime+0x82>
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	4a2e      	ldr	r2, [pc, #184]	; (8007d14 <USB_SetTurnaroundTime+0x130>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d802      	bhi.n	8007c66 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007c60:	230b      	movs	r3, #11
 8007c62:	617b      	str	r3, [r7, #20]
 8007c64:	e036      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	4a2a      	ldr	r2, [pc, #168]	; (8007d14 <USB_SetTurnaroundTime+0x130>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d906      	bls.n	8007c7c <USB_SetTurnaroundTime+0x98>
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	4a29      	ldr	r2, [pc, #164]	; (8007d18 <USB_SetTurnaroundTime+0x134>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d802      	bhi.n	8007c7c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007c76:	230a      	movs	r3, #10
 8007c78:	617b      	str	r3, [r7, #20]
 8007c7a:	e02b      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	4a26      	ldr	r2, [pc, #152]	; (8007d18 <USB_SetTurnaroundTime+0x134>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d906      	bls.n	8007c92 <USB_SetTurnaroundTime+0xae>
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	4a25      	ldr	r2, [pc, #148]	; (8007d1c <USB_SetTurnaroundTime+0x138>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d202      	bcs.n	8007c92 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007c8c:	2309      	movs	r3, #9
 8007c8e:	617b      	str	r3, [r7, #20]
 8007c90:	e020      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	4a21      	ldr	r2, [pc, #132]	; (8007d1c <USB_SetTurnaroundTime+0x138>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d306      	bcc.n	8007ca8 <USB_SetTurnaroundTime+0xc4>
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	4a20      	ldr	r2, [pc, #128]	; (8007d20 <USB_SetTurnaroundTime+0x13c>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d802      	bhi.n	8007ca8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007ca2:	2308      	movs	r3, #8
 8007ca4:	617b      	str	r3, [r7, #20]
 8007ca6:	e015      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	4a1d      	ldr	r2, [pc, #116]	; (8007d20 <USB_SetTurnaroundTime+0x13c>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d906      	bls.n	8007cbe <USB_SetTurnaroundTime+0xda>
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	4a1c      	ldr	r2, [pc, #112]	; (8007d24 <USB_SetTurnaroundTime+0x140>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d202      	bcs.n	8007cbe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007cb8:	2307      	movs	r3, #7
 8007cba:	617b      	str	r3, [r7, #20]
 8007cbc:	e00a      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007cbe:	2306      	movs	r3, #6
 8007cc0:	617b      	str	r3, [r7, #20]
 8007cc2:	e007      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007cc4:	79fb      	ldrb	r3, [r7, #7]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d102      	bne.n	8007cd0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007cca:	2309      	movs	r3, #9
 8007ccc:	617b      	str	r3, [r7, #20]
 8007cce:	e001      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007cd0:	2309      	movs	r3, #9
 8007cd2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	68da      	ldr	r2, [r3, #12]
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	029b      	lsls	r3, r3, #10
 8007ce8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007cec:	431a      	orrs	r2, r3
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	371c      	adds	r7, #28
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr
 8007d00:	00d8acbf 	.word	0x00d8acbf
 8007d04:	00e4e1c0 	.word	0x00e4e1c0
 8007d08:	00f42400 	.word	0x00f42400
 8007d0c:	01067380 	.word	0x01067380
 8007d10:	011a499f 	.word	0x011a499f
 8007d14:	01312cff 	.word	0x01312cff
 8007d18:	014ca43f 	.word	0x014ca43f
 8007d1c:	016e3600 	.word	0x016e3600
 8007d20:	01a6ab1f 	.word	0x01a6ab1f
 8007d24:	01e84800 	.word	0x01e84800

08007d28 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	f043 0201 	orr.w	r2, r3, #1
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	370c      	adds	r7, #12
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr

08007d4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d4a:	b480      	push	{r7}
 8007d4c:	b083      	sub	sp, #12
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f023 0201 	bic.w	r2, r3, #1
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	460b      	mov	r3, r1
 8007d76:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007d88:	78fb      	ldrb	r3, [r7, #3]
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d115      	bne.n	8007dba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007d9a:	2001      	movs	r0, #1
 8007d9c:	f7fa fdaa 	bl	80028f4 <HAL_Delay>
      ms++;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	3301      	adds	r3, #1
 8007da4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f001 f972 	bl	8009090 <USB_GetMode>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d01e      	beq.n	8007df0 <USB_SetCurrentMode+0x84>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2b31      	cmp	r3, #49	; 0x31
 8007db6:	d9f0      	bls.n	8007d9a <USB_SetCurrentMode+0x2e>
 8007db8:	e01a      	b.n	8007df0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007dba:	78fb      	ldrb	r3, [r7, #3]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d115      	bne.n	8007dec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007dcc:	2001      	movs	r0, #1
 8007dce:	f7fa fd91 	bl	80028f4 <HAL_Delay>
      ms++;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f001 f959 	bl	8009090 <USB_GetMode>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d005      	beq.n	8007df0 <USB_SetCurrentMode+0x84>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2b31      	cmp	r3, #49	; 0x31
 8007de8:	d9f0      	bls.n	8007dcc <USB_SetCurrentMode+0x60>
 8007dea:	e001      	b.n	8007df0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e005      	b.n	8007dfc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2b32      	cmp	r3, #50	; 0x32
 8007df4:	d101      	bne.n	8007dfa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e000      	b.n	8007dfc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3710      	adds	r7, #16
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e04:	b084      	sub	sp, #16
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b086      	sub	sp, #24
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007e12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007e16:	2300      	movs	r3, #0
 8007e18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007e1e:	2300      	movs	r3, #0
 8007e20:	613b      	str	r3, [r7, #16]
 8007e22:	e009      	b.n	8007e38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	3340      	adds	r3, #64	; 0x40
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	4413      	add	r3, r2
 8007e2e:	2200      	movs	r2, #0
 8007e30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	3301      	adds	r3, #1
 8007e36:	613b      	str	r3, [r7, #16]
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	2b0e      	cmp	r3, #14
 8007e3c:	d9f2      	bls.n	8007e24 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d11c      	bne.n	8007e7e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e52:	f043 0302 	orr.w	r3, r3, #2
 8007e56:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e68:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e74:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	639a      	str	r2, [r3, #56]	; 0x38
 8007e7c:	e00b      	b.n	8007e96 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e82:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e8e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	680b      	ldr	r3, [r1, #0]
 8007eb4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d10c      	bne.n	8007ed6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d104      	bne.n	8007ecc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 f945 	bl	8008154 <USB_SetDevSpeed>
 8007eca:	e008      	b.n	8007ede <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007ecc:	2101      	movs	r1, #1
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f940 	bl	8008154 <USB_SetDevSpeed>
 8007ed4:	e003      	b.n	8007ede <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007ed6:	2103      	movs	r1, #3
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 f93b 	bl	8008154 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007ede:	2110      	movs	r1, #16
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 f8f3 	bl	80080cc <USB_FlushTxFifo>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d001      	beq.n	8007ef0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 f90f 	bl	8008114 <USB_FlushRxFifo>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d001      	beq.n	8007f00 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f06:	461a      	mov	r2, r3
 8007f08:	2300      	movs	r3, #0
 8007f0a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f12:	461a      	mov	r2, r3
 8007f14:	2300      	movs	r3, #0
 8007f16:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f1e:	461a      	mov	r2, r3
 8007f20:	2300      	movs	r3, #0
 8007f22:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f24:	2300      	movs	r3, #0
 8007f26:	613b      	str	r3, [r7, #16]
 8007f28:	e043      	b.n	8007fb2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	015a      	lsls	r2, r3, #5
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	4413      	add	r3, r2
 8007f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f40:	d118      	bne.n	8007f74 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d10a      	bne.n	8007f5e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	015a      	lsls	r2, r3, #5
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f54:	461a      	mov	r2, r3
 8007f56:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f5a:	6013      	str	r3, [r2, #0]
 8007f5c:	e013      	b.n	8007f86 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	015a      	lsls	r2, r3, #5
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	4413      	add	r3, r2
 8007f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007f70:	6013      	str	r3, [r2, #0]
 8007f72:	e008      	b.n	8007f86 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	015a      	lsls	r2, r3, #5
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	4413      	add	r3, r2
 8007f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f80:	461a      	mov	r2, r3
 8007f82:	2300      	movs	r3, #0
 8007f84:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	015a      	lsls	r2, r3, #5
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f92:	461a      	mov	r2, r3
 8007f94:	2300      	movs	r3, #0
 8007f96:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	015a      	lsls	r2, r3, #5
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007faa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	3301      	adds	r3, #1
 8007fb0:	613b      	str	r3, [r7, #16]
 8007fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb4:	693a      	ldr	r2, [r7, #16]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d3b7      	bcc.n	8007f2a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fba:	2300      	movs	r3, #0
 8007fbc:	613b      	str	r3, [r7, #16]
 8007fbe:	e043      	b.n	8008048 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	015a      	lsls	r2, r3, #5
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fd6:	d118      	bne.n	800800a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d10a      	bne.n	8007ff4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	015a      	lsls	r2, r3, #5
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fea:	461a      	mov	r2, r3
 8007fec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ff0:	6013      	str	r3, [r2, #0]
 8007ff2:	e013      	b.n	800801c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	015a      	lsls	r2, r3, #5
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008000:	461a      	mov	r2, r3
 8008002:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008006:	6013      	str	r3, [r2, #0]
 8008008:	e008      	b.n	800801c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	015a      	lsls	r2, r3, #5
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	4413      	add	r3, r2
 8008012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008016:	461a      	mov	r2, r3
 8008018:	2300      	movs	r3, #0
 800801a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	015a      	lsls	r2, r3, #5
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	4413      	add	r3, r2
 8008024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008028:	461a      	mov	r2, r3
 800802a:	2300      	movs	r3, #0
 800802c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	015a      	lsls	r2, r3, #5
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	4413      	add	r3, r2
 8008036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800803a:	461a      	mov	r2, r3
 800803c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008040:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	3301      	adds	r3, #1
 8008046:	613b      	str	r3, [r7, #16]
 8008048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804a:	693a      	ldr	r2, [r7, #16]
 800804c:	429a      	cmp	r2, r3
 800804e:	d3b7      	bcc.n	8007fc0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800805e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008062:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008070:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008074:	2b00      	cmp	r3, #0
 8008076:	d105      	bne.n	8008084 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	699b      	ldr	r3, [r3, #24]
 800807c:	f043 0210 	orr.w	r2, r3, #16
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	699a      	ldr	r2, [r3, #24]
 8008088:	4b0f      	ldr	r3, [pc, #60]	; (80080c8 <USB_DevInit+0x2c4>)
 800808a:	4313      	orrs	r3, r2
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008092:	2b00      	cmp	r3, #0
 8008094:	d005      	beq.n	80080a2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	699b      	ldr	r3, [r3, #24]
 800809a:	f043 0208 	orr.w	r2, r3, #8
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80080a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d107      	bne.n	80080b8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	699b      	ldr	r3, [r3, #24]
 80080ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80080b0:	f043 0304 	orr.w	r3, r3, #4
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80080b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3718      	adds	r7, #24
 80080be:	46bd      	mov	sp, r7
 80080c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80080c4:	b004      	add	sp, #16
 80080c6:	4770      	bx	lr
 80080c8:	803c3800 	.word	0x803c3800

080080cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80080d6:	2300      	movs	r3, #0
 80080d8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	019b      	lsls	r3, r3, #6
 80080de:	f043 0220 	orr.w	r2, r3, #32
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	3301      	adds	r3, #1
 80080ea:	60fb      	str	r3, [r7, #12]
 80080ec:	4a08      	ldr	r2, [pc, #32]	; (8008110 <USB_FlushTxFifo+0x44>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d901      	bls.n	80080f6 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80080f2:	2303      	movs	r3, #3
 80080f4:	e006      	b.n	8008104 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	f003 0320 	and.w	r3, r3, #32
 80080fe:	2b20      	cmp	r3, #32
 8008100:	d0f1      	beq.n	80080e6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3714      	adds	r7, #20
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr
 8008110:	00030d40 	.word	0x00030d40

08008114 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800811c:	2300      	movs	r3, #0
 800811e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2210      	movs	r2, #16
 8008124:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	3301      	adds	r3, #1
 800812a:	60fb      	str	r3, [r7, #12]
 800812c:	4a08      	ldr	r2, [pc, #32]	; (8008150 <USB_FlushRxFifo+0x3c>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d901      	bls.n	8008136 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8008132:	2303      	movs	r3, #3
 8008134:	e006      	b.n	8008144 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	f003 0310 	and.w	r3, r3, #16
 800813e:	2b10      	cmp	r3, #16
 8008140:	d0f1      	beq.n	8008126 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	3714      	adds	r7, #20
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr
 8008150:	00030d40 	.word	0x00030d40

08008154 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	460b      	mov	r3, r1
 800815e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	78fb      	ldrb	r3, [r7, #3]
 800816e:	68f9      	ldr	r1, [r7, #12]
 8008170:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008174:	4313      	orrs	r3, r2
 8008176:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008178:	2300      	movs	r3, #0
}
 800817a:	4618      	mov	r0, r3
 800817c:	3714      	adds	r7, #20
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr

08008186 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008186:	b480      	push	{r7}
 8008188:	b087      	sub	sp, #28
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	f003 0306 	and.w	r3, r3, #6
 800819e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d102      	bne.n	80081ac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80081a6:	2300      	movs	r3, #0
 80081a8:	75fb      	strb	r3, [r7, #23]
 80081aa:	e00a      	b.n	80081c2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	d002      	beq.n	80081b8 <USB_GetDevSpeed+0x32>
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2b06      	cmp	r3, #6
 80081b6:	d102      	bne.n	80081be <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80081b8:	2302      	movs	r3, #2
 80081ba:	75fb      	strb	r3, [r7, #23]
 80081bc:	e001      	b.n	80081c2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80081be:	230f      	movs	r3, #15
 80081c0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80081c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	371c      	adds	r7, #28
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b085      	sub	sp, #20
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	785b      	ldrb	r3, [r3, #1]
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d13a      	bne.n	8008262 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081f2:	69da      	ldr	r2, [r3, #28]
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	f003 030f 	and.w	r3, r3, #15
 80081fc:	2101      	movs	r1, #1
 80081fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008202:	b29b      	uxth	r3, r3
 8008204:	68f9      	ldr	r1, [r7, #12]
 8008206:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800820a:	4313      	orrs	r3, r2
 800820c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	015a      	lsls	r2, r3, #5
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	4413      	add	r3, r2
 8008216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008220:	2b00      	cmp	r3, #0
 8008222:	d155      	bne.n	80082d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	015a      	lsls	r2, r3, #5
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	4413      	add	r3, r2
 800822c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	78db      	ldrb	r3, [r3, #3]
 800823e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008240:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	059b      	lsls	r3, r3, #22
 8008246:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008248:	4313      	orrs	r3, r2
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	0151      	lsls	r1, r2, #5
 800824e:	68fa      	ldr	r2, [r7, #12]
 8008250:	440a      	add	r2, r1
 8008252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800825a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800825e:	6013      	str	r3, [r2, #0]
 8008260:	e036      	b.n	80082d0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008268:	69da      	ldr	r2, [r3, #28]
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	f003 030f 	and.w	r3, r3, #15
 8008272:	2101      	movs	r1, #1
 8008274:	fa01 f303 	lsl.w	r3, r1, r3
 8008278:	041b      	lsls	r3, r3, #16
 800827a:	68f9      	ldr	r1, [r7, #12]
 800827c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008280:	4313      	orrs	r3, r2
 8008282:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	015a      	lsls	r2, r3, #5
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	4413      	add	r3, r2
 800828c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008296:	2b00      	cmp	r3, #0
 8008298:	d11a      	bne.n	80082d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	015a      	lsls	r2, r3, #5
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	4413      	add	r3, r2
 80082a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	78db      	ldrb	r3, [r3, #3]
 80082b4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80082b6:	430b      	orrs	r3, r1
 80082b8:	4313      	orrs	r3, r2
 80082ba:	68ba      	ldr	r2, [r7, #8]
 80082bc:	0151      	lsls	r1, r2, #5
 80082be:	68fa      	ldr	r2, [r7, #12]
 80082c0:	440a      	add	r2, r1
 80082c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082ce:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3714      	adds	r7, #20
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr
	...

080082e0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b085      	sub	sp, #20
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	785b      	ldrb	r3, [r3, #1]
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d161      	bne.n	80083c0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	015a      	lsls	r2, r3, #5
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	4413      	add	r3, r2
 8008304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800830e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008312:	d11f      	bne.n	8008354 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	015a      	lsls	r2, r3, #5
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	4413      	add	r3, r2
 800831c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68ba      	ldr	r2, [r7, #8]
 8008324:	0151      	lsls	r1, r2, #5
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	440a      	add	r2, r1
 800832a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800832e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008332:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	015a      	lsls	r2, r3, #5
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	4413      	add	r3, r2
 800833c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	68ba      	ldr	r2, [r7, #8]
 8008344:	0151      	lsls	r1, r2, #5
 8008346:	68fa      	ldr	r2, [r7, #12]
 8008348:	440a      	add	r2, r1
 800834a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800834e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008352:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800835a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	f003 030f 	and.w	r3, r3, #15
 8008364:	2101      	movs	r1, #1
 8008366:	fa01 f303 	lsl.w	r3, r1, r3
 800836a:	b29b      	uxth	r3, r3
 800836c:	43db      	mvns	r3, r3
 800836e:	68f9      	ldr	r1, [r7, #12]
 8008370:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008374:	4013      	ands	r3, r2
 8008376:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800837e:	69da      	ldr	r2, [r3, #28]
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	f003 030f 	and.w	r3, r3, #15
 8008388:	2101      	movs	r1, #1
 800838a:	fa01 f303 	lsl.w	r3, r1, r3
 800838e:	b29b      	uxth	r3, r3
 8008390:	43db      	mvns	r3, r3
 8008392:	68f9      	ldr	r1, [r7, #12]
 8008394:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008398:	4013      	ands	r3, r2
 800839a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	015a      	lsls	r2, r3, #5
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	4413      	add	r3, r2
 80083a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	0159      	lsls	r1, r3, #5
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	440b      	add	r3, r1
 80083b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083b6:	4619      	mov	r1, r3
 80083b8:	4b35      	ldr	r3, [pc, #212]	; (8008490 <USB_DeactivateEndpoint+0x1b0>)
 80083ba:	4013      	ands	r3, r2
 80083bc:	600b      	str	r3, [r1, #0]
 80083be:	e060      	b.n	8008482 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	015a      	lsls	r2, r3, #5
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	4413      	add	r3, r2
 80083c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083d6:	d11f      	bne.n	8008418 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	015a      	lsls	r2, r3, #5
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	4413      	add	r3, r2
 80083e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68ba      	ldr	r2, [r7, #8]
 80083e8:	0151      	lsls	r1, r2, #5
 80083ea:	68fa      	ldr	r2, [r7, #12]
 80083ec:	440a      	add	r2, r1
 80083ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80083f6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	015a      	lsls	r2, r3, #5
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	4413      	add	r3, r2
 8008400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	68ba      	ldr	r2, [r7, #8]
 8008408:	0151      	lsls	r1, r2, #5
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	440a      	add	r2, r1
 800840e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008412:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008416:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800841e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	f003 030f 	and.w	r3, r3, #15
 8008428:	2101      	movs	r1, #1
 800842a:	fa01 f303 	lsl.w	r3, r1, r3
 800842e:	041b      	lsls	r3, r3, #16
 8008430:	43db      	mvns	r3, r3
 8008432:	68f9      	ldr	r1, [r7, #12]
 8008434:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008438:	4013      	ands	r3, r2
 800843a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008442:	69da      	ldr	r2, [r3, #28]
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	f003 030f 	and.w	r3, r3, #15
 800844c:	2101      	movs	r1, #1
 800844e:	fa01 f303 	lsl.w	r3, r1, r3
 8008452:	041b      	lsls	r3, r3, #16
 8008454:	43db      	mvns	r3, r3
 8008456:	68f9      	ldr	r1, [r7, #12]
 8008458:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800845c:	4013      	ands	r3, r2
 800845e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	015a      	lsls	r2, r3, #5
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	4413      	add	r3, r2
 8008468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	0159      	lsls	r1, r3, #5
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	440b      	add	r3, r1
 8008476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800847a:	4619      	mov	r1, r3
 800847c:	4b05      	ldr	r3, [pc, #20]	; (8008494 <USB_DeactivateEndpoint+0x1b4>)
 800847e:	4013      	ands	r3, r2
 8008480:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	3714      	adds	r7, #20
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr
 8008490:	ec337800 	.word	0xec337800
 8008494:	eff37800 	.word	0xeff37800

08008498 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b08a      	sub	sp, #40	; 0x28
 800849c:	af02      	add	r7, sp, #8
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	4613      	mov	r3, r2
 80084a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	785b      	ldrb	r3, [r3, #1]
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	f040 815c 	bne.w	8008772 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	695b      	ldr	r3, [r3, #20]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d132      	bne.n	8008528 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	015a      	lsls	r2, r3, #5
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	4413      	add	r3, r2
 80084ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	69ba      	ldr	r2, [r7, #24]
 80084d2:	0151      	lsls	r1, r2, #5
 80084d4:	69fa      	ldr	r2, [r7, #28]
 80084d6:	440a      	add	r2, r1
 80084d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80084e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80084e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80084e6:	69bb      	ldr	r3, [r7, #24]
 80084e8:	015a      	lsls	r2, r3, #5
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	4413      	add	r3, r2
 80084ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	69ba      	ldr	r2, [r7, #24]
 80084f6:	0151      	lsls	r1, r2, #5
 80084f8:	69fa      	ldr	r2, [r7, #28]
 80084fa:	440a      	add	r2, r1
 80084fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008500:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008504:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	015a      	lsls	r2, r3, #5
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	4413      	add	r3, r2
 800850e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	69ba      	ldr	r2, [r7, #24]
 8008516:	0151      	lsls	r1, r2, #5
 8008518:	69fa      	ldr	r2, [r7, #28]
 800851a:	440a      	add	r2, r1
 800851c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008520:	0cdb      	lsrs	r3, r3, #19
 8008522:	04db      	lsls	r3, r3, #19
 8008524:	6113      	str	r3, [r2, #16]
 8008526:	e074      	b.n	8008612 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	015a      	lsls	r2, r3, #5
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	4413      	add	r3, r2
 8008530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	69ba      	ldr	r2, [r7, #24]
 8008538:	0151      	lsls	r1, r2, #5
 800853a:	69fa      	ldr	r2, [r7, #28]
 800853c:	440a      	add	r2, r1
 800853e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008542:	0cdb      	lsrs	r3, r3, #19
 8008544:	04db      	lsls	r3, r3, #19
 8008546:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	015a      	lsls	r2, r3, #5
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	4413      	add	r3, r2
 8008550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	69ba      	ldr	r2, [r7, #24]
 8008558:	0151      	lsls	r1, r2, #5
 800855a:	69fa      	ldr	r2, [r7, #28]
 800855c:	440a      	add	r2, r1
 800855e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008562:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008566:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800856a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	015a      	lsls	r2, r3, #5
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	4413      	add	r3, r2
 8008574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008578:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	6959      	ldr	r1, [r3, #20]
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	440b      	add	r3, r1
 8008584:	1e59      	subs	r1, r3, #1
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	fbb1 f3f3 	udiv	r3, r1, r3
 800858e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008590:	4b9d      	ldr	r3, [pc, #628]	; (8008808 <USB_EPStartXfer+0x370>)
 8008592:	400b      	ands	r3, r1
 8008594:	69b9      	ldr	r1, [r7, #24]
 8008596:	0148      	lsls	r0, r1, #5
 8008598:	69f9      	ldr	r1, [r7, #28]
 800859a:	4401      	add	r1, r0
 800859c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80085a0:	4313      	orrs	r3, r2
 80085a2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	015a      	lsls	r2, r3, #5
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	4413      	add	r3, r2
 80085ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085b0:	691a      	ldr	r2, [r3, #16]
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	695b      	ldr	r3, [r3, #20]
 80085b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085ba:	69b9      	ldr	r1, [r7, #24]
 80085bc:	0148      	lsls	r0, r1, #5
 80085be:	69f9      	ldr	r1, [r7, #28]
 80085c0:	4401      	add	r1, r0
 80085c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80085c6:	4313      	orrs	r3, r2
 80085c8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	78db      	ldrb	r3, [r3, #3]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d11f      	bne.n	8008612 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	015a      	lsls	r2, r3, #5
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	4413      	add	r3, r2
 80085da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	69ba      	ldr	r2, [r7, #24]
 80085e2:	0151      	lsls	r1, r2, #5
 80085e4:	69fa      	ldr	r2, [r7, #28]
 80085e6:	440a      	add	r2, r1
 80085e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085ec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80085f0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80085f2:	69bb      	ldr	r3, [r7, #24]
 80085f4:	015a      	lsls	r2, r3, #5
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	4413      	add	r3, r2
 80085fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085fe:	691b      	ldr	r3, [r3, #16]
 8008600:	69ba      	ldr	r2, [r7, #24]
 8008602:	0151      	lsls	r1, r2, #5
 8008604:	69fa      	ldr	r2, [r7, #28]
 8008606:	440a      	add	r2, r1
 8008608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800860c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008610:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008612:	79fb      	ldrb	r3, [r7, #7]
 8008614:	2b01      	cmp	r3, #1
 8008616:	d14b      	bne.n	80086b0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d009      	beq.n	8008634 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008620:	69bb      	ldr	r3, [r7, #24]
 8008622:	015a      	lsls	r2, r3, #5
 8008624:	69fb      	ldr	r3, [r7, #28]
 8008626:	4413      	add	r3, r2
 8008628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800862c:	461a      	mov	r2, r3
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	691b      	ldr	r3, [r3, #16]
 8008632:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	78db      	ldrb	r3, [r3, #3]
 8008638:	2b01      	cmp	r3, #1
 800863a:	d128      	bne.n	800868e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008648:	2b00      	cmp	r3, #0
 800864a:	d110      	bne.n	800866e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800864c:	69bb      	ldr	r3, [r7, #24]
 800864e:	015a      	lsls	r2, r3, #5
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	4413      	add	r3, r2
 8008654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	69ba      	ldr	r2, [r7, #24]
 800865c:	0151      	lsls	r1, r2, #5
 800865e:	69fa      	ldr	r2, [r7, #28]
 8008660:	440a      	add	r2, r1
 8008662:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008666:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800866a:	6013      	str	r3, [r2, #0]
 800866c:	e00f      	b.n	800868e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800866e:	69bb      	ldr	r3, [r7, #24]
 8008670:	015a      	lsls	r2, r3, #5
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	4413      	add	r3, r2
 8008676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	69ba      	ldr	r2, [r7, #24]
 800867e:	0151      	lsls	r1, r2, #5
 8008680:	69fa      	ldr	r2, [r7, #28]
 8008682:	440a      	add	r2, r1
 8008684:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800868c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	015a      	lsls	r2, r3, #5
 8008692:	69fb      	ldr	r3, [r7, #28]
 8008694:	4413      	add	r3, r2
 8008696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	69ba      	ldr	r2, [r7, #24]
 800869e:	0151      	lsls	r1, r2, #5
 80086a0:	69fa      	ldr	r2, [r7, #28]
 80086a2:	440a      	add	r2, r1
 80086a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80086ac:	6013      	str	r3, [r2, #0]
 80086ae:	e12f      	b.n	8008910 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	015a      	lsls	r2, r3, #5
 80086b4:	69fb      	ldr	r3, [r7, #28]
 80086b6:	4413      	add	r3, r2
 80086b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	69ba      	ldr	r2, [r7, #24]
 80086c0:	0151      	lsls	r1, r2, #5
 80086c2:	69fa      	ldr	r2, [r7, #28]
 80086c4:	440a      	add	r2, r1
 80086c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80086ce:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	78db      	ldrb	r3, [r3, #3]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d015      	beq.n	8008704 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	695b      	ldr	r3, [r3, #20]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f000 8117 	beq.w	8008910 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80086e2:	69fb      	ldr	r3, [r7, #28]
 80086e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	f003 030f 	and.w	r3, r3, #15
 80086f2:	2101      	movs	r1, #1
 80086f4:	fa01 f303 	lsl.w	r3, r1, r3
 80086f8:	69f9      	ldr	r1, [r7, #28]
 80086fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086fe:	4313      	orrs	r3, r2
 8008700:	634b      	str	r3, [r1, #52]	; 0x34
 8008702:	e105      	b.n	8008910 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008710:	2b00      	cmp	r3, #0
 8008712:	d110      	bne.n	8008736 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008714:	69bb      	ldr	r3, [r7, #24]
 8008716:	015a      	lsls	r2, r3, #5
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	4413      	add	r3, r2
 800871c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	69ba      	ldr	r2, [r7, #24]
 8008724:	0151      	lsls	r1, r2, #5
 8008726:	69fa      	ldr	r2, [r7, #28]
 8008728:	440a      	add	r2, r1
 800872a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800872e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008732:	6013      	str	r3, [r2, #0]
 8008734:	e00f      	b.n	8008756 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	015a      	lsls	r2, r3, #5
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	4413      	add	r3, r2
 800873e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	69ba      	ldr	r2, [r7, #24]
 8008746:	0151      	lsls	r1, r2, #5
 8008748:	69fa      	ldr	r2, [r7, #28]
 800874a:	440a      	add	r2, r1
 800874c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008754:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	68d9      	ldr	r1, [r3, #12]
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	781a      	ldrb	r2, [r3, #0]
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	695b      	ldr	r3, [r3, #20]
 8008762:	b298      	uxth	r0, r3
 8008764:	79fb      	ldrb	r3, [r7, #7]
 8008766:	9300      	str	r3, [sp, #0]
 8008768:	4603      	mov	r3, r0
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f000 fa2b 	bl	8008bc6 <USB_WritePacket>
 8008770:	e0ce      	b.n	8008910 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	015a      	lsls	r2, r3, #5
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	4413      	add	r3, r2
 800877a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	69ba      	ldr	r2, [r7, #24]
 8008782:	0151      	lsls	r1, r2, #5
 8008784:	69fa      	ldr	r2, [r7, #28]
 8008786:	440a      	add	r2, r1
 8008788:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800878c:	0cdb      	lsrs	r3, r3, #19
 800878e:	04db      	lsls	r3, r3, #19
 8008790:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	015a      	lsls	r2, r3, #5
 8008796:	69fb      	ldr	r3, [r7, #28]
 8008798:	4413      	add	r3, r2
 800879a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800879e:	691b      	ldr	r3, [r3, #16]
 80087a0:	69ba      	ldr	r2, [r7, #24]
 80087a2:	0151      	lsls	r1, r2, #5
 80087a4:	69fa      	ldr	r2, [r7, #28]
 80087a6:	440a      	add	r2, r1
 80087a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80087b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80087b4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	695b      	ldr	r3, [r3, #20]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d126      	bne.n	800880c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	015a      	lsls	r2, r3, #5
 80087c2:	69fb      	ldr	r3, [r7, #28]
 80087c4:	4413      	add	r3, r2
 80087c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ca:	691a      	ldr	r2, [r3, #16]
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087d4:	69b9      	ldr	r1, [r7, #24]
 80087d6:	0148      	lsls	r0, r1, #5
 80087d8:	69f9      	ldr	r1, [r7, #28]
 80087da:	4401      	add	r1, r0
 80087dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80087e0:	4313      	orrs	r3, r2
 80087e2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	015a      	lsls	r2, r3, #5
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	4413      	add	r3, r2
 80087ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	69ba      	ldr	r2, [r7, #24]
 80087f4:	0151      	lsls	r1, r2, #5
 80087f6:	69fa      	ldr	r2, [r7, #28]
 80087f8:	440a      	add	r2, r1
 80087fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008802:	6113      	str	r3, [r2, #16]
 8008804:	e036      	b.n	8008874 <USB_EPStartXfer+0x3dc>
 8008806:	bf00      	nop
 8008808:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	695a      	ldr	r2, [r3, #20]
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	4413      	add	r3, r2
 8008816:	1e5a      	subs	r2, r3, #1
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008820:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	015a      	lsls	r2, r3, #5
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	4413      	add	r3, r2
 800882a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800882e:	691a      	ldr	r2, [r3, #16]
 8008830:	8afb      	ldrh	r3, [r7, #22]
 8008832:	04d9      	lsls	r1, r3, #19
 8008834:	4b39      	ldr	r3, [pc, #228]	; (800891c <USB_EPStartXfer+0x484>)
 8008836:	400b      	ands	r3, r1
 8008838:	69b9      	ldr	r1, [r7, #24]
 800883a:	0148      	lsls	r0, r1, #5
 800883c:	69f9      	ldr	r1, [r7, #28]
 800883e:	4401      	add	r1, r0
 8008840:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008844:	4313      	orrs	r3, r2
 8008846:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	015a      	lsls	r2, r3, #5
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	4413      	add	r3, r2
 8008850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008854:	691a      	ldr	r2, [r3, #16]
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	8af9      	ldrh	r1, [r7, #22]
 800885c:	fb01 f303 	mul.w	r3, r1, r3
 8008860:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008864:	69b9      	ldr	r1, [r7, #24]
 8008866:	0148      	lsls	r0, r1, #5
 8008868:	69f9      	ldr	r1, [r7, #28]
 800886a:	4401      	add	r1, r0
 800886c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008870:	4313      	orrs	r3, r2
 8008872:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008874:	79fb      	ldrb	r3, [r7, #7]
 8008876:	2b01      	cmp	r3, #1
 8008878:	d10d      	bne.n	8008896 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	68db      	ldr	r3, [r3, #12]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d009      	beq.n	8008896 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	68d9      	ldr	r1, [r3, #12]
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	015a      	lsls	r2, r3, #5
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	4413      	add	r3, r2
 800888e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008892:	460a      	mov	r2, r1
 8008894:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	78db      	ldrb	r3, [r3, #3]
 800889a:	2b01      	cmp	r3, #1
 800889c:	d128      	bne.n	80088f0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800889e:	69fb      	ldr	r3, [r7, #28]
 80088a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d110      	bne.n	80088d0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	015a      	lsls	r2, r3, #5
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	4413      	add	r3, r2
 80088b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	69ba      	ldr	r2, [r7, #24]
 80088be:	0151      	lsls	r1, r2, #5
 80088c0:	69fa      	ldr	r2, [r7, #28]
 80088c2:	440a      	add	r2, r1
 80088c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80088cc:	6013      	str	r3, [r2, #0]
 80088ce:	e00f      	b.n	80088f0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	015a      	lsls	r2, r3, #5
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	4413      	add	r3, r2
 80088d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	69ba      	ldr	r2, [r7, #24]
 80088e0:	0151      	lsls	r1, r2, #5
 80088e2:	69fa      	ldr	r2, [r7, #28]
 80088e4:	440a      	add	r2, r1
 80088e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088ee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80088f0:	69bb      	ldr	r3, [r7, #24]
 80088f2:	015a      	lsls	r2, r3, #5
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	4413      	add	r3, r2
 80088f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	69ba      	ldr	r2, [r7, #24]
 8008900:	0151      	lsls	r1, r2, #5
 8008902:	69fa      	ldr	r2, [r7, #28]
 8008904:	440a      	add	r2, r1
 8008906:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800890a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800890e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	3720      	adds	r7, #32
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	1ff80000 	.word	0x1ff80000

08008920 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008920:	b480      	push	{r7}
 8008922:	b087      	sub	sp, #28
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	4613      	mov	r3, r2
 800892c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	785b      	ldrb	r3, [r3, #1]
 800893c:	2b01      	cmp	r3, #1
 800893e:	f040 80cd 	bne.w	8008adc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	695b      	ldr	r3, [r3, #20]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d132      	bne.n	80089b0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	015a      	lsls	r2, r3, #5
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	4413      	add	r3, r2
 8008952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008956:	691b      	ldr	r3, [r3, #16]
 8008958:	693a      	ldr	r2, [r7, #16]
 800895a:	0151      	lsls	r1, r2, #5
 800895c:	697a      	ldr	r2, [r7, #20]
 800895e:	440a      	add	r2, r1
 8008960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008964:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008968:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800896c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	015a      	lsls	r2, r3, #5
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	4413      	add	r3, r2
 8008976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	693a      	ldr	r2, [r7, #16]
 800897e:	0151      	lsls	r1, r2, #5
 8008980:	697a      	ldr	r2, [r7, #20]
 8008982:	440a      	add	r2, r1
 8008984:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008988:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800898c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	015a      	lsls	r2, r3, #5
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	4413      	add	r3, r2
 8008996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800899a:	691b      	ldr	r3, [r3, #16]
 800899c:	693a      	ldr	r2, [r7, #16]
 800899e:	0151      	lsls	r1, r2, #5
 80089a0:	697a      	ldr	r2, [r7, #20]
 80089a2:	440a      	add	r2, r1
 80089a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089a8:	0cdb      	lsrs	r3, r3, #19
 80089aa:	04db      	lsls	r3, r3, #19
 80089ac:	6113      	str	r3, [r2, #16]
 80089ae:	e04e      	b.n	8008a4e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	015a      	lsls	r2, r3, #5
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	4413      	add	r3, r2
 80089b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089bc:	691b      	ldr	r3, [r3, #16]
 80089be:	693a      	ldr	r2, [r7, #16]
 80089c0:	0151      	lsls	r1, r2, #5
 80089c2:	697a      	ldr	r2, [r7, #20]
 80089c4:	440a      	add	r2, r1
 80089c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089ca:	0cdb      	lsrs	r3, r3, #19
 80089cc:	04db      	lsls	r3, r3, #19
 80089ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	015a      	lsls	r2, r3, #5
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	4413      	add	r3, r2
 80089d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	693a      	ldr	r2, [r7, #16]
 80089e0:	0151      	lsls	r1, r2, #5
 80089e2:	697a      	ldr	r2, [r7, #20]
 80089e4:	440a      	add	r2, r1
 80089e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80089ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80089f2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	695a      	ldr	r2, [r3, #20]
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d903      	bls.n	8008a08 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	689a      	ldr	r2, [r3, #8]
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	015a      	lsls	r2, r3, #5
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	4413      	add	r3, r2
 8008a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a14:	691b      	ldr	r3, [r3, #16]
 8008a16:	693a      	ldr	r2, [r7, #16]
 8008a18:	0151      	lsls	r1, r2, #5
 8008a1a:	697a      	ldr	r2, [r7, #20]
 8008a1c:	440a      	add	r2, r1
 8008a1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	015a      	lsls	r2, r3, #5
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	4413      	add	r3, r2
 8008a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a34:	691a      	ldr	r2, [r3, #16]
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	695b      	ldr	r3, [r3, #20]
 8008a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a3e:	6939      	ldr	r1, [r7, #16]
 8008a40:	0148      	lsls	r0, r1, #5
 8008a42:	6979      	ldr	r1, [r7, #20]
 8008a44:	4401      	add	r1, r0
 8008a46:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008a4e:	79fb      	ldrb	r3, [r7, #7]
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d11e      	bne.n	8008a92 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	691b      	ldr	r3, [r3, #16]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d009      	beq.n	8008a70 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	015a      	lsls	r2, r3, #5
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	4413      	add	r3, r2
 8008a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a68:	461a      	mov	r2, r3
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	691b      	ldr	r3, [r3, #16]
 8008a6e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	015a      	lsls	r2, r3, #5
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	4413      	add	r3, r2
 8008a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	693a      	ldr	r2, [r7, #16]
 8008a80:	0151      	lsls	r1, r2, #5
 8008a82:	697a      	ldr	r2, [r7, #20]
 8008a84:	440a      	add	r2, r1
 8008a86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008a8e:	6013      	str	r3, [r2, #0]
 8008a90:	e092      	b.n	8008bb8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	015a      	lsls	r2, r3, #5
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	4413      	add	r3, r2
 8008a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	693a      	ldr	r2, [r7, #16]
 8008aa2:	0151      	lsls	r1, r2, #5
 8008aa4:	697a      	ldr	r2, [r7, #20]
 8008aa6:	440a      	add	r2, r1
 8008aa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008aac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ab0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	695b      	ldr	r3, [r3, #20]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d07e      	beq.n	8008bb8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ac0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	f003 030f 	and.w	r3, r3, #15
 8008aca:	2101      	movs	r1, #1
 8008acc:	fa01 f303 	lsl.w	r3, r1, r3
 8008ad0:	6979      	ldr	r1, [r7, #20]
 8008ad2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	634b      	str	r3, [r1, #52]	; 0x34
 8008ada:	e06d      	b.n	8008bb8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	015a      	lsls	r2, r3, #5
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	4413      	add	r3, r2
 8008ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ae8:	691b      	ldr	r3, [r3, #16]
 8008aea:	693a      	ldr	r2, [r7, #16]
 8008aec:	0151      	lsls	r1, r2, #5
 8008aee:	697a      	ldr	r2, [r7, #20]
 8008af0:	440a      	add	r2, r1
 8008af2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008af6:	0cdb      	lsrs	r3, r3, #19
 8008af8:	04db      	lsls	r3, r3, #19
 8008afa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	015a      	lsls	r2, r3, #5
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	4413      	add	r3, r2
 8008b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	693a      	ldr	r2, [r7, #16]
 8008b0c:	0151      	lsls	r1, r2, #5
 8008b0e:	697a      	ldr	r2, [r7, #20]
 8008b10:	440a      	add	r2, r1
 8008b12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b16:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008b1a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008b1e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	695b      	ldr	r3, [r3, #20]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d003      	beq.n	8008b30 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	689a      	ldr	r2, [r3, #8]
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	015a      	lsls	r2, r3, #5
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	4413      	add	r3, r2
 8008b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b3c:	691b      	ldr	r3, [r3, #16]
 8008b3e:	693a      	ldr	r2, [r7, #16]
 8008b40:	0151      	lsls	r1, r2, #5
 8008b42:	697a      	ldr	r2, [r7, #20]
 8008b44:	440a      	add	r2, r1
 8008b46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b4e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	015a      	lsls	r2, r3, #5
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	4413      	add	r3, r2
 8008b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b5c:	691a      	ldr	r2, [r3, #16]
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b66:	6939      	ldr	r1, [r7, #16]
 8008b68:	0148      	lsls	r0, r1, #5
 8008b6a:	6979      	ldr	r1, [r7, #20]
 8008b6c:	4401      	add	r1, r0
 8008b6e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008b72:	4313      	orrs	r3, r2
 8008b74:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008b76:	79fb      	ldrb	r3, [r7, #7]
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d10d      	bne.n	8008b98 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d009      	beq.n	8008b98 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	68d9      	ldr	r1, [r3, #12]
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	015a      	lsls	r2, r3, #5
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	4413      	add	r3, r2
 8008b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b94:	460a      	mov	r2, r1
 8008b96:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	015a      	lsls	r2, r3, #5
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	693a      	ldr	r2, [r7, #16]
 8008ba8:	0151      	lsls	r1, r2, #5
 8008baa:	697a      	ldr	r2, [r7, #20]
 8008bac:	440a      	add	r2, r1
 8008bae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008bb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	371c      	adds	r7, #28
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr

08008bc6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008bc6:	b480      	push	{r7}
 8008bc8:	b089      	sub	sp, #36	; 0x24
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	60f8      	str	r0, [r7, #12]
 8008bce:	60b9      	str	r1, [r7, #8]
 8008bd0:	4611      	mov	r1, r2
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	71fb      	strb	r3, [r7, #7]
 8008bd8:	4613      	mov	r3, r2
 8008bda:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008be4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d123      	bne.n	8008c34 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008bec:	88bb      	ldrh	r3, [r7, #4]
 8008bee:	3303      	adds	r3, #3
 8008bf0:	089b      	lsrs	r3, r3, #2
 8008bf2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	61bb      	str	r3, [r7, #24]
 8008bf8:	e018      	b.n	8008c2c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008bfa:	79fb      	ldrb	r3, [r7, #7]
 8008bfc:	031a      	lsls	r2, r3, #12
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	4413      	add	r3, r2
 8008c02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c06:	461a      	mov	r2, r3
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	3301      	adds	r3, #1
 8008c12:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	3301      	adds	r3, #1
 8008c18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008c20:	69fb      	ldr	r3, [r7, #28]
 8008c22:	3301      	adds	r3, #1
 8008c24:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	61bb      	str	r3, [r7, #24]
 8008c2c:	69ba      	ldr	r2, [r7, #24]
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d3e2      	bcc.n	8008bfa <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3724      	adds	r7, #36	; 0x24
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr

08008c42 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008c42:	b480      	push	{r7}
 8008c44:	b08b      	sub	sp, #44	; 0x2c
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	60f8      	str	r0, [r7, #12]
 8008c4a:	60b9      	str	r1, [r7, #8]
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008c58:	88fb      	ldrh	r3, [r7, #6]
 8008c5a:	089b      	lsrs	r3, r3, #2
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008c60:	88fb      	ldrh	r3, [r7, #6]
 8008c62:	f003 0303 	and.w	r3, r3, #3
 8008c66:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008c68:	2300      	movs	r3, #0
 8008c6a:	623b      	str	r3, [r7, #32]
 8008c6c:	e014      	b.n	8008c98 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008c6e:	69bb      	ldr	r3, [r7, #24]
 8008c70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c78:	601a      	str	r2, [r3, #0]
    pDest++;
 8008c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c82:	3301      	adds	r3, #1
 8008c84:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c88:	3301      	adds	r3, #1
 8008c8a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8e:	3301      	adds	r3, #1
 8008c90:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008c92:	6a3b      	ldr	r3, [r7, #32]
 8008c94:	3301      	adds	r3, #1
 8008c96:	623b      	str	r3, [r7, #32]
 8008c98:	6a3a      	ldr	r2, [r7, #32]
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d3e6      	bcc.n	8008c6e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008ca0:	8bfb      	ldrh	r3, [r7, #30]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d01e      	beq.n	8008ce4 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008caa:	69bb      	ldr	r3, [r7, #24]
 8008cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	f107 0310 	add.w	r3, r7, #16
 8008cb6:	6812      	ldr	r2, [r2, #0]
 8008cb8:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008cba:	693a      	ldr	r2, [r7, #16]
 8008cbc:	6a3b      	ldr	r3, [r7, #32]
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	00db      	lsls	r3, r3, #3
 8008cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8008cc6:	b2da      	uxtb	r2, r3
 8008cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cca:	701a      	strb	r2, [r3, #0]
      i++;
 8008ccc:	6a3b      	ldr	r3, [r7, #32]
 8008cce:	3301      	adds	r3, #1
 8008cd0:	623b      	str	r3, [r7, #32]
      pDest++;
 8008cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008cd8:	8bfb      	ldrh	r3, [r7, #30]
 8008cda:	3b01      	subs	r3, #1
 8008cdc:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008cde:	8bfb      	ldrh	r3, [r7, #30]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d1ea      	bne.n	8008cba <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	372c      	adds	r7, #44	; 0x2c
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr

08008cf2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008cf2:	b480      	push	{r7}
 8008cf4:	b085      	sub	sp, #20
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
 8008cfa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	785b      	ldrb	r3, [r3, #1]
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d12c      	bne.n	8008d68 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	015a      	lsls	r2, r3, #5
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	4413      	add	r3, r2
 8008d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	db12      	blt.n	8008d46 <USB_EPSetStall+0x54>
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00f      	beq.n	8008d46 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	015a      	lsls	r2, r3, #5
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	4413      	add	r3, r2
 8008d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	68ba      	ldr	r2, [r7, #8]
 8008d36:	0151      	lsls	r1, r2, #5
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	440a      	add	r2, r1
 8008d3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d40:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008d44:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	015a      	lsls	r2, r3, #5
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	68ba      	ldr	r2, [r7, #8]
 8008d56:	0151      	lsls	r1, r2, #5
 8008d58:	68fa      	ldr	r2, [r7, #12]
 8008d5a:	440a      	add	r2, r1
 8008d5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008d64:	6013      	str	r3, [r2, #0]
 8008d66:	e02b      	b.n	8008dc0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	015a      	lsls	r2, r3, #5
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	4413      	add	r3, r2
 8008d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	db12      	blt.n	8008da0 <USB_EPSetStall+0xae>
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00f      	beq.n	8008da0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	015a      	lsls	r2, r3, #5
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	4413      	add	r3, r2
 8008d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	68ba      	ldr	r2, [r7, #8]
 8008d90:	0151      	lsls	r1, r2, #5
 8008d92:	68fa      	ldr	r2, [r7, #12]
 8008d94:	440a      	add	r2, r1
 8008d96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008d9e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	015a      	lsls	r2, r3, #5
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	4413      	add	r3, r2
 8008da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	68ba      	ldr	r2, [r7, #8]
 8008db0:	0151      	lsls	r1, r2, #5
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	440a      	add	r2, r1
 8008db6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008dbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3714      	adds	r7, #20
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr

08008dce <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008dce:	b480      	push	{r7}
 8008dd0:	b085      	sub	sp, #20
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
 8008dd6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	785b      	ldrb	r3, [r3, #1]
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d128      	bne.n	8008e3c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	015a      	lsls	r2, r3, #5
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	4413      	add	r3, r2
 8008df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	68ba      	ldr	r2, [r7, #8]
 8008dfa:	0151      	lsls	r1, r2, #5
 8008dfc:	68fa      	ldr	r2, [r7, #12]
 8008dfe:	440a      	add	r2, r1
 8008e00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e08:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	78db      	ldrb	r3, [r3, #3]
 8008e0e:	2b03      	cmp	r3, #3
 8008e10:	d003      	beq.n	8008e1a <USB_EPClearStall+0x4c>
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	78db      	ldrb	r3, [r3, #3]
 8008e16:	2b02      	cmp	r3, #2
 8008e18:	d138      	bne.n	8008e8c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	015a      	lsls	r2, r3, #5
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	4413      	add	r3, r2
 8008e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	68ba      	ldr	r2, [r7, #8]
 8008e2a:	0151      	lsls	r1, r2, #5
 8008e2c:	68fa      	ldr	r2, [r7, #12]
 8008e2e:	440a      	add	r2, r1
 8008e30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e38:	6013      	str	r3, [r2, #0]
 8008e3a:	e027      	b.n	8008e8c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	015a      	lsls	r2, r3, #5
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	4413      	add	r3, r2
 8008e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	68ba      	ldr	r2, [r7, #8]
 8008e4c:	0151      	lsls	r1, r2, #5
 8008e4e:	68fa      	ldr	r2, [r7, #12]
 8008e50:	440a      	add	r2, r1
 8008e52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e5a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	78db      	ldrb	r3, [r3, #3]
 8008e60:	2b03      	cmp	r3, #3
 8008e62:	d003      	beq.n	8008e6c <USB_EPClearStall+0x9e>
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	78db      	ldrb	r3, [r3, #3]
 8008e68:	2b02      	cmp	r3, #2
 8008e6a:	d10f      	bne.n	8008e8c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	015a      	lsls	r2, r3, #5
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	4413      	add	r3, r2
 8008e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	68ba      	ldr	r2, [r7, #8]
 8008e7c:	0151      	lsls	r1, r2, #5
 8008e7e:	68fa      	ldr	r2, [r7, #12]
 8008e80:	440a      	add	r2, r1
 8008e82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e8a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3714      	adds	r7, #20
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr

08008e9a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008e9a:	b480      	push	{r7}
 8008e9c:	b085      	sub	sp, #20
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	68fa      	ldr	r2, [r7, #12]
 8008eb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008eb8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008ebc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	78fb      	ldrb	r3, [r7, #3]
 8008ec8:	011b      	lsls	r3, r3, #4
 8008eca:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008ece:	68f9      	ldr	r1, [r7, #12]
 8008ed0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008ed8:	2300      	movs	r3, #0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3714      	adds	r7, #20
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	b085      	sub	sp, #20
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	68fa      	ldr	r2, [r7, #12]
 8008efc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f00:	f023 0303 	bic.w	r3, r3, #3
 8008f04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f14:	f023 0302 	bic.w	r3, r3, #2
 8008f18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3714      	adds	r7, #20
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b085      	sub	sp, #20
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68fa      	ldr	r2, [r7, #12]
 8008f3e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f42:	f023 0303 	bic.w	r3, r3, #3
 8008f46:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	68fa      	ldr	r2, [r7, #12]
 8008f52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f56:	f043 0302 	orr.w	r3, r3, #2
 8008f5a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3714      	adds	r7, #20
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr

08008f6a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008f6a:	b480      	push	{r7}
 8008f6c:	b085      	sub	sp, #20
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	695b      	ldr	r3, [r3, #20]
 8008f76:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	699b      	ldr	r3, [r3, #24]
 8008f7c:	68fa      	ldr	r2, [r7, #12]
 8008f7e:	4013      	ands	r3, r2
 8008f80:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008f82:	68fb      	ldr	r3, [r7, #12]
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3714      	adds	r7, #20
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b085      	sub	sp, #20
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fa2:	699b      	ldr	r3, [r3, #24]
 8008fa4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fac:	69db      	ldr	r3, [r3, #28]
 8008fae:	68ba      	ldr	r2, [r7, #8]
 8008fb0:	4013      	ands	r3, r2
 8008fb2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	0c1b      	lsrs	r3, r3, #16
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3714      	adds	r7, #20
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b085      	sub	sp, #20
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fd6:	699b      	ldr	r3, [r3, #24]
 8008fd8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fe0:	69db      	ldr	r3, [r3, #28]
 8008fe2:	68ba      	ldr	r2, [r7, #8]
 8008fe4:	4013      	ands	r3, r2
 8008fe6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	b29b      	uxth	r3, r3
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3714      	adds	r7, #20
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b085      	sub	sp, #20
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	460b      	mov	r3, r1
 8009002:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009008:	78fb      	ldrb	r3, [r7, #3]
 800900a:	015a      	lsls	r2, r3, #5
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	4413      	add	r3, r2
 8009010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009014:	689b      	ldr	r3, [r3, #8]
 8009016:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800901e:	695b      	ldr	r3, [r3, #20]
 8009020:	68ba      	ldr	r2, [r7, #8]
 8009022:	4013      	ands	r3, r2
 8009024:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009026:	68bb      	ldr	r3, [r7, #8]
}
 8009028:	4618      	mov	r0, r3
 800902a:	3714      	adds	r7, #20
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009034:	b480      	push	{r7}
 8009036:	b087      	sub	sp, #28
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	460b      	mov	r3, r1
 800903e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800904a:	691b      	ldr	r3, [r3, #16]
 800904c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009056:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009058:	78fb      	ldrb	r3, [r7, #3]
 800905a:	f003 030f 	and.w	r3, r3, #15
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	fa22 f303 	lsr.w	r3, r2, r3
 8009064:	01db      	lsls	r3, r3, #7
 8009066:	b2db      	uxtb	r3, r3
 8009068:	693a      	ldr	r2, [r7, #16]
 800906a:	4313      	orrs	r3, r2
 800906c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800906e:	78fb      	ldrb	r3, [r7, #3]
 8009070:	015a      	lsls	r2, r3, #5
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	4413      	add	r3, r2
 8009076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800907a:	689b      	ldr	r3, [r3, #8]
 800907c:	693a      	ldr	r2, [r7, #16]
 800907e:	4013      	ands	r3, r2
 8009080:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009082:	68bb      	ldr	r3, [r7, #8]
}
 8009084:	4618      	mov	r0, r3
 8009086:	371c      	adds	r7, #28
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr

08009090 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	695b      	ldr	r3, [r3, #20]
 800909c:	f003 0301 	and.w	r3, r3, #1
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b085      	sub	sp, #20
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	68fa      	ldr	r2, [r7, #12]
 80090c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090c6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80090ca:	f023 0307 	bic.w	r3, r3, #7
 80090ce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	68fa      	ldr	r2, [r7, #12]
 80090da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3714      	adds	r7, #20
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
	...

080090f4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b087      	sub	sp, #28
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	460b      	mov	r3, r1
 80090fe:	607a      	str	r2, [r7, #4]
 8009100:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	333c      	adds	r3, #60	; 0x3c
 800910a:	3304      	adds	r3, #4
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	4a26      	ldr	r2, [pc, #152]	; (80091ac <USB_EP0_OutStart+0xb8>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d90a      	bls.n	800912e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009124:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009128:	d101      	bne.n	800912e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800912a:	2300      	movs	r3, #0
 800912c:	e037      	b.n	800919e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009134:	461a      	mov	r2, r3
 8009136:	2300      	movs	r3, #0
 8009138:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	697a      	ldr	r2, [r7, #20]
 8009144:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009148:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800914c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009154:	691b      	ldr	r3, [r3, #16]
 8009156:	697a      	ldr	r2, [r7, #20]
 8009158:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800915c:	f043 0318 	orr.w	r3, r3, #24
 8009160:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009168:	691b      	ldr	r3, [r3, #16]
 800916a:	697a      	ldr	r2, [r7, #20]
 800916c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009170:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009174:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009176:	7afb      	ldrb	r3, [r7, #11]
 8009178:	2b01      	cmp	r3, #1
 800917a:	d10f      	bne.n	800919c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009182:	461a      	mov	r2, r3
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	697a      	ldr	r2, [r7, #20]
 8009192:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009196:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800919a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	371c      	adds	r7, #28
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr
 80091aa:	bf00      	nop
 80091ac:	4f54300a 	.word	0x4f54300a

080091b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b085      	sub	sp, #20
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80091b8:	2300      	movs	r3, #0
 80091ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	3301      	adds	r3, #1
 80091c0:	60fb      	str	r3, [r7, #12]
 80091c2:	4a13      	ldr	r2, [pc, #76]	; (8009210 <USB_CoreReset+0x60>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d901      	bls.n	80091cc <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80091c8:	2303      	movs	r3, #3
 80091ca:	e01a      	b.n	8009202 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	691b      	ldr	r3, [r3, #16]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	daf3      	bge.n	80091bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80091d4:	2300      	movs	r3, #0
 80091d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	691b      	ldr	r3, [r3, #16]
 80091dc:	f043 0201 	orr.w	r2, r3, #1
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	3301      	adds	r3, #1
 80091e8:	60fb      	str	r3, [r7, #12]
 80091ea:	4a09      	ldr	r2, [pc, #36]	; (8009210 <USB_CoreReset+0x60>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d901      	bls.n	80091f4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80091f0:	2303      	movs	r3, #3
 80091f2:	e006      	b.n	8009202 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	691b      	ldr	r3, [r3, #16]
 80091f8:	f003 0301 	and.w	r3, r3, #1
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d0f1      	beq.n	80091e4 <USB_CoreReset+0x34>

  return HAL_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	3714      	adds	r7, #20
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr
 800920e:	bf00      	nop
 8009210:	00030d40 	.word	0x00030d40

08009214 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009218:	4904      	ldr	r1, [pc, #16]	; (800922c <MX_FATFS_Init+0x18>)
 800921a:	4805      	ldr	r0, [pc, #20]	; (8009230 <MX_FATFS_Init+0x1c>)
 800921c:	f002 f9f0 	bl	800b600 <FATFS_LinkDriver>
 8009220:	4603      	mov	r3, r0
 8009222:	461a      	mov	r2, r3
 8009224:	4b03      	ldr	r3, [pc, #12]	; (8009234 <MX_FATFS_Init+0x20>)
 8009226:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009228:	bf00      	nop
 800922a:	bd80      	pop	{r7, pc}
 800922c:	20000ed0 	.word	0x20000ed0
 8009230:	2000000c 	.word	0x2000000c
 8009234:	20000ed4 	.word	0x20000ed4

08009238 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
 800923e:	4603      	mov	r3, r0
 8009240:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8009242:	79fb      	ldrb	r3, [r7, #7]
 8009244:	4618      	mov	r0, r3
 8009246:	f000 f9dd 	bl	8009604 <USER_SPI_initialize>
 800924a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800924c:	4618      	mov	r0, r3
 800924e:	3708      	adds	r7, #8
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af00      	add	r7, sp, #0
 800925a:	4603      	mov	r3, r0
 800925c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800925e:	79fb      	ldrb	r3, [r7, #7]
 8009260:	4618      	mov	r0, r3
 8009262:	f000 fab9 	bl	80097d8 <USER_SPI_status>
 8009266:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8009268:	4618      	mov	r0, r3
 800926a:	3708      	adds	r7, #8
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	60b9      	str	r1, [r7, #8]
 8009278:	607a      	str	r2, [r7, #4]
 800927a:	603b      	str	r3, [r7, #0]
 800927c:	4603      	mov	r3, r0
 800927e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8009280:	7bf8      	ldrb	r0, [r7, #15]
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	68b9      	ldr	r1, [r7, #8]
 8009288:	f000 fabc 	bl	8009804 <USER_SPI_read>
 800928c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800928e:	4618      	mov	r0, r3
 8009290:	3710      	adds	r7, #16
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009296:	b580      	push	{r7, lr}
 8009298:	b084      	sub	sp, #16
 800929a:	af00      	add	r7, sp, #0
 800929c:	60b9      	str	r1, [r7, #8]
 800929e:	607a      	str	r2, [r7, #4]
 80092a0:	603b      	str	r3, [r7, #0]
 80092a2:	4603      	mov	r3, r0
 80092a4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 80092a6:	7bf8      	ldrb	r0, [r7, #15]
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	68b9      	ldr	r1, [r7, #8]
 80092ae:	f000 fb0f 	bl	80098d0 <USER_SPI_write>
 80092b2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	4603      	mov	r3, r0
 80092c4:	603a      	str	r2, [r7, #0]
 80092c6:	71fb      	strb	r3, [r7, #7]
 80092c8:	460b      	mov	r3, r1
 80092ca:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 80092cc:	79b9      	ldrb	r1, [r7, #6]
 80092ce:	79fb      	ldrb	r3, [r7, #7]
 80092d0:	683a      	ldr	r2, [r7, #0]
 80092d2:	4618      	mov	r0, r3
 80092d4:	f000 fb78 	bl	80099c8 <USER_SPI_ioctl>
 80092d8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3708      	adds	r7, #8
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
	...

080092e4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80092ec:	f7f9 faf6 	bl	80028dc <HAL_GetTick>
 80092f0:	4603      	mov	r3, r0
 80092f2:	4a04      	ldr	r2, [pc, #16]	; (8009304 <SPI_Timer_On+0x20>)
 80092f4:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80092f6:	4a04      	ldr	r2, [pc, #16]	; (8009308 <SPI_Timer_On+0x24>)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6013      	str	r3, [r2, #0]
}
 80092fc:	bf00      	nop
 80092fe:	3708      	adds	r7, #8
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}
 8009304:	20001338 	.word	0x20001338
 8009308:	2000133c 	.word	0x2000133c

0800930c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800930c:	b580      	push	{r7, lr}
 800930e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8009310:	f7f9 fae4 	bl	80028dc <HAL_GetTick>
 8009314:	4602      	mov	r2, r0
 8009316:	4b06      	ldr	r3, [pc, #24]	; (8009330 <SPI_Timer_Status+0x24>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	1ad2      	subs	r2, r2, r3
 800931c:	4b05      	ldr	r3, [pc, #20]	; (8009334 <SPI_Timer_Status+0x28>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	429a      	cmp	r2, r3
 8009322:	bf34      	ite	cc
 8009324:	2301      	movcc	r3, #1
 8009326:	2300      	movcs	r3, #0
 8009328:	b2db      	uxtb	r3, r3
}
 800932a:	4618      	mov	r0, r3
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	20001338 	.word	0x20001338
 8009334:	2000133c 	.word	0x2000133c

08009338 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b086      	sub	sp, #24
 800933c:	af02      	add	r7, sp, #8
 800933e:	4603      	mov	r3, r0
 8009340:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009342:	f107 020f 	add.w	r2, r7, #15
 8009346:	1df9      	adds	r1, r7, #7
 8009348:	2332      	movs	r3, #50	; 0x32
 800934a:	9300      	str	r3, [sp, #0]
 800934c:	2301      	movs	r3, #1
 800934e:	4804      	ldr	r0, [pc, #16]	; (8009360 <xchg_spi+0x28>)
 8009350:	f7fc ff29 	bl	80061a6 <HAL_SPI_TransmitReceive>
    return rxDat;
 8009354:	7bfb      	ldrb	r3, [r7, #15]
}
 8009356:	4618      	mov	r0, r3
 8009358:	3710      	adds	r7, #16
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	2000067c 	.word	0x2000067c

08009364 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8009364:	b590      	push	{r4, r7, lr}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800936e:	2300      	movs	r3, #0
 8009370:	60fb      	str	r3, [r7, #12]
 8009372:	e00a      	b.n	800938a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	18d4      	adds	r4, r2, r3
 800937a:	20ff      	movs	r0, #255	; 0xff
 800937c:	f7ff ffdc 	bl	8009338 <xchg_spi>
 8009380:	4603      	mov	r3, r0
 8009382:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	3301      	adds	r3, #1
 8009388:	60fb      	str	r3, [r7, #12]
 800938a:	68fa      	ldr	r2, [r7, #12]
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	429a      	cmp	r2, r3
 8009390:	d3f0      	bcc.n	8009374 <rcvr_spi_multi+0x10>
	}
}
 8009392:	bf00      	nop
 8009394:	bf00      	nop
 8009396:	3714      	adds	r7, #20
 8009398:	46bd      	mov	sp, r7
 800939a:	bd90      	pop	{r4, r7, pc}

0800939c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 80093a6:	2300      	movs	r3, #0
 80093a8:	60fb      	str	r3, [r7, #12]
 80093aa:	e009      	b.n	80093c0 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	4413      	add	r3, r2
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	4618      	mov	r0, r3
 80093b6:	f7ff ffbf 	bl	8009338 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	3301      	adds	r3, #1
 80093be:	60fb      	str	r3, [r7, #12]
 80093c0:	68fa      	ldr	r2, [r7, #12]
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d3f1      	bcc.n	80093ac <xmit_spi_multi+0x10>
	}
}
 80093c8:	bf00      	nop
 80093ca:	bf00      	nop
 80093cc:	3710      	adds	r7, #16
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}

080093d2 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80093d2:	b580      	push	{r7, lr}
 80093d4:	b086      	sub	sp, #24
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80093da:	f7f9 fa7f 	bl	80028dc <HAL_GetTick>
 80093de:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80093e4:	20ff      	movs	r0, #255	; 0xff
 80093e6:	f7ff ffa7 	bl	8009338 <xchg_spi>
 80093ea:	4603      	mov	r3, r0
 80093ec:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80093ee:	7bfb      	ldrb	r3, [r7, #15]
 80093f0:	2bff      	cmp	r3, #255	; 0xff
 80093f2:	d007      	beq.n	8009404 <wait_ready+0x32>
 80093f4:	f7f9 fa72 	bl	80028dc <HAL_GetTick>
 80093f8:	4602      	mov	r2, r0
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	1ad3      	subs	r3, r2, r3
 80093fe:	693a      	ldr	r2, [r7, #16]
 8009400:	429a      	cmp	r2, r3
 8009402:	d8ef      	bhi.n	80093e4 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8009404:	7bfb      	ldrb	r3, [r7, #15]
 8009406:	2bff      	cmp	r3, #255	; 0xff
 8009408:	bf0c      	ite	eq
 800940a:	2301      	moveq	r3, #1
 800940c:	2300      	movne	r3, #0
 800940e:	b2db      	uxtb	r3, r3
}
 8009410:	4618      	mov	r0, r3
 8009412:	3718      	adds	r7, #24
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800941c:	2201      	movs	r2, #1
 800941e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009422:	4804      	ldr	r0, [pc, #16]	; (8009434 <despiselect+0x1c>)
 8009424:	f7f9 ffba 	bl	800339c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8009428:	20ff      	movs	r0, #255	; 0xff
 800942a:	f7ff ff85 	bl	8009338 <xchg_spi>

}
 800942e:	bf00      	nop
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	40021400 	.word	0x40021400

08009438 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8009438:	b580      	push	{r7, lr}
 800943a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800943c:	2200      	movs	r2, #0
 800943e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009442:	480a      	ldr	r0, [pc, #40]	; (800946c <spiselect+0x34>)
 8009444:	f7f9 ffaa 	bl	800339c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8009448:	20ff      	movs	r0, #255	; 0xff
 800944a:	f7ff ff75 	bl	8009338 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800944e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009452:	f7ff ffbe 	bl	80093d2 <wait_ready>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d001      	beq.n	8009460 <spiselect+0x28>
 800945c:	2301      	movs	r3, #1
 800945e:	e002      	b.n	8009466 <spiselect+0x2e>

	despiselect();
 8009460:	f7ff ffda 	bl	8009418 <despiselect>
	return 0;	/* Timeout */
 8009464:	2300      	movs	r3, #0
}
 8009466:	4618      	mov	r0, r3
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	40021400 	.word	0x40021400

08009470 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800947a:	20c8      	movs	r0, #200	; 0xc8
 800947c:	f7ff ff32 	bl	80092e4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8009480:	20ff      	movs	r0, #255	; 0xff
 8009482:	f7ff ff59 	bl	8009338 <xchg_spi>
 8009486:	4603      	mov	r3, r0
 8009488:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800948a:	7bfb      	ldrb	r3, [r7, #15]
 800948c:	2bff      	cmp	r3, #255	; 0xff
 800948e:	d104      	bne.n	800949a <rcvr_datablock+0x2a>
 8009490:	f7ff ff3c 	bl	800930c <SPI_Timer_Status>
 8009494:	4603      	mov	r3, r0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1f2      	bne.n	8009480 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800949a:	7bfb      	ldrb	r3, [r7, #15]
 800949c:	2bfe      	cmp	r3, #254	; 0xfe
 800949e:	d001      	beq.n	80094a4 <rcvr_datablock+0x34>
 80094a0:	2300      	movs	r3, #0
 80094a2:	e00a      	b.n	80094ba <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80094a4:	6839      	ldr	r1, [r7, #0]
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f7ff ff5c 	bl	8009364 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80094ac:	20ff      	movs	r0, #255	; 0xff
 80094ae:	f7ff ff43 	bl	8009338 <xchg_spi>
 80094b2:	20ff      	movs	r0, #255	; 0xff
 80094b4:	f7ff ff40 	bl	8009338 <xchg_spi>

	return 1;						/* Function succeeded */
 80094b8:	2301      	movs	r3, #1
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3710      	adds	r7, #16
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b084      	sub	sp, #16
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
 80094ca:	460b      	mov	r3, r1
 80094cc:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80094ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80094d2:	f7ff ff7e 	bl	80093d2 <wait_ready>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d101      	bne.n	80094e0 <xmit_datablock+0x1e>
 80094dc:	2300      	movs	r3, #0
 80094de:	e01e      	b.n	800951e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80094e0:	78fb      	ldrb	r3, [r7, #3]
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7ff ff28 	bl	8009338 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80094e8:	78fb      	ldrb	r3, [r7, #3]
 80094ea:	2bfd      	cmp	r3, #253	; 0xfd
 80094ec:	d016      	beq.n	800951c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80094ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f7ff ff52 	bl	800939c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80094f8:	20ff      	movs	r0, #255	; 0xff
 80094fa:	f7ff ff1d 	bl	8009338 <xchg_spi>
 80094fe:	20ff      	movs	r0, #255	; 0xff
 8009500:	f7ff ff1a 	bl	8009338 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8009504:	20ff      	movs	r0, #255	; 0xff
 8009506:	f7ff ff17 	bl	8009338 <xchg_spi>
 800950a:	4603      	mov	r3, r0
 800950c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800950e:	7bfb      	ldrb	r3, [r7, #15]
 8009510:	f003 031f 	and.w	r3, r3, #31
 8009514:	2b05      	cmp	r3, #5
 8009516:	d001      	beq.n	800951c <xmit_datablock+0x5a>
 8009518:	2300      	movs	r3, #0
 800951a:	e000      	b.n	800951e <xmit_datablock+0x5c>
	}
	return 1;
 800951c:	2301      	movs	r3, #1
}
 800951e:	4618      	mov	r0, r3
 8009520:	3710      	adds	r7, #16
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b084      	sub	sp, #16
 800952a:	af00      	add	r7, sp, #0
 800952c:	4603      	mov	r3, r0
 800952e:	6039      	str	r1, [r7, #0]
 8009530:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8009532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009536:	2b00      	cmp	r3, #0
 8009538:	da0e      	bge.n	8009558 <send_cmd+0x32>
		cmd &= 0x7F;
 800953a:	79fb      	ldrb	r3, [r7, #7]
 800953c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009540:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8009542:	2100      	movs	r1, #0
 8009544:	2037      	movs	r0, #55	; 0x37
 8009546:	f7ff ffee 	bl	8009526 <send_cmd>
 800954a:	4603      	mov	r3, r0
 800954c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800954e:	7bbb      	ldrb	r3, [r7, #14]
 8009550:	2b01      	cmp	r3, #1
 8009552:	d901      	bls.n	8009558 <send_cmd+0x32>
 8009554:	7bbb      	ldrb	r3, [r7, #14]
 8009556:	e051      	b.n	80095fc <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8009558:	79fb      	ldrb	r3, [r7, #7]
 800955a:	2b0c      	cmp	r3, #12
 800955c:	d008      	beq.n	8009570 <send_cmd+0x4a>
		despiselect();
 800955e:	f7ff ff5b 	bl	8009418 <despiselect>
		if (!spiselect()) return 0xFF;
 8009562:	f7ff ff69 	bl	8009438 <spiselect>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d101      	bne.n	8009570 <send_cmd+0x4a>
 800956c:	23ff      	movs	r3, #255	; 0xff
 800956e:	e045      	b.n	80095fc <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8009570:	79fb      	ldrb	r3, [r7, #7]
 8009572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009576:	b2db      	uxtb	r3, r3
 8009578:	4618      	mov	r0, r3
 800957a:	f7ff fedd 	bl	8009338 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	0e1b      	lsrs	r3, r3, #24
 8009582:	b2db      	uxtb	r3, r3
 8009584:	4618      	mov	r0, r3
 8009586:	f7ff fed7 	bl	8009338 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	0c1b      	lsrs	r3, r3, #16
 800958e:	b2db      	uxtb	r3, r3
 8009590:	4618      	mov	r0, r3
 8009592:	f7ff fed1 	bl	8009338 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	0a1b      	lsrs	r3, r3, #8
 800959a:	b2db      	uxtb	r3, r3
 800959c:	4618      	mov	r0, r3
 800959e:	f7ff fecb 	bl	8009338 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	4618      	mov	r0, r3
 80095a8:	f7ff fec6 	bl	8009338 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80095ac:	2301      	movs	r3, #1
 80095ae:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80095b0:	79fb      	ldrb	r3, [r7, #7]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d101      	bne.n	80095ba <send_cmd+0x94>
 80095b6:	2395      	movs	r3, #149	; 0x95
 80095b8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80095ba:	79fb      	ldrb	r3, [r7, #7]
 80095bc:	2b08      	cmp	r3, #8
 80095be:	d101      	bne.n	80095c4 <send_cmd+0x9e>
 80095c0:	2387      	movs	r3, #135	; 0x87
 80095c2:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80095c4:	7bfb      	ldrb	r3, [r7, #15]
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7ff feb6 	bl	8009338 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80095cc:	79fb      	ldrb	r3, [r7, #7]
 80095ce:	2b0c      	cmp	r3, #12
 80095d0:	d102      	bne.n	80095d8 <send_cmd+0xb2>
 80095d2:	20ff      	movs	r0, #255	; 0xff
 80095d4:	f7ff feb0 	bl	8009338 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80095d8:	230a      	movs	r3, #10
 80095da:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80095dc:	20ff      	movs	r0, #255	; 0xff
 80095de:	f7ff feab 	bl	8009338 <xchg_spi>
 80095e2:	4603      	mov	r3, r0
 80095e4:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80095e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	da05      	bge.n	80095fa <send_cmd+0xd4>
 80095ee:	7bfb      	ldrb	r3, [r7, #15]
 80095f0:	3b01      	subs	r3, #1
 80095f2:	73fb      	strb	r3, [r7, #15]
 80095f4:	7bfb      	ldrb	r3, [r7, #15]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d1f0      	bne.n	80095dc <send_cmd+0xb6>

	return res;							/* Return received response */
 80095fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3710      	adds	r7, #16
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8009604:	b590      	push	{r4, r7, lr}
 8009606:	b085      	sub	sp, #20
 8009608:	af00      	add	r7, sp, #0
 800960a:	4603      	mov	r3, r0
 800960c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800960e:	79fb      	ldrb	r3, [r7, #7]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d001      	beq.n	8009618 <USER_SPI_initialize+0x14>
 8009614:	2301      	movs	r3, #1
 8009616:	e0d4      	b.n	80097c2 <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8009618:	4b6c      	ldr	r3, [pc, #432]	; (80097cc <USER_SPI_initialize+0x1c8>)
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	b2db      	uxtb	r3, r3
 800961e:	f003 0302 	and.w	r3, r3, #2
 8009622:	2b00      	cmp	r3, #0
 8009624:	d003      	beq.n	800962e <USER_SPI_initialize+0x2a>
 8009626:	4b69      	ldr	r3, [pc, #420]	; (80097cc <USER_SPI_initialize+0x1c8>)
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	b2db      	uxtb	r3, r3
 800962c:	e0c9      	b.n	80097c2 <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 800962e:	4b68      	ldr	r3, [pc, #416]	; (80097d0 <USER_SPI_initialize+0x1cc>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	4b66      	ldr	r3, [pc, #408]	; (80097d0 <USER_SPI_initialize+0x1cc>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800963c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800963e:	230a      	movs	r3, #10
 8009640:	73fb      	strb	r3, [r7, #15]
 8009642:	e005      	b.n	8009650 <USER_SPI_initialize+0x4c>
 8009644:	20ff      	movs	r0, #255	; 0xff
 8009646:	f7ff fe77 	bl	8009338 <xchg_spi>
 800964a:	7bfb      	ldrb	r3, [r7, #15]
 800964c:	3b01      	subs	r3, #1
 800964e:	73fb      	strb	r3, [r7, #15]
 8009650:	7bfb      	ldrb	r3, [r7, #15]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d1f6      	bne.n	8009644 <USER_SPI_initialize+0x40>

	ty = 0;
 8009656:	2300      	movs	r3, #0
 8009658:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800965a:	2100      	movs	r1, #0
 800965c:	2000      	movs	r0, #0
 800965e:	f7ff ff62 	bl	8009526 <send_cmd>
 8009662:	4603      	mov	r3, r0
 8009664:	2b01      	cmp	r3, #1
 8009666:	f040 808b 	bne.w	8009780 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800966a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800966e:	f7ff fe39 	bl	80092e4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8009672:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009676:	2008      	movs	r0, #8
 8009678:	f7ff ff55 	bl	8009526 <send_cmd>
 800967c:	4603      	mov	r3, r0
 800967e:	2b01      	cmp	r3, #1
 8009680:	d151      	bne.n	8009726 <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8009682:	2300      	movs	r3, #0
 8009684:	73fb      	strb	r3, [r7, #15]
 8009686:	e00d      	b.n	80096a4 <USER_SPI_initialize+0xa0>
 8009688:	7bfc      	ldrb	r4, [r7, #15]
 800968a:	20ff      	movs	r0, #255	; 0xff
 800968c:	f7ff fe54 	bl	8009338 <xchg_spi>
 8009690:	4603      	mov	r3, r0
 8009692:	461a      	mov	r2, r3
 8009694:	f107 0310 	add.w	r3, r7, #16
 8009698:	4423      	add	r3, r4
 800969a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800969e:	7bfb      	ldrb	r3, [r7, #15]
 80096a0:	3301      	adds	r3, #1
 80096a2:	73fb      	strb	r3, [r7, #15]
 80096a4:	7bfb      	ldrb	r3, [r7, #15]
 80096a6:	2b03      	cmp	r3, #3
 80096a8:	d9ee      	bls.n	8009688 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80096aa:	7abb      	ldrb	r3, [r7, #10]
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d167      	bne.n	8009780 <USER_SPI_initialize+0x17c>
 80096b0:	7afb      	ldrb	r3, [r7, #11]
 80096b2:	2baa      	cmp	r3, #170	; 0xaa
 80096b4:	d164      	bne.n	8009780 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80096b6:	bf00      	nop
 80096b8:	f7ff fe28 	bl	800930c <SPI_Timer_Status>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d007      	beq.n	80096d2 <USER_SPI_initialize+0xce>
 80096c2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80096c6:	20a9      	movs	r0, #169	; 0xa9
 80096c8:	f7ff ff2d 	bl	8009526 <send_cmd>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d1f2      	bne.n	80096b8 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80096d2:	f7ff fe1b 	bl	800930c <SPI_Timer_Status>
 80096d6:	4603      	mov	r3, r0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d051      	beq.n	8009780 <USER_SPI_initialize+0x17c>
 80096dc:	2100      	movs	r1, #0
 80096de:	203a      	movs	r0, #58	; 0x3a
 80096e0:	f7ff ff21 	bl	8009526 <send_cmd>
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d14a      	bne.n	8009780 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80096ea:	2300      	movs	r3, #0
 80096ec:	73fb      	strb	r3, [r7, #15]
 80096ee:	e00d      	b.n	800970c <USER_SPI_initialize+0x108>
 80096f0:	7bfc      	ldrb	r4, [r7, #15]
 80096f2:	20ff      	movs	r0, #255	; 0xff
 80096f4:	f7ff fe20 	bl	8009338 <xchg_spi>
 80096f8:	4603      	mov	r3, r0
 80096fa:	461a      	mov	r2, r3
 80096fc:	f107 0310 	add.w	r3, r7, #16
 8009700:	4423      	add	r3, r4
 8009702:	f803 2c08 	strb.w	r2, [r3, #-8]
 8009706:	7bfb      	ldrb	r3, [r7, #15]
 8009708:	3301      	adds	r3, #1
 800970a:	73fb      	strb	r3, [r7, #15]
 800970c:	7bfb      	ldrb	r3, [r7, #15]
 800970e:	2b03      	cmp	r3, #3
 8009710:	d9ee      	bls.n	80096f0 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8009712:	7a3b      	ldrb	r3, [r7, #8]
 8009714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009718:	2b00      	cmp	r3, #0
 800971a:	d001      	beq.n	8009720 <USER_SPI_initialize+0x11c>
 800971c:	230c      	movs	r3, #12
 800971e:	e000      	b.n	8009722 <USER_SPI_initialize+0x11e>
 8009720:	2304      	movs	r3, #4
 8009722:	737b      	strb	r3, [r7, #13]
 8009724:	e02c      	b.n	8009780 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8009726:	2100      	movs	r1, #0
 8009728:	20a9      	movs	r0, #169	; 0xa9
 800972a:	f7ff fefc 	bl	8009526 <send_cmd>
 800972e:	4603      	mov	r3, r0
 8009730:	2b01      	cmp	r3, #1
 8009732:	d804      	bhi.n	800973e <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8009734:	2302      	movs	r3, #2
 8009736:	737b      	strb	r3, [r7, #13]
 8009738:	23a9      	movs	r3, #169	; 0xa9
 800973a:	73bb      	strb	r3, [r7, #14]
 800973c:	e003      	b.n	8009746 <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800973e:	2301      	movs	r3, #1
 8009740:	737b      	strb	r3, [r7, #13]
 8009742:	2301      	movs	r3, #1
 8009744:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8009746:	bf00      	nop
 8009748:	f7ff fde0 	bl	800930c <SPI_Timer_Status>
 800974c:	4603      	mov	r3, r0
 800974e:	2b00      	cmp	r3, #0
 8009750:	d007      	beq.n	8009762 <USER_SPI_initialize+0x15e>
 8009752:	7bbb      	ldrb	r3, [r7, #14]
 8009754:	2100      	movs	r1, #0
 8009756:	4618      	mov	r0, r3
 8009758:	f7ff fee5 	bl	8009526 <send_cmd>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1f2      	bne.n	8009748 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8009762:	f7ff fdd3 	bl	800930c <SPI_Timer_Status>
 8009766:	4603      	mov	r3, r0
 8009768:	2b00      	cmp	r3, #0
 800976a:	d007      	beq.n	800977c <USER_SPI_initialize+0x178>
 800976c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009770:	2010      	movs	r0, #16
 8009772:	f7ff fed8 	bl	8009526 <send_cmd>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d001      	beq.n	8009780 <USER_SPI_initialize+0x17c>
				ty = 0;
 800977c:	2300      	movs	r3, #0
 800977e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8009780:	4a14      	ldr	r2, [pc, #80]	; (80097d4 <USER_SPI_initialize+0x1d0>)
 8009782:	7b7b      	ldrb	r3, [r7, #13]
 8009784:	7013      	strb	r3, [r2, #0]
	despiselect();
 8009786:	f7ff fe47 	bl	8009418 <despiselect>

	if (ty) {			/* OK */
 800978a:	7b7b      	ldrb	r3, [r7, #13]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d012      	beq.n	80097b6 <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 8009790:	4b0f      	ldr	r3, [pc, #60]	; (80097d0 <USER_SPI_initialize+0x1cc>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800979a:	4b0d      	ldr	r3, [pc, #52]	; (80097d0 <USER_SPI_initialize+0x1cc>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f042 0220 	orr.w	r2, r2, #32
 80097a2:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80097a4:	4b09      	ldr	r3, [pc, #36]	; (80097cc <USER_SPI_initialize+0x1c8>)
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	f023 0301 	bic.w	r3, r3, #1
 80097ae:	b2da      	uxtb	r2, r3
 80097b0:	4b06      	ldr	r3, [pc, #24]	; (80097cc <USER_SPI_initialize+0x1c8>)
 80097b2:	701a      	strb	r2, [r3, #0]
 80097b4:	e002      	b.n	80097bc <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80097b6:	4b05      	ldr	r3, [pc, #20]	; (80097cc <USER_SPI_initialize+0x1c8>)
 80097b8:	2201      	movs	r2, #1
 80097ba:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80097bc:	4b03      	ldr	r3, [pc, #12]	; (80097cc <USER_SPI_initialize+0x1c8>)
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	b2db      	uxtb	r3, r3
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3714      	adds	r7, #20
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd90      	pop	{r4, r7, pc}
 80097ca:	bf00      	nop
 80097cc:	20000020 	.word	0x20000020
 80097d0:	2000067c 	.word	0x2000067c
 80097d4:	20000394 	.word	0x20000394

080097d8 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
 80097de:	4603      	mov	r3, r0
 80097e0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80097e2:	79fb      	ldrb	r3, [r7, #7]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d001      	beq.n	80097ec <USER_SPI_status+0x14>
 80097e8:	2301      	movs	r3, #1
 80097ea:	e002      	b.n	80097f2 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80097ec:	4b04      	ldr	r3, [pc, #16]	; (8009800 <USER_SPI_status+0x28>)
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	b2db      	uxtb	r3, r3
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	370c      	adds	r7, #12
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr
 80097fe:	bf00      	nop
 8009800:	20000020 	.word	0x20000020

08009804 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	60b9      	str	r1, [r7, #8]
 800980c:	607a      	str	r2, [r7, #4]
 800980e:	603b      	str	r3, [r7, #0]
 8009810:	4603      	mov	r3, r0
 8009812:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009814:	7bfb      	ldrb	r3, [r7, #15]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d102      	bne.n	8009820 <USER_SPI_read+0x1c>
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d101      	bne.n	8009824 <USER_SPI_read+0x20>
 8009820:	2304      	movs	r3, #4
 8009822:	e04d      	b.n	80098c0 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8009824:	4b28      	ldr	r3, [pc, #160]	; (80098c8 <USER_SPI_read+0xc4>)
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	b2db      	uxtb	r3, r3
 800982a:	f003 0301 	and.w	r3, r3, #1
 800982e:	2b00      	cmp	r3, #0
 8009830:	d001      	beq.n	8009836 <USER_SPI_read+0x32>
 8009832:	2303      	movs	r3, #3
 8009834:	e044      	b.n	80098c0 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8009836:	4b25      	ldr	r3, [pc, #148]	; (80098cc <USER_SPI_read+0xc8>)
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	f003 0308 	and.w	r3, r3, #8
 800983e:	2b00      	cmp	r3, #0
 8009840:	d102      	bne.n	8009848 <USER_SPI_read+0x44>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	025b      	lsls	r3, r3, #9
 8009846:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	2b01      	cmp	r3, #1
 800984c:	d111      	bne.n	8009872 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800984e:	6879      	ldr	r1, [r7, #4]
 8009850:	2011      	movs	r0, #17
 8009852:	f7ff fe68 	bl	8009526 <send_cmd>
 8009856:	4603      	mov	r3, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	d129      	bne.n	80098b0 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800985c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009860:	68b8      	ldr	r0, [r7, #8]
 8009862:	f7ff fe05 	bl	8009470 <rcvr_datablock>
 8009866:	4603      	mov	r3, r0
 8009868:	2b00      	cmp	r3, #0
 800986a:	d021      	beq.n	80098b0 <USER_SPI_read+0xac>
			count = 0;
 800986c:	2300      	movs	r3, #0
 800986e:	603b      	str	r3, [r7, #0]
 8009870:	e01e      	b.n	80098b0 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8009872:	6879      	ldr	r1, [r7, #4]
 8009874:	2012      	movs	r0, #18
 8009876:	f7ff fe56 	bl	8009526 <send_cmd>
 800987a:	4603      	mov	r3, r0
 800987c:	2b00      	cmp	r3, #0
 800987e:	d117      	bne.n	80098b0 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8009880:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009884:	68b8      	ldr	r0, [r7, #8]
 8009886:	f7ff fdf3 	bl	8009470 <rcvr_datablock>
 800988a:	4603      	mov	r3, r0
 800988c:	2b00      	cmp	r3, #0
 800988e:	d00a      	beq.n	80098a6 <USER_SPI_read+0xa2>
				buff += 512;
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009896:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	3b01      	subs	r3, #1
 800989c:	603b      	str	r3, [r7, #0]
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d1ed      	bne.n	8009880 <USER_SPI_read+0x7c>
 80098a4:	e000      	b.n	80098a8 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80098a6:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80098a8:	2100      	movs	r1, #0
 80098aa:	200c      	movs	r0, #12
 80098ac:	f7ff fe3b 	bl	8009526 <send_cmd>
		}
	}
	despiselect();
 80098b0:	f7ff fdb2 	bl	8009418 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	bf14      	ite	ne
 80098ba:	2301      	movne	r3, #1
 80098bc:	2300      	moveq	r3, #0
 80098be:	b2db      	uxtb	r3, r3
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3710      	adds	r7, #16
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	20000020 	.word	0x20000020
 80098cc:	20000394 	.word	0x20000394

080098d0 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	60b9      	str	r1, [r7, #8]
 80098d8:	607a      	str	r2, [r7, #4]
 80098da:	603b      	str	r3, [r7, #0]
 80098dc:	4603      	mov	r3, r0
 80098de:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80098e0:	7bfb      	ldrb	r3, [r7, #15]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d102      	bne.n	80098ec <USER_SPI_write+0x1c>
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d101      	bne.n	80098f0 <USER_SPI_write+0x20>
 80098ec:	2304      	movs	r3, #4
 80098ee:	e063      	b.n	80099b8 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80098f0:	4b33      	ldr	r3, [pc, #204]	; (80099c0 <USER_SPI_write+0xf0>)
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	f003 0301 	and.w	r3, r3, #1
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d001      	beq.n	8009902 <USER_SPI_write+0x32>
 80098fe:	2303      	movs	r3, #3
 8009900:	e05a      	b.n	80099b8 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8009902:	4b2f      	ldr	r3, [pc, #188]	; (80099c0 <USER_SPI_write+0xf0>)
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	b2db      	uxtb	r3, r3
 8009908:	f003 0304 	and.w	r3, r3, #4
 800990c:	2b00      	cmp	r3, #0
 800990e:	d001      	beq.n	8009914 <USER_SPI_write+0x44>
 8009910:	2302      	movs	r3, #2
 8009912:	e051      	b.n	80099b8 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8009914:	4b2b      	ldr	r3, [pc, #172]	; (80099c4 <USER_SPI_write+0xf4>)
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	f003 0308 	and.w	r3, r3, #8
 800991c:	2b00      	cmp	r3, #0
 800991e:	d102      	bne.n	8009926 <USER_SPI_write+0x56>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	025b      	lsls	r3, r3, #9
 8009924:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	2b01      	cmp	r3, #1
 800992a:	d110      	bne.n	800994e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800992c:	6879      	ldr	r1, [r7, #4]
 800992e:	2018      	movs	r0, #24
 8009930:	f7ff fdf9 	bl	8009526 <send_cmd>
 8009934:	4603      	mov	r3, r0
 8009936:	2b00      	cmp	r3, #0
 8009938:	d136      	bne.n	80099a8 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800993a:	21fe      	movs	r1, #254	; 0xfe
 800993c:	68b8      	ldr	r0, [r7, #8]
 800993e:	f7ff fdc0 	bl	80094c2 <xmit_datablock>
 8009942:	4603      	mov	r3, r0
 8009944:	2b00      	cmp	r3, #0
 8009946:	d02f      	beq.n	80099a8 <USER_SPI_write+0xd8>
			count = 0;
 8009948:	2300      	movs	r3, #0
 800994a:	603b      	str	r3, [r7, #0]
 800994c:	e02c      	b.n	80099a8 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800994e:	4b1d      	ldr	r3, [pc, #116]	; (80099c4 <USER_SPI_write+0xf4>)
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	f003 0306 	and.w	r3, r3, #6
 8009956:	2b00      	cmp	r3, #0
 8009958:	d003      	beq.n	8009962 <USER_SPI_write+0x92>
 800995a:	6839      	ldr	r1, [r7, #0]
 800995c:	2097      	movs	r0, #151	; 0x97
 800995e:	f7ff fde2 	bl	8009526 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8009962:	6879      	ldr	r1, [r7, #4]
 8009964:	2019      	movs	r0, #25
 8009966:	f7ff fdde 	bl	8009526 <send_cmd>
 800996a:	4603      	mov	r3, r0
 800996c:	2b00      	cmp	r3, #0
 800996e:	d11b      	bne.n	80099a8 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8009970:	21fc      	movs	r1, #252	; 0xfc
 8009972:	68b8      	ldr	r0, [r7, #8]
 8009974:	f7ff fda5 	bl	80094c2 <xmit_datablock>
 8009978:	4603      	mov	r3, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d00a      	beq.n	8009994 <USER_SPI_write+0xc4>
				buff += 512;
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009984:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	3b01      	subs	r3, #1
 800998a:	603b      	str	r3, [r7, #0]
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d1ee      	bne.n	8009970 <USER_SPI_write+0xa0>
 8009992:	e000      	b.n	8009996 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8009994:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8009996:	21fd      	movs	r1, #253	; 0xfd
 8009998:	2000      	movs	r0, #0
 800999a:	f7ff fd92 	bl	80094c2 <xmit_datablock>
 800999e:	4603      	mov	r3, r0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d101      	bne.n	80099a8 <USER_SPI_write+0xd8>
 80099a4:	2301      	movs	r3, #1
 80099a6:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80099a8:	f7ff fd36 	bl	8009418 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	bf14      	ite	ne
 80099b2:	2301      	movne	r3, #1
 80099b4:	2300      	moveq	r3, #0
 80099b6:	b2db      	uxtb	r3, r3
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3710      	adds	r7, #16
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}
 80099c0:	20000020 	.word	0x20000020
 80099c4:	20000394 	.word	0x20000394

080099c8 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b08c      	sub	sp, #48	; 0x30
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	4603      	mov	r3, r0
 80099d0:	603a      	str	r2, [r7, #0]
 80099d2:	71fb      	strb	r3, [r7, #7]
 80099d4:	460b      	mov	r3, r1
 80099d6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80099d8:	79fb      	ldrb	r3, [r7, #7]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d001      	beq.n	80099e2 <USER_SPI_ioctl+0x1a>
 80099de:	2304      	movs	r3, #4
 80099e0:	e15a      	b.n	8009c98 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80099e2:	4baf      	ldr	r3, [pc, #700]	; (8009ca0 <USER_SPI_ioctl+0x2d8>)
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	f003 0301 	and.w	r3, r3, #1
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d001      	beq.n	80099f4 <USER_SPI_ioctl+0x2c>
 80099f0:	2303      	movs	r3, #3
 80099f2:	e151      	b.n	8009c98 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80099f4:	2301      	movs	r3, #1
 80099f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80099fa:	79bb      	ldrb	r3, [r7, #6]
 80099fc:	2b04      	cmp	r3, #4
 80099fe:	f200 8136 	bhi.w	8009c6e <USER_SPI_ioctl+0x2a6>
 8009a02:	a201      	add	r2, pc, #4	; (adr r2, 8009a08 <USER_SPI_ioctl+0x40>)
 8009a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a08:	08009a1d 	.word	0x08009a1d
 8009a0c:	08009a31 	.word	0x08009a31
 8009a10:	08009c6f 	.word	0x08009c6f
 8009a14:	08009add 	.word	0x08009add
 8009a18:	08009bd3 	.word	0x08009bd3
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8009a1c:	f7ff fd0c 	bl	8009438 <spiselect>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	f000 8127 	beq.w	8009c76 <USER_SPI_ioctl+0x2ae>
 8009a28:	2300      	movs	r3, #0
 8009a2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8009a2e:	e122      	b.n	8009c76 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8009a30:	2100      	movs	r1, #0
 8009a32:	2009      	movs	r0, #9
 8009a34:	f7ff fd77 	bl	8009526 <send_cmd>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	f040 811d 	bne.w	8009c7a <USER_SPI_ioctl+0x2b2>
 8009a40:	f107 030c 	add.w	r3, r7, #12
 8009a44:	2110      	movs	r1, #16
 8009a46:	4618      	mov	r0, r3
 8009a48:	f7ff fd12 	bl	8009470 <rcvr_datablock>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	f000 8113 	beq.w	8009c7a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8009a54:	7b3b      	ldrb	r3, [r7, #12]
 8009a56:	099b      	lsrs	r3, r3, #6
 8009a58:	b2db      	uxtb	r3, r3
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d111      	bne.n	8009a82 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8009a5e:	7d7b      	ldrb	r3, [r7, #21]
 8009a60:	461a      	mov	r2, r3
 8009a62:	7d3b      	ldrb	r3, [r7, #20]
 8009a64:	021b      	lsls	r3, r3, #8
 8009a66:	4413      	add	r3, r2
 8009a68:	461a      	mov	r2, r3
 8009a6a:	7cfb      	ldrb	r3, [r7, #19]
 8009a6c:	041b      	lsls	r3, r3, #16
 8009a6e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8009a72:	4413      	add	r3, r2
 8009a74:	3301      	adds	r3, #1
 8009a76:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8009a78:	69fb      	ldr	r3, [r7, #28]
 8009a7a:	029a      	lsls	r2, r3, #10
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	601a      	str	r2, [r3, #0]
 8009a80:	e028      	b.n	8009ad4 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8009a82:	7c7b      	ldrb	r3, [r7, #17]
 8009a84:	f003 030f 	and.w	r3, r3, #15
 8009a88:	b2da      	uxtb	r2, r3
 8009a8a:	7dbb      	ldrb	r3, [r7, #22]
 8009a8c:	09db      	lsrs	r3, r3, #7
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	4413      	add	r3, r2
 8009a92:	b2da      	uxtb	r2, r3
 8009a94:	7d7b      	ldrb	r3, [r7, #21]
 8009a96:	005b      	lsls	r3, r3, #1
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	f003 0306 	and.w	r3, r3, #6
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	4413      	add	r3, r2
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	3302      	adds	r3, #2
 8009aa6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8009aaa:	7d3b      	ldrb	r3, [r7, #20]
 8009aac:	099b      	lsrs	r3, r3, #6
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	7cfb      	ldrb	r3, [r7, #19]
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	441a      	add	r2, r3
 8009ab8:	7cbb      	ldrb	r3, [r7, #18]
 8009aba:	029b      	lsls	r3, r3, #10
 8009abc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009ac0:	4413      	add	r3, r2
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8009ac6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009aca:	3b09      	subs	r3, #9
 8009acc:	69fa      	ldr	r2, [r7, #28]
 8009ace:	409a      	lsls	r2, r3
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8009ada:	e0ce      	b.n	8009c7a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8009adc:	4b71      	ldr	r3, [pc, #452]	; (8009ca4 <USER_SPI_ioctl+0x2dc>)
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	f003 0304 	and.w	r3, r3, #4
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d031      	beq.n	8009b4c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8009ae8:	2100      	movs	r1, #0
 8009aea:	208d      	movs	r0, #141	; 0x8d
 8009aec:	f7ff fd1b 	bl	8009526 <send_cmd>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	f040 80c3 	bne.w	8009c7e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8009af8:	20ff      	movs	r0, #255	; 0xff
 8009afa:	f7ff fc1d 	bl	8009338 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8009afe:	f107 030c 	add.w	r3, r7, #12
 8009b02:	2110      	movs	r1, #16
 8009b04:	4618      	mov	r0, r3
 8009b06:	f7ff fcb3 	bl	8009470 <rcvr_datablock>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	f000 80b6 	beq.w	8009c7e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8009b12:	2330      	movs	r3, #48	; 0x30
 8009b14:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009b18:	e007      	b.n	8009b2a <USER_SPI_ioctl+0x162>
 8009b1a:	20ff      	movs	r0, #255	; 0xff
 8009b1c:	f7ff fc0c 	bl	8009338 <xchg_spi>
 8009b20:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009b24:	3b01      	subs	r3, #1
 8009b26:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009b2a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d1f3      	bne.n	8009b1a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8009b32:	7dbb      	ldrb	r3, [r7, #22]
 8009b34:	091b      	lsrs	r3, r3, #4
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	461a      	mov	r2, r3
 8009b3a:	2310      	movs	r3, #16
 8009b3c:	fa03 f202 	lsl.w	r2, r3, r2
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8009b44:	2300      	movs	r3, #0
 8009b46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8009b4a:	e098      	b.n	8009c7e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8009b4c:	2100      	movs	r1, #0
 8009b4e:	2009      	movs	r0, #9
 8009b50:	f7ff fce9 	bl	8009526 <send_cmd>
 8009b54:	4603      	mov	r3, r0
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	f040 8091 	bne.w	8009c7e <USER_SPI_ioctl+0x2b6>
 8009b5c:	f107 030c 	add.w	r3, r7, #12
 8009b60:	2110      	movs	r1, #16
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7ff fc84 	bl	8009470 <rcvr_datablock>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	f000 8087 	beq.w	8009c7e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8009b70:	4b4c      	ldr	r3, [pc, #304]	; (8009ca4 <USER_SPI_ioctl+0x2dc>)
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	f003 0302 	and.w	r3, r3, #2
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d012      	beq.n	8009ba2 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8009b7c:	7dbb      	ldrb	r3, [r7, #22]
 8009b7e:	005b      	lsls	r3, r3, #1
 8009b80:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8009b84:	7dfa      	ldrb	r2, [r7, #23]
 8009b86:	09d2      	lsrs	r2, r2, #7
 8009b88:	b2d2      	uxtb	r2, r2
 8009b8a:	4413      	add	r3, r2
 8009b8c:	1c5a      	adds	r2, r3, #1
 8009b8e:	7e7b      	ldrb	r3, [r7, #25]
 8009b90:	099b      	lsrs	r3, r3, #6
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	3b01      	subs	r3, #1
 8009b96:	fa02 f303 	lsl.w	r3, r2, r3
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	601a      	str	r2, [r3, #0]
 8009ba0:	e013      	b.n	8009bca <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8009ba2:	7dbb      	ldrb	r3, [r7, #22]
 8009ba4:	109b      	asrs	r3, r3, #2
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	f003 031f 	and.w	r3, r3, #31
 8009bac:	3301      	adds	r3, #1
 8009bae:	7dfa      	ldrb	r2, [r7, #23]
 8009bb0:	00d2      	lsls	r2, r2, #3
 8009bb2:	f002 0218 	and.w	r2, r2, #24
 8009bb6:	7df9      	ldrb	r1, [r7, #23]
 8009bb8:	0949      	lsrs	r1, r1, #5
 8009bba:	b2c9      	uxtb	r1, r1
 8009bbc:	440a      	add	r2, r1
 8009bbe:	3201      	adds	r2, #1
 8009bc0:	fb02 f303 	mul.w	r3, r2, r3
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8009bd0:	e055      	b.n	8009c7e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009bd2:	4b34      	ldr	r3, [pc, #208]	; (8009ca4 <USER_SPI_ioctl+0x2dc>)
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	f003 0306 	and.w	r3, r3, #6
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d051      	beq.n	8009c82 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009bde:	f107 020c 	add.w	r2, r7, #12
 8009be2:	79fb      	ldrb	r3, [r7, #7]
 8009be4:	210b      	movs	r1, #11
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7ff feee 	bl	80099c8 <USER_SPI_ioctl>
 8009bec:	4603      	mov	r3, r0
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d149      	bne.n	8009c86 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009bf2:	7b3b      	ldrb	r3, [r7, #12]
 8009bf4:	099b      	lsrs	r3, r3, #6
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d104      	bne.n	8009c06 <USER_SPI_ioctl+0x23e>
 8009bfc:	7dbb      	ldrb	r3, [r7, #22]
 8009bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d041      	beq.n	8009c8a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	623b      	str	r3, [r7, #32]
 8009c0a:	6a3b      	ldr	r3, [r7, #32]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c10:	6a3b      	ldr	r3, [r7, #32]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8009c16:	4b23      	ldr	r3, [pc, #140]	; (8009ca4 <USER_SPI_ioctl+0x2dc>)
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	f003 0308 	and.w	r3, r3, #8
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d105      	bne.n	8009c2e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8009c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c24:	025b      	lsls	r3, r3, #9
 8009c26:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2a:	025b      	lsls	r3, r3, #9
 8009c2c:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8009c2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c30:	2020      	movs	r0, #32
 8009c32:	f7ff fc78 	bl	8009526 <send_cmd>
 8009c36:	4603      	mov	r3, r0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d128      	bne.n	8009c8e <USER_SPI_ioctl+0x2c6>
 8009c3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c3e:	2021      	movs	r0, #33	; 0x21
 8009c40:	f7ff fc71 	bl	8009526 <send_cmd>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d121      	bne.n	8009c8e <USER_SPI_ioctl+0x2c6>
 8009c4a:	2100      	movs	r1, #0
 8009c4c:	2026      	movs	r0, #38	; 0x26
 8009c4e:	f7ff fc6a 	bl	8009526 <send_cmd>
 8009c52:	4603      	mov	r3, r0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d11a      	bne.n	8009c8e <USER_SPI_ioctl+0x2c6>
 8009c58:	f247 5030 	movw	r0, #30000	; 0x7530
 8009c5c:	f7ff fbb9 	bl	80093d2 <wait_ready>
 8009c60:	4603      	mov	r3, r0
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d013      	beq.n	8009c8e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8009c66:	2300      	movs	r3, #0
 8009c68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8009c6c:	e00f      	b.n	8009c8e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8009c6e:	2304      	movs	r3, #4
 8009c70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009c74:	e00c      	b.n	8009c90 <USER_SPI_ioctl+0x2c8>
		break;
 8009c76:	bf00      	nop
 8009c78:	e00a      	b.n	8009c90 <USER_SPI_ioctl+0x2c8>
		break;
 8009c7a:	bf00      	nop
 8009c7c:	e008      	b.n	8009c90 <USER_SPI_ioctl+0x2c8>
		break;
 8009c7e:	bf00      	nop
 8009c80:	e006      	b.n	8009c90 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009c82:	bf00      	nop
 8009c84:	e004      	b.n	8009c90 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009c86:	bf00      	nop
 8009c88:	e002      	b.n	8009c90 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009c8a:	bf00      	nop
 8009c8c:	e000      	b.n	8009c90 <USER_SPI_ioctl+0x2c8>
		break;
 8009c8e:	bf00      	nop
	}

	despiselect();
 8009c90:	f7ff fbc2 	bl	8009418 <despiselect>

	return res;
 8009c94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3730      	adds	r7, #48	; 0x30
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}
 8009ca0:	20000020 	.word	0x20000020
 8009ca4:	20000394 	.word	0x20000394

08009ca8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009cb4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009cb8:	f002 f970 	bl	800bf9c <USBD_static_malloc>
 8009cbc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d105      	bne.n	8009cd0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009ccc:	2302      	movs	r3, #2
 8009cce:	e066      	b.n	8009d9e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	68fa      	ldr	r2, [r7, #12]
 8009cd4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	7c1b      	ldrb	r3, [r3, #16]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d119      	bne.n	8009d14 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009ce0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ce4:	2202      	movs	r2, #2
 8009ce6:	2181      	movs	r1, #129	; 0x81
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f002 f834 	bl	800bd56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009cf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009cf8:	2202      	movs	r2, #2
 8009cfa:	2101      	movs	r1, #1
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f002 f82a 	bl	800bd56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2201      	movs	r2, #1
 8009d06:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2210      	movs	r2, #16
 8009d0e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8009d12:	e016      	b.n	8009d42 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009d14:	2340      	movs	r3, #64	; 0x40
 8009d16:	2202      	movs	r2, #2
 8009d18:	2181      	movs	r1, #129	; 0x81
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f002 f81b 	bl	800bd56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2201      	movs	r2, #1
 8009d24:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009d26:	2340      	movs	r3, #64	; 0x40
 8009d28:	2202      	movs	r2, #2
 8009d2a:	2101      	movs	r1, #1
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f002 f812 	bl	800bd56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2201      	movs	r2, #1
 8009d36:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2210      	movs	r2, #16
 8009d3e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009d42:	2308      	movs	r3, #8
 8009d44:	2203      	movs	r2, #3
 8009d46:	2182      	movs	r1, #130	; 0x82
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f002 f804 	bl	800bd56 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2201      	movs	r2, #1
 8009d52:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2200      	movs	r2, #0
 8009d64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	7c1b      	ldrb	r3, [r3, #16]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d109      	bne.n	8009d8c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d82:	2101      	movs	r1, #1
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f002 f8d5 	bl	800bf34 <USBD_LL_PrepareReceive>
 8009d8a:	e007      	b.n	8009d9c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d92:	2340      	movs	r3, #64	; 0x40
 8009d94:	2101      	movs	r1, #1
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f002 f8cc 	bl	800bf34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009d9c:	2300      	movs	r3, #0
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b082      	sub	sp, #8
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
 8009dae:	460b      	mov	r3, r1
 8009db0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009db2:	2181      	movs	r1, #129	; 0x81
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f001 fff4 	bl	800bda2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009dc0:	2101      	movs	r1, #1
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f001 ffed 	bl	800bda2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009dd0:	2182      	movs	r1, #130	; 0x82
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f001 ffe5 	bl	800bda2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2200      	movs	r2, #0
 8009de4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d00e      	beq.n	8009e10 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e02:	4618      	mov	r0, r3
 8009e04:	f002 f8d8 	bl	800bfb8 <USBD_static_free>
    pdev->pClassData = NULL;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009e10:	2300      	movs	r3, #0
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3708      	adds	r7, #8
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
	...

08009e1c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b086      	sub	sp, #24
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e2c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009e32:	2300      	movs	r3, #0
 8009e34:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e36:	2300      	movs	r3, #0
 8009e38:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d101      	bne.n	8009e44 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009e40:	2303      	movs	r3, #3
 8009e42:	e0af      	b.n	8009fa4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d03f      	beq.n	8009ed0 <USBD_CDC_Setup+0xb4>
 8009e50:	2b20      	cmp	r3, #32
 8009e52:	f040 809f 	bne.w	8009f94 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	88db      	ldrh	r3, [r3, #6]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d02e      	beq.n	8009ebc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	b25b      	sxtb	r3, r3
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	da16      	bge.n	8009e96 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	683a      	ldr	r2, [r7, #0]
 8009e72:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009e74:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009e76:	683a      	ldr	r2, [r7, #0]
 8009e78:	88d2      	ldrh	r2, [r2, #6]
 8009e7a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	88db      	ldrh	r3, [r3, #6]
 8009e80:	2b07      	cmp	r3, #7
 8009e82:	bf28      	it	cs
 8009e84:	2307      	movcs	r3, #7
 8009e86:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	89fa      	ldrh	r2, [r7, #14]
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f001 fae9 	bl	800b466 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009e94:	e085      	b.n	8009fa2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	785a      	ldrb	r2, [r3, #1]
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	88db      	ldrh	r3, [r3, #6]
 8009ea4:	b2da      	uxtb	r2, r3
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009eac:	6939      	ldr	r1, [r7, #16]
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	88db      	ldrh	r3, [r3, #6]
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f001 fb02 	bl	800b4be <USBD_CtlPrepareRx>
      break;
 8009eba:	e072      	b.n	8009fa2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	683a      	ldr	r2, [r7, #0]
 8009ec6:	7850      	ldrb	r0, [r2, #1]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	6839      	ldr	r1, [r7, #0]
 8009ecc:	4798      	blx	r3
      break;
 8009ece:	e068      	b.n	8009fa2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	785b      	ldrb	r3, [r3, #1]
 8009ed4:	2b0b      	cmp	r3, #11
 8009ed6:	d852      	bhi.n	8009f7e <USBD_CDC_Setup+0x162>
 8009ed8:	a201      	add	r2, pc, #4	; (adr r2, 8009ee0 <USBD_CDC_Setup+0xc4>)
 8009eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ede:	bf00      	nop
 8009ee0:	08009f11 	.word	0x08009f11
 8009ee4:	08009f8d 	.word	0x08009f8d
 8009ee8:	08009f7f 	.word	0x08009f7f
 8009eec:	08009f7f 	.word	0x08009f7f
 8009ef0:	08009f7f 	.word	0x08009f7f
 8009ef4:	08009f7f 	.word	0x08009f7f
 8009ef8:	08009f7f 	.word	0x08009f7f
 8009efc:	08009f7f 	.word	0x08009f7f
 8009f00:	08009f7f 	.word	0x08009f7f
 8009f04:	08009f7f 	.word	0x08009f7f
 8009f08:	08009f3b 	.word	0x08009f3b
 8009f0c:	08009f65 	.word	0x08009f65
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f16:	b2db      	uxtb	r3, r3
 8009f18:	2b03      	cmp	r3, #3
 8009f1a:	d107      	bne.n	8009f2c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009f1c:	f107 030a 	add.w	r3, r7, #10
 8009f20:	2202      	movs	r2, #2
 8009f22:	4619      	mov	r1, r3
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f001 fa9e 	bl	800b466 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f2a:	e032      	b.n	8009f92 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009f2c:	6839      	ldr	r1, [r7, #0]
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f001 fa28 	bl	800b384 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f34:	2303      	movs	r3, #3
 8009f36:	75fb      	strb	r3, [r7, #23]
          break;
 8009f38:	e02b      	b.n	8009f92 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	2b03      	cmp	r3, #3
 8009f44:	d107      	bne.n	8009f56 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009f46:	f107 030d 	add.w	r3, r7, #13
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f001 fa89 	bl	800b466 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f54:	e01d      	b.n	8009f92 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009f56:	6839      	ldr	r1, [r7, #0]
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f001 fa13 	bl	800b384 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f5e:	2303      	movs	r3, #3
 8009f60:	75fb      	strb	r3, [r7, #23]
          break;
 8009f62:	e016      	b.n	8009f92 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	2b03      	cmp	r3, #3
 8009f6e:	d00f      	beq.n	8009f90 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009f70:	6839      	ldr	r1, [r7, #0]
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f001 fa06 	bl	800b384 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f78:	2303      	movs	r3, #3
 8009f7a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009f7c:	e008      	b.n	8009f90 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009f7e:	6839      	ldr	r1, [r7, #0]
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f001 f9ff 	bl	800b384 <USBD_CtlError>
          ret = USBD_FAIL;
 8009f86:	2303      	movs	r3, #3
 8009f88:	75fb      	strb	r3, [r7, #23]
          break;
 8009f8a:	e002      	b.n	8009f92 <USBD_CDC_Setup+0x176>
          break;
 8009f8c:	bf00      	nop
 8009f8e:	e008      	b.n	8009fa2 <USBD_CDC_Setup+0x186>
          break;
 8009f90:	bf00      	nop
      }
      break;
 8009f92:	e006      	b.n	8009fa2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009f94:	6839      	ldr	r1, [r7, #0]
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f001 f9f4 	bl	800b384 <USBD_CtlError>
      ret = USBD_FAIL;
 8009f9c:	2303      	movs	r3, #3
 8009f9e:	75fb      	strb	r3, [r7, #23]
      break;
 8009fa0:	bf00      	nop
  }

  return (uint8_t)ret;
 8009fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3718      	adds	r7, #24
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b084      	sub	sp, #16
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009fbe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d101      	bne.n	8009fce <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009fca:	2303      	movs	r3, #3
 8009fcc:	e04f      	b.n	800a06e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fd4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009fd6:	78fa      	ldrb	r2, [r7, #3]
 8009fd8:	6879      	ldr	r1, [r7, #4]
 8009fda:	4613      	mov	r3, r2
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	4413      	add	r3, r2
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	440b      	add	r3, r1
 8009fe4:	3318      	adds	r3, #24
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d029      	beq.n	800a040 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009fec:	78fa      	ldrb	r2, [r7, #3]
 8009fee:	6879      	ldr	r1, [r7, #4]
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	009b      	lsls	r3, r3, #2
 8009ff4:	4413      	add	r3, r2
 8009ff6:	009b      	lsls	r3, r3, #2
 8009ff8:	440b      	add	r3, r1
 8009ffa:	3318      	adds	r3, #24
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	78f9      	ldrb	r1, [r7, #3]
 800a000:	68f8      	ldr	r0, [r7, #12]
 800a002:	460b      	mov	r3, r1
 800a004:	00db      	lsls	r3, r3, #3
 800a006:	1a5b      	subs	r3, r3, r1
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	4403      	add	r3, r0
 800a00c:	3344      	adds	r3, #68	; 0x44
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	fbb2 f1f3 	udiv	r1, r2, r3
 800a014:	fb03 f301 	mul.w	r3, r3, r1
 800a018:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d110      	bne.n	800a040 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a01e:	78fa      	ldrb	r2, [r7, #3]
 800a020:	6879      	ldr	r1, [r7, #4]
 800a022:	4613      	mov	r3, r2
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	4413      	add	r3, r2
 800a028:	009b      	lsls	r3, r3, #2
 800a02a:	440b      	add	r3, r1
 800a02c:	3318      	adds	r3, #24
 800a02e:	2200      	movs	r2, #0
 800a030:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a032:	78f9      	ldrb	r1, [r7, #3]
 800a034:	2300      	movs	r3, #0
 800a036:	2200      	movs	r2, #0
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f001 ff5a 	bl	800bef2 <USBD_LL_Transmit>
 800a03e:	e015      	b.n	800a06c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	2200      	movs	r2, #0
 800a044:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a04e:	691b      	ldr	r3, [r3, #16]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d00b      	beq.n	800a06c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a05a:	691b      	ldr	r3, [r3, #16]
 800a05c:	68ba      	ldr	r2, [r7, #8]
 800a05e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a062:	68ba      	ldr	r2, [r7, #8]
 800a064:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a068:	78fa      	ldrb	r2, [r7, #3]
 800a06a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a06c:	2300      	movs	r3, #0
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3710      	adds	r7, #16
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b084      	sub	sp, #16
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	460b      	mov	r3, r1
 800a080:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a088:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a090:	2b00      	cmp	r3, #0
 800a092:	d101      	bne.n	800a098 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a094:	2303      	movs	r3, #3
 800a096:	e015      	b.n	800a0c4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a098:	78fb      	ldrb	r3, [r7, #3]
 800a09a:	4619      	mov	r1, r3
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f001 ff6a 	bl	800bf76 <USBD_LL_GetRxDataSize>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a0b0:	68db      	ldr	r3, [r3, #12]
 800a0b2:	68fa      	ldr	r2, [r7, #12]
 800a0b4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a0b8:	68fa      	ldr	r2, [r7, #12]
 800a0ba:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a0be:	4611      	mov	r1, r2
 800a0c0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a0c2:	2300      	movs	r3, #0
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3710      	adds	r7, #16
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0da:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d101      	bne.n	800a0e6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a0e2:	2303      	movs	r3, #3
 800a0e4:	e01b      	b.n	800a11e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d015      	beq.n	800a11c <USBD_CDC_EP0_RxReady+0x50>
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a0f6:	2bff      	cmp	r3, #255	; 0xff
 800a0f8:	d010      	beq.n	800a11c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a100:	689b      	ldr	r3, [r3, #8]
 800a102:	68fa      	ldr	r2, [r7, #12]
 800a104:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a108:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a10a:	68fa      	ldr	r2, [r7, #12]
 800a10c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a110:	b292      	uxth	r2, r2
 800a112:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	22ff      	movs	r2, #255	; 0xff
 800a118:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a11c:	2300      	movs	r3, #0
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3710      	adds	r7, #16
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
	...

0800a128 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2243      	movs	r2, #67	; 0x43
 800a134:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a136:	4b03      	ldr	r3, [pc, #12]	; (800a144 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a138:	4618      	mov	r0, r3
 800a13a:	370c      	adds	r7, #12
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr
 800a144:	200000ac 	.word	0x200000ac

0800a148 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a148:	b480      	push	{r7}
 800a14a:	b083      	sub	sp, #12
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2243      	movs	r2, #67	; 0x43
 800a154:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a156:	4b03      	ldr	r3, [pc, #12]	; (800a164 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a158:	4618      	mov	r0, r3
 800a15a:	370c      	adds	r7, #12
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr
 800a164:	20000068 	.word	0x20000068

0800a168 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2243      	movs	r2, #67	; 0x43
 800a174:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a176:	4b03      	ldr	r3, [pc, #12]	; (800a184 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a178:	4618      	mov	r0, r3
 800a17a:	370c      	adds	r7, #12
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr
 800a184:	200000f0 	.word	0x200000f0

0800a188 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	220a      	movs	r2, #10
 800a194:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a196:	4b03      	ldr	r3, [pc, #12]	; (800a1a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a198:	4618      	mov	r0, r3
 800a19a:	370c      	adds	r7, #12
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr
 800a1a4:	20000024 	.word	0x20000024

0800a1a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d101      	bne.n	800a1bc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a1b8:	2303      	movs	r3, #3
 800a1ba:	e004      	b.n	800a1c6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	683a      	ldr	r2, [r7, #0]
 800a1c0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a1c4:	2300      	movs	r3, #0
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	370c      	adds	r7, #12
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr

0800a1d2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a1d2:	b480      	push	{r7}
 800a1d4:	b087      	sub	sp, #28
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	60f8      	str	r0, [r7, #12]
 800a1da:	60b9      	str	r1, [r7, #8]
 800a1dc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1e4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d101      	bne.n	800a1f0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a1ec:	2303      	movs	r3, #3
 800a1ee:	e008      	b.n	800a202 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	68ba      	ldr	r2, [r7, #8]
 800a1f4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a200:	2300      	movs	r3, #0
}
 800a202:	4618      	mov	r0, r3
 800a204:	371c      	adds	r7, #28
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr

0800a20e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a20e:	b480      	push	{r7}
 800a210:	b085      	sub	sp, #20
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
 800a216:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a21e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d101      	bne.n	800a22a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a226:	2303      	movs	r3, #3
 800a228:	e004      	b.n	800a234 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	683a      	ldr	r2, [r7, #0]
 800a22e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a232:	2300      	movs	r3, #0
}
 800a234:	4618      	mov	r0, r3
 800a236:	3714      	adds	r7, #20
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr

0800a240 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b084      	sub	sp, #16
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a24e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a256:	2b00      	cmp	r3, #0
 800a258:	d101      	bne.n	800a25e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a25a:	2303      	movs	r3, #3
 800a25c:	e016      	b.n	800a28c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	7c1b      	ldrb	r3, [r3, #16]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d109      	bne.n	800a27a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a26c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a270:	2101      	movs	r1, #1
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f001 fe5e 	bl	800bf34 <USBD_LL_PrepareReceive>
 800a278:	e007      	b.n	800a28a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a280:	2340      	movs	r3, #64	; 0x40
 800a282:	2101      	movs	r1, #1
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f001 fe55 	bl	800bf34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a28a:	2300      	movs	r3, #0
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3710      	adds	r7, #16
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b086      	sub	sp, #24
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	4613      	mov	r3, r2
 800a2a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d101      	bne.n	800a2ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a2a8:	2303      	movs	r3, #3
 800a2aa:	e01f      	b.n	800a2ec <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d003      	beq.n	800a2d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	68ba      	ldr	r2, [r7, #8]
 800a2ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	79fa      	ldrb	r2, [r7, #7]
 800a2de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a2e0:	68f8      	ldr	r0, [r7, #12]
 800a2e2:	f001 fcd1 	bl	800bc88 <USBD_LL_Init>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a2ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3718      	adds	r7, #24
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a2fe:	2300      	movs	r3, #0
 800a300:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d101      	bne.n	800a30c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a308:	2303      	movs	r3, #3
 800a30a:	e016      	b.n	800a33a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	683a      	ldr	r2, [r7, #0]
 800a310:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d00b      	beq.n	800a338 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a328:	f107 020e 	add.w	r2, r7, #14
 800a32c:	4610      	mov	r0, r2
 800a32e:	4798      	blx	r3
 800a330:	4602      	mov	r2, r0
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a338:	2300      	movs	r3, #0
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3710      	adds	r7, #16
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}

0800a342 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a342:	b580      	push	{r7, lr}
 800a344:	b082      	sub	sp, #8
 800a346:	af00      	add	r7, sp, #0
 800a348:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f001 fce8 	bl	800bd20 <USBD_LL_Start>
 800a350:	4603      	mov	r3, r0
}
 800a352:	4618      	mov	r0, r3
 800a354:	3708      	adds	r7, #8
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}

0800a35a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a35a:	b480      	push	{r7}
 800a35c:	b083      	sub	sp, #12
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a362:	2300      	movs	r3, #0
}
 800a364:	4618      	mov	r0, r3
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b084      	sub	sp, #16
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	460b      	mov	r3, r1
 800a37a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a37c:	2303      	movs	r3, #3
 800a37e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a386:	2b00      	cmp	r3, #0
 800a388:	d009      	beq.n	800a39e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	78fa      	ldrb	r2, [r7, #3]
 800a394:	4611      	mov	r1, r2
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	4798      	blx	r3
 800a39a:	4603      	mov	r3, r0
 800a39c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a39e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3710      	adds	r7, #16
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d007      	beq.n	800a3ce <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	78fa      	ldrb	r2, [r7, #3]
 800a3c8:	4611      	mov	r1, r2
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	4798      	blx	r3
  }

  return USBD_OK;
 800a3ce:	2300      	movs	r3, #0
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3708      	adds	r7, #8
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b084      	sub	sp, #16
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a3e8:	6839      	ldr	r1, [r7, #0]
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f000 ff90 	bl	800b310 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a3fe:	461a      	mov	r2, r3
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a40c:	f003 031f 	and.w	r3, r3, #31
 800a410:	2b02      	cmp	r3, #2
 800a412:	d01a      	beq.n	800a44a <USBD_LL_SetupStage+0x72>
 800a414:	2b02      	cmp	r3, #2
 800a416:	d822      	bhi.n	800a45e <USBD_LL_SetupStage+0x86>
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d002      	beq.n	800a422 <USBD_LL_SetupStage+0x4a>
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d00a      	beq.n	800a436 <USBD_LL_SetupStage+0x5e>
 800a420:	e01d      	b.n	800a45e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a428:	4619      	mov	r1, r3
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 fa62 	bl	800a8f4 <USBD_StdDevReq>
 800a430:	4603      	mov	r3, r0
 800a432:	73fb      	strb	r3, [r7, #15]
      break;
 800a434:	e020      	b.n	800a478 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a43c:	4619      	mov	r1, r3
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 fac6 	bl	800a9d0 <USBD_StdItfReq>
 800a444:	4603      	mov	r3, r0
 800a446:	73fb      	strb	r3, [r7, #15]
      break;
 800a448:	e016      	b.n	800a478 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a450:	4619      	mov	r1, r3
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f000 fb05 	bl	800aa62 <USBD_StdEPReq>
 800a458:	4603      	mov	r3, r0
 800a45a:	73fb      	strb	r3, [r7, #15]
      break;
 800a45c:	e00c      	b.n	800a478 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a464:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a468:	b2db      	uxtb	r3, r3
 800a46a:	4619      	mov	r1, r3
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f001 fcb7 	bl	800bde0 <USBD_LL_StallEP>
 800a472:	4603      	mov	r3, r0
 800a474:	73fb      	strb	r3, [r7, #15]
      break;
 800a476:	bf00      	nop
  }

  return ret;
 800a478:	7bfb      	ldrb	r3, [r7, #15]
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3710      	adds	r7, #16
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}

0800a482 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a482:	b580      	push	{r7, lr}
 800a484:	b086      	sub	sp, #24
 800a486:	af00      	add	r7, sp, #0
 800a488:	60f8      	str	r0, [r7, #12]
 800a48a:	460b      	mov	r3, r1
 800a48c:	607a      	str	r2, [r7, #4]
 800a48e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a490:	7afb      	ldrb	r3, [r7, #11]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d138      	bne.n	800a508 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a49c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a4a4:	2b03      	cmp	r3, #3
 800a4a6:	d14a      	bne.n	800a53e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	689a      	ldr	r2, [r3, #8]
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	68db      	ldr	r3, [r3, #12]
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d913      	bls.n	800a4dc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	689a      	ldr	r2, [r3, #8]
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	1ad2      	subs	r2, r2, r3
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	68da      	ldr	r2, [r3, #12]
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	689b      	ldr	r3, [r3, #8]
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	bf28      	it	cs
 800a4ce:	4613      	movcs	r3, r2
 800a4d0:	461a      	mov	r2, r3
 800a4d2:	6879      	ldr	r1, [r7, #4]
 800a4d4:	68f8      	ldr	r0, [r7, #12]
 800a4d6:	f001 f80f 	bl	800b4f8 <USBD_CtlContinueRx>
 800a4da:	e030      	b.n	800a53e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4e2:	b2db      	uxtb	r3, r3
 800a4e4:	2b03      	cmp	r3, #3
 800a4e6:	d10b      	bne.n	800a500 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4ee:	691b      	ldr	r3, [r3, #16]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d005      	beq.n	800a500 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4fa:	691b      	ldr	r3, [r3, #16]
 800a4fc:	68f8      	ldr	r0, [r7, #12]
 800a4fe:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a500:	68f8      	ldr	r0, [r7, #12]
 800a502:	f001 f80a 	bl	800b51a <USBD_CtlSendStatus>
 800a506:	e01a      	b.n	800a53e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	2b03      	cmp	r3, #3
 800a512:	d114      	bne.n	800a53e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a51a:	699b      	ldr	r3, [r3, #24]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d00e      	beq.n	800a53e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a526:	699b      	ldr	r3, [r3, #24]
 800a528:	7afa      	ldrb	r2, [r7, #11]
 800a52a:	4611      	mov	r1, r2
 800a52c:	68f8      	ldr	r0, [r7, #12]
 800a52e:	4798      	blx	r3
 800a530:	4603      	mov	r3, r0
 800a532:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a534:	7dfb      	ldrb	r3, [r7, #23]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d001      	beq.n	800a53e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a53a:	7dfb      	ldrb	r3, [r7, #23]
 800a53c:	e000      	b.n	800a540 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a53e:	2300      	movs	r3, #0
}
 800a540:	4618      	mov	r0, r3
 800a542:	3718      	adds	r7, #24
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b086      	sub	sp, #24
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	60f8      	str	r0, [r7, #12]
 800a550:	460b      	mov	r3, r1
 800a552:	607a      	str	r2, [r7, #4]
 800a554:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a556:	7afb      	ldrb	r3, [r7, #11]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d16b      	bne.n	800a634 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	3314      	adds	r3, #20
 800a560:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a568:	2b02      	cmp	r3, #2
 800a56a:	d156      	bne.n	800a61a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	689a      	ldr	r2, [r3, #8]
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	68db      	ldr	r3, [r3, #12]
 800a574:	429a      	cmp	r2, r3
 800a576:	d914      	bls.n	800a5a2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	689a      	ldr	r2, [r3, #8]
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	1ad2      	subs	r2, r2, r3
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	461a      	mov	r2, r3
 800a58c:	6879      	ldr	r1, [r7, #4]
 800a58e:	68f8      	ldr	r0, [r7, #12]
 800a590:	f000 ff84 	bl	800b49c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a594:	2300      	movs	r3, #0
 800a596:	2200      	movs	r2, #0
 800a598:	2100      	movs	r1, #0
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	f001 fcca 	bl	800bf34 <USBD_LL_PrepareReceive>
 800a5a0:	e03b      	b.n	800a61a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	68da      	ldr	r2, [r3, #12]
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	689b      	ldr	r3, [r3, #8]
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d11c      	bne.n	800a5e8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	685a      	ldr	r2, [r3, #4]
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d316      	bcc.n	800a5e8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	685a      	ldr	r2, [r3, #4]
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d20f      	bcs.n	800a5e8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	2100      	movs	r1, #0
 800a5cc:	68f8      	ldr	r0, [r7, #12]
 800a5ce:	f000 ff65 	bl	800b49c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5da:	2300      	movs	r3, #0
 800a5dc:	2200      	movs	r2, #0
 800a5de:	2100      	movs	r1, #0
 800a5e0:	68f8      	ldr	r0, [r7, #12]
 800a5e2:	f001 fca7 	bl	800bf34 <USBD_LL_PrepareReceive>
 800a5e6:	e018      	b.n	800a61a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	2b03      	cmp	r3, #3
 800a5f2:	d10b      	bne.n	800a60c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5fa:	68db      	ldr	r3, [r3, #12]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d005      	beq.n	800a60c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a606:	68db      	ldr	r3, [r3, #12]
 800a608:	68f8      	ldr	r0, [r7, #12]
 800a60a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a60c:	2180      	movs	r1, #128	; 0x80
 800a60e:	68f8      	ldr	r0, [r7, #12]
 800a610:	f001 fbe6 	bl	800bde0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a614:	68f8      	ldr	r0, [r7, #12]
 800a616:	f000 ff93 	bl	800b540 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a620:	2b01      	cmp	r3, #1
 800a622:	d122      	bne.n	800a66a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a624:	68f8      	ldr	r0, [r7, #12]
 800a626:	f7ff fe98 	bl	800a35a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2200      	movs	r2, #0
 800a62e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a632:	e01a      	b.n	800a66a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a63a:	b2db      	uxtb	r3, r3
 800a63c:	2b03      	cmp	r3, #3
 800a63e:	d114      	bne.n	800a66a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a646:	695b      	ldr	r3, [r3, #20]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d00e      	beq.n	800a66a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a652:	695b      	ldr	r3, [r3, #20]
 800a654:	7afa      	ldrb	r2, [r7, #11]
 800a656:	4611      	mov	r1, r2
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	4798      	blx	r3
 800a65c:	4603      	mov	r3, r0
 800a65e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a660:	7dfb      	ldrb	r3, [r7, #23]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d001      	beq.n	800a66a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a666:	7dfb      	ldrb	r3, [r7, #23]
 800a668:	e000      	b.n	800a66c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a66a:	2300      	movs	r3, #0
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3718      	adds	r7, #24
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b082      	sub	sp, #8
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2201      	movs	r2, #1
 800a680:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2200      	movs	r2, #0
 800a688:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2200      	movs	r2, #0
 800a690:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2200      	movs	r2, #0
 800a696:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d101      	bne.n	800a6a8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a6a4:	2303      	movs	r3, #3
 800a6a6:	e02f      	b.n	800a708 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d00f      	beq.n	800a6d2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d009      	beq.n	800a6d2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	687a      	ldr	r2, [r7, #4]
 800a6c8:	6852      	ldr	r2, [r2, #4]
 800a6ca:	b2d2      	uxtb	r2, r2
 800a6cc:	4611      	mov	r1, r2
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a6d2:	2340      	movs	r3, #64	; 0x40
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	2100      	movs	r1, #0
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f001 fb3c 	bl	800bd56 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2240      	movs	r2, #64	; 0x40
 800a6ea:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a6ee:	2340      	movs	r3, #64	; 0x40
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	2180      	movs	r1, #128	; 0x80
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f001 fb2e 	bl	800bd56 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2240      	movs	r2, #64	; 0x40
 800a704:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a706:	2300      	movs	r3, #0
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3708      	adds	r7, #8
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}

0800a710 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a710:	b480      	push	{r7}
 800a712:	b083      	sub	sp, #12
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	460b      	mov	r3, r1
 800a71a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	78fa      	ldrb	r2, [r7, #3]
 800a720:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a722:	2300      	movs	r3, #0
}
 800a724:	4618      	mov	r0, r3
 800a726:	370c      	adds	r7, #12
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr

0800a730 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a730:	b480      	push	{r7}
 800a732:	b083      	sub	sp, #12
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a73e:	b2da      	uxtb	r2, r3
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2204      	movs	r2, #4
 800a74a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a74e:	2300      	movs	r3, #0
}
 800a750:	4618      	mov	r0, r3
 800a752:	370c      	adds	r7, #12
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr

0800a75c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b083      	sub	sp, #12
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	2b04      	cmp	r3, #4
 800a76e:	d106      	bne.n	800a77e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a776:	b2da      	uxtb	r2, r3
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a77e:	2300      	movs	r3, #0
}
 800a780:	4618      	mov	r0, r3
 800a782:	370c      	adds	r7, #12
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr

0800a78c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b082      	sub	sp, #8
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d101      	bne.n	800a7a2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a79e:	2303      	movs	r3, #3
 800a7a0:	e012      	b.n	800a7c8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7a8:	b2db      	uxtb	r3, r3
 800a7aa:	2b03      	cmp	r3, #3
 800a7ac:	d10b      	bne.n	800a7c6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7b4:	69db      	ldr	r3, [r3, #28]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d005      	beq.n	800a7c6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7c0:	69db      	ldr	r3, [r3, #28]
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a7c6:	2300      	movs	r3, #0
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3708      	adds	r7, #8
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	460b      	mov	r3, r1
 800a7da:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d101      	bne.n	800a7ea <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a7e6:	2303      	movs	r3, #3
 800a7e8:	e014      	b.n	800a814 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	2b03      	cmp	r3, #3
 800a7f4:	d10d      	bne.n	800a812 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7fc:	6a1b      	ldr	r3, [r3, #32]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d007      	beq.n	800a812 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a808:	6a1b      	ldr	r3, [r3, #32]
 800a80a:	78fa      	ldrb	r2, [r7, #3]
 800a80c:	4611      	mov	r1, r2
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a812:	2300      	movs	r3, #0
}
 800a814:	4618      	mov	r0, r3
 800a816:	3708      	adds	r7, #8
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	460b      	mov	r3, r1
 800a826:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d101      	bne.n	800a836 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a832:	2303      	movs	r3, #3
 800a834:	e014      	b.n	800a860 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	2b03      	cmp	r3, #3
 800a840:	d10d      	bne.n	800a85e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d007      	beq.n	800a85e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a856:	78fa      	ldrb	r2, [r7, #3]
 800a858:	4611      	mov	r1, r2
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a85e:	2300      	movs	r3, #0
}
 800a860:	4618      	mov	r0, r3
 800a862:	3708      	adds	r7, #8
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a870:	2300      	movs	r3, #0
}
 800a872:	4618      	mov	r0, r3
 800a874:	370c      	adds	r7, #12
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr

0800a87e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a87e:	b580      	push	{r7, lr}
 800a880:	b082      	sub	sp, #8
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2201      	movs	r2, #1
 800a88a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a894:	2b00      	cmp	r3, #0
 800a896:	d009      	beq.n	800a8ac <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	6852      	ldr	r2, [r2, #4]
 800a8a4:	b2d2      	uxtb	r2, r2
 800a8a6:	4611      	mov	r1, r2
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	4798      	blx	r3
  }

  return USBD_OK;
 800a8ac:	2300      	movs	r3, #0
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3708      	adds	r7, #8
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}

0800a8b6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a8b6:	b480      	push	{r7}
 800a8b8:	b087      	sub	sp, #28
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a8d4:	8a3b      	ldrh	r3, [r7, #16]
 800a8d6:	021b      	lsls	r3, r3, #8
 800a8d8:	b21a      	sxth	r2, r3
 800a8da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	b21b      	sxth	r3, r3
 800a8e2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a8e4:	89fb      	ldrh	r3, [r7, #14]
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	371c      	adds	r7, #28
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f0:	4770      	bx	lr
	...

0800a8f4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8fe:	2300      	movs	r3, #0
 800a900:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a90a:	2b40      	cmp	r3, #64	; 0x40
 800a90c:	d005      	beq.n	800a91a <USBD_StdDevReq+0x26>
 800a90e:	2b40      	cmp	r3, #64	; 0x40
 800a910:	d853      	bhi.n	800a9ba <USBD_StdDevReq+0xc6>
 800a912:	2b00      	cmp	r3, #0
 800a914:	d00b      	beq.n	800a92e <USBD_StdDevReq+0x3a>
 800a916:	2b20      	cmp	r3, #32
 800a918:	d14f      	bne.n	800a9ba <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a920:	689b      	ldr	r3, [r3, #8]
 800a922:	6839      	ldr	r1, [r7, #0]
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	4798      	blx	r3
 800a928:	4603      	mov	r3, r0
 800a92a:	73fb      	strb	r3, [r7, #15]
      break;
 800a92c:	e04a      	b.n	800a9c4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	785b      	ldrb	r3, [r3, #1]
 800a932:	2b09      	cmp	r3, #9
 800a934:	d83b      	bhi.n	800a9ae <USBD_StdDevReq+0xba>
 800a936:	a201      	add	r2, pc, #4	; (adr r2, 800a93c <USBD_StdDevReq+0x48>)
 800a938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a93c:	0800a991 	.word	0x0800a991
 800a940:	0800a9a5 	.word	0x0800a9a5
 800a944:	0800a9af 	.word	0x0800a9af
 800a948:	0800a99b 	.word	0x0800a99b
 800a94c:	0800a9af 	.word	0x0800a9af
 800a950:	0800a96f 	.word	0x0800a96f
 800a954:	0800a965 	.word	0x0800a965
 800a958:	0800a9af 	.word	0x0800a9af
 800a95c:	0800a987 	.word	0x0800a987
 800a960:	0800a979 	.word	0x0800a979
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a964:	6839      	ldr	r1, [r7, #0]
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 f9de 	bl	800ad28 <USBD_GetDescriptor>
          break;
 800a96c:	e024      	b.n	800a9b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a96e:	6839      	ldr	r1, [r7, #0]
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f000 fb43 	bl	800affc <USBD_SetAddress>
          break;
 800a976:	e01f      	b.n	800a9b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a978:	6839      	ldr	r1, [r7, #0]
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 fb82 	bl	800b084 <USBD_SetConfig>
 800a980:	4603      	mov	r3, r0
 800a982:	73fb      	strb	r3, [r7, #15]
          break;
 800a984:	e018      	b.n	800a9b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a986:	6839      	ldr	r1, [r7, #0]
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 fc21 	bl	800b1d0 <USBD_GetConfig>
          break;
 800a98e:	e013      	b.n	800a9b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a990:	6839      	ldr	r1, [r7, #0]
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f000 fc52 	bl	800b23c <USBD_GetStatus>
          break;
 800a998:	e00e      	b.n	800a9b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a99a:	6839      	ldr	r1, [r7, #0]
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 fc81 	bl	800b2a4 <USBD_SetFeature>
          break;
 800a9a2:	e009      	b.n	800a9b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a9a4:	6839      	ldr	r1, [r7, #0]
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 fc90 	bl	800b2cc <USBD_ClrFeature>
          break;
 800a9ac:	e004      	b.n	800a9b8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a9ae:	6839      	ldr	r1, [r7, #0]
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 fce7 	bl	800b384 <USBD_CtlError>
          break;
 800a9b6:	bf00      	nop
      }
      break;
 800a9b8:	e004      	b.n	800a9c4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a9ba:	6839      	ldr	r1, [r7, #0]
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 fce1 	bl	800b384 <USBD_CtlError>
      break;
 800a9c2:	bf00      	nop
  }

  return ret;
 800a9c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3710      	adds	r7, #16
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop

0800a9d0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	781b      	ldrb	r3, [r3, #0]
 800a9e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a9e6:	2b40      	cmp	r3, #64	; 0x40
 800a9e8:	d005      	beq.n	800a9f6 <USBD_StdItfReq+0x26>
 800a9ea:	2b40      	cmp	r3, #64	; 0x40
 800a9ec:	d82f      	bhi.n	800aa4e <USBD_StdItfReq+0x7e>
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d001      	beq.n	800a9f6 <USBD_StdItfReq+0x26>
 800a9f2:	2b20      	cmp	r3, #32
 800a9f4:	d12b      	bne.n	800aa4e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9fc:	b2db      	uxtb	r3, r3
 800a9fe:	3b01      	subs	r3, #1
 800aa00:	2b02      	cmp	r3, #2
 800aa02:	d81d      	bhi.n	800aa40 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	889b      	ldrh	r3, [r3, #4]
 800aa08:	b2db      	uxtb	r3, r3
 800aa0a:	2b01      	cmp	r3, #1
 800aa0c:	d813      	bhi.n	800aa36 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa14:	689b      	ldr	r3, [r3, #8]
 800aa16:	6839      	ldr	r1, [r7, #0]
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	4798      	blx	r3
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	88db      	ldrh	r3, [r3, #6]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d110      	bne.n	800aa4a <USBD_StdItfReq+0x7a>
 800aa28:	7bfb      	ldrb	r3, [r7, #15]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d10d      	bne.n	800aa4a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 fd73 	bl	800b51a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aa34:	e009      	b.n	800aa4a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800aa36:	6839      	ldr	r1, [r7, #0]
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 fca3 	bl	800b384 <USBD_CtlError>
          break;
 800aa3e:	e004      	b.n	800aa4a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800aa40:	6839      	ldr	r1, [r7, #0]
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 fc9e 	bl	800b384 <USBD_CtlError>
          break;
 800aa48:	e000      	b.n	800aa4c <USBD_StdItfReq+0x7c>
          break;
 800aa4a:	bf00      	nop
      }
      break;
 800aa4c:	e004      	b.n	800aa58 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800aa4e:	6839      	ldr	r1, [r7, #0]
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f000 fc97 	bl	800b384 <USBD_CtlError>
      break;
 800aa56:	bf00      	nop
  }

  return ret;
 800aa58:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3710      	adds	r7, #16
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}

0800aa62 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa62:	b580      	push	{r7, lr}
 800aa64:	b084      	sub	sp, #16
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
 800aa6a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	889b      	ldrh	r3, [r3, #4]
 800aa74:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa7e:	2b40      	cmp	r3, #64	; 0x40
 800aa80:	d007      	beq.n	800aa92 <USBD_StdEPReq+0x30>
 800aa82:	2b40      	cmp	r3, #64	; 0x40
 800aa84:	f200 8145 	bhi.w	800ad12 <USBD_StdEPReq+0x2b0>
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d00c      	beq.n	800aaa6 <USBD_StdEPReq+0x44>
 800aa8c:	2b20      	cmp	r3, #32
 800aa8e:	f040 8140 	bne.w	800ad12 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa98:	689b      	ldr	r3, [r3, #8]
 800aa9a:	6839      	ldr	r1, [r7, #0]
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	4798      	blx	r3
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	73fb      	strb	r3, [r7, #15]
      break;
 800aaa4:	e13a      	b.n	800ad1c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	785b      	ldrb	r3, [r3, #1]
 800aaaa:	2b03      	cmp	r3, #3
 800aaac:	d007      	beq.n	800aabe <USBD_StdEPReq+0x5c>
 800aaae:	2b03      	cmp	r3, #3
 800aab0:	f300 8129 	bgt.w	800ad06 <USBD_StdEPReq+0x2a4>
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d07f      	beq.n	800abb8 <USBD_StdEPReq+0x156>
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d03c      	beq.n	800ab36 <USBD_StdEPReq+0xd4>
 800aabc:	e123      	b.n	800ad06 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	2b02      	cmp	r3, #2
 800aac8:	d002      	beq.n	800aad0 <USBD_StdEPReq+0x6e>
 800aaca:	2b03      	cmp	r3, #3
 800aacc:	d016      	beq.n	800aafc <USBD_StdEPReq+0x9a>
 800aace:	e02c      	b.n	800ab2a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aad0:	7bbb      	ldrb	r3, [r7, #14]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d00d      	beq.n	800aaf2 <USBD_StdEPReq+0x90>
 800aad6:	7bbb      	ldrb	r3, [r7, #14]
 800aad8:	2b80      	cmp	r3, #128	; 0x80
 800aada:	d00a      	beq.n	800aaf2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aadc:	7bbb      	ldrb	r3, [r7, #14]
 800aade:	4619      	mov	r1, r3
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f001 f97d 	bl	800bde0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aae6:	2180      	movs	r1, #128	; 0x80
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f001 f979 	bl	800bde0 <USBD_LL_StallEP>
 800aaee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aaf0:	e020      	b.n	800ab34 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800aaf2:	6839      	ldr	r1, [r7, #0]
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 fc45 	bl	800b384 <USBD_CtlError>
              break;
 800aafa:	e01b      	b.n	800ab34 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	885b      	ldrh	r3, [r3, #2]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d10e      	bne.n	800ab22 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ab04:	7bbb      	ldrb	r3, [r7, #14]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d00b      	beq.n	800ab22 <USBD_StdEPReq+0xc0>
 800ab0a:	7bbb      	ldrb	r3, [r7, #14]
 800ab0c:	2b80      	cmp	r3, #128	; 0x80
 800ab0e:	d008      	beq.n	800ab22 <USBD_StdEPReq+0xc0>
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	88db      	ldrh	r3, [r3, #6]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d104      	bne.n	800ab22 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab18:	7bbb      	ldrb	r3, [r7, #14]
 800ab1a:	4619      	mov	r1, r3
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f001 f95f 	bl	800bde0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f000 fcf9 	bl	800b51a <USBD_CtlSendStatus>

              break;
 800ab28:	e004      	b.n	800ab34 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800ab2a:	6839      	ldr	r1, [r7, #0]
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 fc29 	bl	800b384 <USBD_CtlError>
              break;
 800ab32:	bf00      	nop
          }
          break;
 800ab34:	e0ec      	b.n	800ad10 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	2b02      	cmp	r3, #2
 800ab40:	d002      	beq.n	800ab48 <USBD_StdEPReq+0xe6>
 800ab42:	2b03      	cmp	r3, #3
 800ab44:	d016      	beq.n	800ab74 <USBD_StdEPReq+0x112>
 800ab46:	e030      	b.n	800abaa <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab48:	7bbb      	ldrb	r3, [r7, #14]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d00d      	beq.n	800ab6a <USBD_StdEPReq+0x108>
 800ab4e:	7bbb      	ldrb	r3, [r7, #14]
 800ab50:	2b80      	cmp	r3, #128	; 0x80
 800ab52:	d00a      	beq.n	800ab6a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab54:	7bbb      	ldrb	r3, [r7, #14]
 800ab56:	4619      	mov	r1, r3
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f001 f941 	bl	800bde0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab5e:	2180      	movs	r1, #128	; 0x80
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f001 f93d 	bl	800bde0 <USBD_LL_StallEP>
 800ab66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ab68:	e025      	b.n	800abb6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800ab6a:	6839      	ldr	r1, [r7, #0]
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f000 fc09 	bl	800b384 <USBD_CtlError>
              break;
 800ab72:	e020      	b.n	800abb6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	885b      	ldrh	r3, [r3, #2]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d11b      	bne.n	800abb4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ab7c:	7bbb      	ldrb	r3, [r7, #14]
 800ab7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d004      	beq.n	800ab90 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ab86:	7bbb      	ldrb	r3, [r7, #14]
 800ab88:	4619      	mov	r1, r3
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f001 f947 	bl	800be1e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f000 fcc2 	bl	800b51a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab9c:	689b      	ldr	r3, [r3, #8]
 800ab9e:	6839      	ldr	r1, [r7, #0]
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	4798      	blx	r3
 800aba4:	4603      	mov	r3, r0
 800aba6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800aba8:	e004      	b.n	800abb4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800abaa:	6839      	ldr	r1, [r7, #0]
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f000 fbe9 	bl	800b384 <USBD_CtlError>
              break;
 800abb2:	e000      	b.n	800abb6 <USBD_StdEPReq+0x154>
              break;
 800abb4:	bf00      	nop
          }
          break;
 800abb6:	e0ab      	b.n	800ad10 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	2b02      	cmp	r3, #2
 800abc2:	d002      	beq.n	800abca <USBD_StdEPReq+0x168>
 800abc4:	2b03      	cmp	r3, #3
 800abc6:	d032      	beq.n	800ac2e <USBD_StdEPReq+0x1cc>
 800abc8:	e097      	b.n	800acfa <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800abca:	7bbb      	ldrb	r3, [r7, #14]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d007      	beq.n	800abe0 <USBD_StdEPReq+0x17e>
 800abd0:	7bbb      	ldrb	r3, [r7, #14]
 800abd2:	2b80      	cmp	r3, #128	; 0x80
 800abd4:	d004      	beq.n	800abe0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800abd6:	6839      	ldr	r1, [r7, #0]
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f000 fbd3 	bl	800b384 <USBD_CtlError>
                break;
 800abde:	e091      	b.n	800ad04 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abe0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	da0b      	bge.n	800ac00 <USBD_StdEPReq+0x19e>
 800abe8:	7bbb      	ldrb	r3, [r7, #14]
 800abea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800abee:	4613      	mov	r3, r2
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	4413      	add	r3, r2
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	3310      	adds	r3, #16
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	4413      	add	r3, r2
 800abfc:	3304      	adds	r3, #4
 800abfe:	e00b      	b.n	800ac18 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ac00:	7bbb      	ldrb	r3, [r7, #14]
 800ac02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac06:	4613      	mov	r3, r2
 800ac08:	009b      	lsls	r3, r3, #2
 800ac0a:	4413      	add	r3, r2
 800ac0c:	009b      	lsls	r3, r3, #2
 800ac0e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	4413      	add	r3, r2
 800ac16:	3304      	adds	r3, #4
 800ac18:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	2202      	movs	r2, #2
 800ac24:	4619      	mov	r1, r3
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 fc1d 	bl	800b466 <USBD_CtlSendData>
              break;
 800ac2c:	e06a      	b.n	800ad04 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ac2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	da11      	bge.n	800ac5a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ac36:	7bbb      	ldrb	r3, [r7, #14]
 800ac38:	f003 020f 	and.w	r2, r3, #15
 800ac3c:	6879      	ldr	r1, [r7, #4]
 800ac3e:	4613      	mov	r3, r2
 800ac40:	009b      	lsls	r3, r3, #2
 800ac42:	4413      	add	r3, r2
 800ac44:	009b      	lsls	r3, r3, #2
 800ac46:	440b      	add	r3, r1
 800ac48:	3324      	adds	r3, #36	; 0x24
 800ac4a:	881b      	ldrh	r3, [r3, #0]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d117      	bne.n	800ac80 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ac50:	6839      	ldr	r1, [r7, #0]
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 fb96 	bl	800b384 <USBD_CtlError>
                  break;
 800ac58:	e054      	b.n	800ad04 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ac5a:	7bbb      	ldrb	r3, [r7, #14]
 800ac5c:	f003 020f 	and.w	r2, r3, #15
 800ac60:	6879      	ldr	r1, [r7, #4]
 800ac62:	4613      	mov	r3, r2
 800ac64:	009b      	lsls	r3, r3, #2
 800ac66:	4413      	add	r3, r2
 800ac68:	009b      	lsls	r3, r3, #2
 800ac6a:	440b      	add	r3, r1
 800ac6c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ac70:	881b      	ldrh	r3, [r3, #0]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d104      	bne.n	800ac80 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ac76:	6839      	ldr	r1, [r7, #0]
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 fb83 	bl	800b384 <USBD_CtlError>
                  break;
 800ac7e:	e041      	b.n	800ad04 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	da0b      	bge.n	800aca0 <USBD_StdEPReq+0x23e>
 800ac88:	7bbb      	ldrb	r3, [r7, #14]
 800ac8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac8e:	4613      	mov	r3, r2
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	4413      	add	r3, r2
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	3310      	adds	r3, #16
 800ac98:	687a      	ldr	r2, [r7, #4]
 800ac9a:	4413      	add	r3, r2
 800ac9c:	3304      	adds	r3, #4
 800ac9e:	e00b      	b.n	800acb8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aca0:	7bbb      	ldrb	r3, [r7, #14]
 800aca2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aca6:	4613      	mov	r3, r2
 800aca8:	009b      	lsls	r3, r3, #2
 800acaa:	4413      	add	r3, r2
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	4413      	add	r3, r2
 800acb6:	3304      	adds	r3, #4
 800acb8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800acba:	7bbb      	ldrb	r3, [r7, #14]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d002      	beq.n	800acc6 <USBD_StdEPReq+0x264>
 800acc0:	7bbb      	ldrb	r3, [r7, #14]
 800acc2:	2b80      	cmp	r3, #128	; 0x80
 800acc4:	d103      	bne.n	800acce <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	2200      	movs	r2, #0
 800acca:	601a      	str	r2, [r3, #0]
 800accc:	e00e      	b.n	800acec <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800acce:	7bbb      	ldrb	r3, [r7, #14]
 800acd0:	4619      	mov	r1, r3
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f001 f8c2 	bl	800be5c <USBD_LL_IsStallEP>
 800acd8:	4603      	mov	r3, r0
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d003      	beq.n	800ace6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	2201      	movs	r2, #1
 800ace2:	601a      	str	r2, [r3, #0]
 800ace4:	e002      	b.n	800acec <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	2200      	movs	r2, #0
 800acea:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	2202      	movs	r2, #2
 800acf0:	4619      	mov	r1, r3
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 fbb7 	bl	800b466 <USBD_CtlSendData>
              break;
 800acf8:	e004      	b.n	800ad04 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800acfa:	6839      	ldr	r1, [r7, #0]
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f000 fb41 	bl	800b384 <USBD_CtlError>
              break;
 800ad02:	bf00      	nop
          }
          break;
 800ad04:	e004      	b.n	800ad10 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ad06:	6839      	ldr	r1, [r7, #0]
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f000 fb3b 	bl	800b384 <USBD_CtlError>
          break;
 800ad0e:	bf00      	nop
      }
      break;
 800ad10:	e004      	b.n	800ad1c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800ad12:	6839      	ldr	r1, [r7, #0]
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f000 fb35 	bl	800b384 <USBD_CtlError>
      break;
 800ad1a:	bf00      	nop
  }

  return ret;
 800ad1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3710      	adds	r7, #16
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
	...

0800ad28 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ad32:	2300      	movs	r3, #0
 800ad34:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ad36:	2300      	movs	r3, #0
 800ad38:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	885b      	ldrh	r3, [r3, #2]
 800ad42:	0a1b      	lsrs	r3, r3, #8
 800ad44:	b29b      	uxth	r3, r3
 800ad46:	3b01      	subs	r3, #1
 800ad48:	2b06      	cmp	r3, #6
 800ad4a:	f200 8128 	bhi.w	800af9e <USBD_GetDescriptor+0x276>
 800ad4e:	a201      	add	r2, pc, #4	; (adr r2, 800ad54 <USBD_GetDescriptor+0x2c>)
 800ad50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad54:	0800ad71 	.word	0x0800ad71
 800ad58:	0800ad89 	.word	0x0800ad89
 800ad5c:	0800adc9 	.word	0x0800adc9
 800ad60:	0800af9f 	.word	0x0800af9f
 800ad64:	0800af9f 	.word	0x0800af9f
 800ad68:	0800af3f 	.word	0x0800af3f
 800ad6c:	0800af6b 	.word	0x0800af6b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	7c12      	ldrb	r2, [r2, #16]
 800ad7c:	f107 0108 	add.w	r1, r7, #8
 800ad80:	4610      	mov	r0, r2
 800ad82:	4798      	blx	r3
 800ad84:	60f8      	str	r0, [r7, #12]
      break;
 800ad86:	e112      	b.n	800afae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	7c1b      	ldrb	r3, [r3, #16]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d10d      	bne.n	800adac <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad98:	f107 0208 	add.w	r2, r7, #8
 800ad9c:	4610      	mov	r0, r2
 800ad9e:	4798      	blx	r3
 800ada0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	3301      	adds	r3, #1
 800ada6:	2202      	movs	r2, #2
 800ada8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800adaa:	e100      	b.n	800afae <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb4:	f107 0208 	add.w	r2, r7, #8
 800adb8:	4610      	mov	r0, r2
 800adba:	4798      	blx	r3
 800adbc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	3301      	adds	r3, #1
 800adc2:	2202      	movs	r2, #2
 800adc4:	701a      	strb	r2, [r3, #0]
      break;
 800adc6:	e0f2      	b.n	800afae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	885b      	ldrh	r3, [r3, #2]
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	2b05      	cmp	r3, #5
 800add0:	f200 80ac 	bhi.w	800af2c <USBD_GetDescriptor+0x204>
 800add4:	a201      	add	r2, pc, #4	; (adr r2, 800addc <USBD_GetDescriptor+0xb4>)
 800add6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adda:	bf00      	nop
 800addc:	0800adf5 	.word	0x0800adf5
 800ade0:	0800ae29 	.word	0x0800ae29
 800ade4:	0800ae5d 	.word	0x0800ae5d
 800ade8:	0800ae91 	.word	0x0800ae91
 800adec:	0800aec5 	.word	0x0800aec5
 800adf0:	0800aef9 	.word	0x0800aef9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d00b      	beq.n	800ae18 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	687a      	ldr	r2, [r7, #4]
 800ae0a:	7c12      	ldrb	r2, [r2, #16]
 800ae0c:	f107 0108 	add.w	r1, r7, #8
 800ae10:	4610      	mov	r0, r2
 800ae12:	4798      	blx	r3
 800ae14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae16:	e091      	b.n	800af3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae18:	6839      	ldr	r1, [r7, #0]
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 fab2 	bl	800b384 <USBD_CtlError>
            err++;
 800ae20:	7afb      	ldrb	r3, [r7, #11]
 800ae22:	3301      	adds	r3, #1
 800ae24:	72fb      	strb	r3, [r7, #11]
          break;
 800ae26:	e089      	b.n	800af3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae2e:	689b      	ldr	r3, [r3, #8]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d00b      	beq.n	800ae4c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae3a:	689b      	ldr	r3, [r3, #8]
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	7c12      	ldrb	r2, [r2, #16]
 800ae40:	f107 0108 	add.w	r1, r7, #8
 800ae44:	4610      	mov	r0, r2
 800ae46:	4798      	blx	r3
 800ae48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae4a:	e077      	b.n	800af3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae4c:	6839      	ldr	r1, [r7, #0]
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f000 fa98 	bl	800b384 <USBD_CtlError>
            err++;
 800ae54:	7afb      	ldrb	r3, [r7, #11]
 800ae56:	3301      	adds	r3, #1
 800ae58:	72fb      	strb	r3, [r7, #11]
          break;
 800ae5a:	e06f      	b.n	800af3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae62:	68db      	ldr	r3, [r3, #12]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d00b      	beq.n	800ae80 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	687a      	ldr	r2, [r7, #4]
 800ae72:	7c12      	ldrb	r2, [r2, #16]
 800ae74:	f107 0108 	add.w	r1, r7, #8
 800ae78:	4610      	mov	r0, r2
 800ae7a:	4798      	blx	r3
 800ae7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae7e:	e05d      	b.n	800af3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae80:	6839      	ldr	r1, [r7, #0]
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f000 fa7e 	bl	800b384 <USBD_CtlError>
            err++;
 800ae88:	7afb      	ldrb	r3, [r7, #11]
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	72fb      	strb	r3, [r7, #11]
          break;
 800ae8e:	e055      	b.n	800af3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae96:	691b      	ldr	r3, [r3, #16]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d00b      	beq.n	800aeb4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aea2:	691b      	ldr	r3, [r3, #16]
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	7c12      	ldrb	r2, [r2, #16]
 800aea8:	f107 0108 	add.w	r1, r7, #8
 800aeac:	4610      	mov	r0, r2
 800aeae:	4798      	blx	r3
 800aeb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aeb2:	e043      	b.n	800af3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aeb4:	6839      	ldr	r1, [r7, #0]
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 fa64 	bl	800b384 <USBD_CtlError>
            err++;
 800aebc:	7afb      	ldrb	r3, [r7, #11]
 800aebe:	3301      	adds	r3, #1
 800aec0:	72fb      	strb	r3, [r7, #11]
          break;
 800aec2:	e03b      	b.n	800af3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeca:	695b      	ldr	r3, [r3, #20]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d00b      	beq.n	800aee8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aed6:	695b      	ldr	r3, [r3, #20]
 800aed8:	687a      	ldr	r2, [r7, #4]
 800aeda:	7c12      	ldrb	r2, [r2, #16]
 800aedc:	f107 0108 	add.w	r1, r7, #8
 800aee0:	4610      	mov	r0, r2
 800aee2:	4798      	blx	r3
 800aee4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aee6:	e029      	b.n	800af3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aee8:	6839      	ldr	r1, [r7, #0]
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 fa4a 	bl	800b384 <USBD_CtlError>
            err++;
 800aef0:	7afb      	ldrb	r3, [r7, #11]
 800aef2:	3301      	adds	r3, #1
 800aef4:	72fb      	strb	r3, [r7, #11]
          break;
 800aef6:	e021      	b.n	800af3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aefe:	699b      	ldr	r3, [r3, #24]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d00b      	beq.n	800af1c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af0a:	699b      	ldr	r3, [r3, #24]
 800af0c:	687a      	ldr	r2, [r7, #4]
 800af0e:	7c12      	ldrb	r2, [r2, #16]
 800af10:	f107 0108 	add.w	r1, r7, #8
 800af14:	4610      	mov	r0, r2
 800af16:	4798      	blx	r3
 800af18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af1a:	e00f      	b.n	800af3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af1c:	6839      	ldr	r1, [r7, #0]
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f000 fa30 	bl	800b384 <USBD_CtlError>
            err++;
 800af24:	7afb      	ldrb	r3, [r7, #11]
 800af26:	3301      	adds	r3, #1
 800af28:	72fb      	strb	r3, [r7, #11]
          break;
 800af2a:	e007      	b.n	800af3c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800af2c:	6839      	ldr	r1, [r7, #0]
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 fa28 	bl	800b384 <USBD_CtlError>
          err++;
 800af34:	7afb      	ldrb	r3, [r7, #11]
 800af36:	3301      	adds	r3, #1
 800af38:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800af3a:	bf00      	nop
      }
      break;
 800af3c:	e037      	b.n	800afae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	7c1b      	ldrb	r3, [r3, #16]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d109      	bne.n	800af5a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af4e:	f107 0208 	add.w	r2, r7, #8
 800af52:	4610      	mov	r0, r2
 800af54:	4798      	blx	r3
 800af56:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af58:	e029      	b.n	800afae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800af5a:	6839      	ldr	r1, [r7, #0]
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f000 fa11 	bl	800b384 <USBD_CtlError>
        err++;
 800af62:	7afb      	ldrb	r3, [r7, #11]
 800af64:	3301      	adds	r3, #1
 800af66:	72fb      	strb	r3, [r7, #11]
      break;
 800af68:	e021      	b.n	800afae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	7c1b      	ldrb	r3, [r3, #16]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d10d      	bne.n	800af8e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af7a:	f107 0208 	add.w	r2, r7, #8
 800af7e:	4610      	mov	r0, r2
 800af80:	4798      	blx	r3
 800af82:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	3301      	adds	r3, #1
 800af88:	2207      	movs	r2, #7
 800af8a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af8c:	e00f      	b.n	800afae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800af8e:	6839      	ldr	r1, [r7, #0]
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f000 f9f7 	bl	800b384 <USBD_CtlError>
        err++;
 800af96:	7afb      	ldrb	r3, [r7, #11]
 800af98:	3301      	adds	r3, #1
 800af9a:	72fb      	strb	r3, [r7, #11]
      break;
 800af9c:	e007      	b.n	800afae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800af9e:	6839      	ldr	r1, [r7, #0]
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 f9ef 	bl	800b384 <USBD_CtlError>
      err++;
 800afa6:	7afb      	ldrb	r3, [r7, #11]
 800afa8:	3301      	adds	r3, #1
 800afaa:	72fb      	strb	r3, [r7, #11]
      break;
 800afac:	bf00      	nop
  }

  if (err != 0U)
 800afae:	7afb      	ldrb	r3, [r7, #11]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d11e      	bne.n	800aff2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	88db      	ldrh	r3, [r3, #6]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d016      	beq.n	800afea <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800afbc:	893b      	ldrh	r3, [r7, #8]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d00e      	beq.n	800afe0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	88da      	ldrh	r2, [r3, #6]
 800afc6:	893b      	ldrh	r3, [r7, #8]
 800afc8:	4293      	cmp	r3, r2
 800afca:	bf28      	it	cs
 800afcc:	4613      	movcs	r3, r2
 800afce:	b29b      	uxth	r3, r3
 800afd0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800afd2:	893b      	ldrh	r3, [r7, #8]
 800afd4:	461a      	mov	r2, r3
 800afd6:	68f9      	ldr	r1, [r7, #12]
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f000 fa44 	bl	800b466 <USBD_CtlSendData>
 800afde:	e009      	b.n	800aff4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800afe0:	6839      	ldr	r1, [r7, #0]
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f000 f9ce 	bl	800b384 <USBD_CtlError>
 800afe8:	e004      	b.n	800aff4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 fa95 	bl	800b51a <USBD_CtlSendStatus>
 800aff0:	e000      	b.n	800aff4 <USBD_GetDescriptor+0x2cc>
    return;
 800aff2:	bf00      	nop
  }
}
 800aff4:	3710      	adds	r7, #16
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}
 800affa:	bf00      	nop

0800affc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b084      	sub	sp, #16
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	889b      	ldrh	r3, [r3, #4]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d131      	bne.n	800b072 <USBD_SetAddress+0x76>
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	88db      	ldrh	r3, [r3, #6]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d12d      	bne.n	800b072 <USBD_SetAddress+0x76>
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	885b      	ldrh	r3, [r3, #2]
 800b01a:	2b7f      	cmp	r3, #127	; 0x7f
 800b01c:	d829      	bhi.n	800b072 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	885b      	ldrh	r3, [r3, #2]
 800b022:	b2db      	uxtb	r3, r3
 800b024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b028:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b030:	b2db      	uxtb	r3, r3
 800b032:	2b03      	cmp	r3, #3
 800b034:	d104      	bne.n	800b040 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b036:	6839      	ldr	r1, [r7, #0]
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f000 f9a3 	bl	800b384 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b03e:	e01d      	b.n	800b07c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	7bfa      	ldrb	r2, [r7, #15]
 800b044:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b048:	7bfb      	ldrb	r3, [r7, #15]
 800b04a:	4619      	mov	r1, r3
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f000 ff31 	bl	800beb4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f000 fa61 	bl	800b51a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b058:	7bfb      	ldrb	r3, [r7, #15]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d004      	beq.n	800b068 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2202      	movs	r2, #2
 800b062:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b066:	e009      	b.n	800b07c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2201      	movs	r2, #1
 800b06c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b070:	e004      	b.n	800b07c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b072:	6839      	ldr	r1, [r7, #0]
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 f985 	bl	800b384 <USBD_CtlError>
  }
}
 800b07a:	bf00      	nop
 800b07c:	bf00      	nop
 800b07e:	3710      	adds	r7, #16
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}

0800b084 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b08e:	2300      	movs	r3, #0
 800b090:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	885b      	ldrh	r3, [r3, #2]
 800b096:	b2da      	uxtb	r2, r3
 800b098:	4b4c      	ldr	r3, [pc, #304]	; (800b1cc <USBD_SetConfig+0x148>)
 800b09a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b09c:	4b4b      	ldr	r3, [pc, #300]	; (800b1cc <USBD_SetConfig+0x148>)
 800b09e:	781b      	ldrb	r3, [r3, #0]
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	d905      	bls.n	800b0b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b0a4:	6839      	ldr	r1, [r7, #0]
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f000 f96c 	bl	800b384 <USBD_CtlError>
    return USBD_FAIL;
 800b0ac:	2303      	movs	r3, #3
 800b0ae:	e088      	b.n	800b1c2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0b6:	b2db      	uxtb	r3, r3
 800b0b8:	2b02      	cmp	r3, #2
 800b0ba:	d002      	beq.n	800b0c2 <USBD_SetConfig+0x3e>
 800b0bc:	2b03      	cmp	r3, #3
 800b0be:	d025      	beq.n	800b10c <USBD_SetConfig+0x88>
 800b0c0:	e071      	b.n	800b1a6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b0c2:	4b42      	ldr	r3, [pc, #264]	; (800b1cc <USBD_SetConfig+0x148>)
 800b0c4:	781b      	ldrb	r3, [r3, #0]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d01c      	beq.n	800b104 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b0ca:	4b40      	ldr	r3, [pc, #256]	; (800b1cc <USBD_SetConfig+0x148>)
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b0d4:	4b3d      	ldr	r3, [pc, #244]	; (800b1cc <USBD_SetConfig+0x148>)
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	4619      	mov	r1, r3
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f7ff f948 	bl	800a370 <USBD_SetClassConfig>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b0e4:	7bfb      	ldrb	r3, [r7, #15]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d004      	beq.n	800b0f4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b0ea:	6839      	ldr	r1, [r7, #0]
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f000 f949 	bl	800b384 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b0f2:	e065      	b.n	800b1c0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f000 fa10 	bl	800b51a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2203      	movs	r2, #3
 800b0fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b102:	e05d      	b.n	800b1c0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f000 fa08 	bl	800b51a <USBD_CtlSendStatus>
      break;
 800b10a:	e059      	b.n	800b1c0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b10c:	4b2f      	ldr	r3, [pc, #188]	; (800b1cc <USBD_SetConfig+0x148>)
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d112      	bne.n	800b13a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2202      	movs	r2, #2
 800b118:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b11c:	4b2b      	ldr	r3, [pc, #172]	; (800b1cc <USBD_SetConfig+0x148>)
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	461a      	mov	r2, r3
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b126:	4b29      	ldr	r3, [pc, #164]	; (800b1cc <USBD_SetConfig+0x148>)
 800b128:	781b      	ldrb	r3, [r3, #0]
 800b12a:	4619      	mov	r1, r3
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f7ff f93b 	bl	800a3a8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f000 f9f1 	bl	800b51a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b138:	e042      	b.n	800b1c0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b13a:	4b24      	ldr	r3, [pc, #144]	; (800b1cc <USBD_SetConfig+0x148>)
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	461a      	mov	r2, r3
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	685b      	ldr	r3, [r3, #4]
 800b144:	429a      	cmp	r2, r3
 800b146:	d02a      	beq.n	800b19e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	685b      	ldr	r3, [r3, #4]
 800b14c:	b2db      	uxtb	r3, r3
 800b14e:	4619      	mov	r1, r3
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f7ff f929 	bl	800a3a8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b156:	4b1d      	ldr	r3, [pc, #116]	; (800b1cc <USBD_SetConfig+0x148>)
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	461a      	mov	r2, r3
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b160:	4b1a      	ldr	r3, [pc, #104]	; (800b1cc <USBD_SetConfig+0x148>)
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	4619      	mov	r1, r3
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f7ff f902 	bl	800a370 <USBD_SetClassConfig>
 800b16c:	4603      	mov	r3, r0
 800b16e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b170:	7bfb      	ldrb	r3, [r7, #15]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d00f      	beq.n	800b196 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b176:	6839      	ldr	r1, [r7, #0]
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f000 f903 	bl	800b384 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	685b      	ldr	r3, [r3, #4]
 800b182:	b2db      	uxtb	r3, r3
 800b184:	4619      	mov	r1, r3
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f7ff f90e 	bl	800a3a8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2202      	movs	r2, #2
 800b190:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b194:	e014      	b.n	800b1c0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	f000 f9bf 	bl	800b51a <USBD_CtlSendStatus>
      break;
 800b19c:	e010      	b.n	800b1c0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 f9bb 	bl	800b51a <USBD_CtlSendStatus>
      break;
 800b1a4:	e00c      	b.n	800b1c0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b1a6:	6839      	ldr	r1, [r7, #0]
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f000 f8eb 	bl	800b384 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b1ae:	4b07      	ldr	r3, [pc, #28]	; (800b1cc <USBD_SetConfig+0x148>)
 800b1b0:	781b      	ldrb	r3, [r3, #0]
 800b1b2:	4619      	mov	r1, r3
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f7ff f8f7 	bl	800a3a8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b1ba:	2303      	movs	r3, #3
 800b1bc:	73fb      	strb	r3, [r7, #15]
      break;
 800b1be:	bf00      	nop
  }

  return ret;
 800b1c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3710      	adds	r7, #16
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	20000395 	.word	0x20000395

0800b1d0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	88db      	ldrh	r3, [r3, #6]
 800b1de:	2b01      	cmp	r3, #1
 800b1e0:	d004      	beq.n	800b1ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b1e2:	6839      	ldr	r1, [r7, #0]
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f000 f8cd 	bl	800b384 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b1ea:	e023      	b.n	800b234 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1f2:	b2db      	uxtb	r3, r3
 800b1f4:	2b02      	cmp	r3, #2
 800b1f6:	dc02      	bgt.n	800b1fe <USBD_GetConfig+0x2e>
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	dc03      	bgt.n	800b204 <USBD_GetConfig+0x34>
 800b1fc:	e015      	b.n	800b22a <USBD_GetConfig+0x5a>
 800b1fe:	2b03      	cmp	r3, #3
 800b200:	d00b      	beq.n	800b21a <USBD_GetConfig+0x4a>
 800b202:	e012      	b.n	800b22a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2200      	movs	r2, #0
 800b208:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	3308      	adds	r3, #8
 800b20e:	2201      	movs	r2, #1
 800b210:	4619      	mov	r1, r3
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f000 f927 	bl	800b466 <USBD_CtlSendData>
        break;
 800b218:	e00c      	b.n	800b234 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	3304      	adds	r3, #4
 800b21e:	2201      	movs	r2, #1
 800b220:	4619      	mov	r1, r3
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f000 f91f 	bl	800b466 <USBD_CtlSendData>
        break;
 800b228:	e004      	b.n	800b234 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b22a:	6839      	ldr	r1, [r7, #0]
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f000 f8a9 	bl	800b384 <USBD_CtlError>
        break;
 800b232:	bf00      	nop
}
 800b234:	bf00      	nop
 800b236:	3708      	adds	r7, #8
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b24c:	b2db      	uxtb	r3, r3
 800b24e:	3b01      	subs	r3, #1
 800b250:	2b02      	cmp	r3, #2
 800b252:	d81e      	bhi.n	800b292 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	88db      	ldrh	r3, [r3, #6]
 800b258:	2b02      	cmp	r3, #2
 800b25a:	d004      	beq.n	800b266 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b25c:	6839      	ldr	r1, [r7, #0]
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f000 f890 	bl	800b384 <USBD_CtlError>
        break;
 800b264:	e01a      	b.n	800b29c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2201      	movs	r2, #1
 800b26a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b272:	2b00      	cmp	r3, #0
 800b274:	d005      	beq.n	800b282 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	68db      	ldr	r3, [r3, #12]
 800b27a:	f043 0202 	orr.w	r2, r3, #2
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	330c      	adds	r3, #12
 800b286:	2202      	movs	r2, #2
 800b288:	4619      	mov	r1, r3
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 f8eb 	bl	800b466 <USBD_CtlSendData>
      break;
 800b290:	e004      	b.n	800b29c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b292:	6839      	ldr	r1, [r7, #0]
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 f875 	bl	800b384 <USBD_CtlError>
      break;
 800b29a:	bf00      	nop
  }
}
 800b29c:	bf00      	nop
 800b29e:	3708      	adds	r7, #8
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}

0800b2a4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	885b      	ldrh	r3, [r3, #2]
 800b2b2:	2b01      	cmp	r3, #1
 800b2b4:	d106      	bne.n	800b2c4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2201      	movs	r2, #1
 800b2ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f000 f92b 	bl	800b51a <USBD_CtlSendStatus>
  }
}
 800b2c4:	bf00      	nop
 800b2c6:	3708      	adds	r7, #8
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}

0800b2cc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b082      	sub	sp, #8
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	3b01      	subs	r3, #1
 800b2e0:	2b02      	cmp	r3, #2
 800b2e2:	d80b      	bhi.n	800b2fc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	885b      	ldrh	r3, [r3, #2]
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d10c      	bne.n	800b306 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f000 f910 	bl	800b51a <USBD_CtlSendStatus>
      }
      break;
 800b2fa:	e004      	b.n	800b306 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b2fc:	6839      	ldr	r1, [r7, #0]
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f000 f840 	bl	800b384 <USBD_CtlError>
      break;
 800b304:	e000      	b.n	800b308 <USBD_ClrFeature+0x3c>
      break;
 800b306:	bf00      	nop
  }
}
 800b308:	bf00      	nop
 800b30a:	3708      	adds	r7, #8
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b084      	sub	sp, #16
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	781a      	ldrb	r2, [r3, #0]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	3301      	adds	r3, #1
 800b32a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	781a      	ldrb	r2, [r3, #0]
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	3301      	adds	r3, #1
 800b338:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b33a:	68f8      	ldr	r0, [r7, #12]
 800b33c:	f7ff fabb 	bl	800a8b6 <SWAPBYTE>
 800b340:	4603      	mov	r3, r0
 800b342:	461a      	mov	r2, r3
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	3301      	adds	r3, #1
 800b34c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	3301      	adds	r3, #1
 800b352:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b354:	68f8      	ldr	r0, [r7, #12]
 800b356:	f7ff faae 	bl	800a8b6 <SWAPBYTE>
 800b35a:	4603      	mov	r3, r0
 800b35c:	461a      	mov	r2, r3
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	3301      	adds	r3, #1
 800b366:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	3301      	adds	r3, #1
 800b36c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b36e:	68f8      	ldr	r0, [r7, #12]
 800b370:	f7ff faa1 	bl	800a8b6 <SWAPBYTE>
 800b374:	4603      	mov	r3, r0
 800b376:	461a      	mov	r2, r3
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	80da      	strh	r2, [r3, #6]
}
 800b37c:	bf00      	nop
 800b37e:	3710      	adds	r7, #16
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b082      	sub	sp, #8
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b38e:	2180      	movs	r1, #128	; 0x80
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f000 fd25 	bl	800bde0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b396:	2100      	movs	r1, #0
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f000 fd21 	bl	800bde0 <USBD_LL_StallEP>
}
 800b39e:	bf00      	nop
 800b3a0:	3708      	adds	r7, #8
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}

0800b3a6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b3a6:	b580      	push	{r7, lr}
 800b3a8:	b086      	sub	sp, #24
 800b3aa:	af00      	add	r7, sp, #0
 800b3ac:	60f8      	str	r0, [r7, #12]
 800b3ae:	60b9      	str	r1, [r7, #8]
 800b3b0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d036      	beq.n	800b42a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b3c0:	6938      	ldr	r0, [r7, #16]
 800b3c2:	f000 f836 	bl	800b432 <USBD_GetLen>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	b29b      	uxth	r3, r3
 800b3cc:	005b      	lsls	r3, r3, #1
 800b3ce:	b29a      	uxth	r2, r3
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b3d4:	7dfb      	ldrb	r3, [r7, #23]
 800b3d6:	68ba      	ldr	r2, [r7, #8]
 800b3d8:	4413      	add	r3, r2
 800b3da:	687a      	ldr	r2, [r7, #4]
 800b3dc:	7812      	ldrb	r2, [r2, #0]
 800b3de:	701a      	strb	r2, [r3, #0]
  idx++;
 800b3e0:	7dfb      	ldrb	r3, [r7, #23]
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b3e6:	7dfb      	ldrb	r3, [r7, #23]
 800b3e8:	68ba      	ldr	r2, [r7, #8]
 800b3ea:	4413      	add	r3, r2
 800b3ec:	2203      	movs	r2, #3
 800b3ee:	701a      	strb	r2, [r3, #0]
  idx++;
 800b3f0:	7dfb      	ldrb	r3, [r7, #23]
 800b3f2:	3301      	adds	r3, #1
 800b3f4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b3f6:	e013      	b.n	800b420 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b3f8:	7dfb      	ldrb	r3, [r7, #23]
 800b3fa:	68ba      	ldr	r2, [r7, #8]
 800b3fc:	4413      	add	r3, r2
 800b3fe:	693a      	ldr	r2, [r7, #16]
 800b400:	7812      	ldrb	r2, [r2, #0]
 800b402:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	3301      	adds	r3, #1
 800b408:	613b      	str	r3, [r7, #16]
    idx++;
 800b40a:	7dfb      	ldrb	r3, [r7, #23]
 800b40c:	3301      	adds	r3, #1
 800b40e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b410:	7dfb      	ldrb	r3, [r7, #23]
 800b412:	68ba      	ldr	r2, [r7, #8]
 800b414:	4413      	add	r3, r2
 800b416:	2200      	movs	r2, #0
 800b418:	701a      	strb	r2, [r3, #0]
    idx++;
 800b41a:	7dfb      	ldrb	r3, [r7, #23]
 800b41c:	3301      	adds	r3, #1
 800b41e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	781b      	ldrb	r3, [r3, #0]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d1e7      	bne.n	800b3f8 <USBD_GetString+0x52>
 800b428:	e000      	b.n	800b42c <USBD_GetString+0x86>
    return;
 800b42a:	bf00      	nop
  }
}
 800b42c:	3718      	adds	r7, #24
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}

0800b432 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b432:	b480      	push	{r7}
 800b434:	b085      	sub	sp, #20
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b43a:	2300      	movs	r3, #0
 800b43c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b442:	e005      	b.n	800b450 <USBD_GetLen+0x1e>
  {
    len++;
 800b444:	7bfb      	ldrb	r3, [r7, #15]
 800b446:	3301      	adds	r3, #1
 800b448:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	3301      	adds	r3, #1
 800b44e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	781b      	ldrb	r3, [r3, #0]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d1f5      	bne.n	800b444 <USBD_GetLen+0x12>
  }

  return len;
 800b458:	7bfb      	ldrb	r3, [r7, #15]
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3714      	adds	r7, #20
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr

0800b466 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b466:	b580      	push	{r7, lr}
 800b468:	b084      	sub	sp, #16
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	60f8      	str	r0, [r7, #12]
 800b46e:	60b9      	str	r1, [r7, #8]
 800b470:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	2202      	movs	r2, #2
 800b476:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	687a      	ldr	r2, [r7, #4]
 800b47e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	687a      	ldr	r2, [r7, #4]
 800b484:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	68ba      	ldr	r2, [r7, #8]
 800b48a:	2100      	movs	r1, #0
 800b48c:	68f8      	ldr	r0, [r7, #12]
 800b48e:	f000 fd30 	bl	800bef2 <USBD_LL_Transmit>

  return USBD_OK;
 800b492:	2300      	movs	r3, #0
}
 800b494:	4618      	mov	r0, r3
 800b496:	3710      	adds	r7, #16
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}

0800b49c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b084      	sub	sp, #16
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	60f8      	str	r0, [r7, #12]
 800b4a4:	60b9      	str	r1, [r7, #8]
 800b4a6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	68ba      	ldr	r2, [r7, #8]
 800b4ac:	2100      	movs	r1, #0
 800b4ae:	68f8      	ldr	r0, [r7, #12]
 800b4b0:	f000 fd1f 	bl	800bef2 <USBD_LL_Transmit>

  return USBD_OK;
 800b4b4:	2300      	movs	r3, #0
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3710      	adds	r7, #16
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}

0800b4be <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b4be:	b580      	push	{r7, lr}
 800b4c0:	b084      	sub	sp, #16
 800b4c2:	af00      	add	r7, sp, #0
 800b4c4:	60f8      	str	r0, [r7, #12]
 800b4c6:	60b9      	str	r1, [r7, #8]
 800b4c8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	2203      	movs	r2, #3
 800b4ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	687a      	ldr	r2, [r7, #4]
 800b4d6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	687a      	ldr	r2, [r7, #4]
 800b4de:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	68ba      	ldr	r2, [r7, #8]
 800b4e6:	2100      	movs	r1, #0
 800b4e8:	68f8      	ldr	r0, [r7, #12]
 800b4ea:	f000 fd23 	bl	800bf34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b4ee:	2300      	movs	r3, #0
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3710      	adds	r7, #16
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	60f8      	str	r0, [r7, #12]
 800b500:	60b9      	str	r1, [r7, #8]
 800b502:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	68ba      	ldr	r2, [r7, #8]
 800b508:	2100      	movs	r1, #0
 800b50a:	68f8      	ldr	r0, [r7, #12]
 800b50c:	f000 fd12 	bl	800bf34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b510:	2300      	movs	r3, #0
}
 800b512:	4618      	mov	r0, r3
 800b514:	3710      	adds	r7, #16
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}

0800b51a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b51a:	b580      	push	{r7, lr}
 800b51c:	b082      	sub	sp, #8
 800b51e:	af00      	add	r7, sp, #0
 800b520:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2204      	movs	r2, #4
 800b526:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b52a:	2300      	movs	r3, #0
 800b52c:	2200      	movs	r2, #0
 800b52e:	2100      	movs	r1, #0
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f000 fcde 	bl	800bef2 <USBD_LL_Transmit>

  return USBD_OK;
 800b536:	2300      	movs	r3, #0
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3708      	adds	r7, #8
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b082      	sub	sp, #8
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2205      	movs	r2, #5
 800b54c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b550:	2300      	movs	r3, #0
 800b552:	2200      	movs	r2, #0
 800b554:	2100      	movs	r1, #0
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f000 fcec 	bl	800bf34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b55c:	2300      	movs	r3, #0
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3708      	adds	r7, #8
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
	...

0800b568 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b568:	b480      	push	{r7}
 800b56a:	b087      	sub	sp, #28
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	60f8      	str	r0, [r7, #12]
 800b570:	60b9      	str	r1, [r7, #8]
 800b572:	4613      	mov	r3, r2
 800b574:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b576:	2301      	movs	r3, #1
 800b578:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b57a:	2300      	movs	r3, #0
 800b57c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b57e:	4b1f      	ldr	r3, [pc, #124]	; (800b5fc <FATFS_LinkDriverEx+0x94>)
 800b580:	7a5b      	ldrb	r3, [r3, #9]
 800b582:	b2db      	uxtb	r3, r3
 800b584:	2b00      	cmp	r3, #0
 800b586:	d131      	bne.n	800b5ec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b588:	4b1c      	ldr	r3, [pc, #112]	; (800b5fc <FATFS_LinkDriverEx+0x94>)
 800b58a:	7a5b      	ldrb	r3, [r3, #9]
 800b58c:	b2db      	uxtb	r3, r3
 800b58e:	461a      	mov	r2, r3
 800b590:	4b1a      	ldr	r3, [pc, #104]	; (800b5fc <FATFS_LinkDriverEx+0x94>)
 800b592:	2100      	movs	r1, #0
 800b594:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b596:	4b19      	ldr	r3, [pc, #100]	; (800b5fc <FATFS_LinkDriverEx+0x94>)
 800b598:	7a5b      	ldrb	r3, [r3, #9]
 800b59a:	b2db      	uxtb	r3, r3
 800b59c:	4a17      	ldr	r2, [pc, #92]	; (800b5fc <FATFS_LinkDriverEx+0x94>)
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	4413      	add	r3, r2
 800b5a2:	68fa      	ldr	r2, [r7, #12]
 800b5a4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b5a6:	4b15      	ldr	r3, [pc, #84]	; (800b5fc <FATFS_LinkDriverEx+0x94>)
 800b5a8:	7a5b      	ldrb	r3, [r3, #9]
 800b5aa:	b2db      	uxtb	r3, r3
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	4b13      	ldr	r3, [pc, #76]	; (800b5fc <FATFS_LinkDriverEx+0x94>)
 800b5b0:	4413      	add	r3, r2
 800b5b2:	79fa      	ldrb	r2, [r7, #7]
 800b5b4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b5b6:	4b11      	ldr	r3, [pc, #68]	; (800b5fc <FATFS_LinkDriverEx+0x94>)
 800b5b8:	7a5b      	ldrb	r3, [r3, #9]
 800b5ba:	b2db      	uxtb	r3, r3
 800b5bc:	1c5a      	adds	r2, r3, #1
 800b5be:	b2d1      	uxtb	r1, r2
 800b5c0:	4a0e      	ldr	r2, [pc, #56]	; (800b5fc <FATFS_LinkDriverEx+0x94>)
 800b5c2:	7251      	strb	r1, [r2, #9]
 800b5c4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b5c6:	7dbb      	ldrb	r3, [r7, #22]
 800b5c8:	3330      	adds	r3, #48	; 0x30
 800b5ca:	b2da      	uxtb	r2, r3
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	3301      	adds	r3, #1
 800b5d4:	223a      	movs	r2, #58	; 0x3a
 800b5d6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	3302      	adds	r3, #2
 800b5dc:	222f      	movs	r2, #47	; 0x2f
 800b5de:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	3303      	adds	r3, #3
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b5ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	371c      	adds	r7, #28
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f8:	4770      	bx	lr
 800b5fa:	bf00      	nop
 800b5fc:	20000398 	.word	0x20000398

0800b600 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b082      	sub	sp, #8
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
 800b608:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b60a:	2200      	movs	r2, #0
 800b60c:	6839      	ldr	r1, [r7, #0]
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f7ff ffaa 	bl	800b568 <FATFS_LinkDriverEx>
 800b614:	4603      	mov	r3, r0
}
 800b616:	4618      	mov	r0, r3
 800b618:	3708      	adds	r7, #8
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
	...

0800b620 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b624:	2200      	movs	r2, #0
 800b626:	4912      	ldr	r1, [pc, #72]	; (800b670 <MX_USB_DEVICE_Init+0x50>)
 800b628:	4812      	ldr	r0, [pc, #72]	; (800b674 <MX_USB_DEVICE_Init+0x54>)
 800b62a:	f7fe fe33 	bl	800a294 <USBD_Init>
 800b62e:	4603      	mov	r3, r0
 800b630:	2b00      	cmp	r3, #0
 800b632:	d001      	beq.n	800b638 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b634:	f7f6 fd52 	bl	80020dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b638:	490f      	ldr	r1, [pc, #60]	; (800b678 <MX_USB_DEVICE_Init+0x58>)
 800b63a:	480e      	ldr	r0, [pc, #56]	; (800b674 <MX_USB_DEVICE_Init+0x54>)
 800b63c:	f7fe fe5a 	bl	800a2f4 <USBD_RegisterClass>
 800b640:	4603      	mov	r3, r0
 800b642:	2b00      	cmp	r3, #0
 800b644:	d001      	beq.n	800b64a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b646:	f7f6 fd49 	bl	80020dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b64a:	490c      	ldr	r1, [pc, #48]	; (800b67c <MX_USB_DEVICE_Init+0x5c>)
 800b64c:	4809      	ldr	r0, [pc, #36]	; (800b674 <MX_USB_DEVICE_Init+0x54>)
 800b64e:	f7fe fdab 	bl	800a1a8 <USBD_CDC_RegisterInterface>
 800b652:	4603      	mov	r3, r0
 800b654:	2b00      	cmp	r3, #0
 800b656:	d001      	beq.n	800b65c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b658:	f7f6 fd40 	bl	80020dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b65c:	4805      	ldr	r0, [pc, #20]	; (800b674 <MX_USB_DEVICE_Init+0x54>)
 800b65e:	f7fe fe70 	bl	800a342 <USBD_Start>
 800b662:	4603      	mov	r3, r0
 800b664:	2b00      	cmp	r3, #0
 800b666:	d001      	beq.n	800b66c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b668:	f7f6 fd38 	bl	80020dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b66c:	bf00      	nop
 800b66e:	bd80      	pop	{r7, pc}
 800b670:	20000148 	.word	0x20000148
 800b674:	20001340 	.word	0x20001340
 800b678:	20000030 	.word	0x20000030
 800b67c:	20000134 	.word	0x20000134

0800b680 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b684:	2200      	movs	r2, #0
 800b686:	4905      	ldr	r1, [pc, #20]	; (800b69c <CDC_Init_FS+0x1c>)
 800b688:	4805      	ldr	r0, [pc, #20]	; (800b6a0 <CDC_Init_FS+0x20>)
 800b68a:	f7fe fda2 	bl	800a1d2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b68e:	4905      	ldr	r1, [pc, #20]	; (800b6a4 <CDC_Init_FS+0x24>)
 800b690:	4803      	ldr	r0, [pc, #12]	; (800b6a0 <CDC_Init_FS+0x20>)
 800b692:	f7fe fdbc 	bl	800a20e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b696:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b698:	4618      	mov	r0, r3
 800b69a:	bd80      	pop	{r7, pc}
 800b69c:	20001e10 	.word	0x20001e10
 800b6a0:	20001340 	.word	0x20001340
 800b6a4:	20001610 	.word	0x20001610

0800b6a8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b6ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b6:	4770      	bx	lr

0800b6b8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b083      	sub	sp, #12
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	4603      	mov	r3, r0
 800b6c0:	6039      	str	r1, [r7, #0]
 800b6c2:	71fb      	strb	r3, [r7, #7]
 800b6c4:	4613      	mov	r3, r2
 800b6c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b6c8:	79fb      	ldrb	r3, [r7, #7]
 800b6ca:	2b23      	cmp	r3, #35	; 0x23
 800b6cc:	d84a      	bhi.n	800b764 <CDC_Control_FS+0xac>
 800b6ce:	a201      	add	r2, pc, #4	; (adr r2, 800b6d4 <CDC_Control_FS+0x1c>)
 800b6d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6d4:	0800b765 	.word	0x0800b765
 800b6d8:	0800b765 	.word	0x0800b765
 800b6dc:	0800b765 	.word	0x0800b765
 800b6e0:	0800b765 	.word	0x0800b765
 800b6e4:	0800b765 	.word	0x0800b765
 800b6e8:	0800b765 	.word	0x0800b765
 800b6ec:	0800b765 	.word	0x0800b765
 800b6f0:	0800b765 	.word	0x0800b765
 800b6f4:	0800b765 	.word	0x0800b765
 800b6f8:	0800b765 	.word	0x0800b765
 800b6fc:	0800b765 	.word	0x0800b765
 800b700:	0800b765 	.word	0x0800b765
 800b704:	0800b765 	.word	0x0800b765
 800b708:	0800b765 	.word	0x0800b765
 800b70c:	0800b765 	.word	0x0800b765
 800b710:	0800b765 	.word	0x0800b765
 800b714:	0800b765 	.word	0x0800b765
 800b718:	0800b765 	.word	0x0800b765
 800b71c:	0800b765 	.word	0x0800b765
 800b720:	0800b765 	.word	0x0800b765
 800b724:	0800b765 	.word	0x0800b765
 800b728:	0800b765 	.word	0x0800b765
 800b72c:	0800b765 	.word	0x0800b765
 800b730:	0800b765 	.word	0x0800b765
 800b734:	0800b765 	.word	0x0800b765
 800b738:	0800b765 	.word	0x0800b765
 800b73c:	0800b765 	.word	0x0800b765
 800b740:	0800b765 	.word	0x0800b765
 800b744:	0800b765 	.word	0x0800b765
 800b748:	0800b765 	.word	0x0800b765
 800b74c:	0800b765 	.word	0x0800b765
 800b750:	0800b765 	.word	0x0800b765
 800b754:	0800b765 	.word	0x0800b765
 800b758:	0800b765 	.word	0x0800b765
 800b75c:	0800b765 	.word	0x0800b765
 800b760:	0800b765 	.word	0x0800b765
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b764:	bf00      	nop
  }

  return (USBD_OK);
 800b766:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b768:	4618      	mov	r0, r3
 800b76a:	370c      	adds	r7, #12
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr

0800b774 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b082      	sub	sp, #8
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b77e:	6879      	ldr	r1, [r7, #4]
 800b780:	4805      	ldr	r0, [pc, #20]	; (800b798 <CDC_Receive_FS+0x24>)
 800b782:	f7fe fd44 	bl	800a20e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b786:	4804      	ldr	r0, [pc, #16]	; (800b798 <CDC_Receive_FS+0x24>)
 800b788:	f7fe fd5a 	bl	800a240 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b78c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3708      	adds	r7, #8
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}
 800b796:	bf00      	nop
 800b798:	20001340 	.word	0x20001340

0800b79c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b087      	sub	sp, #28
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	60f8      	str	r0, [r7, #12]
 800b7a4:	60b9      	str	r1, [r7, #8]
 800b7a6:	4613      	mov	r3, r2
 800b7a8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b7ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	371c      	adds	r7, #28
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7bc:	4770      	bx	lr
	...

0800b7c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b083      	sub	sp, #12
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	6039      	str	r1, [r7, #0]
 800b7ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	2212      	movs	r2, #18
 800b7d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b7d2:	4b03      	ldr	r3, [pc, #12]	; (800b7e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	370c      	adds	r7, #12
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr
 800b7e0:	20000164 	.word	0x20000164

0800b7e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b083      	sub	sp, #12
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	6039      	str	r1, [r7, #0]
 800b7ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	2204      	movs	r2, #4
 800b7f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b7f6:	4b03      	ldr	r3, [pc, #12]	; (800b804 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	370c      	adds	r7, #12
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr
 800b804:	20000178 	.word	0x20000178

0800b808 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b082      	sub	sp, #8
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	4603      	mov	r3, r0
 800b810:	6039      	str	r1, [r7, #0]
 800b812:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b814:	79fb      	ldrb	r3, [r7, #7]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d105      	bne.n	800b826 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b81a:	683a      	ldr	r2, [r7, #0]
 800b81c:	4907      	ldr	r1, [pc, #28]	; (800b83c <USBD_FS_ProductStrDescriptor+0x34>)
 800b81e:	4808      	ldr	r0, [pc, #32]	; (800b840 <USBD_FS_ProductStrDescriptor+0x38>)
 800b820:	f7ff fdc1 	bl	800b3a6 <USBD_GetString>
 800b824:	e004      	b.n	800b830 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b826:	683a      	ldr	r2, [r7, #0]
 800b828:	4904      	ldr	r1, [pc, #16]	; (800b83c <USBD_FS_ProductStrDescriptor+0x34>)
 800b82a:	4805      	ldr	r0, [pc, #20]	; (800b840 <USBD_FS_ProductStrDescriptor+0x38>)
 800b82c:	f7ff fdbb 	bl	800b3a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b830:	4b02      	ldr	r3, [pc, #8]	; (800b83c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b832:	4618      	mov	r0, r3
 800b834:	3708      	adds	r7, #8
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}
 800b83a:	bf00      	nop
 800b83c:	20002610 	.word	0x20002610
 800b840:	080108e8 	.word	0x080108e8

0800b844 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b082      	sub	sp, #8
 800b848:	af00      	add	r7, sp, #0
 800b84a:	4603      	mov	r3, r0
 800b84c:	6039      	str	r1, [r7, #0]
 800b84e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b850:	683a      	ldr	r2, [r7, #0]
 800b852:	4904      	ldr	r1, [pc, #16]	; (800b864 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b854:	4804      	ldr	r0, [pc, #16]	; (800b868 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b856:	f7ff fda6 	bl	800b3a6 <USBD_GetString>
  return USBD_StrDesc;
 800b85a:	4b02      	ldr	r3, [pc, #8]	; (800b864 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3708      	adds	r7, #8
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}
 800b864:	20002610 	.word	0x20002610
 800b868:	08010900 	.word	0x08010900

0800b86c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b082      	sub	sp, #8
 800b870:	af00      	add	r7, sp, #0
 800b872:	4603      	mov	r3, r0
 800b874:	6039      	str	r1, [r7, #0]
 800b876:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	221a      	movs	r2, #26
 800b87c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b87e:	f000 f843 	bl	800b908 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b882:	4b02      	ldr	r3, [pc, #8]	; (800b88c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b884:	4618      	mov	r0, r3
 800b886:	3708      	adds	r7, #8
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}
 800b88c:	2000017c 	.word	0x2000017c

0800b890 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b082      	sub	sp, #8
 800b894:	af00      	add	r7, sp, #0
 800b896:	4603      	mov	r3, r0
 800b898:	6039      	str	r1, [r7, #0]
 800b89a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b89c:	79fb      	ldrb	r3, [r7, #7]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d105      	bne.n	800b8ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b8a2:	683a      	ldr	r2, [r7, #0]
 800b8a4:	4907      	ldr	r1, [pc, #28]	; (800b8c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b8a6:	4808      	ldr	r0, [pc, #32]	; (800b8c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b8a8:	f7ff fd7d 	bl	800b3a6 <USBD_GetString>
 800b8ac:	e004      	b.n	800b8b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b8ae:	683a      	ldr	r2, [r7, #0]
 800b8b0:	4904      	ldr	r1, [pc, #16]	; (800b8c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b8b2:	4805      	ldr	r0, [pc, #20]	; (800b8c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b8b4:	f7ff fd77 	bl	800b3a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b8b8:	4b02      	ldr	r3, [pc, #8]	; (800b8c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3708      	adds	r7, #8
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	20002610 	.word	0x20002610
 800b8c8:	08010914 	.word	0x08010914

0800b8cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	6039      	str	r1, [r7, #0]
 800b8d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b8d8:	79fb      	ldrb	r3, [r7, #7]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d105      	bne.n	800b8ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b8de:	683a      	ldr	r2, [r7, #0]
 800b8e0:	4907      	ldr	r1, [pc, #28]	; (800b900 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b8e2:	4808      	ldr	r0, [pc, #32]	; (800b904 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b8e4:	f7ff fd5f 	bl	800b3a6 <USBD_GetString>
 800b8e8:	e004      	b.n	800b8f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b8ea:	683a      	ldr	r2, [r7, #0]
 800b8ec:	4904      	ldr	r1, [pc, #16]	; (800b900 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b8ee:	4805      	ldr	r0, [pc, #20]	; (800b904 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b8f0:	f7ff fd59 	bl	800b3a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b8f4:	4b02      	ldr	r3, [pc, #8]	; (800b900 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3708      	adds	r7, #8
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}
 800b8fe:	bf00      	nop
 800b900:	20002610 	.word	0x20002610
 800b904:	08010920 	.word	0x08010920

0800b908 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b084      	sub	sp, #16
 800b90c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b90e:	4b0f      	ldr	r3, [pc, #60]	; (800b94c <Get_SerialNum+0x44>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b914:	4b0e      	ldr	r3, [pc, #56]	; (800b950 <Get_SerialNum+0x48>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b91a:	4b0e      	ldr	r3, [pc, #56]	; (800b954 <Get_SerialNum+0x4c>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b920:	68fa      	ldr	r2, [r7, #12]
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	4413      	add	r3, r2
 800b926:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d009      	beq.n	800b942 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b92e:	2208      	movs	r2, #8
 800b930:	4909      	ldr	r1, [pc, #36]	; (800b958 <Get_SerialNum+0x50>)
 800b932:	68f8      	ldr	r0, [r7, #12]
 800b934:	f000 f814 	bl	800b960 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b938:	2204      	movs	r2, #4
 800b93a:	4908      	ldr	r1, [pc, #32]	; (800b95c <Get_SerialNum+0x54>)
 800b93c:	68b8      	ldr	r0, [r7, #8]
 800b93e:	f000 f80f 	bl	800b960 <IntToUnicode>
  }
}
 800b942:	bf00      	nop
 800b944:	3710      	adds	r7, #16
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	bf00      	nop
 800b94c:	1fff7a10 	.word	0x1fff7a10
 800b950:	1fff7a14 	.word	0x1fff7a14
 800b954:	1fff7a18 	.word	0x1fff7a18
 800b958:	2000017e 	.word	0x2000017e
 800b95c:	2000018e 	.word	0x2000018e

0800b960 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b960:	b480      	push	{r7}
 800b962:	b087      	sub	sp, #28
 800b964:	af00      	add	r7, sp, #0
 800b966:	60f8      	str	r0, [r7, #12]
 800b968:	60b9      	str	r1, [r7, #8]
 800b96a:	4613      	mov	r3, r2
 800b96c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b96e:	2300      	movs	r3, #0
 800b970:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b972:	2300      	movs	r3, #0
 800b974:	75fb      	strb	r3, [r7, #23]
 800b976:	e027      	b.n	800b9c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	0f1b      	lsrs	r3, r3, #28
 800b97c:	2b09      	cmp	r3, #9
 800b97e:	d80b      	bhi.n	800b998 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	0f1b      	lsrs	r3, r3, #28
 800b984:	b2da      	uxtb	r2, r3
 800b986:	7dfb      	ldrb	r3, [r7, #23]
 800b988:	005b      	lsls	r3, r3, #1
 800b98a:	4619      	mov	r1, r3
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	440b      	add	r3, r1
 800b990:	3230      	adds	r2, #48	; 0x30
 800b992:	b2d2      	uxtb	r2, r2
 800b994:	701a      	strb	r2, [r3, #0]
 800b996:	e00a      	b.n	800b9ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	0f1b      	lsrs	r3, r3, #28
 800b99c:	b2da      	uxtb	r2, r3
 800b99e:	7dfb      	ldrb	r3, [r7, #23]
 800b9a0:	005b      	lsls	r3, r3, #1
 800b9a2:	4619      	mov	r1, r3
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	440b      	add	r3, r1
 800b9a8:	3237      	adds	r2, #55	; 0x37
 800b9aa:	b2d2      	uxtb	r2, r2
 800b9ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	011b      	lsls	r3, r3, #4
 800b9b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b9b4:	7dfb      	ldrb	r3, [r7, #23]
 800b9b6:	005b      	lsls	r3, r3, #1
 800b9b8:	3301      	adds	r3, #1
 800b9ba:	68ba      	ldr	r2, [r7, #8]
 800b9bc:	4413      	add	r3, r2
 800b9be:	2200      	movs	r2, #0
 800b9c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b9c2:	7dfb      	ldrb	r3, [r7, #23]
 800b9c4:	3301      	adds	r3, #1
 800b9c6:	75fb      	strb	r3, [r7, #23]
 800b9c8:	7dfa      	ldrb	r2, [r7, #23]
 800b9ca:	79fb      	ldrb	r3, [r7, #7]
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	d3d3      	bcc.n	800b978 <IntToUnicode+0x18>
  }
}
 800b9d0:	bf00      	nop
 800b9d2:	bf00      	nop
 800b9d4:	371c      	adds	r7, #28
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9dc:	4770      	bx	lr
	...

0800b9e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b08a      	sub	sp, #40	; 0x28
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b9e8:	f107 0314 	add.w	r3, r7, #20
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	601a      	str	r2, [r3, #0]
 800b9f0:	605a      	str	r2, [r3, #4]
 800b9f2:	609a      	str	r2, [r3, #8]
 800b9f4:	60da      	str	r2, [r3, #12]
 800b9f6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ba00:	d147      	bne.n	800ba92 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ba02:	2300      	movs	r3, #0
 800ba04:	613b      	str	r3, [r7, #16]
 800ba06:	4b25      	ldr	r3, [pc, #148]	; (800ba9c <HAL_PCD_MspInit+0xbc>)
 800ba08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba0a:	4a24      	ldr	r2, [pc, #144]	; (800ba9c <HAL_PCD_MspInit+0xbc>)
 800ba0c:	f043 0301 	orr.w	r3, r3, #1
 800ba10:	6313      	str	r3, [r2, #48]	; 0x30
 800ba12:	4b22      	ldr	r3, [pc, #136]	; (800ba9c <HAL_PCD_MspInit+0xbc>)
 800ba14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba16:	f003 0301 	and.w	r3, r3, #1
 800ba1a:	613b      	str	r3, [r7, #16]
 800ba1c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800ba1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ba24:	2300      	movs	r3, #0
 800ba26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba2c:	f107 0314 	add.w	r3, r7, #20
 800ba30:	4619      	mov	r1, r3
 800ba32:	481b      	ldr	r0, [pc, #108]	; (800baa0 <HAL_PCD_MspInit+0xc0>)
 800ba34:	f7f7 fb06 	bl	8003044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ba38:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ba3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba3e:	2302      	movs	r3, #2
 800ba40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba42:	2300      	movs	r3, #0
 800ba44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba46:	2303      	movs	r3, #3
 800ba48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ba4a:	230a      	movs	r3, #10
 800ba4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba4e:	f107 0314 	add.w	r3, r7, #20
 800ba52:	4619      	mov	r1, r3
 800ba54:	4812      	ldr	r0, [pc, #72]	; (800baa0 <HAL_PCD_MspInit+0xc0>)
 800ba56:	f7f7 faf5 	bl	8003044 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ba5a:	4b10      	ldr	r3, [pc, #64]	; (800ba9c <HAL_PCD_MspInit+0xbc>)
 800ba5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba5e:	4a0f      	ldr	r2, [pc, #60]	; (800ba9c <HAL_PCD_MspInit+0xbc>)
 800ba60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba64:	6353      	str	r3, [r2, #52]	; 0x34
 800ba66:	2300      	movs	r3, #0
 800ba68:	60fb      	str	r3, [r7, #12]
 800ba6a:	4b0c      	ldr	r3, [pc, #48]	; (800ba9c <HAL_PCD_MspInit+0xbc>)
 800ba6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba6e:	4a0b      	ldr	r2, [pc, #44]	; (800ba9c <HAL_PCD_MspInit+0xbc>)
 800ba70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ba74:	6453      	str	r3, [r2, #68]	; 0x44
 800ba76:	4b09      	ldr	r3, [pc, #36]	; (800ba9c <HAL_PCD_MspInit+0xbc>)
 800ba78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba7e:	60fb      	str	r3, [r7, #12]
 800ba80:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ba82:	2200      	movs	r2, #0
 800ba84:	2100      	movs	r1, #0
 800ba86:	2043      	movs	r0, #67	; 0x43
 800ba88:	f7f7 faa5 	bl	8002fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ba8c:	2043      	movs	r0, #67	; 0x43
 800ba8e:	f7f7 fabe 	bl	800300e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ba92:	bf00      	nop
 800ba94:	3728      	adds	r7, #40	; 0x28
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}
 800ba9a:	bf00      	nop
 800ba9c:	40023800 	.word	0x40023800
 800baa0:	40020000 	.word	0x40020000

0800baa4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b082      	sub	sp, #8
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bab8:	4619      	mov	r1, r3
 800baba:	4610      	mov	r0, r2
 800babc:	f7fe fc8c 	bl	800a3d8 <USBD_LL_SetupStage>
}
 800bac0:	bf00      	nop
 800bac2:	3708      	adds	r7, #8
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b082      	sub	sp, #8
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	460b      	mov	r3, r1
 800bad2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800bada:	78fa      	ldrb	r2, [r7, #3]
 800badc:	6879      	ldr	r1, [r7, #4]
 800bade:	4613      	mov	r3, r2
 800bae0:	00db      	lsls	r3, r3, #3
 800bae2:	1a9b      	subs	r3, r3, r2
 800bae4:	009b      	lsls	r3, r3, #2
 800bae6:	440b      	add	r3, r1
 800bae8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800baec:	681a      	ldr	r2, [r3, #0]
 800baee:	78fb      	ldrb	r3, [r7, #3]
 800baf0:	4619      	mov	r1, r3
 800baf2:	f7fe fcc6 	bl	800a482 <USBD_LL_DataOutStage>
}
 800baf6:	bf00      	nop
 800baf8:	3708      	adds	r7, #8
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}

0800bafe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bafe:	b580      	push	{r7, lr}
 800bb00:	b082      	sub	sp, #8
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	6078      	str	r0, [r7, #4]
 800bb06:	460b      	mov	r3, r1
 800bb08:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800bb10:	78fa      	ldrb	r2, [r7, #3]
 800bb12:	6879      	ldr	r1, [r7, #4]
 800bb14:	4613      	mov	r3, r2
 800bb16:	00db      	lsls	r3, r3, #3
 800bb18:	1a9b      	subs	r3, r3, r2
 800bb1a:	009b      	lsls	r3, r3, #2
 800bb1c:	440b      	add	r3, r1
 800bb1e:	3348      	adds	r3, #72	; 0x48
 800bb20:	681a      	ldr	r2, [r3, #0]
 800bb22:	78fb      	ldrb	r3, [r7, #3]
 800bb24:	4619      	mov	r1, r3
 800bb26:	f7fe fd0f 	bl	800a548 <USBD_LL_DataInStage>
}
 800bb2a:	bf00      	nop
 800bb2c:	3708      	adds	r7, #8
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}

0800bb32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb32:	b580      	push	{r7, lr}
 800bb34:	b082      	sub	sp, #8
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bb40:	4618      	mov	r0, r3
 800bb42:	f7fe fe23 	bl	800a78c <USBD_LL_SOF>
}
 800bb46:	bf00      	nop
 800bb48:	3708      	adds	r7, #8
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}

0800bb4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb4e:	b580      	push	{r7, lr}
 800bb50:	b084      	sub	sp, #16
 800bb52:	af00      	add	r7, sp, #0
 800bb54:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bb56:	2301      	movs	r3, #1
 800bb58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	68db      	ldr	r3, [r3, #12]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d102      	bne.n	800bb68 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bb62:	2300      	movs	r3, #0
 800bb64:	73fb      	strb	r3, [r7, #15]
 800bb66:	e008      	b.n	800bb7a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	68db      	ldr	r3, [r3, #12]
 800bb6c:	2b02      	cmp	r3, #2
 800bb6e:	d102      	bne.n	800bb76 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bb70:	2301      	movs	r3, #1
 800bb72:	73fb      	strb	r3, [r7, #15]
 800bb74:	e001      	b.n	800bb7a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bb76:	f7f6 fab1 	bl	80020dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bb80:	7bfa      	ldrb	r2, [r7, #15]
 800bb82:	4611      	mov	r1, r2
 800bb84:	4618      	mov	r0, r3
 800bb86:	f7fe fdc3 	bl	800a710 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7fe fd6f 	bl	800a674 <USBD_LL_Reset>
}
 800bb96:	bf00      	nop
 800bb98:	3710      	adds	r7, #16
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}
	...

0800bba0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b082      	sub	sp, #8
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f7fe fdbe 	bl	800a730 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	687a      	ldr	r2, [r7, #4]
 800bbc0:	6812      	ldr	r2, [r2, #0]
 800bbc2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bbc6:	f043 0301 	orr.w	r3, r3, #1
 800bbca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6a1b      	ldr	r3, [r3, #32]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d005      	beq.n	800bbe0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bbd4:	4b04      	ldr	r3, [pc, #16]	; (800bbe8 <HAL_PCD_SuspendCallback+0x48>)
 800bbd6:	691b      	ldr	r3, [r3, #16]
 800bbd8:	4a03      	ldr	r2, [pc, #12]	; (800bbe8 <HAL_PCD_SuspendCallback+0x48>)
 800bbda:	f043 0306 	orr.w	r3, r3, #6
 800bbde:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bbe0:	bf00      	nop
 800bbe2:	3708      	adds	r7, #8
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}
 800bbe8:	e000ed00 	.word	0xe000ed00

0800bbec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b082      	sub	sp, #8
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f7fe fdae 	bl	800a75c <USBD_LL_Resume>
}
 800bc00:	bf00      	nop
 800bc02:	3708      	adds	r7, #8
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	460b      	mov	r3, r1
 800bc12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bc1a:	78fa      	ldrb	r2, [r7, #3]
 800bc1c:	4611      	mov	r1, r2
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7fe fdfc 	bl	800a81c <USBD_LL_IsoOUTIncomplete>
}
 800bc24:	bf00      	nop
 800bc26:	3708      	adds	r7, #8
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}

0800bc2c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b082      	sub	sp, #8
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
 800bc34:	460b      	mov	r3, r1
 800bc36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bc3e:	78fa      	ldrb	r2, [r7, #3]
 800bc40:	4611      	mov	r1, r2
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7fe fdc4 	bl	800a7d0 <USBD_LL_IsoINIncomplete>
}
 800bc48:	bf00      	nop
 800bc4a:	3708      	adds	r7, #8
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}

0800bc50 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b082      	sub	sp, #8
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f7fe fe02 	bl	800a868 <USBD_LL_DevConnected>
}
 800bc64:	bf00      	nop
 800bc66:	3708      	adds	r7, #8
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b082      	sub	sp, #8
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f7fe fdff 	bl	800a87e <USBD_LL_DevDisconnected>
}
 800bc80:	bf00      	nop
 800bc82:	3708      	adds	r7, #8
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}

0800bc88 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b082      	sub	sp, #8
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d13c      	bne.n	800bd12 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bc98:	4a20      	ldr	r2, [pc, #128]	; (800bd1c <USBD_LL_Init+0x94>)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	4a1e      	ldr	r2, [pc, #120]	; (800bd1c <USBD_LL_Init+0x94>)
 800bca4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bca8:	4b1c      	ldr	r3, [pc, #112]	; (800bd1c <USBD_LL_Init+0x94>)
 800bcaa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bcae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800bcb0:	4b1a      	ldr	r3, [pc, #104]	; (800bd1c <USBD_LL_Init+0x94>)
 800bcb2:	2204      	movs	r2, #4
 800bcb4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bcb6:	4b19      	ldr	r3, [pc, #100]	; (800bd1c <USBD_LL_Init+0x94>)
 800bcb8:	2202      	movs	r2, #2
 800bcba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bcbc:	4b17      	ldr	r3, [pc, #92]	; (800bd1c <USBD_LL_Init+0x94>)
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bcc2:	4b16      	ldr	r3, [pc, #88]	; (800bd1c <USBD_LL_Init+0x94>)
 800bcc4:	2202      	movs	r2, #2
 800bcc6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bcc8:	4b14      	ldr	r3, [pc, #80]	; (800bd1c <USBD_LL_Init+0x94>)
 800bcca:	2200      	movs	r2, #0
 800bccc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bcce:	4b13      	ldr	r3, [pc, #76]	; (800bd1c <USBD_LL_Init+0x94>)
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bcd4:	4b11      	ldr	r3, [pc, #68]	; (800bd1c <USBD_LL_Init+0x94>)
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800bcda:	4b10      	ldr	r3, [pc, #64]	; (800bd1c <USBD_LL_Init+0x94>)
 800bcdc:	2201      	movs	r2, #1
 800bcde:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bce0:	4b0e      	ldr	r3, [pc, #56]	; (800bd1c <USBD_LL_Init+0x94>)
 800bce2:	2200      	movs	r2, #0
 800bce4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bce6:	480d      	ldr	r0, [pc, #52]	; (800bd1c <USBD_LL_Init+0x94>)
 800bce8:	f7f8 fbde 	bl	80044a8 <HAL_PCD_Init>
 800bcec:	4603      	mov	r3, r0
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d001      	beq.n	800bcf6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bcf2:	f7f6 f9f3 	bl	80020dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bcf6:	2180      	movs	r1, #128	; 0x80
 800bcf8:	4808      	ldr	r0, [pc, #32]	; (800bd1c <USBD_LL_Init+0x94>)
 800bcfa:	f7f9 fd3c 	bl	8005776 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bcfe:	2240      	movs	r2, #64	; 0x40
 800bd00:	2100      	movs	r1, #0
 800bd02:	4806      	ldr	r0, [pc, #24]	; (800bd1c <USBD_LL_Init+0x94>)
 800bd04:	f7f9 fcf0 	bl	80056e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bd08:	2280      	movs	r2, #128	; 0x80
 800bd0a:	2101      	movs	r1, #1
 800bd0c:	4803      	ldr	r0, [pc, #12]	; (800bd1c <USBD_LL_Init+0x94>)
 800bd0e:	f7f9 fceb 	bl	80056e8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bd12:	2300      	movs	r3, #0
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3708      	adds	r7, #8
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}
 800bd1c:	20002810 	.word	0x20002810

0800bd20 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7f8 fcd3 	bl	80046e2 <HAL_PCD_Start>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd40:	7bfb      	ldrb	r3, [r7, #15]
 800bd42:	4618      	mov	r0, r3
 800bd44:	f000 f942 	bl	800bfcc <USBD_Get_USB_Status>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd4c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3710      	adds	r7, #16
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}

0800bd56 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bd56:	b580      	push	{r7, lr}
 800bd58:	b084      	sub	sp, #16
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	6078      	str	r0, [r7, #4]
 800bd5e:	4608      	mov	r0, r1
 800bd60:	4611      	mov	r1, r2
 800bd62:	461a      	mov	r2, r3
 800bd64:	4603      	mov	r3, r0
 800bd66:	70fb      	strb	r3, [r7, #3]
 800bd68:	460b      	mov	r3, r1
 800bd6a:	70bb      	strb	r3, [r7, #2]
 800bd6c:	4613      	mov	r3, r2
 800bd6e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd70:	2300      	movs	r3, #0
 800bd72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd74:	2300      	movs	r3, #0
 800bd76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bd7e:	78bb      	ldrb	r3, [r7, #2]
 800bd80:	883a      	ldrh	r2, [r7, #0]
 800bd82:	78f9      	ldrb	r1, [r7, #3]
 800bd84:	f7f9 f8b7 	bl	8004ef6 <HAL_PCD_EP_Open>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd8c:	7bfb      	ldrb	r3, [r7, #15]
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f000 f91c 	bl	800bfcc <USBD_Get_USB_Status>
 800bd94:	4603      	mov	r3, r0
 800bd96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd98:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3710      	adds	r7, #16
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}

0800bda2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bda2:	b580      	push	{r7, lr}
 800bda4:	b084      	sub	sp, #16
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	6078      	str	r0, [r7, #4]
 800bdaa:	460b      	mov	r3, r1
 800bdac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bdbc:	78fa      	ldrb	r2, [r7, #3]
 800bdbe:	4611      	mov	r1, r2
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7f9 f900 	bl	8004fc6 <HAL_PCD_EP_Close>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdca:	7bfb      	ldrb	r3, [r7, #15]
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f000 f8fd 	bl	800bfcc <USBD_Get_USB_Status>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdd6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3710      	adds	r7, #16
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}

0800bde0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b084      	sub	sp, #16
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
 800bde8:	460b      	mov	r3, r1
 800bdea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdec:	2300      	movs	r3, #0
 800bdee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bdfa:	78fa      	ldrb	r2, [r7, #3]
 800bdfc:	4611      	mov	r1, r2
 800bdfe:	4618      	mov	r0, r3
 800be00:	f7f9 f9d8 	bl	80051b4 <HAL_PCD_EP_SetStall>
 800be04:	4603      	mov	r3, r0
 800be06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be08:	7bfb      	ldrb	r3, [r7, #15]
 800be0a:	4618      	mov	r0, r3
 800be0c:	f000 f8de 	bl	800bfcc <USBD_Get_USB_Status>
 800be10:	4603      	mov	r3, r0
 800be12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be14:	7bbb      	ldrb	r3, [r7, #14]
}
 800be16:	4618      	mov	r0, r3
 800be18:	3710      	adds	r7, #16
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}

0800be1e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be1e:	b580      	push	{r7, lr}
 800be20:	b084      	sub	sp, #16
 800be22:	af00      	add	r7, sp, #0
 800be24:	6078      	str	r0, [r7, #4]
 800be26:	460b      	mov	r3, r1
 800be28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be2a:	2300      	movs	r3, #0
 800be2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be2e:	2300      	movs	r3, #0
 800be30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800be38:	78fa      	ldrb	r2, [r7, #3]
 800be3a:	4611      	mov	r1, r2
 800be3c:	4618      	mov	r0, r3
 800be3e:	f7f9 fa1d 	bl	800527c <HAL_PCD_EP_ClrStall>
 800be42:	4603      	mov	r3, r0
 800be44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be46:	7bfb      	ldrb	r3, [r7, #15]
 800be48:	4618      	mov	r0, r3
 800be4a:	f000 f8bf 	bl	800bfcc <USBD_Get_USB_Status>
 800be4e:	4603      	mov	r3, r0
 800be50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be52:	7bbb      	ldrb	r3, [r7, #14]
}
 800be54:	4618      	mov	r0, r3
 800be56:	3710      	adds	r7, #16
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}

0800be5c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b085      	sub	sp, #20
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
 800be64:	460b      	mov	r3, r1
 800be66:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800be6e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800be70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800be74:	2b00      	cmp	r3, #0
 800be76:	da0b      	bge.n	800be90 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800be78:	78fb      	ldrb	r3, [r7, #3]
 800be7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be7e:	68f9      	ldr	r1, [r7, #12]
 800be80:	4613      	mov	r3, r2
 800be82:	00db      	lsls	r3, r3, #3
 800be84:	1a9b      	subs	r3, r3, r2
 800be86:	009b      	lsls	r3, r3, #2
 800be88:	440b      	add	r3, r1
 800be8a:	333e      	adds	r3, #62	; 0x3e
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	e00b      	b.n	800bea8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800be90:	78fb      	ldrb	r3, [r7, #3]
 800be92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be96:	68f9      	ldr	r1, [r7, #12]
 800be98:	4613      	mov	r3, r2
 800be9a:	00db      	lsls	r3, r3, #3
 800be9c:	1a9b      	subs	r3, r3, r2
 800be9e:	009b      	lsls	r3, r3, #2
 800bea0:	440b      	add	r3, r1
 800bea2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bea6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3714      	adds	r7, #20
 800beac:	46bd      	mov	sp, r7
 800beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb2:	4770      	bx	lr

0800beb4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b084      	sub	sp, #16
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
 800bebc:	460b      	mov	r3, r1
 800bebe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bec0:	2300      	movs	r3, #0
 800bec2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bec4:	2300      	movs	r3, #0
 800bec6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bece:	78fa      	ldrb	r2, [r7, #3]
 800bed0:	4611      	mov	r1, r2
 800bed2:	4618      	mov	r0, r3
 800bed4:	f7f8 ffea 	bl	8004eac <HAL_PCD_SetAddress>
 800bed8:	4603      	mov	r3, r0
 800beda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bedc:	7bfb      	ldrb	r3, [r7, #15]
 800bede:	4618      	mov	r0, r3
 800bee0:	f000 f874 	bl	800bfcc <USBD_Get_USB_Status>
 800bee4:	4603      	mov	r3, r0
 800bee6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bee8:	7bbb      	ldrb	r3, [r7, #14]
}
 800beea:	4618      	mov	r0, r3
 800beec:	3710      	adds	r7, #16
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}

0800bef2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bef2:	b580      	push	{r7, lr}
 800bef4:	b086      	sub	sp, #24
 800bef6:	af00      	add	r7, sp, #0
 800bef8:	60f8      	str	r0, [r7, #12]
 800befa:	607a      	str	r2, [r7, #4]
 800befc:	603b      	str	r3, [r7, #0]
 800befe:	460b      	mov	r3, r1
 800bf00:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf02:	2300      	movs	r3, #0
 800bf04:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf06:	2300      	movs	r3, #0
 800bf08:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bf10:	7af9      	ldrb	r1, [r7, #11]
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	687a      	ldr	r2, [r7, #4]
 800bf16:	f7f9 f903 	bl	8005120 <HAL_PCD_EP_Transmit>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf1e:	7dfb      	ldrb	r3, [r7, #23]
 800bf20:	4618      	mov	r0, r3
 800bf22:	f000 f853 	bl	800bfcc <USBD_Get_USB_Status>
 800bf26:	4603      	mov	r3, r0
 800bf28:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bf2a:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3718      	adds	r7, #24
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}

0800bf34 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b086      	sub	sp, #24
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	60f8      	str	r0, [r7, #12]
 800bf3c:	607a      	str	r2, [r7, #4]
 800bf3e:	603b      	str	r3, [r7, #0]
 800bf40:	460b      	mov	r3, r1
 800bf42:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf44:	2300      	movs	r3, #0
 800bf46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bf52:	7af9      	ldrb	r1, [r7, #11]
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	687a      	ldr	r2, [r7, #4]
 800bf58:	f7f9 f87f 	bl	800505a <HAL_PCD_EP_Receive>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf60:	7dfb      	ldrb	r3, [r7, #23]
 800bf62:	4618      	mov	r0, r3
 800bf64:	f000 f832 	bl	800bfcc <USBD_Get_USB_Status>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bf6c:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3718      	adds	r7, #24
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}

0800bf76 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf76:	b580      	push	{r7, lr}
 800bf78:	b082      	sub	sp, #8
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	6078      	str	r0, [r7, #4]
 800bf7e:	460b      	mov	r3, r1
 800bf80:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bf88:	78fa      	ldrb	r2, [r7, #3]
 800bf8a:	4611      	mov	r1, r2
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f7f9 f8af 	bl	80050f0 <HAL_PCD_EP_GetRxCount>
 800bf92:	4603      	mov	r3, r0
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3708      	adds	r7, #8
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}

0800bf9c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b083      	sub	sp, #12
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bfa4:	4b03      	ldr	r3, [pc, #12]	; (800bfb4 <USBD_static_malloc+0x18>)
}
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	370c      	adds	r7, #12
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb0:	4770      	bx	lr
 800bfb2:	bf00      	nop
 800bfb4:	200003a4 	.word	0x200003a4

0800bfb8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b083      	sub	sp, #12
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]

}
 800bfc0:	bf00      	nop
 800bfc2:	370c      	adds	r7, #12
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfca:	4770      	bx	lr

0800bfcc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bfcc:	b480      	push	{r7}
 800bfce:	b085      	sub	sp, #20
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bfda:	79fb      	ldrb	r3, [r7, #7]
 800bfdc:	2b03      	cmp	r3, #3
 800bfde:	d817      	bhi.n	800c010 <USBD_Get_USB_Status+0x44>
 800bfe0:	a201      	add	r2, pc, #4	; (adr r2, 800bfe8 <USBD_Get_USB_Status+0x1c>)
 800bfe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfe6:	bf00      	nop
 800bfe8:	0800bff9 	.word	0x0800bff9
 800bfec:	0800bfff 	.word	0x0800bfff
 800bff0:	0800c005 	.word	0x0800c005
 800bff4:	0800c00b 	.word	0x0800c00b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bff8:	2300      	movs	r3, #0
 800bffa:	73fb      	strb	r3, [r7, #15]
    break;
 800bffc:	e00b      	b.n	800c016 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bffe:	2303      	movs	r3, #3
 800c000:	73fb      	strb	r3, [r7, #15]
    break;
 800c002:	e008      	b.n	800c016 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c004:	2301      	movs	r3, #1
 800c006:	73fb      	strb	r3, [r7, #15]
    break;
 800c008:	e005      	b.n	800c016 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c00a:	2303      	movs	r3, #3
 800c00c:	73fb      	strb	r3, [r7, #15]
    break;
 800c00e:	e002      	b.n	800c016 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c010:	2303      	movs	r3, #3
 800c012:	73fb      	strb	r3, [r7, #15]
    break;
 800c014:	bf00      	nop
  }
  return usb_status;
 800c016:	7bfb      	ldrb	r3, [r7, #15]
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3714      	adds	r7, #20
 800c01c:	46bd      	mov	sp, r7
 800c01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c022:	4770      	bx	lr

0800c024 <__errno>:
 800c024:	4b01      	ldr	r3, [pc, #4]	; (800c02c <__errno+0x8>)
 800c026:	6818      	ldr	r0, [r3, #0]
 800c028:	4770      	bx	lr
 800c02a:	bf00      	nop
 800c02c:	20000198 	.word	0x20000198

0800c030 <__libc_init_array>:
 800c030:	b570      	push	{r4, r5, r6, lr}
 800c032:	4d0d      	ldr	r5, [pc, #52]	; (800c068 <__libc_init_array+0x38>)
 800c034:	4c0d      	ldr	r4, [pc, #52]	; (800c06c <__libc_init_array+0x3c>)
 800c036:	1b64      	subs	r4, r4, r5
 800c038:	10a4      	asrs	r4, r4, #2
 800c03a:	2600      	movs	r6, #0
 800c03c:	42a6      	cmp	r6, r4
 800c03e:	d109      	bne.n	800c054 <__libc_init_array+0x24>
 800c040:	4d0b      	ldr	r5, [pc, #44]	; (800c070 <__libc_init_array+0x40>)
 800c042:	4c0c      	ldr	r4, [pc, #48]	; (800c074 <__libc_init_array+0x44>)
 800c044:	f004 fc44 	bl	80108d0 <_init>
 800c048:	1b64      	subs	r4, r4, r5
 800c04a:	10a4      	asrs	r4, r4, #2
 800c04c:	2600      	movs	r6, #0
 800c04e:	42a6      	cmp	r6, r4
 800c050:	d105      	bne.n	800c05e <__libc_init_array+0x2e>
 800c052:	bd70      	pop	{r4, r5, r6, pc}
 800c054:	f855 3b04 	ldr.w	r3, [r5], #4
 800c058:	4798      	blx	r3
 800c05a:	3601      	adds	r6, #1
 800c05c:	e7ee      	b.n	800c03c <__libc_init_array+0xc>
 800c05e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c062:	4798      	blx	r3
 800c064:	3601      	adds	r6, #1
 800c066:	e7f2      	b.n	800c04e <__libc_init_array+0x1e>
 800c068:	08010e0c 	.word	0x08010e0c
 800c06c:	08010e0c 	.word	0x08010e0c
 800c070:	08010e0c 	.word	0x08010e0c
 800c074:	08010e10 	.word	0x08010e10

0800c078 <memset>:
 800c078:	4402      	add	r2, r0
 800c07a:	4603      	mov	r3, r0
 800c07c:	4293      	cmp	r3, r2
 800c07e:	d100      	bne.n	800c082 <memset+0xa>
 800c080:	4770      	bx	lr
 800c082:	f803 1b01 	strb.w	r1, [r3], #1
 800c086:	e7f9      	b.n	800c07c <memset+0x4>

0800c088 <__cvt>:
 800c088:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c08c:	ec55 4b10 	vmov	r4, r5, d0
 800c090:	2d00      	cmp	r5, #0
 800c092:	460e      	mov	r6, r1
 800c094:	4619      	mov	r1, r3
 800c096:	462b      	mov	r3, r5
 800c098:	bfbb      	ittet	lt
 800c09a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c09e:	461d      	movlt	r5, r3
 800c0a0:	2300      	movge	r3, #0
 800c0a2:	232d      	movlt	r3, #45	; 0x2d
 800c0a4:	700b      	strb	r3, [r1, #0]
 800c0a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c0a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c0ac:	4691      	mov	r9, r2
 800c0ae:	f023 0820 	bic.w	r8, r3, #32
 800c0b2:	bfbc      	itt	lt
 800c0b4:	4622      	movlt	r2, r4
 800c0b6:	4614      	movlt	r4, r2
 800c0b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c0bc:	d005      	beq.n	800c0ca <__cvt+0x42>
 800c0be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c0c2:	d100      	bne.n	800c0c6 <__cvt+0x3e>
 800c0c4:	3601      	adds	r6, #1
 800c0c6:	2102      	movs	r1, #2
 800c0c8:	e000      	b.n	800c0cc <__cvt+0x44>
 800c0ca:	2103      	movs	r1, #3
 800c0cc:	ab03      	add	r3, sp, #12
 800c0ce:	9301      	str	r3, [sp, #4]
 800c0d0:	ab02      	add	r3, sp, #8
 800c0d2:	9300      	str	r3, [sp, #0]
 800c0d4:	ec45 4b10 	vmov	d0, r4, r5
 800c0d8:	4653      	mov	r3, sl
 800c0da:	4632      	mov	r2, r6
 800c0dc:	f001 feec 	bl	800deb8 <_dtoa_r>
 800c0e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c0e4:	4607      	mov	r7, r0
 800c0e6:	d102      	bne.n	800c0ee <__cvt+0x66>
 800c0e8:	f019 0f01 	tst.w	r9, #1
 800c0ec:	d022      	beq.n	800c134 <__cvt+0xac>
 800c0ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c0f2:	eb07 0906 	add.w	r9, r7, r6
 800c0f6:	d110      	bne.n	800c11a <__cvt+0x92>
 800c0f8:	783b      	ldrb	r3, [r7, #0]
 800c0fa:	2b30      	cmp	r3, #48	; 0x30
 800c0fc:	d10a      	bne.n	800c114 <__cvt+0x8c>
 800c0fe:	2200      	movs	r2, #0
 800c100:	2300      	movs	r3, #0
 800c102:	4620      	mov	r0, r4
 800c104:	4629      	mov	r1, r5
 800c106:	f7f4 fcef 	bl	8000ae8 <__aeabi_dcmpeq>
 800c10a:	b918      	cbnz	r0, 800c114 <__cvt+0x8c>
 800c10c:	f1c6 0601 	rsb	r6, r6, #1
 800c110:	f8ca 6000 	str.w	r6, [sl]
 800c114:	f8da 3000 	ldr.w	r3, [sl]
 800c118:	4499      	add	r9, r3
 800c11a:	2200      	movs	r2, #0
 800c11c:	2300      	movs	r3, #0
 800c11e:	4620      	mov	r0, r4
 800c120:	4629      	mov	r1, r5
 800c122:	f7f4 fce1 	bl	8000ae8 <__aeabi_dcmpeq>
 800c126:	b108      	cbz	r0, 800c12c <__cvt+0xa4>
 800c128:	f8cd 900c 	str.w	r9, [sp, #12]
 800c12c:	2230      	movs	r2, #48	; 0x30
 800c12e:	9b03      	ldr	r3, [sp, #12]
 800c130:	454b      	cmp	r3, r9
 800c132:	d307      	bcc.n	800c144 <__cvt+0xbc>
 800c134:	9b03      	ldr	r3, [sp, #12]
 800c136:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c138:	1bdb      	subs	r3, r3, r7
 800c13a:	4638      	mov	r0, r7
 800c13c:	6013      	str	r3, [r2, #0]
 800c13e:	b004      	add	sp, #16
 800c140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c144:	1c59      	adds	r1, r3, #1
 800c146:	9103      	str	r1, [sp, #12]
 800c148:	701a      	strb	r2, [r3, #0]
 800c14a:	e7f0      	b.n	800c12e <__cvt+0xa6>

0800c14c <__exponent>:
 800c14c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c14e:	4603      	mov	r3, r0
 800c150:	2900      	cmp	r1, #0
 800c152:	bfb8      	it	lt
 800c154:	4249      	neglt	r1, r1
 800c156:	f803 2b02 	strb.w	r2, [r3], #2
 800c15a:	bfb4      	ite	lt
 800c15c:	222d      	movlt	r2, #45	; 0x2d
 800c15e:	222b      	movge	r2, #43	; 0x2b
 800c160:	2909      	cmp	r1, #9
 800c162:	7042      	strb	r2, [r0, #1]
 800c164:	dd2a      	ble.n	800c1bc <__exponent+0x70>
 800c166:	f10d 0407 	add.w	r4, sp, #7
 800c16a:	46a4      	mov	ip, r4
 800c16c:	270a      	movs	r7, #10
 800c16e:	46a6      	mov	lr, r4
 800c170:	460a      	mov	r2, r1
 800c172:	fb91 f6f7 	sdiv	r6, r1, r7
 800c176:	fb07 1516 	mls	r5, r7, r6, r1
 800c17a:	3530      	adds	r5, #48	; 0x30
 800c17c:	2a63      	cmp	r2, #99	; 0x63
 800c17e:	f104 34ff 	add.w	r4, r4, #4294967295
 800c182:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c186:	4631      	mov	r1, r6
 800c188:	dcf1      	bgt.n	800c16e <__exponent+0x22>
 800c18a:	3130      	adds	r1, #48	; 0x30
 800c18c:	f1ae 0502 	sub.w	r5, lr, #2
 800c190:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c194:	1c44      	adds	r4, r0, #1
 800c196:	4629      	mov	r1, r5
 800c198:	4561      	cmp	r1, ip
 800c19a:	d30a      	bcc.n	800c1b2 <__exponent+0x66>
 800c19c:	f10d 0209 	add.w	r2, sp, #9
 800c1a0:	eba2 020e 	sub.w	r2, r2, lr
 800c1a4:	4565      	cmp	r5, ip
 800c1a6:	bf88      	it	hi
 800c1a8:	2200      	movhi	r2, #0
 800c1aa:	4413      	add	r3, r2
 800c1ac:	1a18      	subs	r0, r3, r0
 800c1ae:	b003      	add	sp, #12
 800c1b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c1b6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c1ba:	e7ed      	b.n	800c198 <__exponent+0x4c>
 800c1bc:	2330      	movs	r3, #48	; 0x30
 800c1be:	3130      	adds	r1, #48	; 0x30
 800c1c0:	7083      	strb	r3, [r0, #2]
 800c1c2:	70c1      	strb	r1, [r0, #3]
 800c1c4:	1d03      	adds	r3, r0, #4
 800c1c6:	e7f1      	b.n	800c1ac <__exponent+0x60>

0800c1c8 <_printf_float>:
 800c1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1cc:	ed2d 8b02 	vpush	{d8}
 800c1d0:	b08d      	sub	sp, #52	; 0x34
 800c1d2:	460c      	mov	r4, r1
 800c1d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c1d8:	4616      	mov	r6, r2
 800c1da:	461f      	mov	r7, r3
 800c1dc:	4605      	mov	r5, r0
 800c1de:	f003 f97d 	bl	800f4dc <_localeconv_r>
 800c1e2:	f8d0 a000 	ldr.w	sl, [r0]
 800c1e6:	4650      	mov	r0, sl
 800c1e8:	f7f4 f802 	bl	80001f0 <strlen>
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	930a      	str	r3, [sp, #40]	; 0x28
 800c1f0:	6823      	ldr	r3, [r4, #0]
 800c1f2:	9305      	str	r3, [sp, #20]
 800c1f4:	f8d8 3000 	ldr.w	r3, [r8]
 800c1f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c1fc:	3307      	adds	r3, #7
 800c1fe:	f023 0307 	bic.w	r3, r3, #7
 800c202:	f103 0208 	add.w	r2, r3, #8
 800c206:	f8c8 2000 	str.w	r2, [r8]
 800c20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c212:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c216:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c21a:	9307      	str	r3, [sp, #28]
 800c21c:	f8cd 8018 	str.w	r8, [sp, #24]
 800c220:	ee08 0a10 	vmov	s16, r0
 800c224:	4b9f      	ldr	r3, [pc, #636]	; (800c4a4 <_printf_float+0x2dc>)
 800c226:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c22a:	f04f 32ff 	mov.w	r2, #4294967295
 800c22e:	f7f4 fc8d 	bl	8000b4c <__aeabi_dcmpun>
 800c232:	bb88      	cbnz	r0, 800c298 <_printf_float+0xd0>
 800c234:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c238:	4b9a      	ldr	r3, [pc, #616]	; (800c4a4 <_printf_float+0x2dc>)
 800c23a:	f04f 32ff 	mov.w	r2, #4294967295
 800c23e:	f7f4 fc67 	bl	8000b10 <__aeabi_dcmple>
 800c242:	bb48      	cbnz	r0, 800c298 <_printf_float+0xd0>
 800c244:	2200      	movs	r2, #0
 800c246:	2300      	movs	r3, #0
 800c248:	4640      	mov	r0, r8
 800c24a:	4649      	mov	r1, r9
 800c24c:	f7f4 fc56 	bl	8000afc <__aeabi_dcmplt>
 800c250:	b110      	cbz	r0, 800c258 <_printf_float+0x90>
 800c252:	232d      	movs	r3, #45	; 0x2d
 800c254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c258:	4b93      	ldr	r3, [pc, #588]	; (800c4a8 <_printf_float+0x2e0>)
 800c25a:	4894      	ldr	r0, [pc, #592]	; (800c4ac <_printf_float+0x2e4>)
 800c25c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c260:	bf94      	ite	ls
 800c262:	4698      	movls	r8, r3
 800c264:	4680      	movhi	r8, r0
 800c266:	2303      	movs	r3, #3
 800c268:	6123      	str	r3, [r4, #16]
 800c26a:	9b05      	ldr	r3, [sp, #20]
 800c26c:	f023 0204 	bic.w	r2, r3, #4
 800c270:	6022      	str	r2, [r4, #0]
 800c272:	f04f 0900 	mov.w	r9, #0
 800c276:	9700      	str	r7, [sp, #0]
 800c278:	4633      	mov	r3, r6
 800c27a:	aa0b      	add	r2, sp, #44	; 0x2c
 800c27c:	4621      	mov	r1, r4
 800c27e:	4628      	mov	r0, r5
 800c280:	f000 f9d8 	bl	800c634 <_printf_common>
 800c284:	3001      	adds	r0, #1
 800c286:	f040 8090 	bne.w	800c3aa <_printf_float+0x1e2>
 800c28a:	f04f 30ff 	mov.w	r0, #4294967295
 800c28e:	b00d      	add	sp, #52	; 0x34
 800c290:	ecbd 8b02 	vpop	{d8}
 800c294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c298:	4642      	mov	r2, r8
 800c29a:	464b      	mov	r3, r9
 800c29c:	4640      	mov	r0, r8
 800c29e:	4649      	mov	r1, r9
 800c2a0:	f7f4 fc54 	bl	8000b4c <__aeabi_dcmpun>
 800c2a4:	b140      	cbz	r0, 800c2b8 <_printf_float+0xf0>
 800c2a6:	464b      	mov	r3, r9
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	bfbc      	itt	lt
 800c2ac:	232d      	movlt	r3, #45	; 0x2d
 800c2ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c2b2:	487f      	ldr	r0, [pc, #508]	; (800c4b0 <_printf_float+0x2e8>)
 800c2b4:	4b7f      	ldr	r3, [pc, #508]	; (800c4b4 <_printf_float+0x2ec>)
 800c2b6:	e7d1      	b.n	800c25c <_printf_float+0x94>
 800c2b8:	6863      	ldr	r3, [r4, #4]
 800c2ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c2be:	9206      	str	r2, [sp, #24]
 800c2c0:	1c5a      	adds	r2, r3, #1
 800c2c2:	d13f      	bne.n	800c344 <_printf_float+0x17c>
 800c2c4:	2306      	movs	r3, #6
 800c2c6:	6063      	str	r3, [r4, #4]
 800c2c8:	9b05      	ldr	r3, [sp, #20]
 800c2ca:	6861      	ldr	r1, [r4, #4]
 800c2cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	9303      	str	r3, [sp, #12]
 800c2d4:	ab0a      	add	r3, sp, #40	; 0x28
 800c2d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c2da:	ab09      	add	r3, sp, #36	; 0x24
 800c2dc:	ec49 8b10 	vmov	d0, r8, r9
 800c2e0:	9300      	str	r3, [sp, #0]
 800c2e2:	6022      	str	r2, [r4, #0]
 800c2e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c2e8:	4628      	mov	r0, r5
 800c2ea:	f7ff fecd 	bl	800c088 <__cvt>
 800c2ee:	9b06      	ldr	r3, [sp, #24]
 800c2f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c2f2:	2b47      	cmp	r3, #71	; 0x47
 800c2f4:	4680      	mov	r8, r0
 800c2f6:	d108      	bne.n	800c30a <_printf_float+0x142>
 800c2f8:	1cc8      	adds	r0, r1, #3
 800c2fa:	db02      	blt.n	800c302 <_printf_float+0x13a>
 800c2fc:	6863      	ldr	r3, [r4, #4]
 800c2fe:	4299      	cmp	r1, r3
 800c300:	dd41      	ble.n	800c386 <_printf_float+0x1be>
 800c302:	f1ab 0b02 	sub.w	fp, fp, #2
 800c306:	fa5f fb8b 	uxtb.w	fp, fp
 800c30a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c30e:	d820      	bhi.n	800c352 <_printf_float+0x18a>
 800c310:	3901      	subs	r1, #1
 800c312:	465a      	mov	r2, fp
 800c314:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c318:	9109      	str	r1, [sp, #36]	; 0x24
 800c31a:	f7ff ff17 	bl	800c14c <__exponent>
 800c31e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c320:	1813      	adds	r3, r2, r0
 800c322:	2a01      	cmp	r2, #1
 800c324:	4681      	mov	r9, r0
 800c326:	6123      	str	r3, [r4, #16]
 800c328:	dc02      	bgt.n	800c330 <_printf_float+0x168>
 800c32a:	6822      	ldr	r2, [r4, #0]
 800c32c:	07d2      	lsls	r2, r2, #31
 800c32e:	d501      	bpl.n	800c334 <_printf_float+0x16c>
 800c330:	3301      	adds	r3, #1
 800c332:	6123      	str	r3, [r4, #16]
 800c334:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d09c      	beq.n	800c276 <_printf_float+0xae>
 800c33c:	232d      	movs	r3, #45	; 0x2d
 800c33e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c342:	e798      	b.n	800c276 <_printf_float+0xae>
 800c344:	9a06      	ldr	r2, [sp, #24]
 800c346:	2a47      	cmp	r2, #71	; 0x47
 800c348:	d1be      	bne.n	800c2c8 <_printf_float+0x100>
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d1bc      	bne.n	800c2c8 <_printf_float+0x100>
 800c34e:	2301      	movs	r3, #1
 800c350:	e7b9      	b.n	800c2c6 <_printf_float+0xfe>
 800c352:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c356:	d118      	bne.n	800c38a <_printf_float+0x1c2>
 800c358:	2900      	cmp	r1, #0
 800c35a:	6863      	ldr	r3, [r4, #4]
 800c35c:	dd0b      	ble.n	800c376 <_printf_float+0x1ae>
 800c35e:	6121      	str	r1, [r4, #16]
 800c360:	b913      	cbnz	r3, 800c368 <_printf_float+0x1a0>
 800c362:	6822      	ldr	r2, [r4, #0]
 800c364:	07d0      	lsls	r0, r2, #31
 800c366:	d502      	bpl.n	800c36e <_printf_float+0x1a6>
 800c368:	3301      	adds	r3, #1
 800c36a:	440b      	add	r3, r1
 800c36c:	6123      	str	r3, [r4, #16]
 800c36e:	65a1      	str	r1, [r4, #88]	; 0x58
 800c370:	f04f 0900 	mov.w	r9, #0
 800c374:	e7de      	b.n	800c334 <_printf_float+0x16c>
 800c376:	b913      	cbnz	r3, 800c37e <_printf_float+0x1b6>
 800c378:	6822      	ldr	r2, [r4, #0]
 800c37a:	07d2      	lsls	r2, r2, #31
 800c37c:	d501      	bpl.n	800c382 <_printf_float+0x1ba>
 800c37e:	3302      	adds	r3, #2
 800c380:	e7f4      	b.n	800c36c <_printf_float+0x1a4>
 800c382:	2301      	movs	r3, #1
 800c384:	e7f2      	b.n	800c36c <_printf_float+0x1a4>
 800c386:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c38a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c38c:	4299      	cmp	r1, r3
 800c38e:	db05      	blt.n	800c39c <_printf_float+0x1d4>
 800c390:	6823      	ldr	r3, [r4, #0]
 800c392:	6121      	str	r1, [r4, #16]
 800c394:	07d8      	lsls	r0, r3, #31
 800c396:	d5ea      	bpl.n	800c36e <_printf_float+0x1a6>
 800c398:	1c4b      	adds	r3, r1, #1
 800c39a:	e7e7      	b.n	800c36c <_printf_float+0x1a4>
 800c39c:	2900      	cmp	r1, #0
 800c39e:	bfd4      	ite	le
 800c3a0:	f1c1 0202 	rsble	r2, r1, #2
 800c3a4:	2201      	movgt	r2, #1
 800c3a6:	4413      	add	r3, r2
 800c3a8:	e7e0      	b.n	800c36c <_printf_float+0x1a4>
 800c3aa:	6823      	ldr	r3, [r4, #0]
 800c3ac:	055a      	lsls	r2, r3, #21
 800c3ae:	d407      	bmi.n	800c3c0 <_printf_float+0x1f8>
 800c3b0:	6923      	ldr	r3, [r4, #16]
 800c3b2:	4642      	mov	r2, r8
 800c3b4:	4631      	mov	r1, r6
 800c3b6:	4628      	mov	r0, r5
 800c3b8:	47b8      	blx	r7
 800c3ba:	3001      	adds	r0, #1
 800c3bc:	d12c      	bne.n	800c418 <_printf_float+0x250>
 800c3be:	e764      	b.n	800c28a <_printf_float+0xc2>
 800c3c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c3c4:	f240 80e0 	bls.w	800c588 <_printf_float+0x3c0>
 800c3c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	f7f4 fb8a 	bl	8000ae8 <__aeabi_dcmpeq>
 800c3d4:	2800      	cmp	r0, #0
 800c3d6:	d034      	beq.n	800c442 <_printf_float+0x27a>
 800c3d8:	4a37      	ldr	r2, [pc, #220]	; (800c4b8 <_printf_float+0x2f0>)
 800c3da:	2301      	movs	r3, #1
 800c3dc:	4631      	mov	r1, r6
 800c3de:	4628      	mov	r0, r5
 800c3e0:	47b8      	blx	r7
 800c3e2:	3001      	adds	r0, #1
 800c3e4:	f43f af51 	beq.w	800c28a <_printf_float+0xc2>
 800c3e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	db02      	blt.n	800c3f6 <_printf_float+0x22e>
 800c3f0:	6823      	ldr	r3, [r4, #0]
 800c3f2:	07d8      	lsls	r0, r3, #31
 800c3f4:	d510      	bpl.n	800c418 <_printf_float+0x250>
 800c3f6:	ee18 3a10 	vmov	r3, s16
 800c3fa:	4652      	mov	r2, sl
 800c3fc:	4631      	mov	r1, r6
 800c3fe:	4628      	mov	r0, r5
 800c400:	47b8      	blx	r7
 800c402:	3001      	adds	r0, #1
 800c404:	f43f af41 	beq.w	800c28a <_printf_float+0xc2>
 800c408:	f04f 0800 	mov.w	r8, #0
 800c40c:	f104 091a 	add.w	r9, r4, #26
 800c410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c412:	3b01      	subs	r3, #1
 800c414:	4543      	cmp	r3, r8
 800c416:	dc09      	bgt.n	800c42c <_printf_float+0x264>
 800c418:	6823      	ldr	r3, [r4, #0]
 800c41a:	079b      	lsls	r3, r3, #30
 800c41c:	f100 8105 	bmi.w	800c62a <_printf_float+0x462>
 800c420:	68e0      	ldr	r0, [r4, #12]
 800c422:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c424:	4298      	cmp	r0, r3
 800c426:	bfb8      	it	lt
 800c428:	4618      	movlt	r0, r3
 800c42a:	e730      	b.n	800c28e <_printf_float+0xc6>
 800c42c:	2301      	movs	r3, #1
 800c42e:	464a      	mov	r2, r9
 800c430:	4631      	mov	r1, r6
 800c432:	4628      	mov	r0, r5
 800c434:	47b8      	blx	r7
 800c436:	3001      	adds	r0, #1
 800c438:	f43f af27 	beq.w	800c28a <_printf_float+0xc2>
 800c43c:	f108 0801 	add.w	r8, r8, #1
 800c440:	e7e6      	b.n	800c410 <_printf_float+0x248>
 800c442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c444:	2b00      	cmp	r3, #0
 800c446:	dc39      	bgt.n	800c4bc <_printf_float+0x2f4>
 800c448:	4a1b      	ldr	r2, [pc, #108]	; (800c4b8 <_printf_float+0x2f0>)
 800c44a:	2301      	movs	r3, #1
 800c44c:	4631      	mov	r1, r6
 800c44e:	4628      	mov	r0, r5
 800c450:	47b8      	blx	r7
 800c452:	3001      	adds	r0, #1
 800c454:	f43f af19 	beq.w	800c28a <_printf_float+0xc2>
 800c458:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c45c:	4313      	orrs	r3, r2
 800c45e:	d102      	bne.n	800c466 <_printf_float+0x29e>
 800c460:	6823      	ldr	r3, [r4, #0]
 800c462:	07d9      	lsls	r1, r3, #31
 800c464:	d5d8      	bpl.n	800c418 <_printf_float+0x250>
 800c466:	ee18 3a10 	vmov	r3, s16
 800c46a:	4652      	mov	r2, sl
 800c46c:	4631      	mov	r1, r6
 800c46e:	4628      	mov	r0, r5
 800c470:	47b8      	blx	r7
 800c472:	3001      	adds	r0, #1
 800c474:	f43f af09 	beq.w	800c28a <_printf_float+0xc2>
 800c478:	f04f 0900 	mov.w	r9, #0
 800c47c:	f104 0a1a 	add.w	sl, r4, #26
 800c480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c482:	425b      	negs	r3, r3
 800c484:	454b      	cmp	r3, r9
 800c486:	dc01      	bgt.n	800c48c <_printf_float+0x2c4>
 800c488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c48a:	e792      	b.n	800c3b2 <_printf_float+0x1ea>
 800c48c:	2301      	movs	r3, #1
 800c48e:	4652      	mov	r2, sl
 800c490:	4631      	mov	r1, r6
 800c492:	4628      	mov	r0, r5
 800c494:	47b8      	blx	r7
 800c496:	3001      	adds	r0, #1
 800c498:	f43f aef7 	beq.w	800c28a <_printf_float+0xc2>
 800c49c:	f109 0901 	add.w	r9, r9, #1
 800c4a0:	e7ee      	b.n	800c480 <_printf_float+0x2b8>
 800c4a2:	bf00      	nop
 800c4a4:	7fefffff 	.word	0x7fefffff
 800c4a8:	08010a50 	.word	0x08010a50
 800c4ac:	08010a54 	.word	0x08010a54
 800c4b0:	08010a5c 	.word	0x08010a5c
 800c4b4:	08010a58 	.word	0x08010a58
 800c4b8:	08010a60 	.word	0x08010a60
 800c4bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c4c0:	429a      	cmp	r2, r3
 800c4c2:	bfa8      	it	ge
 800c4c4:	461a      	movge	r2, r3
 800c4c6:	2a00      	cmp	r2, #0
 800c4c8:	4691      	mov	r9, r2
 800c4ca:	dc37      	bgt.n	800c53c <_printf_float+0x374>
 800c4cc:	f04f 0b00 	mov.w	fp, #0
 800c4d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c4d4:	f104 021a 	add.w	r2, r4, #26
 800c4d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c4da:	9305      	str	r3, [sp, #20]
 800c4dc:	eba3 0309 	sub.w	r3, r3, r9
 800c4e0:	455b      	cmp	r3, fp
 800c4e2:	dc33      	bgt.n	800c54c <_printf_float+0x384>
 800c4e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	db3b      	blt.n	800c564 <_printf_float+0x39c>
 800c4ec:	6823      	ldr	r3, [r4, #0]
 800c4ee:	07da      	lsls	r2, r3, #31
 800c4f0:	d438      	bmi.n	800c564 <_printf_float+0x39c>
 800c4f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4f4:	9b05      	ldr	r3, [sp, #20]
 800c4f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c4f8:	1ad3      	subs	r3, r2, r3
 800c4fa:	eba2 0901 	sub.w	r9, r2, r1
 800c4fe:	4599      	cmp	r9, r3
 800c500:	bfa8      	it	ge
 800c502:	4699      	movge	r9, r3
 800c504:	f1b9 0f00 	cmp.w	r9, #0
 800c508:	dc35      	bgt.n	800c576 <_printf_float+0x3ae>
 800c50a:	f04f 0800 	mov.w	r8, #0
 800c50e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c512:	f104 0a1a 	add.w	sl, r4, #26
 800c516:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c51a:	1a9b      	subs	r3, r3, r2
 800c51c:	eba3 0309 	sub.w	r3, r3, r9
 800c520:	4543      	cmp	r3, r8
 800c522:	f77f af79 	ble.w	800c418 <_printf_float+0x250>
 800c526:	2301      	movs	r3, #1
 800c528:	4652      	mov	r2, sl
 800c52a:	4631      	mov	r1, r6
 800c52c:	4628      	mov	r0, r5
 800c52e:	47b8      	blx	r7
 800c530:	3001      	adds	r0, #1
 800c532:	f43f aeaa 	beq.w	800c28a <_printf_float+0xc2>
 800c536:	f108 0801 	add.w	r8, r8, #1
 800c53a:	e7ec      	b.n	800c516 <_printf_float+0x34e>
 800c53c:	4613      	mov	r3, r2
 800c53e:	4631      	mov	r1, r6
 800c540:	4642      	mov	r2, r8
 800c542:	4628      	mov	r0, r5
 800c544:	47b8      	blx	r7
 800c546:	3001      	adds	r0, #1
 800c548:	d1c0      	bne.n	800c4cc <_printf_float+0x304>
 800c54a:	e69e      	b.n	800c28a <_printf_float+0xc2>
 800c54c:	2301      	movs	r3, #1
 800c54e:	4631      	mov	r1, r6
 800c550:	4628      	mov	r0, r5
 800c552:	9205      	str	r2, [sp, #20]
 800c554:	47b8      	blx	r7
 800c556:	3001      	adds	r0, #1
 800c558:	f43f ae97 	beq.w	800c28a <_printf_float+0xc2>
 800c55c:	9a05      	ldr	r2, [sp, #20]
 800c55e:	f10b 0b01 	add.w	fp, fp, #1
 800c562:	e7b9      	b.n	800c4d8 <_printf_float+0x310>
 800c564:	ee18 3a10 	vmov	r3, s16
 800c568:	4652      	mov	r2, sl
 800c56a:	4631      	mov	r1, r6
 800c56c:	4628      	mov	r0, r5
 800c56e:	47b8      	blx	r7
 800c570:	3001      	adds	r0, #1
 800c572:	d1be      	bne.n	800c4f2 <_printf_float+0x32a>
 800c574:	e689      	b.n	800c28a <_printf_float+0xc2>
 800c576:	9a05      	ldr	r2, [sp, #20]
 800c578:	464b      	mov	r3, r9
 800c57a:	4442      	add	r2, r8
 800c57c:	4631      	mov	r1, r6
 800c57e:	4628      	mov	r0, r5
 800c580:	47b8      	blx	r7
 800c582:	3001      	adds	r0, #1
 800c584:	d1c1      	bne.n	800c50a <_printf_float+0x342>
 800c586:	e680      	b.n	800c28a <_printf_float+0xc2>
 800c588:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c58a:	2a01      	cmp	r2, #1
 800c58c:	dc01      	bgt.n	800c592 <_printf_float+0x3ca>
 800c58e:	07db      	lsls	r3, r3, #31
 800c590:	d538      	bpl.n	800c604 <_printf_float+0x43c>
 800c592:	2301      	movs	r3, #1
 800c594:	4642      	mov	r2, r8
 800c596:	4631      	mov	r1, r6
 800c598:	4628      	mov	r0, r5
 800c59a:	47b8      	blx	r7
 800c59c:	3001      	adds	r0, #1
 800c59e:	f43f ae74 	beq.w	800c28a <_printf_float+0xc2>
 800c5a2:	ee18 3a10 	vmov	r3, s16
 800c5a6:	4652      	mov	r2, sl
 800c5a8:	4631      	mov	r1, r6
 800c5aa:	4628      	mov	r0, r5
 800c5ac:	47b8      	blx	r7
 800c5ae:	3001      	adds	r0, #1
 800c5b0:	f43f ae6b 	beq.w	800c28a <_printf_float+0xc2>
 800c5b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	f7f4 fa94 	bl	8000ae8 <__aeabi_dcmpeq>
 800c5c0:	b9d8      	cbnz	r0, 800c5fa <_printf_float+0x432>
 800c5c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5c4:	f108 0201 	add.w	r2, r8, #1
 800c5c8:	3b01      	subs	r3, #1
 800c5ca:	4631      	mov	r1, r6
 800c5cc:	4628      	mov	r0, r5
 800c5ce:	47b8      	blx	r7
 800c5d0:	3001      	adds	r0, #1
 800c5d2:	d10e      	bne.n	800c5f2 <_printf_float+0x42a>
 800c5d4:	e659      	b.n	800c28a <_printf_float+0xc2>
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	4652      	mov	r2, sl
 800c5da:	4631      	mov	r1, r6
 800c5dc:	4628      	mov	r0, r5
 800c5de:	47b8      	blx	r7
 800c5e0:	3001      	adds	r0, #1
 800c5e2:	f43f ae52 	beq.w	800c28a <_printf_float+0xc2>
 800c5e6:	f108 0801 	add.w	r8, r8, #1
 800c5ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5ec:	3b01      	subs	r3, #1
 800c5ee:	4543      	cmp	r3, r8
 800c5f0:	dcf1      	bgt.n	800c5d6 <_printf_float+0x40e>
 800c5f2:	464b      	mov	r3, r9
 800c5f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c5f8:	e6dc      	b.n	800c3b4 <_printf_float+0x1ec>
 800c5fa:	f04f 0800 	mov.w	r8, #0
 800c5fe:	f104 0a1a 	add.w	sl, r4, #26
 800c602:	e7f2      	b.n	800c5ea <_printf_float+0x422>
 800c604:	2301      	movs	r3, #1
 800c606:	4642      	mov	r2, r8
 800c608:	e7df      	b.n	800c5ca <_printf_float+0x402>
 800c60a:	2301      	movs	r3, #1
 800c60c:	464a      	mov	r2, r9
 800c60e:	4631      	mov	r1, r6
 800c610:	4628      	mov	r0, r5
 800c612:	47b8      	blx	r7
 800c614:	3001      	adds	r0, #1
 800c616:	f43f ae38 	beq.w	800c28a <_printf_float+0xc2>
 800c61a:	f108 0801 	add.w	r8, r8, #1
 800c61e:	68e3      	ldr	r3, [r4, #12]
 800c620:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c622:	1a5b      	subs	r3, r3, r1
 800c624:	4543      	cmp	r3, r8
 800c626:	dcf0      	bgt.n	800c60a <_printf_float+0x442>
 800c628:	e6fa      	b.n	800c420 <_printf_float+0x258>
 800c62a:	f04f 0800 	mov.w	r8, #0
 800c62e:	f104 0919 	add.w	r9, r4, #25
 800c632:	e7f4      	b.n	800c61e <_printf_float+0x456>

0800c634 <_printf_common>:
 800c634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c638:	4616      	mov	r6, r2
 800c63a:	4699      	mov	r9, r3
 800c63c:	688a      	ldr	r2, [r1, #8]
 800c63e:	690b      	ldr	r3, [r1, #16]
 800c640:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c644:	4293      	cmp	r3, r2
 800c646:	bfb8      	it	lt
 800c648:	4613      	movlt	r3, r2
 800c64a:	6033      	str	r3, [r6, #0]
 800c64c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c650:	4607      	mov	r7, r0
 800c652:	460c      	mov	r4, r1
 800c654:	b10a      	cbz	r2, 800c65a <_printf_common+0x26>
 800c656:	3301      	adds	r3, #1
 800c658:	6033      	str	r3, [r6, #0]
 800c65a:	6823      	ldr	r3, [r4, #0]
 800c65c:	0699      	lsls	r1, r3, #26
 800c65e:	bf42      	ittt	mi
 800c660:	6833      	ldrmi	r3, [r6, #0]
 800c662:	3302      	addmi	r3, #2
 800c664:	6033      	strmi	r3, [r6, #0]
 800c666:	6825      	ldr	r5, [r4, #0]
 800c668:	f015 0506 	ands.w	r5, r5, #6
 800c66c:	d106      	bne.n	800c67c <_printf_common+0x48>
 800c66e:	f104 0a19 	add.w	sl, r4, #25
 800c672:	68e3      	ldr	r3, [r4, #12]
 800c674:	6832      	ldr	r2, [r6, #0]
 800c676:	1a9b      	subs	r3, r3, r2
 800c678:	42ab      	cmp	r3, r5
 800c67a:	dc26      	bgt.n	800c6ca <_printf_common+0x96>
 800c67c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c680:	1e13      	subs	r3, r2, #0
 800c682:	6822      	ldr	r2, [r4, #0]
 800c684:	bf18      	it	ne
 800c686:	2301      	movne	r3, #1
 800c688:	0692      	lsls	r2, r2, #26
 800c68a:	d42b      	bmi.n	800c6e4 <_printf_common+0xb0>
 800c68c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c690:	4649      	mov	r1, r9
 800c692:	4638      	mov	r0, r7
 800c694:	47c0      	blx	r8
 800c696:	3001      	adds	r0, #1
 800c698:	d01e      	beq.n	800c6d8 <_printf_common+0xa4>
 800c69a:	6823      	ldr	r3, [r4, #0]
 800c69c:	68e5      	ldr	r5, [r4, #12]
 800c69e:	6832      	ldr	r2, [r6, #0]
 800c6a0:	f003 0306 	and.w	r3, r3, #6
 800c6a4:	2b04      	cmp	r3, #4
 800c6a6:	bf08      	it	eq
 800c6a8:	1aad      	subeq	r5, r5, r2
 800c6aa:	68a3      	ldr	r3, [r4, #8]
 800c6ac:	6922      	ldr	r2, [r4, #16]
 800c6ae:	bf0c      	ite	eq
 800c6b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c6b4:	2500      	movne	r5, #0
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	bfc4      	itt	gt
 800c6ba:	1a9b      	subgt	r3, r3, r2
 800c6bc:	18ed      	addgt	r5, r5, r3
 800c6be:	2600      	movs	r6, #0
 800c6c0:	341a      	adds	r4, #26
 800c6c2:	42b5      	cmp	r5, r6
 800c6c4:	d11a      	bne.n	800c6fc <_printf_common+0xc8>
 800c6c6:	2000      	movs	r0, #0
 800c6c8:	e008      	b.n	800c6dc <_printf_common+0xa8>
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	4652      	mov	r2, sl
 800c6ce:	4649      	mov	r1, r9
 800c6d0:	4638      	mov	r0, r7
 800c6d2:	47c0      	blx	r8
 800c6d4:	3001      	adds	r0, #1
 800c6d6:	d103      	bne.n	800c6e0 <_printf_common+0xac>
 800c6d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c6dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6e0:	3501      	adds	r5, #1
 800c6e2:	e7c6      	b.n	800c672 <_printf_common+0x3e>
 800c6e4:	18e1      	adds	r1, r4, r3
 800c6e6:	1c5a      	adds	r2, r3, #1
 800c6e8:	2030      	movs	r0, #48	; 0x30
 800c6ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c6ee:	4422      	add	r2, r4
 800c6f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c6f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c6f8:	3302      	adds	r3, #2
 800c6fa:	e7c7      	b.n	800c68c <_printf_common+0x58>
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	4622      	mov	r2, r4
 800c700:	4649      	mov	r1, r9
 800c702:	4638      	mov	r0, r7
 800c704:	47c0      	blx	r8
 800c706:	3001      	adds	r0, #1
 800c708:	d0e6      	beq.n	800c6d8 <_printf_common+0xa4>
 800c70a:	3601      	adds	r6, #1
 800c70c:	e7d9      	b.n	800c6c2 <_printf_common+0x8e>
	...

0800c710 <_printf_i>:
 800c710:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c714:	460c      	mov	r4, r1
 800c716:	4691      	mov	r9, r2
 800c718:	7e27      	ldrb	r7, [r4, #24]
 800c71a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c71c:	2f78      	cmp	r7, #120	; 0x78
 800c71e:	4680      	mov	r8, r0
 800c720:	469a      	mov	sl, r3
 800c722:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c726:	d807      	bhi.n	800c738 <_printf_i+0x28>
 800c728:	2f62      	cmp	r7, #98	; 0x62
 800c72a:	d80a      	bhi.n	800c742 <_printf_i+0x32>
 800c72c:	2f00      	cmp	r7, #0
 800c72e:	f000 80d8 	beq.w	800c8e2 <_printf_i+0x1d2>
 800c732:	2f58      	cmp	r7, #88	; 0x58
 800c734:	f000 80a3 	beq.w	800c87e <_printf_i+0x16e>
 800c738:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c73c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c740:	e03a      	b.n	800c7b8 <_printf_i+0xa8>
 800c742:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c746:	2b15      	cmp	r3, #21
 800c748:	d8f6      	bhi.n	800c738 <_printf_i+0x28>
 800c74a:	a001      	add	r0, pc, #4	; (adr r0, 800c750 <_printf_i+0x40>)
 800c74c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c750:	0800c7a9 	.word	0x0800c7a9
 800c754:	0800c7bd 	.word	0x0800c7bd
 800c758:	0800c739 	.word	0x0800c739
 800c75c:	0800c739 	.word	0x0800c739
 800c760:	0800c739 	.word	0x0800c739
 800c764:	0800c739 	.word	0x0800c739
 800c768:	0800c7bd 	.word	0x0800c7bd
 800c76c:	0800c739 	.word	0x0800c739
 800c770:	0800c739 	.word	0x0800c739
 800c774:	0800c739 	.word	0x0800c739
 800c778:	0800c739 	.word	0x0800c739
 800c77c:	0800c8c9 	.word	0x0800c8c9
 800c780:	0800c7ed 	.word	0x0800c7ed
 800c784:	0800c8ab 	.word	0x0800c8ab
 800c788:	0800c739 	.word	0x0800c739
 800c78c:	0800c739 	.word	0x0800c739
 800c790:	0800c8eb 	.word	0x0800c8eb
 800c794:	0800c739 	.word	0x0800c739
 800c798:	0800c7ed 	.word	0x0800c7ed
 800c79c:	0800c739 	.word	0x0800c739
 800c7a0:	0800c739 	.word	0x0800c739
 800c7a4:	0800c8b3 	.word	0x0800c8b3
 800c7a8:	680b      	ldr	r3, [r1, #0]
 800c7aa:	1d1a      	adds	r2, r3, #4
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	600a      	str	r2, [r1, #0]
 800c7b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c7b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	e0a3      	b.n	800c904 <_printf_i+0x1f4>
 800c7bc:	6825      	ldr	r5, [r4, #0]
 800c7be:	6808      	ldr	r0, [r1, #0]
 800c7c0:	062e      	lsls	r6, r5, #24
 800c7c2:	f100 0304 	add.w	r3, r0, #4
 800c7c6:	d50a      	bpl.n	800c7de <_printf_i+0xce>
 800c7c8:	6805      	ldr	r5, [r0, #0]
 800c7ca:	600b      	str	r3, [r1, #0]
 800c7cc:	2d00      	cmp	r5, #0
 800c7ce:	da03      	bge.n	800c7d8 <_printf_i+0xc8>
 800c7d0:	232d      	movs	r3, #45	; 0x2d
 800c7d2:	426d      	negs	r5, r5
 800c7d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7d8:	485e      	ldr	r0, [pc, #376]	; (800c954 <_printf_i+0x244>)
 800c7da:	230a      	movs	r3, #10
 800c7dc:	e019      	b.n	800c812 <_printf_i+0x102>
 800c7de:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c7e2:	6805      	ldr	r5, [r0, #0]
 800c7e4:	600b      	str	r3, [r1, #0]
 800c7e6:	bf18      	it	ne
 800c7e8:	b22d      	sxthne	r5, r5
 800c7ea:	e7ef      	b.n	800c7cc <_printf_i+0xbc>
 800c7ec:	680b      	ldr	r3, [r1, #0]
 800c7ee:	6825      	ldr	r5, [r4, #0]
 800c7f0:	1d18      	adds	r0, r3, #4
 800c7f2:	6008      	str	r0, [r1, #0]
 800c7f4:	0628      	lsls	r0, r5, #24
 800c7f6:	d501      	bpl.n	800c7fc <_printf_i+0xec>
 800c7f8:	681d      	ldr	r5, [r3, #0]
 800c7fa:	e002      	b.n	800c802 <_printf_i+0xf2>
 800c7fc:	0669      	lsls	r1, r5, #25
 800c7fe:	d5fb      	bpl.n	800c7f8 <_printf_i+0xe8>
 800c800:	881d      	ldrh	r5, [r3, #0]
 800c802:	4854      	ldr	r0, [pc, #336]	; (800c954 <_printf_i+0x244>)
 800c804:	2f6f      	cmp	r7, #111	; 0x6f
 800c806:	bf0c      	ite	eq
 800c808:	2308      	moveq	r3, #8
 800c80a:	230a      	movne	r3, #10
 800c80c:	2100      	movs	r1, #0
 800c80e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c812:	6866      	ldr	r6, [r4, #4]
 800c814:	60a6      	str	r6, [r4, #8]
 800c816:	2e00      	cmp	r6, #0
 800c818:	bfa2      	ittt	ge
 800c81a:	6821      	ldrge	r1, [r4, #0]
 800c81c:	f021 0104 	bicge.w	r1, r1, #4
 800c820:	6021      	strge	r1, [r4, #0]
 800c822:	b90d      	cbnz	r5, 800c828 <_printf_i+0x118>
 800c824:	2e00      	cmp	r6, #0
 800c826:	d04d      	beq.n	800c8c4 <_printf_i+0x1b4>
 800c828:	4616      	mov	r6, r2
 800c82a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c82e:	fb03 5711 	mls	r7, r3, r1, r5
 800c832:	5dc7      	ldrb	r7, [r0, r7]
 800c834:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c838:	462f      	mov	r7, r5
 800c83a:	42bb      	cmp	r3, r7
 800c83c:	460d      	mov	r5, r1
 800c83e:	d9f4      	bls.n	800c82a <_printf_i+0x11a>
 800c840:	2b08      	cmp	r3, #8
 800c842:	d10b      	bne.n	800c85c <_printf_i+0x14c>
 800c844:	6823      	ldr	r3, [r4, #0]
 800c846:	07df      	lsls	r7, r3, #31
 800c848:	d508      	bpl.n	800c85c <_printf_i+0x14c>
 800c84a:	6923      	ldr	r3, [r4, #16]
 800c84c:	6861      	ldr	r1, [r4, #4]
 800c84e:	4299      	cmp	r1, r3
 800c850:	bfde      	ittt	le
 800c852:	2330      	movle	r3, #48	; 0x30
 800c854:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c858:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c85c:	1b92      	subs	r2, r2, r6
 800c85e:	6122      	str	r2, [r4, #16]
 800c860:	f8cd a000 	str.w	sl, [sp]
 800c864:	464b      	mov	r3, r9
 800c866:	aa03      	add	r2, sp, #12
 800c868:	4621      	mov	r1, r4
 800c86a:	4640      	mov	r0, r8
 800c86c:	f7ff fee2 	bl	800c634 <_printf_common>
 800c870:	3001      	adds	r0, #1
 800c872:	d14c      	bne.n	800c90e <_printf_i+0x1fe>
 800c874:	f04f 30ff 	mov.w	r0, #4294967295
 800c878:	b004      	add	sp, #16
 800c87a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c87e:	4835      	ldr	r0, [pc, #212]	; (800c954 <_printf_i+0x244>)
 800c880:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c884:	6823      	ldr	r3, [r4, #0]
 800c886:	680e      	ldr	r6, [r1, #0]
 800c888:	061f      	lsls	r7, r3, #24
 800c88a:	f856 5b04 	ldr.w	r5, [r6], #4
 800c88e:	600e      	str	r6, [r1, #0]
 800c890:	d514      	bpl.n	800c8bc <_printf_i+0x1ac>
 800c892:	07d9      	lsls	r1, r3, #31
 800c894:	bf44      	itt	mi
 800c896:	f043 0320 	orrmi.w	r3, r3, #32
 800c89a:	6023      	strmi	r3, [r4, #0]
 800c89c:	b91d      	cbnz	r5, 800c8a6 <_printf_i+0x196>
 800c89e:	6823      	ldr	r3, [r4, #0]
 800c8a0:	f023 0320 	bic.w	r3, r3, #32
 800c8a4:	6023      	str	r3, [r4, #0]
 800c8a6:	2310      	movs	r3, #16
 800c8a8:	e7b0      	b.n	800c80c <_printf_i+0xfc>
 800c8aa:	6823      	ldr	r3, [r4, #0]
 800c8ac:	f043 0320 	orr.w	r3, r3, #32
 800c8b0:	6023      	str	r3, [r4, #0]
 800c8b2:	2378      	movs	r3, #120	; 0x78
 800c8b4:	4828      	ldr	r0, [pc, #160]	; (800c958 <_printf_i+0x248>)
 800c8b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c8ba:	e7e3      	b.n	800c884 <_printf_i+0x174>
 800c8bc:	065e      	lsls	r6, r3, #25
 800c8be:	bf48      	it	mi
 800c8c0:	b2ad      	uxthmi	r5, r5
 800c8c2:	e7e6      	b.n	800c892 <_printf_i+0x182>
 800c8c4:	4616      	mov	r6, r2
 800c8c6:	e7bb      	b.n	800c840 <_printf_i+0x130>
 800c8c8:	680b      	ldr	r3, [r1, #0]
 800c8ca:	6826      	ldr	r6, [r4, #0]
 800c8cc:	6960      	ldr	r0, [r4, #20]
 800c8ce:	1d1d      	adds	r5, r3, #4
 800c8d0:	600d      	str	r5, [r1, #0]
 800c8d2:	0635      	lsls	r5, r6, #24
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	d501      	bpl.n	800c8dc <_printf_i+0x1cc>
 800c8d8:	6018      	str	r0, [r3, #0]
 800c8da:	e002      	b.n	800c8e2 <_printf_i+0x1d2>
 800c8dc:	0671      	lsls	r1, r6, #25
 800c8de:	d5fb      	bpl.n	800c8d8 <_printf_i+0x1c8>
 800c8e0:	8018      	strh	r0, [r3, #0]
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	6123      	str	r3, [r4, #16]
 800c8e6:	4616      	mov	r6, r2
 800c8e8:	e7ba      	b.n	800c860 <_printf_i+0x150>
 800c8ea:	680b      	ldr	r3, [r1, #0]
 800c8ec:	1d1a      	adds	r2, r3, #4
 800c8ee:	600a      	str	r2, [r1, #0]
 800c8f0:	681e      	ldr	r6, [r3, #0]
 800c8f2:	6862      	ldr	r2, [r4, #4]
 800c8f4:	2100      	movs	r1, #0
 800c8f6:	4630      	mov	r0, r6
 800c8f8:	f7f3 fc82 	bl	8000200 <memchr>
 800c8fc:	b108      	cbz	r0, 800c902 <_printf_i+0x1f2>
 800c8fe:	1b80      	subs	r0, r0, r6
 800c900:	6060      	str	r0, [r4, #4]
 800c902:	6863      	ldr	r3, [r4, #4]
 800c904:	6123      	str	r3, [r4, #16]
 800c906:	2300      	movs	r3, #0
 800c908:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c90c:	e7a8      	b.n	800c860 <_printf_i+0x150>
 800c90e:	6923      	ldr	r3, [r4, #16]
 800c910:	4632      	mov	r2, r6
 800c912:	4649      	mov	r1, r9
 800c914:	4640      	mov	r0, r8
 800c916:	47d0      	blx	sl
 800c918:	3001      	adds	r0, #1
 800c91a:	d0ab      	beq.n	800c874 <_printf_i+0x164>
 800c91c:	6823      	ldr	r3, [r4, #0]
 800c91e:	079b      	lsls	r3, r3, #30
 800c920:	d413      	bmi.n	800c94a <_printf_i+0x23a>
 800c922:	68e0      	ldr	r0, [r4, #12]
 800c924:	9b03      	ldr	r3, [sp, #12]
 800c926:	4298      	cmp	r0, r3
 800c928:	bfb8      	it	lt
 800c92a:	4618      	movlt	r0, r3
 800c92c:	e7a4      	b.n	800c878 <_printf_i+0x168>
 800c92e:	2301      	movs	r3, #1
 800c930:	4632      	mov	r2, r6
 800c932:	4649      	mov	r1, r9
 800c934:	4640      	mov	r0, r8
 800c936:	47d0      	blx	sl
 800c938:	3001      	adds	r0, #1
 800c93a:	d09b      	beq.n	800c874 <_printf_i+0x164>
 800c93c:	3501      	adds	r5, #1
 800c93e:	68e3      	ldr	r3, [r4, #12]
 800c940:	9903      	ldr	r1, [sp, #12]
 800c942:	1a5b      	subs	r3, r3, r1
 800c944:	42ab      	cmp	r3, r5
 800c946:	dcf2      	bgt.n	800c92e <_printf_i+0x21e>
 800c948:	e7eb      	b.n	800c922 <_printf_i+0x212>
 800c94a:	2500      	movs	r5, #0
 800c94c:	f104 0619 	add.w	r6, r4, #25
 800c950:	e7f5      	b.n	800c93e <_printf_i+0x22e>
 800c952:	bf00      	nop
 800c954:	08010a62 	.word	0x08010a62
 800c958:	08010a73 	.word	0x08010a73

0800c95c <_scanf_float>:
 800c95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c960:	b087      	sub	sp, #28
 800c962:	4617      	mov	r7, r2
 800c964:	9303      	str	r3, [sp, #12]
 800c966:	688b      	ldr	r3, [r1, #8]
 800c968:	1e5a      	subs	r2, r3, #1
 800c96a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c96e:	bf83      	ittte	hi
 800c970:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c974:	195b      	addhi	r3, r3, r5
 800c976:	9302      	strhi	r3, [sp, #8]
 800c978:	2300      	movls	r3, #0
 800c97a:	bf86      	itte	hi
 800c97c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c980:	608b      	strhi	r3, [r1, #8]
 800c982:	9302      	strls	r3, [sp, #8]
 800c984:	680b      	ldr	r3, [r1, #0]
 800c986:	468b      	mov	fp, r1
 800c988:	2500      	movs	r5, #0
 800c98a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c98e:	f84b 3b1c 	str.w	r3, [fp], #28
 800c992:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c996:	4680      	mov	r8, r0
 800c998:	460c      	mov	r4, r1
 800c99a:	465e      	mov	r6, fp
 800c99c:	46aa      	mov	sl, r5
 800c99e:	46a9      	mov	r9, r5
 800c9a0:	9501      	str	r5, [sp, #4]
 800c9a2:	68a2      	ldr	r2, [r4, #8]
 800c9a4:	b152      	cbz	r2, 800c9bc <_scanf_float+0x60>
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	781b      	ldrb	r3, [r3, #0]
 800c9aa:	2b4e      	cmp	r3, #78	; 0x4e
 800c9ac:	d864      	bhi.n	800ca78 <_scanf_float+0x11c>
 800c9ae:	2b40      	cmp	r3, #64	; 0x40
 800c9b0:	d83c      	bhi.n	800ca2c <_scanf_float+0xd0>
 800c9b2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c9b6:	b2c8      	uxtb	r0, r1
 800c9b8:	280e      	cmp	r0, #14
 800c9ba:	d93a      	bls.n	800ca32 <_scanf_float+0xd6>
 800c9bc:	f1b9 0f00 	cmp.w	r9, #0
 800c9c0:	d003      	beq.n	800c9ca <_scanf_float+0x6e>
 800c9c2:	6823      	ldr	r3, [r4, #0]
 800c9c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c9c8:	6023      	str	r3, [r4, #0]
 800c9ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c9ce:	f1ba 0f01 	cmp.w	sl, #1
 800c9d2:	f200 8113 	bhi.w	800cbfc <_scanf_float+0x2a0>
 800c9d6:	455e      	cmp	r6, fp
 800c9d8:	f200 8105 	bhi.w	800cbe6 <_scanf_float+0x28a>
 800c9dc:	2501      	movs	r5, #1
 800c9de:	4628      	mov	r0, r5
 800c9e0:	b007      	add	sp, #28
 800c9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9e6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c9ea:	2a0d      	cmp	r2, #13
 800c9ec:	d8e6      	bhi.n	800c9bc <_scanf_float+0x60>
 800c9ee:	a101      	add	r1, pc, #4	; (adr r1, 800c9f4 <_scanf_float+0x98>)
 800c9f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c9f4:	0800cb33 	.word	0x0800cb33
 800c9f8:	0800c9bd 	.word	0x0800c9bd
 800c9fc:	0800c9bd 	.word	0x0800c9bd
 800ca00:	0800c9bd 	.word	0x0800c9bd
 800ca04:	0800cb93 	.word	0x0800cb93
 800ca08:	0800cb6b 	.word	0x0800cb6b
 800ca0c:	0800c9bd 	.word	0x0800c9bd
 800ca10:	0800c9bd 	.word	0x0800c9bd
 800ca14:	0800cb41 	.word	0x0800cb41
 800ca18:	0800c9bd 	.word	0x0800c9bd
 800ca1c:	0800c9bd 	.word	0x0800c9bd
 800ca20:	0800c9bd 	.word	0x0800c9bd
 800ca24:	0800c9bd 	.word	0x0800c9bd
 800ca28:	0800caf9 	.word	0x0800caf9
 800ca2c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ca30:	e7db      	b.n	800c9ea <_scanf_float+0x8e>
 800ca32:	290e      	cmp	r1, #14
 800ca34:	d8c2      	bhi.n	800c9bc <_scanf_float+0x60>
 800ca36:	a001      	add	r0, pc, #4	; (adr r0, 800ca3c <_scanf_float+0xe0>)
 800ca38:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ca3c:	0800caeb 	.word	0x0800caeb
 800ca40:	0800c9bd 	.word	0x0800c9bd
 800ca44:	0800caeb 	.word	0x0800caeb
 800ca48:	0800cb7f 	.word	0x0800cb7f
 800ca4c:	0800c9bd 	.word	0x0800c9bd
 800ca50:	0800ca99 	.word	0x0800ca99
 800ca54:	0800cad5 	.word	0x0800cad5
 800ca58:	0800cad5 	.word	0x0800cad5
 800ca5c:	0800cad5 	.word	0x0800cad5
 800ca60:	0800cad5 	.word	0x0800cad5
 800ca64:	0800cad5 	.word	0x0800cad5
 800ca68:	0800cad5 	.word	0x0800cad5
 800ca6c:	0800cad5 	.word	0x0800cad5
 800ca70:	0800cad5 	.word	0x0800cad5
 800ca74:	0800cad5 	.word	0x0800cad5
 800ca78:	2b6e      	cmp	r3, #110	; 0x6e
 800ca7a:	d809      	bhi.n	800ca90 <_scanf_float+0x134>
 800ca7c:	2b60      	cmp	r3, #96	; 0x60
 800ca7e:	d8b2      	bhi.n	800c9e6 <_scanf_float+0x8a>
 800ca80:	2b54      	cmp	r3, #84	; 0x54
 800ca82:	d077      	beq.n	800cb74 <_scanf_float+0x218>
 800ca84:	2b59      	cmp	r3, #89	; 0x59
 800ca86:	d199      	bne.n	800c9bc <_scanf_float+0x60>
 800ca88:	2d07      	cmp	r5, #7
 800ca8a:	d197      	bne.n	800c9bc <_scanf_float+0x60>
 800ca8c:	2508      	movs	r5, #8
 800ca8e:	e029      	b.n	800cae4 <_scanf_float+0x188>
 800ca90:	2b74      	cmp	r3, #116	; 0x74
 800ca92:	d06f      	beq.n	800cb74 <_scanf_float+0x218>
 800ca94:	2b79      	cmp	r3, #121	; 0x79
 800ca96:	e7f6      	b.n	800ca86 <_scanf_float+0x12a>
 800ca98:	6821      	ldr	r1, [r4, #0]
 800ca9a:	05c8      	lsls	r0, r1, #23
 800ca9c:	d51a      	bpl.n	800cad4 <_scanf_float+0x178>
 800ca9e:	9b02      	ldr	r3, [sp, #8]
 800caa0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800caa4:	6021      	str	r1, [r4, #0]
 800caa6:	f109 0901 	add.w	r9, r9, #1
 800caaa:	b11b      	cbz	r3, 800cab4 <_scanf_float+0x158>
 800caac:	3b01      	subs	r3, #1
 800caae:	3201      	adds	r2, #1
 800cab0:	9302      	str	r3, [sp, #8]
 800cab2:	60a2      	str	r2, [r4, #8]
 800cab4:	68a3      	ldr	r3, [r4, #8]
 800cab6:	3b01      	subs	r3, #1
 800cab8:	60a3      	str	r3, [r4, #8]
 800caba:	6923      	ldr	r3, [r4, #16]
 800cabc:	3301      	adds	r3, #1
 800cabe:	6123      	str	r3, [r4, #16]
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	3b01      	subs	r3, #1
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	607b      	str	r3, [r7, #4]
 800cac8:	f340 8084 	ble.w	800cbd4 <_scanf_float+0x278>
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	3301      	adds	r3, #1
 800cad0:	603b      	str	r3, [r7, #0]
 800cad2:	e766      	b.n	800c9a2 <_scanf_float+0x46>
 800cad4:	eb1a 0f05 	cmn.w	sl, r5
 800cad8:	f47f af70 	bne.w	800c9bc <_scanf_float+0x60>
 800cadc:	6822      	ldr	r2, [r4, #0]
 800cade:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800cae2:	6022      	str	r2, [r4, #0]
 800cae4:	f806 3b01 	strb.w	r3, [r6], #1
 800cae8:	e7e4      	b.n	800cab4 <_scanf_float+0x158>
 800caea:	6822      	ldr	r2, [r4, #0]
 800caec:	0610      	lsls	r0, r2, #24
 800caee:	f57f af65 	bpl.w	800c9bc <_scanf_float+0x60>
 800caf2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800caf6:	e7f4      	b.n	800cae2 <_scanf_float+0x186>
 800caf8:	f1ba 0f00 	cmp.w	sl, #0
 800cafc:	d10e      	bne.n	800cb1c <_scanf_float+0x1c0>
 800cafe:	f1b9 0f00 	cmp.w	r9, #0
 800cb02:	d10e      	bne.n	800cb22 <_scanf_float+0x1c6>
 800cb04:	6822      	ldr	r2, [r4, #0]
 800cb06:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800cb0a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cb0e:	d108      	bne.n	800cb22 <_scanf_float+0x1c6>
 800cb10:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cb14:	6022      	str	r2, [r4, #0]
 800cb16:	f04f 0a01 	mov.w	sl, #1
 800cb1a:	e7e3      	b.n	800cae4 <_scanf_float+0x188>
 800cb1c:	f1ba 0f02 	cmp.w	sl, #2
 800cb20:	d055      	beq.n	800cbce <_scanf_float+0x272>
 800cb22:	2d01      	cmp	r5, #1
 800cb24:	d002      	beq.n	800cb2c <_scanf_float+0x1d0>
 800cb26:	2d04      	cmp	r5, #4
 800cb28:	f47f af48 	bne.w	800c9bc <_scanf_float+0x60>
 800cb2c:	3501      	adds	r5, #1
 800cb2e:	b2ed      	uxtb	r5, r5
 800cb30:	e7d8      	b.n	800cae4 <_scanf_float+0x188>
 800cb32:	f1ba 0f01 	cmp.w	sl, #1
 800cb36:	f47f af41 	bne.w	800c9bc <_scanf_float+0x60>
 800cb3a:	f04f 0a02 	mov.w	sl, #2
 800cb3e:	e7d1      	b.n	800cae4 <_scanf_float+0x188>
 800cb40:	b97d      	cbnz	r5, 800cb62 <_scanf_float+0x206>
 800cb42:	f1b9 0f00 	cmp.w	r9, #0
 800cb46:	f47f af3c 	bne.w	800c9c2 <_scanf_float+0x66>
 800cb4a:	6822      	ldr	r2, [r4, #0]
 800cb4c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800cb50:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cb54:	f47f af39 	bne.w	800c9ca <_scanf_float+0x6e>
 800cb58:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cb5c:	6022      	str	r2, [r4, #0]
 800cb5e:	2501      	movs	r5, #1
 800cb60:	e7c0      	b.n	800cae4 <_scanf_float+0x188>
 800cb62:	2d03      	cmp	r5, #3
 800cb64:	d0e2      	beq.n	800cb2c <_scanf_float+0x1d0>
 800cb66:	2d05      	cmp	r5, #5
 800cb68:	e7de      	b.n	800cb28 <_scanf_float+0x1cc>
 800cb6a:	2d02      	cmp	r5, #2
 800cb6c:	f47f af26 	bne.w	800c9bc <_scanf_float+0x60>
 800cb70:	2503      	movs	r5, #3
 800cb72:	e7b7      	b.n	800cae4 <_scanf_float+0x188>
 800cb74:	2d06      	cmp	r5, #6
 800cb76:	f47f af21 	bne.w	800c9bc <_scanf_float+0x60>
 800cb7a:	2507      	movs	r5, #7
 800cb7c:	e7b2      	b.n	800cae4 <_scanf_float+0x188>
 800cb7e:	6822      	ldr	r2, [r4, #0]
 800cb80:	0591      	lsls	r1, r2, #22
 800cb82:	f57f af1b 	bpl.w	800c9bc <_scanf_float+0x60>
 800cb86:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800cb8a:	6022      	str	r2, [r4, #0]
 800cb8c:	f8cd 9004 	str.w	r9, [sp, #4]
 800cb90:	e7a8      	b.n	800cae4 <_scanf_float+0x188>
 800cb92:	6822      	ldr	r2, [r4, #0]
 800cb94:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800cb98:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800cb9c:	d006      	beq.n	800cbac <_scanf_float+0x250>
 800cb9e:	0550      	lsls	r0, r2, #21
 800cba0:	f57f af0c 	bpl.w	800c9bc <_scanf_float+0x60>
 800cba4:	f1b9 0f00 	cmp.w	r9, #0
 800cba8:	f43f af0f 	beq.w	800c9ca <_scanf_float+0x6e>
 800cbac:	0591      	lsls	r1, r2, #22
 800cbae:	bf58      	it	pl
 800cbb0:	9901      	ldrpl	r1, [sp, #4]
 800cbb2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cbb6:	bf58      	it	pl
 800cbb8:	eba9 0101 	subpl.w	r1, r9, r1
 800cbbc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800cbc0:	bf58      	it	pl
 800cbc2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cbc6:	6022      	str	r2, [r4, #0]
 800cbc8:	f04f 0900 	mov.w	r9, #0
 800cbcc:	e78a      	b.n	800cae4 <_scanf_float+0x188>
 800cbce:	f04f 0a03 	mov.w	sl, #3
 800cbd2:	e787      	b.n	800cae4 <_scanf_float+0x188>
 800cbd4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cbd8:	4639      	mov	r1, r7
 800cbda:	4640      	mov	r0, r8
 800cbdc:	4798      	blx	r3
 800cbde:	2800      	cmp	r0, #0
 800cbe0:	f43f aedf 	beq.w	800c9a2 <_scanf_float+0x46>
 800cbe4:	e6ea      	b.n	800c9bc <_scanf_float+0x60>
 800cbe6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cbea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cbee:	463a      	mov	r2, r7
 800cbf0:	4640      	mov	r0, r8
 800cbf2:	4798      	blx	r3
 800cbf4:	6923      	ldr	r3, [r4, #16]
 800cbf6:	3b01      	subs	r3, #1
 800cbf8:	6123      	str	r3, [r4, #16]
 800cbfa:	e6ec      	b.n	800c9d6 <_scanf_float+0x7a>
 800cbfc:	1e6b      	subs	r3, r5, #1
 800cbfe:	2b06      	cmp	r3, #6
 800cc00:	d825      	bhi.n	800cc4e <_scanf_float+0x2f2>
 800cc02:	2d02      	cmp	r5, #2
 800cc04:	d836      	bhi.n	800cc74 <_scanf_float+0x318>
 800cc06:	455e      	cmp	r6, fp
 800cc08:	f67f aee8 	bls.w	800c9dc <_scanf_float+0x80>
 800cc0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cc10:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cc14:	463a      	mov	r2, r7
 800cc16:	4640      	mov	r0, r8
 800cc18:	4798      	blx	r3
 800cc1a:	6923      	ldr	r3, [r4, #16]
 800cc1c:	3b01      	subs	r3, #1
 800cc1e:	6123      	str	r3, [r4, #16]
 800cc20:	e7f1      	b.n	800cc06 <_scanf_float+0x2aa>
 800cc22:	9802      	ldr	r0, [sp, #8]
 800cc24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cc28:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800cc2c:	9002      	str	r0, [sp, #8]
 800cc2e:	463a      	mov	r2, r7
 800cc30:	4640      	mov	r0, r8
 800cc32:	4798      	blx	r3
 800cc34:	6923      	ldr	r3, [r4, #16]
 800cc36:	3b01      	subs	r3, #1
 800cc38:	6123      	str	r3, [r4, #16]
 800cc3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cc3e:	fa5f fa8a 	uxtb.w	sl, sl
 800cc42:	f1ba 0f02 	cmp.w	sl, #2
 800cc46:	d1ec      	bne.n	800cc22 <_scanf_float+0x2c6>
 800cc48:	3d03      	subs	r5, #3
 800cc4a:	b2ed      	uxtb	r5, r5
 800cc4c:	1b76      	subs	r6, r6, r5
 800cc4e:	6823      	ldr	r3, [r4, #0]
 800cc50:	05da      	lsls	r2, r3, #23
 800cc52:	d52f      	bpl.n	800ccb4 <_scanf_float+0x358>
 800cc54:	055b      	lsls	r3, r3, #21
 800cc56:	d510      	bpl.n	800cc7a <_scanf_float+0x31e>
 800cc58:	455e      	cmp	r6, fp
 800cc5a:	f67f aebf 	bls.w	800c9dc <_scanf_float+0x80>
 800cc5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cc62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cc66:	463a      	mov	r2, r7
 800cc68:	4640      	mov	r0, r8
 800cc6a:	4798      	blx	r3
 800cc6c:	6923      	ldr	r3, [r4, #16]
 800cc6e:	3b01      	subs	r3, #1
 800cc70:	6123      	str	r3, [r4, #16]
 800cc72:	e7f1      	b.n	800cc58 <_scanf_float+0x2fc>
 800cc74:	46aa      	mov	sl, r5
 800cc76:	9602      	str	r6, [sp, #8]
 800cc78:	e7df      	b.n	800cc3a <_scanf_float+0x2de>
 800cc7a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cc7e:	6923      	ldr	r3, [r4, #16]
 800cc80:	2965      	cmp	r1, #101	; 0x65
 800cc82:	f103 33ff 	add.w	r3, r3, #4294967295
 800cc86:	f106 35ff 	add.w	r5, r6, #4294967295
 800cc8a:	6123      	str	r3, [r4, #16]
 800cc8c:	d00c      	beq.n	800cca8 <_scanf_float+0x34c>
 800cc8e:	2945      	cmp	r1, #69	; 0x45
 800cc90:	d00a      	beq.n	800cca8 <_scanf_float+0x34c>
 800cc92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cc96:	463a      	mov	r2, r7
 800cc98:	4640      	mov	r0, r8
 800cc9a:	4798      	blx	r3
 800cc9c:	6923      	ldr	r3, [r4, #16]
 800cc9e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cca2:	3b01      	subs	r3, #1
 800cca4:	1eb5      	subs	r5, r6, #2
 800cca6:	6123      	str	r3, [r4, #16]
 800cca8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ccac:	463a      	mov	r2, r7
 800ccae:	4640      	mov	r0, r8
 800ccb0:	4798      	blx	r3
 800ccb2:	462e      	mov	r6, r5
 800ccb4:	6825      	ldr	r5, [r4, #0]
 800ccb6:	f015 0510 	ands.w	r5, r5, #16
 800ccba:	d158      	bne.n	800cd6e <_scanf_float+0x412>
 800ccbc:	7035      	strb	r5, [r6, #0]
 800ccbe:	6823      	ldr	r3, [r4, #0]
 800ccc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ccc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ccc8:	d11c      	bne.n	800cd04 <_scanf_float+0x3a8>
 800ccca:	9b01      	ldr	r3, [sp, #4]
 800cccc:	454b      	cmp	r3, r9
 800ccce:	eba3 0209 	sub.w	r2, r3, r9
 800ccd2:	d124      	bne.n	800cd1e <_scanf_float+0x3c2>
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	4659      	mov	r1, fp
 800ccd8:	4640      	mov	r0, r8
 800ccda:	f000 fef3 	bl	800dac4 <_strtod_r>
 800ccde:	9b03      	ldr	r3, [sp, #12]
 800cce0:	6821      	ldr	r1, [r4, #0]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	f011 0f02 	tst.w	r1, #2
 800cce8:	ec57 6b10 	vmov	r6, r7, d0
 800ccec:	f103 0204 	add.w	r2, r3, #4
 800ccf0:	d020      	beq.n	800cd34 <_scanf_float+0x3d8>
 800ccf2:	9903      	ldr	r1, [sp, #12]
 800ccf4:	600a      	str	r2, [r1, #0]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	e9c3 6700 	strd	r6, r7, [r3]
 800ccfc:	68e3      	ldr	r3, [r4, #12]
 800ccfe:	3301      	adds	r3, #1
 800cd00:	60e3      	str	r3, [r4, #12]
 800cd02:	e66c      	b.n	800c9de <_scanf_float+0x82>
 800cd04:	9b04      	ldr	r3, [sp, #16]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d0e4      	beq.n	800ccd4 <_scanf_float+0x378>
 800cd0a:	9905      	ldr	r1, [sp, #20]
 800cd0c:	230a      	movs	r3, #10
 800cd0e:	462a      	mov	r2, r5
 800cd10:	3101      	adds	r1, #1
 800cd12:	4640      	mov	r0, r8
 800cd14:	f000 ff60 	bl	800dbd8 <_strtol_r>
 800cd18:	9b04      	ldr	r3, [sp, #16]
 800cd1a:	9e05      	ldr	r6, [sp, #20]
 800cd1c:	1ac2      	subs	r2, r0, r3
 800cd1e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800cd22:	429e      	cmp	r6, r3
 800cd24:	bf28      	it	cs
 800cd26:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800cd2a:	4912      	ldr	r1, [pc, #72]	; (800cd74 <_scanf_float+0x418>)
 800cd2c:	4630      	mov	r0, r6
 800cd2e:	f000 f82b 	bl	800cd88 <siprintf>
 800cd32:	e7cf      	b.n	800ccd4 <_scanf_float+0x378>
 800cd34:	f011 0f04 	tst.w	r1, #4
 800cd38:	9903      	ldr	r1, [sp, #12]
 800cd3a:	600a      	str	r2, [r1, #0]
 800cd3c:	d1db      	bne.n	800ccf6 <_scanf_float+0x39a>
 800cd3e:	f8d3 8000 	ldr.w	r8, [r3]
 800cd42:	ee10 2a10 	vmov	r2, s0
 800cd46:	ee10 0a10 	vmov	r0, s0
 800cd4a:	463b      	mov	r3, r7
 800cd4c:	4639      	mov	r1, r7
 800cd4e:	f7f3 fefd 	bl	8000b4c <__aeabi_dcmpun>
 800cd52:	b128      	cbz	r0, 800cd60 <_scanf_float+0x404>
 800cd54:	4808      	ldr	r0, [pc, #32]	; (800cd78 <_scanf_float+0x41c>)
 800cd56:	f000 f811 	bl	800cd7c <nanf>
 800cd5a:	ed88 0a00 	vstr	s0, [r8]
 800cd5e:	e7cd      	b.n	800ccfc <_scanf_float+0x3a0>
 800cd60:	4630      	mov	r0, r6
 800cd62:	4639      	mov	r1, r7
 800cd64:	f7f3 ff50 	bl	8000c08 <__aeabi_d2f>
 800cd68:	f8c8 0000 	str.w	r0, [r8]
 800cd6c:	e7c6      	b.n	800ccfc <_scanf_float+0x3a0>
 800cd6e:	2500      	movs	r5, #0
 800cd70:	e635      	b.n	800c9de <_scanf_float+0x82>
 800cd72:	bf00      	nop
 800cd74:	08010a84 	.word	0x08010a84
 800cd78:	08010e00 	.word	0x08010e00

0800cd7c <nanf>:
 800cd7c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cd84 <nanf+0x8>
 800cd80:	4770      	bx	lr
 800cd82:	bf00      	nop
 800cd84:	7fc00000 	.word	0x7fc00000

0800cd88 <siprintf>:
 800cd88:	b40e      	push	{r1, r2, r3}
 800cd8a:	b500      	push	{lr}
 800cd8c:	b09c      	sub	sp, #112	; 0x70
 800cd8e:	ab1d      	add	r3, sp, #116	; 0x74
 800cd90:	9002      	str	r0, [sp, #8]
 800cd92:	9006      	str	r0, [sp, #24]
 800cd94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cd98:	4809      	ldr	r0, [pc, #36]	; (800cdc0 <siprintf+0x38>)
 800cd9a:	9107      	str	r1, [sp, #28]
 800cd9c:	9104      	str	r1, [sp, #16]
 800cd9e:	4909      	ldr	r1, [pc, #36]	; (800cdc4 <siprintf+0x3c>)
 800cda0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cda4:	9105      	str	r1, [sp, #20]
 800cda6:	6800      	ldr	r0, [r0, #0]
 800cda8:	9301      	str	r3, [sp, #4]
 800cdaa:	a902      	add	r1, sp, #8
 800cdac:	f003 fa0c 	bl	80101c8 <_svfiprintf_r>
 800cdb0:	9b02      	ldr	r3, [sp, #8]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	701a      	strb	r2, [r3, #0]
 800cdb6:	b01c      	add	sp, #112	; 0x70
 800cdb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdbc:	b003      	add	sp, #12
 800cdbe:	4770      	bx	lr
 800cdc0:	20000198 	.word	0x20000198
 800cdc4:	ffff0208 	.word	0xffff0208

0800cdc8 <__sread>:
 800cdc8:	b510      	push	{r4, lr}
 800cdca:	460c      	mov	r4, r1
 800cdcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdd0:	f003 fc54 	bl	801067c <_read_r>
 800cdd4:	2800      	cmp	r0, #0
 800cdd6:	bfab      	itete	ge
 800cdd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cdda:	89a3      	ldrhlt	r3, [r4, #12]
 800cddc:	181b      	addge	r3, r3, r0
 800cdde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cde2:	bfac      	ite	ge
 800cde4:	6563      	strge	r3, [r4, #84]	; 0x54
 800cde6:	81a3      	strhlt	r3, [r4, #12]
 800cde8:	bd10      	pop	{r4, pc}

0800cdea <__swrite>:
 800cdea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdee:	461f      	mov	r7, r3
 800cdf0:	898b      	ldrh	r3, [r1, #12]
 800cdf2:	05db      	lsls	r3, r3, #23
 800cdf4:	4605      	mov	r5, r0
 800cdf6:	460c      	mov	r4, r1
 800cdf8:	4616      	mov	r6, r2
 800cdfa:	d505      	bpl.n	800ce08 <__swrite+0x1e>
 800cdfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce00:	2302      	movs	r3, #2
 800ce02:	2200      	movs	r2, #0
 800ce04:	f002 fb72 	bl	800f4ec <_lseek_r>
 800ce08:	89a3      	ldrh	r3, [r4, #12]
 800ce0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ce12:	81a3      	strh	r3, [r4, #12]
 800ce14:	4632      	mov	r2, r6
 800ce16:	463b      	mov	r3, r7
 800ce18:	4628      	mov	r0, r5
 800ce1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce1e:	f000 bf2f 	b.w	800dc80 <_write_r>

0800ce22 <__sseek>:
 800ce22:	b510      	push	{r4, lr}
 800ce24:	460c      	mov	r4, r1
 800ce26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce2a:	f002 fb5f 	bl	800f4ec <_lseek_r>
 800ce2e:	1c43      	adds	r3, r0, #1
 800ce30:	89a3      	ldrh	r3, [r4, #12]
 800ce32:	bf15      	itete	ne
 800ce34:	6560      	strne	r0, [r4, #84]	; 0x54
 800ce36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ce3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ce3e:	81a3      	strheq	r3, [r4, #12]
 800ce40:	bf18      	it	ne
 800ce42:	81a3      	strhne	r3, [r4, #12]
 800ce44:	bd10      	pop	{r4, pc}

0800ce46 <__sclose>:
 800ce46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce4a:	f000 bf99 	b.w	800dd80 <_close_r>

0800ce4e <strncmp>:
 800ce4e:	b510      	push	{r4, lr}
 800ce50:	b16a      	cbz	r2, 800ce6e <strncmp+0x20>
 800ce52:	3901      	subs	r1, #1
 800ce54:	1884      	adds	r4, r0, r2
 800ce56:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ce5a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ce5e:	4293      	cmp	r3, r2
 800ce60:	d103      	bne.n	800ce6a <strncmp+0x1c>
 800ce62:	42a0      	cmp	r0, r4
 800ce64:	d001      	beq.n	800ce6a <strncmp+0x1c>
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d1f5      	bne.n	800ce56 <strncmp+0x8>
 800ce6a:	1a98      	subs	r0, r3, r2
 800ce6c:	bd10      	pop	{r4, pc}
 800ce6e:	4610      	mov	r0, r2
 800ce70:	e7fc      	b.n	800ce6c <strncmp+0x1e>

0800ce72 <sulp>:
 800ce72:	b570      	push	{r4, r5, r6, lr}
 800ce74:	4604      	mov	r4, r0
 800ce76:	460d      	mov	r5, r1
 800ce78:	ec45 4b10 	vmov	d0, r4, r5
 800ce7c:	4616      	mov	r6, r2
 800ce7e:	f002 ff3f 	bl	800fd00 <__ulp>
 800ce82:	ec51 0b10 	vmov	r0, r1, d0
 800ce86:	b17e      	cbz	r6, 800cea8 <sulp+0x36>
 800ce88:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ce8c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	dd09      	ble.n	800cea8 <sulp+0x36>
 800ce94:	051b      	lsls	r3, r3, #20
 800ce96:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ce9a:	2400      	movs	r4, #0
 800ce9c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cea0:	4622      	mov	r2, r4
 800cea2:	462b      	mov	r3, r5
 800cea4:	f7f3 fbb8 	bl	8000618 <__aeabi_dmul>
 800cea8:	bd70      	pop	{r4, r5, r6, pc}
 800ceaa:	0000      	movs	r0, r0
 800ceac:	0000      	movs	r0, r0
	...

0800ceb0 <_strtod_l>:
 800ceb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceb4:	b0a3      	sub	sp, #140	; 0x8c
 800ceb6:	461f      	mov	r7, r3
 800ceb8:	2300      	movs	r3, #0
 800ceba:	931e      	str	r3, [sp, #120]	; 0x78
 800cebc:	4ba4      	ldr	r3, [pc, #656]	; (800d150 <_strtod_l+0x2a0>)
 800cebe:	9219      	str	r2, [sp, #100]	; 0x64
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	9307      	str	r3, [sp, #28]
 800cec4:	4604      	mov	r4, r0
 800cec6:	4618      	mov	r0, r3
 800cec8:	4688      	mov	r8, r1
 800ceca:	f7f3 f991 	bl	80001f0 <strlen>
 800cece:	f04f 0a00 	mov.w	sl, #0
 800ced2:	4605      	mov	r5, r0
 800ced4:	f04f 0b00 	mov.w	fp, #0
 800ced8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800cedc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cede:	781a      	ldrb	r2, [r3, #0]
 800cee0:	2a2b      	cmp	r2, #43	; 0x2b
 800cee2:	d04c      	beq.n	800cf7e <_strtod_l+0xce>
 800cee4:	d839      	bhi.n	800cf5a <_strtod_l+0xaa>
 800cee6:	2a0d      	cmp	r2, #13
 800cee8:	d832      	bhi.n	800cf50 <_strtod_l+0xa0>
 800ceea:	2a08      	cmp	r2, #8
 800ceec:	d832      	bhi.n	800cf54 <_strtod_l+0xa4>
 800ceee:	2a00      	cmp	r2, #0
 800cef0:	d03c      	beq.n	800cf6c <_strtod_l+0xbc>
 800cef2:	2300      	movs	r3, #0
 800cef4:	930e      	str	r3, [sp, #56]	; 0x38
 800cef6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800cef8:	7833      	ldrb	r3, [r6, #0]
 800cefa:	2b30      	cmp	r3, #48	; 0x30
 800cefc:	f040 80b4 	bne.w	800d068 <_strtod_l+0x1b8>
 800cf00:	7873      	ldrb	r3, [r6, #1]
 800cf02:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cf06:	2b58      	cmp	r3, #88	; 0x58
 800cf08:	d16c      	bne.n	800cfe4 <_strtod_l+0x134>
 800cf0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf0c:	9301      	str	r3, [sp, #4]
 800cf0e:	ab1e      	add	r3, sp, #120	; 0x78
 800cf10:	9702      	str	r7, [sp, #8]
 800cf12:	9300      	str	r3, [sp, #0]
 800cf14:	4a8f      	ldr	r2, [pc, #572]	; (800d154 <_strtod_l+0x2a4>)
 800cf16:	ab1f      	add	r3, sp, #124	; 0x7c
 800cf18:	a91d      	add	r1, sp, #116	; 0x74
 800cf1a:	4620      	mov	r0, r4
 800cf1c:	f001 ffd6 	bl	800eecc <__gethex>
 800cf20:	f010 0707 	ands.w	r7, r0, #7
 800cf24:	4605      	mov	r5, r0
 800cf26:	d005      	beq.n	800cf34 <_strtod_l+0x84>
 800cf28:	2f06      	cmp	r7, #6
 800cf2a:	d12a      	bne.n	800cf82 <_strtod_l+0xd2>
 800cf2c:	3601      	adds	r6, #1
 800cf2e:	2300      	movs	r3, #0
 800cf30:	961d      	str	r6, [sp, #116]	; 0x74
 800cf32:	930e      	str	r3, [sp, #56]	; 0x38
 800cf34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	f040 8596 	bne.w	800da68 <_strtod_l+0xbb8>
 800cf3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf3e:	b1db      	cbz	r3, 800cf78 <_strtod_l+0xc8>
 800cf40:	4652      	mov	r2, sl
 800cf42:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cf46:	ec43 2b10 	vmov	d0, r2, r3
 800cf4a:	b023      	add	sp, #140	; 0x8c
 800cf4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf50:	2a20      	cmp	r2, #32
 800cf52:	d1ce      	bne.n	800cef2 <_strtod_l+0x42>
 800cf54:	3301      	adds	r3, #1
 800cf56:	931d      	str	r3, [sp, #116]	; 0x74
 800cf58:	e7c0      	b.n	800cedc <_strtod_l+0x2c>
 800cf5a:	2a2d      	cmp	r2, #45	; 0x2d
 800cf5c:	d1c9      	bne.n	800cef2 <_strtod_l+0x42>
 800cf5e:	2201      	movs	r2, #1
 800cf60:	920e      	str	r2, [sp, #56]	; 0x38
 800cf62:	1c5a      	adds	r2, r3, #1
 800cf64:	921d      	str	r2, [sp, #116]	; 0x74
 800cf66:	785b      	ldrb	r3, [r3, #1]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d1c4      	bne.n	800cef6 <_strtod_l+0x46>
 800cf6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cf6e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	f040 8576 	bne.w	800da64 <_strtod_l+0xbb4>
 800cf78:	4652      	mov	r2, sl
 800cf7a:	465b      	mov	r3, fp
 800cf7c:	e7e3      	b.n	800cf46 <_strtod_l+0x96>
 800cf7e:	2200      	movs	r2, #0
 800cf80:	e7ee      	b.n	800cf60 <_strtod_l+0xb0>
 800cf82:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800cf84:	b13a      	cbz	r2, 800cf96 <_strtod_l+0xe6>
 800cf86:	2135      	movs	r1, #53	; 0x35
 800cf88:	a820      	add	r0, sp, #128	; 0x80
 800cf8a:	f002 ffc4 	bl	800ff16 <__copybits>
 800cf8e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800cf90:	4620      	mov	r0, r4
 800cf92:	f002 fb89 	bl	800f6a8 <_Bfree>
 800cf96:	3f01      	subs	r7, #1
 800cf98:	2f05      	cmp	r7, #5
 800cf9a:	d807      	bhi.n	800cfac <_strtod_l+0xfc>
 800cf9c:	e8df f007 	tbb	[pc, r7]
 800cfa0:	1d180b0e 	.word	0x1d180b0e
 800cfa4:	030e      	.short	0x030e
 800cfa6:	f04f 0b00 	mov.w	fp, #0
 800cfaa:	46da      	mov	sl, fp
 800cfac:	0728      	lsls	r0, r5, #28
 800cfae:	d5c1      	bpl.n	800cf34 <_strtod_l+0x84>
 800cfb0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800cfb4:	e7be      	b.n	800cf34 <_strtod_l+0x84>
 800cfb6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800cfba:	e7f7      	b.n	800cfac <_strtod_l+0xfc>
 800cfbc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800cfc0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800cfc2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cfc6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cfca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cfce:	e7ed      	b.n	800cfac <_strtod_l+0xfc>
 800cfd0:	f8df b184 	ldr.w	fp, [pc, #388]	; 800d158 <_strtod_l+0x2a8>
 800cfd4:	f04f 0a00 	mov.w	sl, #0
 800cfd8:	e7e8      	b.n	800cfac <_strtod_l+0xfc>
 800cfda:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800cfde:	f04f 3aff 	mov.w	sl, #4294967295
 800cfe2:	e7e3      	b.n	800cfac <_strtod_l+0xfc>
 800cfe4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cfe6:	1c5a      	adds	r2, r3, #1
 800cfe8:	921d      	str	r2, [sp, #116]	; 0x74
 800cfea:	785b      	ldrb	r3, [r3, #1]
 800cfec:	2b30      	cmp	r3, #48	; 0x30
 800cfee:	d0f9      	beq.n	800cfe4 <_strtod_l+0x134>
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d09f      	beq.n	800cf34 <_strtod_l+0x84>
 800cff4:	2301      	movs	r3, #1
 800cff6:	f04f 0900 	mov.w	r9, #0
 800cffa:	9304      	str	r3, [sp, #16]
 800cffc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cffe:	930a      	str	r3, [sp, #40]	; 0x28
 800d000:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800d004:	464f      	mov	r7, r9
 800d006:	220a      	movs	r2, #10
 800d008:	981d      	ldr	r0, [sp, #116]	; 0x74
 800d00a:	7806      	ldrb	r6, [r0, #0]
 800d00c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d010:	b2d9      	uxtb	r1, r3
 800d012:	2909      	cmp	r1, #9
 800d014:	d92a      	bls.n	800d06c <_strtod_l+0x1bc>
 800d016:	9907      	ldr	r1, [sp, #28]
 800d018:	462a      	mov	r2, r5
 800d01a:	f7ff ff18 	bl	800ce4e <strncmp>
 800d01e:	b398      	cbz	r0, 800d088 <_strtod_l+0x1d8>
 800d020:	2000      	movs	r0, #0
 800d022:	4633      	mov	r3, r6
 800d024:	463d      	mov	r5, r7
 800d026:	9007      	str	r0, [sp, #28]
 800d028:	4602      	mov	r2, r0
 800d02a:	2b65      	cmp	r3, #101	; 0x65
 800d02c:	d001      	beq.n	800d032 <_strtod_l+0x182>
 800d02e:	2b45      	cmp	r3, #69	; 0x45
 800d030:	d118      	bne.n	800d064 <_strtod_l+0x1b4>
 800d032:	b91d      	cbnz	r5, 800d03c <_strtod_l+0x18c>
 800d034:	9b04      	ldr	r3, [sp, #16]
 800d036:	4303      	orrs	r3, r0
 800d038:	d098      	beq.n	800cf6c <_strtod_l+0xbc>
 800d03a:	2500      	movs	r5, #0
 800d03c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800d040:	f108 0301 	add.w	r3, r8, #1
 800d044:	931d      	str	r3, [sp, #116]	; 0x74
 800d046:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d04a:	2b2b      	cmp	r3, #43	; 0x2b
 800d04c:	d075      	beq.n	800d13a <_strtod_l+0x28a>
 800d04e:	2b2d      	cmp	r3, #45	; 0x2d
 800d050:	d07b      	beq.n	800d14a <_strtod_l+0x29a>
 800d052:	f04f 0c00 	mov.w	ip, #0
 800d056:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800d05a:	2909      	cmp	r1, #9
 800d05c:	f240 8082 	bls.w	800d164 <_strtod_l+0x2b4>
 800d060:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d064:	2600      	movs	r6, #0
 800d066:	e09d      	b.n	800d1a4 <_strtod_l+0x2f4>
 800d068:	2300      	movs	r3, #0
 800d06a:	e7c4      	b.n	800cff6 <_strtod_l+0x146>
 800d06c:	2f08      	cmp	r7, #8
 800d06e:	bfd8      	it	le
 800d070:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800d072:	f100 0001 	add.w	r0, r0, #1
 800d076:	bfda      	itte	le
 800d078:	fb02 3301 	mlale	r3, r2, r1, r3
 800d07c:	9309      	strle	r3, [sp, #36]	; 0x24
 800d07e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d082:	3701      	adds	r7, #1
 800d084:	901d      	str	r0, [sp, #116]	; 0x74
 800d086:	e7bf      	b.n	800d008 <_strtod_l+0x158>
 800d088:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d08a:	195a      	adds	r2, r3, r5
 800d08c:	921d      	str	r2, [sp, #116]	; 0x74
 800d08e:	5d5b      	ldrb	r3, [r3, r5]
 800d090:	2f00      	cmp	r7, #0
 800d092:	d037      	beq.n	800d104 <_strtod_l+0x254>
 800d094:	9007      	str	r0, [sp, #28]
 800d096:	463d      	mov	r5, r7
 800d098:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800d09c:	2a09      	cmp	r2, #9
 800d09e:	d912      	bls.n	800d0c6 <_strtod_l+0x216>
 800d0a0:	2201      	movs	r2, #1
 800d0a2:	e7c2      	b.n	800d02a <_strtod_l+0x17a>
 800d0a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d0a6:	1c5a      	adds	r2, r3, #1
 800d0a8:	921d      	str	r2, [sp, #116]	; 0x74
 800d0aa:	785b      	ldrb	r3, [r3, #1]
 800d0ac:	3001      	adds	r0, #1
 800d0ae:	2b30      	cmp	r3, #48	; 0x30
 800d0b0:	d0f8      	beq.n	800d0a4 <_strtod_l+0x1f4>
 800d0b2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800d0b6:	2a08      	cmp	r2, #8
 800d0b8:	f200 84db 	bhi.w	800da72 <_strtod_l+0xbc2>
 800d0bc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d0be:	9007      	str	r0, [sp, #28]
 800d0c0:	2000      	movs	r0, #0
 800d0c2:	920a      	str	r2, [sp, #40]	; 0x28
 800d0c4:	4605      	mov	r5, r0
 800d0c6:	3b30      	subs	r3, #48	; 0x30
 800d0c8:	f100 0201 	add.w	r2, r0, #1
 800d0cc:	d014      	beq.n	800d0f8 <_strtod_l+0x248>
 800d0ce:	9907      	ldr	r1, [sp, #28]
 800d0d0:	4411      	add	r1, r2
 800d0d2:	9107      	str	r1, [sp, #28]
 800d0d4:	462a      	mov	r2, r5
 800d0d6:	eb00 0e05 	add.w	lr, r0, r5
 800d0da:	210a      	movs	r1, #10
 800d0dc:	4572      	cmp	r2, lr
 800d0de:	d113      	bne.n	800d108 <_strtod_l+0x258>
 800d0e0:	182a      	adds	r2, r5, r0
 800d0e2:	2a08      	cmp	r2, #8
 800d0e4:	f105 0501 	add.w	r5, r5, #1
 800d0e8:	4405      	add	r5, r0
 800d0ea:	dc1c      	bgt.n	800d126 <_strtod_l+0x276>
 800d0ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d0ee:	220a      	movs	r2, #10
 800d0f0:	fb02 3301 	mla	r3, r2, r1, r3
 800d0f4:	9309      	str	r3, [sp, #36]	; 0x24
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d0fa:	1c59      	adds	r1, r3, #1
 800d0fc:	911d      	str	r1, [sp, #116]	; 0x74
 800d0fe:	785b      	ldrb	r3, [r3, #1]
 800d100:	4610      	mov	r0, r2
 800d102:	e7c9      	b.n	800d098 <_strtod_l+0x1e8>
 800d104:	4638      	mov	r0, r7
 800d106:	e7d2      	b.n	800d0ae <_strtod_l+0x1fe>
 800d108:	2a08      	cmp	r2, #8
 800d10a:	dc04      	bgt.n	800d116 <_strtod_l+0x266>
 800d10c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d10e:	434e      	muls	r6, r1
 800d110:	9609      	str	r6, [sp, #36]	; 0x24
 800d112:	3201      	adds	r2, #1
 800d114:	e7e2      	b.n	800d0dc <_strtod_l+0x22c>
 800d116:	f102 0c01 	add.w	ip, r2, #1
 800d11a:	f1bc 0f10 	cmp.w	ip, #16
 800d11e:	bfd8      	it	le
 800d120:	fb01 f909 	mulle.w	r9, r1, r9
 800d124:	e7f5      	b.n	800d112 <_strtod_l+0x262>
 800d126:	2d10      	cmp	r5, #16
 800d128:	bfdc      	itt	le
 800d12a:	220a      	movle	r2, #10
 800d12c:	fb02 3909 	mlale	r9, r2, r9, r3
 800d130:	e7e1      	b.n	800d0f6 <_strtod_l+0x246>
 800d132:	2300      	movs	r3, #0
 800d134:	9307      	str	r3, [sp, #28]
 800d136:	2201      	movs	r2, #1
 800d138:	e77c      	b.n	800d034 <_strtod_l+0x184>
 800d13a:	f04f 0c00 	mov.w	ip, #0
 800d13e:	f108 0302 	add.w	r3, r8, #2
 800d142:	931d      	str	r3, [sp, #116]	; 0x74
 800d144:	f898 3002 	ldrb.w	r3, [r8, #2]
 800d148:	e785      	b.n	800d056 <_strtod_l+0x1a6>
 800d14a:	f04f 0c01 	mov.w	ip, #1
 800d14e:	e7f6      	b.n	800d13e <_strtod_l+0x28e>
 800d150:	08010c40 	.word	0x08010c40
 800d154:	08010a8c 	.word	0x08010a8c
 800d158:	7ff00000 	.word	0x7ff00000
 800d15c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d15e:	1c59      	adds	r1, r3, #1
 800d160:	911d      	str	r1, [sp, #116]	; 0x74
 800d162:	785b      	ldrb	r3, [r3, #1]
 800d164:	2b30      	cmp	r3, #48	; 0x30
 800d166:	d0f9      	beq.n	800d15c <_strtod_l+0x2ac>
 800d168:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800d16c:	2908      	cmp	r1, #8
 800d16e:	f63f af79 	bhi.w	800d064 <_strtod_l+0x1b4>
 800d172:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800d176:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d178:	9308      	str	r3, [sp, #32]
 800d17a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d17c:	1c59      	adds	r1, r3, #1
 800d17e:	911d      	str	r1, [sp, #116]	; 0x74
 800d180:	785b      	ldrb	r3, [r3, #1]
 800d182:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800d186:	2e09      	cmp	r6, #9
 800d188:	d937      	bls.n	800d1fa <_strtod_l+0x34a>
 800d18a:	9e08      	ldr	r6, [sp, #32]
 800d18c:	1b89      	subs	r1, r1, r6
 800d18e:	2908      	cmp	r1, #8
 800d190:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d194:	dc02      	bgt.n	800d19c <_strtod_l+0x2ec>
 800d196:	4576      	cmp	r6, lr
 800d198:	bfa8      	it	ge
 800d19a:	4676      	movge	r6, lr
 800d19c:	f1bc 0f00 	cmp.w	ip, #0
 800d1a0:	d000      	beq.n	800d1a4 <_strtod_l+0x2f4>
 800d1a2:	4276      	negs	r6, r6
 800d1a4:	2d00      	cmp	r5, #0
 800d1a6:	d14f      	bne.n	800d248 <_strtod_l+0x398>
 800d1a8:	9904      	ldr	r1, [sp, #16]
 800d1aa:	4301      	orrs	r1, r0
 800d1ac:	f47f aec2 	bne.w	800cf34 <_strtod_l+0x84>
 800d1b0:	2a00      	cmp	r2, #0
 800d1b2:	f47f aedb 	bne.w	800cf6c <_strtod_l+0xbc>
 800d1b6:	2b69      	cmp	r3, #105	; 0x69
 800d1b8:	d027      	beq.n	800d20a <_strtod_l+0x35a>
 800d1ba:	dc24      	bgt.n	800d206 <_strtod_l+0x356>
 800d1bc:	2b49      	cmp	r3, #73	; 0x49
 800d1be:	d024      	beq.n	800d20a <_strtod_l+0x35a>
 800d1c0:	2b4e      	cmp	r3, #78	; 0x4e
 800d1c2:	f47f aed3 	bne.w	800cf6c <_strtod_l+0xbc>
 800d1c6:	499e      	ldr	r1, [pc, #632]	; (800d440 <_strtod_l+0x590>)
 800d1c8:	a81d      	add	r0, sp, #116	; 0x74
 800d1ca:	f002 f8d7 	bl	800f37c <__match>
 800d1ce:	2800      	cmp	r0, #0
 800d1d0:	f43f aecc 	beq.w	800cf6c <_strtod_l+0xbc>
 800d1d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d1d6:	781b      	ldrb	r3, [r3, #0]
 800d1d8:	2b28      	cmp	r3, #40	; 0x28
 800d1da:	d12d      	bne.n	800d238 <_strtod_l+0x388>
 800d1dc:	4999      	ldr	r1, [pc, #612]	; (800d444 <_strtod_l+0x594>)
 800d1de:	aa20      	add	r2, sp, #128	; 0x80
 800d1e0:	a81d      	add	r0, sp, #116	; 0x74
 800d1e2:	f002 f8df 	bl	800f3a4 <__hexnan>
 800d1e6:	2805      	cmp	r0, #5
 800d1e8:	d126      	bne.n	800d238 <_strtod_l+0x388>
 800d1ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d1ec:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800d1f0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d1f4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d1f8:	e69c      	b.n	800cf34 <_strtod_l+0x84>
 800d1fa:	210a      	movs	r1, #10
 800d1fc:	fb01 3e0e 	mla	lr, r1, lr, r3
 800d200:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d204:	e7b9      	b.n	800d17a <_strtod_l+0x2ca>
 800d206:	2b6e      	cmp	r3, #110	; 0x6e
 800d208:	e7db      	b.n	800d1c2 <_strtod_l+0x312>
 800d20a:	498f      	ldr	r1, [pc, #572]	; (800d448 <_strtod_l+0x598>)
 800d20c:	a81d      	add	r0, sp, #116	; 0x74
 800d20e:	f002 f8b5 	bl	800f37c <__match>
 800d212:	2800      	cmp	r0, #0
 800d214:	f43f aeaa 	beq.w	800cf6c <_strtod_l+0xbc>
 800d218:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d21a:	498c      	ldr	r1, [pc, #560]	; (800d44c <_strtod_l+0x59c>)
 800d21c:	3b01      	subs	r3, #1
 800d21e:	a81d      	add	r0, sp, #116	; 0x74
 800d220:	931d      	str	r3, [sp, #116]	; 0x74
 800d222:	f002 f8ab 	bl	800f37c <__match>
 800d226:	b910      	cbnz	r0, 800d22e <_strtod_l+0x37e>
 800d228:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d22a:	3301      	adds	r3, #1
 800d22c:	931d      	str	r3, [sp, #116]	; 0x74
 800d22e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800d45c <_strtod_l+0x5ac>
 800d232:	f04f 0a00 	mov.w	sl, #0
 800d236:	e67d      	b.n	800cf34 <_strtod_l+0x84>
 800d238:	4885      	ldr	r0, [pc, #532]	; (800d450 <_strtod_l+0x5a0>)
 800d23a:	f003 fa31 	bl	80106a0 <nan>
 800d23e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d242:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800d246:	e675      	b.n	800cf34 <_strtod_l+0x84>
 800d248:	9b07      	ldr	r3, [sp, #28]
 800d24a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d24c:	1af3      	subs	r3, r6, r3
 800d24e:	2f00      	cmp	r7, #0
 800d250:	bf08      	it	eq
 800d252:	462f      	moveq	r7, r5
 800d254:	2d10      	cmp	r5, #16
 800d256:	9308      	str	r3, [sp, #32]
 800d258:	46a8      	mov	r8, r5
 800d25a:	bfa8      	it	ge
 800d25c:	f04f 0810 	movge.w	r8, #16
 800d260:	f7f3 f960 	bl	8000524 <__aeabi_ui2d>
 800d264:	2d09      	cmp	r5, #9
 800d266:	4682      	mov	sl, r0
 800d268:	468b      	mov	fp, r1
 800d26a:	dd13      	ble.n	800d294 <_strtod_l+0x3e4>
 800d26c:	4b79      	ldr	r3, [pc, #484]	; (800d454 <_strtod_l+0x5a4>)
 800d26e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d272:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d276:	f7f3 f9cf 	bl	8000618 <__aeabi_dmul>
 800d27a:	4682      	mov	sl, r0
 800d27c:	4648      	mov	r0, r9
 800d27e:	468b      	mov	fp, r1
 800d280:	f7f3 f950 	bl	8000524 <__aeabi_ui2d>
 800d284:	4602      	mov	r2, r0
 800d286:	460b      	mov	r3, r1
 800d288:	4650      	mov	r0, sl
 800d28a:	4659      	mov	r1, fp
 800d28c:	f7f3 f80e 	bl	80002ac <__adddf3>
 800d290:	4682      	mov	sl, r0
 800d292:	468b      	mov	fp, r1
 800d294:	2d0f      	cmp	r5, #15
 800d296:	dc38      	bgt.n	800d30a <_strtod_l+0x45a>
 800d298:	9b08      	ldr	r3, [sp, #32]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	f43f ae4a 	beq.w	800cf34 <_strtod_l+0x84>
 800d2a0:	dd24      	ble.n	800d2ec <_strtod_l+0x43c>
 800d2a2:	2b16      	cmp	r3, #22
 800d2a4:	dc0b      	bgt.n	800d2be <_strtod_l+0x40e>
 800d2a6:	4d6b      	ldr	r5, [pc, #428]	; (800d454 <_strtod_l+0x5a4>)
 800d2a8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800d2ac:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d2b0:	4652      	mov	r2, sl
 800d2b2:	465b      	mov	r3, fp
 800d2b4:	f7f3 f9b0 	bl	8000618 <__aeabi_dmul>
 800d2b8:	4682      	mov	sl, r0
 800d2ba:	468b      	mov	fp, r1
 800d2bc:	e63a      	b.n	800cf34 <_strtod_l+0x84>
 800d2be:	9a08      	ldr	r2, [sp, #32]
 800d2c0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	db20      	blt.n	800d30a <_strtod_l+0x45a>
 800d2c8:	4c62      	ldr	r4, [pc, #392]	; (800d454 <_strtod_l+0x5a4>)
 800d2ca:	f1c5 050f 	rsb	r5, r5, #15
 800d2ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d2d2:	4652      	mov	r2, sl
 800d2d4:	465b      	mov	r3, fp
 800d2d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2da:	f7f3 f99d 	bl	8000618 <__aeabi_dmul>
 800d2de:	9b08      	ldr	r3, [sp, #32]
 800d2e0:	1b5d      	subs	r5, r3, r5
 800d2e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d2e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d2ea:	e7e3      	b.n	800d2b4 <_strtod_l+0x404>
 800d2ec:	9b08      	ldr	r3, [sp, #32]
 800d2ee:	3316      	adds	r3, #22
 800d2f0:	db0b      	blt.n	800d30a <_strtod_l+0x45a>
 800d2f2:	9b07      	ldr	r3, [sp, #28]
 800d2f4:	4a57      	ldr	r2, [pc, #348]	; (800d454 <_strtod_l+0x5a4>)
 800d2f6:	1b9e      	subs	r6, r3, r6
 800d2f8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800d2fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d300:	4650      	mov	r0, sl
 800d302:	4659      	mov	r1, fp
 800d304:	f7f3 fab2 	bl	800086c <__aeabi_ddiv>
 800d308:	e7d6      	b.n	800d2b8 <_strtod_l+0x408>
 800d30a:	9b08      	ldr	r3, [sp, #32]
 800d30c:	eba5 0808 	sub.w	r8, r5, r8
 800d310:	4498      	add	r8, r3
 800d312:	f1b8 0f00 	cmp.w	r8, #0
 800d316:	dd71      	ble.n	800d3fc <_strtod_l+0x54c>
 800d318:	f018 030f 	ands.w	r3, r8, #15
 800d31c:	d00a      	beq.n	800d334 <_strtod_l+0x484>
 800d31e:	494d      	ldr	r1, [pc, #308]	; (800d454 <_strtod_l+0x5a4>)
 800d320:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d324:	4652      	mov	r2, sl
 800d326:	465b      	mov	r3, fp
 800d328:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d32c:	f7f3 f974 	bl	8000618 <__aeabi_dmul>
 800d330:	4682      	mov	sl, r0
 800d332:	468b      	mov	fp, r1
 800d334:	f038 080f 	bics.w	r8, r8, #15
 800d338:	d04d      	beq.n	800d3d6 <_strtod_l+0x526>
 800d33a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d33e:	dd22      	ble.n	800d386 <_strtod_l+0x4d6>
 800d340:	2500      	movs	r5, #0
 800d342:	462e      	mov	r6, r5
 800d344:	9509      	str	r5, [sp, #36]	; 0x24
 800d346:	9507      	str	r5, [sp, #28]
 800d348:	2322      	movs	r3, #34	; 0x22
 800d34a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800d45c <_strtod_l+0x5ac>
 800d34e:	6023      	str	r3, [r4, #0]
 800d350:	f04f 0a00 	mov.w	sl, #0
 800d354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d356:	2b00      	cmp	r3, #0
 800d358:	f43f adec 	beq.w	800cf34 <_strtod_l+0x84>
 800d35c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d35e:	4620      	mov	r0, r4
 800d360:	f002 f9a2 	bl	800f6a8 <_Bfree>
 800d364:	9907      	ldr	r1, [sp, #28]
 800d366:	4620      	mov	r0, r4
 800d368:	f002 f99e 	bl	800f6a8 <_Bfree>
 800d36c:	4631      	mov	r1, r6
 800d36e:	4620      	mov	r0, r4
 800d370:	f002 f99a 	bl	800f6a8 <_Bfree>
 800d374:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d376:	4620      	mov	r0, r4
 800d378:	f002 f996 	bl	800f6a8 <_Bfree>
 800d37c:	4629      	mov	r1, r5
 800d37e:	4620      	mov	r0, r4
 800d380:	f002 f992 	bl	800f6a8 <_Bfree>
 800d384:	e5d6      	b.n	800cf34 <_strtod_l+0x84>
 800d386:	2300      	movs	r3, #0
 800d388:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d38c:	4650      	mov	r0, sl
 800d38e:	4659      	mov	r1, fp
 800d390:	4699      	mov	r9, r3
 800d392:	f1b8 0f01 	cmp.w	r8, #1
 800d396:	dc21      	bgt.n	800d3dc <_strtod_l+0x52c>
 800d398:	b10b      	cbz	r3, 800d39e <_strtod_l+0x4ee>
 800d39a:	4682      	mov	sl, r0
 800d39c:	468b      	mov	fp, r1
 800d39e:	4b2e      	ldr	r3, [pc, #184]	; (800d458 <_strtod_l+0x5a8>)
 800d3a0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d3a4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d3a8:	4652      	mov	r2, sl
 800d3aa:	465b      	mov	r3, fp
 800d3ac:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d3b0:	f7f3 f932 	bl	8000618 <__aeabi_dmul>
 800d3b4:	4b29      	ldr	r3, [pc, #164]	; (800d45c <_strtod_l+0x5ac>)
 800d3b6:	460a      	mov	r2, r1
 800d3b8:	400b      	ands	r3, r1
 800d3ba:	4929      	ldr	r1, [pc, #164]	; (800d460 <_strtod_l+0x5b0>)
 800d3bc:	428b      	cmp	r3, r1
 800d3be:	4682      	mov	sl, r0
 800d3c0:	d8be      	bhi.n	800d340 <_strtod_l+0x490>
 800d3c2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d3c6:	428b      	cmp	r3, r1
 800d3c8:	bf86      	itte	hi
 800d3ca:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800d464 <_strtod_l+0x5b4>
 800d3ce:	f04f 3aff 	movhi.w	sl, #4294967295
 800d3d2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	9304      	str	r3, [sp, #16]
 800d3da:	e081      	b.n	800d4e0 <_strtod_l+0x630>
 800d3dc:	f018 0f01 	tst.w	r8, #1
 800d3e0:	d007      	beq.n	800d3f2 <_strtod_l+0x542>
 800d3e2:	4b1d      	ldr	r3, [pc, #116]	; (800d458 <_strtod_l+0x5a8>)
 800d3e4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800d3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ec:	f7f3 f914 	bl	8000618 <__aeabi_dmul>
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	f109 0901 	add.w	r9, r9, #1
 800d3f6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d3fa:	e7ca      	b.n	800d392 <_strtod_l+0x4e2>
 800d3fc:	d0eb      	beq.n	800d3d6 <_strtod_l+0x526>
 800d3fe:	f1c8 0800 	rsb	r8, r8, #0
 800d402:	f018 020f 	ands.w	r2, r8, #15
 800d406:	d00a      	beq.n	800d41e <_strtod_l+0x56e>
 800d408:	4b12      	ldr	r3, [pc, #72]	; (800d454 <_strtod_l+0x5a4>)
 800d40a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d40e:	4650      	mov	r0, sl
 800d410:	4659      	mov	r1, fp
 800d412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d416:	f7f3 fa29 	bl	800086c <__aeabi_ddiv>
 800d41a:	4682      	mov	sl, r0
 800d41c:	468b      	mov	fp, r1
 800d41e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d422:	d0d8      	beq.n	800d3d6 <_strtod_l+0x526>
 800d424:	f1b8 0f1f 	cmp.w	r8, #31
 800d428:	dd1e      	ble.n	800d468 <_strtod_l+0x5b8>
 800d42a:	2500      	movs	r5, #0
 800d42c:	462e      	mov	r6, r5
 800d42e:	9509      	str	r5, [sp, #36]	; 0x24
 800d430:	9507      	str	r5, [sp, #28]
 800d432:	2322      	movs	r3, #34	; 0x22
 800d434:	f04f 0a00 	mov.w	sl, #0
 800d438:	f04f 0b00 	mov.w	fp, #0
 800d43c:	6023      	str	r3, [r4, #0]
 800d43e:	e789      	b.n	800d354 <_strtod_l+0x4a4>
 800d440:	08010a5d 	.word	0x08010a5d
 800d444:	08010aa0 	.word	0x08010aa0
 800d448:	08010a55 	.word	0x08010a55
 800d44c:	08010ae3 	.word	0x08010ae3
 800d450:	08010e00 	.word	0x08010e00
 800d454:	08010ce0 	.word	0x08010ce0
 800d458:	08010cb8 	.word	0x08010cb8
 800d45c:	7ff00000 	.word	0x7ff00000
 800d460:	7ca00000 	.word	0x7ca00000
 800d464:	7fefffff 	.word	0x7fefffff
 800d468:	f018 0310 	ands.w	r3, r8, #16
 800d46c:	bf18      	it	ne
 800d46e:	236a      	movne	r3, #106	; 0x6a
 800d470:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800d828 <_strtod_l+0x978>
 800d474:	9304      	str	r3, [sp, #16]
 800d476:	4650      	mov	r0, sl
 800d478:	4659      	mov	r1, fp
 800d47a:	2300      	movs	r3, #0
 800d47c:	f018 0f01 	tst.w	r8, #1
 800d480:	d004      	beq.n	800d48c <_strtod_l+0x5dc>
 800d482:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d486:	f7f3 f8c7 	bl	8000618 <__aeabi_dmul>
 800d48a:	2301      	movs	r3, #1
 800d48c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d490:	f109 0908 	add.w	r9, r9, #8
 800d494:	d1f2      	bne.n	800d47c <_strtod_l+0x5cc>
 800d496:	b10b      	cbz	r3, 800d49c <_strtod_l+0x5ec>
 800d498:	4682      	mov	sl, r0
 800d49a:	468b      	mov	fp, r1
 800d49c:	9b04      	ldr	r3, [sp, #16]
 800d49e:	b1bb      	cbz	r3, 800d4d0 <_strtod_l+0x620>
 800d4a0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800d4a4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	4659      	mov	r1, fp
 800d4ac:	dd10      	ble.n	800d4d0 <_strtod_l+0x620>
 800d4ae:	2b1f      	cmp	r3, #31
 800d4b0:	f340 8128 	ble.w	800d704 <_strtod_l+0x854>
 800d4b4:	2b34      	cmp	r3, #52	; 0x34
 800d4b6:	bfde      	ittt	le
 800d4b8:	3b20      	suble	r3, #32
 800d4ba:	f04f 32ff 	movle.w	r2, #4294967295
 800d4be:	fa02 f303 	lslle.w	r3, r2, r3
 800d4c2:	f04f 0a00 	mov.w	sl, #0
 800d4c6:	bfcc      	ite	gt
 800d4c8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d4cc:	ea03 0b01 	andle.w	fp, r3, r1
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	4650      	mov	r0, sl
 800d4d6:	4659      	mov	r1, fp
 800d4d8:	f7f3 fb06 	bl	8000ae8 <__aeabi_dcmpeq>
 800d4dc:	2800      	cmp	r0, #0
 800d4de:	d1a4      	bne.n	800d42a <_strtod_l+0x57a>
 800d4e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4e2:	9300      	str	r3, [sp, #0]
 800d4e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d4e6:	462b      	mov	r3, r5
 800d4e8:	463a      	mov	r2, r7
 800d4ea:	4620      	mov	r0, r4
 800d4ec:	f002 f948 	bl	800f780 <__s2b>
 800d4f0:	9009      	str	r0, [sp, #36]	; 0x24
 800d4f2:	2800      	cmp	r0, #0
 800d4f4:	f43f af24 	beq.w	800d340 <_strtod_l+0x490>
 800d4f8:	9b07      	ldr	r3, [sp, #28]
 800d4fa:	1b9e      	subs	r6, r3, r6
 800d4fc:	9b08      	ldr	r3, [sp, #32]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	bfb4      	ite	lt
 800d502:	4633      	movlt	r3, r6
 800d504:	2300      	movge	r3, #0
 800d506:	9310      	str	r3, [sp, #64]	; 0x40
 800d508:	9b08      	ldr	r3, [sp, #32]
 800d50a:	2500      	movs	r5, #0
 800d50c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d510:	9318      	str	r3, [sp, #96]	; 0x60
 800d512:	462e      	mov	r6, r5
 800d514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d516:	4620      	mov	r0, r4
 800d518:	6859      	ldr	r1, [r3, #4]
 800d51a:	f002 f885 	bl	800f628 <_Balloc>
 800d51e:	9007      	str	r0, [sp, #28]
 800d520:	2800      	cmp	r0, #0
 800d522:	f43f af11 	beq.w	800d348 <_strtod_l+0x498>
 800d526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d528:	691a      	ldr	r2, [r3, #16]
 800d52a:	3202      	adds	r2, #2
 800d52c:	f103 010c 	add.w	r1, r3, #12
 800d530:	0092      	lsls	r2, r2, #2
 800d532:	300c      	adds	r0, #12
 800d534:	f002 f86a 	bl	800f60c <memcpy>
 800d538:	ec4b ab10 	vmov	d0, sl, fp
 800d53c:	aa20      	add	r2, sp, #128	; 0x80
 800d53e:	a91f      	add	r1, sp, #124	; 0x7c
 800d540:	4620      	mov	r0, r4
 800d542:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800d546:	f002 fc57 	bl	800fdf8 <__d2b>
 800d54a:	901e      	str	r0, [sp, #120]	; 0x78
 800d54c:	2800      	cmp	r0, #0
 800d54e:	f43f aefb 	beq.w	800d348 <_strtod_l+0x498>
 800d552:	2101      	movs	r1, #1
 800d554:	4620      	mov	r0, r4
 800d556:	f002 f9ad 	bl	800f8b4 <__i2b>
 800d55a:	4606      	mov	r6, r0
 800d55c:	2800      	cmp	r0, #0
 800d55e:	f43f aef3 	beq.w	800d348 <_strtod_l+0x498>
 800d562:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d564:	9904      	ldr	r1, [sp, #16]
 800d566:	2b00      	cmp	r3, #0
 800d568:	bfab      	itete	ge
 800d56a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800d56c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800d56e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800d570:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800d574:	bfac      	ite	ge
 800d576:	eb03 0902 	addge.w	r9, r3, r2
 800d57a:	1ad7      	sublt	r7, r2, r3
 800d57c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d57e:	eba3 0801 	sub.w	r8, r3, r1
 800d582:	4490      	add	r8, r2
 800d584:	4ba3      	ldr	r3, [pc, #652]	; (800d814 <_strtod_l+0x964>)
 800d586:	f108 38ff 	add.w	r8, r8, #4294967295
 800d58a:	4598      	cmp	r8, r3
 800d58c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d590:	f280 80cc 	bge.w	800d72c <_strtod_l+0x87c>
 800d594:	eba3 0308 	sub.w	r3, r3, r8
 800d598:	2b1f      	cmp	r3, #31
 800d59a:	eba2 0203 	sub.w	r2, r2, r3
 800d59e:	f04f 0101 	mov.w	r1, #1
 800d5a2:	f300 80b6 	bgt.w	800d712 <_strtod_l+0x862>
 800d5a6:	fa01 f303 	lsl.w	r3, r1, r3
 800d5aa:	9311      	str	r3, [sp, #68]	; 0x44
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	930c      	str	r3, [sp, #48]	; 0x30
 800d5b0:	eb09 0802 	add.w	r8, r9, r2
 800d5b4:	9b04      	ldr	r3, [sp, #16]
 800d5b6:	45c1      	cmp	r9, r8
 800d5b8:	4417      	add	r7, r2
 800d5ba:	441f      	add	r7, r3
 800d5bc:	464b      	mov	r3, r9
 800d5be:	bfa8      	it	ge
 800d5c0:	4643      	movge	r3, r8
 800d5c2:	42bb      	cmp	r3, r7
 800d5c4:	bfa8      	it	ge
 800d5c6:	463b      	movge	r3, r7
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	bfc2      	ittt	gt
 800d5cc:	eba8 0803 	subgt.w	r8, r8, r3
 800d5d0:	1aff      	subgt	r7, r7, r3
 800d5d2:	eba9 0903 	subgt.w	r9, r9, r3
 800d5d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	dd17      	ble.n	800d60c <_strtod_l+0x75c>
 800d5dc:	4631      	mov	r1, r6
 800d5de:	461a      	mov	r2, r3
 800d5e0:	4620      	mov	r0, r4
 800d5e2:	f002 fa23 	bl	800fa2c <__pow5mult>
 800d5e6:	4606      	mov	r6, r0
 800d5e8:	2800      	cmp	r0, #0
 800d5ea:	f43f aead 	beq.w	800d348 <_strtod_l+0x498>
 800d5ee:	4601      	mov	r1, r0
 800d5f0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d5f2:	4620      	mov	r0, r4
 800d5f4:	f002 f974 	bl	800f8e0 <__multiply>
 800d5f8:	900f      	str	r0, [sp, #60]	; 0x3c
 800d5fa:	2800      	cmp	r0, #0
 800d5fc:	f43f aea4 	beq.w	800d348 <_strtod_l+0x498>
 800d600:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d602:	4620      	mov	r0, r4
 800d604:	f002 f850 	bl	800f6a8 <_Bfree>
 800d608:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d60a:	931e      	str	r3, [sp, #120]	; 0x78
 800d60c:	f1b8 0f00 	cmp.w	r8, #0
 800d610:	f300 8091 	bgt.w	800d736 <_strtod_l+0x886>
 800d614:	9b08      	ldr	r3, [sp, #32]
 800d616:	2b00      	cmp	r3, #0
 800d618:	dd08      	ble.n	800d62c <_strtod_l+0x77c>
 800d61a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d61c:	9907      	ldr	r1, [sp, #28]
 800d61e:	4620      	mov	r0, r4
 800d620:	f002 fa04 	bl	800fa2c <__pow5mult>
 800d624:	9007      	str	r0, [sp, #28]
 800d626:	2800      	cmp	r0, #0
 800d628:	f43f ae8e 	beq.w	800d348 <_strtod_l+0x498>
 800d62c:	2f00      	cmp	r7, #0
 800d62e:	dd08      	ble.n	800d642 <_strtod_l+0x792>
 800d630:	9907      	ldr	r1, [sp, #28]
 800d632:	463a      	mov	r2, r7
 800d634:	4620      	mov	r0, r4
 800d636:	f002 fa53 	bl	800fae0 <__lshift>
 800d63a:	9007      	str	r0, [sp, #28]
 800d63c:	2800      	cmp	r0, #0
 800d63e:	f43f ae83 	beq.w	800d348 <_strtod_l+0x498>
 800d642:	f1b9 0f00 	cmp.w	r9, #0
 800d646:	dd08      	ble.n	800d65a <_strtod_l+0x7aa>
 800d648:	4631      	mov	r1, r6
 800d64a:	464a      	mov	r2, r9
 800d64c:	4620      	mov	r0, r4
 800d64e:	f002 fa47 	bl	800fae0 <__lshift>
 800d652:	4606      	mov	r6, r0
 800d654:	2800      	cmp	r0, #0
 800d656:	f43f ae77 	beq.w	800d348 <_strtod_l+0x498>
 800d65a:	9a07      	ldr	r2, [sp, #28]
 800d65c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d65e:	4620      	mov	r0, r4
 800d660:	f002 fac6 	bl	800fbf0 <__mdiff>
 800d664:	4605      	mov	r5, r0
 800d666:	2800      	cmp	r0, #0
 800d668:	f43f ae6e 	beq.w	800d348 <_strtod_l+0x498>
 800d66c:	68c3      	ldr	r3, [r0, #12]
 800d66e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d670:	2300      	movs	r3, #0
 800d672:	60c3      	str	r3, [r0, #12]
 800d674:	4631      	mov	r1, r6
 800d676:	f002 fa9f 	bl	800fbb8 <__mcmp>
 800d67a:	2800      	cmp	r0, #0
 800d67c:	da65      	bge.n	800d74a <_strtod_l+0x89a>
 800d67e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d680:	ea53 030a 	orrs.w	r3, r3, sl
 800d684:	f040 8087 	bne.w	800d796 <_strtod_l+0x8e6>
 800d688:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	f040 8082 	bne.w	800d796 <_strtod_l+0x8e6>
 800d692:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d696:	0d1b      	lsrs	r3, r3, #20
 800d698:	051b      	lsls	r3, r3, #20
 800d69a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d69e:	d97a      	bls.n	800d796 <_strtod_l+0x8e6>
 800d6a0:	696b      	ldr	r3, [r5, #20]
 800d6a2:	b913      	cbnz	r3, 800d6aa <_strtod_l+0x7fa>
 800d6a4:	692b      	ldr	r3, [r5, #16]
 800d6a6:	2b01      	cmp	r3, #1
 800d6a8:	dd75      	ble.n	800d796 <_strtod_l+0x8e6>
 800d6aa:	4629      	mov	r1, r5
 800d6ac:	2201      	movs	r2, #1
 800d6ae:	4620      	mov	r0, r4
 800d6b0:	f002 fa16 	bl	800fae0 <__lshift>
 800d6b4:	4631      	mov	r1, r6
 800d6b6:	4605      	mov	r5, r0
 800d6b8:	f002 fa7e 	bl	800fbb8 <__mcmp>
 800d6bc:	2800      	cmp	r0, #0
 800d6be:	dd6a      	ble.n	800d796 <_strtod_l+0x8e6>
 800d6c0:	9904      	ldr	r1, [sp, #16]
 800d6c2:	4a55      	ldr	r2, [pc, #340]	; (800d818 <_strtod_l+0x968>)
 800d6c4:	465b      	mov	r3, fp
 800d6c6:	2900      	cmp	r1, #0
 800d6c8:	f000 8085 	beq.w	800d7d6 <_strtod_l+0x926>
 800d6cc:	ea02 010b 	and.w	r1, r2, fp
 800d6d0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d6d4:	dc7f      	bgt.n	800d7d6 <_strtod_l+0x926>
 800d6d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d6da:	f77f aeaa 	ble.w	800d432 <_strtod_l+0x582>
 800d6de:	4a4f      	ldr	r2, [pc, #316]	; (800d81c <_strtod_l+0x96c>)
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800d6e6:	4650      	mov	r0, sl
 800d6e8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800d6ec:	4659      	mov	r1, fp
 800d6ee:	f7f2 ff93 	bl	8000618 <__aeabi_dmul>
 800d6f2:	460b      	mov	r3, r1
 800d6f4:	4303      	orrs	r3, r0
 800d6f6:	bf08      	it	eq
 800d6f8:	2322      	moveq	r3, #34	; 0x22
 800d6fa:	4682      	mov	sl, r0
 800d6fc:	468b      	mov	fp, r1
 800d6fe:	bf08      	it	eq
 800d700:	6023      	streq	r3, [r4, #0]
 800d702:	e62b      	b.n	800d35c <_strtod_l+0x4ac>
 800d704:	f04f 32ff 	mov.w	r2, #4294967295
 800d708:	fa02 f303 	lsl.w	r3, r2, r3
 800d70c:	ea03 0a0a 	and.w	sl, r3, sl
 800d710:	e6de      	b.n	800d4d0 <_strtod_l+0x620>
 800d712:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d716:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d71a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d71e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d722:	fa01 f308 	lsl.w	r3, r1, r8
 800d726:	930c      	str	r3, [sp, #48]	; 0x30
 800d728:	9111      	str	r1, [sp, #68]	; 0x44
 800d72a:	e741      	b.n	800d5b0 <_strtod_l+0x700>
 800d72c:	2300      	movs	r3, #0
 800d72e:	930c      	str	r3, [sp, #48]	; 0x30
 800d730:	2301      	movs	r3, #1
 800d732:	9311      	str	r3, [sp, #68]	; 0x44
 800d734:	e73c      	b.n	800d5b0 <_strtod_l+0x700>
 800d736:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d738:	4642      	mov	r2, r8
 800d73a:	4620      	mov	r0, r4
 800d73c:	f002 f9d0 	bl	800fae0 <__lshift>
 800d740:	901e      	str	r0, [sp, #120]	; 0x78
 800d742:	2800      	cmp	r0, #0
 800d744:	f47f af66 	bne.w	800d614 <_strtod_l+0x764>
 800d748:	e5fe      	b.n	800d348 <_strtod_l+0x498>
 800d74a:	465f      	mov	r7, fp
 800d74c:	d16e      	bne.n	800d82c <_strtod_l+0x97c>
 800d74e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d750:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d754:	b342      	cbz	r2, 800d7a8 <_strtod_l+0x8f8>
 800d756:	4a32      	ldr	r2, [pc, #200]	; (800d820 <_strtod_l+0x970>)
 800d758:	4293      	cmp	r3, r2
 800d75a:	d128      	bne.n	800d7ae <_strtod_l+0x8fe>
 800d75c:	9b04      	ldr	r3, [sp, #16]
 800d75e:	4650      	mov	r0, sl
 800d760:	b1eb      	cbz	r3, 800d79e <_strtod_l+0x8ee>
 800d762:	4a2d      	ldr	r2, [pc, #180]	; (800d818 <_strtod_l+0x968>)
 800d764:	403a      	ands	r2, r7
 800d766:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800d76a:	f04f 31ff 	mov.w	r1, #4294967295
 800d76e:	d819      	bhi.n	800d7a4 <_strtod_l+0x8f4>
 800d770:	0d12      	lsrs	r2, r2, #20
 800d772:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d776:	fa01 f303 	lsl.w	r3, r1, r3
 800d77a:	4298      	cmp	r0, r3
 800d77c:	d117      	bne.n	800d7ae <_strtod_l+0x8fe>
 800d77e:	4b29      	ldr	r3, [pc, #164]	; (800d824 <_strtod_l+0x974>)
 800d780:	429f      	cmp	r7, r3
 800d782:	d102      	bne.n	800d78a <_strtod_l+0x8da>
 800d784:	3001      	adds	r0, #1
 800d786:	f43f addf 	beq.w	800d348 <_strtod_l+0x498>
 800d78a:	4b23      	ldr	r3, [pc, #140]	; (800d818 <_strtod_l+0x968>)
 800d78c:	403b      	ands	r3, r7
 800d78e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d792:	f04f 0a00 	mov.w	sl, #0
 800d796:	9b04      	ldr	r3, [sp, #16]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d1a0      	bne.n	800d6de <_strtod_l+0x82e>
 800d79c:	e5de      	b.n	800d35c <_strtod_l+0x4ac>
 800d79e:	f04f 33ff 	mov.w	r3, #4294967295
 800d7a2:	e7ea      	b.n	800d77a <_strtod_l+0x8ca>
 800d7a4:	460b      	mov	r3, r1
 800d7a6:	e7e8      	b.n	800d77a <_strtod_l+0x8ca>
 800d7a8:	ea53 030a 	orrs.w	r3, r3, sl
 800d7ac:	d088      	beq.n	800d6c0 <_strtod_l+0x810>
 800d7ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d7b0:	b1db      	cbz	r3, 800d7ea <_strtod_l+0x93a>
 800d7b2:	423b      	tst	r3, r7
 800d7b4:	d0ef      	beq.n	800d796 <_strtod_l+0x8e6>
 800d7b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d7b8:	9a04      	ldr	r2, [sp, #16]
 800d7ba:	4650      	mov	r0, sl
 800d7bc:	4659      	mov	r1, fp
 800d7be:	b1c3      	cbz	r3, 800d7f2 <_strtod_l+0x942>
 800d7c0:	f7ff fb57 	bl	800ce72 <sulp>
 800d7c4:	4602      	mov	r2, r0
 800d7c6:	460b      	mov	r3, r1
 800d7c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d7cc:	f7f2 fd6e 	bl	80002ac <__adddf3>
 800d7d0:	4682      	mov	sl, r0
 800d7d2:	468b      	mov	fp, r1
 800d7d4:	e7df      	b.n	800d796 <_strtod_l+0x8e6>
 800d7d6:	4013      	ands	r3, r2
 800d7d8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d7dc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d7e0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d7e4:	f04f 3aff 	mov.w	sl, #4294967295
 800d7e8:	e7d5      	b.n	800d796 <_strtod_l+0x8e6>
 800d7ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d7ec:	ea13 0f0a 	tst.w	r3, sl
 800d7f0:	e7e0      	b.n	800d7b4 <_strtod_l+0x904>
 800d7f2:	f7ff fb3e 	bl	800ce72 <sulp>
 800d7f6:	4602      	mov	r2, r0
 800d7f8:	460b      	mov	r3, r1
 800d7fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d7fe:	f7f2 fd53 	bl	80002a8 <__aeabi_dsub>
 800d802:	2200      	movs	r2, #0
 800d804:	2300      	movs	r3, #0
 800d806:	4682      	mov	sl, r0
 800d808:	468b      	mov	fp, r1
 800d80a:	f7f3 f96d 	bl	8000ae8 <__aeabi_dcmpeq>
 800d80e:	2800      	cmp	r0, #0
 800d810:	d0c1      	beq.n	800d796 <_strtod_l+0x8e6>
 800d812:	e60e      	b.n	800d432 <_strtod_l+0x582>
 800d814:	fffffc02 	.word	0xfffffc02
 800d818:	7ff00000 	.word	0x7ff00000
 800d81c:	39500000 	.word	0x39500000
 800d820:	000fffff 	.word	0x000fffff
 800d824:	7fefffff 	.word	0x7fefffff
 800d828:	08010ab8 	.word	0x08010ab8
 800d82c:	4631      	mov	r1, r6
 800d82e:	4628      	mov	r0, r5
 800d830:	f002 fb3e 	bl	800feb0 <__ratio>
 800d834:	ec59 8b10 	vmov	r8, r9, d0
 800d838:	ee10 0a10 	vmov	r0, s0
 800d83c:	2200      	movs	r2, #0
 800d83e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d842:	4649      	mov	r1, r9
 800d844:	f7f3 f964 	bl	8000b10 <__aeabi_dcmple>
 800d848:	2800      	cmp	r0, #0
 800d84a:	d07c      	beq.n	800d946 <_strtod_l+0xa96>
 800d84c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d04c      	beq.n	800d8ec <_strtod_l+0xa3c>
 800d852:	4b95      	ldr	r3, [pc, #596]	; (800daa8 <_strtod_l+0xbf8>)
 800d854:	2200      	movs	r2, #0
 800d856:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d85a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800daa8 <_strtod_l+0xbf8>
 800d85e:	f04f 0800 	mov.w	r8, #0
 800d862:	4b92      	ldr	r3, [pc, #584]	; (800daac <_strtod_l+0xbfc>)
 800d864:	403b      	ands	r3, r7
 800d866:	9311      	str	r3, [sp, #68]	; 0x44
 800d868:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d86a:	4b91      	ldr	r3, [pc, #580]	; (800dab0 <_strtod_l+0xc00>)
 800d86c:	429a      	cmp	r2, r3
 800d86e:	f040 80b2 	bne.w	800d9d6 <_strtod_l+0xb26>
 800d872:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d876:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d87a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d87e:	ec4b ab10 	vmov	d0, sl, fp
 800d882:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800d886:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d88a:	f002 fa39 	bl	800fd00 <__ulp>
 800d88e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d892:	ec53 2b10 	vmov	r2, r3, d0
 800d896:	f7f2 febf 	bl	8000618 <__aeabi_dmul>
 800d89a:	4652      	mov	r2, sl
 800d89c:	465b      	mov	r3, fp
 800d89e:	f7f2 fd05 	bl	80002ac <__adddf3>
 800d8a2:	460b      	mov	r3, r1
 800d8a4:	4981      	ldr	r1, [pc, #516]	; (800daac <_strtod_l+0xbfc>)
 800d8a6:	4a83      	ldr	r2, [pc, #524]	; (800dab4 <_strtod_l+0xc04>)
 800d8a8:	4019      	ands	r1, r3
 800d8aa:	4291      	cmp	r1, r2
 800d8ac:	4682      	mov	sl, r0
 800d8ae:	d95e      	bls.n	800d96e <_strtod_l+0xabe>
 800d8b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8b2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	d103      	bne.n	800d8c2 <_strtod_l+0xa12>
 800d8ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8bc:	3301      	adds	r3, #1
 800d8be:	f43f ad43 	beq.w	800d348 <_strtod_l+0x498>
 800d8c2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800dac0 <_strtod_l+0xc10>
 800d8c6:	f04f 3aff 	mov.w	sl, #4294967295
 800d8ca:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d8cc:	4620      	mov	r0, r4
 800d8ce:	f001 feeb 	bl	800f6a8 <_Bfree>
 800d8d2:	9907      	ldr	r1, [sp, #28]
 800d8d4:	4620      	mov	r0, r4
 800d8d6:	f001 fee7 	bl	800f6a8 <_Bfree>
 800d8da:	4631      	mov	r1, r6
 800d8dc:	4620      	mov	r0, r4
 800d8de:	f001 fee3 	bl	800f6a8 <_Bfree>
 800d8e2:	4629      	mov	r1, r5
 800d8e4:	4620      	mov	r0, r4
 800d8e6:	f001 fedf 	bl	800f6a8 <_Bfree>
 800d8ea:	e613      	b.n	800d514 <_strtod_l+0x664>
 800d8ec:	f1ba 0f00 	cmp.w	sl, #0
 800d8f0:	d11b      	bne.n	800d92a <_strtod_l+0xa7a>
 800d8f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d8f6:	b9f3      	cbnz	r3, 800d936 <_strtod_l+0xa86>
 800d8f8:	4b6b      	ldr	r3, [pc, #428]	; (800daa8 <_strtod_l+0xbf8>)
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	4640      	mov	r0, r8
 800d8fe:	4649      	mov	r1, r9
 800d900:	f7f3 f8fc 	bl	8000afc <__aeabi_dcmplt>
 800d904:	b9d0      	cbnz	r0, 800d93c <_strtod_l+0xa8c>
 800d906:	4640      	mov	r0, r8
 800d908:	4649      	mov	r1, r9
 800d90a:	4b6b      	ldr	r3, [pc, #428]	; (800dab8 <_strtod_l+0xc08>)
 800d90c:	2200      	movs	r2, #0
 800d90e:	f7f2 fe83 	bl	8000618 <__aeabi_dmul>
 800d912:	4680      	mov	r8, r0
 800d914:	4689      	mov	r9, r1
 800d916:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d91a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800d91e:	931b      	str	r3, [sp, #108]	; 0x6c
 800d920:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800d924:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d928:	e79b      	b.n	800d862 <_strtod_l+0x9b2>
 800d92a:	f1ba 0f01 	cmp.w	sl, #1
 800d92e:	d102      	bne.n	800d936 <_strtod_l+0xa86>
 800d930:	2f00      	cmp	r7, #0
 800d932:	f43f ad7e 	beq.w	800d432 <_strtod_l+0x582>
 800d936:	4b61      	ldr	r3, [pc, #388]	; (800dabc <_strtod_l+0xc0c>)
 800d938:	2200      	movs	r2, #0
 800d93a:	e78c      	b.n	800d856 <_strtod_l+0x9a6>
 800d93c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800dab8 <_strtod_l+0xc08>
 800d940:	f04f 0800 	mov.w	r8, #0
 800d944:	e7e7      	b.n	800d916 <_strtod_l+0xa66>
 800d946:	4b5c      	ldr	r3, [pc, #368]	; (800dab8 <_strtod_l+0xc08>)
 800d948:	4640      	mov	r0, r8
 800d94a:	4649      	mov	r1, r9
 800d94c:	2200      	movs	r2, #0
 800d94e:	f7f2 fe63 	bl	8000618 <__aeabi_dmul>
 800d952:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d954:	4680      	mov	r8, r0
 800d956:	4689      	mov	r9, r1
 800d958:	b933      	cbnz	r3, 800d968 <_strtod_l+0xab8>
 800d95a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d95e:	9012      	str	r0, [sp, #72]	; 0x48
 800d960:	9313      	str	r3, [sp, #76]	; 0x4c
 800d962:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800d966:	e7dd      	b.n	800d924 <_strtod_l+0xa74>
 800d968:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800d96c:	e7f9      	b.n	800d962 <_strtod_l+0xab2>
 800d96e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d972:	9b04      	ldr	r3, [sp, #16]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d1a8      	bne.n	800d8ca <_strtod_l+0xa1a>
 800d978:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d97c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d97e:	0d1b      	lsrs	r3, r3, #20
 800d980:	051b      	lsls	r3, r3, #20
 800d982:	429a      	cmp	r2, r3
 800d984:	d1a1      	bne.n	800d8ca <_strtod_l+0xa1a>
 800d986:	4640      	mov	r0, r8
 800d988:	4649      	mov	r1, r9
 800d98a:	f7f3 f9a5 	bl	8000cd8 <__aeabi_d2lz>
 800d98e:	f7f2 fe15 	bl	80005bc <__aeabi_l2d>
 800d992:	4602      	mov	r2, r0
 800d994:	460b      	mov	r3, r1
 800d996:	4640      	mov	r0, r8
 800d998:	4649      	mov	r1, r9
 800d99a:	f7f2 fc85 	bl	80002a8 <__aeabi_dsub>
 800d99e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d9a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d9a4:	ea43 030a 	orr.w	r3, r3, sl
 800d9a8:	4313      	orrs	r3, r2
 800d9aa:	4680      	mov	r8, r0
 800d9ac:	4689      	mov	r9, r1
 800d9ae:	d053      	beq.n	800da58 <_strtod_l+0xba8>
 800d9b0:	a335      	add	r3, pc, #212	; (adr r3, 800da88 <_strtod_l+0xbd8>)
 800d9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b6:	f7f3 f8a1 	bl	8000afc <__aeabi_dcmplt>
 800d9ba:	2800      	cmp	r0, #0
 800d9bc:	f47f acce 	bne.w	800d35c <_strtod_l+0x4ac>
 800d9c0:	a333      	add	r3, pc, #204	; (adr r3, 800da90 <_strtod_l+0xbe0>)
 800d9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c6:	4640      	mov	r0, r8
 800d9c8:	4649      	mov	r1, r9
 800d9ca:	f7f3 f8b5 	bl	8000b38 <__aeabi_dcmpgt>
 800d9ce:	2800      	cmp	r0, #0
 800d9d0:	f43f af7b 	beq.w	800d8ca <_strtod_l+0xa1a>
 800d9d4:	e4c2      	b.n	800d35c <_strtod_l+0x4ac>
 800d9d6:	9b04      	ldr	r3, [sp, #16]
 800d9d8:	b333      	cbz	r3, 800da28 <_strtod_l+0xb78>
 800d9da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d9dc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d9e0:	d822      	bhi.n	800da28 <_strtod_l+0xb78>
 800d9e2:	a32d      	add	r3, pc, #180	; (adr r3, 800da98 <_strtod_l+0xbe8>)
 800d9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e8:	4640      	mov	r0, r8
 800d9ea:	4649      	mov	r1, r9
 800d9ec:	f7f3 f890 	bl	8000b10 <__aeabi_dcmple>
 800d9f0:	b1a0      	cbz	r0, 800da1c <_strtod_l+0xb6c>
 800d9f2:	4649      	mov	r1, r9
 800d9f4:	4640      	mov	r0, r8
 800d9f6:	f7f3 f8e7 	bl	8000bc8 <__aeabi_d2uiz>
 800d9fa:	2801      	cmp	r0, #1
 800d9fc:	bf38      	it	cc
 800d9fe:	2001      	movcc	r0, #1
 800da00:	f7f2 fd90 	bl	8000524 <__aeabi_ui2d>
 800da04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800da06:	4680      	mov	r8, r0
 800da08:	4689      	mov	r9, r1
 800da0a:	bb13      	cbnz	r3, 800da52 <_strtod_l+0xba2>
 800da0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800da10:	9014      	str	r0, [sp, #80]	; 0x50
 800da12:	9315      	str	r3, [sp, #84]	; 0x54
 800da14:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800da18:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800da1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800da20:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800da24:	1a9b      	subs	r3, r3, r2
 800da26:	930d      	str	r3, [sp, #52]	; 0x34
 800da28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800da2c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800da30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800da34:	f002 f964 	bl	800fd00 <__ulp>
 800da38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800da3c:	ec53 2b10 	vmov	r2, r3, d0
 800da40:	f7f2 fdea 	bl	8000618 <__aeabi_dmul>
 800da44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800da48:	f7f2 fc30 	bl	80002ac <__adddf3>
 800da4c:	4682      	mov	sl, r0
 800da4e:	468b      	mov	fp, r1
 800da50:	e78f      	b.n	800d972 <_strtod_l+0xac2>
 800da52:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800da56:	e7dd      	b.n	800da14 <_strtod_l+0xb64>
 800da58:	a311      	add	r3, pc, #68	; (adr r3, 800daa0 <_strtod_l+0xbf0>)
 800da5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da5e:	f7f3 f84d 	bl	8000afc <__aeabi_dcmplt>
 800da62:	e7b4      	b.n	800d9ce <_strtod_l+0xb1e>
 800da64:	2300      	movs	r3, #0
 800da66:	930e      	str	r3, [sp, #56]	; 0x38
 800da68:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800da6a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800da6c:	6013      	str	r3, [r2, #0]
 800da6e:	f7ff ba65 	b.w	800cf3c <_strtod_l+0x8c>
 800da72:	2b65      	cmp	r3, #101	; 0x65
 800da74:	f43f ab5d 	beq.w	800d132 <_strtod_l+0x282>
 800da78:	2b45      	cmp	r3, #69	; 0x45
 800da7a:	f43f ab5a 	beq.w	800d132 <_strtod_l+0x282>
 800da7e:	2201      	movs	r2, #1
 800da80:	f7ff bb92 	b.w	800d1a8 <_strtod_l+0x2f8>
 800da84:	f3af 8000 	nop.w
 800da88:	94a03595 	.word	0x94a03595
 800da8c:	3fdfffff 	.word	0x3fdfffff
 800da90:	35afe535 	.word	0x35afe535
 800da94:	3fe00000 	.word	0x3fe00000
 800da98:	ffc00000 	.word	0xffc00000
 800da9c:	41dfffff 	.word	0x41dfffff
 800daa0:	94a03595 	.word	0x94a03595
 800daa4:	3fcfffff 	.word	0x3fcfffff
 800daa8:	3ff00000 	.word	0x3ff00000
 800daac:	7ff00000 	.word	0x7ff00000
 800dab0:	7fe00000 	.word	0x7fe00000
 800dab4:	7c9fffff 	.word	0x7c9fffff
 800dab8:	3fe00000 	.word	0x3fe00000
 800dabc:	bff00000 	.word	0xbff00000
 800dac0:	7fefffff 	.word	0x7fefffff

0800dac4 <_strtod_r>:
 800dac4:	4b01      	ldr	r3, [pc, #4]	; (800dacc <_strtod_r+0x8>)
 800dac6:	f7ff b9f3 	b.w	800ceb0 <_strtod_l>
 800daca:	bf00      	nop
 800dacc:	20000200 	.word	0x20000200

0800dad0 <_strtol_l.isra.0>:
 800dad0:	2b01      	cmp	r3, #1
 800dad2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dad6:	d001      	beq.n	800dadc <_strtol_l.isra.0+0xc>
 800dad8:	2b24      	cmp	r3, #36	; 0x24
 800dada:	d906      	bls.n	800daea <_strtol_l.isra.0+0x1a>
 800dadc:	f7fe faa2 	bl	800c024 <__errno>
 800dae0:	2316      	movs	r3, #22
 800dae2:	6003      	str	r3, [r0, #0]
 800dae4:	2000      	movs	r0, #0
 800dae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daea:	4f3a      	ldr	r7, [pc, #232]	; (800dbd4 <_strtol_l.isra.0+0x104>)
 800daec:	468e      	mov	lr, r1
 800daee:	4676      	mov	r6, lr
 800daf0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800daf4:	5de5      	ldrb	r5, [r4, r7]
 800daf6:	f015 0508 	ands.w	r5, r5, #8
 800dafa:	d1f8      	bne.n	800daee <_strtol_l.isra.0+0x1e>
 800dafc:	2c2d      	cmp	r4, #45	; 0x2d
 800dafe:	d134      	bne.n	800db6a <_strtol_l.isra.0+0x9a>
 800db00:	f89e 4000 	ldrb.w	r4, [lr]
 800db04:	f04f 0801 	mov.w	r8, #1
 800db08:	f106 0e02 	add.w	lr, r6, #2
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d05c      	beq.n	800dbca <_strtol_l.isra.0+0xfa>
 800db10:	2b10      	cmp	r3, #16
 800db12:	d10c      	bne.n	800db2e <_strtol_l.isra.0+0x5e>
 800db14:	2c30      	cmp	r4, #48	; 0x30
 800db16:	d10a      	bne.n	800db2e <_strtol_l.isra.0+0x5e>
 800db18:	f89e 4000 	ldrb.w	r4, [lr]
 800db1c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800db20:	2c58      	cmp	r4, #88	; 0x58
 800db22:	d14d      	bne.n	800dbc0 <_strtol_l.isra.0+0xf0>
 800db24:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800db28:	2310      	movs	r3, #16
 800db2a:	f10e 0e02 	add.w	lr, lr, #2
 800db2e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800db32:	f10c 3cff 	add.w	ip, ip, #4294967295
 800db36:	2600      	movs	r6, #0
 800db38:	fbbc f9f3 	udiv	r9, ip, r3
 800db3c:	4635      	mov	r5, r6
 800db3e:	fb03 ca19 	mls	sl, r3, r9, ip
 800db42:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800db46:	2f09      	cmp	r7, #9
 800db48:	d818      	bhi.n	800db7c <_strtol_l.isra.0+0xac>
 800db4a:	463c      	mov	r4, r7
 800db4c:	42a3      	cmp	r3, r4
 800db4e:	dd24      	ble.n	800db9a <_strtol_l.isra.0+0xca>
 800db50:	2e00      	cmp	r6, #0
 800db52:	db1f      	blt.n	800db94 <_strtol_l.isra.0+0xc4>
 800db54:	45a9      	cmp	r9, r5
 800db56:	d31d      	bcc.n	800db94 <_strtol_l.isra.0+0xc4>
 800db58:	d101      	bne.n	800db5e <_strtol_l.isra.0+0x8e>
 800db5a:	45a2      	cmp	sl, r4
 800db5c:	db1a      	blt.n	800db94 <_strtol_l.isra.0+0xc4>
 800db5e:	fb05 4503 	mla	r5, r5, r3, r4
 800db62:	2601      	movs	r6, #1
 800db64:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800db68:	e7eb      	b.n	800db42 <_strtol_l.isra.0+0x72>
 800db6a:	2c2b      	cmp	r4, #43	; 0x2b
 800db6c:	bf08      	it	eq
 800db6e:	f89e 4000 	ldrbeq.w	r4, [lr]
 800db72:	46a8      	mov	r8, r5
 800db74:	bf08      	it	eq
 800db76:	f106 0e02 	addeq.w	lr, r6, #2
 800db7a:	e7c7      	b.n	800db0c <_strtol_l.isra.0+0x3c>
 800db7c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800db80:	2f19      	cmp	r7, #25
 800db82:	d801      	bhi.n	800db88 <_strtol_l.isra.0+0xb8>
 800db84:	3c37      	subs	r4, #55	; 0x37
 800db86:	e7e1      	b.n	800db4c <_strtol_l.isra.0+0x7c>
 800db88:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800db8c:	2f19      	cmp	r7, #25
 800db8e:	d804      	bhi.n	800db9a <_strtol_l.isra.0+0xca>
 800db90:	3c57      	subs	r4, #87	; 0x57
 800db92:	e7db      	b.n	800db4c <_strtol_l.isra.0+0x7c>
 800db94:	f04f 36ff 	mov.w	r6, #4294967295
 800db98:	e7e4      	b.n	800db64 <_strtol_l.isra.0+0x94>
 800db9a:	2e00      	cmp	r6, #0
 800db9c:	da05      	bge.n	800dbaa <_strtol_l.isra.0+0xda>
 800db9e:	2322      	movs	r3, #34	; 0x22
 800dba0:	6003      	str	r3, [r0, #0]
 800dba2:	4665      	mov	r5, ip
 800dba4:	b942      	cbnz	r2, 800dbb8 <_strtol_l.isra.0+0xe8>
 800dba6:	4628      	mov	r0, r5
 800dba8:	e79d      	b.n	800dae6 <_strtol_l.isra.0+0x16>
 800dbaa:	f1b8 0f00 	cmp.w	r8, #0
 800dbae:	d000      	beq.n	800dbb2 <_strtol_l.isra.0+0xe2>
 800dbb0:	426d      	negs	r5, r5
 800dbb2:	2a00      	cmp	r2, #0
 800dbb4:	d0f7      	beq.n	800dba6 <_strtol_l.isra.0+0xd6>
 800dbb6:	b10e      	cbz	r6, 800dbbc <_strtol_l.isra.0+0xec>
 800dbb8:	f10e 31ff 	add.w	r1, lr, #4294967295
 800dbbc:	6011      	str	r1, [r2, #0]
 800dbbe:	e7f2      	b.n	800dba6 <_strtol_l.isra.0+0xd6>
 800dbc0:	2430      	movs	r4, #48	; 0x30
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d1b3      	bne.n	800db2e <_strtol_l.isra.0+0x5e>
 800dbc6:	2308      	movs	r3, #8
 800dbc8:	e7b1      	b.n	800db2e <_strtol_l.isra.0+0x5e>
 800dbca:	2c30      	cmp	r4, #48	; 0x30
 800dbcc:	d0a4      	beq.n	800db18 <_strtol_l.isra.0+0x48>
 800dbce:	230a      	movs	r3, #10
 800dbd0:	e7ad      	b.n	800db2e <_strtol_l.isra.0+0x5e>
 800dbd2:	bf00      	nop
 800dbd4:	08010949 	.word	0x08010949

0800dbd8 <_strtol_r>:
 800dbd8:	f7ff bf7a 	b.w	800dad0 <_strtol_l.isra.0>

0800dbdc <__swbuf_r>:
 800dbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbde:	460e      	mov	r6, r1
 800dbe0:	4614      	mov	r4, r2
 800dbe2:	4605      	mov	r5, r0
 800dbe4:	b118      	cbz	r0, 800dbee <__swbuf_r+0x12>
 800dbe6:	6983      	ldr	r3, [r0, #24]
 800dbe8:	b90b      	cbnz	r3, 800dbee <__swbuf_r+0x12>
 800dbea:	f001 f86b 	bl	800ecc4 <__sinit>
 800dbee:	4b21      	ldr	r3, [pc, #132]	; (800dc74 <__swbuf_r+0x98>)
 800dbf0:	429c      	cmp	r4, r3
 800dbf2:	d12b      	bne.n	800dc4c <__swbuf_r+0x70>
 800dbf4:	686c      	ldr	r4, [r5, #4]
 800dbf6:	69a3      	ldr	r3, [r4, #24]
 800dbf8:	60a3      	str	r3, [r4, #8]
 800dbfa:	89a3      	ldrh	r3, [r4, #12]
 800dbfc:	071a      	lsls	r2, r3, #28
 800dbfe:	d52f      	bpl.n	800dc60 <__swbuf_r+0x84>
 800dc00:	6923      	ldr	r3, [r4, #16]
 800dc02:	b36b      	cbz	r3, 800dc60 <__swbuf_r+0x84>
 800dc04:	6923      	ldr	r3, [r4, #16]
 800dc06:	6820      	ldr	r0, [r4, #0]
 800dc08:	1ac0      	subs	r0, r0, r3
 800dc0a:	6963      	ldr	r3, [r4, #20]
 800dc0c:	b2f6      	uxtb	r6, r6
 800dc0e:	4283      	cmp	r3, r0
 800dc10:	4637      	mov	r7, r6
 800dc12:	dc04      	bgt.n	800dc1e <__swbuf_r+0x42>
 800dc14:	4621      	mov	r1, r4
 800dc16:	4628      	mov	r0, r5
 800dc18:	f000 ffc0 	bl	800eb9c <_fflush_r>
 800dc1c:	bb30      	cbnz	r0, 800dc6c <__swbuf_r+0x90>
 800dc1e:	68a3      	ldr	r3, [r4, #8]
 800dc20:	3b01      	subs	r3, #1
 800dc22:	60a3      	str	r3, [r4, #8]
 800dc24:	6823      	ldr	r3, [r4, #0]
 800dc26:	1c5a      	adds	r2, r3, #1
 800dc28:	6022      	str	r2, [r4, #0]
 800dc2a:	701e      	strb	r6, [r3, #0]
 800dc2c:	6963      	ldr	r3, [r4, #20]
 800dc2e:	3001      	adds	r0, #1
 800dc30:	4283      	cmp	r3, r0
 800dc32:	d004      	beq.n	800dc3e <__swbuf_r+0x62>
 800dc34:	89a3      	ldrh	r3, [r4, #12]
 800dc36:	07db      	lsls	r3, r3, #31
 800dc38:	d506      	bpl.n	800dc48 <__swbuf_r+0x6c>
 800dc3a:	2e0a      	cmp	r6, #10
 800dc3c:	d104      	bne.n	800dc48 <__swbuf_r+0x6c>
 800dc3e:	4621      	mov	r1, r4
 800dc40:	4628      	mov	r0, r5
 800dc42:	f000 ffab 	bl	800eb9c <_fflush_r>
 800dc46:	b988      	cbnz	r0, 800dc6c <__swbuf_r+0x90>
 800dc48:	4638      	mov	r0, r7
 800dc4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc4c:	4b0a      	ldr	r3, [pc, #40]	; (800dc78 <__swbuf_r+0x9c>)
 800dc4e:	429c      	cmp	r4, r3
 800dc50:	d101      	bne.n	800dc56 <__swbuf_r+0x7a>
 800dc52:	68ac      	ldr	r4, [r5, #8]
 800dc54:	e7cf      	b.n	800dbf6 <__swbuf_r+0x1a>
 800dc56:	4b09      	ldr	r3, [pc, #36]	; (800dc7c <__swbuf_r+0xa0>)
 800dc58:	429c      	cmp	r4, r3
 800dc5a:	bf08      	it	eq
 800dc5c:	68ec      	ldreq	r4, [r5, #12]
 800dc5e:	e7ca      	b.n	800dbf6 <__swbuf_r+0x1a>
 800dc60:	4621      	mov	r1, r4
 800dc62:	4628      	mov	r0, r5
 800dc64:	f000 f81e 	bl	800dca4 <__swsetup_r>
 800dc68:	2800      	cmp	r0, #0
 800dc6a:	d0cb      	beq.n	800dc04 <__swbuf_r+0x28>
 800dc6c:	f04f 37ff 	mov.w	r7, #4294967295
 800dc70:	e7ea      	b.n	800dc48 <__swbuf_r+0x6c>
 800dc72:	bf00      	nop
 800dc74:	08010b94 	.word	0x08010b94
 800dc78:	08010bb4 	.word	0x08010bb4
 800dc7c:	08010b74 	.word	0x08010b74

0800dc80 <_write_r>:
 800dc80:	b538      	push	{r3, r4, r5, lr}
 800dc82:	4d07      	ldr	r5, [pc, #28]	; (800dca0 <_write_r+0x20>)
 800dc84:	4604      	mov	r4, r0
 800dc86:	4608      	mov	r0, r1
 800dc88:	4611      	mov	r1, r2
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	602a      	str	r2, [r5, #0]
 800dc8e:	461a      	mov	r2, r3
 800dc90:	f7f4 fcfb 	bl	800268a <_write>
 800dc94:	1c43      	adds	r3, r0, #1
 800dc96:	d102      	bne.n	800dc9e <_write_r+0x1e>
 800dc98:	682b      	ldr	r3, [r5, #0]
 800dc9a:	b103      	cbz	r3, 800dc9e <_write_r+0x1e>
 800dc9c:	6023      	str	r3, [r4, #0]
 800dc9e:	bd38      	pop	{r3, r4, r5, pc}
 800dca0:	20002c24 	.word	0x20002c24

0800dca4 <__swsetup_r>:
 800dca4:	4b32      	ldr	r3, [pc, #200]	; (800dd70 <__swsetup_r+0xcc>)
 800dca6:	b570      	push	{r4, r5, r6, lr}
 800dca8:	681d      	ldr	r5, [r3, #0]
 800dcaa:	4606      	mov	r6, r0
 800dcac:	460c      	mov	r4, r1
 800dcae:	b125      	cbz	r5, 800dcba <__swsetup_r+0x16>
 800dcb0:	69ab      	ldr	r3, [r5, #24]
 800dcb2:	b913      	cbnz	r3, 800dcba <__swsetup_r+0x16>
 800dcb4:	4628      	mov	r0, r5
 800dcb6:	f001 f805 	bl	800ecc4 <__sinit>
 800dcba:	4b2e      	ldr	r3, [pc, #184]	; (800dd74 <__swsetup_r+0xd0>)
 800dcbc:	429c      	cmp	r4, r3
 800dcbe:	d10f      	bne.n	800dce0 <__swsetup_r+0x3c>
 800dcc0:	686c      	ldr	r4, [r5, #4]
 800dcc2:	89a3      	ldrh	r3, [r4, #12]
 800dcc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dcc8:	0719      	lsls	r1, r3, #28
 800dcca:	d42c      	bmi.n	800dd26 <__swsetup_r+0x82>
 800dccc:	06dd      	lsls	r5, r3, #27
 800dcce:	d411      	bmi.n	800dcf4 <__swsetup_r+0x50>
 800dcd0:	2309      	movs	r3, #9
 800dcd2:	6033      	str	r3, [r6, #0]
 800dcd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dcd8:	81a3      	strh	r3, [r4, #12]
 800dcda:	f04f 30ff 	mov.w	r0, #4294967295
 800dcde:	e03e      	b.n	800dd5e <__swsetup_r+0xba>
 800dce0:	4b25      	ldr	r3, [pc, #148]	; (800dd78 <__swsetup_r+0xd4>)
 800dce2:	429c      	cmp	r4, r3
 800dce4:	d101      	bne.n	800dcea <__swsetup_r+0x46>
 800dce6:	68ac      	ldr	r4, [r5, #8]
 800dce8:	e7eb      	b.n	800dcc2 <__swsetup_r+0x1e>
 800dcea:	4b24      	ldr	r3, [pc, #144]	; (800dd7c <__swsetup_r+0xd8>)
 800dcec:	429c      	cmp	r4, r3
 800dcee:	bf08      	it	eq
 800dcf0:	68ec      	ldreq	r4, [r5, #12]
 800dcf2:	e7e6      	b.n	800dcc2 <__swsetup_r+0x1e>
 800dcf4:	0758      	lsls	r0, r3, #29
 800dcf6:	d512      	bpl.n	800dd1e <__swsetup_r+0x7a>
 800dcf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dcfa:	b141      	cbz	r1, 800dd0e <__swsetup_r+0x6a>
 800dcfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd00:	4299      	cmp	r1, r3
 800dd02:	d002      	beq.n	800dd0a <__swsetup_r+0x66>
 800dd04:	4630      	mov	r0, r6
 800dd06:	f002 f959 	bl	800ffbc <_free_r>
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	6363      	str	r3, [r4, #52]	; 0x34
 800dd0e:	89a3      	ldrh	r3, [r4, #12]
 800dd10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dd14:	81a3      	strh	r3, [r4, #12]
 800dd16:	2300      	movs	r3, #0
 800dd18:	6063      	str	r3, [r4, #4]
 800dd1a:	6923      	ldr	r3, [r4, #16]
 800dd1c:	6023      	str	r3, [r4, #0]
 800dd1e:	89a3      	ldrh	r3, [r4, #12]
 800dd20:	f043 0308 	orr.w	r3, r3, #8
 800dd24:	81a3      	strh	r3, [r4, #12]
 800dd26:	6923      	ldr	r3, [r4, #16]
 800dd28:	b94b      	cbnz	r3, 800dd3e <__swsetup_r+0x9a>
 800dd2a:	89a3      	ldrh	r3, [r4, #12]
 800dd2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dd30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd34:	d003      	beq.n	800dd3e <__swsetup_r+0x9a>
 800dd36:	4621      	mov	r1, r4
 800dd38:	4630      	mov	r0, r6
 800dd3a:	f001 fc0d 	bl	800f558 <__smakebuf_r>
 800dd3e:	89a0      	ldrh	r0, [r4, #12]
 800dd40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dd44:	f010 0301 	ands.w	r3, r0, #1
 800dd48:	d00a      	beq.n	800dd60 <__swsetup_r+0xbc>
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	60a3      	str	r3, [r4, #8]
 800dd4e:	6963      	ldr	r3, [r4, #20]
 800dd50:	425b      	negs	r3, r3
 800dd52:	61a3      	str	r3, [r4, #24]
 800dd54:	6923      	ldr	r3, [r4, #16]
 800dd56:	b943      	cbnz	r3, 800dd6a <__swsetup_r+0xc6>
 800dd58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dd5c:	d1ba      	bne.n	800dcd4 <__swsetup_r+0x30>
 800dd5e:	bd70      	pop	{r4, r5, r6, pc}
 800dd60:	0781      	lsls	r1, r0, #30
 800dd62:	bf58      	it	pl
 800dd64:	6963      	ldrpl	r3, [r4, #20]
 800dd66:	60a3      	str	r3, [r4, #8]
 800dd68:	e7f4      	b.n	800dd54 <__swsetup_r+0xb0>
 800dd6a:	2000      	movs	r0, #0
 800dd6c:	e7f7      	b.n	800dd5e <__swsetup_r+0xba>
 800dd6e:	bf00      	nop
 800dd70:	20000198 	.word	0x20000198
 800dd74:	08010b94 	.word	0x08010b94
 800dd78:	08010bb4 	.word	0x08010bb4
 800dd7c:	08010b74 	.word	0x08010b74

0800dd80 <_close_r>:
 800dd80:	b538      	push	{r3, r4, r5, lr}
 800dd82:	4d06      	ldr	r5, [pc, #24]	; (800dd9c <_close_r+0x1c>)
 800dd84:	2300      	movs	r3, #0
 800dd86:	4604      	mov	r4, r0
 800dd88:	4608      	mov	r0, r1
 800dd8a:	602b      	str	r3, [r5, #0]
 800dd8c:	f7f4 fc99 	bl	80026c2 <_close>
 800dd90:	1c43      	adds	r3, r0, #1
 800dd92:	d102      	bne.n	800dd9a <_close_r+0x1a>
 800dd94:	682b      	ldr	r3, [r5, #0]
 800dd96:	b103      	cbz	r3, 800dd9a <_close_r+0x1a>
 800dd98:	6023      	str	r3, [r4, #0]
 800dd9a:	bd38      	pop	{r3, r4, r5, pc}
 800dd9c:	20002c24 	.word	0x20002c24

0800dda0 <quorem>:
 800dda0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dda4:	6903      	ldr	r3, [r0, #16]
 800dda6:	690c      	ldr	r4, [r1, #16]
 800dda8:	42a3      	cmp	r3, r4
 800ddaa:	4607      	mov	r7, r0
 800ddac:	f2c0 8081 	blt.w	800deb2 <quorem+0x112>
 800ddb0:	3c01      	subs	r4, #1
 800ddb2:	f101 0814 	add.w	r8, r1, #20
 800ddb6:	f100 0514 	add.w	r5, r0, #20
 800ddba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ddbe:	9301      	str	r3, [sp, #4]
 800ddc0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ddc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ddc8:	3301      	adds	r3, #1
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ddd0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ddd4:	fbb2 f6f3 	udiv	r6, r2, r3
 800ddd8:	d331      	bcc.n	800de3e <quorem+0x9e>
 800ddda:	f04f 0e00 	mov.w	lr, #0
 800ddde:	4640      	mov	r0, r8
 800dde0:	46ac      	mov	ip, r5
 800dde2:	46f2      	mov	sl, lr
 800dde4:	f850 2b04 	ldr.w	r2, [r0], #4
 800dde8:	b293      	uxth	r3, r2
 800ddea:	fb06 e303 	mla	r3, r6, r3, lr
 800ddee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ddf2:	b29b      	uxth	r3, r3
 800ddf4:	ebaa 0303 	sub.w	r3, sl, r3
 800ddf8:	0c12      	lsrs	r2, r2, #16
 800ddfa:	f8dc a000 	ldr.w	sl, [ip]
 800ddfe:	fb06 e202 	mla	r2, r6, r2, lr
 800de02:	fa13 f38a 	uxtah	r3, r3, sl
 800de06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800de0a:	fa1f fa82 	uxth.w	sl, r2
 800de0e:	f8dc 2000 	ldr.w	r2, [ip]
 800de12:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800de16:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800de1a:	b29b      	uxth	r3, r3
 800de1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de20:	4581      	cmp	r9, r0
 800de22:	f84c 3b04 	str.w	r3, [ip], #4
 800de26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800de2a:	d2db      	bcs.n	800dde4 <quorem+0x44>
 800de2c:	f855 300b 	ldr.w	r3, [r5, fp]
 800de30:	b92b      	cbnz	r3, 800de3e <quorem+0x9e>
 800de32:	9b01      	ldr	r3, [sp, #4]
 800de34:	3b04      	subs	r3, #4
 800de36:	429d      	cmp	r5, r3
 800de38:	461a      	mov	r2, r3
 800de3a:	d32e      	bcc.n	800de9a <quorem+0xfa>
 800de3c:	613c      	str	r4, [r7, #16]
 800de3e:	4638      	mov	r0, r7
 800de40:	f001 feba 	bl	800fbb8 <__mcmp>
 800de44:	2800      	cmp	r0, #0
 800de46:	db24      	blt.n	800de92 <quorem+0xf2>
 800de48:	3601      	adds	r6, #1
 800de4a:	4628      	mov	r0, r5
 800de4c:	f04f 0c00 	mov.w	ip, #0
 800de50:	f858 2b04 	ldr.w	r2, [r8], #4
 800de54:	f8d0 e000 	ldr.w	lr, [r0]
 800de58:	b293      	uxth	r3, r2
 800de5a:	ebac 0303 	sub.w	r3, ip, r3
 800de5e:	0c12      	lsrs	r2, r2, #16
 800de60:	fa13 f38e 	uxtah	r3, r3, lr
 800de64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800de68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800de6c:	b29b      	uxth	r3, r3
 800de6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de72:	45c1      	cmp	r9, r8
 800de74:	f840 3b04 	str.w	r3, [r0], #4
 800de78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800de7c:	d2e8      	bcs.n	800de50 <quorem+0xb0>
 800de7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800de82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800de86:	b922      	cbnz	r2, 800de92 <quorem+0xf2>
 800de88:	3b04      	subs	r3, #4
 800de8a:	429d      	cmp	r5, r3
 800de8c:	461a      	mov	r2, r3
 800de8e:	d30a      	bcc.n	800dea6 <quorem+0x106>
 800de90:	613c      	str	r4, [r7, #16]
 800de92:	4630      	mov	r0, r6
 800de94:	b003      	add	sp, #12
 800de96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de9a:	6812      	ldr	r2, [r2, #0]
 800de9c:	3b04      	subs	r3, #4
 800de9e:	2a00      	cmp	r2, #0
 800dea0:	d1cc      	bne.n	800de3c <quorem+0x9c>
 800dea2:	3c01      	subs	r4, #1
 800dea4:	e7c7      	b.n	800de36 <quorem+0x96>
 800dea6:	6812      	ldr	r2, [r2, #0]
 800dea8:	3b04      	subs	r3, #4
 800deaa:	2a00      	cmp	r2, #0
 800deac:	d1f0      	bne.n	800de90 <quorem+0xf0>
 800deae:	3c01      	subs	r4, #1
 800deb0:	e7eb      	b.n	800de8a <quorem+0xea>
 800deb2:	2000      	movs	r0, #0
 800deb4:	e7ee      	b.n	800de94 <quorem+0xf4>
	...

0800deb8 <_dtoa_r>:
 800deb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800debc:	ed2d 8b02 	vpush	{d8}
 800dec0:	ec57 6b10 	vmov	r6, r7, d0
 800dec4:	b095      	sub	sp, #84	; 0x54
 800dec6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dec8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800decc:	9105      	str	r1, [sp, #20]
 800dece:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800ded2:	4604      	mov	r4, r0
 800ded4:	9209      	str	r2, [sp, #36]	; 0x24
 800ded6:	930f      	str	r3, [sp, #60]	; 0x3c
 800ded8:	b975      	cbnz	r5, 800def8 <_dtoa_r+0x40>
 800deda:	2010      	movs	r0, #16
 800dedc:	f001 fb7c 	bl	800f5d8 <malloc>
 800dee0:	4602      	mov	r2, r0
 800dee2:	6260      	str	r0, [r4, #36]	; 0x24
 800dee4:	b920      	cbnz	r0, 800def0 <_dtoa_r+0x38>
 800dee6:	4bb2      	ldr	r3, [pc, #712]	; (800e1b0 <_dtoa_r+0x2f8>)
 800dee8:	21ea      	movs	r1, #234	; 0xea
 800deea:	48b2      	ldr	r0, [pc, #712]	; (800e1b4 <_dtoa_r+0x2fc>)
 800deec:	f002 fbfe 	bl	80106ec <__assert_func>
 800def0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800def4:	6005      	str	r5, [r0, #0]
 800def6:	60c5      	str	r5, [r0, #12]
 800def8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800defa:	6819      	ldr	r1, [r3, #0]
 800defc:	b151      	cbz	r1, 800df14 <_dtoa_r+0x5c>
 800defe:	685a      	ldr	r2, [r3, #4]
 800df00:	604a      	str	r2, [r1, #4]
 800df02:	2301      	movs	r3, #1
 800df04:	4093      	lsls	r3, r2
 800df06:	608b      	str	r3, [r1, #8]
 800df08:	4620      	mov	r0, r4
 800df0a:	f001 fbcd 	bl	800f6a8 <_Bfree>
 800df0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df10:	2200      	movs	r2, #0
 800df12:	601a      	str	r2, [r3, #0]
 800df14:	1e3b      	subs	r3, r7, #0
 800df16:	bfb9      	ittee	lt
 800df18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800df1c:	9303      	strlt	r3, [sp, #12]
 800df1e:	2300      	movge	r3, #0
 800df20:	f8c8 3000 	strge.w	r3, [r8]
 800df24:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800df28:	4ba3      	ldr	r3, [pc, #652]	; (800e1b8 <_dtoa_r+0x300>)
 800df2a:	bfbc      	itt	lt
 800df2c:	2201      	movlt	r2, #1
 800df2e:	f8c8 2000 	strlt.w	r2, [r8]
 800df32:	ea33 0309 	bics.w	r3, r3, r9
 800df36:	d11b      	bne.n	800df70 <_dtoa_r+0xb8>
 800df38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800df3a:	f242 730f 	movw	r3, #9999	; 0x270f
 800df3e:	6013      	str	r3, [r2, #0]
 800df40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800df44:	4333      	orrs	r3, r6
 800df46:	f000 857a 	beq.w	800ea3e <_dtoa_r+0xb86>
 800df4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df4c:	b963      	cbnz	r3, 800df68 <_dtoa_r+0xb0>
 800df4e:	4b9b      	ldr	r3, [pc, #620]	; (800e1bc <_dtoa_r+0x304>)
 800df50:	e024      	b.n	800df9c <_dtoa_r+0xe4>
 800df52:	4b9b      	ldr	r3, [pc, #620]	; (800e1c0 <_dtoa_r+0x308>)
 800df54:	9300      	str	r3, [sp, #0]
 800df56:	3308      	adds	r3, #8
 800df58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800df5a:	6013      	str	r3, [r2, #0]
 800df5c:	9800      	ldr	r0, [sp, #0]
 800df5e:	b015      	add	sp, #84	; 0x54
 800df60:	ecbd 8b02 	vpop	{d8}
 800df64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df68:	4b94      	ldr	r3, [pc, #592]	; (800e1bc <_dtoa_r+0x304>)
 800df6a:	9300      	str	r3, [sp, #0]
 800df6c:	3303      	adds	r3, #3
 800df6e:	e7f3      	b.n	800df58 <_dtoa_r+0xa0>
 800df70:	ed9d 7b02 	vldr	d7, [sp, #8]
 800df74:	2200      	movs	r2, #0
 800df76:	ec51 0b17 	vmov	r0, r1, d7
 800df7a:	2300      	movs	r3, #0
 800df7c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800df80:	f7f2 fdb2 	bl	8000ae8 <__aeabi_dcmpeq>
 800df84:	4680      	mov	r8, r0
 800df86:	b158      	cbz	r0, 800dfa0 <_dtoa_r+0xe8>
 800df88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800df8a:	2301      	movs	r3, #1
 800df8c:	6013      	str	r3, [r2, #0]
 800df8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df90:	2b00      	cmp	r3, #0
 800df92:	f000 8551 	beq.w	800ea38 <_dtoa_r+0xb80>
 800df96:	488b      	ldr	r0, [pc, #556]	; (800e1c4 <_dtoa_r+0x30c>)
 800df98:	6018      	str	r0, [r3, #0]
 800df9a:	1e43      	subs	r3, r0, #1
 800df9c:	9300      	str	r3, [sp, #0]
 800df9e:	e7dd      	b.n	800df5c <_dtoa_r+0xa4>
 800dfa0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800dfa4:	aa12      	add	r2, sp, #72	; 0x48
 800dfa6:	a913      	add	r1, sp, #76	; 0x4c
 800dfa8:	4620      	mov	r0, r4
 800dfaa:	f001 ff25 	bl	800fdf8 <__d2b>
 800dfae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dfb2:	4683      	mov	fp, r0
 800dfb4:	2d00      	cmp	r5, #0
 800dfb6:	d07c      	beq.n	800e0b2 <_dtoa_r+0x1fa>
 800dfb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dfba:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800dfbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dfc2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800dfc6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800dfca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800dfce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800dfd2:	4b7d      	ldr	r3, [pc, #500]	; (800e1c8 <_dtoa_r+0x310>)
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	4630      	mov	r0, r6
 800dfd8:	4639      	mov	r1, r7
 800dfda:	f7f2 f965 	bl	80002a8 <__aeabi_dsub>
 800dfde:	a36e      	add	r3, pc, #440	; (adr r3, 800e198 <_dtoa_r+0x2e0>)
 800dfe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfe4:	f7f2 fb18 	bl	8000618 <__aeabi_dmul>
 800dfe8:	a36d      	add	r3, pc, #436	; (adr r3, 800e1a0 <_dtoa_r+0x2e8>)
 800dfea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfee:	f7f2 f95d 	bl	80002ac <__adddf3>
 800dff2:	4606      	mov	r6, r0
 800dff4:	4628      	mov	r0, r5
 800dff6:	460f      	mov	r7, r1
 800dff8:	f7f2 faa4 	bl	8000544 <__aeabi_i2d>
 800dffc:	a36a      	add	r3, pc, #424	; (adr r3, 800e1a8 <_dtoa_r+0x2f0>)
 800dffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e002:	f7f2 fb09 	bl	8000618 <__aeabi_dmul>
 800e006:	4602      	mov	r2, r0
 800e008:	460b      	mov	r3, r1
 800e00a:	4630      	mov	r0, r6
 800e00c:	4639      	mov	r1, r7
 800e00e:	f7f2 f94d 	bl	80002ac <__adddf3>
 800e012:	4606      	mov	r6, r0
 800e014:	460f      	mov	r7, r1
 800e016:	f7f2 fdaf 	bl	8000b78 <__aeabi_d2iz>
 800e01a:	2200      	movs	r2, #0
 800e01c:	4682      	mov	sl, r0
 800e01e:	2300      	movs	r3, #0
 800e020:	4630      	mov	r0, r6
 800e022:	4639      	mov	r1, r7
 800e024:	f7f2 fd6a 	bl	8000afc <__aeabi_dcmplt>
 800e028:	b148      	cbz	r0, 800e03e <_dtoa_r+0x186>
 800e02a:	4650      	mov	r0, sl
 800e02c:	f7f2 fa8a 	bl	8000544 <__aeabi_i2d>
 800e030:	4632      	mov	r2, r6
 800e032:	463b      	mov	r3, r7
 800e034:	f7f2 fd58 	bl	8000ae8 <__aeabi_dcmpeq>
 800e038:	b908      	cbnz	r0, 800e03e <_dtoa_r+0x186>
 800e03a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e03e:	f1ba 0f16 	cmp.w	sl, #22
 800e042:	d854      	bhi.n	800e0ee <_dtoa_r+0x236>
 800e044:	4b61      	ldr	r3, [pc, #388]	; (800e1cc <_dtoa_r+0x314>)
 800e046:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e04e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e052:	f7f2 fd53 	bl	8000afc <__aeabi_dcmplt>
 800e056:	2800      	cmp	r0, #0
 800e058:	d04b      	beq.n	800e0f2 <_dtoa_r+0x23a>
 800e05a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e05e:	2300      	movs	r3, #0
 800e060:	930e      	str	r3, [sp, #56]	; 0x38
 800e062:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e064:	1b5d      	subs	r5, r3, r5
 800e066:	1e6b      	subs	r3, r5, #1
 800e068:	9304      	str	r3, [sp, #16]
 800e06a:	bf43      	ittte	mi
 800e06c:	2300      	movmi	r3, #0
 800e06e:	f1c5 0801 	rsbmi	r8, r5, #1
 800e072:	9304      	strmi	r3, [sp, #16]
 800e074:	f04f 0800 	movpl.w	r8, #0
 800e078:	f1ba 0f00 	cmp.w	sl, #0
 800e07c:	db3b      	blt.n	800e0f6 <_dtoa_r+0x23e>
 800e07e:	9b04      	ldr	r3, [sp, #16]
 800e080:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800e084:	4453      	add	r3, sl
 800e086:	9304      	str	r3, [sp, #16]
 800e088:	2300      	movs	r3, #0
 800e08a:	9306      	str	r3, [sp, #24]
 800e08c:	9b05      	ldr	r3, [sp, #20]
 800e08e:	2b09      	cmp	r3, #9
 800e090:	d869      	bhi.n	800e166 <_dtoa_r+0x2ae>
 800e092:	2b05      	cmp	r3, #5
 800e094:	bfc4      	itt	gt
 800e096:	3b04      	subgt	r3, #4
 800e098:	9305      	strgt	r3, [sp, #20]
 800e09a:	9b05      	ldr	r3, [sp, #20]
 800e09c:	f1a3 0302 	sub.w	r3, r3, #2
 800e0a0:	bfcc      	ite	gt
 800e0a2:	2500      	movgt	r5, #0
 800e0a4:	2501      	movle	r5, #1
 800e0a6:	2b03      	cmp	r3, #3
 800e0a8:	d869      	bhi.n	800e17e <_dtoa_r+0x2c6>
 800e0aa:	e8df f003 	tbb	[pc, r3]
 800e0ae:	4e2c      	.short	0x4e2c
 800e0b0:	5a4c      	.short	0x5a4c
 800e0b2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800e0b6:	441d      	add	r5, r3
 800e0b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e0bc:	2b20      	cmp	r3, #32
 800e0be:	bfc1      	itttt	gt
 800e0c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e0c4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e0c8:	fa09 f303 	lslgt.w	r3, r9, r3
 800e0cc:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e0d0:	bfda      	itte	le
 800e0d2:	f1c3 0320 	rsble	r3, r3, #32
 800e0d6:	fa06 f003 	lslle.w	r0, r6, r3
 800e0da:	4318      	orrgt	r0, r3
 800e0dc:	f7f2 fa22 	bl	8000524 <__aeabi_ui2d>
 800e0e0:	2301      	movs	r3, #1
 800e0e2:	4606      	mov	r6, r0
 800e0e4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e0e8:	3d01      	subs	r5, #1
 800e0ea:	9310      	str	r3, [sp, #64]	; 0x40
 800e0ec:	e771      	b.n	800dfd2 <_dtoa_r+0x11a>
 800e0ee:	2301      	movs	r3, #1
 800e0f0:	e7b6      	b.n	800e060 <_dtoa_r+0x1a8>
 800e0f2:	900e      	str	r0, [sp, #56]	; 0x38
 800e0f4:	e7b5      	b.n	800e062 <_dtoa_r+0x1aa>
 800e0f6:	f1ca 0300 	rsb	r3, sl, #0
 800e0fa:	9306      	str	r3, [sp, #24]
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	eba8 080a 	sub.w	r8, r8, sl
 800e102:	930d      	str	r3, [sp, #52]	; 0x34
 800e104:	e7c2      	b.n	800e08c <_dtoa_r+0x1d4>
 800e106:	2300      	movs	r3, #0
 800e108:	9308      	str	r3, [sp, #32]
 800e10a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	dc39      	bgt.n	800e184 <_dtoa_r+0x2cc>
 800e110:	f04f 0901 	mov.w	r9, #1
 800e114:	f8cd 9004 	str.w	r9, [sp, #4]
 800e118:	464b      	mov	r3, r9
 800e11a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e11e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e120:	2200      	movs	r2, #0
 800e122:	6042      	str	r2, [r0, #4]
 800e124:	2204      	movs	r2, #4
 800e126:	f102 0614 	add.w	r6, r2, #20
 800e12a:	429e      	cmp	r6, r3
 800e12c:	6841      	ldr	r1, [r0, #4]
 800e12e:	d92f      	bls.n	800e190 <_dtoa_r+0x2d8>
 800e130:	4620      	mov	r0, r4
 800e132:	f001 fa79 	bl	800f628 <_Balloc>
 800e136:	9000      	str	r0, [sp, #0]
 800e138:	2800      	cmp	r0, #0
 800e13a:	d14b      	bne.n	800e1d4 <_dtoa_r+0x31c>
 800e13c:	4b24      	ldr	r3, [pc, #144]	; (800e1d0 <_dtoa_r+0x318>)
 800e13e:	4602      	mov	r2, r0
 800e140:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e144:	e6d1      	b.n	800deea <_dtoa_r+0x32>
 800e146:	2301      	movs	r3, #1
 800e148:	e7de      	b.n	800e108 <_dtoa_r+0x250>
 800e14a:	2300      	movs	r3, #0
 800e14c:	9308      	str	r3, [sp, #32]
 800e14e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e150:	eb0a 0903 	add.w	r9, sl, r3
 800e154:	f109 0301 	add.w	r3, r9, #1
 800e158:	2b01      	cmp	r3, #1
 800e15a:	9301      	str	r3, [sp, #4]
 800e15c:	bfb8      	it	lt
 800e15e:	2301      	movlt	r3, #1
 800e160:	e7dd      	b.n	800e11e <_dtoa_r+0x266>
 800e162:	2301      	movs	r3, #1
 800e164:	e7f2      	b.n	800e14c <_dtoa_r+0x294>
 800e166:	2501      	movs	r5, #1
 800e168:	2300      	movs	r3, #0
 800e16a:	9305      	str	r3, [sp, #20]
 800e16c:	9508      	str	r5, [sp, #32]
 800e16e:	f04f 39ff 	mov.w	r9, #4294967295
 800e172:	2200      	movs	r2, #0
 800e174:	f8cd 9004 	str.w	r9, [sp, #4]
 800e178:	2312      	movs	r3, #18
 800e17a:	9209      	str	r2, [sp, #36]	; 0x24
 800e17c:	e7cf      	b.n	800e11e <_dtoa_r+0x266>
 800e17e:	2301      	movs	r3, #1
 800e180:	9308      	str	r3, [sp, #32]
 800e182:	e7f4      	b.n	800e16e <_dtoa_r+0x2b6>
 800e184:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e188:	f8cd 9004 	str.w	r9, [sp, #4]
 800e18c:	464b      	mov	r3, r9
 800e18e:	e7c6      	b.n	800e11e <_dtoa_r+0x266>
 800e190:	3101      	adds	r1, #1
 800e192:	6041      	str	r1, [r0, #4]
 800e194:	0052      	lsls	r2, r2, #1
 800e196:	e7c6      	b.n	800e126 <_dtoa_r+0x26e>
 800e198:	636f4361 	.word	0x636f4361
 800e19c:	3fd287a7 	.word	0x3fd287a7
 800e1a0:	8b60c8b3 	.word	0x8b60c8b3
 800e1a4:	3fc68a28 	.word	0x3fc68a28
 800e1a8:	509f79fb 	.word	0x509f79fb
 800e1ac:	3fd34413 	.word	0x3fd34413
 800e1b0:	08010aed 	.word	0x08010aed
 800e1b4:	08010b04 	.word	0x08010b04
 800e1b8:	7ff00000 	.word	0x7ff00000
 800e1bc:	08010ae9 	.word	0x08010ae9
 800e1c0:	08010ae0 	.word	0x08010ae0
 800e1c4:	08010a61 	.word	0x08010a61
 800e1c8:	3ff80000 	.word	0x3ff80000
 800e1cc:	08010ce0 	.word	0x08010ce0
 800e1d0:	08010b63 	.word	0x08010b63
 800e1d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1d6:	9a00      	ldr	r2, [sp, #0]
 800e1d8:	601a      	str	r2, [r3, #0]
 800e1da:	9b01      	ldr	r3, [sp, #4]
 800e1dc:	2b0e      	cmp	r3, #14
 800e1de:	f200 80ad 	bhi.w	800e33c <_dtoa_r+0x484>
 800e1e2:	2d00      	cmp	r5, #0
 800e1e4:	f000 80aa 	beq.w	800e33c <_dtoa_r+0x484>
 800e1e8:	f1ba 0f00 	cmp.w	sl, #0
 800e1ec:	dd36      	ble.n	800e25c <_dtoa_r+0x3a4>
 800e1ee:	4ac3      	ldr	r2, [pc, #780]	; (800e4fc <_dtoa_r+0x644>)
 800e1f0:	f00a 030f 	and.w	r3, sl, #15
 800e1f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e1f8:	ed93 7b00 	vldr	d7, [r3]
 800e1fc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800e200:	ea4f 172a 	mov.w	r7, sl, asr #4
 800e204:	eeb0 8a47 	vmov.f32	s16, s14
 800e208:	eef0 8a67 	vmov.f32	s17, s15
 800e20c:	d016      	beq.n	800e23c <_dtoa_r+0x384>
 800e20e:	4bbc      	ldr	r3, [pc, #752]	; (800e500 <_dtoa_r+0x648>)
 800e210:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e214:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e218:	f7f2 fb28 	bl	800086c <__aeabi_ddiv>
 800e21c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e220:	f007 070f 	and.w	r7, r7, #15
 800e224:	2503      	movs	r5, #3
 800e226:	4eb6      	ldr	r6, [pc, #728]	; (800e500 <_dtoa_r+0x648>)
 800e228:	b957      	cbnz	r7, 800e240 <_dtoa_r+0x388>
 800e22a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e22e:	ec53 2b18 	vmov	r2, r3, d8
 800e232:	f7f2 fb1b 	bl	800086c <__aeabi_ddiv>
 800e236:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e23a:	e029      	b.n	800e290 <_dtoa_r+0x3d8>
 800e23c:	2502      	movs	r5, #2
 800e23e:	e7f2      	b.n	800e226 <_dtoa_r+0x36e>
 800e240:	07f9      	lsls	r1, r7, #31
 800e242:	d508      	bpl.n	800e256 <_dtoa_r+0x39e>
 800e244:	ec51 0b18 	vmov	r0, r1, d8
 800e248:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e24c:	f7f2 f9e4 	bl	8000618 <__aeabi_dmul>
 800e250:	ec41 0b18 	vmov	d8, r0, r1
 800e254:	3501      	adds	r5, #1
 800e256:	107f      	asrs	r7, r7, #1
 800e258:	3608      	adds	r6, #8
 800e25a:	e7e5      	b.n	800e228 <_dtoa_r+0x370>
 800e25c:	f000 80a6 	beq.w	800e3ac <_dtoa_r+0x4f4>
 800e260:	f1ca 0600 	rsb	r6, sl, #0
 800e264:	4ba5      	ldr	r3, [pc, #660]	; (800e4fc <_dtoa_r+0x644>)
 800e266:	4fa6      	ldr	r7, [pc, #664]	; (800e500 <_dtoa_r+0x648>)
 800e268:	f006 020f 	and.w	r2, r6, #15
 800e26c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e274:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e278:	f7f2 f9ce 	bl	8000618 <__aeabi_dmul>
 800e27c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e280:	1136      	asrs	r6, r6, #4
 800e282:	2300      	movs	r3, #0
 800e284:	2502      	movs	r5, #2
 800e286:	2e00      	cmp	r6, #0
 800e288:	f040 8085 	bne.w	800e396 <_dtoa_r+0x4de>
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d1d2      	bne.n	800e236 <_dtoa_r+0x37e>
 800e290:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e292:	2b00      	cmp	r3, #0
 800e294:	f000 808c 	beq.w	800e3b0 <_dtoa_r+0x4f8>
 800e298:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e29c:	4b99      	ldr	r3, [pc, #612]	; (800e504 <_dtoa_r+0x64c>)
 800e29e:	2200      	movs	r2, #0
 800e2a0:	4630      	mov	r0, r6
 800e2a2:	4639      	mov	r1, r7
 800e2a4:	f7f2 fc2a 	bl	8000afc <__aeabi_dcmplt>
 800e2a8:	2800      	cmp	r0, #0
 800e2aa:	f000 8081 	beq.w	800e3b0 <_dtoa_r+0x4f8>
 800e2ae:	9b01      	ldr	r3, [sp, #4]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d07d      	beq.n	800e3b0 <_dtoa_r+0x4f8>
 800e2b4:	f1b9 0f00 	cmp.w	r9, #0
 800e2b8:	dd3c      	ble.n	800e334 <_dtoa_r+0x47c>
 800e2ba:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e2be:	9307      	str	r3, [sp, #28]
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	4b91      	ldr	r3, [pc, #580]	; (800e508 <_dtoa_r+0x650>)
 800e2c4:	4630      	mov	r0, r6
 800e2c6:	4639      	mov	r1, r7
 800e2c8:	f7f2 f9a6 	bl	8000618 <__aeabi_dmul>
 800e2cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e2d0:	3501      	adds	r5, #1
 800e2d2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800e2d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e2da:	4628      	mov	r0, r5
 800e2dc:	f7f2 f932 	bl	8000544 <__aeabi_i2d>
 800e2e0:	4632      	mov	r2, r6
 800e2e2:	463b      	mov	r3, r7
 800e2e4:	f7f2 f998 	bl	8000618 <__aeabi_dmul>
 800e2e8:	4b88      	ldr	r3, [pc, #544]	; (800e50c <_dtoa_r+0x654>)
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	f7f1 ffde 	bl	80002ac <__adddf3>
 800e2f0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e2f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e2f8:	9303      	str	r3, [sp, #12]
 800e2fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d15c      	bne.n	800e3ba <_dtoa_r+0x502>
 800e300:	4b83      	ldr	r3, [pc, #524]	; (800e510 <_dtoa_r+0x658>)
 800e302:	2200      	movs	r2, #0
 800e304:	4630      	mov	r0, r6
 800e306:	4639      	mov	r1, r7
 800e308:	f7f1 ffce 	bl	80002a8 <__aeabi_dsub>
 800e30c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e310:	4606      	mov	r6, r0
 800e312:	460f      	mov	r7, r1
 800e314:	f7f2 fc10 	bl	8000b38 <__aeabi_dcmpgt>
 800e318:	2800      	cmp	r0, #0
 800e31a:	f040 8296 	bne.w	800e84a <_dtoa_r+0x992>
 800e31e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e322:	4630      	mov	r0, r6
 800e324:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e328:	4639      	mov	r1, r7
 800e32a:	f7f2 fbe7 	bl	8000afc <__aeabi_dcmplt>
 800e32e:	2800      	cmp	r0, #0
 800e330:	f040 8288 	bne.w	800e844 <_dtoa_r+0x98c>
 800e334:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e338:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e33c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e33e:	2b00      	cmp	r3, #0
 800e340:	f2c0 8158 	blt.w	800e5f4 <_dtoa_r+0x73c>
 800e344:	f1ba 0f0e 	cmp.w	sl, #14
 800e348:	f300 8154 	bgt.w	800e5f4 <_dtoa_r+0x73c>
 800e34c:	4b6b      	ldr	r3, [pc, #428]	; (800e4fc <_dtoa_r+0x644>)
 800e34e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e352:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e358:	2b00      	cmp	r3, #0
 800e35a:	f280 80e3 	bge.w	800e524 <_dtoa_r+0x66c>
 800e35e:	9b01      	ldr	r3, [sp, #4]
 800e360:	2b00      	cmp	r3, #0
 800e362:	f300 80df 	bgt.w	800e524 <_dtoa_r+0x66c>
 800e366:	f040 826d 	bne.w	800e844 <_dtoa_r+0x98c>
 800e36a:	4b69      	ldr	r3, [pc, #420]	; (800e510 <_dtoa_r+0x658>)
 800e36c:	2200      	movs	r2, #0
 800e36e:	4640      	mov	r0, r8
 800e370:	4649      	mov	r1, r9
 800e372:	f7f2 f951 	bl	8000618 <__aeabi_dmul>
 800e376:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e37a:	f7f2 fbd3 	bl	8000b24 <__aeabi_dcmpge>
 800e37e:	9e01      	ldr	r6, [sp, #4]
 800e380:	4637      	mov	r7, r6
 800e382:	2800      	cmp	r0, #0
 800e384:	f040 8243 	bne.w	800e80e <_dtoa_r+0x956>
 800e388:	9d00      	ldr	r5, [sp, #0]
 800e38a:	2331      	movs	r3, #49	; 0x31
 800e38c:	f805 3b01 	strb.w	r3, [r5], #1
 800e390:	f10a 0a01 	add.w	sl, sl, #1
 800e394:	e23f      	b.n	800e816 <_dtoa_r+0x95e>
 800e396:	07f2      	lsls	r2, r6, #31
 800e398:	d505      	bpl.n	800e3a6 <_dtoa_r+0x4ee>
 800e39a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e39e:	f7f2 f93b 	bl	8000618 <__aeabi_dmul>
 800e3a2:	3501      	adds	r5, #1
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	1076      	asrs	r6, r6, #1
 800e3a8:	3708      	adds	r7, #8
 800e3aa:	e76c      	b.n	800e286 <_dtoa_r+0x3ce>
 800e3ac:	2502      	movs	r5, #2
 800e3ae:	e76f      	b.n	800e290 <_dtoa_r+0x3d8>
 800e3b0:	9b01      	ldr	r3, [sp, #4]
 800e3b2:	f8cd a01c 	str.w	sl, [sp, #28]
 800e3b6:	930c      	str	r3, [sp, #48]	; 0x30
 800e3b8:	e78d      	b.n	800e2d6 <_dtoa_r+0x41e>
 800e3ba:	9900      	ldr	r1, [sp, #0]
 800e3bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e3be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e3c0:	4b4e      	ldr	r3, [pc, #312]	; (800e4fc <_dtoa_r+0x644>)
 800e3c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e3c6:	4401      	add	r1, r0
 800e3c8:	9102      	str	r1, [sp, #8]
 800e3ca:	9908      	ldr	r1, [sp, #32]
 800e3cc:	eeb0 8a47 	vmov.f32	s16, s14
 800e3d0:	eef0 8a67 	vmov.f32	s17, s15
 800e3d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e3d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e3dc:	2900      	cmp	r1, #0
 800e3de:	d045      	beq.n	800e46c <_dtoa_r+0x5b4>
 800e3e0:	494c      	ldr	r1, [pc, #304]	; (800e514 <_dtoa_r+0x65c>)
 800e3e2:	2000      	movs	r0, #0
 800e3e4:	f7f2 fa42 	bl	800086c <__aeabi_ddiv>
 800e3e8:	ec53 2b18 	vmov	r2, r3, d8
 800e3ec:	f7f1 ff5c 	bl	80002a8 <__aeabi_dsub>
 800e3f0:	9d00      	ldr	r5, [sp, #0]
 800e3f2:	ec41 0b18 	vmov	d8, r0, r1
 800e3f6:	4639      	mov	r1, r7
 800e3f8:	4630      	mov	r0, r6
 800e3fa:	f7f2 fbbd 	bl	8000b78 <__aeabi_d2iz>
 800e3fe:	900c      	str	r0, [sp, #48]	; 0x30
 800e400:	f7f2 f8a0 	bl	8000544 <__aeabi_i2d>
 800e404:	4602      	mov	r2, r0
 800e406:	460b      	mov	r3, r1
 800e408:	4630      	mov	r0, r6
 800e40a:	4639      	mov	r1, r7
 800e40c:	f7f1 ff4c 	bl	80002a8 <__aeabi_dsub>
 800e410:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e412:	3330      	adds	r3, #48	; 0x30
 800e414:	f805 3b01 	strb.w	r3, [r5], #1
 800e418:	ec53 2b18 	vmov	r2, r3, d8
 800e41c:	4606      	mov	r6, r0
 800e41e:	460f      	mov	r7, r1
 800e420:	f7f2 fb6c 	bl	8000afc <__aeabi_dcmplt>
 800e424:	2800      	cmp	r0, #0
 800e426:	d165      	bne.n	800e4f4 <_dtoa_r+0x63c>
 800e428:	4632      	mov	r2, r6
 800e42a:	463b      	mov	r3, r7
 800e42c:	4935      	ldr	r1, [pc, #212]	; (800e504 <_dtoa_r+0x64c>)
 800e42e:	2000      	movs	r0, #0
 800e430:	f7f1 ff3a 	bl	80002a8 <__aeabi_dsub>
 800e434:	ec53 2b18 	vmov	r2, r3, d8
 800e438:	f7f2 fb60 	bl	8000afc <__aeabi_dcmplt>
 800e43c:	2800      	cmp	r0, #0
 800e43e:	f040 80b9 	bne.w	800e5b4 <_dtoa_r+0x6fc>
 800e442:	9b02      	ldr	r3, [sp, #8]
 800e444:	429d      	cmp	r5, r3
 800e446:	f43f af75 	beq.w	800e334 <_dtoa_r+0x47c>
 800e44a:	4b2f      	ldr	r3, [pc, #188]	; (800e508 <_dtoa_r+0x650>)
 800e44c:	ec51 0b18 	vmov	r0, r1, d8
 800e450:	2200      	movs	r2, #0
 800e452:	f7f2 f8e1 	bl	8000618 <__aeabi_dmul>
 800e456:	4b2c      	ldr	r3, [pc, #176]	; (800e508 <_dtoa_r+0x650>)
 800e458:	ec41 0b18 	vmov	d8, r0, r1
 800e45c:	2200      	movs	r2, #0
 800e45e:	4630      	mov	r0, r6
 800e460:	4639      	mov	r1, r7
 800e462:	f7f2 f8d9 	bl	8000618 <__aeabi_dmul>
 800e466:	4606      	mov	r6, r0
 800e468:	460f      	mov	r7, r1
 800e46a:	e7c4      	b.n	800e3f6 <_dtoa_r+0x53e>
 800e46c:	ec51 0b17 	vmov	r0, r1, d7
 800e470:	f7f2 f8d2 	bl	8000618 <__aeabi_dmul>
 800e474:	9b02      	ldr	r3, [sp, #8]
 800e476:	9d00      	ldr	r5, [sp, #0]
 800e478:	930c      	str	r3, [sp, #48]	; 0x30
 800e47a:	ec41 0b18 	vmov	d8, r0, r1
 800e47e:	4639      	mov	r1, r7
 800e480:	4630      	mov	r0, r6
 800e482:	f7f2 fb79 	bl	8000b78 <__aeabi_d2iz>
 800e486:	9011      	str	r0, [sp, #68]	; 0x44
 800e488:	f7f2 f85c 	bl	8000544 <__aeabi_i2d>
 800e48c:	4602      	mov	r2, r0
 800e48e:	460b      	mov	r3, r1
 800e490:	4630      	mov	r0, r6
 800e492:	4639      	mov	r1, r7
 800e494:	f7f1 ff08 	bl	80002a8 <__aeabi_dsub>
 800e498:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e49a:	3330      	adds	r3, #48	; 0x30
 800e49c:	f805 3b01 	strb.w	r3, [r5], #1
 800e4a0:	9b02      	ldr	r3, [sp, #8]
 800e4a2:	429d      	cmp	r5, r3
 800e4a4:	4606      	mov	r6, r0
 800e4a6:	460f      	mov	r7, r1
 800e4a8:	f04f 0200 	mov.w	r2, #0
 800e4ac:	d134      	bne.n	800e518 <_dtoa_r+0x660>
 800e4ae:	4b19      	ldr	r3, [pc, #100]	; (800e514 <_dtoa_r+0x65c>)
 800e4b0:	ec51 0b18 	vmov	r0, r1, d8
 800e4b4:	f7f1 fefa 	bl	80002ac <__adddf3>
 800e4b8:	4602      	mov	r2, r0
 800e4ba:	460b      	mov	r3, r1
 800e4bc:	4630      	mov	r0, r6
 800e4be:	4639      	mov	r1, r7
 800e4c0:	f7f2 fb3a 	bl	8000b38 <__aeabi_dcmpgt>
 800e4c4:	2800      	cmp	r0, #0
 800e4c6:	d175      	bne.n	800e5b4 <_dtoa_r+0x6fc>
 800e4c8:	ec53 2b18 	vmov	r2, r3, d8
 800e4cc:	4911      	ldr	r1, [pc, #68]	; (800e514 <_dtoa_r+0x65c>)
 800e4ce:	2000      	movs	r0, #0
 800e4d0:	f7f1 feea 	bl	80002a8 <__aeabi_dsub>
 800e4d4:	4602      	mov	r2, r0
 800e4d6:	460b      	mov	r3, r1
 800e4d8:	4630      	mov	r0, r6
 800e4da:	4639      	mov	r1, r7
 800e4dc:	f7f2 fb0e 	bl	8000afc <__aeabi_dcmplt>
 800e4e0:	2800      	cmp	r0, #0
 800e4e2:	f43f af27 	beq.w	800e334 <_dtoa_r+0x47c>
 800e4e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e4e8:	1e6b      	subs	r3, r5, #1
 800e4ea:	930c      	str	r3, [sp, #48]	; 0x30
 800e4ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e4f0:	2b30      	cmp	r3, #48	; 0x30
 800e4f2:	d0f8      	beq.n	800e4e6 <_dtoa_r+0x62e>
 800e4f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e4f8:	e04a      	b.n	800e590 <_dtoa_r+0x6d8>
 800e4fa:	bf00      	nop
 800e4fc:	08010ce0 	.word	0x08010ce0
 800e500:	08010cb8 	.word	0x08010cb8
 800e504:	3ff00000 	.word	0x3ff00000
 800e508:	40240000 	.word	0x40240000
 800e50c:	401c0000 	.word	0x401c0000
 800e510:	40140000 	.word	0x40140000
 800e514:	3fe00000 	.word	0x3fe00000
 800e518:	4baf      	ldr	r3, [pc, #700]	; (800e7d8 <_dtoa_r+0x920>)
 800e51a:	f7f2 f87d 	bl	8000618 <__aeabi_dmul>
 800e51e:	4606      	mov	r6, r0
 800e520:	460f      	mov	r7, r1
 800e522:	e7ac      	b.n	800e47e <_dtoa_r+0x5c6>
 800e524:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e528:	9d00      	ldr	r5, [sp, #0]
 800e52a:	4642      	mov	r2, r8
 800e52c:	464b      	mov	r3, r9
 800e52e:	4630      	mov	r0, r6
 800e530:	4639      	mov	r1, r7
 800e532:	f7f2 f99b 	bl	800086c <__aeabi_ddiv>
 800e536:	f7f2 fb1f 	bl	8000b78 <__aeabi_d2iz>
 800e53a:	9002      	str	r0, [sp, #8]
 800e53c:	f7f2 f802 	bl	8000544 <__aeabi_i2d>
 800e540:	4642      	mov	r2, r8
 800e542:	464b      	mov	r3, r9
 800e544:	f7f2 f868 	bl	8000618 <__aeabi_dmul>
 800e548:	4602      	mov	r2, r0
 800e54a:	460b      	mov	r3, r1
 800e54c:	4630      	mov	r0, r6
 800e54e:	4639      	mov	r1, r7
 800e550:	f7f1 feaa 	bl	80002a8 <__aeabi_dsub>
 800e554:	9e02      	ldr	r6, [sp, #8]
 800e556:	9f01      	ldr	r7, [sp, #4]
 800e558:	3630      	adds	r6, #48	; 0x30
 800e55a:	f805 6b01 	strb.w	r6, [r5], #1
 800e55e:	9e00      	ldr	r6, [sp, #0]
 800e560:	1bae      	subs	r6, r5, r6
 800e562:	42b7      	cmp	r7, r6
 800e564:	4602      	mov	r2, r0
 800e566:	460b      	mov	r3, r1
 800e568:	d137      	bne.n	800e5da <_dtoa_r+0x722>
 800e56a:	f7f1 fe9f 	bl	80002ac <__adddf3>
 800e56e:	4642      	mov	r2, r8
 800e570:	464b      	mov	r3, r9
 800e572:	4606      	mov	r6, r0
 800e574:	460f      	mov	r7, r1
 800e576:	f7f2 fadf 	bl	8000b38 <__aeabi_dcmpgt>
 800e57a:	b9c8      	cbnz	r0, 800e5b0 <_dtoa_r+0x6f8>
 800e57c:	4642      	mov	r2, r8
 800e57e:	464b      	mov	r3, r9
 800e580:	4630      	mov	r0, r6
 800e582:	4639      	mov	r1, r7
 800e584:	f7f2 fab0 	bl	8000ae8 <__aeabi_dcmpeq>
 800e588:	b110      	cbz	r0, 800e590 <_dtoa_r+0x6d8>
 800e58a:	9b02      	ldr	r3, [sp, #8]
 800e58c:	07d9      	lsls	r1, r3, #31
 800e58e:	d40f      	bmi.n	800e5b0 <_dtoa_r+0x6f8>
 800e590:	4620      	mov	r0, r4
 800e592:	4659      	mov	r1, fp
 800e594:	f001 f888 	bl	800f6a8 <_Bfree>
 800e598:	2300      	movs	r3, #0
 800e59a:	702b      	strb	r3, [r5, #0]
 800e59c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e59e:	f10a 0001 	add.w	r0, sl, #1
 800e5a2:	6018      	str	r0, [r3, #0]
 800e5a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	f43f acd8 	beq.w	800df5c <_dtoa_r+0xa4>
 800e5ac:	601d      	str	r5, [r3, #0]
 800e5ae:	e4d5      	b.n	800df5c <_dtoa_r+0xa4>
 800e5b0:	f8cd a01c 	str.w	sl, [sp, #28]
 800e5b4:	462b      	mov	r3, r5
 800e5b6:	461d      	mov	r5, r3
 800e5b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e5bc:	2a39      	cmp	r2, #57	; 0x39
 800e5be:	d108      	bne.n	800e5d2 <_dtoa_r+0x71a>
 800e5c0:	9a00      	ldr	r2, [sp, #0]
 800e5c2:	429a      	cmp	r2, r3
 800e5c4:	d1f7      	bne.n	800e5b6 <_dtoa_r+0x6fe>
 800e5c6:	9a07      	ldr	r2, [sp, #28]
 800e5c8:	9900      	ldr	r1, [sp, #0]
 800e5ca:	3201      	adds	r2, #1
 800e5cc:	9207      	str	r2, [sp, #28]
 800e5ce:	2230      	movs	r2, #48	; 0x30
 800e5d0:	700a      	strb	r2, [r1, #0]
 800e5d2:	781a      	ldrb	r2, [r3, #0]
 800e5d4:	3201      	adds	r2, #1
 800e5d6:	701a      	strb	r2, [r3, #0]
 800e5d8:	e78c      	b.n	800e4f4 <_dtoa_r+0x63c>
 800e5da:	4b7f      	ldr	r3, [pc, #508]	; (800e7d8 <_dtoa_r+0x920>)
 800e5dc:	2200      	movs	r2, #0
 800e5de:	f7f2 f81b 	bl	8000618 <__aeabi_dmul>
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	4606      	mov	r6, r0
 800e5e8:	460f      	mov	r7, r1
 800e5ea:	f7f2 fa7d 	bl	8000ae8 <__aeabi_dcmpeq>
 800e5ee:	2800      	cmp	r0, #0
 800e5f0:	d09b      	beq.n	800e52a <_dtoa_r+0x672>
 800e5f2:	e7cd      	b.n	800e590 <_dtoa_r+0x6d8>
 800e5f4:	9a08      	ldr	r2, [sp, #32]
 800e5f6:	2a00      	cmp	r2, #0
 800e5f8:	f000 80c4 	beq.w	800e784 <_dtoa_r+0x8cc>
 800e5fc:	9a05      	ldr	r2, [sp, #20]
 800e5fe:	2a01      	cmp	r2, #1
 800e600:	f300 80a8 	bgt.w	800e754 <_dtoa_r+0x89c>
 800e604:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e606:	2a00      	cmp	r2, #0
 800e608:	f000 80a0 	beq.w	800e74c <_dtoa_r+0x894>
 800e60c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e610:	9e06      	ldr	r6, [sp, #24]
 800e612:	4645      	mov	r5, r8
 800e614:	9a04      	ldr	r2, [sp, #16]
 800e616:	2101      	movs	r1, #1
 800e618:	441a      	add	r2, r3
 800e61a:	4620      	mov	r0, r4
 800e61c:	4498      	add	r8, r3
 800e61e:	9204      	str	r2, [sp, #16]
 800e620:	f001 f948 	bl	800f8b4 <__i2b>
 800e624:	4607      	mov	r7, r0
 800e626:	2d00      	cmp	r5, #0
 800e628:	dd0b      	ble.n	800e642 <_dtoa_r+0x78a>
 800e62a:	9b04      	ldr	r3, [sp, #16]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	dd08      	ble.n	800e642 <_dtoa_r+0x78a>
 800e630:	42ab      	cmp	r3, r5
 800e632:	9a04      	ldr	r2, [sp, #16]
 800e634:	bfa8      	it	ge
 800e636:	462b      	movge	r3, r5
 800e638:	eba8 0803 	sub.w	r8, r8, r3
 800e63c:	1aed      	subs	r5, r5, r3
 800e63e:	1ad3      	subs	r3, r2, r3
 800e640:	9304      	str	r3, [sp, #16]
 800e642:	9b06      	ldr	r3, [sp, #24]
 800e644:	b1fb      	cbz	r3, 800e686 <_dtoa_r+0x7ce>
 800e646:	9b08      	ldr	r3, [sp, #32]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	f000 809f 	beq.w	800e78c <_dtoa_r+0x8d4>
 800e64e:	2e00      	cmp	r6, #0
 800e650:	dd11      	ble.n	800e676 <_dtoa_r+0x7be>
 800e652:	4639      	mov	r1, r7
 800e654:	4632      	mov	r2, r6
 800e656:	4620      	mov	r0, r4
 800e658:	f001 f9e8 	bl	800fa2c <__pow5mult>
 800e65c:	465a      	mov	r2, fp
 800e65e:	4601      	mov	r1, r0
 800e660:	4607      	mov	r7, r0
 800e662:	4620      	mov	r0, r4
 800e664:	f001 f93c 	bl	800f8e0 <__multiply>
 800e668:	4659      	mov	r1, fp
 800e66a:	9007      	str	r0, [sp, #28]
 800e66c:	4620      	mov	r0, r4
 800e66e:	f001 f81b 	bl	800f6a8 <_Bfree>
 800e672:	9b07      	ldr	r3, [sp, #28]
 800e674:	469b      	mov	fp, r3
 800e676:	9b06      	ldr	r3, [sp, #24]
 800e678:	1b9a      	subs	r2, r3, r6
 800e67a:	d004      	beq.n	800e686 <_dtoa_r+0x7ce>
 800e67c:	4659      	mov	r1, fp
 800e67e:	4620      	mov	r0, r4
 800e680:	f001 f9d4 	bl	800fa2c <__pow5mult>
 800e684:	4683      	mov	fp, r0
 800e686:	2101      	movs	r1, #1
 800e688:	4620      	mov	r0, r4
 800e68a:	f001 f913 	bl	800f8b4 <__i2b>
 800e68e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e690:	2b00      	cmp	r3, #0
 800e692:	4606      	mov	r6, r0
 800e694:	dd7c      	ble.n	800e790 <_dtoa_r+0x8d8>
 800e696:	461a      	mov	r2, r3
 800e698:	4601      	mov	r1, r0
 800e69a:	4620      	mov	r0, r4
 800e69c:	f001 f9c6 	bl	800fa2c <__pow5mult>
 800e6a0:	9b05      	ldr	r3, [sp, #20]
 800e6a2:	2b01      	cmp	r3, #1
 800e6a4:	4606      	mov	r6, r0
 800e6a6:	dd76      	ble.n	800e796 <_dtoa_r+0x8de>
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	9306      	str	r3, [sp, #24]
 800e6ac:	6933      	ldr	r3, [r6, #16]
 800e6ae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e6b2:	6918      	ldr	r0, [r3, #16]
 800e6b4:	f001 f8ae 	bl	800f814 <__hi0bits>
 800e6b8:	f1c0 0020 	rsb	r0, r0, #32
 800e6bc:	9b04      	ldr	r3, [sp, #16]
 800e6be:	4418      	add	r0, r3
 800e6c0:	f010 001f 	ands.w	r0, r0, #31
 800e6c4:	f000 8086 	beq.w	800e7d4 <_dtoa_r+0x91c>
 800e6c8:	f1c0 0320 	rsb	r3, r0, #32
 800e6cc:	2b04      	cmp	r3, #4
 800e6ce:	dd7f      	ble.n	800e7d0 <_dtoa_r+0x918>
 800e6d0:	f1c0 001c 	rsb	r0, r0, #28
 800e6d4:	9b04      	ldr	r3, [sp, #16]
 800e6d6:	4403      	add	r3, r0
 800e6d8:	4480      	add	r8, r0
 800e6da:	4405      	add	r5, r0
 800e6dc:	9304      	str	r3, [sp, #16]
 800e6de:	f1b8 0f00 	cmp.w	r8, #0
 800e6e2:	dd05      	ble.n	800e6f0 <_dtoa_r+0x838>
 800e6e4:	4659      	mov	r1, fp
 800e6e6:	4642      	mov	r2, r8
 800e6e8:	4620      	mov	r0, r4
 800e6ea:	f001 f9f9 	bl	800fae0 <__lshift>
 800e6ee:	4683      	mov	fp, r0
 800e6f0:	9b04      	ldr	r3, [sp, #16]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	dd05      	ble.n	800e702 <_dtoa_r+0x84a>
 800e6f6:	4631      	mov	r1, r6
 800e6f8:	461a      	mov	r2, r3
 800e6fa:	4620      	mov	r0, r4
 800e6fc:	f001 f9f0 	bl	800fae0 <__lshift>
 800e700:	4606      	mov	r6, r0
 800e702:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e704:	2b00      	cmp	r3, #0
 800e706:	d069      	beq.n	800e7dc <_dtoa_r+0x924>
 800e708:	4631      	mov	r1, r6
 800e70a:	4658      	mov	r0, fp
 800e70c:	f001 fa54 	bl	800fbb8 <__mcmp>
 800e710:	2800      	cmp	r0, #0
 800e712:	da63      	bge.n	800e7dc <_dtoa_r+0x924>
 800e714:	2300      	movs	r3, #0
 800e716:	4659      	mov	r1, fp
 800e718:	220a      	movs	r2, #10
 800e71a:	4620      	mov	r0, r4
 800e71c:	f000 ffe6 	bl	800f6ec <__multadd>
 800e720:	9b08      	ldr	r3, [sp, #32]
 800e722:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e726:	4683      	mov	fp, r0
 800e728:	2b00      	cmp	r3, #0
 800e72a:	f000 818f 	beq.w	800ea4c <_dtoa_r+0xb94>
 800e72e:	4639      	mov	r1, r7
 800e730:	2300      	movs	r3, #0
 800e732:	220a      	movs	r2, #10
 800e734:	4620      	mov	r0, r4
 800e736:	f000 ffd9 	bl	800f6ec <__multadd>
 800e73a:	f1b9 0f00 	cmp.w	r9, #0
 800e73e:	4607      	mov	r7, r0
 800e740:	f300 808e 	bgt.w	800e860 <_dtoa_r+0x9a8>
 800e744:	9b05      	ldr	r3, [sp, #20]
 800e746:	2b02      	cmp	r3, #2
 800e748:	dc50      	bgt.n	800e7ec <_dtoa_r+0x934>
 800e74a:	e089      	b.n	800e860 <_dtoa_r+0x9a8>
 800e74c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e74e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e752:	e75d      	b.n	800e610 <_dtoa_r+0x758>
 800e754:	9b01      	ldr	r3, [sp, #4]
 800e756:	1e5e      	subs	r6, r3, #1
 800e758:	9b06      	ldr	r3, [sp, #24]
 800e75a:	42b3      	cmp	r3, r6
 800e75c:	bfbf      	itttt	lt
 800e75e:	9b06      	ldrlt	r3, [sp, #24]
 800e760:	9606      	strlt	r6, [sp, #24]
 800e762:	1af2      	sublt	r2, r6, r3
 800e764:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800e766:	bfb6      	itet	lt
 800e768:	189b      	addlt	r3, r3, r2
 800e76a:	1b9e      	subge	r6, r3, r6
 800e76c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800e76e:	9b01      	ldr	r3, [sp, #4]
 800e770:	bfb8      	it	lt
 800e772:	2600      	movlt	r6, #0
 800e774:	2b00      	cmp	r3, #0
 800e776:	bfb5      	itete	lt
 800e778:	eba8 0503 	sublt.w	r5, r8, r3
 800e77c:	9b01      	ldrge	r3, [sp, #4]
 800e77e:	2300      	movlt	r3, #0
 800e780:	4645      	movge	r5, r8
 800e782:	e747      	b.n	800e614 <_dtoa_r+0x75c>
 800e784:	9e06      	ldr	r6, [sp, #24]
 800e786:	9f08      	ldr	r7, [sp, #32]
 800e788:	4645      	mov	r5, r8
 800e78a:	e74c      	b.n	800e626 <_dtoa_r+0x76e>
 800e78c:	9a06      	ldr	r2, [sp, #24]
 800e78e:	e775      	b.n	800e67c <_dtoa_r+0x7c4>
 800e790:	9b05      	ldr	r3, [sp, #20]
 800e792:	2b01      	cmp	r3, #1
 800e794:	dc18      	bgt.n	800e7c8 <_dtoa_r+0x910>
 800e796:	9b02      	ldr	r3, [sp, #8]
 800e798:	b9b3      	cbnz	r3, 800e7c8 <_dtoa_r+0x910>
 800e79a:	9b03      	ldr	r3, [sp, #12]
 800e79c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e7a0:	b9a3      	cbnz	r3, 800e7cc <_dtoa_r+0x914>
 800e7a2:	9b03      	ldr	r3, [sp, #12]
 800e7a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e7a8:	0d1b      	lsrs	r3, r3, #20
 800e7aa:	051b      	lsls	r3, r3, #20
 800e7ac:	b12b      	cbz	r3, 800e7ba <_dtoa_r+0x902>
 800e7ae:	9b04      	ldr	r3, [sp, #16]
 800e7b0:	3301      	adds	r3, #1
 800e7b2:	9304      	str	r3, [sp, #16]
 800e7b4:	f108 0801 	add.w	r8, r8, #1
 800e7b8:	2301      	movs	r3, #1
 800e7ba:	9306      	str	r3, [sp, #24]
 800e7bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	f47f af74 	bne.w	800e6ac <_dtoa_r+0x7f4>
 800e7c4:	2001      	movs	r0, #1
 800e7c6:	e779      	b.n	800e6bc <_dtoa_r+0x804>
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	e7f6      	b.n	800e7ba <_dtoa_r+0x902>
 800e7cc:	9b02      	ldr	r3, [sp, #8]
 800e7ce:	e7f4      	b.n	800e7ba <_dtoa_r+0x902>
 800e7d0:	d085      	beq.n	800e6de <_dtoa_r+0x826>
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	301c      	adds	r0, #28
 800e7d6:	e77d      	b.n	800e6d4 <_dtoa_r+0x81c>
 800e7d8:	40240000 	.word	0x40240000
 800e7dc:	9b01      	ldr	r3, [sp, #4]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	dc38      	bgt.n	800e854 <_dtoa_r+0x99c>
 800e7e2:	9b05      	ldr	r3, [sp, #20]
 800e7e4:	2b02      	cmp	r3, #2
 800e7e6:	dd35      	ble.n	800e854 <_dtoa_r+0x99c>
 800e7e8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e7ec:	f1b9 0f00 	cmp.w	r9, #0
 800e7f0:	d10d      	bne.n	800e80e <_dtoa_r+0x956>
 800e7f2:	4631      	mov	r1, r6
 800e7f4:	464b      	mov	r3, r9
 800e7f6:	2205      	movs	r2, #5
 800e7f8:	4620      	mov	r0, r4
 800e7fa:	f000 ff77 	bl	800f6ec <__multadd>
 800e7fe:	4601      	mov	r1, r0
 800e800:	4606      	mov	r6, r0
 800e802:	4658      	mov	r0, fp
 800e804:	f001 f9d8 	bl	800fbb8 <__mcmp>
 800e808:	2800      	cmp	r0, #0
 800e80a:	f73f adbd 	bgt.w	800e388 <_dtoa_r+0x4d0>
 800e80e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e810:	9d00      	ldr	r5, [sp, #0]
 800e812:	ea6f 0a03 	mvn.w	sl, r3
 800e816:	f04f 0800 	mov.w	r8, #0
 800e81a:	4631      	mov	r1, r6
 800e81c:	4620      	mov	r0, r4
 800e81e:	f000 ff43 	bl	800f6a8 <_Bfree>
 800e822:	2f00      	cmp	r7, #0
 800e824:	f43f aeb4 	beq.w	800e590 <_dtoa_r+0x6d8>
 800e828:	f1b8 0f00 	cmp.w	r8, #0
 800e82c:	d005      	beq.n	800e83a <_dtoa_r+0x982>
 800e82e:	45b8      	cmp	r8, r7
 800e830:	d003      	beq.n	800e83a <_dtoa_r+0x982>
 800e832:	4641      	mov	r1, r8
 800e834:	4620      	mov	r0, r4
 800e836:	f000 ff37 	bl	800f6a8 <_Bfree>
 800e83a:	4639      	mov	r1, r7
 800e83c:	4620      	mov	r0, r4
 800e83e:	f000 ff33 	bl	800f6a8 <_Bfree>
 800e842:	e6a5      	b.n	800e590 <_dtoa_r+0x6d8>
 800e844:	2600      	movs	r6, #0
 800e846:	4637      	mov	r7, r6
 800e848:	e7e1      	b.n	800e80e <_dtoa_r+0x956>
 800e84a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e84c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e850:	4637      	mov	r7, r6
 800e852:	e599      	b.n	800e388 <_dtoa_r+0x4d0>
 800e854:	9b08      	ldr	r3, [sp, #32]
 800e856:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	f000 80fd 	beq.w	800ea5a <_dtoa_r+0xba2>
 800e860:	2d00      	cmp	r5, #0
 800e862:	dd05      	ble.n	800e870 <_dtoa_r+0x9b8>
 800e864:	4639      	mov	r1, r7
 800e866:	462a      	mov	r2, r5
 800e868:	4620      	mov	r0, r4
 800e86a:	f001 f939 	bl	800fae0 <__lshift>
 800e86e:	4607      	mov	r7, r0
 800e870:	9b06      	ldr	r3, [sp, #24]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d05c      	beq.n	800e930 <_dtoa_r+0xa78>
 800e876:	6879      	ldr	r1, [r7, #4]
 800e878:	4620      	mov	r0, r4
 800e87a:	f000 fed5 	bl	800f628 <_Balloc>
 800e87e:	4605      	mov	r5, r0
 800e880:	b928      	cbnz	r0, 800e88e <_dtoa_r+0x9d6>
 800e882:	4b80      	ldr	r3, [pc, #512]	; (800ea84 <_dtoa_r+0xbcc>)
 800e884:	4602      	mov	r2, r0
 800e886:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e88a:	f7ff bb2e 	b.w	800deea <_dtoa_r+0x32>
 800e88e:	693a      	ldr	r2, [r7, #16]
 800e890:	3202      	adds	r2, #2
 800e892:	0092      	lsls	r2, r2, #2
 800e894:	f107 010c 	add.w	r1, r7, #12
 800e898:	300c      	adds	r0, #12
 800e89a:	f000 feb7 	bl	800f60c <memcpy>
 800e89e:	2201      	movs	r2, #1
 800e8a0:	4629      	mov	r1, r5
 800e8a2:	4620      	mov	r0, r4
 800e8a4:	f001 f91c 	bl	800fae0 <__lshift>
 800e8a8:	9b00      	ldr	r3, [sp, #0]
 800e8aa:	3301      	adds	r3, #1
 800e8ac:	9301      	str	r3, [sp, #4]
 800e8ae:	9b00      	ldr	r3, [sp, #0]
 800e8b0:	444b      	add	r3, r9
 800e8b2:	9307      	str	r3, [sp, #28]
 800e8b4:	9b02      	ldr	r3, [sp, #8]
 800e8b6:	f003 0301 	and.w	r3, r3, #1
 800e8ba:	46b8      	mov	r8, r7
 800e8bc:	9306      	str	r3, [sp, #24]
 800e8be:	4607      	mov	r7, r0
 800e8c0:	9b01      	ldr	r3, [sp, #4]
 800e8c2:	4631      	mov	r1, r6
 800e8c4:	3b01      	subs	r3, #1
 800e8c6:	4658      	mov	r0, fp
 800e8c8:	9302      	str	r3, [sp, #8]
 800e8ca:	f7ff fa69 	bl	800dda0 <quorem>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	3330      	adds	r3, #48	; 0x30
 800e8d2:	9004      	str	r0, [sp, #16]
 800e8d4:	4641      	mov	r1, r8
 800e8d6:	4658      	mov	r0, fp
 800e8d8:	9308      	str	r3, [sp, #32]
 800e8da:	f001 f96d 	bl	800fbb8 <__mcmp>
 800e8de:	463a      	mov	r2, r7
 800e8e0:	4681      	mov	r9, r0
 800e8e2:	4631      	mov	r1, r6
 800e8e4:	4620      	mov	r0, r4
 800e8e6:	f001 f983 	bl	800fbf0 <__mdiff>
 800e8ea:	68c2      	ldr	r2, [r0, #12]
 800e8ec:	9b08      	ldr	r3, [sp, #32]
 800e8ee:	4605      	mov	r5, r0
 800e8f0:	bb02      	cbnz	r2, 800e934 <_dtoa_r+0xa7c>
 800e8f2:	4601      	mov	r1, r0
 800e8f4:	4658      	mov	r0, fp
 800e8f6:	f001 f95f 	bl	800fbb8 <__mcmp>
 800e8fa:	9b08      	ldr	r3, [sp, #32]
 800e8fc:	4602      	mov	r2, r0
 800e8fe:	4629      	mov	r1, r5
 800e900:	4620      	mov	r0, r4
 800e902:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800e906:	f000 fecf 	bl	800f6a8 <_Bfree>
 800e90a:	9b05      	ldr	r3, [sp, #20]
 800e90c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e90e:	9d01      	ldr	r5, [sp, #4]
 800e910:	ea43 0102 	orr.w	r1, r3, r2
 800e914:	9b06      	ldr	r3, [sp, #24]
 800e916:	430b      	orrs	r3, r1
 800e918:	9b08      	ldr	r3, [sp, #32]
 800e91a:	d10d      	bne.n	800e938 <_dtoa_r+0xa80>
 800e91c:	2b39      	cmp	r3, #57	; 0x39
 800e91e:	d029      	beq.n	800e974 <_dtoa_r+0xabc>
 800e920:	f1b9 0f00 	cmp.w	r9, #0
 800e924:	dd01      	ble.n	800e92a <_dtoa_r+0xa72>
 800e926:	9b04      	ldr	r3, [sp, #16]
 800e928:	3331      	adds	r3, #49	; 0x31
 800e92a:	9a02      	ldr	r2, [sp, #8]
 800e92c:	7013      	strb	r3, [r2, #0]
 800e92e:	e774      	b.n	800e81a <_dtoa_r+0x962>
 800e930:	4638      	mov	r0, r7
 800e932:	e7b9      	b.n	800e8a8 <_dtoa_r+0x9f0>
 800e934:	2201      	movs	r2, #1
 800e936:	e7e2      	b.n	800e8fe <_dtoa_r+0xa46>
 800e938:	f1b9 0f00 	cmp.w	r9, #0
 800e93c:	db06      	blt.n	800e94c <_dtoa_r+0xa94>
 800e93e:	9905      	ldr	r1, [sp, #20]
 800e940:	ea41 0909 	orr.w	r9, r1, r9
 800e944:	9906      	ldr	r1, [sp, #24]
 800e946:	ea59 0101 	orrs.w	r1, r9, r1
 800e94a:	d120      	bne.n	800e98e <_dtoa_r+0xad6>
 800e94c:	2a00      	cmp	r2, #0
 800e94e:	ddec      	ble.n	800e92a <_dtoa_r+0xa72>
 800e950:	4659      	mov	r1, fp
 800e952:	2201      	movs	r2, #1
 800e954:	4620      	mov	r0, r4
 800e956:	9301      	str	r3, [sp, #4]
 800e958:	f001 f8c2 	bl	800fae0 <__lshift>
 800e95c:	4631      	mov	r1, r6
 800e95e:	4683      	mov	fp, r0
 800e960:	f001 f92a 	bl	800fbb8 <__mcmp>
 800e964:	2800      	cmp	r0, #0
 800e966:	9b01      	ldr	r3, [sp, #4]
 800e968:	dc02      	bgt.n	800e970 <_dtoa_r+0xab8>
 800e96a:	d1de      	bne.n	800e92a <_dtoa_r+0xa72>
 800e96c:	07da      	lsls	r2, r3, #31
 800e96e:	d5dc      	bpl.n	800e92a <_dtoa_r+0xa72>
 800e970:	2b39      	cmp	r3, #57	; 0x39
 800e972:	d1d8      	bne.n	800e926 <_dtoa_r+0xa6e>
 800e974:	9a02      	ldr	r2, [sp, #8]
 800e976:	2339      	movs	r3, #57	; 0x39
 800e978:	7013      	strb	r3, [r2, #0]
 800e97a:	462b      	mov	r3, r5
 800e97c:	461d      	mov	r5, r3
 800e97e:	3b01      	subs	r3, #1
 800e980:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e984:	2a39      	cmp	r2, #57	; 0x39
 800e986:	d050      	beq.n	800ea2a <_dtoa_r+0xb72>
 800e988:	3201      	adds	r2, #1
 800e98a:	701a      	strb	r2, [r3, #0]
 800e98c:	e745      	b.n	800e81a <_dtoa_r+0x962>
 800e98e:	2a00      	cmp	r2, #0
 800e990:	dd03      	ble.n	800e99a <_dtoa_r+0xae2>
 800e992:	2b39      	cmp	r3, #57	; 0x39
 800e994:	d0ee      	beq.n	800e974 <_dtoa_r+0xabc>
 800e996:	3301      	adds	r3, #1
 800e998:	e7c7      	b.n	800e92a <_dtoa_r+0xa72>
 800e99a:	9a01      	ldr	r2, [sp, #4]
 800e99c:	9907      	ldr	r1, [sp, #28]
 800e99e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e9a2:	428a      	cmp	r2, r1
 800e9a4:	d02a      	beq.n	800e9fc <_dtoa_r+0xb44>
 800e9a6:	4659      	mov	r1, fp
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	220a      	movs	r2, #10
 800e9ac:	4620      	mov	r0, r4
 800e9ae:	f000 fe9d 	bl	800f6ec <__multadd>
 800e9b2:	45b8      	cmp	r8, r7
 800e9b4:	4683      	mov	fp, r0
 800e9b6:	f04f 0300 	mov.w	r3, #0
 800e9ba:	f04f 020a 	mov.w	r2, #10
 800e9be:	4641      	mov	r1, r8
 800e9c0:	4620      	mov	r0, r4
 800e9c2:	d107      	bne.n	800e9d4 <_dtoa_r+0xb1c>
 800e9c4:	f000 fe92 	bl	800f6ec <__multadd>
 800e9c8:	4680      	mov	r8, r0
 800e9ca:	4607      	mov	r7, r0
 800e9cc:	9b01      	ldr	r3, [sp, #4]
 800e9ce:	3301      	adds	r3, #1
 800e9d0:	9301      	str	r3, [sp, #4]
 800e9d2:	e775      	b.n	800e8c0 <_dtoa_r+0xa08>
 800e9d4:	f000 fe8a 	bl	800f6ec <__multadd>
 800e9d8:	4639      	mov	r1, r7
 800e9da:	4680      	mov	r8, r0
 800e9dc:	2300      	movs	r3, #0
 800e9de:	220a      	movs	r2, #10
 800e9e0:	4620      	mov	r0, r4
 800e9e2:	f000 fe83 	bl	800f6ec <__multadd>
 800e9e6:	4607      	mov	r7, r0
 800e9e8:	e7f0      	b.n	800e9cc <_dtoa_r+0xb14>
 800e9ea:	f1b9 0f00 	cmp.w	r9, #0
 800e9ee:	9a00      	ldr	r2, [sp, #0]
 800e9f0:	bfcc      	ite	gt
 800e9f2:	464d      	movgt	r5, r9
 800e9f4:	2501      	movle	r5, #1
 800e9f6:	4415      	add	r5, r2
 800e9f8:	f04f 0800 	mov.w	r8, #0
 800e9fc:	4659      	mov	r1, fp
 800e9fe:	2201      	movs	r2, #1
 800ea00:	4620      	mov	r0, r4
 800ea02:	9301      	str	r3, [sp, #4]
 800ea04:	f001 f86c 	bl	800fae0 <__lshift>
 800ea08:	4631      	mov	r1, r6
 800ea0a:	4683      	mov	fp, r0
 800ea0c:	f001 f8d4 	bl	800fbb8 <__mcmp>
 800ea10:	2800      	cmp	r0, #0
 800ea12:	dcb2      	bgt.n	800e97a <_dtoa_r+0xac2>
 800ea14:	d102      	bne.n	800ea1c <_dtoa_r+0xb64>
 800ea16:	9b01      	ldr	r3, [sp, #4]
 800ea18:	07db      	lsls	r3, r3, #31
 800ea1a:	d4ae      	bmi.n	800e97a <_dtoa_r+0xac2>
 800ea1c:	462b      	mov	r3, r5
 800ea1e:	461d      	mov	r5, r3
 800ea20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ea24:	2a30      	cmp	r2, #48	; 0x30
 800ea26:	d0fa      	beq.n	800ea1e <_dtoa_r+0xb66>
 800ea28:	e6f7      	b.n	800e81a <_dtoa_r+0x962>
 800ea2a:	9a00      	ldr	r2, [sp, #0]
 800ea2c:	429a      	cmp	r2, r3
 800ea2e:	d1a5      	bne.n	800e97c <_dtoa_r+0xac4>
 800ea30:	f10a 0a01 	add.w	sl, sl, #1
 800ea34:	2331      	movs	r3, #49	; 0x31
 800ea36:	e779      	b.n	800e92c <_dtoa_r+0xa74>
 800ea38:	4b13      	ldr	r3, [pc, #76]	; (800ea88 <_dtoa_r+0xbd0>)
 800ea3a:	f7ff baaf 	b.w	800df9c <_dtoa_r+0xe4>
 800ea3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	f47f aa86 	bne.w	800df52 <_dtoa_r+0x9a>
 800ea46:	4b11      	ldr	r3, [pc, #68]	; (800ea8c <_dtoa_r+0xbd4>)
 800ea48:	f7ff baa8 	b.w	800df9c <_dtoa_r+0xe4>
 800ea4c:	f1b9 0f00 	cmp.w	r9, #0
 800ea50:	dc03      	bgt.n	800ea5a <_dtoa_r+0xba2>
 800ea52:	9b05      	ldr	r3, [sp, #20]
 800ea54:	2b02      	cmp	r3, #2
 800ea56:	f73f aec9 	bgt.w	800e7ec <_dtoa_r+0x934>
 800ea5a:	9d00      	ldr	r5, [sp, #0]
 800ea5c:	4631      	mov	r1, r6
 800ea5e:	4658      	mov	r0, fp
 800ea60:	f7ff f99e 	bl	800dda0 <quorem>
 800ea64:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ea68:	f805 3b01 	strb.w	r3, [r5], #1
 800ea6c:	9a00      	ldr	r2, [sp, #0]
 800ea6e:	1aaa      	subs	r2, r5, r2
 800ea70:	4591      	cmp	r9, r2
 800ea72:	ddba      	ble.n	800e9ea <_dtoa_r+0xb32>
 800ea74:	4659      	mov	r1, fp
 800ea76:	2300      	movs	r3, #0
 800ea78:	220a      	movs	r2, #10
 800ea7a:	4620      	mov	r0, r4
 800ea7c:	f000 fe36 	bl	800f6ec <__multadd>
 800ea80:	4683      	mov	fp, r0
 800ea82:	e7eb      	b.n	800ea5c <_dtoa_r+0xba4>
 800ea84:	08010b63 	.word	0x08010b63
 800ea88:	08010a60 	.word	0x08010a60
 800ea8c:	08010ae0 	.word	0x08010ae0

0800ea90 <__sflush_r>:
 800ea90:	898a      	ldrh	r2, [r1, #12]
 800ea92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea96:	4605      	mov	r5, r0
 800ea98:	0710      	lsls	r0, r2, #28
 800ea9a:	460c      	mov	r4, r1
 800ea9c:	d458      	bmi.n	800eb50 <__sflush_r+0xc0>
 800ea9e:	684b      	ldr	r3, [r1, #4]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	dc05      	bgt.n	800eab0 <__sflush_r+0x20>
 800eaa4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	dc02      	bgt.n	800eab0 <__sflush_r+0x20>
 800eaaa:	2000      	movs	r0, #0
 800eaac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eab0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eab2:	2e00      	cmp	r6, #0
 800eab4:	d0f9      	beq.n	800eaaa <__sflush_r+0x1a>
 800eab6:	2300      	movs	r3, #0
 800eab8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eabc:	682f      	ldr	r7, [r5, #0]
 800eabe:	602b      	str	r3, [r5, #0]
 800eac0:	d032      	beq.n	800eb28 <__sflush_r+0x98>
 800eac2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eac4:	89a3      	ldrh	r3, [r4, #12]
 800eac6:	075a      	lsls	r2, r3, #29
 800eac8:	d505      	bpl.n	800ead6 <__sflush_r+0x46>
 800eaca:	6863      	ldr	r3, [r4, #4]
 800eacc:	1ac0      	subs	r0, r0, r3
 800eace:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ead0:	b10b      	cbz	r3, 800ead6 <__sflush_r+0x46>
 800ead2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ead4:	1ac0      	subs	r0, r0, r3
 800ead6:	2300      	movs	r3, #0
 800ead8:	4602      	mov	r2, r0
 800eada:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eadc:	6a21      	ldr	r1, [r4, #32]
 800eade:	4628      	mov	r0, r5
 800eae0:	47b0      	blx	r6
 800eae2:	1c43      	adds	r3, r0, #1
 800eae4:	89a3      	ldrh	r3, [r4, #12]
 800eae6:	d106      	bne.n	800eaf6 <__sflush_r+0x66>
 800eae8:	6829      	ldr	r1, [r5, #0]
 800eaea:	291d      	cmp	r1, #29
 800eaec:	d82c      	bhi.n	800eb48 <__sflush_r+0xb8>
 800eaee:	4a2a      	ldr	r2, [pc, #168]	; (800eb98 <__sflush_r+0x108>)
 800eaf0:	40ca      	lsrs	r2, r1
 800eaf2:	07d6      	lsls	r6, r2, #31
 800eaf4:	d528      	bpl.n	800eb48 <__sflush_r+0xb8>
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	6062      	str	r2, [r4, #4]
 800eafa:	04d9      	lsls	r1, r3, #19
 800eafc:	6922      	ldr	r2, [r4, #16]
 800eafe:	6022      	str	r2, [r4, #0]
 800eb00:	d504      	bpl.n	800eb0c <__sflush_r+0x7c>
 800eb02:	1c42      	adds	r2, r0, #1
 800eb04:	d101      	bne.n	800eb0a <__sflush_r+0x7a>
 800eb06:	682b      	ldr	r3, [r5, #0]
 800eb08:	b903      	cbnz	r3, 800eb0c <__sflush_r+0x7c>
 800eb0a:	6560      	str	r0, [r4, #84]	; 0x54
 800eb0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb0e:	602f      	str	r7, [r5, #0]
 800eb10:	2900      	cmp	r1, #0
 800eb12:	d0ca      	beq.n	800eaaa <__sflush_r+0x1a>
 800eb14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb18:	4299      	cmp	r1, r3
 800eb1a:	d002      	beq.n	800eb22 <__sflush_r+0x92>
 800eb1c:	4628      	mov	r0, r5
 800eb1e:	f001 fa4d 	bl	800ffbc <_free_r>
 800eb22:	2000      	movs	r0, #0
 800eb24:	6360      	str	r0, [r4, #52]	; 0x34
 800eb26:	e7c1      	b.n	800eaac <__sflush_r+0x1c>
 800eb28:	6a21      	ldr	r1, [r4, #32]
 800eb2a:	2301      	movs	r3, #1
 800eb2c:	4628      	mov	r0, r5
 800eb2e:	47b0      	blx	r6
 800eb30:	1c41      	adds	r1, r0, #1
 800eb32:	d1c7      	bne.n	800eac4 <__sflush_r+0x34>
 800eb34:	682b      	ldr	r3, [r5, #0]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d0c4      	beq.n	800eac4 <__sflush_r+0x34>
 800eb3a:	2b1d      	cmp	r3, #29
 800eb3c:	d001      	beq.n	800eb42 <__sflush_r+0xb2>
 800eb3e:	2b16      	cmp	r3, #22
 800eb40:	d101      	bne.n	800eb46 <__sflush_r+0xb6>
 800eb42:	602f      	str	r7, [r5, #0]
 800eb44:	e7b1      	b.n	800eaaa <__sflush_r+0x1a>
 800eb46:	89a3      	ldrh	r3, [r4, #12]
 800eb48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb4c:	81a3      	strh	r3, [r4, #12]
 800eb4e:	e7ad      	b.n	800eaac <__sflush_r+0x1c>
 800eb50:	690f      	ldr	r7, [r1, #16]
 800eb52:	2f00      	cmp	r7, #0
 800eb54:	d0a9      	beq.n	800eaaa <__sflush_r+0x1a>
 800eb56:	0793      	lsls	r3, r2, #30
 800eb58:	680e      	ldr	r6, [r1, #0]
 800eb5a:	bf08      	it	eq
 800eb5c:	694b      	ldreq	r3, [r1, #20]
 800eb5e:	600f      	str	r7, [r1, #0]
 800eb60:	bf18      	it	ne
 800eb62:	2300      	movne	r3, #0
 800eb64:	eba6 0807 	sub.w	r8, r6, r7
 800eb68:	608b      	str	r3, [r1, #8]
 800eb6a:	f1b8 0f00 	cmp.w	r8, #0
 800eb6e:	dd9c      	ble.n	800eaaa <__sflush_r+0x1a>
 800eb70:	6a21      	ldr	r1, [r4, #32]
 800eb72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800eb74:	4643      	mov	r3, r8
 800eb76:	463a      	mov	r2, r7
 800eb78:	4628      	mov	r0, r5
 800eb7a:	47b0      	blx	r6
 800eb7c:	2800      	cmp	r0, #0
 800eb7e:	dc06      	bgt.n	800eb8e <__sflush_r+0xfe>
 800eb80:	89a3      	ldrh	r3, [r4, #12]
 800eb82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb86:	81a3      	strh	r3, [r4, #12]
 800eb88:	f04f 30ff 	mov.w	r0, #4294967295
 800eb8c:	e78e      	b.n	800eaac <__sflush_r+0x1c>
 800eb8e:	4407      	add	r7, r0
 800eb90:	eba8 0800 	sub.w	r8, r8, r0
 800eb94:	e7e9      	b.n	800eb6a <__sflush_r+0xda>
 800eb96:	bf00      	nop
 800eb98:	20400001 	.word	0x20400001

0800eb9c <_fflush_r>:
 800eb9c:	b538      	push	{r3, r4, r5, lr}
 800eb9e:	690b      	ldr	r3, [r1, #16]
 800eba0:	4605      	mov	r5, r0
 800eba2:	460c      	mov	r4, r1
 800eba4:	b913      	cbnz	r3, 800ebac <_fflush_r+0x10>
 800eba6:	2500      	movs	r5, #0
 800eba8:	4628      	mov	r0, r5
 800ebaa:	bd38      	pop	{r3, r4, r5, pc}
 800ebac:	b118      	cbz	r0, 800ebb6 <_fflush_r+0x1a>
 800ebae:	6983      	ldr	r3, [r0, #24]
 800ebb0:	b90b      	cbnz	r3, 800ebb6 <_fflush_r+0x1a>
 800ebb2:	f000 f887 	bl	800ecc4 <__sinit>
 800ebb6:	4b14      	ldr	r3, [pc, #80]	; (800ec08 <_fflush_r+0x6c>)
 800ebb8:	429c      	cmp	r4, r3
 800ebba:	d11b      	bne.n	800ebf4 <_fflush_r+0x58>
 800ebbc:	686c      	ldr	r4, [r5, #4]
 800ebbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d0ef      	beq.n	800eba6 <_fflush_r+0xa>
 800ebc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ebc8:	07d0      	lsls	r0, r2, #31
 800ebca:	d404      	bmi.n	800ebd6 <_fflush_r+0x3a>
 800ebcc:	0599      	lsls	r1, r3, #22
 800ebce:	d402      	bmi.n	800ebd6 <_fflush_r+0x3a>
 800ebd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ebd2:	f000 fc88 	bl	800f4e6 <__retarget_lock_acquire_recursive>
 800ebd6:	4628      	mov	r0, r5
 800ebd8:	4621      	mov	r1, r4
 800ebda:	f7ff ff59 	bl	800ea90 <__sflush_r>
 800ebde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ebe0:	07da      	lsls	r2, r3, #31
 800ebe2:	4605      	mov	r5, r0
 800ebe4:	d4e0      	bmi.n	800eba8 <_fflush_r+0xc>
 800ebe6:	89a3      	ldrh	r3, [r4, #12]
 800ebe8:	059b      	lsls	r3, r3, #22
 800ebea:	d4dd      	bmi.n	800eba8 <_fflush_r+0xc>
 800ebec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ebee:	f000 fc7b 	bl	800f4e8 <__retarget_lock_release_recursive>
 800ebf2:	e7d9      	b.n	800eba8 <_fflush_r+0xc>
 800ebf4:	4b05      	ldr	r3, [pc, #20]	; (800ec0c <_fflush_r+0x70>)
 800ebf6:	429c      	cmp	r4, r3
 800ebf8:	d101      	bne.n	800ebfe <_fflush_r+0x62>
 800ebfa:	68ac      	ldr	r4, [r5, #8]
 800ebfc:	e7df      	b.n	800ebbe <_fflush_r+0x22>
 800ebfe:	4b04      	ldr	r3, [pc, #16]	; (800ec10 <_fflush_r+0x74>)
 800ec00:	429c      	cmp	r4, r3
 800ec02:	bf08      	it	eq
 800ec04:	68ec      	ldreq	r4, [r5, #12]
 800ec06:	e7da      	b.n	800ebbe <_fflush_r+0x22>
 800ec08:	08010b94 	.word	0x08010b94
 800ec0c:	08010bb4 	.word	0x08010bb4
 800ec10:	08010b74 	.word	0x08010b74

0800ec14 <std>:
 800ec14:	2300      	movs	r3, #0
 800ec16:	b510      	push	{r4, lr}
 800ec18:	4604      	mov	r4, r0
 800ec1a:	e9c0 3300 	strd	r3, r3, [r0]
 800ec1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ec22:	6083      	str	r3, [r0, #8]
 800ec24:	8181      	strh	r1, [r0, #12]
 800ec26:	6643      	str	r3, [r0, #100]	; 0x64
 800ec28:	81c2      	strh	r2, [r0, #14]
 800ec2a:	6183      	str	r3, [r0, #24]
 800ec2c:	4619      	mov	r1, r3
 800ec2e:	2208      	movs	r2, #8
 800ec30:	305c      	adds	r0, #92	; 0x5c
 800ec32:	f7fd fa21 	bl	800c078 <memset>
 800ec36:	4b05      	ldr	r3, [pc, #20]	; (800ec4c <std+0x38>)
 800ec38:	6263      	str	r3, [r4, #36]	; 0x24
 800ec3a:	4b05      	ldr	r3, [pc, #20]	; (800ec50 <std+0x3c>)
 800ec3c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ec3e:	4b05      	ldr	r3, [pc, #20]	; (800ec54 <std+0x40>)
 800ec40:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ec42:	4b05      	ldr	r3, [pc, #20]	; (800ec58 <std+0x44>)
 800ec44:	6224      	str	r4, [r4, #32]
 800ec46:	6323      	str	r3, [r4, #48]	; 0x30
 800ec48:	bd10      	pop	{r4, pc}
 800ec4a:	bf00      	nop
 800ec4c:	0800cdc9 	.word	0x0800cdc9
 800ec50:	0800cdeb 	.word	0x0800cdeb
 800ec54:	0800ce23 	.word	0x0800ce23
 800ec58:	0800ce47 	.word	0x0800ce47

0800ec5c <_cleanup_r>:
 800ec5c:	4901      	ldr	r1, [pc, #4]	; (800ec64 <_cleanup_r+0x8>)
 800ec5e:	f000 b8af 	b.w	800edc0 <_fwalk_reent>
 800ec62:	bf00      	nop
 800ec64:	0800eb9d 	.word	0x0800eb9d

0800ec68 <__sfmoreglue>:
 800ec68:	b570      	push	{r4, r5, r6, lr}
 800ec6a:	1e4a      	subs	r2, r1, #1
 800ec6c:	2568      	movs	r5, #104	; 0x68
 800ec6e:	4355      	muls	r5, r2
 800ec70:	460e      	mov	r6, r1
 800ec72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ec76:	f001 f9f1 	bl	801005c <_malloc_r>
 800ec7a:	4604      	mov	r4, r0
 800ec7c:	b140      	cbz	r0, 800ec90 <__sfmoreglue+0x28>
 800ec7e:	2100      	movs	r1, #0
 800ec80:	e9c0 1600 	strd	r1, r6, [r0]
 800ec84:	300c      	adds	r0, #12
 800ec86:	60a0      	str	r0, [r4, #8]
 800ec88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ec8c:	f7fd f9f4 	bl	800c078 <memset>
 800ec90:	4620      	mov	r0, r4
 800ec92:	bd70      	pop	{r4, r5, r6, pc}

0800ec94 <__sfp_lock_acquire>:
 800ec94:	4801      	ldr	r0, [pc, #4]	; (800ec9c <__sfp_lock_acquire+0x8>)
 800ec96:	f000 bc26 	b.w	800f4e6 <__retarget_lock_acquire_recursive>
 800ec9a:	bf00      	nop
 800ec9c:	20002c20 	.word	0x20002c20

0800eca0 <__sfp_lock_release>:
 800eca0:	4801      	ldr	r0, [pc, #4]	; (800eca8 <__sfp_lock_release+0x8>)
 800eca2:	f000 bc21 	b.w	800f4e8 <__retarget_lock_release_recursive>
 800eca6:	bf00      	nop
 800eca8:	20002c20 	.word	0x20002c20

0800ecac <__sinit_lock_acquire>:
 800ecac:	4801      	ldr	r0, [pc, #4]	; (800ecb4 <__sinit_lock_acquire+0x8>)
 800ecae:	f000 bc1a 	b.w	800f4e6 <__retarget_lock_acquire_recursive>
 800ecb2:	bf00      	nop
 800ecb4:	20002c1b 	.word	0x20002c1b

0800ecb8 <__sinit_lock_release>:
 800ecb8:	4801      	ldr	r0, [pc, #4]	; (800ecc0 <__sinit_lock_release+0x8>)
 800ecba:	f000 bc15 	b.w	800f4e8 <__retarget_lock_release_recursive>
 800ecbe:	bf00      	nop
 800ecc0:	20002c1b 	.word	0x20002c1b

0800ecc4 <__sinit>:
 800ecc4:	b510      	push	{r4, lr}
 800ecc6:	4604      	mov	r4, r0
 800ecc8:	f7ff fff0 	bl	800ecac <__sinit_lock_acquire>
 800eccc:	69a3      	ldr	r3, [r4, #24]
 800ecce:	b11b      	cbz	r3, 800ecd8 <__sinit+0x14>
 800ecd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecd4:	f7ff bff0 	b.w	800ecb8 <__sinit_lock_release>
 800ecd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ecdc:	6523      	str	r3, [r4, #80]	; 0x50
 800ecde:	4b13      	ldr	r3, [pc, #76]	; (800ed2c <__sinit+0x68>)
 800ece0:	4a13      	ldr	r2, [pc, #76]	; (800ed30 <__sinit+0x6c>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	62a2      	str	r2, [r4, #40]	; 0x28
 800ece6:	42a3      	cmp	r3, r4
 800ece8:	bf04      	itt	eq
 800ecea:	2301      	moveq	r3, #1
 800ecec:	61a3      	streq	r3, [r4, #24]
 800ecee:	4620      	mov	r0, r4
 800ecf0:	f000 f820 	bl	800ed34 <__sfp>
 800ecf4:	6060      	str	r0, [r4, #4]
 800ecf6:	4620      	mov	r0, r4
 800ecf8:	f000 f81c 	bl	800ed34 <__sfp>
 800ecfc:	60a0      	str	r0, [r4, #8]
 800ecfe:	4620      	mov	r0, r4
 800ed00:	f000 f818 	bl	800ed34 <__sfp>
 800ed04:	2200      	movs	r2, #0
 800ed06:	60e0      	str	r0, [r4, #12]
 800ed08:	2104      	movs	r1, #4
 800ed0a:	6860      	ldr	r0, [r4, #4]
 800ed0c:	f7ff ff82 	bl	800ec14 <std>
 800ed10:	68a0      	ldr	r0, [r4, #8]
 800ed12:	2201      	movs	r2, #1
 800ed14:	2109      	movs	r1, #9
 800ed16:	f7ff ff7d 	bl	800ec14 <std>
 800ed1a:	68e0      	ldr	r0, [r4, #12]
 800ed1c:	2202      	movs	r2, #2
 800ed1e:	2112      	movs	r1, #18
 800ed20:	f7ff ff78 	bl	800ec14 <std>
 800ed24:	2301      	movs	r3, #1
 800ed26:	61a3      	str	r3, [r4, #24]
 800ed28:	e7d2      	b.n	800ecd0 <__sinit+0xc>
 800ed2a:	bf00      	nop
 800ed2c:	08010a4c 	.word	0x08010a4c
 800ed30:	0800ec5d 	.word	0x0800ec5d

0800ed34 <__sfp>:
 800ed34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed36:	4607      	mov	r7, r0
 800ed38:	f7ff ffac 	bl	800ec94 <__sfp_lock_acquire>
 800ed3c:	4b1e      	ldr	r3, [pc, #120]	; (800edb8 <__sfp+0x84>)
 800ed3e:	681e      	ldr	r6, [r3, #0]
 800ed40:	69b3      	ldr	r3, [r6, #24]
 800ed42:	b913      	cbnz	r3, 800ed4a <__sfp+0x16>
 800ed44:	4630      	mov	r0, r6
 800ed46:	f7ff ffbd 	bl	800ecc4 <__sinit>
 800ed4a:	3648      	adds	r6, #72	; 0x48
 800ed4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ed50:	3b01      	subs	r3, #1
 800ed52:	d503      	bpl.n	800ed5c <__sfp+0x28>
 800ed54:	6833      	ldr	r3, [r6, #0]
 800ed56:	b30b      	cbz	r3, 800ed9c <__sfp+0x68>
 800ed58:	6836      	ldr	r6, [r6, #0]
 800ed5a:	e7f7      	b.n	800ed4c <__sfp+0x18>
 800ed5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ed60:	b9d5      	cbnz	r5, 800ed98 <__sfp+0x64>
 800ed62:	4b16      	ldr	r3, [pc, #88]	; (800edbc <__sfp+0x88>)
 800ed64:	60e3      	str	r3, [r4, #12]
 800ed66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ed6a:	6665      	str	r5, [r4, #100]	; 0x64
 800ed6c:	f000 fbba 	bl	800f4e4 <__retarget_lock_init_recursive>
 800ed70:	f7ff ff96 	bl	800eca0 <__sfp_lock_release>
 800ed74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ed78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ed7c:	6025      	str	r5, [r4, #0]
 800ed7e:	61a5      	str	r5, [r4, #24]
 800ed80:	2208      	movs	r2, #8
 800ed82:	4629      	mov	r1, r5
 800ed84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ed88:	f7fd f976 	bl	800c078 <memset>
 800ed8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ed90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ed94:	4620      	mov	r0, r4
 800ed96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed98:	3468      	adds	r4, #104	; 0x68
 800ed9a:	e7d9      	b.n	800ed50 <__sfp+0x1c>
 800ed9c:	2104      	movs	r1, #4
 800ed9e:	4638      	mov	r0, r7
 800eda0:	f7ff ff62 	bl	800ec68 <__sfmoreglue>
 800eda4:	4604      	mov	r4, r0
 800eda6:	6030      	str	r0, [r6, #0]
 800eda8:	2800      	cmp	r0, #0
 800edaa:	d1d5      	bne.n	800ed58 <__sfp+0x24>
 800edac:	f7ff ff78 	bl	800eca0 <__sfp_lock_release>
 800edb0:	230c      	movs	r3, #12
 800edb2:	603b      	str	r3, [r7, #0]
 800edb4:	e7ee      	b.n	800ed94 <__sfp+0x60>
 800edb6:	bf00      	nop
 800edb8:	08010a4c 	.word	0x08010a4c
 800edbc:	ffff0001 	.word	0xffff0001

0800edc0 <_fwalk_reent>:
 800edc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edc4:	4606      	mov	r6, r0
 800edc6:	4688      	mov	r8, r1
 800edc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800edcc:	2700      	movs	r7, #0
 800edce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800edd2:	f1b9 0901 	subs.w	r9, r9, #1
 800edd6:	d505      	bpl.n	800ede4 <_fwalk_reent+0x24>
 800edd8:	6824      	ldr	r4, [r4, #0]
 800edda:	2c00      	cmp	r4, #0
 800eddc:	d1f7      	bne.n	800edce <_fwalk_reent+0xe>
 800edde:	4638      	mov	r0, r7
 800ede0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ede4:	89ab      	ldrh	r3, [r5, #12]
 800ede6:	2b01      	cmp	r3, #1
 800ede8:	d907      	bls.n	800edfa <_fwalk_reent+0x3a>
 800edea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800edee:	3301      	adds	r3, #1
 800edf0:	d003      	beq.n	800edfa <_fwalk_reent+0x3a>
 800edf2:	4629      	mov	r1, r5
 800edf4:	4630      	mov	r0, r6
 800edf6:	47c0      	blx	r8
 800edf8:	4307      	orrs	r7, r0
 800edfa:	3568      	adds	r5, #104	; 0x68
 800edfc:	e7e9      	b.n	800edd2 <_fwalk_reent+0x12>

0800edfe <rshift>:
 800edfe:	6903      	ldr	r3, [r0, #16]
 800ee00:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ee04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ee08:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ee0c:	f100 0414 	add.w	r4, r0, #20
 800ee10:	dd45      	ble.n	800ee9e <rshift+0xa0>
 800ee12:	f011 011f 	ands.w	r1, r1, #31
 800ee16:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ee1a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ee1e:	d10c      	bne.n	800ee3a <rshift+0x3c>
 800ee20:	f100 0710 	add.w	r7, r0, #16
 800ee24:	4629      	mov	r1, r5
 800ee26:	42b1      	cmp	r1, r6
 800ee28:	d334      	bcc.n	800ee94 <rshift+0x96>
 800ee2a:	1a9b      	subs	r3, r3, r2
 800ee2c:	009b      	lsls	r3, r3, #2
 800ee2e:	1eea      	subs	r2, r5, #3
 800ee30:	4296      	cmp	r6, r2
 800ee32:	bf38      	it	cc
 800ee34:	2300      	movcc	r3, #0
 800ee36:	4423      	add	r3, r4
 800ee38:	e015      	b.n	800ee66 <rshift+0x68>
 800ee3a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ee3e:	f1c1 0820 	rsb	r8, r1, #32
 800ee42:	40cf      	lsrs	r7, r1
 800ee44:	f105 0e04 	add.w	lr, r5, #4
 800ee48:	46a1      	mov	r9, r4
 800ee4a:	4576      	cmp	r6, lr
 800ee4c:	46f4      	mov	ip, lr
 800ee4e:	d815      	bhi.n	800ee7c <rshift+0x7e>
 800ee50:	1a9b      	subs	r3, r3, r2
 800ee52:	009a      	lsls	r2, r3, #2
 800ee54:	3a04      	subs	r2, #4
 800ee56:	3501      	adds	r5, #1
 800ee58:	42ae      	cmp	r6, r5
 800ee5a:	bf38      	it	cc
 800ee5c:	2200      	movcc	r2, #0
 800ee5e:	18a3      	adds	r3, r4, r2
 800ee60:	50a7      	str	r7, [r4, r2]
 800ee62:	b107      	cbz	r7, 800ee66 <rshift+0x68>
 800ee64:	3304      	adds	r3, #4
 800ee66:	1b1a      	subs	r2, r3, r4
 800ee68:	42a3      	cmp	r3, r4
 800ee6a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ee6e:	bf08      	it	eq
 800ee70:	2300      	moveq	r3, #0
 800ee72:	6102      	str	r2, [r0, #16]
 800ee74:	bf08      	it	eq
 800ee76:	6143      	streq	r3, [r0, #20]
 800ee78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee7c:	f8dc c000 	ldr.w	ip, [ip]
 800ee80:	fa0c fc08 	lsl.w	ip, ip, r8
 800ee84:	ea4c 0707 	orr.w	r7, ip, r7
 800ee88:	f849 7b04 	str.w	r7, [r9], #4
 800ee8c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ee90:	40cf      	lsrs	r7, r1
 800ee92:	e7da      	b.n	800ee4a <rshift+0x4c>
 800ee94:	f851 cb04 	ldr.w	ip, [r1], #4
 800ee98:	f847 cf04 	str.w	ip, [r7, #4]!
 800ee9c:	e7c3      	b.n	800ee26 <rshift+0x28>
 800ee9e:	4623      	mov	r3, r4
 800eea0:	e7e1      	b.n	800ee66 <rshift+0x68>

0800eea2 <__hexdig_fun>:
 800eea2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800eea6:	2b09      	cmp	r3, #9
 800eea8:	d802      	bhi.n	800eeb0 <__hexdig_fun+0xe>
 800eeaa:	3820      	subs	r0, #32
 800eeac:	b2c0      	uxtb	r0, r0
 800eeae:	4770      	bx	lr
 800eeb0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800eeb4:	2b05      	cmp	r3, #5
 800eeb6:	d801      	bhi.n	800eebc <__hexdig_fun+0x1a>
 800eeb8:	3847      	subs	r0, #71	; 0x47
 800eeba:	e7f7      	b.n	800eeac <__hexdig_fun+0xa>
 800eebc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800eec0:	2b05      	cmp	r3, #5
 800eec2:	d801      	bhi.n	800eec8 <__hexdig_fun+0x26>
 800eec4:	3827      	subs	r0, #39	; 0x27
 800eec6:	e7f1      	b.n	800eeac <__hexdig_fun+0xa>
 800eec8:	2000      	movs	r0, #0
 800eeca:	4770      	bx	lr

0800eecc <__gethex>:
 800eecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eed0:	ed2d 8b02 	vpush	{d8}
 800eed4:	b089      	sub	sp, #36	; 0x24
 800eed6:	ee08 0a10 	vmov	s16, r0
 800eeda:	9304      	str	r3, [sp, #16]
 800eedc:	4bbc      	ldr	r3, [pc, #752]	; (800f1d0 <__gethex+0x304>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	9301      	str	r3, [sp, #4]
 800eee2:	4618      	mov	r0, r3
 800eee4:	468b      	mov	fp, r1
 800eee6:	4690      	mov	r8, r2
 800eee8:	f7f1 f982 	bl	80001f0 <strlen>
 800eeec:	9b01      	ldr	r3, [sp, #4]
 800eeee:	f8db 2000 	ldr.w	r2, [fp]
 800eef2:	4403      	add	r3, r0
 800eef4:	4682      	mov	sl, r0
 800eef6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800eefa:	9305      	str	r3, [sp, #20]
 800eefc:	1c93      	adds	r3, r2, #2
 800eefe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ef02:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ef06:	32fe      	adds	r2, #254	; 0xfe
 800ef08:	18d1      	adds	r1, r2, r3
 800ef0a:	461f      	mov	r7, r3
 800ef0c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ef10:	9100      	str	r1, [sp, #0]
 800ef12:	2830      	cmp	r0, #48	; 0x30
 800ef14:	d0f8      	beq.n	800ef08 <__gethex+0x3c>
 800ef16:	f7ff ffc4 	bl	800eea2 <__hexdig_fun>
 800ef1a:	4604      	mov	r4, r0
 800ef1c:	2800      	cmp	r0, #0
 800ef1e:	d13a      	bne.n	800ef96 <__gethex+0xca>
 800ef20:	9901      	ldr	r1, [sp, #4]
 800ef22:	4652      	mov	r2, sl
 800ef24:	4638      	mov	r0, r7
 800ef26:	f7fd ff92 	bl	800ce4e <strncmp>
 800ef2a:	4605      	mov	r5, r0
 800ef2c:	2800      	cmp	r0, #0
 800ef2e:	d168      	bne.n	800f002 <__gethex+0x136>
 800ef30:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ef34:	eb07 060a 	add.w	r6, r7, sl
 800ef38:	f7ff ffb3 	bl	800eea2 <__hexdig_fun>
 800ef3c:	2800      	cmp	r0, #0
 800ef3e:	d062      	beq.n	800f006 <__gethex+0x13a>
 800ef40:	4633      	mov	r3, r6
 800ef42:	7818      	ldrb	r0, [r3, #0]
 800ef44:	2830      	cmp	r0, #48	; 0x30
 800ef46:	461f      	mov	r7, r3
 800ef48:	f103 0301 	add.w	r3, r3, #1
 800ef4c:	d0f9      	beq.n	800ef42 <__gethex+0x76>
 800ef4e:	f7ff ffa8 	bl	800eea2 <__hexdig_fun>
 800ef52:	2301      	movs	r3, #1
 800ef54:	fab0 f480 	clz	r4, r0
 800ef58:	0964      	lsrs	r4, r4, #5
 800ef5a:	4635      	mov	r5, r6
 800ef5c:	9300      	str	r3, [sp, #0]
 800ef5e:	463a      	mov	r2, r7
 800ef60:	4616      	mov	r6, r2
 800ef62:	3201      	adds	r2, #1
 800ef64:	7830      	ldrb	r0, [r6, #0]
 800ef66:	f7ff ff9c 	bl	800eea2 <__hexdig_fun>
 800ef6a:	2800      	cmp	r0, #0
 800ef6c:	d1f8      	bne.n	800ef60 <__gethex+0x94>
 800ef6e:	9901      	ldr	r1, [sp, #4]
 800ef70:	4652      	mov	r2, sl
 800ef72:	4630      	mov	r0, r6
 800ef74:	f7fd ff6b 	bl	800ce4e <strncmp>
 800ef78:	b980      	cbnz	r0, 800ef9c <__gethex+0xd0>
 800ef7a:	b94d      	cbnz	r5, 800ef90 <__gethex+0xc4>
 800ef7c:	eb06 050a 	add.w	r5, r6, sl
 800ef80:	462a      	mov	r2, r5
 800ef82:	4616      	mov	r6, r2
 800ef84:	3201      	adds	r2, #1
 800ef86:	7830      	ldrb	r0, [r6, #0]
 800ef88:	f7ff ff8b 	bl	800eea2 <__hexdig_fun>
 800ef8c:	2800      	cmp	r0, #0
 800ef8e:	d1f8      	bne.n	800ef82 <__gethex+0xb6>
 800ef90:	1bad      	subs	r5, r5, r6
 800ef92:	00ad      	lsls	r5, r5, #2
 800ef94:	e004      	b.n	800efa0 <__gethex+0xd4>
 800ef96:	2400      	movs	r4, #0
 800ef98:	4625      	mov	r5, r4
 800ef9a:	e7e0      	b.n	800ef5e <__gethex+0x92>
 800ef9c:	2d00      	cmp	r5, #0
 800ef9e:	d1f7      	bne.n	800ef90 <__gethex+0xc4>
 800efa0:	7833      	ldrb	r3, [r6, #0]
 800efa2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800efa6:	2b50      	cmp	r3, #80	; 0x50
 800efa8:	d13b      	bne.n	800f022 <__gethex+0x156>
 800efaa:	7873      	ldrb	r3, [r6, #1]
 800efac:	2b2b      	cmp	r3, #43	; 0x2b
 800efae:	d02c      	beq.n	800f00a <__gethex+0x13e>
 800efb0:	2b2d      	cmp	r3, #45	; 0x2d
 800efb2:	d02e      	beq.n	800f012 <__gethex+0x146>
 800efb4:	1c71      	adds	r1, r6, #1
 800efb6:	f04f 0900 	mov.w	r9, #0
 800efba:	7808      	ldrb	r0, [r1, #0]
 800efbc:	f7ff ff71 	bl	800eea2 <__hexdig_fun>
 800efc0:	1e43      	subs	r3, r0, #1
 800efc2:	b2db      	uxtb	r3, r3
 800efc4:	2b18      	cmp	r3, #24
 800efc6:	d82c      	bhi.n	800f022 <__gethex+0x156>
 800efc8:	f1a0 0210 	sub.w	r2, r0, #16
 800efcc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800efd0:	f7ff ff67 	bl	800eea2 <__hexdig_fun>
 800efd4:	1e43      	subs	r3, r0, #1
 800efd6:	b2db      	uxtb	r3, r3
 800efd8:	2b18      	cmp	r3, #24
 800efda:	d91d      	bls.n	800f018 <__gethex+0x14c>
 800efdc:	f1b9 0f00 	cmp.w	r9, #0
 800efe0:	d000      	beq.n	800efe4 <__gethex+0x118>
 800efe2:	4252      	negs	r2, r2
 800efe4:	4415      	add	r5, r2
 800efe6:	f8cb 1000 	str.w	r1, [fp]
 800efea:	b1e4      	cbz	r4, 800f026 <__gethex+0x15a>
 800efec:	9b00      	ldr	r3, [sp, #0]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	bf14      	ite	ne
 800eff2:	2700      	movne	r7, #0
 800eff4:	2706      	moveq	r7, #6
 800eff6:	4638      	mov	r0, r7
 800eff8:	b009      	add	sp, #36	; 0x24
 800effa:	ecbd 8b02 	vpop	{d8}
 800effe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f002:	463e      	mov	r6, r7
 800f004:	4625      	mov	r5, r4
 800f006:	2401      	movs	r4, #1
 800f008:	e7ca      	b.n	800efa0 <__gethex+0xd4>
 800f00a:	f04f 0900 	mov.w	r9, #0
 800f00e:	1cb1      	adds	r1, r6, #2
 800f010:	e7d3      	b.n	800efba <__gethex+0xee>
 800f012:	f04f 0901 	mov.w	r9, #1
 800f016:	e7fa      	b.n	800f00e <__gethex+0x142>
 800f018:	230a      	movs	r3, #10
 800f01a:	fb03 0202 	mla	r2, r3, r2, r0
 800f01e:	3a10      	subs	r2, #16
 800f020:	e7d4      	b.n	800efcc <__gethex+0x100>
 800f022:	4631      	mov	r1, r6
 800f024:	e7df      	b.n	800efe6 <__gethex+0x11a>
 800f026:	1bf3      	subs	r3, r6, r7
 800f028:	3b01      	subs	r3, #1
 800f02a:	4621      	mov	r1, r4
 800f02c:	2b07      	cmp	r3, #7
 800f02e:	dc0b      	bgt.n	800f048 <__gethex+0x17c>
 800f030:	ee18 0a10 	vmov	r0, s16
 800f034:	f000 faf8 	bl	800f628 <_Balloc>
 800f038:	4604      	mov	r4, r0
 800f03a:	b940      	cbnz	r0, 800f04e <__gethex+0x182>
 800f03c:	4b65      	ldr	r3, [pc, #404]	; (800f1d4 <__gethex+0x308>)
 800f03e:	4602      	mov	r2, r0
 800f040:	21de      	movs	r1, #222	; 0xde
 800f042:	4865      	ldr	r0, [pc, #404]	; (800f1d8 <__gethex+0x30c>)
 800f044:	f001 fb52 	bl	80106ec <__assert_func>
 800f048:	3101      	adds	r1, #1
 800f04a:	105b      	asrs	r3, r3, #1
 800f04c:	e7ee      	b.n	800f02c <__gethex+0x160>
 800f04e:	f100 0914 	add.w	r9, r0, #20
 800f052:	f04f 0b00 	mov.w	fp, #0
 800f056:	f1ca 0301 	rsb	r3, sl, #1
 800f05a:	f8cd 9008 	str.w	r9, [sp, #8]
 800f05e:	f8cd b000 	str.w	fp, [sp]
 800f062:	9306      	str	r3, [sp, #24]
 800f064:	42b7      	cmp	r7, r6
 800f066:	d340      	bcc.n	800f0ea <__gethex+0x21e>
 800f068:	9802      	ldr	r0, [sp, #8]
 800f06a:	9b00      	ldr	r3, [sp, #0]
 800f06c:	f840 3b04 	str.w	r3, [r0], #4
 800f070:	eba0 0009 	sub.w	r0, r0, r9
 800f074:	1080      	asrs	r0, r0, #2
 800f076:	0146      	lsls	r6, r0, #5
 800f078:	6120      	str	r0, [r4, #16]
 800f07a:	4618      	mov	r0, r3
 800f07c:	f000 fbca 	bl	800f814 <__hi0bits>
 800f080:	1a30      	subs	r0, r6, r0
 800f082:	f8d8 6000 	ldr.w	r6, [r8]
 800f086:	42b0      	cmp	r0, r6
 800f088:	dd63      	ble.n	800f152 <__gethex+0x286>
 800f08a:	1b87      	subs	r7, r0, r6
 800f08c:	4639      	mov	r1, r7
 800f08e:	4620      	mov	r0, r4
 800f090:	f000 ff64 	bl	800ff5c <__any_on>
 800f094:	4682      	mov	sl, r0
 800f096:	b1a8      	cbz	r0, 800f0c4 <__gethex+0x1f8>
 800f098:	1e7b      	subs	r3, r7, #1
 800f09a:	1159      	asrs	r1, r3, #5
 800f09c:	f003 021f 	and.w	r2, r3, #31
 800f0a0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f0a4:	f04f 0a01 	mov.w	sl, #1
 800f0a8:	fa0a f202 	lsl.w	r2, sl, r2
 800f0ac:	420a      	tst	r2, r1
 800f0ae:	d009      	beq.n	800f0c4 <__gethex+0x1f8>
 800f0b0:	4553      	cmp	r3, sl
 800f0b2:	dd05      	ble.n	800f0c0 <__gethex+0x1f4>
 800f0b4:	1eb9      	subs	r1, r7, #2
 800f0b6:	4620      	mov	r0, r4
 800f0b8:	f000 ff50 	bl	800ff5c <__any_on>
 800f0bc:	2800      	cmp	r0, #0
 800f0be:	d145      	bne.n	800f14c <__gethex+0x280>
 800f0c0:	f04f 0a02 	mov.w	sl, #2
 800f0c4:	4639      	mov	r1, r7
 800f0c6:	4620      	mov	r0, r4
 800f0c8:	f7ff fe99 	bl	800edfe <rshift>
 800f0cc:	443d      	add	r5, r7
 800f0ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f0d2:	42ab      	cmp	r3, r5
 800f0d4:	da4c      	bge.n	800f170 <__gethex+0x2a4>
 800f0d6:	ee18 0a10 	vmov	r0, s16
 800f0da:	4621      	mov	r1, r4
 800f0dc:	f000 fae4 	bl	800f6a8 <_Bfree>
 800f0e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	6013      	str	r3, [r2, #0]
 800f0e6:	27a3      	movs	r7, #163	; 0xa3
 800f0e8:	e785      	b.n	800eff6 <__gethex+0x12a>
 800f0ea:	1e73      	subs	r3, r6, #1
 800f0ec:	9a05      	ldr	r2, [sp, #20]
 800f0ee:	9303      	str	r3, [sp, #12]
 800f0f0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f0f4:	4293      	cmp	r3, r2
 800f0f6:	d019      	beq.n	800f12c <__gethex+0x260>
 800f0f8:	f1bb 0f20 	cmp.w	fp, #32
 800f0fc:	d107      	bne.n	800f10e <__gethex+0x242>
 800f0fe:	9b02      	ldr	r3, [sp, #8]
 800f100:	9a00      	ldr	r2, [sp, #0]
 800f102:	f843 2b04 	str.w	r2, [r3], #4
 800f106:	9302      	str	r3, [sp, #8]
 800f108:	2300      	movs	r3, #0
 800f10a:	9300      	str	r3, [sp, #0]
 800f10c:	469b      	mov	fp, r3
 800f10e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f112:	f7ff fec6 	bl	800eea2 <__hexdig_fun>
 800f116:	9b00      	ldr	r3, [sp, #0]
 800f118:	f000 000f 	and.w	r0, r0, #15
 800f11c:	fa00 f00b 	lsl.w	r0, r0, fp
 800f120:	4303      	orrs	r3, r0
 800f122:	9300      	str	r3, [sp, #0]
 800f124:	f10b 0b04 	add.w	fp, fp, #4
 800f128:	9b03      	ldr	r3, [sp, #12]
 800f12a:	e00d      	b.n	800f148 <__gethex+0x27c>
 800f12c:	9b03      	ldr	r3, [sp, #12]
 800f12e:	9a06      	ldr	r2, [sp, #24]
 800f130:	4413      	add	r3, r2
 800f132:	42bb      	cmp	r3, r7
 800f134:	d3e0      	bcc.n	800f0f8 <__gethex+0x22c>
 800f136:	4618      	mov	r0, r3
 800f138:	9901      	ldr	r1, [sp, #4]
 800f13a:	9307      	str	r3, [sp, #28]
 800f13c:	4652      	mov	r2, sl
 800f13e:	f7fd fe86 	bl	800ce4e <strncmp>
 800f142:	9b07      	ldr	r3, [sp, #28]
 800f144:	2800      	cmp	r0, #0
 800f146:	d1d7      	bne.n	800f0f8 <__gethex+0x22c>
 800f148:	461e      	mov	r6, r3
 800f14a:	e78b      	b.n	800f064 <__gethex+0x198>
 800f14c:	f04f 0a03 	mov.w	sl, #3
 800f150:	e7b8      	b.n	800f0c4 <__gethex+0x1f8>
 800f152:	da0a      	bge.n	800f16a <__gethex+0x29e>
 800f154:	1a37      	subs	r7, r6, r0
 800f156:	4621      	mov	r1, r4
 800f158:	ee18 0a10 	vmov	r0, s16
 800f15c:	463a      	mov	r2, r7
 800f15e:	f000 fcbf 	bl	800fae0 <__lshift>
 800f162:	1bed      	subs	r5, r5, r7
 800f164:	4604      	mov	r4, r0
 800f166:	f100 0914 	add.w	r9, r0, #20
 800f16a:	f04f 0a00 	mov.w	sl, #0
 800f16e:	e7ae      	b.n	800f0ce <__gethex+0x202>
 800f170:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f174:	42a8      	cmp	r0, r5
 800f176:	dd72      	ble.n	800f25e <__gethex+0x392>
 800f178:	1b45      	subs	r5, r0, r5
 800f17a:	42ae      	cmp	r6, r5
 800f17c:	dc36      	bgt.n	800f1ec <__gethex+0x320>
 800f17e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f182:	2b02      	cmp	r3, #2
 800f184:	d02a      	beq.n	800f1dc <__gethex+0x310>
 800f186:	2b03      	cmp	r3, #3
 800f188:	d02c      	beq.n	800f1e4 <__gethex+0x318>
 800f18a:	2b01      	cmp	r3, #1
 800f18c:	d115      	bne.n	800f1ba <__gethex+0x2ee>
 800f18e:	42ae      	cmp	r6, r5
 800f190:	d113      	bne.n	800f1ba <__gethex+0x2ee>
 800f192:	2e01      	cmp	r6, #1
 800f194:	d10b      	bne.n	800f1ae <__gethex+0x2e2>
 800f196:	9a04      	ldr	r2, [sp, #16]
 800f198:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f19c:	6013      	str	r3, [r2, #0]
 800f19e:	2301      	movs	r3, #1
 800f1a0:	6123      	str	r3, [r4, #16]
 800f1a2:	f8c9 3000 	str.w	r3, [r9]
 800f1a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f1a8:	2762      	movs	r7, #98	; 0x62
 800f1aa:	601c      	str	r4, [r3, #0]
 800f1ac:	e723      	b.n	800eff6 <__gethex+0x12a>
 800f1ae:	1e71      	subs	r1, r6, #1
 800f1b0:	4620      	mov	r0, r4
 800f1b2:	f000 fed3 	bl	800ff5c <__any_on>
 800f1b6:	2800      	cmp	r0, #0
 800f1b8:	d1ed      	bne.n	800f196 <__gethex+0x2ca>
 800f1ba:	ee18 0a10 	vmov	r0, s16
 800f1be:	4621      	mov	r1, r4
 800f1c0:	f000 fa72 	bl	800f6a8 <_Bfree>
 800f1c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	6013      	str	r3, [r2, #0]
 800f1ca:	2750      	movs	r7, #80	; 0x50
 800f1cc:	e713      	b.n	800eff6 <__gethex+0x12a>
 800f1ce:	bf00      	nop
 800f1d0:	08010c40 	.word	0x08010c40
 800f1d4:	08010b63 	.word	0x08010b63
 800f1d8:	08010bd4 	.word	0x08010bd4
 800f1dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d1eb      	bne.n	800f1ba <__gethex+0x2ee>
 800f1e2:	e7d8      	b.n	800f196 <__gethex+0x2ca>
 800f1e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d1d5      	bne.n	800f196 <__gethex+0x2ca>
 800f1ea:	e7e6      	b.n	800f1ba <__gethex+0x2ee>
 800f1ec:	1e6f      	subs	r7, r5, #1
 800f1ee:	f1ba 0f00 	cmp.w	sl, #0
 800f1f2:	d131      	bne.n	800f258 <__gethex+0x38c>
 800f1f4:	b127      	cbz	r7, 800f200 <__gethex+0x334>
 800f1f6:	4639      	mov	r1, r7
 800f1f8:	4620      	mov	r0, r4
 800f1fa:	f000 feaf 	bl	800ff5c <__any_on>
 800f1fe:	4682      	mov	sl, r0
 800f200:	117b      	asrs	r3, r7, #5
 800f202:	2101      	movs	r1, #1
 800f204:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f208:	f007 071f 	and.w	r7, r7, #31
 800f20c:	fa01 f707 	lsl.w	r7, r1, r7
 800f210:	421f      	tst	r7, r3
 800f212:	4629      	mov	r1, r5
 800f214:	4620      	mov	r0, r4
 800f216:	bf18      	it	ne
 800f218:	f04a 0a02 	orrne.w	sl, sl, #2
 800f21c:	1b76      	subs	r6, r6, r5
 800f21e:	f7ff fdee 	bl	800edfe <rshift>
 800f222:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f226:	2702      	movs	r7, #2
 800f228:	f1ba 0f00 	cmp.w	sl, #0
 800f22c:	d048      	beq.n	800f2c0 <__gethex+0x3f4>
 800f22e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f232:	2b02      	cmp	r3, #2
 800f234:	d015      	beq.n	800f262 <__gethex+0x396>
 800f236:	2b03      	cmp	r3, #3
 800f238:	d017      	beq.n	800f26a <__gethex+0x39e>
 800f23a:	2b01      	cmp	r3, #1
 800f23c:	d109      	bne.n	800f252 <__gethex+0x386>
 800f23e:	f01a 0f02 	tst.w	sl, #2
 800f242:	d006      	beq.n	800f252 <__gethex+0x386>
 800f244:	f8d9 0000 	ldr.w	r0, [r9]
 800f248:	ea4a 0a00 	orr.w	sl, sl, r0
 800f24c:	f01a 0f01 	tst.w	sl, #1
 800f250:	d10e      	bne.n	800f270 <__gethex+0x3a4>
 800f252:	f047 0710 	orr.w	r7, r7, #16
 800f256:	e033      	b.n	800f2c0 <__gethex+0x3f4>
 800f258:	f04f 0a01 	mov.w	sl, #1
 800f25c:	e7d0      	b.n	800f200 <__gethex+0x334>
 800f25e:	2701      	movs	r7, #1
 800f260:	e7e2      	b.n	800f228 <__gethex+0x35c>
 800f262:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f264:	f1c3 0301 	rsb	r3, r3, #1
 800f268:	9315      	str	r3, [sp, #84]	; 0x54
 800f26a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d0f0      	beq.n	800f252 <__gethex+0x386>
 800f270:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f274:	f104 0314 	add.w	r3, r4, #20
 800f278:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f27c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f280:	f04f 0c00 	mov.w	ip, #0
 800f284:	4618      	mov	r0, r3
 800f286:	f853 2b04 	ldr.w	r2, [r3], #4
 800f28a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f28e:	d01c      	beq.n	800f2ca <__gethex+0x3fe>
 800f290:	3201      	adds	r2, #1
 800f292:	6002      	str	r2, [r0, #0]
 800f294:	2f02      	cmp	r7, #2
 800f296:	f104 0314 	add.w	r3, r4, #20
 800f29a:	d13f      	bne.n	800f31c <__gethex+0x450>
 800f29c:	f8d8 2000 	ldr.w	r2, [r8]
 800f2a0:	3a01      	subs	r2, #1
 800f2a2:	42b2      	cmp	r2, r6
 800f2a4:	d10a      	bne.n	800f2bc <__gethex+0x3f0>
 800f2a6:	1171      	asrs	r1, r6, #5
 800f2a8:	2201      	movs	r2, #1
 800f2aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f2ae:	f006 061f 	and.w	r6, r6, #31
 800f2b2:	fa02 f606 	lsl.w	r6, r2, r6
 800f2b6:	421e      	tst	r6, r3
 800f2b8:	bf18      	it	ne
 800f2ba:	4617      	movne	r7, r2
 800f2bc:	f047 0720 	orr.w	r7, r7, #32
 800f2c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f2c2:	601c      	str	r4, [r3, #0]
 800f2c4:	9b04      	ldr	r3, [sp, #16]
 800f2c6:	601d      	str	r5, [r3, #0]
 800f2c8:	e695      	b.n	800eff6 <__gethex+0x12a>
 800f2ca:	4299      	cmp	r1, r3
 800f2cc:	f843 cc04 	str.w	ip, [r3, #-4]
 800f2d0:	d8d8      	bhi.n	800f284 <__gethex+0x3b8>
 800f2d2:	68a3      	ldr	r3, [r4, #8]
 800f2d4:	459b      	cmp	fp, r3
 800f2d6:	db19      	blt.n	800f30c <__gethex+0x440>
 800f2d8:	6861      	ldr	r1, [r4, #4]
 800f2da:	ee18 0a10 	vmov	r0, s16
 800f2de:	3101      	adds	r1, #1
 800f2e0:	f000 f9a2 	bl	800f628 <_Balloc>
 800f2e4:	4681      	mov	r9, r0
 800f2e6:	b918      	cbnz	r0, 800f2f0 <__gethex+0x424>
 800f2e8:	4b1a      	ldr	r3, [pc, #104]	; (800f354 <__gethex+0x488>)
 800f2ea:	4602      	mov	r2, r0
 800f2ec:	2184      	movs	r1, #132	; 0x84
 800f2ee:	e6a8      	b.n	800f042 <__gethex+0x176>
 800f2f0:	6922      	ldr	r2, [r4, #16]
 800f2f2:	3202      	adds	r2, #2
 800f2f4:	f104 010c 	add.w	r1, r4, #12
 800f2f8:	0092      	lsls	r2, r2, #2
 800f2fa:	300c      	adds	r0, #12
 800f2fc:	f000 f986 	bl	800f60c <memcpy>
 800f300:	4621      	mov	r1, r4
 800f302:	ee18 0a10 	vmov	r0, s16
 800f306:	f000 f9cf 	bl	800f6a8 <_Bfree>
 800f30a:	464c      	mov	r4, r9
 800f30c:	6923      	ldr	r3, [r4, #16]
 800f30e:	1c5a      	adds	r2, r3, #1
 800f310:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f314:	6122      	str	r2, [r4, #16]
 800f316:	2201      	movs	r2, #1
 800f318:	615a      	str	r2, [r3, #20]
 800f31a:	e7bb      	b.n	800f294 <__gethex+0x3c8>
 800f31c:	6922      	ldr	r2, [r4, #16]
 800f31e:	455a      	cmp	r2, fp
 800f320:	dd0b      	ble.n	800f33a <__gethex+0x46e>
 800f322:	2101      	movs	r1, #1
 800f324:	4620      	mov	r0, r4
 800f326:	f7ff fd6a 	bl	800edfe <rshift>
 800f32a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f32e:	3501      	adds	r5, #1
 800f330:	42ab      	cmp	r3, r5
 800f332:	f6ff aed0 	blt.w	800f0d6 <__gethex+0x20a>
 800f336:	2701      	movs	r7, #1
 800f338:	e7c0      	b.n	800f2bc <__gethex+0x3f0>
 800f33a:	f016 061f 	ands.w	r6, r6, #31
 800f33e:	d0fa      	beq.n	800f336 <__gethex+0x46a>
 800f340:	449a      	add	sl, r3
 800f342:	f1c6 0620 	rsb	r6, r6, #32
 800f346:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800f34a:	f000 fa63 	bl	800f814 <__hi0bits>
 800f34e:	42b0      	cmp	r0, r6
 800f350:	dbe7      	blt.n	800f322 <__gethex+0x456>
 800f352:	e7f0      	b.n	800f336 <__gethex+0x46a>
 800f354:	08010b63 	.word	0x08010b63

0800f358 <L_shift>:
 800f358:	f1c2 0208 	rsb	r2, r2, #8
 800f35c:	0092      	lsls	r2, r2, #2
 800f35e:	b570      	push	{r4, r5, r6, lr}
 800f360:	f1c2 0620 	rsb	r6, r2, #32
 800f364:	6843      	ldr	r3, [r0, #4]
 800f366:	6804      	ldr	r4, [r0, #0]
 800f368:	fa03 f506 	lsl.w	r5, r3, r6
 800f36c:	432c      	orrs	r4, r5
 800f36e:	40d3      	lsrs	r3, r2
 800f370:	6004      	str	r4, [r0, #0]
 800f372:	f840 3f04 	str.w	r3, [r0, #4]!
 800f376:	4288      	cmp	r0, r1
 800f378:	d3f4      	bcc.n	800f364 <L_shift+0xc>
 800f37a:	bd70      	pop	{r4, r5, r6, pc}

0800f37c <__match>:
 800f37c:	b530      	push	{r4, r5, lr}
 800f37e:	6803      	ldr	r3, [r0, #0]
 800f380:	3301      	adds	r3, #1
 800f382:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f386:	b914      	cbnz	r4, 800f38e <__match+0x12>
 800f388:	6003      	str	r3, [r0, #0]
 800f38a:	2001      	movs	r0, #1
 800f38c:	bd30      	pop	{r4, r5, pc}
 800f38e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f392:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f396:	2d19      	cmp	r5, #25
 800f398:	bf98      	it	ls
 800f39a:	3220      	addls	r2, #32
 800f39c:	42a2      	cmp	r2, r4
 800f39e:	d0f0      	beq.n	800f382 <__match+0x6>
 800f3a0:	2000      	movs	r0, #0
 800f3a2:	e7f3      	b.n	800f38c <__match+0x10>

0800f3a4 <__hexnan>:
 800f3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3a8:	680b      	ldr	r3, [r1, #0]
 800f3aa:	6801      	ldr	r1, [r0, #0]
 800f3ac:	115e      	asrs	r6, r3, #5
 800f3ae:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f3b2:	f013 031f 	ands.w	r3, r3, #31
 800f3b6:	b087      	sub	sp, #28
 800f3b8:	bf18      	it	ne
 800f3ba:	3604      	addne	r6, #4
 800f3bc:	2500      	movs	r5, #0
 800f3be:	1f37      	subs	r7, r6, #4
 800f3c0:	4682      	mov	sl, r0
 800f3c2:	4690      	mov	r8, r2
 800f3c4:	9301      	str	r3, [sp, #4]
 800f3c6:	f846 5c04 	str.w	r5, [r6, #-4]
 800f3ca:	46b9      	mov	r9, r7
 800f3cc:	463c      	mov	r4, r7
 800f3ce:	9502      	str	r5, [sp, #8]
 800f3d0:	46ab      	mov	fp, r5
 800f3d2:	784a      	ldrb	r2, [r1, #1]
 800f3d4:	1c4b      	adds	r3, r1, #1
 800f3d6:	9303      	str	r3, [sp, #12]
 800f3d8:	b342      	cbz	r2, 800f42c <__hexnan+0x88>
 800f3da:	4610      	mov	r0, r2
 800f3dc:	9105      	str	r1, [sp, #20]
 800f3de:	9204      	str	r2, [sp, #16]
 800f3e0:	f7ff fd5f 	bl	800eea2 <__hexdig_fun>
 800f3e4:	2800      	cmp	r0, #0
 800f3e6:	d14f      	bne.n	800f488 <__hexnan+0xe4>
 800f3e8:	9a04      	ldr	r2, [sp, #16]
 800f3ea:	9905      	ldr	r1, [sp, #20]
 800f3ec:	2a20      	cmp	r2, #32
 800f3ee:	d818      	bhi.n	800f422 <__hexnan+0x7e>
 800f3f0:	9b02      	ldr	r3, [sp, #8]
 800f3f2:	459b      	cmp	fp, r3
 800f3f4:	dd13      	ble.n	800f41e <__hexnan+0x7a>
 800f3f6:	454c      	cmp	r4, r9
 800f3f8:	d206      	bcs.n	800f408 <__hexnan+0x64>
 800f3fa:	2d07      	cmp	r5, #7
 800f3fc:	dc04      	bgt.n	800f408 <__hexnan+0x64>
 800f3fe:	462a      	mov	r2, r5
 800f400:	4649      	mov	r1, r9
 800f402:	4620      	mov	r0, r4
 800f404:	f7ff ffa8 	bl	800f358 <L_shift>
 800f408:	4544      	cmp	r4, r8
 800f40a:	d950      	bls.n	800f4ae <__hexnan+0x10a>
 800f40c:	2300      	movs	r3, #0
 800f40e:	f1a4 0904 	sub.w	r9, r4, #4
 800f412:	f844 3c04 	str.w	r3, [r4, #-4]
 800f416:	f8cd b008 	str.w	fp, [sp, #8]
 800f41a:	464c      	mov	r4, r9
 800f41c:	461d      	mov	r5, r3
 800f41e:	9903      	ldr	r1, [sp, #12]
 800f420:	e7d7      	b.n	800f3d2 <__hexnan+0x2e>
 800f422:	2a29      	cmp	r2, #41	; 0x29
 800f424:	d156      	bne.n	800f4d4 <__hexnan+0x130>
 800f426:	3102      	adds	r1, #2
 800f428:	f8ca 1000 	str.w	r1, [sl]
 800f42c:	f1bb 0f00 	cmp.w	fp, #0
 800f430:	d050      	beq.n	800f4d4 <__hexnan+0x130>
 800f432:	454c      	cmp	r4, r9
 800f434:	d206      	bcs.n	800f444 <__hexnan+0xa0>
 800f436:	2d07      	cmp	r5, #7
 800f438:	dc04      	bgt.n	800f444 <__hexnan+0xa0>
 800f43a:	462a      	mov	r2, r5
 800f43c:	4649      	mov	r1, r9
 800f43e:	4620      	mov	r0, r4
 800f440:	f7ff ff8a 	bl	800f358 <L_shift>
 800f444:	4544      	cmp	r4, r8
 800f446:	d934      	bls.n	800f4b2 <__hexnan+0x10e>
 800f448:	f1a8 0204 	sub.w	r2, r8, #4
 800f44c:	4623      	mov	r3, r4
 800f44e:	f853 1b04 	ldr.w	r1, [r3], #4
 800f452:	f842 1f04 	str.w	r1, [r2, #4]!
 800f456:	429f      	cmp	r7, r3
 800f458:	d2f9      	bcs.n	800f44e <__hexnan+0xaa>
 800f45a:	1b3b      	subs	r3, r7, r4
 800f45c:	f023 0303 	bic.w	r3, r3, #3
 800f460:	3304      	adds	r3, #4
 800f462:	3401      	adds	r4, #1
 800f464:	3e03      	subs	r6, #3
 800f466:	42b4      	cmp	r4, r6
 800f468:	bf88      	it	hi
 800f46a:	2304      	movhi	r3, #4
 800f46c:	4443      	add	r3, r8
 800f46e:	2200      	movs	r2, #0
 800f470:	f843 2b04 	str.w	r2, [r3], #4
 800f474:	429f      	cmp	r7, r3
 800f476:	d2fb      	bcs.n	800f470 <__hexnan+0xcc>
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	b91b      	cbnz	r3, 800f484 <__hexnan+0xe0>
 800f47c:	4547      	cmp	r7, r8
 800f47e:	d127      	bne.n	800f4d0 <__hexnan+0x12c>
 800f480:	2301      	movs	r3, #1
 800f482:	603b      	str	r3, [r7, #0]
 800f484:	2005      	movs	r0, #5
 800f486:	e026      	b.n	800f4d6 <__hexnan+0x132>
 800f488:	3501      	adds	r5, #1
 800f48a:	2d08      	cmp	r5, #8
 800f48c:	f10b 0b01 	add.w	fp, fp, #1
 800f490:	dd06      	ble.n	800f4a0 <__hexnan+0xfc>
 800f492:	4544      	cmp	r4, r8
 800f494:	d9c3      	bls.n	800f41e <__hexnan+0x7a>
 800f496:	2300      	movs	r3, #0
 800f498:	f844 3c04 	str.w	r3, [r4, #-4]
 800f49c:	2501      	movs	r5, #1
 800f49e:	3c04      	subs	r4, #4
 800f4a0:	6822      	ldr	r2, [r4, #0]
 800f4a2:	f000 000f 	and.w	r0, r0, #15
 800f4a6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f4aa:	6022      	str	r2, [r4, #0]
 800f4ac:	e7b7      	b.n	800f41e <__hexnan+0x7a>
 800f4ae:	2508      	movs	r5, #8
 800f4b0:	e7b5      	b.n	800f41e <__hexnan+0x7a>
 800f4b2:	9b01      	ldr	r3, [sp, #4]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d0df      	beq.n	800f478 <__hexnan+0xd4>
 800f4b8:	f04f 32ff 	mov.w	r2, #4294967295
 800f4bc:	f1c3 0320 	rsb	r3, r3, #32
 800f4c0:	fa22 f303 	lsr.w	r3, r2, r3
 800f4c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f4c8:	401a      	ands	r2, r3
 800f4ca:	f846 2c04 	str.w	r2, [r6, #-4]
 800f4ce:	e7d3      	b.n	800f478 <__hexnan+0xd4>
 800f4d0:	3f04      	subs	r7, #4
 800f4d2:	e7d1      	b.n	800f478 <__hexnan+0xd4>
 800f4d4:	2004      	movs	r0, #4
 800f4d6:	b007      	add	sp, #28
 800f4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f4dc <_localeconv_r>:
 800f4dc:	4800      	ldr	r0, [pc, #0]	; (800f4e0 <_localeconv_r+0x4>)
 800f4de:	4770      	bx	lr
 800f4e0:	200002f0 	.word	0x200002f0

0800f4e4 <__retarget_lock_init_recursive>:
 800f4e4:	4770      	bx	lr

0800f4e6 <__retarget_lock_acquire_recursive>:
 800f4e6:	4770      	bx	lr

0800f4e8 <__retarget_lock_release_recursive>:
 800f4e8:	4770      	bx	lr
	...

0800f4ec <_lseek_r>:
 800f4ec:	b538      	push	{r3, r4, r5, lr}
 800f4ee:	4d07      	ldr	r5, [pc, #28]	; (800f50c <_lseek_r+0x20>)
 800f4f0:	4604      	mov	r4, r0
 800f4f2:	4608      	mov	r0, r1
 800f4f4:	4611      	mov	r1, r2
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	602a      	str	r2, [r5, #0]
 800f4fa:	461a      	mov	r2, r3
 800f4fc:	f7f3 f908 	bl	8002710 <_lseek>
 800f500:	1c43      	adds	r3, r0, #1
 800f502:	d102      	bne.n	800f50a <_lseek_r+0x1e>
 800f504:	682b      	ldr	r3, [r5, #0]
 800f506:	b103      	cbz	r3, 800f50a <_lseek_r+0x1e>
 800f508:	6023      	str	r3, [r4, #0]
 800f50a:	bd38      	pop	{r3, r4, r5, pc}
 800f50c:	20002c24 	.word	0x20002c24

0800f510 <__swhatbuf_r>:
 800f510:	b570      	push	{r4, r5, r6, lr}
 800f512:	460e      	mov	r6, r1
 800f514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f518:	2900      	cmp	r1, #0
 800f51a:	b096      	sub	sp, #88	; 0x58
 800f51c:	4614      	mov	r4, r2
 800f51e:	461d      	mov	r5, r3
 800f520:	da07      	bge.n	800f532 <__swhatbuf_r+0x22>
 800f522:	2300      	movs	r3, #0
 800f524:	602b      	str	r3, [r5, #0]
 800f526:	89b3      	ldrh	r3, [r6, #12]
 800f528:	061a      	lsls	r2, r3, #24
 800f52a:	d410      	bmi.n	800f54e <__swhatbuf_r+0x3e>
 800f52c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f530:	e00e      	b.n	800f550 <__swhatbuf_r+0x40>
 800f532:	466a      	mov	r2, sp
 800f534:	f001 f90a 	bl	801074c <_fstat_r>
 800f538:	2800      	cmp	r0, #0
 800f53a:	dbf2      	blt.n	800f522 <__swhatbuf_r+0x12>
 800f53c:	9a01      	ldr	r2, [sp, #4]
 800f53e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f542:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f546:	425a      	negs	r2, r3
 800f548:	415a      	adcs	r2, r3
 800f54a:	602a      	str	r2, [r5, #0]
 800f54c:	e7ee      	b.n	800f52c <__swhatbuf_r+0x1c>
 800f54e:	2340      	movs	r3, #64	; 0x40
 800f550:	2000      	movs	r0, #0
 800f552:	6023      	str	r3, [r4, #0]
 800f554:	b016      	add	sp, #88	; 0x58
 800f556:	bd70      	pop	{r4, r5, r6, pc}

0800f558 <__smakebuf_r>:
 800f558:	898b      	ldrh	r3, [r1, #12]
 800f55a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f55c:	079d      	lsls	r5, r3, #30
 800f55e:	4606      	mov	r6, r0
 800f560:	460c      	mov	r4, r1
 800f562:	d507      	bpl.n	800f574 <__smakebuf_r+0x1c>
 800f564:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f568:	6023      	str	r3, [r4, #0]
 800f56a:	6123      	str	r3, [r4, #16]
 800f56c:	2301      	movs	r3, #1
 800f56e:	6163      	str	r3, [r4, #20]
 800f570:	b002      	add	sp, #8
 800f572:	bd70      	pop	{r4, r5, r6, pc}
 800f574:	ab01      	add	r3, sp, #4
 800f576:	466a      	mov	r2, sp
 800f578:	f7ff ffca 	bl	800f510 <__swhatbuf_r>
 800f57c:	9900      	ldr	r1, [sp, #0]
 800f57e:	4605      	mov	r5, r0
 800f580:	4630      	mov	r0, r6
 800f582:	f000 fd6b 	bl	801005c <_malloc_r>
 800f586:	b948      	cbnz	r0, 800f59c <__smakebuf_r+0x44>
 800f588:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f58c:	059a      	lsls	r2, r3, #22
 800f58e:	d4ef      	bmi.n	800f570 <__smakebuf_r+0x18>
 800f590:	f023 0303 	bic.w	r3, r3, #3
 800f594:	f043 0302 	orr.w	r3, r3, #2
 800f598:	81a3      	strh	r3, [r4, #12]
 800f59a:	e7e3      	b.n	800f564 <__smakebuf_r+0xc>
 800f59c:	4b0d      	ldr	r3, [pc, #52]	; (800f5d4 <__smakebuf_r+0x7c>)
 800f59e:	62b3      	str	r3, [r6, #40]	; 0x28
 800f5a0:	89a3      	ldrh	r3, [r4, #12]
 800f5a2:	6020      	str	r0, [r4, #0]
 800f5a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5a8:	81a3      	strh	r3, [r4, #12]
 800f5aa:	9b00      	ldr	r3, [sp, #0]
 800f5ac:	6163      	str	r3, [r4, #20]
 800f5ae:	9b01      	ldr	r3, [sp, #4]
 800f5b0:	6120      	str	r0, [r4, #16]
 800f5b2:	b15b      	cbz	r3, 800f5cc <__smakebuf_r+0x74>
 800f5b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f5b8:	4630      	mov	r0, r6
 800f5ba:	f001 f8d9 	bl	8010770 <_isatty_r>
 800f5be:	b128      	cbz	r0, 800f5cc <__smakebuf_r+0x74>
 800f5c0:	89a3      	ldrh	r3, [r4, #12]
 800f5c2:	f023 0303 	bic.w	r3, r3, #3
 800f5c6:	f043 0301 	orr.w	r3, r3, #1
 800f5ca:	81a3      	strh	r3, [r4, #12]
 800f5cc:	89a0      	ldrh	r0, [r4, #12]
 800f5ce:	4305      	orrs	r5, r0
 800f5d0:	81a5      	strh	r5, [r4, #12]
 800f5d2:	e7cd      	b.n	800f570 <__smakebuf_r+0x18>
 800f5d4:	0800ec5d 	.word	0x0800ec5d

0800f5d8 <malloc>:
 800f5d8:	4b02      	ldr	r3, [pc, #8]	; (800f5e4 <malloc+0xc>)
 800f5da:	4601      	mov	r1, r0
 800f5dc:	6818      	ldr	r0, [r3, #0]
 800f5de:	f000 bd3d 	b.w	801005c <_malloc_r>
 800f5e2:	bf00      	nop
 800f5e4:	20000198 	.word	0x20000198

0800f5e8 <__ascii_mbtowc>:
 800f5e8:	b082      	sub	sp, #8
 800f5ea:	b901      	cbnz	r1, 800f5ee <__ascii_mbtowc+0x6>
 800f5ec:	a901      	add	r1, sp, #4
 800f5ee:	b142      	cbz	r2, 800f602 <__ascii_mbtowc+0x1a>
 800f5f0:	b14b      	cbz	r3, 800f606 <__ascii_mbtowc+0x1e>
 800f5f2:	7813      	ldrb	r3, [r2, #0]
 800f5f4:	600b      	str	r3, [r1, #0]
 800f5f6:	7812      	ldrb	r2, [r2, #0]
 800f5f8:	1e10      	subs	r0, r2, #0
 800f5fa:	bf18      	it	ne
 800f5fc:	2001      	movne	r0, #1
 800f5fe:	b002      	add	sp, #8
 800f600:	4770      	bx	lr
 800f602:	4610      	mov	r0, r2
 800f604:	e7fb      	b.n	800f5fe <__ascii_mbtowc+0x16>
 800f606:	f06f 0001 	mvn.w	r0, #1
 800f60a:	e7f8      	b.n	800f5fe <__ascii_mbtowc+0x16>

0800f60c <memcpy>:
 800f60c:	440a      	add	r2, r1
 800f60e:	4291      	cmp	r1, r2
 800f610:	f100 33ff 	add.w	r3, r0, #4294967295
 800f614:	d100      	bne.n	800f618 <memcpy+0xc>
 800f616:	4770      	bx	lr
 800f618:	b510      	push	{r4, lr}
 800f61a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f61e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f622:	4291      	cmp	r1, r2
 800f624:	d1f9      	bne.n	800f61a <memcpy+0xe>
 800f626:	bd10      	pop	{r4, pc}

0800f628 <_Balloc>:
 800f628:	b570      	push	{r4, r5, r6, lr}
 800f62a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f62c:	4604      	mov	r4, r0
 800f62e:	460d      	mov	r5, r1
 800f630:	b976      	cbnz	r6, 800f650 <_Balloc+0x28>
 800f632:	2010      	movs	r0, #16
 800f634:	f7ff ffd0 	bl	800f5d8 <malloc>
 800f638:	4602      	mov	r2, r0
 800f63a:	6260      	str	r0, [r4, #36]	; 0x24
 800f63c:	b920      	cbnz	r0, 800f648 <_Balloc+0x20>
 800f63e:	4b18      	ldr	r3, [pc, #96]	; (800f6a0 <_Balloc+0x78>)
 800f640:	4818      	ldr	r0, [pc, #96]	; (800f6a4 <_Balloc+0x7c>)
 800f642:	2166      	movs	r1, #102	; 0x66
 800f644:	f001 f852 	bl	80106ec <__assert_func>
 800f648:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f64c:	6006      	str	r6, [r0, #0]
 800f64e:	60c6      	str	r6, [r0, #12]
 800f650:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f652:	68f3      	ldr	r3, [r6, #12]
 800f654:	b183      	cbz	r3, 800f678 <_Balloc+0x50>
 800f656:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f658:	68db      	ldr	r3, [r3, #12]
 800f65a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f65e:	b9b8      	cbnz	r0, 800f690 <_Balloc+0x68>
 800f660:	2101      	movs	r1, #1
 800f662:	fa01 f605 	lsl.w	r6, r1, r5
 800f666:	1d72      	adds	r2, r6, #5
 800f668:	0092      	lsls	r2, r2, #2
 800f66a:	4620      	mov	r0, r4
 800f66c:	f000 fc97 	bl	800ff9e <_calloc_r>
 800f670:	b160      	cbz	r0, 800f68c <_Balloc+0x64>
 800f672:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f676:	e00e      	b.n	800f696 <_Balloc+0x6e>
 800f678:	2221      	movs	r2, #33	; 0x21
 800f67a:	2104      	movs	r1, #4
 800f67c:	4620      	mov	r0, r4
 800f67e:	f000 fc8e 	bl	800ff9e <_calloc_r>
 800f682:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f684:	60f0      	str	r0, [r6, #12]
 800f686:	68db      	ldr	r3, [r3, #12]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d1e4      	bne.n	800f656 <_Balloc+0x2e>
 800f68c:	2000      	movs	r0, #0
 800f68e:	bd70      	pop	{r4, r5, r6, pc}
 800f690:	6802      	ldr	r2, [r0, #0]
 800f692:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f696:	2300      	movs	r3, #0
 800f698:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f69c:	e7f7      	b.n	800f68e <_Balloc+0x66>
 800f69e:	bf00      	nop
 800f6a0:	08010aed 	.word	0x08010aed
 800f6a4:	08010c54 	.word	0x08010c54

0800f6a8 <_Bfree>:
 800f6a8:	b570      	push	{r4, r5, r6, lr}
 800f6aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f6ac:	4605      	mov	r5, r0
 800f6ae:	460c      	mov	r4, r1
 800f6b0:	b976      	cbnz	r6, 800f6d0 <_Bfree+0x28>
 800f6b2:	2010      	movs	r0, #16
 800f6b4:	f7ff ff90 	bl	800f5d8 <malloc>
 800f6b8:	4602      	mov	r2, r0
 800f6ba:	6268      	str	r0, [r5, #36]	; 0x24
 800f6bc:	b920      	cbnz	r0, 800f6c8 <_Bfree+0x20>
 800f6be:	4b09      	ldr	r3, [pc, #36]	; (800f6e4 <_Bfree+0x3c>)
 800f6c0:	4809      	ldr	r0, [pc, #36]	; (800f6e8 <_Bfree+0x40>)
 800f6c2:	218a      	movs	r1, #138	; 0x8a
 800f6c4:	f001 f812 	bl	80106ec <__assert_func>
 800f6c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f6cc:	6006      	str	r6, [r0, #0]
 800f6ce:	60c6      	str	r6, [r0, #12]
 800f6d0:	b13c      	cbz	r4, 800f6e2 <_Bfree+0x3a>
 800f6d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f6d4:	6862      	ldr	r2, [r4, #4]
 800f6d6:	68db      	ldr	r3, [r3, #12]
 800f6d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f6dc:	6021      	str	r1, [r4, #0]
 800f6de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f6e2:	bd70      	pop	{r4, r5, r6, pc}
 800f6e4:	08010aed 	.word	0x08010aed
 800f6e8:	08010c54 	.word	0x08010c54

0800f6ec <__multadd>:
 800f6ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6f0:	690e      	ldr	r6, [r1, #16]
 800f6f2:	4607      	mov	r7, r0
 800f6f4:	4698      	mov	r8, r3
 800f6f6:	460c      	mov	r4, r1
 800f6f8:	f101 0014 	add.w	r0, r1, #20
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	6805      	ldr	r5, [r0, #0]
 800f700:	b2a9      	uxth	r1, r5
 800f702:	fb02 8101 	mla	r1, r2, r1, r8
 800f706:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f70a:	0c2d      	lsrs	r5, r5, #16
 800f70c:	fb02 c505 	mla	r5, r2, r5, ip
 800f710:	b289      	uxth	r1, r1
 800f712:	3301      	adds	r3, #1
 800f714:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f718:	429e      	cmp	r6, r3
 800f71a:	f840 1b04 	str.w	r1, [r0], #4
 800f71e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800f722:	dcec      	bgt.n	800f6fe <__multadd+0x12>
 800f724:	f1b8 0f00 	cmp.w	r8, #0
 800f728:	d022      	beq.n	800f770 <__multadd+0x84>
 800f72a:	68a3      	ldr	r3, [r4, #8]
 800f72c:	42b3      	cmp	r3, r6
 800f72e:	dc19      	bgt.n	800f764 <__multadd+0x78>
 800f730:	6861      	ldr	r1, [r4, #4]
 800f732:	4638      	mov	r0, r7
 800f734:	3101      	adds	r1, #1
 800f736:	f7ff ff77 	bl	800f628 <_Balloc>
 800f73a:	4605      	mov	r5, r0
 800f73c:	b928      	cbnz	r0, 800f74a <__multadd+0x5e>
 800f73e:	4602      	mov	r2, r0
 800f740:	4b0d      	ldr	r3, [pc, #52]	; (800f778 <__multadd+0x8c>)
 800f742:	480e      	ldr	r0, [pc, #56]	; (800f77c <__multadd+0x90>)
 800f744:	21b5      	movs	r1, #181	; 0xb5
 800f746:	f000 ffd1 	bl	80106ec <__assert_func>
 800f74a:	6922      	ldr	r2, [r4, #16]
 800f74c:	3202      	adds	r2, #2
 800f74e:	f104 010c 	add.w	r1, r4, #12
 800f752:	0092      	lsls	r2, r2, #2
 800f754:	300c      	adds	r0, #12
 800f756:	f7ff ff59 	bl	800f60c <memcpy>
 800f75a:	4621      	mov	r1, r4
 800f75c:	4638      	mov	r0, r7
 800f75e:	f7ff ffa3 	bl	800f6a8 <_Bfree>
 800f762:	462c      	mov	r4, r5
 800f764:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f768:	3601      	adds	r6, #1
 800f76a:	f8c3 8014 	str.w	r8, [r3, #20]
 800f76e:	6126      	str	r6, [r4, #16]
 800f770:	4620      	mov	r0, r4
 800f772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f776:	bf00      	nop
 800f778:	08010b63 	.word	0x08010b63
 800f77c:	08010c54 	.word	0x08010c54

0800f780 <__s2b>:
 800f780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f784:	460c      	mov	r4, r1
 800f786:	4615      	mov	r5, r2
 800f788:	461f      	mov	r7, r3
 800f78a:	2209      	movs	r2, #9
 800f78c:	3308      	adds	r3, #8
 800f78e:	4606      	mov	r6, r0
 800f790:	fb93 f3f2 	sdiv	r3, r3, r2
 800f794:	2100      	movs	r1, #0
 800f796:	2201      	movs	r2, #1
 800f798:	429a      	cmp	r2, r3
 800f79a:	db09      	blt.n	800f7b0 <__s2b+0x30>
 800f79c:	4630      	mov	r0, r6
 800f79e:	f7ff ff43 	bl	800f628 <_Balloc>
 800f7a2:	b940      	cbnz	r0, 800f7b6 <__s2b+0x36>
 800f7a4:	4602      	mov	r2, r0
 800f7a6:	4b19      	ldr	r3, [pc, #100]	; (800f80c <__s2b+0x8c>)
 800f7a8:	4819      	ldr	r0, [pc, #100]	; (800f810 <__s2b+0x90>)
 800f7aa:	21ce      	movs	r1, #206	; 0xce
 800f7ac:	f000 ff9e 	bl	80106ec <__assert_func>
 800f7b0:	0052      	lsls	r2, r2, #1
 800f7b2:	3101      	adds	r1, #1
 800f7b4:	e7f0      	b.n	800f798 <__s2b+0x18>
 800f7b6:	9b08      	ldr	r3, [sp, #32]
 800f7b8:	6143      	str	r3, [r0, #20]
 800f7ba:	2d09      	cmp	r5, #9
 800f7bc:	f04f 0301 	mov.w	r3, #1
 800f7c0:	6103      	str	r3, [r0, #16]
 800f7c2:	dd16      	ble.n	800f7f2 <__s2b+0x72>
 800f7c4:	f104 0909 	add.w	r9, r4, #9
 800f7c8:	46c8      	mov	r8, r9
 800f7ca:	442c      	add	r4, r5
 800f7cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f7d0:	4601      	mov	r1, r0
 800f7d2:	3b30      	subs	r3, #48	; 0x30
 800f7d4:	220a      	movs	r2, #10
 800f7d6:	4630      	mov	r0, r6
 800f7d8:	f7ff ff88 	bl	800f6ec <__multadd>
 800f7dc:	45a0      	cmp	r8, r4
 800f7de:	d1f5      	bne.n	800f7cc <__s2b+0x4c>
 800f7e0:	f1a5 0408 	sub.w	r4, r5, #8
 800f7e4:	444c      	add	r4, r9
 800f7e6:	1b2d      	subs	r5, r5, r4
 800f7e8:	1963      	adds	r3, r4, r5
 800f7ea:	42bb      	cmp	r3, r7
 800f7ec:	db04      	blt.n	800f7f8 <__s2b+0x78>
 800f7ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7f2:	340a      	adds	r4, #10
 800f7f4:	2509      	movs	r5, #9
 800f7f6:	e7f6      	b.n	800f7e6 <__s2b+0x66>
 800f7f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f7fc:	4601      	mov	r1, r0
 800f7fe:	3b30      	subs	r3, #48	; 0x30
 800f800:	220a      	movs	r2, #10
 800f802:	4630      	mov	r0, r6
 800f804:	f7ff ff72 	bl	800f6ec <__multadd>
 800f808:	e7ee      	b.n	800f7e8 <__s2b+0x68>
 800f80a:	bf00      	nop
 800f80c:	08010b63 	.word	0x08010b63
 800f810:	08010c54 	.word	0x08010c54

0800f814 <__hi0bits>:
 800f814:	0c03      	lsrs	r3, r0, #16
 800f816:	041b      	lsls	r3, r3, #16
 800f818:	b9d3      	cbnz	r3, 800f850 <__hi0bits+0x3c>
 800f81a:	0400      	lsls	r0, r0, #16
 800f81c:	2310      	movs	r3, #16
 800f81e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f822:	bf04      	itt	eq
 800f824:	0200      	lsleq	r0, r0, #8
 800f826:	3308      	addeq	r3, #8
 800f828:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f82c:	bf04      	itt	eq
 800f82e:	0100      	lsleq	r0, r0, #4
 800f830:	3304      	addeq	r3, #4
 800f832:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f836:	bf04      	itt	eq
 800f838:	0080      	lsleq	r0, r0, #2
 800f83a:	3302      	addeq	r3, #2
 800f83c:	2800      	cmp	r0, #0
 800f83e:	db05      	blt.n	800f84c <__hi0bits+0x38>
 800f840:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f844:	f103 0301 	add.w	r3, r3, #1
 800f848:	bf08      	it	eq
 800f84a:	2320      	moveq	r3, #32
 800f84c:	4618      	mov	r0, r3
 800f84e:	4770      	bx	lr
 800f850:	2300      	movs	r3, #0
 800f852:	e7e4      	b.n	800f81e <__hi0bits+0xa>

0800f854 <__lo0bits>:
 800f854:	6803      	ldr	r3, [r0, #0]
 800f856:	f013 0207 	ands.w	r2, r3, #7
 800f85a:	4601      	mov	r1, r0
 800f85c:	d00b      	beq.n	800f876 <__lo0bits+0x22>
 800f85e:	07da      	lsls	r2, r3, #31
 800f860:	d424      	bmi.n	800f8ac <__lo0bits+0x58>
 800f862:	0798      	lsls	r0, r3, #30
 800f864:	bf49      	itett	mi
 800f866:	085b      	lsrmi	r3, r3, #1
 800f868:	089b      	lsrpl	r3, r3, #2
 800f86a:	2001      	movmi	r0, #1
 800f86c:	600b      	strmi	r3, [r1, #0]
 800f86e:	bf5c      	itt	pl
 800f870:	600b      	strpl	r3, [r1, #0]
 800f872:	2002      	movpl	r0, #2
 800f874:	4770      	bx	lr
 800f876:	b298      	uxth	r0, r3
 800f878:	b9b0      	cbnz	r0, 800f8a8 <__lo0bits+0x54>
 800f87a:	0c1b      	lsrs	r3, r3, #16
 800f87c:	2010      	movs	r0, #16
 800f87e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f882:	bf04      	itt	eq
 800f884:	0a1b      	lsreq	r3, r3, #8
 800f886:	3008      	addeq	r0, #8
 800f888:	071a      	lsls	r2, r3, #28
 800f88a:	bf04      	itt	eq
 800f88c:	091b      	lsreq	r3, r3, #4
 800f88e:	3004      	addeq	r0, #4
 800f890:	079a      	lsls	r2, r3, #30
 800f892:	bf04      	itt	eq
 800f894:	089b      	lsreq	r3, r3, #2
 800f896:	3002      	addeq	r0, #2
 800f898:	07da      	lsls	r2, r3, #31
 800f89a:	d403      	bmi.n	800f8a4 <__lo0bits+0x50>
 800f89c:	085b      	lsrs	r3, r3, #1
 800f89e:	f100 0001 	add.w	r0, r0, #1
 800f8a2:	d005      	beq.n	800f8b0 <__lo0bits+0x5c>
 800f8a4:	600b      	str	r3, [r1, #0]
 800f8a6:	4770      	bx	lr
 800f8a8:	4610      	mov	r0, r2
 800f8aa:	e7e8      	b.n	800f87e <__lo0bits+0x2a>
 800f8ac:	2000      	movs	r0, #0
 800f8ae:	4770      	bx	lr
 800f8b0:	2020      	movs	r0, #32
 800f8b2:	4770      	bx	lr

0800f8b4 <__i2b>:
 800f8b4:	b510      	push	{r4, lr}
 800f8b6:	460c      	mov	r4, r1
 800f8b8:	2101      	movs	r1, #1
 800f8ba:	f7ff feb5 	bl	800f628 <_Balloc>
 800f8be:	4602      	mov	r2, r0
 800f8c0:	b928      	cbnz	r0, 800f8ce <__i2b+0x1a>
 800f8c2:	4b05      	ldr	r3, [pc, #20]	; (800f8d8 <__i2b+0x24>)
 800f8c4:	4805      	ldr	r0, [pc, #20]	; (800f8dc <__i2b+0x28>)
 800f8c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f8ca:	f000 ff0f 	bl	80106ec <__assert_func>
 800f8ce:	2301      	movs	r3, #1
 800f8d0:	6144      	str	r4, [r0, #20]
 800f8d2:	6103      	str	r3, [r0, #16]
 800f8d4:	bd10      	pop	{r4, pc}
 800f8d6:	bf00      	nop
 800f8d8:	08010b63 	.word	0x08010b63
 800f8dc:	08010c54 	.word	0x08010c54

0800f8e0 <__multiply>:
 800f8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8e4:	4614      	mov	r4, r2
 800f8e6:	690a      	ldr	r2, [r1, #16]
 800f8e8:	6923      	ldr	r3, [r4, #16]
 800f8ea:	429a      	cmp	r2, r3
 800f8ec:	bfb8      	it	lt
 800f8ee:	460b      	movlt	r3, r1
 800f8f0:	460d      	mov	r5, r1
 800f8f2:	bfbc      	itt	lt
 800f8f4:	4625      	movlt	r5, r4
 800f8f6:	461c      	movlt	r4, r3
 800f8f8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800f8fc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f900:	68ab      	ldr	r3, [r5, #8]
 800f902:	6869      	ldr	r1, [r5, #4]
 800f904:	eb0a 0709 	add.w	r7, sl, r9
 800f908:	42bb      	cmp	r3, r7
 800f90a:	b085      	sub	sp, #20
 800f90c:	bfb8      	it	lt
 800f90e:	3101      	addlt	r1, #1
 800f910:	f7ff fe8a 	bl	800f628 <_Balloc>
 800f914:	b930      	cbnz	r0, 800f924 <__multiply+0x44>
 800f916:	4602      	mov	r2, r0
 800f918:	4b42      	ldr	r3, [pc, #264]	; (800fa24 <__multiply+0x144>)
 800f91a:	4843      	ldr	r0, [pc, #268]	; (800fa28 <__multiply+0x148>)
 800f91c:	f240 115d 	movw	r1, #349	; 0x15d
 800f920:	f000 fee4 	bl	80106ec <__assert_func>
 800f924:	f100 0614 	add.w	r6, r0, #20
 800f928:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800f92c:	4633      	mov	r3, r6
 800f92e:	2200      	movs	r2, #0
 800f930:	4543      	cmp	r3, r8
 800f932:	d31e      	bcc.n	800f972 <__multiply+0x92>
 800f934:	f105 0c14 	add.w	ip, r5, #20
 800f938:	f104 0314 	add.w	r3, r4, #20
 800f93c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800f940:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800f944:	9202      	str	r2, [sp, #8]
 800f946:	ebac 0205 	sub.w	r2, ip, r5
 800f94a:	3a15      	subs	r2, #21
 800f94c:	f022 0203 	bic.w	r2, r2, #3
 800f950:	3204      	adds	r2, #4
 800f952:	f105 0115 	add.w	r1, r5, #21
 800f956:	458c      	cmp	ip, r1
 800f958:	bf38      	it	cc
 800f95a:	2204      	movcc	r2, #4
 800f95c:	9201      	str	r2, [sp, #4]
 800f95e:	9a02      	ldr	r2, [sp, #8]
 800f960:	9303      	str	r3, [sp, #12]
 800f962:	429a      	cmp	r2, r3
 800f964:	d808      	bhi.n	800f978 <__multiply+0x98>
 800f966:	2f00      	cmp	r7, #0
 800f968:	dc55      	bgt.n	800fa16 <__multiply+0x136>
 800f96a:	6107      	str	r7, [r0, #16]
 800f96c:	b005      	add	sp, #20
 800f96e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f972:	f843 2b04 	str.w	r2, [r3], #4
 800f976:	e7db      	b.n	800f930 <__multiply+0x50>
 800f978:	f8b3 a000 	ldrh.w	sl, [r3]
 800f97c:	f1ba 0f00 	cmp.w	sl, #0
 800f980:	d020      	beq.n	800f9c4 <__multiply+0xe4>
 800f982:	f105 0e14 	add.w	lr, r5, #20
 800f986:	46b1      	mov	r9, r6
 800f988:	2200      	movs	r2, #0
 800f98a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800f98e:	f8d9 b000 	ldr.w	fp, [r9]
 800f992:	b2a1      	uxth	r1, r4
 800f994:	fa1f fb8b 	uxth.w	fp, fp
 800f998:	fb0a b101 	mla	r1, sl, r1, fp
 800f99c:	4411      	add	r1, r2
 800f99e:	f8d9 2000 	ldr.w	r2, [r9]
 800f9a2:	0c24      	lsrs	r4, r4, #16
 800f9a4:	0c12      	lsrs	r2, r2, #16
 800f9a6:	fb0a 2404 	mla	r4, sl, r4, r2
 800f9aa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800f9ae:	b289      	uxth	r1, r1
 800f9b0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f9b4:	45f4      	cmp	ip, lr
 800f9b6:	f849 1b04 	str.w	r1, [r9], #4
 800f9ba:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800f9be:	d8e4      	bhi.n	800f98a <__multiply+0xaa>
 800f9c0:	9901      	ldr	r1, [sp, #4]
 800f9c2:	5072      	str	r2, [r6, r1]
 800f9c4:	9a03      	ldr	r2, [sp, #12]
 800f9c6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f9ca:	3304      	adds	r3, #4
 800f9cc:	f1b9 0f00 	cmp.w	r9, #0
 800f9d0:	d01f      	beq.n	800fa12 <__multiply+0x132>
 800f9d2:	6834      	ldr	r4, [r6, #0]
 800f9d4:	f105 0114 	add.w	r1, r5, #20
 800f9d8:	46b6      	mov	lr, r6
 800f9da:	f04f 0a00 	mov.w	sl, #0
 800f9de:	880a      	ldrh	r2, [r1, #0]
 800f9e0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800f9e4:	fb09 b202 	mla	r2, r9, r2, fp
 800f9e8:	4492      	add	sl, r2
 800f9ea:	b2a4      	uxth	r4, r4
 800f9ec:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f9f0:	f84e 4b04 	str.w	r4, [lr], #4
 800f9f4:	f851 4b04 	ldr.w	r4, [r1], #4
 800f9f8:	f8be 2000 	ldrh.w	r2, [lr]
 800f9fc:	0c24      	lsrs	r4, r4, #16
 800f9fe:	fb09 2404 	mla	r4, r9, r4, r2
 800fa02:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800fa06:	458c      	cmp	ip, r1
 800fa08:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800fa0c:	d8e7      	bhi.n	800f9de <__multiply+0xfe>
 800fa0e:	9a01      	ldr	r2, [sp, #4]
 800fa10:	50b4      	str	r4, [r6, r2]
 800fa12:	3604      	adds	r6, #4
 800fa14:	e7a3      	b.n	800f95e <__multiply+0x7e>
 800fa16:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d1a5      	bne.n	800f96a <__multiply+0x8a>
 800fa1e:	3f01      	subs	r7, #1
 800fa20:	e7a1      	b.n	800f966 <__multiply+0x86>
 800fa22:	bf00      	nop
 800fa24:	08010b63 	.word	0x08010b63
 800fa28:	08010c54 	.word	0x08010c54

0800fa2c <__pow5mult>:
 800fa2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa30:	4615      	mov	r5, r2
 800fa32:	f012 0203 	ands.w	r2, r2, #3
 800fa36:	4606      	mov	r6, r0
 800fa38:	460f      	mov	r7, r1
 800fa3a:	d007      	beq.n	800fa4c <__pow5mult+0x20>
 800fa3c:	4c25      	ldr	r4, [pc, #148]	; (800fad4 <__pow5mult+0xa8>)
 800fa3e:	3a01      	subs	r2, #1
 800fa40:	2300      	movs	r3, #0
 800fa42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fa46:	f7ff fe51 	bl	800f6ec <__multadd>
 800fa4a:	4607      	mov	r7, r0
 800fa4c:	10ad      	asrs	r5, r5, #2
 800fa4e:	d03d      	beq.n	800facc <__pow5mult+0xa0>
 800fa50:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fa52:	b97c      	cbnz	r4, 800fa74 <__pow5mult+0x48>
 800fa54:	2010      	movs	r0, #16
 800fa56:	f7ff fdbf 	bl	800f5d8 <malloc>
 800fa5a:	4602      	mov	r2, r0
 800fa5c:	6270      	str	r0, [r6, #36]	; 0x24
 800fa5e:	b928      	cbnz	r0, 800fa6c <__pow5mult+0x40>
 800fa60:	4b1d      	ldr	r3, [pc, #116]	; (800fad8 <__pow5mult+0xac>)
 800fa62:	481e      	ldr	r0, [pc, #120]	; (800fadc <__pow5mult+0xb0>)
 800fa64:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fa68:	f000 fe40 	bl	80106ec <__assert_func>
 800fa6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fa70:	6004      	str	r4, [r0, #0]
 800fa72:	60c4      	str	r4, [r0, #12]
 800fa74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fa78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fa7c:	b94c      	cbnz	r4, 800fa92 <__pow5mult+0x66>
 800fa7e:	f240 2171 	movw	r1, #625	; 0x271
 800fa82:	4630      	mov	r0, r6
 800fa84:	f7ff ff16 	bl	800f8b4 <__i2b>
 800fa88:	2300      	movs	r3, #0
 800fa8a:	f8c8 0008 	str.w	r0, [r8, #8]
 800fa8e:	4604      	mov	r4, r0
 800fa90:	6003      	str	r3, [r0, #0]
 800fa92:	f04f 0900 	mov.w	r9, #0
 800fa96:	07eb      	lsls	r3, r5, #31
 800fa98:	d50a      	bpl.n	800fab0 <__pow5mult+0x84>
 800fa9a:	4639      	mov	r1, r7
 800fa9c:	4622      	mov	r2, r4
 800fa9e:	4630      	mov	r0, r6
 800faa0:	f7ff ff1e 	bl	800f8e0 <__multiply>
 800faa4:	4639      	mov	r1, r7
 800faa6:	4680      	mov	r8, r0
 800faa8:	4630      	mov	r0, r6
 800faaa:	f7ff fdfd 	bl	800f6a8 <_Bfree>
 800faae:	4647      	mov	r7, r8
 800fab0:	106d      	asrs	r5, r5, #1
 800fab2:	d00b      	beq.n	800facc <__pow5mult+0xa0>
 800fab4:	6820      	ldr	r0, [r4, #0]
 800fab6:	b938      	cbnz	r0, 800fac8 <__pow5mult+0x9c>
 800fab8:	4622      	mov	r2, r4
 800faba:	4621      	mov	r1, r4
 800fabc:	4630      	mov	r0, r6
 800fabe:	f7ff ff0f 	bl	800f8e0 <__multiply>
 800fac2:	6020      	str	r0, [r4, #0]
 800fac4:	f8c0 9000 	str.w	r9, [r0]
 800fac8:	4604      	mov	r4, r0
 800faca:	e7e4      	b.n	800fa96 <__pow5mult+0x6a>
 800facc:	4638      	mov	r0, r7
 800face:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fad2:	bf00      	nop
 800fad4:	08010da8 	.word	0x08010da8
 800fad8:	08010aed 	.word	0x08010aed
 800fadc:	08010c54 	.word	0x08010c54

0800fae0 <__lshift>:
 800fae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fae4:	460c      	mov	r4, r1
 800fae6:	6849      	ldr	r1, [r1, #4]
 800fae8:	6923      	ldr	r3, [r4, #16]
 800faea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800faee:	68a3      	ldr	r3, [r4, #8]
 800faf0:	4607      	mov	r7, r0
 800faf2:	4691      	mov	r9, r2
 800faf4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800faf8:	f108 0601 	add.w	r6, r8, #1
 800fafc:	42b3      	cmp	r3, r6
 800fafe:	db0b      	blt.n	800fb18 <__lshift+0x38>
 800fb00:	4638      	mov	r0, r7
 800fb02:	f7ff fd91 	bl	800f628 <_Balloc>
 800fb06:	4605      	mov	r5, r0
 800fb08:	b948      	cbnz	r0, 800fb1e <__lshift+0x3e>
 800fb0a:	4602      	mov	r2, r0
 800fb0c:	4b28      	ldr	r3, [pc, #160]	; (800fbb0 <__lshift+0xd0>)
 800fb0e:	4829      	ldr	r0, [pc, #164]	; (800fbb4 <__lshift+0xd4>)
 800fb10:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fb14:	f000 fdea 	bl	80106ec <__assert_func>
 800fb18:	3101      	adds	r1, #1
 800fb1a:	005b      	lsls	r3, r3, #1
 800fb1c:	e7ee      	b.n	800fafc <__lshift+0x1c>
 800fb1e:	2300      	movs	r3, #0
 800fb20:	f100 0114 	add.w	r1, r0, #20
 800fb24:	f100 0210 	add.w	r2, r0, #16
 800fb28:	4618      	mov	r0, r3
 800fb2a:	4553      	cmp	r3, sl
 800fb2c:	db33      	blt.n	800fb96 <__lshift+0xb6>
 800fb2e:	6920      	ldr	r0, [r4, #16]
 800fb30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fb34:	f104 0314 	add.w	r3, r4, #20
 800fb38:	f019 091f 	ands.w	r9, r9, #31
 800fb3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fb40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fb44:	d02b      	beq.n	800fb9e <__lshift+0xbe>
 800fb46:	f1c9 0e20 	rsb	lr, r9, #32
 800fb4a:	468a      	mov	sl, r1
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	6818      	ldr	r0, [r3, #0]
 800fb50:	fa00 f009 	lsl.w	r0, r0, r9
 800fb54:	4302      	orrs	r2, r0
 800fb56:	f84a 2b04 	str.w	r2, [sl], #4
 800fb5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb5e:	459c      	cmp	ip, r3
 800fb60:	fa22 f20e 	lsr.w	r2, r2, lr
 800fb64:	d8f3      	bhi.n	800fb4e <__lshift+0x6e>
 800fb66:	ebac 0304 	sub.w	r3, ip, r4
 800fb6a:	3b15      	subs	r3, #21
 800fb6c:	f023 0303 	bic.w	r3, r3, #3
 800fb70:	3304      	adds	r3, #4
 800fb72:	f104 0015 	add.w	r0, r4, #21
 800fb76:	4584      	cmp	ip, r0
 800fb78:	bf38      	it	cc
 800fb7a:	2304      	movcc	r3, #4
 800fb7c:	50ca      	str	r2, [r1, r3]
 800fb7e:	b10a      	cbz	r2, 800fb84 <__lshift+0xa4>
 800fb80:	f108 0602 	add.w	r6, r8, #2
 800fb84:	3e01      	subs	r6, #1
 800fb86:	4638      	mov	r0, r7
 800fb88:	612e      	str	r6, [r5, #16]
 800fb8a:	4621      	mov	r1, r4
 800fb8c:	f7ff fd8c 	bl	800f6a8 <_Bfree>
 800fb90:	4628      	mov	r0, r5
 800fb92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb96:	f842 0f04 	str.w	r0, [r2, #4]!
 800fb9a:	3301      	adds	r3, #1
 800fb9c:	e7c5      	b.n	800fb2a <__lshift+0x4a>
 800fb9e:	3904      	subs	r1, #4
 800fba0:	f853 2b04 	ldr.w	r2, [r3], #4
 800fba4:	f841 2f04 	str.w	r2, [r1, #4]!
 800fba8:	459c      	cmp	ip, r3
 800fbaa:	d8f9      	bhi.n	800fba0 <__lshift+0xc0>
 800fbac:	e7ea      	b.n	800fb84 <__lshift+0xa4>
 800fbae:	bf00      	nop
 800fbb0:	08010b63 	.word	0x08010b63
 800fbb4:	08010c54 	.word	0x08010c54

0800fbb8 <__mcmp>:
 800fbb8:	b530      	push	{r4, r5, lr}
 800fbba:	6902      	ldr	r2, [r0, #16]
 800fbbc:	690c      	ldr	r4, [r1, #16]
 800fbbe:	1b12      	subs	r2, r2, r4
 800fbc0:	d10e      	bne.n	800fbe0 <__mcmp+0x28>
 800fbc2:	f100 0314 	add.w	r3, r0, #20
 800fbc6:	3114      	adds	r1, #20
 800fbc8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fbcc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fbd0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fbd4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fbd8:	42a5      	cmp	r5, r4
 800fbda:	d003      	beq.n	800fbe4 <__mcmp+0x2c>
 800fbdc:	d305      	bcc.n	800fbea <__mcmp+0x32>
 800fbde:	2201      	movs	r2, #1
 800fbe0:	4610      	mov	r0, r2
 800fbe2:	bd30      	pop	{r4, r5, pc}
 800fbe4:	4283      	cmp	r3, r0
 800fbe6:	d3f3      	bcc.n	800fbd0 <__mcmp+0x18>
 800fbe8:	e7fa      	b.n	800fbe0 <__mcmp+0x28>
 800fbea:	f04f 32ff 	mov.w	r2, #4294967295
 800fbee:	e7f7      	b.n	800fbe0 <__mcmp+0x28>

0800fbf0 <__mdiff>:
 800fbf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbf4:	460c      	mov	r4, r1
 800fbf6:	4606      	mov	r6, r0
 800fbf8:	4611      	mov	r1, r2
 800fbfa:	4620      	mov	r0, r4
 800fbfc:	4617      	mov	r7, r2
 800fbfe:	f7ff ffdb 	bl	800fbb8 <__mcmp>
 800fc02:	1e05      	subs	r5, r0, #0
 800fc04:	d110      	bne.n	800fc28 <__mdiff+0x38>
 800fc06:	4629      	mov	r1, r5
 800fc08:	4630      	mov	r0, r6
 800fc0a:	f7ff fd0d 	bl	800f628 <_Balloc>
 800fc0e:	b930      	cbnz	r0, 800fc1e <__mdiff+0x2e>
 800fc10:	4b39      	ldr	r3, [pc, #228]	; (800fcf8 <__mdiff+0x108>)
 800fc12:	4602      	mov	r2, r0
 800fc14:	f240 2132 	movw	r1, #562	; 0x232
 800fc18:	4838      	ldr	r0, [pc, #224]	; (800fcfc <__mdiff+0x10c>)
 800fc1a:	f000 fd67 	bl	80106ec <__assert_func>
 800fc1e:	2301      	movs	r3, #1
 800fc20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fc24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc28:	bfa4      	itt	ge
 800fc2a:	463b      	movge	r3, r7
 800fc2c:	4627      	movge	r7, r4
 800fc2e:	4630      	mov	r0, r6
 800fc30:	6879      	ldr	r1, [r7, #4]
 800fc32:	bfa6      	itte	ge
 800fc34:	461c      	movge	r4, r3
 800fc36:	2500      	movge	r5, #0
 800fc38:	2501      	movlt	r5, #1
 800fc3a:	f7ff fcf5 	bl	800f628 <_Balloc>
 800fc3e:	b920      	cbnz	r0, 800fc4a <__mdiff+0x5a>
 800fc40:	4b2d      	ldr	r3, [pc, #180]	; (800fcf8 <__mdiff+0x108>)
 800fc42:	4602      	mov	r2, r0
 800fc44:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fc48:	e7e6      	b.n	800fc18 <__mdiff+0x28>
 800fc4a:	693e      	ldr	r6, [r7, #16]
 800fc4c:	60c5      	str	r5, [r0, #12]
 800fc4e:	6925      	ldr	r5, [r4, #16]
 800fc50:	f107 0114 	add.w	r1, r7, #20
 800fc54:	f104 0914 	add.w	r9, r4, #20
 800fc58:	f100 0e14 	add.w	lr, r0, #20
 800fc5c:	f107 0210 	add.w	r2, r7, #16
 800fc60:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800fc64:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800fc68:	46f2      	mov	sl, lr
 800fc6a:	2700      	movs	r7, #0
 800fc6c:	f859 3b04 	ldr.w	r3, [r9], #4
 800fc70:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fc74:	fa1f f883 	uxth.w	r8, r3
 800fc78:	fa17 f78b 	uxtah	r7, r7, fp
 800fc7c:	0c1b      	lsrs	r3, r3, #16
 800fc7e:	eba7 0808 	sub.w	r8, r7, r8
 800fc82:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fc86:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fc8a:	fa1f f888 	uxth.w	r8, r8
 800fc8e:	141f      	asrs	r7, r3, #16
 800fc90:	454d      	cmp	r5, r9
 800fc92:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fc96:	f84a 3b04 	str.w	r3, [sl], #4
 800fc9a:	d8e7      	bhi.n	800fc6c <__mdiff+0x7c>
 800fc9c:	1b2b      	subs	r3, r5, r4
 800fc9e:	3b15      	subs	r3, #21
 800fca0:	f023 0303 	bic.w	r3, r3, #3
 800fca4:	3304      	adds	r3, #4
 800fca6:	3415      	adds	r4, #21
 800fca8:	42a5      	cmp	r5, r4
 800fcaa:	bf38      	it	cc
 800fcac:	2304      	movcc	r3, #4
 800fcae:	4419      	add	r1, r3
 800fcb0:	4473      	add	r3, lr
 800fcb2:	469e      	mov	lr, r3
 800fcb4:	460d      	mov	r5, r1
 800fcb6:	4565      	cmp	r5, ip
 800fcb8:	d30e      	bcc.n	800fcd8 <__mdiff+0xe8>
 800fcba:	f10c 0203 	add.w	r2, ip, #3
 800fcbe:	1a52      	subs	r2, r2, r1
 800fcc0:	f022 0203 	bic.w	r2, r2, #3
 800fcc4:	3903      	subs	r1, #3
 800fcc6:	458c      	cmp	ip, r1
 800fcc8:	bf38      	it	cc
 800fcca:	2200      	movcc	r2, #0
 800fccc:	441a      	add	r2, r3
 800fcce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fcd2:	b17b      	cbz	r3, 800fcf4 <__mdiff+0x104>
 800fcd4:	6106      	str	r6, [r0, #16]
 800fcd6:	e7a5      	b.n	800fc24 <__mdiff+0x34>
 800fcd8:	f855 8b04 	ldr.w	r8, [r5], #4
 800fcdc:	fa17 f488 	uxtah	r4, r7, r8
 800fce0:	1422      	asrs	r2, r4, #16
 800fce2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800fce6:	b2a4      	uxth	r4, r4
 800fce8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800fcec:	f84e 4b04 	str.w	r4, [lr], #4
 800fcf0:	1417      	asrs	r7, r2, #16
 800fcf2:	e7e0      	b.n	800fcb6 <__mdiff+0xc6>
 800fcf4:	3e01      	subs	r6, #1
 800fcf6:	e7ea      	b.n	800fcce <__mdiff+0xde>
 800fcf8:	08010b63 	.word	0x08010b63
 800fcfc:	08010c54 	.word	0x08010c54

0800fd00 <__ulp>:
 800fd00:	b082      	sub	sp, #8
 800fd02:	ed8d 0b00 	vstr	d0, [sp]
 800fd06:	9b01      	ldr	r3, [sp, #4]
 800fd08:	4912      	ldr	r1, [pc, #72]	; (800fd54 <__ulp+0x54>)
 800fd0a:	4019      	ands	r1, r3
 800fd0c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800fd10:	2900      	cmp	r1, #0
 800fd12:	dd05      	ble.n	800fd20 <__ulp+0x20>
 800fd14:	2200      	movs	r2, #0
 800fd16:	460b      	mov	r3, r1
 800fd18:	ec43 2b10 	vmov	d0, r2, r3
 800fd1c:	b002      	add	sp, #8
 800fd1e:	4770      	bx	lr
 800fd20:	4249      	negs	r1, r1
 800fd22:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800fd26:	ea4f 5021 	mov.w	r0, r1, asr #20
 800fd2a:	f04f 0200 	mov.w	r2, #0
 800fd2e:	f04f 0300 	mov.w	r3, #0
 800fd32:	da04      	bge.n	800fd3e <__ulp+0x3e>
 800fd34:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800fd38:	fa41 f300 	asr.w	r3, r1, r0
 800fd3c:	e7ec      	b.n	800fd18 <__ulp+0x18>
 800fd3e:	f1a0 0114 	sub.w	r1, r0, #20
 800fd42:	291e      	cmp	r1, #30
 800fd44:	bfda      	itte	le
 800fd46:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800fd4a:	fa20 f101 	lsrle.w	r1, r0, r1
 800fd4e:	2101      	movgt	r1, #1
 800fd50:	460a      	mov	r2, r1
 800fd52:	e7e1      	b.n	800fd18 <__ulp+0x18>
 800fd54:	7ff00000 	.word	0x7ff00000

0800fd58 <__b2d>:
 800fd58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd5a:	6905      	ldr	r5, [r0, #16]
 800fd5c:	f100 0714 	add.w	r7, r0, #20
 800fd60:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800fd64:	1f2e      	subs	r6, r5, #4
 800fd66:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800fd6a:	4620      	mov	r0, r4
 800fd6c:	f7ff fd52 	bl	800f814 <__hi0bits>
 800fd70:	f1c0 0320 	rsb	r3, r0, #32
 800fd74:	280a      	cmp	r0, #10
 800fd76:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800fdf4 <__b2d+0x9c>
 800fd7a:	600b      	str	r3, [r1, #0]
 800fd7c:	dc14      	bgt.n	800fda8 <__b2d+0x50>
 800fd7e:	f1c0 0e0b 	rsb	lr, r0, #11
 800fd82:	fa24 f10e 	lsr.w	r1, r4, lr
 800fd86:	42b7      	cmp	r7, r6
 800fd88:	ea41 030c 	orr.w	r3, r1, ip
 800fd8c:	bf34      	ite	cc
 800fd8e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fd92:	2100      	movcs	r1, #0
 800fd94:	3015      	adds	r0, #21
 800fd96:	fa04 f000 	lsl.w	r0, r4, r0
 800fd9a:	fa21 f10e 	lsr.w	r1, r1, lr
 800fd9e:	ea40 0201 	orr.w	r2, r0, r1
 800fda2:	ec43 2b10 	vmov	d0, r2, r3
 800fda6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fda8:	42b7      	cmp	r7, r6
 800fdaa:	bf3a      	itte	cc
 800fdac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fdb0:	f1a5 0608 	subcc.w	r6, r5, #8
 800fdb4:	2100      	movcs	r1, #0
 800fdb6:	380b      	subs	r0, #11
 800fdb8:	d017      	beq.n	800fdea <__b2d+0x92>
 800fdba:	f1c0 0c20 	rsb	ip, r0, #32
 800fdbe:	fa04 f500 	lsl.w	r5, r4, r0
 800fdc2:	42be      	cmp	r6, r7
 800fdc4:	fa21 f40c 	lsr.w	r4, r1, ip
 800fdc8:	ea45 0504 	orr.w	r5, r5, r4
 800fdcc:	bf8c      	ite	hi
 800fdce:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800fdd2:	2400      	movls	r4, #0
 800fdd4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800fdd8:	fa01 f000 	lsl.w	r0, r1, r0
 800fddc:	fa24 f40c 	lsr.w	r4, r4, ip
 800fde0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fde4:	ea40 0204 	orr.w	r2, r0, r4
 800fde8:	e7db      	b.n	800fda2 <__b2d+0x4a>
 800fdea:	ea44 030c 	orr.w	r3, r4, ip
 800fdee:	460a      	mov	r2, r1
 800fdf0:	e7d7      	b.n	800fda2 <__b2d+0x4a>
 800fdf2:	bf00      	nop
 800fdf4:	3ff00000 	.word	0x3ff00000

0800fdf8 <__d2b>:
 800fdf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fdfc:	4689      	mov	r9, r1
 800fdfe:	2101      	movs	r1, #1
 800fe00:	ec57 6b10 	vmov	r6, r7, d0
 800fe04:	4690      	mov	r8, r2
 800fe06:	f7ff fc0f 	bl	800f628 <_Balloc>
 800fe0a:	4604      	mov	r4, r0
 800fe0c:	b930      	cbnz	r0, 800fe1c <__d2b+0x24>
 800fe0e:	4602      	mov	r2, r0
 800fe10:	4b25      	ldr	r3, [pc, #148]	; (800fea8 <__d2b+0xb0>)
 800fe12:	4826      	ldr	r0, [pc, #152]	; (800feac <__d2b+0xb4>)
 800fe14:	f240 310a 	movw	r1, #778	; 0x30a
 800fe18:	f000 fc68 	bl	80106ec <__assert_func>
 800fe1c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fe20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fe24:	bb35      	cbnz	r5, 800fe74 <__d2b+0x7c>
 800fe26:	2e00      	cmp	r6, #0
 800fe28:	9301      	str	r3, [sp, #4]
 800fe2a:	d028      	beq.n	800fe7e <__d2b+0x86>
 800fe2c:	4668      	mov	r0, sp
 800fe2e:	9600      	str	r6, [sp, #0]
 800fe30:	f7ff fd10 	bl	800f854 <__lo0bits>
 800fe34:	9900      	ldr	r1, [sp, #0]
 800fe36:	b300      	cbz	r0, 800fe7a <__d2b+0x82>
 800fe38:	9a01      	ldr	r2, [sp, #4]
 800fe3a:	f1c0 0320 	rsb	r3, r0, #32
 800fe3e:	fa02 f303 	lsl.w	r3, r2, r3
 800fe42:	430b      	orrs	r3, r1
 800fe44:	40c2      	lsrs	r2, r0
 800fe46:	6163      	str	r3, [r4, #20]
 800fe48:	9201      	str	r2, [sp, #4]
 800fe4a:	9b01      	ldr	r3, [sp, #4]
 800fe4c:	61a3      	str	r3, [r4, #24]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	bf14      	ite	ne
 800fe52:	2202      	movne	r2, #2
 800fe54:	2201      	moveq	r2, #1
 800fe56:	6122      	str	r2, [r4, #16]
 800fe58:	b1d5      	cbz	r5, 800fe90 <__d2b+0x98>
 800fe5a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fe5e:	4405      	add	r5, r0
 800fe60:	f8c9 5000 	str.w	r5, [r9]
 800fe64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fe68:	f8c8 0000 	str.w	r0, [r8]
 800fe6c:	4620      	mov	r0, r4
 800fe6e:	b003      	add	sp, #12
 800fe70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fe78:	e7d5      	b.n	800fe26 <__d2b+0x2e>
 800fe7a:	6161      	str	r1, [r4, #20]
 800fe7c:	e7e5      	b.n	800fe4a <__d2b+0x52>
 800fe7e:	a801      	add	r0, sp, #4
 800fe80:	f7ff fce8 	bl	800f854 <__lo0bits>
 800fe84:	9b01      	ldr	r3, [sp, #4]
 800fe86:	6163      	str	r3, [r4, #20]
 800fe88:	2201      	movs	r2, #1
 800fe8a:	6122      	str	r2, [r4, #16]
 800fe8c:	3020      	adds	r0, #32
 800fe8e:	e7e3      	b.n	800fe58 <__d2b+0x60>
 800fe90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fe94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fe98:	f8c9 0000 	str.w	r0, [r9]
 800fe9c:	6918      	ldr	r0, [r3, #16]
 800fe9e:	f7ff fcb9 	bl	800f814 <__hi0bits>
 800fea2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fea6:	e7df      	b.n	800fe68 <__d2b+0x70>
 800fea8:	08010b63 	.word	0x08010b63
 800feac:	08010c54 	.word	0x08010c54

0800feb0 <__ratio>:
 800feb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feb4:	4688      	mov	r8, r1
 800feb6:	4669      	mov	r1, sp
 800feb8:	4681      	mov	r9, r0
 800feba:	f7ff ff4d 	bl	800fd58 <__b2d>
 800febe:	a901      	add	r1, sp, #4
 800fec0:	4640      	mov	r0, r8
 800fec2:	ec55 4b10 	vmov	r4, r5, d0
 800fec6:	f7ff ff47 	bl	800fd58 <__b2d>
 800feca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fece:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fed2:	eba3 0c02 	sub.w	ip, r3, r2
 800fed6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800feda:	1a9b      	subs	r3, r3, r2
 800fedc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fee0:	ec51 0b10 	vmov	r0, r1, d0
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	bfd6      	itet	le
 800fee8:	460a      	movle	r2, r1
 800feea:	462a      	movgt	r2, r5
 800feec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fef0:	468b      	mov	fp, r1
 800fef2:	462f      	mov	r7, r5
 800fef4:	bfd4      	ite	le
 800fef6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fefa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fefe:	4620      	mov	r0, r4
 800ff00:	ee10 2a10 	vmov	r2, s0
 800ff04:	465b      	mov	r3, fp
 800ff06:	4639      	mov	r1, r7
 800ff08:	f7f0 fcb0 	bl	800086c <__aeabi_ddiv>
 800ff0c:	ec41 0b10 	vmov	d0, r0, r1
 800ff10:	b003      	add	sp, #12
 800ff12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ff16 <__copybits>:
 800ff16:	3901      	subs	r1, #1
 800ff18:	b570      	push	{r4, r5, r6, lr}
 800ff1a:	1149      	asrs	r1, r1, #5
 800ff1c:	6914      	ldr	r4, [r2, #16]
 800ff1e:	3101      	adds	r1, #1
 800ff20:	f102 0314 	add.w	r3, r2, #20
 800ff24:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ff28:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ff2c:	1f05      	subs	r5, r0, #4
 800ff2e:	42a3      	cmp	r3, r4
 800ff30:	d30c      	bcc.n	800ff4c <__copybits+0x36>
 800ff32:	1aa3      	subs	r3, r4, r2
 800ff34:	3b11      	subs	r3, #17
 800ff36:	f023 0303 	bic.w	r3, r3, #3
 800ff3a:	3211      	adds	r2, #17
 800ff3c:	42a2      	cmp	r2, r4
 800ff3e:	bf88      	it	hi
 800ff40:	2300      	movhi	r3, #0
 800ff42:	4418      	add	r0, r3
 800ff44:	2300      	movs	r3, #0
 800ff46:	4288      	cmp	r0, r1
 800ff48:	d305      	bcc.n	800ff56 <__copybits+0x40>
 800ff4a:	bd70      	pop	{r4, r5, r6, pc}
 800ff4c:	f853 6b04 	ldr.w	r6, [r3], #4
 800ff50:	f845 6f04 	str.w	r6, [r5, #4]!
 800ff54:	e7eb      	b.n	800ff2e <__copybits+0x18>
 800ff56:	f840 3b04 	str.w	r3, [r0], #4
 800ff5a:	e7f4      	b.n	800ff46 <__copybits+0x30>

0800ff5c <__any_on>:
 800ff5c:	f100 0214 	add.w	r2, r0, #20
 800ff60:	6900      	ldr	r0, [r0, #16]
 800ff62:	114b      	asrs	r3, r1, #5
 800ff64:	4298      	cmp	r0, r3
 800ff66:	b510      	push	{r4, lr}
 800ff68:	db11      	blt.n	800ff8e <__any_on+0x32>
 800ff6a:	dd0a      	ble.n	800ff82 <__any_on+0x26>
 800ff6c:	f011 011f 	ands.w	r1, r1, #31
 800ff70:	d007      	beq.n	800ff82 <__any_on+0x26>
 800ff72:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ff76:	fa24 f001 	lsr.w	r0, r4, r1
 800ff7a:	fa00 f101 	lsl.w	r1, r0, r1
 800ff7e:	428c      	cmp	r4, r1
 800ff80:	d10b      	bne.n	800ff9a <__any_on+0x3e>
 800ff82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ff86:	4293      	cmp	r3, r2
 800ff88:	d803      	bhi.n	800ff92 <__any_on+0x36>
 800ff8a:	2000      	movs	r0, #0
 800ff8c:	bd10      	pop	{r4, pc}
 800ff8e:	4603      	mov	r3, r0
 800ff90:	e7f7      	b.n	800ff82 <__any_on+0x26>
 800ff92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ff96:	2900      	cmp	r1, #0
 800ff98:	d0f5      	beq.n	800ff86 <__any_on+0x2a>
 800ff9a:	2001      	movs	r0, #1
 800ff9c:	e7f6      	b.n	800ff8c <__any_on+0x30>

0800ff9e <_calloc_r>:
 800ff9e:	b513      	push	{r0, r1, r4, lr}
 800ffa0:	434a      	muls	r2, r1
 800ffa2:	4611      	mov	r1, r2
 800ffa4:	9201      	str	r2, [sp, #4]
 800ffa6:	f000 f859 	bl	801005c <_malloc_r>
 800ffaa:	4604      	mov	r4, r0
 800ffac:	b118      	cbz	r0, 800ffb6 <_calloc_r+0x18>
 800ffae:	9a01      	ldr	r2, [sp, #4]
 800ffb0:	2100      	movs	r1, #0
 800ffb2:	f7fc f861 	bl	800c078 <memset>
 800ffb6:	4620      	mov	r0, r4
 800ffb8:	b002      	add	sp, #8
 800ffba:	bd10      	pop	{r4, pc}

0800ffbc <_free_r>:
 800ffbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ffbe:	2900      	cmp	r1, #0
 800ffc0:	d048      	beq.n	8010054 <_free_r+0x98>
 800ffc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ffc6:	9001      	str	r0, [sp, #4]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	f1a1 0404 	sub.w	r4, r1, #4
 800ffce:	bfb8      	it	lt
 800ffd0:	18e4      	addlt	r4, r4, r3
 800ffd2:	f000 fbf7 	bl	80107c4 <__malloc_lock>
 800ffd6:	4a20      	ldr	r2, [pc, #128]	; (8010058 <_free_r+0x9c>)
 800ffd8:	9801      	ldr	r0, [sp, #4]
 800ffda:	6813      	ldr	r3, [r2, #0]
 800ffdc:	4615      	mov	r5, r2
 800ffde:	b933      	cbnz	r3, 800ffee <_free_r+0x32>
 800ffe0:	6063      	str	r3, [r4, #4]
 800ffe2:	6014      	str	r4, [r2, #0]
 800ffe4:	b003      	add	sp, #12
 800ffe6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ffea:	f000 bbf1 	b.w	80107d0 <__malloc_unlock>
 800ffee:	42a3      	cmp	r3, r4
 800fff0:	d90b      	bls.n	801000a <_free_r+0x4e>
 800fff2:	6821      	ldr	r1, [r4, #0]
 800fff4:	1862      	adds	r2, r4, r1
 800fff6:	4293      	cmp	r3, r2
 800fff8:	bf04      	itt	eq
 800fffa:	681a      	ldreq	r2, [r3, #0]
 800fffc:	685b      	ldreq	r3, [r3, #4]
 800fffe:	6063      	str	r3, [r4, #4]
 8010000:	bf04      	itt	eq
 8010002:	1852      	addeq	r2, r2, r1
 8010004:	6022      	streq	r2, [r4, #0]
 8010006:	602c      	str	r4, [r5, #0]
 8010008:	e7ec      	b.n	800ffe4 <_free_r+0x28>
 801000a:	461a      	mov	r2, r3
 801000c:	685b      	ldr	r3, [r3, #4]
 801000e:	b10b      	cbz	r3, 8010014 <_free_r+0x58>
 8010010:	42a3      	cmp	r3, r4
 8010012:	d9fa      	bls.n	801000a <_free_r+0x4e>
 8010014:	6811      	ldr	r1, [r2, #0]
 8010016:	1855      	adds	r5, r2, r1
 8010018:	42a5      	cmp	r5, r4
 801001a:	d10b      	bne.n	8010034 <_free_r+0x78>
 801001c:	6824      	ldr	r4, [r4, #0]
 801001e:	4421      	add	r1, r4
 8010020:	1854      	adds	r4, r2, r1
 8010022:	42a3      	cmp	r3, r4
 8010024:	6011      	str	r1, [r2, #0]
 8010026:	d1dd      	bne.n	800ffe4 <_free_r+0x28>
 8010028:	681c      	ldr	r4, [r3, #0]
 801002a:	685b      	ldr	r3, [r3, #4]
 801002c:	6053      	str	r3, [r2, #4]
 801002e:	4421      	add	r1, r4
 8010030:	6011      	str	r1, [r2, #0]
 8010032:	e7d7      	b.n	800ffe4 <_free_r+0x28>
 8010034:	d902      	bls.n	801003c <_free_r+0x80>
 8010036:	230c      	movs	r3, #12
 8010038:	6003      	str	r3, [r0, #0]
 801003a:	e7d3      	b.n	800ffe4 <_free_r+0x28>
 801003c:	6825      	ldr	r5, [r4, #0]
 801003e:	1961      	adds	r1, r4, r5
 8010040:	428b      	cmp	r3, r1
 8010042:	bf04      	itt	eq
 8010044:	6819      	ldreq	r1, [r3, #0]
 8010046:	685b      	ldreq	r3, [r3, #4]
 8010048:	6063      	str	r3, [r4, #4]
 801004a:	bf04      	itt	eq
 801004c:	1949      	addeq	r1, r1, r5
 801004e:	6021      	streq	r1, [r4, #0]
 8010050:	6054      	str	r4, [r2, #4]
 8010052:	e7c7      	b.n	800ffe4 <_free_r+0x28>
 8010054:	b003      	add	sp, #12
 8010056:	bd30      	pop	{r4, r5, pc}
 8010058:	200005c4 	.word	0x200005c4

0801005c <_malloc_r>:
 801005c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801005e:	1ccd      	adds	r5, r1, #3
 8010060:	f025 0503 	bic.w	r5, r5, #3
 8010064:	3508      	adds	r5, #8
 8010066:	2d0c      	cmp	r5, #12
 8010068:	bf38      	it	cc
 801006a:	250c      	movcc	r5, #12
 801006c:	2d00      	cmp	r5, #0
 801006e:	4606      	mov	r6, r0
 8010070:	db01      	blt.n	8010076 <_malloc_r+0x1a>
 8010072:	42a9      	cmp	r1, r5
 8010074:	d903      	bls.n	801007e <_malloc_r+0x22>
 8010076:	230c      	movs	r3, #12
 8010078:	6033      	str	r3, [r6, #0]
 801007a:	2000      	movs	r0, #0
 801007c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801007e:	f000 fba1 	bl	80107c4 <__malloc_lock>
 8010082:	4921      	ldr	r1, [pc, #132]	; (8010108 <_malloc_r+0xac>)
 8010084:	680a      	ldr	r2, [r1, #0]
 8010086:	4614      	mov	r4, r2
 8010088:	b99c      	cbnz	r4, 80100b2 <_malloc_r+0x56>
 801008a:	4f20      	ldr	r7, [pc, #128]	; (801010c <_malloc_r+0xb0>)
 801008c:	683b      	ldr	r3, [r7, #0]
 801008e:	b923      	cbnz	r3, 801009a <_malloc_r+0x3e>
 8010090:	4621      	mov	r1, r4
 8010092:	4630      	mov	r0, r6
 8010094:	f000 fb0c 	bl	80106b0 <_sbrk_r>
 8010098:	6038      	str	r0, [r7, #0]
 801009a:	4629      	mov	r1, r5
 801009c:	4630      	mov	r0, r6
 801009e:	f000 fb07 	bl	80106b0 <_sbrk_r>
 80100a2:	1c43      	adds	r3, r0, #1
 80100a4:	d123      	bne.n	80100ee <_malloc_r+0x92>
 80100a6:	230c      	movs	r3, #12
 80100a8:	6033      	str	r3, [r6, #0]
 80100aa:	4630      	mov	r0, r6
 80100ac:	f000 fb90 	bl	80107d0 <__malloc_unlock>
 80100b0:	e7e3      	b.n	801007a <_malloc_r+0x1e>
 80100b2:	6823      	ldr	r3, [r4, #0]
 80100b4:	1b5b      	subs	r3, r3, r5
 80100b6:	d417      	bmi.n	80100e8 <_malloc_r+0x8c>
 80100b8:	2b0b      	cmp	r3, #11
 80100ba:	d903      	bls.n	80100c4 <_malloc_r+0x68>
 80100bc:	6023      	str	r3, [r4, #0]
 80100be:	441c      	add	r4, r3
 80100c0:	6025      	str	r5, [r4, #0]
 80100c2:	e004      	b.n	80100ce <_malloc_r+0x72>
 80100c4:	6863      	ldr	r3, [r4, #4]
 80100c6:	42a2      	cmp	r2, r4
 80100c8:	bf0c      	ite	eq
 80100ca:	600b      	streq	r3, [r1, #0]
 80100cc:	6053      	strne	r3, [r2, #4]
 80100ce:	4630      	mov	r0, r6
 80100d0:	f000 fb7e 	bl	80107d0 <__malloc_unlock>
 80100d4:	f104 000b 	add.w	r0, r4, #11
 80100d8:	1d23      	adds	r3, r4, #4
 80100da:	f020 0007 	bic.w	r0, r0, #7
 80100de:	1ac2      	subs	r2, r0, r3
 80100e0:	d0cc      	beq.n	801007c <_malloc_r+0x20>
 80100e2:	1a1b      	subs	r3, r3, r0
 80100e4:	50a3      	str	r3, [r4, r2]
 80100e6:	e7c9      	b.n	801007c <_malloc_r+0x20>
 80100e8:	4622      	mov	r2, r4
 80100ea:	6864      	ldr	r4, [r4, #4]
 80100ec:	e7cc      	b.n	8010088 <_malloc_r+0x2c>
 80100ee:	1cc4      	adds	r4, r0, #3
 80100f0:	f024 0403 	bic.w	r4, r4, #3
 80100f4:	42a0      	cmp	r0, r4
 80100f6:	d0e3      	beq.n	80100c0 <_malloc_r+0x64>
 80100f8:	1a21      	subs	r1, r4, r0
 80100fa:	4630      	mov	r0, r6
 80100fc:	f000 fad8 	bl	80106b0 <_sbrk_r>
 8010100:	3001      	adds	r0, #1
 8010102:	d1dd      	bne.n	80100c0 <_malloc_r+0x64>
 8010104:	e7cf      	b.n	80100a6 <_malloc_r+0x4a>
 8010106:	bf00      	nop
 8010108:	200005c4 	.word	0x200005c4
 801010c:	200005c8 	.word	0x200005c8

08010110 <__ssputs_r>:
 8010110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010114:	688e      	ldr	r6, [r1, #8]
 8010116:	429e      	cmp	r6, r3
 8010118:	4682      	mov	sl, r0
 801011a:	460c      	mov	r4, r1
 801011c:	4690      	mov	r8, r2
 801011e:	461f      	mov	r7, r3
 8010120:	d838      	bhi.n	8010194 <__ssputs_r+0x84>
 8010122:	898a      	ldrh	r2, [r1, #12]
 8010124:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010128:	d032      	beq.n	8010190 <__ssputs_r+0x80>
 801012a:	6825      	ldr	r5, [r4, #0]
 801012c:	6909      	ldr	r1, [r1, #16]
 801012e:	eba5 0901 	sub.w	r9, r5, r1
 8010132:	6965      	ldr	r5, [r4, #20]
 8010134:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010138:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801013c:	3301      	adds	r3, #1
 801013e:	444b      	add	r3, r9
 8010140:	106d      	asrs	r5, r5, #1
 8010142:	429d      	cmp	r5, r3
 8010144:	bf38      	it	cc
 8010146:	461d      	movcc	r5, r3
 8010148:	0553      	lsls	r3, r2, #21
 801014a:	d531      	bpl.n	80101b0 <__ssputs_r+0xa0>
 801014c:	4629      	mov	r1, r5
 801014e:	f7ff ff85 	bl	801005c <_malloc_r>
 8010152:	4606      	mov	r6, r0
 8010154:	b950      	cbnz	r0, 801016c <__ssputs_r+0x5c>
 8010156:	230c      	movs	r3, #12
 8010158:	f8ca 3000 	str.w	r3, [sl]
 801015c:	89a3      	ldrh	r3, [r4, #12]
 801015e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010162:	81a3      	strh	r3, [r4, #12]
 8010164:	f04f 30ff 	mov.w	r0, #4294967295
 8010168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801016c:	6921      	ldr	r1, [r4, #16]
 801016e:	464a      	mov	r2, r9
 8010170:	f7ff fa4c 	bl	800f60c <memcpy>
 8010174:	89a3      	ldrh	r3, [r4, #12]
 8010176:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801017a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801017e:	81a3      	strh	r3, [r4, #12]
 8010180:	6126      	str	r6, [r4, #16]
 8010182:	6165      	str	r5, [r4, #20]
 8010184:	444e      	add	r6, r9
 8010186:	eba5 0509 	sub.w	r5, r5, r9
 801018a:	6026      	str	r6, [r4, #0]
 801018c:	60a5      	str	r5, [r4, #8]
 801018e:	463e      	mov	r6, r7
 8010190:	42be      	cmp	r6, r7
 8010192:	d900      	bls.n	8010196 <__ssputs_r+0x86>
 8010194:	463e      	mov	r6, r7
 8010196:	4632      	mov	r2, r6
 8010198:	6820      	ldr	r0, [r4, #0]
 801019a:	4641      	mov	r1, r8
 801019c:	f000 faf8 	bl	8010790 <memmove>
 80101a0:	68a3      	ldr	r3, [r4, #8]
 80101a2:	6822      	ldr	r2, [r4, #0]
 80101a4:	1b9b      	subs	r3, r3, r6
 80101a6:	4432      	add	r2, r6
 80101a8:	60a3      	str	r3, [r4, #8]
 80101aa:	6022      	str	r2, [r4, #0]
 80101ac:	2000      	movs	r0, #0
 80101ae:	e7db      	b.n	8010168 <__ssputs_r+0x58>
 80101b0:	462a      	mov	r2, r5
 80101b2:	f000 fb13 	bl	80107dc <_realloc_r>
 80101b6:	4606      	mov	r6, r0
 80101b8:	2800      	cmp	r0, #0
 80101ba:	d1e1      	bne.n	8010180 <__ssputs_r+0x70>
 80101bc:	6921      	ldr	r1, [r4, #16]
 80101be:	4650      	mov	r0, sl
 80101c0:	f7ff fefc 	bl	800ffbc <_free_r>
 80101c4:	e7c7      	b.n	8010156 <__ssputs_r+0x46>
	...

080101c8 <_svfiprintf_r>:
 80101c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101cc:	4698      	mov	r8, r3
 80101ce:	898b      	ldrh	r3, [r1, #12]
 80101d0:	061b      	lsls	r3, r3, #24
 80101d2:	b09d      	sub	sp, #116	; 0x74
 80101d4:	4607      	mov	r7, r0
 80101d6:	460d      	mov	r5, r1
 80101d8:	4614      	mov	r4, r2
 80101da:	d50e      	bpl.n	80101fa <_svfiprintf_r+0x32>
 80101dc:	690b      	ldr	r3, [r1, #16]
 80101de:	b963      	cbnz	r3, 80101fa <_svfiprintf_r+0x32>
 80101e0:	2140      	movs	r1, #64	; 0x40
 80101e2:	f7ff ff3b 	bl	801005c <_malloc_r>
 80101e6:	6028      	str	r0, [r5, #0]
 80101e8:	6128      	str	r0, [r5, #16]
 80101ea:	b920      	cbnz	r0, 80101f6 <_svfiprintf_r+0x2e>
 80101ec:	230c      	movs	r3, #12
 80101ee:	603b      	str	r3, [r7, #0]
 80101f0:	f04f 30ff 	mov.w	r0, #4294967295
 80101f4:	e0d1      	b.n	801039a <_svfiprintf_r+0x1d2>
 80101f6:	2340      	movs	r3, #64	; 0x40
 80101f8:	616b      	str	r3, [r5, #20]
 80101fa:	2300      	movs	r3, #0
 80101fc:	9309      	str	r3, [sp, #36]	; 0x24
 80101fe:	2320      	movs	r3, #32
 8010200:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010204:	f8cd 800c 	str.w	r8, [sp, #12]
 8010208:	2330      	movs	r3, #48	; 0x30
 801020a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80103b4 <_svfiprintf_r+0x1ec>
 801020e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010212:	f04f 0901 	mov.w	r9, #1
 8010216:	4623      	mov	r3, r4
 8010218:	469a      	mov	sl, r3
 801021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801021e:	b10a      	cbz	r2, 8010224 <_svfiprintf_r+0x5c>
 8010220:	2a25      	cmp	r2, #37	; 0x25
 8010222:	d1f9      	bne.n	8010218 <_svfiprintf_r+0x50>
 8010224:	ebba 0b04 	subs.w	fp, sl, r4
 8010228:	d00b      	beq.n	8010242 <_svfiprintf_r+0x7a>
 801022a:	465b      	mov	r3, fp
 801022c:	4622      	mov	r2, r4
 801022e:	4629      	mov	r1, r5
 8010230:	4638      	mov	r0, r7
 8010232:	f7ff ff6d 	bl	8010110 <__ssputs_r>
 8010236:	3001      	adds	r0, #1
 8010238:	f000 80aa 	beq.w	8010390 <_svfiprintf_r+0x1c8>
 801023c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801023e:	445a      	add	r2, fp
 8010240:	9209      	str	r2, [sp, #36]	; 0x24
 8010242:	f89a 3000 	ldrb.w	r3, [sl]
 8010246:	2b00      	cmp	r3, #0
 8010248:	f000 80a2 	beq.w	8010390 <_svfiprintf_r+0x1c8>
 801024c:	2300      	movs	r3, #0
 801024e:	f04f 32ff 	mov.w	r2, #4294967295
 8010252:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010256:	f10a 0a01 	add.w	sl, sl, #1
 801025a:	9304      	str	r3, [sp, #16]
 801025c:	9307      	str	r3, [sp, #28]
 801025e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010262:	931a      	str	r3, [sp, #104]	; 0x68
 8010264:	4654      	mov	r4, sl
 8010266:	2205      	movs	r2, #5
 8010268:	f814 1b01 	ldrb.w	r1, [r4], #1
 801026c:	4851      	ldr	r0, [pc, #324]	; (80103b4 <_svfiprintf_r+0x1ec>)
 801026e:	f7ef ffc7 	bl	8000200 <memchr>
 8010272:	9a04      	ldr	r2, [sp, #16]
 8010274:	b9d8      	cbnz	r0, 80102ae <_svfiprintf_r+0xe6>
 8010276:	06d0      	lsls	r0, r2, #27
 8010278:	bf44      	itt	mi
 801027a:	2320      	movmi	r3, #32
 801027c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010280:	0711      	lsls	r1, r2, #28
 8010282:	bf44      	itt	mi
 8010284:	232b      	movmi	r3, #43	; 0x2b
 8010286:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801028a:	f89a 3000 	ldrb.w	r3, [sl]
 801028e:	2b2a      	cmp	r3, #42	; 0x2a
 8010290:	d015      	beq.n	80102be <_svfiprintf_r+0xf6>
 8010292:	9a07      	ldr	r2, [sp, #28]
 8010294:	4654      	mov	r4, sl
 8010296:	2000      	movs	r0, #0
 8010298:	f04f 0c0a 	mov.w	ip, #10
 801029c:	4621      	mov	r1, r4
 801029e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80102a2:	3b30      	subs	r3, #48	; 0x30
 80102a4:	2b09      	cmp	r3, #9
 80102a6:	d94e      	bls.n	8010346 <_svfiprintf_r+0x17e>
 80102a8:	b1b0      	cbz	r0, 80102d8 <_svfiprintf_r+0x110>
 80102aa:	9207      	str	r2, [sp, #28]
 80102ac:	e014      	b.n	80102d8 <_svfiprintf_r+0x110>
 80102ae:	eba0 0308 	sub.w	r3, r0, r8
 80102b2:	fa09 f303 	lsl.w	r3, r9, r3
 80102b6:	4313      	orrs	r3, r2
 80102b8:	9304      	str	r3, [sp, #16]
 80102ba:	46a2      	mov	sl, r4
 80102bc:	e7d2      	b.n	8010264 <_svfiprintf_r+0x9c>
 80102be:	9b03      	ldr	r3, [sp, #12]
 80102c0:	1d19      	adds	r1, r3, #4
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	9103      	str	r1, [sp, #12]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	bfbb      	ittet	lt
 80102ca:	425b      	neglt	r3, r3
 80102cc:	f042 0202 	orrlt.w	r2, r2, #2
 80102d0:	9307      	strge	r3, [sp, #28]
 80102d2:	9307      	strlt	r3, [sp, #28]
 80102d4:	bfb8      	it	lt
 80102d6:	9204      	strlt	r2, [sp, #16]
 80102d8:	7823      	ldrb	r3, [r4, #0]
 80102da:	2b2e      	cmp	r3, #46	; 0x2e
 80102dc:	d10c      	bne.n	80102f8 <_svfiprintf_r+0x130>
 80102de:	7863      	ldrb	r3, [r4, #1]
 80102e0:	2b2a      	cmp	r3, #42	; 0x2a
 80102e2:	d135      	bne.n	8010350 <_svfiprintf_r+0x188>
 80102e4:	9b03      	ldr	r3, [sp, #12]
 80102e6:	1d1a      	adds	r2, r3, #4
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	9203      	str	r2, [sp, #12]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	bfb8      	it	lt
 80102f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80102f4:	3402      	adds	r4, #2
 80102f6:	9305      	str	r3, [sp, #20]
 80102f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80103c4 <_svfiprintf_r+0x1fc>
 80102fc:	7821      	ldrb	r1, [r4, #0]
 80102fe:	2203      	movs	r2, #3
 8010300:	4650      	mov	r0, sl
 8010302:	f7ef ff7d 	bl	8000200 <memchr>
 8010306:	b140      	cbz	r0, 801031a <_svfiprintf_r+0x152>
 8010308:	2340      	movs	r3, #64	; 0x40
 801030a:	eba0 000a 	sub.w	r0, r0, sl
 801030e:	fa03 f000 	lsl.w	r0, r3, r0
 8010312:	9b04      	ldr	r3, [sp, #16]
 8010314:	4303      	orrs	r3, r0
 8010316:	3401      	adds	r4, #1
 8010318:	9304      	str	r3, [sp, #16]
 801031a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801031e:	4826      	ldr	r0, [pc, #152]	; (80103b8 <_svfiprintf_r+0x1f0>)
 8010320:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010324:	2206      	movs	r2, #6
 8010326:	f7ef ff6b 	bl	8000200 <memchr>
 801032a:	2800      	cmp	r0, #0
 801032c:	d038      	beq.n	80103a0 <_svfiprintf_r+0x1d8>
 801032e:	4b23      	ldr	r3, [pc, #140]	; (80103bc <_svfiprintf_r+0x1f4>)
 8010330:	bb1b      	cbnz	r3, 801037a <_svfiprintf_r+0x1b2>
 8010332:	9b03      	ldr	r3, [sp, #12]
 8010334:	3307      	adds	r3, #7
 8010336:	f023 0307 	bic.w	r3, r3, #7
 801033a:	3308      	adds	r3, #8
 801033c:	9303      	str	r3, [sp, #12]
 801033e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010340:	4433      	add	r3, r6
 8010342:	9309      	str	r3, [sp, #36]	; 0x24
 8010344:	e767      	b.n	8010216 <_svfiprintf_r+0x4e>
 8010346:	fb0c 3202 	mla	r2, ip, r2, r3
 801034a:	460c      	mov	r4, r1
 801034c:	2001      	movs	r0, #1
 801034e:	e7a5      	b.n	801029c <_svfiprintf_r+0xd4>
 8010350:	2300      	movs	r3, #0
 8010352:	3401      	adds	r4, #1
 8010354:	9305      	str	r3, [sp, #20]
 8010356:	4619      	mov	r1, r3
 8010358:	f04f 0c0a 	mov.w	ip, #10
 801035c:	4620      	mov	r0, r4
 801035e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010362:	3a30      	subs	r2, #48	; 0x30
 8010364:	2a09      	cmp	r2, #9
 8010366:	d903      	bls.n	8010370 <_svfiprintf_r+0x1a8>
 8010368:	2b00      	cmp	r3, #0
 801036a:	d0c5      	beq.n	80102f8 <_svfiprintf_r+0x130>
 801036c:	9105      	str	r1, [sp, #20]
 801036e:	e7c3      	b.n	80102f8 <_svfiprintf_r+0x130>
 8010370:	fb0c 2101 	mla	r1, ip, r1, r2
 8010374:	4604      	mov	r4, r0
 8010376:	2301      	movs	r3, #1
 8010378:	e7f0      	b.n	801035c <_svfiprintf_r+0x194>
 801037a:	ab03      	add	r3, sp, #12
 801037c:	9300      	str	r3, [sp, #0]
 801037e:	462a      	mov	r2, r5
 8010380:	4b0f      	ldr	r3, [pc, #60]	; (80103c0 <_svfiprintf_r+0x1f8>)
 8010382:	a904      	add	r1, sp, #16
 8010384:	4638      	mov	r0, r7
 8010386:	f7fb ff1f 	bl	800c1c8 <_printf_float>
 801038a:	1c42      	adds	r2, r0, #1
 801038c:	4606      	mov	r6, r0
 801038e:	d1d6      	bne.n	801033e <_svfiprintf_r+0x176>
 8010390:	89ab      	ldrh	r3, [r5, #12]
 8010392:	065b      	lsls	r3, r3, #25
 8010394:	f53f af2c 	bmi.w	80101f0 <_svfiprintf_r+0x28>
 8010398:	9809      	ldr	r0, [sp, #36]	; 0x24
 801039a:	b01d      	add	sp, #116	; 0x74
 801039c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103a0:	ab03      	add	r3, sp, #12
 80103a2:	9300      	str	r3, [sp, #0]
 80103a4:	462a      	mov	r2, r5
 80103a6:	4b06      	ldr	r3, [pc, #24]	; (80103c0 <_svfiprintf_r+0x1f8>)
 80103a8:	a904      	add	r1, sp, #16
 80103aa:	4638      	mov	r0, r7
 80103ac:	f7fc f9b0 	bl	800c710 <_printf_i>
 80103b0:	e7eb      	b.n	801038a <_svfiprintf_r+0x1c2>
 80103b2:	bf00      	nop
 80103b4:	08010db4 	.word	0x08010db4
 80103b8:	08010dbe 	.word	0x08010dbe
 80103bc:	0800c1c9 	.word	0x0800c1c9
 80103c0:	08010111 	.word	0x08010111
 80103c4:	08010dba 	.word	0x08010dba

080103c8 <__sfputc_r>:
 80103c8:	6893      	ldr	r3, [r2, #8]
 80103ca:	3b01      	subs	r3, #1
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	b410      	push	{r4}
 80103d0:	6093      	str	r3, [r2, #8]
 80103d2:	da08      	bge.n	80103e6 <__sfputc_r+0x1e>
 80103d4:	6994      	ldr	r4, [r2, #24]
 80103d6:	42a3      	cmp	r3, r4
 80103d8:	db01      	blt.n	80103de <__sfputc_r+0x16>
 80103da:	290a      	cmp	r1, #10
 80103dc:	d103      	bne.n	80103e6 <__sfputc_r+0x1e>
 80103de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80103e2:	f7fd bbfb 	b.w	800dbdc <__swbuf_r>
 80103e6:	6813      	ldr	r3, [r2, #0]
 80103e8:	1c58      	adds	r0, r3, #1
 80103ea:	6010      	str	r0, [r2, #0]
 80103ec:	7019      	strb	r1, [r3, #0]
 80103ee:	4608      	mov	r0, r1
 80103f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80103f4:	4770      	bx	lr

080103f6 <__sfputs_r>:
 80103f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103f8:	4606      	mov	r6, r0
 80103fa:	460f      	mov	r7, r1
 80103fc:	4614      	mov	r4, r2
 80103fe:	18d5      	adds	r5, r2, r3
 8010400:	42ac      	cmp	r4, r5
 8010402:	d101      	bne.n	8010408 <__sfputs_r+0x12>
 8010404:	2000      	movs	r0, #0
 8010406:	e007      	b.n	8010418 <__sfputs_r+0x22>
 8010408:	f814 1b01 	ldrb.w	r1, [r4], #1
 801040c:	463a      	mov	r2, r7
 801040e:	4630      	mov	r0, r6
 8010410:	f7ff ffda 	bl	80103c8 <__sfputc_r>
 8010414:	1c43      	adds	r3, r0, #1
 8010416:	d1f3      	bne.n	8010400 <__sfputs_r+0xa>
 8010418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801041c <_vfiprintf_r>:
 801041c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010420:	460d      	mov	r5, r1
 8010422:	b09d      	sub	sp, #116	; 0x74
 8010424:	4614      	mov	r4, r2
 8010426:	4698      	mov	r8, r3
 8010428:	4606      	mov	r6, r0
 801042a:	b118      	cbz	r0, 8010434 <_vfiprintf_r+0x18>
 801042c:	6983      	ldr	r3, [r0, #24]
 801042e:	b90b      	cbnz	r3, 8010434 <_vfiprintf_r+0x18>
 8010430:	f7fe fc48 	bl	800ecc4 <__sinit>
 8010434:	4b89      	ldr	r3, [pc, #548]	; (801065c <_vfiprintf_r+0x240>)
 8010436:	429d      	cmp	r5, r3
 8010438:	d11b      	bne.n	8010472 <_vfiprintf_r+0x56>
 801043a:	6875      	ldr	r5, [r6, #4]
 801043c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801043e:	07d9      	lsls	r1, r3, #31
 8010440:	d405      	bmi.n	801044e <_vfiprintf_r+0x32>
 8010442:	89ab      	ldrh	r3, [r5, #12]
 8010444:	059a      	lsls	r2, r3, #22
 8010446:	d402      	bmi.n	801044e <_vfiprintf_r+0x32>
 8010448:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801044a:	f7ff f84c 	bl	800f4e6 <__retarget_lock_acquire_recursive>
 801044e:	89ab      	ldrh	r3, [r5, #12]
 8010450:	071b      	lsls	r3, r3, #28
 8010452:	d501      	bpl.n	8010458 <_vfiprintf_r+0x3c>
 8010454:	692b      	ldr	r3, [r5, #16]
 8010456:	b9eb      	cbnz	r3, 8010494 <_vfiprintf_r+0x78>
 8010458:	4629      	mov	r1, r5
 801045a:	4630      	mov	r0, r6
 801045c:	f7fd fc22 	bl	800dca4 <__swsetup_r>
 8010460:	b1c0      	cbz	r0, 8010494 <_vfiprintf_r+0x78>
 8010462:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010464:	07dc      	lsls	r4, r3, #31
 8010466:	d50e      	bpl.n	8010486 <_vfiprintf_r+0x6a>
 8010468:	f04f 30ff 	mov.w	r0, #4294967295
 801046c:	b01d      	add	sp, #116	; 0x74
 801046e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010472:	4b7b      	ldr	r3, [pc, #492]	; (8010660 <_vfiprintf_r+0x244>)
 8010474:	429d      	cmp	r5, r3
 8010476:	d101      	bne.n	801047c <_vfiprintf_r+0x60>
 8010478:	68b5      	ldr	r5, [r6, #8]
 801047a:	e7df      	b.n	801043c <_vfiprintf_r+0x20>
 801047c:	4b79      	ldr	r3, [pc, #484]	; (8010664 <_vfiprintf_r+0x248>)
 801047e:	429d      	cmp	r5, r3
 8010480:	bf08      	it	eq
 8010482:	68f5      	ldreq	r5, [r6, #12]
 8010484:	e7da      	b.n	801043c <_vfiprintf_r+0x20>
 8010486:	89ab      	ldrh	r3, [r5, #12]
 8010488:	0598      	lsls	r0, r3, #22
 801048a:	d4ed      	bmi.n	8010468 <_vfiprintf_r+0x4c>
 801048c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801048e:	f7ff f82b 	bl	800f4e8 <__retarget_lock_release_recursive>
 8010492:	e7e9      	b.n	8010468 <_vfiprintf_r+0x4c>
 8010494:	2300      	movs	r3, #0
 8010496:	9309      	str	r3, [sp, #36]	; 0x24
 8010498:	2320      	movs	r3, #32
 801049a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801049e:	f8cd 800c 	str.w	r8, [sp, #12]
 80104a2:	2330      	movs	r3, #48	; 0x30
 80104a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010668 <_vfiprintf_r+0x24c>
 80104a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80104ac:	f04f 0901 	mov.w	r9, #1
 80104b0:	4623      	mov	r3, r4
 80104b2:	469a      	mov	sl, r3
 80104b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104b8:	b10a      	cbz	r2, 80104be <_vfiprintf_r+0xa2>
 80104ba:	2a25      	cmp	r2, #37	; 0x25
 80104bc:	d1f9      	bne.n	80104b2 <_vfiprintf_r+0x96>
 80104be:	ebba 0b04 	subs.w	fp, sl, r4
 80104c2:	d00b      	beq.n	80104dc <_vfiprintf_r+0xc0>
 80104c4:	465b      	mov	r3, fp
 80104c6:	4622      	mov	r2, r4
 80104c8:	4629      	mov	r1, r5
 80104ca:	4630      	mov	r0, r6
 80104cc:	f7ff ff93 	bl	80103f6 <__sfputs_r>
 80104d0:	3001      	adds	r0, #1
 80104d2:	f000 80aa 	beq.w	801062a <_vfiprintf_r+0x20e>
 80104d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80104d8:	445a      	add	r2, fp
 80104da:	9209      	str	r2, [sp, #36]	; 0x24
 80104dc:	f89a 3000 	ldrb.w	r3, [sl]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	f000 80a2 	beq.w	801062a <_vfiprintf_r+0x20e>
 80104e6:	2300      	movs	r3, #0
 80104e8:	f04f 32ff 	mov.w	r2, #4294967295
 80104ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80104f0:	f10a 0a01 	add.w	sl, sl, #1
 80104f4:	9304      	str	r3, [sp, #16]
 80104f6:	9307      	str	r3, [sp, #28]
 80104f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80104fc:	931a      	str	r3, [sp, #104]	; 0x68
 80104fe:	4654      	mov	r4, sl
 8010500:	2205      	movs	r2, #5
 8010502:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010506:	4858      	ldr	r0, [pc, #352]	; (8010668 <_vfiprintf_r+0x24c>)
 8010508:	f7ef fe7a 	bl	8000200 <memchr>
 801050c:	9a04      	ldr	r2, [sp, #16]
 801050e:	b9d8      	cbnz	r0, 8010548 <_vfiprintf_r+0x12c>
 8010510:	06d1      	lsls	r1, r2, #27
 8010512:	bf44      	itt	mi
 8010514:	2320      	movmi	r3, #32
 8010516:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801051a:	0713      	lsls	r3, r2, #28
 801051c:	bf44      	itt	mi
 801051e:	232b      	movmi	r3, #43	; 0x2b
 8010520:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010524:	f89a 3000 	ldrb.w	r3, [sl]
 8010528:	2b2a      	cmp	r3, #42	; 0x2a
 801052a:	d015      	beq.n	8010558 <_vfiprintf_r+0x13c>
 801052c:	9a07      	ldr	r2, [sp, #28]
 801052e:	4654      	mov	r4, sl
 8010530:	2000      	movs	r0, #0
 8010532:	f04f 0c0a 	mov.w	ip, #10
 8010536:	4621      	mov	r1, r4
 8010538:	f811 3b01 	ldrb.w	r3, [r1], #1
 801053c:	3b30      	subs	r3, #48	; 0x30
 801053e:	2b09      	cmp	r3, #9
 8010540:	d94e      	bls.n	80105e0 <_vfiprintf_r+0x1c4>
 8010542:	b1b0      	cbz	r0, 8010572 <_vfiprintf_r+0x156>
 8010544:	9207      	str	r2, [sp, #28]
 8010546:	e014      	b.n	8010572 <_vfiprintf_r+0x156>
 8010548:	eba0 0308 	sub.w	r3, r0, r8
 801054c:	fa09 f303 	lsl.w	r3, r9, r3
 8010550:	4313      	orrs	r3, r2
 8010552:	9304      	str	r3, [sp, #16]
 8010554:	46a2      	mov	sl, r4
 8010556:	e7d2      	b.n	80104fe <_vfiprintf_r+0xe2>
 8010558:	9b03      	ldr	r3, [sp, #12]
 801055a:	1d19      	adds	r1, r3, #4
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	9103      	str	r1, [sp, #12]
 8010560:	2b00      	cmp	r3, #0
 8010562:	bfbb      	ittet	lt
 8010564:	425b      	neglt	r3, r3
 8010566:	f042 0202 	orrlt.w	r2, r2, #2
 801056a:	9307      	strge	r3, [sp, #28]
 801056c:	9307      	strlt	r3, [sp, #28]
 801056e:	bfb8      	it	lt
 8010570:	9204      	strlt	r2, [sp, #16]
 8010572:	7823      	ldrb	r3, [r4, #0]
 8010574:	2b2e      	cmp	r3, #46	; 0x2e
 8010576:	d10c      	bne.n	8010592 <_vfiprintf_r+0x176>
 8010578:	7863      	ldrb	r3, [r4, #1]
 801057a:	2b2a      	cmp	r3, #42	; 0x2a
 801057c:	d135      	bne.n	80105ea <_vfiprintf_r+0x1ce>
 801057e:	9b03      	ldr	r3, [sp, #12]
 8010580:	1d1a      	adds	r2, r3, #4
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	9203      	str	r2, [sp, #12]
 8010586:	2b00      	cmp	r3, #0
 8010588:	bfb8      	it	lt
 801058a:	f04f 33ff 	movlt.w	r3, #4294967295
 801058e:	3402      	adds	r4, #2
 8010590:	9305      	str	r3, [sp, #20]
 8010592:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010678 <_vfiprintf_r+0x25c>
 8010596:	7821      	ldrb	r1, [r4, #0]
 8010598:	2203      	movs	r2, #3
 801059a:	4650      	mov	r0, sl
 801059c:	f7ef fe30 	bl	8000200 <memchr>
 80105a0:	b140      	cbz	r0, 80105b4 <_vfiprintf_r+0x198>
 80105a2:	2340      	movs	r3, #64	; 0x40
 80105a4:	eba0 000a 	sub.w	r0, r0, sl
 80105a8:	fa03 f000 	lsl.w	r0, r3, r0
 80105ac:	9b04      	ldr	r3, [sp, #16]
 80105ae:	4303      	orrs	r3, r0
 80105b0:	3401      	adds	r4, #1
 80105b2:	9304      	str	r3, [sp, #16]
 80105b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105b8:	482c      	ldr	r0, [pc, #176]	; (801066c <_vfiprintf_r+0x250>)
 80105ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80105be:	2206      	movs	r2, #6
 80105c0:	f7ef fe1e 	bl	8000200 <memchr>
 80105c4:	2800      	cmp	r0, #0
 80105c6:	d03f      	beq.n	8010648 <_vfiprintf_r+0x22c>
 80105c8:	4b29      	ldr	r3, [pc, #164]	; (8010670 <_vfiprintf_r+0x254>)
 80105ca:	bb1b      	cbnz	r3, 8010614 <_vfiprintf_r+0x1f8>
 80105cc:	9b03      	ldr	r3, [sp, #12]
 80105ce:	3307      	adds	r3, #7
 80105d0:	f023 0307 	bic.w	r3, r3, #7
 80105d4:	3308      	adds	r3, #8
 80105d6:	9303      	str	r3, [sp, #12]
 80105d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105da:	443b      	add	r3, r7
 80105dc:	9309      	str	r3, [sp, #36]	; 0x24
 80105de:	e767      	b.n	80104b0 <_vfiprintf_r+0x94>
 80105e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80105e4:	460c      	mov	r4, r1
 80105e6:	2001      	movs	r0, #1
 80105e8:	e7a5      	b.n	8010536 <_vfiprintf_r+0x11a>
 80105ea:	2300      	movs	r3, #0
 80105ec:	3401      	adds	r4, #1
 80105ee:	9305      	str	r3, [sp, #20]
 80105f0:	4619      	mov	r1, r3
 80105f2:	f04f 0c0a 	mov.w	ip, #10
 80105f6:	4620      	mov	r0, r4
 80105f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80105fc:	3a30      	subs	r2, #48	; 0x30
 80105fe:	2a09      	cmp	r2, #9
 8010600:	d903      	bls.n	801060a <_vfiprintf_r+0x1ee>
 8010602:	2b00      	cmp	r3, #0
 8010604:	d0c5      	beq.n	8010592 <_vfiprintf_r+0x176>
 8010606:	9105      	str	r1, [sp, #20]
 8010608:	e7c3      	b.n	8010592 <_vfiprintf_r+0x176>
 801060a:	fb0c 2101 	mla	r1, ip, r1, r2
 801060e:	4604      	mov	r4, r0
 8010610:	2301      	movs	r3, #1
 8010612:	e7f0      	b.n	80105f6 <_vfiprintf_r+0x1da>
 8010614:	ab03      	add	r3, sp, #12
 8010616:	9300      	str	r3, [sp, #0]
 8010618:	462a      	mov	r2, r5
 801061a:	4b16      	ldr	r3, [pc, #88]	; (8010674 <_vfiprintf_r+0x258>)
 801061c:	a904      	add	r1, sp, #16
 801061e:	4630      	mov	r0, r6
 8010620:	f7fb fdd2 	bl	800c1c8 <_printf_float>
 8010624:	4607      	mov	r7, r0
 8010626:	1c78      	adds	r0, r7, #1
 8010628:	d1d6      	bne.n	80105d8 <_vfiprintf_r+0x1bc>
 801062a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801062c:	07d9      	lsls	r1, r3, #31
 801062e:	d405      	bmi.n	801063c <_vfiprintf_r+0x220>
 8010630:	89ab      	ldrh	r3, [r5, #12]
 8010632:	059a      	lsls	r2, r3, #22
 8010634:	d402      	bmi.n	801063c <_vfiprintf_r+0x220>
 8010636:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010638:	f7fe ff56 	bl	800f4e8 <__retarget_lock_release_recursive>
 801063c:	89ab      	ldrh	r3, [r5, #12]
 801063e:	065b      	lsls	r3, r3, #25
 8010640:	f53f af12 	bmi.w	8010468 <_vfiprintf_r+0x4c>
 8010644:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010646:	e711      	b.n	801046c <_vfiprintf_r+0x50>
 8010648:	ab03      	add	r3, sp, #12
 801064a:	9300      	str	r3, [sp, #0]
 801064c:	462a      	mov	r2, r5
 801064e:	4b09      	ldr	r3, [pc, #36]	; (8010674 <_vfiprintf_r+0x258>)
 8010650:	a904      	add	r1, sp, #16
 8010652:	4630      	mov	r0, r6
 8010654:	f7fc f85c 	bl	800c710 <_printf_i>
 8010658:	e7e4      	b.n	8010624 <_vfiprintf_r+0x208>
 801065a:	bf00      	nop
 801065c:	08010b94 	.word	0x08010b94
 8010660:	08010bb4 	.word	0x08010bb4
 8010664:	08010b74 	.word	0x08010b74
 8010668:	08010db4 	.word	0x08010db4
 801066c:	08010dbe 	.word	0x08010dbe
 8010670:	0800c1c9 	.word	0x0800c1c9
 8010674:	080103f7 	.word	0x080103f7
 8010678:	08010dba 	.word	0x08010dba

0801067c <_read_r>:
 801067c:	b538      	push	{r3, r4, r5, lr}
 801067e:	4d07      	ldr	r5, [pc, #28]	; (801069c <_read_r+0x20>)
 8010680:	4604      	mov	r4, r0
 8010682:	4608      	mov	r0, r1
 8010684:	4611      	mov	r1, r2
 8010686:	2200      	movs	r2, #0
 8010688:	602a      	str	r2, [r5, #0]
 801068a:	461a      	mov	r2, r3
 801068c:	f7f1 ffe0 	bl	8002650 <_read>
 8010690:	1c43      	adds	r3, r0, #1
 8010692:	d102      	bne.n	801069a <_read_r+0x1e>
 8010694:	682b      	ldr	r3, [r5, #0]
 8010696:	b103      	cbz	r3, 801069a <_read_r+0x1e>
 8010698:	6023      	str	r3, [r4, #0]
 801069a:	bd38      	pop	{r3, r4, r5, pc}
 801069c:	20002c24 	.word	0x20002c24

080106a0 <nan>:
 80106a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80106a8 <nan+0x8>
 80106a4:	4770      	bx	lr
 80106a6:	bf00      	nop
 80106a8:	00000000 	.word	0x00000000
 80106ac:	7ff80000 	.word	0x7ff80000

080106b0 <_sbrk_r>:
 80106b0:	b538      	push	{r3, r4, r5, lr}
 80106b2:	4d06      	ldr	r5, [pc, #24]	; (80106cc <_sbrk_r+0x1c>)
 80106b4:	2300      	movs	r3, #0
 80106b6:	4604      	mov	r4, r0
 80106b8:	4608      	mov	r0, r1
 80106ba:	602b      	str	r3, [r5, #0]
 80106bc:	f7f2 f836 	bl	800272c <_sbrk>
 80106c0:	1c43      	adds	r3, r0, #1
 80106c2:	d102      	bne.n	80106ca <_sbrk_r+0x1a>
 80106c4:	682b      	ldr	r3, [r5, #0]
 80106c6:	b103      	cbz	r3, 80106ca <_sbrk_r+0x1a>
 80106c8:	6023      	str	r3, [r4, #0]
 80106ca:	bd38      	pop	{r3, r4, r5, pc}
 80106cc:	20002c24 	.word	0x20002c24

080106d0 <__ascii_wctomb>:
 80106d0:	b149      	cbz	r1, 80106e6 <__ascii_wctomb+0x16>
 80106d2:	2aff      	cmp	r2, #255	; 0xff
 80106d4:	bf85      	ittet	hi
 80106d6:	238a      	movhi	r3, #138	; 0x8a
 80106d8:	6003      	strhi	r3, [r0, #0]
 80106da:	700a      	strbls	r2, [r1, #0]
 80106dc:	f04f 30ff 	movhi.w	r0, #4294967295
 80106e0:	bf98      	it	ls
 80106e2:	2001      	movls	r0, #1
 80106e4:	4770      	bx	lr
 80106e6:	4608      	mov	r0, r1
 80106e8:	4770      	bx	lr
	...

080106ec <__assert_func>:
 80106ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80106ee:	4614      	mov	r4, r2
 80106f0:	461a      	mov	r2, r3
 80106f2:	4b09      	ldr	r3, [pc, #36]	; (8010718 <__assert_func+0x2c>)
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	4605      	mov	r5, r0
 80106f8:	68d8      	ldr	r0, [r3, #12]
 80106fa:	b14c      	cbz	r4, 8010710 <__assert_func+0x24>
 80106fc:	4b07      	ldr	r3, [pc, #28]	; (801071c <__assert_func+0x30>)
 80106fe:	9100      	str	r1, [sp, #0]
 8010700:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010704:	4906      	ldr	r1, [pc, #24]	; (8010720 <__assert_func+0x34>)
 8010706:	462b      	mov	r3, r5
 8010708:	f000 f80e 	bl	8010728 <fiprintf>
 801070c:	f000 f88c 	bl	8010828 <abort>
 8010710:	4b04      	ldr	r3, [pc, #16]	; (8010724 <__assert_func+0x38>)
 8010712:	461c      	mov	r4, r3
 8010714:	e7f3      	b.n	80106fe <__assert_func+0x12>
 8010716:	bf00      	nop
 8010718:	20000198 	.word	0x20000198
 801071c:	08010dc5 	.word	0x08010dc5
 8010720:	08010dd2 	.word	0x08010dd2
 8010724:	08010e00 	.word	0x08010e00

08010728 <fiprintf>:
 8010728:	b40e      	push	{r1, r2, r3}
 801072a:	b503      	push	{r0, r1, lr}
 801072c:	4601      	mov	r1, r0
 801072e:	ab03      	add	r3, sp, #12
 8010730:	4805      	ldr	r0, [pc, #20]	; (8010748 <fiprintf+0x20>)
 8010732:	f853 2b04 	ldr.w	r2, [r3], #4
 8010736:	6800      	ldr	r0, [r0, #0]
 8010738:	9301      	str	r3, [sp, #4]
 801073a:	f7ff fe6f 	bl	801041c <_vfiprintf_r>
 801073e:	b002      	add	sp, #8
 8010740:	f85d eb04 	ldr.w	lr, [sp], #4
 8010744:	b003      	add	sp, #12
 8010746:	4770      	bx	lr
 8010748:	20000198 	.word	0x20000198

0801074c <_fstat_r>:
 801074c:	b538      	push	{r3, r4, r5, lr}
 801074e:	4d07      	ldr	r5, [pc, #28]	; (801076c <_fstat_r+0x20>)
 8010750:	2300      	movs	r3, #0
 8010752:	4604      	mov	r4, r0
 8010754:	4608      	mov	r0, r1
 8010756:	4611      	mov	r1, r2
 8010758:	602b      	str	r3, [r5, #0]
 801075a:	f7f1 ffbe 	bl	80026da <_fstat>
 801075e:	1c43      	adds	r3, r0, #1
 8010760:	d102      	bne.n	8010768 <_fstat_r+0x1c>
 8010762:	682b      	ldr	r3, [r5, #0]
 8010764:	b103      	cbz	r3, 8010768 <_fstat_r+0x1c>
 8010766:	6023      	str	r3, [r4, #0]
 8010768:	bd38      	pop	{r3, r4, r5, pc}
 801076a:	bf00      	nop
 801076c:	20002c24 	.word	0x20002c24

08010770 <_isatty_r>:
 8010770:	b538      	push	{r3, r4, r5, lr}
 8010772:	4d06      	ldr	r5, [pc, #24]	; (801078c <_isatty_r+0x1c>)
 8010774:	2300      	movs	r3, #0
 8010776:	4604      	mov	r4, r0
 8010778:	4608      	mov	r0, r1
 801077a:	602b      	str	r3, [r5, #0]
 801077c:	f7f1 ffbd 	bl	80026fa <_isatty>
 8010780:	1c43      	adds	r3, r0, #1
 8010782:	d102      	bne.n	801078a <_isatty_r+0x1a>
 8010784:	682b      	ldr	r3, [r5, #0]
 8010786:	b103      	cbz	r3, 801078a <_isatty_r+0x1a>
 8010788:	6023      	str	r3, [r4, #0]
 801078a:	bd38      	pop	{r3, r4, r5, pc}
 801078c:	20002c24 	.word	0x20002c24

08010790 <memmove>:
 8010790:	4288      	cmp	r0, r1
 8010792:	b510      	push	{r4, lr}
 8010794:	eb01 0402 	add.w	r4, r1, r2
 8010798:	d902      	bls.n	80107a0 <memmove+0x10>
 801079a:	4284      	cmp	r4, r0
 801079c:	4623      	mov	r3, r4
 801079e:	d807      	bhi.n	80107b0 <memmove+0x20>
 80107a0:	1e43      	subs	r3, r0, #1
 80107a2:	42a1      	cmp	r1, r4
 80107a4:	d008      	beq.n	80107b8 <memmove+0x28>
 80107a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80107aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80107ae:	e7f8      	b.n	80107a2 <memmove+0x12>
 80107b0:	4402      	add	r2, r0
 80107b2:	4601      	mov	r1, r0
 80107b4:	428a      	cmp	r2, r1
 80107b6:	d100      	bne.n	80107ba <memmove+0x2a>
 80107b8:	bd10      	pop	{r4, pc}
 80107ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80107be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80107c2:	e7f7      	b.n	80107b4 <memmove+0x24>

080107c4 <__malloc_lock>:
 80107c4:	4801      	ldr	r0, [pc, #4]	; (80107cc <__malloc_lock+0x8>)
 80107c6:	f7fe be8e 	b.w	800f4e6 <__retarget_lock_acquire_recursive>
 80107ca:	bf00      	nop
 80107cc:	20002c1c 	.word	0x20002c1c

080107d0 <__malloc_unlock>:
 80107d0:	4801      	ldr	r0, [pc, #4]	; (80107d8 <__malloc_unlock+0x8>)
 80107d2:	f7fe be89 	b.w	800f4e8 <__retarget_lock_release_recursive>
 80107d6:	bf00      	nop
 80107d8:	20002c1c 	.word	0x20002c1c

080107dc <_realloc_r>:
 80107dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107de:	4607      	mov	r7, r0
 80107e0:	4614      	mov	r4, r2
 80107e2:	460e      	mov	r6, r1
 80107e4:	b921      	cbnz	r1, 80107f0 <_realloc_r+0x14>
 80107e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80107ea:	4611      	mov	r1, r2
 80107ec:	f7ff bc36 	b.w	801005c <_malloc_r>
 80107f0:	b922      	cbnz	r2, 80107fc <_realloc_r+0x20>
 80107f2:	f7ff fbe3 	bl	800ffbc <_free_r>
 80107f6:	4625      	mov	r5, r4
 80107f8:	4628      	mov	r0, r5
 80107fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107fc:	f000 f81b 	bl	8010836 <_malloc_usable_size_r>
 8010800:	42a0      	cmp	r0, r4
 8010802:	d20f      	bcs.n	8010824 <_realloc_r+0x48>
 8010804:	4621      	mov	r1, r4
 8010806:	4638      	mov	r0, r7
 8010808:	f7ff fc28 	bl	801005c <_malloc_r>
 801080c:	4605      	mov	r5, r0
 801080e:	2800      	cmp	r0, #0
 8010810:	d0f2      	beq.n	80107f8 <_realloc_r+0x1c>
 8010812:	4631      	mov	r1, r6
 8010814:	4622      	mov	r2, r4
 8010816:	f7fe fef9 	bl	800f60c <memcpy>
 801081a:	4631      	mov	r1, r6
 801081c:	4638      	mov	r0, r7
 801081e:	f7ff fbcd 	bl	800ffbc <_free_r>
 8010822:	e7e9      	b.n	80107f8 <_realloc_r+0x1c>
 8010824:	4635      	mov	r5, r6
 8010826:	e7e7      	b.n	80107f8 <_realloc_r+0x1c>

08010828 <abort>:
 8010828:	b508      	push	{r3, lr}
 801082a:	2006      	movs	r0, #6
 801082c:	f000 f834 	bl	8010898 <raise>
 8010830:	2001      	movs	r0, #1
 8010832:	f7f1 ff03 	bl	800263c <_exit>

08010836 <_malloc_usable_size_r>:
 8010836:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801083a:	1f18      	subs	r0, r3, #4
 801083c:	2b00      	cmp	r3, #0
 801083e:	bfbc      	itt	lt
 8010840:	580b      	ldrlt	r3, [r1, r0]
 8010842:	18c0      	addlt	r0, r0, r3
 8010844:	4770      	bx	lr

08010846 <_raise_r>:
 8010846:	291f      	cmp	r1, #31
 8010848:	b538      	push	{r3, r4, r5, lr}
 801084a:	4604      	mov	r4, r0
 801084c:	460d      	mov	r5, r1
 801084e:	d904      	bls.n	801085a <_raise_r+0x14>
 8010850:	2316      	movs	r3, #22
 8010852:	6003      	str	r3, [r0, #0]
 8010854:	f04f 30ff 	mov.w	r0, #4294967295
 8010858:	bd38      	pop	{r3, r4, r5, pc}
 801085a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801085c:	b112      	cbz	r2, 8010864 <_raise_r+0x1e>
 801085e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010862:	b94b      	cbnz	r3, 8010878 <_raise_r+0x32>
 8010864:	4620      	mov	r0, r4
 8010866:	f000 f831 	bl	80108cc <_getpid_r>
 801086a:	462a      	mov	r2, r5
 801086c:	4601      	mov	r1, r0
 801086e:	4620      	mov	r0, r4
 8010870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010874:	f000 b818 	b.w	80108a8 <_kill_r>
 8010878:	2b01      	cmp	r3, #1
 801087a:	d00a      	beq.n	8010892 <_raise_r+0x4c>
 801087c:	1c59      	adds	r1, r3, #1
 801087e:	d103      	bne.n	8010888 <_raise_r+0x42>
 8010880:	2316      	movs	r3, #22
 8010882:	6003      	str	r3, [r0, #0]
 8010884:	2001      	movs	r0, #1
 8010886:	e7e7      	b.n	8010858 <_raise_r+0x12>
 8010888:	2400      	movs	r4, #0
 801088a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801088e:	4628      	mov	r0, r5
 8010890:	4798      	blx	r3
 8010892:	2000      	movs	r0, #0
 8010894:	e7e0      	b.n	8010858 <_raise_r+0x12>
	...

08010898 <raise>:
 8010898:	4b02      	ldr	r3, [pc, #8]	; (80108a4 <raise+0xc>)
 801089a:	4601      	mov	r1, r0
 801089c:	6818      	ldr	r0, [r3, #0]
 801089e:	f7ff bfd2 	b.w	8010846 <_raise_r>
 80108a2:	bf00      	nop
 80108a4:	20000198 	.word	0x20000198

080108a8 <_kill_r>:
 80108a8:	b538      	push	{r3, r4, r5, lr}
 80108aa:	4d07      	ldr	r5, [pc, #28]	; (80108c8 <_kill_r+0x20>)
 80108ac:	2300      	movs	r3, #0
 80108ae:	4604      	mov	r4, r0
 80108b0:	4608      	mov	r0, r1
 80108b2:	4611      	mov	r1, r2
 80108b4:	602b      	str	r3, [r5, #0]
 80108b6:	f7f1 feb1 	bl	800261c <_kill>
 80108ba:	1c43      	adds	r3, r0, #1
 80108bc:	d102      	bne.n	80108c4 <_kill_r+0x1c>
 80108be:	682b      	ldr	r3, [r5, #0]
 80108c0:	b103      	cbz	r3, 80108c4 <_kill_r+0x1c>
 80108c2:	6023      	str	r3, [r4, #0]
 80108c4:	bd38      	pop	{r3, r4, r5, pc}
 80108c6:	bf00      	nop
 80108c8:	20002c24 	.word	0x20002c24

080108cc <_getpid_r>:
 80108cc:	f7f1 be9e 	b.w	800260c <_getpid>

080108d0 <_init>:
 80108d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108d2:	bf00      	nop
 80108d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108d6:	bc08      	pop	{r3}
 80108d8:	469e      	mov	lr, r3
 80108da:	4770      	bx	lr

080108dc <_fini>:
 80108dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108de:	bf00      	nop
 80108e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108e2:	bc08      	pop	{r3}
 80108e4:	469e      	mov	lr, r3
 80108e6:	4770      	bx	lr
