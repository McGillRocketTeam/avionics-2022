
f437_fc_v4.1.5_blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014f3c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008ac  080150f0  080150f0  000250f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801599c  0801599c  0003036c  2**0
                  CONTENTS
  4 .ARM          00000008  0801599c  0801599c  0002599c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080159a4  080159a4  0003036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080159a4  080159a4  000259a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080159a8  080159a8  000259a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000036c  20000000  080159ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003036c  2**0
                  CONTENTS
 10 .bss          00003308  2000036c  2000036c  0003036c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003674  20003674  0003036c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003036c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00044ebc  00000000  00000000  0003039c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000063ce  00000000  00000000  00075258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002868  00000000  00000000  0007b628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002638  00000000  00000000  0007de90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002dafa  00000000  00000000  000804c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002dd2b  00000000  00000000  000adfc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fb31f  00000000  00000000  000dbced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001d700c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000c4b0  00000000  00000000  001d7060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000036c 	.word	0x2000036c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080150d4 	.word	0x080150d4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000370 	.word	0x20000370
 80001ec:	080150d4 	.word	0x080150d4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <GPS_Poll>:
	CDC_Transmit_FS((unsigned char *) buf, (uint16_t) strlen(buf));
}
#endif

void GPS_Poll(float *latitude, float *longitude, float *time)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08c      	sub	sp, #48	; 0x30
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 8001018:	2364      	movs	r3, #100	; 0x64
 800101a:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
	while(loop_count < max_loop_count && !done){
 8001024:	e06a      	b.n	80010fc <GPS_Poll+0xf0>
		HAL_UART_Receive(GPS_USART, (uint8_t*)&rx_current, 1, 100);
 8001026:	2364      	movs	r3, #100	; 0x64
 8001028:	2201      	movs	r2, #1
 800102a:	493a      	ldr	r1, [pc, #232]	; (8001114 <GPS_Poll+0x108>)
 800102c:	483a      	ldr	r0, [pc, #232]	; (8001118 <GPS_Poll+0x10c>)
 800102e:	f007 fd14 	bl	8008a5a <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 8001032:	4b38      	ldr	r3, [pc, #224]	; (8001114 <GPS_Poll+0x108>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b0a      	cmp	r3, #10
 8001038:	d00f      	beq.n	800105a <GPS_Poll+0x4e>
 800103a:	4b38      	ldr	r3, [pc, #224]	; (800111c <GPS_Poll+0x110>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b63      	cmp	r3, #99	; 0x63
 8001040:	d80b      	bhi.n	800105a <GPS_Poll+0x4e>
			rx_buffer[rx_index++] = rx_current;
 8001042:	4b36      	ldr	r3, [pc, #216]	; (800111c <GPS_Poll+0x110>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	1c5a      	adds	r2, r3, #1
 8001048:	b2d1      	uxtb	r1, r2
 800104a:	4a34      	ldr	r2, [pc, #208]	; (800111c <GPS_Poll+0x110>)
 800104c:	7011      	strb	r1, [r2, #0]
 800104e:	461a      	mov	r2, r3
 8001050:	4b30      	ldr	r3, [pc, #192]	; (8001114 <GPS_Poll+0x108>)
 8001052:	7819      	ldrb	r1, [r3, #0]
 8001054:	4b32      	ldr	r3, [pc, #200]	; (8001120 <GPS_Poll+0x114>)
 8001056:	5499      	strb	r1, [r3, r2]
 8001058:	e021      	b.n	800109e <GPS_Poll+0x92>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 800105a:	4831      	ldr	r0, [pc, #196]	; (8001120 <GPS_Poll+0x114>)
 800105c:	f000 f864 	bl	8001128 <GPS_validate>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d013      	beq.n	800108e <GPS_Poll+0x82>
				if(GPS_parse((char*) rx_buffer)){
 8001066:	482e      	ldr	r0, [pc, #184]	; (8001120 <GPS_Poll+0x114>)
 8001068:	f000 f8c0 	bl	80011ec <GPS_parse>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d00d      	beq.n	800108e <GPS_Poll+0x82>
					*latitude = GPS.dec_latitude;
 8001072:	4b2c      	ldr	r3, [pc, #176]	; (8001124 <GPS_Poll+0x118>)
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 800107a:	4b2a      	ldr	r3, [pc, #168]	; (8001124 <GPS_Poll+0x118>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 8001082:	4b28      	ldr	r3, [pc, #160]	; (8001124 <GPS_Poll+0x118>)
 8001084:	695a      	ldr	r2, [r3, #20]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	601a      	str	r2, [r3, #0]
					done = 1;
 800108a:	2301      	movs	r3, #1
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 800108e:	4b23      	ldr	r3, [pc, #140]	; (800111c <GPS_Poll+0x110>)
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 8001094:	2264      	movs	r2, #100	; 0x64
 8001096:	2100      	movs	r1, #0
 8001098:	4821      	ldr	r0, [pc, #132]	; (8001120 <GPS_Poll+0x114>)
 800109a:	f00e ff65 	bl	800ff68 <memset>
		// from f303 code
//		__HAL_UART_CLEAR_FLAG(GPS_USART, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS_USART);
 800109e:	2300      	movs	r3, #0
 80010a0:	623b      	str	r3, [r7, #32]
 80010a2:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <GPS_Poll+0x10c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	623b      	str	r3, [r7, #32]
 80010aa:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <GPS_Poll+0x10c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	623b      	str	r3, [r7, #32]
 80010b2:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS_USART);
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
 80010b8:	4b17      	ldr	r3, [pc, #92]	; (8001118 <GPS_Poll+0x10c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	61fb      	str	r3, [r7, #28]
 80010c0:	4b15      	ldr	r3, [pc, #84]	; (8001118 <GPS_Poll+0x10c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	61fb      	str	r3, [r7, #28]
 80010c8:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS_USART);
 80010ca:	2300      	movs	r3, #0
 80010cc:	61bb      	str	r3, [r7, #24]
 80010ce:	4b12      	ldr	r3, [pc, #72]	; (8001118 <GPS_Poll+0x10c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	61bb      	str	r3, [r7, #24]
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <GPS_Poll+0x10c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	61bb      	str	r3, [r7, #24]
 80010de:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS_USART);
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <GPS_Poll+0x10c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <GPS_Poll+0x10c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 80010f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80010f8:	3301      	adds	r3, #1
 80010fa:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 80010fc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80010fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001100:	429a      	cmp	r2, r3
 8001102:	d202      	bcs.n	800110a <GPS_Poll+0xfe>
 8001104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001106:	2b00      	cmp	r3, #0
 8001108:	d08d      	beq.n	8001026 <GPS_Poll+0x1a>
	}

}
 800110a:	bf00      	nop
 800110c:	3730      	adds	r7, #48	; 0x30
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000388 	.word	0x20000388
 8001118:	20001254 	.word	0x20001254
 800111c:	20000389 	.word	0x20000389
 8001120:	20000be4 	.word	0x20000be4
 8001124:	20000b8c 	.word	0x20000b8c

08001128 <GPS_validate>:

int GPS_validate(char *nmeastr){
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b24      	cmp	r3, #36	; 0x24
 8001142:	d103      	bne.n	800114c <GPS_validate+0x24>
        i++;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	3301      	adds	r3, #1
 8001148:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800114a:	e00c      	b.n	8001166 <GPS_validate+0x3e>
        return 0;
 800114c:	2300      	movs	r3, #0
 800114e:	e047      	b.n	80011e0 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	4053      	eors	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        i++;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	3301      	adds	r3, #1
 8001164:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	4413      	add	r3, r2
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d008      	beq.n	8001184 <GPS_validate+0x5c>
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b2a      	cmp	r3, #42	; 0x2a
 800117c:	d002      	beq.n	8001184 <GPS_validate+0x5c>
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	2b4a      	cmp	r3, #74	; 0x4a
 8001182:	dde5      	ble.n	8001150 <GPS_validate+0x28>
    }

    if(i >= 75){
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	2b4a      	cmp	r3, #74	; 0x4a
 8001188:	dd01      	ble.n	800118e <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 800118a:	2300      	movs	r3, #0
 800118c:	e028      	b.n	80011e0 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	4413      	add	r3, r2
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b2a      	cmp	r3, #42	; 0x2a
 8001198:	d119      	bne.n	80011ce <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	3301      	adds	r3, #1
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	3302      	adds	r3, #2
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 80011b6:	f107 0308 	add.w	r3, r7, #8
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	490a      	ldr	r1, [pc, #40]	; (80011e8 <GPS_validate+0xc0>)
 80011be:	4618      	mov	r0, r3
 80011c0:	f00f fd5a 	bl	8010c78 <siprintf>
    return((checkcalcstr[0] == check[0])
 80011c4:	7a3a      	ldrb	r2, [r7, #8]
 80011c6:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d108      	bne.n	80011de <GPS_validate+0xb6>
 80011cc:	e001      	b.n	80011d2 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 80011ce:	2300      	movs	r3, #0
 80011d0:	e006      	b.n	80011e0 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80011d2:	7a7a      	ldrb	r2, [r7, #9]
 80011d4:	7b7b      	ldrb	r3, [r7, #13]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d101      	bne.n	80011de <GPS_validate+0xb6>
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <GPS_validate+0xb8>
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	080150f0 	.word	0x080150f0

080011ec <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	; 0x28
 80011f0:	af08      	add	r7, sp, #32
 80011f2:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 80011f4:	2206      	movs	r2, #6
 80011f6:	496d      	ldr	r1, [pc, #436]	; (80013ac <GPS_parse+0x1c0>)
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f00f fdd6 	bl	8010daa <strncmp>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d139      	bne.n	8001278 <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8001204:	4b6a      	ldr	r3, [pc, #424]	; (80013b0 <GPS_parse+0x1c4>)
 8001206:	9307      	str	r3, [sp, #28]
 8001208:	4b6a      	ldr	r3, [pc, #424]	; (80013b4 <GPS_parse+0x1c8>)
 800120a:	9306      	str	r3, [sp, #24]
 800120c:	4b6a      	ldr	r3, [pc, #424]	; (80013b8 <GPS_parse+0x1cc>)
 800120e:	9305      	str	r3, [sp, #20]
 8001210:	4b6a      	ldr	r3, [pc, #424]	; (80013bc <GPS_parse+0x1d0>)
 8001212:	9304      	str	r3, [sp, #16]
 8001214:	4b6a      	ldr	r3, [pc, #424]	; (80013c0 <GPS_parse+0x1d4>)
 8001216:	9303      	str	r3, [sp, #12]
 8001218:	4b6a      	ldr	r3, [pc, #424]	; (80013c4 <GPS_parse+0x1d8>)
 800121a:	9302      	str	r3, [sp, #8]
 800121c:	4b6a      	ldr	r3, [pc, #424]	; (80013c8 <GPS_parse+0x1dc>)
 800121e:	9301      	str	r3, [sp, #4]
 8001220:	4b6a      	ldr	r3, [pc, #424]	; (80013cc <GPS_parse+0x1e0>)
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	4b6a      	ldr	r3, [pc, #424]	; (80013d0 <GPS_parse+0x1e4>)
 8001226:	4a6b      	ldr	r2, [pc, #428]	; (80013d4 <GPS_parse+0x1e8>)
 8001228:	496b      	ldr	r1, [pc, #428]	; (80013d8 <GPS_parse+0x1ec>)
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f00f fd44 	bl	8010cb8 <siscanf>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	f340 80b5 	ble.w	80013a2 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8001238:	4b68      	ldr	r3, [pc, #416]	; (80013dc <GPS_parse+0x1f0>)
 800123a:	edd3 7a04 	vldr	s15, [r3, #16]
 800123e:	4b67      	ldr	r3, [pc, #412]	; (80013dc <GPS_parse+0x1f0>)
 8001240:	7e1b      	ldrb	r3, [r3, #24]
 8001242:	4618      	mov	r0, r3
 8001244:	eeb0 0a67 	vmov.f32	s0, s15
 8001248:	f000 f8ec 	bl	8001424 <GPS_nmea_to_dec>
 800124c:	eef0 7a40 	vmov.f32	s15, s0
 8001250:	4b62      	ldr	r3, [pc, #392]	; (80013dc <GPS_parse+0x1f0>)
 8001252:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8001256:	4b61      	ldr	r3, [pc, #388]	; (80013dc <GPS_parse+0x1f0>)
 8001258:	edd3 7a03 	vldr	s15, [r3, #12]
 800125c:	4b5f      	ldr	r3, [pc, #380]	; (80013dc <GPS_parse+0x1f0>)
 800125e:	7e5b      	ldrb	r3, [r3, #25]
 8001260:	4618      	mov	r0, r3
 8001262:	eeb0 0a67 	vmov.f32	s0, s15
 8001266:	f000 f8dd 	bl	8001424 <GPS_nmea_to_dec>
 800126a:	eef0 7a40 	vmov.f32	s15, s0
 800126e:	4b5b      	ldr	r3, [pc, #364]	; (80013dc <GPS_parse+0x1f0>)
 8001270:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8001274:	2301      	movs	r3, #1
 8001276:	e095      	b.n	80013a4 <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 8001278:	2206      	movs	r2, #6
 800127a:	4959      	ldr	r1, [pc, #356]	; (80013e0 <GPS_parse+0x1f4>)
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f00f fd94 	bl	8010daa <strncmp>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d134      	bne.n	80012f2 <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 8001288:	4b56      	ldr	r3, [pc, #344]	; (80013e4 <GPS_parse+0x1f8>)
 800128a:	9305      	str	r3, [sp, #20]
 800128c:	4b56      	ldr	r3, [pc, #344]	; (80013e8 <GPS_parse+0x1fc>)
 800128e:	9304      	str	r3, [sp, #16]
 8001290:	4b56      	ldr	r3, [pc, #344]	; (80013ec <GPS_parse+0x200>)
 8001292:	9303      	str	r3, [sp, #12]
 8001294:	4b4b      	ldr	r3, [pc, #300]	; (80013c4 <GPS_parse+0x1d8>)
 8001296:	9302      	str	r3, [sp, #8]
 8001298:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <GPS_parse+0x1dc>)
 800129a:	9301      	str	r3, [sp, #4]
 800129c:	4b4b      	ldr	r3, [pc, #300]	; (80013cc <GPS_parse+0x1e0>)
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	4b4b      	ldr	r3, [pc, #300]	; (80013d0 <GPS_parse+0x1e4>)
 80012a2:	4a4c      	ldr	r2, [pc, #304]	; (80013d4 <GPS_parse+0x1e8>)
 80012a4:	4952      	ldr	r1, [pc, #328]	; (80013f0 <GPS_parse+0x204>)
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f00f fd06 	bl	8010cb8 <siscanf>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	dd77      	ble.n	80013a2 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80012b2:	4b4a      	ldr	r3, [pc, #296]	; (80013dc <GPS_parse+0x1f0>)
 80012b4:	edd3 7a04 	vldr	s15, [r3, #16]
 80012b8:	4b48      	ldr	r3, [pc, #288]	; (80013dc <GPS_parse+0x1f0>)
 80012ba:	7e1b      	ldrb	r3, [r3, #24]
 80012bc:	4618      	mov	r0, r3
 80012be:	eeb0 0a67 	vmov.f32	s0, s15
 80012c2:	f000 f8af 	bl	8001424 <GPS_nmea_to_dec>
 80012c6:	eef0 7a40 	vmov.f32	s15, s0
 80012ca:	4b44      	ldr	r3, [pc, #272]	; (80013dc <GPS_parse+0x1f0>)
 80012cc:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80012d0:	4b42      	ldr	r3, [pc, #264]	; (80013dc <GPS_parse+0x1f0>)
 80012d2:	edd3 7a03 	vldr	s15, [r3, #12]
 80012d6:	4b41      	ldr	r3, [pc, #260]	; (80013dc <GPS_parse+0x1f0>)
 80012d8:	7e5b      	ldrb	r3, [r3, #25]
 80012da:	4618      	mov	r0, r3
 80012dc:	eeb0 0a67 	vmov.f32	s0, s15
 80012e0:	f000 f8a0 	bl	8001424 <GPS_nmea_to_dec>
 80012e4:	eef0 7a40 	vmov.f32	s15, s0
 80012e8:	4b3c      	ldr	r3, [pc, #240]	; (80013dc <GPS_parse+0x1f0>)
 80012ea:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e058      	b.n	80013a4 <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 80012f2:	2206      	movs	r2, #6
 80012f4:	493f      	ldr	r1, [pc, #252]	; (80013f4 <GPS_parse+0x208>)
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f00f fd57 	bl	8010daa <strncmp>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d130      	bne.n	8001364 <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 8001302:	4b3d      	ldr	r3, [pc, #244]	; (80013f8 <GPS_parse+0x20c>)
 8001304:	9303      	str	r3, [sp, #12]
 8001306:	4b33      	ldr	r3, [pc, #204]	; (80013d4 <GPS_parse+0x1e8>)
 8001308:	9302      	str	r3, [sp, #8]
 800130a:	4b2e      	ldr	r3, [pc, #184]	; (80013c4 <GPS_parse+0x1d8>)
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	4b2e      	ldr	r3, [pc, #184]	; (80013c8 <GPS_parse+0x1dc>)
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	4b2e      	ldr	r3, [pc, #184]	; (80013cc <GPS_parse+0x1e0>)
 8001314:	4a2e      	ldr	r2, [pc, #184]	; (80013d0 <GPS_parse+0x1e4>)
 8001316:	4939      	ldr	r1, [pc, #228]	; (80013fc <GPS_parse+0x210>)
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f00f fccd 	bl	8010cb8 <siscanf>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	dd3e      	ble.n	80013a2 <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8001324:	4b2d      	ldr	r3, [pc, #180]	; (80013dc <GPS_parse+0x1f0>)
 8001326:	edd3 7a04 	vldr	s15, [r3, #16]
 800132a:	4b2c      	ldr	r3, [pc, #176]	; (80013dc <GPS_parse+0x1f0>)
 800132c:	7e1b      	ldrb	r3, [r3, #24]
 800132e:	4618      	mov	r0, r3
 8001330:	eeb0 0a67 	vmov.f32	s0, s15
 8001334:	f000 f876 	bl	8001424 <GPS_nmea_to_dec>
 8001338:	eef0 7a40 	vmov.f32	s15, s0
 800133c:	4b27      	ldr	r3, [pc, #156]	; (80013dc <GPS_parse+0x1f0>)
 800133e:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8001342:	4b26      	ldr	r3, [pc, #152]	; (80013dc <GPS_parse+0x1f0>)
 8001344:	edd3 7a03 	vldr	s15, [r3, #12]
 8001348:	4b24      	ldr	r3, [pc, #144]	; (80013dc <GPS_parse+0x1f0>)
 800134a:	7e5b      	ldrb	r3, [r3, #25]
 800134c:	4618      	mov	r0, r3
 800134e:	eeb0 0a67 	vmov.f32	s0, s15
 8001352:	f000 f867 	bl	8001424 <GPS_nmea_to_dec>
 8001356:	eef0 7a40 	vmov.f32	s15, s0
 800135a:	4b20      	ldr	r3, [pc, #128]	; (80013dc <GPS_parse+0x1f0>)
 800135c:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 8001360:	2301      	movs	r3, #1
 8001362:	e01f      	b.n	80013a4 <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 8001364:	2206      	movs	r2, #6
 8001366:	4926      	ldr	r1, [pc, #152]	; (8001400 <GPS_parse+0x214>)
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f00f fd1e 	bl	8010daa <strncmp>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d116      	bne.n	80013a2 <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8001374:	4b23      	ldr	r3, [pc, #140]	; (8001404 <GPS_parse+0x218>)
 8001376:	9305      	str	r3, [sp, #20]
 8001378:	4b23      	ldr	r3, [pc, #140]	; (8001408 <GPS_parse+0x21c>)
 800137a:	9304      	str	r3, [sp, #16]
 800137c:	4b23      	ldr	r3, [pc, #140]	; (800140c <GPS_parse+0x220>)
 800137e:	9303      	str	r3, [sp, #12]
 8001380:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <GPS_parse+0x200>)
 8001382:	9302      	str	r3, [sp, #8]
 8001384:	4b22      	ldr	r3, [pc, #136]	; (8001410 <GPS_parse+0x224>)
 8001386:	9301      	str	r3, [sp, #4]
 8001388:	4b22      	ldr	r3, [pc, #136]	; (8001414 <GPS_parse+0x228>)
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	4b22      	ldr	r3, [pc, #136]	; (8001418 <GPS_parse+0x22c>)
 800138e:	4a23      	ldr	r2, [pc, #140]	; (800141c <GPS_parse+0x230>)
 8001390:	4923      	ldr	r1, [pc, #140]	; (8001420 <GPS_parse+0x234>)
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f00f fc90 	bl	8010cb8 <siscanf>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	dd01      	ble.n	80013a2 <GPS_parse+0x1b6>
            return 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	e000      	b.n	80013a4 <GPS_parse+0x1b8>
    }
    return 0;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	080150f8 	.word	0x080150f8
 80013b0:	20000bb8 	.word	0x20000bb8
 80013b4:	20000bb4 	.word	0x20000bb4
 80013b8:	20000bb0 	.word	0x20000bb0
 80013bc:	20000bac 	.word	0x20000bac
 80013c0:	20000ba8 	.word	0x20000ba8
 80013c4:	20000ba5 	.word	0x20000ba5
 80013c8:	20000b98 	.word	0x20000b98
 80013cc:	20000ba4 	.word	0x20000ba4
 80013d0:	20000b9c 	.word	0x20000b9c
 80013d4:	20000ba0 	.word	0x20000ba0
 80013d8:	08015100 	.word	0x08015100
 80013dc:	20000b8c 	.word	0x20000b8c
 80013e0:	08015128 	.word	0x08015128
 80013e4:	20000bc4 	.word	0x20000bc4
 80013e8:	20000bc0 	.word	0x20000bc0
 80013ec:	20000bbc 	.word	0x20000bbc
 80013f0:	08015130 	.word	0x08015130
 80013f4:	08015150 	.word	0x08015150
 80013f8:	20000bc8 	.word	0x20000bc8
 80013fc:	08015158 	.word	0x08015158
 8001400:	08015174 	.word	0x08015174
 8001404:	20000be0 	.word	0x20000be0
 8001408:	20000bdc 	.word	0x20000bdc
 800140c:	20000bd9 	.word	0x20000bd9
 8001410:	20000bd8 	.word	0x20000bd8
 8001414:	20000bd4 	.word	0x20000bd4
 8001418:	20000bd0 	.word	0x20000bd0
 800141c:	20000bcc 	.word	0x20000bcc
 8001420:	0801517c 	.word	0x0801517c

08001424 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8001424:	b480      	push	{r7}
 8001426:	b087      	sub	sp, #28
 8001428:	af00      	add	r7, sp, #0
 800142a:	ed87 0a01 	vstr	s0, [r7, #4]
 800142e:	4603      	mov	r3, r0
 8001430:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8001432:	ed97 7a01 	vldr	s14, [r7, #4]
 8001436:	eddf 6a20 	vldr	s13, [pc, #128]	; 80014b8 <GPS_nmea_to_dec+0x94>
 800143a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800143e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001442:	ee17 3a90 	vmov	r3, s15
 8001446:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	2264      	movs	r2, #100	; 0x64
 800144c:	fb02 f303 	mul.w	r3, r2, r3
 8001450:	ee07 3a90 	vmov	s15, r3
 8001454:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001458:	ed97 7a01 	vldr	s14, [r7, #4]
 800145c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001460:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8001464:	ed97 7a03 	vldr	s14, [r7, #12]
 8001468:	eddf 6a14 	vldr	s13, [pc, #80]	; 80014bc <GPS_nmea_to_dec+0x98>
 800146c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001470:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	ee07 3a90 	vmov	s15, r3
 800147a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001482:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001486:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 800148a:	78fb      	ldrb	r3, [r7, #3]
 800148c:	2b53      	cmp	r3, #83	; 0x53
 800148e:	d002      	beq.n	8001496 <GPS_nmea_to_dec+0x72>
 8001490:	78fb      	ldrb	r3, [r7, #3]
 8001492:	2b57      	cmp	r3, #87	; 0x57
 8001494:	d105      	bne.n	80014a2 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8001496:	edd7 7a05 	vldr	s15, [r7, #20]
 800149a:	eef1 7a67 	vneg.f32	s15, s15
 800149e:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	ee07 3a90 	vmov	s15, r3
}
 80014a8:	eeb0 0a67 	vmov.f32	s0, s15
 80014ac:	371c      	adds	r7, #28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	42c80000 	.word	0x42c80000
 80014bc:	42700000 	.word	0x42700000

080014c0 <GPS_check_nonzero_data>:

void GPS_check_nonzero_data(float latitude, float longitude, uint8_t *gps_fix_lat, uint8_t *gps_fix_long)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	ed87 0a03 	vstr	s0, [r7, #12]
 80014ca:	edc7 0a02 	vstr	s1, [r7, #8]
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
	if (latitude == 0)
 80014d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80014d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014de:	d110      	bne.n	8001502 <GPS_check_nonzero_data+0x42>
	{
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2104      	movs	r1, #4
 80014e4:	4825      	ldr	r0, [pc, #148]	; (800157c <GPS_check_nonzero_data+0xbc>)
 80014e6:	f003 f82d 	bl	8004544 <HAL_GPIO_WritePin>

		if (*gps_fix_lat == 1)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d117      	bne.n	8001522 <GPS_check_nonzero_data+0x62>
		{
			*gps_fix_lat = 0;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
			tone(200, 2);
 80014f8:	2102      	movs	r1, #2
 80014fa:	20c8      	movs	r0, #200	; 0xc8
 80014fc:	f001 fc2a 	bl	8002d54 <tone>
 8001500:	e00f      	b.n	8001522 <GPS_check_nonzero_data+0x62>
		}
	}
	else
	{
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 8001502:	2201      	movs	r2, #1
 8001504:	2104      	movs	r1, #4
 8001506:	481d      	ldr	r0, [pc, #116]	; (800157c <GPS_check_nonzero_data+0xbc>)
 8001508:	f003 f81c 	bl	8004544 <HAL_GPIO_WritePin>
		if (*gps_fix_lat == 0)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d106      	bne.n	8001522 <GPS_check_nonzero_data+0x62>
		{
			*gps_fix_lat = 1;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2201      	movs	r2, #1
 8001518:	701a      	strb	r2, [r3, #0]
			tone(200, 4);
 800151a:	2104      	movs	r1, #4
 800151c:	20c8      	movs	r0, #200	; 0xc8
 800151e:	f001 fc19 	bl	8002d54 <tone>
		}
	}

	if (longitude == 0)
 8001522:	edd7 7a02 	vldr	s15, [r7, #8]
 8001526:	eef5 7a40 	vcmp.f32	s15, #0.0
 800152a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152e:	d110      	bne.n	8001552 <GPS_check_nonzero_data+0x92>
	{
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8001530:	2200      	movs	r2, #0
 8001532:	2108      	movs	r1, #8
 8001534:	4811      	ldr	r0, [pc, #68]	; (800157c <GPS_check_nonzero_data+0xbc>)
 8001536:	f003 f805 	bl	8004544 <HAL_GPIO_WritePin>
		if (*gps_fix_long == 1)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d117      	bne.n	8001572 <GPS_check_nonzero_data+0xb2>
		{
			*gps_fix_long = 0;
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	2200      	movs	r2, #0
 8001546:	701a      	strb	r2, [r3, #0]
			tone(200, 2);
 8001548:	2102      	movs	r1, #2
 800154a:	20c8      	movs	r0, #200	; 0xc8
 800154c:	f001 fc02 	bl	8002d54 <tone>
		{
			*gps_fix_long = 1;
			tone(200, 4);
		}
	}
}
 8001550:	e00f      	b.n	8001572 <GPS_check_nonzero_data+0xb2>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET);
 8001552:	2201      	movs	r2, #1
 8001554:	2108      	movs	r1, #8
 8001556:	4809      	ldr	r0, [pc, #36]	; (800157c <GPS_check_nonzero_data+0xbc>)
 8001558:	f002 fff4 	bl	8004544 <HAL_GPIO_WritePin>
		if (*gps_fix_long == 0)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d106      	bne.n	8001572 <GPS_check_nonzero_data+0xb2>
			*gps_fix_long = 1;
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	2201      	movs	r2, #1
 8001568:	701a      	strb	r2, [r3, #0]
			tone(200, 4);
 800156a:	2104      	movs	r1, #4
 800156c:	20c8      	movs	r0, #200	; 0xc8
 800156e:	f001 fbf1 	bl	8002d54 <tone>
}
 8001572:	bf00      	nop
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40020800 	.word	0x40020800

08001580 <lsm6dsl_init>:
                             uint16_t len);
static void platform_delay(uint32_t ms);

/* LSM6DSL Functions ---------------------------------------------------------*/

stmdev_ctx_t lsm6dsl_init(void){
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	b087      	sub	sp, #28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]

	stmdev_ctx_t dev_ctx_lsm6dsl;

	/* Initialize mems driver interface */
	dev_ctx_lsm6dsl.write_reg = lsm6dsl_write;
 8001588:	4b2f      	ldr	r3, [pc, #188]	; (8001648 <lsm6dsl_init+0xc8>)
 800158a:	60fb      	str	r3, [r7, #12]
	dev_ctx_lsm6dsl.read_reg = lsm6dsl_read;
 800158c:	4b2f      	ldr	r3, [pc, #188]	; (800164c <lsm6dsl_init+0xcc>)
 800158e:	613b      	str	r3, [r7, #16]
	dev_ctx_lsm6dsl.handle = &SENSOR_BUS;
 8001590:	4b2f      	ldr	r3, [pc, #188]	; (8001650 <lsm6dsl_init+0xd0>)
 8001592:	617b      	str	r3, [r7, #20]

	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 8001594:	200a      	movs	r0, #10
 8001596:	f000 fa13 	bl	80019c0 <platform_delay>

	/* Check device ID */
	lsm6dsl_device_id_get(&dev_ctx_lsm6dsl, &whoamI_lsm6dsl);
 800159a:	f107 030c 	add.w	r3, r7, #12
 800159e:	492d      	ldr	r1, [pc, #180]	; (8001654 <lsm6dsl_init+0xd4>)
 80015a0:	4618      	mov	r0, r3
 80015a2:	f000 fd71 	bl	8002088 <lsm6dsl_device_id_get>

	if (whoamI_lsm6dsl != LSM6DSL_ID){
 80015a6:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <lsm6dsl_init+0xd4>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b6a      	cmp	r3, #106	; 0x6a
 80015ac:	d005      	beq.n	80015ba <lsm6dsl_init+0x3a>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80015ae:	2201      	movs	r2, #1
 80015b0:	2102      	movs	r1, #2
 80015b2:	4829      	ldr	r0, [pc, #164]	; (8001658 <lsm6dsl_init+0xd8>)
 80015b4:	f002 ffc6 	bl	8004544 <HAL_GPIO_WritePin>
		__BKPT();
 80015b8:	be00      	bkpt	0x0000
//		Error_Handler();
	}

	/* Restore default configuration */
	lsm6dsl_reset_set(&dev_ctx_lsm6dsl, PROPERTY_ENABLE);
 80015ba:	f107 030c 	add.w	r3, r7, #12
 80015be:	2101      	movs	r1, #1
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 fd72 	bl	80020aa <lsm6dsl_reset_set>

	do {
	lsm6dsl_reset_get(&dev_ctx_lsm6dsl, &rst_lsm6dsl);
 80015c6:	f107 030c 	add.w	r3, r7, #12
 80015ca:	4924      	ldr	r1, [pc, #144]	; (800165c <lsm6dsl_init+0xdc>)
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 fd92 	bl	80020f6 <lsm6dsl_reset_get>
	} while (rst_lsm6dsl);
 80015d2:	4b22      	ldr	r3, [pc, #136]	; (800165c <lsm6dsl_init+0xdc>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f5      	bne.n	80015c6 <lsm6dsl_init+0x46>

	/* Enable Block Data Update */
	lsm6dsl_block_data_update_set(&dev_ctx_lsm6dsl, PROPERTY_ENABLE);
 80015da:	f107 030c 	add.w	r3, r7, #12
 80015de:	2101      	movs	r1, #1
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 fc63 	bl	8001eac <lsm6dsl_block_data_update_set>

	/* Set Output Data Rate */
	lsm6dsl_xl_data_rate_set(&dev_ctx_lsm6dsl, LSM6DSL_XL_ODR_104Hz);
 80015e6:	f107 030c 	add.w	r3, r7, #12
 80015ea:	2104      	movs	r1, #4
 80015ec:	4618      	mov	r0, r3
 80015ee:	f000 fbeb 	bl	8001dc8 <lsm6dsl_xl_data_rate_set>
	lsm6dsl_gy_data_rate_set(&dev_ctx_lsm6dsl, LSM6DSL_GY_ODR_104Hz);
 80015f2:	f107 030c 	add.w	r3, r7, #12
 80015f6:	2104      	movs	r1, #4
 80015f8:	4618      	mov	r0, r3
 80015fa:	f000 fc31 	bl	8001e60 <lsm6dsl_gy_data_rate_set>

	/* Set full scale */
	lsm6dsl_xl_full_scale_set(&dev_ctx_lsm6dsl, LSM6DSL_8g);
 80015fe:	f107 030c 	add.w	r3, r7, #12
 8001602:	2103      	movs	r1, #3
 8001604:	4618      	mov	r0, r3
 8001606:	f000 fbb9 	bl	8001d7c <lsm6dsl_xl_full_scale_set>
	lsm6dsl_gy_full_scale_set(&dev_ctx_lsm6dsl, LSM6DSL_2000dps);
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	2106      	movs	r1, #6
 8001610:	4618      	mov	r0, r3
 8001612:	f000 fbff 	bl	8001e14 <lsm6dsl_gy_full_scale_set>

	/* Configure filtering chain(No aux interface)
	* Accelerometer - LPF1 + LPF2 path
	*/
	lsm6dsl_xl_lp2_bandwidth_set(&dev_ctx_lsm6dsl, LSM6DSL_XL_LOW_NOISE_LP_ODR_DIV_100);
 8001616:	f107 030c 	add.w	r3, r7, #12
 800161a:	2111      	movs	r1, #17
 800161c:	4618      	mov	r0, r3
 800161e:	f000 fd83 	bl	8002128 <lsm6dsl_xl_lp2_bandwidth_set>
	/* Accelerometer - High Pass / Slope path */
	//lsm6dsl_xl_reference_mode_set(&dev_ctx_lsm, PROPERTY_DISABLE);
	//lsm6dsl_xl_hp_bandwidth_set(&dev_ctx_lsm, LSM6DSL_XL_HP_ODR_DIV_100);
	/* Gyroscope - filtering chain */
	lsm6dsl_gy_band_pass_set(&dev_ctx_lsm6dsl, LSM6DSL_HP_260mHz_LP1_STRONG);
 8001622:	f107 030c 	add.w	r3, r7, #12
 8001626:	21a8      	movs	r1, #168	; 0xa8
 8001628:	4618      	mov	r0, r3
 800162a:	f000 fdb4 	bl	8002196 <lsm6dsl_gy_band_pass_set>

	return dev_ctx_lsm6dsl;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	461c      	mov	r4, r3
 8001632:	f107 030c 	add.w	r3, r7, #12
 8001636:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800163a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	371c      	adds	r7, #28
 8001642:	46bd      	mov	sp, r7
 8001644:	bd90      	pop	{r4, r7, pc}
 8001646:	bf00      	nop
 8001648:	080018d9 	.word	0x080018d9
 800164c:	08001913 	.word	0x08001913
 8001650:	20000c48 	.word	0x20000c48
 8001654:	2000039c 	.word	0x2000039c
 8001658:	40020800 	.word	0x40020800
 800165c:	2000039d 	.word	0x2000039d

08001660 <get_acceleration>:

void get_acceleration(stmdev_ctx_t dev_ctx_lsm6dsl, float *acceleration_mg){
 8001660:	b590      	push	{r4, r7, lr}
 8001662:	b087      	sub	sp, #28
 8001664:	af00      	add	r7, sp, #0
 8001666:	1d3c      	adds	r4, r7, #4
 8001668:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800166c:	603b      	str	r3, [r7, #0]

	uint8_t reg;

	/* Read output only if new xl value is available */
	lsm6dsl_xl_flag_data_ready_get(&dev_ctx_lsm6dsl, &reg);
 800166e:	f107 0217 	add.w	r2, r7, #23
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	4611      	mov	r1, r2
 8001676:	4618      	mov	r0, r3
 8001678:	f000 fc3e 	bl	8001ef8 <lsm6dsl_xl_flag_data_ready_get>

	if (reg) {
 800167c:	7dfb      	ldrb	r3, [r7, #23]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d02d      	beq.n	80016de <get_acceleration+0x7e>
	  /* Read acceleration field data */
	  memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001682:	2206      	movs	r2, #6
 8001684:	2100      	movs	r1, #0
 8001686:	4818      	ldr	r0, [pc, #96]	; (80016e8 <get_acceleration+0x88>)
 8001688:	f00e fc6e 	bl	800ff68 <memset>
	  lsm6dsl_acceleration_raw_get(&dev_ctx_lsm6dsl, data_raw_acceleration);
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	4916      	ldr	r1, [pc, #88]	; (80016e8 <get_acceleration+0x88>)
 8001690:	4618      	mov	r0, r3
 8001692:	f000 fcae 	bl	8001ff2 <lsm6dsl_acceleration_raw_get>
	  acceleration_mg[0] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[0]);
 8001696:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <get_acceleration+0x88>)
 8001698:	f9b3 3000 	ldrsh.w	r3, [r3]
 800169c:	4618      	mov	r0, r3
 800169e:	f000 fb3d 	bl	8001d1c <lsm6dsl_from_fs8g_to_mg>
 80016a2:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[0] =
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	edc3 7a00 	vstr	s15, [r3]
	  acceleration_mg[1] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[1]);
 80016ac:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <get_acceleration+0x88>)
 80016ae:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	  acceleration_mg[1] =
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	1d1c      	adds	r4, r3, #4
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[1]);
 80016b6:	4610      	mov	r0, r2
 80016b8:	f000 fb30 	bl	8001d1c <lsm6dsl_from_fs8g_to_mg>
 80016bc:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[1] =
 80016c0:	edc4 7a00 	vstr	s15, [r4]
	  acceleration_mg[2] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[2]);
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <get_acceleration+0x88>)
 80016c6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
	  acceleration_mg[2] =
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	f103 0408 	add.w	r4, r3, #8
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[2]);
 80016d0:	4610      	mov	r0, r2
 80016d2:	f000 fb23 	bl	8001d1c <lsm6dsl_from_fs8g_to_mg>
 80016d6:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[2] =
 80016da:	edc4 7a00 	vstr	s15, [r4]
	}

}
 80016de:	bf00      	nop
 80016e0:	371c      	adds	r7, #28
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd90      	pop	{r4, r7, pc}
 80016e6:	bf00      	nop
 80016e8:	2000038c 	.word	0x2000038c

080016ec <get_angvelocity>:

void get_angvelocity(stmdev_ctx_t dev_ctx_lsm6dsl, float *angular_rate_mdps){
 80016ec:	b590      	push	{r4, r7, lr}
 80016ee:	b087      	sub	sp, #28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	1d3c      	adds	r4, r7, #4
 80016f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80016f8:	603b      	str	r3, [r7, #0]
	uint8_t reg;

	/* Read output only if new gyro value is available*/
	lsm6dsl_gy_flag_data_ready_get(&dev_ctx_lsm6dsl, &reg);
 80016fa:	f107 0217 	add.w	r2, r7, #23
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	4611      	mov	r1, r2
 8001702:	4618      	mov	r0, r3
 8001704:	f000 fc11 	bl	8001f2a <lsm6dsl_gy_flag_data_ready_get>

	if (reg) {
 8001708:	7dfb      	ldrb	r3, [r7, #23]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d02d      	beq.n	800176a <get_angvelocity+0x7e>
	  /* Read angular rate field data */
	  memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 800170e:	2206      	movs	r2, #6
 8001710:	2100      	movs	r1, #0
 8001712:	4818      	ldr	r0, [pc, #96]	; (8001774 <get_angvelocity+0x88>)
 8001714:	f00e fc28 	bl	800ff68 <memset>
	  lsm6dsl_angular_rate_raw_get(&dev_ctx_lsm6dsl, data_raw_angular_rate);
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	4916      	ldr	r1, [pc, #88]	; (8001774 <get_angvelocity+0x88>)
 800171c:	4618      	mov	r0, r3
 800171e:	f000 fc1d 	bl	8001f5c <lsm6dsl_angular_rate_raw_get>
	  angular_rate_mdps[0] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8001722:	4b14      	ldr	r3, [pc, #80]	; (8001774 <get_angvelocity+0x88>)
 8001724:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001728:	4618      	mov	r0, r3
 800172a:	f000 fb0f 	bl	8001d4c <lsm6dsl_from_fs2000dps_to_mdps>
 800172e:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[0] =
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	edc3 7a00 	vstr	s15, [r3]
	  angular_rate_mdps[1] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001738:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <get_angvelocity+0x88>)
 800173a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	  angular_rate_mdps[1] =
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	1d1c      	adds	r4, r3, #4
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001742:	4610      	mov	r0, r2
 8001744:	f000 fb02 	bl	8001d4c <lsm6dsl_from_fs2000dps_to_mdps>
 8001748:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[1] =
 800174c:	edc4 7a00 	vstr	s15, [r4]
	  angular_rate_mdps[2] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001750:	4b08      	ldr	r3, [pc, #32]	; (8001774 <get_angvelocity+0x88>)
 8001752:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
	  angular_rate_mdps[2] =
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	f103 0408 	add.w	r4, r3, #8
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 800175c:	4610      	mov	r0, r2
 800175e:	f000 faf5 	bl	8001d4c <lsm6dsl_from_fs2000dps_to_mdps>
 8001762:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[2] =
 8001766:	edc4 7a00 	vstr	s15, [r4]
	}
}
 800176a:	bf00      	nop
 800176c:	371c      	adds	r7, #28
 800176e:	46bd      	mov	sp, r7
 8001770:	bd90      	pop	{r4, r7, pc}
 8001772:	bf00      	nop
 8001774:	20000394 	.word	0x20000394

08001778 <lps22hh_init>:

/* LPS22HH Functions ---------------------------------------------------------*/
stmdev_ctx_t lps22hh_init(void){
 8001778:	b590      	push	{r4, r7, lr}
 800177a:	b087      	sub	sp, #28
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	stmdev_ctx_t dev_ctx_lps22hh;

	/* Initialize mems driver interface */
	dev_ctx_lps22hh.write_reg = lps22hh_write;
 8001780:	4b22      	ldr	r3, [pc, #136]	; (800180c <lps22hh_init+0x94>)
 8001782:	60fb      	str	r3, [r7, #12]
	dev_ctx_lps22hh.read_reg = lps22hh_read;
 8001784:	4b22      	ldr	r3, [pc, #136]	; (8001810 <lps22hh_init+0x98>)
 8001786:	613b      	str	r3, [r7, #16]
	dev_ctx_lps22hh.handle = &SENSOR_BUS;
 8001788:	4b22      	ldr	r3, [pc, #136]	; (8001814 <lps22hh_init+0x9c>)
 800178a:	617b      	str	r3, [r7, #20]


	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 800178c:	200a      	movs	r0, #10
 800178e:	f000 f917 	bl	80019c0 <platform_delay>

	/* Check device ID */
	whoamI_lps22hh = 0;
 8001792:	4b21      	ldr	r3, [pc, #132]	; (8001818 <lps22hh_init+0xa0>)
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]
	lps22hh_device_id_get(&dev_ctx_lps22hh, &whoamI_lps22hh);
 8001798:	f107 030c 	add.w	r3, r7, #12
 800179c:	491e      	ldr	r1, [pc, #120]	; (8001818 <lps22hh_init+0xa0>)
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 fa3c 	bl	8001c1c <lps22hh_device_id_get>

	if ( whoamI_lps22hh != LPS22HH_ID ){
 80017a4:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <lps22hh_init+0xa0>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2bb3      	cmp	r3, #179	; 0xb3
 80017aa:	d007      	beq.n	80017bc <lps22hh_init+0x44>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80017ac:	2201      	movs	r2, #1
 80017ae:	2104      	movs	r1, #4
 80017b0:	481a      	ldr	r0, [pc, #104]	; (800181c <lps22hh_init+0xa4>)
 80017b2:	f002 fec7 	bl	8004544 <HAL_GPIO_WritePin>
		__BKPT();
 80017b6:	be00      	bkpt	0x0000
		Error_Handler();
 80017b8:	f001 faf0 	bl	8002d9c <Error_Handler>
	}


	/* Restore default configuration */
	lps22hh_reset_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 80017bc:	f107 030c 	add.w	r3, r7, #12
 80017c0:	2101      	movs	r1, #1
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 fa3b 	bl	8001c3e <lps22hh_reset_set>

	do {
		lps22hh_reset_get(&dev_ctx_lps22hh, &rst_lps22hh);
 80017c8:	f107 030c 	add.w	r3, r7, #12
 80017cc:	4914      	ldr	r1, [pc, #80]	; (8001820 <lps22hh_init+0xa8>)
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 fa5b 	bl	8001c8a <lps22hh_reset_get>
	} while (rst_lps22hh);
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <lps22hh_init+0xa8>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1f5      	bne.n	80017c8 <lps22hh_init+0x50>

	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 80017dc:	f107 030c 	add.w	r3, r7, #12
 80017e0:	2101      	movs	r1, #1
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 f95a 	bl	8001a9c <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&dev_ctx_lps22hh, LPS22HH_75_Hz_LOW_NOISE);
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	2115      	movs	r1, #21
 80017ee:	4618      	mov	r0, r3
 80017f0:	f000 f97a 	bl	8001ae8 <lps22hh_data_rate_set>

	return dev_ctx_lps22hh;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	461c      	mov	r4, r3
 80017f8:	f107 030c 	add.w	r3, r7, #12
 80017fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001800:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	371c      	adds	r7, #28
 8001808:	46bd      	mov	sp, r7
 800180a:	bd90      	pop	{r4, r7, pc}
 800180c:	0800194d 	.word	0x0800194d
 8001810:	08001987 	.word	0x08001987
 8001814:	20000c48 	.word	0x20000c48
 8001818:	200003a4 	.word	0x200003a4
 800181c:	40020800 	.word	0x40020800
 8001820:	200003a5 	.word	0x200003a5

08001824 <get_pressure>:

void get_pressure(stmdev_ctx_t dev_ctx_lps22hh, float *pressure){
 8001824:	b590      	push	{r4, r7, lr}
 8001826:	b087      	sub	sp, #28
 8001828:	af00      	add	r7, sp, #0
 800182a:	1d3c      	adds	r4, r7, #4
 800182c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001830:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&dev_ctx_lps22hh, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 8001832:	f107 0214 	add.w	r2, r7, #20
 8001836:	1d38      	adds	r0, r7, #4
 8001838:	2301      	movs	r3, #1
 800183a:	2127      	movs	r1, #39	; 0x27
 800183c:	f000 f8cb 	bl	80019d6 <lps22hh_read_reg>

	if (reg.status.p_da) {
 8001840:	7d3b      	ldrb	r3, [r7, #20]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b00      	cmp	r3, #0
 800184a:	d011      	beq.n	8001870 <get_pressure+0x4c>
 800184c:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <get_pressure+0x54>)
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
	  lps22hh_pressure_raw_get(&dev_ctx_lps22hh, &data_raw_pressure);
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	4908      	ldr	r1, [pc, #32]	; (8001878 <get_pressure+0x54>)
 8001856:	4618      	mov	r0, r3
 8001858:	f000 f994 	bl	8001b84 <lps22hh_pressure_raw_get>
	  *pressure = lps22hh_from_lsb_to_hpa( data_raw_pressure);
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <get_pressure+0x54>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f000 f8e9 	bl	8001a38 <lps22hh_from_lsb_to_hpa>
 8001866:	eef0 7a40 	vmov.f32	s15, s0
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001870:	bf00      	nop
 8001872:	371c      	adds	r7, #28
 8001874:	46bd      	mov	sp, r7
 8001876:	bd90      	pop	{r4, r7, pc}
 8001878:	200003a0 	.word	0x200003a0

0800187c <get_temperature>:

void get_temperature(stmdev_ctx_t dev_ctx_lps22hh, float *temperature){
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b087      	sub	sp, #28
 8001880:	af00      	add	r7, sp, #0
 8001882:	1d3c      	adds	r4, r7, #4
 8001884:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001888:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&dev_ctx_lps22hh, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 800188a:	f107 0214 	add.w	r2, r7, #20
 800188e:	1d38      	adds	r0, r7, #4
 8001890:	2301      	movs	r3, #1
 8001892:	2127      	movs	r1, #39	; 0x27
 8001894:	f000 f89f 	bl	80019d6 <lps22hh_read_reg>

	if (reg.status.t_da) {
 8001898:	7d3b      	ldrb	r3, [r7, #20]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d012      	beq.n	80018ca <get_temperature+0x4e>
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <get_temperature+0x58>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	801a      	strh	r2, [r3, #0]
	  memset(&data_raw_temperature, 0x00, sizeof(int16_t));
	  lps22hh_temperature_raw_get(&dev_ctx_lps22hh, &data_raw_temperature);
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	4909      	ldr	r1, [pc, #36]	; (80018d4 <get_temperature+0x58>)
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 f991 	bl	8001bd6 <lps22hh_temperature_raw_get>
	  *temperature = lps22hh_from_lsb_to_celsius(data_raw_temperature);
 80018b4:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <get_temperature+0x58>)
 80018b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 f8d4 	bl	8001a68 <lps22hh_from_lsb_to_celsius>
 80018c0:	eef0 7a40 	vmov.f32	s15, s0
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80018ca:	bf00      	nop
 80018cc:	371c      	adds	r7, #28
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd90      	pop	{r4, r7, pc}
 80018d2:	bf00      	nop
 80018d4:	2000039a 	.word	0x2000039a

080018d8 <lsm6dsl_write>:
 *
 */
static int32_t lsm6dsl_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af04      	add	r7, sp, #16
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	607a      	str	r2, [r7, #4]
 80018e2:	461a      	mov	r2, r3
 80018e4:	460b      	mov	r3, r1
 80018e6:	72fb      	strb	r3, [r7, #11]
 80018e8:	4613      	mov	r3, r2
 80018ea:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LSM6DSL_I2C_ADD_L, reg,
 80018ec:	7afb      	ldrb	r3, [r7, #11]
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f4:	9302      	str	r3, [sp, #8]
 80018f6:	893b      	ldrh	r3, [r7, #8]
 80018f8:	9301      	str	r3, [sp, #4]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	2301      	movs	r3, #1
 8001900:	21d5      	movs	r1, #213	; 0xd5
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f002 ffae 	bl	8004864 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <lsm6dsl_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lsm6dsl_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b088      	sub	sp, #32
 8001916:	af04      	add	r7, sp, #16
 8001918:	60f8      	str	r0, [r7, #12]
 800191a:	607a      	str	r2, [r7, #4]
 800191c:	461a      	mov	r2, r3
 800191e:	460b      	mov	r3, r1
 8001920:	72fb      	strb	r3, [r7, #11]
 8001922:	4613      	mov	r3, r2
 8001924:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Read(handle, LSM6DSL_I2C_ADD_L, reg,
 8001926:	7afb      	ldrb	r3, [r7, #11]
 8001928:	b29a      	uxth	r2, r3
 800192a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800192e:	9302      	str	r3, [sp, #8]
 8001930:	893b      	ldrh	r3, [r7, #8]
 8001932:	9301      	str	r3, [sp, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	2301      	movs	r3, #1
 800193a:	21d5      	movs	r1, #213	; 0xd5
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f003 f88b 	bl	8004a58 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <lps22hh_write>:
 *
 */
static int32_t lps22hh_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af04      	add	r7, sp, #16
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	607a      	str	r2, [r7, #4]
 8001956:	461a      	mov	r2, r3
 8001958:	460b      	mov	r3, r1
 800195a:	72fb      	strb	r3, [r7, #11]
 800195c:	4613      	mov	r3, r2
 800195e:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_L, reg,
 8001960:	7afb      	ldrb	r3, [r7, #11]
 8001962:	b29a      	uxth	r2, r3
 8001964:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001968:	9302      	str	r3, [sp, #8]
 800196a:	893b      	ldrh	r3, [r7, #8]
 800196c:	9301      	str	r3, [sp, #4]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	2301      	movs	r3, #1
 8001974:	21b9      	movs	r1, #185	; 0xb9
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	f002 ff74 	bl	8004864 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <lps22hh_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lps22hh_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b088      	sub	sp, #32
 800198a:	af04      	add	r7, sp, #16
 800198c:	60f8      	str	r0, [r7, #12]
 800198e:	607a      	str	r2, [r7, #4]
 8001990:	461a      	mov	r2, r3
 8001992:	460b      	mov	r3, r1
 8001994:	72fb      	strb	r3, [r7, #11]
 8001996:	4613      	mov	r3, r2
 8001998:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_L, reg,
 800199a:	7afb      	ldrb	r3, [r7, #11]
 800199c:	b29a      	uxth	r2, r3
 800199e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019a2:	9302      	str	r3, [sp, #8]
 80019a4:	893b      	ldrh	r3, [r7, #8]
 80019a6:	9301      	str	r3, [sp, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	2301      	movs	r3, #1
 80019ae:	21b9      	movs	r1, #185	; 0xb9
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f003 f851 	bl	8004a58 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f002 f867 	bl	8003a9c <HAL_Delay>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80019d6:	b590      	push	{r4, r7, lr}
 80019d8:	b087      	sub	sp, #28
 80019da:	af00      	add	r7, sp, #0
 80019dc:	60f8      	str	r0, [r7, #12]
 80019de:	607a      	str	r2, [r7, #4]
 80019e0:	461a      	mov	r2, r3
 80019e2:	460b      	mov	r3, r1
 80019e4:	72fb      	strb	r3, [r7, #11]
 80019e6:	4613      	mov	r3, r2
 80019e8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	685c      	ldr	r4, [r3, #4]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6898      	ldr	r0, [r3, #8]
 80019f2:	893b      	ldrh	r3, [r7, #8]
 80019f4:	7af9      	ldrb	r1, [r7, #11]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	47a0      	blx	r4
 80019fa:	6178      	str	r0, [r7, #20]

  return ret;
 80019fc:	697b      	ldr	r3, [r7, #20]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	371c      	adds	r7, #28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd90      	pop	{r4, r7, pc}

08001a06 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001a06:	b590      	push	{r4, r7, lr}
 8001a08:	b087      	sub	sp, #28
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	60f8      	str	r0, [r7, #12]
 8001a0e:	607a      	str	r2, [r7, #4]
 8001a10:	461a      	mov	r2, r3
 8001a12:	460b      	mov	r3, r1
 8001a14:	72fb      	strb	r3, [r7, #11]
 8001a16:	4613      	mov	r3, r2
 8001a18:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681c      	ldr	r4, [r3, #0]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6898      	ldr	r0, [r3, #8]
 8001a22:	893b      	ldrh	r3, [r7, #8]
 8001a24:	7af9      	ldrb	r1, [r7, #11]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	47a0      	blx	r4
 8001a2a:	6178      	str	r0, [r7, #20]

  return ret;
 8001a2c:	697b      	ldr	r3, [r7, #20]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	371c      	adds	r7, #28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd90      	pop	{r4, r7, pc}
	...

08001a38 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	ee07 3a90 	vmov	s15, r3
 8001a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a4a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001a64 <lps22hh_from_lsb_to_hpa+0x2c>
 8001a4e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a52:	eef0 7a66 	vmov.f32	s15, s13
}
 8001a56:	eeb0 0a67 	vmov.f32	s0, s15
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	49800000 	.word	0x49800000

08001a68 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8001a72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a76:	ee07 3a90 	vmov	s15, r3
 8001a7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a7e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001a98 <lps22hh_from_lsb_to_celsius+0x30>
 8001a82:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a86:	eef0 7a66 	vmov.f32	s15, s13
}
 8001a8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	42c80000 	.word	0x42c80000

08001a9c <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8001aa8:	f107 0208 	add.w	r2, r7, #8
 8001aac:	2301      	movs	r3, #1
 8001aae:	2110      	movs	r1, #16
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff ff90 	bl	80019d6 <lps22hh_read_reg>
 8001ab6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10f      	bne.n	8001ade <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8001abe:	78fb      	ldrb	r3, [r7, #3]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	7a3b      	ldrb	r3, [r7, #8]
 8001ac8:	f362 0341 	bfi	r3, r2, #1, #1
 8001acc:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8001ace:	f107 0208 	add.w	r2, r7, #8
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	2110      	movs	r1, #16
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff ff95 	bl	8001a06 <lps22hh_write_reg>
 8001adc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001ade:	68fb      	ldr	r3, [r7, #12]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001af4:	f107 0210 	add.w	r2, r7, #16
 8001af8:	2301      	movs	r3, #1
 8001afa:	2110      	movs	r1, #16
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff ff6a 	bl	80019d6 <lps22hh_read_reg>
 8001b02:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d107      	bne.n	8001b1a <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8001b0a:	f107 020c 	add.w	r2, r7, #12
 8001b0e:	2301      	movs	r3, #1
 8001b10:	2111      	movs	r1, #17
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff ff5f 	bl	80019d6 <lps22hh_read_reg>
 8001b18:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d10f      	bne.n	8001b40 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8001b20:	78fb      	ldrb	r3, [r7, #3]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	7c3b      	ldrb	r3, [r7, #16]
 8001b2a:	f362 1306 	bfi	r3, r2, #4, #3
 8001b2e:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001b30:	f107 0210 	add.w	r2, r7, #16
 8001b34:	2301      	movs	r3, #1
 8001b36:	2110      	movs	r1, #16
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff ff64 	bl	8001a06 <lps22hh_write_reg>
 8001b3e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d119      	bne.n	8001b7a <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8001b46:	78fb      	ldrb	r3, [r7, #3]
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	7b3b      	ldrb	r3, [r7, #12]
 8001b52:	f362 0341 	bfi	r3, r2, #1, #1
 8001b56:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8001b58:	78fb      	ldrb	r3, [r7, #3]
 8001b5a:	08db      	lsrs	r3, r3, #3
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	7b3b      	ldrb	r3, [r7, #12]
 8001b64:	f362 0300 	bfi	r3, r2, #0, #1
 8001b68:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8001b6a:	f107 020c 	add.w	r2, r7, #12
 8001b6e:	2301      	movs	r3, #1
 8001b70:	2111      	movs	r1, #17
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff ff47 	bl	8001a06 <lps22hh_write_reg>
 8001b78:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8001b7a:	697b      	ldr	r3, [r7, #20]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8001b8e:	f107 0208 	add.w	r2, r7, #8
 8001b92:	2303      	movs	r3, #3
 8001b94:	2128      	movs	r1, #40	; 0x28
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff ff1d 	bl	80019d6 <lps22hh_read_reg>
 8001b9c:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8001b9e:	7abb      	ldrb	r3, [r7, #10]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	021b      	lsls	r3, r3, #8
 8001bac:	7a7a      	ldrb	r2, [r7, #9]
 8001bae:	441a      	add	r2, r3
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	021b      	lsls	r3, r3, #8
 8001bba:	7a3a      	ldrb	r2, [r7, #8]
 8001bbc:	441a      	add	r2, r3
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	021a      	lsls	r2, r3, #8
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	601a      	str	r2, [r3, #0]

  return ret;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b084      	sub	sp, #16
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8001be0:	f107 0208 	add.w	r2, r7, #8
 8001be4:	2302      	movs	r3, #2
 8001be6:	212b      	movs	r1, #43	; 0x2b
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff fef4 	bl	80019d6 <lps22hh_read_reg>
 8001bee:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8001bf0:	7a7b      	ldrb	r3, [r7, #9]
 8001bf2:	b21a      	sxth	r2, r3
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	021b      	lsls	r3, r3, #8
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	7a3b      	ldrb	r3, [r7, #8]
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	4413      	add	r3, r2
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	b21a      	sxth	r2, r3
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	801a      	strh	r2, [r3, #0]

  return ret;
 8001c12:	68fb      	ldr	r3, [r7, #12]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8001c26:	2301      	movs	r3, #1
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	210f      	movs	r1, #15
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7ff fed2 	bl	80019d6 <lps22hh_read_reg>
 8001c32:	60f8      	str	r0, [r7, #12]

  return ret;
 8001c34:	68fb      	ldr	r3, [r7, #12]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b084      	sub	sp, #16
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
 8001c46:	460b      	mov	r3, r1
 8001c48:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8001c4a:	f107 0208 	add.w	r2, r7, #8
 8001c4e:	2301      	movs	r3, #1
 8001c50:	2111      	movs	r1, #17
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff febf 	bl	80019d6 <lps22hh_read_reg>
 8001c58:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d10f      	bne.n	8001c80 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	7a3b      	ldrb	r3, [r7, #8]
 8001c6a:	f362 0382 	bfi	r3, r2, #2, #1
 8001c6e:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8001c70:	f107 0208 	add.w	r2, r7, #8
 8001c74:	2301      	movs	r3, #1
 8001c76:	2111      	movs	r1, #17
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff fec4 	bl	8001a06 <lps22hh_write_reg>
 8001c7e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001c80:	68fb      	ldr	r3, [r7, #12]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b084      	sub	sp, #16
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8001c94:	f107 0208 	add.w	r2, r7, #8
 8001c98:	2301      	movs	r3, #1
 8001c9a:	2111      	movs	r1, #17
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff fe9a 	bl	80019d6 <lps22hh_read_reg>
 8001ca2:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8001ca4:	7a3b      	ldrb	r3, [r7, #8]
 8001ca6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	461a      	mov	r2, r3
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	701a      	strb	r2, [r3, #0]

  return ret;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001cbc:	b590      	push	{r4, r7, lr}
 8001cbe:	b087      	sub	sp, #28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	607a      	str	r2, [r7, #4]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	460b      	mov	r3, r1
 8001cca:	72fb      	strb	r3, [r7, #11]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	685c      	ldr	r4, [r3, #4]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6898      	ldr	r0, [r3, #8]
 8001cd8:	893b      	ldrh	r3, [r7, #8]
 8001cda:	7af9      	ldrb	r1, [r7, #11]
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	47a0      	blx	r4
 8001ce0:	6178      	str	r0, [r7, #20]

  return ret;
 8001ce2:	697b      	ldr	r3, [r7, #20]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	371c      	adds	r7, #28
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd90      	pop	{r4, r7, pc}

08001cec <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001cec:	b590      	push	{r4, r7, lr}
 8001cee:	b087      	sub	sp, #28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	607a      	str	r2, [r7, #4]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	72fb      	strb	r3, [r7, #11]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681c      	ldr	r4, [r3, #0]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6898      	ldr	r0, [r3, #8]
 8001d08:	893b      	ldrh	r3, [r7, #8]
 8001d0a:	7af9      	ldrb	r1, [r7, #11]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	47a0      	blx	r4
 8001d10:	6178      	str	r0, [r7, #20]

  return ret;
 8001d12:	697b      	ldr	r3, [r7, #20]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	371c      	adds	r7, #28
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd90      	pop	{r4, r7, pc}

08001d1c <lsm6dsl_from_fs8g_to_mg>:
{
  return ((float_t)lsb * 0.122f);
}

float_t lsm6dsl_from_fs8g_to_mg(int16_t lsb)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.244f);
 8001d26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d2a:	ee07 3a90 	vmov	s15, r3
 8001d2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d32:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001d48 <lsm6dsl_from_fs8g_to_mg+0x2c>
 8001d36:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001d3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	3e79db23 	.word	0x3e79db23

08001d4c <lsm6dsl_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsl_from_fs2000dps_to_mdps(int16_t lsb)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8001d56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d5a:	ee07 3a90 	vmov	s15, r3
 8001d5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d62:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001d78 <lsm6dsl_from_fs2000dps_to_mdps+0x2c>
 8001d66:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001d6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	428c0000 	.word	0x428c0000

08001d7c <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001d88:	f107 0208 	add.w	r2, r7, #8
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	2110      	movs	r1, #16
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff ff93 	bl	8001cbc <lsm6dsl_read_reg>
 8001d96:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10f      	bne.n	8001dbe <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8001d9e:	78fb      	ldrb	r3, [r7, #3]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	7a3b      	ldrb	r3, [r7, #8]
 8001da8:	f362 0383 	bfi	r3, r2, #2, #2
 8001dac:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001dae:	f107 0208 	add.w	r2, r7, #8
 8001db2:	2301      	movs	r3, #1
 8001db4:	2110      	movs	r1, #16
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff ff98 	bl	8001cec <lsm6dsl_write_reg>
 8001dbc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001dd4:	f107 0208 	add.w	r2, r7, #8
 8001dd8:	2301      	movs	r3, #1
 8001dda:	2110      	movs	r1, #16
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff ff6d 	bl	8001cbc <lsm6dsl_read_reg>
 8001de2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10f      	bne.n	8001e0a <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8001dea:	78fb      	ldrb	r3, [r7, #3]
 8001dec:	f003 030f 	and.w	r3, r3, #15
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	7a3b      	ldrb	r3, [r7, #8]
 8001df4:	f362 1307 	bfi	r3, r2, #4, #4
 8001df8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001dfa:	f107 0208 	add.w	r2, r7, #8
 8001dfe:	2301      	movs	r3, #1
 8001e00:	2110      	movs	r1, #16
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff ff72 	bl	8001cec <lsm6dsl_write_reg>
 8001e08:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001e20:	f107 0208 	add.w	r2, r7, #8
 8001e24:	2301      	movs	r3, #1
 8001e26:	2111      	movs	r1, #17
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7ff ff47 	bl	8001cbc <lsm6dsl_read_reg>
 8001e2e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10f      	bne.n	8001e56 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8001e36:	78fb      	ldrb	r3, [r7, #3]
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	7a3b      	ldrb	r3, [r7, #8]
 8001e40:	f362 0343 	bfi	r3, r2, #1, #3
 8001e44:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001e46:	f107 0208 	add.w	r2, r7, #8
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	2111      	movs	r1, #17
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ff4c 	bl	8001cec <lsm6dsl_write_reg>
 8001e54:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001e56:	68fb      	ldr	r3, [r7, #12]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001e6c:	f107 0208 	add.w	r2, r7, #8
 8001e70:	2301      	movs	r3, #1
 8001e72:	2111      	movs	r1, #17
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff ff21 	bl	8001cbc <lsm6dsl_read_reg>
 8001e7a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10f      	bne.n	8001ea2 <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 8001e82:	78fb      	ldrb	r3, [r7, #3]
 8001e84:	f003 030f 	and.w	r3, r3, #15
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	7a3b      	ldrb	r3, [r7, #8]
 8001e8c:	f362 1307 	bfi	r3, r2, #4, #4
 8001e90:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001e92:	f107 0208 	add.w	r2, r7, #8
 8001e96:	2301      	movs	r3, #1
 8001e98:	2111      	movs	r1, #17
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff ff26 	bl	8001cec <lsm6dsl_write_reg>
 8001ea0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001eb8:	f107 0208 	add.w	r2, r7, #8
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	2112      	movs	r1, #18
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7ff fefb 	bl	8001cbc <lsm6dsl_read_reg>
 8001ec6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10f      	bne.n	8001eee <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8001ece:	78fb      	ldrb	r3, [r7, #3]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	7a3b      	ldrb	r3, [r7, #8]
 8001ed8:	f362 1386 	bfi	r3, r2, #6, #1
 8001edc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001ede:	f107 0208 	add.w	r2, r7, #8
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	2112      	movs	r1, #18
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff ff00 	bl	8001cec <lsm6dsl_write_reg>
 8001eec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001eee:	68fb      	ldr	r3, [r7, #12]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <lsm6dsl_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  lsm6dsl_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG,
 8001f02:	f107 0208 	add.w	r2, r7, #8
 8001f06:	2301      	movs	r3, #1
 8001f08:	211e      	movs	r1, #30
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7ff fed6 	bl	8001cbc <lsm6dsl_read_reg>
 8001f10:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 8001f12:	7a3b      	ldrb	r3, [r7, #8]
 8001f14:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	701a      	strb	r2, [r3, #0]

  return ret;
 8001f20:	68fb      	ldr	r3, [r7, #12]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <lsm6dsl_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b084      	sub	sp, #16
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	6039      	str	r1, [r7, #0]
  lsm6dsl_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG,
 8001f34:	f107 0208 	add.w	r2, r7, #8
 8001f38:	2301      	movs	r3, #1
 8001f3a:	211e      	movs	r1, #30
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7ff febd 	bl	8001cbc <lsm6dsl_read_reg>
 8001f42:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8001f44:	7a3b      	ldrb	r3, [r7, #8]
 8001f46:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	701a      	strb	r2, [r3, #0]

  return ret;
 8001f52:	68fb      	ldr	r3, [r7, #12]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8001f66:	f107 020c 	add.w	r2, r7, #12
 8001f6a:	2306      	movs	r3, #6
 8001f6c:	2122      	movs	r1, #34	; 0x22
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7ff fea4 	bl	8001cbc <lsm6dsl_read_reg>
 8001f74:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001f76:	7b7b      	ldrb	r3, [r7, #13]
 8001f78:	b21a      	sxth	r2, r3
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	021b      	lsls	r3, r3, #8
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	7b3b      	ldrb	r3, [r7, #12]
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	4413      	add	r3, r2
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	b21a      	sxth	r2, r3
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001f98:	7bfa      	ldrb	r2, [r7, #15]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	b212      	sxth	r2, r2
 8001fa0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	3302      	adds	r3, #2
 8001fa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	021b      	lsls	r3, r3, #8
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	7bbb      	ldrb	r3, [r7, #14]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	3302      	adds	r3, #2
 8001fbc:	b212      	sxth	r2, r2
 8001fbe:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001fc0:	7c7a      	ldrb	r2, [r7, #17]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	b212      	sxth	r2, r2
 8001fc8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	3304      	adds	r3, #4
 8001fce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	021b      	lsls	r3, r3, #8
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	7c3b      	ldrb	r3, [r7, #16]
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	4413      	add	r3, r2
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	b212      	sxth	r2, r2
 8001fe6:	801a      	strh	r2, [r3, #0]

  return ret;
 8001fe8:	697b      	ldr	r3, [r7, #20]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b086      	sub	sp, #24
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8001ffc:	f107 020c 	add.w	r2, r7, #12
 8002000:	2306      	movs	r3, #6
 8002002:	2128      	movs	r1, #40	; 0x28
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7ff fe59 	bl	8001cbc <lsm6dsl_read_reg>
 800200a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800200c:	7b7b      	ldrb	r3, [r7, #13]
 800200e:	b21a      	sxth	r2, r3
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	f9b3 3000 	ldrsh.w	r3, [r3]
 800201a:	b29b      	uxth	r3, r3
 800201c:	021b      	lsls	r3, r3, #8
 800201e:	b29a      	uxth	r2, r3
 8002020:	7b3b      	ldrb	r3, [r7, #12]
 8002022:	b29b      	uxth	r3, r3
 8002024:	4413      	add	r3, r2
 8002026:	b29b      	uxth	r3, r3
 8002028:	b21a      	sxth	r2, r3
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800202e:	7bfa      	ldrb	r2, [r7, #15]
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	3302      	adds	r3, #2
 8002034:	b212      	sxth	r2, r2
 8002036:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	3302      	adds	r3, #2
 800203c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002040:	b29b      	uxth	r3, r3
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	b29a      	uxth	r2, r3
 8002046:	7bbb      	ldrb	r3, [r7, #14]
 8002048:	b29b      	uxth	r3, r3
 800204a:	4413      	add	r3, r2
 800204c:	b29a      	uxth	r2, r3
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	3302      	adds	r3, #2
 8002052:	b212      	sxth	r2, r2
 8002054:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002056:	7c7a      	ldrb	r2, [r7, #17]
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	3304      	adds	r3, #4
 800205c:	b212      	sxth	r2, r2
 800205e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	3304      	adds	r3, #4
 8002064:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002068:	b29b      	uxth	r3, r3
 800206a:	021b      	lsls	r3, r3, #8
 800206c:	b29a      	uxth	r2, r3
 800206e:	7c3b      	ldrb	r3, [r7, #16]
 8002070:	b29b      	uxth	r3, r3
 8002072:	4413      	add	r3, r2
 8002074:	b29a      	uxth	r2, r3
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	3304      	adds	r3, #4
 800207a:	b212      	sxth	r2, r2
 800207c:	801a      	strh	r2, [r3, #0]

  return ret;
 800207e:	697b      	ldr	r3, [r7, #20]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8002092:	2301      	movs	r3, #1
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	210f      	movs	r1, #15
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff fe0f 	bl	8001cbc <lsm6dsl_read_reg>
 800209e:	60f8      	str	r0, [r7, #12]

  return ret;
 80020a0:	68fb      	ldr	r3, [r7, #12]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b084      	sub	sp, #16
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	460b      	mov	r3, r1
 80020b4:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80020b6:	f107 0208 	add.w	r2, r7, #8
 80020ba:	2301      	movs	r3, #1
 80020bc:	2112      	movs	r1, #18
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff fdfc 	bl	8001cbc <lsm6dsl_read_reg>
 80020c4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10f      	bne.n	80020ec <lsm6dsl_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 80020cc:	78fb      	ldrb	r3, [r7, #3]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	7a3b      	ldrb	r3, [r7, #8]
 80020d6:	f362 0300 	bfi	r3, r2, #0, #1
 80020da:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80020dc:	f107 0208 	add.w	r2, r7, #8
 80020e0:	2301      	movs	r3, #1
 80020e2:	2112      	movs	r1, #18
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff fe01 	bl	8001cec <lsm6dsl_write_reg>
 80020ea:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80020ec:	68fb      	ldr	r3, [r7, #12]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <lsm6dsl_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b084      	sub	sp, #16
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
 80020fe:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002100:	f107 0208 	add.w	r2, r7, #8
 8002104:	2301      	movs	r3, #1
 8002106:	2112      	movs	r1, #18
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff fdd7 	bl	8001cbc <lsm6dsl_read_reg>
 800210e:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8002110:	7a3b      	ldrb	r3, [r7, #8]
 8002112:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002116:	b2db      	uxtb	r3, r3
 8002118:	461a      	mov	r2, r3
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	701a      	strb	r2, [r3, #0]

  return ret;
 800211e:	68fb      	ldr	r3, [r7, #12]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <lsm6dsl_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                     lsm6dsl_input_composite_t val)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8002134:	f107 0208 	add.w	r2, r7, #8
 8002138:	2301      	movs	r3, #1
 800213a:	2117      	movs	r1, #23
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff fdbd 	bl	8001cbc <lsm6dsl_read_reg>
 8002142:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d120      	bne.n	800218c <lsm6dsl_xl_lp2_bandwidth_set+0x64>
  {
    ctrl8_xl.input_composite = ((uint8_t) val & 0x10U) >> 4;
 800214a:	78fb      	ldrb	r3, [r7, #3]
 800214c:	091b      	lsrs	r3, r3, #4
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	b2da      	uxtb	r2, r3
 8002154:	7a3b      	ldrb	r3, [r7, #8]
 8002156:	f362 03c3 	bfi	r3, r2, #3, #1
 800215a:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 800215c:	78fb      	ldrb	r3, [r7, #3]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	b2da      	uxtb	r2, r3
 8002164:	7a3b      	ldrb	r3, [r7, #8]
 8002166:	f362 1346 	bfi	r3, r2, #5, #2
 800216a:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 800216c:	7a3b      	ldrb	r3, [r7, #8]
 800216e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002172:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 8002174:	7a3b      	ldrb	r3, [r7, #8]
 8002176:	f36f 0382 	bfc	r3, #2, #1
 800217a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 800217c:	f107 0208 	add.w	r2, r7, #8
 8002180:	2301      	movs	r3, #1
 8002182:	2117      	movs	r1, #23
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff fdb1 	bl	8001cec <lsm6dsl_write_reg>
 800218a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800218c:	68fb      	ldr	r3, [r7, #12]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <lsm6dsl_gy_band_pass_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_band_pass_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_lpf1_sel_g_t val)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b086      	sub	sp, #24
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	460b      	mov	r3, r1
 80021a0:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_ctrl6_c_t ctrl6_c;
  lsm6dsl_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 80021a2:	f107 0208 	add.w	r2, r7, #8
 80021a6:	2301      	movs	r3, #1
 80021a8:	2116      	movs	r1, #22
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff fd86 	bl	8001cbc <lsm6dsl_read_reg>
 80021b0:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d157      	bne.n	8002268 <lsm6dsl_gy_band_pass_set+0xd2>
  {
    ctrl7_g.hpm_g  = ((uint8_t)val & 0x30U) >> 4;
 80021b8:	78fb      	ldrb	r3, [r7, #3]
 80021ba:	091b      	lsrs	r3, r3, #4
 80021bc:	f003 0303 	and.w	r3, r3, #3
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	7a3b      	ldrb	r3, [r7, #8]
 80021c4:	f362 1305 	bfi	r3, r2, #4, #2
 80021c8:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ((uint8_t)val & 0x80U) >> 7;
 80021ca:	78fb      	ldrb	r3, [r7, #3]
 80021cc:	09db      	lsrs	r3, r3, #7
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	7a3b      	ldrb	r3, [r7, #8]
 80021d8:	f362 1386 	bfi	r3, r2, #6, #1
 80021dc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 80021de:	f107 0208 	add.w	r2, r7, #8
 80021e2:	2301      	movs	r3, #1
 80021e4:	2116      	movs	r1, #22
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff fd80 	bl	8001cec <lsm6dsl_write_reg>
 80021ec:	6178      	str	r0, [r7, #20]

    if (ret == 0)
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d139      	bne.n	8002268 <lsm6dsl_gy_band_pass_set+0xd2>
    {
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 80021f4:	f107 020c 	add.w	r2, r7, #12
 80021f8:	2301      	movs	r3, #1
 80021fa:	2115      	movs	r1, #21
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7ff fd5d 	bl	8001cbc <lsm6dsl_read_reg>
 8002202:	6178      	str	r0, [r7, #20]

      if (ret == 0)
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d12e      	bne.n	8002268 <lsm6dsl_gy_band_pass_set+0xd2>
      {
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	f003 0303 	and.w	r3, r3, #3
 8002210:	b2da      	uxtb	r2, r3
 8002212:	7b3b      	ldrb	r3, [r7, #12]
 8002214:	f362 0301 	bfi	r3, r2, #0, #2
 8002218:	733b      	strb	r3, [r7, #12]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 800221a:	f107 020c 	add.w	r2, r7, #12
 800221e:	2301      	movs	r3, #1
 8002220:	2115      	movs	r1, #21
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7ff fd62 	bl	8001cec <lsm6dsl_write_reg>
 8002228:	6178      	str	r0, [r7, #20]

        if (ret == 0)
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d11b      	bne.n	8002268 <lsm6dsl_gy_band_pass_set+0xd2>
        {
          ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C,
 8002230:	f107 0210 	add.w	r2, r7, #16
 8002234:	2301      	movs	r3, #1
 8002236:	2113      	movs	r1, #19
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff fd3f 	bl	8001cbc <lsm6dsl_read_reg>
 800223e:	6178      	str	r0, [r7, #20]
                                 (uint8_t *)&ctrl4_c, 1);

          if (ret == 0)
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d110      	bne.n	8002268 <lsm6dsl_gy_band_pass_set+0xd2>
          {
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 8002246:	78fb      	ldrb	r3, [r7, #3]
 8002248:	08db      	lsrs	r3, r3, #3
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	b2da      	uxtb	r2, r3
 8002250:	7c3b      	ldrb	r3, [r7, #16]
 8002252:	f362 0341 	bfi	r3, r2, #1, #1
 8002256:	743b      	strb	r3, [r7, #16]
            ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C,
 8002258:	f107 0210 	add.w	r2, r7, #16
 800225c:	2301      	movs	r3, #1
 800225e:	2113      	movs	r1, #19
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff fd43 	bl	8001cec <lsm6dsl_write_reg>
 8002266:	6178      	str	r0, [r7, #20]
        }
      }
    }
  }

  return ret;
 8002268:	697b      	ldr	r3, [r7, #20]
}
 800226a:	4618      	mov	r0, r3
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002278:	b0a6      	sub	sp, #152	; 0x98
 800227a:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800227c:	f001 fb9c 	bl	80039b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002280:	f000 f99c 	bl	80025bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002284:	f000 fc0c 	bl	8002aa0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002288:	f000 fa02 	bl	8002690 <MX_ADC1_Init>
  MX_SPI4_Init();
 800228c:	f000 fad2 	bl	8002834 <MX_SPI4_Init>
  MX_TIM2_Init();
 8002290:	f000 fb3c 	bl	800290c <MX_TIM2_Init>
  MX_SPI5_Init();
 8002294:	f000 fb04 	bl	80028a0 <MX_SPI5_Init>
  MX_FATFS_Init();
 8002298:	f008 fa32 	bl	800a700 <MX_FATFS_Init>
  MX_I2C3_Init();
 800229c:	f000 fa8a 	bl	80027b4 <MX_I2C3_Init>
  MX_USART6_UART_Init();
 80022a0:	f000 fbd4 	bl	8002a4c <MX_USART6_UART_Init>
  MX_I2C2_Init();
 80022a4:	f000 fa46 	bl	8002734 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 80022a8:	f00d f932 	bl	800f510 <MX_USB_DEVICE_Init>
  MX_USART3_UART_Init();
 80022ac:	f000 fba4 	bl	80029f8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // reset LEDs
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 80022b0:	2200      	movs	r2, #0
 80022b2:	2102      	movs	r1, #2
 80022b4:	48a7      	ldr	r0, [pc, #668]	; (8002554 <main+0x2e0>)
 80022b6:	f002 f945 	bl	8004544 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 80022ba:	2200      	movs	r2, #0
 80022bc:	2104      	movs	r1, #4
 80022be:	48a5      	ldr	r0, [pc, #660]	; (8002554 <main+0x2e0>)
 80022c0:	f002 f940 	bl	8004544 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 80022c4:	2200      	movs	r2, #0
 80022c6:	2108      	movs	r1, #8
 80022c8:	48a2      	ldr	r0, [pc, #648]	; (8002554 <main+0x2e0>)
 80022ca:	f002 f93b 	bl	8004544 <HAL_GPIO_WritePin>

  // reset recovery pyro pins
  HAL_GPIO_WritePin(Rcov_Arm_GPIO_Port, Rcov_Arm_Pin, RESET);
 80022ce:	2200      	movs	r2, #0
 80022d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022d4:	48a0      	ldr	r0, [pc, #640]	; (8002558 <main+0x2e4>)
 80022d6:	f002 f935 	bl	8004544 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Rcov_Gate_Drogue_GPIO_Port, Rcov_Gate_Drogue_Pin, RESET);
 80022da:	2200      	movs	r2, #0
 80022dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022e0:	489d      	ldr	r0, [pc, #628]	; (8002558 <main+0x2e4>)
 80022e2:	f002 f92f 	bl	8004544 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Rcov_Gate_Main_GPIO_Port, Rcov_Gate_Main_Pin, RESET);
 80022e6:	2200      	movs	r2, #0
 80022e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022ec:	489a      	ldr	r0, [pc, #616]	; (8002558 <main+0x2e4>)
 80022ee:	f002 f929 	bl	8004544 <HAL_GPIO_WritePin>

  // reset prop pyro pins
  HAL_GPIO_WritePin(Prop_Pyro_Arming_GPIO_Port, Prop_Pyro_Arming_Pin, RESET);
 80022f2:	2200      	movs	r2, #0
 80022f4:	2102      	movs	r1, #2
 80022f6:	4898      	ldr	r0, [pc, #608]	; (8002558 <main+0x2e4>)
 80022f8:	f002 f924 	bl	8004544 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Prop_Gate_1_GPIO_Port, Prop_Gate_1_Pin, RESET);
 80022fc:	2200      	movs	r2, #0
 80022fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002302:	4896      	ldr	r0, [pc, #600]	; (800255c <main+0x2e8>)
 8002304:	f002 f91e 	bl	8004544 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Prop_Gate_2_GPIO_Port, Prop_Gate_2_Pin, RESET);
 8002308:	2200      	movs	r2, #0
 800230a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800230e:	4893      	ldr	r0, [pc, #588]	; (800255c <main+0x2e8>)
 8002310:	f002 f918 	bl	8004544 <HAL_GPIO_WritePin>

  // reset 12 V buck converter enable pin (disable converter)
  HAL_GPIO_WritePin(PM_12V_EN_GPIO_Port, PM_12V_EN_Pin, RESET);
 8002314:	2200      	movs	r2, #0
 8002316:	2104      	movs	r1, #4
 8002318:	4891      	ldr	r0, [pc, #580]	; (8002560 <main+0x2ec>)
 800231a:	f002 f913 	bl	8004544 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET);
 800231e:	2200      	movs	r2, #0
 8002320:	2180      	movs	r1, #128	; 0x80
 8002322:	488f      	ldr	r0, [pc, #572]	; (8002560 <main+0x2ec>)
 8002324:	f002 f90e 	bl	8004544 <HAL_GPIO_WritePin>

  // reset payload EN signal
  HAL_GPIO_WritePin(Payload_EN_GPIO_Port, Payload_EN_Pin, RESET);
 8002328:	2200      	movs	r2, #0
 800232a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800232e:	488c      	ldr	r0, [pc, #560]	; (8002560 <main+0x2ec>)
 8002330:	f002 f908 	bl	8004544 <HAL_GPIO_WritePin>

  // set CS pin for thermocouple chip high
  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

  // set power off for VR
  HAL_GPIO_WritePin(VR_CTRL_PWR_GPIO_Port, VR_CTRL_PWR_Pin, RESET);
 8002334:	2200      	movs	r2, #0
 8002336:	f44f 7100 	mov.w	r1, #512	; 0x200
 800233a:	4887      	ldr	r0, [pc, #540]	; (8002558 <main+0x2e4>)
 800233c:	f002 f902 	bl	8004544 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, RESET);
 8002340:	2200      	movs	r2, #0
 8002342:	2180      	movs	r1, #128	; 0x80
 8002344:	4887      	ldr	r0, [pc, #540]	; (8002564 <main+0x2f0>)
 8002346:	f002 f8fd 	bl	8004544 <HAL_GPIO_WritePin>

  // FLASH set CS, WP and IO3 pins high
  HAL_GPIO_WritePin(CS_FLASH_GPIO_Port, CS_FLASH_Pin, SET);
 800234a:	2201      	movs	r2, #1
 800234c:	2140      	movs	r1, #64	; 0x40
 800234e:	4885      	ldr	r0, [pc, #532]	; (8002564 <main+0x2f0>)
 8002350:	f002 f8f8 	bl	8004544 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FLASH_WP_GPIO_Port, FLASH_WP_Pin, SET);
 8002354:	2201      	movs	r2, #1
 8002356:	2120      	movs	r1, #32
 8002358:	4882      	ldr	r0, [pc, #520]	; (8002564 <main+0x2f0>)
 800235a:	f002 f8f3 	bl	8004544 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FLASH_IO3_GPIO_Port, FLASH_IO3_Pin, SET);
 800235e:	2201      	movs	r2, #1
 8002360:	2110      	movs	r1, #16
 8002362:	4880      	ldr	r0, [pc, #512]	; (8002564 <main+0x2f0>)
 8002364:	f002 f8ee 	bl	8004544 <HAL_GPIO_WritePin>


  dev_ctx_lsm = lsm6dsl_init();
 8002368:	4c7f      	ldr	r4, [pc, #508]	; (8002568 <main+0x2f4>)
 800236a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff f906 	bl	8001580 <lsm6dsl_init>
 8002374:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002378:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800237c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  dev_ctx_lps = lps22hh_init();
 8002380:	4c7a      	ldr	r4, [pc, #488]	; (800256c <main+0x2f8>)
 8002382:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff f9f6 	bl	8001778 <lps22hh_init>
 800238c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002390:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002394:	e884 0007 	stmia.w	r4, {r0, r1, r2}

#ifdef TEST_ALL_SENSORS_WITH_SD_CARD

//	sd_init("fcdata.txt", "S,PRESSURE_HPA,TEMP_DEG_C,ACCx,ACCy,ACCz,GYRx,GYRy,GYRz,LAT,LONG,E\r\n");
	char filename[13]; // filename will be of form fc000000.txt which is 13 chars in the array (with null termination)
	fres = sd_init_dynamic_filename("FC", "S,PRESSURE_HPA,TEMP_DEG_C,ACCx,ACCy,ACCz,GYRx,GYRy,GYRz,LAT,LONG,E\r\n", filename);
 8002398:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800239c:	461a      	mov	r2, r3
 800239e:	4974      	ldr	r1, [pc, #464]	; (8002570 <main+0x2fc>)
 80023a0:	4874      	ldr	r0, [pc, #464]	; (8002574 <main+0x300>)
 80023a2:	f000 fd33 	bl	8002e0c <sd_init_dynamic_filename>
 80023a6:	4603      	mov	r3, r0
 80023a8:	461a      	mov	r2, r3
 80023aa:	4b73      	ldr	r3, [pc, #460]	; (8002578 <main+0x304>)
 80023ac:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK)
 80023ae:	4b72      	ldr	r3, [pc, #456]	; (8002578 <main+0x304>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <main+0x146>
		Error_Handler();
 80023b6:	f000 fcf1 	bl	8002d9c <Error_Handler>
#endif

	while (1)
	{
		// poll data
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 80023ba:	2201      	movs	r2, #1
 80023bc:	2102      	movs	r1, #2
 80023be:	4865      	ldr	r0, [pc, #404]	; (8002554 <main+0x2e0>)
 80023c0:	f002 f8c0 	bl	8004544 <HAL_GPIO_WritePin>
		// lsm6dsl data
		get_acceleration(dev_ctx_lsm, acceleration_mg);
 80023c4:	4a68      	ldr	r2, [pc, #416]	; (8002568 <main+0x2f4>)
 80023c6:	4b6d      	ldr	r3, [pc, #436]	; (800257c <main+0x308>)
 80023c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80023ca:	f7ff f949 	bl	8001660 <get_acceleration>
		get_angvelocity(dev_ctx_lsm, angular_rate_mdps);
 80023ce:	4a66      	ldr	r2, [pc, #408]	; (8002568 <main+0x2f4>)
 80023d0:	4b6b      	ldr	r3, [pc, #428]	; (8002580 <main+0x30c>)
 80023d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80023d4:	f7ff f98a 	bl	80016ec <get_angvelocity>

		// lps22hh data
		get_pressure(dev_ctx_lps, &pressure_hPa);
 80023d8:	4a64      	ldr	r2, [pc, #400]	; (800256c <main+0x2f8>)
 80023da:	4b6a      	ldr	r3, [pc, #424]	; (8002584 <main+0x310>)
 80023dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80023de:	f7ff fa21 	bl	8001824 <get_pressure>
		get_temperature(dev_ctx_lps, &temperature_degC);
 80023e2:	4a62      	ldr	r2, [pc, #392]	; (800256c <main+0x2f8>)
 80023e4:	4b68      	ldr	r3, [pc, #416]	; (8002588 <main+0x314>)
 80023e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80023e8:	f7ff fa48 	bl	800187c <get_temperature>

		// use beeper for GPS to make sure we know whether coordinates are nonzero
		GPS_Poll(&latitude, &longitude, &time);
 80023ec:	4a67      	ldr	r2, [pc, #412]	; (800258c <main+0x318>)
 80023ee:	4968      	ldr	r1, [pc, #416]	; (8002590 <main+0x31c>)
 80023f0:	4868      	ldr	r0, [pc, #416]	; (8002594 <main+0x320>)
 80023f2:	f7fe fe0b 	bl	800100c <GPS_Poll>
		GPS_check_nonzero_data(latitude, longitude, &gps_fix_lat, &gps_fix_long);
 80023f6:	4b67      	ldr	r3, [pc, #412]	; (8002594 <main+0x320>)
 80023f8:	edd3 7a00 	vldr	s15, [r3]
 80023fc:	4b64      	ldr	r3, [pc, #400]	; (8002590 <main+0x31c>)
 80023fe:	ed93 7a00 	vldr	s14, [r3]
 8002402:	4965      	ldr	r1, [pc, #404]	; (8002598 <main+0x324>)
 8002404:	4865      	ldr	r0, [pc, #404]	; (800259c <main+0x328>)
 8002406:	eef0 0a47 	vmov.f32	s1, s14
 800240a:	eeb0 0a67 	vmov.f32	s0, s15
 800240e:	f7ff f857 	bl	80014c0 <GPS_check_nonzero_data>

		// make buffer with data and save
		sprintf((char *)msg_buffer, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,E\r\n",
 8002412:	4b5c      	ldr	r3, [pc, #368]	; (8002584 <main+0x310>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe f8a6 	bl	8000568 <__aeabi_f2d>
 800241c:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8002420:	4b59      	ldr	r3, [pc, #356]	; (8002588 <main+0x314>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f7fe f89f 	bl	8000568 <__aeabi_f2d>
 800242a:	e9c7 0108 	strd	r0, r1, [r7, #32]
				pressure_hPa, temperature_degC,
				acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 800242e:	4b53      	ldr	r3, [pc, #332]	; (800257c <main+0x308>)
 8002430:	681b      	ldr	r3, [r3, #0]
		sprintf((char *)msg_buffer, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,E\r\n",
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe f898 	bl	8000568 <__aeabi_f2d>
 8002438:	e9c7 0106 	strd	r0, r1, [r7, #24]
				acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 800243c:	4b4f      	ldr	r3, [pc, #316]	; (800257c <main+0x308>)
 800243e:	685b      	ldr	r3, [r3, #4]
		sprintf((char *)msg_buffer, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,E\r\n",
 8002440:	4618      	mov	r0, r3
 8002442:	f7fe f891 	bl	8000568 <__aeabi_f2d>
 8002446:	e9c7 0104 	strd	r0, r1, [r7, #16]
				acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 800244a:	4b4c      	ldr	r3, [pc, #304]	; (800257c <main+0x308>)
 800244c:	689b      	ldr	r3, [r3, #8]
		sprintf((char *)msg_buffer, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,E\r\n",
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe f88a 	bl	8000568 <__aeabi_f2d>
 8002454:	e9c7 0102 	strd	r0, r1, [r7, #8]
				angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2],
 8002458:	4b49      	ldr	r3, [pc, #292]	; (8002580 <main+0x30c>)
 800245a:	681b      	ldr	r3, [r3, #0]
		sprintf((char *)msg_buffer, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,E\r\n",
 800245c:	4618      	mov	r0, r3
 800245e:	f7fe f883 	bl	8000568 <__aeabi_f2d>
 8002462:	e9c7 0100 	strd	r0, r1, [r7]
				angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2],
 8002466:	4b46      	ldr	r3, [pc, #280]	; (8002580 <main+0x30c>)
 8002468:	685b      	ldr	r3, [r3, #4]
		sprintf((char *)msg_buffer, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,E\r\n",
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe f87c 	bl	8000568 <__aeabi_f2d>
 8002470:	4682      	mov	sl, r0
 8002472:	468b      	mov	fp, r1
				angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2],
 8002474:	4b42      	ldr	r3, [pc, #264]	; (8002580 <main+0x30c>)
 8002476:	689b      	ldr	r3, [r3, #8]
		sprintf((char *)msg_buffer, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,E\r\n",
 8002478:	4618      	mov	r0, r3
 800247a:	f7fe f875 	bl	8000568 <__aeabi_f2d>
 800247e:	4680      	mov	r8, r0
 8002480:	4689      	mov	r9, r1
 8002482:	4b44      	ldr	r3, [pc, #272]	; (8002594 <main+0x320>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe f86e 	bl	8000568 <__aeabi_f2d>
 800248c:	4604      	mov	r4, r0
 800248e:	460d      	mov	r5, r1
 8002490:	4b3f      	ldr	r3, [pc, #252]	; (8002590 <main+0x31c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f7fe f867 	bl	8000568 <__aeabi_f2d>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80024a2:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 80024a6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80024aa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80024ae:	ed97 7b00 	vldr	d7, [r7]
 80024b2:	ed8d 7b08 	vstr	d7, [sp, #32]
 80024b6:	ed97 7b02 	vldr	d7, [r7, #8]
 80024ba:	ed8d 7b06 	vstr	d7, [sp, #24]
 80024be:	ed97 7b04 	vldr	d7, [r7, #16]
 80024c2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80024c6:	ed97 7b06 	vldr	d7, [r7, #24]
 80024ca:	ed8d 7b02 	vstr	d7, [sp, #8]
 80024ce:	ed97 7b08 	vldr	d7, [r7, #32]
 80024d2:	ed8d 7b00 	vstr	d7, [sp]
 80024d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024da:	4931      	ldr	r1, [pc, #196]	; (80025a0 <main+0x32c>)
 80024dc:	4831      	ldr	r0, [pc, #196]	; (80025a4 <main+0x330>)
 80024de:	f00e fbcb 	bl	8010c78 <siprintf>
				latitude, longitude);

		HAL_UART_Transmit(&huart3, msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);
 80024e2:	4830      	ldr	r0, [pc, #192]	; (80025a4 <main+0x330>)
 80024e4:	f7fd fe84 	bl	80001f0 <strlen>
 80024e8:	4603      	mov	r3, r0
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	f04f 33ff 	mov.w	r3, #4294967295
 80024f0:	492c      	ldr	r1, [pc, #176]	; (80025a4 <main+0x330>)
 80024f2:	482d      	ldr	r0, [pc, #180]	; (80025a8 <main+0x334>)
 80024f4:	f006 fa1f 	bl	8008936 <HAL_UART_Transmit>

		fres = sd_open_file(filename);
 80024f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024fc:	4618      	mov	r0, r3
 80024fe:	f000 fd03 	bl	8002f08 <sd_open_file>
 8002502:	4603      	mov	r3, r0
 8002504:	461a      	mov	r2, r3
 8002506:	4b1c      	ldr	r3, [pc, #112]	; (8002578 <main+0x304>)
 8002508:	701a      	strb	r2, [r3, #0]
		if (fres == FR_OK) {
 800250a:	4b1b      	ldr	r3, [pc, #108]	; (8002578 <main+0x304>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d103      	bne.n	800251a <main+0x2a6>
			myprintf("I was able to open filename.txt for writing\r\n");
 8002512:	4826      	ldr	r0, [pc, #152]	; (80025ac <main+0x338>)
 8002514:	f000 fc62 	bl	8002ddc <myprintf>
 8002518:	e005      	b.n	8002526 <main+0x2b2>
		} else {
			myprintf("f_open error (%i)\r\n", fres);
 800251a:	4b17      	ldr	r3, [pc, #92]	; (8002578 <main+0x304>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	4619      	mov	r1, r3
 8002520:	4823      	ldr	r0, [pc, #140]	; (80025b0 <main+0x33c>)
 8002522:	f000 fc5b 	bl	8002ddc <myprintf>
		}
		sd_write(&fil, msg_buffer);
 8002526:	491f      	ldr	r1, [pc, #124]	; (80025a4 <main+0x330>)
 8002528:	4822      	ldr	r0, [pc, #136]	; (80025b4 <main+0x340>)
 800252a:	f000 fd05 	bl	8002f38 <sd_write>

#ifdef OUTPUT_USB_WITH_TEST
		CDC_Transmit_FS((uint8_t *)msg_buffer, strlen((char *)msg_buffer));
#endif

		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 800252e:	2200      	movs	r2, #0
 8002530:	2102      	movs	r1, #2
 8002532:	4808      	ldr	r0, [pc, #32]	; (8002554 <main+0x2e0>)
 8002534:	f002 f806 	bl	8004544 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8002538:	2064      	movs	r0, #100	; 0x64
 800253a:	f001 faaf 	bl	8003a9c <HAL_Delay>

		// close file
		f_close(&fil);
 800253e:	481d      	ldr	r0, [pc, #116]	; (80025b4 <main+0x340>)
 8002540:	f00c fc81 	bl	800ee46 <f_close>

		if (start_ejection) // stop when button pressed
 8002544:	4b1c      	ldr	r3, [pc, #112]	; (80025b8 <main+0x344>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	f43f af35 	beq.w	80023ba <main+0x146>
	HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, SET);
	HAL_Delay(1000);
	HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, RESET);
#endif

	while (1); // stop here
 8002550:	e7fe      	b.n	8002550 <main+0x2dc>
 8002552:	bf00      	nop
 8002554:	40020800 	.word	0x40020800
 8002558:	40021800 	.word	0x40021800
 800255c:	40021400 	.word	0x40021400
 8002560:	40021000 	.word	0x40021000
 8002564:	40020c00 	.word	0x40020c00
 8002568:	200012e4 	.word	0x200012e4
 800256c:	200012f0 	.word	0x200012f0
 8002570:	0801519c 	.word	0x0801519c
 8002574:	080151e4 	.word	0x080151e4
 8002578:	200012fc 	.word	0x200012fc
 800257c:	200003a8 	.word	0x200003a8
 8002580:	200003b4 	.word	0x200003b4
 8002584:	200003c0 	.word	0x200003c0
 8002588:	200003c4 	.word	0x200003c4
 800258c:	20001150 	.word	0x20001150
 8002590:	2000114c 	.word	0x2000114c
 8002594:	20001298 	.word	0x20001298
 8002598:	200003c9 	.word	0x200003c9
 800259c:	200003c8 	.word	0x200003c8
 80025a0:	080151e8 	.word	0x080151e8
 80025a4:	200003cc 	.word	0x200003cc
 80025a8:	20000cf4 	.word	0x20000cf4
 80025ac:	08015234 	.word	0x08015234
 80025b0:	08015264 	.word	0x08015264
 80025b4:	20001300 	.word	0x20001300
 80025b8:	200003a6 	.word	0x200003a6

080025bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b094      	sub	sp, #80	; 0x50
 80025c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025c2:	f107 0320 	add.w	r3, r7, #32
 80025c6:	2230      	movs	r2, #48	; 0x30
 80025c8:	2100      	movs	r1, #0
 80025ca:	4618      	mov	r0, r3
 80025cc:	f00d fccc 	bl	800ff68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025d0:	f107 030c 	add.w	r3, r7, #12
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	605a      	str	r2, [r3, #4]
 80025da:	609a      	str	r2, [r3, #8]
 80025dc:	60da      	str	r2, [r3, #12]
 80025de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80025e0:	2300      	movs	r3, #0
 80025e2:	60bb      	str	r3, [r7, #8]
 80025e4:	4b28      	ldr	r3, [pc, #160]	; (8002688 <SystemClock_Config+0xcc>)
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	4a27      	ldr	r2, [pc, #156]	; (8002688 <SystemClock_Config+0xcc>)
 80025ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ee:	6413      	str	r3, [r2, #64]	; 0x40
 80025f0:	4b25      	ldr	r3, [pc, #148]	; (8002688 <SystemClock_Config+0xcc>)
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80025fc:	2300      	movs	r3, #0
 80025fe:	607b      	str	r3, [r7, #4]
 8002600:	4b22      	ldr	r3, [pc, #136]	; (800268c <SystemClock_Config+0xd0>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002608:	4a20      	ldr	r2, [pc, #128]	; (800268c <SystemClock_Config+0xd0>)
 800260a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800260e:	6013      	str	r3, [r2, #0]
 8002610:	4b1e      	ldr	r3, [pc, #120]	; (800268c <SystemClock_Config+0xd0>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002618:	607b      	str	r3, [r7, #4]
 800261a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800261c:	2301      	movs	r3, #1
 800261e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002620:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002624:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002626:	2302      	movs	r3, #2
 8002628:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800262a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800262e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002630:	2308      	movs	r3, #8
 8002632:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002634:	2348      	movs	r3, #72	; 0x48
 8002636:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002638:	2302      	movs	r3, #2
 800263a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800263c:	2303      	movs	r3, #3
 800263e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002640:	f107 0320 	add.w	r3, r7, #32
 8002644:	4618      	mov	r0, r3
 8002646:	f004 f987 	bl	8006958 <HAL_RCC_OscConfig>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002650:	f000 fba4 	bl	8002d9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002654:	230f      	movs	r3, #15
 8002656:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002658:	2302      	movs	r3, #2
 800265a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002664:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002666:	2300      	movs	r3, #0
 8002668:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800266a:	f107 030c 	add.w	r3, r7, #12
 800266e:	2102      	movs	r1, #2
 8002670:	4618      	mov	r0, r3
 8002672:	f004 fbe9 	bl	8006e48 <HAL_RCC_ClockConfig>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800267c:	f000 fb8e 	bl	8002d9c <Error_Handler>
  }
}
 8002680:	bf00      	nop
 8002682:	3750      	adds	r7, #80	; 0x50
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40023800 	.word	0x40023800
 800268c:	40007000 	.word	0x40007000

08002690 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002696:	463b      	mov	r3, r7
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80026a2:	4b21      	ldr	r3, [pc, #132]	; (8002728 <MX_ADC1_Init+0x98>)
 80026a4:	4a21      	ldr	r2, [pc, #132]	; (800272c <MX_ADC1_Init+0x9c>)
 80026a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80026a8:	4b1f      	ldr	r3, [pc, #124]	; (8002728 <MX_ADC1_Init+0x98>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80026ae:	4b1e      	ldr	r3, [pc, #120]	; (8002728 <MX_ADC1_Init+0x98>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80026b4:	4b1c      	ldr	r3, [pc, #112]	; (8002728 <MX_ADC1_Init+0x98>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80026ba:	4b1b      	ldr	r3, [pc, #108]	; (8002728 <MX_ADC1_Init+0x98>)
 80026bc:	2200      	movs	r2, #0
 80026be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80026c0:	4b19      	ldr	r3, [pc, #100]	; (8002728 <MX_ADC1_Init+0x98>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80026c8:	4b17      	ldr	r3, [pc, #92]	; (8002728 <MX_ADC1_Init+0x98>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80026ce:	4b16      	ldr	r3, [pc, #88]	; (8002728 <MX_ADC1_Init+0x98>)
 80026d0:	4a17      	ldr	r2, [pc, #92]	; (8002730 <MX_ADC1_Init+0xa0>)
 80026d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80026d4:	4b14      	ldr	r3, [pc, #80]	; (8002728 <MX_ADC1_Init+0x98>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80026da:	4b13      	ldr	r3, [pc, #76]	; (8002728 <MX_ADC1_Init+0x98>)
 80026dc:	2201      	movs	r2, #1
 80026de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80026e0:	4b11      	ldr	r3, [pc, #68]	; (8002728 <MX_ADC1_Init+0x98>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80026e8:	4b0f      	ldr	r3, [pc, #60]	; (8002728 <MX_ADC1_Init+0x98>)
 80026ea:	2201      	movs	r2, #1
 80026ec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80026ee:	480e      	ldr	r0, [pc, #56]	; (8002728 <MX_ADC1_Init+0x98>)
 80026f0:	f001 f9f8 	bl	8003ae4 <HAL_ADC_Init>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80026fa:	f000 fb4f 	bl	8002d9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80026fe:	2306      	movs	r3, #6
 8002700:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002702:	2301      	movs	r3, #1
 8002704:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002706:	2307      	movs	r3, #7
 8002708:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800270a:	463b      	mov	r3, r7
 800270c:	4619      	mov	r1, r3
 800270e:	4806      	ldr	r0, [pc, #24]	; (8002728 <MX_ADC1_Init+0x98>)
 8002710:	f001 fa2c 	bl	8003b6c <HAL_ADC_ConfigChannel>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800271a:	f000 fb3f 	bl	8002d9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800271e:	bf00      	nop
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000fbc 	.word	0x20000fbc
 800272c:	40012000 	.word	0x40012000
 8002730:	0f000001 	.word	0x0f000001

08002734 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002738:	4b1b      	ldr	r3, [pc, #108]	; (80027a8 <MX_I2C2_Init+0x74>)
 800273a:	4a1c      	ldr	r2, [pc, #112]	; (80027ac <MX_I2C2_Init+0x78>)
 800273c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800273e:	4b1a      	ldr	r3, [pc, #104]	; (80027a8 <MX_I2C2_Init+0x74>)
 8002740:	4a1b      	ldr	r2, [pc, #108]	; (80027b0 <MX_I2C2_Init+0x7c>)
 8002742:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002744:	4b18      	ldr	r3, [pc, #96]	; (80027a8 <MX_I2C2_Init+0x74>)
 8002746:	2200      	movs	r2, #0
 8002748:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800274a:	4b17      	ldr	r3, [pc, #92]	; (80027a8 <MX_I2C2_Init+0x74>)
 800274c:	2200      	movs	r2, #0
 800274e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002750:	4b15      	ldr	r3, [pc, #84]	; (80027a8 <MX_I2C2_Init+0x74>)
 8002752:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002756:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002758:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <MX_I2C2_Init+0x74>)
 800275a:	2200      	movs	r2, #0
 800275c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800275e:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <MX_I2C2_Init+0x74>)
 8002760:	2200      	movs	r2, #0
 8002762:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002764:	4b10      	ldr	r3, [pc, #64]	; (80027a8 <MX_I2C2_Init+0x74>)
 8002766:	2200      	movs	r2, #0
 8002768:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800276a:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <MX_I2C2_Init+0x74>)
 800276c:	2200      	movs	r2, #0
 800276e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002770:	480d      	ldr	r0, [pc, #52]	; (80027a8 <MX_I2C2_Init+0x74>)
 8002772:	f001 ff33 	bl	80045dc <HAL_I2C_Init>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800277c:	f000 fb0e 	bl	8002d9c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002780:	2100      	movs	r1, #0
 8002782:	4809      	ldr	r0, [pc, #36]	; (80027a8 <MX_I2C2_Init+0x74>)
 8002784:	f002 fee9 	bl	800555a <HAL_I2CEx_ConfigAnalogFilter>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800278e:	f000 fb05 	bl	8002d9c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002792:	2100      	movs	r1, #0
 8002794:	4804      	ldr	r0, [pc, #16]	; (80027a8 <MX_I2C2_Init+0x74>)
 8002796:	f002 ff1c 	bl	80055d2 <HAL_I2CEx_ConfigDigitalFilter>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80027a0:	f000 fafc 	bl	8002d9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80027a4:	bf00      	nop
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	20000f68 	.word	0x20000f68
 80027ac:	40005800 	.word	0x40005800
 80027b0:	000186a0 	.word	0x000186a0

080027b4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80027b8:	4b1b      	ldr	r3, [pc, #108]	; (8002828 <MX_I2C3_Init+0x74>)
 80027ba:	4a1c      	ldr	r2, [pc, #112]	; (800282c <MX_I2C3_Init+0x78>)
 80027bc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80027be:	4b1a      	ldr	r3, [pc, #104]	; (8002828 <MX_I2C3_Init+0x74>)
 80027c0:	4a1b      	ldr	r2, [pc, #108]	; (8002830 <MX_I2C3_Init+0x7c>)
 80027c2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80027c4:	4b18      	ldr	r3, [pc, #96]	; (8002828 <MX_I2C3_Init+0x74>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80027ca:	4b17      	ldr	r3, [pc, #92]	; (8002828 <MX_I2C3_Init+0x74>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027d0:	4b15      	ldr	r3, [pc, #84]	; (8002828 <MX_I2C3_Init+0x74>)
 80027d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027d6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027d8:	4b13      	ldr	r3, [pc, #76]	; (8002828 <MX_I2C3_Init+0x74>)
 80027da:	2200      	movs	r2, #0
 80027dc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80027de:	4b12      	ldr	r3, [pc, #72]	; (8002828 <MX_I2C3_Init+0x74>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027e4:	4b10      	ldr	r3, [pc, #64]	; (8002828 <MX_I2C3_Init+0x74>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027ea:	4b0f      	ldr	r3, [pc, #60]	; (8002828 <MX_I2C3_Init+0x74>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80027f0:	480d      	ldr	r0, [pc, #52]	; (8002828 <MX_I2C3_Init+0x74>)
 80027f2:	f001 fef3 	bl	80045dc <HAL_I2C_Init>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80027fc:	f000 face 	bl	8002d9c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002800:	2100      	movs	r1, #0
 8002802:	4809      	ldr	r0, [pc, #36]	; (8002828 <MX_I2C3_Init+0x74>)
 8002804:	f002 fea9 	bl	800555a <HAL_I2CEx_ConfigAnalogFilter>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800280e:	f000 fac5 	bl	8002d9c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002812:	2100      	movs	r1, #0
 8002814:	4804      	ldr	r0, [pc, #16]	; (8002828 <MX_I2C3_Init+0x74>)
 8002816:	f002 fedc 	bl	80055d2 <HAL_I2CEx_ConfigDigitalFilter>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002820:	f000 fabc 	bl	8002d9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002824:	bf00      	nop
 8002826:	bd80      	pop	{r7, pc}
 8002828:	20000c48 	.word	0x20000c48
 800282c:	40005c00 	.word	0x40005c00
 8002830:	000186a0 	.word	0x000186a0

08002834 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8002838:	4b17      	ldr	r3, [pc, #92]	; (8002898 <MX_SPI4_Init+0x64>)
 800283a:	4a18      	ldr	r2, [pc, #96]	; (800289c <MX_SPI4_Init+0x68>)
 800283c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800283e:	4b16      	ldr	r3, [pc, #88]	; (8002898 <MX_SPI4_Init+0x64>)
 8002840:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002844:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002846:	4b14      	ldr	r3, [pc, #80]	; (8002898 <MX_SPI4_Init+0x64>)
 8002848:	2200      	movs	r2, #0
 800284a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800284c:	4b12      	ldr	r3, [pc, #72]	; (8002898 <MX_SPI4_Init+0x64>)
 800284e:	2200      	movs	r2, #0
 8002850:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002852:	4b11      	ldr	r3, [pc, #68]	; (8002898 <MX_SPI4_Init+0x64>)
 8002854:	2200      	movs	r2, #0
 8002856:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002858:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <MX_SPI4_Init+0x64>)
 800285a:	2200      	movs	r2, #0
 800285c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800285e:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <MX_SPI4_Init+0x64>)
 8002860:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002864:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002866:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <MX_SPI4_Init+0x64>)
 8002868:	2230      	movs	r2, #48	; 0x30
 800286a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800286c:	4b0a      	ldr	r3, [pc, #40]	; (8002898 <MX_SPI4_Init+0x64>)
 800286e:	2200      	movs	r2, #0
 8002870:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002872:	4b09      	ldr	r3, [pc, #36]	; (8002898 <MX_SPI4_Init+0x64>)
 8002874:	2200      	movs	r2, #0
 8002876:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002878:	4b07      	ldr	r3, [pc, #28]	; (8002898 <MX_SPI4_Init+0x64>)
 800287a:	2200      	movs	r2, #0
 800287c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 800287e:	4b06      	ldr	r3, [pc, #24]	; (8002898 <MX_SPI4_Init+0x64>)
 8002880:	220a      	movs	r2, #10
 8002882:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002884:	4804      	ldr	r0, [pc, #16]	; (8002898 <MX_SPI4_Init+0x64>)
 8002886:	f004 fcd9 	bl	800723c <HAL_SPI_Init>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8002890:	f000 fa84 	bl	8002d9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002894:	bf00      	nop
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20000b34 	.word	0x20000b34
 800289c:	40013400 	.word	0x40013400

080028a0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80028a4:	4b17      	ldr	r3, [pc, #92]	; (8002904 <MX_SPI5_Init+0x64>)
 80028a6:	4a18      	ldr	r2, [pc, #96]	; (8002908 <MX_SPI5_Init+0x68>)
 80028a8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80028aa:	4b16      	ldr	r3, [pc, #88]	; (8002904 <MX_SPI5_Init+0x64>)
 80028ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028b0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80028b2:	4b14      	ldr	r3, [pc, #80]	; (8002904 <MX_SPI5_Init+0x64>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80028b8:	4b12      	ldr	r3, [pc, #72]	; (8002904 <MX_SPI5_Init+0x64>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028be:	4b11      	ldr	r3, [pc, #68]	; (8002904 <MX_SPI5_Init+0x64>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028c4:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <MX_SPI5_Init+0x64>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80028ca:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <MX_SPI5_Init+0x64>)
 80028cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028d0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80028d2:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <MX_SPI5_Init+0x64>)
 80028d4:	2238      	movs	r2, #56	; 0x38
 80028d6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028d8:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <MX_SPI5_Init+0x64>)
 80028da:	2200      	movs	r2, #0
 80028dc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80028de:	4b09      	ldr	r3, [pc, #36]	; (8002904 <MX_SPI5_Init+0x64>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028e4:	4b07      	ldr	r3, [pc, #28]	; (8002904 <MX_SPI5_Init+0x64>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80028ea:	4b06      	ldr	r3, [pc, #24]	; (8002904 <MX_SPI5_Init+0x64>)
 80028ec:	220a      	movs	r2, #10
 80028ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80028f0:	4804      	ldr	r0, [pc, #16]	; (8002904 <MX_SPI5_Init+0x64>)
 80028f2:	f004 fca3 	bl	800723c <HAL_SPI_Init>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80028fc:	f000 fa4e 	bl	8002d9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002900:	bf00      	nop
 8002902:	bd80      	pop	{r7, pc}
 8002904:	20000c9c 	.word	0x20000c9c
 8002908:	40015000 	.word	0x40015000

0800290c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b08e      	sub	sp, #56	; 0x38
 8002910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002912:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	605a      	str	r2, [r3, #4]
 800291c:	609a      	str	r2, [r3, #8]
 800291e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002920:	f107 0320 	add.w	r3, r7, #32
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800292a:	1d3b      	adds	r3, r7, #4
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	605a      	str	r2, [r3, #4]
 8002932:	609a      	str	r2, [r3, #8]
 8002934:	60da      	str	r2, [r3, #12]
 8002936:	611a      	str	r2, [r3, #16]
 8002938:	615a      	str	r2, [r3, #20]
 800293a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800293c:	4b2d      	ldr	r3, [pc, #180]	; (80029f4 <MX_TIM2_Init+0xe8>)
 800293e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002942:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50;
 8002944:	4b2b      	ldr	r3, [pc, #172]	; (80029f4 <MX_TIM2_Init+0xe8>)
 8002946:	2232      	movs	r2, #50	; 0x32
 8002948:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800294a:	4b2a      	ldr	r3, [pc, #168]	; (80029f4 <MX_TIM2_Init+0xe8>)
 800294c:	2200      	movs	r2, #0
 800294e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002950:	4b28      	ldr	r3, [pc, #160]	; (80029f4 <MX_TIM2_Init+0xe8>)
 8002952:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002956:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002958:	4b26      	ldr	r3, [pc, #152]	; (80029f4 <MX_TIM2_Init+0xe8>)
 800295a:	2200      	movs	r2, #0
 800295c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800295e:	4b25      	ldr	r3, [pc, #148]	; (80029f4 <MX_TIM2_Init+0xe8>)
 8002960:	2200      	movs	r2, #0
 8002962:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002964:	4823      	ldr	r0, [pc, #140]	; (80029f4 <MX_TIM2_Init+0xe8>)
 8002966:	f004 ff5f 	bl	8007828 <HAL_TIM_Base_Init>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002970:	f000 fa14 	bl	8002d9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002978:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800297a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800297e:	4619      	mov	r1, r3
 8002980:	481c      	ldr	r0, [pc, #112]	; (80029f4 <MX_TIM2_Init+0xe8>)
 8002982:	f005 fafb 	bl	8007f7c <HAL_TIM_ConfigClockSource>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800298c:	f000 fa06 	bl	8002d9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002990:	4818      	ldr	r0, [pc, #96]	; (80029f4 <MX_TIM2_Init+0xe8>)
 8002992:	f004 ff98 	bl	80078c6 <HAL_TIM_PWM_Init>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800299c:	f000 f9fe 	bl	8002d9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80029a0:	2320      	movs	r3, #32
 80029a2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029a4:	2300      	movs	r3, #0
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029a8:	f107 0320 	add.w	r3, r7, #32
 80029ac:	4619      	mov	r1, r3
 80029ae:	4811      	ldr	r0, [pc, #68]	; (80029f4 <MX_TIM2_Init+0xe8>)
 80029b0:	f005 fee4 	bl	800877c <HAL_TIMEx_MasterConfigSynchronization>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80029ba:	f000 f9ef 	bl	8002d9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029be:	2360      	movs	r3, #96	; 0x60
 80029c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 80029c2:	2364      	movs	r3, #100	; 0x64
 80029c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029c6:	2300      	movs	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80029ce:	1d3b      	adds	r3, r7, #4
 80029d0:	2208      	movs	r2, #8
 80029d2:	4619      	mov	r1, r3
 80029d4:	4807      	ldr	r0, [pc, #28]	; (80029f4 <MX_TIM2_Init+0xe8>)
 80029d6:	f005 fa0f 	bl	8007df8 <HAL_TIM_PWM_ConfigChannel>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80029e0:	f000 f9dc 	bl	8002d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80029e4:	4803      	ldr	r0, [pc, #12]	; (80029f4 <MX_TIM2_Init+0xe8>)
 80029e6:	f000 fde9 	bl	80035bc <HAL_TIM_MspPostInit>

}
 80029ea:	bf00      	nop
 80029ec:	3738      	adds	r7, #56	; 0x38
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	2000129c 	.word	0x2000129c

080029f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80029fc:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <MX_USART3_UART_Init+0x4c>)
 80029fe:	4a12      	ldr	r2, [pc, #72]	; (8002a48 <MX_USART3_UART_Init+0x50>)
 8002a00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002a02:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <MX_USART3_UART_Init+0x4c>)
 8002a04:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a0a:	4b0e      	ldr	r3, [pc, #56]	; (8002a44 <MX_USART3_UART_Init+0x4c>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a10:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <MX_USART3_UART_Init+0x4c>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a16:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <MX_USART3_UART_Init+0x4c>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a1c:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <MX_USART3_UART_Init+0x4c>)
 8002a1e:	220c      	movs	r2, #12
 8002a20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a22:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <MX_USART3_UART_Init+0x4c>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a28:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <MX_USART3_UART_Init+0x4c>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a2e:	4805      	ldr	r0, [pc, #20]	; (8002a44 <MX_USART3_UART_Init+0x4c>)
 8002a30:	f005 ff34 	bl	800889c <HAL_UART_Init>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002a3a:	f000 f9af 	bl	8002d9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002a3e:	bf00      	nop
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	20000cf4 	.word	0x20000cf4
 8002a48:	40004800 	.word	0x40004800

08002a4c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002a50:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <MX_USART6_UART_Init+0x4c>)
 8002a52:	4a12      	ldr	r2, [pc, #72]	; (8002a9c <MX_USART6_UART_Init+0x50>)
 8002a54:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 8002a56:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <MX_USART6_UART_Init+0x4c>)
 8002a58:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002a5c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002a5e:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <MX_USART6_UART_Init+0x4c>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002a64:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <MX_USART6_UART_Init+0x4c>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002a6a:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <MX_USART6_UART_Init+0x4c>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002a70:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <MX_USART6_UART_Init+0x4c>)
 8002a72:	220c      	movs	r2, #12
 8002a74:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a76:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <MX_USART6_UART_Init+0x4c>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a7c:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <MX_USART6_UART_Init+0x4c>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002a82:	4805      	ldr	r0, [pc, #20]	; (8002a98 <MX_USART6_UART_Init+0x4c>)
 8002a84:	f005 ff0a 	bl	800889c <HAL_UART_Init>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002a8e:	f000 f985 	bl	8002d9c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20001254 	.word	0x20001254
 8002a9c:	40011400 	.word	0x40011400

08002aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08e      	sub	sp, #56	; 0x38
 8002aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	605a      	str	r2, [r3, #4]
 8002ab0:	609a      	str	r2, [r3, #8]
 8002ab2:	60da      	str	r2, [r3, #12]
 8002ab4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	623b      	str	r3, [r7, #32]
 8002aba:	4b90      	ldr	r3, [pc, #576]	; (8002cfc <MX_GPIO_Init+0x25c>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	4a8f      	ldr	r2, [pc, #572]	; (8002cfc <MX_GPIO_Init+0x25c>)
 8002ac0:	f043 0310 	orr.w	r3, r3, #16
 8002ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac6:	4b8d      	ldr	r3, [pc, #564]	; (8002cfc <MX_GPIO_Init+0x25c>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	f003 0310 	and.w	r3, r3, #16
 8002ace:	623b      	str	r3, [r7, #32]
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61fb      	str	r3, [r7, #28]
 8002ad6:	4b89      	ldr	r3, [pc, #548]	; (8002cfc <MX_GPIO_Init+0x25c>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	4a88      	ldr	r2, [pc, #544]	; (8002cfc <MX_GPIO_Init+0x25c>)
 8002adc:	f043 0304 	orr.w	r3, r3, #4
 8002ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae2:	4b86      	ldr	r3, [pc, #536]	; (8002cfc <MX_GPIO_Init+0x25c>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	61fb      	str	r3, [r7, #28]
 8002aec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	61bb      	str	r3, [r7, #24]
 8002af2:	4b82      	ldr	r3, [pc, #520]	; (8002cfc <MX_GPIO_Init+0x25c>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	4a81      	ldr	r2, [pc, #516]	; (8002cfc <MX_GPIO_Init+0x25c>)
 8002af8:	f043 0320 	orr.w	r3, r3, #32
 8002afc:	6313      	str	r3, [r2, #48]	; 0x30
 8002afe:	4b7f      	ldr	r3, [pc, #508]	; (8002cfc <MX_GPIO_Init+0x25c>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	f003 0320 	and.w	r3, r3, #32
 8002b06:	61bb      	str	r3, [r7, #24]
 8002b08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]
 8002b0e:	4b7b      	ldr	r3, [pc, #492]	; (8002cfc <MX_GPIO_Init+0x25c>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	4a7a      	ldr	r2, [pc, #488]	; (8002cfc <MX_GPIO_Init+0x25c>)
 8002b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b18:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1a:	4b78      	ldr	r3, [pc, #480]	; (8002cfc <MX_GPIO_Init+0x25c>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	4b74      	ldr	r3, [pc, #464]	; (8002cfc <MX_GPIO_Init+0x25c>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	4a73      	ldr	r2, [pc, #460]	; (8002cfc <MX_GPIO_Init+0x25c>)
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	6313      	str	r3, [r2, #48]	; 0x30
 8002b36:	4b71      	ldr	r3, [pc, #452]	; (8002cfc <MX_GPIO_Init+0x25c>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	613b      	str	r3, [r7, #16]
 8002b40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	4b6d      	ldr	r3, [pc, #436]	; (8002cfc <MX_GPIO_Init+0x25c>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	4a6c      	ldr	r2, [pc, #432]	; (8002cfc <MX_GPIO_Init+0x25c>)
 8002b4c:	f043 0302 	orr.w	r3, r3, #2
 8002b50:	6313      	str	r3, [r2, #48]	; 0x30
 8002b52:	4b6a      	ldr	r3, [pc, #424]	; (8002cfc <MX_GPIO_Init+0x25c>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60bb      	str	r3, [r7, #8]
 8002b62:	4b66      	ldr	r3, [pc, #408]	; (8002cfc <MX_GPIO_Init+0x25c>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b66:	4a65      	ldr	r2, [pc, #404]	; (8002cfc <MX_GPIO_Init+0x25c>)
 8002b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b6e:	4b63      	ldr	r3, [pc, #396]	; (8002cfc <MX_GPIO_Init+0x25c>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b76:	60bb      	str	r3, [r7, #8]
 8002b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	607b      	str	r3, [r7, #4]
 8002b7e:	4b5f      	ldr	r3, [pc, #380]	; (8002cfc <MX_GPIO_Init+0x25c>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	4a5e      	ldr	r2, [pc, #376]	; (8002cfc <MX_GPIO_Init+0x25c>)
 8002b84:	f043 0308 	orr.w	r3, r3, #8
 8002b88:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8a:	4b5c      	ldr	r3, [pc, #368]	; (8002cfc <MX_GPIO_Init+0x25c>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	f003 0308 	and.w	r3, r3, #8
 8002b92:	607b      	str	r3, [r7, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PM_12V_EN_Pin|Vent_Valve_EN_Pin|Payload_EN_Pin|TH_CS_1_Pin
 8002b96:	2200      	movs	r2, #0
 8002b98:	f640 6184 	movw	r1, #3716	; 0xe84
 8002b9c:	4858      	ldr	r0, [pc, #352]	; (8002d00 <MX_GPIO_Init+0x260>)
 8002b9e:	f001 fcd1 	bl	8004544 <HAL_GPIO_WritePin>
                          |TH_CS_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|Prop_Gate_2_Pin|Prop_Gate_1_Pin, GPIO_PIN_RESET);
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8002ba8:	4856      	ldr	r0, [pc, #344]	; (8002d04 <MX_GPIO_Init+0x264>)
 8002baa:	f001 fccb 	bl	8004544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8002bae:	2200      	movs	r2, #0
 8002bb0:	210e      	movs	r1, #14
 8002bb2:	4855      	ldr	r0, [pc, #340]	; (8002d08 <MX_GPIO_Init+0x268>)
 8002bb4:	f001 fcc6 	bl	8004544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Prop_Pyro_Arming_Pin|VR_CTRL_PWR_Pin|Rcov_Gate_Main_Pin|Rcov_Gate_Drogue_Pin
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f645 2102 	movw	r1, #23042	; 0x5a02
 8002bbe:	4853      	ldr	r0, [pc, #332]	; (8002d0c <MX_GPIO_Init+0x26c>)
 8002bc0:	f001 fcc0 	bl	8004544 <HAL_GPIO_WritePin>
                          |Rcov_Arm_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FLASH_IO3_Pin|FLASH_WP_Pin|CS_FLASH_Pin|VR_CTRL_REC_Pin, GPIO_PIN_RESET);
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	21f0      	movs	r1, #240	; 0xf0
 8002bc8:	4851      	ldr	r0, [pc, #324]	; (8002d10 <MX_GPIO_Init+0x270>)
 8002bca:	f001 fcbb 	bl	8004544 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PM_12V_EN_Pin Vent_Valve_EN_Pin Payload_EN_Pin TH_CS_1_Pin
                           TH_CS_2_Pin */
  GPIO_InitStruct.Pin = PM_12V_EN_Pin|Vent_Valve_EN_Pin|Payload_EN_Pin|TH_CS_1_Pin
 8002bce:	f640 6384 	movw	r3, #3716	; 0xe84
 8002bd2:	627b      	str	r3, [r7, #36]	; 0x24
                          |TH_CS_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002be4:	4619      	mov	r1, r3
 8002be6:	4846      	ldr	r0, [pc, #280]	; (8002d00 <MX_GPIO_Init+0x260>)
 8002be8:	f001 fb00 	bl	80041ec <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8002bec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8002bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c02:	4619      	mov	r1, r3
 8002c04:	483f      	ldr	r0, [pc, #252]	; (8002d04 <MX_GPIO_Init+0x264>)
 8002c06:	f001 faf1 	bl	80041ec <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002c12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8002c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	483a      	ldr	r0, [pc, #232]	; (8002d08 <MX_GPIO_Init+0x268>)
 8002c20:	f001 fae4 	bl	80041ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8002c24:	230e      	movs	r3, #14
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c30:	2300      	movs	r3, #0
 8002c32:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4833      	ldr	r0, [pc, #204]	; (8002d08 <MX_GPIO_Init+0x268>)
 8002c3c:	f001 fad6 	bl	80041ec <HAL_GPIO_Init>

  /*Configure GPIO pin : Vent_Valve_FB_Pin */
  GPIO_InitStruct.Pin = Vent_Valve_FB_Pin;
 8002c40:	2302      	movs	r3, #2
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c44:	2300      	movs	r3, #0
 8002c46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Vent_Valve_FB_GPIO_Port, &GPIO_InitStruct);
 8002c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c50:	4619      	mov	r1, r3
 8002c52:	4830      	ldr	r0, [pc, #192]	; (8002d14 <MX_GPIO_Init+0x274>)
 8002c54:	f001 faca 	bl	80041ec <HAL_GPIO_Init>

  /*Configure GPIO pin : Prop_Cont_2_Pin */
  GPIO_InitStruct.Pin = Prop_Cont_2_Pin;
 8002c58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Prop_Cont_2_GPIO_Port, &GPIO_InitStruct);
 8002c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4825      	ldr	r0, [pc, #148]	; (8002d04 <MX_GPIO_Init+0x264>)
 8002c6e:	f001 fabd 	bl	80041ec <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Gate_2_Pin Prop_Gate_1_Pin */
  GPIO_InitStruct.Pin = Prop_Gate_2_Pin|Prop_Gate_1_Pin;
 8002c72:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002c76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c80:	2300      	movs	r3, #0
 8002c82:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c88:	4619      	mov	r1, r3
 8002c8a:	481e      	ldr	r0, [pc, #120]	; (8002d04 <MX_GPIO_Init+0x264>)
 8002c8c:	f001 faae 	bl	80041ec <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Cont_1_Pin Rcov_Cont_Main_Pin Rcov_Cont_Drogue_Pin */
  GPIO_InitStruct.Pin = Prop_Cont_1_Pin|Rcov_Cont_Main_Pin|Rcov_Cont_Drogue_Pin;
 8002c90:	f242 4301 	movw	r3, #9217	; 0x2401
 8002c94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c96:	2300      	movs	r3, #0
 8002c98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4819      	ldr	r0, [pc, #100]	; (8002d0c <MX_GPIO_Init+0x26c>)
 8002ca6:	f001 faa1 	bl	80041ec <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Pyro_Arming_Pin VR_CTRL_PWR_Pin Rcov_Gate_Main_Pin Rcov_Gate_Drogue_Pin
                           Rcov_Arm_Pin */
  GPIO_InitStruct.Pin = Prop_Pyro_Arming_Pin|VR_CTRL_PWR_Pin|Rcov_Gate_Main_Pin|Rcov_Gate_Drogue_Pin
 8002caa:	f645 2302 	movw	r3, #23042	; 0x5a02
 8002cae:	627b      	str	r3, [r7, #36]	; 0x24
                          |Rcov_Arm_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4812      	ldr	r0, [pc, #72]	; (8002d0c <MX_GPIO_Init+0x26c>)
 8002cc4:	f001 fa92 	bl	80041ec <HAL_GPIO_Init>

  /*Configure GPIO pins : FLASH_IO3_Pin FLASH_WP_Pin CS_FLASH_Pin VR_CTRL_REC_Pin */
  GPIO_InitStruct.Pin = FLASH_IO3_Pin|FLASH_WP_Pin|CS_FLASH_Pin|VR_CTRL_REC_Pin;
 8002cc8:	23f0      	movs	r3, #240	; 0xf0
 8002cca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cdc:	4619      	mov	r1, r3
 8002cde:	480c      	ldr	r0, [pc, #48]	; (8002d10 <MX_GPIO_Init+0x270>)
 8002ce0:	f001 fa84 	bl	80041ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	2006      	movs	r0, #6
 8002cea:	f001 fa48 	bl	800417e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002cee:	2006      	movs	r0, #6
 8002cf0:	f001 fa61 	bl	80041b6 <HAL_NVIC_EnableIRQ>

}
 8002cf4:	bf00      	nop
 8002cf6:	3738      	adds	r7, #56	; 0x38
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	40021000 	.word	0x40021000
 8002d04:	40021400 	.word	0x40021400
 8002d08:	40020800 	.word	0x40020800
 8002d0c:	40021800 	.word	0x40021800
 8002d10:	40020c00 	.word	0x40020c00
 8002d14:	40020400 	.word	0x40020400

08002d18 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Button_Pin)
 8002d22:	88fb      	ldrh	r3, [r7, #6]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d102      	bne.n	8002d2e <HAL_GPIO_EXTI_Callback+0x16>
	{
		start_ejection = 1;
 8002d28:	4b04      	ldr	r3, [pc, #16]	; (8002d3c <HAL_GPIO_EXTI_Callback+0x24>)
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	701a      	strb	r2, [r3, #0]
	}
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	200003a6 	.word	0x200003a6

08002d40 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
//		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
//		HAL_GPIO_TogglePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin);
		timer_actuated_vent_valve = 1;
	}
#endif
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <tone>:
	}

}

void tone(uint32_t duration, uint32_t repeats)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
	for (uint32_t i = 0; i < repeats; i++)
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	e010      	b.n	8002d86 <tone+0x32>
	{
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002d64:	2108      	movs	r1, #8
 8002d66:	480c      	ldr	r0, [pc, #48]	; (8002d98 <tone+0x44>)
 8002d68:	f004 fe06 	bl	8007978 <HAL_TIM_PWM_Start>
		HAL_Delay(duration); // wait so i can probe voltage
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 fe95 	bl	8003a9c <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8002d72:	2108      	movs	r1, #8
 8002d74:	4808      	ldr	r0, [pc, #32]	; (8002d98 <tone+0x44>)
 8002d76:	f004 fec7 	bl	8007b08 <HAL_TIM_PWM_Stop>
		HAL_Delay(duration);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 fe8e 	bl	8003a9c <HAL_Delay>
	for (uint32_t i = 0; i < repeats; i++)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	3301      	adds	r3, #1
 8002d84:	60fb      	str	r3, [r7, #12]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d3ea      	bcc.n	8002d64 <tone+0x10>
	}
}
 8002d8e:	bf00      	nop
 8002d90:	bf00      	nop
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	2000129c 	.word	0x2000129c

08002d9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
//  __disable_irq();
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET); // error occurred, fatal
 8002da0:	2201      	movs	r2, #1
 8002da2:	2108      	movs	r1, #8
 8002da4:	480b      	ldr	r0, [pc, #44]	; (8002dd4 <Error_Handler+0x38>)
 8002da6:	f001 fbcd 	bl	8004544 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002daa:	2108      	movs	r1, #8
 8002dac:	480a      	ldr	r0, [pc, #40]	; (8002dd8 <Error_Handler+0x3c>)
 8002dae:	f004 fde3 	bl	8007978 <HAL_TIM_PWM_Start>
  HAL_Delay(1000);
 8002db2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002db6:	f000 fe71 	bl	8003a9c <HAL_Delay>
  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8002dba:	2108      	movs	r1, #8
 8002dbc:	4806      	ldr	r0, [pc, #24]	; (8002dd8 <Error_Handler+0x3c>)
 8002dbe:	f004 fea3 	bl	8007b08 <HAL_TIM_PWM_Stop>
  while (1)
  {
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); // error occurred, fatal
 8002dc2:	2108      	movs	r1, #8
 8002dc4:	4803      	ldr	r0, [pc, #12]	; (8002dd4 <Error_Handler+0x38>)
 8002dc6:	f001 fbd6 	bl	8004576 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8002dca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002dce:	f000 fe65 	bl	8003a9c <HAL_Delay>
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); // error occurred, fatal
 8002dd2:	e7f6      	b.n	8002dc2 <Error_Handler+0x26>
 8002dd4:	40020800 	.word	0x40020800
 8002dd8:	2000129c 	.word	0x2000129c

08002ddc <myprintf>:
extern FIL fil;
uint8_t msg_buffer[1000];


// private functions
void myprintf(const char *fmt, ...) { // currently does nothing, was copied from a tutorial to make the code work
 8002ddc:	b40f      	push	{r0, r1, r2, r3}
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b082      	sub	sp, #8
 8002de2:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8002de4:	f107 0314 	add.w	r3, r7, #20
 8002de8:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002df2:	4805      	ldr	r0, [pc, #20]	; (8002e08 <myprintf+0x2c>)
 8002df4:	f00e fed4 	bl	8011ba0 <vsniprintf>
  va_end(args);

//  int len = strlen(buffer);
//  HAL_UART_Transmit(&huart8, (uint8_t*)buffer, len, -1);

}
 8002df8:	bf00      	nop
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e02:	b004      	add	sp, #16
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	200007b4 	.word	0x200007b4

08002e0c <sd_init_dynamic_filename>:
 * creates new file of form "[prefix][number].txt"
 * where the string composed of "[prefix][number]" is 8 characters long.
 *
 */
FRESULT sd_init_dynamic_filename(char *prefix, char *header_text, char* return_filename)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08a      	sub	sp, #40	; 0x28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
	FRESULT fres = f_mount(&FatFs, "", 1);
 8002e18:	2201      	movs	r2, #1
 8002e1a:	4932      	ldr	r1, [pc, #200]	; (8002ee4 <sd_init_dynamic_filename+0xd8>)
 8002e1c:	4832      	ldr	r0, [pc, #200]	; (8002ee8 <sd_init_dynamic_filename+0xdc>)
 8002e1e:	f00b fc1b 	bl	800e658 <f_mount>
 8002e22:	4603      	mov	r3, r0
 8002e24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (fres != FR_OK) {
 8002e28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d008      	beq.n	8002e42 <sd_init_dynamic_filename+0x36>
		myprintf("f_mount error (%i)\r\n", fres);
 8002e30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e34:	4619      	mov	r1, r3
 8002e36:	482d      	ldr	r0, [pc, #180]	; (8002eec <sd_init_dynamic_filename+0xe0>)
 8002e38:	f7ff ffd0 	bl	8002ddc <myprintf>
		return fres;
 8002e3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e40:	e04b      	b.n	8002eda <sd_init_dynamic_filename+0xce>
	}

	// scan files on drive to figure out what suffix number is appropriate
	uint32_t max_used_value = 0;
 8002e42:	2300      	movs	r3, #0
 8002e44:	623b      	str	r3, [r7, #32]
	fres = scan_files("", prefix, &max_used_value);
 8002e46:	f107 0320 	add.w	r3, r7, #32
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	68f9      	ldr	r1, [r7, #12]
 8002e4e:	4825      	ldr	r0, [pc, #148]	; (8002ee4 <sd_init_dynamic_filename+0xd8>)
 8002e50:	f000 f89c 	bl	8002f8c <scan_files>
 8002e54:	4603      	mov	r3, r0
 8002e56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// create filename (max filename length in char array is 13 without LFN)
	char filename[13];
	sprintf(filename, "fc%06lu.txt", max_used_value + 1);
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	1c5a      	adds	r2, r3, #1
 8002e5e:	f107 0310 	add.w	r3, r7, #16
 8002e62:	4923      	ldr	r1, [pc, #140]	; (8002ef0 <sd_init_dynamic_filename+0xe4>)
 8002e64:	4618      	mov	r0, r3
 8002e66:	f00d ff07 	bl	8010c78 <siprintf>
	return_filename = strcpy(return_filename, filename); // needed so that other functions can open the file!
 8002e6a:	f107 0310 	add.w	r3, r7, #16
 8002e6e:	4619      	mov	r1, r3
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f00d ff92 	bl	8010d9a <strcpy>
 8002e76:	6078      	str	r0, [r7, #4]

	// open file (create file) on SD card
	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8002e78:	f107 0310 	add.w	r3, r7, #16
 8002e7c:	221a      	movs	r2, #26
 8002e7e:	4619      	mov	r1, r3
 8002e80:	481c      	ldr	r0, [pc, #112]	; (8002ef4 <sd_init_dynamic_filename+0xe8>)
 8002e82:	f00b fc2f 	bl	800e6e4 <f_open>
 8002e86:	4603      	mov	r3, r0
 8002e88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (fres == FR_OK) {
 8002e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d11a      	bne.n	8002eca <sd_init_dynamic_filename+0xbe>
		myprintf("I was able to open filename.txt for writing\r\n");
 8002e94:	4818      	ldr	r0, [pc, #96]	; (8002ef8 <sd_init_dynamic_filename+0xec>)
 8002e96:	f7ff ffa1 	bl	8002ddc <myprintf>
	} else {
		myprintf("f_open error (%i)\r\n", fres);
		return fres;
	}
	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8002e9a:	4b16      	ldr	r3, [pc, #88]	; (8002ef4 <sd_init_dynamic_filename+0xe8>)
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4814      	ldr	r0, [pc, #80]	; (8002ef4 <sd_init_dynamic_filename+0xe8>)
 8002ea2:	f00b fffa 	bl	800ee9a <f_lseek>

	// save indicate start of new log session
	sprintf((char *)msg_buffer, "--- new logging session! ---\r\n");
 8002ea6:	4915      	ldr	r1, [pc, #84]	; (8002efc <sd_init_dynamic_filename+0xf0>)
 8002ea8:	4815      	ldr	r0, [pc, #84]	; (8002f00 <sd_init_dynamic_filename+0xf4>)
 8002eaa:	f00d fee5 	bl	8010c78 <siprintf>
	sd_write(&fil, msg_buffer);
 8002eae:	4914      	ldr	r1, [pc, #80]	; (8002f00 <sd_init_dynamic_filename+0xf4>)
 8002eb0:	4810      	ldr	r0, [pc, #64]	; (8002ef4 <sd_init_dynamic_filename+0xe8>)
 8002eb2:	f000 f841 	bl	8002f38 <sd_write>

	// save header row to indicate what the data is
	sd_write(&fil, (uint8_t *)header_text);
 8002eb6:	68b9      	ldr	r1, [r7, #8]
 8002eb8:	480e      	ldr	r0, [pc, #56]	; (8002ef4 <sd_init_dynamic_filename+0xe8>)
 8002eba:	f000 f83d 	bl	8002f38 <sd_write>
	f_close(&fil);
 8002ebe:	480d      	ldr	r0, [pc, #52]	; (8002ef4 <sd_init_dynamic_filename+0xe8>)
 8002ec0:	f00b ffc1 	bl	800ee46 <f_close>

	return fres;
 8002ec4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ec8:	e007      	b.n	8002eda <sd_init_dynamic_filename+0xce>
		myprintf("f_open error (%i)\r\n", fres);
 8002eca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ece:	4619      	mov	r1, r3
 8002ed0:	480c      	ldr	r0, [pc, #48]	; (8002f04 <sd_init_dynamic_filename+0xf8>)
 8002ed2:	f7ff ff83 	bl	8002ddc <myprintf>
		return fres;
 8002ed6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3728      	adds	r7, #40	; 0x28
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	080152d8 	.word	0x080152d8
 8002ee8:	20000d38 	.word	0x20000d38
 8002eec:	080152dc 	.word	0x080152dc
 8002ef0:	08015358 	.word	0x08015358
 8002ef4:	20001300 	.word	0x20001300
 8002ef8:	080152f4 	.word	0x080152f4
 8002efc:	08015338 	.word	0x08015338
 8002f00:	20001530 	.word	0x20001530
 8002f04:	08015324 	.word	0x08015324

08002f08 <sd_open_file>:

/*
 * always open in mode FA_WRITE | FA_OPEN_ALWAYS and then appends.
 */
FRESULT sd_open_file(char *filename)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
	// write start to SD card
	FRESULT fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS);
 8002f10:	2212      	movs	r2, #18
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	4807      	ldr	r0, [pc, #28]	; (8002f34 <sd_open_file+0x2c>)
 8002f16:	f00b fbe5 	bl	800e6e4 <f_open>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	73fb      	strb	r3, [r7, #15]

	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8002f1e:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <sd_open_file+0x2c>)
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	4619      	mov	r1, r3
 8002f24:	4803      	ldr	r0, [pc, #12]	; (8002f34 <sd_open_file+0x2c>)
 8002f26:	f00b ffb8 	bl	800ee9a <f_lseek>

	return fres;
 8002f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	20001300 	.word	0x20001300

08002f38 <sd_write>:
 * @brief  write buffer to file on sd card.
 * @param  fp 		file to save to
 * @param  buffer	data to write to file
 */
int8_t sd_write(FIL* fp, uint8_t* buffer)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
	UINT bytesWrote;
	FRESULT fres = f_write(fp, buffer, strlen((char const *)buffer), &bytesWrote);
 8002f42:	6838      	ldr	r0, [r7, #0]
 8002f44:	f7fd f954 	bl	80001f0 <strlen>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	f107 0308 	add.w	r3, r7, #8
 8002f4e:	6839      	ldr	r1, [r7, #0]
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f00b fd85 	bl	800ea60 <f_write>
 8002f56:	4603      	mov	r3, r0
 8002f58:	73fb      	strb	r3, [r7, #15]
	if (fres == FR_OK) {
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d107      	bne.n	8002f70 <sd_write+0x38>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	4619      	mov	r1, r3
 8002f64:	4807      	ldr	r0, [pc, #28]	; (8002f84 <sd_write+0x4c>)
 8002f66:	f7ff ff39 	bl	8002ddc <myprintf>
		return bytesWrote;
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	b25b      	sxtb	r3, r3
 8002f6e:	e004      	b.n	8002f7a <sd_write+0x42>
	} else {
		myprintf("f_write error (%i)\r\n");
 8002f70:	4805      	ldr	r0, [pc, #20]	; (8002f88 <sd_write+0x50>)
 8002f72:	f7ff ff33 	bl	8002ddc <myprintf>
		return -1;
 8002f76:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	08015364 	.word	0x08015364
 8002f88:	08015388 	.word	0x08015388

08002f8c <scan_files>:
FRESULT scan_files (
    char* path,        /* Start node to be scanned (***also used as work area***) */
	char* prefix,	   /* prefix in the filename for our datafiles */
	uint32_t* max_used_value
)
{
 8002f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f8e:	b099      	sub	sp, #100	; 0x64
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
 8002f98:	466b      	mov	r3, sp
 8002f9a:	461d      	mov	r5, r3
    DIR dir;
//    UINT i;
    static FILINFO fno;

    // does not change so make it static
    uint8_t len_prefix = strlen(prefix);
 8002f9c:	68b8      	ldr	r0, [r7, #8]
 8002f9e:	f7fd f927 	bl	80001f0 <strlen>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    char prefix_upper[len_prefix];
 8002fa8:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 8002fac:	4623      	mov	r3, r4
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	65bb      	str	r3, [r7, #88]	; 0x58
 8002fb2:	b2e0      	uxtb	r0, r4
 8002fb4:	f04f 0100 	mov.w	r1, #0
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	f04f 0300 	mov.w	r3, #0
 8002fc0:	00cb      	lsls	r3, r1, #3
 8002fc2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002fc6:	00c2      	lsls	r2, r0, #3
 8002fc8:	b2e0      	uxtb	r0, r4
 8002fca:	f04f 0100 	mov.w	r1, #0
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	00cb      	lsls	r3, r1, #3
 8002fd8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002fdc:	00c2      	lsls	r2, r0, #3
 8002fde:	4623      	mov	r3, r4
 8002fe0:	3307      	adds	r3, #7
 8002fe2:	08db      	lsrs	r3, r3, #3
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	ebad 0d03 	sub.w	sp, sp, r3
 8002fea:	466b      	mov	r3, sp
 8002fec:	3300      	adds	r3, #0
 8002fee:	657b      	str	r3, [r7, #84]	; 0x54
	str2upper(prefix, prefix_upper);
 8002ff0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	68b8      	ldr	r0, [r7, #8]
 8002ff6:	f000 f8ff 	bl	80031f8 <str2upper>

	*max_used_value = 0; // initialize to known minimum value
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]
	uint32_t num_files_fc = 0; // suffix on the files containing fc data already on sd card
 8003000:	2300      	movs	r3, #0
 8003002:	617b      	str	r3, [r7, #20]

    res = f_opendir(&dir, path);                       /* Open the directory */
 8003004:	f107 0318 	add.w	r3, r7, #24
 8003008:	68f9      	ldr	r1, [r7, #12]
 800300a:	4618      	mov	r0, r3
 800300c:	f00c f94e 	bl	800f2ac <f_opendir>
 8003010:	4603      	mov	r3, r0
 8003012:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (res == FR_OK) {
 8003016:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800301a:	2b00      	cmp	r3, #0
 800301c:	d16c      	bne.n	80030f8 <scan_files+0x16c>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 800301e:	f107 0318 	add.w	r3, r7, #24
 8003022:	4939      	ldr	r1, [pc, #228]	; (8003108 <scan_files+0x17c>)
 8003024:	4618      	mov	r0, r3
 8003026:	f00c f9da 	bl	800f3de <f_readdir>
 800302a:	4603      	mov	r3, r0
 800302c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8003030:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003034:	2b00      	cmp	r3, #0
 8003036:	d15a      	bne.n	80030ee <scan_files+0x162>
 8003038:	4b33      	ldr	r3, [pc, #204]	; (8003108 <scan_files+0x17c>)
 800303a:	7a5b      	ldrb	r3, [r3, #9]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d056      	beq.n	80030ee <scan_files+0x162>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 8003040:	4b31      	ldr	r3, [pc, #196]	; (8003108 <scan_files+0x17c>)
 8003042:	7a1b      	ldrb	r3, [r3, #8]
 8003044:	f003 0310 	and.w	r3, r3, #16
 8003048:	2b00      	cmp	r3, #0
 800304a:	d14e      	bne.n	80030ea <scan_files+0x15e>
//                i = strlen(path);
//                sprintf(&path[i], "/%s", fno.fname);
//                res = scan_files(path, prefix, max_used_value);    /* Enter the directory */
//                if (res != FR_OK) break;
//                path[i] = 0;
            } else {                                       /* It is a file. */
 800304c:	466b      	mov	r3, sp
 800304e:	461e      	mov	r6, r3
//                printf("%s/%s\n", path, fno.fname);

            	// check if filename contains parts of our standard prefix "FC000000.txt"
            	// but first convert to uppercase to make case insensitive

            	char fname_upper[strlen((char *)fno.fname)];
 8003050:	482e      	ldr	r0, [pc, #184]	; (800310c <scan_files+0x180>)
 8003052:	f7fd f8cd 	bl	80001f0 <strlen>
 8003056:	4604      	mov	r4, r0
 8003058:	4623      	mov	r3, r4
 800305a:	3b01      	subs	r3, #1
 800305c:	653b      	str	r3, [r7, #80]	; 0x50
 800305e:	4620      	mov	r0, r4
 8003060:	f04f 0100 	mov.w	r1, #0
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	00cb      	lsls	r3, r1, #3
 800306e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003072:	00c2      	lsls	r2, r0, #3
 8003074:	4620      	mov	r0, r4
 8003076:	f04f 0100 	mov.w	r1, #0
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	00cb      	lsls	r3, r1, #3
 8003084:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003088:	00c2      	lsls	r2, r0, #3
 800308a:	1de3      	adds	r3, r4, #7
 800308c:	08db      	lsrs	r3, r3, #3
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	ebad 0d03 	sub.w	sp, sp, r3
 8003094:	466b      	mov	r3, sp
 8003096:	3300      	adds	r3, #0
 8003098:	64fb      	str	r3, [r7, #76]	; 0x4c
            	str2upper((char *)fno.fname, fname_upper);
 800309a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800309c:	4619      	mov	r1, r3
 800309e:	481b      	ldr	r0, [pc, #108]	; (800310c <scan_files+0x180>)
 80030a0:	f000 f8aa 	bl	80031f8 <str2upper>

            	int8_t contains_prefix = strncmp(fno.fname, prefix_upper, len_prefix);
 80030a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030a6:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80030aa:	4619      	mov	r1, r3
 80030ac:	4817      	ldr	r0, [pc, #92]	; (800310c <scan_files+0x180>)
 80030ae:	f00d fe7c 	bl	8010daa <strncmp>
 80030b2:	4603      	mov	r3, r0
 80030b4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

            	if (contains_prefix == 0)
 80030b8:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d112      	bne.n	80030e6 <scan_files+0x15a>
            	{
            		// can do error checking with status if desired
            		uint8_t status = extract_filename_suffix(fname_upper, len_prefix, &num_files_fc);
 80030c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030c2:	f107 0214 	add.w	r2, r7, #20
 80030c6:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 f820 	bl	8003110 <extract_filename_suffix>
 80030d0:	4603      	mov	r3, r0
 80030d2:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

            		if (num_files_fc > *max_used_value)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d202      	bcs.n	80030e6 <scan_files+0x15a>
            		{
            			*max_used_value = num_files_fc;
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	46b5      	mov	sp, r6
 80030e8:	e799      	b.n	800301e <scan_files+0x92>
            	continue; // don't enter directory
 80030ea:	bf00      	nop
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 80030ec:	e797      	b.n	800301e <scan_files+0x92>
            		}
            	}
            }
        }

        f_closedir(&dir);
 80030ee:	f107 0318 	add.w	r3, r7, #24
 80030f2:	4618      	mov	r0, r3
 80030f4:	f00c f94d 	bl	800f392 <f_closedir>
    }

    return res;
 80030f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80030fc:	46ad      	mov	sp, r5
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3764      	adds	r7, #100	; 0x64
 8003102:	46bd      	mov	sp, r7
 8003104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003106:	bf00      	nop
 8003108:	200008b4 	.word	0x200008b4
 800310c:	200008bd 	.word	0x200008bd

08003110 <extract_filename_suffix>:
 * which is assumed to be .txt. assumes that filename contains prefix.
 *
 * returns integer indicating success/fail: 0 = success, 1 = fail
 */
uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value)
{
 8003110:	b5b0      	push	{r4, r5, r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	460b      	mov	r3, r1
 800311a:	607a      	str	r2, [r7, #4]
 800311c:	72fb      	strb	r3, [r7, #11]
 800311e:	466b      	mov	r3, sp
 8003120:	461d      	mov	r5, r3
	uint8_t len_filename = strlen(filename);
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f7fd f864 	bl	80001f0 <strlen>
 8003128:	4603      	mov	r3, r0
 800312a:	77bb      	strb	r3, [r7, #30]

	// add characters between prefix and filename extension to buffer
	uint8_t len_buf = 8;
 800312c:	2308      	movs	r3, #8
 800312e:	777b      	strb	r3, [r7, #29]
	char buf[len_buf]; // filenames can't be longer than 8 characters total
 8003130:	7f7c      	ldrb	r4, [r7, #29]
 8003132:	4623      	mov	r3, r4
 8003134:	3b01      	subs	r3, #1
 8003136:	61bb      	str	r3, [r7, #24]
 8003138:	b2e0      	uxtb	r0, r4
 800313a:	f04f 0100 	mov.w	r1, #0
 800313e:	f04f 0200 	mov.w	r2, #0
 8003142:	f04f 0300 	mov.w	r3, #0
 8003146:	00cb      	lsls	r3, r1, #3
 8003148:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800314c:	00c2      	lsls	r2, r0, #3
 800314e:	b2e0      	uxtb	r0, r4
 8003150:	f04f 0100 	mov.w	r1, #0
 8003154:	f04f 0200 	mov.w	r2, #0
 8003158:	f04f 0300 	mov.w	r3, #0
 800315c:	00cb      	lsls	r3, r1, #3
 800315e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003162:	00c2      	lsls	r2, r0, #3
 8003164:	4623      	mov	r3, r4
 8003166:	3307      	adds	r3, #7
 8003168:	08db      	lsrs	r3, r3, #3
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	ebad 0d03 	sub.w	sp, sp, r3
 8003170:	466b      	mov	r3, sp
 8003172:	3300      	adds	r3, #0
 8003174:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len_buf; i++)
 8003176:	2300      	movs	r3, #0
 8003178:	77fb      	strb	r3, [r7, #31]
 800317a:	e014      	b.n	80031a6 <extract_filename_suffix+0x96>
	{
		if (len_prefix - 1 + i < len_filename - 1) // go to end of filename
 800317c:	7afb      	ldrb	r3, [r7, #11]
 800317e:	1e5a      	subs	r2, r3, #1
 8003180:	7ffb      	ldrb	r3, [r7, #31]
 8003182:	441a      	add	r2, r3
 8003184:	7fbb      	ldrb	r3, [r7, #30]
 8003186:	3b01      	subs	r3, #1
 8003188:	429a      	cmp	r2, r3
 800318a:	da11      	bge.n	80031b0 <extract_filename_suffix+0xa0>
		{
			buf[i] = filename[len_prefix + i];
 800318c:	7afa      	ldrb	r2, [r7, #11]
 800318e:	7ffb      	ldrb	r3, [r7, #31]
 8003190:	4413      	add	r3, r2
 8003192:	461a      	mov	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	441a      	add	r2, r3
 8003198:	7ffb      	ldrb	r3, [r7, #31]
 800319a:	7811      	ldrb	r1, [r2, #0]
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len_buf; i++)
 80031a0:	7ffb      	ldrb	r3, [r7, #31]
 80031a2:	3301      	adds	r3, #1
 80031a4:	77fb      	strb	r3, [r7, #31]
 80031a6:	7ffa      	ldrb	r2, [r7, #31]
 80031a8:	7f7b      	ldrb	r3, [r7, #29]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d3e6      	bcc.n	800317c <extract_filename_suffix+0x6c>
 80031ae:	e000      	b.n	80031b2 <extract_filename_suffix+0xa2>
		}
		else break;
 80031b0:	bf00      	nop
	}

	// change chars to integer, strtol will strip out the .txt
	char *ptr;
	*num_value = strtol(buf, &ptr, 10);
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f107 0110 	add.w	r1, r7, #16
 80031b8:	220a      	movs	r2, #10
 80031ba:	4618      	mov	r0, r3
 80031bc:	f00e fcba 	bl	8011b34 <strtol>
 80031c0:	4603      	mov	r3, r0
 80031c2:	461a      	mov	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	601a      	str	r2, [r3, #0]

	if (ptr == buf || *num_value == LONG_MIN || *num_value == LONG_MAX)
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d00a      	beq.n	80031e6 <extract_filename_suffix+0xd6>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031d8:	d005      	beq.n	80031e6 <extract_filename_suffix+0xd6>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d101      	bne.n	80031ea <extract_filename_suffix+0xda>
	{
		return 1;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <extract_filename_suffix+0xdc>
	}

	return 0;
 80031ea:	2300      	movs	r3, #0
 80031ec:	46ad      	mov	sp, r5
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3720      	adds	r7, #32
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080031f8 <str2upper>:
/**
 * assumes that upper has enough characters in the array
 * to store the uppercase version.
 */
void str2upper(char* string, char* upper)
{
 80031f8:	b590      	push	{r4, r7, lr}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 8003202:	2300      	movs	r3, #0
 8003204:	73fb      	strb	r3, [r7, #15]
 8003206:	e019      	b.n	800323c <str2upper+0x44>
	{
		upper[i] = toupper(string[i]);
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	4413      	add	r3, r2
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	73bb      	strb	r3, [r7, #14]
 8003212:	7bbb      	ldrb	r3, [r7, #14]
 8003214:	3301      	adds	r3, #1
 8003216:	4a0f      	ldr	r2, [pc, #60]	; (8003254 <str2upper+0x5c>)
 8003218:	4413      	add	r3, r2
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	f003 0303 	and.w	r3, r3, #3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d102      	bne.n	800322a <str2upper+0x32>
 8003224:	7bbb      	ldrb	r3, [r7, #14]
 8003226:	3b20      	subs	r3, #32
 8003228:	e000      	b.n	800322c <str2upper+0x34>
 800322a:	7bbb      	ldrb	r3, [r7, #14]
 800322c:	7bfa      	ldrb	r2, [r7, #15]
 800322e:	6839      	ldr	r1, [r7, #0]
 8003230:	440a      	add	r2, r1
 8003232:	b2db      	uxtb	r3, r3
 8003234:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 8003236:	7bfb      	ldrb	r3, [r7, #15]
 8003238:	3301      	adds	r3, #1
 800323a:	73fb      	strb	r3, [r7, #15]
 800323c:	7bfc      	ldrb	r4, [r7, #15]
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7fc ffd6 	bl	80001f0 <strlen>
 8003244:	4603      	mov	r3, r0
 8003246:	429c      	cmp	r4, r3
 8003248:	d3de      	bcc.n	8003208 <str2upper+0x10>
	}
}
 800324a:	bf00      	nop
 800324c:	bf00      	nop
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	bd90      	pop	{r4, r7, pc}
 8003254:	080154d0 	.word	0x080154d0

08003258 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800325e:	2300      	movs	r3, #0
 8003260:	607b      	str	r3, [r7, #4]
 8003262:	4b10      	ldr	r3, [pc, #64]	; (80032a4 <HAL_MspInit+0x4c>)
 8003264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003266:	4a0f      	ldr	r2, [pc, #60]	; (80032a4 <HAL_MspInit+0x4c>)
 8003268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800326c:	6453      	str	r3, [r2, #68]	; 0x44
 800326e:	4b0d      	ldr	r3, [pc, #52]	; (80032a4 <HAL_MspInit+0x4c>)
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003276:	607b      	str	r3, [r7, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	603b      	str	r3, [r7, #0]
 800327e:	4b09      	ldr	r3, [pc, #36]	; (80032a4 <HAL_MspInit+0x4c>)
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	4a08      	ldr	r2, [pc, #32]	; (80032a4 <HAL_MspInit+0x4c>)
 8003284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003288:	6413      	str	r3, [r2, #64]	; 0x40
 800328a:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <HAL_MspInit+0x4c>)
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003292:	603b      	str	r3, [r7, #0]
 8003294:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	40023800 	.word	0x40023800

080032a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08a      	sub	sp, #40	; 0x28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b0:	f107 0314 	add.w	r3, r7, #20
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	605a      	str	r2, [r3, #4]
 80032ba:	609a      	str	r2, [r3, #8]
 80032bc:	60da      	str	r2, [r3, #12]
 80032be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a17      	ldr	r2, [pc, #92]	; (8003324 <HAL_ADC_MspInit+0x7c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d127      	bne.n	800331a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80032ca:	2300      	movs	r3, #0
 80032cc:	613b      	str	r3, [r7, #16]
 80032ce:	4b16      	ldr	r3, [pc, #88]	; (8003328 <HAL_ADC_MspInit+0x80>)
 80032d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d2:	4a15      	ldr	r2, [pc, #84]	; (8003328 <HAL_ADC_MspInit+0x80>)
 80032d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d8:	6453      	str	r3, [r2, #68]	; 0x44
 80032da:	4b13      	ldr	r3, [pc, #76]	; (8003328 <HAL_ADC_MspInit+0x80>)
 80032dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e2:	613b      	str	r3, [r7, #16]
 80032e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	4b0f      	ldr	r3, [pc, #60]	; (8003328 <HAL_ADC_MspInit+0x80>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ee:	4a0e      	ldr	r2, [pc, #56]	; (8003328 <HAL_ADC_MspInit+0x80>)
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	6313      	str	r3, [r2, #48]	; 0x30
 80032f6:	4b0c      	ldr	r3, [pc, #48]	; (8003328 <HAL_ADC_MspInit+0x80>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003302:	2340      	movs	r3, #64	; 0x40
 8003304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003306:	2303      	movs	r3, #3
 8003308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330a:	2300      	movs	r3, #0
 800330c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800330e:	f107 0314 	add.w	r3, r7, #20
 8003312:	4619      	mov	r1, r3
 8003314:	4805      	ldr	r0, [pc, #20]	; (800332c <HAL_ADC_MspInit+0x84>)
 8003316:	f000 ff69 	bl	80041ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800331a:	bf00      	nop
 800331c:	3728      	adds	r7, #40	; 0x28
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	40012000 	.word	0x40012000
 8003328:	40023800 	.word	0x40023800
 800332c:	40020000 	.word	0x40020000

08003330 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08c      	sub	sp, #48	; 0x30
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003338:	f107 031c 	add.w	r3, r7, #28
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	605a      	str	r2, [r3, #4]
 8003342:	609a      	str	r2, [r3, #8]
 8003344:	60da      	str	r2, [r3, #12]
 8003346:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a42      	ldr	r2, [pc, #264]	; (8003458 <HAL_I2C_MspInit+0x128>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d12d      	bne.n	80033ae <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	61bb      	str	r3, [r7, #24]
 8003356:	4b41      	ldr	r3, [pc, #260]	; (800345c <HAL_I2C_MspInit+0x12c>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	4a40      	ldr	r2, [pc, #256]	; (800345c <HAL_I2C_MspInit+0x12c>)
 800335c:	f043 0302 	orr.w	r3, r3, #2
 8003360:	6313      	str	r3, [r2, #48]	; 0x30
 8003362:	4b3e      	ldr	r3, [pc, #248]	; (800345c <HAL_I2C_MspInit+0x12c>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	61bb      	str	r3, [r7, #24]
 800336c:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800336e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003374:	2312      	movs	r3, #18
 8003376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003378:	2300      	movs	r3, #0
 800337a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800337c:	2303      	movs	r3, #3
 800337e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003380:	2304      	movs	r3, #4
 8003382:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003384:	f107 031c 	add.w	r3, r7, #28
 8003388:	4619      	mov	r1, r3
 800338a:	4835      	ldr	r0, [pc, #212]	; (8003460 <HAL_I2C_MspInit+0x130>)
 800338c:	f000 ff2e 	bl	80041ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003390:	2300      	movs	r3, #0
 8003392:	617b      	str	r3, [r7, #20]
 8003394:	4b31      	ldr	r3, [pc, #196]	; (800345c <HAL_I2C_MspInit+0x12c>)
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	4a30      	ldr	r2, [pc, #192]	; (800345c <HAL_I2C_MspInit+0x12c>)
 800339a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800339e:	6413      	str	r3, [r2, #64]	; 0x40
 80033a0:	4b2e      	ldr	r3, [pc, #184]	; (800345c <HAL_I2C_MspInit+0x12c>)
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033a8:	617b      	str	r3, [r7, #20]
 80033aa:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80033ac:	e050      	b.n	8003450 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a2c      	ldr	r2, [pc, #176]	; (8003464 <HAL_I2C_MspInit+0x134>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d14b      	bne.n	8003450 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033b8:	2300      	movs	r3, #0
 80033ba:	613b      	str	r3, [r7, #16]
 80033bc:	4b27      	ldr	r3, [pc, #156]	; (800345c <HAL_I2C_MspInit+0x12c>)
 80033be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c0:	4a26      	ldr	r2, [pc, #152]	; (800345c <HAL_I2C_MspInit+0x12c>)
 80033c2:	f043 0304 	orr.w	r3, r3, #4
 80033c6:	6313      	str	r3, [r2, #48]	; 0x30
 80033c8:	4b24      	ldr	r3, [pc, #144]	; (800345c <HAL_I2C_MspInit+0x12c>)
 80033ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	613b      	str	r3, [r7, #16]
 80033d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033d4:	2300      	movs	r3, #0
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	4b20      	ldr	r3, [pc, #128]	; (800345c <HAL_I2C_MspInit+0x12c>)
 80033da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033dc:	4a1f      	ldr	r2, [pc, #124]	; (800345c <HAL_I2C_MspInit+0x12c>)
 80033de:	f043 0301 	orr.w	r3, r3, #1
 80033e2:	6313      	str	r3, [r2, #48]	; 0x30
 80033e4:	4b1d      	ldr	r3, [pc, #116]	; (800345c <HAL_I2C_MspInit+0x12c>)
 80033e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80033f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033f6:	2312      	movs	r3, #18
 80033f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033fe:	2303      	movs	r3, #3
 8003400:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003402:	2304      	movs	r3, #4
 8003404:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003406:	f107 031c 	add.w	r3, r7, #28
 800340a:	4619      	mov	r1, r3
 800340c:	4816      	ldr	r0, [pc, #88]	; (8003468 <HAL_I2C_MspInit+0x138>)
 800340e:	f000 feed 	bl	80041ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003412:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003418:	2312      	movs	r3, #18
 800341a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341c:	2300      	movs	r3, #0
 800341e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003420:	2303      	movs	r3, #3
 8003422:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003424:	2304      	movs	r3, #4
 8003426:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003428:	f107 031c 	add.w	r3, r7, #28
 800342c:	4619      	mov	r1, r3
 800342e:	480f      	ldr	r0, [pc, #60]	; (800346c <HAL_I2C_MspInit+0x13c>)
 8003430:	f000 fedc 	bl	80041ec <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003434:	2300      	movs	r3, #0
 8003436:	60bb      	str	r3, [r7, #8]
 8003438:	4b08      	ldr	r3, [pc, #32]	; (800345c <HAL_I2C_MspInit+0x12c>)
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	4a07      	ldr	r2, [pc, #28]	; (800345c <HAL_I2C_MspInit+0x12c>)
 800343e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003442:	6413      	str	r3, [r2, #64]	; 0x40
 8003444:	4b05      	ldr	r3, [pc, #20]	; (800345c <HAL_I2C_MspInit+0x12c>)
 8003446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003448:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800344c:	60bb      	str	r3, [r7, #8]
 800344e:	68bb      	ldr	r3, [r7, #8]
}
 8003450:	bf00      	nop
 8003452:	3730      	adds	r7, #48	; 0x30
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40005800 	.word	0x40005800
 800345c:	40023800 	.word	0x40023800
 8003460:	40020400 	.word	0x40020400
 8003464:	40005c00 	.word	0x40005c00
 8003468:	40020800 	.word	0x40020800
 800346c:	40020000 	.word	0x40020000

08003470 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08c      	sub	sp, #48	; 0x30
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003478:	f107 031c 	add.w	r3, r7, #28
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	60da      	str	r2, [r3, #12]
 8003486:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a33      	ldr	r2, [pc, #204]	; (800355c <HAL_SPI_MspInit+0xec>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d12d      	bne.n	80034ee <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003492:	2300      	movs	r3, #0
 8003494:	61bb      	str	r3, [r7, #24]
 8003496:	4b32      	ldr	r3, [pc, #200]	; (8003560 <HAL_SPI_MspInit+0xf0>)
 8003498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349a:	4a31      	ldr	r2, [pc, #196]	; (8003560 <HAL_SPI_MspInit+0xf0>)
 800349c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80034a0:	6453      	str	r3, [r2, #68]	; 0x44
 80034a2:	4b2f      	ldr	r3, [pc, #188]	; (8003560 <HAL_SPI_MspInit+0xf0>)
 80034a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034aa:	61bb      	str	r3, [r7, #24]
 80034ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]
 80034b2:	4b2b      	ldr	r3, [pc, #172]	; (8003560 <HAL_SPI_MspInit+0xf0>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	4a2a      	ldr	r2, [pc, #168]	; (8003560 <HAL_SPI_MspInit+0xf0>)
 80034b8:	f043 0310 	orr.w	r3, r3, #16
 80034bc:	6313      	str	r3, [r2, #48]	; 0x30
 80034be:	4b28      	ldr	r3, [pc, #160]	; (8003560 <HAL_SPI_MspInit+0xf0>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c2:	f003 0310 	and.w	r3, r3, #16
 80034c6:	617b      	str	r3, [r7, #20]
 80034c8:	697b      	ldr	r3, [r7, #20]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80034ca:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80034ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d0:	2302      	movs	r3, #2
 80034d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d8:	2303      	movs	r3, #3
 80034da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80034dc:	2305      	movs	r3, #5
 80034de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034e0:	f107 031c 	add.w	r3, r7, #28
 80034e4:	4619      	mov	r1, r3
 80034e6:	481f      	ldr	r0, [pc, #124]	; (8003564 <HAL_SPI_MspInit+0xf4>)
 80034e8:	f000 fe80 	bl	80041ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80034ec:	e031      	b.n	8003552 <HAL_SPI_MspInit+0xe2>
  else if(hspi->Instance==SPI5)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a1d      	ldr	r2, [pc, #116]	; (8003568 <HAL_SPI_MspInit+0xf8>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d12c      	bne.n	8003552 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80034f8:	2300      	movs	r3, #0
 80034fa:	613b      	str	r3, [r7, #16]
 80034fc:	4b18      	ldr	r3, [pc, #96]	; (8003560 <HAL_SPI_MspInit+0xf0>)
 80034fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003500:	4a17      	ldr	r2, [pc, #92]	; (8003560 <HAL_SPI_MspInit+0xf0>)
 8003502:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003506:	6453      	str	r3, [r2, #68]	; 0x44
 8003508:	4b15      	ldr	r3, [pc, #84]	; (8003560 <HAL_SPI_MspInit+0xf0>)
 800350a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003510:	613b      	str	r3, [r7, #16]
 8003512:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003514:	2300      	movs	r3, #0
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	4b11      	ldr	r3, [pc, #68]	; (8003560 <HAL_SPI_MspInit+0xf0>)
 800351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351c:	4a10      	ldr	r2, [pc, #64]	; (8003560 <HAL_SPI_MspInit+0xf0>)
 800351e:	f043 0320 	orr.w	r3, r3, #32
 8003522:	6313      	str	r3, [r2, #48]	; 0x30
 8003524:	4b0e      	ldr	r3, [pc, #56]	; (8003560 <HAL_SPI_MspInit+0xf0>)
 8003526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003528:	f003 0320 	and.w	r3, r3, #32
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003530:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003536:	2302      	movs	r3, #2
 8003538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800353a:	2301      	movs	r3, #1
 800353c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800353e:	2303      	movs	r3, #3
 8003540:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003542:	2305      	movs	r3, #5
 8003544:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003546:	f107 031c 	add.w	r3, r7, #28
 800354a:	4619      	mov	r1, r3
 800354c:	4807      	ldr	r0, [pc, #28]	; (800356c <HAL_SPI_MspInit+0xfc>)
 800354e:	f000 fe4d 	bl	80041ec <HAL_GPIO_Init>
}
 8003552:	bf00      	nop
 8003554:	3730      	adds	r7, #48	; 0x30
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40013400 	.word	0x40013400
 8003560:	40023800 	.word	0x40023800
 8003564:	40021000 	.word	0x40021000
 8003568:	40015000 	.word	0x40015000
 800356c:	40021400 	.word	0x40021400

08003570 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003580:	d115      	bne.n	80035ae <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003582:	2300      	movs	r3, #0
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	4b0c      	ldr	r3, [pc, #48]	; (80035b8 <HAL_TIM_Base_MspInit+0x48>)
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	4a0b      	ldr	r2, [pc, #44]	; (80035b8 <HAL_TIM_Base_MspInit+0x48>)
 800358c:	f043 0301 	orr.w	r3, r3, #1
 8003590:	6413      	str	r3, [r2, #64]	; 0x40
 8003592:	4b09      	ldr	r3, [pc, #36]	; (80035b8 <HAL_TIM_Base_MspInit+0x48>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800359e:	2200      	movs	r2, #0
 80035a0:	2100      	movs	r1, #0
 80035a2:	201c      	movs	r0, #28
 80035a4:	f000 fdeb 	bl	800417e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80035a8:	201c      	movs	r0, #28
 80035aa:	f000 fe04 	bl	80041b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80035ae:	bf00      	nop
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	40023800 	.word	0x40023800

080035bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b088      	sub	sp, #32
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c4:	f107 030c 	add.w	r3, r7, #12
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	605a      	str	r2, [r3, #4]
 80035ce:	609a      	str	r2, [r3, #8]
 80035d0:	60da      	str	r2, [r3, #12]
 80035d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035dc:	d11d      	bne.n	800361a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035de:	2300      	movs	r3, #0
 80035e0:	60bb      	str	r3, [r7, #8]
 80035e2:	4b10      	ldr	r3, [pc, #64]	; (8003624 <HAL_TIM_MspPostInit+0x68>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	4a0f      	ldr	r2, [pc, #60]	; (8003624 <HAL_TIM_MspPostInit+0x68>)
 80035e8:	f043 0301 	orr.w	r3, r3, #1
 80035ec:	6313      	str	r3, [r2, #48]	; 0x30
 80035ee:	4b0d      	ldr	r3, [pc, #52]	; (8003624 <HAL_TIM_MspPostInit+0x68>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	60bb      	str	r3, [r7, #8]
 80035f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80035fa:	2304      	movs	r3, #4
 80035fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fe:	2302      	movs	r3, #2
 8003600:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003602:	2300      	movs	r3, #0
 8003604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003606:	2300      	movs	r3, #0
 8003608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800360a:	2301      	movs	r3, #1
 800360c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800360e:	f107 030c 	add.w	r3, r7, #12
 8003612:	4619      	mov	r1, r3
 8003614:	4804      	ldr	r0, [pc, #16]	; (8003628 <HAL_TIM_MspPostInit+0x6c>)
 8003616:	f000 fde9 	bl	80041ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800361a:	bf00      	nop
 800361c:	3720      	adds	r7, #32
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	40023800 	.word	0x40023800
 8003628:	40020000 	.word	0x40020000

0800362c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b08c      	sub	sp, #48	; 0x30
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003634:	f107 031c 	add.w	r3, r7, #28
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	605a      	str	r2, [r3, #4]
 800363e:	609a      	str	r2, [r3, #8]
 8003640:	60da      	str	r2, [r3, #12]
 8003642:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a32      	ldr	r2, [pc, #200]	; (8003714 <HAL_UART_MspInit+0xe8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d12d      	bne.n	80036aa <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800364e:	2300      	movs	r3, #0
 8003650:	61bb      	str	r3, [r7, #24]
 8003652:	4b31      	ldr	r3, [pc, #196]	; (8003718 <HAL_UART_MspInit+0xec>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	4a30      	ldr	r2, [pc, #192]	; (8003718 <HAL_UART_MspInit+0xec>)
 8003658:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800365c:	6413      	str	r3, [r2, #64]	; 0x40
 800365e:	4b2e      	ldr	r3, [pc, #184]	; (8003718 <HAL_UART_MspInit+0xec>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003666:	61bb      	str	r3, [r7, #24]
 8003668:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800366a:	2300      	movs	r3, #0
 800366c:	617b      	str	r3, [r7, #20]
 800366e:	4b2a      	ldr	r3, [pc, #168]	; (8003718 <HAL_UART_MspInit+0xec>)
 8003670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003672:	4a29      	ldr	r2, [pc, #164]	; (8003718 <HAL_UART_MspInit+0xec>)
 8003674:	f043 0308 	orr.w	r3, r3, #8
 8003678:	6313      	str	r3, [r2, #48]	; 0x30
 800367a:	4b27      	ldr	r3, [pc, #156]	; (8003718 <HAL_UART_MspInit+0xec>)
 800367c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003686:	f44f 7340 	mov.w	r3, #768	; 0x300
 800368a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368c:	2302      	movs	r3, #2
 800368e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003690:	2300      	movs	r3, #0
 8003692:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003694:	2303      	movs	r3, #3
 8003696:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003698:	2307      	movs	r3, #7
 800369a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800369c:	f107 031c 	add.w	r3, r7, #28
 80036a0:	4619      	mov	r1, r3
 80036a2:	481e      	ldr	r0, [pc, #120]	; (800371c <HAL_UART_MspInit+0xf0>)
 80036a4:	f000 fda2 	bl	80041ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80036a8:	e030      	b.n	800370c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART6)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a1c      	ldr	r2, [pc, #112]	; (8003720 <HAL_UART_MspInit+0xf4>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d12b      	bne.n	800370c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 80036b4:	2300      	movs	r3, #0
 80036b6:	613b      	str	r3, [r7, #16]
 80036b8:	4b17      	ldr	r3, [pc, #92]	; (8003718 <HAL_UART_MspInit+0xec>)
 80036ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036bc:	4a16      	ldr	r2, [pc, #88]	; (8003718 <HAL_UART_MspInit+0xec>)
 80036be:	f043 0320 	orr.w	r3, r3, #32
 80036c2:	6453      	str	r3, [r2, #68]	; 0x44
 80036c4:	4b14      	ldr	r3, [pc, #80]	; (8003718 <HAL_UART_MspInit+0xec>)
 80036c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c8:	f003 0320 	and.w	r3, r3, #32
 80036cc:	613b      	str	r3, [r7, #16]
 80036ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036d0:	2300      	movs	r3, #0
 80036d2:	60fb      	str	r3, [r7, #12]
 80036d4:	4b10      	ldr	r3, [pc, #64]	; (8003718 <HAL_UART_MspInit+0xec>)
 80036d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d8:	4a0f      	ldr	r2, [pc, #60]	; (8003718 <HAL_UART_MspInit+0xec>)
 80036da:	f043 0304 	orr.w	r3, r3, #4
 80036de:	6313      	str	r3, [r2, #48]	; 0x30
 80036e0:	4b0d      	ldr	r3, [pc, #52]	; (8003718 <HAL_UART_MspInit+0xec>)
 80036e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80036ec:	23c0      	movs	r3, #192	; 0xc0
 80036ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f0:	2302      	movs	r3, #2
 80036f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f4:	2300      	movs	r3, #0
 80036f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036f8:	2303      	movs	r3, #3
 80036fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80036fc:	2308      	movs	r3, #8
 80036fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003700:	f107 031c 	add.w	r3, r7, #28
 8003704:	4619      	mov	r1, r3
 8003706:	4807      	ldr	r0, [pc, #28]	; (8003724 <HAL_UART_MspInit+0xf8>)
 8003708:	f000 fd70 	bl	80041ec <HAL_GPIO_Init>
}
 800370c:	bf00      	nop
 800370e:	3730      	adds	r7, #48	; 0x30
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40004800 	.word	0x40004800
 8003718:	40023800 	.word	0x40023800
 800371c:	40020c00 	.word	0x40020c00
 8003720:	40011400 	.word	0x40011400
 8003724:	40020800 	.word	0x40020800

08003728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800372c:	e7fe      	b.n	800372c <NMI_Handler+0x4>

0800372e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800372e:	b480      	push	{r7}
 8003730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003732:	e7fe      	b.n	8003732 <HardFault_Handler+0x4>

08003734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003738:	e7fe      	b.n	8003738 <MemManage_Handler+0x4>

0800373a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800373a:	b480      	push	{r7}
 800373c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800373e:	e7fe      	b.n	800373e <BusFault_Handler+0x4>

08003740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003744:	e7fe      	b.n	8003744 <UsageFault_Handler+0x4>

08003746 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003746:	b480      	push	{r7}
 8003748:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800374a:	bf00      	nop
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003758:	bf00      	nop
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003762:	b480      	push	{r7}
 8003764:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003766:	bf00      	nop
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003774:	f000 f972 	bl	8003a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003778:	bf00      	nop
 800377a:	bd80      	pop	{r7, pc}

0800377c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003780:	2001      	movs	r0, #1
 8003782:	f000 ff13 	bl	80045ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003786:	bf00      	nop
 8003788:	bd80      	pop	{r7, pc}
	...

0800378c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003790:	4802      	ldr	r0, [pc, #8]	; (800379c <TIM2_IRQHandler+0x10>)
 8003792:	f004 fa29 	bl	8007be8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003796:	bf00      	nop
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	2000129c 	.word	0x2000129c

080037a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80037a4:	4802      	ldr	r0, [pc, #8]	; (80037b0 <OTG_FS_IRQHandler+0x10>)
 80037a6:	f002 f8a3 	bl	80058f0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80037aa:	bf00      	nop
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	2000325c 	.word	0x2000325c

080037b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
	return 1;
 80037b8:	2301      	movs	r3, #1
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <_kill>:

int _kill(int pid, int sig)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80037ce:	f00c fba1 	bl	800ff14 <__errno>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2216      	movs	r2, #22
 80037d6:	601a      	str	r2, [r3, #0]
	return -1;
 80037d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <_exit>:

void _exit (int status)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80037ec:	f04f 31ff 	mov.w	r1, #4294967295
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7ff ffe7 	bl	80037c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80037f6:	e7fe      	b.n	80037f6 <_exit+0x12>

080037f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003804:	2300      	movs	r3, #0
 8003806:	617b      	str	r3, [r7, #20]
 8003808:	e00a      	b.n	8003820 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800380a:	f3af 8000 	nop.w
 800380e:	4601      	mov	r1, r0
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	1c5a      	adds	r2, r3, #1
 8003814:	60ba      	str	r2, [r7, #8]
 8003816:	b2ca      	uxtb	r2, r1
 8003818:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	3301      	adds	r3, #1
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	429a      	cmp	r2, r3
 8003826:	dbf0      	blt.n	800380a <_read+0x12>
	}

return len;
 8003828:	687b      	ldr	r3, [r7, #4]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b086      	sub	sp, #24
 8003836:	af00      	add	r7, sp, #0
 8003838:	60f8      	str	r0, [r7, #12]
 800383a:	60b9      	str	r1, [r7, #8]
 800383c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800383e:	2300      	movs	r3, #0
 8003840:	617b      	str	r3, [r7, #20]
 8003842:	e009      	b.n	8003858 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	1c5a      	adds	r2, r3, #1
 8003848:	60ba      	str	r2, [r7, #8]
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	4618      	mov	r0, r3
 800384e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	3301      	adds	r3, #1
 8003856:	617b      	str	r3, [r7, #20]
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	429a      	cmp	r2, r3
 800385e:	dbf1      	blt.n	8003844 <_write+0x12>
	}
	return len;
 8003860:	687b      	ldr	r3, [r7, #4]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <_close>:

int _close(int file)
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
	return -1;
 8003872:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003876:	4618      	mov	r0, r3
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
 800388a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003892:	605a      	str	r2, [r3, #4]
	return 0;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <_isatty>:

int _isatty(int file)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
	return 1;
 80038aa:	2301      	movs	r3, #1
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
	return 0;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
	...

080038d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038dc:	4a14      	ldr	r2, [pc, #80]	; (8003930 <_sbrk+0x5c>)
 80038de:	4b15      	ldr	r3, [pc, #84]	; (8003934 <_sbrk+0x60>)
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038e8:	4b13      	ldr	r3, [pc, #76]	; (8003938 <_sbrk+0x64>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d102      	bne.n	80038f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038f0:	4b11      	ldr	r3, [pc, #68]	; (8003938 <_sbrk+0x64>)
 80038f2:	4a12      	ldr	r2, [pc, #72]	; (800393c <_sbrk+0x68>)
 80038f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038f6:	4b10      	ldr	r3, [pc, #64]	; (8003938 <_sbrk+0x64>)
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4413      	add	r3, r2
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	429a      	cmp	r2, r3
 8003902:	d207      	bcs.n	8003914 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003904:	f00c fb06 	bl	800ff14 <__errno>
 8003908:	4603      	mov	r3, r0
 800390a:	220c      	movs	r2, #12
 800390c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800390e:	f04f 33ff 	mov.w	r3, #4294967295
 8003912:	e009      	b.n	8003928 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003914:	4b08      	ldr	r3, [pc, #32]	; (8003938 <_sbrk+0x64>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800391a:	4b07      	ldr	r3, [pc, #28]	; (8003938 <_sbrk+0x64>)
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4413      	add	r3, r2
 8003922:	4a05      	ldr	r2, [pc, #20]	; (8003938 <_sbrk+0x64>)
 8003924:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003926:	68fb      	ldr	r3, [r7, #12]
}
 8003928:	4618      	mov	r0, r3
 800392a:	3718      	adds	r7, #24
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	20030000 	.word	0x20030000
 8003934:	00000400 	.word	0x00000400
 8003938:	200008cc 	.word	0x200008cc
 800393c:	20003678 	.word	0x20003678

08003940 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003944:	4b06      	ldr	r3, [pc, #24]	; (8003960 <SystemInit+0x20>)
 8003946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394a:	4a05      	ldr	r2, [pc, #20]	; (8003960 <SystemInit+0x20>)
 800394c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003950:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003954:	bf00      	nop
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	e000ed00 	.word	0xe000ed00

08003964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003964:	f8df d034 	ldr.w	sp, [pc, #52]	; 800399c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003968:	480d      	ldr	r0, [pc, #52]	; (80039a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800396a:	490e      	ldr	r1, [pc, #56]	; (80039a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800396c:	4a0e      	ldr	r2, [pc, #56]	; (80039a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800396e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003970:	e002      	b.n	8003978 <LoopCopyDataInit>

08003972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003976:	3304      	adds	r3, #4

08003978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800397a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800397c:	d3f9      	bcc.n	8003972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800397e:	4a0b      	ldr	r2, [pc, #44]	; (80039ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003980:	4c0b      	ldr	r4, [pc, #44]	; (80039b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003984:	e001      	b.n	800398a <LoopFillZerobss>

08003986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003988:	3204      	adds	r2, #4

0800398a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800398a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800398c:	d3fb      	bcc.n	8003986 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800398e:	f7ff ffd7 	bl	8003940 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003992:	f00c fac5 	bl	800ff20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003996:	f7fe fc6d 	bl	8002274 <main>
  bx  lr    
 800399a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800399c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80039a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039a4:	2000036c 	.word	0x2000036c
  ldr r2, =_sidata
 80039a8:	080159ac 	.word	0x080159ac
  ldr r2, =_sbss
 80039ac:	2000036c 	.word	0x2000036c
  ldr r4, =_ebss
 80039b0:	20003674 	.word	0x20003674

080039b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039b4:	e7fe      	b.n	80039b4 <ADC_IRQHandler>
	...

080039b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039bc:	4b0e      	ldr	r3, [pc, #56]	; (80039f8 <HAL_Init+0x40>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a0d      	ldr	r2, [pc, #52]	; (80039f8 <HAL_Init+0x40>)
 80039c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039c8:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <HAL_Init+0x40>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a0a      	ldr	r2, [pc, #40]	; (80039f8 <HAL_Init+0x40>)
 80039ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039d4:	4b08      	ldr	r3, [pc, #32]	; (80039f8 <HAL_Init+0x40>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a07      	ldr	r2, [pc, #28]	; (80039f8 <HAL_Init+0x40>)
 80039da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039e0:	2003      	movs	r0, #3
 80039e2:	f000 fbc1 	bl	8004168 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039e6:	200f      	movs	r0, #15
 80039e8:	f000 f808 	bl	80039fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039ec:	f7ff fc34 	bl	8003258 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40023c00 	.word	0x40023c00

080039fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a04:	4b12      	ldr	r3, [pc, #72]	; (8003a50 <HAL_InitTick+0x54>)
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	4b12      	ldr	r3, [pc, #72]	; (8003a54 <HAL_InitTick+0x58>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fbd9 	bl	80041d2 <HAL_SYSTICK_Config>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e00e      	b.n	8003a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b0f      	cmp	r3, #15
 8003a2e:	d80a      	bhi.n	8003a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a30:	2200      	movs	r2, #0
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	f04f 30ff 	mov.w	r0, #4294967295
 8003a38:	f000 fba1 	bl	800417e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a3c:	4a06      	ldr	r2, [pc, #24]	; (8003a58 <HAL_InitTick+0x5c>)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
 8003a44:	e000      	b.n	8003a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	20000000 	.word	0x20000000
 8003a54:	20000008 	.word	0x20000008
 8003a58:	20000004 	.word	0x20000004

08003a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a60:	4b06      	ldr	r3, [pc, #24]	; (8003a7c <HAL_IncTick+0x20>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	461a      	mov	r2, r3
 8003a66:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <HAL_IncTick+0x24>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	4a04      	ldr	r2, [pc, #16]	; (8003a80 <HAL_IncTick+0x24>)
 8003a6e:	6013      	str	r3, [r2, #0]
}
 8003a70:	bf00      	nop
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	20000008 	.word	0x20000008
 8003a80:	20001918 	.word	0x20001918

08003a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  return uwTick;
 8003a88:	4b03      	ldr	r3, [pc, #12]	; (8003a98 <HAL_GetTick+0x14>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	20001918 	.word	0x20001918

08003a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003aa4:	f7ff ffee 	bl	8003a84 <HAL_GetTick>
 8003aa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab4:	d005      	beq.n	8003ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ab6:	4b0a      	ldr	r3, [pc, #40]	; (8003ae0 <HAL_Delay+0x44>)
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	461a      	mov	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4413      	add	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ac2:	bf00      	nop
 8003ac4:	f7ff ffde 	bl	8003a84 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d8f7      	bhi.n	8003ac4 <HAL_Delay+0x28>
  {
  }
}
 8003ad4:	bf00      	nop
 8003ad6:	bf00      	nop
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	20000008 	.word	0x20000008

08003ae4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003aec:	2300      	movs	r3, #0
 8003aee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e033      	b.n	8003b62 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d109      	bne.n	8003b16 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7ff fbd0 	bl	80032a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	f003 0310 	and.w	r3, r3, #16
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d118      	bne.n	8003b54 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003b2a:	f023 0302 	bic.w	r3, r3, #2
 8003b2e:	f043 0202 	orr.w	r2, r3, #2
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f94a 	bl	8003dd0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	f023 0303 	bic.w	r3, r3, #3
 8003b4a:	f043 0201 	orr.w	r2, r3, #1
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	641a      	str	r2, [r3, #64]	; 0x40
 8003b52:	e001      	b.n	8003b58 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
	...

08003b6c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d101      	bne.n	8003b88 <HAL_ADC_ConfigChannel+0x1c>
 8003b84:	2302      	movs	r3, #2
 8003b86:	e113      	b.n	8003db0 <HAL_ADC_ConfigChannel+0x244>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2b09      	cmp	r3, #9
 8003b96:	d925      	bls.n	8003be4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68d9      	ldr	r1, [r3, #12]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	4413      	add	r3, r2
 8003bac:	3b1e      	subs	r3, #30
 8003bae:	2207      	movs	r2, #7
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	43da      	mvns	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	400a      	ands	r2, r1
 8003bbc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68d9      	ldr	r1, [r3, #12]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	4618      	mov	r0, r3
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	4403      	add	r3, r0
 8003bd6:	3b1e      	subs	r3, #30
 8003bd8:	409a      	lsls	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	60da      	str	r2, [r3, #12]
 8003be2:	e022      	b.n	8003c2a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6919      	ldr	r1, [r3, #16]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	4413      	add	r3, r2
 8003bf8:	2207      	movs	r2, #7
 8003bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfe:	43da      	mvns	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	400a      	ands	r2, r1
 8003c06:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6919      	ldr	r1, [r3, #16]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	689a      	ldr	r2, [r3, #8]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	4618      	mov	r0, r3
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	4403      	add	r3, r0
 8003c20:	409a      	lsls	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2b06      	cmp	r3, #6
 8003c30:	d824      	bhi.n	8003c7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	3b05      	subs	r3, #5
 8003c44:	221f      	movs	r2, #31
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	43da      	mvns	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	400a      	ands	r2, r1
 8003c52:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	4618      	mov	r0, r3
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	3b05      	subs	r3, #5
 8003c6e:	fa00 f203 	lsl.w	r2, r0, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	635a      	str	r2, [r3, #52]	; 0x34
 8003c7a:	e04c      	b.n	8003d16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	2b0c      	cmp	r3, #12
 8003c82:	d824      	bhi.n	8003cce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	3b23      	subs	r3, #35	; 0x23
 8003c96:	221f      	movs	r2, #31
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	43da      	mvns	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	400a      	ands	r2, r1
 8003ca4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	3b23      	subs	r3, #35	; 0x23
 8003cc0:	fa00 f203 	lsl.w	r2, r0, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	631a      	str	r2, [r3, #48]	; 0x30
 8003ccc:	e023      	b.n	8003d16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4413      	add	r3, r2
 8003cde:	3b41      	subs	r3, #65	; 0x41
 8003ce0:	221f      	movs	r2, #31
 8003ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce6:	43da      	mvns	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	400a      	ands	r2, r1
 8003cee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	4613      	mov	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	3b41      	subs	r3, #65	; 0x41
 8003d0a:	fa00 f203 	lsl.w	r2, r0, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d16:	4b29      	ldr	r3, [pc, #164]	; (8003dbc <HAL_ADC_ConfigChannel+0x250>)
 8003d18:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a28      	ldr	r2, [pc, #160]	; (8003dc0 <HAL_ADC_ConfigChannel+0x254>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d10f      	bne.n	8003d44 <HAL_ADC_ConfigChannel+0x1d8>
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2b12      	cmp	r3, #18
 8003d2a:	d10b      	bne.n	8003d44 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a1d      	ldr	r2, [pc, #116]	; (8003dc0 <HAL_ADC_ConfigChannel+0x254>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d12b      	bne.n	8003da6 <HAL_ADC_ConfigChannel+0x23a>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a1c      	ldr	r2, [pc, #112]	; (8003dc4 <HAL_ADC_ConfigChannel+0x258>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d003      	beq.n	8003d60 <HAL_ADC_ConfigChannel+0x1f4>
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b11      	cmp	r3, #17
 8003d5e:	d122      	bne.n	8003da6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a11      	ldr	r2, [pc, #68]	; (8003dc4 <HAL_ADC_ConfigChannel+0x258>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d111      	bne.n	8003da6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003d82:	4b11      	ldr	r3, [pc, #68]	; (8003dc8 <HAL_ADC_ConfigChannel+0x25c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a11      	ldr	r2, [pc, #68]	; (8003dcc <HAL_ADC_ConfigChannel+0x260>)
 8003d88:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8c:	0c9a      	lsrs	r2, r3, #18
 8003d8e:	4613      	mov	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003d98:	e002      	b.n	8003da0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1f9      	bne.n	8003d9a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	40012300 	.word	0x40012300
 8003dc0:	40012000 	.word	0x40012000
 8003dc4:	10000012 	.word	0x10000012
 8003dc8:	20000000 	.word	0x20000000
 8003dcc:	431bde83 	.word	0x431bde83

08003dd0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003dd8:	4b79      	ldr	r3, [pc, #484]	; (8003fc0 <ADC_Init+0x1f0>)
 8003dda:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	431a      	orrs	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	6859      	ldr	r1, [r3, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	021a      	lsls	r2, r3, #8
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003e28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	6859      	ldr	r1, [r3, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689a      	ldr	r2, [r3, #8]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6899      	ldr	r1, [r3, #8]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68da      	ldr	r2, [r3, #12]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e62:	4a58      	ldr	r2, [pc, #352]	; (8003fc4 <ADC_Init+0x1f4>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d022      	beq.n	8003eae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689a      	ldr	r2, [r3, #8]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6899      	ldr	r1, [r3, #8]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6899      	ldr	r1, [r3, #8]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	609a      	str	r2, [r3, #8]
 8003eac:	e00f      	b.n	8003ece <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ebc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689a      	ldr	r2, [r3, #8]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ecc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0202 	bic.w	r2, r2, #2
 8003edc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6899      	ldr	r1, [r3, #8]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	7e1b      	ldrb	r3, [r3, #24]
 8003ee8:	005a      	lsls	r2, r3, #1
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d01b      	beq.n	8003f34 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f0a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003f1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6859      	ldr	r1, [r3, #4]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	3b01      	subs	r3, #1
 8003f28:	035a      	lsls	r2, r3, #13
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	605a      	str	r2, [r3, #4]
 8003f32:	e007      	b.n	8003f44 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f42:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003f52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	051a      	lsls	r2, r3, #20
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6899      	ldr	r1, [r3, #8]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f86:	025a      	lsls	r2, r3, #9
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689a      	ldr	r2, [r3, #8]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6899      	ldr	r1, [r3, #8]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	029a      	lsls	r2, r3, #10
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	609a      	str	r2, [r3, #8]
}
 8003fb4:	bf00      	nop
 8003fb6:	3714      	adds	r7, #20
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	40012300 	.word	0x40012300
 8003fc4:	0f000001 	.word	0x0f000001

08003fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fd8:	4b0c      	ldr	r3, [pc, #48]	; (800400c <__NVIC_SetPriorityGrouping+0x44>)
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ff0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ffa:	4a04      	ldr	r2, [pc, #16]	; (800400c <__NVIC_SetPriorityGrouping+0x44>)
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	60d3      	str	r3, [r2, #12]
}
 8004000:	bf00      	nop
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	e000ed00 	.word	0xe000ed00

08004010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004014:	4b04      	ldr	r3, [pc, #16]	; (8004028 <__NVIC_GetPriorityGrouping+0x18>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	0a1b      	lsrs	r3, r3, #8
 800401a:	f003 0307 	and.w	r3, r3, #7
}
 800401e:	4618      	mov	r0, r3
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	e000ed00 	.word	0xe000ed00

0800402c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	4603      	mov	r3, r0
 8004034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403a:	2b00      	cmp	r3, #0
 800403c:	db0b      	blt.n	8004056 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800403e:	79fb      	ldrb	r3, [r7, #7]
 8004040:	f003 021f 	and.w	r2, r3, #31
 8004044:	4907      	ldr	r1, [pc, #28]	; (8004064 <__NVIC_EnableIRQ+0x38>)
 8004046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800404a:	095b      	lsrs	r3, r3, #5
 800404c:	2001      	movs	r0, #1
 800404e:	fa00 f202 	lsl.w	r2, r0, r2
 8004052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	e000e100 	.word	0xe000e100

08004068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	4603      	mov	r3, r0
 8004070:	6039      	str	r1, [r7, #0]
 8004072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004078:	2b00      	cmp	r3, #0
 800407a:	db0a      	blt.n	8004092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	b2da      	uxtb	r2, r3
 8004080:	490c      	ldr	r1, [pc, #48]	; (80040b4 <__NVIC_SetPriority+0x4c>)
 8004082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004086:	0112      	lsls	r2, r2, #4
 8004088:	b2d2      	uxtb	r2, r2
 800408a:	440b      	add	r3, r1
 800408c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004090:	e00a      	b.n	80040a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	b2da      	uxtb	r2, r3
 8004096:	4908      	ldr	r1, [pc, #32]	; (80040b8 <__NVIC_SetPriority+0x50>)
 8004098:	79fb      	ldrb	r3, [r7, #7]
 800409a:	f003 030f 	and.w	r3, r3, #15
 800409e:	3b04      	subs	r3, #4
 80040a0:	0112      	lsls	r2, r2, #4
 80040a2:	b2d2      	uxtb	r2, r2
 80040a4:	440b      	add	r3, r1
 80040a6:	761a      	strb	r2, [r3, #24]
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	e000e100 	.word	0xe000e100
 80040b8:	e000ed00 	.word	0xe000ed00

080040bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040bc:	b480      	push	{r7}
 80040be:	b089      	sub	sp, #36	; 0x24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f003 0307 	and.w	r3, r3, #7
 80040ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	f1c3 0307 	rsb	r3, r3, #7
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	bf28      	it	cs
 80040da:	2304      	movcs	r3, #4
 80040dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	3304      	adds	r3, #4
 80040e2:	2b06      	cmp	r3, #6
 80040e4:	d902      	bls.n	80040ec <NVIC_EncodePriority+0x30>
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	3b03      	subs	r3, #3
 80040ea:	e000      	b.n	80040ee <NVIC_EncodePriority+0x32>
 80040ec:	2300      	movs	r3, #0
 80040ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040f0:	f04f 32ff 	mov.w	r2, #4294967295
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	43da      	mvns	r2, r3
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	401a      	ands	r2, r3
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004104:	f04f 31ff 	mov.w	r1, #4294967295
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	fa01 f303 	lsl.w	r3, r1, r3
 800410e:	43d9      	mvns	r1, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004114:	4313      	orrs	r3, r2
         );
}
 8004116:	4618      	mov	r0, r3
 8004118:	3724      	adds	r7, #36	; 0x24
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
	...

08004124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3b01      	subs	r3, #1
 8004130:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004134:	d301      	bcc.n	800413a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004136:	2301      	movs	r3, #1
 8004138:	e00f      	b.n	800415a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800413a:	4a0a      	ldr	r2, [pc, #40]	; (8004164 <SysTick_Config+0x40>)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3b01      	subs	r3, #1
 8004140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004142:	210f      	movs	r1, #15
 8004144:	f04f 30ff 	mov.w	r0, #4294967295
 8004148:	f7ff ff8e 	bl	8004068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800414c:	4b05      	ldr	r3, [pc, #20]	; (8004164 <SysTick_Config+0x40>)
 800414e:	2200      	movs	r2, #0
 8004150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004152:	4b04      	ldr	r3, [pc, #16]	; (8004164 <SysTick_Config+0x40>)
 8004154:	2207      	movs	r2, #7
 8004156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	e000e010 	.word	0xe000e010

08004168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7ff ff29 	bl	8003fc8 <__NVIC_SetPriorityGrouping>
}
 8004176:	bf00      	nop
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800417e:	b580      	push	{r7, lr}
 8004180:	b086      	sub	sp, #24
 8004182:	af00      	add	r7, sp, #0
 8004184:	4603      	mov	r3, r0
 8004186:	60b9      	str	r1, [r7, #8]
 8004188:	607a      	str	r2, [r7, #4]
 800418a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800418c:	2300      	movs	r3, #0
 800418e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004190:	f7ff ff3e 	bl	8004010 <__NVIC_GetPriorityGrouping>
 8004194:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	68b9      	ldr	r1, [r7, #8]
 800419a:	6978      	ldr	r0, [r7, #20]
 800419c:	f7ff ff8e 	bl	80040bc <NVIC_EncodePriority>
 80041a0:	4602      	mov	r2, r0
 80041a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041a6:	4611      	mov	r1, r2
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7ff ff5d 	bl	8004068 <__NVIC_SetPriority>
}
 80041ae:	bf00      	nop
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b082      	sub	sp, #8
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	4603      	mov	r3, r0
 80041be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7ff ff31 	bl	800402c <__NVIC_EnableIRQ>
}
 80041ca:	bf00      	nop
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b082      	sub	sp, #8
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7ff ffa2 	bl	8004124 <SysTick_Config>
 80041e0:	4603      	mov	r3, r0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
	...

080041ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b089      	sub	sp, #36	; 0x24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041fe:	2300      	movs	r3, #0
 8004200:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004202:	2300      	movs	r3, #0
 8004204:	61fb      	str	r3, [r7, #28]
 8004206:	e177      	b.n	80044f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004208:	2201      	movs	r2, #1
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	fa02 f303 	lsl.w	r3, r2, r3
 8004210:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	4013      	ands	r3, r2
 800421a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	429a      	cmp	r2, r3
 8004222:	f040 8166 	bne.w	80044f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f003 0303 	and.w	r3, r3, #3
 800422e:	2b01      	cmp	r3, #1
 8004230:	d005      	beq.n	800423e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800423a:	2b02      	cmp	r3, #2
 800423c:	d130      	bne.n	80042a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	2203      	movs	r2, #3
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	43db      	mvns	r3, r3
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	4013      	ands	r3, r2
 8004254:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	68da      	ldr	r2, [r3, #12]
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	4313      	orrs	r3, r2
 8004266:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004274:	2201      	movs	r2, #1
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	fa02 f303 	lsl.w	r3, r2, r3
 800427c:	43db      	mvns	r3, r3
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	4013      	ands	r3, r2
 8004282:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	091b      	lsrs	r3, r3, #4
 800428a:	f003 0201 	and.w	r2, r3, #1
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	4313      	orrs	r3, r2
 8004298:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f003 0303 	and.w	r3, r3, #3
 80042a8:	2b03      	cmp	r3, #3
 80042aa:	d017      	beq.n	80042dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	2203      	movs	r2, #3
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	43db      	mvns	r3, r3
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	4013      	ands	r3, r2
 80042c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	fa02 f303 	lsl.w	r3, r2, r3
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f003 0303 	and.w	r3, r3, #3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d123      	bne.n	8004330 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	08da      	lsrs	r2, r3, #3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3208      	adds	r2, #8
 80042f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	220f      	movs	r2, #15
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	43db      	mvns	r3, r3
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	4013      	ands	r3, r2
 800430a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	691a      	ldr	r2, [r3, #16]
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	4313      	orrs	r3, r2
 8004320:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	08da      	lsrs	r2, r3, #3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	3208      	adds	r2, #8
 800432a:	69b9      	ldr	r1, [r7, #24]
 800432c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	2203      	movs	r2, #3
 800433c:	fa02 f303 	lsl.w	r3, r2, r3
 8004340:	43db      	mvns	r3, r3
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	4013      	ands	r3, r2
 8004346:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f003 0203 	and.w	r2, r3, #3
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	4313      	orrs	r3, r2
 800435c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 80c0 	beq.w	80044f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004372:	2300      	movs	r3, #0
 8004374:	60fb      	str	r3, [r7, #12]
 8004376:	4b66      	ldr	r3, [pc, #408]	; (8004510 <HAL_GPIO_Init+0x324>)
 8004378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437a:	4a65      	ldr	r2, [pc, #404]	; (8004510 <HAL_GPIO_Init+0x324>)
 800437c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004380:	6453      	str	r3, [r2, #68]	; 0x44
 8004382:	4b63      	ldr	r3, [pc, #396]	; (8004510 <HAL_GPIO_Init+0x324>)
 8004384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800438e:	4a61      	ldr	r2, [pc, #388]	; (8004514 <HAL_GPIO_Init+0x328>)
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	089b      	lsrs	r3, r3, #2
 8004394:	3302      	adds	r3, #2
 8004396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800439a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	f003 0303 	and.w	r3, r3, #3
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	220f      	movs	r2, #15
 80043a6:	fa02 f303 	lsl.w	r3, r2, r3
 80043aa:	43db      	mvns	r3, r3
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	4013      	ands	r3, r2
 80043b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a58      	ldr	r2, [pc, #352]	; (8004518 <HAL_GPIO_Init+0x32c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d037      	beq.n	800442a <HAL_GPIO_Init+0x23e>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a57      	ldr	r2, [pc, #348]	; (800451c <HAL_GPIO_Init+0x330>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d031      	beq.n	8004426 <HAL_GPIO_Init+0x23a>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a56      	ldr	r2, [pc, #344]	; (8004520 <HAL_GPIO_Init+0x334>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d02b      	beq.n	8004422 <HAL_GPIO_Init+0x236>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a55      	ldr	r2, [pc, #340]	; (8004524 <HAL_GPIO_Init+0x338>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d025      	beq.n	800441e <HAL_GPIO_Init+0x232>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a54      	ldr	r2, [pc, #336]	; (8004528 <HAL_GPIO_Init+0x33c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d01f      	beq.n	800441a <HAL_GPIO_Init+0x22e>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a53      	ldr	r2, [pc, #332]	; (800452c <HAL_GPIO_Init+0x340>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d019      	beq.n	8004416 <HAL_GPIO_Init+0x22a>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a52      	ldr	r2, [pc, #328]	; (8004530 <HAL_GPIO_Init+0x344>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d013      	beq.n	8004412 <HAL_GPIO_Init+0x226>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a51      	ldr	r2, [pc, #324]	; (8004534 <HAL_GPIO_Init+0x348>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d00d      	beq.n	800440e <HAL_GPIO_Init+0x222>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a50      	ldr	r2, [pc, #320]	; (8004538 <HAL_GPIO_Init+0x34c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d007      	beq.n	800440a <HAL_GPIO_Init+0x21e>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a4f      	ldr	r2, [pc, #316]	; (800453c <HAL_GPIO_Init+0x350>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d101      	bne.n	8004406 <HAL_GPIO_Init+0x21a>
 8004402:	2309      	movs	r3, #9
 8004404:	e012      	b.n	800442c <HAL_GPIO_Init+0x240>
 8004406:	230a      	movs	r3, #10
 8004408:	e010      	b.n	800442c <HAL_GPIO_Init+0x240>
 800440a:	2308      	movs	r3, #8
 800440c:	e00e      	b.n	800442c <HAL_GPIO_Init+0x240>
 800440e:	2307      	movs	r3, #7
 8004410:	e00c      	b.n	800442c <HAL_GPIO_Init+0x240>
 8004412:	2306      	movs	r3, #6
 8004414:	e00a      	b.n	800442c <HAL_GPIO_Init+0x240>
 8004416:	2305      	movs	r3, #5
 8004418:	e008      	b.n	800442c <HAL_GPIO_Init+0x240>
 800441a:	2304      	movs	r3, #4
 800441c:	e006      	b.n	800442c <HAL_GPIO_Init+0x240>
 800441e:	2303      	movs	r3, #3
 8004420:	e004      	b.n	800442c <HAL_GPIO_Init+0x240>
 8004422:	2302      	movs	r3, #2
 8004424:	e002      	b.n	800442c <HAL_GPIO_Init+0x240>
 8004426:	2301      	movs	r3, #1
 8004428:	e000      	b.n	800442c <HAL_GPIO_Init+0x240>
 800442a:	2300      	movs	r3, #0
 800442c:	69fa      	ldr	r2, [r7, #28]
 800442e:	f002 0203 	and.w	r2, r2, #3
 8004432:	0092      	lsls	r2, r2, #2
 8004434:	4093      	lsls	r3, r2
 8004436:	69ba      	ldr	r2, [r7, #24]
 8004438:	4313      	orrs	r3, r2
 800443a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800443c:	4935      	ldr	r1, [pc, #212]	; (8004514 <HAL_GPIO_Init+0x328>)
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	089b      	lsrs	r3, r3, #2
 8004442:	3302      	adds	r3, #2
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800444a:	4b3d      	ldr	r3, [pc, #244]	; (8004540 <HAL_GPIO_Init+0x354>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	43db      	mvns	r3, r3
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	4013      	ands	r3, r2
 8004458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	4313      	orrs	r3, r2
 800446c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800446e:	4a34      	ldr	r2, [pc, #208]	; (8004540 <HAL_GPIO_Init+0x354>)
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004474:	4b32      	ldr	r3, [pc, #200]	; (8004540 <HAL_GPIO_Init+0x354>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	43db      	mvns	r3, r3
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	4013      	ands	r3, r2
 8004482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	4313      	orrs	r3, r2
 8004496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004498:	4a29      	ldr	r2, [pc, #164]	; (8004540 <HAL_GPIO_Init+0x354>)
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800449e:	4b28      	ldr	r3, [pc, #160]	; (8004540 <HAL_GPIO_Init+0x354>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	43db      	mvns	r3, r3
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	4013      	ands	r3, r2
 80044ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	4313      	orrs	r3, r2
 80044c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044c2:	4a1f      	ldr	r2, [pc, #124]	; (8004540 <HAL_GPIO_Init+0x354>)
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044c8:	4b1d      	ldr	r3, [pc, #116]	; (8004540 <HAL_GPIO_Init+0x354>)
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	43db      	mvns	r3, r3
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	4013      	ands	r3, r2
 80044d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044ec:	4a14      	ldr	r2, [pc, #80]	; (8004540 <HAL_GPIO_Init+0x354>)
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	3301      	adds	r3, #1
 80044f6:	61fb      	str	r3, [r7, #28]
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	2b0f      	cmp	r3, #15
 80044fc:	f67f ae84 	bls.w	8004208 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004500:	bf00      	nop
 8004502:	bf00      	nop
 8004504:	3724      	adds	r7, #36	; 0x24
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	40023800 	.word	0x40023800
 8004514:	40013800 	.word	0x40013800
 8004518:	40020000 	.word	0x40020000
 800451c:	40020400 	.word	0x40020400
 8004520:	40020800 	.word	0x40020800
 8004524:	40020c00 	.word	0x40020c00
 8004528:	40021000 	.word	0x40021000
 800452c:	40021400 	.word	0x40021400
 8004530:	40021800 	.word	0x40021800
 8004534:	40021c00 	.word	0x40021c00
 8004538:	40022000 	.word	0x40022000
 800453c:	40022400 	.word	0x40022400
 8004540:	40013c00 	.word	0x40013c00

08004544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	460b      	mov	r3, r1
 800454e:	807b      	strh	r3, [r7, #2]
 8004550:	4613      	mov	r3, r2
 8004552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004554:	787b      	ldrb	r3, [r7, #1]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800455a:	887a      	ldrh	r2, [r7, #2]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004560:	e003      	b.n	800456a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004562:	887b      	ldrh	r3, [r7, #2]
 8004564:	041a      	lsls	r2, r3, #16
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	619a      	str	r2, [r3, #24]
}
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004576:	b480      	push	{r7}
 8004578:	b085      	sub	sp, #20
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
 800457e:	460b      	mov	r3, r1
 8004580:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004588:	887a      	ldrh	r2, [r7, #2]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4013      	ands	r3, r2
 800458e:	041a      	lsls	r2, r3, #16
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	43d9      	mvns	r1, r3
 8004594:	887b      	ldrh	r3, [r7, #2]
 8004596:	400b      	ands	r3, r1
 8004598:	431a      	orrs	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	619a      	str	r2, [r3, #24]
}
 800459e:	bf00      	nop
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
	...

080045ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	4603      	mov	r3, r0
 80045b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80045b6:	4b08      	ldr	r3, [pc, #32]	; (80045d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045b8:	695a      	ldr	r2, [r3, #20]
 80045ba:	88fb      	ldrh	r3, [r7, #6]
 80045bc:	4013      	ands	r3, r2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d006      	beq.n	80045d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045c2:	4a05      	ldr	r2, [pc, #20]	; (80045d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045c4:	88fb      	ldrh	r3, [r7, #6]
 80045c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045c8:	88fb      	ldrh	r3, [r7, #6]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fe fba4 	bl	8002d18 <HAL_GPIO_EXTI_Callback>
  }
}
 80045d0:	bf00      	nop
 80045d2:	3708      	adds	r7, #8
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	40013c00 	.word	0x40013c00

080045dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e12b      	b.n	8004846 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d106      	bne.n	8004608 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7fe fe94 	bl	8003330 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2224      	movs	r2, #36	; 0x24
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0201 	bic.w	r2, r2, #1
 800461e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800462e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800463e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004640:	f002 fdd4 	bl	80071ec <HAL_RCC_GetPCLK1Freq>
 8004644:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	4a81      	ldr	r2, [pc, #516]	; (8004850 <HAL_I2C_Init+0x274>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d807      	bhi.n	8004660 <HAL_I2C_Init+0x84>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4a80      	ldr	r2, [pc, #512]	; (8004854 <HAL_I2C_Init+0x278>)
 8004654:	4293      	cmp	r3, r2
 8004656:	bf94      	ite	ls
 8004658:	2301      	movls	r3, #1
 800465a:	2300      	movhi	r3, #0
 800465c:	b2db      	uxtb	r3, r3
 800465e:	e006      	b.n	800466e <HAL_I2C_Init+0x92>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4a7d      	ldr	r2, [pc, #500]	; (8004858 <HAL_I2C_Init+0x27c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	bf94      	ite	ls
 8004668:	2301      	movls	r3, #1
 800466a:	2300      	movhi	r3, #0
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e0e7      	b.n	8004846 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	4a78      	ldr	r2, [pc, #480]	; (800485c <HAL_I2C_Init+0x280>)
 800467a:	fba2 2303 	umull	r2, r3, r2, r3
 800467e:	0c9b      	lsrs	r3, r3, #18
 8004680:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	430a      	orrs	r2, r1
 8004694:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	4a6a      	ldr	r2, [pc, #424]	; (8004850 <HAL_I2C_Init+0x274>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d802      	bhi.n	80046b0 <HAL_I2C_Init+0xd4>
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	3301      	adds	r3, #1
 80046ae:	e009      	b.n	80046c4 <HAL_I2C_Init+0xe8>
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80046b6:	fb02 f303 	mul.w	r3, r2, r3
 80046ba:	4a69      	ldr	r2, [pc, #420]	; (8004860 <HAL_I2C_Init+0x284>)
 80046bc:	fba2 2303 	umull	r2, r3, r2, r3
 80046c0:	099b      	lsrs	r3, r3, #6
 80046c2:	3301      	adds	r3, #1
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6812      	ldr	r2, [r2, #0]
 80046c8:	430b      	orrs	r3, r1
 80046ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80046d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	495c      	ldr	r1, [pc, #368]	; (8004850 <HAL_I2C_Init+0x274>)
 80046e0:	428b      	cmp	r3, r1
 80046e2:	d819      	bhi.n	8004718 <HAL_I2C_Init+0x13c>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	1e59      	subs	r1, r3, #1
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80046f2:	1c59      	adds	r1, r3, #1
 80046f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80046f8:	400b      	ands	r3, r1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00a      	beq.n	8004714 <HAL_I2C_Init+0x138>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	1e59      	subs	r1, r3, #1
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	fbb1 f3f3 	udiv	r3, r1, r3
 800470c:	3301      	adds	r3, #1
 800470e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004712:	e051      	b.n	80047b8 <HAL_I2C_Init+0x1dc>
 8004714:	2304      	movs	r3, #4
 8004716:	e04f      	b.n	80047b8 <HAL_I2C_Init+0x1dc>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d111      	bne.n	8004744 <HAL_I2C_Init+0x168>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	1e58      	subs	r0, r3, #1
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6859      	ldr	r1, [r3, #4]
 8004728:	460b      	mov	r3, r1
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	440b      	add	r3, r1
 800472e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004732:	3301      	adds	r3, #1
 8004734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004738:	2b00      	cmp	r3, #0
 800473a:	bf0c      	ite	eq
 800473c:	2301      	moveq	r3, #1
 800473e:	2300      	movne	r3, #0
 8004740:	b2db      	uxtb	r3, r3
 8004742:	e012      	b.n	800476a <HAL_I2C_Init+0x18e>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	1e58      	subs	r0, r3, #1
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6859      	ldr	r1, [r3, #4]
 800474c:	460b      	mov	r3, r1
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	0099      	lsls	r1, r3, #2
 8004754:	440b      	add	r3, r1
 8004756:	fbb0 f3f3 	udiv	r3, r0, r3
 800475a:	3301      	adds	r3, #1
 800475c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004760:	2b00      	cmp	r3, #0
 8004762:	bf0c      	ite	eq
 8004764:	2301      	moveq	r3, #1
 8004766:	2300      	movne	r3, #0
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <HAL_I2C_Init+0x196>
 800476e:	2301      	movs	r3, #1
 8004770:	e022      	b.n	80047b8 <HAL_I2C_Init+0x1dc>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10e      	bne.n	8004798 <HAL_I2C_Init+0x1bc>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	1e58      	subs	r0, r3, #1
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6859      	ldr	r1, [r3, #4]
 8004782:	460b      	mov	r3, r1
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	440b      	add	r3, r1
 8004788:	fbb0 f3f3 	udiv	r3, r0, r3
 800478c:	3301      	adds	r3, #1
 800478e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004796:	e00f      	b.n	80047b8 <HAL_I2C_Init+0x1dc>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	1e58      	subs	r0, r3, #1
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6859      	ldr	r1, [r3, #4]
 80047a0:	460b      	mov	r3, r1
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	440b      	add	r3, r1
 80047a6:	0099      	lsls	r1, r3, #2
 80047a8:	440b      	add	r3, r1
 80047aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80047ae:	3301      	adds	r3, #1
 80047b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	6809      	ldr	r1, [r1, #0]
 80047bc:	4313      	orrs	r3, r2
 80047be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69da      	ldr	r2, [r3, #28]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	431a      	orrs	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80047e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	6911      	ldr	r1, [r2, #16]
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	68d2      	ldr	r2, [r2, #12]
 80047f2:	4311      	orrs	r1, r2
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	6812      	ldr	r2, [r2, #0]
 80047f8:	430b      	orrs	r3, r1
 80047fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	695a      	ldr	r2, [r3, #20]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0201 	orr.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2220      	movs	r2, #32
 8004832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	000186a0 	.word	0x000186a0
 8004854:	001e847f 	.word	0x001e847f
 8004858:	003d08ff 	.word	0x003d08ff
 800485c:	431bde83 	.word	0x431bde83
 8004860:	10624dd3 	.word	0x10624dd3

08004864 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b088      	sub	sp, #32
 8004868:	af02      	add	r7, sp, #8
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	4608      	mov	r0, r1
 800486e:	4611      	mov	r1, r2
 8004870:	461a      	mov	r2, r3
 8004872:	4603      	mov	r3, r0
 8004874:	817b      	strh	r3, [r7, #10]
 8004876:	460b      	mov	r3, r1
 8004878:	813b      	strh	r3, [r7, #8]
 800487a:	4613      	mov	r3, r2
 800487c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800487e:	f7ff f901 	bl	8003a84 <HAL_GetTick>
 8004882:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b20      	cmp	r3, #32
 800488e:	f040 80d9 	bne.w	8004a44 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	2319      	movs	r3, #25
 8004898:	2201      	movs	r2, #1
 800489a:	496d      	ldr	r1, [pc, #436]	; (8004a50 <HAL_I2C_Mem_Write+0x1ec>)
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 fc7f 	bl	80051a0 <I2C_WaitOnFlagUntilTimeout>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80048a8:	2302      	movs	r3, #2
 80048aa:	e0cc      	b.n	8004a46 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d101      	bne.n	80048ba <HAL_I2C_Mem_Write+0x56>
 80048b6:	2302      	movs	r3, #2
 80048b8:	e0c5      	b.n	8004a46 <HAL_I2C_Mem_Write+0x1e2>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d007      	beq.n	80048e0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f042 0201 	orr.w	r2, r2, #1
 80048de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2221      	movs	r2, #33	; 0x21
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2240      	movs	r2, #64	; 0x40
 80048fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6a3a      	ldr	r2, [r7, #32]
 800490a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004910:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004916:	b29a      	uxth	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4a4d      	ldr	r2, [pc, #308]	; (8004a54 <HAL_I2C_Mem_Write+0x1f0>)
 8004920:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004922:	88f8      	ldrh	r0, [r7, #6]
 8004924:	893a      	ldrh	r2, [r7, #8]
 8004926:	8979      	ldrh	r1, [r7, #10]
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	9301      	str	r3, [sp, #4]
 800492c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	4603      	mov	r3, r0
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f000 fab6 	bl	8004ea4 <I2C_RequestMemoryWrite>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d052      	beq.n	80049e4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e081      	b.n	8004a46 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 fd00 	bl	800534c <I2C_WaitOnTXEFlagUntilTimeout>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00d      	beq.n	800496e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	2b04      	cmp	r3, #4
 8004958:	d107      	bne.n	800496a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004968:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e06b      	b.n	8004a46 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	781a      	ldrb	r2, [r3, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497e:	1c5a      	adds	r2, r3, #1
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004988:	3b01      	subs	r3, #1
 800498a:	b29a      	uxth	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004994:	b29b      	uxth	r3, r3
 8004996:	3b01      	subs	r3, #1
 8004998:	b29a      	uxth	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	f003 0304 	and.w	r3, r3, #4
 80049a8:	2b04      	cmp	r3, #4
 80049aa:	d11b      	bne.n	80049e4 <HAL_I2C_Mem_Write+0x180>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d017      	beq.n	80049e4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	781a      	ldrb	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c4:	1c5a      	adds	r2, r3, #1
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ce:	3b01      	subs	r3, #1
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049da:	b29b      	uxth	r3, r3
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1aa      	bne.n	8004942 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 fcec 	bl	80053ce <I2C_WaitOnBTFFlagUntilTimeout>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00d      	beq.n	8004a18 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a00:	2b04      	cmp	r3, #4
 8004a02:	d107      	bne.n	8004a14 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a12:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e016      	b.n	8004a46 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a40:	2300      	movs	r3, #0
 8004a42:	e000      	b.n	8004a46 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004a44:	2302      	movs	r3, #2
  }
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3718      	adds	r7, #24
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	00100002 	.word	0x00100002
 8004a54:	ffff0000 	.word	0xffff0000

08004a58 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08c      	sub	sp, #48	; 0x30
 8004a5c:	af02      	add	r7, sp, #8
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	4608      	mov	r0, r1
 8004a62:	4611      	mov	r1, r2
 8004a64:	461a      	mov	r2, r3
 8004a66:	4603      	mov	r3, r0
 8004a68:	817b      	strh	r3, [r7, #10]
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	813b      	strh	r3, [r7, #8]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a72:	f7ff f807 	bl	8003a84 <HAL_GetTick>
 8004a76:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b20      	cmp	r3, #32
 8004a82:	f040 8208 	bne.w	8004e96 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	2319      	movs	r3, #25
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	497b      	ldr	r1, [pc, #492]	; (8004c7c <HAL_I2C_Mem_Read+0x224>)
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 fb85 	bl	80051a0 <I2C_WaitOnFlagUntilTimeout>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	e1fb      	b.n	8004e98 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d101      	bne.n	8004aae <HAL_I2C_Mem_Read+0x56>
 8004aaa:	2302      	movs	r3, #2
 8004aac:	e1f4      	b.n	8004e98 <HAL_I2C_Mem_Read+0x440>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d007      	beq.n	8004ad4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f042 0201 	orr.w	r2, r2, #1
 8004ad2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ae2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2222      	movs	r2, #34	; 0x22
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2240      	movs	r2, #64	; 0x40
 8004af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004afe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004b04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4a5b      	ldr	r2, [pc, #364]	; (8004c80 <HAL_I2C_Mem_Read+0x228>)
 8004b14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b16:	88f8      	ldrh	r0, [r7, #6]
 8004b18:	893a      	ldrh	r2, [r7, #8]
 8004b1a:	8979      	ldrh	r1, [r7, #10]
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	9301      	str	r3, [sp, #4]
 8004b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b22:	9300      	str	r3, [sp, #0]
 8004b24:	4603      	mov	r3, r0
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	f000 fa52 	bl	8004fd0 <I2C_RequestMemoryRead>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e1b0      	b.n	8004e98 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d113      	bne.n	8004b66 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b3e:	2300      	movs	r3, #0
 8004b40:	623b      	str	r3, [r7, #32]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	623b      	str	r3, [r7, #32]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	623b      	str	r3, [r7, #32]
 8004b52:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b62:	601a      	str	r2, [r3, #0]
 8004b64:	e184      	b.n	8004e70 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d11b      	bne.n	8004ba6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b7e:	2300      	movs	r3, #0
 8004b80:	61fb      	str	r3, [r7, #28]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	695b      	ldr	r3, [r3, #20]
 8004b88:	61fb      	str	r3, [r7, #28]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	61fb      	str	r3, [r7, #28]
 8004b92:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	e164      	b.n	8004e70 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d11b      	bne.n	8004be6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bbc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bcc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bce:	2300      	movs	r3, #0
 8004bd0:	61bb      	str	r3, [r7, #24]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	61bb      	str	r3, [r7, #24]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	61bb      	str	r3, [r7, #24]
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	e144      	b.n	8004e70 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004be6:	2300      	movs	r3, #0
 8004be8:	617b      	str	r3, [r7, #20]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	617b      	str	r3, [r7, #20]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	617b      	str	r3, [r7, #20]
 8004bfa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004bfc:	e138      	b.n	8004e70 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c02:	2b03      	cmp	r3, #3
 8004c04:	f200 80f1 	bhi.w	8004dea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d123      	bne.n	8004c58 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 fc1b 	bl	8005450 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e139      	b.n	8004e98 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	691a      	ldr	r2, [r3, #16]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	b2d2      	uxtb	r2, r2
 8004c30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	1c5a      	adds	r2, r3, #1
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c40:	3b01      	subs	r3, #1
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c56:	e10b      	b.n	8004e70 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d14e      	bne.n	8004cfe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c66:	2200      	movs	r2, #0
 8004c68:	4906      	ldr	r1, [pc, #24]	; (8004c84 <HAL_I2C_Mem_Read+0x22c>)
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f000 fa98 	bl	80051a0 <I2C_WaitOnFlagUntilTimeout>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d008      	beq.n	8004c88 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e10e      	b.n	8004e98 <HAL_I2C_Mem_Read+0x440>
 8004c7a:	bf00      	nop
 8004c7c:	00100002 	.word	0x00100002
 8004c80:	ffff0000 	.word	0xffff0000
 8004c84:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691a      	ldr	r2, [r3, #16]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	b2d2      	uxtb	r2, r2
 8004ca4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	1c5a      	adds	r2, r3, #1
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	691a      	ldr	r2, [r3, #16]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd4:	b2d2      	uxtb	r2, r2
 8004cd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cdc:	1c5a      	adds	r2, r3, #1
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cfc:	e0b8      	b.n	8004e70 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d04:	2200      	movs	r2, #0
 8004d06:	4966      	ldr	r1, [pc, #408]	; (8004ea0 <HAL_I2C_Mem_Read+0x448>)
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f000 fa49 	bl	80051a0 <I2C_WaitOnFlagUntilTimeout>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d001      	beq.n	8004d18 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e0bf      	b.n	8004e98 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	691a      	ldr	r2, [r3, #16]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	1c5a      	adds	r2, r3, #1
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d44:	3b01      	subs	r3, #1
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	3b01      	subs	r3, #1
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d60:	2200      	movs	r2, #0
 8004d62:	494f      	ldr	r1, [pc, #316]	; (8004ea0 <HAL_I2C_Mem_Read+0x448>)
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f000 fa1b 	bl	80051a0 <I2C_WaitOnFlagUntilTimeout>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e091      	b.n	8004e98 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	691a      	ldr	r2, [r3, #16]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da0:	3b01      	subs	r3, #1
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	3b01      	subs	r3, #1
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	691a      	ldr	r2, [r3, #16]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	b2d2      	uxtb	r2, r2
 8004dc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc8:	1c5a      	adds	r2, r3, #1
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	3b01      	subs	r3, #1
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004de8:	e042      	b.n	8004e70 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f000 fb2e 	bl	8005450 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e04c      	b.n	8004e98 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	691a      	ldr	r2, [r3, #16]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	b2d2      	uxtb	r2, r2
 8004e0a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	f003 0304 	and.w	r3, r3, #4
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d118      	bne.n	8004e70 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	691a      	ldr	r2, [r3, #16]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e48:	b2d2      	uxtb	r2, r2
 8004e4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e50:	1c5a      	adds	r2, r3, #1
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f47f aec2 	bne.w	8004bfe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2220      	movs	r2, #32
 8004e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e92:	2300      	movs	r3, #0
 8004e94:	e000      	b.n	8004e98 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004e96:	2302      	movs	r3, #2
  }
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3728      	adds	r7, #40	; 0x28
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	00010004 	.word	0x00010004

08004ea4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b088      	sub	sp, #32
 8004ea8:	af02      	add	r7, sp, #8
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	4608      	mov	r0, r1
 8004eae:	4611      	mov	r1, r2
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	817b      	strh	r3, [r7, #10]
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	813b      	strh	r3, [r7, #8]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ecc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	6a3b      	ldr	r3, [r7, #32]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 f960 	bl	80051a0 <I2C_WaitOnFlagUntilTimeout>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00d      	beq.n	8004f02 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ef4:	d103      	bne.n	8004efe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004efc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e05f      	b.n	8004fc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f02:	897b      	ldrh	r3, [r7, #10]
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	461a      	mov	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	6a3a      	ldr	r2, [r7, #32]
 8004f16:	492d      	ldr	r1, [pc, #180]	; (8004fcc <I2C_RequestMemoryWrite+0x128>)
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 f998 	bl	800524e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e04c      	b.n	8004fc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f28:	2300      	movs	r3, #0
 8004f2a:	617b      	str	r3, [r7, #20]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	617b      	str	r3, [r7, #20]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	617b      	str	r3, [r7, #20]
 8004f3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f40:	6a39      	ldr	r1, [r7, #32]
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 fa02 	bl	800534c <I2C_WaitOnTXEFlagUntilTimeout>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00d      	beq.n	8004f6a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d107      	bne.n	8004f66 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e02b      	b.n	8004fc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f6a:	88fb      	ldrh	r3, [r7, #6]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d105      	bne.n	8004f7c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f70:	893b      	ldrh	r3, [r7, #8]
 8004f72:	b2da      	uxtb	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	611a      	str	r2, [r3, #16]
 8004f7a:	e021      	b.n	8004fc0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f7c:	893b      	ldrh	r3, [r7, #8]
 8004f7e:	0a1b      	lsrs	r3, r3, #8
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f8c:	6a39      	ldr	r1, [r7, #32]
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f000 f9dc 	bl	800534c <I2C_WaitOnTXEFlagUntilTimeout>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00d      	beq.n	8004fb6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	2b04      	cmp	r3, #4
 8004fa0:	d107      	bne.n	8004fb2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fb0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e005      	b.n	8004fc2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fb6:	893b      	ldrh	r3, [r7, #8]
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3718      	adds	r7, #24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	00010002 	.word	0x00010002

08004fd0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b088      	sub	sp, #32
 8004fd4:	af02      	add	r7, sp, #8
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	4608      	mov	r0, r1
 8004fda:	4611      	mov	r1, r2
 8004fdc:	461a      	mov	r2, r3
 8004fde:	4603      	mov	r3, r0
 8004fe0:	817b      	strh	r3, [r7, #10]
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	813b      	strh	r3, [r7, #8]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ff8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005008:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	6a3b      	ldr	r3, [r7, #32]
 8005010:	2200      	movs	r2, #0
 8005012:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f000 f8c2 	bl	80051a0 <I2C_WaitOnFlagUntilTimeout>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00d      	beq.n	800503e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005030:	d103      	bne.n	800503a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005038:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e0aa      	b.n	8005194 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800503e:	897b      	ldrh	r3, [r7, #10]
 8005040:	b2db      	uxtb	r3, r3
 8005042:	461a      	mov	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800504c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005050:	6a3a      	ldr	r2, [r7, #32]
 8005052:	4952      	ldr	r1, [pc, #328]	; (800519c <I2C_RequestMemoryRead+0x1cc>)
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f000 f8fa 	bl	800524e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d001      	beq.n	8005064 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e097      	b.n	8005194 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005064:	2300      	movs	r3, #0
 8005066:	617b      	str	r3, [r7, #20]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	617b      	str	r3, [r7, #20]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	617b      	str	r3, [r7, #20]
 8005078:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800507a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800507c:	6a39      	ldr	r1, [r7, #32]
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f000 f964 	bl	800534c <I2C_WaitOnTXEFlagUntilTimeout>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00d      	beq.n	80050a6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	2b04      	cmp	r3, #4
 8005090:	d107      	bne.n	80050a2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e076      	b.n	8005194 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050a6:	88fb      	ldrh	r3, [r7, #6]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d105      	bne.n	80050b8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050ac:	893b      	ldrh	r3, [r7, #8]
 80050ae:	b2da      	uxtb	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	611a      	str	r2, [r3, #16]
 80050b6:	e021      	b.n	80050fc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80050b8:	893b      	ldrh	r3, [r7, #8]
 80050ba:	0a1b      	lsrs	r3, r3, #8
 80050bc:	b29b      	uxth	r3, r3
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c8:	6a39      	ldr	r1, [r7, #32]
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f000 f93e 	bl	800534c <I2C_WaitOnTXEFlagUntilTimeout>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00d      	beq.n	80050f2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050da:	2b04      	cmp	r3, #4
 80050dc:	d107      	bne.n	80050ee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e050      	b.n	8005194 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050f2:	893b      	ldrh	r3, [r7, #8]
 80050f4:	b2da      	uxtb	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050fe:	6a39      	ldr	r1, [r7, #32]
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 f923 	bl	800534c <I2C_WaitOnTXEFlagUntilTimeout>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00d      	beq.n	8005128 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005110:	2b04      	cmp	r3, #4
 8005112:	d107      	bne.n	8005124 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005122:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e035      	b.n	8005194 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005136:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513a:	9300      	str	r3, [sp, #0]
 800513c:	6a3b      	ldr	r3, [r7, #32]
 800513e:	2200      	movs	r2, #0
 8005140:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f000 f82b 	bl	80051a0 <I2C_WaitOnFlagUntilTimeout>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00d      	beq.n	800516c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800515a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800515e:	d103      	bne.n	8005168 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005166:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e013      	b.n	8005194 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800516c:	897b      	ldrh	r3, [r7, #10]
 800516e:	b2db      	uxtb	r3, r3
 8005170:	f043 0301 	orr.w	r3, r3, #1
 8005174:	b2da      	uxtb	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800517c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517e:	6a3a      	ldr	r2, [r7, #32]
 8005180:	4906      	ldr	r1, [pc, #24]	; (800519c <I2C_RequestMemoryRead+0x1cc>)
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f000 f863 	bl	800524e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d001      	beq.n	8005192 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e000      	b.n	8005194 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3718      	adds	r7, #24
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	00010002 	.word	0x00010002

080051a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	603b      	str	r3, [r7, #0]
 80051ac:	4613      	mov	r3, r2
 80051ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051b0:	e025      	b.n	80051fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b8:	d021      	beq.n	80051fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ba:	f7fe fc63 	bl	8003a84 <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	683a      	ldr	r2, [r7, #0]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d302      	bcc.n	80051d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d116      	bne.n	80051fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2220      	movs	r2, #32
 80051da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	f043 0220 	orr.w	r2, r3, #32
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e023      	b.n	8005246 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	0c1b      	lsrs	r3, r3, #16
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b01      	cmp	r3, #1
 8005206:	d10d      	bne.n	8005224 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	43da      	mvns	r2, r3
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	4013      	ands	r3, r2
 8005214:	b29b      	uxth	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	bf0c      	ite	eq
 800521a:	2301      	moveq	r3, #1
 800521c:	2300      	movne	r3, #0
 800521e:	b2db      	uxtb	r3, r3
 8005220:	461a      	mov	r2, r3
 8005222:	e00c      	b.n	800523e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	43da      	mvns	r2, r3
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	4013      	ands	r3, r2
 8005230:	b29b      	uxth	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	bf0c      	ite	eq
 8005236:	2301      	moveq	r3, #1
 8005238:	2300      	movne	r3, #0
 800523a:	b2db      	uxtb	r3, r3
 800523c:	461a      	mov	r2, r3
 800523e:	79fb      	ldrb	r3, [r7, #7]
 8005240:	429a      	cmp	r2, r3
 8005242:	d0b6      	beq.n	80051b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b084      	sub	sp, #16
 8005252:	af00      	add	r7, sp, #0
 8005254:	60f8      	str	r0, [r7, #12]
 8005256:	60b9      	str	r1, [r7, #8]
 8005258:	607a      	str	r2, [r7, #4]
 800525a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800525c:	e051      	b.n	8005302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800526c:	d123      	bne.n	80052b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800527c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005286:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2220      	movs	r2, #32
 8005292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a2:	f043 0204 	orr.w	r2, r3, #4
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e046      	b.n	8005344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052bc:	d021      	beq.n	8005302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052be:	f7fe fbe1 	bl	8003a84 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d302      	bcc.n	80052d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d116      	bne.n	8005302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2220      	movs	r2, #32
 80052de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	f043 0220 	orr.w	r2, r3, #32
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e020      	b.n	8005344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	0c1b      	lsrs	r3, r3, #16
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b01      	cmp	r3, #1
 800530a:	d10c      	bne.n	8005326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	43da      	mvns	r2, r3
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	4013      	ands	r3, r2
 8005318:	b29b      	uxth	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	bf14      	ite	ne
 800531e:	2301      	movne	r3, #1
 8005320:	2300      	moveq	r3, #0
 8005322:	b2db      	uxtb	r3, r3
 8005324:	e00b      	b.n	800533e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	43da      	mvns	r2, r3
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	4013      	ands	r3, r2
 8005332:	b29b      	uxth	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	bf14      	ite	ne
 8005338:	2301      	movne	r3, #1
 800533a:	2300      	moveq	r3, #0
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d18d      	bne.n	800525e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005358:	e02d      	b.n	80053b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 f8ce 	bl	80054fc <I2C_IsAcknowledgeFailed>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e02d      	b.n	80053c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005370:	d021      	beq.n	80053b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005372:	f7fe fb87 	bl	8003a84 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	429a      	cmp	r2, r3
 8005380:	d302      	bcc.n	8005388 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d116      	bne.n	80053b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2220      	movs	r2, #32
 8005392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	f043 0220 	orr.w	r2, r3, #32
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e007      	b.n	80053c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c0:	2b80      	cmp	r3, #128	; 0x80
 80053c2:	d1ca      	bne.n	800535a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b084      	sub	sp, #16
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	60f8      	str	r0, [r7, #12]
 80053d6:	60b9      	str	r1, [r7, #8]
 80053d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053da:	e02d      	b.n	8005438 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f000 f88d 	bl	80054fc <I2C_IsAcknowledgeFailed>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d001      	beq.n	80053ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e02d      	b.n	8005448 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f2:	d021      	beq.n	8005438 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053f4:	f7fe fb46 	bl	8003a84 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	68ba      	ldr	r2, [r7, #8]
 8005400:	429a      	cmp	r2, r3
 8005402:	d302      	bcc.n	800540a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d116      	bne.n	8005438 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2220      	movs	r2, #32
 8005414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005424:	f043 0220 	orr.w	r2, r3, #32
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e007      	b.n	8005448 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	f003 0304 	and.w	r3, r3, #4
 8005442:	2b04      	cmp	r3, #4
 8005444:	d1ca      	bne.n	80053dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800545c:	e042      	b.n	80054e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	f003 0310 	and.w	r3, r3, #16
 8005468:	2b10      	cmp	r3, #16
 800546a:	d119      	bne.n	80054a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f06f 0210 	mvn.w	r2, #16
 8005474:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2220      	movs	r2, #32
 8005480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e029      	b.n	80054f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054a0:	f7fe faf0 	bl	8003a84 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d302      	bcc.n	80054b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d116      	bne.n	80054e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2220      	movs	r2, #32
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d0:	f043 0220 	orr.w	r2, r3, #32
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e007      	b.n	80054f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ee:	2b40      	cmp	r3, #64	; 0x40
 80054f0:	d1b5      	bne.n	800545e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3710      	adds	r7, #16
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800550e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005512:	d11b      	bne.n	800554c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800551c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2220      	movs	r2, #32
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005538:	f043 0204 	orr.w	r2, r3, #4
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e000      	b.n	800554e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800555a:	b480      	push	{r7}
 800555c:	b083      	sub	sp, #12
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
 8005562:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b20      	cmp	r3, #32
 800556e:	d129      	bne.n	80055c4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2224      	movs	r2, #36	; 0x24
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f022 0201 	bic.w	r2, r2, #1
 8005586:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0210 	bic.w	r2, r2, #16
 8005596:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	430a      	orrs	r2, r1
 80055a6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0201 	orr.w	r2, r2, #1
 80055b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2220      	movs	r2, #32
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80055c0:	2300      	movs	r3, #0
 80055c2:	e000      	b.n	80055c6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80055c4:	2302      	movs	r3, #2
  }
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b085      	sub	sp, #20
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
 80055da:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80055dc:	2300      	movs	r3, #0
 80055de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b20      	cmp	r3, #32
 80055ea:	d12a      	bne.n	8005642 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2224      	movs	r2, #36	; 0x24
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f022 0201 	bic.w	r2, r2, #1
 8005602:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800560c:	89fb      	ldrh	r3, [r7, #14]
 800560e:	f023 030f 	bic.w	r3, r3, #15
 8005612:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	b29a      	uxth	r2, r3
 8005618:	89fb      	ldrh	r3, [r7, #14]
 800561a:	4313      	orrs	r3, r2
 800561c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	89fa      	ldrh	r2, [r7, #14]
 8005624:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f042 0201 	orr.w	r2, r2, #1
 8005634:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2220      	movs	r2, #32
 800563a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800563e:	2300      	movs	r3, #0
 8005640:	e000      	b.n	8005644 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005642:	2302      	movs	r3, #2
  }
}
 8005644:	4618      	mov	r0, r3
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005652:	b08f      	sub	sp, #60	; 0x3c
 8005654:	af0a      	add	r7, sp, #40	; 0x28
 8005656:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e10f      	b.n	8005882 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2b00      	cmp	r3, #0
 8005672:	d106      	bne.n	8005682 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f00a f927 	bl	800f8d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2203      	movs	r2, #3
 8005686:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800568e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005692:	2b00      	cmp	r3, #0
 8005694:	d102      	bne.n	800569c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f003 fdc8 	bl	8009236 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	603b      	str	r3, [r7, #0]
 80056ac:	687e      	ldr	r6, [r7, #4]
 80056ae:	466d      	mov	r5, sp
 80056b0:	f106 0410 	add.w	r4, r6, #16
 80056b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80056c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80056c4:	1d33      	adds	r3, r6, #4
 80056c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056c8:	6838      	ldr	r0, [r7, #0]
 80056ca:	f003 fc9f 	bl	800900c <USB_CoreInit>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d005      	beq.n	80056e0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2202      	movs	r2, #2
 80056d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e0d0      	b.n	8005882 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2100      	movs	r1, #0
 80056e6:	4618      	mov	r0, r3
 80056e8:	f003 fdb6 	bl	8009258 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056ec:	2300      	movs	r3, #0
 80056ee:	73fb      	strb	r3, [r7, #15]
 80056f0:	e04a      	b.n	8005788 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80056f2:	7bfa      	ldrb	r2, [r7, #15]
 80056f4:	6879      	ldr	r1, [r7, #4]
 80056f6:	4613      	mov	r3, r2
 80056f8:	00db      	lsls	r3, r3, #3
 80056fa:	1a9b      	subs	r3, r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	440b      	add	r3, r1
 8005700:	333d      	adds	r3, #61	; 0x3d
 8005702:	2201      	movs	r2, #1
 8005704:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005706:	7bfa      	ldrb	r2, [r7, #15]
 8005708:	6879      	ldr	r1, [r7, #4]
 800570a:	4613      	mov	r3, r2
 800570c:	00db      	lsls	r3, r3, #3
 800570e:	1a9b      	subs	r3, r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	440b      	add	r3, r1
 8005714:	333c      	adds	r3, #60	; 0x3c
 8005716:	7bfa      	ldrb	r2, [r7, #15]
 8005718:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800571a:	7bfa      	ldrb	r2, [r7, #15]
 800571c:	7bfb      	ldrb	r3, [r7, #15]
 800571e:	b298      	uxth	r0, r3
 8005720:	6879      	ldr	r1, [r7, #4]
 8005722:	4613      	mov	r3, r2
 8005724:	00db      	lsls	r3, r3, #3
 8005726:	1a9b      	subs	r3, r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	440b      	add	r3, r1
 800572c:	3342      	adds	r3, #66	; 0x42
 800572e:	4602      	mov	r2, r0
 8005730:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005732:	7bfa      	ldrb	r2, [r7, #15]
 8005734:	6879      	ldr	r1, [r7, #4]
 8005736:	4613      	mov	r3, r2
 8005738:	00db      	lsls	r3, r3, #3
 800573a:	1a9b      	subs	r3, r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	440b      	add	r3, r1
 8005740:	333f      	adds	r3, #63	; 0x3f
 8005742:	2200      	movs	r2, #0
 8005744:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005746:	7bfa      	ldrb	r2, [r7, #15]
 8005748:	6879      	ldr	r1, [r7, #4]
 800574a:	4613      	mov	r3, r2
 800574c:	00db      	lsls	r3, r3, #3
 800574e:	1a9b      	subs	r3, r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	440b      	add	r3, r1
 8005754:	3344      	adds	r3, #68	; 0x44
 8005756:	2200      	movs	r2, #0
 8005758:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800575a:	7bfa      	ldrb	r2, [r7, #15]
 800575c:	6879      	ldr	r1, [r7, #4]
 800575e:	4613      	mov	r3, r2
 8005760:	00db      	lsls	r3, r3, #3
 8005762:	1a9b      	subs	r3, r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	440b      	add	r3, r1
 8005768:	3348      	adds	r3, #72	; 0x48
 800576a:	2200      	movs	r2, #0
 800576c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800576e:	7bfa      	ldrb	r2, [r7, #15]
 8005770:	6879      	ldr	r1, [r7, #4]
 8005772:	4613      	mov	r3, r2
 8005774:	00db      	lsls	r3, r3, #3
 8005776:	1a9b      	subs	r3, r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	440b      	add	r3, r1
 800577c:	3350      	adds	r3, #80	; 0x50
 800577e:	2200      	movs	r2, #0
 8005780:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005782:	7bfb      	ldrb	r3, [r7, #15]
 8005784:	3301      	adds	r3, #1
 8005786:	73fb      	strb	r3, [r7, #15]
 8005788:	7bfa      	ldrb	r2, [r7, #15]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	429a      	cmp	r2, r3
 8005790:	d3af      	bcc.n	80056f2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005792:	2300      	movs	r3, #0
 8005794:	73fb      	strb	r3, [r7, #15]
 8005796:	e044      	b.n	8005822 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005798:	7bfa      	ldrb	r2, [r7, #15]
 800579a:	6879      	ldr	r1, [r7, #4]
 800579c:	4613      	mov	r3, r2
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	1a9b      	subs	r3, r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	440b      	add	r3, r1
 80057a6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80057aa:	2200      	movs	r2, #0
 80057ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80057ae:	7bfa      	ldrb	r2, [r7, #15]
 80057b0:	6879      	ldr	r1, [r7, #4]
 80057b2:	4613      	mov	r3, r2
 80057b4:	00db      	lsls	r3, r3, #3
 80057b6:	1a9b      	subs	r3, r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	440b      	add	r3, r1
 80057bc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80057c0:	7bfa      	ldrb	r2, [r7, #15]
 80057c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80057c4:	7bfa      	ldrb	r2, [r7, #15]
 80057c6:	6879      	ldr	r1, [r7, #4]
 80057c8:	4613      	mov	r3, r2
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	1a9b      	subs	r3, r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	440b      	add	r3, r1
 80057d2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80057d6:	2200      	movs	r2, #0
 80057d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80057da:	7bfa      	ldrb	r2, [r7, #15]
 80057dc:	6879      	ldr	r1, [r7, #4]
 80057de:	4613      	mov	r3, r2
 80057e0:	00db      	lsls	r3, r3, #3
 80057e2:	1a9b      	subs	r3, r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	440b      	add	r3, r1
 80057e8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80057ec:	2200      	movs	r2, #0
 80057ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80057f0:	7bfa      	ldrb	r2, [r7, #15]
 80057f2:	6879      	ldr	r1, [r7, #4]
 80057f4:	4613      	mov	r3, r2
 80057f6:	00db      	lsls	r3, r3, #3
 80057f8:	1a9b      	subs	r3, r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	440b      	add	r3, r1
 80057fe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005802:	2200      	movs	r2, #0
 8005804:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005806:	7bfa      	ldrb	r2, [r7, #15]
 8005808:	6879      	ldr	r1, [r7, #4]
 800580a:	4613      	mov	r3, r2
 800580c:	00db      	lsls	r3, r3, #3
 800580e:	1a9b      	subs	r3, r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	440b      	add	r3, r1
 8005814:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005818:	2200      	movs	r2, #0
 800581a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800581c:	7bfb      	ldrb	r3, [r7, #15]
 800581e:	3301      	adds	r3, #1
 8005820:	73fb      	strb	r3, [r7, #15]
 8005822:	7bfa      	ldrb	r2, [r7, #15]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	429a      	cmp	r2, r3
 800582a:	d3b5      	bcc.n	8005798 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	603b      	str	r3, [r7, #0]
 8005832:	687e      	ldr	r6, [r7, #4]
 8005834:	466d      	mov	r5, sp
 8005836:	f106 0410 	add.w	r4, r6, #16
 800583a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800583c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800583e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005840:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005842:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005846:	e885 0003 	stmia.w	r5, {r0, r1}
 800584a:	1d33      	adds	r3, r6, #4
 800584c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800584e:	6838      	ldr	r0, [r7, #0]
 8005850:	f003 fd4e 	bl	80092f0 <USB_DevInit>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d005      	beq.n	8005866 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2202      	movs	r2, #2
 800585e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e00d      	b.n	8005882 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4618      	mov	r0, r3
 800587c:	f004 fdca 	bl	800a414 <USB_DevDisconnect>

  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800588a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b084      	sub	sp, #16
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d101      	bne.n	80058a6 <HAL_PCD_Start+0x1c>
 80058a2:	2302      	movs	r3, #2
 80058a4:	e020      	b.n	80058e8 <HAL_PCD_Start+0x5e>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d109      	bne.n	80058ca <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d005      	beq.n	80058ca <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f003 fca0 	bl	8009214 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4618      	mov	r0, r3
 80058da:	f004 fd7a 	bl	800a3d2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3710      	adds	r7, #16
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80058f0:	b590      	push	{r4, r7, lr}
 80058f2:	b08d      	sub	sp, #52	; 0x34
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4618      	mov	r0, r3
 8005908:	f004 fe38 	bl	800a57c <USB_GetMode>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	f040 839d 	bne.w	800604e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4618      	mov	r0, r3
 800591a:	f004 fd9c 	bl	800a456 <USB_ReadInterrupts>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	f000 8393 	beq.w	800604c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4618      	mov	r0, r3
 800592c:	f004 fd93 	bl	800a456 <USB_ReadInterrupts>
 8005930:	4603      	mov	r3, r0
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b02      	cmp	r3, #2
 8005938:	d107      	bne.n	800594a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	695a      	ldr	r2, [r3, #20]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f002 0202 	and.w	r2, r2, #2
 8005948:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4618      	mov	r0, r3
 8005950:	f004 fd81 	bl	800a456 <USB_ReadInterrupts>
 8005954:	4603      	mov	r3, r0
 8005956:	f003 0310 	and.w	r3, r3, #16
 800595a:	2b10      	cmp	r3, #16
 800595c:	d161      	bne.n	8005a22 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	699a      	ldr	r2, [r3, #24]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 0210 	bic.w	r2, r2, #16
 800596c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	f003 020f 	and.w	r2, r3, #15
 800597a:	4613      	mov	r3, r2
 800597c:	00db      	lsls	r3, r3, #3
 800597e:	1a9b      	subs	r3, r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	4413      	add	r3, r2
 800598a:	3304      	adds	r3, #4
 800598c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	0c5b      	lsrs	r3, r3, #17
 8005992:	f003 030f 	and.w	r3, r3, #15
 8005996:	2b02      	cmp	r3, #2
 8005998:	d124      	bne.n	80059e4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800599a:	69ba      	ldr	r2, [r7, #24]
 800599c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80059a0:	4013      	ands	r3, r2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d035      	beq.n	8005a12 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	091b      	lsrs	r3, r3, #4
 80059ae:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80059b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	461a      	mov	r2, r3
 80059b8:	6a38      	ldr	r0, [r7, #32]
 80059ba:	f004 fbb8 	bl	800a12e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	68da      	ldr	r2, [r3, #12]
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	091b      	lsrs	r3, r3, #4
 80059c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059ca:	441a      	add	r2, r3
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	699a      	ldr	r2, [r3, #24]
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	091b      	lsrs	r3, r3, #4
 80059d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059dc:	441a      	add	r2, r3
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	619a      	str	r2, [r3, #24]
 80059e2:	e016      	b.n	8005a12 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	0c5b      	lsrs	r3, r3, #17
 80059e8:	f003 030f 	and.w	r3, r3, #15
 80059ec:	2b06      	cmp	r3, #6
 80059ee:	d110      	bne.n	8005a12 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80059f6:	2208      	movs	r2, #8
 80059f8:	4619      	mov	r1, r3
 80059fa:	6a38      	ldr	r0, [r7, #32]
 80059fc:	f004 fb97 	bl	800a12e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	699a      	ldr	r2, [r3, #24]
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	091b      	lsrs	r3, r3, #4
 8005a08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a0c:	441a      	add	r2, r3
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	699a      	ldr	r2, [r3, #24]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f042 0210 	orr.w	r2, r2, #16
 8005a20:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f004 fd15 	bl	800a456 <USB_ReadInterrupts>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a32:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005a36:	d16e      	bne.n	8005b16 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4618      	mov	r0, r3
 8005a42:	f004 fd1b 	bl	800a47c <USB_ReadDevAllOutEpInterrupt>
 8005a46:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005a48:	e062      	b.n	8005b10 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4c:	f003 0301 	and.w	r3, r3, #1
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d057      	beq.n	8005b04 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a5a:	b2d2      	uxtb	r2, r2
 8005a5c:	4611      	mov	r1, r2
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f004 fd40 	bl	800a4e4 <USB_ReadDevOutEPInterrupt>
 8005a64:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00c      	beq.n	8005a8a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	2301      	movs	r3, #1
 8005a80:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005a82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 fdb1 	bl	80065ec <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	f003 0308 	and.w	r3, r3, #8
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00c      	beq.n	8005aae <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	2308      	movs	r3, #8
 8005aa4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005aa6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 feab 	bl	8006804 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	f003 0310 	and.w	r3, r3, #16
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d008      	beq.n	8005aca <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	2310      	movs	r3, #16
 8005ac8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	f003 0320 	and.w	r3, r3, #32
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d008      	beq.n	8005ae6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	2320      	movs	r3, #32
 8005ae4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d009      	beq.n	8005b04 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afc:	461a      	mov	r2, r3
 8005afe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b02:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	3301      	adds	r3, #1
 8005b08:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0c:	085b      	lsrs	r3, r3, #1
 8005b0e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d199      	bne.n	8005a4a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f004 fc9b 	bl	800a456 <USB_ReadInterrupts>
 8005b20:	4603      	mov	r3, r0
 8005b22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b2a:	f040 80c0 	bne.w	8005cae <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f004 fcbc 	bl	800a4b0 <USB_ReadDevAllInEpInterrupt>
 8005b38:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005b3e:	e0b2      	b.n	8005ca6 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b42:	f003 0301 	and.w	r3, r3, #1
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f000 80a7 	beq.w	8005c9a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b52:	b2d2      	uxtb	r2, r2
 8005b54:	4611      	mov	r1, r2
 8005b56:	4618      	mov	r0, r3
 8005b58:	f004 fce2 	bl	800a520 <USB_ReadDevInEPInterrupt>
 8005b5c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d057      	beq.n	8005c18 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6a:	f003 030f 	and.w	r3, r3, #15
 8005b6e:	2201      	movs	r2, #1
 8005b70:	fa02 f303 	lsl.w	r3, r2, r3
 8005b74:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	43db      	mvns	r3, r3
 8005b82:	69f9      	ldr	r1, [r7, #28]
 8005b84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b88:	4013      	ands	r3, r2
 8005b8a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b98:	461a      	mov	r2, r3
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d132      	bne.n	8005c0c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005ba6:	6879      	ldr	r1, [r7, #4]
 8005ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005baa:	4613      	mov	r3, r2
 8005bac:	00db      	lsls	r3, r3, #3
 8005bae:	1a9b      	subs	r3, r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	440b      	add	r3, r1
 8005bb4:	3348      	adds	r3, #72	; 0x48
 8005bb6:	6819      	ldr	r1, [r3, #0]
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	00db      	lsls	r3, r3, #3
 8005bc0:	1a9b      	subs	r3, r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4403      	add	r3, r0
 8005bc6:	3344      	adds	r3, #68	; 0x44
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4419      	add	r1, r3
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	00db      	lsls	r3, r3, #3
 8005bd4:	1a9b      	subs	r3, r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	4403      	add	r3, r0
 8005bda:	3348      	adds	r3, #72	; 0x48
 8005bdc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d113      	bne.n	8005c0c <HAL_PCD_IRQHandler+0x31c>
 8005be4:	6879      	ldr	r1, [r7, #4]
 8005be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005be8:	4613      	mov	r3, r2
 8005bea:	00db      	lsls	r3, r3, #3
 8005bec:	1a9b      	subs	r3, r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	440b      	add	r3, r1
 8005bf2:	3350      	adds	r3, #80	; 0x50
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d108      	bne.n	8005c0c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6818      	ldr	r0, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005c04:	461a      	mov	r2, r3
 8005c06:	2101      	movs	r1, #1
 8005c08:	f004 fcea 	bl	800a5e0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	4619      	mov	r1, r3
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f009 feeb 	bl	800f9ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	f003 0308 	and.w	r3, r3, #8
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d008      	beq.n	8005c34 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c2e:	461a      	mov	r2, r3
 8005c30:	2308      	movs	r3, #8
 8005c32:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f003 0310 	and.w	r3, r3, #16
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d008      	beq.n	8005c50 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c40:	015a      	lsls	r2, r3, #5
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	2310      	movs	r3, #16
 8005c4e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d008      	beq.n	8005c6c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5c:	015a      	lsls	r2, r3, #5
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	4413      	add	r3, r2
 8005c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c66:	461a      	mov	r2, r3
 8005c68:	2340      	movs	r3, #64	; 0x40
 8005c6a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d008      	beq.n	8005c88 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	015a      	lsls	r2, r3, #5
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c82:	461a      	mov	r2, r3
 8005c84:	2302      	movs	r3, #2
 8005c86:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d003      	beq.n	8005c9a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005c92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 fc1b 	bl	80064d0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca2:	085b      	lsrs	r3, r3, #1
 8005ca4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f47f af49 	bne.w	8005b40 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f004 fbcf 	bl	800a456 <USB_ReadInterrupts>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cc2:	d122      	bne.n	8005d0a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	69fa      	ldr	r2, [r7, #28]
 8005cce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cd2:	f023 0301 	bic.w	r3, r3, #1
 8005cd6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d108      	bne.n	8005cf4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005cea:	2100      	movs	r1, #0
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 fe27 	bl	8006940 <HAL_PCDEx_LPM_Callback>
 8005cf2:	e002      	b.n	8005cfa <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f009 fef1 	bl	800fadc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	695a      	ldr	r2, [r3, #20]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005d08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f004 fba1 	bl	800a456 <USB_ReadInterrupts>
 8005d14:	4603      	mov	r3, r0
 8005d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d1e:	d112      	bne.n	8005d46 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d102      	bne.n	8005d36 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f009 fead 	bl	800fa90 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	695a      	ldr	r2, [r3, #20]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005d44:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f004 fb83 	bl	800a456 <USB_ReadInterrupts>
 8005d50:	4603      	mov	r3, r0
 8005d52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d5a:	f040 80c7 	bne.w	8005eec <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	69fa      	ldr	r2, [r7, #28]
 8005d68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d6c:	f023 0301 	bic.w	r3, r3, #1
 8005d70:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2110      	movs	r1, #16
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f003 fc1d 	bl	80095b8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d7e:	2300      	movs	r3, #0
 8005d80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d82:	e056      	b.n	8005e32 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d86:	015a      	lsls	r2, r3, #5
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d90:	461a      	mov	r2, r3
 8005d92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d96:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9a:	015a      	lsls	r2, r3, #5
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	4413      	add	r3, r2
 8005da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005da8:	0151      	lsls	r1, r2, #5
 8005daa:	69fa      	ldr	r2, [r7, #28]
 8005dac:	440a      	add	r2, r1
 8005dae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005db2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005db6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dba:	015a      	lsls	r2, r3, #5
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dc8:	0151      	lsls	r1, r2, #5
 8005dca:	69fa      	ldr	r2, [r7, #28]
 8005dcc:	440a      	add	r2, r1
 8005dce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005dd6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de4:	461a      	mov	r2, r3
 8005de6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005dea:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dee:	015a      	lsls	r2, r3, #5
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	4413      	add	r3, r2
 8005df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dfc:	0151      	lsls	r1, r2, #5
 8005dfe:	69fa      	ldr	r2, [r7, #28]
 8005e00:	440a      	add	r2, r1
 8005e02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e0a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0e:	015a      	lsls	r2, r3, #5
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e1c:	0151      	lsls	r1, r2, #5
 8005e1e:	69fa      	ldr	r2, [r7, #28]
 8005e20:	440a      	add	r2, r1
 8005e22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e2a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2e:	3301      	adds	r3, #1
 8005e30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d3a3      	bcc.n	8005d84 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	69fa      	ldr	r2, [r7, #28]
 8005e46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e4a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005e4e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d016      	beq.n	8005e86 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e62:	69fa      	ldr	r2, [r7, #28]
 8005e64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e68:	f043 030b 	orr.w	r3, r3, #11
 8005e6c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e78:	69fa      	ldr	r2, [r7, #28]
 8005e7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e7e:	f043 030b 	orr.w	r3, r3, #11
 8005e82:	6453      	str	r3, [r2, #68]	; 0x44
 8005e84:	e015      	b.n	8005eb2 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	69fa      	ldr	r2, [r7, #28]
 8005e90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005e98:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005e9c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	69fa      	ldr	r2, [r7, #28]
 8005ea8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005eac:	f043 030b 	orr.w	r3, r3, #11
 8005eb0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	69fa      	ldr	r2, [r7, #28]
 8005ebc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ec0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005ec4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6818      	ldr	r0, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	f004 fb82 	bl	800a5e0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	695a      	ldr	r2, [r3, #20]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005eea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f004 fab0 	bl	800a456 <USB_ReadInterrupts>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005efc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f00:	d124      	bne.n	8005f4c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f004 fb46 	bl	800a598 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4618      	mov	r0, r3
 8005f12:	f003 fbae 	bl	8009672 <USB_GetDevSpeed>
 8005f16:	4603      	mov	r3, r0
 8005f18:	461a      	mov	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681c      	ldr	r4, [r3, #0]
 8005f22:	f001 f957 	bl	80071d4 <HAL_RCC_GetHCLKFreq>
 8005f26:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	461a      	mov	r2, r3
 8005f30:	4620      	mov	r0, r4
 8005f32:	f003 f8cd 	bl	80090d0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f009 fd81 	bl	800fa3e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	695a      	ldr	r2, [r3, #20]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005f4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4618      	mov	r0, r3
 8005f52:	f004 fa80 	bl	800a456 <USB_ReadInterrupts>
 8005f56:	4603      	mov	r3, r0
 8005f58:	f003 0308 	and.w	r3, r3, #8
 8005f5c:	2b08      	cmp	r3, #8
 8005f5e:	d10a      	bne.n	8005f76 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f009 fd5e 	bl	800fa22 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	695a      	ldr	r2, [r3, #20]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f002 0208 	and.w	r2, r2, #8
 8005f74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f004 fa6b 	bl	800a456 <USB_ReadInterrupts>
 8005f80:	4603      	mov	r3, r0
 8005f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f8a:	d10f      	bne.n	8005fac <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	4619      	mov	r1, r3
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f009 fdc0 	bl	800fb1c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	695a      	ldr	r2, [r3, #20]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005faa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f004 fa50 	bl	800a456 <USB_ReadInterrupts>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fc0:	d10f      	bne.n	8005fe2 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	4619      	mov	r1, r3
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f009 fd93 	bl	800faf8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	695a      	ldr	r2, [r3, #20]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005fe0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f004 fa35 	bl	800a456 <USB_ReadInterrupts>
 8005fec:	4603      	mov	r3, r0
 8005fee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ff6:	d10a      	bne.n	800600e <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f009 fda1 	bl	800fb40 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	695a      	ldr	r2, [r3, #20]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800600c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4618      	mov	r0, r3
 8006014:	f004 fa1f 	bl	800a456 <USB_ReadInterrupts>
 8006018:	4603      	mov	r3, r0
 800601a:	f003 0304 	and.w	r3, r3, #4
 800601e:	2b04      	cmp	r3, #4
 8006020:	d115      	bne.n	800604e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	f003 0304 	and.w	r3, r3, #4
 8006030:	2b00      	cmp	r3, #0
 8006032:	d002      	beq.n	800603a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f009 fd91 	bl	800fb5c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6859      	ldr	r1, [r3, #4]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	69ba      	ldr	r2, [r7, #24]
 8006046:	430a      	orrs	r2, r1
 8006048:	605a      	str	r2, [r3, #4]
 800604a:	e000      	b.n	800604e <HAL_PCD_IRQHandler+0x75e>
      return;
 800604c:	bf00      	nop
    }
  }
}
 800604e:	3734      	adds	r7, #52	; 0x34
 8006050:	46bd      	mov	sp, r7
 8006052:	bd90      	pop	{r4, r7, pc}

08006054 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	460b      	mov	r3, r1
 800605e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006066:	2b01      	cmp	r3, #1
 8006068:	d101      	bne.n	800606e <HAL_PCD_SetAddress+0x1a>
 800606a:	2302      	movs	r3, #2
 800606c:	e013      	b.n	8006096 <HAL_PCD_SetAddress+0x42>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	78fa      	ldrb	r2, [r7, #3]
 800607a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	78fa      	ldrb	r2, [r7, #3]
 8006084:	4611      	mov	r1, r2
 8006086:	4618      	mov	r0, r3
 8006088:	f004 f97d 	bl	800a386 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b084      	sub	sp, #16
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
 80060a6:	4608      	mov	r0, r1
 80060a8:	4611      	mov	r1, r2
 80060aa:	461a      	mov	r2, r3
 80060ac:	4603      	mov	r3, r0
 80060ae:	70fb      	strb	r3, [r7, #3]
 80060b0:	460b      	mov	r3, r1
 80060b2:	803b      	strh	r3, [r7, #0]
 80060b4:	4613      	mov	r3, r2
 80060b6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80060b8:	2300      	movs	r3, #0
 80060ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80060bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	da0f      	bge.n	80060e4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060c4:	78fb      	ldrb	r3, [r7, #3]
 80060c6:	f003 020f 	and.w	r2, r3, #15
 80060ca:	4613      	mov	r3, r2
 80060cc:	00db      	lsls	r3, r3, #3
 80060ce:	1a9b      	subs	r3, r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	3338      	adds	r3, #56	; 0x38
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	4413      	add	r3, r2
 80060d8:	3304      	adds	r3, #4
 80060da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2201      	movs	r2, #1
 80060e0:	705a      	strb	r2, [r3, #1]
 80060e2:	e00f      	b.n	8006104 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060e4:	78fb      	ldrb	r3, [r7, #3]
 80060e6:	f003 020f 	and.w	r2, r3, #15
 80060ea:	4613      	mov	r3, r2
 80060ec:	00db      	lsls	r3, r3, #3
 80060ee:	1a9b      	subs	r3, r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	4413      	add	r3, r2
 80060fa:	3304      	adds	r3, #4
 80060fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006104:	78fb      	ldrb	r3, [r7, #3]
 8006106:	f003 030f 	and.w	r3, r3, #15
 800610a:	b2da      	uxtb	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006110:	883a      	ldrh	r2, [r7, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	78ba      	ldrb	r2, [r7, #2]
 800611a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	785b      	ldrb	r3, [r3, #1]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d004      	beq.n	800612e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	b29a      	uxth	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800612e:	78bb      	ldrb	r3, [r7, #2]
 8006130:	2b02      	cmp	r3, #2
 8006132:	d102      	bne.n	800613a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006140:	2b01      	cmp	r3, #1
 8006142:	d101      	bne.n	8006148 <HAL_PCD_EP_Open+0xaa>
 8006144:	2302      	movs	r3, #2
 8006146:	e00e      	b.n	8006166 <HAL_PCD_EP_Open+0xc8>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68f9      	ldr	r1, [r7, #12]
 8006156:	4618      	mov	r0, r3
 8006158:	f003 fab0 	bl	80096bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006164:	7afb      	ldrb	r3, [r7, #11]
}
 8006166:	4618      	mov	r0, r3
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b084      	sub	sp, #16
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
 8006176:	460b      	mov	r3, r1
 8006178:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800617a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800617e:	2b00      	cmp	r3, #0
 8006180:	da0f      	bge.n	80061a2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006182:	78fb      	ldrb	r3, [r7, #3]
 8006184:	f003 020f 	and.w	r2, r3, #15
 8006188:	4613      	mov	r3, r2
 800618a:	00db      	lsls	r3, r3, #3
 800618c:	1a9b      	subs	r3, r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	3338      	adds	r3, #56	; 0x38
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	4413      	add	r3, r2
 8006196:	3304      	adds	r3, #4
 8006198:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2201      	movs	r2, #1
 800619e:	705a      	strb	r2, [r3, #1]
 80061a0:	e00f      	b.n	80061c2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061a2:	78fb      	ldrb	r3, [r7, #3]
 80061a4:	f003 020f 	and.w	r2, r3, #15
 80061a8:	4613      	mov	r3, r2
 80061aa:	00db      	lsls	r3, r3, #3
 80061ac:	1a9b      	subs	r3, r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	4413      	add	r3, r2
 80061b8:	3304      	adds	r3, #4
 80061ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80061c2:	78fb      	ldrb	r3, [r7, #3]
 80061c4:	f003 030f 	and.w	r3, r3, #15
 80061c8:	b2da      	uxtb	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d101      	bne.n	80061dc <HAL_PCD_EP_Close+0x6e>
 80061d8:	2302      	movs	r3, #2
 80061da:	e00e      	b.n	80061fa <HAL_PCD_EP_Close+0x8c>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68f9      	ldr	r1, [r7, #12]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f003 faee 	bl	80097cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b086      	sub	sp, #24
 8006206:	af00      	add	r7, sp, #0
 8006208:	60f8      	str	r0, [r7, #12]
 800620a:	607a      	str	r2, [r7, #4]
 800620c:	603b      	str	r3, [r7, #0]
 800620e:	460b      	mov	r3, r1
 8006210:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006212:	7afb      	ldrb	r3, [r7, #11]
 8006214:	f003 020f 	and.w	r2, r3, #15
 8006218:	4613      	mov	r3, r2
 800621a:	00db      	lsls	r3, r3, #3
 800621c:	1a9b      	subs	r3, r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	4413      	add	r3, r2
 8006228:	3304      	adds	r3, #4
 800622a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	683a      	ldr	r2, [r7, #0]
 8006236:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	2200      	movs	r2, #0
 800623c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	2200      	movs	r2, #0
 8006242:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006244:	7afb      	ldrb	r3, [r7, #11]
 8006246:	f003 030f 	and.w	r3, r3, #15
 800624a:	b2da      	uxtb	r2, r3
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d102      	bne.n	800625e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800625e:	7afb      	ldrb	r3, [r7, #11]
 8006260:	f003 030f 	and.w	r3, r3, #15
 8006264:	2b00      	cmp	r3, #0
 8006266:	d109      	bne.n	800627c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6818      	ldr	r0, [r3, #0]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	b2db      	uxtb	r3, r3
 8006272:	461a      	mov	r2, r3
 8006274:	6979      	ldr	r1, [r7, #20]
 8006276:	f003 fdc9 	bl	8009e0c <USB_EP0StartXfer>
 800627a:	e008      	b.n	800628e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6818      	ldr	r0, [r3, #0]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	b2db      	uxtb	r3, r3
 8006286:	461a      	mov	r2, r3
 8006288:	6979      	ldr	r1, [r7, #20]
 800628a:	f003 fb7b 	bl	8009984 <USB_EPStartXfer>
  }

  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3718      	adds	r7, #24
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	460b      	mov	r3, r1
 80062a2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80062a4:	78fb      	ldrb	r3, [r7, #3]
 80062a6:	f003 020f 	and.w	r2, r3, #15
 80062aa:	6879      	ldr	r1, [r7, #4]
 80062ac:	4613      	mov	r3, r2
 80062ae:	00db      	lsls	r3, r3, #3
 80062b0:	1a9b      	subs	r3, r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	440b      	add	r3, r1
 80062b6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80062ba:	681b      	ldr	r3, [r3, #0]
}
 80062bc:	4618      	mov	r0, r3
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	607a      	str	r2, [r7, #4]
 80062d2:	603b      	str	r3, [r7, #0]
 80062d4:	460b      	mov	r3, r1
 80062d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062d8:	7afb      	ldrb	r3, [r7, #11]
 80062da:	f003 020f 	and.w	r2, r3, #15
 80062de:	4613      	mov	r3, r2
 80062e0:	00db      	lsls	r3, r3, #3
 80062e2:	1a9b      	subs	r3, r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	3338      	adds	r3, #56	; 0x38
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	4413      	add	r3, r2
 80062ec:	3304      	adds	r3, #4
 80062ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	683a      	ldr	r2, [r7, #0]
 80062fa:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	2200      	movs	r2, #0
 8006300:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	2201      	movs	r2, #1
 8006306:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006308:	7afb      	ldrb	r3, [r7, #11]
 800630a:	f003 030f 	and.w	r3, r3, #15
 800630e:	b2da      	uxtb	r2, r3
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d102      	bne.n	8006322 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006322:	7afb      	ldrb	r3, [r7, #11]
 8006324:	f003 030f 	and.w	r3, r3, #15
 8006328:	2b00      	cmp	r3, #0
 800632a:	d109      	bne.n	8006340 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6818      	ldr	r0, [r3, #0]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	b2db      	uxtb	r3, r3
 8006336:	461a      	mov	r2, r3
 8006338:	6979      	ldr	r1, [r7, #20]
 800633a:	f003 fd67 	bl	8009e0c <USB_EP0StartXfer>
 800633e:	e008      	b.n	8006352 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6818      	ldr	r0, [r3, #0]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	b2db      	uxtb	r3, r3
 800634a:	461a      	mov	r2, r3
 800634c:	6979      	ldr	r1, [r7, #20]
 800634e:	f003 fb19 	bl	8009984 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3718      	adds	r7, #24
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	460b      	mov	r3, r1
 8006366:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006368:	78fb      	ldrb	r3, [r7, #3]
 800636a:	f003 020f 	and.w	r2, r3, #15
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	429a      	cmp	r2, r3
 8006374:	d901      	bls.n	800637a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e050      	b.n	800641c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800637a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800637e:	2b00      	cmp	r3, #0
 8006380:	da0f      	bge.n	80063a2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006382:	78fb      	ldrb	r3, [r7, #3]
 8006384:	f003 020f 	and.w	r2, r3, #15
 8006388:	4613      	mov	r3, r2
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	1a9b      	subs	r3, r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	3338      	adds	r3, #56	; 0x38
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	4413      	add	r3, r2
 8006396:	3304      	adds	r3, #4
 8006398:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2201      	movs	r2, #1
 800639e:	705a      	strb	r2, [r3, #1]
 80063a0:	e00d      	b.n	80063be <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80063a2:	78fa      	ldrb	r2, [r7, #3]
 80063a4:	4613      	mov	r3, r2
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	1a9b      	subs	r3, r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	4413      	add	r3, r2
 80063b4:	3304      	adds	r3, #4
 80063b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2201      	movs	r2, #1
 80063c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063c4:	78fb      	ldrb	r3, [r7, #3]
 80063c6:	f003 030f 	and.w	r3, r3, #15
 80063ca:	b2da      	uxtb	r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d101      	bne.n	80063de <HAL_PCD_EP_SetStall+0x82>
 80063da:	2302      	movs	r3, #2
 80063dc:	e01e      	b.n	800641c <HAL_PCD_EP_SetStall+0xc0>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68f9      	ldr	r1, [r7, #12]
 80063ec:	4618      	mov	r0, r3
 80063ee:	f003 fef6 	bl	800a1de <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80063f2:	78fb      	ldrb	r3, [r7, #3]
 80063f4:	f003 030f 	and.w	r3, r3, #15
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d10a      	bne.n	8006412 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6818      	ldr	r0, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	b2d9      	uxtb	r1, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800640c:	461a      	mov	r2, r3
 800640e:	f004 f8e7 	bl	800a5e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	460b      	mov	r3, r1
 800642e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006430:	78fb      	ldrb	r3, [r7, #3]
 8006432:	f003 020f 	and.w	r2, r3, #15
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	429a      	cmp	r2, r3
 800643c:	d901      	bls.n	8006442 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e042      	b.n	80064c8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006442:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006446:	2b00      	cmp	r3, #0
 8006448:	da0f      	bge.n	800646a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800644a:	78fb      	ldrb	r3, [r7, #3]
 800644c:	f003 020f 	and.w	r2, r3, #15
 8006450:	4613      	mov	r3, r2
 8006452:	00db      	lsls	r3, r3, #3
 8006454:	1a9b      	subs	r3, r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	3338      	adds	r3, #56	; 0x38
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	4413      	add	r3, r2
 800645e:	3304      	adds	r3, #4
 8006460:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2201      	movs	r2, #1
 8006466:	705a      	strb	r2, [r3, #1]
 8006468:	e00f      	b.n	800648a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800646a:	78fb      	ldrb	r3, [r7, #3]
 800646c:	f003 020f 	and.w	r2, r3, #15
 8006470:	4613      	mov	r3, r2
 8006472:	00db      	lsls	r3, r3, #3
 8006474:	1a9b      	subs	r3, r3, r2
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	4413      	add	r3, r2
 8006480:	3304      	adds	r3, #4
 8006482:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006490:	78fb      	ldrb	r3, [r7, #3]
 8006492:	f003 030f 	and.w	r3, r3, #15
 8006496:	b2da      	uxtb	r2, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d101      	bne.n	80064aa <HAL_PCD_EP_ClrStall+0x86>
 80064a6:	2302      	movs	r3, #2
 80064a8:	e00e      	b.n	80064c8 <HAL_PCD_EP_ClrStall+0xa4>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68f9      	ldr	r1, [r7, #12]
 80064b8:	4618      	mov	r0, r3
 80064ba:	f003 fefe 	bl	800a2ba <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b08a      	sub	sp, #40	; 0x28
 80064d4:	af02      	add	r7, sp, #8
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80064e4:	683a      	ldr	r2, [r7, #0]
 80064e6:	4613      	mov	r3, r2
 80064e8:	00db      	lsls	r3, r3, #3
 80064ea:	1a9b      	subs	r3, r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	3338      	adds	r3, #56	; 0x38
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	4413      	add	r3, r2
 80064f4:	3304      	adds	r3, #4
 80064f6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	699a      	ldr	r2, [r3, #24]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	429a      	cmp	r2, r3
 8006502:	d901      	bls.n	8006508 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e06c      	b.n	80065e2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	695a      	ldr	r2, [r3, #20]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	69fa      	ldr	r2, [r7, #28]
 800651a:	429a      	cmp	r2, r3
 800651c:	d902      	bls.n	8006524 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	3303      	adds	r3, #3
 8006528:	089b      	lsrs	r3, r3, #2
 800652a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800652c:	e02b      	b.n	8006586 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	695a      	ldr	r2, [r3, #20]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	69fa      	ldr	r2, [r7, #28]
 8006540:	429a      	cmp	r2, r3
 8006542:	d902      	bls.n	800654a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	3303      	adds	r3, #3
 800654e:	089b      	lsrs	r3, r3, #2
 8006550:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	68d9      	ldr	r1, [r3, #12]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	b2da      	uxtb	r2, r3
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006562:	b2db      	uxtb	r3, r3
 8006564:	9300      	str	r3, [sp, #0]
 8006566:	4603      	mov	r3, r0
 8006568:	6978      	ldr	r0, [r7, #20]
 800656a:	f003 fda2 	bl	800a0b2 <USB_WritePacket>

    ep->xfer_buff  += len;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	68da      	ldr	r2, [r3, #12]
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	441a      	add	r2, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	699a      	ldr	r2, [r3, #24]
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	441a      	add	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	015a      	lsls	r2, r3, #5
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	4413      	add	r3, r2
 800658e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	b29b      	uxth	r3, r3
 8006596:	69ba      	ldr	r2, [r7, #24]
 8006598:	429a      	cmp	r2, r3
 800659a:	d809      	bhi.n	80065b0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	699a      	ldr	r2, [r3, #24]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d203      	bcs.n	80065b0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	695b      	ldr	r3, [r3, #20]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1be      	bne.n	800652e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	695a      	ldr	r2, [r3, #20]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d811      	bhi.n	80065e0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	f003 030f 	and.w	r3, r3, #15
 80065c2:	2201      	movs	r2, #1
 80065c4:	fa02 f303 	lsl.w	r3, r2, r3
 80065c8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	43db      	mvns	r3, r3
 80065d6:	6939      	ldr	r1, [r7, #16]
 80065d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065dc:	4013      	ands	r3, r2
 80065de:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3720      	adds	r7, #32
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
	...

080065ec <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	333c      	adds	r3, #60	; 0x3c
 8006604:	3304      	adds	r3, #4
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	015a      	lsls	r2, r3, #5
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	4413      	add	r3, r2
 8006612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	2b01      	cmp	r3, #1
 8006620:	f040 80a0 	bne.w	8006764 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	f003 0308 	and.w	r3, r3, #8
 800662a:	2b00      	cmp	r3, #0
 800662c:	d015      	beq.n	800665a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	4a72      	ldr	r2, [pc, #456]	; (80067fc <PCD_EP_OutXfrComplete_int+0x210>)
 8006632:	4293      	cmp	r3, r2
 8006634:	f240 80dd 	bls.w	80067f2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800663e:	2b00      	cmp	r3, #0
 8006640:	f000 80d7 	beq.w	80067f2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	4413      	add	r3, r2
 800664c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006650:	461a      	mov	r2, r3
 8006652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006656:	6093      	str	r3, [r2, #8]
 8006658:	e0cb      	b.n	80067f2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	f003 0320 	and.w	r3, r3, #32
 8006660:	2b00      	cmp	r3, #0
 8006662:	d009      	beq.n	8006678 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	015a      	lsls	r2, r3, #5
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	4413      	add	r3, r2
 800666c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006670:	461a      	mov	r2, r3
 8006672:	2320      	movs	r3, #32
 8006674:	6093      	str	r3, [r2, #8]
 8006676:	e0bc      	b.n	80067f2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800667e:	2b00      	cmp	r3, #0
 8006680:	f040 80b7 	bne.w	80067f2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	4a5d      	ldr	r2, [pc, #372]	; (80067fc <PCD_EP_OutXfrComplete_int+0x210>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d90f      	bls.n	80066ac <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00a      	beq.n	80066ac <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	015a      	lsls	r2, r3, #5
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	4413      	add	r3, r2
 800669e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a2:	461a      	mov	r2, r3
 80066a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066a8:	6093      	str	r3, [r2, #8]
 80066aa:	e0a2      	b.n	80067f2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80066ac:	6879      	ldr	r1, [r7, #4]
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	4613      	mov	r3, r2
 80066b2:	00db      	lsls	r3, r3, #3
 80066b4:	1a9b      	subs	r3, r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	440b      	add	r3, r1
 80066ba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80066be:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	0159      	lsls	r1, r3, #5
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	440b      	add	r3, r1
 80066c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80066d2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	4613      	mov	r3, r2
 80066da:	00db      	lsls	r3, r3, #3
 80066dc:	1a9b      	subs	r3, r3, r2
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	4403      	add	r3, r0
 80066e2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80066e6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80066e8:	6879      	ldr	r1, [r7, #4]
 80066ea:	683a      	ldr	r2, [r7, #0]
 80066ec:	4613      	mov	r3, r2
 80066ee:	00db      	lsls	r3, r3, #3
 80066f0:	1a9b      	subs	r3, r3, r2
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	440b      	add	r3, r1
 80066f6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80066fa:	6819      	ldr	r1, [r3, #0]
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	4613      	mov	r3, r2
 8006702:	00db      	lsls	r3, r3, #3
 8006704:	1a9b      	subs	r3, r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4403      	add	r3, r0
 800670a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4419      	add	r1, r3
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	683a      	ldr	r2, [r7, #0]
 8006716:	4613      	mov	r3, r2
 8006718:	00db      	lsls	r3, r3, #3
 800671a:	1a9b      	subs	r3, r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	4403      	add	r3, r0
 8006720:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006724:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d114      	bne.n	8006756 <PCD_EP_OutXfrComplete_int+0x16a>
 800672c:	6879      	ldr	r1, [r7, #4]
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	4613      	mov	r3, r2
 8006732:	00db      	lsls	r3, r3, #3
 8006734:	1a9b      	subs	r3, r3, r2
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	440b      	add	r3, r1
 800673a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d108      	bne.n	8006756 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6818      	ldr	r0, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800674e:	461a      	mov	r2, r3
 8006750:	2101      	movs	r1, #1
 8006752:	f003 ff45 	bl	800a5e0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	b2db      	uxtb	r3, r3
 800675a:	4619      	mov	r1, r3
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f009 f92b 	bl	800f9b8 <HAL_PCD_DataOutStageCallback>
 8006762:	e046      	b.n	80067f2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	4a26      	ldr	r2, [pc, #152]	; (8006800 <PCD_EP_OutXfrComplete_int+0x214>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d124      	bne.n	80067b6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00a      	beq.n	800678c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	015a      	lsls	r2, r3, #5
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	4413      	add	r3, r2
 800677e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006782:	461a      	mov	r2, r3
 8006784:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006788:	6093      	str	r3, [r2, #8]
 800678a:	e032      	b.n	80067f2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	f003 0320 	and.w	r3, r3, #32
 8006792:	2b00      	cmp	r3, #0
 8006794:	d008      	beq.n	80067a8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	015a      	lsls	r2, r3, #5
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	4413      	add	r3, r2
 800679e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a2:	461a      	mov	r2, r3
 80067a4:	2320      	movs	r3, #32
 80067a6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	4619      	mov	r1, r3
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f009 f902 	bl	800f9b8 <HAL_PCD_DataOutStageCallback>
 80067b4:	e01d      	b.n	80067f2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d114      	bne.n	80067e6 <PCD_EP_OutXfrComplete_int+0x1fa>
 80067bc:	6879      	ldr	r1, [r7, #4]
 80067be:	683a      	ldr	r2, [r7, #0]
 80067c0:	4613      	mov	r3, r2
 80067c2:	00db      	lsls	r3, r3, #3
 80067c4:	1a9b      	subs	r3, r3, r2
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	440b      	add	r3, r1
 80067ca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d108      	bne.n	80067e6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6818      	ldr	r0, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80067de:	461a      	mov	r2, r3
 80067e0:	2100      	movs	r1, #0
 80067e2:	f003 fefd 	bl	800a5e0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	4619      	mov	r1, r3
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f009 f8e3 	bl	800f9b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3718      	adds	r7, #24
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	4f54300a 	.word	0x4f54300a
 8006800:	4f54310a 	.word	0x4f54310a

08006804 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b086      	sub	sp, #24
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	333c      	adds	r3, #60	; 0x3c
 800681c:	3304      	adds	r3, #4
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	015a      	lsls	r2, r3, #5
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	4413      	add	r3, r2
 800682a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	4a15      	ldr	r2, [pc, #84]	; (800688c <PCD_EP_OutSetupPacket_int+0x88>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d90e      	bls.n	8006858 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006840:	2b00      	cmp	r3, #0
 8006842:	d009      	beq.n	8006858 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	015a      	lsls	r2, r3, #5
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	4413      	add	r3, r2
 800684c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006850:	461a      	mov	r2, r3
 8006852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006856:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f009 f89b 	bl	800f994 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	4a0a      	ldr	r2, [pc, #40]	; (800688c <PCD_EP_OutSetupPacket_int+0x88>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d90c      	bls.n	8006880 <PCD_EP_OutSetupPacket_int+0x7c>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	2b01      	cmp	r3, #1
 800686c:	d108      	bne.n	8006880 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6818      	ldr	r0, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006878:	461a      	mov	r2, r3
 800687a:	2101      	movs	r1, #1
 800687c:	f003 feb0 	bl	800a5e0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3718      	adds	r7, #24
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	4f54300a 	.word	0x4f54300a

08006890 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006890:	b480      	push	{r7}
 8006892:	b085      	sub	sp, #20
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	460b      	mov	r3, r1
 800689a:	70fb      	strb	r3, [r7, #3]
 800689c:	4613      	mov	r3, r2
 800689e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80068a8:	78fb      	ldrb	r3, [r7, #3]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d107      	bne.n	80068be <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80068ae:	883b      	ldrh	r3, [r7, #0]
 80068b0:	0419      	lsls	r1, r3, #16
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	430a      	orrs	r2, r1
 80068ba:	629a      	str	r2, [r3, #40]	; 0x28
 80068bc:	e028      	b.n	8006910 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c4:	0c1b      	lsrs	r3, r3, #16
 80068c6:	68ba      	ldr	r2, [r7, #8]
 80068c8:	4413      	add	r3, r2
 80068ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80068cc:	2300      	movs	r3, #0
 80068ce:	73fb      	strb	r3, [r7, #15]
 80068d0:	e00d      	b.n	80068ee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	7bfb      	ldrb	r3, [r7, #15]
 80068d8:	3340      	adds	r3, #64	; 0x40
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4413      	add	r3, r2
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	0c1b      	lsrs	r3, r3, #16
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	4413      	add	r3, r2
 80068e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80068e8:	7bfb      	ldrb	r3, [r7, #15]
 80068ea:	3301      	adds	r3, #1
 80068ec:	73fb      	strb	r3, [r7, #15]
 80068ee:	7bfa      	ldrb	r2, [r7, #15]
 80068f0:	78fb      	ldrb	r3, [r7, #3]
 80068f2:	3b01      	subs	r3, #1
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d3ec      	bcc.n	80068d2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80068f8:	883b      	ldrh	r3, [r7, #0]
 80068fa:	0418      	lsls	r0, r3, #16
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6819      	ldr	r1, [r3, #0]
 8006900:	78fb      	ldrb	r3, [r7, #3]
 8006902:	3b01      	subs	r3, #1
 8006904:	68ba      	ldr	r2, [r7, #8]
 8006906:	4302      	orrs	r2, r0
 8006908:	3340      	adds	r3, #64	; 0x40
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	440b      	add	r3, r1
 800690e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3714      	adds	r7, #20
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr

0800691e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800691e:	b480      	push	{r7}
 8006920:	b083      	sub	sp, #12
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
 8006926:	460b      	mov	r3, r1
 8006928:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	887a      	ldrh	r2, [r7, #2]
 8006930:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	460b      	mov	r3, r1
 800694a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800694c:	bf00      	nop
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b086      	sub	sp, #24
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d101      	bne.n	800696a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e264      	b.n	8006e34 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	2b00      	cmp	r3, #0
 8006974:	d075      	beq.n	8006a62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006976:	4ba3      	ldr	r3, [pc, #652]	; (8006c04 <HAL_RCC_OscConfig+0x2ac>)
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f003 030c 	and.w	r3, r3, #12
 800697e:	2b04      	cmp	r3, #4
 8006980:	d00c      	beq.n	800699c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006982:	4ba0      	ldr	r3, [pc, #640]	; (8006c04 <HAL_RCC_OscConfig+0x2ac>)
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800698a:	2b08      	cmp	r3, #8
 800698c:	d112      	bne.n	80069b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800698e:	4b9d      	ldr	r3, [pc, #628]	; (8006c04 <HAL_RCC_OscConfig+0x2ac>)
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006996:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800699a:	d10b      	bne.n	80069b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800699c:	4b99      	ldr	r3, [pc, #612]	; (8006c04 <HAL_RCC_OscConfig+0x2ac>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d05b      	beq.n	8006a60 <HAL_RCC_OscConfig+0x108>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d157      	bne.n	8006a60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e23f      	b.n	8006e34 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069bc:	d106      	bne.n	80069cc <HAL_RCC_OscConfig+0x74>
 80069be:	4b91      	ldr	r3, [pc, #580]	; (8006c04 <HAL_RCC_OscConfig+0x2ac>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a90      	ldr	r2, [pc, #576]	; (8006c04 <HAL_RCC_OscConfig+0x2ac>)
 80069c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069c8:	6013      	str	r3, [r2, #0]
 80069ca:	e01d      	b.n	8006a08 <HAL_RCC_OscConfig+0xb0>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069d4:	d10c      	bne.n	80069f0 <HAL_RCC_OscConfig+0x98>
 80069d6:	4b8b      	ldr	r3, [pc, #556]	; (8006c04 <HAL_RCC_OscConfig+0x2ac>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a8a      	ldr	r2, [pc, #552]	; (8006c04 <HAL_RCC_OscConfig+0x2ac>)
 80069dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069e0:	6013      	str	r3, [r2, #0]
 80069e2:	4b88      	ldr	r3, [pc, #544]	; (8006c04 <HAL_RCC_OscConfig+0x2ac>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a87      	ldr	r2, [pc, #540]	; (8006c04 <HAL_RCC_OscConfig+0x2ac>)
 80069e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069ec:	6013      	str	r3, [r2, #0]
 80069ee:	e00b      	b.n	8006a08 <HAL_RCC_OscConfig+0xb0>
 80069f0:	4b84      	ldr	r3, [pc, #528]	; (8006c04 <HAL_RCC_OscConfig+0x2ac>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a83      	ldr	r2, [pc, #524]	; (8006c04 <HAL_RCC_OscConfig+0x2ac>)
 80069f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069fa:	6013      	str	r3, [r2, #0]
 80069fc:	4b81      	ldr	r3, [pc, #516]	; (8006c04 <HAL_RCC_OscConfig+0x2ac>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a80      	ldr	r2, [pc, #512]	; (8006c04 <HAL_RCC_OscConfig+0x2ac>)
 8006a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d013      	beq.n	8006a38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a10:	f7fd f838 	bl	8003a84 <HAL_GetTick>
 8006a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a16:	e008      	b.n	8006a2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a18:	f7fd f834 	bl	8003a84 <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	2b64      	cmp	r3, #100	; 0x64
 8006a24:	d901      	bls.n	8006a2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e204      	b.n	8006e34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a2a:	4b76      	ldr	r3, [pc, #472]	; (8006c04 <HAL_RCC_OscConfig+0x2ac>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d0f0      	beq.n	8006a18 <HAL_RCC_OscConfig+0xc0>
 8006a36:	e014      	b.n	8006a62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a38:	f7fd f824 	bl	8003a84 <HAL_GetTick>
 8006a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a3e:	e008      	b.n	8006a52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a40:	f7fd f820 	bl	8003a84 <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	2b64      	cmp	r3, #100	; 0x64
 8006a4c:	d901      	bls.n	8006a52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e1f0      	b.n	8006e34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a52:	4b6c      	ldr	r3, [pc, #432]	; (8006c04 <HAL_RCC_OscConfig+0x2ac>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1f0      	bne.n	8006a40 <HAL_RCC_OscConfig+0xe8>
 8006a5e:	e000      	b.n	8006a62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0302 	and.w	r3, r3, #2
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d063      	beq.n	8006b36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a6e:	4b65      	ldr	r3, [pc, #404]	; (8006c04 <HAL_RCC_OscConfig+0x2ac>)
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f003 030c 	and.w	r3, r3, #12
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00b      	beq.n	8006a92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a7a:	4b62      	ldr	r3, [pc, #392]	; (8006c04 <HAL_RCC_OscConfig+0x2ac>)
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a82:	2b08      	cmp	r3, #8
 8006a84:	d11c      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a86:	4b5f      	ldr	r3, [pc, #380]	; (8006c04 <HAL_RCC_OscConfig+0x2ac>)
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d116      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a92:	4b5c      	ldr	r3, [pc, #368]	; (8006c04 <HAL_RCC_OscConfig+0x2ac>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 0302 	and.w	r3, r3, #2
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d005      	beq.n	8006aaa <HAL_RCC_OscConfig+0x152>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d001      	beq.n	8006aaa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e1c4      	b.n	8006e34 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006aaa:	4b56      	ldr	r3, [pc, #344]	; (8006c04 <HAL_RCC_OscConfig+0x2ac>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	00db      	lsls	r3, r3, #3
 8006ab8:	4952      	ldr	r1, [pc, #328]	; (8006c04 <HAL_RCC_OscConfig+0x2ac>)
 8006aba:	4313      	orrs	r3, r2
 8006abc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006abe:	e03a      	b.n	8006b36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d020      	beq.n	8006b0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ac8:	4b4f      	ldr	r3, [pc, #316]	; (8006c08 <HAL_RCC_OscConfig+0x2b0>)
 8006aca:	2201      	movs	r2, #1
 8006acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ace:	f7fc ffd9 	bl	8003a84 <HAL_GetTick>
 8006ad2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ad4:	e008      	b.n	8006ae8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ad6:	f7fc ffd5 	bl	8003a84 <HAL_GetTick>
 8006ada:	4602      	mov	r2, r0
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d901      	bls.n	8006ae8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	e1a5      	b.n	8006e34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ae8:	4b46      	ldr	r3, [pc, #280]	; (8006c04 <HAL_RCC_OscConfig+0x2ac>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 0302 	and.w	r3, r3, #2
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d0f0      	beq.n	8006ad6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006af4:	4b43      	ldr	r3, [pc, #268]	; (8006c04 <HAL_RCC_OscConfig+0x2ac>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	00db      	lsls	r3, r3, #3
 8006b02:	4940      	ldr	r1, [pc, #256]	; (8006c04 <HAL_RCC_OscConfig+0x2ac>)
 8006b04:	4313      	orrs	r3, r2
 8006b06:	600b      	str	r3, [r1, #0]
 8006b08:	e015      	b.n	8006b36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b0a:	4b3f      	ldr	r3, [pc, #252]	; (8006c08 <HAL_RCC_OscConfig+0x2b0>)
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b10:	f7fc ffb8 	bl	8003a84 <HAL_GetTick>
 8006b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b16:	e008      	b.n	8006b2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b18:	f7fc ffb4 	bl	8003a84 <HAL_GetTick>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d901      	bls.n	8006b2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e184      	b.n	8006e34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b2a:	4b36      	ldr	r3, [pc, #216]	; (8006c04 <HAL_RCC_OscConfig+0x2ac>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0302 	and.w	r3, r3, #2
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1f0      	bne.n	8006b18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 0308 	and.w	r3, r3, #8
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d030      	beq.n	8006ba4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d016      	beq.n	8006b78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b4a:	4b30      	ldr	r3, [pc, #192]	; (8006c0c <HAL_RCC_OscConfig+0x2b4>)
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b50:	f7fc ff98 	bl	8003a84 <HAL_GetTick>
 8006b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b56:	e008      	b.n	8006b6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b58:	f7fc ff94 	bl	8003a84 <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d901      	bls.n	8006b6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e164      	b.n	8006e34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b6a:	4b26      	ldr	r3, [pc, #152]	; (8006c04 <HAL_RCC_OscConfig+0x2ac>)
 8006b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b6e:	f003 0302 	and.w	r3, r3, #2
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d0f0      	beq.n	8006b58 <HAL_RCC_OscConfig+0x200>
 8006b76:	e015      	b.n	8006ba4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b78:	4b24      	ldr	r3, [pc, #144]	; (8006c0c <HAL_RCC_OscConfig+0x2b4>)
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b7e:	f7fc ff81 	bl	8003a84 <HAL_GetTick>
 8006b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b84:	e008      	b.n	8006b98 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b86:	f7fc ff7d 	bl	8003a84 <HAL_GetTick>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d901      	bls.n	8006b98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006b94:	2303      	movs	r3, #3
 8006b96:	e14d      	b.n	8006e34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b98:	4b1a      	ldr	r3, [pc, #104]	; (8006c04 <HAL_RCC_OscConfig+0x2ac>)
 8006b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b9c:	f003 0302 	and.w	r3, r3, #2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d1f0      	bne.n	8006b86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0304 	and.w	r3, r3, #4
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f000 80a0 	beq.w	8006cf2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bb6:	4b13      	ldr	r3, [pc, #76]	; (8006c04 <HAL_RCC_OscConfig+0x2ac>)
 8006bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10f      	bne.n	8006be2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	60bb      	str	r3, [r7, #8]
 8006bc6:	4b0f      	ldr	r3, [pc, #60]	; (8006c04 <HAL_RCC_OscConfig+0x2ac>)
 8006bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bca:	4a0e      	ldr	r2, [pc, #56]	; (8006c04 <HAL_RCC_OscConfig+0x2ac>)
 8006bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8006bd2:	4b0c      	ldr	r3, [pc, #48]	; (8006c04 <HAL_RCC_OscConfig+0x2ac>)
 8006bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bda:	60bb      	str	r3, [r7, #8]
 8006bdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bde:	2301      	movs	r3, #1
 8006be0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006be2:	4b0b      	ldr	r3, [pc, #44]	; (8006c10 <HAL_RCC_OscConfig+0x2b8>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d121      	bne.n	8006c32 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006bee:	4b08      	ldr	r3, [pc, #32]	; (8006c10 <HAL_RCC_OscConfig+0x2b8>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a07      	ldr	r2, [pc, #28]	; (8006c10 <HAL_RCC_OscConfig+0x2b8>)
 8006bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bfa:	f7fc ff43 	bl	8003a84 <HAL_GetTick>
 8006bfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c00:	e011      	b.n	8006c26 <HAL_RCC_OscConfig+0x2ce>
 8006c02:	bf00      	nop
 8006c04:	40023800 	.word	0x40023800
 8006c08:	42470000 	.word	0x42470000
 8006c0c:	42470e80 	.word	0x42470e80
 8006c10:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c14:	f7fc ff36 	bl	8003a84 <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d901      	bls.n	8006c26 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e106      	b.n	8006e34 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c26:	4b85      	ldr	r3, [pc, #532]	; (8006e3c <HAL_RCC_OscConfig+0x4e4>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d0f0      	beq.n	8006c14 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d106      	bne.n	8006c48 <HAL_RCC_OscConfig+0x2f0>
 8006c3a:	4b81      	ldr	r3, [pc, #516]	; (8006e40 <HAL_RCC_OscConfig+0x4e8>)
 8006c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c3e:	4a80      	ldr	r2, [pc, #512]	; (8006e40 <HAL_RCC_OscConfig+0x4e8>)
 8006c40:	f043 0301 	orr.w	r3, r3, #1
 8006c44:	6713      	str	r3, [r2, #112]	; 0x70
 8006c46:	e01c      	b.n	8006c82 <HAL_RCC_OscConfig+0x32a>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	2b05      	cmp	r3, #5
 8006c4e:	d10c      	bne.n	8006c6a <HAL_RCC_OscConfig+0x312>
 8006c50:	4b7b      	ldr	r3, [pc, #492]	; (8006e40 <HAL_RCC_OscConfig+0x4e8>)
 8006c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c54:	4a7a      	ldr	r2, [pc, #488]	; (8006e40 <HAL_RCC_OscConfig+0x4e8>)
 8006c56:	f043 0304 	orr.w	r3, r3, #4
 8006c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8006c5c:	4b78      	ldr	r3, [pc, #480]	; (8006e40 <HAL_RCC_OscConfig+0x4e8>)
 8006c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c60:	4a77      	ldr	r2, [pc, #476]	; (8006e40 <HAL_RCC_OscConfig+0x4e8>)
 8006c62:	f043 0301 	orr.w	r3, r3, #1
 8006c66:	6713      	str	r3, [r2, #112]	; 0x70
 8006c68:	e00b      	b.n	8006c82 <HAL_RCC_OscConfig+0x32a>
 8006c6a:	4b75      	ldr	r3, [pc, #468]	; (8006e40 <HAL_RCC_OscConfig+0x4e8>)
 8006c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c6e:	4a74      	ldr	r2, [pc, #464]	; (8006e40 <HAL_RCC_OscConfig+0x4e8>)
 8006c70:	f023 0301 	bic.w	r3, r3, #1
 8006c74:	6713      	str	r3, [r2, #112]	; 0x70
 8006c76:	4b72      	ldr	r3, [pc, #456]	; (8006e40 <HAL_RCC_OscConfig+0x4e8>)
 8006c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c7a:	4a71      	ldr	r2, [pc, #452]	; (8006e40 <HAL_RCC_OscConfig+0x4e8>)
 8006c7c:	f023 0304 	bic.w	r3, r3, #4
 8006c80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d015      	beq.n	8006cb6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c8a:	f7fc fefb 	bl	8003a84 <HAL_GetTick>
 8006c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c90:	e00a      	b.n	8006ca8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c92:	f7fc fef7 	bl	8003a84 <HAL_GetTick>
 8006c96:	4602      	mov	r2, r0
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d901      	bls.n	8006ca8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	e0c5      	b.n	8006e34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ca8:	4b65      	ldr	r3, [pc, #404]	; (8006e40 <HAL_RCC_OscConfig+0x4e8>)
 8006caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cac:	f003 0302 	and.w	r3, r3, #2
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d0ee      	beq.n	8006c92 <HAL_RCC_OscConfig+0x33a>
 8006cb4:	e014      	b.n	8006ce0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cb6:	f7fc fee5 	bl	8003a84 <HAL_GetTick>
 8006cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cbc:	e00a      	b.n	8006cd4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cbe:	f7fc fee1 	bl	8003a84 <HAL_GetTick>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d901      	bls.n	8006cd4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e0af      	b.n	8006e34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cd4:	4b5a      	ldr	r3, [pc, #360]	; (8006e40 <HAL_RCC_OscConfig+0x4e8>)
 8006cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd8:	f003 0302 	and.w	r3, r3, #2
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1ee      	bne.n	8006cbe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ce0:	7dfb      	ldrb	r3, [r7, #23]
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d105      	bne.n	8006cf2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ce6:	4b56      	ldr	r3, [pc, #344]	; (8006e40 <HAL_RCC_OscConfig+0x4e8>)
 8006ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cea:	4a55      	ldr	r2, [pc, #340]	; (8006e40 <HAL_RCC_OscConfig+0x4e8>)
 8006cec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cf0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f000 809b 	beq.w	8006e32 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006cfc:	4b50      	ldr	r3, [pc, #320]	; (8006e40 <HAL_RCC_OscConfig+0x4e8>)
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	f003 030c 	and.w	r3, r3, #12
 8006d04:	2b08      	cmp	r3, #8
 8006d06:	d05c      	beq.n	8006dc2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	699b      	ldr	r3, [r3, #24]
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d141      	bne.n	8006d94 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d10:	4b4c      	ldr	r3, [pc, #304]	; (8006e44 <HAL_RCC_OscConfig+0x4ec>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d16:	f7fc feb5 	bl	8003a84 <HAL_GetTick>
 8006d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d1c:	e008      	b.n	8006d30 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d1e:	f7fc feb1 	bl	8003a84 <HAL_GetTick>
 8006d22:	4602      	mov	r2, r0
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	d901      	bls.n	8006d30 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	e081      	b.n	8006e34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d30:	4b43      	ldr	r3, [pc, #268]	; (8006e40 <HAL_RCC_OscConfig+0x4e8>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1f0      	bne.n	8006d1e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	69da      	ldr	r2, [r3, #28]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a1b      	ldr	r3, [r3, #32]
 8006d44:	431a      	orrs	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4a:	019b      	lsls	r3, r3, #6
 8006d4c:	431a      	orrs	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d52:	085b      	lsrs	r3, r3, #1
 8006d54:	3b01      	subs	r3, #1
 8006d56:	041b      	lsls	r3, r3, #16
 8006d58:	431a      	orrs	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5e:	061b      	lsls	r3, r3, #24
 8006d60:	4937      	ldr	r1, [pc, #220]	; (8006e40 <HAL_RCC_OscConfig+0x4e8>)
 8006d62:	4313      	orrs	r3, r2
 8006d64:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d66:	4b37      	ldr	r3, [pc, #220]	; (8006e44 <HAL_RCC_OscConfig+0x4ec>)
 8006d68:	2201      	movs	r2, #1
 8006d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d6c:	f7fc fe8a 	bl	8003a84 <HAL_GetTick>
 8006d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d72:	e008      	b.n	8006d86 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d74:	f7fc fe86 	bl	8003a84 <HAL_GetTick>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	1ad3      	subs	r3, r2, r3
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d901      	bls.n	8006d86 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	e056      	b.n	8006e34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d86:	4b2e      	ldr	r3, [pc, #184]	; (8006e40 <HAL_RCC_OscConfig+0x4e8>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d0f0      	beq.n	8006d74 <HAL_RCC_OscConfig+0x41c>
 8006d92:	e04e      	b.n	8006e32 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d94:	4b2b      	ldr	r3, [pc, #172]	; (8006e44 <HAL_RCC_OscConfig+0x4ec>)
 8006d96:	2200      	movs	r2, #0
 8006d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d9a:	f7fc fe73 	bl	8003a84 <HAL_GetTick>
 8006d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006da0:	e008      	b.n	8006db4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006da2:	f7fc fe6f 	bl	8003a84 <HAL_GetTick>
 8006da6:	4602      	mov	r2, r0
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d901      	bls.n	8006db4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e03f      	b.n	8006e34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006db4:	4b22      	ldr	r3, [pc, #136]	; (8006e40 <HAL_RCC_OscConfig+0x4e8>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1f0      	bne.n	8006da2 <HAL_RCC_OscConfig+0x44a>
 8006dc0:	e037      	b.n	8006e32 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d101      	bne.n	8006dce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e032      	b.n	8006e34 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006dce:	4b1c      	ldr	r3, [pc, #112]	; (8006e40 <HAL_RCC_OscConfig+0x4e8>)
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d028      	beq.n	8006e2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d121      	bne.n	8006e2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d11a      	bne.n	8006e2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006dfe:	4013      	ands	r3, r2
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e04:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d111      	bne.n	8006e2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e14:	085b      	lsrs	r3, r3, #1
 8006e16:	3b01      	subs	r3, #1
 8006e18:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d107      	bne.n	8006e2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e28:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d001      	beq.n	8006e32 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e000      	b.n	8006e34 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3718      	adds	r7, #24
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	40007000 	.word	0x40007000
 8006e40:	40023800 	.word	0x40023800
 8006e44:	42470060 	.word	0x42470060

08006e48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d101      	bne.n	8006e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e0cc      	b.n	8006ff6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e5c:	4b68      	ldr	r3, [pc, #416]	; (8007000 <HAL_RCC_ClockConfig+0x1b8>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 030f 	and.w	r3, r3, #15
 8006e64:	683a      	ldr	r2, [r7, #0]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d90c      	bls.n	8006e84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e6a:	4b65      	ldr	r3, [pc, #404]	; (8007000 <HAL_RCC_ClockConfig+0x1b8>)
 8006e6c:	683a      	ldr	r2, [r7, #0]
 8006e6e:	b2d2      	uxtb	r2, r2
 8006e70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e72:	4b63      	ldr	r3, [pc, #396]	; (8007000 <HAL_RCC_ClockConfig+0x1b8>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 030f 	and.w	r3, r3, #15
 8006e7a:	683a      	ldr	r2, [r7, #0]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d001      	beq.n	8006e84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e0b8      	b.n	8006ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0302 	and.w	r3, r3, #2
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d020      	beq.n	8006ed2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0304 	and.w	r3, r3, #4
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d005      	beq.n	8006ea8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e9c:	4b59      	ldr	r3, [pc, #356]	; (8007004 <HAL_RCC_ClockConfig+0x1bc>)
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	4a58      	ldr	r2, [pc, #352]	; (8007004 <HAL_RCC_ClockConfig+0x1bc>)
 8006ea2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006ea6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0308 	and.w	r3, r3, #8
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d005      	beq.n	8006ec0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006eb4:	4b53      	ldr	r3, [pc, #332]	; (8007004 <HAL_RCC_ClockConfig+0x1bc>)
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	4a52      	ldr	r2, [pc, #328]	; (8007004 <HAL_RCC_ClockConfig+0x1bc>)
 8006eba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006ebe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ec0:	4b50      	ldr	r3, [pc, #320]	; (8007004 <HAL_RCC_ClockConfig+0x1bc>)
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	494d      	ldr	r1, [pc, #308]	; (8007004 <HAL_RCC_ClockConfig+0x1bc>)
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 0301 	and.w	r3, r3, #1
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d044      	beq.n	8006f68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d107      	bne.n	8006ef6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ee6:	4b47      	ldr	r3, [pc, #284]	; (8007004 <HAL_RCC_ClockConfig+0x1bc>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d119      	bne.n	8006f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e07f      	b.n	8006ff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d003      	beq.n	8006f06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	d107      	bne.n	8006f16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f06:	4b3f      	ldr	r3, [pc, #252]	; (8007004 <HAL_RCC_ClockConfig+0x1bc>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d109      	bne.n	8006f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e06f      	b.n	8006ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f16:	4b3b      	ldr	r3, [pc, #236]	; (8007004 <HAL_RCC_ClockConfig+0x1bc>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0302 	and.w	r3, r3, #2
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e067      	b.n	8006ff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f26:	4b37      	ldr	r3, [pc, #220]	; (8007004 <HAL_RCC_ClockConfig+0x1bc>)
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	f023 0203 	bic.w	r2, r3, #3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	4934      	ldr	r1, [pc, #208]	; (8007004 <HAL_RCC_ClockConfig+0x1bc>)
 8006f34:	4313      	orrs	r3, r2
 8006f36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f38:	f7fc fda4 	bl	8003a84 <HAL_GetTick>
 8006f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f3e:	e00a      	b.n	8006f56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f40:	f7fc fda0 	bl	8003a84 <HAL_GetTick>
 8006f44:	4602      	mov	r2, r0
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d901      	bls.n	8006f56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f52:	2303      	movs	r3, #3
 8006f54:	e04f      	b.n	8006ff6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f56:	4b2b      	ldr	r3, [pc, #172]	; (8007004 <HAL_RCC_ClockConfig+0x1bc>)
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f003 020c 	and.w	r2, r3, #12
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d1eb      	bne.n	8006f40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f68:	4b25      	ldr	r3, [pc, #148]	; (8007000 <HAL_RCC_ClockConfig+0x1b8>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 030f 	and.w	r3, r3, #15
 8006f70:	683a      	ldr	r2, [r7, #0]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d20c      	bcs.n	8006f90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f76:	4b22      	ldr	r3, [pc, #136]	; (8007000 <HAL_RCC_ClockConfig+0x1b8>)
 8006f78:	683a      	ldr	r2, [r7, #0]
 8006f7a:	b2d2      	uxtb	r2, r2
 8006f7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f7e:	4b20      	ldr	r3, [pc, #128]	; (8007000 <HAL_RCC_ClockConfig+0x1b8>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 030f 	and.w	r3, r3, #15
 8006f86:	683a      	ldr	r2, [r7, #0]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d001      	beq.n	8006f90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e032      	b.n	8006ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0304 	and.w	r3, r3, #4
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d008      	beq.n	8006fae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f9c:	4b19      	ldr	r3, [pc, #100]	; (8007004 <HAL_RCC_ClockConfig+0x1bc>)
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	4916      	ldr	r1, [pc, #88]	; (8007004 <HAL_RCC_ClockConfig+0x1bc>)
 8006faa:	4313      	orrs	r3, r2
 8006fac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0308 	and.w	r3, r3, #8
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d009      	beq.n	8006fce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006fba:	4b12      	ldr	r3, [pc, #72]	; (8007004 <HAL_RCC_ClockConfig+0x1bc>)
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	00db      	lsls	r3, r3, #3
 8006fc8:	490e      	ldr	r1, [pc, #56]	; (8007004 <HAL_RCC_ClockConfig+0x1bc>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006fce:	f000 f821 	bl	8007014 <HAL_RCC_GetSysClockFreq>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	4b0b      	ldr	r3, [pc, #44]	; (8007004 <HAL_RCC_ClockConfig+0x1bc>)
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	091b      	lsrs	r3, r3, #4
 8006fda:	f003 030f 	and.w	r3, r3, #15
 8006fde:	490a      	ldr	r1, [pc, #40]	; (8007008 <HAL_RCC_ClockConfig+0x1c0>)
 8006fe0:	5ccb      	ldrb	r3, [r1, r3]
 8006fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8006fe6:	4a09      	ldr	r2, [pc, #36]	; (800700c <HAL_RCC_ClockConfig+0x1c4>)
 8006fe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006fea:	4b09      	ldr	r3, [pc, #36]	; (8007010 <HAL_RCC_ClockConfig+0x1c8>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7fc fd04 	bl	80039fc <HAL_InitTick>

  return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3710      	adds	r7, #16
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	40023c00 	.word	0x40023c00
 8007004:	40023800 	.word	0x40023800
 8007008:	08015438 	.word	0x08015438
 800700c:	20000000 	.word	0x20000000
 8007010:	20000004 	.word	0x20000004

08007014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007014:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007018:	b084      	sub	sp, #16
 800701a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800701c:	2300      	movs	r3, #0
 800701e:	607b      	str	r3, [r7, #4]
 8007020:	2300      	movs	r3, #0
 8007022:	60fb      	str	r3, [r7, #12]
 8007024:	2300      	movs	r3, #0
 8007026:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007028:	2300      	movs	r3, #0
 800702a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800702c:	4b67      	ldr	r3, [pc, #412]	; (80071cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	f003 030c 	and.w	r3, r3, #12
 8007034:	2b08      	cmp	r3, #8
 8007036:	d00d      	beq.n	8007054 <HAL_RCC_GetSysClockFreq+0x40>
 8007038:	2b08      	cmp	r3, #8
 800703a:	f200 80bd 	bhi.w	80071b8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800703e:	2b00      	cmp	r3, #0
 8007040:	d002      	beq.n	8007048 <HAL_RCC_GetSysClockFreq+0x34>
 8007042:	2b04      	cmp	r3, #4
 8007044:	d003      	beq.n	800704e <HAL_RCC_GetSysClockFreq+0x3a>
 8007046:	e0b7      	b.n	80071b8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007048:	4b61      	ldr	r3, [pc, #388]	; (80071d0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800704a:	60bb      	str	r3, [r7, #8]
       break;
 800704c:	e0b7      	b.n	80071be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800704e:	4b60      	ldr	r3, [pc, #384]	; (80071d0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007050:	60bb      	str	r3, [r7, #8]
      break;
 8007052:	e0b4      	b.n	80071be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007054:	4b5d      	ldr	r3, [pc, #372]	; (80071cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800705c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800705e:	4b5b      	ldr	r3, [pc, #364]	; (80071cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007066:	2b00      	cmp	r3, #0
 8007068:	d04d      	beq.n	8007106 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800706a:	4b58      	ldr	r3, [pc, #352]	; (80071cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	099b      	lsrs	r3, r3, #6
 8007070:	461a      	mov	r2, r3
 8007072:	f04f 0300 	mov.w	r3, #0
 8007076:	f240 10ff 	movw	r0, #511	; 0x1ff
 800707a:	f04f 0100 	mov.w	r1, #0
 800707e:	ea02 0800 	and.w	r8, r2, r0
 8007082:	ea03 0901 	and.w	r9, r3, r1
 8007086:	4640      	mov	r0, r8
 8007088:	4649      	mov	r1, r9
 800708a:	f04f 0200 	mov.w	r2, #0
 800708e:	f04f 0300 	mov.w	r3, #0
 8007092:	014b      	lsls	r3, r1, #5
 8007094:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007098:	0142      	lsls	r2, r0, #5
 800709a:	4610      	mov	r0, r2
 800709c:	4619      	mov	r1, r3
 800709e:	ebb0 0008 	subs.w	r0, r0, r8
 80070a2:	eb61 0109 	sbc.w	r1, r1, r9
 80070a6:	f04f 0200 	mov.w	r2, #0
 80070aa:	f04f 0300 	mov.w	r3, #0
 80070ae:	018b      	lsls	r3, r1, #6
 80070b0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80070b4:	0182      	lsls	r2, r0, #6
 80070b6:	1a12      	subs	r2, r2, r0
 80070b8:	eb63 0301 	sbc.w	r3, r3, r1
 80070bc:	f04f 0000 	mov.w	r0, #0
 80070c0:	f04f 0100 	mov.w	r1, #0
 80070c4:	00d9      	lsls	r1, r3, #3
 80070c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80070ca:	00d0      	lsls	r0, r2, #3
 80070cc:	4602      	mov	r2, r0
 80070ce:	460b      	mov	r3, r1
 80070d0:	eb12 0208 	adds.w	r2, r2, r8
 80070d4:	eb43 0309 	adc.w	r3, r3, r9
 80070d8:	f04f 0000 	mov.w	r0, #0
 80070dc:	f04f 0100 	mov.w	r1, #0
 80070e0:	0299      	lsls	r1, r3, #10
 80070e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80070e6:	0290      	lsls	r0, r2, #10
 80070e8:	4602      	mov	r2, r0
 80070ea:	460b      	mov	r3, r1
 80070ec:	4610      	mov	r0, r2
 80070ee:	4619      	mov	r1, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	461a      	mov	r2, r3
 80070f4:	f04f 0300 	mov.w	r3, #0
 80070f8:	f7f9 fdd6 	bl	8000ca8 <__aeabi_uldivmod>
 80070fc:	4602      	mov	r2, r0
 80070fe:	460b      	mov	r3, r1
 8007100:	4613      	mov	r3, r2
 8007102:	60fb      	str	r3, [r7, #12]
 8007104:	e04a      	b.n	800719c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007106:	4b31      	ldr	r3, [pc, #196]	; (80071cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	099b      	lsrs	r3, r3, #6
 800710c:	461a      	mov	r2, r3
 800710e:	f04f 0300 	mov.w	r3, #0
 8007112:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007116:	f04f 0100 	mov.w	r1, #0
 800711a:	ea02 0400 	and.w	r4, r2, r0
 800711e:	ea03 0501 	and.w	r5, r3, r1
 8007122:	4620      	mov	r0, r4
 8007124:	4629      	mov	r1, r5
 8007126:	f04f 0200 	mov.w	r2, #0
 800712a:	f04f 0300 	mov.w	r3, #0
 800712e:	014b      	lsls	r3, r1, #5
 8007130:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007134:	0142      	lsls	r2, r0, #5
 8007136:	4610      	mov	r0, r2
 8007138:	4619      	mov	r1, r3
 800713a:	1b00      	subs	r0, r0, r4
 800713c:	eb61 0105 	sbc.w	r1, r1, r5
 8007140:	f04f 0200 	mov.w	r2, #0
 8007144:	f04f 0300 	mov.w	r3, #0
 8007148:	018b      	lsls	r3, r1, #6
 800714a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800714e:	0182      	lsls	r2, r0, #6
 8007150:	1a12      	subs	r2, r2, r0
 8007152:	eb63 0301 	sbc.w	r3, r3, r1
 8007156:	f04f 0000 	mov.w	r0, #0
 800715a:	f04f 0100 	mov.w	r1, #0
 800715e:	00d9      	lsls	r1, r3, #3
 8007160:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007164:	00d0      	lsls	r0, r2, #3
 8007166:	4602      	mov	r2, r0
 8007168:	460b      	mov	r3, r1
 800716a:	1912      	adds	r2, r2, r4
 800716c:	eb45 0303 	adc.w	r3, r5, r3
 8007170:	f04f 0000 	mov.w	r0, #0
 8007174:	f04f 0100 	mov.w	r1, #0
 8007178:	0299      	lsls	r1, r3, #10
 800717a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800717e:	0290      	lsls	r0, r2, #10
 8007180:	4602      	mov	r2, r0
 8007182:	460b      	mov	r3, r1
 8007184:	4610      	mov	r0, r2
 8007186:	4619      	mov	r1, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	461a      	mov	r2, r3
 800718c:	f04f 0300 	mov.w	r3, #0
 8007190:	f7f9 fd8a 	bl	8000ca8 <__aeabi_uldivmod>
 8007194:	4602      	mov	r2, r0
 8007196:	460b      	mov	r3, r1
 8007198:	4613      	mov	r3, r2
 800719a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800719c:	4b0b      	ldr	r3, [pc, #44]	; (80071cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	0c1b      	lsrs	r3, r3, #16
 80071a2:	f003 0303 	and.w	r3, r3, #3
 80071a6:	3301      	adds	r3, #1
 80071a8:	005b      	lsls	r3, r3, #1
 80071aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071b4:	60bb      	str	r3, [r7, #8]
      break;
 80071b6:	e002      	b.n	80071be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80071b8:	4b05      	ldr	r3, [pc, #20]	; (80071d0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80071ba:	60bb      	str	r3, [r7, #8]
      break;
 80071bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80071be:	68bb      	ldr	r3, [r7, #8]
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80071ca:	bf00      	nop
 80071cc:	40023800 	.word	0x40023800
 80071d0:	00f42400 	.word	0x00f42400

080071d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071d4:	b480      	push	{r7}
 80071d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071d8:	4b03      	ldr	r3, [pc, #12]	; (80071e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80071da:	681b      	ldr	r3, [r3, #0]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop
 80071e8:	20000000 	.word	0x20000000

080071ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80071f0:	f7ff fff0 	bl	80071d4 <HAL_RCC_GetHCLKFreq>
 80071f4:	4602      	mov	r2, r0
 80071f6:	4b05      	ldr	r3, [pc, #20]	; (800720c <HAL_RCC_GetPCLK1Freq+0x20>)
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	0a9b      	lsrs	r3, r3, #10
 80071fc:	f003 0307 	and.w	r3, r3, #7
 8007200:	4903      	ldr	r1, [pc, #12]	; (8007210 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007202:	5ccb      	ldrb	r3, [r1, r3]
 8007204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007208:	4618      	mov	r0, r3
 800720a:	bd80      	pop	{r7, pc}
 800720c:	40023800 	.word	0x40023800
 8007210:	08015448 	.word	0x08015448

08007214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007218:	f7ff ffdc 	bl	80071d4 <HAL_RCC_GetHCLKFreq>
 800721c:	4602      	mov	r2, r0
 800721e:	4b05      	ldr	r3, [pc, #20]	; (8007234 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	0b5b      	lsrs	r3, r3, #13
 8007224:	f003 0307 	and.w	r3, r3, #7
 8007228:	4903      	ldr	r1, [pc, #12]	; (8007238 <HAL_RCC_GetPCLK2Freq+0x24>)
 800722a:	5ccb      	ldrb	r3, [r1, r3]
 800722c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007230:	4618      	mov	r0, r3
 8007232:	bd80      	pop	{r7, pc}
 8007234:	40023800 	.word	0x40023800
 8007238:	08015448 	.word	0x08015448

0800723c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e07b      	b.n	8007346 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007252:	2b00      	cmp	r3, #0
 8007254:	d108      	bne.n	8007268 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800725e:	d009      	beq.n	8007274 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	61da      	str	r2, [r3, #28]
 8007266:	e005      	b.n	8007274 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007280:	b2db      	uxtb	r3, r3
 8007282:	2b00      	cmp	r3, #0
 8007284:	d106      	bne.n	8007294 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7fc f8ee 	bl	8003470 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2202      	movs	r2, #2
 8007298:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80072bc:	431a      	orrs	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072c6:	431a      	orrs	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	f003 0302 	and.w	r3, r3, #2
 80072d0:	431a      	orrs	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	695b      	ldr	r3, [r3, #20]
 80072d6:	f003 0301 	and.w	r3, r3, #1
 80072da:	431a      	orrs	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	699b      	ldr	r3, [r3, #24]
 80072e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072e4:	431a      	orrs	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072ee:	431a      	orrs	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a1b      	ldr	r3, [r3, #32]
 80072f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072f8:	ea42 0103 	orr.w	r1, r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007300:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	430a      	orrs	r2, r1
 800730a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	699b      	ldr	r3, [r3, #24]
 8007310:	0c1b      	lsrs	r3, r3, #16
 8007312:	f003 0104 	and.w	r1, r3, #4
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731a:	f003 0210 	and.w	r2, r3, #16
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	430a      	orrs	r2, r1
 8007324:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	69da      	ldr	r2, [r3, #28]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007334:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3708      	adds	r7, #8
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b08c      	sub	sp, #48	; 0x30
 8007352:	af00      	add	r7, sp, #0
 8007354:	60f8      	str	r0, [r7, #12]
 8007356:	60b9      	str	r1, [r7, #8]
 8007358:	607a      	str	r2, [r7, #4]
 800735a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800735c:	2301      	movs	r3, #1
 800735e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007360:	2300      	movs	r3, #0
 8007362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800736c:	2b01      	cmp	r3, #1
 800736e:	d101      	bne.n	8007374 <HAL_SPI_TransmitReceive+0x26>
 8007370:	2302      	movs	r3, #2
 8007372:	e18a      	b.n	800768a <HAL_SPI_TransmitReceive+0x33c>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800737c:	f7fc fb82 	bl	8003a84 <HAL_GetTick>
 8007380:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007388:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007392:	887b      	ldrh	r3, [r7, #2]
 8007394:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007396:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800739a:	2b01      	cmp	r3, #1
 800739c:	d00f      	beq.n	80073be <HAL_SPI_TransmitReceive+0x70>
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073a4:	d107      	bne.n	80073b6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d103      	bne.n	80073b6 <HAL_SPI_TransmitReceive+0x68>
 80073ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073b2:	2b04      	cmp	r3, #4
 80073b4:	d003      	beq.n	80073be <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80073b6:	2302      	movs	r3, #2
 80073b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80073bc:	e15b      	b.n	8007676 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d005      	beq.n	80073d0 <HAL_SPI_TransmitReceive+0x82>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d002      	beq.n	80073d0 <HAL_SPI_TransmitReceive+0x82>
 80073ca:	887b      	ldrh	r3, [r7, #2]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d103      	bne.n	80073d8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80073d6:	e14e      	b.n	8007676 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	2b04      	cmp	r3, #4
 80073e2:	d003      	beq.n	80073ec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2205      	movs	r2, #5
 80073e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	887a      	ldrh	r2, [r7, #2]
 80073fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	887a      	ldrh	r2, [r7, #2]
 8007402:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	68ba      	ldr	r2, [r7, #8]
 8007408:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	887a      	ldrh	r2, [r7, #2]
 800740e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	887a      	ldrh	r2, [r7, #2]
 8007414:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800742c:	2b40      	cmp	r3, #64	; 0x40
 800742e:	d007      	beq.n	8007440 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800743e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007448:	d178      	bne.n	800753c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d002      	beq.n	8007458 <HAL_SPI_TransmitReceive+0x10a>
 8007452:	8b7b      	ldrh	r3, [r7, #26]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d166      	bne.n	8007526 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745c:	881a      	ldrh	r2, [r3, #0]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007468:	1c9a      	adds	r2, r3, #2
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007472:	b29b      	uxth	r3, r3
 8007474:	3b01      	subs	r3, #1
 8007476:	b29a      	uxth	r2, r3
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800747c:	e053      	b.n	8007526 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	f003 0302 	and.w	r3, r3, #2
 8007488:	2b02      	cmp	r3, #2
 800748a:	d11b      	bne.n	80074c4 <HAL_SPI_TransmitReceive+0x176>
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007490:	b29b      	uxth	r3, r3
 8007492:	2b00      	cmp	r3, #0
 8007494:	d016      	beq.n	80074c4 <HAL_SPI_TransmitReceive+0x176>
 8007496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007498:	2b01      	cmp	r3, #1
 800749a:	d113      	bne.n	80074c4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a0:	881a      	ldrh	r2, [r3, #0]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ac:	1c9a      	adds	r2, r3, #2
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	3b01      	subs	r3, #1
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80074c0:	2300      	movs	r3, #0
 80074c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d119      	bne.n	8007506 <HAL_SPI_TransmitReceive+0x1b8>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d014      	beq.n	8007506 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68da      	ldr	r2, [r3, #12]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e6:	b292      	uxth	r2, r2
 80074e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ee:	1c9a      	adds	r2, r3, #2
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	3b01      	subs	r3, #1
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007502:	2301      	movs	r3, #1
 8007504:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007506:	f7fc fabd 	bl	8003a84 <HAL_GetTick>
 800750a:	4602      	mov	r2, r0
 800750c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750e:	1ad3      	subs	r3, r2, r3
 8007510:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007512:	429a      	cmp	r2, r3
 8007514:	d807      	bhi.n	8007526 <HAL_SPI_TransmitReceive+0x1d8>
 8007516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800751c:	d003      	beq.n	8007526 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800751e:	2303      	movs	r3, #3
 8007520:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007524:	e0a7      	b.n	8007676 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800752a:	b29b      	uxth	r3, r3
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1a6      	bne.n	800747e <HAL_SPI_TransmitReceive+0x130>
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007534:	b29b      	uxth	r3, r3
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1a1      	bne.n	800747e <HAL_SPI_TransmitReceive+0x130>
 800753a:	e07c      	b.n	8007636 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d002      	beq.n	800754a <HAL_SPI_TransmitReceive+0x1fc>
 8007544:	8b7b      	ldrh	r3, [r7, #26]
 8007546:	2b01      	cmp	r3, #1
 8007548:	d16b      	bne.n	8007622 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	330c      	adds	r3, #12
 8007554:	7812      	ldrb	r2, [r2, #0]
 8007556:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755c:	1c5a      	adds	r2, r3, #1
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007566:	b29b      	uxth	r3, r3
 8007568:	3b01      	subs	r3, #1
 800756a:	b29a      	uxth	r2, r3
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007570:	e057      	b.n	8007622 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	f003 0302 	and.w	r3, r3, #2
 800757c:	2b02      	cmp	r3, #2
 800757e:	d11c      	bne.n	80075ba <HAL_SPI_TransmitReceive+0x26c>
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007584:	b29b      	uxth	r3, r3
 8007586:	2b00      	cmp	r3, #0
 8007588:	d017      	beq.n	80075ba <HAL_SPI_TransmitReceive+0x26c>
 800758a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758c:	2b01      	cmp	r3, #1
 800758e:	d114      	bne.n	80075ba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	330c      	adds	r3, #12
 800759a:	7812      	ldrb	r2, [r2, #0]
 800759c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a2:	1c5a      	adds	r2, r3, #1
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	3b01      	subs	r3, #1
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075b6:	2300      	movs	r3, #0
 80075b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	f003 0301 	and.w	r3, r3, #1
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d119      	bne.n	80075fc <HAL_SPI_TransmitReceive+0x2ae>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d014      	beq.n	80075fc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68da      	ldr	r2, [r3, #12]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075dc:	b2d2      	uxtb	r2, r2
 80075de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e4:	1c5a      	adds	r2, r3, #1
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	3b01      	subs	r3, #1
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80075f8:	2301      	movs	r3, #1
 80075fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80075fc:	f7fc fa42 	bl	8003a84 <HAL_GetTick>
 8007600:	4602      	mov	r2, r0
 8007602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007608:	429a      	cmp	r2, r3
 800760a:	d803      	bhi.n	8007614 <HAL_SPI_TransmitReceive+0x2c6>
 800760c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800760e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007612:	d102      	bne.n	800761a <HAL_SPI_TransmitReceive+0x2cc>
 8007614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007616:	2b00      	cmp	r3, #0
 8007618:	d103      	bne.n	8007622 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800761a:	2303      	movs	r3, #3
 800761c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007620:	e029      	b.n	8007676 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007626:	b29b      	uxth	r3, r3
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1a2      	bne.n	8007572 <HAL_SPI_TransmitReceive+0x224>
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007630:	b29b      	uxth	r3, r3
 8007632:	2b00      	cmp	r3, #0
 8007634:	d19d      	bne.n	8007572 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007638:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	f000 f8b2 	bl	80077a4 <SPI_EndRxTxTransaction>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d006      	beq.n	8007654 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2220      	movs	r2, #32
 8007650:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007652:	e010      	b.n	8007676 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10b      	bne.n	8007674 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800765c:	2300      	movs	r3, #0
 800765e:	617b      	str	r3, [r7, #20]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	617b      	str	r3, [r7, #20]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	617b      	str	r3, [r7, #20]
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	e000      	b.n	8007676 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007674:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2201      	movs	r2, #1
 800767a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007686:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800768a:	4618      	mov	r0, r3
 800768c:	3730      	adds	r7, #48	; 0x30
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
	...

08007694 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b088      	sub	sp, #32
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	603b      	str	r3, [r7, #0]
 80076a0:	4613      	mov	r3, r2
 80076a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80076a4:	f7fc f9ee 	bl	8003a84 <HAL_GetTick>
 80076a8:	4602      	mov	r2, r0
 80076aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ac:	1a9b      	subs	r3, r3, r2
 80076ae:	683a      	ldr	r2, [r7, #0]
 80076b0:	4413      	add	r3, r2
 80076b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80076b4:	f7fc f9e6 	bl	8003a84 <HAL_GetTick>
 80076b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80076ba:	4b39      	ldr	r3, [pc, #228]	; (80077a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	015b      	lsls	r3, r3, #5
 80076c0:	0d1b      	lsrs	r3, r3, #20
 80076c2:	69fa      	ldr	r2, [r7, #28]
 80076c4:	fb02 f303 	mul.w	r3, r2, r3
 80076c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076ca:	e054      	b.n	8007776 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d2:	d050      	beq.n	8007776 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80076d4:	f7fc f9d6 	bl	8003a84 <HAL_GetTick>
 80076d8:	4602      	mov	r2, r0
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	1ad3      	subs	r3, r2, r3
 80076de:	69fa      	ldr	r2, [r7, #28]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d902      	bls.n	80076ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d13d      	bne.n	8007766 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	685a      	ldr	r2, [r3, #4]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80076f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007702:	d111      	bne.n	8007728 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800770c:	d004      	beq.n	8007718 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007716:	d107      	bne.n	8007728 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007726:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800772c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007730:	d10f      	bne.n	8007752 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007740:	601a      	str	r2, [r3, #0]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007750:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2201      	movs	r2, #1
 8007756:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2200      	movs	r2, #0
 800775e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007762:	2303      	movs	r3, #3
 8007764:	e017      	b.n	8007796 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800776c:	2300      	movs	r3, #0
 800776e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	3b01      	subs	r3, #1
 8007774:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	689a      	ldr	r2, [r3, #8]
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	4013      	ands	r3, r2
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	429a      	cmp	r2, r3
 8007784:	bf0c      	ite	eq
 8007786:	2301      	moveq	r3, #1
 8007788:	2300      	movne	r3, #0
 800778a:	b2db      	uxtb	r3, r3
 800778c:	461a      	mov	r2, r3
 800778e:	79fb      	ldrb	r3, [r7, #7]
 8007790:	429a      	cmp	r2, r3
 8007792:	d19b      	bne.n	80076cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3720      	adds	r7, #32
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	20000000 	.word	0x20000000

080077a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b088      	sub	sp, #32
 80077a8:	af02      	add	r7, sp, #8
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80077b0:	4b1b      	ldr	r3, [pc, #108]	; (8007820 <SPI_EndRxTxTransaction+0x7c>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a1b      	ldr	r2, [pc, #108]	; (8007824 <SPI_EndRxTxTransaction+0x80>)
 80077b6:	fba2 2303 	umull	r2, r3, r2, r3
 80077ba:	0d5b      	lsrs	r3, r3, #21
 80077bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80077c0:	fb02 f303 	mul.w	r3, r2, r3
 80077c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077ce:	d112      	bne.n	80077f6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	9300      	str	r3, [sp, #0]
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	2200      	movs	r2, #0
 80077d8:	2180      	movs	r1, #128	; 0x80
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	f7ff ff5a 	bl	8007694 <SPI_WaitFlagStateUntilTimeout>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d016      	beq.n	8007814 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ea:	f043 0220 	orr.w	r2, r3, #32
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80077f2:	2303      	movs	r3, #3
 80077f4:	e00f      	b.n	8007816 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00a      	beq.n	8007812 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	3b01      	subs	r3, #1
 8007800:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800780c:	2b80      	cmp	r3, #128	; 0x80
 800780e:	d0f2      	beq.n	80077f6 <SPI_EndRxTxTransaction+0x52>
 8007810:	e000      	b.n	8007814 <SPI_EndRxTxTransaction+0x70>
        break;
 8007812:	bf00      	nop
  }

  return HAL_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3718      	adds	r7, #24
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	20000000 	.word	0x20000000
 8007824:	165e9f81 	.word	0x165e9f81

08007828 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d101      	bne.n	800783a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e041      	b.n	80078be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007840:	b2db      	uxtb	r3, r3
 8007842:	2b00      	cmp	r3, #0
 8007844:	d106      	bne.n	8007854 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f7fb fe8e 	bl	8003570 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2202      	movs	r2, #2
 8007858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	3304      	adds	r3, #4
 8007864:	4619      	mov	r1, r3
 8007866:	4610      	mov	r0, r2
 8007868:	f000 fc78 	bl	800815c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3708      	adds	r7, #8
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b082      	sub	sp, #8
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d101      	bne.n	80078d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	e041      	b.n	800795c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d106      	bne.n	80078f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f839 	bl	8007964 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2202      	movs	r2, #2
 80078f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	3304      	adds	r3, #4
 8007902:	4619      	mov	r1, r3
 8007904:	4610      	mov	r0, r2
 8007906:	f000 fc29 	bl	800815c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2201      	movs	r2, #1
 800790e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2201      	movs	r2, #1
 8007916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2201      	movs	r2, #1
 800791e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2201      	movs	r2, #1
 8007926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2201      	movs	r2, #1
 800792e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2201      	movs	r2, #1
 8007936:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2201      	movs	r2, #1
 800793e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2201      	movs	r2, #1
 8007946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2201      	movs	r2, #1
 800794e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2201      	movs	r2, #1
 8007956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	3708      	adds	r7, #8
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800796c:	bf00      	nop
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d109      	bne.n	800799c <HAL_TIM_PWM_Start+0x24>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800798e:	b2db      	uxtb	r3, r3
 8007990:	2b01      	cmp	r3, #1
 8007992:	bf14      	ite	ne
 8007994:	2301      	movne	r3, #1
 8007996:	2300      	moveq	r3, #0
 8007998:	b2db      	uxtb	r3, r3
 800799a:	e022      	b.n	80079e2 <HAL_TIM_PWM_Start+0x6a>
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	2b04      	cmp	r3, #4
 80079a0:	d109      	bne.n	80079b6 <HAL_TIM_PWM_Start+0x3e>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	bf14      	ite	ne
 80079ae:	2301      	movne	r3, #1
 80079b0:	2300      	moveq	r3, #0
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	e015      	b.n	80079e2 <HAL_TIM_PWM_Start+0x6a>
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	2b08      	cmp	r3, #8
 80079ba:	d109      	bne.n	80079d0 <HAL_TIM_PWM_Start+0x58>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	bf14      	ite	ne
 80079c8:	2301      	movne	r3, #1
 80079ca:	2300      	moveq	r3, #0
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	e008      	b.n	80079e2 <HAL_TIM_PWM_Start+0x6a>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	2b01      	cmp	r3, #1
 80079da:	bf14      	ite	ne
 80079dc:	2301      	movne	r3, #1
 80079de:	2300      	moveq	r3, #0
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d001      	beq.n	80079ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e07c      	b.n	8007ae4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d104      	bne.n	80079fa <HAL_TIM_PWM_Start+0x82>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2202      	movs	r2, #2
 80079f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079f8:	e013      	b.n	8007a22 <HAL_TIM_PWM_Start+0xaa>
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	2b04      	cmp	r3, #4
 80079fe:	d104      	bne.n	8007a0a <HAL_TIM_PWM_Start+0x92>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2202      	movs	r2, #2
 8007a04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a08:	e00b      	b.n	8007a22 <HAL_TIM_PWM_Start+0xaa>
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	2b08      	cmp	r3, #8
 8007a0e:	d104      	bne.n	8007a1a <HAL_TIM_PWM_Start+0xa2>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2202      	movs	r2, #2
 8007a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a18:	e003      	b.n	8007a22 <HAL_TIM_PWM_Start+0xaa>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2202      	movs	r2, #2
 8007a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2201      	movs	r2, #1
 8007a28:	6839      	ldr	r1, [r7, #0]
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f000 fe80 	bl	8008730 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a2d      	ldr	r2, [pc, #180]	; (8007aec <HAL_TIM_PWM_Start+0x174>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d004      	beq.n	8007a44 <HAL_TIM_PWM_Start+0xcc>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a2c      	ldr	r2, [pc, #176]	; (8007af0 <HAL_TIM_PWM_Start+0x178>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d101      	bne.n	8007a48 <HAL_TIM_PWM_Start+0xd0>
 8007a44:	2301      	movs	r3, #1
 8007a46:	e000      	b.n	8007a4a <HAL_TIM_PWM_Start+0xd2>
 8007a48:	2300      	movs	r3, #0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d007      	beq.n	8007a5e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a22      	ldr	r2, [pc, #136]	; (8007aec <HAL_TIM_PWM_Start+0x174>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d022      	beq.n	8007aae <HAL_TIM_PWM_Start+0x136>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a70:	d01d      	beq.n	8007aae <HAL_TIM_PWM_Start+0x136>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a1f      	ldr	r2, [pc, #124]	; (8007af4 <HAL_TIM_PWM_Start+0x17c>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d018      	beq.n	8007aae <HAL_TIM_PWM_Start+0x136>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a1d      	ldr	r2, [pc, #116]	; (8007af8 <HAL_TIM_PWM_Start+0x180>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d013      	beq.n	8007aae <HAL_TIM_PWM_Start+0x136>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a1c      	ldr	r2, [pc, #112]	; (8007afc <HAL_TIM_PWM_Start+0x184>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d00e      	beq.n	8007aae <HAL_TIM_PWM_Start+0x136>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a16      	ldr	r2, [pc, #88]	; (8007af0 <HAL_TIM_PWM_Start+0x178>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d009      	beq.n	8007aae <HAL_TIM_PWM_Start+0x136>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a18      	ldr	r2, [pc, #96]	; (8007b00 <HAL_TIM_PWM_Start+0x188>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d004      	beq.n	8007aae <HAL_TIM_PWM_Start+0x136>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a16      	ldr	r2, [pc, #88]	; (8007b04 <HAL_TIM_PWM_Start+0x18c>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d111      	bne.n	8007ad2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	f003 0307 	and.w	r3, r3, #7
 8007ab8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2b06      	cmp	r3, #6
 8007abe:	d010      	beq.n	8007ae2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f042 0201 	orr.w	r2, r2, #1
 8007ace:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ad0:	e007      	b.n	8007ae2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f042 0201 	orr.w	r2, r2, #1
 8007ae0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3710      	adds	r7, #16
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	40010000 	.word	0x40010000
 8007af0:	40010400 	.word	0x40010400
 8007af4:	40000400 	.word	0x40000400
 8007af8:	40000800 	.word	0x40000800
 8007afc:	40000c00 	.word	0x40000c00
 8007b00:	40014000 	.word	0x40014000
 8007b04:	40001800 	.word	0x40001800

08007b08 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2200      	movs	r2, #0
 8007b18:	6839      	ldr	r1, [r7, #0]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f000 fe08 	bl	8008730 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a2e      	ldr	r2, [pc, #184]	; (8007be0 <HAL_TIM_PWM_Stop+0xd8>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d004      	beq.n	8007b34 <HAL_TIM_PWM_Stop+0x2c>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a2d      	ldr	r2, [pc, #180]	; (8007be4 <HAL_TIM_PWM_Stop+0xdc>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d101      	bne.n	8007b38 <HAL_TIM_PWM_Stop+0x30>
 8007b34:	2301      	movs	r3, #1
 8007b36:	e000      	b.n	8007b3a <HAL_TIM_PWM_Stop+0x32>
 8007b38:	2300      	movs	r3, #0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d017      	beq.n	8007b6e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	6a1a      	ldr	r2, [r3, #32]
 8007b44:	f241 1311 	movw	r3, #4369	; 0x1111
 8007b48:	4013      	ands	r3, r2
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10f      	bne.n	8007b6e <HAL_TIM_PWM_Stop+0x66>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	6a1a      	ldr	r2, [r3, #32]
 8007b54:	f240 4344 	movw	r3, #1092	; 0x444
 8007b58:	4013      	ands	r3, r2
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d107      	bne.n	8007b6e <HAL_TIM_PWM_Stop+0x66>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007b6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	6a1a      	ldr	r2, [r3, #32]
 8007b74:	f241 1311 	movw	r3, #4369	; 0x1111
 8007b78:	4013      	ands	r3, r2
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d10f      	bne.n	8007b9e <HAL_TIM_PWM_Stop+0x96>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	6a1a      	ldr	r2, [r3, #32]
 8007b84:	f240 4344 	movw	r3, #1092	; 0x444
 8007b88:	4013      	ands	r3, r2
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d107      	bne.n	8007b9e <HAL_TIM_PWM_Stop+0x96>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f022 0201 	bic.w	r2, r2, #1
 8007b9c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d104      	bne.n	8007bae <HAL_TIM_PWM_Stop+0xa6>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bac:	e013      	b.n	8007bd6 <HAL_TIM_PWM_Stop+0xce>
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	2b04      	cmp	r3, #4
 8007bb2:	d104      	bne.n	8007bbe <HAL_TIM_PWM_Stop+0xb6>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bbc:	e00b      	b.n	8007bd6 <HAL_TIM_PWM_Stop+0xce>
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	2b08      	cmp	r3, #8
 8007bc2:	d104      	bne.n	8007bce <HAL_TIM_PWM_Stop+0xc6>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bcc:	e003      	b.n	8007bd6 <HAL_TIM_PWM_Stop+0xce>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3708      	adds	r7, #8
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	40010000 	.word	0x40010000
 8007be4:	40010400 	.word	0x40010400

08007be8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	f003 0302 	and.w	r3, r3, #2
 8007bfa:	2b02      	cmp	r3, #2
 8007bfc:	d122      	bne.n	8007c44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	f003 0302 	and.w	r3, r3, #2
 8007c08:	2b02      	cmp	r3, #2
 8007c0a:	d11b      	bne.n	8007c44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f06f 0202 	mvn.w	r2, #2
 8007c14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	f003 0303 	and.w	r3, r3, #3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d003      	beq.n	8007c32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 fa77 	bl	800811e <HAL_TIM_IC_CaptureCallback>
 8007c30:	e005      	b.n	8007c3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 fa69 	bl	800810a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 fa7a 	bl	8008132 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	f003 0304 	and.w	r3, r3, #4
 8007c4e:	2b04      	cmp	r3, #4
 8007c50:	d122      	bne.n	8007c98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	f003 0304 	and.w	r3, r3, #4
 8007c5c:	2b04      	cmp	r3, #4
 8007c5e:	d11b      	bne.n	8007c98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f06f 0204 	mvn.w	r2, #4
 8007c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2202      	movs	r2, #2
 8007c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d003      	beq.n	8007c86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fa4d 	bl	800811e <HAL_TIM_IC_CaptureCallback>
 8007c84:	e005      	b.n	8007c92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 fa3f 	bl	800810a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 fa50 	bl	8008132 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	f003 0308 	and.w	r3, r3, #8
 8007ca2:	2b08      	cmp	r3, #8
 8007ca4:	d122      	bne.n	8007cec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	f003 0308 	and.w	r3, r3, #8
 8007cb0:	2b08      	cmp	r3, #8
 8007cb2:	d11b      	bne.n	8007cec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f06f 0208 	mvn.w	r2, #8
 8007cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2204      	movs	r2, #4
 8007cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	69db      	ldr	r3, [r3, #28]
 8007cca:	f003 0303 	and.w	r3, r3, #3
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d003      	beq.n	8007cda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fa23 	bl	800811e <HAL_TIM_IC_CaptureCallback>
 8007cd8:	e005      	b.n	8007ce6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fa15 	bl	800810a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fa26 	bl	8008132 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	f003 0310 	and.w	r3, r3, #16
 8007cf6:	2b10      	cmp	r3, #16
 8007cf8:	d122      	bne.n	8007d40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	f003 0310 	and.w	r3, r3, #16
 8007d04:	2b10      	cmp	r3, #16
 8007d06:	d11b      	bne.n	8007d40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f06f 0210 	mvn.w	r2, #16
 8007d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2208      	movs	r2, #8
 8007d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	69db      	ldr	r3, [r3, #28]
 8007d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d003      	beq.n	8007d2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 f9f9 	bl	800811e <HAL_TIM_IC_CaptureCallback>
 8007d2c:	e005      	b.n	8007d3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 f9eb 	bl	800810a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 f9fc 	bl	8008132 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	f003 0301 	and.w	r3, r3, #1
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d10e      	bne.n	8007d6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	f003 0301 	and.w	r3, r3, #1
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d107      	bne.n	8007d6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f06f 0201 	mvn.w	r2, #1
 8007d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f7fa ffea 	bl	8002d40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	691b      	ldr	r3, [r3, #16]
 8007d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d76:	2b80      	cmp	r3, #128	; 0x80
 8007d78:	d10e      	bne.n	8007d98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d84:	2b80      	cmp	r3, #128	; 0x80
 8007d86:	d107      	bne.n	8007d98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 fd78 	bl	8008888 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da2:	2b40      	cmp	r3, #64	; 0x40
 8007da4:	d10e      	bne.n	8007dc4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007db0:	2b40      	cmp	r3, #64	; 0x40
 8007db2:	d107      	bne.n	8007dc4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 f9c1 	bl	8008146 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	f003 0320 	and.w	r3, r3, #32
 8007dce:	2b20      	cmp	r3, #32
 8007dd0:	d10e      	bne.n	8007df0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	f003 0320 	and.w	r3, r3, #32
 8007ddc:	2b20      	cmp	r3, #32
 8007dde:	d107      	bne.n	8007df0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f06f 0220 	mvn.w	r2, #32
 8007de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fd42 	bl	8008874 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007df0:	bf00      	nop
 8007df2:	3708      	adds	r7, #8
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b086      	sub	sp, #24
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e04:	2300      	movs	r3, #0
 8007e06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d101      	bne.n	8007e16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e12:	2302      	movs	r3, #2
 8007e14:	e0ae      	b.n	8007f74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2b0c      	cmp	r3, #12
 8007e22:	f200 809f 	bhi.w	8007f64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007e26:	a201      	add	r2, pc, #4	; (adr r2, 8007e2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2c:	08007e61 	.word	0x08007e61
 8007e30:	08007f65 	.word	0x08007f65
 8007e34:	08007f65 	.word	0x08007f65
 8007e38:	08007f65 	.word	0x08007f65
 8007e3c:	08007ea1 	.word	0x08007ea1
 8007e40:	08007f65 	.word	0x08007f65
 8007e44:	08007f65 	.word	0x08007f65
 8007e48:	08007f65 	.word	0x08007f65
 8007e4c:	08007ee3 	.word	0x08007ee3
 8007e50:	08007f65 	.word	0x08007f65
 8007e54:	08007f65 	.word	0x08007f65
 8007e58:	08007f65 	.word	0x08007f65
 8007e5c:	08007f23 	.word	0x08007f23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	68b9      	ldr	r1, [r7, #8]
 8007e66:	4618      	mov	r0, r3
 8007e68:	f000 fa18 	bl	800829c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	699a      	ldr	r2, [r3, #24]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f042 0208 	orr.w	r2, r2, #8
 8007e7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	699a      	ldr	r2, [r3, #24]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f022 0204 	bic.w	r2, r2, #4
 8007e8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	6999      	ldr	r1, [r3, #24]
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	691a      	ldr	r2, [r3, #16]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	430a      	orrs	r2, r1
 8007e9c:	619a      	str	r2, [r3, #24]
      break;
 8007e9e:	e064      	b.n	8007f6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	68b9      	ldr	r1, [r7, #8]
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f000 fa68 	bl	800837c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	699a      	ldr	r2, [r3, #24]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007eba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	699a      	ldr	r2, [r3, #24]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007eca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	6999      	ldr	r1, [r3, #24]
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	021a      	lsls	r2, r3, #8
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	430a      	orrs	r2, r1
 8007ede:	619a      	str	r2, [r3, #24]
      break;
 8007ee0:	e043      	b.n	8007f6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	68b9      	ldr	r1, [r7, #8]
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f000 fabd 	bl	8008468 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	69da      	ldr	r2, [r3, #28]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f042 0208 	orr.w	r2, r2, #8
 8007efc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	69da      	ldr	r2, [r3, #28]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f022 0204 	bic.w	r2, r2, #4
 8007f0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	69d9      	ldr	r1, [r3, #28]
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	691a      	ldr	r2, [r3, #16]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	430a      	orrs	r2, r1
 8007f1e:	61da      	str	r2, [r3, #28]
      break;
 8007f20:	e023      	b.n	8007f6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68b9      	ldr	r1, [r7, #8]
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f000 fb11 	bl	8008550 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	69da      	ldr	r2, [r3, #28]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	69da      	ldr	r2, [r3, #28]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	69d9      	ldr	r1, [r3, #28]
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	021a      	lsls	r2, r3, #8
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	430a      	orrs	r2, r1
 8007f60:	61da      	str	r2, [r3, #28]
      break;
 8007f62:	e002      	b.n	8007f6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	75fb      	strb	r3, [r7, #23]
      break;
 8007f68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3718      	adds	r7, #24
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f86:	2300      	movs	r3, #0
 8007f88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d101      	bne.n	8007f98 <HAL_TIM_ConfigClockSource+0x1c>
 8007f94:	2302      	movs	r3, #2
 8007f96:	e0b4      	b.n	8008102 <HAL_TIM_ConfigClockSource+0x186>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2202      	movs	r2, #2
 8007fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007fb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007fbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68ba      	ldr	r2, [r7, #8]
 8007fc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fd0:	d03e      	beq.n	8008050 <HAL_TIM_ConfigClockSource+0xd4>
 8007fd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fd6:	f200 8087 	bhi.w	80080e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fde:	f000 8086 	beq.w	80080ee <HAL_TIM_ConfigClockSource+0x172>
 8007fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fe6:	d87f      	bhi.n	80080e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007fe8:	2b70      	cmp	r3, #112	; 0x70
 8007fea:	d01a      	beq.n	8008022 <HAL_TIM_ConfigClockSource+0xa6>
 8007fec:	2b70      	cmp	r3, #112	; 0x70
 8007fee:	d87b      	bhi.n	80080e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007ff0:	2b60      	cmp	r3, #96	; 0x60
 8007ff2:	d050      	beq.n	8008096 <HAL_TIM_ConfigClockSource+0x11a>
 8007ff4:	2b60      	cmp	r3, #96	; 0x60
 8007ff6:	d877      	bhi.n	80080e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007ff8:	2b50      	cmp	r3, #80	; 0x50
 8007ffa:	d03c      	beq.n	8008076 <HAL_TIM_ConfigClockSource+0xfa>
 8007ffc:	2b50      	cmp	r3, #80	; 0x50
 8007ffe:	d873      	bhi.n	80080e8 <HAL_TIM_ConfigClockSource+0x16c>
 8008000:	2b40      	cmp	r3, #64	; 0x40
 8008002:	d058      	beq.n	80080b6 <HAL_TIM_ConfigClockSource+0x13a>
 8008004:	2b40      	cmp	r3, #64	; 0x40
 8008006:	d86f      	bhi.n	80080e8 <HAL_TIM_ConfigClockSource+0x16c>
 8008008:	2b30      	cmp	r3, #48	; 0x30
 800800a:	d064      	beq.n	80080d6 <HAL_TIM_ConfigClockSource+0x15a>
 800800c:	2b30      	cmp	r3, #48	; 0x30
 800800e:	d86b      	bhi.n	80080e8 <HAL_TIM_ConfigClockSource+0x16c>
 8008010:	2b20      	cmp	r3, #32
 8008012:	d060      	beq.n	80080d6 <HAL_TIM_ConfigClockSource+0x15a>
 8008014:	2b20      	cmp	r3, #32
 8008016:	d867      	bhi.n	80080e8 <HAL_TIM_ConfigClockSource+0x16c>
 8008018:	2b00      	cmp	r3, #0
 800801a:	d05c      	beq.n	80080d6 <HAL_TIM_ConfigClockSource+0x15a>
 800801c:	2b10      	cmp	r3, #16
 800801e:	d05a      	beq.n	80080d6 <HAL_TIM_ConfigClockSource+0x15a>
 8008020:	e062      	b.n	80080e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6818      	ldr	r0, [r3, #0]
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	6899      	ldr	r1, [r3, #8]
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	685a      	ldr	r2, [r3, #4]
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	f000 fb5d 	bl	80086f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008044:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68ba      	ldr	r2, [r7, #8]
 800804c:	609a      	str	r2, [r3, #8]
      break;
 800804e:	e04f      	b.n	80080f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6818      	ldr	r0, [r3, #0]
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	6899      	ldr	r1, [r3, #8]
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	685a      	ldr	r2, [r3, #4]
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	f000 fb46 	bl	80086f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	689a      	ldr	r2, [r3, #8]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008072:	609a      	str	r2, [r3, #8]
      break;
 8008074:	e03c      	b.n	80080f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6818      	ldr	r0, [r3, #0]
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	6859      	ldr	r1, [r3, #4]
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	461a      	mov	r2, r3
 8008084:	f000 faba 	bl	80085fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	2150      	movs	r1, #80	; 0x50
 800808e:	4618      	mov	r0, r3
 8008090:	f000 fb13 	bl	80086ba <TIM_ITRx_SetConfig>
      break;
 8008094:	e02c      	b.n	80080f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6818      	ldr	r0, [r3, #0]
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	6859      	ldr	r1, [r3, #4]
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	461a      	mov	r2, r3
 80080a4:	f000 fad9 	bl	800865a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2160      	movs	r1, #96	; 0x60
 80080ae:	4618      	mov	r0, r3
 80080b0:	f000 fb03 	bl	80086ba <TIM_ITRx_SetConfig>
      break;
 80080b4:	e01c      	b.n	80080f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6818      	ldr	r0, [r3, #0]
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	6859      	ldr	r1, [r3, #4]
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	461a      	mov	r2, r3
 80080c4:	f000 fa9a 	bl	80085fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2140      	movs	r1, #64	; 0x40
 80080ce:	4618      	mov	r0, r3
 80080d0:	f000 faf3 	bl	80086ba <TIM_ITRx_SetConfig>
      break;
 80080d4:	e00c      	b.n	80080f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4619      	mov	r1, r3
 80080e0:	4610      	mov	r0, r2
 80080e2:	f000 faea 	bl	80086ba <TIM_ITRx_SetConfig>
      break;
 80080e6:	e003      	b.n	80080f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	73fb      	strb	r3, [r7, #15]
      break;
 80080ec:	e000      	b.n	80080f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80080ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008100:	7bfb      	ldrb	r3, [r7, #15]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800810a:	b480      	push	{r7}
 800810c:	b083      	sub	sp, #12
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008112:	bf00      	nop
 8008114:	370c      	adds	r7, #12
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr

0800811e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800811e:	b480      	push	{r7}
 8008120:	b083      	sub	sp, #12
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008126:	bf00      	nop
 8008128:	370c      	adds	r7, #12
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr

08008132 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008132:	b480      	push	{r7}
 8008134:	b083      	sub	sp, #12
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800813a:	bf00      	nop
 800813c:	370c      	adds	r7, #12
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr

08008146 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008146:	b480      	push	{r7}
 8008148:	b083      	sub	sp, #12
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800814e:	bf00      	nop
 8008150:	370c      	adds	r7, #12
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr
	...

0800815c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	4a40      	ldr	r2, [pc, #256]	; (8008270 <TIM_Base_SetConfig+0x114>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d013      	beq.n	800819c <TIM_Base_SetConfig+0x40>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800817a:	d00f      	beq.n	800819c <TIM_Base_SetConfig+0x40>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4a3d      	ldr	r2, [pc, #244]	; (8008274 <TIM_Base_SetConfig+0x118>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d00b      	beq.n	800819c <TIM_Base_SetConfig+0x40>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4a3c      	ldr	r2, [pc, #240]	; (8008278 <TIM_Base_SetConfig+0x11c>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d007      	beq.n	800819c <TIM_Base_SetConfig+0x40>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4a3b      	ldr	r2, [pc, #236]	; (800827c <TIM_Base_SetConfig+0x120>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d003      	beq.n	800819c <TIM_Base_SetConfig+0x40>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4a3a      	ldr	r2, [pc, #232]	; (8008280 <TIM_Base_SetConfig+0x124>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d108      	bne.n	80081ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a2f      	ldr	r2, [pc, #188]	; (8008270 <TIM_Base_SetConfig+0x114>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d02b      	beq.n	800820e <TIM_Base_SetConfig+0xb2>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081bc:	d027      	beq.n	800820e <TIM_Base_SetConfig+0xb2>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a2c      	ldr	r2, [pc, #176]	; (8008274 <TIM_Base_SetConfig+0x118>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d023      	beq.n	800820e <TIM_Base_SetConfig+0xb2>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a2b      	ldr	r2, [pc, #172]	; (8008278 <TIM_Base_SetConfig+0x11c>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d01f      	beq.n	800820e <TIM_Base_SetConfig+0xb2>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a2a      	ldr	r2, [pc, #168]	; (800827c <TIM_Base_SetConfig+0x120>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d01b      	beq.n	800820e <TIM_Base_SetConfig+0xb2>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4a29      	ldr	r2, [pc, #164]	; (8008280 <TIM_Base_SetConfig+0x124>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d017      	beq.n	800820e <TIM_Base_SetConfig+0xb2>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a28      	ldr	r2, [pc, #160]	; (8008284 <TIM_Base_SetConfig+0x128>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d013      	beq.n	800820e <TIM_Base_SetConfig+0xb2>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4a27      	ldr	r2, [pc, #156]	; (8008288 <TIM_Base_SetConfig+0x12c>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d00f      	beq.n	800820e <TIM_Base_SetConfig+0xb2>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4a26      	ldr	r2, [pc, #152]	; (800828c <TIM_Base_SetConfig+0x130>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d00b      	beq.n	800820e <TIM_Base_SetConfig+0xb2>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a25      	ldr	r2, [pc, #148]	; (8008290 <TIM_Base_SetConfig+0x134>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d007      	beq.n	800820e <TIM_Base_SetConfig+0xb2>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a24      	ldr	r2, [pc, #144]	; (8008294 <TIM_Base_SetConfig+0x138>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d003      	beq.n	800820e <TIM_Base_SetConfig+0xb2>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a23      	ldr	r2, [pc, #140]	; (8008298 <TIM_Base_SetConfig+0x13c>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d108      	bne.n	8008220 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008214:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	4313      	orrs	r3, r2
 800821e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	695b      	ldr	r3, [r3, #20]
 800822a:	4313      	orrs	r3, r2
 800822c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	68fa      	ldr	r2, [r7, #12]
 8008232:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	689a      	ldr	r2, [r3, #8]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4a0a      	ldr	r2, [pc, #40]	; (8008270 <TIM_Base_SetConfig+0x114>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d003      	beq.n	8008254 <TIM_Base_SetConfig+0xf8>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4a0c      	ldr	r2, [pc, #48]	; (8008280 <TIM_Base_SetConfig+0x124>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d103      	bne.n	800825c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	691a      	ldr	r2, [r3, #16]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	615a      	str	r2, [r3, #20]
}
 8008262:	bf00      	nop
 8008264:	3714      	adds	r7, #20
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	40010000 	.word	0x40010000
 8008274:	40000400 	.word	0x40000400
 8008278:	40000800 	.word	0x40000800
 800827c:	40000c00 	.word	0x40000c00
 8008280:	40010400 	.word	0x40010400
 8008284:	40014000 	.word	0x40014000
 8008288:	40014400 	.word	0x40014400
 800828c:	40014800 	.word	0x40014800
 8008290:	40001800 	.word	0x40001800
 8008294:	40001c00 	.word	0x40001c00
 8008298:	40002000 	.word	0x40002000

0800829c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800829c:	b480      	push	{r7}
 800829e:	b087      	sub	sp, #28
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a1b      	ldr	r3, [r3, #32]
 80082aa:	f023 0201 	bic.w	r2, r3, #1
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a1b      	ldr	r3, [r3, #32]
 80082b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	699b      	ldr	r3, [r3, #24]
 80082c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f023 0303 	bic.w	r3, r3, #3
 80082d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68fa      	ldr	r2, [r7, #12]
 80082da:	4313      	orrs	r3, r2
 80082dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	f023 0302 	bic.w	r3, r3, #2
 80082e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	697a      	ldr	r2, [r7, #20]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a20      	ldr	r2, [pc, #128]	; (8008374 <TIM_OC1_SetConfig+0xd8>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d003      	beq.n	8008300 <TIM_OC1_SetConfig+0x64>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a1f      	ldr	r2, [pc, #124]	; (8008378 <TIM_OC1_SetConfig+0xdc>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d10c      	bne.n	800831a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	f023 0308 	bic.w	r3, r3, #8
 8008306:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	697a      	ldr	r2, [r7, #20]
 800830e:	4313      	orrs	r3, r2
 8008310:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	f023 0304 	bic.w	r3, r3, #4
 8008318:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a15      	ldr	r2, [pc, #84]	; (8008374 <TIM_OC1_SetConfig+0xd8>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d003      	beq.n	800832a <TIM_OC1_SetConfig+0x8e>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a14      	ldr	r2, [pc, #80]	; (8008378 <TIM_OC1_SetConfig+0xdc>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d111      	bne.n	800834e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008330:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008338:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	695b      	ldr	r3, [r3, #20]
 800833e:	693a      	ldr	r2, [r7, #16]
 8008340:	4313      	orrs	r3, r2
 8008342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	699b      	ldr	r3, [r3, #24]
 8008348:	693a      	ldr	r2, [r7, #16]
 800834a:	4313      	orrs	r3, r2
 800834c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	693a      	ldr	r2, [r7, #16]
 8008352:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	68fa      	ldr	r2, [r7, #12]
 8008358:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	685a      	ldr	r2, [r3, #4]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	697a      	ldr	r2, [r7, #20]
 8008366:	621a      	str	r2, [r3, #32]
}
 8008368:	bf00      	nop
 800836a:	371c      	adds	r7, #28
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr
 8008374:	40010000 	.word	0x40010000
 8008378:	40010400 	.word	0x40010400

0800837c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800837c:	b480      	push	{r7}
 800837e:	b087      	sub	sp, #28
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a1b      	ldr	r3, [r3, #32]
 800838a:	f023 0210 	bic.w	r2, r3, #16
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a1b      	ldr	r3, [r3, #32]
 8008396:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	699b      	ldr	r3, [r3, #24]
 80083a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	021b      	lsls	r3, r3, #8
 80083ba:	68fa      	ldr	r2, [r7, #12]
 80083bc:	4313      	orrs	r3, r2
 80083be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	f023 0320 	bic.w	r3, r3, #32
 80083c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	011b      	lsls	r3, r3, #4
 80083ce:	697a      	ldr	r2, [r7, #20]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a22      	ldr	r2, [pc, #136]	; (8008460 <TIM_OC2_SetConfig+0xe4>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d003      	beq.n	80083e4 <TIM_OC2_SetConfig+0x68>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a21      	ldr	r2, [pc, #132]	; (8008464 <TIM_OC2_SetConfig+0xe8>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d10d      	bne.n	8008400 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	011b      	lsls	r3, r3, #4
 80083f2:	697a      	ldr	r2, [r7, #20]
 80083f4:	4313      	orrs	r3, r2
 80083f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	4a17      	ldr	r2, [pc, #92]	; (8008460 <TIM_OC2_SetConfig+0xe4>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d003      	beq.n	8008410 <TIM_OC2_SetConfig+0x94>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4a16      	ldr	r2, [pc, #88]	; (8008464 <TIM_OC2_SetConfig+0xe8>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d113      	bne.n	8008438 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008416:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800841e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	695b      	ldr	r3, [r3, #20]
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	693a      	ldr	r2, [r7, #16]
 8008428:	4313      	orrs	r3, r2
 800842a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	699b      	ldr	r3, [r3, #24]
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	693a      	ldr	r2, [r7, #16]
 8008434:	4313      	orrs	r3, r2
 8008436:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	693a      	ldr	r2, [r7, #16]
 800843c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	685a      	ldr	r2, [r3, #4]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	697a      	ldr	r2, [r7, #20]
 8008450:	621a      	str	r2, [r3, #32]
}
 8008452:	bf00      	nop
 8008454:	371c      	adds	r7, #28
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	40010000 	.word	0x40010000
 8008464:	40010400 	.word	0x40010400

08008468 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008468:	b480      	push	{r7}
 800846a:	b087      	sub	sp, #28
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a1b      	ldr	r3, [r3, #32]
 8008476:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6a1b      	ldr	r3, [r3, #32]
 8008482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	69db      	ldr	r3, [r3, #28]
 800848e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f023 0303 	bic.w	r3, r3, #3
 800849e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80084b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	021b      	lsls	r3, r3, #8
 80084b8:	697a      	ldr	r2, [r7, #20]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4a21      	ldr	r2, [pc, #132]	; (8008548 <TIM_OC3_SetConfig+0xe0>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d003      	beq.n	80084ce <TIM_OC3_SetConfig+0x66>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4a20      	ldr	r2, [pc, #128]	; (800854c <TIM_OC3_SetConfig+0xe4>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d10d      	bne.n	80084ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80084d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	021b      	lsls	r3, r3, #8
 80084dc:	697a      	ldr	r2, [r7, #20]
 80084de:	4313      	orrs	r3, r2
 80084e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80084e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a16      	ldr	r2, [pc, #88]	; (8008548 <TIM_OC3_SetConfig+0xe0>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d003      	beq.n	80084fa <TIM_OC3_SetConfig+0x92>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a15      	ldr	r2, [pc, #84]	; (800854c <TIM_OC3_SetConfig+0xe4>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d113      	bne.n	8008522 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008500:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008508:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	695b      	ldr	r3, [r3, #20]
 800850e:	011b      	lsls	r3, r3, #4
 8008510:	693a      	ldr	r2, [r7, #16]
 8008512:	4313      	orrs	r3, r2
 8008514:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	011b      	lsls	r3, r3, #4
 800851c:	693a      	ldr	r2, [r7, #16]
 800851e:	4313      	orrs	r3, r2
 8008520:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	693a      	ldr	r2, [r7, #16]
 8008526:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	68fa      	ldr	r2, [r7, #12]
 800852c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	685a      	ldr	r2, [r3, #4]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	697a      	ldr	r2, [r7, #20]
 800853a:	621a      	str	r2, [r3, #32]
}
 800853c:	bf00      	nop
 800853e:	371c      	adds	r7, #28
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr
 8008548:	40010000 	.word	0x40010000
 800854c:	40010400 	.word	0x40010400

08008550 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008550:	b480      	push	{r7}
 8008552:	b087      	sub	sp, #28
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6a1b      	ldr	r3, [r3, #32]
 800855e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6a1b      	ldr	r3, [r3, #32]
 800856a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	69db      	ldr	r3, [r3, #28]
 8008576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800857e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008586:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	021b      	lsls	r3, r3, #8
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	4313      	orrs	r3, r2
 8008592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800859a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	031b      	lsls	r3, r3, #12
 80085a2:	693a      	ldr	r2, [r7, #16]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4a12      	ldr	r2, [pc, #72]	; (80085f4 <TIM_OC4_SetConfig+0xa4>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d003      	beq.n	80085b8 <TIM_OC4_SetConfig+0x68>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4a11      	ldr	r2, [pc, #68]	; (80085f8 <TIM_OC4_SetConfig+0xa8>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d109      	bne.n	80085cc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	695b      	ldr	r3, [r3, #20]
 80085c4:	019b      	lsls	r3, r3, #6
 80085c6:	697a      	ldr	r2, [r7, #20]
 80085c8:	4313      	orrs	r3, r2
 80085ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	697a      	ldr	r2, [r7, #20]
 80085d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	685a      	ldr	r2, [r3, #4]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	693a      	ldr	r2, [r7, #16]
 80085e4:	621a      	str	r2, [r3, #32]
}
 80085e6:	bf00      	nop
 80085e8:	371c      	adds	r7, #28
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	40010000 	.word	0x40010000
 80085f8:	40010400 	.word	0x40010400

080085fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b087      	sub	sp, #28
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6a1b      	ldr	r3, [r3, #32]
 800860c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	6a1b      	ldr	r3, [r3, #32]
 8008612:	f023 0201 	bic.w	r2, r3, #1
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	699b      	ldr	r3, [r3, #24]
 800861e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008626:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	011b      	lsls	r3, r3, #4
 800862c:	693a      	ldr	r2, [r7, #16]
 800862e:	4313      	orrs	r3, r2
 8008630:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	f023 030a 	bic.w	r3, r3, #10
 8008638:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800863a:	697a      	ldr	r2, [r7, #20]
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	4313      	orrs	r3, r2
 8008640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	693a      	ldr	r2, [r7, #16]
 8008646:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	697a      	ldr	r2, [r7, #20]
 800864c:	621a      	str	r2, [r3, #32]
}
 800864e:	bf00      	nop
 8008650:	371c      	adds	r7, #28
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr

0800865a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800865a:	b480      	push	{r7}
 800865c:	b087      	sub	sp, #28
 800865e:	af00      	add	r7, sp, #0
 8008660:	60f8      	str	r0, [r7, #12]
 8008662:	60b9      	str	r1, [r7, #8]
 8008664:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6a1b      	ldr	r3, [r3, #32]
 800866a:	f023 0210 	bic.w	r2, r3, #16
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6a1b      	ldr	r3, [r3, #32]
 800867c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008684:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	031b      	lsls	r3, r3, #12
 800868a:	697a      	ldr	r2, [r7, #20]
 800868c:	4313      	orrs	r3, r2
 800868e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008696:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	011b      	lsls	r3, r3, #4
 800869c:	693a      	ldr	r2, [r7, #16]
 800869e:	4313      	orrs	r3, r2
 80086a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	697a      	ldr	r2, [r7, #20]
 80086a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	693a      	ldr	r2, [r7, #16]
 80086ac:	621a      	str	r2, [r3, #32]
}
 80086ae:	bf00      	nop
 80086b0:	371c      	adds	r7, #28
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr

080086ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086ba:	b480      	push	{r7}
 80086bc:	b085      	sub	sp, #20
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
 80086c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086d2:	683a      	ldr	r2, [r7, #0]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	f043 0307 	orr.w	r3, r3, #7
 80086dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	609a      	str	r2, [r3, #8]
}
 80086e4:	bf00      	nop
 80086e6:	3714      	adds	r7, #20
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b087      	sub	sp, #28
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	607a      	str	r2, [r7, #4]
 80086fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800870a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	021a      	lsls	r2, r3, #8
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	431a      	orrs	r2, r3
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	4313      	orrs	r3, r2
 8008718:	697a      	ldr	r2, [r7, #20]
 800871a:	4313      	orrs	r3, r2
 800871c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	697a      	ldr	r2, [r7, #20]
 8008722:	609a      	str	r2, [r3, #8]
}
 8008724:	bf00      	nop
 8008726:	371c      	adds	r7, #28
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008730:	b480      	push	{r7}
 8008732:	b087      	sub	sp, #28
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	f003 031f 	and.w	r3, r3, #31
 8008742:	2201      	movs	r2, #1
 8008744:	fa02 f303 	lsl.w	r3, r2, r3
 8008748:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	6a1a      	ldr	r2, [r3, #32]
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	43db      	mvns	r3, r3
 8008752:	401a      	ands	r2, r3
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6a1a      	ldr	r2, [r3, #32]
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	f003 031f 	and.w	r3, r3, #31
 8008762:	6879      	ldr	r1, [r7, #4]
 8008764:	fa01 f303 	lsl.w	r3, r1, r3
 8008768:	431a      	orrs	r2, r3
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	621a      	str	r2, [r3, #32]
}
 800876e:	bf00      	nop
 8008770:	371c      	adds	r7, #28
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr
	...

0800877c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800877c:	b480      	push	{r7}
 800877e:	b085      	sub	sp, #20
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800878c:	2b01      	cmp	r3, #1
 800878e:	d101      	bne.n	8008794 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008790:	2302      	movs	r3, #2
 8008792:	e05a      	b.n	800884a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2202      	movs	r2, #2
 80087a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	68fa      	ldr	r2, [r7, #12]
 80087cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a21      	ldr	r2, [pc, #132]	; (8008858 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d022      	beq.n	800881e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087e0:	d01d      	beq.n	800881e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a1d      	ldr	r2, [pc, #116]	; (800885c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d018      	beq.n	800881e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a1b      	ldr	r2, [pc, #108]	; (8008860 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d013      	beq.n	800881e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a1a      	ldr	r2, [pc, #104]	; (8008864 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d00e      	beq.n	800881e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a18      	ldr	r2, [pc, #96]	; (8008868 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d009      	beq.n	800881e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a17      	ldr	r2, [pc, #92]	; (800886c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d004      	beq.n	800881e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a15      	ldr	r2, [pc, #84]	; (8008870 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d10c      	bne.n	8008838 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008824:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	68ba      	ldr	r2, [r7, #8]
 800882c:	4313      	orrs	r3, r2
 800882e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	68ba      	ldr	r2, [r7, #8]
 8008836:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008848:	2300      	movs	r3, #0
}
 800884a:	4618      	mov	r0, r3
 800884c:	3714      	adds	r7, #20
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr
 8008856:	bf00      	nop
 8008858:	40010000 	.word	0x40010000
 800885c:	40000400 	.word	0x40000400
 8008860:	40000800 	.word	0x40000800
 8008864:	40000c00 	.word	0x40000c00
 8008868:	40010400 	.word	0x40010400
 800886c:	40014000 	.word	0x40014000
 8008870:	40001800 	.word	0x40001800

08008874 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800887c:	bf00      	nop
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008890:	bf00      	nop
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr

0800889c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d101      	bne.n	80088ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	e03f      	b.n	800892e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d106      	bne.n	80088c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f7fa feb2 	bl	800362c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2224      	movs	r2, #36	; 0x24
 80088cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	68da      	ldr	r2, [r3, #12]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80088de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 f9cb 	bl	8008c7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	691a      	ldr	r2, [r3, #16]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80088f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	695a      	ldr	r2, [r3, #20]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008904:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	68da      	ldr	r2, [r3, #12]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008914:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2220      	movs	r2, #32
 8008920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2220      	movs	r2, #32
 8008928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	3708      	adds	r7, #8
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008936:	b580      	push	{r7, lr}
 8008938:	b08a      	sub	sp, #40	; 0x28
 800893a:	af02      	add	r7, sp, #8
 800893c:	60f8      	str	r0, [r7, #12]
 800893e:	60b9      	str	r1, [r7, #8]
 8008940:	603b      	str	r3, [r7, #0]
 8008942:	4613      	mov	r3, r2
 8008944:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008946:	2300      	movs	r3, #0
 8008948:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008950:	b2db      	uxtb	r3, r3
 8008952:	2b20      	cmp	r3, #32
 8008954:	d17c      	bne.n	8008a50 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d002      	beq.n	8008962 <HAL_UART_Transmit+0x2c>
 800895c:	88fb      	ldrh	r3, [r7, #6]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d101      	bne.n	8008966 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	e075      	b.n	8008a52 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800896c:	2b01      	cmp	r3, #1
 800896e:	d101      	bne.n	8008974 <HAL_UART_Transmit+0x3e>
 8008970:	2302      	movs	r3, #2
 8008972:	e06e      	b.n	8008a52 <HAL_UART_Transmit+0x11c>
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2201      	movs	r2, #1
 8008978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2200      	movs	r2, #0
 8008980:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2221      	movs	r2, #33	; 0x21
 8008986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800898a:	f7fb f87b 	bl	8003a84 <HAL_GetTick>
 800898e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	88fa      	ldrh	r2, [r7, #6]
 8008994:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	88fa      	ldrh	r2, [r7, #6]
 800899a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089a4:	d108      	bne.n	80089b8 <HAL_UART_Transmit+0x82>
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	691b      	ldr	r3, [r3, #16]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d104      	bne.n	80089b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80089ae:	2300      	movs	r3, #0
 80089b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	61bb      	str	r3, [r7, #24]
 80089b6:	e003      	b.n	80089c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80089bc:	2300      	movs	r3, #0
 80089be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80089c8:	e02a      	b.n	8008a20 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	9300      	str	r3, [sp, #0]
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	2200      	movs	r2, #0
 80089d2:	2180      	movs	r1, #128	; 0x80
 80089d4:	68f8      	ldr	r0, [r7, #12]
 80089d6:	f000 f8e2 	bl	8008b9e <UART_WaitOnFlagUntilTimeout>
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d001      	beq.n	80089e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80089e0:	2303      	movs	r3, #3
 80089e2:	e036      	b.n	8008a52 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d10b      	bne.n	8008a02 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	881b      	ldrh	r3, [r3, #0]
 80089ee:	461a      	mov	r2, r3
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	3302      	adds	r3, #2
 80089fe:	61bb      	str	r3, [r7, #24]
 8008a00:	e007      	b.n	8008a12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	781a      	ldrb	r2, [r3, #0]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	3301      	adds	r3, #1
 8008a10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	b29a      	uxth	r2, r3
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d1cf      	bne.n	80089ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	9300      	str	r3, [sp, #0]
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	2200      	movs	r2, #0
 8008a32:	2140      	movs	r1, #64	; 0x40
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	f000 f8b2 	bl	8008b9e <UART_WaitOnFlagUntilTimeout>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d001      	beq.n	8008a44 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008a40:	2303      	movs	r3, #3
 8008a42:	e006      	b.n	8008a52 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2220      	movs	r2, #32
 8008a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	e000      	b.n	8008a52 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008a50:	2302      	movs	r3, #2
  }
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3720      	adds	r7, #32
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b08a      	sub	sp, #40	; 0x28
 8008a5e:	af02      	add	r7, sp, #8
 8008a60:	60f8      	str	r0, [r7, #12]
 8008a62:	60b9      	str	r1, [r7, #8]
 8008a64:	603b      	str	r3, [r7, #0]
 8008a66:	4613      	mov	r3, r2
 8008a68:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	2b20      	cmp	r3, #32
 8008a78:	f040 808c 	bne.w	8008b94 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d002      	beq.n	8008a88 <HAL_UART_Receive+0x2e>
 8008a82:	88fb      	ldrh	r3, [r7, #6]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d101      	bne.n	8008a8c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e084      	b.n	8008b96 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d101      	bne.n	8008a9a <HAL_UART_Receive+0x40>
 8008a96:	2302      	movs	r3, #2
 8008a98:	e07d      	b.n	8008b96 <HAL_UART_Receive+0x13c>
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2222      	movs	r2, #34	; 0x22
 8008aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008ab6:	f7fa ffe5 	bl	8003a84 <HAL_GetTick>
 8008aba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	88fa      	ldrh	r2, [r7, #6]
 8008ac0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	88fa      	ldrh	r2, [r7, #6]
 8008ac6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ad0:	d108      	bne.n	8008ae4 <HAL_UART_Receive+0x8a>
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d104      	bne.n	8008ae4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8008ada:	2300      	movs	r3, #0
 8008adc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	61bb      	str	r3, [r7, #24]
 8008ae2:	e003      	b.n	8008aec <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2200      	movs	r2, #0
 8008af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008af4:	e043      	b.n	8008b7e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	9300      	str	r3, [sp, #0]
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	2200      	movs	r2, #0
 8008afe:	2120      	movs	r1, #32
 8008b00:	68f8      	ldr	r0, [r7, #12]
 8008b02:	f000 f84c 	bl	8008b9e <UART_WaitOnFlagUntilTimeout>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d001      	beq.n	8008b10 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	e042      	b.n	8008b96 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d10c      	bne.n	8008b30 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b22:	b29a      	uxth	r2, r3
 8008b24:	69bb      	ldr	r3, [r7, #24]
 8008b26:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	3302      	adds	r3, #2
 8008b2c:	61bb      	str	r3, [r7, #24]
 8008b2e:	e01f      	b.n	8008b70 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b38:	d007      	beq.n	8008b4a <HAL_UART_Receive+0xf0>
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d10a      	bne.n	8008b58 <HAL_UART_Receive+0xfe>
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	691b      	ldr	r3, [r3, #16]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d106      	bne.n	8008b58 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	b2da      	uxtb	r2, r3
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	701a      	strb	r2, [r3, #0]
 8008b56:	e008      	b.n	8008b6a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b64:	b2da      	uxtb	r2, r3
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	3b01      	subs	r3, #1
 8008b78:	b29a      	uxth	r2, r3
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d1b6      	bne.n	8008af6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2220      	movs	r2, #32
 8008b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8008b90:	2300      	movs	r3, #0
 8008b92:	e000      	b.n	8008b96 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8008b94:	2302      	movs	r3, #2
  }
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3720      	adds	r7, #32
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}

08008b9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008b9e:	b580      	push	{r7, lr}
 8008ba0:	b090      	sub	sp, #64	; 0x40
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	60f8      	str	r0, [r7, #12]
 8008ba6:	60b9      	str	r1, [r7, #8]
 8008ba8:	603b      	str	r3, [r7, #0]
 8008baa:	4613      	mov	r3, r2
 8008bac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bae:	e050      	b.n	8008c52 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb6:	d04c      	beq.n	8008c52 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d007      	beq.n	8008bce <UART_WaitOnFlagUntilTimeout+0x30>
 8008bbe:	f7fa ff61 	bl	8003a84 <HAL_GetTick>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	1ad3      	subs	r3, r2, r3
 8008bc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d241      	bcs.n	8008c52 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	330c      	adds	r3, #12
 8008bd4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd8:	e853 3f00 	ldrex	r3, [r3]
 8008bdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008be4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	330c      	adds	r3, #12
 8008bec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008bee:	637a      	str	r2, [r7, #52]	; 0x34
 8008bf0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008bf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bf6:	e841 2300 	strex	r3, r2, [r1]
 8008bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d1e5      	bne.n	8008bce <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	3314      	adds	r3, #20
 8008c08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	e853 3f00 	ldrex	r3, [r3]
 8008c10:	613b      	str	r3, [r7, #16]
   return(result);
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	f023 0301 	bic.w	r3, r3, #1
 8008c18:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	3314      	adds	r3, #20
 8008c20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c22:	623a      	str	r2, [r7, #32]
 8008c24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c26:	69f9      	ldr	r1, [r7, #28]
 8008c28:	6a3a      	ldr	r2, [r7, #32]
 8008c2a:	e841 2300 	strex	r3, r2, [r1]
 8008c2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d1e5      	bne.n	8008c02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2220      	movs	r2, #32
 8008c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2220      	movs	r2, #32
 8008c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008c4e:	2303      	movs	r3, #3
 8008c50:	e00f      	b.n	8008c72 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	4013      	ands	r3, r2
 8008c5c:	68ba      	ldr	r2, [r7, #8]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	bf0c      	ite	eq
 8008c62:	2301      	moveq	r3, #1
 8008c64:	2300      	movne	r3, #0
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	461a      	mov	r2, r3
 8008c6a:	79fb      	ldrb	r3, [r7, #7]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d09f      	beq.n	8008bb0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3740      	adds	r7, #64	; 0x40
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
	...

08008c7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c80:	b09f      	sub	sp, #124	; 0x7c
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c92:	68d9      	ldr	r1, [r3, #12]
 8008c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	ea40 0301 	orr.w	r3, r0, r1
 8008c9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ca0:	689a      	ldr	r2, [r3, #8]
 8008ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ca4:	691b      	ldr	r3, [r3, #16]
 8008ca6:	431a      	orrs	r2, r3
 8008ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008caa:	695b      	ldr	r3, [r3, #20]
 8008cac:	431a      	orrs	r2, r3
 8008cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cb0:	69db      	ldr	r3, [r3, #28]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008cc0:	f021 010c 	bic.w	r1, r1, #12
 8008cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008cca:	430b      	orrs	r3, r1
 8008ccc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	695b      	ldr	r3, [r3, #20]
 8008cd4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cda:	6999      	ldr	r1, [r3, #24]
 8008cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	ea40 0301 	orr.w	r3, r0, r1
 8008ce4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	4bc5      	ldr	r3, [pc, #788]	; (8009000 <UART_SetConfig+0x384>)
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d004      	beq.n	8008cfa <UART_SetConfig+0x7e>
 8008cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	4bc3      	ldr	r3, [pc, #780]	; (8009004 <UART_SetConfig+0x388>)
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d103      	bne.n	8008d02 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008cfa:	f7fe fa8b 	bl	8007214 <HAL_RCC_GetPCLK2Freq>
 8008cfe:	6778      	str	r0, [r7, #116]	; 0x74
 8008d00:	e002      	b.n	8008d08 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008d02:	f7fe fa73 	bl	80071ec <HAL_RCC_GetPCLK1Freq>
 8008d06:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d0a:	69db      	ldr	r3, [r3, #28]
 8008d0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d10:	f040 80b6 	bne.w	8008e80 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008d14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d16:	461c      	mov	r4, r3
 8008d18:	f04f 0500 	mov.w	r5, #0
 8008d1c:	4622      	mov	r2, r4
 8008d1e:	462b      	mov	r3, r5
 8008d20:	1891      	adds	r1, r2, r2
 8008d22:	6439      	str	r1, [r7, #64]	; 0x40
 8008d24:	415b      	adcs	r3, r3
 8008d26:	647b      	str	r3, [r7, #68]	; 0x44
 8008d28:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008d2c:	1912      	adds	r2, r2, r4
 8008d2e:	eb45 0303 	adc.w	r3, r5, r3
 8008d32:	f04f 0000 	mov.w	r0, #0
 8008d36:	f04f 0100 	mov.w	r1, #0
 8008d3a:	00d9      	lsls	r1, r3, #3
 8008d3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008d40:	00d0      	lsls	r0, r2, #3
 8008d42:	4602      	mov	r2, r0
 8008d44:	460b      	mov	r3, r1
 8008d46:	1911      	adds	r1, r2, r4
 8008d48:	6639      	str	r1, [r7, #96]	; 0x60
 8008d4a:	416b      	adcs	r3, r5
 8008d4c:	667b      	str	r3, [r7, #100]	; 0x64
 8008d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	461a      	mov	r2, r3
 8008d54:	f04f 0300 	mov.w	r3, #0
 8008d58:	1891      	adds	r1, r2, r2
 8008d5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8008d5c:	415b      	adcs	r3, r3
 8008d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008d64:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008d68:	f7f7 ff9e 	bl	8000ca8 <__aeabi_uldivmod>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	460b      	mov	r3, r1
 8008d70:	4ba5      	ldr	r3, [pc, #660]	; (8009008 <UART_SetConfig+0x38c>)
 8008d72:	fba3 2302 	umull	r2, r3, r3, r2
 8008d76:	095b      	lsrs	r3, r3, #5
 8008d78:	011e      	lsls	r6, r3, #4
 8008d7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d7c:	461c      	mov	r4, r3
 8008d7e:	f04f 0500 	mov.w	r5, #0
 8008d82:	4622      	mov	r2, r4
 8008d84:	462b      	mov	r3, r5
 8008d86:	1891      	adds	r1, r2, r2
 8008d88:	6339      	str	r1, [r7, #48]	; 0x30
 8008d8a:	415b      	adcs	r3, r3
 8008d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8008d8e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008d92:	1912      	adds	r2, r2, r4
 8008d94:	eb45 0303 	adc.w	r3, r5, r3
 8008d98:	f04f 0000 	mov.w	r0, #0
 8008d9c:	f04f 0100 	mov.w	r1, #0
 8008da0:	00d9      	lsls	r1, r3, #3
 8008da2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008da6:	00d0      	lsls	r0, r2, #3
 8008da8:	4602      	mov	r2, r0
 8008daa:	460b      	mov	r3, r1
 8008dac:	1911      	adds	r1, r2, r4
 8008dae:	65b9      	str	r1, [r7, #88]	; 0x58
 8008db0:	416b      	adcs	r3, r5
 8008db2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	461a      	mov	r2, r3
 8008dba:	f04f 0300 	mov.w	r3, #0
 8008dbe:	1891      	adds	r1, r2, r2
 8008dc0:	62b9      	str	r1, [r7, #40]	; 0x28
 8008dc2:	415b      	adcs	r3, r3
 8008dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008dc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008dca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008dce:	f7f7 ff6b 	bl	8000ca8 <__aeabi_uldivmod>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	4b8c      	ldr	r3, [pc, #560]	; (8009008 <UART_SetConfig+0x38c>)
 8008dd8:	fba3 1302 	umull	r1, r3, r3, r2
 8008ddc:	095b      	lsrs	r3, r3, #5
 8008dde:	2164      	movs	r1, #100	; 0x64
 8008de0:	fb01 f303 	mul.w	r3, r1, r3
 8008de4:	1ad3      	subs	r3, r2, r3
 8008de6:	00db      	lsls	r3, r3, #3
 8008de8:	3332      	adds	r3, #50	; 0x32
 8008dea:	4a87      	ldr	r2, [pc, #540]	; (8009008 <UART_SetConfig+0x38c>)
 8008dec:	fba2 2303 	umull	r2, r3, r2, r3
 8008df0:	095b      	lsrs	r3, r3, #5
 8008df2:	005b      	lsls	r3, r3, #1
 8008df4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008df8:	441e      	add	r6, r3
 8008dfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f04f 0100 	mov.w	r1, #0
 8008e02:	4602      	mov	r2, r0
 8008e04:	460b      	mov	r3, r1
 8008e06:	1894      	adds	r4, r2, r2
 8008e08:	623c      	str	r4, [r7, #32]
 8008e0a:	415b      	adcs	r3, r3
 8008e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8008e0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008e12:	1812      	adds	r2, r2, r0
 8008e14:	eb41 0303 	adc.w	r3, r1, r3
 8008e18:	f04f 0400 	mov.w	r4, #0
 8008e1c:	f04f 0500 	mov.w	r5, #0
 8008e20:	00dd      	lsls	r5, r3, #3
 8008e22:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008e26:	00d4      	lsls	r4, r2, #3
 8008e28:	4622      	mov	r2, r4
 8008e2a:	462b      	mov	r3, r5
 8008e2c:	1814      	adds	r4, r2, r0
 8008e2e:	653c      	str	r4, [r7, #80]	; 0x50
 8008e30:	414b      	adcs	r3, r1
 8008e32:	657b      	str	r3, [r7, #84]	; 0x54
 8008e34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	461a      	mov	r2, r3
 8008e3a:	f04f 0300 	mov.w	r3, #0
 8008e3e:	1891      	adds	r1, r2, r2
 8008e40:	61b9      	str	r1, [r7, #24]
 8008e42:	415b      	adcs	r3, r3
 8008e44:	61fb      	str	r3, [r7, #28]
 8008e46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e4a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008e4e:	f7f7 ff2b 	bl	8000ca8 <__aeabi_uldivmod>
 8008e52:	4602      	mov	r2, r0
 8008e54:	460b      	mov	r3, r1
 8008e56:	4b6c      	ldr	r3, [pc, #432]	; (8009008 <UART_SetConfig+0x38c>)
 8008e58:	fba3 1302 	umull	r1, r3, r3, r2
 8008e5c:	095b      	lsrs	r3, r3, #5
 8008e5e:	2164      	movs	r1, #100	; 0x64
 8008e60:	fb01 f303 	mul.w	r3, r1, r3
 8008e64:	1ad3      	subs	r3, r2, r3
 8008e66:	00db      	lsls	r3, r3, #3
 8008e68:	3332      	adds	r3, #50	; 0x32
 8008e6a:	4a67      	ldr	r2, [pc, #412]	; (8009008 <UART_SetConfig+0x38c>)
 8008e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8008e70:	095b      	lsrs	r3, r3, #5
 8008e72:	f003 0207 	and.w	r2, r3, #7
 8008e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4432      	add	r2, r6
 8008e7c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008e7e:	e0b9      	b.n	8008ff4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e82:	461c      	mov	r4, r3
 8008e84:	f04f 0500 	mov.w	r5, #0
 8008e88:	4622      	mov	r2, r4
 8008e8a:	462b      	mov	r3, r5
 8008e8c:	1891      	adds	r1, r2, r2
 8008e8e:	6139      	str	r1, [r7, #16]
 8008e90:	415b      	adcs	r3, r3
 8008e92:	617b      	str	r3, [r7, #20]
 8008e94:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008e98:	1912      	adds	r2, r2, r4
 8008e9a:	eb45 0303 	adc.w	r3, r5, r3
 8008e9e:	f04f 0000 	mov.w	r0, #0
 8008ea2:	f04f 0100 	mov.w	r1, #0
 8008ea6:	00d9      	lsls	r1, r3, #3
 8008ea8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008eac:	00d0      	lsls	r0, r2, #3
 8008eae:	4602      	mov	r2, r0
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	eb12 0804 	adds.w	r8, r2, r4
 8008eb6:	eb43 0905 	adc.w	r9, r3, r5
 8008eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f04f 0100 	mov.w	r1, #0
 8008ec4:	f04f 0200 	mov.w	r2, #0
 8008ec8:	f04f 0300 	mov.w	r3, #0
 8008ecc:	008b      	lsls	r3, r1, #2
 8008ece:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008ed2:	0082      	lsls	r2, r0, #2
 8008ed4:	4640      	mov	r0, r8
 8008ed6:	4649      	mov	r1, r9
 8008ed8:	f7f7 fee6 	bl	8000ca8 <__aeabi_uldivmod>
 8008edc:	4602      	mov	r2, r0
 8008ede:	460b      	mov	r3, r1
 8008ee0:	4b49      	ldr	r3, [pc, #292]	; (8009008 <UART_SetConfig+0x38c>)
 8008ee2:	fba3 2302 	umull	r2, r3, r3, r2
 8008ee6:	095b      	lsrs	r3, r3, #5
 8008ee8:	011e      	lsls	r6, r3, #4
 8008eea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008eec:	4618      	mov	r0, r3
 8008eee:	f04f 0100 	mov.w	r1, #0
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	1894      	adds	r4, r2, r2
 8008ef8:	60bc      	str	r4, [r7, #8]
 8008efa:	415b      	adcs	r3, r3
 8008efc:	60fb      	str	r3, [r7, #12]
 8008efe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f02:	1812      	adds	r2, r2, r0
 8008f04:	eb41 0303 	adc.w	r3, r1, r3
 8008f08:	f04f 0400 	mov.w	r4, #0
 8008f0c:	f04f 0500 	mov.w	r5, #0
 8008f10:	00dd      	lsls	r5, r3, #3
 8008f12:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008f16:	00d4      	lsls	r4, r2, #3
 8008f18:	4622      	mov	r2, r4
 8008f1a:	462b      	mov	r3, r5
 8008f1c:	1814      	adds	r4, r2, r0
 8008f1e:	64bc      	str	r4, [r7, #72]	; 0x48
 8008f20:	414b      	adcs	r3, r1
 8008f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f04f 0100 	mov.w	r1, #0
 8008f2e:	f04f 0200 	mov.w	r2, #0
 8008f32:	f04f 0300 	mov.w	r3, #0
 8008f36:	008b      	lsls	r3, r1, #2
 8008f38:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008f3c:	0082      	lsls	r2, r0, #2
 8008f3e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008f42:	f7f7 feb1 	bl	8000ca8 <__aeabi_uldivmod>
 8008f46:	4602      	mov	r2, r0
 8008f48:	460b      	mov	r3, r1
 8008f4a:	4b2f      	ldr	r3, [pc, #188]	; (8009008 <UART_SetConfig+0x38c>)
 8008f4c:	fba3 1302 	umull	r1, r3, r3, r2
 8008f50:	095b      	lsrs	r3, r3, #5
 8008f52:	2164      	movs	r1, #100	; 0x64
 8008f54:	fb01 f303 	mul.w	r3, r1, r3
 8008f58:	1ad3      	subs	r3, r2, r3
 8008f5a:	011b      	lsls	r3, r3, #4
 8008f5c:	3332      	adds	r3, #50	; 0x32
 8008f5e:	4a2a      	ldr	r2, [pc, #168]	; (8009008 <UART_SetConfig+0x38c>)
 8008f60:	fba2 2303 	umull	r2, r3, r2, r3
 8008f64:	095b      	lsrs	r3, r3, #5
 8008f66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f6a:	441e      	add	r6, r3
 8008f6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f04f 0100 	mov.w	r1, #0
 8008f74:	4602      	mov	r2, r0
 8008f76:	460b      	mov	r3, r1
 8008f78:	1894      	adds	r4, r2, r2
 8008f7a:	603c      	str	r4, [r7, #0]
 8008f7c:	415b      	adcs	r3, r3
 8008f7e:	607b      	str	r3, [r7, #4]
 8008f80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f84:	1812      	adds	r2, r2, r0
 8008f86:	eb41 0303 	adc.w	r3, r1, r3
 8008f8a:	f04f 0400 	mov.w	r4, #0
 8008f8e:	f04f 0500 	mov.w	r5, #0
 8008f92:	00dd      	lsls	r5, r3, #3
 8008f94:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008f98:	00d4      	lsls	r4, r2, #3
 8008f9a:	4622      	mov	r2, r4
 8008f9c:	462b      	mov	r3, r5
 8008f9e:	eb12 0a00 	adds.w	sl, r2, r0
 8008fa2:	eb43 0b01 	adc.w	fp, r3, r1
 8008fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f04f 0100 	mov.w	r1, #0
 8008fb0:	f04f 0200 	mov.w	r2, #0
 8008fb4:	f04f 0300 	mov.w	r3, #0
 8008fb8:	008b      	lsls	r3, r1, #2
 8008fba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008fbe:	0082      	lsls	r2, r0, #2
 8008fc0:	4650      	mov	r0, sl
 8008fc2:	4659      	mov	r1, fp
 8008fc4:	f7f7 fe70 	bl	8000ca8 <__aeabi_uldivmod>
 8008fc8:	4602      	mov	r2, r0
 8008fca:	460b      	mov	r3, r1
 8008fcc:	4b0e      	ldr	r3, [pc, #56]	; (8009008 <UART_SetConfig+0x38c>)
 8008fce:	fba3 1302 	umull	r1, r3, r3, r2
 8008fd2:	095b      	lsrs	r3, r3, #5
 8008fd4:	2164      	movs	r1, #100	; 0x64
 8008fd6:	fb01 f303 	mul.w	r3, r1, r3
 8008fda:	1ad3      	subs	r3, r2, r3
 8008fdc:	011b      	lsls	r3, r3, #4
 8008fde:	3332      	adds	r3, #50	; 0x32
 8008fe0:	4a09      	ldr	r2, [pc, #36]	; (8009008 <UART_SetConfig+0x38c>)
 8008fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8008fe6:	095b      	lsrs	r3, r3, #5
 8008fe8:	f003 020f 	and.w	r2, r3, #15
 8008fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4432      	add	r2, r6
 8008ff2:	609a      	str	r2, [r3, #8]
}
 8008ff4:	bf00      	nop
 8008ff6:	377c      	adds	r7, #124	; 0x7c
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ffe:	bf00      	nop
 8009000:	40011000 	.word	0x40011000
 8009004:	40011400 	.word	0x40011400
 8009008:	51eb851f 	.word	0x51eb851f

0800900c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800900c:	b084      	sub	sp, #16
 800900e:	b580      	push	{r7, lr}
 8009010:	b084      	sub	sp, #16
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
 8009016:	f107 001c 	add.w	r0, r7, #28
 800901a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800901e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009020:	2b01      	cmp	r3, #1
 8009022:	d122      	bne.n	800906a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009028:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009038:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800904c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800904e:	2b01      	cmp	r3, #1
 8009050:	d105      	bne.n	800905e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f001 fb1c 	bl	800a69c <USB_CoreReset>
 8009064:	4603      	mov	r3, r0
 8009066:	73fb      	strb	r3, [r7, #15]
 8009068:	e01a      	b.n	80090a0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f001 fb10 	bl	800a69c <USB_CoreReset>
 800907c:	4603      	mov	r3, r0
 800907e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009082:	2b00      	cmp	r3, #0
 8009084:	d106      	bne.n	8009094 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800908a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	639a      	str	r2, [r3, #56]	; 0x38
 8009092:	e005      	b.n	80090a0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009098:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80090a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d10b      	bne.n	80090be <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	f043 0206 	orr.w	r2, r3, #6
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	f043 0220 	orr.w	r2, r3, #32
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80090be:	7bfb      	ldrb	r3, [r7, #15]
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3710      	adds	r7, #16
 80090c4:	46bd      	mov	sp, r7
 80090c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80090ca:	b004      	add	sp, #16
 80090cc:	4770      	bx	lr
	...

080090d0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b087      	sub	sp, #28
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	4613      	mov	r3, r2
 80090dc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80090de:	79fb      	ldrb	r3, [r7, #7]
 80090e0:	2b02      	cmp	r3, #2
 80090e2:	d165      	bne.n	80091b0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	4a41      	ldr	r2, [pc, #260]	; (80091ec <USB_SetTurnaroundTime+0x11c>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d906      	bls.n	80090fa <USB_SetTurnaroundTime+0x2a>
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	4a40      	ldr	r2, [pc, #256]	; (80091f0 <USB_SetTurnaroundTime+0x120>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d202      	bcs.n	80090fa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80090f4:	230f      	movs	r3, #15
 80090f6:	617b      	str	r3, [r7, #20]
 80090f8:	e062      	b.n	80091c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	4a3c      	ldr	r2, [pc, #240]	; (80091f0 <USB_SetTurnaroundTime+0x120>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d306      	bcc.n	8009110 <USB_SetTurnaroundTime+0x40>
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	4a3b      	ldr	r2, [pc, #236]	; (80091f4 <USB_SetTurnaroundTime+0x124>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d202      	bcs.n	8009110 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800910a:	230e      	movs	r3, #14
 800910c:	617b      	str	r3, [r7, #20]
 800910e:	e057      	b.n	80091c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	4a38      	ldr	r2, [pc, #224]	; (80091f4 <USB_SetTurnaroundTime+0x124>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d306      	bcc.n	8009126 <USB_SetTurnaroundTime+0x56>
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	4a37      	ldr	r2, [pc, #220]	; (80091f8 <USB_SetTurnaroundTime+0x128>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d202      	bcs.n	8009126 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009120:	230d      	movs	r3, #13
 8009122:	617b      	str	r3, [r7, #20]
 8009124:	e04c      	b.n	80091c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	4a33      	ldr	r2, [pc, #204]	; (80091f8 <USB_SetTurnaroundTime+0x128>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d306      	bcc.n	800913c <USB_SetTurnaroundTime+0x6c>
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	4a32      	ldr	r2, [pc, #200]	; (80091fc <USB_SetTurnaroundTime+0x12c>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d802      	bhi.n	800913c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009136:	230c      	movs	r3, #12
 8009138:	617b      	str	r3, [r7, #20]
 800913a:	e041      	b.n	80091c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	4a2f      	ldr	r2, [pc, #188]	; (80091fc <USB_SetTurnaroundTime+0x12c>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d906      	bls.n	8009152 <USB_SetTurnaroundTime+0x82>
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	4a2e      	ldr	r2, [pc, #184]	; (8009200 <USB_SetTurnaroundTime+0x130>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d802      	bhi.n	8009152 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800914c:	230b      	movs	r3, #11
 800914e:	617b      	str	r3, [r7, #20]
 8009150:	e036      	b.n	80091c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	4a2a      	ldr	r2, [pc, #168]	; (8009200 <USB_SetTurnaroundTime+0x130>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d906      	bls.n	8009168 <USB_SetTurnaroundTime+0x98>
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	4a29      	ldr	r2, [pc, #164]	; (8009204 <USB_SetTurnaroundTime+0x134>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d802      	bhi.n	8009168 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009162:	230a      	movs	r3, #10
 8009164:	617b      	str	r3, [r7, #20]
 8009166:	e02b      	b.n	80091c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	4a26      	ldr	r2, [pc, #152]	; (8009204 <USB_SetTurnaroundTime+0x134>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d906      	bls.n	800917e <USB_SetTurnaroundTime+0xae>
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	4a25      	ldr	r2, [pc, #148]	; (8009208 <USB_SetTurnaroundTime+0x138>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d202      	bcs.n	800917e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009178:	2309      	movs	r3, #9
 800917a:	617b      	str	r3, [r7, #20]
 800917c:	e020      	b.n	80091c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	4a21      	ldr	r2, [pc, #132]	; (8009208 <USB_SetTurnaroundTime+0x138>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d306      	bcc.n	8009194 <USB_SetTurnaroundTime+0xc4>
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	4a20      	ldr	r2, [pc, #128]	; (800920c <USB_SetTurnaroundTime+0x13c>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d802      	bhi.n	8009194 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800918e:	2308      	movs	r3, #8
 8009190:	617b      	str	r3, [r7, #20]
 8009192:	e015      	b.n	80091c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	4a1d      	ldr	r2, [pc, #116]	; (800920c <USB_SetTurnaroundTime+0x13c>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d906      	bls.n	80091aa <USB_SetTurnaroundTime+0xda>
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	4a1c      	ldr	r2, [pc, #112]	; (8009210 <USB_SetTurnaroundTime+0x140>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d202      	bcs.n	80091aa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80091a4:	2307      	movs	r3, #7
 80091a6:	617b      	str	r3, [r7, #20]
 80091a8:	e00a      	b.n	80091c0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80091aa:	2306      	movs	r3, #6
 80091ac:	617b      	str	r3, [r7, #20]
 80091ae:	e007      	b.n	80091c0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80091b0:	79fb      	ldrb	r3, [r7, #7]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d102      	bne.n	80091bc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80091b6:	2309      	movs	r3, #9
 80091b8:	617b      	str	r3, [r7, #20]
 80091ba:	e001      	b.n	80091c0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80091bc:	2309      	movs	r3, #9
 80091be:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	68da      	ldr	r2, [r3, #12]
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	029b      	lsls	r3, r3, #10
 80091d4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80091d8:	431a      	orrs	r2, r3
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80091de:	2300      	movs	r3, #0
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	371c      	adds	r7, #28
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr
 80091ec:	00d8acbf 	.word	0x00d8acbf
 80091f0:	00e4e1c0 	.word	0x00e4e1c0
 80091f4:	00f42400 	.word	0x00f42400
 80091f8:	01067380 	.word	0x01067380
 80091fc:	011a499f 	.word	0x011a499f
 8009200:	01312cff 	.word	0x01312cff
 8009204:	014ca43f 	.word	0x014ca43f
 8009208:	016e3600 	.word	0x016e3600
 800920c:	01a6ab1f 	.word	0x01a6ab1f
 8009210:	01e84800 	.word	0x01e84800

08009214 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	f043 0201 	orr.w	r2, r3, #1
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	370c      	adds	r7, #12
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr

08009236 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009236:	b480      	push	{r7}
 8009238:	b083      	sub	sp, #12
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	f023 0201 	bic.w	r2, r3, #1
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	460b      	mov	r3, r1
 8009262:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009264:	2300      	movs	r3, #0
 8009266:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	68db      	ldr	r3, [r3, #12]
 800926c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009274:	78fb      	ldrb	r3, [r7, #3]
 8009276:	2b01      	cmp	r3, #1
 8009278:	d115      	bne.n	80092a6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009286:	2001      	movs	r0, #1
 8009288:	f7fa fc08 	bl	8003a9c <HAL_Delay>
      ms++;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	3301      	adds	r3, #1
 8009290:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f001 f972 	bl	800a57c <USB_GetMode>
 8009298:	4603      	mov	r3, r0
 800929a:	2b01      	cmp	r3, #1
 800929c:	d01e      	beq.n	80092dc <USB_SetCurrentMode+0x84>
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2b31      	cmp	r3, #49	; 0x31
 80092a2:	d9f0      	bls.n	8009286 <USB_SetCurrentMode+0x2e>
 80092a4:	e01a      	b.n	80092dc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80092a6:	78fb      	ldrb	r3, [r7, #3]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d115      	bne.n	80092d8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80092b8:	2001      	movs	r0, #1
 80092ba:	f7fa fbef 	bl	8003a9c <HAL_Delay>
      ms++;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	3301      	adds	r3, #1
 80092c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f001 f959 	bl	800a57c <USB_GetMode>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d005      	beq.n	80092dc <USB_SetCurrentMode+0x84>
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2b31      	cmp	r3, #49	; 0x31
 80092d4:	d9f0      	bls.n	80092b8 <USB_SetCurrentMode+0x60>
 80092d6:	e001      	b.n	80092dc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80092d8:	2301      	movs	r3, #1
 80092da:	e005      	b.n	80092e8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2b32      	cmp	r3, #50	; 0x32
 80092e0:	d101      	bne.n	80092e6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	e000      	b.n	80092e8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80092e6:	2300      	movs	r3, #0
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3710      	adds	r7, #16
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80092f0:	b084      	sub	sp, #16
 80092f2:	b580      	push	{r7, lr}
 80092f4:	b086      	sub	sp, #24
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
 80092fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80092fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009302:	2300      	movs	r3, #0
 8009304:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800930a:	2300      	movs	r3, #0
 800930c:	613b      	str	r3, [r7, #16]
 800930e:	e009      	b.n	8009324 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	3340      	adds	r3, #64	; 0x40
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	4413      	add	r3, r2
 800931a:	2200      	movs	r2, #0
 800931c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	3301      	adds	r3, #1
 8009322:	613b      	str	r3, [r7, #16]
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	2b0e      	cmp	r3, #14
 8009328:	d9f2      	bls.n	8009310 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800932a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800932c:	2b00      	cmp	r3, #0
 800932e:	d11c      	bne.n	800936a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	68fa      	ldr	r2, [r7, #12]
 800933a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800933e:	f043 0302 	orr.w	r3, r3, #2
 8009342:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009348:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009354:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009360:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	639a      	str	r2, [r3, #56]	; 0x38
 8009368:	e00b      	b.n	8009382 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800936e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800937a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009388:	461a      	mov	r2, r3
 800938a:	2300      	movs	r3, #0
 800938c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009394:	4619      	mov	r1, r3
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800939c:	461a      	mov	r2, r3
 800939e:	680b      	ldr	r3, [r1, #0]
 80093a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80093a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d10c      	bne.n	80093c2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80093a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d104      	bne.n	80093b8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80093ae:	2100      	movs	r1, #0
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 f945 	bl	8009640 <USB_SetDevSpeed>
 80093b6:	e008      	b.n	80093ca <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80093b8:	2101      	movs	r1, #1
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 f940 	bl	8009640 <USB_SetDevSpeed>
 80093c0:	e003      	b.n	80093ca <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80093c2:	2103      	movs	r1, #3
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 f93b 	bl	8009640 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80093ca:	2110      	movs	r1, #16
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 f8f3 	bl	80095b8 <USB_FlushTxFifo>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d001      	beq.n	80093dc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80093d8:	2301      	movs	r3, #1
 80093da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 f90f 	bl	8009600 <USB_FlushRxFifo>
 80093e2:	4603      	mov	r3, r0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d001      	beq.n	80093ec <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093f2:	461a      	mov	r2, r3
 80093f4:	2300      	movs	r3, #0
 80093f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093fe:	461a      	mov	r2, r3
 8009400:	2300      	movs	r3, #0
 8009402:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800940a:	461a      	mov	r2, r3
 800940c:	2300      	movs	r3, #0
 800940e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009410:	2300      	movs	r3, #0
 8009412:	613b      	str	r3, [r7, #16]
 8009414:	e043      	b.n	800949e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	015a      	lsls	r2, r3, #5
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	4413      	add	r3, r2
 800941e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009428:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800942c:	d118      	bne.n	8009460 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d10a      	bne.n	800944a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	015a      	lsls	r2, r3, #5
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	4413      	add	r3, r2
 800943c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009440:	461a      	mov	r2, r3
 8009442:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009446:	6013      	str	r3, [r2, #0]
 8009448:	e013      	b.n	8009472 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	015a      	lsls	r2, r3, #5
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	4413      	add	r3, r2
 8009452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009456:	461a      	mov	r2, r3
 8009458:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800945c:	6013      	str	r3, [r2, #0]
 800945e:	e008      	b.n	8009472 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	015a      	lsls	r2, r3, #5
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	4413      	add	r3, r2
 8009468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800946c:	461a      	mov	r2, r3
 800946e:	2300      	movs	r3, #0
 8009470:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	015a      	lsls	r2, r3, #5
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	4413      	add	r3, r2
 800947a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800947e:	461a      	mov	r2, r3
 8009480:	2300      	movs	r3, #0
 8009482:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	015a      	lsls	r2, r3, #5
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	4413      	add	r3, r2
 800948c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009490:	461a      	mov	r2, r3
 8009492:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009496:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	3301      	adds	r3, #1
 800949c:	613b      	str	r3, [r7, #16]
 800949e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a0:	693a      	ldr	r2, [r7, #16]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d3b7      	bcc.n	8009416 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80094a6:	2300      	movs	r3, #0
 80094a8:	613b      	str	r3, [r7, #16]
 80094aa:	e043      	b.n	8009534 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	015a      	lsls	r2, r3, #5
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	4413      	add	r3, r2
 80094b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094c2:	d118      	bne.n	80094f6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d10a      	bne.n	80094e0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	015a      	lsls	r2, r3, #5
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	4413      	add	r3, r2
 80094d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094d6:	461a      	mov	r2, r3
 80094d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80094dc:	6013      	str	r3, [r2, #0]
 80094de:	e013      	b.n	8009508 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	015a      	lsls	r2, r3, #5
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	4413      	add	r3, r2
 80094e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ec:	461a      	mov	r2, r3
 80094ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80094f2:	6013      	str	r3, [r2, #0]
 80094f4:	e008      	b.n	8009508 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	015a      	lsls	r2, r3, #5
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	4413      	add	r3, r2
 80094fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009502:	461a      	mov	r2, r3
 8009504:	2300      	movs	r3, #0
 8009506:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	015a      	lsls	r2, r3, #5
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	4413      	add	r3, r2
 8009510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009514:	461a      	mov	r2, r3
 8009516:	2300      	movs	r3, #0
 8009518:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	015a      	lsls	r2, r3, #5
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	4413      	add	r3, r2
 8009522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009526:	461a      	mov	r2, r3
 8009528:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800952c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	3301      	adds	r3, #1
 8009532:	613b      	str	r3, [r7, #16]
 8009534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009536:	693a      	ldr	r2, [r7, #16]
 8009538:	429a      	cmp	r2, r3
 800953a:	d3b7      	bcc.n	80094ac <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009542:	691b      	ldr	r3, [r3, #16]
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800954a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800954e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2200      	movs	r2, #0
 8009554:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800955c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800955e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009560:	2b00      	cmp	r3, #0
 8009562:	d105      	bne.n	8009570 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	699b      	ldr	r3, [r3, #24]
 8009568:	f043 0210 	orr.w	r2, r3, #16
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	699a      	ldr	r2, [r3, #24]
 8009574:	4b0f      	ldr	r3, [pc, #60]	; (80095b4 <USB_DevInit+0x2c4>)
 8009576:	4313      	orrs	r3, r2
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800957c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800957e:	2b00      	cmp	r3, #0
 8009580:	d005      	beq.n	800958e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	699b      	ldr	r3, [r3, #24]
 8009586:	f043 0208 	orr.w	r2, r3, #8
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800958e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009590:	2b01      	cmp	r3, #1
 8009592:	d107      	bne.n	80095a4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	699b      	ldr	r3, [r3, #24]
 8009598:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800959c:	f043 0304 	orr.w	r3, r3, #4
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80095a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3718      	adds	r7, #24
 80095aa:	46bd      	mov	sp, r7
 80095ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80095b0:	b004      	add	sp, #16
 80095b2:	4770      	bx	lr
 80095b4:	803c3800 	.word	0x803c3800

080095b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b085      	sub	sp, #20
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80095c2:	2300      	movs	r3, #0
 80095c4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	019b      	lsls	r3, r3, #6
 80095ca:	f043 0220 	orr.w	r2, r3, #32
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	3301      	adds	r3, #1
 80095d6:	60fb      	str	r3, [r7, #12]
 80095d8:	4a08      	ldr	r2, [pc, #32]	; (80095fc <USB_FlushTxFifo+0x44>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d901      	bls.n	80095e2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80095de:	2303      	movs	r3, #3
 80095e0:	e006      	b.n	80095f0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	691b      	ldr	r3, [r3, #16]
 80095e6:	f003 0320 	and.w	r3, r3, #32
 80095ea:	2b20      	cmp	r3, #32
 80095ec:	d0f1      	beq.n	80095d2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3714      	adds	r7, #20
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr
 80095fc:	00030d40 	.word	0x00030d40

08009600 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009600:	b480      	push	{r7}
 8009602:	b085      	sub	sp, #20
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009608:	2300      	movs	r3, #0
 800960a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2210      	movs	r2, #16
 8009610:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	3301      	adds	r3, #1
 8009616:	60fb      	str	r3, [r7, #12]
 8009618:	4a08      	ldr	r2, [pc, #32]	; (800963c <USB_FlushRxFifo+0x3c>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d901      	bls.n	8009622 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800961e:	2303      	movs	r3, #3
 8009620:	e006      	b.n	8009630 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	691b      	ldr	r3, [r3, #16]
 8009626:	f003 0310 	and.w	r3, r3, #16
 800962a:	2b10      	cmp	r3, #16
 800962c:	d0f1      	beq.n	8009612 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	3714      	adds	r7, #20
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr
 800963c:	00030d40 	.word	0x00030d40

08009640 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009640:	b480      	push	{r7}
 8009642:	b085      	sub	sp, #20
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	460b      	mov	r3, r1
 800964a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	78fb      	ldrb	r3, [r7, #3]
 800965a:	68f9      	ldr	r1, [r7, #12]
 800965c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009660:	4313      	orrs	r3, r2
 8009662:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	3714      	adds	r7, #20
 800966a:	46bd      	mov	sp, r7
 800966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009670:	4770      	bx	lr

08009672 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009672:	b480      	push	{r7}
 8009674:	b087      	sub	sp, #28
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009684:	689b      	ldr	r3, [r3, #8]
 8009686:	f003 0306 	and.w	r3, r3, #6
 800968a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d102      	bne.n	8009698 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009692:	2300      	movs	r3, #0
 8009694:	75fb      	strb	r3, [r7, #23]
 8009696:	e00a      	b.n	80096ae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2b02      	cmp	r3, #2
 800969c:	d002      	beq.n	80096a4 <USB_GetDevSpeed+0x32>
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2b06      	cmp	r3, #6
 80096a2:	d102      	bne.n	80096aa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80096a4:	2302      	movs	r3, #2
 80096a6:	75fb      	strb	r3, [r7, #23]
 80096a8:	e001      	b.n	80096ae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80096aa:	230f      	movs	r3, #15
 80096ac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80096ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	371c      	adds	r7, #28
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr

080096bc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80096bc:	b480      	push	{r7}
 80096be:	b085      	sub	sp, #20
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	785b      	ldrb	r3, [r3, #1]
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d13a      	bne.n	800974e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096de:	69da      	ldr	r2, [r3, #28]
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	f003 030f 	and.w	r3, r3, #15
 80096e8:	2101      	movs	r1, #1
 80096ea:	fa01 f303 	lsl.w	r3, r1, r3
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	68f9      	ldr	r1, [r7, #12]
 80096f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096f6:	4313      	orrs	r3, r2
 80096f8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	015a      	lsls	r2, r3, #5
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	4413      	add	r3, r2
 8009702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800970c:	2b00      	cmp	r3, #0
 800970e:	d155      	bne.n	80097bc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	015a      	lsls	r2, r3, #5
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	4413      	add	r3, r2
 8009718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	78db      	ldrb	r3, [r3, #3]
 800972a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800972c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	059b      	lsls	r3, r3, #22
 8009732:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009734:	4313      	orrs	r3, r2
 8009736:	68ba      	ldr	r2, [r7, #8]
 8009738:	0151      	lsls	r1, r2, #5
 800973a:	68fa      	ldr	r2, [r7, #12]
 800973c:	440a      	add	r2, r1
 800973e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800974a:	6013      	str	r3, [r2, #0]
 800974c:	e036      	b.n	80097bc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009754:	69da      	ldr	r2, [r3, #28]
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	781b      	ldrb	r3, [r3, #0]
 800975a:	f003 030f 	and.w	r3, r3, #15
 800975e:	2101      	movs	r1, #1
 8009760:	fa01 f303 	lsl.w	r3, r1, r3
 8009764:	041b      	lsls	r3, r3, #16
 8009766:	68f9      	ldr	r1, [r7, #12]
 8009768:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800976c:	4313      	orrs	r3, r2
 800976e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	015a      	lsls	r2, r3, #5
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	4413      	add	r3, r2
 8009778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009782:	2b00      	cmp	r3, #0
 8009784:	d11a      	bne.n	80097bc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	015a      	lsls	r2, r3, #5
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	4413      	add	r3, r2
 800978e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	689b      	ldr	r3, [r3, #8]
 8009798:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	78db      	ldrb	r3, [r3, #3]
 80097a0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80097a2:	430b      	orrs	r3, r1
 80097a4:	4313      	orrs	r3, r2
 80097a6:	68ba      	ldr	r2, [r7, #8]
 80097a8:	0151      	lsls	r1, r2, #5
 80097aa:	68fa      	ldr	r2, [r7, #12]
 80097ac:	440a      	add	r2, r1
 80097ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097ba:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80097bc:	2300      	movs	r3, #0
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3714      	adds	r7, #20
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr
	...

080097cc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b085      	sub	sp, #20
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	785b      	ldrb	r3, [r3, #1]
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d161      	bne.n	80098ac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	015a      	lsls	r2, r3, #5
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	4413      	add	r3, r2
 80097f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097fe:	d11f      	bne.n	8009840 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	015a      	lsls	r2, r3, #5
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	4413      	add	r3, r2
 8009808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	68ba      	ldr	r2, [r7, #8]
 8009810:	0151      	lsls	r1, r2, #5
 8009812:	68fa      	ldr	r2, [r7, #12]
 8009814:	440a      	add	r2, r1
 8009816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800981a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800981e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	015a      	lsls	r2, r3, #5
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	4413      	add	r3, r2
 8009828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	68ba      	ldr	r2, [r7, #8]
 8009830:	0151      	lsls	r1, r2, #5
 8009832:	68fa      	ldr	r2, [r7, #12]
 8009834:	440a      	add	r2, r1
 8009836:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800983a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800983e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009846:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	f003 030f 	and.w	r3, r3, #15
 8009850:	2101      	movs	r1, #1
 8009852:	fa01 f303 	lsl.w	r3, r1, r3
 8009856:	b29b      	uxth	r3, r3
 8009858:	43db      	mvns	r3, r3
 800985a:	68f9      	ldr	r1, [r7, #12]
 800985c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009860:	4013      	ands	r3, r2
 8009862:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800986a:	69da      	ldr	r2, [r3, #28]
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	f003 030f 	and.w	r3, r3, #15
 8009874:	2101      	movs	r1, #1
 8009876:	fa01 f303 	lsl.w	r3, r1, r3
 800987a:	b29b      	uxth	r3, r3
 800987c:	43db      	mvns	r3, r3
 800987e:	68f9      	ldr	r1, [r7, #12]
 8009880:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009884:	4013      	ands	r3, r2
 8009886:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	015a      	lsls	r2, r3, #5
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	4413      	add	r3, r2
 8009890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	0159      	lsls	r1, r3, #5
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	440b      	add	r3, r1
 800989e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098a2:	4619      	mov	r1, r3
 80098a4:	4b35      	ldr	r3, [pc, #212]	; (800997c <USB_DeactivateEndpoint+0x1b0>)
 80098a6:	4013      	ands	r3, r2
 80098a8:	600b      	str	r3, [r1, #0]
 80098aa:	e060      	b.n	800996e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	015a      	lsls	r2, r3, #5
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	4413      	add	r3, r2
 80098b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098c2:	d11f      	bne.n	8009904 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	015a      	lsls	r2, r3, #5
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	4413      	add	r3, r2
 80098cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	68ba      	ldr	r2, [r7, #8]
 80098d4:	0151      	lsls	r1, r2, #5
 80098d6:	68fa      	ldr	r2, [r7, #12]
 80098d8:	440a      	add	r2, r1
 80098da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80098e2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	015a      	lsls	r2, r3, #5
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	4413      	add	r3, r2
 80098ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	68ba      	ldr	r2, [r7, #8]
 80098f4:	0151      	lsls	r1, r2, #5
 80098f6:	68fa      	ldr	r2, [r7, #12]
 80098f8:	440a      	add	r2, r1
 80098fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009902:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800990a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	f003 030f 	and.w	r3, r3, #15
 8009914:	2101      	movs	r1, #1
 8009916:	fa01 f303 	lsl.w	r3, r1, r3
 800991a:	041b      	lsls	r3, r3, #16
 800991c:	43db      	mvns	r3, r3
 800991e:	68f9      	ldr	r1, [r7, #12]
 8009920:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009924:	4013      	ands	r3, r2
 8009926:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800992e:	69da      	ldr	r2, [r3, #28]
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	f003 030f 	and.w	r3, r3, #15
 8009938:	2101      	movs	r1, #1
 800993a:	fa01 f303 	lsl.w	r3, r1, r3
 800993e:	041b      	lsls	r3, r3, #16
 8009940:	43db      	mvns	r3, r3
 8009942:	68f9      	ldr	r1, [r7, #12]
 8009944:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009948:	4013      	ands	r3, r2
 800994a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	015a      	lsls	r2, r3, #5
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	4413      	add	r3, r2
 8009954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	0159      	lsls	r1, r3, #5
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	440b      	add	r3, r1
 8009962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009966:	4619      	mov	r1, r3
 8009968:	4b05      	ldr	r3, [pc, #20]	; (8009980 <USB_DeactivateEndpoint+0x1b4>)
 800996a:	4013      	ands	r3, r2
 800996c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800996e:	2300      	movs	r3, #0
}
 8009970:	4618      	mov	r0, r3
 8009972:	3714      	adds	r7, #20
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr
 800997c:	ec337800 	.word	0xec337800
 8009980:	eff37800 	.word	0xeff37800

08009984 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b08a      	sub	sp, #40	; 0x28
 8009988:	af02      	add	r7, sp, #8
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	4613      	mov	r3, r2
 8009990:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	785b      	ldrb	r3, [r3, #1]
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	f040 815c 	bne.w	8009c5e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	695b      	ldr	r3, [r3, #20]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d132      	bne.n	8009a14 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80099ae:	69bb      	ldr	r3, [r7, #24]
 80099b0:	015a      	lsls	r2, r3, #5
 80099b2:	69fb      	ldr	r3, [r7, #28]
 80099b4:	4413      	add	r3, r2
 80099b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099ba:	691b      	ldr	r3, [r3, #16]
 80099bc:	69ba      	ldr	r2, [r7, #24]
 80099be:	0151      	lsls	r1, r2, #5
 80099c0:	69fa      	ldr	r2, [r7, #28]
 80099c2:	440a      	add	r2, r1
 80099c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80099cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80099d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80099d2:	69bb      	ldr	r3, [r7, #24]
 80099d4:	015a      	lsls	r2, r3, #5
 80099d6:	69fb      	ldr	r3, [r7, #28]
 80099d8:	4413      	add	r3, r2
 80099da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099de:	691b      	ldr	r3, [r3, #16]
 80099e0:	69ba      	ldr	r2, [r7, #24]
 80099e2:	0151      	lsls	r1, r2, #5
 80099e4:	69fa      	ldr	r2, [r7, #28]
 80099e6:	440a      	add	r2, r1
 80099e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80099f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	015a      	lsls	r2, r3, #5
 80099f6:	69fb      	ldr	r3, [r7, #28]
 80099f8:	4413      	add	r3, r2
 80099fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099fe:	691b      	ldr	r3, [r3, #16]
 8009a00:	69ba      	ldr	r2, [r7, #24]
 8009a02:	0151      	lsls	r1, r2, #5
 8009a04:	69fa      	ldr	r2, [r7, #28]
 8009a06:	440a      	add	r2, r1
 8009a08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a0c:	0cdb      	lsrs	r3, r3, #19
 8009a0e:	04db      	lsls	r3, r3, #19
 8009a10:	6113      	str	r3, [r2, #16]
 8009a12:	e074      	b.n	8009afe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009a14:	69bb      	ldr	r3, [r7, #24]
 8009a16:	015a      	lsls	r2, r3, #5
 8009a18:	69fb      	ldr	r3, [r7, #28]
 8009a1a:	4413      	add	r3, r2
 8009a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a20:	691b      	ldr	r3, [r3, #16]
 8009a22:	69ba      	ldr	r2, [r7, #24]
 8009a24:	0151      	lsls	r1, r2, #5
 8009a26:	69fa      	ldr	r2, [r7, #28]
 8009a28:	440a      	add	r2, r1
 8009a2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a2e:	0cdb      	lsrs	r3, r3, #19
 8009a30:	04db      	lsls	r3, r3, #19
 8009a32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009a34:	69bb      	ldr	r3, [r7, #24]
 8009a36:	015a      	lsls	r2, r3, #5
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	4413      	add	r3, r2
 8009a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a40:	691b      	ldr	r3, [r3, #16]
 8009a42:	69ba      	ldr	r2, [r7, #24]
 8009a44:	0151      	lsls	r1, r2, #5
 8009a46:	69fa      	ldr	r2, [r7, #28]
 8009a48:	440a      	add	r2, r1
 8009a4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a4e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009a52:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009a56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009a58:	69bb      	ldr	r3, [r7, #24]
 8009a5a:	015a      	lsls	r2, r3, #5
 8009a5c:	69fb      	ldr	r3, [r7, #28]
 8009a5e:	4413      	add	r3, r2
 8009a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a64:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	6959      	ldr	r1, [r3, #20]
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	440b      	add	r3, r1
 8009a70:	1e59      	subs	r1, r3, #1
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	689b      	ldr	r3, [r3, #8]
 8009a76:	fbb1 f3f3 	udiv	r3, r1, r3
 8009a7a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009a7c:	4b9d      	ldr	r3, [pc, #628]	; (8009cf4 <USB_EPStartXfer+0x370>)
 8009a7e:	400b      	ands	r3, r1
 8009a80:	69b9      	ldr	r1, [r7, #24]
 8009a82:	0148      	lsls	r0, r1, #5
 8009a84:	69f9      	ldr	r1, [r7, #28]
 8009a86:	4401      	add	r1, r0
 8009a88:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009a90:	69bb      	ldr	r3, [r7, #24]
 8009a92:	015a      	lsls	r2, r3, #5
 8009a94:	69fb      	ldr	r3, [r7, #28]
 8009a96:	4413      	add	r3, r2
 8009a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a9c:	691a      	ldr	r2, [r3, #16]
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	695b      	ldr	r3, [r3, #20]
 8009aa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009aa6:	69b9      	ldr	r1, [r7, #24]
 8009aa8:	0148      	lsls	r0, r1, #5
 8009aaa:	69f9      	ldr	r1, [r7, #28]
 8009aac:	4401      	add	r1, r0
 8009aae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	78db      	ldrb	r3, [r3, #3]
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d11f      	bne.n	8009afe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009abe:	69bb      	ldr	r3, [r7, #24]
 8009ac0:	015a      	lsls	r2, r3, #5
 8009ac2:	69fb      	ldr	r3, [r7, #28]
 8009ac4:	4413      	add	r3, r2
 8009ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aca:	691b      	ldr	r3, [r3, #16]
 8009acc:	69ba      	ldr	r2, [r7, #24]
 8009ace:	0151      	lsls	r1, r2, #5
 8009ad0:	69fa      	ldr	r2, [r7, #28]
 8009ad2:	440a      	add	r2, r1
 8009ad4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ad8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009adc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009ade:	69bb      	ldr	r3, [r7, #24]
 8009ae0:	015a      	lsls	r2, r3, #5
 8009ae2:	69fb      	ldr	r3, [r7, #28]
 8009ae4:	4413      	add	r3, r2
 8009ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aea:	691b      	ldr	r3, [r3, #16]
 8009aec:	69ba      	ldr	r2, [r7, #24]
 8009aee:	0151      	lsls	r1, r2, #5
 8009af0:	69fa      	ldr	r2, [r7, #28]
 8009af2:	440a      	add	r2, r1
 8009af4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009af8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009afc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009afe:	79fb      	ldrb	r3, [r7, #7]
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d14b      	bne.n	8009b9c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	691b      	ldr	r3, [r3, #16]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d009      	beq.n	8009b20 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009b0c:	69bb      	ldr	r3, [r7, #24]
 8009b0e:	015a      	lsls	r2, r3, #5
 8009b10:	69fb      	ldr	r3, [r7, #28]
 8009b12:	4413      	add	r3, r2
 8009b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b18:	461a      	mov	r2, r3
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	691b      	ldr	r3, [r3, #16]
 8009b1e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	78db      	ldrb	r3, [r3, #3]
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d128      	bne.n	8009b7a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009b28:	69fb      	ldr	r3, [r7, #28]
 8009b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d110      	bne.n	8009b5a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009b38:	69bb      	ldr	r3, [r7, #24]
 8009b3a:	015a      	lsls	r2, r3, #5
 8009b3c:	69fb      	ldr	r3, [r7, #28]
 8009b3e:	4413      	add	r3, r2
 8009b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	69ba      	ldr	r2, [r7, #24]
 8009b48:	0151      	lsls	r1, r2, #5
 8009b4a:	69fa      	ldr	r2, [r7, #28]
 8009b4c:	440a      	add	r2, r1
 8009b4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009b56:	6013      	str	r3, [r2, #0]
 8009b58:	e00f      	b.n	8009b7a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009b5a:	69bb      	ldr	r3, [r7, #24]
 8009b5c:	015a      	lsls	r2, r3, #5
 8009b5e:	69fb      	ldr	r3, [r7, #28]
 8009b60:	4413      	add	r3, r2
 8009b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	69ba      	ldr	r2, [r7, #24]
 8009b6a:	0151      	lsls	r1, r2, #5
 8009b6c:	69fa      	ldr	r2, [r7, #28]
 8009b6e:	440a      	add	r2, r1
 8009b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b78:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b7a:	69bb      	ldr	r3, [r7, #24]
 8009b7c:	015a      	lsls	r2, r3, #5
 8009b7e:	69fb      	ldr	r3, [r7, #28]
 8009b80:	4413      	add	r3, r2
 8009b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	69ba      	ldr	r2, [r7, #24]
 8009b8a:	0151      	lsls	r1, r2, #5
 8009b8c:	69fa      	ldr	r2, [r7, #28]
 8009b8e:	440a      	add	r2, r1
 8009b90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b94:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b98:	6013      	str	r3, [r2, #0]
 8009b9a:	e12f      	b.n	8009dfc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b9c:	69bb      	ldr	r3, [r7, #24]
 8009b9e:	015a      	lsls	r2, r3, #5
 8009ba0:	69fb      	ldr	r3, [r7, #28]
 8009ba2:	4413      	add	r3, r2
 8009ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	69ba      	ldr	r2, [r7, #24]
 8009bac:	0151      	lsls	r1, r2, #5
 8009bae:	69fa      	ldr	r2, [r7, #28]
 8009bb0:	440a      	add	r2, r1
 8009bb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bb6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009bba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	78db      	ldrb	r3, [r3, #3]
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d015      	beq.n	8009bf0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	695b      	ldr	r3, [r3, #20]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	f000 8117 	beq.w	8009dfc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009bce:	69fb      	ldr	r3, [r7, #28]
 8009bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	f003 030f 	and.w	r3, r3, #15
 8009bde:	2101      	movs	r1, #1
 8009be0:	fa01 f303 	lsl.w	r3, r1, r3
 8009be4:	69f9      	ldr	r1, [r7, #28]
 8009be6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009bea:	4313      	orrs	r3, r2
 8009bec:	634b      	str	r3, [r1, #52]	; 0x34
 8009bee:	e105      	b.n	8009dfc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009bf0:	69fb      	ldr	r3, [r7, #28]
 8009bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bf6:	689b      	ldr	r3, [r3, #8]
 8009bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d110      	bne.n	8009c22 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009c00:	69bb      	ldr	r3, [r7, #24]
 8009c02:	015a      	lsls	r2, r3, #5
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	4413      	add	r3, r2
 8009c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	69ba      	ldr	r2, [r7, #24]
 8009c10:	0151      	lsls	r1, r2, #5
 8009c12:	69fa      	ldr	r2, [r7, #28]
 8009c14:	440a      	add	r2, r1
 8009c16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009c1e:	6013      	str	r3, [r2, #0]
 8009c20:	e00f      	b.n	8009c42 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009c22:	69bb      	ldr	r3, [r7, #24]
 8009c24:	015a      	lsls	r2, r3, #5
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	4413      	add	r3, r2
 8009c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	69ba      	ldr	r2, [r7, #24]
 8009c32:	0151      	lsls	r1, r2, #5
 8009c34:	69fa      	ldr	r2, [r7, #28]
 8009c36:	440a      	add	r2, r1
 8009c38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c40:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	68d9      	ldr	r1, [r3, #12]
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	781a      	ldrb	r2, [r3, #0]
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	695b      	ldr	r3, [r3, #20]
 8009c4e:	b298      	uxth	r0, r3
 8009c50:	79fb      	ldrb	r3, [r7, #7]
 8009c52:	9300      	str	r3, [sp, #0]
 8009c54:	4603      	mov	r3, r0
 8009c56:	68f8      	ldr	r0, [r7, #12]
 8009c58:	f000 fa2b 	bl	800a0b2 <USB_WritePacket>
 8009c5c:	e0ce      	b.n	8009dfc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	015a      	lsls	r2, r3, #5
 8009c62:	69fb      	ldr	r3, [r7, #28]
 8009c64:	4413      	add	r3, r2
 8009c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c6a:	691b      	ldr	r3, [r3, #16]
 8009c6c:	69ba      	ldr	r2, [r7, #24]
 8009c6e:	0151      	lsls	r1, r2, #5
 8009c70:	69fa      	ldr	r2, [r7, #28]
 8009c72:	440a      	add	r2, r1
 8009c74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c78:	0cdb      	lsrs	r3, r3, #19
 8009c7a:	04db      	lsls	r3, r3, #19
 8009c7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009c7e:	69bb      	ldr	r3, [r7, #24]
 8009c80:	015a      	lsls	r2, r3, #5
 8009c82:	69fb      	ldr	r3, [r7, #28]
 8009c84:	4413      	add	r3, r2
 8009c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c8a:	691b      	ldr	r3, [r3, #16]
 8009c8c:	69ba      	ldr	r2, [r7, #24]
 8009c8e:	0151      	lsls	r1, r2, #5
 8009c90:	69fa      	ldr	r2, [r7, #28]
 8009c92:	440a      	add	r2, r1
 8009c94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009c9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009ca0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	695b      	ldr	r3, [r3, #20]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d126      	bne.n	8009cf8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009caa:	69bb      	ldr	r3, [r7, #24]
 8009cac:	015a      	lsls	r2, r3, #5
 8009cae:	69fb      	ldr	r3, [r7, #28]
 8009cb0:	4413      	add	r3, r2
 8009cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cb6:	691a      	ldr	r2, [r3, #16]
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	689b      	ldr	r3, [r3, #8]
 8009cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cc0:	69b9      	ldr	r1, [r7, #24]
 8009cc2:	0148      	lsls	r0, r1, #5
 8009cc4:	69f9      	ldr	r1, [r7, #28]
 8009cc6:	4401      	add	r1, r0
 8009cc8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	015a      	lsls	r2, r3, #5
 8009cd4:	69fb      	ldr	r3, [r7, #28]
 8009cd6:	4413      	add	r3, r2
 8009cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cdc:	691b      	ldr	r3, [r3, #16]
 8009cde:	69ba      	ldr	r2, [r7, #24]
 8009ce0:	0151      	lsls	r1, r2, #5
 8009ce2:	69fa      	ldr	r2, [r7, #28]
 8009ce4:	440a      	add	r2, r1
 8009ce6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009cee:	6113      	str	r3, [r2, #16]
 8009cf0:	e036      	b.n	8009d60 <USB_EPStartXfer+0x3dc>
 8009cf2:	bf00      	nop
 8009cf4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	695a      	ldr	r2, [r3, #20]
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	689b      	ldr	r3, [r3, #8]
 8009d00:	4413      	add	r3, r2
 8009d02:	1e5a      	subs	r2, r3, #1
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d0c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009d0e:	69bb      	ldr	r3, [r7, #24]
 8009d10:	015a      	lsls	r2, r3, #5
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	4413      	add	r3, r2
 8009d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d1a:	691a      	ldr	r2, [r3, #16]
 8009d1c:	8afb      	ldrh	r3, [r7, #22]
 8009d1e:	04d9      	lsls	r1, r3, #19
 8009d20:	4b39      	ldr	r3, [pc, #228]	; (8009e08 <USB_EPStartXfer+0x484>)
 8009d22:	400b      	ands	r3, r1
 8009d24:	69b9      	ldr	r1, [r7, #24]
 8009d26:	0148      	lsls	r0, r1, #5
 8009d28:	69f9      	ldr	r1, [r7, #28]
 8009d2a:	4401      	add	r1, r0
 8009d2c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009d30:	4313      	orrs	r3, r2
 8009d32:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009d34:	69bb      	ldr	r3, [r7, #24]
 8009d36:	015a      	lsls	r2, r3, #5
 8009d38:	69fb      	ldr	r3, [r7, #28]
 8009d3a:	4413      	add	r3, r2
 8009d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d40:	691a      	ldr	r2, [r3, #16]
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	689b      	ldr	r3, [r3, #8]
 8009d46:	8af9      	ldrh	r1, [r7, #22]
 8009d48:	fb01 f303 	mul.w	r3, r1, r3
 8009d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d50:	69b9      	ldr	r1, [r7, #24]
 8009d52:	0148      	lsls	r0, r1, #5
 8009d54:	69f9      	ldr	r1, [r7, #28]
 8009d56:	4401      	add	r1, r0
 8009d58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009d60:	79fb      	ldrb	r3, [r7, #7]
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d10d      	bne.n	8009d82 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	68db      	ldr	r3, [r3, #12]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d009      	beq.n	8009d82 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	68d9      	ldr	r1, [r3, #12]
 8009d72:	69bb      	ldr	r3, [r7, #24]
 8009d74:	015a      	lsls	r2, r3, #5
 8009d76:	69fb      	ldr	r3, [r7, #28]
 8009d78:	4413      	add	r3, r2
 8009d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d7e:	460a      	mov	r2, r1
 8009d80:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	78db      	ldrb	r3, [r3, #3]
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	d128      	bne.n	8009ddc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009d8a:	69fb      	ldr	r3, [r7, #28]
 8009d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d90:	689b      	ldr	r3, [r3, #8]
 8009d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d110      	bne.n	8009dbc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009d9a:	69bb      	ldr	r3, [r7, #24]
 8009d9c:	015a      	lsls	r2, r3, #5
 8009d9e:	69fb      	ldr	r3, [r7, #28]
 8009da0:	4413      	add	r3, r2
 8009da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	69ba      	ldr	r2, [r7, #24]
 8009daa:	0151      	lsls	r1, r2, #5
 8009dac:	69fa      	ldr	r2, [r7, #28]
 8009dae:	440a      	add	r2, r1
 8009db0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009db4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009db8:	6013      	str	r3, [r2, #0]
 8009dba:	e00f      	b.n	8009ddc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009dbc:	69bb      	ldr	r3, [r7, #24]
 8009dbe:	015a      	lsls	r2, r3, #5
 8009dc0:	69fb      	ldr	r3, [r7, #28]
 8009dc2:	4413      	add	r3, r2
 8009dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	69ba      	ldr	r2, [r7, #24]
 8009dcc:	0151      	lsls	r1, r2, #5
 8009dce:	69fa      	ldr	r2, [r7, #28]
 8009dd0:	440a      	add	r2, r1
 8009dd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009dda:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009ddc:	69bb      	ldr	r3, [r7, #24]
 8009dde:	015a      	lsls	r2, r3, #5
 8009de0:	69fb      	ldr	r3, [r7, #28]
 8009de2:	4413      	add	r3, r2
 8009de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	69ba      	ldr	r2, [r7, #24]
 8009dec:	0151      	lsls	r1, r2, #5
 8009dee:	69fa      	ldr	r2, [r7, #28]
 8009df0:	440a      	add	r2, r1
 8009df2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009df6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009dfa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009dfc:	2300      	movs	r3, #0
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3720      	adds	r7, #32
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	1ff80000 	.word	0x1ff80000

08009e0c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b087      	sub	sp, #28
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	60f8      	str	r0, [r7, #12]
 8009e14:	60b9      	str	r1, [r7, #8]
 8009e16:	4613      	mov	r3, r2
 8009e18:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	785b      	ldrb	r3, [r3, #1]
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	f040 80cd 	bne.w	8009fc8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	695b      	ldr	r3, [r3, #20]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d132      	bne.n	8009e9c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	015a      	lsls	r2, r3, #5
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	4413      	add	r3, r2
 8009e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e42:	691b      	ldr	r3, [r3, #16]
 8009e44:	693a      	ldr	r2, [r7, #16]
 8009e46:	0151      	lsls	r1, r2, #5
 8009e48:	697a      	ldr	r2, [r7, #20]
 8009e4a:	440a      	add	r2, r1
 8009e4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009e54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009e58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	015a      	lsls	r2, r3, #5
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	4413      	add	r3, r2
 8009e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e66:	691b      	ldr	r3, [r3, #16]
 8009e68:	693a      	ldr	r2, [r7, #16]
 8009e6a:	0151      	lsls	r1, r2, #5
 8009e6c:	697a      	ldr	r2, [r7, #20]
 8009e6e:	440a      	add	r2, r1
 8009e70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	015a      	lsls	r2, r3, #5
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	4413      	add	r3, r2
 8009e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e86:	691b      	ldr	r3, [r3, #16]
 8009e88:	693a      	ldr	r2, [r7, #16]
 8009e8a:	0151      	lsls	r1, r2, #5
 8009e8c:	697a      	ldr	r2, [r7, #20]
 8009e8e:	440a      	add	r2, r1
 8009e90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e94:	0cdb      	lsrs	r3, r3, #19
 8009e96:	04db      	lsls	r3, r3, #19
 8009e98:	6113      	str	r3, [r2, #16]
 8009e9a:	e04e      	b.n	8009f3a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	015a      	lsls	r2, r3, #5
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	4413      	add	r3, r2
 8009ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ea8:	691b      	ldr	r3, [r3, #16]
 8009eaa:	693a      	ldr	r2, [r7, #16]
 8009eac:	0151      	lsls	r1, r2, #5
 8009eae:	697a      	ldr	r2, [r7, #20]
 8009eb0:	440a      	add	r2, r1
 8009eb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009eb6:	0cdb      	lsrs	r3, r3, #19
 8009eb8:	04db      	lsls	r3, r3, #19
 8009eba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	015a      	lsls	r2, r3, #5
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	4413      	add	r3, r2
 8009ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ec8:	691b      	ldr	r3, [r3, #16]
 8009eca:	693a      	ldr	r2, [r7, #16]
 8009ecc:	0151      	lsls	r1, r2, #5
 8009ece:	697a      	ldr	r2, [r7, #20]
 8009ed0:	440a      	add	r2, r1
 8009ed2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ed6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009eda:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009ede:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	695a      	ldr	r2, [r3, #20]
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	689b      	ldr	r3, [r3, #8]
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d903      	bls.n	8009ef4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	689a      	ldr	r2, [r3, #8]
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	015a      	lsls	r2, r3, #5
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	4413      	add	r3, r2
 8009efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f00:	691b      	ldr	r3, [r3, #16]
 8009f02:	693a      	ldr	r2, [r7, #16]
 8009f04:	0151      	lsls	r1, r2, #5
 8009f06:	697a      	ldr	r2, [r7, #20]
 8009f08:	440a      	add	r2, r1
 8009f0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	015a      	lsls	r2, r3, #5
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	4413      	add	r3, r2
 8009f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f20:	691a      	ldr	r2, [r3, #16]
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	695b      	ldr	r3, [r3, #20]
 8009f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f2a:	6939      	ldr	r1, [r7, #16]
 8009f2c:	0148      	lsls	r0, r1, #5
 8009f2e:	6979      	ldr	r1, [r7, #20]
 8009f30:	4401      	add	r1, r0
 8009f32:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009f36:	4313      	orrs	r3, r2
 8009f38:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009f3a:	79fb      	ldrb	r3, [r7, #7]
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d11e      	bne.n	8009f7e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	691b      	ldr	r3, [r3, #16]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d009      	beq.n	8009f5c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	015a      	lsls	r2, r3, #5
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	4413      	add	r3, r2
 8009f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f54:	461a      	mov	r2, r3
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	691b      	ldr	r3, [r3, #16]
 8009f5a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	015a      	lsls	r2, r3, #5
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	4413      	add	r3, r2
 8009f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	693a      	ldr	r2, [r7, #16]
 8009f6c:	0151      	lsls	r1, r2, #5
 8009f6e:	697a      	ldr	r2, [r7, #20]
 8009f70:	440a      	add	r2, r1
 8009f72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009f7a:	6013      	str	r3, [r2, #0]
 8009f7c:	e092      	b.n	800a0a4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	015a      	lsls	r2, r3, #5
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	4413      	add	r3, r2
 8009f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	693a      	ldr	r2, [r7, #16]
 8009f8e:	0151      	lsls	r1, r2, #5
 8009f90:	697a      	ldr	r2, [r7, #20]
 8009f92:	440a      	add	r2, r1
 8009f94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009f9c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	695b      	ldr	r3, [r3, #20]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d07e      	beq.n	800a0a4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	f003 030f 	and.w	r3, r3, #15
 8009fb6:	2101      	movs	r1, #1
 8009fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8009fbc:	6979      	ldr	r1, [r7, #20]
 8009fbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	634b      	str	r3, [r1, #52]	; 0x34
 8009fc6:	e06d      	b.n	800a0a4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	015a      	lsls	r2, r3, #5
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	4413      	add	r3, r2
 8009fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fd4:	691b      	ldr	r3, [r3, #16]
 8009fd6:	693a      	ldr	r2, [r7, #16]
 8009fd8:	0151      	lsls	r1, r2, #5
 8009fda:	697a      	ldr	r2, [r7, #20]
 8009fdc:	440a      	add	r2, r1
 8009fde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fe2:	0cdb      	lsrs	r3, r3, #19
 8009fe4:	04db      	lsls	r3, r3, #19
 8009fe6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	015a      	lsls	r2, r3, #5
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	4413      	add	r3, r2
 8009ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ff4:	691b      	ldr	r3, [r3, #16]
 8009ff6:	693a      	ldr	r2, [r7, #16]
 8009ff8:	0151      	lsls	r1, r2, #5
 8009ffa:	697a      	ldr	r2, [r7, #20]
 8009ffc:	440a      	add	r2, r1
 8009ffe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a002:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a006:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a00a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	695b      	ldr	r3, [r3, #20]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d003      	beq.n	800a01c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	689a      	ldr	r2, [r3, #8]
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	015a      	lsls	r2, r3, #5
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	4413      	add	r3, r2
 800a024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a028:	691b      	ldr	r3, [r3, #16]
 800a02a:	693a      	ldr	r2, [r7, #16]
 800a02c:	0151      	lsls	r1, r2, #5
 800a02e:	697a      	ldr	r2, [r7, #20]
 800a030:	440a      	add	r2, r1
 800a032:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a036:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a03a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	015a      	lsls	r2, r3, #5
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	4413      	add	r3, r2
 800a044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a048:	691a      	ldr	r2, [r3, #16]
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	689b      	ldr	r3, [r3, #8]
 800a04e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a052:	6939      	ldr	r1, [r7, #16]
 800a054:	0148      	lsls	r0, r1, #5
 800a056:	6979      	ldr	r1, [r7, #20]
 800a058:	4401      	add	r1, r0
 800a05a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a05e:	4313      	orrs	r3, r2
 800a060:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a062:	79fb      	ldrb	r3, [r7, #7]
 800a064:	2b01      	cmp	r3, #1
 800a066:	d10d      	bne.n	800a084 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d009      	beq.n	800a084 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	68d9      	ldr	r1, [r3, #12]
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	015a      	lsls	r2, r3, #5
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	4413      	add	r3, r2
 800a07c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a080:	460a      	mov	r2, r1
 800a082:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	015a      	lsls	r2, r3, #5
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	4413      	add	r3, r2
 800a08c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	693a      	ldr	r2, [r7, #16]
 800a094:	0151      	lsls	r1, r2, #5
 800a096:	697a      	ldr	r2, [r7, #20]
 800a098:	440a      	add	r2, r1
 800a09a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a09e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a0a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a0a4:	2300      	movs	r3, #0
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	371c      	adds	r7, #28
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b0:	4770      	bx	lr

0800a0b2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a0b2:	b480      	push	{r7}
 800a0b4:	b089      	sub	sp, #36	; 0x24
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	60f8      	str	r0, [r7, #12]
 800a0ba:	60b9      	str	r1, [r7, #8]
 800a0bc:	4611      	mov	r1, r2
 800a0be:	461a      	mov	r2, r3
 800a0c0:	460b      	mov	r3, r1
 800a0c2:	71fb      	strb	r3, [r7, #7]
 800a0c4:	4613      	mov	r3, r2
 800a0c6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a0d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d123      	bne.n	800a120 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a0d8:	88bb      	ldrh	r3, [r7, #4]
 800a0da:	3303      	adds	r3, #3
 800a0dc:	089b      	lsrs	r3, r3, #2
 800a0de:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	61bb      	str	r3, [r7, #24]
 800a0e4:	e018      	b.n	800a118 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a0e6:	79fb      	ldrb	r3, [r7, #7]
 800a0e8:	031a      	lsls	r2, r3, #12
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	4413      	add	r3, r2
 800a0ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	69fb      	ldr	r3, [r7, #28]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a0fa:	69fb      	ldr	r3, [r7, #28]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a100:	69fb      	ldr	r3, [r7, #28]
 800a102:	3301      	adds	r3, #1
 800a104:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a106:	69fb      	ldr	r3, [r7, #28]
 800a108:	3301      	adds	r3, #1
 800a10a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	3301      	adds	r3, #1
 800a110:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a112:	69bb      	ldr	r3, [r7, #24]
 800a114:	3301      	adds	r3, #1
 800a116:	61bb      	str	r3, [r7, #24]
 800a118:	69ba      	ldr	r2, [r7, #24]
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d3e2      	bcc.n	800a0e6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a120:	2300      	movs	r3, #0
}
 800a122:	4618      	mov	r0, r3
 800a124:	3724      	adds	r7, #36	; 0x24
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr

0800a12e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a12e:	b480      	push	{r7}
 800a130:	b08b      	sub	sp, #44	; 0x2c
 800a132:	af00      	add	r7, sp, #0
 800a134:	60f8      	str	r0, [r7, #12]
 800a136:	60b9      	str	r1, [r7, #8]
 800a138:	4613      	mov	r3, r2
 800a13a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a144:	88fb      	ldrh	r3, [r7, #6]
 800a146:	089b      	lsrs	r3, r3, #2
 800a148:	b29b      	uxth	r3, r3
 800a14a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a14c:	88fb      	ldrh	r3, [r7, #6]
 800a14e:	f003 0303 	and.w	r3, r3, #3
 800a152:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a154:	2300      	movs	r3, #0
 800a156:	623b      	str	r3, [r7, #32]
 800a158:	e014      	b.n	800a184 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a15a:	69bb      	ldr	r3, [r7, #24]
 800a15c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a160:	681a      	ldr	r2, [r3, #0]
 800a162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a164:	601a      	str	r2, [r3, #0]
    pDest++;
 800a166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a168:	3301      	adds	r3, #1
 800a16a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16e:	3301      	adds	r3, #1
 800a170:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a174:	3301      	adds	r3, #1
 800a176:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17a:	3301      	adds	r3, #1
 800a17c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a17e:	6a3b      	ldr	r3, [r7, #32]
 800a180:	3301      	adds	r3, #1
 800a182:	623b      	str	r3, [r7, #32]
 800a184:	6a3a      	ldr	r2, [r7, #32]
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	429a      	cmp	r2, r3
 800a18a:	d3e6      	bcc.n	800a15a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a18c:	8bfb      	ldrh	r3, [r7, #30]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d01e      	beq.n	800a1d0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a192:	2300      	movs	r3, #0
 800a194:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a196:	69bb      	ldr	r3, [r7, #24]
 800a198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a19c:	461a      	mov	r2, r3
 800a19e:	f107 0310 	add.w	r3, r7, #16
 800a1a2:	6812      	ldr	r2, [r2, #0]
 800a1a4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a1a6:	693a      	ldr	r2, [r7, #16]
 800a1a8:	6a3b      	ldr	r3, [r7, #32]
 800a1aa:	b2db      	uxtb	r3, r3
 800a1ac:	00db      	lsls	r3, r3, #3
 800a1ae:	fa22 f303 	lsr.w	r3, r2, r3
 800a1b2:	b2da      	uxtb	r2, r3
 800a1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b6:	701a      	strb	r2, [r3, #0]
      i++;
 800a1b8:	6a3b      	ldr	r3, [r7, #32]
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	623b      	str	r3, [r7, #32]
      pDest++;
 800a1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a1c4:	8bfb      	ldrh	r3, [r7, #30]
 800a1c6:	3b01      	subs	r3, #1
 800a1c8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a1ca:	8bfb      	ldrh	r3, [r7, #30]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d1ea      	bne.n	800a1a6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	372c      	adds	r7, #44	; 0x2c
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr

0800a1de <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a1de:	b480      	push	{r7}
 800a1e0:	b085      	sub	sp, #20
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	6078      	str	r0, [r7, #4]
 800a1e6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	785b      	ldrb	r3, [r3, #1]
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d12c      	bne.n	800a254 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	015a      	lsls	r2, r3, #5
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	4413      	add	r3, r2
 800a202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	db12      	blt.n	800a232 <USB_EPSetStall+0x54>
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d00f      	beq.n	800a232 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	015a      	lsls	r2, r3, #5
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	4413      	add	r3, r2
 800a21a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	68ba      	ldr	r2, [r7, #8]
 800a222:	0151      	lsls	r1, r2, #5
 800a224:	68fa      	ldr	r2, [r7, #12]
 800a226:	440a      	add	r2, r1
 800a228:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a22c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a230:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	015a      	lsls	r2, r3, #5
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	4413      	add	r3, r2
 800a23a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	68ba      	ldr	r2, [r7, #8]
 800a242:	0151      	lsls	r1, r2, #5
 800a244:	68fa      	ldr	r2, [r7, #12]
 800a246:	440a      	add	r2, r1
 800a248:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a24c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a250:	6013      	str	r3, [r2, #0]
 800a252:	e02b      	b.n	800a2ac <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	015a      	lsls	r2, r3, #5
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	4413      	add	r3, r2
 800a25c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	2b00      	cmp	r3, #0
 800a264:	db12      	blt.n	800a28c <USB_EPSetStall+0xae>
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d00f      	beq.n	800a28c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	015a      	lsls	r2, r3, #5
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	4413      	add	r3, r2
 800a274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	68ba      	ldr	r2, [r7, #8]
 800a27c:	0151      	lsls	r1, r2, #5
 800a27e:	68fa      	ldr	r2, [r7, #12]
 800a280:	440a      	add	r2, r1
 800a282:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a286:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a28a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	015a      	lsls	r2, r3, #5
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	4413      	add	r3, r2
 800a294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	68ba      	ldr	r2, [r7, #8]
 800a29c:	0151      	lsls	r1, r2, #5
 800a29e:	68fa      	ldr	r2, [r7, #12]
 800a2a0:	440a      	add	r2, r1
 800a2a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a2aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a2ac:	2300      	movs	r3, #0
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3714      	adds	r7, #20
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr

0800a2ba <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a2ba:	b480      	push	{r7}
 800a2bc:	b085      	sub	sp, #20
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
 800a2c2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	785b      	ldrb	r3, [r3, #1]
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	d128      	bne.n	800a328 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	015a      	lsls	r2, r3, #5
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	4413      	add	r3, r2
 800a2de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	68ba      	ldr	r2, [r7, #8]
 800a2e6:	0151      	lsls	r1, r2, #5
 800a2e8:	68fa      	ldr	r2, [r7, #12]
 800a2ea:	440a      	add	r2, r1
 800a2ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a2f4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	78db      	ldrb	r3, [r3, #3]
 800a2fa:	2b03      	cmp	r3, #3
 800a2fc:	d003      	beq.n	800a306 <USB_EPClearStall+0x4c>
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	78db      	ldrb	r3, [r3, #3]
 800a302:	2b02      	cmp	r3, #2
 800a304:	d138      	bne.n	800a378 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	015a      	lsls	r2, r3, #5
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	4413      	add	r3, r2
 800a30e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	68ba      	ldr	r2, [r7, #8]
 800a316:	0151      	lsls	r1, r2, #5
 800a318:	68fa      	ldr	r2, [r7, #12]
 800a31a:	440a      	add	r2, r1
 800a31c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a324:	6013      	str	r3, [r2, #0]
 800a326:	e027      	b.n	800a378 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	015a      	lsls	r2, r3, #5
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	4413      	add	r3, r2
 800a330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	68ba      	ldr	r2, [r7, #8]
 800a338:	0151      	lsls	r1, r2, #5
 800a33a:	68fa      	ldr	r2, [r7, #12]
 800a33c:	440a      	add	r2, r1
 800a33e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a342:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a346:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	78db      	ldrb	r3, [r3, #3]
 800a34c:	2b03      	cmp	r3, #3
 800a34e:	d003      	beq.n	800a358 <USB_EPClearStall+0x9e>
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	78db      	ldrb	r3, [r3, #3]
 800a354:	2b02      	cmp	r3, #2
 800a356:	d10f      	bne.n	800a378 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	015a      	lsls	r2, r3, #5
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	4413      	add	r3, r2
 800a360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	68ba      	ldr	r2, [r7, #8]
 800a368:	0151      	lsls	r1, r2, #5
 800a36a:	68fa      	ldr	r2, [r7, #12]
 800a36c:	440a      	add	r2, r1
 800a36e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a376:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a378:	2300      	movs	r3, #0
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3714      	adds	r7, #20
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr

0800a386 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a386:	b480      	push	{r7}
 800a388:	b085      	sub	sp, #20
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	6078      	str	r0, [r7, #4]
 800a38e:	460b      	mov	r3, r1
 800a390:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	68fa      	ldr	r2, [r7, #12]
 800a3a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a3a4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a3a8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	78fb      	ldrb	r3, [r7, #3]
 800a3b4:	011b      	lsls	r3, r3, #4
 800a3b6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a3ba:	68f9      	ldr	r1, [r7, #12]
 800a3bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a3c4:	2300      	movs	r3, #0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3714      	adds	r7, #20
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr

0800a3d2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a3d2:	b480      	push	{r7}
 800a3d4:	b085      	sub	sp, #20
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	68fa      	ldr	r2, [r7, #12]
 800a3e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a3ec:	f023 0303 	bic.w	r3, r3, #3
 800a3f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	68fa      	ldr	r2, [r7, #12]
 800a3fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a400:	f023 0302 	bic.w	r3, r3, #2
 800a404:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a406:	2300      	movs	r3, #0
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3714      	adds	r7, #20
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr

0800a414 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a414:	b480      	push	{r7}
 800a416:	b085      	sub	sp, #20
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	68fa      	ldr	r2, [r7, #12]
 800a42a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a42e:	f023 0303 	bic.w	r3, r3, #3
 800a432:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a43a:	685b      	ldr	r3, [r3, #4]
 800a43c:	68fa      	ldr	r2, [r7, #12]
 800a43e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a442:	f043 0302 	orr.w	r3, r3, #2
 800a446:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a448:	2300      	movs	r3, #0
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3714      	adds	r7, #20
 800a44e:	46bd      	mov	sp, r7
 800a450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a454:	4770      	bx	lr

0800a456 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a456:	b480      	push	{r7}
 800a458:	b085      	sub	sp, #20
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	695b      	ldr	r3, [r3, #20]
 800a462:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	699b      	ldr	r3, [r3, #24]
 800a468:	68fa      	ldr	r2, [r7, #12]
 800a46a:	4013      	ands	r3, r2
 800a46c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a46e:	68fb      	ldr	r3, [r7, #12]
}
 800a470:	4618      	mov	r0, r3
 800a472:	3714      	adds	r7, #20
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr

0800a47c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b085      	sub	sp, #20
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a48e:	699b      	ldr	r3, [r3, #24]
 800a490:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a498:	69db      	ldr	r3, [r3, #28]
 800a49a:	68ba      	ldr	r2, [r7, #8]
 800a49c:	4013      	ands	r3, r2
 800a49e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	0c1b      	lsrs	r3, r3, #16
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3714      	adds	r7, #20
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr

0800a4b0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b085      	sub	sp, #20
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4c2:	699b      	ldr	r3, [r3, #24]
 800a4c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4cc:	69db      	ldr	r3, [r3, #28]
 800a4ce:	68ba      	ldr	r2, [r7, #8]
 800a4d0:	4013      	ands	r3, r2
 800a4d2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	b29b      	uxth	r3, r3
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3714      	adds	r7, #20
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr

0800a4e4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b085      	sub	sp, #20
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a4f4:	78fb      	ldrb	r3, [r7, #3]
 800a4f6:	015a      	lsls	r2, r3, #5
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	4413      	add	r3, r2
 800a4fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a500:	689b      	ldr	r3, [r3, #8]
 800a502:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a50a:	695b      	ldr	r3, [r3, #20]
 800a50c:	68ba      	ldr	r2, [r7, #8]
 800a50e:	4013      	ands	r3, r2
 800a510:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a512:	68bb      	ldr	r3, [r7, #8]
}
 800a514:	4618      	mov	r0, r3
 800a516:	3714      	adds	r7, #20
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a520:	b480      	push	{r7}
 800a522:	b087      	sub	sp, #28
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	460b      	mov	r3, r1
 800a52a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a536:	691b      	ldr	r3, [r3, #16]
 800a538:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a542:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a544:	78fb      	ldrb	r3, [r7, #3]
 800a546:	f003 030f 	and.w	r3, r3, #15
 800a54a:	68fa      	ldr	r2, [r7, #12]
 800a54c:	fa22 f303 	lsr.w	r3, r2, r3
 800a550:	01db      	lsls	r3, r3, #7
 800a552:	b2db      	uxtb	r3, r3
 800a554:	693a      	ldr	r2, [r7, #16]
 800a556:	4313      	orrs	r3, r2
 800a558:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a55a:	78fb      	ldrb	r3, [r7, #3]
 800a55c:	015a      	lsls	r2, r3, #5
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	4413      	add	r3, r2
 800a562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a566:	689b      	ldr	r3, [r3, #8]
 800a568:	693a      	ldr	r2, [r7, #16]
 800a56a:	4013      	ands	r3, r2
 800a56c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a56e:	68bb      	ldr	r3, [r7, #8]
}
 800a570:	4618      	mov	r0, r3
 800a572:	371c      	adds	r7, #28
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr

0800a57c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	695b      	ldr	r3, [r3, #20]
 800a588:	f003 0301 	and.w	r3, r3, #1
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	370c      	adds	r7, #12
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr

0800a598 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a598:	b480      	push	{r7}
 800a59a:	b085      	sub	sp, #20
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	68fa      	ldr	r2, [r7, #12]
 800a5ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5b2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a5b6:	f023 0307 	bic.w	r3, r3, #7
 800a5ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	68fa      	ldr	r2, [r7, #12]
 800a5c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a5ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a5d0:	2300      	movs	r3, #0
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3714      	adds	r7, #20
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr
	...

0800a5e0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b087      	sub	sp, #28
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	460b      	mov	r3, r1
 800a5ea:	607a      	str	r2, [r7, #4]
 800a5ec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	333c      	adds	r3, #60	; 0x3c
 800a5f6:	3304      	adds	r3, #4
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	4a26      	ldr	r2, [pc, #152]	; (800a698 <USB_EP0_OutStart+0xb8>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d90a      	bls.n	800a61a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a610:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a614:	d101      	bne.n	800a61a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a616:	2300      	movs	r3, #0
 800a618:	e037      	b.n	800a68a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a620:	461a      	mov	r2, r3
 800a622:	2300      	movs	r3, #0
 800a624:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a62c:	691b      	ldr	r3, [r3, #16]
 800a62e:	697a      	ldr	r2, [r7, #20]
 800a630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a634:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a638:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a640:	691b      	ldr	r3, [r3, #16]
 800a642:	697a      	ldr	r2, [r7, #20]
 800a644:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a648:	f043 0318 	orr.w	r3, r3, #24
 800a64c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a654:	691b      	ldr	r3, [r3, #16]
 800a656:	697a      	ldr	r2, [r7, #20]
 800a658:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a65c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a660:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a662:	7afb      	ldrb	r3, [r7, #11]
 800a664:	2b01      	cmp	r3, #1
 800a666:	d10f      	bne.n	800a688 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a66e:	461a      	mov	r2, r3
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	697a      	ldr	r2, [r7, #20]
 800a67e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a682:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a686:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a688:	2300      	movs	r3, #0
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	371c      	adds	r7, #28
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr
 800a696:	bf00      	nop
 800a698:	4f54300a 	.word	0x4f54300a

0800a69c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b085      	sub	sp, #20
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	60fb      	str	r3, [r7, #12]
 800a6ae:	4a13      	ldr	r2, [pc, #76]	; (800a6fc <USB_CoreReset+0x60>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d901      	bls.n	800a6b8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800a6b4:	2303      	movs	r3, #3
 800a6b6:	e01a      	b.n	800a6ee <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	691b      	ldr	r3, [r3, #16]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	daf3      	bge.n	800a6a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	691b      	ldr	r3, [r3, #16]
 800a6c8:	f043 0201 	orr.w	r2, r3, #1
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	60fb      	str	r3, [r7, #12]
 800a6d6:	4a09      	ldr	r2, [pc, #36]	; (800a6fc <USB_CoreReset+0x60>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d901      	bls.n	800a6e0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800a6dc:	2303      	movs	r3, #3
 800a6de:	e006      	b.n	800a6ee <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	691b      	ldr	r3, [r3, #16]
 800a6e4:	f003 0301 	and.w	r3, r3, #1
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d0f1      	beq.n	800a6d0 <USB_CoreReset+0x34>

  return HAL_OK;
 800a6ec:	2300      	movs	r3, #0
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3714      	adds	r7, #20
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr
 800a6fa:	bf00      	nop
 800a6fc:	00030d40 	.word	0x00030d40

0800a700 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a704:	4904      	ldr	r1, [pc, #16]	; (800a718 <MX_FATFS_Init+0x18>)
 800a706:	4805      	ldr	r0, [pc, #20]	; (800a71c <MX_FATFS_Init+0x1c>)
 800a708:	f004 fef2 	bl	800f4f0 <FATFS_LinkDriver>
 800a70c:	4603      	mov	r3, r0
 800a70e:	461a      	mov	r2, r3
 800a710:	4b03      	ldr	r3, [pc, #12]	; (800a720 <MX_FATFS_Init+0x20>)
 800a712:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a714:	bf00      	nop
 800a716:	bd80      	pop	{r7, pc}
 800a718:	2000191c 	.word	0x2000191c
 800a71c:	2000000c 	.word	0x2000000c
 800a720:	20001920 	.word	0x20001920

0800a724 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a724:	b480      	push	{r7}
 800a726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a728:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b082      	sub	sp, #8
 800a738:	af00      	add	r7, sp, #0
 800a73a:	4603      	mov	r3, r0
 800a73c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800a73e:	79fb      	ldrb	r3, [r7, #7]
 800a740:	4618      	mov	r0, r3
 800a742:	f000 f9dd 	bl	800ab00 <USER_SPI_initialize>
 800a746:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3708      	adds	r7, #8
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
 800a756:	4603      	mov	r3, r0
 800a758:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800a75a:	79fb      	ldrb	r3, [r7, #7]
 800a75c:	4618      	mov	r0, r3
 800a75e:	f000 fab9 	bl	800acd4 <USER_SPI_status>
 800a762:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800a764:	4618      	mov	r0, r3
 800a766:	3708      	adds	r7, #8
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b084      	sub	sp, #16
 800a770:	af00      	add	r7, sp, #0
 800a772:	60b9      	str	r1, [r7, #8]
 800a774:	607a      	str	r2, [r7, #4]
 800a776:	603b      	str	r3, [r7, #0]
 800a778:	4603      	mov	r3, r0
 800a77a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800a77c:	7bf8      	ldrb	r0, [r7, #15]
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	68b9      	ldr	r1, [r7, #8]
 800a784:	f000 fabc 	bl	800ad00 <USER_SPI_read>
 800a788:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3710      	adds	r7, #16
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}

0800a792 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a792:	b580      	push	{r7, lr}
 800a794:	b084      	sub	sp, #16
 800a796:	af00      	add	r7, sp, #0
 800a798:	60b9      	str	r1, [r7, #8]
 800a79a:	607a      	str	r2, [r7, #4]
 800a79c:	603b      	str	r3, [r7, #0]
 800a79e:	4603      	mov	r3, r0
 800a7a0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800a7a2:	7bf8      	ldrb	r0, [r7, #15]
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	68b9      	ldr	r1, [r7, #8]
 800a7aa:	f000 fb0f 	bl	800adcc <USER_SPI_write>
 800a7ae:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3710      	adds	r7, #16
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	4603      	mov	r3, r0
 800a7c0:	603a      	str	r2, [r7, #0]
 800a7c2:	71fb      	strb	r3, [r7, #7]
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800a7c8:	79b9      	ldrb	r1, [r7, #6]
 800a7ca:	79fb      	ldrb	r3, [r7, #7]
 800a7cc:	683a      	ldr	r2, [r7, #0]
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f000 fb78 	bl	800aec4 <USER_SPI_ioctl>
 800a7d4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3708      	adds	r7, #8
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}
	...

0800a7e0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b082      	sub	sp, #8
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800a7e8:	f7f9 f94c 	bl	8003a84 <HAL_GetTick>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	4a04      	ldr	r2, [pc, #16]	; (800a800 <SPI_Timer_On+0x20>)
 800a7f0:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800a7f2:	4a04      	ldr	r2, [pc, #16]	; (800a804 <SPI_Timer_On+0x24>)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6013      	str	r3, [r2, #0]
}
 800a7f8:	bf00      	nop
 800a7fa:	3708      	adds	r7, #8
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}
 800a800:	20001d84 	.word	0x20001d84
 800a804:	20001d88 	.word	0x20001d88

0800a808 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800a808:	b580      	push	{r7, lr}
 800a80a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800a80c:	f7f9 f93a 	bl	8003a84 <HAL_GetTick>
 800a810:	4602      	mov	r2, r0
 800a812:	4b06      	ldr	r3, [pc, #24]	; (800a82c <SPI_Timer_Status+0x24>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	1ad2      	subs	r2, r2, r3
 800a818:	4b05      	ldr	r3, [pc, #20]	; (800a830 <SPI_Timer_Status+0x28>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	bf34      	ite	cc
 800a820:	2301      	movcc	r3, #1
 800a822:	2300      	movcs	r3, #0
 800a824:	b2db      	uxtb	r3, r3
}
 800a826:	4618      	mov	r0, r3
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	20001d84 	.word	0x20001d84
 800a830:	20001d88 	.word	0x20001d88

0800a834 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b086      	sub	sp, #24
 800a838:	af02      	add	r7, sp, #8
 800a83a:	4603      	mov	r3, r0
 800a83c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a83e:	f107 020f 	add.w	r2, r7, #15
 800a842:	1df9      	adds	r1, r7, #7
 800a844:	2332      	movs	r3, #50	; 0x32
 800a846:	9300      	str	r3, [sp, #0]
 800a848:	2301      	movs	r3, #1
 800a84a:	4804      	ldr	r0, [pc, #16]	; (800a85c <xchg_spi+0x28>)
 800a84c:	f7fc fd7f 	bl	800734e <HAL_SPI_TransmitReceive>
    return rxDat;
 800a850:	7bfb      	ldrb	r3, [r7, #15]
}
 800a852:	4618      	mov	r0, r3
 800a854:	3710      	adds	r7, #16
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	20000c9c 	.word	0x20000c9c

0800a860 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800a860:	b590      	push	{r4, r7, lr}
 800a862:	b085      	sub	sp, #20
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800a86a:	2300      	movs	r3, #0
 800a86c:	60fb      	str	r3, [r7, #12]
 800a86e:	e00a      	b.n	800a886 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	18d4      	adds	r4, r2, r3
 800a876:	20ff      	movs	r0, #255	; 0xff
 800a878:	f7ff ffdc 	bl	800a834 <xchg_spi>
 800a87c:	4603      	mov	r3, r0
 800a87e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	3301      	adds	r3, #1
 800a884:	60fb      	str	r3, [r7, #12]
 800a886:	68fa      	ldr	r2, [r7, #12]
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d3f0      	bcc.n	800a870 <rcvr_spi_multi+0x10>
	}
}
 800a88e:	bf00      	nop
 800a890:	bf00      	nop
 800a892:	3714      	adds	r7, #20
 800a894:	46bd      	mov	sp, r7
 800a896:	bd90      	pop	{r4, r7, pc}

0800a898 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b084      	sub	sp, #16
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	60fb      	str	r3, [r7, #12]
 800a8a6:	e009      	b.n	800a8bc <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800a8a8:	687a      	ldr	r2, [r7, #4]
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f7ff ffbf 	bl	800a834 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	3301      	adds	r3, #1
 800a8ba:	60fb      	str	r3, [r7, #12]
 800a8bc:	68fa      	ldr	r2, [r7, #12]
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d3f1      	bcc.n	800a8a8 <xmit_spi_multi+0x10>
	}
}
 800a8c4:	bf00      	nop
 800a8c6:	bf00      	nop
 800a8c8:	3710      	adds	r7, #16
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}

0800a8ce <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800a8ce:	b580      	push	{r7, lr}
 800a8d0:	b086      	sub	sp, #24
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800a8d6:	f7f9 f8d5 	bl	8003a84 <HAL_GetTick>
 800a8da:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800a8e0:	20ff      	movs	r0, #255	; 0xff
 800a8e2:	f7ff ffa7 	bl	800a834 <xchg_spi>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800a8ea:	7bfb      	ldrb	r3, [r7, #15]
 800a8ec:	2bff      	cmp	r3, #255	; 0xff
 800a8ee:	d007      	beq.n	800a900 <wait_ready+0x32>
 800a8f0:	f7f9 f8c8 	bl	8003a84 <HAL_GetTick>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	1ad3      	subs	r3, r2, r3
 800a8fa:	693a      	ldr	r2, [r7, #16]
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d8ef      	bhi.n	800a8e0 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800a900:	7bfb      	ldrb	r3, [r7, #15]
 800a902:	2bff      	cmp	r3, #255	; 0xff
 800a904:	bf0c      	ite	eq
 800a906:	2301      	moveq	r3, #1
 800a908:	2300      	movne	r3, #0
 800a90a:	b2db      	uxtb	r3, r3
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3718      	adds	r7, #24
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800a918:	2201      	movs	r2, #1
 800a91a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a91e:	4804      	ldr	r0, [pc, #16]	; (800a930 <despiselect+0x1c>)
 800a920:	f7f9 fe10 	bl	8004544 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800a924:	20ff      	movs	r0, #255	; 0xff
 800a926:	f7ff ff85 	bl	800a834 <xchg_spi>

}
 800a92a:	bf00      	nop
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	bf00      	nop
 800a930:	40021400 	.word	0x40021400

0800a934 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800a934:	b580      	push	{r7, lr}
 800a936:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800a938:	2200      	movs	r2, #0
 800a93a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a93e:	480a      	ldr	r0, [pc, #40]	; (800a968 <spiselect+0x34>)
 800a940:	f7f9 fe00 	bl	8004544 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800a944:	20ff      	movs	r0, #255	; 0xff
 800a946:	f7ff ff75 	bl	800a834 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800a94a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a94e:	f7ff ffbe 	bl	800a8ce <wait_ready>
 800a952:	4603      	mov	r3, r0
 800a954:	2b00      	cmp	r3, #0
 800a956:	d001      	beq.n	800a95c <spiselect+0x28>
 800a958:	2301      	movs	r3, #1
 800a95a:	e002      	b.n	800a962 <spiselect+0x2e>

	despiselect();
 800a95c:	f7ff ffda 	bl	800a914 <despiselect>
	return 0;	/* Timeout */
 800a960:	2300      	movs	r3, #0
}
 800a962:	4618      	mov	r0, r3
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop
 800a968:	40021400 	.word	0x40021400

0800a96c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800a976:	20c8      	movs	r0, #200	; 0xc8
 800a978:	f7ff ff32 	bl	800a7e0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800a97c:	20ff      	movs	r0, #255	; 0xff
 800a97e:	f7ff ff59 	bl	800a834 <xchg_spi>
 800a982:	4603      	mov	r3, r0
 800a984:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800a986:	7bfb      	ldrb	r3, [r7, #15]
 800a988:	2bff      	cmp	r3, #255	; 0xff
 800a98a:	d104      	bne.n	800a996 <rcvr_datablock+0x2a>
 800a98c:	f7ff ff3c 	bl	800a808 <SPI_Timer_Status>
 800a990:	4603      	mov	r3, r0
 800a992:	2b00      	cmp	r3, #0
 800a994:	d1f2      	bne.n	800a97c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800a996:	7bfb      	ldrb	r3, [r7, #15]
 800a998:	2bfe      	cmp	r3, #254	; 0xfe
 800a99a:	d001      	beq.n	800a9a0 <rcvr_datablock+0x34>
 800a99c:	2300      	movs	r3, #0
 800a99e:	e00a      	b.n	800a9b6 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800a9a0:	6839      	ldr	r1, [r7, #0]
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f7ff ff5c 	bl	800a860 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800a9a8:	20ff      	movs	r0, #255	; 0xff
 800a9aa:	f7ff ff43 	bl	800a834 <xchg_spi>
 800a9ae:	20ff      	movs	r0, #255	; 0xff
 800a9b0:	f7ff ff40 	bl	800a834 <xchg_spi>

	return 1;						/* Function succeeded */
 800a9b4:	2301      	movs	r3, #1
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3710      	adds	r7, #16
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}

0800a9be <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b084      	sub	sp, #16
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800a9ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a9ce:	f7ff ff7e 	bl	800a8ce <wait_ready>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d101      	bne.n	800a9dc <xmit_datablock+0x1e>
 800a9d8:	2300      	movs	r3, #0
 800a9da:	e01e      	b.n	800aa1a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800a9dc:	78fb      	ldrb	r3, [r7, #3]
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f7ff ff28 	bl	800a834 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800a9e4:	78fb      	ldrb	r3, [r7, #3]
 800a9e6:	2bfd      	cmp	r3, #253	; 0xfd
 800a9e8:	d016      	beq.n	800aa18 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800a9ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f7ff ff52 	bl	800a898 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800a9f4:	20ff      	movs	r0, #255	; 0xff
 800a9f6:	f7ff ff1d 	bl	800a834 <xchg_spi>
 800a9fa:	20ff      	movs	r0, #255	; 0xff
 800a9fc:	f7ff ff1a 	bl	800a834 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800aa00:	20ff      	movs	r0, #255	; 0xff
 800aa02:	f7ff ff17 	bl	800a834 <xchg_spi>
 800aa06:	4603      	mov	r3, r0
 800aa08:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800aa0a:	7bfb      	ldrb	r3, [r7, #15]
 800aa0c:	f003 031f 	and.w	r3, r3, #31
 800aa10:	2b05      	cmp	r3, #5
 800aa12:	d001      	beq.n	800aa18 <xmit_datablock+0x5a>
 800aa14:	2300      	movs	r3, #0
 800aa16:	e000      	b.n	800aa1a <xmit_datablock+0x5c>
	}
	return 1;
 800aa18:	2301      	movs	r3, #1
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}

0800aa22 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800aa22:	b580      	push	{r7, lr}
 800aa24:	b084      	sub	sp, #16
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	4603      	mov	r3, r0
 800aa2a:	6039      	str	r1, [r7, #0]
 800aa2c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800aa2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	da0e      	bge.n	800aa54 <send_cmd+0x32>
		cmd &= 0x7F;
 800aa36:	79fb      	ldrb	r3, [r7, #7]
 800aa38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa3c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800aa3e:	2100      	movs	r1, #0
 800aa40:	2037      	movs	r0, #55	; 0x37
 800aa42:	f7ff ffee 	bl	800aa22 <send_cmd>
 800aa46:	4603      	mov	r3, r0
 800aa48:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800aa4a:	7bbb      	ldrb	r3, [r7, #14]
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d901      	bls.n	800aa54 <send_cmd+0x32>
 800aa50:	7bbb      	ldrb	r3, [r7, #14]
 800aa52:	e051      	b.n	800aaf8 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800aa54:	79fb      	ldrb	r3, [r7, #7]
 800aa56:	2b0c      	cmp	r3, #12
 800aa58:	d008      	beq.n	800aa6c <send_cmd+0x4a>
		despiselect();
 800aa5a:	f7ff ff5b 	bl	800a914 <despiselect>
		if (!spiselect()) return 0xFF;
 800aa5e:	f7ff ff69 	bl	800a934 <spiselect>
 800aa62:	4603      	mov	r3, r0
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d101      	bne.n	800aa6c <send_cmd+0x4a>
 800aa68:	23ff      	movs	r3, #255	; 0xff
 800aa6a:	e045      	b.n	800aaf8 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800aa6c:	79fb      	ldrb	r3, [r7, #7]
 800aa6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	4618      	mov	r0, r3
 800aa76:	f7ff fedd 	bl	800a834 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	0e1b      	lsrs	r3, r3, #24
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	4618      	mov	r0, r3
 800aa82:	f7ff fed7 	bl	800a834 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	0c1b      	lsrs	r3, r3, #16
 800aa8a:	b2db      	uxtb	r3, r3
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f7ff fed1 	bl	800a834 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	0a1b      	lsrs	r3, r3, #8
 800aa96:	b2db      	uxtb	r3, r3
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f7ff fecb 	bl	800a834 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	b2db      	uxtb	r3, r3
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f7ff fec6 	bl	800a834 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800aaac:	79fb      	ldrb	r3, [r7, #7]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d101      	bne.n	800aab6 <send_cmd+0x94>
 800aab2:	2395      	movs	r3, #149	; 0x95
 800aab4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800aab6:	79fb      	ldrb	r3, [r7, #7]
 800aab8:	2b08      	cmp	r3, #8
 800aaba:	d101      	bne.n	800aac0 <send_cmd+0x9e>
 800aabc:	2387      	movs	r3, #135	; 0x87
 800aabe:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800aac0:	7bfb      	ldrb	r3, [r7, #15]
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7ff feb6 	bl	800a834 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800aac8:	79fb      	ldrb	r3, [r7, #7]
 800aaca:	2b0c      	cmp	r3, #12
 800aacc:	d102      	bne.n	800aad4 <send_cmd+0xb2>
 800aace:	20ff      	movs	r0, #255	; 0xff
 800aad0:	f7ff feb0 	bl	800a834 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800aad4:	230a      	movs	r3, #10
 800aad6:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800aad8:	20ff      	movs	r0, #255	; 0xff
 800aada:	f7ff feab 	bl	800a834 <xchg_spi>
 800aade:	4603      	mov	r3, r0
 800aae0:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800aae2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	da05      	bge.n	800aaf6 <send_cmd+0xd4>
 800aaea:	7bfb      	ldrb	r3, [r7, #15]
 800aaec:	3b01      	subs	r3, #1
 800aaee:	73fb      	strb	r3, [r7, #15]
 800aaf0:	7bfb      	ldrb	r3, [r7, #15]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d1f0      	bne.n	800aad8 <send_cmd+0xb6>

	return res;							/* Return received response */
 800aaf6:	7bbb      	ldrb	r3, [r7, #14]
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3710      	adds	r7, #16
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800ab00:	b590      	push	{r4, r7, lr}
 800ab02:	b085      	sub	sp, #20
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	4603      	mov	r3, r0
 800ab08:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800ab0a:	79fb      	ldrb	r3, [r7, #7]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d001      	beq.n	800ab14 <USER_SPI_initialize+0x14>
 800ab10:	2301      	movs	r3, #1
 800ab12:	e0d4      	b.n	800acbe <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800ab14:	4b6c      	ldr	r3, [pc, #432]	; (800acc8 <USER_SPI_initialize+0x1c8>)
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	f003 0302 	and.w	r3, r3, #2
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d003      	beq.n	800ab2a <USER_SPI_initialize+0x2a>
 800ab22:	4b69      	ldr	r3, [pc, #420]	; (800acc8 <USER_SPI_initialize+0x1c8>)
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	b2db      	uxtb	r3, r3
 800ab28:	e0c9      	b.n	800acbe <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 800ab2a:	4b68      	ldr	r3, [pc, #416]	; (800accc <USER_SPI_initialize+0x1cc>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	4b66      	ldr	r3, [pc, #408]	; (800accc <USER_SPI_initialize+0x1cc>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800ab38:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800ab3a:	230a      	movs	r3, #10
 800ab3c:	73fb      	strb	r3, [r7, #15]
 800ab3e:	e005      	b.n	800ab4c <USER_SPI_initialize+0x4c>
 800ab40:	20ff      	movs	r0, #255	; 0xff
 800ab42:	f7ff fe77 	bl	800a834 <xchg_spi>
 800ab46:	7bfb      	ldrb	r3, [r7, #15]
 800ab48:	3b01      	subs	r3, #1
 800ab4a:	73fb      	strb	r3, [r7, #15]
 800ab4c:	7bfb      	ldrb	r3, [r7, #15]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d1f6      	bne.n	800ab40 <USER_SPI_initialize+0x40>

	ty = 0;
 800ab52:	2300      	movs	r3, #0
 800ab54:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800ab56:	2100      	movs	r1, #0
 800ab58:	2000      	movs	r0, #0
 800ab5a:	f7ff ff62 	bl	800aa22 <send_cmd>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	f040 808b 	bne.w	800ac7c <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800ab66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ab6a:	f7ff fe39 	bl	800a7e0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800ab6e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ab72:	2008      	movs	r0, #8
 800ab74:	f7ff ff55 	bl	800aa22 <send_cmd>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	2b01      	cmp	r3, #1
 800ab7c:	d151      	bne.n	800ac22 <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800ab7e:	2300      	movs	r3, #0
 800ab80:	73fb      	strb	r3, [r7, #15]
 800ab82:	e00d      	b.n	800aba0 <USER_SPI_initialize+0xa0>
 800ab84:	7bfc      	ldrb	r4, [r7, #15]
 800ab86:	20ff      	movs	r0, #255	; 0xff
 800ab88:	f7ff fe54 	bl	800a834 <xchg_spi>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	461a      	mov	r2, r3
 800ab90:	f107 0310 	add.w	r3, r7, #16
 800ab94:	4423      	add	r3, r4
 800ab96:	f803 2c08 	strb.w	r2, [r3, #-8]
 800ab9a:	7bfb      	ldrb	r3, [r7, #15]
 800ab9c:	3301      	adds	r3, #1
 800ab9e:	73fb      	strb	r3, [r7, #15]
 800aba0:	7bfb      	ldrb	r3, [r7, #15]
 800aba2:	2b03      	cmp	r3, #3
 800aba4:	d9ee      	bls.n	800ab84 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800aba6:	7abb      	ldrb	r3, [r7, #10]
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d167      	bne.n	800ac7c <USER_SPI_initialize+0x17c>
 800abac:	7afb      	ldrb	r3, [r7, #11]
 800abae:	2baa      	cmp	r3, #170	; 0xaa
 800abb0:	d164      	bne.n	800ac7c <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800abb2:	bf00      	nop
 800abb4:	f7ff fe28 	bl	800a808 <SPI_Timer_Status>
 800abb8:	4603      	mov	r3, r0
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d007      	beq.n	800abce <USER_SPI_initialize+0xce>
 800abbe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800abc2:	20a9      	movs	r0, #169	; 0xa9
 800abc4:	f7ff ff2d 	bl	800aa22 <send_cmd>
 800abc8:	4603      	mov	r3, r0
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d1f2      	bne.n	800abb4 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800abce:	f7ff fe1b 	bl	800a808 <SPI_Timer_Status>
 800abd2:	4603      	mov	r3, r0
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d051      	beq.n	800ac7c <USER_SPI_initialize+0x17c>
 800abd8:	2100      	movs	r1, #0
 800abda:	203a      	movs	r0, #58	; 0x3a
 800abdc:	f7ff ff21 	bl	800aa22 <send_cmd>
 800abe0:	4603      	mov	r3, r0
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d14a      	bne.n	800ac7c <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800abe6:	2300      	movs	r3, #0
 800abe8:	73fb      	strb	r3, [r7, #15]
 800abea:	e00d      	b.n	800ac08 <USER_SPI_initialize+0x108>
 800abec:	7bfc      	ldrb	r4, [r7, #15]
 800abee:	20ff      	movs	r0, #255	; 0xff
 800abf0:	f7ff fe20 	bl	800a834 <xchg_spi>
 800abf4:	4603      	mov	r3, r0
 800abf6:	461a      	mov	r2, r3
 800abf8:	f107 0310 	add.w	r3, r7, #16
 800abfc:	4423      	add	r3, r4
 800abfe:	f803 2c08 	strb.w	r2, [r3, #-8]
 800ac02:	7bfb      	ldrb	r3, [r7, #15]
 800ac04:	3301      	adds	r3, #1
 800ac06:	73fb      	strb	r3, [r7, #15]
 800ac08:	7bfb      	ldrb	r3, [r7, #15]
 800ac0a:	2b03      	cmp	r3, #3
 800ac0c:	d9ee      	bls.n	800abec <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800ac0e:	7a3b      	ldrb	r3, [r7, #8]
 800ac10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d001      	beq.n	800ac1c <USER_SPI_initialize+0x11c>
 800ac18:	230c      	movs	r3, #12
 800ac1a:	e000      	b.n	800ac1e <USER_SPI_initialize+0x11e>
 800ac1c:	2304      	movs	r3, #4
 800ac1e:	737b      	strb	r3, [r7, #13]
 800ac20:	e02c      	b.n	800ac7c <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800ac22:	2100      	movs	r1, #0
 800ac24:	20a9      	movs	r0, #169	; 0xa9
 800ac26:	f7ff fefc 	bl	800aa22 <send_cmd>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	d804      	bhi.n	800ac3a <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800ac30:	2302      	movs	r3, #2
 800ac32:	737b      	strb	r3, [r7, #13]
 800ac34:	23a9      	movs	r3, #169	; 0xa9
 800ac36:	73bb      	strb	r3, [r7, #14]
 800ac38:	e003      	b.n	800ac42 <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	737b      	strb	r3, [r7, #13]
 800ac3e:	2301      	movs	r3, #1
 800ac40:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800ac42:	bf00      	nop
 800ac44:	f7ff fde0 	bl	800a808 <SPI_Timer_Status>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d007      	beq.n	800ac5e <USER_SPI_initialize+0x15e>
 800ac4e:	7bbb      	ldrb	r3, [r7, #14]
 800ac50:	2100      	movs	r1, #0
 800ac52:	4618      	mov	r0, r3
 800ac54:	f7ff fee5 	bl	800aa22 <send_cmd>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d1f2      	bne.n	800ac44 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800ac5e:	f7ff fdd3 	bl	800a808 <SPI_Timer_Status>
 800ac62:	4603      	mov	r3, r0
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d007      	beq.n	800ac78 <USER_SPI_initialize+0x178>
 800ac68:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ac6c:	2010      	movs	r0, #16
 800ac6e:	f7ff fed8 	bl	800aa22 <send_cmd>
 800ac72:	4603      	mov	r3, r0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d001      	beq.n	800ac7c <USER_SPI_initialize+0x17c>
				ty = 0;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800ac7c:	4a14      	ldr	r2, [pc, #80]	; (800acd0 <USER_SPI_initialize+0x1d0>)
 800ac7e:	7b7b      	ldrb	r3, [r7, #13]
 800ac80:	7013      	strb	r3, [r2, #0]
	despiselect();
 800ac82:	f7ff fe47 	bl	800a914 <despiselect>

	if (ty) {			/* OK */
 800ac86:	7b7b      	ldrb	r3, [r7, #13]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d012      	beq.n	800acb2 <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 800ac8c:	4b0f      	ldr	r3, [pc, #60]	; (800accc <USER_SPI_initialize+0x1cc>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800ac96:	4b0d      	ldr	r3, [pc, #52]	; (800accc <USER_SPI_initialize+0x1cc>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f042 0220 	orr.w	r2, r2, #32
 800ac9e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800aca0:	4b09      	ldr	r3, [pc, #36]	; (800acc8 <USER_SPI_initialize+0x1c8>)
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	b2db      	uxtb	r3, r3
 800aca6:	f023 0301 	bic.w	r3, r3, #1
 800acaa:	b2da      	uxtb	r2, r3
 800acac:	4b06      	ldr	r3, [pc, #24]	; (800acc8 <USER_SPI_initialize+0x1c8>)
 800acae:	701a      	strb	r2, [r3, #0]
 800acb0:	e002      	b.n	800acb8 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800acb2:	4b05      	ldr	r3, [pc, #20]	; (800acc8 <USER_SPI_initialize+0x1c8>)
 800acb4:	2201      	movs	r2, #1
 800acb6:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800acb8:	4b03      	ldr	r3, [pc, #12]	; (800acc8 <USER_SPI_initialize+0x1c8>)
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	b2db      	uxtb	r3, r3
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3714      	adds	r7, #20
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd90      	pop	{r4, r7, pc}
 800acc6:	bf00      	nop
 800acc8:	20000020 	.word	0x20000020
 800accc:	20000c9c 	.word	0x20000c9c
 800acd0:	200008d0 	.word	0x200008d0

0800acd4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b083      	sub	sp, #12
 800acd8:	af00      	add	r7, sp, #0
 800acda:	4603      	mov	r3, r0
 800acdc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800acde:	79fb      	ldrb	r3, [r7, #7]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d001      	beq.n	800ace8 <USER_SPI_status+0x14>
 800ace4:	2301      	movs	r3, #1
 800ace6:	e002      	b.n	800acee <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800ace8:	4b04      	ldr	r3, [pc, #16]	; (800acfc <USER_SPI_status+0x28>)
 800acea:	781b      	ldrb	r3, [r3, #0]
 800acec:	b2db      	uxtb	r3, r3
}
 800acee:	4618      	mov	r0, r3
 800acf0:	370c      	adds	r7, #12
 800acf2:	46bd      	mov	sp, r7
 800acf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf8:	4770      	bx	lr
 800acfa:	bf00      	nop
 800acfc:	20000020 	.word	0x20000020

0800ad00 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b084      	sub	sp, #16
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	60b9      	str	r1, [r7, #8]
 800ad08:	607a      	str	r2, [r7, #4]
 800ad0a:	603b      	str	r3, [r7, #0]
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800ad10:	7bfb      	ldrb	r3, [r7, #15]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d102      	bne.n	800ad1c <USER_SPI_read+0x1c>
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d101      	bne.n	800ad20 <USER_SPI_read+0x20>
 800ad1c:	2304      	movs	r3, #4
 800ad1e:	e04d      	b.n	800adbc <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800ad20:	4b28      	ldr	r3, [pc, #160]	; (800adc4 <USER_SPI_read+0xc4>)
 800ad22:	781b      	ldrb	r3, [r3, #0]
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	f003 0301 	and.w	r3, r3, #1
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d001      	beq.n	800ad32 <USER_SPI_read+0x32>
 800ad2e:	2303      	movs	r3, #3
 800ad30:	e044      	b.n	800adbc <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800ad32:	4b25      	ldr	r3, [pc, #148]	; (800adc8 <USER_SPI_read+0xc8>)
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	f003 0308 	and.w	r3, r3, #8
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d102      	bne.n	800ad44 <USER_SPI_read+0x44>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	025b      	lsls	r3, r3, #9
 800ad42:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	d111      	bne.n	800ad6e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800ad4a:	6879      	ldr	r1, [r7, #4]
 800ad4c:	2011      	movs	r0, #17
 800ad4e:	f7ff fe68 	bl	800aa22 <send_cmd>
 800ad52:	4603      	mov	r3, r0
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d129      	bne.n	800adac <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800ad58:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ad5c:	68b8      	ldr	r0, [r7, #8]
 800ad5e:	f7ff fe05 	bl	800a96c <rcvr_datablock>
 800ad62:	4603      	mov	r3, r0
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d021      	beq.n	800adac <USER_SPI_read+0xac>
			count = 0;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	603b      	str	r3, [r7, #0]
 800ad6c:	e01e      	b.n	800adac <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800ad6e:	6879      	ldr	r1, [r7, #4]
 800ad70:	2012      	movs	r0, #18
 800ad72:	f7ff fe56 	bl	800aa22 <send_cmd>
 800ad76:	4603      	mov	r3, r0
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d117      	bne.n	800adac <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800ad7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ad80:	68b8      	ldr	r0, [r7, #8]
 800ad82:	f7ff fdf3 	bl	800a96c <rcvr_datablock>
 800ad86:	4603      	mov	r3, r0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d00a      	beq.n	800ada2 <USER_SPI_read+0xa2>
				buff += 512;
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ad92:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	3b01      	subs	r3, #1
 800ad98:	603b      	str	r3, [r7, #0]
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d1ed      	bne.n	800ad7c <USER_SPI_read+0x7c>
 800ada0:	e000      	b.n	800ada4 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800ada2:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800ada4:	2100      	movs	r1, #0
 800ada6:	200c      	movs	r0, #12
 800ada8:	f7ff fe3b 	bl	800aa22 <send_cmd>
		}
	}
	despiselect();
 800adac:	f7ff fdb2 	bl	800a914 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	bf14      	ite	ne
 800adb6:	2301      	movne	r3, #1
 800adb8:	2300      	moveq	r3, #0
 800adba:	b2db      	uxtb	r3, r3
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3710      	adds	r7, #16
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}
 800adc4:	20000020 	.word	0x20000020
 800adc8:	200008d0 	.word	0x200008d0

0800adcc <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b084      	sub	sp, #16
 800add0:	af00      	add	r7, sp, #0
 800add2:	60b9      	str	r1, [r7, #8]
 800add4:	607a      	str	r2, [r7, #4]
 800add6:	603b      	str	r3, [r7, #0]
 800add8:	4603      	mov	r3, r0
 800adda:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800addc:	7bfb      	ldrb	r3, [r7, #15]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d102      	bne.n	800ade8 <USER_SPI_write+0x1c>
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d101      	bne.n	800adec <USER_SPI_write+0x20>
 800ade8:	2304      	movs	r3, #4
 800adea:	e063      	b.n	800aeb4 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800adec:	4b33      	ldr	r3, [pc, #204]	; (800aebc <USER_SPI_write+0xf0>)
 800adee:	781b      	ldrb	r3, [r3, #0]
 800adf0:	b2db      	uxtb	r3, r3
 800adf2:	f003 0301 	and.w	r3, r3, #1
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d001      	beq.n	800adfe <USER_SPI_write+0x32>
 800adfa:	2303      	movs	r3, #3
 800adfc:	e05a      	b.n	800aeb4 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800adfe:	4b2f      	ldr	r3, [pc, #188]	; (800aebc <USER_SPI_write+0xf0>)
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	b2db      	uxtb	r3, r3
 800ae04:	f003 0304 	and.w	r3, r3, #4
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d001      	beq.n	800ae10 <USER_SPI_write+0x44>
 800ae0c:	2302      	movs	r3, #2
 800ae0e:	e051      	b.n	800aeb4 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800ae10:	4b2b      	ldr	r3, [pc, #172]	; (800aec0 <USER_SPI_write+0xf4>)
 800ae12:	781b      	ldrb	r3, [r3, #0]
 800ae14:	f003 0308 	and.w	r3, r3, #8
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d102      	bne.n	800ae22 <USER_SPI_write+0x56>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	025b      	lsls	r3, r3, #9
 800ae20:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	2b01      	cmp	r3, #1
 800ae26:	d110      	bne.n	800ae4a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800ae28:	6879      	ldr	r1, [r7, #4]
 800ae2a:	2018      	movs	r0, #24
 800ae2c:	f7ff fdf9 	bl	800aa22 <send_cmd>
 800ae30:	4603      	mov	r3, r0
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d136      	bne.n	800aea4 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800ae36:	21fe      	movs	r1, #254	; 0xfe
 800ae38:	68b8      	ldr	r0, [r7, #8]
 800ae3a:	f7ff fdc0 	bl	800a9be <xmit_datablock>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d02f      	beq.n	800aea4 <USER_SPI_write+0xd8>
			count = 0;
 800ae44:	2300      	movs	r3, #0
 800ae46:	603b      	str	r3, [r7, #0]
 800ae48:	e02c      	b.n	800aea4 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800ae4a:	4b1d      	ldr	r3, [pc, #116]	; (800aec0 <USER_SPI_write+0xf4>)
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	f003 0306 	and.w	r3, r3, #6
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d003      	beq.n	800ae5e <USER_SPI_write+0x92>
 800ae56:	6839      	ldr	r1, [r7, #0]
 800ae58:	2097      	movs	r0, #151	; 0x97
 800ae5a:	f7ff fde2 	bl	800aa22 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800ae5e:	6879      	ldr	r1, [r7, #4]
 800ae60:	2019      	movs	r0, #25
 800ae62:	f7ff fdde 	bl	800aa22 <send_cmd>
 800ae66:	4603      	mov	r3, r0
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d11b      	bne.n	800aea4 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800ae6c:	21fc      	movs	r1, #252	; 0xfc
 800ae6e:	68b8      	ldr	r0, [r7, #8]
 800ae70:	f7ff fda5 	bl	800a9be <xmit_datablock>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d00a      	beq.n	800ae90 <USER_SPI_write+0xc4>
				buff += 512;
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ae80:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	3b01      	subs	r3, #1
 800ae86:	603b      	str	r3, [r7, #0]
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d1ee      	bne.n	800ae6c <USER_SPI_write+0xa0>
 800ae8e:	e000      	b.n	800ae92 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800ae90:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800ae92:	21fd      	movs	r1, #253	; 0xfd
 800ae94:	2000      	movs	r0, #0
 800ae96:	f7ff fd92 	bl	800a9be <xmit_datablock>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d101      	bne.n	800aea4 <USER_SPI_write+0xd8>
 800aea0:	2301      	movs	r3, #1
 800aea2:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800aea4:	f7ff fd36 	bl	800a914 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	bf14      	ite	ne
 800aeae:	2301      	movne	r3, #1
 800aeb0:	2300      	moveq	r3, #0
 800aeb2:	b2db      	uxtb	r3, r3
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3710      	adds	r7, #16
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}
 800aebc:	20000020 	.word	0x20000020
 800aec0:	200008d0 	.word	0x200008d0

0800aec4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b08c      	sub	sp, #48	; 0x30
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	4603      	mov	r3, r0
 800aecc:	603a      	str	r2, [r7, #0]
 800aece:	71fb      	strb	r3, [r7, #7]
 800aed0:	460b      	mov	r3, r1
 800aed2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800aed4:	79fb      	ldrb	r3, [r7, #7]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d001      	beq.n	800aede <USER_SPI_ioctl+0x1a>
 800aeda:	2304      	movs	r3, #4
 800aedc:	e15a      	b.n	800b194 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800aede:	4baf      	ldr	r3, [pc, #700]	; (800b19c <USER_SPI_ioctl+0x2d8>)
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	b2db      	uxtb	r3, r3
 800aee4:	f003 0301 	and.w	r3, r3, #1
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d001      	beq.n	800aef0 <USER_SPI_ioctl+0x2c>
 800aeec:	2303      	movs	r3, #3
 800aeee:	e151      	b.n	800b194 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800aef0:	2301      	movs	r3, #1
 800aef2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800aef6:	79bb      	ldrb	r3, [r7, #6]
 800aef8:	2b04      	cmp	r3, #4
 800aefa:	f200 8136 	bhi.w	800b16a <USER_SPI_ioctl+0x2a6>
 800aefe:	a201      	add	r2, pc, #4	; (adr r2, 800af04 <USER_SPI_ioctl+0x40>)
 800af00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af04:	0800af19 	.word	0x0800af19
 800af08:	0800af2d 	.word	0x0800af2d
 800af0c:	0800b16b 	.word	0x0800b16b
 800af10:	0800afd9 	.word	0x0800afd9
 800af14:	0800b0cf 	.word	0x0800b0cf
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800af18:	f7ff fd0c 	bl	800a934 <spiselect>
 800af1c:	4603      	mov	r3, r0
 800af1e:	2b00      	cmp	r3, #0
 800af20:	f000 8127 	beq.w	800b172 <USER_SPI_ioctl+0x2ae>
 800af24:	2300      	movs	r3, #0
 800af26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800af2a:	e122      	b.n	800b172 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800af2c:	2100      	movs	r1, #0
 800af2e:	2009      	movs	r0, #9
 800af30:	f7ff fd77 	bl	800aa22 <send_cmd>
 800af34:	4603      	mov	r3, r0
 800af36:	2b00      	cmp	r3, #0
 800af38:	f040 811d 	bne.w	800b176 <USER_SPI_ioctl+0x2b2>
 800af3c:	f107 030c 	add.w	r3, r7, #12
 800af40:	2110      	movs	r1, #16
 800af42:	4618      	mov	r0, r3
 800af44:	f7ff fd12 	bl	800a96c <rcvr_datablock>
 800af48:	4603      	mov	r3, r0
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	f000 8113 	beq.w	800b176 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800af50:	7b3b      	ldrb	r3, [r7, #12]
 800af52:	099b      	lsrs	r3, r3, #6
 800af54:	b2db      	uxtb	r3, r3
 800af56:	2b01      	cmp	r3, #1
 800af58:	d111      	bne.n	800af7e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800af5a:	7d7b      	ldrb	r3, [r7, #21]
 800af5c:	461a      	mov	r2, r3
 800af5e:	7d3b      	ldrb	r3, [r7, #20]
 800af60:	021b      	lsls	r3, r3, #8
 800af62:	4413      	add	r3, r2
 800af64:	461a      	mov	r2, r3
 800af66:	7cfb      	ldrb	r3, [r7, #19]
 800af68:	041b      	lsls	r3, r3, #16
 800af6a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800af6e:	4413      	add	r3, r2
 800af70:	3301      	adds	r3, #1
 800af72:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800af74:	69fb      	ldr	r3, [r7, #28]
 800af76:	029a      	lsls	r2, r3, #10
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	601a      	str	r2, [r3, #0]
 800af7c:	e028      	b.n	800afd0 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800af7e:	7c7b      	ldrb	r3, [r7, #17]
 800af80:	f003 030f 	and.w	r3, r3, #15
 800af84:	b2da      	uxtb	r2, r3
 800af86:	7dbb      	ldrb	r3, [r7, #22]
 800af88:	09db      	lsrs	r3, r3, #7
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	4413      	add	r3, r2
 800af8e:	b2da      	uxtb	r2, r3
 800af90:	7d7b      	ldrb	r3, [r7, #21]
 800af92:	005b      	lsls	r3, r3, #1
 800af94:	b2db      	uxtb	r3, r3
 800af96:	f003 0306 	and.w	r3, r3, #6
 800af9a:	b2db      	uxtb	r3, r3
 800af9c:	4413      	add	r3, r2
 800af9e:	b2db      	uxtb	r3, r3
 800afa0:	3302      	adds	r3, #2
 800afa2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800afa6:	7d3b      	ldrb	r3, [r7, #20]
 800afa8:	099b      	lsrs	r3, r3, #6
 800afaa:	b2db      	uxtb	r3, r3
 800afac:	461a      	mov	r2, r3
 800afae:	7cfb      	ldrb	r3, [r7, #19]
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	441a      	add	r2, r3
 800afb4:	7cbb      	ldrb	r3, [r7, #18]
 800afb6:	029b      	lsls	r3, r3, #10
 800afb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800afbc:	4413      	add	r3, r2
 800afbe:	3301      	adds	r3, #1
 800afc0:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800afc2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800afc6:	3b09      	subs	r3, #9
 800afc8:	69fa      	ldr	r2, [r7, #28]
 800afca:	409a      	lsls	r2, r3
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800afd0:	2300      	movs	r3, #0
 800afd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800afd6:	e0ce      	b.n	800b176 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800afd8:	4b71      	ldr	r3, [pc, #452]	; (800b1a0 <USER_SPI_ioctl+0x2dc>)
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	f003 0304 	and.w	r3, r3, #4
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d031      	beq.n	800b048 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800afe4:	2100      	movs	r1, #0
 800afe6:	208d      	movs	r0, #141	; 0x8d
 800afe8:	f7ff fd1b 	bl	800aa22 <send_cmd>
 800afec:	4603      	mov	r3, r0
 800afee:	2b00      	cmp	r3, #0
 800aff0:	f040 80c3 	bne.w	800b17a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800aff4:	20ff      	movs	r0, #255	; 0xff
 800aff6:	f7ff fc1d 	bl	800a834 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800affa:	f107 030c 	add.w	r3, r7, #12
 800affe:	2110      	movs	r1, #16
 800b000:	4618      	mov	r0, r3
 800b002:	f7ff fcb3 	bl	800a96c <rcvr_datablock>
 800b006:	4603      	mov	r3, r0
 800b008:	2b00      	cmp	r3, #0
 800b00a:	f000 80b6 	beq.w	800b17a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800b00e:	2330      	movs	r3, #48	; 0x30
 800b010:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800b014:	e007      	b.n	800b026 <USER_SPI_ioctl+0x162>
 800b016:	20ff      	movs	r0, #255	; 0xff
 800b018:	f7ff fc0c 	bl	800a834 <xchg_spi>
 800b01c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b020:	3b01      	subs	r3, #1
 800b022:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800b026:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d1f3      	bne.n	800b016 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800b02e:	7dbb      	ldrb	r3, [r7, #22]
 800b030:	091b      	lsrs	r3, r3, #4
 800b032:	b2db      	uxtb	r3, r3
 800b034:	461a      	mov	r2, r3
 800b036:	2310      	movs	r3, #16
 800b038:	fa03 f202 	lsl.w	r2, r3, r2
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800b040:	2300      	movs	r3, #0
 800b042:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800b046:	e098      	b.n	800b17a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800b048:	2100      	movs	r1, #0
 800b04a:	2009      	movs	r0, #9
 800b04c:	f7ff fce9 	bl	800aa22 <send_cmd>
 800b050:	4603      	mov	r3, r0
 800b052:	2b00      	cmp	r3, #0
 800b054:	f040 8091 	bne.w	800b17a <USER_SPI_ioctl+0x2b6>
 800b058:	f107 030c 	add.w	r3, r7, #12
 800b05c:	2110      	movs	r1, #16
 800b05e:	4618      	mov	r0, r3
 800b060:	f7ff fc84 	bl	800a96c <rcvr_datablock>
 800b064:	4603      	mov	r3, r0
 800b066:	2b00      	cmp	r3, #0
 800b068:	f000 8087 	beq.w	800b17a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800b06c:	4b4c      	ldr	r3, [pc, #304]	; (800b1a0 <USER_SPI_ioctl+0x2dc>)
 800b06e:	781b      	ldrb	r3, [r3, #0]
 800b070:	f003 0302 	and.w	r3, r3, #2
 800b074:	2b00      	cmp	r3, #0
 800b076:	d012      	beq.n	800b09e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800b078:	7dbb      	ldrb	r3, [r7, #22]
 800b07a:	005b      	lsls	r3, r3, #1
 800b07c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800b080:	7dfa      	ldrb	r2, [r7, #23]
 800b082:	09d2      	lsrs	r2, r2, #7
 800b084:	b2d2      	uxtb	r2, r2
 800b086:	4413      	add	r3, r2
 800b088:	1c5a      	adds	r2, r3, #1
 800b08a:	7e7b      	ldrb	r3, [r7, #25]
 800b08c:	099b      	lsrs	r3, r3, #6
 800b08e:	b2db      	uxtb	r3, r3
 800b090:	3b01      	subs	r3, #1
 800b092:	fa02 f303 	lsl.w	r3, r2, r3
 800b096:	461a      	mov	r2, r3
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	601a      	str	r2, [r3, #0]
 800b09c:	e013      	b.n	800b0c6 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800b09e:	7dbb      	ldrb	r3, [r7, #22]
 800b0a0:	109b      	asrs	r3, r3, #2
 800b0a2:	b29b      	uxth	r3, r3
 800b0a4:	f003 031f 	and.w	r3, r3, #31
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	7dfa      	ldrb	r2, [r7, #23]
 800b0ac:	00d2      	lsls	r2, r2, #3
 800b0ae:	f002 0218 	and.w	r2, r2, #24
 800b0b2:	7df9      	ldrb	r1, [r7, #23]
 800b0b4:	0949      	lsrs	r1, r1, #5
 800b0b6:	b2c9      	uxtb	r1, r1
 800b0b8:	440a      	add	r2, r1
 800b0ba:	3201      	adds	r2, #1
 800b0bc:	fb02 f303 	mul.w	r3, r2, r3
 800b0c0:	461a      	mov	r2, r3
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800b0cc:	e055      	b.n	800b17a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800b0ce:	4b34      	ldr	r3, [pc, #208]	; (800b1a0 <USER_SPI_ioctl+0x2dc>)
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	f003 0306 	and.w	r3, r3, #6
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d051      	beq.n	800b17e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800b0da:	f107 020c 	add.w	r2, r7, #12
 800b0de:	79fb      	ldrb	r3, [r7, #7]
 800b0e0:	210b      	movs	r1, #11
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f7ff feee 	bl	800aec4 <USER_SPI_ioctl>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d149      	bne.n	800b182 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800b0ee:	7b3b      	ldrb	r3, [r7, #12]
 800b0f0:	099b      	lsrs	r3, r3, #6
 800b0f2:	b2db      	uxtb	r3, r3
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d104      	bne.n	800b102 <USER_SPI_ioctl+0x23e>
 800b0f8:	7dbb      	ldrb	r3, [r7, #22]
 800b0fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d041      	beq.n	800b186 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	623b      	str	r3, [r7, #32]
 800b106:	6a3b      	ldr	r3, [r7, #32]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b10c:	6a3b      	ldr	r3, [r7, #32]
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800b112:	4b23      	ldr	r3, [pc, #140]	; (800b1a0 <USER_SPI_ioctl+0x2dc>)
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	f003 0308 	and.w	r3, r3, #8
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d105      	bne.n	800b12a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800b11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b120:	025b      	lsls	r3, r3, #9
 800b122:	62bb      	str	r3, [r7, #40]	; 0x28
 800b124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b126:	025b      	lsls	r3, r3, #9
 800b128:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800b12a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b12c:	2020      	movs	r0, #32
 800b12e:	f7ff fc78 	bl	800aa22 <send_cmd>
 800b132:	4603      	mov	r3, r0
 800b134:	2b00      	cmp	r3, #0
 800b136:	d128      	bne.n	800b18a <USER_SPI_ioctl+0x2c6>
 800b138:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b13a:	2021      	movs	r0, #33	; 0x21
 800b13c:	f7ff fc71 	bl	800aa22 <send_cmd>
 800b140:	4603      	mov	r3, r0
 800b142:	2b00      	cmp	r3, #0
 800b144:	d121      	bne.n	800b18a <USER_SPI_ioctl+0x2c6>
 800b146:	2100      	movs	r1, #0
 800b148:	2026      	movs	r0, #38	; 0x26
 800b14a:	f7ff fc6a 	bl	800aa22 <send_cmd>
 800b14e:	4603      	mov	r3, r0
 800b150:	2b00      	cmp	r3, #0
 800b152:	d11a      	bne.n	800b18a <USER_SPI_ioctl+0x2c6>
 800b154:	f247 5030 	movw	r0, #30000	; 0x7530
 800b158:	f7ff fbb9 	bl	800a8ce <wait_ready>
 800b15c:	4603      	mov	r3, r0
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d013      	beq.n	800b18a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800b162:	2300      	movs	r3, #0
 800b164:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800b168:	e00f      	b.n	800b18a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800b16a:	2304      	movs	r3, #4
 800b16c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b170:	e00c      	b.n	800b18c <USER_SPI_ioctl+0x2c8>
		break;
 800b172:	bf00      	nop
 800b174:	e00a      	b.n	800b18c <USER_SPI_ioctl+0x2c8>
		break;
 800b176:	bf00      	nop
 800b178:	e008      	b.n	800b18c <USER_SPI_ioctl+0x2c8>
		break;
 800b17a:	bf00      	nop
 800b17c:	e006      	b.n	800b18c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800b17e:	bf00      	nop
 800b180:	e004      	b.n	800b18c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800b182:	bf00      	nop
 800b184:	e002      	b.n	800b18c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800b186:	bf00      	nop
 800b188:	e000      	b.n	800b18c <USER_SPI_ioctl+0x2c8>
		break;
 800b18a:	bf00      	nop
	}

	despiselect();
 800b18c:	f7ff fbc2 	bl	800a914 <despiselect>

	return res;
 800b190:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b194:	4618      	mov	r0, r3
 800b196:	3730      	adds	r7, #48	; 0x30
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}
 800b19c:	20000020 	.word	0x20000020
 800b1a0:	200008d0 	.word	0x200008d0

0800b1a4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b084      	sub	sp, #16
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b1b0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b1b4:	f004 fe6a 	bl	800fe8c <USBD_static_malloc>
 800b1b8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d105      	bne.n	800b1cc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b1c8:	2302      	movs	r3, #2
 800b1ca:	e066      	b.n	800b29a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	68fa      	ldr	r2, [r7, #12]
 800b1d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	7c1b      	ldrb	r3, [r3, #16]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d119      	bne.n	800b210 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b1dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1e0:	2202      	movs	r2, #2
 800b1e2:	2181      	movs	r1, #129	; 0x81
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f004 fd2e 	bl	800fc46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2201      	movs	r2, #1
 800b1ee:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b1f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1f4:	2202      	movs	r2, #2
 800b1f6:	2101      	movs	r1, #1
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f004 fd24 	bl	800fc46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2201      	movs	r2, #1
 800b202:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2210      	movs	r2, #16
 800b20a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b20e:	e016      	b.n	800b23e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b210:	2340      	movs	r3, #64	; 0x40
 800b212:	2202      	movs	r2, #2
 800b214:	2181      	movs	r1, #129	; 0x81
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f004 fd15 	bl	800fc46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2201      	movs	r2, #1
 800b220:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b222:	2340      	movs	r3, #64	; 0x40
 800b224:	2202      	movs	r2, #2
 800b226:	2101      	movs	r1, #1
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f004 fd0c 	bl	800fc46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2201      	movs	r2, #1
 800b232:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2210      	movs	r2, #16
 800b23a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b23e:	2308      	movs	r3, #8
 800b240:	2203      	movs	r2, #3
 800b242:	2182      	movs	r1, #130	; 0x82
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f004 fcfe 	bl	800fc46 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2201      	movs	r2, #1
 800b24e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2200      	movs	r2, #0
 800b260:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	2200      	movs	r2, #0
 800b268:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	7c1b      	ldrb	r3, [r3, #16]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d109      	bne.n	800b288 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b27a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b27e:	2101      	movs	r1, #1
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f004 fdcf 	bl	800fe24 <USBD_LL_PrepareReceive>
 800b286:	e007      	b.n	800b298 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b28e:	2340      	movs	r3, #64	; 0x40
 800b290:	2101      	movs	r1, #1
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f004 fdc6 	bl	800fe24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b298:	2300      	movs	r3, #0
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3710      	adds	r7, #16
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}

0800b2a2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b2a2:	b580      	push	{r7, lr}
 800b2a4:	b082      	sub	sp, #8
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	6078      	str	r0, [r7, #4]
 800b2aa:	460b      	mov	r3, r1
 800b2ac:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b2ae:	2181      	movs	r1, #129	; 0x81
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f004 fcee 	bl	800fc92 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b2bc:	2101      	movs	r1, #1
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f004 fce7 	bl	800fc92 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b2cc:	2182      	movs	r1, #130	; 0x82
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f004 fcdf 	bl	800fc92 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d00e      	beq.n	800b30c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b2f4:	685b      	ldr	r3, [r3, #4]
 800b2f6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b2fe:	4618      	mov	r0, r3
 800b300:	f004 fdd2 	bl	800fea8 <USBD_static_free>
    pdev->pClassData = NULL;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2200      	movs	r2, #0
 800b308:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b30c:	2300      	movs	r3, #0
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3708      	adds	r7, #8
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}
	...

0800b318 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b086      	sub	sp, #24
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b328:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b32a:	2300      	movs	r3, #0
 800b32c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b32e:	2300      	movs	r3, #0
 800b330:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b332:	2300      	movs	r3, #0
 800b334:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d101      	bne.n	800b340 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b33c:	2303      	movs	r3, #3
 800b33e:	e0af      	b.n	800b4a0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d03f      	beq.n	800b3cc <USBD_CDC_Setup+0xb4>
 800b34c:	2b20      	cmp	r3, #32
 800b34e:	f040 809f 	bne.w	800b490 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	88db      	ldrh	r3, [r3, #6]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d02e      	beq.n	800b3b8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	781b      	ldrb	r3, [r3, #0]
 800b35e:	b25b      	sxtb	r3, r3
 800b360:	2b00      	cmp	r3, #0
 800b362:	da16      	bge.n	800b392 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b36a:	689b      	ldr	r3, [r3, #8]
 800b36c:	683a      	ldr	r2, [r7, #0]
 800b36e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b370:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b372:	683a      	ldr	r2, [r7, #0]
 800b374:	88d2      	ldrh	r2, [r2, #6]
 800b376:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	88db      	ldrh	r3, [r3, #6]
 800b37c:	2b07      	cmp	r3, #7
 800b37e:	bf28      	it	cs
 800b380:	2307      	movcs	r3, #7
 800b382:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	89fa      	ldrh	r2, [r7, #14]
 800b388:	4619      	mov	r1, r3
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f001 fae9 	bl	800c962 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b390:	e085      	b.n	800b49e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	785a      	ldrb	r2, [r3, #1]
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	88db      	ldrh	r3, [r3, #6]
 800b3a0:	b2da      	uxtb	r2, r3
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b3a8:	6939      	ldr	r1, [r7, #16]
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	88db      	ldrh	r3, [r3, #6]
 800b3ae:	461a      	mov	r2, r3
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f001 fb02 	bl	800c9ba <USBD_CtlPrepareRx>
      break;
 800b3b6:	e072      	b.n	800b49e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b3be:	689b      	ldr	r3, [r3, #8]
 800b3c0:	683a      	ldr	r2, [r7, #0]
 800b3c2:	7850      	ldrb	r0, [r2, #1]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	6839      	ldr	r1, [r7, #0]
 800b3c8:	4798      	blx	r3
      break;
 800b3ca:	e068      	b.n	800b49e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	785b      	ldrb	r3, [r3, #1]
 800b3d0:	2b0b      	cmp	r3, #11
 800b3d2:	d852      	bhi.n	800b47a <USBD_CDC_Setup+0x162>
 800b3d4:	a201      	add	r2, pc, #4	; (adr r2, 800b3dc <USBD_CDC_Setup+0xc4>)
 800b3d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3da:	bf00      	nop
 800b3dc:	0800b40d 	.word	0x0800b40d
 800b3e0:	0800b489 	.word	0x0800b489
 800b3e4:	0800b47b 	.word	0x0800b47b
 800b3e8:	0800b47b 	.word	0x0800b47b
 800b3ec:	0800b47b 	.word	0x0800b47b
 800b3f0:	0800b47b 	.word	0x0800b47b
 800b3f4:	0800b47b 	.word	0x0800b47b
 800b3f8:	0800b47b 	.word	0x0800b47b
 800b3fc:	0800b47b 	.word	0x0800b47b
 800b400:	0800b47b 	.word	0x0800b47b
 800b404:	0800b437 	.word	0x0800b437
 800b408:	0800b461 	.word	0x0800b461
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b412:	b2db      	uxtb	r3, r3
 800b414:	2b03      	cmp	r3, #3
 800b416:	d107      	bne.n	800b428 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b418:	f107 030a 	add.w	r3, r7, #10
 800b41c:	2202      	movs	r2, #2
 800b41e:	4619      	mov	r1, r3
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f001 fa9e 	bl	800c962 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b426:	e032      	b.n	800b48e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b428:	6839      	ldr	r1, [r7, #0]
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f001 fa28 	bl	800c880 <USBD_CtlError>
            ret = USBD_FAIL;
 800b430:	2303      	movs	r3, #3
 800b432:	75fb      	strb	r3, [r7, #23]
          break;
 800b434:	e02b      	b.n	800b48e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b43c:	b2db      	uxtb	r3, r3
 800b43e:	2b03      	cmp	r3, #3
 800b440:	d107      	bne.n	800b452 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b442:	f107 030d 	add.w	r3, r7, #13
 800b446:	2201      	movs	r2, #1
 800b448:	4619      	mov	r1, r3
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f001 fa89 	bl	800c962 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b450:	e01d      	b.n	800b48e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b452:	6839      	ldr	r1, [r7, #0]
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f001 fa13 	bl	800c880 <USBD_CtlError>
            ret = USBD_FAIL;
 800b45a:	2303      	movs	r3, #3
 800b45c:	75fb      	strb	r3, [r7, #23]
          break;
 800b45e:	e016      	b.n	800b48e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b466:	b2db      	uxtb	r3, r3
 800b468:	2b03      	cmp	r3, #3
 800b46a:	d00f      	beq.n	800b48c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b46c:	6839      	ldr	r1, [r7, #0]
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f001 fa06 	bl	800c880 <USBD_CtlError>
            ret = USBD_FAIL;
 800b474:	2303      	movs	r3, #3
 800b476:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b478:	e008      	b.n	800b48c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b47a:	6839      	ldr	r1, [r7, #0]
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f001 f9ff 	bl	800c880 <USBD_CtlError>
          ret = USBD_FAIL;
 800b482:	2303      	movs	r3, #3
 800b484:	75fb      	strb	r3, [r7, #23]
          break;
 800b486:	e002      	b.n	800b48e <USBD_CDC_Setup+0x176>
          break;
 800b488:	bf00      	nop
 800b48a:	e008      	b.n	800b49e <USBD_CDC_Setup+0x186>
          break;
 800b48c:	bf00      	nop
      }
      break;
 800b48e:	e006      	b.n	800b49e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b490:	6839      	ldr	r1, [r7, #0]
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f001 f9f4 	bl	800c880 <USBD_CtlError>
      ret = USBD_FAIL;
 800b498:	2303      	movs	r3, #3
 800b49a:	75fb      	strb	r3, [r7, #23]
      break;
 800b49c:	bf00      	nop
  }

  return (uint8_t)ret;
 800b49e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3718      	adds	r7, #24
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	460b      	mov	r3, r1
 800b4b2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b4ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d101      	bne.n	800b4ca <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b4c6:	2303      	movs	r3, #3
 800b4c8:	e04f      	b.n	800b56a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4d0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b4d2:	78fa      	ldrb	r2, [r7, #3]
 800b4d4:	6879      	ldr	r1, [r7, #4]
 800b4d6:	4613      	mov	r3, r2
 800b4d8:	009b      	lsls	r3, r3, #2
 800b4da:	4413      	add	r3, r2
 800b4dc:	009b      	lsls	r3, r3, #2
 800b4de:	440b      	add	r3, r1
 800b4e0:	3318      	adds	r3, #24
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d029      	beq.n	800b53c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b4e8:	78fa      	ldrb	r2, [r7, #3]
 800b4ea:	6879      	ldr	r1, [r7, #4]
 800b4ec:	4613      	mov	r3, r2
 800b4ee:	009b      	lsls	r3, r3, #2
 800b4f0:	4413      	add	r3, r2
 800b4f2:	009b      	lsls	r3, r3, #2
 800b4f4:	440b      	add	r3, r1
 800b4f6:	3318      	adds	r3, #24
 800b4f8:	681a      	ldr	r2, [r3, #0]
 800b4fa:	78f9      	ldrb	r1, [r7, #3]
 800b4fc:	68f8      	ldr	r0, [r7, #12]
 800b4fe:	460b      	mov	r3, r1
 800b500:	00db      	lsls	r3, r3, #3
 800b502:	1a5b      	subs	r3, r3, r1
 800b504:	009b      	lsls	r3, r3, #2
 800b506:	4403      	add	r3, r0
 800b508:	3344      	adds	r3, #68	; 0x44
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	fbb2 f1f3 	udiv	r1, r2, r3
 800b510:	fb03 f301 	mul.w	r3, r3, r1
 800b514:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b516:	2b00      	cmp	r3, #0
 800b518:	d110      	bne.n	800b53c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b51a:	78fa      	ldrb	r2, [r7, #3]
 800b51c:	6879      	ldr	r1, [r7, #4]
 800b51e:	4613      	mov	r3, r2
 800b520:	009b      	lsls	r3, r3, #2
 800b522:	4413      	add	r3, r2
 800b524:	009b      	lsls	r3, r3, #2
 800b526:	440b      	add	r3, r1
 800b528:	3318      	adds	r3, #24
 800b52a:	2200      	movs	r2, #0
 800b52c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b52e:	78f9      	ldrb	r1, [r7, #3]
 800b530:	2300      	movs	r3, #0
 800b532:	2200      	movs	r2, #0
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f004 fc54 	bl	800fde2 <USBD_LL_Transmit>
 800b53a:	e015      	b.n	800b568 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	2200      	movs	r2, #0
 800b540:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b54a:	691b      	ldr	r3, [r3, #16]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d00b      	beq.n	800b568 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b556:	691b      	ldr	r3, [r3, #16]
 800b558:	68ba      	ldr	r2, [r7, #8]
 800b55a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b55e:	68ba      	ldr	r2, [r7, #8]
 800b560:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b564:	78fa      	ldrb	r2, [r7, #3]
 800b566:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b568:	2300      	movs	r3, #0
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3710      	adds	r7, #16
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}

0800b572 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b572:	b580      	push	{r7, lr}
 800b574:	b084      	sub	sp, #16
 800b576:	af00      	add	r7, sp, #0
 800b578:	6078      	str	r0, [r7, #4]
 800b57a:	460b      	mov	r3, r1
 800b57c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b584:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d101      	bne.n	800b594 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b590:	2303      	movs	r3, #3
 800b592:	e015      	b.n	800b5c0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b594:	78fb      	ldrb	r3, [r7, #3]
 800b596:	4619      	mov	r1, r3
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f004 fc64 	bl	800fe66 <USBD_LL_GetRxDataSize>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5ac:	68db      	ldr	r3, [r3, #12]
 800b5ae:	68fa      	ldr	r2, [r7, #12]
 800b5b0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b5b4:	68fa      	ldr	r2, [r7, #12]
 800b5b6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b5ba:	4611      	mov	r1, r2
 800b5bc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b5be:	2300      	movs	r3, #0
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3710      	adds	r7, #16
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}

0800b5c8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b084      	sub	sp, #16
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5d6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d101      	bne.n	800b5e2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b5de:	2303      	movs	r3, #3
 800b5e0:	e01b      	b.n	800b61a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d015      	beq.n	800b618 <USBD_CDC_EP0_RxReady+0x50>
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b5f2:	2bff      	cmp	r3, #255	; 0xff
 800b5f4:	d010      	beq.n	800b618 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5fc:	689b      	ldr	r3, [r3, #8]
 800b5fe:	68fa      	ldr	r2, [r7, #12]
 800b600:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b604:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b606:	68fa      	ldr	r2, [r7, #12]
 800b608:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b60c:	b292      	uxth	r2, r2
 800b60e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	22ff      	movs	r2, #255	; 0xff
 800b614:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b618:	2300      	movs	r3, #0
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3710      	adds	r7, #16
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}
	...

0800b624 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b624:	b480      	push	{r7}
 800b626:	b083      	sub	sp, #12
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2243      	movs	r2, #67	; 0x43
 800b630:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b632:	4b03      	ldr	r3, [pc, #12]	; (800b640 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b634:	4618      	mov	r0, r3
 800b636:	370c      	adds	r7, #12
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr
 800b640:	200000ac 	.word	0x200000ac

0800b644 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b644:	b480      	push	{r7}
 800b646:	b083      	sub	sp, #12
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2243      	movs	r2, #67	; 0x43
 800b650:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b652:	4b03      	ldr	r3, [pc, #12]	; (800b660 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b654:	4618      	mov	r0, r3
 800b656:	370c      	adds	r7, #12
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr
 800b660:	20000068 	.word	0x20000068

0800b664 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b664:	b480      	push	{r7}
 800b666:	b083      	sub	sp, #12
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2243      	movs	r2, #67	; 0x43
 800b670:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b672:	4b03      	ldr	r3, [pc, #12]	; (800b680 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b674:	4618      	mov	r0, r3
 800b676:	370c      	adds	r7, #12
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr
 800b680:	200000f0 	.word	0x200000f0

0800b684 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b684:	b480      	push	{r7}
 800b686:	b083      	sub	sp, #12
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	220a      	movs	r2, #10
 800b690:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b692:	4b03      	ldr	r3, [pc, #12]	; (800b6a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b694:	4618      	mov	r0, r3
 800b696:	370c      	adds	r7, #12
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr
 800b6a0:	20000024 	.word	0x20000024

0800b6a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b083      	sub	sp, #12
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
 800b6ac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d101      	bne.n	800b6b8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b6b4:	2303      	movs	r3, #3
 800b6b6:	e004      	b.n	800b6c2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	683a      	ldr	r2, [r7, #0]
 800b6bc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b6c0:	2300      	movs	r3, #0
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	370c      	adds	r7, #12
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6cc:	4770      	bx	lr

0800b6ce <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b6ce:	b480      	push	{r7}
 800b6d0:	b087      	sub	sp, #28
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	60f8      	str	r0, [r7, #12]
 800b6d6:	60b9      	str	r1, [r7, #8]
 800b6d8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b6e0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d101      	bne.n	800b6ec <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b6e8:	2303      	movs	r3, #3
 800b6ea:	e008      	b.n	800b6fe <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	68ba      	ldr	r2, [r7, #8]
 800b6f0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	687a      	ldr	r2, [r7, #4]
 800b6f8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b6fc:	2300      	movs	r3, #0
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	371c      	adds	r7, #28
 800b702:	46bd      	mov	sp, r7
 800b704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b708:	4770      	bx	lr

0800b70a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b70a:	b480      	push	{r7}
 800b70c:	b085      	sub	sp, #20
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
 800b712:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b71a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d101      	bne.n	800b726 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b722:	2303      	movs	r3, #3
 800b724:	e004      	b.n	800b730 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	683a      	ldr	r2, [r7, #0]
 800b72a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b72e:	2300      	movs	r3, #0
}
 800b730:	4618      	mov	r0, r3
 800b732:	3714      	adds	r7, #20
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr

0800b73c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b084      	sub	sp, #16
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b74a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b752:	2b00      	cmp	r3, #0
 800b754:	d101      	bne.n	800b75a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b756:	2303      	movs	r3, #3
 800b758:	e016      	b.n	800b788 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	7c1b      	ldrb	r3, [r3, #16]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d109      	bne.n	800b776 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b768:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b76c:	2101      	movs	r1, #1
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f004 fb58 	bl	800fe24 <USBD_LL_PrepareReceive>
 800b774:	e007      	b.n	800b786 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b77c:	2340      	movs	r3, #64	; 0x40
 800b77e:	2101      	movs	r1, #1
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f004 fb4f 	bl	800fe24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b786:	2300      	movs	r3, #0
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3710      	adds	r7, #16
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}

0800b790 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b086      	sub	sp, #24
 800b794:	af00      	add	r7, sp, #0
 800b796:	60f8      	str	r0, [r7, #12]
 800b798:	60b9      	str	r1, [r7, #8]
 800b79a:	4613      	mov	r3, r2
 800b79c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d101      	bne.n	800b7a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b7a4:	2303      	movs	r3, #3
 800b7a6:	e01f      	b.n	800b7e8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d003      	beq.n	800b7ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	68ba      	ldr	r2, [r7, #8]
 800b7ca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2201      	movs	r2, #1
 800b7d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	79fa      	ldrb	r2, [r7, #7]
 800b7da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b7dc:	68f8      	ldr	r0, [r7, #12]
 800b7de:	f004 f9cb 	bl	800fb78 <USBD_LL_Init>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b7e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3718      	adds	r7, #24
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b084      	sub	sp, #16
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d101      	bne.n	800b808 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b804:	2303      	movs	r3, #3
 800b806:	e016      	b.n	800b836 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	683a      	ldr	r2, [r7, #0]
 800b80c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d00b      	beq.n	800b834 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b824:	f107 020e 	add.w	r2, r7, #14
 800b828:	4610      	mov	r0, r2
 800b82a:	4798      	blx	r3
 800b82c:	4602      	mov	r2, r0
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b834:	2300      	movs	r3, #0
}
 800b836:	4618      	mov	r0, r3
 800b838:	3710      	adds	r7, #16
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}

0800b83e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b83e:	b580      	push	{r7, lr}
 800b840:	b082      	sub	sp, #8
 800b842:	af00      	add	r7, sp, #0
 800b844:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f004 f9e2 	bl	800fc10 <USBD_LL_Start>
 800b84c:	4603      	mov	r3, r0
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3708      	adds	r7, #8
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}

0800b856 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b856:	b480      	push	{r7}
 800b858:	b083      	sub	sp, #12
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b85e:	2300      	movs	r3, #0
}
 800b860:	4618      	mov	r0, r3
 800b862:	370c      	adds	r7, #12
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr

0800b86c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b084      	sub	sp, #16
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
 800b874:	460b      	mov	r3, r1
 800b876:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b878:	2303      	movs	r3, #3
 800b87a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b882:	2b00      	cmp	r3, #0
 800b884:	d009      	beq.n	800b89a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	78fa      	ldrb	r2, [r7, #3]
 800b890:	4611      	mov	r1, r2
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	4798      	blx	r3
 800b896:	4603      	mov	r3, r0
 800b898:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b89a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3710      	adds	r7, #16
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}

0800b8a4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b082      	sub	sp, #8
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d007      	beq.n	800b8ca <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8c0:	685b      	ldr	r3, [r3, #4]
 800b8c2:	78fa      	ldrb	r2, [r7, #3]
 800b8c4:	4611      	mov	r1, r2
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	4798      	blx	r3
  }

  return USBD_OK;
 800b8ca:	2300      	movs	r3, #0
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3708      	adds	r7, #8
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b8e4:	6839      	ldr	r1, [r7, #0]
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f000 ff90 	bl	800c80c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2201      	movs	r2, #1
 800b8f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b908:	f003 031f 	and.w	r3, r3, #31
 800b90c:	2b02      	cmp	r3, #2
 800b90e:	d01a      	beq.n	800b946 <USBD_LL_SetupStage+0x72>
 800b910:	2b02      	cmp	r3, #2
 800b912:	d822      	bhi.n	800b95a <USBD_LL_SetupStage+0x86>
 800b914:	2b00      	cmp	r3, #0
 800b916:	d002      	beq.n	800b91e <USBD_LL_SetupStage+0x4a>
 800b918:	2b01      	cmp	r3, #1
 800b91a:	d00a      	beq.n	800b932 <USBD_LL_SetupStage+0x5e>
 800b91c:	e01d      	b.n	800b95a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b924:	4619      	mov	r1, r3
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f000 fa62 	bl	800bdf0 <USBD_StdDevReq>
 800b92c:	4603      	mov	r3, r0
 800b92e:	73fb      	strb	r3, [r7, #15]
      break;
 800b930:	e020      	b.n	800b974 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b938:	4619      	mov	r1, r3
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f000 fac6 	bl	800becc <USBD_StdItfReq>
 800b940:	4603      	mov	r3, r0
 800b942:	73fb      	strb	r3, [r7, #15]
      break;
 800b944:	e016      	b.n	800b974 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b94c:	4619      	mov	r1, r3
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f000 fb05 	bl	800bf5e <USBD_StdEPReq>
 800b954:	4603      	mov	r3, r0
 800b956:	73fb      	strb	r3, [r7, #15]
      break;
 800b958:	e00c      	b.n	800b974 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b960:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b964:	b2db      	uxtb	r3, r3
 800b966:	4619      	mov	r1, r3
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f004 f9b1 	bl	800fcd0 <USBD_LL_StallEP>
 800b96e:	4603      	mov	r3, r0
 800b970:	73fb      	strb	r3, [r7, #15]
      break;
 800b972:	bf00      	nop
  }

  return ret;
 800b974:	7bfb      	ldrb	r3, [r7, #15]
}
 800b976:	4618      	mov	r0, r3
 800b978:	3710      	adds	r7, #16
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}

0800b97e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b97e:	b580      	push	{r7, lr}
 800b980:	b086      	sub	sp, #24
 800b982:	af00      	add	r7, sp, #0
 800b984:	60f8      	str	r0, [r7, #12]
 800b986:	460b      	mov	r3, r1
 800b988:	607a      	str	r2, [r7, #4]
 800b98a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b98c:	7afb      	ldrb	r3, [r7, #11]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d138      	bne.n	800ba04 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b998:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b9a0:	2b03      	cmp	r3, #3
 800b9a2:	d14a      	bne.n	800ba3a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	689a      	ldr	r2, [r3, #8]
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	68db      	ldr	r3, [r3, #12]
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	d913      	bls.n	800b9d8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	689a      	ldr	r2, [r3, #8]
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	68db      	ldr	r3, [r3, #12]
 800b9b8:	1ad2      	subs	r2, r2, r3
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	68da      	ldr	r2, [r3, #12]
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	689b      	ldr	r3, [r3, #8]
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	bf28      	it	cs
 800b9ca:	4613      	movcs	r3, r2
 800b9cc:	461a      	mov	r2, r3
 800b9ce:	6879      	ldr	r1, [r7, #4]
 800b9d0:	68f8      	ldr	r0, [r7, #12]
 800b9d2:	f001 f80f 	bl	800c9f4 <USBD_CtlContinueRx>
 800b9d6:	e030      	b.n	800ba3a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9de:	b2db      	uxtb	r3, r3
 800b9e0:	2b03      	cmp	r3, #3
 800b9e2:	d10b      	bne.n	800b9fc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9ea:	691b      	ldr	r3, [r3, #16]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d005      	beq.n	800b9fc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9f6:	691b      	ldr	r3, [r3, #16]
 800b9f8:	68f8      	ldr	r0, [r7, #12]
 800b9fa:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b9fc:	68f8      	ldr	r0, [r7, #12]
 800b9fe:	f001 f80a 	bl	800ca16 <USBD_CtlSendStatus>
 800ba02:	e01a      	b.n	800ba3a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba0a:	b2db      	uxtb	r3, r3
 800ba0c:	2b03      	cmp	r3, #3
 800ba0e:	d114      	bne.n	800ba3a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba16:	699b      	ldr	r3, [r3, #24]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d00e      	beq.n	800ba3a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba22:	699b      	ldr	r3, [r3, #24]
 800ba24:	7afa      	ldrb	r2, [r7, #11]
 800ba26:	4611      	mov	r1, r2
 800ba28:	68f8      	ldr	r0, [r7, #12]
 800ba2a:	4798      	blx	r3
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ba30:	7dfb      	ldrb	r3, [r7, #23]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d001      	beq.n	800ba3a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ba36:	7dfb      	ldrb	r3, [r7, #23]
 800ba38:	e000      	b.n	800ba3c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800ba3a:	2300      	movs	r3, #0
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3718      	adds	r7, #24
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}

0800ba44 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b086      	sub	sp, #24
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	60f8      	str	r0, [r7, #12]
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	607a      	str	r2, [r7, #4]
 800ba50:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ba52:	7afb      	ldrb	r3, [r7, #11]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d16b      	bne.n	800bb30 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	3314      	adds	r3, #20
 800ba5c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ba64:	2b02      	cmp	r3, #2
 800ba66:	d156      	bne.n	800bb16 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	689a      	ldr	r2, [r3, #8]
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	68db      	ldr	r3, [r3, #12]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d914      	bls.n	800ba9e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	689a      	ldr	r2, [r3, #8]
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	68db      	ldr	r3, [r3, #12]
 800ba7c:	1ad2      	subs	r2, r2, r3
 800ba7e:	693b      	ldr	r3, [r7, #16]
 800ba80:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	689b      	ldr	r3, [r3, #8]
 800ba86:	461a      	mov	r2, r3
 800ba88:	6879      	ldr	r1, [r7, #4]
 800ba8a:	68f8      	ldr	r0, [r7, #12]
 800ba8c:	f000 ff84 	bl	800c998 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba90:	2300      	movs	r3, #0
 800ba92:	2200      	movs	r2, #0
 800ba94:	2100      	movs	r1, #0
 800ba96:	68f8      	ldr	r0, [r7, #12]
 800ba98:	f004 f9c4 	bl	800fe24 <USBD_LL_PrepareReceive>
 800ba9c:	e03b      	b.n	800bb16 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	68da      	ldr	r2, [r3, #12]
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	689b      	ldr	r3, [r3, #8]
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d11c      	bne.n	800bae4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	685a      	ldr	r2, [r3, #4]
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d316      	bcc.n	800bae4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	685a      	ldr	r2, [r3, #4]
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bac0:	429a      	cmp	r2, r3
 800bac2:	d20f      	bcs.n	800bae4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bac4:	2200      	movs	r2, #0
 800bac6:	2100      	movs	r1, #0
 800bac8:	68f8      	ldr	r0, [r7, #12]
 800baca:	f000 ff65 	bl	800c998 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	2200      	movs	r2, #0
 800bad2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bad6:	2300      	movs	r3, #0
 800bad8:	2200      	movs	r2, #0
 800bada:	2100      	movs	r1, #0
 800badc:	68f8      	ldr	r0, [r7, #12]
 800bade:	f004 f9a1 	bl	800fe24 <USBD_LL_PrepareReceive>
 800bae2:	e018      	b.n	800bb16 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800baea:	b2db      	uxtb	r3, r3
 800baec:	2b03      	cmp	r3, #3
 800baee:	d10b      	bne.n	800bb08 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baf6:	68db      	ldr	r3, [r3, #12]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d005      	beq.n	800bb08 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb02:	68db      	ldr	r3, [r3, #12]
 800bb04:	68f8      	ldr	r0, [r7, #12]
 800bb06:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb08:	2180      	movs	r1, #128	; 0x80
 800bb0a:	68f8      	ldr	r0, [r7, #12]
 800bb0c:	f004 f8e0 	bl	800fcd0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bb10:	68f8      	ldr	r0, [r7, #12]
 800bb12:	f000 ff93 	bl	800ca3c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	d122      	bne.n	800bb66 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800bb20:	68f8      	ldr	r0, [r7, #12]
 800bb22:	f7ff fe98 	bl	800b856 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	2200      	movs	r2, #0
 800bb2a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bb2e:	e01a      	b.n	800bb66 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb36:	b2db      	uxtb	r3, r3
 800bb38:	2b03      	cmp	r3, #3
 800bb3a:	d114      	bne.n	800bb66 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb42:	695b      	ldr	r3, [r3, #20]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d00e      	beq.n	800bb66 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb4e:	695b      	ldr	r3, [r3, #20]
 800bb50:	7afa      	ldrb	r2, [r7, #11]
 800bb52:	4611      	mov	r1, r2
 800bb54:	68f8      	ldr	r0, [r7, #12]
 800bb56:	4798      	blx	r3
 800bb58:	4603      	mov	r3, r0
 800bb5a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bb5c:	7dfb      	ldrb	r3, [r7, #23]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d001      	beq.n	800bb66 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800bb62:	7dfb      	ldrb	r3, [r7, #23]
 800bb64:	e000      	b.n	800bb68 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800bb66:	2300      	movs	r3, #0
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3718      	adds	r7, #24
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b082      	sub	sp, #8
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2200      	movs	r2, #0
 800bb84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2200      	movs	r2, #0
 800bb92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d101      	bne.n	800bba4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800bba0:	2303      	movs	r3, #3
 800bba2:	e02f      	b.n	800bc04 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d00f      	beq.n	800bbce <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbb4:	685b      	ldr	r3, [r3, #4]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d009      	beq.n	800bbce <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	687a      	ldr	r2, [r7, #4]
 800bbc4:	6852      	ldr	r2, [r2, #4]
 800bbc6:	b2d2      	uxtb	r2, r2
 800bbc8:	4611      	mov	r1, r2
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bbce:	2340      	movs	r3, #64	; 0x40
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	2100      	movs	r1, #0
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f004 f836 	bl	800fc46 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2201      	movs	r2, #1
 800bbde:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2240      	movs	r2, #64	; 0x40
 800bbe6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bbea:	2340      	movs	r3, #64	; 0x40
 800bbec:	2200      	movs	r2, #0
 800bbee:	2180      	movs	r1, #128	; 0x80
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f004 f828 	bl	800fc46 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2240      	movs	r2, #64	; 0x40
 800bc00:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800bc02:	2300      	movs	r3, #0
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3708      	adds	r7, #8
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}

0800bc0c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b083      	sub	sp, #12
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	460b      	mov	r3, r1
 800bc16:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	78fa      	ldrb	r2, [r7, #3]
 800bc1c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bc1e:	2300      	movs	r3, #0
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	370c      	adds	r7, #12
 800bc24:	46bd      	mov	sp, r7
 800bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2a:	4770      	bx	lr

0800bc2c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b083      	sub	sp, #12
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc3a:	b2da      	uxtb	r2, r3
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2204      	movs	r2, #4
 800bc46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bc4a:	2300      	movs	r3, #0
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	370c      	adds	r7, #12
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr

0800bc58 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b083      	sub	sp, #12
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc66:	b2db      	uxtb	r3, r3
 800bc68:	2b04      	cmp	r3, #4
 800bc6a:	d106      	bne.n	800bc7a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bc72:	b2da      	uxtb	r2, r3
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bc7a:	2300      	movs	r3, #0
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	370c      	adds	r7, #12
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr

0800bc88 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b082      	sub	sp, #8
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d101      	bne.n	800bc9e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800bc9a:	2303      	movs	r3, #3
 800bc9c:	e012      	b.n	800bcc4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bca4:	b2db      	uxtb	r3, r3
 800bca6:	2b03      	cmp	r3, #3
 800bca8:	d10b      	bne.n	800bcc2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcb0:	69db      	ldr	r3, [r3, #28]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d005      	beq.n	800bcc2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcbc:	69db      	ldr	r3, [r3, #28]
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bcc2:	2300      	movs	r3, #0
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3708      	adds	r7, #8
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}

0800bccc <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b082      	sub	sp, #8
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d101      	bne.n	800bce6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800bce2:	2303      	movs	r3, #3
 800bce4:	e014      	b.n	800bd10 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	2b03      	cmp	r3, #3
 800bcf0:	d10d      	bne.n	800bd0e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcf8:	6a1b      	ldr	r3, [r3, #32]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d007      	beq.n	800bd0e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd04:	6a1b      	ldr	r3, [r3, #32]
 800bd06:	78fa      	ldrb	r2, [r7, #3]
 800bd08:	4611      	mov	r1, r2
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bd0e:	2300      	movs	r3, #0
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3708      	adds	r7, #8
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	460b      	mov	r3, r1
 800bd22:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d101      	bne.n	800bd32 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800bd2e:	2303      	movs	r3, #3
 800bd30:	e014      	b.n	800bd5c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd38:	b2db      	uxtb	r3, r3
 800bd3a:	2b03      	cmp	r3, #3
 800bd3c:	d10d      	bne.n	800bd5a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d007      	beq.n	800bd5a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd52:	78fa      	ldrb	r2, [r7, #3]
 800bd54:	4611      	mov	r1, r2
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bd5a:	2300      	movs	r3, #0
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3708      	adds	r7, #8
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}

0800bd64 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b083      	sub	sp, #12
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bd6c:	2300      	movs	r3, #0
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	370c      	adds	r7, #12
 800bd72:	46bd      	mov	sp, r7
 800bd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd78:	4770      	bx	lr

0800bd7a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bd7a:	b580      	push	{r7, lr}
 800bd7c:	b082      	sub	sp, #8
 800bd7e:	af00      	add	r7, sp, #0
 800bd80:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2201      	movs	r2, #1
 800bd86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d009      	beq.n	800bda8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	687a      	ldr	r2, [r7, #4]
 800bd9e:	6852      	ldr	r2, [r2, #4]
 800bda0:	b2d2      	uxtb	r2, r2
 800bda2:	4611      	mov	r1, r2
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	4798      	blx	r3
  }

  return USBD_OK;
 800bda8:	2300      	movs	r3, #0
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3708      	adds	r7, #8
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}

0800bdb2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bdb2:	b480      	push	{r7}
 800bdb4:	b087      	sub	sp, #28
 800bdb6:	af00      	add	r7, sp, #0
 800bdb8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	781b      	ldrb	r3, [r3, #0]
 800bdc2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	3301      	adds	r3, #1
 800bdc8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bdd0:	8a3b      	ldrh	r3, [r7, #16]
 800bdd2:	021b      	lsls	r3, r3, #8
 800bdd4:	b21a      	sxth	r2, r3
 800bdd6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bdda:	4313      	orrs	r3, r2
 800bddc:	b21b      	sxth	r3, r3
 800bdde:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bde0:	89fb      	ldrh	r3, [r7, #14]
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	371c      	adds	r7, #28
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr
	...

0800bdf0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b084      	sub	sp, #16
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be06:	2b40      	cmp	r3, #64	; 0x40
 800be08:	d005      	beq.n	800be16 <USBD_StdDevReq+0x26>
 800be0a:	2b40      	cmp	r3, #64	; 0x40
 800be0c:	d853      	bhi.n	800beb6 <USBD_StdDevReq+0xc6>
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d00b      	beq.n	800be2a <USBD_StdDevReq+0x3a>
 800be12:	2b20      	cmp	r3, #32
 800be14:	d14f      	bne.n	800beb6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be1c:	689b      	ldr	r3, [r3, #8]
 800be1e:	6839      	ldr	r1, [r7, #0]
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	4798      	blx	r3
 800be24:	4603      	mov	r3, r0
 800be26:	73fb      	strb	r3, [r7, #15]
      break;
 800be28:	e04a      	b.n	800bec0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	785b      	ldrb	r3, [r3, #1]
 800be2e:	2b09      	cmp	r3, #9
 800be30:	d83b      	bhi.n	800beaa <USBD_StdDevReq+0xba>
 800be32:	a201      	add	r2, pc, #4	; (adr r2, 800be38 <USBD_StdDevReq+0x48>)
 800be34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be38:	0800be8d 	.word	0x0800be8d
 800be3c:	0800bea1 	.word	0x0800bea1
 800be40:	0800beab 	.word	0x0800beab
 800be44:	0800be97 	.word	0x0800be97
 800be48:	0800beab 	.word	0x0800beab
 800be4c:	0800be6b 	.word	0x0800be6b
 800be50:	0800be61 	.word	0x0800be61
 800be54:	0800beab 	.word	0x0800beab
 800be58:	0800be83 	.word	0x0800be83
 800be5c:	0800be75 	.word	0x0800be75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800be60:	6839      	ldr	r1, [r7, #0]
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f000 f9de 	bl	800c224 <USBD_GetDescriptor>
          break;
 800be68:	e024      	b.n	800beb4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800be6a:	6839      	ldr	r1, [r7, #0]
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f000 fb43 	bl	800c4f8 <USBD_SetAddress>
          break;
 800be72:	e01f      	b.n	800beb4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800be74:	6839      	ldr	r1, [r7, #0]
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f000 fb82 	bl	800c580 <USBD_SetConfig>
 800be7c:	4603      	mov	r3, r0
 800be7e:	73fb      	strb	r3, [r7, #15]
          break;
 800be80:	e018      	b.n	800beb4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800be82:	6839      	ldr	r1, [r7, #0]
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f000 fc21 	bl	800c6cc <USBD_GetConfig>
          break;
 800be8a:	e013      	b.n	800beb4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800be8c:	6839      	ldr	r1, [r7, #0]
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f000 fc52 	bl	800c738 <USBD_GetStatus>
          break;
 800be94:	e00e      	b.n	800beb4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800be96:	6839      	ldr	r1, [r7, #0]
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f000 fc81 	bl	800c7a0 <USBD_SetFeature>
          break;
 800be9e:	e009      	b.n	800beb4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bea0:	6839      	ldr	r1, [r7, #0]
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f000 fc90 	bl	800c7c8 <USBD_ClrFeature>
          break;
 800bea8:	e004      	b.n	800beb4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800beaa:	6839      	ldr	r1, [r7, #0]
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f000 fce7 	bl	800c880 <USBD_CtlError>
          break;
 800beb2:	bf00      	nop
      }
      break;
 800beb4:	e004      	b.n	800bec0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800beb6:	6839      	ldr	r1, [r7, #0]
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f000 fce1 	bl	800c880 <USBD_CtlError>
      break;
 800bebe:	bf00      	nop
  }

  return ret;
 800bec0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3710      	adds	r7, #16
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}
 800beca:	bf00      	nop

0800becc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b084      	sub	sp, #16
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
 800bed4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bed6:	2300      	movs	r3, #0
 800bed8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bee2:	2b40      	cmp	r3, #64	; 0x40
 800bee4:	d005      	beq.n	800bef2 <USBD_StdItfReq+0x26>
 800bee6:	2b40      	cmp	r3, #64	; 0x40
 800bee8:	d82f      	bhi.n	800bf4a <USBD_StdItfReq+0x7e>
 800beea:	2b00      	cmp	r3, #0
 800beec:	d001      	beq.n	800bef2 <USBD_StdItfReq+0x26>
 800beee:	2b20      	cmp	r3, #32
 800bef0:	d12b      	bne.n	800bf4a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bef8:	b2db      	uxtb	r3, r3
 800befa:	3b01      	subs	r3, #1
 800befc:	2b02      	cmp	r3, #2
 800befe:	d81d      	bhi.n	800bf3c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	889b      	ldrh	r3, [r3, #4]
 800bf04:	b2db      	uxtb	r3, r3
 800bf06:	2b01      	cmp	r3, #1
 800bf08:	d813      	bhi.n	800bf32 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf10:	689b      	ldr	r3, [r3, #8]
 800bf12:	6839      	ldr	r1, [r7, #0]
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	4798      	blx	r3
 800bf18:	4603      	mov	r3, r0
 800bf1a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	88db      	ldrh	r3, [r3, #6]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d110      	bne.n	800bf46 <USBD_StdItfReq+0x7a>
 800bf24:	7bfb      	ldrb	r3, [r7, #15]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d10d      	bne.n	800bf46 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f000 fd73 	bl	800ca16 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bf30:	e009      	b.n	800bf46 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800bf32:	6839      	ldr	r1, [r7, #0]
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f000 fca3 	bl	800c880 <USBD_CtlError>
          break;
 800bf3a:	e004      	b.n	800bf46 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800bf3c:	6839      	ldr	r1, [r7, #0]
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 fc9e 	bl	800c880 <USBD_CtlError>
          break;
 800bf44:	e000      	b.n	800bf48 <USBD_StdItfReq+0x7c>
          break;
 800bf46:	bf00      	nop
      }
      break;
 800bf48:	e004      	b.n	800bf54 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800bf4a:	6839      	ldr	r1, [r7, #0]
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f000 fc97 	bl	800c880 <USBD_CtlError>
      break;
 800bf52:	bf00      	nop
  }

  return ret;
 800bf54:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3710      	adds	r7, #16
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}

0800bf5e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf5e:	b580      	push	{r7, lr}
 800bf60:	b084      	sub	sp, #16
 800bf62:	af00      	add	r7, sp, #0
 800bf64:	6078      	str	r0, [r7, #4]
 800bf66:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	889b      	ldrh	r3, [r3, #4]
 800bf70:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	781b      	ldrb	r3, [r3, #0]
 800bf76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf7a:	2b40      	cmp	r3, #64	; 0x40
 800bf7c:	d007      	beq.n	800bf8e <USBD_StdEPReq+0x30>
 800bf7e:	2b40      	cmp	r3, #64	; 0x40
 800bf80:	f200 8145 	bhi.w	800c20e <USBD_StdEPReq+0x2b0>
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d00c      	beq.n	800bfa2 <USBD_StdEPReq+0x44>
 800bf88:	2b20      	cmp	r3, #32
 800bf8a:	f040 8140 	bne.w	800c20e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf94:	689b      	ldr	r3, [r3, #8]
 800bf96:	6839      	ldr	r1, [r7, #0]
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	4798      	blx	r3
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	73fb      	strb	r3, [r7, #15]
      break;
 800bfa0:	e13a      	b.n	800c218 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	785b      	ldrb	r3, [r3, #1]
 800bfa6:	2b03      	cmp	r3, #3
 800bfa8:	d007      	beq.n	800bfba <USBD_StdEPReq+0x5c>
 800bfaa:	2b03      	cmp	r3, #3
 800bfac:	f300 8129 	bgt.w	800c202 <USBD_StdEPReq+0x2a4>
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d07f      	beq.n	800c0b4 <USBD_StdEPReq+0x156>
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d03c      	beq.n	800c032 <USBD_StdEPReq+0xd4>
 800bfb8:	e123      	b.n	800c202 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfc0:	b2db      	uxtb	r3, r3
 800bfc2:	2b02      	cmp	r3, #2
 800bfc4:	d002      	beq.n	800bfcc <USBD_StdEPReq+0x6e>
 800bfc6:	2b03      	cmp	r3, #3
 800bfc8:	d016      	beq.n	800bff8 <USBD_StdEPReq+0x9a>
 800bfca:	e02c      	b.n	800c026 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bfcc:	7bbb      	ldrb	r3, [r7, #14]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d00d      	beq.n	800bfee <USBD_StdEPReq+0x90>
 800bfd2:	7bbb      	ldrb	r3, [r7, #14]
 800bfd4:	2b80      	cmp	r3, #128	; 0x80
 800bfd6:	d00a      	beq.n	800bfee <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bfd8:	7bbb      	ldrb	r3, [r7, #14]
 800bfda:	4619      	mov	r1, r3
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f003 fe77 	bl	800fcd0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bfe2:	2180      	movs	r1, #128	; 0x80
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f003 fe73 	bl	800fcd0 <USBD_LL_StallEP>
 800bfea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bfec:	e020      	b.n	800c030 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800bfee:	6839      	ldr	r1, [r7, #0]
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f000 fc45 	bl	800c880 <USBD_CtlError>
              break;
 800bff6:	e01b      	b.n	800c030 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	885b      	ldrh	r3, [r3, #2]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d10e      	bne.n	800c01e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c000:	7bbb      	ldrb	r3, [r7, #14]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d00b      	beq.n	800c01e <USBD_StdEPReq+0xc0>
 800c006:	7bbb      	ldrb	r3, [r7, #14]
 800c008:	2b80      	cmp	r3, #128	; 0x80
 800c00a:	d008      	beq.n	800c01e <USBD_StdEPReq+0xc0>
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	88db      	ldrh	r3, [r3, #6]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d104      	bne.n	800c01e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c014:	7bbb      	ldrb	r3, [r7, #14]
 800c016:	4619      	mov	r1, r3
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f003 fe59 	bl	800fcd0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 fcf9 	bl	800ca16 <USBD_CtlSendStatus>

              break;
 800c024:	e004      	b.n	800c030 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c026:	6839      	ldr	r1, [r7, #0]
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f000 fc29 	bl	800c880 <USBD_CtlError>
              break;
 800c02e:	bf00      	nop
          }
          break;
 800c030:	e0ec      	b.n	800c20c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c038:	b2db      	uxtb	r3, r3
 800c03a:	2b02      	cmp	r3, #2
 800c03c:	d002      	beq.n	800c044 <USBD_StdEPReq+0xe6>
 800c03e:	2b03      	cmp	r3, #3
 800c040:	d016      	beq.n	800c070 <USBD_StdEPReq+0x112>
 800c042:	e030      	b.n	800c0a6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c044:	7bbb      	ldrb	r3, [r7, #14]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d00d      	beq.n	800c066 <USBD_StdEPReq+0x108>
 800c04a:	7bbb      	ldrb	r3, [r7, #14]
 800c04c:	2b80      	cmp	r3, #128	; 0x80
 800c04e:	d00a      	beq.n	800c066 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c050:	7bbb      	ldrb	r3, [r7, #14]
 800c052:	4619      	mov	r1, r3
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f003 fe3b 	bl	800fcd0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c05a:	2180      	movs	r1, #128	; 0x80
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f003 fe37 	bl	800fcd0 <USBD_LL_StallEP>
 800c062:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c064:	e025      	b.n	800c0b2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c066:	6839      	ldr	r1, [r7, #0]
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f000 fc09 	bl	800c880 <USBD_CtlError>
              break;
 800c06e:	e020      	b.n	800c0b2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	885b      	ldrh	r3, [r3, #2]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d11b      	bne.n	800c0b0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c078:	7bbb      	ldrb	r3, [r7, #14]
 800c07a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d004      	beq.n	800c08c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c082:	7bbb      	ldrb	r3, [r7, #14]
 800c084:	4619      	mov	r1, r3
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f003 fe41 	bl	800fd0e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f000 fcc2 	bl	800ca16 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c098:	689b      	ldr	r3, [r3, #8]
 800c09a:	6839      	ldr	r1, [r7, #0]
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	4798      	blx	r3
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c0a4:	e004      	b.n	800c0b0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c0a6:	6839      	ldr	r1, [r7, #0]
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f000 fbe9 	bl	800c880 <USBD_CtlError>
              break;
 800c0ae:	e000      	b.n	800c0b2 <USBD_StdEPReq+0x154>
              break;
 800c0b0:	bf00      	nop
          }
          break;
 800c0b2:	e0ab      	b.n	800c20c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0ba:	b2db      	uxtb	r3, r3
 800c0bc:	2b02      	cmp	r3, #2
 800c0be:	d002      	beq.n	800c0c6 <USBD_StdEPReq+0x168>
 800c0c0:	2b03      	cmp	r3, #3
 800c0c2:	d032      	beq.n	800c12a <USBD_StdEPReq+0x1cc>
 800c0c4:	e097      	b.n	800c1f6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0c6:	7bbb      	ldrb	r3, [r7, #14]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d007      	beq.n	800c0dc <USBD_StdEPReq+0x17e>
 800c0cc:	7bbb      	ldrb	r3, [r7, #14]
 800c0ce:	2b80      	cmp	r3, #128	; 0x80
 800c0d0:	d004      	beq.n	800c0dc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c0d2:	6839      	ldr	r1, [r7, #0]
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f000 fbd3 	bl	800c880 <USBD_CtlError>
                break;
 800c0da:	e091      	b.n	800c200 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	da0b      	bge.n	800c0fc <USBD_StdEPReq+0x19e>
 800c0e4:	7bbb      	ldrb	r3, [r7, #14]
 800c0e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c0ea:	4613      	mov	r3, r2
 800c0ec:	009b      	lsls	r3, r3, #2
 800c0ee:	4413      	add	r3, r2
 800c0f0:	009b      	lsls	r3, r3, #2
 800c0f2:	3310      	adds	r3, #16
 800c0f4:	687a      	ldr	r2, [r7, #4]
 800c0f6:	4413      	add	r3, r2
 800c0f8:	3304      	adds	r3, #4
 800c0fa:	e00b      	b.n	800c114 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c0fc:	7bbb      	ldrb	r3, [r7, #14]
 800c0fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c102:	4613      	mov	r3, r2
 800c104:	009b      	lsls	r3, r3, #2
 800c106:	4413      	add	r3, r2
 800c108:	009b      	lsls	r3, r3, #2
 800c10a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c10e:	687a      	ldr	r2, [r7, #4]
 800c110:	4413      	add	r3, r2
 800c112:	3304      	adds	r3, #4
 800c114:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	2200      	movs	r2, #0
 800c11a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	2202      	movs	r2, #2
 800c120:	4619      	mov	r1, r3
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f000 fc1d 	bl	800c962 <USBD_CtlSendData>
              break;
 800c128:	e06a      	b.n	800c200 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c12a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	da11      	bge.n	800c156 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c132:	7bbb      	ldrb	r3, [r7, #14]
 800c134:	f003 020f 	and.w	r2, r3, #15
 800c138:	6879      	ldr	r1, [r7, #4]
 800c13a:	4613      	mov	r3, r2
 800c13c:	009b      	lsls	r3, r3, #2
 800c13e:	4413      	add	r3, r2
 800c140:	009b      	lsls	r3, r3, #2
 800c142:	440b      	add	r3, r1
 800c144:	3324      	adds	r3, #36	; 0x24
 800c146:	881b      	ldrh	r3, [r3, #0]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d117      	bne.n	800c17c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c14c:	6839      	ldr	r1, [r7, #0]
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f000 fb96 	bl	800c880 <USBD_CtlError>
                  break;
 800c154:	e054      	b.n	800c200 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c156:	7bbb      	ldrb	r3, [r7, #14]
 800c158:	f003 020f 	and.w	r2, r3, #15
 800c15c:	6879      	ldr	r1, [r7, #4]
 800c15e:	4613      	mov	r3, r2
 800c160:	009b      	lsls	r3, r3, #2
 800c162:	4413      	add	r3, r2
 800c164:	009b      	lsls	r3, r3, #2
 800c166:	440b      	add	r3, r1
 800c168:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c16c:	881b      	ldrh	r3, [r3, #0]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d104      	bne.n	800c17c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c172:	6839      	ldr	r1, [r7, #0]
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f000 fb83 	bl	800c880 <USBD_CtlError>
                  break;
 800c17a:	e041      	b.n	800c200 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c17c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c180:	2b00      	cmp	r3, #0
 800c182:	da0b      	bge.n	800c19c <USBD_StdEPReq+0x23e>
 800c184:	7bbb      	ldrb	r3, [r7, #14]
 800c186:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c18a:	4613      	mov	r3, r2
 800c18c:	009b      	lsls	r3, r3, #2
 800c18e:	4413      	add	r3, r2
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	3310      	adds	r3, #16
 800c194:	687a      	ldr	r2, [r7, #4]
 800c196:	4413      	add	r3, r2
 800c198:	3304      	adds	r3, #4
 800c19a:	e00b      	b.n	800c1b4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c19c:	7bbb      	ldrb	r3, [r7, #14]
 800c19e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1a2:	4613      	mov	r3, r2
 800c1a4:	009b      	lsls	r3, r3, #2
 800c1a6:	4413      	add	r3, r2
 800c1a8:	009b      	lsls	r3, r3, #2
 800c1aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c1ae:	687a      	ldr	r2, [r7, #4]
 800c1b0:	4413      	add	r3, r2
 800c1b2:	3304      	adds	r3, #4
 800c1b4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c1b6:	7bbb      	ldrb	r3, [r7, #14]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d002      	beq.n	800c1c2 <USBD_StdEPReq+0x264>
 800c1bc:	7bbb      	ldrb	r3, [r7, #14]
 800c1be:	2b80      	cmp	r3, #128	; 0x80
 800c1c0:	d103      	bne.n	800c1ca <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	601a      	str	r2, [r3, #0]
 800c1c8:	e00e      	b.n	800c1e8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c1ca:	7bbb      	ldrb	r3, [r7, #14]
 800c1cc:	4619      	mov	r1, r3
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f003 fdbc 	bl	800fd4c <USBD_LL_IsStallEP>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d003      	beq.n	800c1e2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	2201      	movs	r2, #1
 800c1de:	601a      	str	r2, [r3, #0]
 800c1e0:	e002      	b.n	800c1e8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	2202      	movs	r2, #2
 800c1ec:	4619      	mov	r1, r3
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f000 fbb7 	bl	800c962 <USBD_CtlSendData>
              break;
 800c1f4:	e004      	b.n	800c200 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c1f6:	6839      	ldr	r1, [r7, #0]
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f000 fb41 	bl	800c880 <USBD_CtlError>
              break;
 800c1fe:	bf00      	nop
          }
          break;
 800c200:	e004      	b.n	800c20c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c202:	6839      	ldr	r1, [r7, #0]
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f000 fb3b 	bl	800c880 <USBD_CtlError>
          break;
 800c20a:	bf00      	nop
      }
      break;
 800c20c:	e004      	b.n	800c218 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c20e:	6839      	ldr	r1, [r7, #0]
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	f000 fb35 	bl	800c880 <USBD_CtlError>
      break;
 800c216:	bf00      	nop
  }

  return ret;
 800c218:	7bfb      	ldrb	r3, [r7, #15]
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3710      	adds	r7, #16
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}
	...

0800c224 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b084      	sub	sp, #16
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c22e:	2300      	movs	r3, #0
 800c230:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c232:	2300      	movs	r3, #0
 800c234:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c236:	2300      	movs	r3, #0
 800c238:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	885b      	ldrh	r3, [r3, #2]
 800c23e:	0a1b      	lsrs	r3, r3, #8
 800c240:	b29b      	uxth	r3, r3
 800c242:	3b01      	subs	r3, #1
 800c244:	2b06      	cmp	r3, #6
 800c246:	f200 8128 	bhi.w	800c49a <USBD_GetDescriptor+0x276>
 800c24a:	a201      	add	r2, pc, #4	; (adr r2, 800c250 <USBD_GetDescriptor+0x2c>)
 800c24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c250:	0800c26d 	.word	0x0800c26d
 800c254:	0800c285 	.word	0x0800c285
 800c258:	0800c2c5 	.word	0x0800c2c5
 800c25c:	0800c49b 	.word	0x0800c49b
 800c260:	0800c49b 	.word	0x0800c49b
 800c264:	0800c43b 	.word	0x0800c43b
 800c268:	0800c467 	.word	0x0800c467
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	687a      	ldr	r2, [r7, #4]
 800c276:	7c12      	ldrb	r2, [r2, #16]
 800c278:	f107 0108 	add.w	r1, r7, #8
 800c27c:	4610      	mov	r0, r2
 800c27e:	4798      	blx	r3
 800c280:	60f8      	str	r0, [r7, #12]
      break;
 800c282:	e112      	b.n	800c4aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	7c1b      	ldrb	r3, [r3, #16]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d10d      	bne.n	800c2a8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c294:	f107 0208 	add.w	r2, r7, #8
 800c298:	4610      	mov	r0, r2
 800c29a:	4798      	blx	r3
 800c29c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	3301      	adds	r3, #1
 800c2a2:	2202      	movs	r2, #2
 800c2a4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c2a6:	e100      	b.n	800c4aa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2b0:	f107 0208 	add.w	r2, r7, #8
 800c2b4:	4610      	mov	r0, r2
 800c2b6:	4798      	blx	r3
 800c2b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	3301      	adds	r3, #1
 800c2be:	2202      	movs	r2, #2
 800c2c0:	701a      	strb	r2, [r3, #0]
      break;
 800c2c2:	e0f2      	b.n	800c4aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	885b      	ldrh	r3, [r3, #2]
 800c2c8:	b2db      	uxtb	r3, r3
 800c2ca:	2b05      	cmp	r3, #5
 800c2cc:	f200 80ac 	bhi.w	800c428 <USBD_GetDescriptor+0x204>
 800c2d0:	a201      	add	r2, pc, #4	; (adr r2, 800c2d8 <USBD_GetDescriptor+0xb4>)
 800c2d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2d6:	bf00      	nop
 800c2d8:	0800c2f1 	.word	0x0800c2f1
 800c2dc:	0800c325 	.word	0x0800c325
 800c2e0:	0800c359 	.word	0x0800c359
 800c2e4:	0800c38d 	.word	0x0800c38d
 800c2e8:	0800c3c1 	.word	0x0800c3c1
 800c2ec:	0800c3f5 	.word	0x0800c3f5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2f6:	685b      	ldr	r3, [r3, #4]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d00b      	beq.n	800c314 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c302:	685b      	ldr	r3, [r3, #4]
 800c304:	687a      	ldr	r2, [r7, #4]
 800c306:	7c12      	ldrb	r2, [r2, #16]
 800c308:	f107 0108 	add.w	r1, r7, #8
 800c30c:	4610      	mov	r0, r2
 800c30e:	4798      	blx	r3
 800c310:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c312:	e091      	b.n	800c438 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c314:	6839      	ldr	r1, [r7, #0]
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f000 fab2 	bl	800c880 <USBD_CtlError>
            err++;
 800c31c:	7afb      	ldrb	r3, [r7, #11]
 800c31e:	3301      	adds	r3, #1
 800c320:	72fb      	strb	r3, [r7, #11]
          break;
 800c322:	e089      	b.n	800c438 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c32a:	689b      	ldr	r3, [r3, #8]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d00b      	beq.n	800c348 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c336:	689b      	ldr	r3, [r3, #8]
 800c338:	687a      	ldr	r2, [r7, #4]
 800c33a:	7c12      	ldrb	r2, [r2, #16]
 800c33c:	f107 0108 	add.w	r1, r7, #8
 800c340:	4610      	mov	r0, r2
 800c342:	4798      	blx	r3
 800c344:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c346:	e077      	b.n	800c438 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c348:	6839      	ldr	r1, [r7, #0]
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f000 fa98 	bl	800c880 <USBD_CtlError>
            err++;
 800c350:	7afb      	ldrb	r3, [r7, #11]
 800c352:	3301      	adds	r3, #1
 800c354:	72fb      	strb	r3, [r7, #11]
          break;
 800c356:	e06f      	b.n	800c438 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c35e:	68db      	ldr	r3, [r3, #12]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d00b      	beq.n	800c37c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c36a:	68db      	ldr	r3, [r3, #12]
 800c36c:	687a      	ldr	r2, [r7, #4]
 800c36e:	7c12      	ldrb	r2, [r2, #16]
 800c370:	f107 0108 	add.w	r1, r7, #8
 800c374:	4610      	mov	r0, r2
 800c376:	4798      	blx	r3
 800c378:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c37a:	e05d      	b.n	800c438 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c37c:	6839      	ldr	r1, [r7, #0]
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f000 fa7e 	bl	800c880 <USBD_CtlError>
            err++;
 800c384:	7afb      	ldrb	r3, [r7, #11]
 800c386:	3301      	adds	r3, #1
 800c388:	72fb      	strb	r3, [r7, #11]
          break;
 800c38a:	e055      	b.n	800c438 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c392:	691b      	ldr	r3, [r3, #16]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d00b      	beq.n	800c3b0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c39e:	691b      	ldr	r3, [r3, #16]
 800c3a0:	687a      	ldr	r2, [r7, #4]
 800c3a2:	7c12      	ldrb	r2, [r2, #16]
 800c3a4:	f107 0108 	add.w	r1, r7, #8
 800c3a8:	4610      	mov	r0, r2
 800c3aa:	4798      	blx	r3
 800c3ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3ae:	e043      	b.n	800c438 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3b0:	6839      	ldr	r1, [r7, #0]
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f000 fa64 	bl	800c880 <USBD_CtlError>
            err++;
 800c3b8:	7afb      	ldrb	r3, [r7, #11]
 800c3ba:	3301      	adds	r3, #1
 800c3bc:	72fb      	strb	r3, [r7, #11]
          break;
 800c3be:	e03b      	b.n	800c438 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3c6:	695b      	ldr	r3, [r3, #20]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d00b      	beq.n	800c3e4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3d2:	695b      	ldr	r3, [r3, #20]
 800c3d4:	687a      	ldr	r2, [r7, #4]
 800c3d6:	7c12      	ldrb	r2, [r2, #16]
 800c3d8:	f107 0108 	add.w	r1, r7, #8
 800c3dc:	4610      	mov	r0, r2
 800c3de:	4798      	blx	r3
 800c3e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3e2:	e029      	b.n	800c438 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3e4:	6839      	ldr	r1, [r7, #0]
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f000 fa4a 	bl	800c880 <USBD_CtlError>
            err++;
 800c3ec:	7afb      	ldrb	r3, [r7, #11]
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	72fb      	strb	r3, [r7, #11]
          break;
 800c3f2:	e021      	b.n	800c438 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3fa:	699b      	ldr	r3, [r3, #24]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d00b      	beq.n	800c418 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c406:	699b      	ldr	r3, [r3, #24]
 800c408:	687a      	ldr	r2, [r7, #4]
 800c40a:	7c12      	ldrb	r2, [r2, #16]
 800c40c:	f107 0108 	add.w	r1, r7, #8
 800c410:	4610      	mov	r0, r2
 800c412:	4798      	blx	r3
 800c414:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c416:	e00f      	b.n	800c438 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c418:	6839      	ldr	r1, [r7, #0]
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f000 fa30 	bl	800c880 <USBD_CtlError>
            err++;
 800c420:	7afb      	ldrb	r3, [r7, #11]
 800c422:	3301      	adds	r3, #1
 800c424:	72fb      	strb	r3, [r7, #11]
          break;
 800c426:	e007      	b.n	800c438 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c428:	6839      	ldr	r1, [r7, #0]
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f000 fa28 	bl	800c880 <USBD_CtlError>
          err++;
 800c430:	7afb      	ldrb	r3, [r7, #11]
 800c432:	3301      	adds	r3, #1
 800c434:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c436:	bf00      	nop
      }
      break;
 800c438:	e037      	b.n	800c4aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	7c1b      	ldrb	r3, [r3, #16]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d109      	bne.n	800c456 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c44a:	f107 0208 	add.w	r2, r7, #8
 800c44e:	4610      	mov	r0, r2
 800c450:	4798      	blx	r3
 800c452:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c454:	e029      	b.n	800c4aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c456:	6839      	ldr	r1, [r7, #0]
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f000 fa11 	bl	800c880 <USBD_CtlError>
        err++;
 800c45e:	7afb      	ldrb	r3, [r7, #11]
 800c460:	3301      	adds	r3, #1
 800c462:	72fb      	strb	r3, [r7, #11]
      break;
 800c464:	e021      	b.n	800c4aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	7c1b      	ldrb	r3, [r3, #16]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d10d      	bne.n	800c48a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c476:	f107 0208 	add.w	r2, r7, #8
 800c47a:	4610      	mov	r0, r2
 800c47c:	4798      	blx	r3
 800c47e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	3301      	adds	r3, #1
 800c484:	2207      	movs	r2, #7
 800c486:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c488:	e00f      	b.n	800c4aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c48a:	6839      	ldr	r1, [r7, #0]
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f000 f9f7 	bl	800c880 <USBD_CtlError>
        err++;
 800c492:	7afb      	ldrb	r3, [r7, #11]
 800c494:	3301      	adds	r3, #1
 800c496:	72fb      	strb	r3, [r7, #11]
      break;
 800c498:	e007      	b.n	800c4aa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c49a:	6839      	ldr	r1, [r7, #0]
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f000 f9ef 	bl	800c880 <USBD_CtlError>
      err++;
 800c4a2:	7afb      	ldrb	r3, [r7, #11]
 800c4a4:	3301      	adds	r3, #1
 800c4a6:	72fb      	strb	r3, [r7, #11]
      break;
 800c4a8:	bf00      	nop
  }

  if (err != 0U)
 800c4aa:	7afb      	ldrb	r3, [r7, #11]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d11e      	bne.n	800c4ee <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	88db      	ldrh	r3, [r3, #6]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d016      	beq.n	800c4e6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c4b8:	893b      	ldrh	r3, [r7, #8]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d00e      	beq.n	800c4dc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	88da      	ldrh	r2, [r3, #6]
 800c4c2:	893b      	ldrh	r3, [r7, #8]
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	bf28      	it	cs
 800c4c8:	4613      	movcs	r3, r2
 800c4ca:	b29b      	uxth	r3, r3
 800c4cc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c4ce:	893b      	ldrh	r3, [r7, #8]
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	68f9      	ldr	r1, [r7, #12]
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f000 fa44 	bl	800c962 <USBD_CtlSendData>
 800c4da:	e009      	b.n	800c4f0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c4dc:	6839      	ldr	r1, [r7, #0]
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f000 f9ce 	bl	800c880 <USBD_CtlError>
 800c4e4:	e004      	b.n	800c4f0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f000 fa95 	bl	800ca16 <USBD_CtlSendStatus>
 800c4ec:	e000      	b.n	800c4f0 <USBD_GetDescriptor+0x2cc>
    return;
 800c4ee:	bf00      	nop
  }
}
 800c4f0:	3710      	adds	r7, #16
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}
 800c4f6:	bf00      	nop

0800c4f8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b084      	sub	sp, #16
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	889b      	ldrh	r3, [r3, #4]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d131      	bne.n	800c56e <USBD_SetAddress+0x76>
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	88db      	ldrh	r3, [r3, #6]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d12d      	bne.n	800c56e <USBD_SetAddress+0x76>
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	885b      	ldrh	r3, [r3, #2]
 800c516:	2b7f      	cmp	r3, #127	; 0x7f
 800c518:	d829      	bhi.n	800c56e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	885b      	ldrh	r3, [r3, #2]
 800c51e:	b2db      	uxtb	r3, r3
 800c520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c524:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c52c:	b2db      	uxtb	r3, r3
 800c52e:	2b03      	cmp	r3, #3
 800c530:	d104      	bne.n	800c53c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c532:	6839      	ldr	r1, [r7, #0]
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f000 f9a3 	bl	800c880 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c53a:	e01d      	b.n	800c578 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	7bfa      	ldrb	r2, [r7, #15]
 800c540:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c544:	7bfb      	ldrb	r3, [r7, #15]
 800c546:	4619      	mov	r1, r3
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f003 fc2b 	bl	800fda4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f000 fa61 	bl	800ca16 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c554:	7bfb      	ldrb	r3, [r7, #15]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d004      	beq.n	800c564 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2202      	movs	r2, #2
 800c55e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c562:	e009      	b.n	800c578 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2201      	movs	r2, #1
 800c568:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c56c:	e004      	b.n	800c578 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c56e:	6839      	ldr	r1, [r7, #0]
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f000 f985 	bl	800c880 <USBD_CtlError>
  }
}
 800c576:	bf00      	nop
 800c578:	bf00      	nop
 800c57a:	3710      	adds	r7, #16
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}

0800c580 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b084      	sub	sp, #16
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
 800c588:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c58a:	2300      	movs	r3, #0
 800c58c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	885b      	ldrh	r3, [r3, #2]
 800c592:	b2da      	uxtb	r2, r3
 800c594:	4b4c      	ldr	r3, [pc, #304]	; (800c6c8 <USBD_SetConfig+0x148>)
 800c596:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c598:	4b4b      	ldr	r3, [pc, #300]	; (800c6c8 <USBD_SetConfig+0x148>)
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	2b01      	cmp	r3, #1
 800c59e:	d905      	bls.n	800c5ac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c5a0:	6839      	ldr	r1, [r7, #0]
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f000 f96c 	bl	800c880 <USBD_CtlError>
    return USBD_FAIL;
 800c5a8:	2303      	movs	r3, #3
 800c5aa:	e088      	b.n	800c6be <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5b2:	b2db      	uxtb	r3, r3
 800c5b4:	2b02      	cmp	r3, #2
 800c5b6:	d002      	beq.n	800c5be <USBD_SetConfig+0x3e>
 800c5b8:	2b03      	cmp	r3, #3
 800c5ba:	d025      	beq.n	800c608 <USBD_SetConfig+0x88>
 800c5bc:	e071      	b.n	800c6a2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c5be:	4b42      	ldr	r3, [pc, #264]	; (800c6c8 <USBD_SetConfig+0x148>)
 800c5c0:	781b      	ldrb	r3, [r3, #0]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d01c      	beq.n	800c600 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c5c6:	4b40      	ldr	r3, [pc, #256]	; (800c6c8 <USBD_SetConfig+0x148>)
 800c5c8:	781b      	ldrb	r3, [r3, #0]
 800c5ca:	461a      	mov	r2, r3
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c5d0:	4b3d      	ldr	r3, [pc, #244]	; (800c6c8 <USBD_SetConfig+0x148>)
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	4619      	mov	r1, r3
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f7ff f948 	bl	800b86c <USBD_SetClassConfig>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c5e0:	7bfb      	ldrb	r3, [r7, #15]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d004      	beq.n	800c5f0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c5e6:	6839      	ldr	r1, [r7, #0]
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f000 f949 	bl	800c880 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c5ee:	e065      	b.n	800c6bc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f000 fa10 	bl	800ca16 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2203      	movs	r2, #3
 800c5fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c5fe:	e05d      	b.n	800c6bc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f000 fa08 	bl	800ca16 <USBD_CtlSendStatus>
      break;
 800c606:	e059      	b.n	800c6bc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c608:	4b2f      	ldr	r3, [pc, #188]	; (800c6c8 <USBD_SetConfig+0x148>)
 800c60a:	781b      	ldrb	r3, [r3, #0]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d112      	bne.n	800c636 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2202      	movs	r2, #2
 800c614:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c618:	4b2b      	ldr	r3, [pc, #172]	; (800c6c8 <USBD_SetConfig+0x148>)
 800c61a:	781b      	ldrb	r3, [r3, #0]
 800c61c:	461a      	mov	r2, r3
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c622:	4b29      	ldr	r3, [pc, #164]	; (800c6c8 <USBD_SetConfig+0x148>)
 800c624:	781b      	ldrb	r3, [r3, #0]
 800c626:	4619      	mov	r1, r3
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f7ff f93b 	bl	800b8a4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f000 f9f1 	bl	800ca16 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c634:	e042      	b.n	800c6bc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c636:	4b24      	ldr	r3, [pc, #144]	; (800c6c8 <USBD_SetConfig+0x148>)
 800c638:	781b      	ldrb	r3, [r3, #0]
 800c63a:	461a      	mov	r2, r3
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	685b      	ldr	r3, [r3, #4]
 800c640:	429a      	cmp	r2, r3
 800c642:	d02a      	beq.n	800c69a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	685b      	ldr	r3, [r3, #4]
 800c648:	b2db      	uxtb	r3, r3
 800c64a:	4619      	mov	r1, r3
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f7ff f929 	bl	800b8a4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c652:	4b1d      	ldr	r3, [pc, #116]	; (800c6c8 <USBD_SetConfig+0x148>)
 800c654:	781b      	ldrb	r3, [r3, #0]
 800c656:	461a      	mov	r2, r3
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c65c:	4b1a      	ldr	r3, [pc, #104]	; (800c6c8 <USBD_SetConfig+0x148>)
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	4619      	mov	r1, r3
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f7ff f902 	bl	800b86c <USBD_SetClassConfig>
 800c668:	4603      	mov	r3, r0
 800c66a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c66c:	7bfb      	ldrb	r3, [r7, #15]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d00f      	beq.n	800c692 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c672:	6839      	ldr	r1, [r7, #0]
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f000 f903 	bl	800c880 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	685b      	ldr	r3, [r3, #4]
 800c67e:	b2db      	uxtb	r3, r3
 800c680:	4619      	mov	r1, r3
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f7ff f90e 	bl	800b8a4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2202      	movs	r2, #2
 800c68c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c690:	e014      	b.n	800c6bc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f000 f9bf 	bl	800ca16 <USBD_CtlSendStatus>
      break;
 800c698:	e010      	b.n	800c6bc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f000 f9bb 	bl	800ca16 <USBD_CtlSendStatus>
      break;
 800c6a0:	e00c      	b.n	800c6bc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c6a2:	6839      	ldr	r1, [r7, #0]
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f000 f8eb 	bl	800c880 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c6aa:	4b07      	ldr	r3, [pc, #28]	; (800c6c8 <USBD_SetConfig+0x148>)
 800c6ac:	781b      	ldrb	r3, [r3, #0]
 800c6ae:	4619      	mov	r1, r3
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f7ff f8f7 	bl	800b8a4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c6b6:	2303      	movs	r3, #3
 800c6b8:	73fb      	strb	r3, [r7, #15]
      break;
 800c6ba:	bf00      	nop
  }

  return ret;
 800c6bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3710      	adds	r7, #16
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}
 800c6c6:	bf00      	nop
 800c6c8:	200008d1 	.word	0x200008d1

0800c6cc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b082      	sub	sp, #8
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
 800c6d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	88db      	ldrh	r3, [r3, #6]
 800c6da:	2b01      	cmp	r3, #1
 800c6dc:	d004      	beq.n	800c6e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c6de:	6839      	ldr	r1, [r7, #0]
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f000 f8cd 	bl	800c880 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c6e6:	e023      	b.n	800c730 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6ee:	b2db      	uxtb	r3, r3
 800c6f0:	2b02      	cmp	r3, #2
 800c6f2:	dc02      	bgt.n	800c6fa <USBD_GetConfig+0x2e>
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	dc03      	bgt.n	800c700 <USBD_GetConfig+0x34>
 800c6f8:	e015      	b.n	800c726 <USBD_GetConfig+0x5a>
 800c6fa:	2b03      	cmp	r3, #3
 800c6fc:	d00b      	beq.n	800c716 <USBD_GetConfig+0x4a>
 800c6fe:	e012      	b.n	800c726 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2200      	movs	r2, #0
 800c704:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	3308      	adds	r3, #8
 800c70a:	2201      	movs	r2, #1
 800c70c:	4619      	mov	r1, r3
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f000 f927 	bl	800c962 <USBD_CtlSendData>
        break;
 800c714:	e00c      	b.n	800c730 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	3304      	adds	r3, #4
 800c71a:	2201      	movs	r2, #1
 800c71c:	4619      	mov	r1, r3
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f000 f91f 	bl	800c962 <USBD_CtlSendData>
        break;
 800c724:	e004      	b.n	800c730 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c726:	6839      	ldr	r1, [r7, #0]
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f000 f8a9 	bl	800c880 <USBD_CtlError>
        break;
 800c72e:	bf00      	nop
}
 800c730:	bf00      	nop
 800c732:	3708      	adds	r7, #8
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}

0800c738 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b082      	sub	sp, #8
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c748:	b2db      	uxtb	r3, r3
 800c74a:	3b01      	subs	r3, #1
 800c74c:	2b02      	cmp	r3, #2
 800c74e:	d81e      	bhi.n	800c78e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	88db      	ldrh	r3, [r3, #6]
 800c754:	2b02      	cmp	r3, #2
 800c756:	d004      	beq.n	800c762 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c758:	6839      	ldr	r1, [r7, #0]
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f000 f890 	bl	800c880 <USBD_CtlError>
        break;
 800c760:	e01a      	b.n	800c798 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2201      	movs	r2, #1
 800c766:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d005      	beq.n	800c77e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	68db      	ldr	r3, [r3, #12]
 800c776:	f043 0202 	orr.w	r2, r3, #2
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	330c      	adds	r3, #12
 800c782:	2202      	movs	r2, #2
 800c784:	4619      	mov	r1, r3
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f000 f8eb 	bl	800c962 <USBD_CtlSendData>
      break;
 800c78c:	e004      	b.n	800c798 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c78e:	6839      	ldr	r1, [r7, #0]
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f000 f875 	bl	800c880 <USBD_CtlError>
      break;
 800c796:	bf00      	nop
  }
}
 800c798:	bf00      	nop
 800c79a:	3708      	adds	r7, #8
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}

0800c7a0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
 800c7a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	885b      	ldrh	r3, [r3, #2]
 800c7ae:	2b01      	cmp	r3, #1
 800c7b0:	d106      	bne.n	800c7c0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2201      	movs	r2, #1
 800c7b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f000 f92b 	bl	800ca16 <USBD_CtlSendStatus>
  }
}
 800c7c0:	bf00      	nop
 800c7c2:	3708      	adds	r7, #8
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}

0800c7c8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7d8:	b2db      	uxtb	r3, r3
 800c7da:	3b01      	subs	r3, #1
 800c7dc:	2b02      	cmp	r3, #2
 800c7de:	d80b      	bhi.n	800c7f8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	885b      	ldrh	r3, [r3, #2]
 800c7e4:	2b01      	cmp	r3, #1
 800c7e6:	d10c      	bne.n	800c802 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f000 f910 	bl	800ca16 <USBD_CtlSendStatus>
      }
      break;
 800c7f6:	e004      	b.n	800c802 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c7f8:	6839      	ldr	r1, [r7, #0]
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f000 f840 	bl	800c880 <USBD_CtlError>
      break;
 800c800:	e000      	b.n	800c804 <USBD_ClrFeature+0x3c>
      break;
 800c802:	bf00      	nop
  }
}
 800c804:	bf00      	nop
 800c806:	3708      	adds	r7, #8
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}

0800c80c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b084      	sub	sp, #16
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
 800c814:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	781a      	ldrb	r2, [r3, #0]
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	3301      	adds	r3, #1
 800c826:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	781a      	ldrb	r2, [r3, #0]
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	3301      	adds	r3, #1
 800c834:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c836:	68f8      	ldr	r0, [r7, #12]
 800c838:	f7ff fabb 	bl	800bdb2 <SWAPBYTE>
 800c83c:	4603      	mov	r3, r0
 800c83e:	461a      	mov	r2, r3
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	3301      	adds	r3, #1
 800c848:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	3301      	adds	r3, #1
 800c84e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c850:	68f8      	ldr	r0, [r7, #12]
 800c852:	f7ff faae 	bl	800bdb2 <SWAPBYTE>
 800c856:	4603      	mov	r3, r0
 800c858:	461a      	mov	r2, r3
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	3301      	adds	r3, #1
 800c862:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	3301      	adds	r3, #1
 800c868:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c86a:	68f8      	ldr	r0, [r7, #12]
 800c86c:	f7ff faa1 	bl	800bdb2 <SWAPBYTE>
 800c870:	4603      	mov	r3, r0
 800c872:	461a      	mov	r2, r3
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	80da      	strh	r2, [r3, #6]
}
 800c878:	bf00      	nop
 800c87a:	3710      	adds	r7, #16
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}

0800c880 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b082      	sub	sp, #8
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c88a:	2180      	movs	r1, #128	; 0x80
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f003 fa1f 	bl	800fcd0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c892:	2100      	movs	r1, #0
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f003 fa1b 	bl	800fcd0 <USBD_LL_StallEP>
}
 800c89a:	bf00      	nop
 800c89c:	3708      	adds	r7, #8
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}

0800c8a2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c8a2:	b580      	push	{r7, lr}
 800c8a4:	b086      	sub	sp, #24
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	60f8      	str	r0, [r7, #12]
 800c8aa:	60b9      	str	r1, [r7, #8]
 800c8ac:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d036      	beq.n	800c926 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c8bc:	6938      	ldr	r0, [r7, #16]
 800c8be:	f000 f836 	bl	800c92e <USBD_GetLen>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	3301      	adds	r3, #1
 800c8c6:	b29b      	uxth	r3, r3
 800c8c8:	005b      	lsls	r3, r3, #1
 800c8ca:	b29a      	uxth	r2, r3
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c8d0:	7dfb      	ldrb	r3, [r7, #23]
 800c8d2:	68ba      	ldr	r2, [r7, #8]
 800c8d4:	4413      	add	r3, r2
 800c8d6:	687a      	ldr	r2, [r7, #4]
 800c8d8:	7812      	ldrb	r2, [r2, #0]
 800c8da:	701a      	strb	r2, [r3, #0]
  idx++;
 800c8dc:	7dfb      	ldrb	r3, [r7, #23]
 800c8de:	3301      	adds	r3, #1
 800c8e0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c8e2:	7dfb      	ldrb	r3, [r7, #23]
 800c8e4:	68ba      	ldr	r2, [r7, #8]
 800c8e6:	4413      	add	r3, r2
 800c8e8:	2203      	movs	r2, #3
 800c8ea:	701a      	strb	r2, [r3, #0]
  idx++;
 800c8ec:	7dfb      	ldrb	r3, [r7, #23]
 800c8ee:	3301      	adds	r3, #1
 800c8f0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c8f2:	e013      	b.n	800c91c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c8f4:	7dfb      	ldrb	r3, [r7, #23]
 800c8f6:	68ba      	ldr	r2, [r7, #8]
 800c8f8:	4413      	add	r3, r2
 800c8fa:	693a      	ldr	r2, [r7, #16]
 800c8fc:	7812      	ldrb	r2, [r2, #0]
 800c8fe:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	3301      	adds	r3, #1
 800c904:	613b      	str	r3, [r7, #16]
    idx++;
 800c906:	7dfb      	ldrb	r3, [r7, #23]
 800c908:	3301      	adds	r3, #1
 800c90a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c90c:	7dfb      	ldrb	r3, [r7, #23]
 800c90e:	68ba      	ldr	r2, [r7, #8]
 800c910:	4413      	add	r3, r2
 800c912:	2200      	movs	r2, #0
 800c914:	701a      	strb	r2, [r3, #0]
    idx++;
 800c916:	7dfb      	ldrb	r3, [r7, #23]
 800c918:	3301      	adds	r3, #1
 800c91a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	781b      	ldrb	r3, [r3, #0]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d1e7      	bne.n	800c8f4 <USBD_GetString+0x52>
 800c924:	e000      	b.n	800c928 <USBD_GetString+0x86>
    return;
 800c926:	bf00      	nop
  }
}
 800c928:	3718      	adds	r7, #24
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}

0800c92e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c92e:	b480      	push	{r7}
 800c930:	b085      	sub	sp, #20
 800c932:	af00      	add	r7, sp, #0
 800c934:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c936:	2300      	movs	r3, #0
 800c938:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c93e:	e005      	b.n	800c94c <USBD_GetLen+0x1e>
  {
    len++;
 800c940:	7bfb      	ldrb	r3, [r7, #15]
 800c942:	3301      	adds	r3, #1
 800c944:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	3301      	adds	r3, #1
 800c94a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	781b      	ldrb	r3, [r3, #0]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d1f5      	bne.n	800c940 <USBD_GetLen+0x12>
  }

  return len;
 800c954:	7bfb      	ldrb	r3, [r7, #15]
}
 800c956:	4618      	mov	r0, r3
 800c958:	3714      	adds	r7, #20
 800c95a:	46bd      	mov	sp, r7
 800c95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c960:	4770      	bx	lr

0800c962 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c962:	b580      	push	{r7, lr}
 800c964:	b084      	sub	sp, #16
 800c966:	af00      	add	r7, sp, #0
 800c968:	60f8      	str	r0, [r7, #12]
 800c96a:	60b9      	str	r1, [r7, #8]
 800c96c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	2202      	movs	r2, #2
 800c972:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	687a      	ldr	r2, [r7, #4]
 800c97a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	687a      	ldr	r2, [r7, #4]
 800c980:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	68ba      	ldr	r2, [r7, #8]
 800c986:	2100      	movs	r1, #0
 800c988:	68f8      	ldr	r0, [r7, #12]
 800c98a:	f003 fa2a 	bl	800fde2 <USBD_LL_Transmit>

  return USBD_OK;
 800c98e:	2300      	movs	r3, #0
}
 800c990:	4618      	mov	r0, r3
 800c992:	3710      	adds	r7, #16
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}

0800c998 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b084      	sub	sp, #16
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	60f8      	str	r0, [r7, #12]
 800c9a0:	60b9      	str	r1, [r7, #8]
 800c9a2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	68ba      	ldr	r2, [r7, #8]
 800c9a8:	2100      	movs	r1, #0
 800c9aa:	68f8      	ldr	r0, [r7, #12]
 800c9ac:	f003 fa19 	bl	800fde2 <USBD_LL_Transmit>

  return USBD_OK;
 800c9b0:	2300      	movs	r3, #0
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3710      	adds	r7, #16
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}

0800c9ba <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c9ba:	b580      	push	{r7, lr}
 800c9bc:	b084      	sub	sp, #16
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	60f8      	str	r0, [r7, #12]
 800c9c2:	60b9      	str	r1, [r7, #8]
 800c9c4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	2203      	movs	r2, #3
 800c9ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	687a      	ldr	r2, [r7, #4]
 800c9d2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	68ba      	ldr	r2, [r7, #8]
 800c9e2:	2100      	movs	r1, #0
 800c9e4:	68f8      	ldr	r0, [r7, #12]
 800c9e6:	f003 fa1d 	bl	800fe24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c9ea:	2300      	movs	r3, #0
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	3710      	adds	r7, #16
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}

0800c9f4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b084      	sub	sp, #16
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	60f8      	str	r0, [r7, #12]
 800c9fc:	60b9      	str	r1, [r7, #8]
 800c9fe:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	68ba      	ldr	r2, [r7, #8]
 800ca04:	2100      	movs	r1, #0
 800ca06:	68f8      	ldr	r0, [r7, #12]
 800ca08:	f003 fa0c 	bl	800fe24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca0c:	2300      	movs	r3, #0
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3710      	adds	r7, #16
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}

0800ca16 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ca16:	b580      	push	{r7, lr}
 800ca18:	b082      	sub	sp, #8
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2204      	movs	r2, #4
 800ca22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ca26:	2300      	movs	r3, #0
 800ca28:	2200      	movs	r2, #0
 800ca2a:	2100      	movs	r1, #0
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f003 f9d8 	bl	800fde2 <USBD_LL_Transmit>

  return USBD_OK;
 800ca32:	2300      	movs	r3, #0
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	3708      	adds	r7, #8
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}

0800ca3c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b082      	sub	sp, #8
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2205      	movs	r2, #5
 800ca48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	2200      	movs	r2, #0
 800ca50:	2100      	movs	r1, #0
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f003 f9e6 	bl	800fe24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca58:	2300      	movs	r3, #0
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3708      	adds	r7, #8
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}
	...

0800ca64 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b084      	sub	sp, #16
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ca6e:	79fb      	ldrb	r3, [r7, #7]
 800ca70:	4a08      	ldr	r2, [pc, #32]	; (800ca94 <disk_status+0x30>)
 800ca72:	009b      	lsls	r3, r3, #2
 800ca74:	4413      	add	r3, r2
 800ca76:	685b      	ldr	r3, [r3, #4]
 800ca78:	685b      	ldr	r3, [r3, #4]
 800ca7a:	79fa      	ldrb	r2, [r7, #7]
 800ca7c:	4905      	ldr	r1, [pc, #20]	; (800ca94 <disk_status+0x30>)
 800ca7e:	440a      	add	r2, r1
 800ca80:	7a12      	ldrb	r2, [r2, #8]
 800ca82:	4610      	mov	r0, r2
 800ca84:	4798      	blx	r3
 800ca86:	4603      	mov	r3, r0
 800ca88:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ca8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	3710      	adds	r7, #16
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}
 800ca94:	200008fc 	.word	0x200008fc

0800ca98 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b084      	sub	sp, #16
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	4603      	mov	r3, r0
 800caa0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800caa2:	2300      	movs	r3, #0
 800caa4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800caa6:	79fb      	ldrb	r3, [r7, #7]
 800caa8:	4a0d      	ldr	r2, [pc, #52]	; (800cae0 <disk_initialize+0x48>)
 800caaa:	5cd3      	ldrb	r3, [r2, r3]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d111      	bne.n	800cad4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800cab0:	79fb      	ldrb	r3, [r7, #7]
 800cab2:	4a0b      	ldr	r2, [pc, #44]	; (800cae0 <disk_initialize+0x48>)
 800cab4:	2101      	movs	r1, #1
 800cab6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cab8:	79fb      	ldrb	r3, [r7, #7]
 800caba:	4a09      	ldr	r2, [pc, #36]	; (800cae0 <disk_initialize+0x48>)
 800cabc:	009b      	lsls	r3, r3, #2
 800cabe:	4413      	add	r3, r2
 800cac0:	685b      	ldr	r3, [r3, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	79fa      	ldrb	r2, [r7, #7]
 800cac6:	4906      	ldr	r1, [pc, #24]	; (800cae0 <disk_initialize+0x48>)
 800cac8:	440a      	add	r2, r1
 800caca:	7a12      	ldrb	r2, [r2, #8]
 800cacc:	4610      	mov	r0, r2
 800cace:	4798      	blx	r3
 800cad0:	4603      	mov	r3, r0
 800cad2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800cad4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3710      	adds	r7, #16
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}
 800cade:	bf00      	nop
 800cae0:	200008fc 	.word	0x200008fc

0800cae4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cae4:	b590      	push	{r4, r7, lr}
 800cae6:	b087      	sub	sp, #28
 800cae8:	af00      	add	r7, sp, #0
 800caea:	60b9      	str	r1, [r7, #8]
 800caec:	607a      	str	r2, [r7, #4]
 800caee:	603b      	str	r3, [r7, #0]
 800caf0:	4603      	mov	r3, r0
 800caf2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800caf4:	7bfb      	ldrb	r3, [r7, #15]
 800caf6:	4a0a      	ldr	r2, [pc, #40]	; (800cb20 <disk_read+0x3c>)
 800caf8:	009b      	lsls	r3, r3, #2
 800cafa:	4413      	add	r3, r2
 800cafc:	685b      	ldr	r3, [r3, #4]
 800cafe:	689c      	ldr	r4, [r3, #8]
 800cb00:	7bfb      	ldrb	r3, [r7, #15]
 800cb02:	4a07      	ldr	r2, [pc, #28]	; (800cb20 <disk_read+0x3c>)
 800cb04:	4413      	add	r3, r2
 800cb06:	7a18      	ldrb	r0, [r3, #8]
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	687a      	ldr	r2, [r7, #4]
 800cb0c:	68b9      	ldr	r1, [r7, #8]
 800cb0e:	47a0      	blx	r4
 800cb10:	4603      	mov	r3, r0
 800cb12:	75fb      	strb	r3, [r7, #23]
  return res;
 800cb14:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	371c      	adds	r7, #28
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd90      	pop	{r4, r7, pc}
 800cb1e:	bf00      	nop
 800cb20:	200008fc 	.word	0x200008fc

0800cb24 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cb24:	b590      	push	{r4, r7, lr}
 800cb26:	b087      	sub	sp, #28
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	60b9      	str	r1, [r7, #8]
 800cb2c:	607a      	str	r2, [r7, #4]
 800cb2e:	603b      	str	r3, [r7, #0]
 800cb30:	4603      	mov	r3, r0
 800cb32:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cb34:	7bfb      	ldrb	r3, [r7, #15]
 800cb36:	4a0a      	ldr	r2, [pc, #40]	; (800cb60 <disk_write+0x3c>)
 800cb38:	009b      	lsls	r3, r3, #2
 800cb3a:	4413      	add	r3, r2
 800cb3c:	685b      	ldr	r3, [r3, #4]
 800cb3e:	68dc      	ldr	r4, [r3, #12]
 800cb40:	7bfb      	ldrb	r3, [r7, #15]
 800cb42:	4a07      	ldr	r2, [pc, #28]	; (800cb60 <disk_write+0x3c>)
 800cb44:	4413      	add	r3, r2
 800cb46:	7a18      	ldrb	r0, [r3, #8]
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	687a      	ldr	r2, [r7, #4]
 800cb4c:	68b9      	ldr	r1, [r7, #8]
 800cb4e:	47a0      	blx	r4
 800cb50:	4603      	mov	r3, r0
 800cb52:	75fb      	strb	r3, [r7, #23]
  return res;
 800cb54:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	371c      	adds	r7, #28
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd90      	pop	{r4, r7, pc}
 800cb5e:	bf00      	nop
 800cb60:	200008fc 	.word	0x200008fc

0800cb64 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b084      	sub	sp, #16
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	603a      	str	r2, [r7, #0]
 800cb6e:	71fb      	strb	r3, [r7, #7]
 800cb70:	460b      	mov	r3, r1
 800cb72:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cb74:	79fb      	ldrb	r3, [r7, #7]
 800cb76:	4a09      	ldr	r2, [pc, #36]	; (800cb9c <disk_ioctl+0x38>)
 800cb78:	009b      	lsls	r3, r3, #2
 800cb7a:	4413      	add	r3, r2
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	691b      	ldr	r3, [r3, #16]
 800cb80:	79fa      	ldrb	r2, [r7, #7]
 800cb82:	4906      	ldr	r1, [pc, #24]	; (800cb9c <disk_ioctl+0x38>)
 800cb84:	440a      	add	r2, r1
 800cb86:	7a10      	ldrb	r0, [r2, #8]
 800cb88:	79b9      	ldrb	r1, [r7, #6]
 800cb8a:	683a      	ldr	r2, [r7, #0]
 800cb8c:	4798      	blx	r3
 800cb8e:	4603      	mov	r3, r0
 800cb90:	73fb      	strb	r3, [r7, #15]
  return res;
 800cb92:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	3710      	adds	r7, #16
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}
 800cb9c:	200008fc 	.word	0x200008fc

0800cba0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cba0:	b480      	push	{r7}
 800cba2:	b085      	sub	sp, #20
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	3301      	adds	r3, #1
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cbb0:	89fb      	ldrh	r3, [r7, #14]
 800cbb2:	021b      	lsls	r3, r3, #8
 800cbb4:	b21a      	sxth	r2, r3
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	b21b      	sxth	r3, r3
 800cbbc:	4313      	orrs	r3, r2
 800cbbe:	b21b      	sxth	r3, r3
 800cbc0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800cbc2:	89fb      	ldrh	r3, [r7, #14]
}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3714      	adds	r7, #20
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbce:	4770      	bx	lr

0800cbd0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800cbd0:	b480      	push	{r7}
 800cbd2:	b085      	sub	sp, #20
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	3303      	adds	r3, #3
 800cbdc:	781b      	ldrb	r3, [r3, #0]
 800cbde:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	021b      	lsls	r3, r3, #8
 800cbe4:	687a      	ldr	r2, [r7, #4]
 800cbe6:	3202      	adds	r2, #2
 800cbe8:	7812      	ldrb	r2, [r2, #0]
 800cbea:	4313      	orrs	r3, r2
 800cbec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	021b      	lsls	r3, r3, #8
 800cbf2:	687a      	ldr	r2, [r7, #4]
 800cbf4:	3201      	adds	r2, #1
 800cbf6:	7812      	ldrb	r2, [r2, #0]
 800cbf8:	4313      	orrs	r3, r2
 800cbfa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	021b      	lsls	r3, r3, #8
 800cc00:	687a      	ldr	r2, [r7, #4]
 800cc02:	7812      	ldrb	r2, [r2, #0]
 800cc04:	4313      	orrs	r3, r2
 800cc06:	60fb      	str	r3, [r7, #12]
	return rv;
 800cc08:	68fb      	ldr	r3, [r7, #12]
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	3714      	adds	r7, #20
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc14:	4770      	bx	lr

0800cc16 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cc16:	b480      	push	{r7}
 800cc18:	b083      	sub	sp, #12
 800cc1a:	af00      	add	r7, sp, #0
 800cc1c:	6078      	str	r0, [r7, #4]
 800cc1e:	460b      	mov	r3, r1
 800cc20:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	1c5a      	adds	r2, r3, #1
 800cc26:	607a      	str	r2, [r7, #4]
 800cc28:	887a      	ldrh	r2, [r7, #2]
 800cc2a:	b2d2      	uxtb	r2, r2
 800cc2c:	701a      	strb	r2, [r3, #0]
 800cc2e:	887b      	ldrh	r3, [r7, #2]
 800cc30:	0a1b      	lsrs	r3, r3, #8
 800cc32:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	1c5a      	adds	r2, r3, #1
 800cc38:	607a      	str	r2, [r7, #4]
 800cc3a:	887a      	ldrh	r2, [r7, #2]
 800cc3c:	b2d2      	uxtb	r2, r2
 800cc3e:	701a      	strb	r2, [r3, #0]
}
 800cc40:	bf00      	nop
 800cc42:	370c      	adds	r7, #12
 800cc44:	46bd      	mov	sp, r7
 800cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4a:	4770      	bx	lr

0800cc4c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	b083      	sub	sp, #12
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
 800cc54:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	1c5a      	adds	r2, r3, #1
 800cc5a:	607a      	str	r2, [r7, #4]
 800cc5c:	683a      	ldr	r2, [r7, #0]
 800cc5e:	b2d2      	uxtb	r2, r2
 800cc60:	701a      	strb	r2, [r3, #0]
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	0a1b      	lsrs	r3, r3, #8
 800cc66:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	1c5a      	adds	r2, r3, #1
 800cc6c:	607a      	str	r2, [r7, #4]
 800cc6e:	683a      	ldr	r2, [r7, #0]
 800cc70:	b2d2      	uxtb	r2, r2
 800cc72:	701a      	strb	r2, [r3, #0]
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	0a1b      	lsrs	r3, r3, #8
 800cc78:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	1c5a      	adds	r2, r3, #1
 800cc7e:	607a      	str	r2, [r7, #4]
 800cc80:	683a      	ldr	r2, [r7, #0]
 800cc82:	b2d2      	uxtb	r2, r2
 800cc84:	701a      	strb	r2, [r3, #0]
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	0a1b      	lsrs	r3, r3, #8
 800cc8a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	1c5a      	adds	r2, r3, #1
 800cc90:	607a      	str	r2, [r7, #4]
 800cc92:	683a      	ldr	r2, [r7, #0]
 800cc94:	b2d2      	uxtb	r2, r2
 800cc96:	701a      	strb	r2, [r3, #0]
}
 800cc98:	bf00      	nop
 800cc9a:	370c      	adds	r7, #12
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca2:	4770      	bx	lr

0800cca4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800cca4:	b480      	push	{r7}
 800cca6:	b087      	sub	sp, #28
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	60f8      	str	r0, [r7, #12]
 800ccac:	60b9      	str	r1, [r7, #8]
 800ccae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d00d      	beq.n	800ccda <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ccbe:	693a      	ldr	r2, [r7, #16]
 800ccc0:	1c53      	adds	r3, r2, #1
 800ccc2:	613b      	str	r3, [r7, #16]
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	1c59      	adds	r1, r3, #1
 800ccc8:	6179      	str	r1, [r7, #20]
 800ccca:	7812      	ldrb	r2, [r2, #0]
 800cccc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	3b01      	subs	r3, #1
 800ccd2:	607b      	str	r3, [r7, #4]
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d1f1      	bne.n	800ccbe <mem_cpy+0x1a>
	}
}
 800ccda:	bf00      	nop
 800ccdc:	371c      	adds	r7, #28
 800ccde:	46bd      	mov	sp, r7
 800cce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce4:	4770      	bx	lr

0800cce6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800cce6:	b480      	push	{r7}
 800cce8:	b087      	sub	sp, #28
 800ccea:	af00      	add	r7, sp, #0
 800ccec:	60f8      	str	r0, [r7, #12]
 800ccee:	60b9      	str	r1, [r7, #8]
 800ccf0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ccf6:	697b      	ldr	r3, [r7, #20]
 800ccf8:	1c5a      	adds	r2, r3, #1
 800ccfa:	617a      	str	r2, [r7, #20]
 800ccfc:	68ba      	ldr	r2, [r7, #8]
 800ccfe:	b2d2      	uxtb	r2, r2
 800cd00:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	3b01      	subs	r3, #1
 800cd06:	607b      	str	r3, [r7, #4]
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d1f3      	bne.n	800ccf6 <mem_set+0x10>
}
 800cd0e:	bf00      	nop
 800cd10:	bf00      	nop
 800cd12:	371c      	adds	r7, #28
 800cd14:	46bd      	mov	sp, r7
 800cd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1a:	4770      	bx	lr

0800cd1c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800cd1c:	b480      	push	{r7}
 800cd1e:	b089      	sub	sp, #36	; 0x24
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	60f8      	str	r0, [r7, #12]
 800cd24:	60b9      	str	r1, [r7, #8]
 800cd26:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	61fb      	str	r3, [r7, #28]
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800cd30:	2300      	movs	r3, #0
 800cd32:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800cd34:	69fb      	ldr	r3, [r7, #28]
 800cd36:	1c5a      	adds	r2, r3, #1
 800cd38:	61fa      	str	r2, [r7, #28]
 800cd3a:	781b      	ldrb	r3, [r3, #0]
 800cd3c:	4619      	mov	r1, r3
 800cd3e:	69bb      	ldr	r3, [r7, #24]
 800cd40:	1c5a      	adds	r2, r3, #1
 800cd42:	61ba      	str	r2, [r7, #24]
 800cd44:	781b      	ldrb	r3, [r3, #0]
 800cd46:	1acb      	subs	r3, r1, r3
 800cd48:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	3b01      	subs	r3, #1
 800cd4e:	607b      	str	r3, [r7, #4]
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d002      	beq.n	800cd5c <mem_cmp+0x40>
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d0eb      	beq.n	800cd34 <mem_cmp+0x18>

	return r;
 800cd5c:	697b      	ldr	r3, [r7, #20]
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3724      	adds	r7, #36	; 0x24
 800cd62:	46bd      	mov	sp, r7
 800cd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd68:	4770      	bx	lr

0800cd6a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800cd6a:	b480      	push	{r7}
 800cd6c:	b083      	sub	sp, #12
 800cd6e:	af00      	add	r7, sp, #0
 800cd70:	6078      	str	r0, [r7, #4]
 800cd72:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800cd74:	e002      	b.n	800cd7c <chk_chr+0x12>
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	3301      	adds	r3, #1
 800cd7a:	607b      	str	r3, [r7, #4]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	781b      	ldrb	r3, [r3, #0]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d005      	beq.n	800cd90 <chk_chr+0x26>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	461a      	mov	r2, r3
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	d1f2      	bne.n	800cd76 <chk_chr+0xc>
	return *str;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	781b      	ldrb	r3, [r3, #0]
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	370c      	adds	r7, #12
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9e:	4770      	bx	lr

0800cda0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cda0:	b480      	push	{r7}
 800cda2:	b085      	sub	sp, #20
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
 800cda8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cdaa:	2300      	movs	r3, #0
 800cdac:	60bb      	str	r3, [r7, #8]
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	60fb      	str	r3, [r7, #12]
 800cdb2:	e029      	b.n	800ce08 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800cdb4:	4a27      	ldr	r2, [pc, #156]	; (800ce54 <chk_lock+0xb4>)
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	011b      	lsls	r3, r3, #4
 800cdba:	4413      	add	r3, r2
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d01d      	beq.n	800cdfe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cdc2:	4a24      	ldr	r2, [pc, #144]	; (800ce54 <chk_lock+0xb4>)
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	011b      	lsls	r3, r3, #4
 800cdc8:	4413      	add	r3, r2
 800cdca:	681a      	ldr	r2, [r3, #0]
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	d116      	bne.n	800ce02 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800cdd4:	4a1f      	ldr	r2, [pc, #124]	; (800ce54 <chk_lock+0xb4>)
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	011b      	lsls	r3, r3, #4
 800cdda:	4413      	add	r3, r2
 800cddc:	3304      	adds	r3, #4
 800cdde:	681a      	ldr	r2, [r3, #0]
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d10c      	bne.n	800ce02 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cde8:	4a1a      	ldr	r2, [pc, #104]	; (800ce54 <chk_lock+0xb4>)
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	011b      	lsls	r3, r3, #4
 800cdee:	4413      	add	r3, r2
 800cdf0:	3308      	adds	r3, #8
 800cdf2:	681a      	ldr	r2, [r3, #0]
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d102      	bne.n	800ce02 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cdfc:	e007      	b.n	800ce0e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800cdfe:	2301      	movs	r3, #1
 800ce00:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	3301      	adds	r3, #1
 800ce06:	60fb      	str	r3, [r7, #12]
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	2b01      	cmp	r3, #1
 800ce0c:	d9d2      	bls.n	800cdb4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	2b02      	cmp	r3, #2
 800ce12:	d109      	bne.n	800ce28 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d102      	bne.n	800ce20 <chk_lock+0x80>
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	2b02      	cmp	r3, #2
 800ce1e:	d101      	bne.n	800ce24 <chk_lock+0x84>
 800ce20:	2300      	movs	r3, #0
 800ce22:	e010      	b.n	800ce46 <chk_lock+0xa6>
 800ce24:	2312      	movs	r3, #18
 800ce26:	e00e      	b.n	800ce46 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d108      	bne.n	800ce40 <chk_lock+0xa0>
 800ce2e:	4a09      	ldr	r2, [pc, #36]	; (800ce54 <chk_lock+0xb4>)
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	011b      	lsls	r3, r3, #4
 800ce34:	4413      	add	r3, r2
 800ce36:	330c      	adds	r3, #12
 800ce38:	881b      	ldrh	r3, [r3, #0]
 800ce3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce3e:	d101      	bne.n	800ce44 <chk_lock+0xa4>
 800ce40:	2310      	movs	r3, #16
 800ce42:	e000      	b.n	800ce46 <chk_lock+0xa6>
 800ce44:	2300      	movs	r3, #0
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3714      	adds	r7, #20
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce50:	4770      	bx	lr
 800ce52:	bf00      	nop
 800ce54:	200008dc 	.word	0x200008dc

0800ce58 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b083      	sub	sp, #12
 800ce5c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	607b      	str	r3, [r7, #4]
 800ce62:	e002      	b.n	800ce6a <enq_lock+0x12>
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	3301      	adds	r3, #1
 800ce68:	607b      	str	r3, [r7, #4]
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2b01      	cmp	r3, #1
 800ce6e:	d806      	bhi.n	800ce7e <enq_lock+0x26>
 800ce70:	4a09      	ldr	r2, [pc, #36]	; (800ce98 <enq_lock+0x40>)
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	011b      	lsls	r3, r3, #4
 800ce76:	4413      	add	r3, r2
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d1f2      	bne.n	800ce64 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2b02      	cmp	r3, #2
 800ce82:	bf14      	ite	ne
 800ce84:	2301      	movne	r3, #1
 800ce86:	2300      	moveq	r3, #0
 800ce88:	b2db      	uxtb	r3, r3
}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	370c      	adds	r7, #12
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce94:	4770      	bx	lr
 800ce96:	bf00      	nop
 800ce98:	200008dc 	.word	0x200008dc

0800ce9c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b085      	sub	sp, #20
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cea6:	2300      	movs	r3, #0
 800cea8:	60fb      	str	r3, [r7, #12]
 800ceaa:	e01f      	b.n	800ceec <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ceac:	4a41      	ldr	r2, [pc, #260]	; (800cfb4 <inc_lock+0x118>)
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	011b      	lsls	r3, r3, #4
 800ceb2:	4413      	add	r3, r2
 800ceb4:	681a      	ldr	r2, [r3, #0]
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	429a      	cmp	r2, r3
 800cebc:	d113      	bne.n	800cee6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800cebe:	4a3d      	ldr	r2, [pc, #244]	; (800cfb4 <inc_lock+0x118>)
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	011b      	lsls	r3, r3, #4
 800cec4:	4413      	add	r3, r2
 800cec6:	3304      	adds	r3, #4
 800cec8:	681a      	ldr	r2, [r3, #0]
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800cece:	429a      	cmp	r2, r3
 800ced0:	d109      	bne.n	800cee6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ced2:	4a38      	ldr	r2, [pc, #224]	; (800cfb4 <inc_lock+0x118>)
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	011b      	lsls	r3, r3, #4
 800ced8:	4413      	add	r3, r2
 800ceda:	3308      	adds	r3, #8
 800cedc:	681a      	ldr	r2, [r3, #0]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800cee2:	429a      	cmp	r2, r3
 800cee4:	d006      	beq.n	800cef4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	3301      	adds	r3, #1
 800ceea:	60fb      	str	r3, [r7, #12]
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	2b01      	cmp	r3, #1
 800cef0:	d9dc      	bls.n	800ceac <inc_lock+0x10>
 800cef2:	e000      	b.n	800cef6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800cef4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	2b02      	cmp	r3, #2
 800cefa:	d132      	bne.n	800cf62 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cefc:	2300      	movs	r3, #0
 800cefe:	60fb      	str	r3, [r7, #12]
 800cf00:	e002      	b.n	800cf08 <inc_lock+0x6c>
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	3301      	adds	r3, #1
 800cf06:	60fb      	str	r3, [r7, #12]
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	2b01      	cmp	r3, #1
 800cf0c:	d806      	bhi.n	800cf1c <inc_lock+0x80>
 800cf0e:	4a29      	ldr	r2, [pc, #164]	; (800cfb4 <inc_lock+0x118>)
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	011b      	lsls	r3, r3, #4
 800cf14:	4413      	add	r3, r2
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d1f2      	bne.n	800cf02 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	2b02      	cmp	r3, #2
 800cf20:	d101      	bne.n	800cf26 <inc_lock+0x8a>
 800cf22:	2300      	movs	r3, #0
 800cf24:	e040      	b.n	800cfa8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681a      	ldr	r2, [r3, #0]
 800cf2a:	4922      	ldr	r1, [pc, #136]	; (800cfb4 <inc_lock+0x118>)
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	011b      	lsls	r3, r3, #4
 800cf30:	440b      	add	r3, r1
 800cf32:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	689a      	ldr	r2, [r3, #8]
 800cf38:	491e      	ldr	r1, [pc, #120]	; (800cfb4 <inc_lock+0x118>)
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	011b      	lsls	r3, r3, #4
 800cf3e:	440b      	add	r3, r1
 800cf40:	3304      	adds	r3, #4
 800cf42:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	695a      	ldr	r2, [r3, #20]
 800cf48:	491a      	ldr	r1, [pc, #104]	; (800cfb4 <inc_lock+0x118>)
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	011b      	lsls	r3, r3, #4
 800cf4e:	440b      	add	r3, r1
 800cf50:	3308      	adds	r3, #8
 800cf52:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800cf54:	4a17      	ldr	r2, [pc, #92]	; (800cfb4 <inc_lock+0x118>)
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	011b      	lsls	r3, r3, #4
 800cf5a:	4413      	add	r3, r2
 800cf5c:	330c      	adds	r3, #12
 800cf5e:	2200      	movs	r2, #0
 800cf60:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d009      	beq.n	800cf7c <inc_lock+0xe0>
 800cf68:	4a12      	ldr	r2, [pc, #72]	; (800cfb4 <inc_lock+0x118>)
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	011b      	lsls	r3, r3, #4
 800cf6e:	4413      	add	r3, r2
 800cf70:	330c      	adds	r3, #12
 800cf72:	881b      	ldrh	r3, [r3, #0]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d001      	beq.n	800cf7c <inc_lock+0xe0>
 800cf78:	2300      	movs	r3, #0
 800cf7a:	e015      	b.n	800cfa8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d108      	bne.n	800cf94 <inc_lock+0xf8>
 800cf82:	4a0c      	ldr	r2, [pc, #48]	; (800cfb4 <inc_lock+0x118>)
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	011b      	lsls	r3, r3, #4
 800cf88:	4413      	add	r3, r2
 800cf8a:	330c      	adds	r3, #12
 800cf8c:	881b      	ldrh	r3, [r3, #0]
 800cf8e:	3301      	adds	r3, #1
 800cf90:	b29a      	uxth	r2, r3
 800cf92:	e001      	b.n	800cf98 <inc_lock+0xfc>
 800cf94:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cf98:	4906      	ldr	r1, [pc, #24]	; (800cfb4 <inc_lock+0x118>)
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	011b      	lsls	r3, r3, #4
 800cf9e:	440b      	add	r3, r1
 800cfa0:	330c      	adds	r3, #12
 800cfa2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	3301      	adds	r3, #1
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3714      	adds	r7, #20
 800cfac:	46bd      	mov	sp, r7
 800cfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb2:	4770      	bx	lr
 800cfb4:	200008dc 	.word	0x200008dc

0800cfb8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b085      	sub	sp, #20
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	3b01      	subs	r3, #1
 800cfc4:	607b      	str	r3, [r7, #4]
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2b01      	cmp	r3, #1
 800cfca:	d825      	bhi.n	800d018 <dec_lock+0x60>
		n = Files[i].ctr;
 800cfcc:	4a17      	ldr	r2, [pc, #92]	; (800d02c <dec_lock+0x74>)
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	011b      	lsls	r3, r3, #4
 800cfd2:	4413      	add	r3, r2
 800cfd4:	330c      	adds	r3, #12
 800cfd6:	881b      	ldrh	r3, [r3, #0]
 800cfd8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800cfda:	89fb      	ldrh	r3, [r7, #14]
 800cfdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cfe0:	d101      	bne.n	800cfe6 <dec_lock+0x2e>
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800cfe6:	89fb      	ldrh	r3, [r7, #14]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d002      	beq.n	800cff2 <dec_lock+0x3a>
 800cfec:	89fb      	ldrh	r3, [r7, #14]
 800cfee:	3b01      	subs	r3, #1
 800cff0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800cff2:	4a0e      	ldr	r2, [pc, #56]	; (800d02c <dec_lock+0x74>)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	011b      	lsls	r3, r3, #4
 800cff8:	4413      	add	r3, r2
 800cffa:	330c      	adds	r3, #12
 800cffc:	89fa      	ldrh	r2, [r7, #14]
 800cffe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d000:	89fb      	ldrh	r3, [r7, #14]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d105      	bne.n	800d012 <dec_lock+0x5a>
 800d006:	4a09      	ldr	r2, [pc, #36]	; (800d02c <dec_lock+0x74>)
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	011b      	lsls	r3, r3, #4
 800d00c:	4413      	add	r3, r2
 800d00e:	2200      	movs	r2, #0
 800d010:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d012:	2300      	movs	r3, #0
 800d014:	737b      	strb	r3, [r7, #13]
 800d016:	e001      	b.n	800d01c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d018:	2302      	movs	r3, #2
 800d01a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d01c:	7b7b      	ldrb	r3, [r7, #13]
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3714      	adds	r7, #20
 800d022:	46bd      	mov	sp, r7
 800d024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d028:	4770      	bx	lr
 800d02a:	bf00      	nop
 800d02c:	200008dc 	.word	0x200008dc

0800d030 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d030:	b480      	push	{r7}
 800d032:	b085      	sub	sp, #20
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d038:	2300      	movs	r3, #0
 800d03a:	60fb      	str	r3, [r7, #12]
 800d03c:	e010      	b.n	800d060 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d03e:	4a0d      	ldr	r2, [pc, #52]	; (800d074 <clear_lock+0x44>)
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	011b      	lsls	r3, r3, #4
 800d044:	4413      	add	r3, r2
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	687a      	ldr	r2, [r7, #4]
 800d04a:	429a      	cmp	r2, r3
 800d04c:	d105      	bne.n	800d05a <clear_lock+0x2a>
 800d04e:	4a09      	ldr	r2, [pc, #36]	; (800d074 <clear_lock+0x44>)
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	011b      	lsls	r3, r3, #4
 800d054:	4413      	add	r3, r2
 800d056:	2200      	movs	r2, #0
 800d058:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	3301      	adds	r3, #1
 800d05e:	60fb      	str	r3, [r7, #12]
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	2b01      	cmp	r3, #1
 800d064:	d9eb      	bls.n	800d03e <clear_lock+0xe>
	}
}
 800d066:	bf00      	nop
 800d068:	bf00      	nop
 800d06a:	3714      	adds	r7, #20
 800d06c:	46bd      	mov	sp, r7
 800d06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d072:	4770      	bx	lr
 800d074:	200008dc 	.word	0x200008dc

0800d078 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b086      	sub	sp, #24
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d080:	2300      	movs	r3, #0
 800d082:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	78db      	ldrb	r3, [r3, #3]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d034      	beq.n	800d0f6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d090:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	7858      	ldrb	r0, [r3, #1]
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d09c:	2301      	movs	r3, #1
 800d09e:	697a      	ldr	r2, [r7, #20]
 800d0a0:	f7ff fd40 	bl	800cb24 <disk_write>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d002      	beq.n	800d0b0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	73fb      	strb	r3, [r7, #15]
 800d0ae:	e022      	b.n	800d0f6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6a1b      	ldr	r3, [r3, #32]
 800d0ba:	697a      	ldr	r2, [r7, #20]
 800d0bc:	1ad2      	subs	r2, r2, r3
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	699b      	ldr	r3, [r3, #24]
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	d217      	bcs.n	800d0f6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	789b      	ldrb	r3, [r3, #2]
 800d0ca:	613b      	str	r3, [r7, #16]
 800d0cc:	e010      	b.n	800d0f0 <sync_window+0x78>
					wsect += fs->fsize;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	699b      	ldr	r3, [r3, #24]
 800d0d2:	697a      	ldr	r2, [r7, #20]
 800d0d4:	4413      	add	r3, r2
 800d0d6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	7858      	ldrb	r0, [r3, #1]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	697a      	ldr	r2, [r7, #20]
 800d0e6:	f7ff fd1d 	bl	800cb24 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	3b01      	subs	r3, #1
 800d0ee:	613b      	str	r3, [r7, #16]
 800d0f0:	693b      	ldr	r3, [r7, #16]
 800d0f2:	2b01      	cmp	r3, #1
 800d0f4:	d8eb      	bhi.n	800d0ce <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d0f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	3718      	adds	r7, #24
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd80      	pop	{r7, pc}

0800d100 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b084      	sub	sp, #16
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d10a:	2300      	movs	r3, #0
 800d10c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d112:	683a      	ldr	r2, [r7, #0]
 800d114:	429a      	cmp	r2, r3
 800d116:	d01b      	beq.n	800d150 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f7ff ffad 	bl	800d078 <sync_window>
 800d11e:	4603      	mov	r3, r0
 800d120:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d122:	7bfb      	ldrb	r3, [r7, #15]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d113      	bne.n	800d150 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	7858      	ldrb	r0, [r3, #1]
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d132:	2301      	movs	r3, #1
 800d134:	683a      	ldr	r2, [r7, #0]
 800d136:	f7ff fcd5 	bl	800cae4 <disk_read>
 800d13a:	4603      	mov	r3, r0
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d004      	beq.n	800d14a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d140:	f04f 33ff 	mov.w	r3, #4294967295
 800d144:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d146:	2301      	movs	r3, #1
 800d148:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	683a      	ldr	r2, [r7, #0]
 800d14e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800d150:	7bfb      	ldrb	r3, [r7, #15]
}
 800d152:	4618      	mov	r0, r3
 800d154:	3710      	adds	r7, #16
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}
	...

0800d15c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b084      	sub	sp, #16
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f7ff ff87 	bl	800d078 <sync_window>
 800d16a:	4603      	mov	r3, r0
 800d16c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d16e:	7bfb      	ldrb	r3, [r7, #15]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d158      	bne.n	800d226 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	781b      	ldrb	r3, [r3, #0]
 800d178:	2b03      	cmp	r3, #3
 800d17a:	d148      	bne.n	800d20e <sync_fs+0xb2>
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	791b      	ldrb	r3, [r3, #4]
 800d180:	2b01      	cmp	r3, #1
 800d182:	d144      	bne.n	800d20e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	3330      	adds	r3, #48	; 0x30
 800d188:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d18c:	2100      	movs	r1, #0
 800d18e:	4618      	mov	r0, r3
 800d190:	f7ff fda9 	bl	800cce6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	3330      	adds	r3, #48	; 0x30
 800d198:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d19c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f7ff fd38 	bl	800cc16 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	3330      	adds	r3, #48	; 0x30
 800d1aa:	4921      	ldr	r1, [pc, #132]	; (800d230 <sync_fs+0xd4>)
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f7ff fd4d 	bl	800cc4c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	3330      	adds	r3, #48	; 0x30
 800d1b6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d1ba:	491e      	ldr	r1, [pc, #120]	; (800d234 <sync_fs+0xd8>)
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f7ff fd45 	bl	800cc4c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	3330      	adds	r3, #48	; 0x30
 800d1c6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	691b      	ldr	r3, [r3, #16]
 800d1ce:	4619      	mov	r1, r3
 800d1d0:	4610      	mov	r0, r2
 800d1d2:	f7ff fd3b 	bl	800cc4c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	3330      	adds	r3, #48	; 0x30
 800d1da:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	68db      	ldr	r3, [r3, #12]
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	4610      	mov	r0, r2
 800d1e6:	f7ff fd31 	bl	800cc4c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	69db      	ldr	r3, [r3, #28]
 800d1ee:	1c5a      	adds	r2, r3, #1
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	7858      	ldrb	r0, [r3, #1]
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d202:	2301      	movs	r3, #1
 800d204:	f7ff fc8e 	bl	800cb24 <disk_write>
			fs->fsi_flag = 0;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2200      	movs	r2, #0
 800d20c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	785b      	ldrb	r3, [r3, #1]
 800d212:	2200      	movs	r2, #0
 800d214:	2100      	movs	r1, #0
 800d216:	4618      	mov	r0, r3
 800d218:	f7ff fca4 	bl	800cb64 <disk_ioctl>
 800d21c:	4603      	mov	r3, r0
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d001      	beq.n	800d226 <sync_fs+0xca>
 800d222:	2301      	movs	r3, #1
 800d224:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d226:	7bfb      	ldrb	r3, [r7, #15]
}
 800d228:	4618      	mov	r0, r3
 800d22a:	3710      	adds	r7, #16
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}
 800d230:	41615252 	.word	0x41615252
 800d234:	61417272 	.word	0x61417272

0800d238 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d238:	b480      	push	{r7}
 800d23a:	b083      	sub	sp, #12
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	3b02      	subs	r3, #2
 800d246:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	695b      	ldr	r3, [r3, #20]
 800d24c:	3b02      	subs	r3, #2
 800d24e:	683a      	ldr	r2, [r7, #0]
 800d250:	429a      	cmp	r2, r3
 800d252:	d301      	bcc.n	800d258 <clust2sect+0x20>
 800d254:	2300      	movs	r3, #0
 800d256:	e008      	b.n	800d26a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	895b      	ldrh	r3, [r3, #10]
 800d25c:	461a      	mov	r2, r3
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	fb03 f202 	mul.w	r2, r3, r2
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d268:	4413      	add	r3, r2
}
 800d26a:	4618      	mov	r0, r3
 800d26c:	370c      	adds	r7, #12
 800d26e:	46bd      	mov	sp, r7
 800d270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d274:	4770      	bx	lr

0800d276 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d276:	b580      	push	{r7, lr}
 800d278:	b086      	sub	sp, #24
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	6078      	str	r0, [r7, #4]
 800d27e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	2b01      	cmp	r3, #1
 800d28a:	d904      	bls.n	800d296 <get_fat+0x20>
 800d28c:	693b      	ldr	r3, [r7, #16]
 800d28e:	695b      	ldr	r3, [r3, #20]
 800d290:	683a      	ldr	r2, [r7, #0]
 800d292:	429a      	cmp	r2, r3
 800d294:	d302      	bcc.n	800d29c <get_fat+0x26>
		val = 1;	/* Internal error */
 800d296:	2301      	movs	r3, #1
 800d298:	617b      	str	r3, [r7, #20]
 800d29a:	e08f      	b.n	800d3bc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d29c:	f04f 33ff 	mov.w	r3, #4294967295
 800d2a0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d2a2:	693b      	ldr	r3, [r7, #16]
 800d2a4:	781b      	ldrb	r3, [r3, #0]
 800d2a6:	2b03      	cmp	r3, #3
 800d2a8:	d062      	beq.n	800d370 <get_fat+0xfa>
 800d2aa:	2b03      	cmp	r3, #3
 800d2ac:	dc7c      	bgt.n	800d3a8 <get_fat+0x132>
 800d2ae:	2b01      	cmp	r3, #1
 800d2b0:	d002      	beq.n	800d2b8 <get_fat+0x42>
 800d2b2:	2b02      	cmp	r3, #2
 800d2b4:	d042      	beq.n	800d33c <get_fat+0xc6>
 800d2b6:	e077      	b.n	800d3a8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	60fb      	str	r3, [r7, #12]
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	085b      	lsrs	r3, r3, #1
 800d2c0:	68fa      	ldr	r2, [r7, #12]
 800d2c2:	4413      	add	r3, r2
 800d2c4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d2c6:	693b      	ldr	r3, [r7, #16]
 800d2c8:	6a1a      	ldr	r2, [r3, #32]
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	0a5b      	lsrs	r3, r3, #9
 800d2ce:	4413      	add	r3, r2
 800d2d0:	4619      	mov	r1, r3
 800d2d2:	6938      	ldr	r0, [r7, #16]
 800d2d4:	f7ff ff14 	bl	800d100 <move_window>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d167      	bne.n	800d3ae <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	1c5a      	adds	r2, r3, #1
 800d2e2:	60fa      	str	r2, [r7, #12]
 800d2e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2e8:	693a      	ldr	r2, [r7, #16]
 800d2ea:	4413      	add	r3, r2
 800d2ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d2f0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d2f2:	693b      	ldr	r3, [r7, #16]
 800d2f4:	6a1a      	ldr	r2, [r3, #32]
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	0a5b      	lsrs	r3, r3, #9
 800d2fa:	4413      	add	r3, r2
 800d2fc:	4619      	mov	r1, r3
 800d2fe:	6938      	ldr	r0, [r7, #16]
 800d300:	f7ff fefe 	bl	800d100 <move_window>
 800d304:	4603      	mov	r3, r0
 800d306:	2b00      	cmp	r3, #0
 800d308:	d153      	bne.n	800d3b2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d310:	693a      	ldr	r2, [r7, #16]
 800d312:	4413      	add	r3, r2
 800d314:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d318:	021b      	lsls	r3, r3, #8
 800d31a:	461a      	mov	r2, r3
 800d31c:	68bb      	ldr	r3, [r7, #8]
 800d31e:	4313      	orrs	r3, r2
 800d320:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	f003 0301 	and.w	r3, r3, #1
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d002      	beq.n	800d332 <get_fat+0xbc>
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	091b      	lsrs	r3, r3, #4
 800d330:	e002      	b.n	800d338 <get_fat+0xc2>
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d338:	617b      	str	r3, [r7, #20]
			break;
 800d33a:	e03f      	b.n	800d3bc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	6a1a      	ldr	r2, [r3, #32]
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	0a1b      	lsrs	r3, r3, #8
 800d344:	4413      	add	r3, r2
 800d346:	4619      	mov	r1, r3
 800d348:	6938      	ldr	r0, [r7, #16]
 800d34a:	f7ff fed9 	bl	800d100 <move_window>
 800d34e:	4603      	mov	r3, r0
 800d350:	2b00      	cmp	r3, #0
 800d352:	d130      	bne.n	800d3b6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d354:	693b      	ldr	r3, [r7, #16]
 800d356:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	005b      	lsls	r3, r3, #1
 800d35e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d362:	4413      	add	r3, r2
 800d364:	4618      	mov	r0, r3
 800d366:	f7ff fc1b 	bl	800cba0 <ld_word>
 800d36a:	4603      	mov	r3, r0
 800d36c:	617b      	str	r3, [r7, #20]
			break;
 800d36e:	e025      	b.n	800d3bc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	6a1a      	ldr	r2, [r3, #32]
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	09db      	lsrs	r3, r3, #7
 800d378:	4413      	add	r3, r2
 800d37a:	4619      	mov	r1, r3
 800d37c:	6938      	ldr	r0, [r7, #16]
 800d37e:	f7ff febf 	bl	800d100 <move_window>
 800d382:	4603      	mov	r3, r0
 800d384:	2b00      	cmp	r3, #0
 800d386:	d118      	bne.n	800d3ba <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d388:	693b      	ldr	r3, [r7, #16]
 800d38a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	009b      	lsls	r3, r3, #2
 800d392:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d396:	4413      	add	r3, r2
 800d398:	4618      	mov	r0, r3
 800d39a:	f7ff fc19 	bl	800cbd0 <ld_dword>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d3a4:	617b      	str	r3, [r7, #20]
			break;
 800d3a6:	e009      	b.n	800d3bc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	617b      	str	r3, [r7, #20]
 800d3ac:	e006      	b.n	800d3bc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d3ae:	bf00      	nop
 800d3b0:	e004      	b.n	800d3bc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d3b2:	bf00      	nop
 800d3b4:	e002      	b.n	800d3bc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d3b6:	bf00      	nop
 800d3b8:	e000      	b.n	800d3bc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d3ba:	bf00      	nop
		}
	}

	return val;
 800d3bc:	697b      	ldr	r3, [r7, #20]
}
 800d3be:	4618      	mov	r0, r3
 800d3c0:	3718      	adds	r7, #24
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}

0800d3c6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d3c6:	b590      	push	{r4, r7, lr}
 800d3c8:	b089      	sub	sp, #36	; 0x24
 800d3ca:	af00      	add	r7, sp, #0
 800d3cc:	60f8      	str	r0, [r7, #12]
 800d3ce:	60b9      	str	r1, [r7, #8]
 800d3d0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d3d2:	2302      	movs	r3, #2
 800d3d4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	2b01      	cmp	r3, #1
 800d3da:	f240 80d2 	bls.w	800d582 <put_fat+0x1bc>
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	695b      	ldr	r3, [r3, #20]
 800d3e2:	68ba      	ldr	r2, [r7, #8]
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	f080 80cc 	bcs.w	800d582 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	781b      	ldrb	r3, [r3, #0]
 800d3ee:	2b03      	cmp	r3, #3
 800d3f0:	f000 8096 	beq.w	800d520 <put_fat+0x15a>
 800d3f4:	2b03      	cmp	r3, #3
 800d3f6:	f300 80cd 	bgt.w	800d594 <put_fat+0x1ce>
 800d3fa:	2b01      	cmp	r3, #1
 800d3fc:	d002      	beq.n	800d404 <put_fat+0x3e>
 800d3fe:	2b02      	cmp	r3, #2
 800d400:	d06e      	beq.n	800d4e0 <put_fat+0x11a>
 800d402:	e0c7      	b.n	800d594 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	61bb      	str	r3, [r7, #24]
 800d408:	69bb      	ldr	r3, [r7, #24]
 800d40a:	085b      	lsrs	r3, r3, #1
 800d40c:	69ba      	ldr	r2, [r7, #24]
 800d40e:	4413      	add	r3, r2
 800d410:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	6a1a      	ldr	r2, [r3, #32]
 800d416:	69bb      	ldr	r3, [r7, #24]
 800d418:	0a5b      	lsrs	r3, r3, #9
 800d41a:	4413      	add	r3, r2
 800d41c:	4619      	mov	r1, r3
 800d41e:	68f8      	ldr	r0, [r7, #12]
 800d420:	f7ff fe6e 	bl	800d100 <move_window>
 800d424:	4603      	mov	r3, r0
 800d426:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d428:	7ffb      	ldrb	r3, [r7, #31]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	f040 80ab 	bne.w	800d586 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d436:	69bb      	ldr	r3, [r7, #24]
 800d438:	1c59      	adds	r1, r3, #1
 800d43a:	61b9      	str	r1, [r7, #24]
 800d43c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d440:	4413      	add	r3, r2
 800d442:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	f003 0301 	and.w	r3, r3, #1
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d00d      	beq.n	800d46a <put_fat+0xa4>
 800d44e:	697b      	ldr	r3, [r7, #20]
 800d450:	781b      	ldrb	r3, [r3, #0]
 800d452:	b25b      	sxtb	r3, r3
 800d454:	f003 030f 	and.w	r3, r3, #15
 800d458:	b25a      	sxtb	r2, r3
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	b2db      	uxtb	r3, r3
 800d45e:	011b      	lsls	r3, r3, #4
 800d460:	b25b      	sxtb	r3, r3
 800d462:	4313      	orrs	r3, r2
 800d464:	b25b      	sxtb	r3, r3
 800d466:	b2db      	uxtb	r3, r3
 800d468:	e001      	b.n	800d46e <put_fat+0xa8>
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	b2db      	uxtb	r3, r3
 800d46e:	697a      	ldr	r2, [r7, #20]
 800d470:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	2201      	movs	r2, #1
 800d476:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	6a1a      	ldr	r2, [r3, #32]
 800d47c:	69bb      	ldr	r3, [r7, #24]
 800d47e:	0a5b      	lsrs	r3, r3, #9
 800d480:	4413      	add	r3, r2
 800d482:	4619      	mov	r1, r3
 800d484:	68f8      	ldr	r0, [r7, #12]
 800d486:	f7ff fe3b 	bl	800d100 <move_window>
 800d48a:	4603      	mov	r3, r0
 800d48c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d48e:	7ffb      	ldrb	r3, [r7, #31]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d17a      	bne.n	800d58a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d49a:	69bb      	ldr	r3, [r7, #24]
 800d49c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4a0:	4413      	add	r3, r2
 800d4a2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	f003 0301 	and.w	r3, r3, #1
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d003      	beq.n	800d4b6 <put_fat+0xf0>
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	091b      	lsrs	r3, r3, #4
 800d4b2:	b2db      	uxtb	r3, r3
 800d4b4:	e00e      	b.n	800d4d4 <put_fat+0x10e>
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	781b      	ldrb	r3, [r3, #0]
 800d4ba:	b25b      	sxtb	r3, r3
 800d4bc:	f023 030f 	bic.w	r3, r3, #15
 800d4c0:	b25a      	sxtb	r2, r3
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	0a1b      	lsrs	r3, r3, #8
 800d4c6:	b25b      	sxtb	r3, r3
 800d4c8:	f003 030f 	and.w	r3, r3, #15
 800d4cc:	b25b      	sxtb	r3, r3
 800d4ce:	4313      	orrs	r3, r2
 800d4d0:	b25b      	sxtb	r3, r3
 800d4d2:	b2db      	uxtb	r3, r3
 800d4d4:	697a      	ldr	r2, [r7, #20]
 800d4d6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	2201      	movs	r2, #1
 800d4dc:	70da      	strb	r2, [r3, #3]
			break;
 800d4de:	e059      	b.n	800d594 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	6a1a      	ldr	r2, [r3, #32]
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	0a1b      	lsrs	r3, r3, #8
 800d4e8:	4413      	add	r3, r2
 800d4ea:	4619      	mov	r1, r3
 800d4ec:	68f8      	ldr	r0, [r7, #12]
 800d4ee:	f7ff fe07 	bl	800d100 <move_window>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d4f6:	7ffb      	ldrb	r3, [r7, #31]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d148      	bne.n	800d58e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	005b      	lsls	r3, r3, #1
 800d506:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d50a:	4413      	add	r3, r2
 800d50c:	687a      	ldr	r2, [r7, #4]
 800d50e:	b292      	uxth	r2, r2
 800d510:	4611      	mov	r1, r2
 800d512:	4618      	mov	r0, r3
 800d514:	f7ff fb7f 	bl	800cc16 <st_word>
			fs->wflag = 1;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2201      	movs	r2, #1
 800d51c:	70da      	strb	r2, [r3, #3]
			break;
 800d51e:	e039      	b.n	800d594 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	6a1a      	ldr	r2, [r3, #32]
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	09db      	lsrs	r3, r3, #7
 800d528:	4413      	add	r3, r2
 800d52a:	4619      	mov	r1, r3
 800d52c:	68f8      	ldr	r0, [r7, #12]
 800d52e:	f7ff fde7 	bl	800d100 <move_window>
 800d532:	4603      	mov	r3, r0
 800d534:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d536:	7ffb      	ldrb	r3, [r7, #31]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d12a      	bne.n	800d592 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d548:	68bb      	ldr	r3, [r7, #8]
 800d54a:	009b      	lsls	r3, r3, #2
 800d54c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d550:	4413      	add	r3, r2
 800d552:	4618      	mov	r0, r3
 800d554:	f7ff fb3c 	bl	800cbd0 <ld_dword>
 800d558:	4603      	mov	r3, r0
 800d55a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d55e:	4323      	orrs	r3, r4
 800d560:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	009b      	lsls	r3, r3, #2
 800d56c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d570:	4413      	add	r3, r2
 800d572:	6879      	ldr	r1, [r7, #4]
 800d574:	4618      	mov	r0, r3
 800d576:	f7ff fb69 	bl	800cc4c <st_dword>
			fs->wflag = 1;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	2201      	movs	r2, #1
 800d57e:	70da      	strb	r2, [r3, #3]
			break;
 800d580:	e008      	b.n	800d594 <put_fat+0x1ce>
		}
	}
 800d582:	bf00      	nop
 800d584:	e006      	b.n	800d594 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d586:	bf00      	nop
 800d588:	e004      	b.n	800d594 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d58a:	bf00      	nop
 800d58c:	e002      	b.n	800d594 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d58e:	bf00      	nop
 800d590:	e000      	b.n	800d594 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d592:	bf00      	nop
	return res;
 800d594:	7ffb      	ldrb	r3, [r7, #31]
}
 800d596:	4618      	mov	r0, r3
 800d598:	3724      	adds	r7, #36	; 0x24
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd90      	pop	{r4, r7, pc}

0800d59e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d59e:	b580      	push	{r7, lr}
 800d5a0:	b088      	sub	sp, #32
 800d5a2:	af00      	add	r7, sp, #0
 800d5a4:	60f8      	str	r0, [r7, #12]
 800d5a6:	60b9      	str	r1, [r7, #8]
 800d5a8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	2b01      	cmp	r3, #1
 800d5b8:	d904      	bls.n	800d5c4 <remove_chain+0x26>
 800d5ba:	69bb      	ldr	r3, [r7, #24]
 800d5bc:	695b      	ldr	r3, [r3, #20]
 800d5be:	68ba      	ldr	r2, [r7, #8]
 800d5c0:	429a      	cmp	r2, r3
 800d5c2:	d301      	bcc.n	800d5c8 <remove_chain+0x2a>
 800d5c4:	2302      	movs	r3, #2
 800d5c6:	e04b      	b.n	800d660 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d00c      	beq.n	800d5e8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d5ce:	f04f 32ff 	mov.w	r2, #4294967295
 800d5d2:	6879      	ldr	r1, [r7, #4]
 800d5d4:	69b8      	ldr	r0, [r7, #24]
 800d5d6:	f7ff fef6 	bl	800d3c6 <put_fat>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d5de:	7ffb      	ldrb	r3, [r7, #31]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d001      	beq.n	800d5e8 <remove_chain+0x4a>
 800d5e4:	7ffb      	ldrb	r3, [r7, #31]
 800d5e6:	e03b      	b.n	800d660 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d5e8:	68b9      	ldr	r1, [r7, #8]
 800d5ea:	68f8      	ldr	r0, [r7, #12]
 800d5ec:	f7ff fe43 	bl	800d276 <get_fat>
 800d5f0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d031      	beq.n	800d65c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d5f8:	697b      	ldr	r3, [r7, #20]
 800d5fa:	2b01      	cmp	r3, #1
 800d5fc:	d101      	bne.n	800d602 <remove_chain+0x64>
 800d5fe:	2302      	movs	r3, #2
 800d600:	e02e      	b.n	800d660 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d608:	d101      	bne.n	800d60e <remove_chain+0x70>
 800d60a:	2301      	movs	r3, #1
 800d60c:	e028      	b.n	800d660 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d60e:	2200      	movs	r2, #0
 800d610:	68b9      	ldr	r1, [r7, #8]
 800d612:	69b8      	ldr	r0, [r7, #24]
 800d614:	f7ff fed7 	bl	800d3c6 <put_fat>
 800d618:	4603      	mov	r3, r0
 800d61a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d61c:	7ffb      	ldrb	r3, [r7, #31]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d001      	beq.n	800d626 <remove_chain+0x88>
 800d622:	7ffb      	ldrb	r3, [r7, #31]
 800d624:	e01c      	b.n	800d660 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d626:	69bb      	ldr	r3, [r7, #24]
 800d628:	691a      	ldr	r2, [r3, #16]
 800d62a:	69bb      	ldr	r3, [r7, #24]
 800d62c:	695b      	ldr	r3, [r3, #20]
 800d62e:	3b02      	subs	r3, #2
 800d630:	429a      	cmp	r2, r3
 800d632:	d20b      	bcs.n	800d64c <remove_chain+0xae>
			fs->free_clst++;
 800d634:	69bb      	ldr	r3, [r7, #24]
 800d636:	691b      	ldr	r3, [r3, #16]
 800d638:	1c5a      	adds	r2, r3, #1
 800d63a:	69bb      	ldr	r3, [r7, #24]
 800d63c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800d63e:	69bb      	ldr	r3, [r7, #24]
 800d640:	791b      	ldrb	r3, [r3, #4]
 800d642:	f043 0301 	orr.w	r3, r3, #1
 800d646:	b2da      	uxtb	r2, r3
 800d648:	69bb      	ldr	r3, [r7, #24]
 800d64a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d650:	69bb      	ldr	r3, [r7, #24]
 800d652:	695b      	ldr	r3, [r3, #20]
 800d654:	68ba      	ldr	r2, [r7, #8]
 800d656:	429a      	cmp	r2, r3
 800d658:	d3c6      	bcc.n	800d5e8 <remove_chain+0x4a>
 800d65a:	e000      	b.n	800d65e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d65c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d65e:	2300      	movs	r3, #0
}
 800d660:	4618      	mov	r0, r3
 800d662:	3720      	adds	r7, #32
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}

0800d668 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b088      	sub	sp, #32
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
 800d670:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d10d      	bne.n	800d69a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d67e:	693b      	ldr	r3, [r7, #16]
 800d680:	68db      	ldr	r3, [r3, #12]
 800d682:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d684:	69bb      	ldr	r3, [r7, #24]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d004      	beq.n	800d694 <create_chain+0x2c>
 800d68a:	693b      	ldr	r3, [r7, #16]
 800d68c:	695b      	ldr	r3, [r3, #20]
 800d68e:	69ba      	ldr	r2, [r7, #24]
 800d690:	429a      	cmp	r2, r3
 800d692:	d31b      	bcc.n	800d6cc <create_chain+0x64>
 800d694:	2301      	movs	r3, #1
 800d696:	61bb      	str	r3, [r7, #24]
 800d698:	e018      	b.n	800d6cc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d69a:	6839      	ldr	r1, [r7, #0]
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f7ff fdea 	bl	800d276 <get_fat>
 800d6a2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	2b01      	cmp	r3, #1
 800d6a8:	d801      	bhi.n	800d6ae <create_chain+0x46>
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	e070      	b.n	800d790 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6b4:	d101      	bne.n	800d6ba <create_chain+0x52>
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	e06a      	b.n	800d790 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d6ba:	693b      	ldr	r3, [r7, #16]
 800d6bc:	695b      	ldr	r3, [r3, #20]
 800d6be:	68fa      	ldr	r2, [r7, #12]
 800d6c0:	429a      	cmp	r2, r3
 800d6c2:	d201      	bcs.n	800d6c8 <create_chain+0x60>
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	e063      	b.n	800d790 <create_chain+0x128>
		scl = clst;
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d6cc:	69bb      	ldr	r3, [r7, #24]
 800d6ce:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d6d0:	69fb      	ldr	r3, [r7, #28]
 800d6d2:	3301      	adds	r3, #1
 800d6d4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d6d6:	693b      	ldr	r3, [r7, #16]
 800d6d8:	695b      	ldr	r3, [r3, #20]
 800d6da:	69fa      	ldr	r2, [r7, #28]
 800d6dc:	429a      	cmp	r2, r3
 800d6de:	d307      	bcc.n	800d6f0 <create_chain+0x88>
				ncl = 2;
 800d6e0:	2302      	movs	r3, #2
 800d6e2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d6e4:	69fa      	ldr	r2, [r7, #28]
 800d6e6:	69bb      	ldr	r3, [r7, #24]
 800d6e8:	429a      	cmp	r2, r3
 800d6ea:	d901      	bls.n	800d6f0 <create_chain+0x88>
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	e04f      	b.n	800d790 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d6f0:	69f9      	ldr	r1, [r7, #28]
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f7ff fdbf 	bl	800d276 <get_fat>
 800d6f8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d00e      	beq.n	800d71e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	2b01      	cmp	r3, #1
 800d704:	d003      	beq.n	800d70e <create_chain+0xa6>
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d70c:	d101      	bne.n	800d712 <create_chain+0xaa>
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	e03e      	b.n	800d790 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d712:	69fa      	ldr	r2, [r7, #28]
 800d714:	69bb      	ldr	r3, [r7, #24]
 800d716:	429a      	cmp	r2, r3
 800d718:	d1da      	bne.n	800d6d0 <create_chain+0x68>
 800d71a:	2300      	movs	r3, #0
 800d71c:	e038      	b.n	800d790 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d71e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d720:	f04f 32ff 	mov.w	r2, #4294967295
 800d724:	69f9      	ldr	r1, [r7, #28]
 800d726:	6938      	ldr	r0, [r7, #16]
 800d728:	f7ff fe4d 	bl	800d3c6 <put_fat>
 800d72c:	4603      	mov	r3, r0
 800d72e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d730:	7dfb      	ldrb	r3, [r7, #23]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d109      	bne.n	800d74a <create_chain+0xe2>
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d006      	beq.n	800d74a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d73c:	69fa      	ldr	r2, [r7, #28]
 800d73e:	6839      	ldr	r1, [r7, #0]
 800d740:	6938      	ldr	r0, [r7, #16]
 800d742:	f7ff fe40 	bl	800d3c6 <put_fat>
 800d746:	4603      	mov	r3, r0
 800d748:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d74a:	7dfb      	ldrb	r3, [r7, #23]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d116      	bne.n	800d77e <create_chain+0x116>
		fs->last_clst = ncl;
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	69fa      	ldr	r2, [r7, #28]
 800d754:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d756:	693b      	ldr	r3, [r7, #16]
 800d758:	691a      	ldr	r2, [r3, #16]
 800d75a:	693b      	ldr	r3, [r7, #16]
 800d75c:	695b      	ldr	r3, [r3, #20]
 800d75e:	3b02      	subs	r3, #2
 800d760:	429a      	cmp	r2, r3
 800d762:	d804      	bhi.n	800d76e <create_chain+0x106>
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	691b      	ldr	r3, [r3, #16]
 800d768:	1e5a      	subs	r2, r3, #1
 800d76a:	693b      	ldr	r3, [r7, #16]
 800d76c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800d76e:	693b      	ldr	r3, [r7, #16]
 800d770:	791b      	ldrb	r3, [r3, #4]
 800d772:	f043 0301 	orr.w	r3, r3, #1
 800d776:	b2da      	uxtb	r2, r3
 800d778:	693b      	ldr	r3, [r7, #16]
 800d77a:	711a      	strb	r2, [r3, #4]
 800d77c:	e007      	b.n	800d78e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d77e:	7dfb      	ldrb	r3, [r7, #23]
 800d780:	2b01      	cmp	r3, #1
 800d782:	d102      	bne.n	800d78a <create_chain+0x122>
 800d784:	f04f 33ff 	mov.w	r3, #4294967295
 800d788:	e000      	b.n	800d78c <create_chain+0x124>
 800d78a:	2301      	movs	r3, #1
 800d78c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d78e:	69fb      	ldr	r3, [r7, #28]
}
 800d790:	4618      	mov	r0, r3
 800d792:	3720      	adds	r7, #32
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}

0800d798 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d798:	b480      	push	{r7}
 800d79a:	b087      	sub	sp, #28
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ac:	3304      	adds	r3, #4
 800d7ae:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	0a5b      	lsrs	r3, r3, #9
 800d7b4:	68fa      	ldr	r2, [r7, #12]
 800d7b6:	8952      	ldrh	r2, [r2, #10]
 800d7b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d7bc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d7be:	693b      	ldr	r3, [r7, #16]
 800d7c0:	1d1a      	adds	r2, r3, #4
 800d7c2:	613a      	str	r2, [r7, #16]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d101      	bne.n	800d7d2 <clmt_clust+0x3a>
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	e010      	b.n	800d7f4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d7d2:	697a      	ldr	r2, [r7, #20]
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	429a      	cmp	r2, r3
 800d7d8:	d307      	bcc.n	800d7ea <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d7da:	697a      	ldr	r2, [r7, #20]
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	1ad3      	subs	r3, r2, r3
 800d7e0:	617b      	str	r3, [r7, #20]
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	3304      	adds	r3, #4
 800d7e6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d7e8:	e7e9      	b.n	800d7be <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d7ea:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d7ec:	693b      	ldr	r3, [r7, #16]
 800d7ee:	681a      	ldr	r2, [r3, #0]
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	4413      	add	r3, r2
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	371c      	adds	r7, #28
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fe:	4770      	bx	lr

0800d800 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b086      	sub	sp, #24
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
 800d808:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d816:	d204      	bcs.n	800d822 <dir_sdi+0x22>
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	f003 031f 	and.w	r3, r3, #31
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d001      	beq.n	800d826 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d822:	2302      	movs	r3, #2
 800d824:	e063      	b.n	800d8ee <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	683a      	ldr	r2, [r7, #0]
 800d82a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	689b      	ldr	r3, [r3, #8]
 800d830:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d106      	bne.n	800d846 <dir_sdi+0x46>
 800d838:	693b      	ldr	r3, [r7, #16]
 800d83a:	781b      	ldrb	r3, [r3, #0]
 800d83c:	2b02      	cmp	r3, #2
 800d83e:	d902      	bls.n	800d846 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d840:	693b      	ldr	r3, [r7, #16]
 800d842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d844:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d10c      	bne.n	800d866 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	095b      	lsrs	r3, r3, #5
 800d850:	693a      	ldr	r2, [r7, #16]
 800d852:	8912      	ldrh	r2, [r2, #8]
 800d854:	4293      	cmp	r3, r2
 800d856:	d301      	bcc.n	800d85c <dir_sdi+0x5c>
 800d858:	2302      	movs	r3, #2
 800d85a:	e048      	b.n	800d8ee <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d85c:	693b      	ldr	r3, [r7, #16]
 800d85e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	61da      	str	r2, [r3, #28]
 800d864:	e029      	b.n	800d8ba <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d866:	693b      	ldr	r3, [r7, #16]
 800d868:	895b      	ldrh	r3, [r3, #10]
 800d86a:	025b      	lsls	r3, r3, #9
 800d86c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d86e:	e019      	b.n	800d8a4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	6979      	ldr	r1, [r7, #20]
 800d874:	4618      	mov	r0, r3
 800d876:	f7ff fcfe 	bl	800d276 <get_fat>
 800d87a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d882:	d101      	bne.n	800d888 <dir_sdi+0x88>
 800d884:	2301      	movs	r3, #1
 800d886:	e032      	b.n	800d8ee <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	2b01      	cmp	r3, #1
 800d88c:	d904      	bls.n	800d898 <dir_sdi+0x98>
 800d88e:	693b      	ldr	r3, [r7, #16]
 800d890:	695b      	ldr	r3, [r3, #20]
 800d892:	697a      	ldr	r2, [r7, #20]
 800d894:	429a      	cmp	r2, r3
 800d896:	d301      	bcc.n	800d89c <dir_sdi+0x9c>
 800d898:	2302      	movs	r3, #2
 800d89a:	e028      	b.n	800d8ee <dir_sdi+0xee>
			ofs -= csz;
 800d89c:	683a      	ldr	r2, [r7, #0]
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	1ad3      	subs	r3, r2, r3
 800d8a2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d8a4:	683a      	ldr	r2, [r7, #0]
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d2e1      	bcs.n	800d870 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d8ac:	6979      	ldr	r1, [r7, #20]
 800d8ae:	6938      	ldr	r0, [r7, #16]
 800d8b0:	f7ff fcc2 	bl	800d238 <clust2sect>
 800d8b4:	4602      	mov	r2, r0
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	697a      	ldr	r2, [r7, #20]
 800d8be:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	69db      	ldr	r3, [r3, #28]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d101      	bne.n	800d8cc <dir_sdi+0xcc>
 800d8c8:	2302      	movs	r3, #2
 800d8ca:	e010      	b.n	800d8ee <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	69da      	ldr	r2, [r3, #28]
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	0a5b      	lsrs	r3, r3, #9
 800d8d4:	441a      	add	r2, r3
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d8da:	693b      	ldr	r3, [r7, #16]
 800d8dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8e6:	441a      	add	r2, r3
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d8ec:	2300      	movs	r3, #0
}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	3718      	adds	r7, #24
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}

0800d8f6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d8f6:	b580      	push	{r7, lr}
 800d8f8:	b086      	sub	sp, #24
 800d8fa:	af00      	add	r7, sp, #0
 800d8fc:	6078      	str	r0, [r7, #4]
 800d8fe:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	695b      	ldr	r3, [r3, #20]
 800d90a:	3320      	adds	r3, #32
 800d90c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	69db      	ldr	r3, [r3, #28]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d003      	beq.n	800d91e <dir_next+0x28>
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d91c:	d301      	bcc.n	800d922 <dir_next+0x2c>
 800d91e:	2304      	movs	r3, #4
 800d920:	e0aa      	b.n	800da78 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d928:	2b00      	cmp	r3, #0
 800d92a:	f040 8098 	bne.w	800da5e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	69db      	ldr	r3, [r3, #28]
 800d932:	1c5a      	adds	r2, r3, #1
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	699b      	ldr	r3, [r3, #24]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d10b      	bne.n	800d958 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	095b      	lsrs	r3, r3, #5
 800d944:	68fa      	ldr	r2, [r7, #12]
 800d946:	8912      	ldrh	r2, [r2, #8]
 800d948:	4293      	cmp	r3, r2
 800d94a:	f0c0 8088 	bcc.w	800da5e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	2200      	movs	r2, #0
 800d952:	61da      	str	r2, [r3, #28]
 800d954:	2304      	movs	r3, #4
 800d956:	e08f      	b.n	800da78 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	0a5b      	lsrs	r3, r3, #9
 800d95c:	68fa      	ldr	r2, [r7, #12]
 800d95e:	8952      	ldrh	r2, [r2, #10]
 800d960:	3a01      	subs	r2, #1
 800d962:	4013      	ands	r3, r2
 800d964:	2b00      	cmp	r3, #0
 800d966:	d17a      	bne.n	800da5e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d968:	687a      	ldr	r2, [r7, #4]
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	699b      	ldr	r3, [r3, #24]
 800d96e:	4619      	mov	r1, r3
 800d970:	4610      	mov	r0, r2
 800d972:	f7ff fc80 	bl	800d276 <get_fat>
 800d976:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	2b01      	cmp	r3, #1
 800d97c:	d801      	bhi.n	800d982 <dir_next+0x8c>
 800d97e:	2302      	movs	r3, #2
 800d980:	e07a      	b.n	800da78 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d988:	d101      	bne.n	800d98e <dir_next+0x98>
 800d98a:	2301      	movs	r3, #1
 800d98c:	e074      	b.n	800da78 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	695b      	ldr	r3, [r3, #20]
 800d992:	697a      	ldr	r2, [r7, #20]
 800d994:	429a      	cmp	r2, r3
 800d996:	d358      	bcc.n	800da4a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d104      	bne.n	800d9a8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	61da      	str	r2, [r3, #28]
 800d9a4:	2304      	movs	r3, #4
 800d9a6:	e067      	b.n	800da78 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d9a8:	687a      	ldr	r2, [r7, #4]
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	699b      	ldr	r3, [r3, #24]
 800d9ae:	4619      	mov	r1, r3
 800d9b0:	4610      	mov	r0, r2
 800d9b2:	f7ff fe59 	bl	800d668 <create_chain>
 800d9b6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d9b8:	697b      	ldr	r3, [r7, #20]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d101      	bne.n	800d9c2 <dir_next+0xcc>
 800d9be:	2307      	movs	r3, #7
 800d9c0:	e05a      	b.n	800da78 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	2b01      	cmp	r3, #1
 800d9c6:	d101      	bne.n	800d9cc <dir_next+0xd6>
 800d9c8:	2302      	movs	r3, #2
 800d9ca:	e055      	b.n	800da78 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d9cc:	697b      	ldr	r3, [r7, #20]
 800d9ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9d2:	d101      	bne.n	800d9d8 <dir_next+0xe2>
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	e04f      	b.n	800da78 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d9d8:	68f8      	ldr	r0, [r7, #12]
 800d9da:	f7ff fb4d 	bl	800d078 <sync_window>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d001      	beq.n	800d9e8 <dir_next+0xf2>
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	e047      	b.n	800da78 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	3330      	adds	r3, #48	; 0x30
 800d9ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d9f0:	2100      	movs	r1, #0
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f7ff f977 	bl	800cce6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	613b      	str	r3, [r7, #16]
 800d9fc:	6979      	ldr	r1, [r7, #20]
 800d9fe:	68f8      	ldr	r0, [r7, #12]
 800da00:	f7ff fc1a 	bl	800d238 <clust2sect>
 800da04:	4602      	mov	r2, r0
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	62da      	str	r2, [r3, #44]	; 0x2c
 800da0a:	e012      	b.n	800da32 <dir_next+0x13c>
						fs->wflag = 1;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	2201      	movs	r2, #1
 800da10:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800da12:	68f8      	ldr	r0, [r7, #12]
 800da14:	f7ff fb30 	bl	800d078 <sync_window>
 800da18:	4603      	mov	r3, r0
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d001      	beq.n	800da22 <dir_next+0x12c>
 800da1e:	2301      	movs	r3, #1
 800da20:	e02a      	b.n	800da78 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800da22:	693b      	ldr	r3, [r7, #16]
 800da24:	3301      	adds	r3, #1
 800da26:	613b      	str	r3, [r7, #16]
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da2c:	1c5a      	adds	r2, r3, #1
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	62da      	str	r2, [r3, #44]	; 0x2c
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	895b      	ldrh	r3, [r3, #10]
 800da36:	461a      	mov	r2, r3
 800da38:	693b      	ldr	r3, [r7, #16]
 800da3a:	4293      	cmp	r3, r2
 800da3c:	d3e6      	bcc.n	800da0c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da42:	693b      	ldr	r3, [r7, #16]
 800da44:	1ad2      	subs	r2, r2, r3
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	697a      	ldr	r2, [r7, #20]
 800da4e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800da50:	6979      	ldr	r1, [r7, #20]
 800da52:	68f8      	ldr	r0, [r7, #12]
 800da54:	f7ff fbf0 	bl	800d238 <clust2sect>
 800da58:	4602      	mov	r2, r0
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	68ba      	ldr	r2, [r7, #8]
 800da62:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800da6a:	68bb      	ldr	r3, [r7, #8]
 800da6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da70:	441a      	add	r2, r3
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800da76:	2300      	movs	r3, #0
}
 800da78:	4618      	mov	r0, r3
 800da7a:	3718      	adds	r7, #24
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}

0800da80 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b086      	sub	sp, #24
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
 800da88:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800da90:	2100      	movs	r1, #0
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f7ff feb4 	bl	800d800 <dir_sdi>
 800da98:	4603      	mov	r3, r0
 800da9a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800da9c:	7dfb      	ldrb	r3, [r7, #23]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d12b      	bne.n	800dafa <dir_alloc+0x7a>
		n = 0;
 800daa2:	2300      	movs	r3, #0
 800daa4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	69db      	ldr	r3, [r3, #28]
 800daaa:	4619      	mov	r1, r3
 800daac:	68f8      	ldr	r0, [r7, #12]
 800daae:	f7ff fb27 	bl	800d100 <move_window>
 800dab2:	4603      	mov	r3, r0
 800dab4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dab6:	7dfb      	ldrb	r3, [r7, #23]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d11d      	bne.n	800daf8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6a1b      	ldr	r3, [r3, #32]
 800dac0:	781b      	ldrb	r3, [r3, #0]
 800dac2:	2be5      	cmp	r3, #229	; 0xe5
 800dac4:	d004      	beq.n	800dad0 <dir_alloc+0x50>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6a1b      	ldr	r3, [r3, #32]
 800daca:	781b      	ldrb	r3, [r3, #0]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d107      	bne.n	800dae0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800dad0:	693b      	ldr	r3, [r7, #16]
 800dad2:	3301      	adds	r3, #1
 800dad4:	613b      	str	r3, [r7, #16]
 800dad6:	693a      	ldr	r2, [r7, #16]
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	429a      	cmp	r2, r3
 800dadc:	d102      	bne.n	800dae4 <dir_alloc+0x64>
 800dade:	e00c      	b.n	800dafa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800dae0:	2300      	movs	r3, #0
 800dae2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800dae4:	2101      	movs	r1, #1
 800dae6:	6878      	ldr	r0, [r7, #4]
 800dae8:	f7ff ff05 	bl	800d8f6 <dir_next>
 800daec:	4603      	mov	r3, r0
 800daee:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800daf0:	7dfb      	ldrb	r3, [r7, #23]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d0d7      	beq.n	800daa6 <dir_alloc+0x26>
 800daf6:	e000      	b.n	800dafa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800daf8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800dafa:	7dfb      	ldrb	r3, [r7, #23]
 800dafc:	2b04      	cmp	r3, #4
 800dafe:	d101      	bne.n	800db04 <dir_alloc+0x84>
 800db00:	2307      	movs	r3, #7
 800db02:	75fb      	strb	r3, [r7, #23]
	return res;
 800db04:	7dfb      	ldrb	r3, [r7, #23]
}
 800db06:	4618      	mov	r0, r3
 800db08:	3718      	adds	r7, #24
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}

0800db0e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800db0e:	b580      	push	{r7, lr}
 800db10:	b084      	sub	sp, #16
 800db12:	af00      	add	r7, sp, #0
 800db14:	6078      	str	r0, [r7, #4]
 800db16:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	331a      	adds	r3, #26
 800db1c:	4618      	mov	r0, r3
 800db1e:	f7ff f83f 	bl	800cba0 <ld_word>
 800db22:	4603      	mov	r3, r0
 800db24:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	781b      	ldrb	r3, [r3, #0]
 800db2a:	2b03      	cmp	r3, #3
 800db2c:	d109      	bne.n	800db42 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	3314      	adds	r3, #20
 800db32:	4618      	mov	r0, r3
 800db34:	f7ff f834 	bl	800cba0 <ld_word>
 800db38:	4603      	mov	r3, r0
 800db3a:	041b      	lsls	r3, r3, #16
 800db3c:	68fa      	ldr	r2, [r7, #12]
 800db3e:	4313      	orrs	r3, r2
 800db40:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800db42:	68fb      	ldr	r3, [r7, #12]
}
 800db44:	4618      	mov	r0, r3
 800db46:	3710      	adds	r7, #16
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}

0800db4c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b084      	sub	sp, #16
 800db50:	af00      	add	r7, sp, #0
 800db52:	60f8      	str	r0, [r7, #12]
 800db54:	60b9      	str	r1, [r7, #8]
 800db56:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	331a      	adds	r3, #26
 800db5c:	687a      	ldr	r2, [r7, #4]
 800db5e:	b292      	uxth	r2, r2
 800db60:	4611      	mov	r1, r2
 800db62:	4618      	mov	r0, r3
 800db64:	f7ff f857 	bl	800cc16 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	781b      	ldrb	r3, [r3, #0]
 800db6c:	2b03      	cmp	r3, #3
 800db6e:	d109      	bne.n	800db84 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800db70:	68bb      	ldr	r3, [r7, #8]
 800db72:	f103 0214 	add.w	r2, r3, #20
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	0c1b      	lsrs	r3, r3, #16
 800db7a:	b29b      	uxth	r3, r3
 800db7c:	4619      	mov	r1, r3
 800db7e:	4610      	mov	r0, r2
 800db80:	f7ff f849 	bl	800cc16 <st_word>
	}
}
 800db84:	bf00      	nop
 800db86:	3710      	adds	r7, #16
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd80      	pop	{r7, pc}

0800db8c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b086      	sub	sp, #24
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
 800db94:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800db96:	2304      	movs	r3, #4
 800db98:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800dba0:	e03c      	b.n	800dc1c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	69db      	ldr	r3, [r3, #28]
 800dba6:	4619      	mov	r1, r3
 800dba8:	6938      	ldr	r0, [r7, #16]
 800dbaa:	f7ff faa9 	bl	800d100 <move_window>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800dbb2:	7dfb      	ldrb	r3, [r7, #23]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d136      	bne.n	800dc26 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6a1b      	ldr	r3, [r3, #32]
 800dbbc:	781b      	ldrb	r3, [r3, #0]
 800dbbe:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800dbc0:	7bfb      	ldrb	r3, [r7, #15]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d102      	bne.n	800dbcc <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800dbc6:	2304      	movs	r3, #4
 800dbc8:	75fb      	strb	r3, [r7, #23]
 800dbca:	e031      	b.n	800dc30 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	6a1b      	ldr	r3, [r3, #32]
 800dbd0:	330b      	adds	r3, #11
 800dbd2:	781b      	ldrb	r3, [r3, #0]
 800dbd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dbd8:	73bb      	strb	r3, [r7, #14]
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	7bba      	ldrb	r2, [r7, #14]
 800dbde:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800dbe0:	7bfb      	ldrb	r3, [r7, #15]
 800dbe2:	2be5      	cmp	r3, #229	; 0xe5
 800dbe4:	d011      	beq.n	800dc0a <dir_read+0x7e>
 800dbe6:	7bfb      	ldrb	r3, [r7, #15]
 800dbe8:	2b2e      	cmp	r3, #46	; 0x2e
 800dbea:	d00e      	beq.n	800dc0a <dir_read+0x7e>
 800dbec:	7bbb      	ldrb	r3, [r7, #14]
 800dbee:	2b0f      	cmp	r3, #15
 800dbf0:	d00b      	beq.n	800dc0a <dir_read+0x7e>
 800dbf2:	7bbb      	ldrb	r3, [r7, #14]
 800dbf4:	f023 0320 	bic.w	r3, r3, #32
 800dbf8:	2b08      	cmp	r3, #8
 800dbfa:	bf0c      	ite	eq
 800dbfc:	2301      	moveq	r3, #1
 800dbfe:	2300      	movne	r3, #0
 800dc00:	b2db      	uxtb	r3, r3
 800dc02:	461a      	mov	r2, r3
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	4293      	cmp	r3, r2
 800dc08:	d00f      	beq.n	800dc2a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800dc0a:	2100      	movs	r1, #0
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f7ff fe72 	bl	800d8f6 <dir_next>
 800dc12:	4603      	mov	r3, r0
 800dc14:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800dc16:	7dfb      	ldrb	r3, [r7, #23]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d108      	bne.n	800dc2e <dir_read+0xa2>
	while (dp->sect) {
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	69db      	ldr	r3, [r3, #28]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d1be      	bne.n	800dba2 <dir_read+0x16>
 800dc24:	e004      	b.n	800dc30 <dir_read+0xa4>
		if (res != FR_OK) break;
 800dc26:	bf00      	nop
 800dc28:	e002      	b.n	800dc30 <dir_read+0xa4>
				break;
 800dc2a:	bf00      	nop
 800dc2c:	e000      	b.n	800dc30 <dir_read+0xa4>
		if (res != FR_OK) break;
 800dc2e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800dc30:	7dfb      	ldrb	r3, [r7, #23]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d002      	beq.n	800dc3c <dir_read+0xb0>
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2200      	movs	r2, #0
 800dc3a:	61da      	str	r2, [r3, #28]
	return res;
 800dc3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3718      	adds	r7, #24
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}

0800dc46 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800dc46:	b580      	push	{r7, lr}
 800dc48:	b086      	sub	sp, #24
 800dc4a:	af00      	add	r7, sp, #0
 800dc4c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800dc54:	2100      	movs	r1, #0
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f7ff fdd2 	bl	800d800 <dir_sdi>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800dc60:	7dfb      	ldrb	r3, [r7, #23]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d001      	beq.n	800dc6a <dir_find+0x24>
 800dc66:	7dfb      	ldrb	r3, [r7, #23]
 800dc68:	e03e      	b.n	800dce8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	69db      	ldr	r3, [r3, #28]
 800dc6e:	4619      	mov	r1, r3
 800dc70:	6938      	ldr	r0, [r7, #16]
 800dc72:	f7ff fa45 	bl	800d100 <move_window>
 800dc76:	4603      	mov	r3, r0
 800dc78:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800dc7a:	7dfb      	ldrb	r3, [r7, #23]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d12f      	bne.n	800dce0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	6a1b      	ldr	r3, [r3, #32]
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800dc88:	7bfb      	ldrb	r3, [r7, #15]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d102      	bne.n	800dc94 <dir_find+0x4e>
 800dc8e:	2304      	movs	r3, #4
 800dc90:	75fb      	strb	r3, [r7, #23]
 800dc92:	e028      	b.n	800dce6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	6a1b      	ldr	r3, [r3, #32]
 800dc98:	330b      	adds	r3, #11
 800dc9a:	781b      	ldrb	r3, [r3, #0]
 800dc9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dca0:	b2da      	uxtb	r2, r3
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	6a1b      	ldr	r3, [r3, #32]
 800dcaa:	330b      	adds	r3, #11
 800dcac:	781b      	ldrb	r3, [r3, #0]
 800dcae:	f003 0308 	and.w	r3, r3, #8
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d10a      	bne.n	800dccc <dir_find+0x86>
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	6a18      	ldr	r0, [r3, #32]
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	3324      	adds	r3, #36	; 0x24
 800dcbe:	220b      	movs	r2, #11
 800dcc0:	4619      	mov	r1, r3
 800dcc2:	f7ff f82b 	bl	800cd1c <mem_cmp>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d00b      	beq.n	800dce4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800dccc:	2100      	movs	r1, #0
 800dcce:	6878      	ldr	r0, [r7, #4]
 800dcd0:	f7ff fe11 	bl	800d8f6 <dir_next>
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800dcd8:	7dfb      	ldrb	r3, [r7, #23]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d0c5      	beq.n	800dc6a <dir_find+0x24>
 800dcde:	e002      	b.n	800dce6 <dir_find+0xa0>
		if (res != FR_OK) break;
 800dce0:	bf00      	nop
 800dce2:	e000      	b.n	800dce6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800dce4:	bf00      	nop

	return res;
 800dce6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dce8:	4618      	mov	r0, r3
 800dcea:	3718      	adds	r7, #24
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}

0800dcf0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b084      	sub	sp, #16
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800dcfe:	2101      	movs	r1, #1
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f7ff febd 	bl	800da80 <dir_alloc>
 800dd06:	4603      	mov	r3, r0
 800dd08:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800dd0a:	7bfb      	ldrb	r3, [r7, #15]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d11c      	bne.n	800dd4a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	69db      	ldr	r3, [r3, #28]
 800dd14:	4619      	mov	r1, r3
 800dd16:	68b8      	ldr	r0, [r7, #8]
 800dd18:	f7ff f9f2 	bl	800d100 <move_window>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dd20:	7bfb      	ldrb	r3, [r7, #15]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d111      	bne.n	800dd4a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	6a1b      	ldr	r3, [r3, #32]
 800dd2a:	2220      	movs	r2, #32
 800dd2c:	2100      	movs	r1, #0
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f7fe ffd9 	bl	800cce6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	6a18      	ldr	r0, [r3, #32]
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	3324      	adds	r3, #36	; 0x24
 800dd3c:	220b      	movs	r2, #11
 800dd3e:	4619      	mov	r1, r3
 800dd40:	f7fe ffb0 	bl	800cca4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	2201      	movs	r2, #1
 800dd48:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800dd4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	3710      	adds	r7, #16
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd80      	pop	{r7, pc}

0800dd54 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b086      	sub	sp, #24
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
 800dd5c:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	2200      	movs	r2, #0
 800dd62:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	69db      	ldr	r3, [r3, #28]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d04e      	beq.n	800de0a <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	613b      	str	r3, [r7, #16]
 800dd70:	693b      	ldr	r3, [r7, #16]
 800dd72:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800dd74:	e021      	b.n	800ddba <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	6a1a      	ldr	r2, [r3, #32]
 800dd7a:	697b      	ldr	r3, [r7, #20]
 800dd7c:	1c59      	adds	r1, r3, #1
 800dd7e:	6179      	str	r1, [r7, #20]
 800dd80:	4413      	add	r3, r2
 800dd82:	781b      	ldrb	r3, [r3, #0]
 800dd84:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800dd86:	7bfb      	ldrb	r3, [r7, #15]
 800dd88:	2b20      	cmp	r3, #32
 800dd8a:	d100      	bne.n	800dd8e <get_fileinfo+0x3a>
 800dd8c:	e015      	b.n	800ddba <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800dd8e:	7bfb      	ldrb	r3, [r7, #15]
 800dd90:	2b05      	cmp	r3, #5
 800dd92:	d101      	bne.n	800dd98 <get_fileinfo+0x44>
 800dd94:	23e5      	movs	r3, #229	; 0xe5
 800dd96:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800dd98:	697b      	ldr	r3, [r7, #20]
 800dd9a:	2b09      	cmp	r3, #9
 800dd9c:	d106      	bne.n	800ddac <get_fileinfo+0x58>
 800dd9e:	693b      	ldr	r3, [r7, #16]
 800dda0:	1c5a      	adds	r2, r3, #1
 800dda2:	613a      	str	r2, [r7, #16]
 800dda4:	683a      	ldr	r2, [r7, #0]
 800dda6:	4413      	add	r3, r2
 800dda8:	222e      	movs	r2, #46	; 0x2e
 800ddaa:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800ddac:	693b      	ldr	r3, [r7, #16]
 800ddae:	1c5a      	adds	r2, r3, #1
 800ddb0:	613a      	str	r2, [r7, #16]
 800ddb2:	683a      	ldr	r2, [r7, #0]
 800ddb4:	4413      	add	r3, r2
 800ddb6:	7bfa      	ldrb	r2, [r7, #15]
 800ddb8:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	2b0a      	cmp	r3, #10
 800ddbe:	d9da      	bls.n	800dd76 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800ddc0:	683a      	ldr	r2, [r7, #0]
 800ddc2:	693b      	ldr	r3, [r7, #16]
 800ddc4:	4413      	add	r3, r2
 800ddc6:	3309      	adds	r3, #9
 800ddc8:	2200      	movs	r2, #0
 800ddca:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	6a1b      	ldr	r3, [r3, #32]
 800ddd0:	7ada      	ldrb	r2, [r3, #11]
 800ddd2:	683b      	ldr	r3, [r7, #0]
 800ddd4:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6a1b      	ldr	r3, [r3, #32]
 800ddda:	331c      	adds	r3, #28
 800dddc:	4618      	mov	r0, r3
 800ddde:	f7fe fef7 	bl	800cbd0 <ld_dword>
 800dde2:	4602      	mov	r2, r0
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	6a1b      	ldr	r3, [r3, #32]
 800ddec:	3316      	adds	r3, #22
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f7fe feee 	bl	800cbd0 <ld_dword>
 800ddf4:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	b29a      	uxth	r2, r3
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	80da      	strh	r2, [r3, #6]
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	0c1b      	lsrs	r3, r3, #16
 800de02:	b29a      	uxth	r2, r3
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	809a      	strh	r2, [r3, #4]
 800de08:	e000      	b.n	800de0c <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800de0a:	bf00      	nop
}
 800de0c:	3718      	adds	r7, #24
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}
	...

0800de14 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b088      	sub	sp, #32
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
 800de1c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	60fb      	str	r3, [r7, #12]
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	3324      	adds	r3, #36	; 0x24
 800de28:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800de2a:	220b      	movs	r2, #11
 800de2c:	2120      	movs	r1, #32
 800de2e:	68b8      	ldr	r0, [r7, #8]
 800de30:	f7fe ff59 	bl	800cce6 <mem_set>
	si = i = 0; ni = 8;
 800de34:	2300      	movs	r3, #0
 800de36:	613b      	str	r3, [r7, #16]
 800de38:	693b      	ldr	r3, [r7, #16]
 800de3a:	61fb      	str	r3, [r7, #28]
 800de3c:	2308      	movs	r3, #8
 800de3e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800de40:	69fb      	ldr	r3, [r7, #28]
 800de42:	1c5a      	adds	r2, r3, #1
 800de44:	61fa      	str	r2, [r7, #28]
 800de46:	68fa      	ldr	r2, [r7, #12]
 800de48:	4413      	add	r3, r2
 800de4a:	781b      	ldrb	r3, [r3, #0]
 800de4c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800de4e:	7efb      	ldrb	r3, [r7, #27]
 800de50:	2b20      	cmp	r3, #32
 800de52:	d94e      	bls.n	800def2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800de54:	7efb      	ldrb	r3, [r7, #27]
 800de56:	2b2f      	cmp	r3, #47	; 0x2f
 800de58:	d006      	beq.n	800de68 <create_name+0x54>
 800de5a:	7efb      	ldrb	r3, [r7, #27]
 800de5c:	2b5c      	cmp	r3, #92	; 0x5c
 800de5e:	d110      	bne.n	800de82 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800de60:	e002      	b.n	800de68 <create_name+0x54>
 800de62:	69fb      	ldr	r3, [r7, #28]
 800de64:	3301      	adds	r3, #1
 800de66:	61fb      	str	r3, [r7, #28]
 800de68:	68fa      	ldr	r2, [r7, #12]
 800de6a:	69fb      	ldr	r3, [r7, #28]
 800de6c:	4413      	add	r3, r2
 800de6e:	781b      	ldrb	r3, [r3, #0]
 800de70:	2b2f      	cmp	r3, #47	; 0x2f
 800de72:	d0f6      	beq.n	800de62 <create_name+0x4e>
 800de74:	68fa      	ldr	r2, [r7, #12]
 800de76:	69fb      	ldr	r3, [r7, #28]
 800de78:	4413      	add	r3, r2
 800de7a:	781b      	ldrb	r3, [r3, #0]
 800de7c:	2b5c      	cmp	r3, #92	; 0x5c
 800de7e:	d0f0      	beq.n	800de62 <create_name+0x4e>
			break;
 800de80:	e038      	b.n	800def4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800de82:	7efb      	ldrb	r3, [r7, #27]
 800de84:	2b2e      	cmp	r3, #46	; 0x2e
 800de86:	d003      	beq.n	800de90 <create_name+0x7c>
 800de88:	693a      	ldr	r2, [r7, #16]
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	429a      	cmp	r2, r3
 800de8e:	d30c      	bcc.n	800deaa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800de90:	697b      	ldr	r3, [r7, #20]
 800de92:	2b0b      	cmp	r3, #11
 800de94:	d002      	beq.n	800de9c <create_name+0x88>
 800de96:	7efb      	ldrb	r3, [r7, #27]
 800de98:	2b2e      	cmp	r3, #46	; 0x2e
 800de9a:	d001      	beq.n	800dea0 <create_name+0x8c>
 800de9c:	2306      	movs	r3, #6
 800de9e:	e044      	b.n	800df2a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800dea0:	2308      	movs	r3, #8
 800dea2:	613b      	str	r3, [r7, #16]
 800dea4:	230b      	movs	r3, #11
 800dea6:	617b      	str	r3, [r7, #20]
			continue;
 800dea8:	e022      	b.n	800def0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800deaa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	da04      	bge.n	800debc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800deb2:	7efb      	ldrb	r3, [r7, #27]
 800deb4:	3b80      	subs	r3, #128	; 0x80
 800deb6:	4a1f      	ldr	r2, [pc, #124]	; (800df34 <create_name+0x120>)
 800deb8:	5cd3      	ldrb	r3, [r2, r3]
 800deba:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800debc:	7efb      	ldrb	r3, [r7, #27]
 800debe:	4619      	mov	r1, r3
 800dec0:	481d      	ldr	r0, [pc, #116]	; (800df38 <create_name+0x124>)
 800dec2:	f7fe ff52 	bl	800cd6a <chk_chr>
 800dec6:	4603      	mov	r3, r0
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d001      	beq.n	800ded0 <create_name+0xbc>
 800decc:	2306      	movs	r3, #6
 800dece:	e02c      	b.n	800df2a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ded0:	7efb      	ldrb	r3, [r7, #27]
 800ded2:	2b60      	cmp	r3, #96	; 0x60
 800ded4:	d905      	bls.n	800dee2 <create_name+0xce>
 800ded6:	7efb      	ldrb	r3, [r7, #27]
 800ded8:	2b7a      	cmp	r3, #122	; 0x7a
 800deda:	d802      	bhi.n	800dee2 <create_name+0xce>
 800dedc:	7efb      	ldrb	r3, [r7, #27]
 800dede:	3b20      	subs	r3, #32
 800dee0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800dee2:	693b      	ldr	r3, [r7, #16]
 800dee4:	1c5a      	adds	r2, r3, #1
 800dee6:	613a      	str	r2, [r7, #16]
 800dee8:	68ba      	ldr	r2, [r7, #8]
 800deea:	4413      	add	r3, r2
 800deec:	7efa      	ldrb	r2, [r7, #27]
 800deee:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800def0:	e7a6      	b.n	800de40 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800def2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800def4:	68fa      	ldr	r2, [r7, #12]
 800def6:	69fb      	ldr	r3, [r7, #28]
 800def8:	441a      	add	r2, r3
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800defe:	693b      	ldr	r3, [r7, #16]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d101      	bne.n	800df08 <create_name+0xf4>
 800df04:	2306      	movs	r3, #6
 800df06:	e010      	b.n	800df2a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	781b      	ldrb	r3, [r3, #0]
 800df0c:	2be5      	cmp	r3, #229	; 0xe5
 800df0e:	d102      	bne.n	800df16 <create_name+0x102>
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	2205      	movs	r2, #5
 800df14:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800df16:	7efb      	ldrb	r3, [r7, #27]
 800df18:	2b20      	cmp	r3, #32
 800df1a:	d801      	bhi.n	800df20 <create_name+0x10c>
 800df1c:	2204      	movs	r2, #4
 800df1e:	e000      	b.n	800df22 <create_name+0x10e>
 800df20:	2200      	movs	r2, #0
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	330b      	adds	r3, #11
 800df26:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800df28:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800df2a:	4618      	mov	r0, r3
 800df2c:	3720      	adds	r7, #32
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}
 800df32:	bf00      	nop
 800df34:	08015450 	.word	0x08015450
 800df38:	080153a0 	.word	0x080153a0

0800df3c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b086      	sub	sp, #24
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
 800df44:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800df4a:	693b      	ldr	r3, [r7, #16]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800df50:	e002      	b.n	800df58 <follow_path+0x1c>
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	3301      	adds	r3, #1
 800df56:	603b      	str	r3, [r7, #0]
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	781b      	ldrb	r3, [r3, #0]
 800df5c:	2b2f      	cmp	r3, #47	; 0x2f
 800df5e:	d0f8      	beq.n	800df52 <follow_path+0x16>
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	781b      	ldrb	r3, [r3, #0]
 800df64:	2b5c      	cmp	r3, #92	; 0x5c
 800df66:	d0f4      	beq.n	800df52 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800df68:	693b      	ldr	r3, [r7, #16]
 800df6a:	2200      	movs	r2, #0
 800df6c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	781b      	ldrb	r3, [r3, #0]
 800df72:	2b1f      	cmp	r3, #31
 800df74:	d80a      	bhi.n	800df8c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	2280      	movs	r2, #128	; 0x80
 800df7a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800df7e:	2100      	movs	r1, #0
 800df80:	6878      	ldr	r0, [r7, #4]
 800df82:	f7ff fc3d 	bl	800d800 <dir_sdi>
 800df86:	4603      	mov	r3, r0
 800df88:	75fb      	strb	r3, [r7, #23]
 800df8a:	e043      	b.n	800e014 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800df8c:	463b      	mov	r3, r7
 800df8e:	4619      	mov	r1, r3
 800df90:	6878      	ldr	r0, [r7, #4]
 800df92:	f7ff ff3f 	bl	800de14 <create_name>
 800df96:	4603      	mov	r3, r0
 800df98:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800df9a:	7dfb      	ldrb	r3, [r7, #23]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d134      	bne.n	800e00a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800dfa0:	6878      	ldr	r0, [r7, #4]
 800dfa2:	f7ff fe50 	bl	800dc46 <dir_find>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dfb0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800dfb2:	7dfb      	ldrb	r3, [r7, #23]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d00a      	beq.n	800dfce <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800dfb8:	7dfb      	ldrb	r3, [r7, #23]
 800dfba:	2b04      	cmp	r3, #4
 800dfbc:	d127      	bne.n	800e00e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800dfbe:	7afb      	ldrb	r3, [r7, #11]
 800dfc0:	f003 0304 	and.w	r3, r3, #4
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d122      	bne.n	800e00e <follow_path+0xd2>
 800dfc8:	2305      	movs	r3, #5
 800dfca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800dfcc:	e01f      	b.n	800e00e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dfce:	7afb      	ldrb	r3, [r7, #11]
 800dfd0:	f003 0304 	and.w	r3, r3, #4
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d11c      	bne.n	800e012 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800dfd8:	693b      	ldr	r3, [r7, #16]
 800dfda:	799b      	ldrb	r3, [r3, #6]
 800dfdc:	f003 0310 	and.w	r3, r3, #16
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d102      	bne.n	800dfea <follow_path+0xae>
				res = FR_NO_PATH; break;
 800dfe4:	2305      	movs	r3, #5
 800dfe6:	75fb      	strb	r3, [r7, #23]
 800dfe8:	e014      	b.n	800e014 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	695b      	ldr	r3, [r3, #20]
 800dff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dff8:	4413      	add	r3, r2
 800dffa:	4619      	mov	r1, r3
 800dffc:	68f8      	ldr	r0, [r7, #12]
 800dffe:	f7ff fd86 	bl	800db0e <ld_clust>
 800e002:	4602      	mov	r2, r0
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e008:	e7c0      	b.n	800df8c <follow_path+0x50>
			if (res != FR_OK) break;
 800e00a:	bf00      	nop
 800e00c:	e002      	b.n	800e014 <follow_path+0xd8>
				break;
 800e00e:	bf00      	nop
 800e010:	e000      	b.n	800e014 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e012:	bf00      	nop
			}
		}
	}

	return res;
 800e014:	7dfb      	ldrb	r3, [r7, #23]
}
 800e016:	4618      	mov	r0, r3
 800e018:	3718      	adds	r7, #24
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}

0800e01e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e01e:	b480      	push	{r7}
 800e020:	b087      	sub	sp, #28
 800e022:	af00      	add	r7, sp, #0
 800e024:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e026:	f04f 33ff 	mov.w	r3, #4294967295
 800e02a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d031      	beq.n	800e098 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	617b      	str	r3, [r7, #20]
 800e03a:	e002      	b.n	800e042 <get_ldnumber+0x24>
 800e03c:	697b      	ldr	r3, [r7, #20]
 800e03e:	3301      	adds	r3, #1
 800e040:	617b      	str	r3, [r7, #20]
 800e042:	697b      	ldr	r3, [r7, #20]
 800e044:	781b      	ldrb	r3, [r3, #0]
 800e046:	2b20      	cmp	r3, #32
 800e048:	d903      	bls.n	800e052 <get_ldnumber+0x34>
 800e04a:	697b      	ldr	r3, [r7, #20]
 800e04c:	781b      	ldrb	r3, [r3, #0]
 800e04e:	2b3a      	cmp	r3, #58	; 0x3a
 800e050:	d1f4      	bne.n	800e03c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e052:	697b      	ldr	r3, [r7, #20]
 800e054:	781b      	ldrb	r3, [r3, #0]
 800e056:	2b3a      	cmp	r3, #58	; 0x3a
 800e058:	d11c      	bne.n	800e094 <get_ldnumber+0x76>
			tp = *path;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	1c5a      	adds	r2, r3, #1
 800e064:	60fa      	str	r2, [r7, #12]
 800e066:	781b      	ldrb	r3, [r3, #0]
 800e068:	3b30      	subs	r3, #48	; 0x30
 800e06a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	2b09      	cmp	r3, #9
 800e070:	d80e      	bhi.n	800e090 <get_ldnumber+0x72>
 800e072:	68fa      	ldr	r2, [r7, #12]
 800e074:	697b      	ldr	r3, [r7, #20]
 800e076:	429a      	cmp	r2, r3
 800e078:	d10a      	bne.n	800e090 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e07a:	68bb      	ldr	r3, [r7, #8]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d107      	bne.n	800e090 <get_ldnumber+0x72>
					vol = (int)i;
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e084:	697b      	ldr	r3, [r7, #20]
 800e086:	3301      	adds	r3, #1
 800e088:	617b      	str	r3, [r7, #20]
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	697a      	ldr	r2, [r7, #20]
 800e08e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e090:	693b      	ldr	r3, [r7, #16]
 800e092:	e002      	b.n	800e09a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e094:	2300      	movs	r3, #0
 800e096:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e098:	693b      	ldr	r3, [r7, #16]
}
 800e09a:	4618      	mov	r0, r3
 800e09c:	371c      	adds	r7, #28
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a4:	4770      	bx	lr
	...

0800e0a8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b082      	sub	sp, #8
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
 800e0b0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	70da      	strb	r2, [r3, #3]
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f04f 32ff 	mov.w	r2, #4294967295
 800e0be:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e0c0:	6839      	ldr	r1, [r7, #0]
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f7ff f81c 	bl	800d100 <move_window>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d001      	beq.n	800e0d2 <check_fs+0x2a>
 800e0ce:	2304      	movs	r3, #4
 800e0d0:	e038      	b.n	800e144 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	3330      	adds	r3, #48	; 0x30
 800e0d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f7fe fd60 	bl	800cba0 <ld_word>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	461a      	mov	r2, r3
 800e0e4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e0e8:	429a      	cmp	r2, r3
 800e0ea:	d001      	beq.n	800e0f0 <check_fs+0x48>
 800e0ec:	2303      	movs	r3, #3
 800e0ee:	e029      	b.n	800e144 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e0f6:	2be9      	cmp	r3, #233	; 0xe9
 800e0f8:	d009      	beq.n	800e10e <check_fs+0x66>
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e100:	2beb      	cmp	r3, #235	; 0xeb
 800e102:	d11e      	bne.n	800e142 <check_fs+0x9a>
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800e10a:	2b90      	cmp	r3, #144	; 0x90
 800e10c:	d119      	bne.n	800e142 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	3330      	adds	r3, #48	; 0x30
 800e112:	3336      	adds	r3, #54	; 0x36
 800e114:	4618      	mov	r0, r3
 800e116:	f7fe fd5b 	bl	800cbd0 <ld_dword>
 800e11a:	4603      	mov	r3, r0
 800e11c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e120:	4a0a      	ldr	r2, [pc, #40]	; (800e14c <check_fs+0xa4>)
 800e122:	4293      	cmp	r3, r2
 800e124:	d101      	bne.n	800e12a <check_fs+0x82>
 800e126:	2300      	movs	r3, #0
 800e128:	e00c      	b.n	800e144 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	3330      	adds	r3, #48	; 0x30
 800e12e:	3352      	adds	r3, #82	; 0x52
 800e130:	4618      	mov	r0, r3
 800e132:	f7fe fd4d 	bl	800cbd0 <ld_dword>
 800e136:	4603      	mov	r3, r0
 800e138:	4a05      	ldr	r2, [pc, #20]	; (800e150 <check_fs+0xa8>)
 800e13a:	4293      	cmp	r3, r2
 800e13c:	d101      	bne.n	800e142 <check_fs+0x9a>
 800e13e:	2300      	movs	r3, #0
 800e140:	e000      	b.n	800e144 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e142:	2302      	movs	r3, #2
}
 800e144:	4618      	mov	r0, r3
 800e146:	3708      	adds	r7, #8
 800e148:	46bd      	mov	sp, r7
 800e14a:	bd80      	pop	{r7, pc}
 800e14c:	00544146 	.word	0x00544146
 800e150:	33544146 	.word	0x33544146

0800e154 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b096      	sub	sp, #88	; 0x58
 800e158:	af00      	add	r7, sp, #0
 800e15a:	60f8      	str	r0, [r7, #12]
 800e15c:	60b9      	str	r1, [r7, #8]
 800e15e:	4613      	mov	r3, r2
 800e160:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e162:	68bb      	ldr	r3, [r7, #8]
 800e164:	2200      	movs	r2, #0
 800e166:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e168:	68f8      	ldr	r0, [r7, #12]
 800e16a:	f7ff ff58 	bl	800e01e <get_ldnumber>
 800e16e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e172:	2b00      	cmp	r3, #0
 800e174:	da01      	bge.n	800e17a <find_volume+0x26>
 800e176:	230b      	movs	r3, #11
 800e178:	e22e      	b.n	800e5d8 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e17a:	4aa8      	ldr	r2, [pc, #672]	; (800e41c <find_volume+0x2c8>)
 800e17c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e17e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e182:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e186:	2b00      	cmp	r3, #0
 800e188:	d101      	bne.n	800e18e <find_volume+0x3a>
 800e18a:	230c      	movs	r3, #12
 800e18c:	e224      	b.n	800e5d8 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e192:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e194:	79fb      	ldrb	r3, [r7, #7]
 800e196:	f023 0301 	bic.w	r3, r3, #1
 800e19a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e19e:	781b      	ldrb	r3, [r3, #0]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d01a      	beq.n	800e1da <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1a6:	785b      	ldrb	r3, [r3, #1]
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	f7fe fc5b 	bl	800ca64 <disk_status>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e1b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e1b8:	f003 0301 	and.w	r3, r3, #1
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d10c      	bne.n	800e1da <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e1c0:	79fb      	ldrb	r3, [r7, #7]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d007      	beq.n	800e1d6 <find_volume+0x82>
 800e1c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e1ca:	f003 0304 	and.w	r3, r3, #4
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d001      	beq.n	800e1d6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e1d2:	230a      	movs	r3, #10
 800e1d4:	e200      	b.n	800e5d8 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	e1fe      	b.n	800e5d8 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1dc:	2200      	movs	r2, #0
 800e1de:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e1e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1e2:	b2da      	uxtb	r2, r3
 800e1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1e6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ea:	785b      	ldrb	r3, [r3, #1]
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f7fe fc53 	bl	800ca98 <disk_initialize>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e1f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e1fc:	f003 0301 	and.w	r3, r3, #1
 800e200:	2b00      	cmp	r3, #0
 800e202:	d001      	beq.n	800e208 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e204:	2303      	movs	r3, #3
 800e206:	e1e7      	b.n	800e5d8 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e208:	79fb      	ldrb	r3, [r7, #7]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d007      	beq.n	800e21e <find_volume+0xca>
 800e20e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e212:	f003 0304 	and.w	r3, r3, #4
 800e216:	2b00      	cmp	r3, #0
 800e218:	d001      	beq.n	800e21e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e21a:	230a      	movs	r3, #10
 800e21c:	e1dc      	b.n	800e5d8 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e21e:	2300      	movs	r3, #0
 800e220:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e222:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e224:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e226:	f7ff ff3f 	bl	800e0a8 <check_fs>
 800e22a:	4603      	mov	r3, r0
 800e22c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e230:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e234:	2b02      	cmp	r3, #2
 800e236:	d14b      	bne.n	800e2d0 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e238:	2300      	movs	r3, #0
 800e23a:	643b      	str	r3, [r7, #64]	; 0x40
 800e23c:	e01f      	b.n	800e27e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e240:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e246:	011b      	lsls	r3, r3, #4
 800e248:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e24c:	4413      	add	r3, r2
 800e24e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e252:	3304      	adds	r3, #4
 800e254:	781b      	ldrb	r3, [r3, #0]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d006      	beq.n	800e268 <find_volume+0x114>
 800e25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e25c:	3308      	adds	r3, #8
 800e25e:	4618      	mov	r0, r3
 800e260:	f7fe fcb6 	bl	800cbd0 <ld_dword>
 800e264:	4602      	mov	r2, r0
 800e266:	e000      	b.n	800e26a <find_volume+0x116>
 800e268:	2200      	movs	r2, #0
 800e26a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e26c:	009b      	lsls	r3, r3, #2
 800e26e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800e272:	440b      	add	r3, r1
 800e274:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e27a:	3301      	adds	r3, #1
 800e27c:	643b      	str	r3, [r7, #64]	; 0x40
 800e27e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e280:	2b03      	cmp	r3, #3
 800e282:	d9dc      	bls.n	800e23e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e284:	2300      	movs	r3, #0
 800e286:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d002      	beq.n	800e294 <find_volume+0x140>
 800e28e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e290:	3b01      	subs	r3, #1
 800e292:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e296:	009b      	lsls	r3, r3, #2
 800e298:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800e29c:	4413      	add	r3, r2
 800e29e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e2a2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e2a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d005      	beq.n	800e2b6 <find_volume+0x162>
 800e2aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e2ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e2ae:	f7ff fefb 	bl	800e0a8 <check_fs>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	e000      	b.n	800e2b8 <find_volume+0x164>
 800e2b6:	2303      	movs	r3, #3
 800e2b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e2bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e2c0:	2b01      	cmp	r3, #1
 800e2c2:	d905      	bls.n	800e2d0 <find_volume+0x17c>
 800e2c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2c6:	3301      	adds	r3, #1
 800e2c8:	643b      	str	r3, [r7, #64]	; 0x40
 800e2ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2cc:	2b03      	cmp	r3, #3
 800e2ce:	d9e1      	bls.n	800e294 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e2d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e2d4:	2b04      	cmp	r3, #4
 800e2d6:	d101      	bne.n	800e2dc <find_volume+0x188>
 800e2d8:	2301      	movs	r3, #1
 800e2da:	e17d      	b.n	800e5d8 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e2dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e2e0:	2b01      	cmp	r3, #1
 800e2e2:	d901      	bls.n	800e2e8 <find_volume+0x194>
 800e2e4:	230d      	movs	r3, #13
 800e2e6:	e177      	b.n	800e5d8 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ea:	3330      	adds	r3, #48	; 0x30
 800e2ec:	330b      	adds	r3, #11
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f7fe fc56 	bl	800cba0 <ld_word>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e2fa:	d001      	beq.n	800e300 <find_volume+0x1ac>
 800e2fc:	230d      	movs	r3, #13
 800e2fe:	e16b      	b.n	800e5d8 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e302:	3330      	adds	r3, #48	; 0x30
 800e304:	3316      	adds	r3, #22
 800e306:	4618      	mov	r0, r3
 800e308:	f7fe fc4a 	bl	800cba0 <ld_word>
 800e30c:	4603      	mov	r3, r0
 800e30e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e312:	2b00      	cmp	r3, #0
 800e314:	d106      	bne.n	800e324 <find_volume+0x1d0>
 800e316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e318:	3330      	adds	r3, #48	; 0x30
 800e31a:	3324      	adds	r3, #36	; 0x24
 800e31c:	4618      	mov	r0, r3
 800e31e:	f7fe fc57 	bl	800cbd0 <ld_dword>
 800e322:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e326:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e328:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e32c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800e330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e332:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e336:	789b      	ldrb	r3, [r3, #2]
 800e338:	2b01      	cmp	r3, #1
 800e33a:	d005      	beq.n	800e348 <find_volume+0x1f4>
 800e33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e33e:	789b      	ldrb	r3, [r3, #2]
 800e340:	2b02      	cmp	r3, #2
 800e342:	d001      	beq.n	800e348 <find_volume+0x1f4>
 800e344:	230d      	movs	r3, #13
 800e346:	e147      	b.n	800e5d8 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e34a:	789b      	ldrb	r3, [r3, #2]
 800e34c:	461a      	mov	r2, r3
 800e34e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e350:	fb02 f303 	mul.w	r3, r2, r3
 800e354:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e35c:	b29a      	uxth	r2, r3
 800e35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e360:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e364:	895b      	ldrh	r3, [r3, #10]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d008      	beq.n	800e37c <find_volume+0x228>
 800e36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e36c:	895b      	ldrh	r3, [r3, #10]
 800e36e:	461a      	mov	r2, r3
 800e370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e372:	895b      	ldrh	r3, [r3, #10]
 800e374:	3b01      	subs	r3, #1
 800e376:	4013      	ands	r3, r2
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d001      	beq.n	800e380 <find_volume+0x22c>
 800e37c:	230d      	movs	r3, #13
 800e37e:	e12b      	b.n	800e5d8 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e382:	3330      	adds	r3, #48	; 0x30
 800e384:	3311      	adds	r3, #17
 800e386:	4618      	mov	r0, r3
 800e388:	f7fe fc0a 	bl	800cba0 <ld_word>
 800e38c:	4603      	mov	r3, r0
 800e38e:	461a      	mov	r2, r3
 800e390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e392:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e396:	891b      	ldrh	r3, [r3, #8]
 800e398:	f003 030f 	and.w	r3, r3, #15
 800e39c:	b29b      	uxth	r3, r3
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d001      	beq.n	800e3a6 <find_volume+0x252>
 800e3a2:	230d      	movs	r3, #13
 800e3a4:	e118      	b.n	800e5d8 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3a8:	3330      	adds	r3, #48	; 0x30
 800e3aa:	3313      	adds	r3, #19
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f7fe fbf7 	bl	800cba0 <ld_word>
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e3b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d106      	bne.n	800e3ca <find_volume+0x276>
 800e3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3be:	3330      	adds	r3, #48	; 0x30
 800e3c0:	3320      	adds	r3, #32
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f7fe fc04 	bl	800cbd0 <ld_dword>
 800e3c8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3cc:	3330      	adds	r3, #48	; 0x30
 800e3ce:	330e      	adds	r3, #14
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f7fe fbe5 	bl	800cba0 <ld_word>
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e3da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d101      	bne.n	800e3e4 <find_volume+0x290>
 800e3e0:	230d      	movs	r3, #13
 800e3e2:	e0f9      	b.n	800e5d8 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e3e4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e3e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3e8:	4413      	add	r3, r2
 800e3ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e3ec:	8912      	ldrh	r2, [r2, #8]
 800e3ee:	0912      	lsrs	r2, r2, #4
 800e3f0:	b292      	uxth	r2, r2
 800e3f2:	4413      	add	r3, r2
 800e3f4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e3f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3fa:	429a      	cmp	r2, r3
 800e3fc:	d201      	bcs.n	800e402 <find_volume+0x2ae>
 800e3fe:	230d      	movs	r3, #13
 800e400:	e0ea      	b.n	800e5d8 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e402:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e406:	1ad3      	subs	r3, r2, r3
 800e408:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e40a:	8952      	ldrh	r2, [r2, #10]
 800e40c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e410:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e414:	2b00      	cmp	r3, #0
 800e416:	d103      	bne.n	800e420 <find_volume+0x2cc>
 800e418:	230d      	movs	r3, #13
 800e41a:	e0dd      	b.n	800e5d8 <find_volume+0x484>
 800e41c:	200008d4 	.word	0x200008d4
		fmt = FS_FAT32;
 800e420:	2303      	movs	r3, #3
 800e422:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e428:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e42c:	4293      	cmp	r3, r2
 800e42e:	d802      	bhi.n	800e436 <find_volume+0x2e2>
 800e430:	2302      	movs	r3, #2
 800e432:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e438:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e43c:	4293      	cmp	r3, r2
 800e43e:	d802      	bhi.n	800e446 <find_volume+0x2f2>
 800e440:	2301      	movs	r3, #1
 800e442:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e448:	1c9a      	adds	r2, r3, #2
 800e44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e44c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800e44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e450:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e452:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e454:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e458:	441a      	add	r2, r3
 800e45a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e45c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800e45e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e462:	441a      	add	r2, r3
 800e464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e466:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800e468:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e46c:	2b03      	cmp	r3, #3
 800e46e:	d11e      	bne.n	800e4ae <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e472:	3330      	adds	r3, #48	; 0x30
 800e474:	332a      	adds	r3, #42	; 0x2a
 800e476:	4618      	mov	r0, r3
 800e478:	f7fe fb92 	bl	800cba0 <ld_word>
 800e47c:	4603      	mov	r3, r0
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d001      	beq.n	800e486 <find_volume+0x332>
 800e482:	230d      	movs	r3, #13
 800e484:	e0a8      	b.n	800e5d8 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e488:	891b      	ldrh	r3, [r3, #8]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d001      	beq.n	800e492 <find_volume+0x33e>
 800e48e:	230d      	movs	r3, #13
 800e490:	e0a2      	b.n	800e5d8 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e494:	3330      	adds	r3, #48	; 0x30
 800e496:	332c      	adds	r3, #44	; 0x2c
 800e498:	4618      	mov	r0, r3
 800e49a:	f7fe fb99 	bl	800cbd0 <ld_dword>
 800e49e:	4602      	mov	r2, r0
 800e4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4a2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4a6:	695b      	ldr	r3, [r3, #20]
 800e4a8:	009b      	lsls	r3, r3, #2
 800e4aa:	647b      	str	r3, [r7, #68]	; 0x44
 800e4ac:	e01f      	b.n	800e4ee <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4b0:	891b      	ldrh	r3, [r3, #8]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d101      	bne.n	800e4ba <find_volume+0x366>
 800e4b6:	230d      	movs	r3, #13
 800e4b8:	e08e      	b.n	800e5d8 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4bc:	6a1a      	ldr	r2, [r3, #32]
 800e4be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4c0:	441a      	add	r2, r3
 800e4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4c4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e4c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e4ca:	2b02      	cmp	r3, #2
 800e4cc:	d103      	bne.n	800e4d6 <find_volume+0x382>
 800e4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4d0:	695b      	ldr	r3, [r3, #20]
 800e4d2:	005b      	lsls	r3, r3, #1
 800e4d4:	e00a      	b.n	800e4ec <find_volume+0x398>
 800e4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4d8:	695a      	ldr	r2, [r3, #20]
 800e4da:	4613      	mov	r3, r2
 800e4dc:	005b      	lsls	r3, r3, #1
 800e4de:	4413      	add	r3, r2
 800e4e0:	085a      	lsrs	r2, r3, #1
 800e4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4e4:	695b      	ldr	r3, [r3, #20]
 800e4e6:	f003 0301 	and.w	r3, r3, #1
 800e4ea:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e4ec:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4f0:	699a      	ldr	r2, [r3, #24]
 800e4f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e4f4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e4f8:	0a5b      	lsrs	r3, r3, #9
 800e4fa:	429a      	cmp	r2, r3
 800e4fc:	d201      	bcs.n	800e502 <find_volume+0x3ae>
 800e4fe:	230d      	movs	r3, #13
 800e500:	e06a      	b.n	800e5d8 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e504:	f04f 32ff 	mov.w	r2, #4294967295
 800e508:	611a      	str	r2, [r3, #16]
 800e50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e50c:	691a      	ldr	r2, [r3, #16]
 800e50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e510:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800e512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e514:	2280      	movs	r2, #128	; 0x80
 800e516:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e518:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e51c:	2b03      	cmp	r3, #3
 800e51e:	d149      	bne.n	800e5b4 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e522:	3330      	adds	r3, #48	; 0x30
 800e524:	3330      	adds	r3, #48	; 0x30
 800e526:	4618      	mov	r0, r3
 800e528:	f7fe fb3a 	bl	800cba0 <ld_word>
 800e52c:	4603      	mov	r3, r0
 800e52e:	2b01      	cmp	r3, #1
 800e530:	d140      	bne.n	800e5b4 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e532:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e534:	3301      	adds	r3, #1
 800e536:	4619      	mov	r1, r3
 800e538:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e53a:	f7fe fde1 	bl	800d100 <move_window>
 800e53e:	4603      	mov	r3, r0
 800e540:	2b00      	cmp	r3, #0
 800e542:	d137      	bne.n	800e5b4 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800e544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e546:	2200      	movs	r2, #0
 800e548:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e54c:	3330      	adds	r3, #48	; 0x30
 800e54e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e552:	4618      	mov	r0, r3
 800e554:	f7fe fb24 	bl	800cba0 <ld_word>
 800e558:	4603      	mov	r3, r0
 800e55a:	461a      	mov	r2, r3
 800e55c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e560:	429a      	cmp	r2, r3
 800e562:	d127      	bne.n	800e5b4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e566:	3330      	adds	r3, #48	; 0x30
 800e568:	4618      	mov	r0, r3
 800e56a:	f7fe fb31 	bl	800cbd0 <ld_dword>
 800e56e:	4603      	mov	r3, r0
 800e570:	4a1b      	ldr	r2, [pc, #108]	; (800e5e0 <find_volume+0x48c>)
 800e572:	4293      	cmp	r3, r2
 800e574:	d11e      	bne.n	800e5b4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e578:	3330      	adds	r3, #48	; 0x30
 800e57a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e57e:	4618      	mov	r0, r3
 800e580:	f7fe fb26 	bl	800cbd0 <ld_dword>
 800e584:	4603      	mov	r3, r0
 800e586:	4a17      	ldr	r2, [pc, #92]	; (800e5e4 <find_volume+0x490>)
 800e588:	4293      	cmp	r3, r2
 800e58a:	d113      	bne.n	800e5b4 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e58e:	3330      	adds	r3, #48	; 0x30
 800e590:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e594:	4618      	mov	r0, r3
 800e596:	f7fe fb1b 	bl	800cbd0 <ld_dword>
 800e59a:	4602      	mov	r2, r0
 800e59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e59e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5a2:	3330      	adds	r3, #48	; 0x30
 800e5a4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f7fe fb11 	bl	800cbd0 <ld_dword>
 800e5ae:	4602      	mov	r2, r0
 800e5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5b2:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5b6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e5ba:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e5bc:	4b0a      	ldr	r3, [pc, #40]	; (800e5e8 <find_volume+0x494>)
 800e5be:	881b      	ldrh	r3, [r3, #0]
 800e5c0:	3301      	adds	r3, #1
 800e5c2:	b29a      	uxth	r2, r3
 800e5c4:	4b08      	ldr	r3, [pc, #32]	; (800e5e8 <find_volume+0x494>)
 800e5c6:	801a      	strh	r2, [r3, #0]
 800e5c8:	4b07      	ldr	r3, [pc, #28]	; (800e5e8 <find_volume+0x494>)
 800e5ca:	881a      	ldrh	r2, [r3, #0]
 800e5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ce:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e5d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e5d2:	f7fe fd2d 	bl	800d030 <clear_lock>
#endif
	return FR_OK;
 800e5d6:	2300      	movs	r3, #0
}
 800e5d8:	4618      	mov	r0, r3
 800e5da:	3758      	adds	r7, #88	; 0x58
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	bd80      	pop	{r7, pc}
 800e5e0:	41615252 	.word	0x41615252
 800e5e4:	61417272 	.word	0x61417272
 800e5e8:	200008d8 	.word	0x200008d8

0800e5ec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b084      	sub	sp, #16
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
 800e5f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e5f6:	2309      	movs	r3, #9
 800e5f8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d01c      	beq.n	800e63a <validate+0x4e>
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d018      	beq.n	800e63a <validate+0x4e>
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	781b      	ldrb	r3, [r3, #0]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d013      	beq.n	800e63a <validate+0x4e>
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	889a      	ldrh	r2, [r3, #4]
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	88db      	ldrh	r3, [r3, #6]
 800e61c:	429a      	cmp	r2, r3
 800e61e:	d10c      	bne.n	800e63a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	785b      	ldrb	r3, [r3, #1]
 800e626:	4618      	mov	r0, r3
 800e628:	f7fe fa1c 	bl	800ca64 <disk_status>
 800e62c:	4603      	mov	r3, r0
 800e62e:	f003 0301 	and.w	r3, r3, #1
 800e632:	2b00      	cmp	r3, #0
 800e634:	d101      	bne.n	800e63a <validate+0x4e>
			res = FR_OK;
 800e636:	2300      	movs	r3, #0
 800e638:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e63a:	7bfb      	ldrb	r3, [r7, #15]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d102      	bne.n	800e646 <validate+0x5a>
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	e000      	b.n	800e648 <validate+0x5c>
 800e646:	2300      	movs	r3, #0
 800e648:	683a      	ldr	r2, [r7, #0]
 800e64a:	6013      	str	r3, [r2, #0]
	return res;
 800e64c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e64e:	4618      	mov	r0, r3
 800e650:	3710      	adds	r7, #16
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}
	...

0800e658 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b088      	sub	sp, #32
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	60f8      	str	r0, [r7, #12]
 800e660:	60b9      	str	r1, [r7, #8]
 800e662:	4613      	mov	r3, r2
 800e664:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e66a:	f107 0310 	add.w	r3, r7, #16
 800e66e:	4618      	mov	r0, r3
 800e670:	f7ff fcd5 	bl	800e01e <get_ldnumber>
 800e674:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e676:	69fb      	ldr	r3, [r7, #28]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	da01      	bge.n	800e680 <f_mount+0x28>
 800e67c:	230b      	movs	r3, #11
 800e67e:	e02b      	b.n	800e6d8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e680:	4a17      	ldr	r2, [pc, #92]	; (800e6e0 <f_mount+0x88>)
 800e682:	69fb      	ldr	r3, [r7, #28]
 800e684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e688:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e68a:	69bb      	ldr	r3, [r7, #24]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d005      	beq.n	800e69c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e690:	69b8      	ldr	r0, [r7, #24]
 800e692:	f7fe fccd 	bl	800d030 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e696:	69bb      	ldr	r3, [r7, #24]
 800e698:	2200      	movs	r2, #0
 800e69a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d002      	beq.n	800e6a8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e6a8:	68fa      	ldr	r2, [r7, #12]
 800e6aa:	490d      	ldr	r1, [pc, #52]	; (800e6e0 <f_mount+0x88>)
 800e6ac:	69fb      	ldr	r3, [r7, #28]
 800e6ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d002      	beq.n	800e6be <f_mount+0x66>
 800e6b8:	79fb      	ldrb	r3, [r7, #7]
 800e6ba:	2b01      	cmp	r3, #1
 800e6bc:	d001      	beq.n	800e6c2 <f_mount+0x6a>
 800e6be:	2300      	movs	r3, #0
 800e6c0:	e00a      	b.n	800e6d8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e6c2:	f107 010c 	add.w	r1, r7, #12
 800e6c6:	f107 0308 	add.w	r3, r7, #8
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f7ff fd41 	bl	800e154 <find_volume>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e6d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6d8:	4618      	mov	r0, r3
 800e6da:	3720      	adds	r7, #32
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}
 800e6e0:	200008d4 	.word	0x200008d4

0800e6e4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b098      	sub	sp, #96	; 0x60
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	60f8      	str	r0, [r7, #12]
 800e6ec:	60b9      	str	r1, [r7, #8]
 800e6ee:	4613      	mov	r3, r2
 800e6f0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d101      	bne.n	800e6fc <f_open+0x18>
 800e6f8:	2309      	movs	r3, #9
 800e6fa:	e1ad      	b.n	800ea58 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e6fc:	79fb      	ldrb	r3, [r7, #7]
 800e6fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e702:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e704:	79fa      	ldrb	r2, [r7, #7]
 800e706:	f107 0110 	add.w	r1, r7, #16
 800e70a:	f107 0308 	add.w	r3, r7, #8
 800e70e:	4618      	mov	r0, r3
 800e710:	f7ff fd20 	bl	800e154 <find_volume>
 800e714:	4603      	mov	r3, r0
 800e716:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800e71a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e71e:	2b00      	cmp	r3, #0
 800e720:	f040 8191 	bne.w	800ea46 <f_open+0x362>
		dj.obj.fs = fs;
 800e724:	693b      	ldr	r3, [r7, #16]
 800e726:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e728:	68ba      	ldr	r2, [r7, #8]
 800e72a:	f107 0314 	add.w	r3, r7, #20
 800e72e:	4611      	mov	r1, r2
 800e730:	4618      	mov	r0, r3
 800e732:	f7ff fc03 	bl	800df3c <follow_path>
 800e736:	4603      	mov	r3, r0
 800e738:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e73c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e740:	2b00      	cmp	r3, #0
 800e742:	d11a      	bne.n	800e77a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e744:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e748:	b25b      	sxtb	r3, r3
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	da03      	bge.n	800e756 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e74e:	2306      	movs	r3, #6
 800e750:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e754:	e011      	b.n	800e77a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e756:	79fb      	ldrb	r3, [r7, #7]
 800e758:	f023 0301 	bic.w	r3, r3, #1
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	bf14      	ite	ne
 800e760:	2301      	movne	r3, #1
 800e762:	2300      	moveq	r3, #0
 800e764:	b2db      	uxtb	r3, r3
 800e766:	461a      	mov	r2, r3
 800e768:	f107 0314 	add.w	r3, r7, #20
 800e76c:	4611      	mov	r1, r2
 800e76e:	4618      	mov	r0, r3
 800e770:	f7fe fb16 	bl	800cda0 <chk_lock>
 800e774:	4603      	mov	r3, r0
 800e776:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e77a:	79fb      	ldrb	r3, [r7, #7]
 800e77c:	f003 031c 	and.w	r3, r3, #28
 800e780:	2b00      	cmp	r3, #0
 800e782:	d07f      	beq.n	800e884 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e784:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d017      	beq.n	800e7bc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e78c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e790:	2b04      	cmp	r3, #4
 800e792:	d10e      	bne.n	800e7b2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e794:	f7fe fb60 	bl	800ce58 <enq_lock>
 800e798:	4603      	mov	r3, r0
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d006      	beq.n	800e7ac <f_open+0xc8>
 800e79e:	f107 0314 	add.w	r3, r7, #20
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	f7ff faa4 	bl	800dcf0 <dir_register>
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	e000      	b.n	800e7ae <f_open+0xca>
 800e7ac:	2312      	movs	r3, #18
 800e7ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e7b2:	79fb      	ldrb	r3, [r7, #7]
 800e7b4:	f043 0308 	orr.w	r3, r3, #8
 800e7b8:	71fb      	strb	r3, [r7, #7]
 800e7ba:	e010      	b.n	800e7de <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e7bc:	7ebb      	ldrb	r3, [r7, #26]
 800e7be:	f003 0311 	and.w	r3, r3, #17
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d003      	beq.n	800e7ce <f_open+0xea>
					res = FR_DENIED;
 800e7c6:	2307      	movs	r3, #7
 800e7c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e7cc:	e007      	b.n	800e7de <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e7ce:	79fb      	ldrb	r3, [r7, #7]
 800e7d0:	f003 0304 	and.w	r3, r3, #4
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d002      	beq.n	800e7de <f_open+0xfa>
 800e7d8:	2308      	movs	r3, #8
 800e7da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e7de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d168      	bne.n	800e8b8 <f_open+0x1d4>
 800e7e6:	79fb      	ldrb	r3, [r7, #7]
 800e7e8:	f003 0308 	and.w	r3, r3, #8
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d063      	beq.n	800e8b8 <f_open+0x1d4>
				dw = GET_FATTIME();
 800e7f0:	f7fb ff98 	bl	800a724 <get_fattime>
 800e7f4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e7f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7f8:	330e      	adds	r3, #14
 800e7fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f7fe fa25 	bl	800cc4c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e804:	3316      	adds	r3, #22
 800e806:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e808:	4618      	mov	r0, r3
 800e80a:	f7fe fa1f 	bl	800cc4c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e80e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e810:	330b      	adds	r3, #11
 800e812:	2220      	movs	r2, #32
 800e814:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e816:	693b      	ldr	r3, [r7, #16]
 800e818:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e81a:	4611      	mov	r1, r2
 800e81c:	4618      	mov	r0, r3
 800e81e:	f7ff f976 	bl	800db0e <ld_clust>
 800e822:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e824:	693b      	ldr	r3, [r7, #16]
 800e826:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e828:	2200      	movs	r2, #0
 800e82a:	4618      	mov	r0, r3
 800e82c:	f7ff f98e 	bl	800db4c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e832:	331c      	adds	r3, #28
 800e834:	2100      	movs	r1, #0
 800e836:	4618      	mov	r0, r3
 800e838:	f7fe fa08 	bl	800cc4c <st_dword>
					fs->wflag = 1;
 800e83c:	693b      	ldr	r3, [r7, #16]
 800e83e:	2201      	movs	r2, #1
 800e840:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e844:	2b00      	cmp	r3, #0
 800e846:	d037      	beq.n	800e8b8 <f_open+0x1d4>
						dw = fs->winsect;
 800e848:	693b      	ldr	r3, [r7, #16]
 800e84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e84c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e84e:	f107 0314 	add.w	r3, r7, #20
 800e852:	2200      	movs	r2, #0
 800e854:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e856:	4618      	mov	r0, r3
 800e858:	f7fe fea1 	bl	800d59e <remove_chain>
 800e85c:	4603      	mov	r3, r0
 800e85e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800e862:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e866:	2b00      	cmp	r3, #0
 800e868:	d126      	bne.n	800e8b8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800e86a:	693b      	ldr	r3, [r7, #16]
 800e86c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e86e:	4618      	mov	r0, r3
 800e870:	f7fe fc46 	bl	800d100 <move_window>
 800e874:	4603      	mov	r3, r0
 800e876:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e87a:	693b      	ldr	r3, [r7, #16]
 800e87c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e87e:	3a01      	subs	r2, #1
 800e880:	60da      	str	r2, [r3, #12]
 800e882:	e019      	b.n	800e8b8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e884:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d115      	bne.n	800e8b8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e88c:	7ebb      	ldrb	r3, [r7, #26]
 800e88e:	f003 0310 	and.w	r3, r3, #16
 800e892:	2b00      	cmp	r3, #0
 800e894:	d003      	beq.n	800e89e <f_open+0x1ba>
					res = FR_NO_FILE;
 800e896:	2304      	movs	r3, #4
 800e898:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e89c:	e00c      	b.n	800e8b8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e89e:	79fb      	ldrb	r3, [r7, #7]
 800e8a0:	f003 0302 	and.w	r3, r3, #2
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d007      	beq.n	800e8b8 <f_open+0x1d4>
 800e8a8:	7ebb      	ldrb	r3, [r7, #26]
 800e8aa:	f003 0301 	and.w	r3, r3, #1
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d002      	beq.n	800e8b8 <f_open+0x1d4>
						res = FR_DENIED;
 800e8b2:	2307      	movs	r3, #7
 800e8b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e8b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d128      	bne.n	800e912 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e8c0:	79fb      	ldrb	r3, [r7, #7]
 800e8c2:	f003 0308 	and.w	r3, r3, #8
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d003      	beq.n	800e8d2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e8ca:	79fb      	ldrb	r3, [r7, #7]
 800e8cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8d0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e8d2:	693b      	ldr	r3, [r7, #16]
 800e8d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e8da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e8e0:	79fb      	ldrb	r3, [r7, #7]
 800e8e2:	f023 0301 	bic.w	r3, r3, #1
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	bf14      	ite	ne
 800e8ea:	2301      	movne	r3, #1
 800e8ec:	2300      	moveq	r3, #0
 800e8ee:	b2db      	uxtb	r3, r3
 800e8f0:	461a      	mov	r2, r3
 800e8f2:	f107 0314 	add.w	r3, r7, #20
 800e8f6:	4611      	mov	r1, r2
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f7fe facf 	bl	800ce9c <inc_lock>
 800e8fe:	4602      	mov	r2, r0
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	691b      	ldr	r3, [r3, #16]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d102      	bne.n	800e912 <f_open+0x22e>
 800e90c:	2302      	movs	r3, #2
 800e90e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e912:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e916:	2b00      	cmp	r3, #0
 800e918:	f040 8095 	bne.w	800ea46 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e91c:	693b      	ldr	r3, [r7, #16]
 800e91e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e920:	4611      	mov	r1, r2
 800e922:	4618      	mov	r0, r3
 800e924:	f7ff f8f3 	bl	800db0e <ld_clust>
 800e928:	4602      	mov	r2, r0
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e92e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e930:	331c      	adds	r3, #28
 800e932:	4618      	mov	r0, r3
 800e934:	f7fe f94c 	bl	800cbd0 <ld_dword>
 800e938:	4602      	mov	r2, r0
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	2200      	movs	r2, #0
 800e942:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e944:	693a      	ldr	r2, [r7, #16]
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e94a:	693b      	ldr	r3, [r7, #16]
 800e94c:	88da      	ldrh	r2, [r3, #6]
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	79fa      	ldrb	r2, [r7, #7]
 800e956:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	2200      	movs	r2, #0
 800e95c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	2200      	movs	r2, #0
 800e962:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	2200      	movs	r2, #0
 800e968:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	3330      	adds	r3, #48	; 0x30
 800e96e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e972:	2100      	movs	r1, #0
 800e974:	4618      	mov	r0, r3
 800e976:	f7fe f9b6 	bl	800cce6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e97a:	79fb      	ldrb	r3, [r7, #7]
 800e97c:	f003 0320 	and.w	r3, r3, #32
 800e980:	2b00      	cmp	r3, #0
 800e982:	d060      	beq.n	800ea46 <f_open+0x362>
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	68db      	ldr	r3, [r3, #12]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d05c      	beq.n	800ea46 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	68da      	ldr	r2, [r3, #12]
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e994:	693b      	ldr	r3, [r7, #16]
 800e996:	895b      	ldrh	r3, [r3, #10]
 800e998:	025b      	lsls	r3, r3, #9
 800e99a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	689b      	ldr	r3, [r3, #8]
 800e9a0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	68db      	ldr	r3, [r3, #12]
 800e9a6:	657b      	str	r3, [r7, #84]	; 0x54
 800e9a8:	e016      	b.n	800e9d8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	f7fe fc61 	bl	800d276 <get_fat>
 800e9b4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e9b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e9b8:	2b01      	cmp	r3, #1
 800e9ba:	d802      	bhi.n	800e9c2 <f_open+0x2de>
 800e9bc:	2302      	movs	r3, #2
 800e9be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e9c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e9c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9c8:	d102      	bne.n	800e9d0 <f_open+0x2ec>
 800e9ca:	2301      	movs	r3, #1
 800e9cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e9d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e9d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9d4:	1ad3      	subs	r3, r2, r3
 800e9d6:	657b      	str	r3, [r7, #84]	; 0x54
 800e9d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d103      	bne.n	800e9e8 <f_open+0x304>
 800e9e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e9e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9e4:	429a      	cmp	r2, r3
 800e9e6:	d8e0      	bhi.n	800e9aa <f_open+0x2c6>
				}
				fp->clust = clst;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e9ec:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e9ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d127      	bne.n	800ea46 <f_open+0x362>
 800e9f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d022      	beq.n	800ea46 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ea00:	693b      	ldr	r3, [r7, #16]
 800ea02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ea04:	4618      	mov	r0, r3
 800ea06:	f7fe fc17 	bl	800d238 <clust2sect>
 800ea0a:	6478      	str	r0, [r7, #68]	; 0x44
 800ea0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d103      	bne.n	800ea1a <f_open+0x336>
						res = FR_INT_ERR;
 800ea12:	2302      	movs	r3, #2
 800ea14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ea18:	e015      	b.n	800ea46 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ea1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea1c:	0a5a      	lsrs	r2, r3, #9
 800ea1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea20:	441a      	add	r2, r3
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ea26:	693b      	ldr	r3, [r7, #16]
 800ea28:	7858      	ldrb	r0, [r3, #1]
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	6a1a      	ldr	r2, [r3, #32]
 800ea34:	2301      	movs	r3, #1
 800ea36:	f7fe f855 	bl	800cae4 <disk_read>
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d002      	beq.n	800ea46 <f_open+0x362>
 800ea40:	2301      	movs	r3, #1
 800ea42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ea46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d002      	beq.n	800ea54 <f_open+0x370>
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	2200      	movs	r2, #0
 800ea52:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ea54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800ea58:	4618      	mov	r0, r3
 800ea5a:	3760      	adds	r7, #96	; 0x60
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}

0800ea60 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b08c      	sub	sp, #48	; 0x30
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	60f8      	str	r0, [r7, #12]
 800ea68:	60b9      	str	r1, [r7, #8]
 800ea6a:	607a      	str	r2, [r7, #4]
 800ea6c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ea6e:	68bb      	ldr	r3, [r7, #8]
 800ea70:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	2200      	movs	r2, #0
 800ea76:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	f107 0210 	add.w	r2, r7, #16
 800ea7e:	4611      	mov	r1, r2
 800ea80:	4618      	mov	r0, r3
 800ea82:	f7ff fdb3 	bl	800e5ec <validate>
 800ea86:	4603      	mov	r3, r0
 800ea88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ea8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d107      	bne.n	800eaa4 <f_write+0x44>
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	7d5b      	ldrb	r3, [r3, #21]
 800ea98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ea9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d002      	beq.n	800eaaa <f_write+0x4a>
 800eaa4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eaa8:	e14b      	b.n	800ed42 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	7d1b      	ldrb	r3, [r3, #20]
 800eaae:	f003 0302 	and.w	r3, r3, #2
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d101      	bne.n	800eaba <f_write+0x5a>
 800eab6:	2307      	movs	r3, #7
 800eab8:	e143      	b.n	800ed42 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	699a      	ldr	r2, [r3, #24]
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	441a      	add	r2, r3
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	699b      	ldr	r3, [r3, #24]
 800eac6:	429a      	cmp	r2, r3
 800eac8:	f080 812d 	bcs.w	800ed26 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	699b      	ldr	r3, [r3, #24]
 800ead0:	43db      	mvns	r3, r3
 800ead2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ead4:	e127      	b.n	800ed26 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	699b      	ldr	r3, [r3, #24]
 800eada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eade:	2b00      	cmp	r3, #0
 800eae0:	f040 80e3 	bne.w	800ecaa <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	699b      	ldr	r3, [r3, #24]
 800eae8:	0a5b      	lsrs	r3, r3, #9
 800eaea:	693a      	ldr	r2, [r7, #16]
 800eaec:	8952      	ldrh	r2, [r2, #10]
 800eaee:	3a01      	subs	r2, #1
 800eaf0:	4013      	ands	r3, r2
 800eaf2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800eaf4:	69bb      	ldr	r3, [r7, #24]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d143      	bne.n	800eb82 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	699b      	ldr	r3, [r3, #24]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d10c      	bne.n	800eb1c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	689b      	ldr	r3, [r3, #8]
 800eb06:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800eb08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d11a      	bne.n	800eb44 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2100      	movs	r1, #0
 800eb12:	4618      	mov	r0, r3
 800eb14:	f7fe fda8 	bl	800d668 <create_chain>
 800eb18:	62b8      	str	r0, [r7, #40]	; 0x28
 800eb1a:	e013      	b.n	800eb44 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d007      	beq.n	800eb34 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	699b      	ldr	r3, [r3, #24]
 800eb28:	4619      	mov	r1, r3
 800eb2a:	68f8      	ldr	r0, [r7, #12]
 800eb2c:	f7fe fe34 	bl	800d798 <clmt_clust>
 800eb30:	62b8      	str	r0, [r7, #40]	; 0x28
 800eb32:	e007      	b.n	800eb44 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800eb34:	68fa      	ldr	r2, [r7, #12]
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	69db      	ldr	r3, [r3, #28]
 800eb3a:	4619      	mov	r1, r3
 800eb3c:	4610      	mov	r0, r2
 800eb3e:	f7fe fd93 	bl	800d668 <create_chain>
 800eb42:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800eb44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	f000 80f2 	beq.w	800ed30 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800eb4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb4e:	2b01      	cmp	r3, #1
 800eb50:	d104      	bne.n	800eb5c <f_write+0xfc>
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	2202      	movs	r2, #2
 800eb56:	755a      	strb	r2, [r3, #21]
 800eb58:	2302      	movs	r3, #2
 800eb5a:	e0f2      	b.n	800ed42 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800eb5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb62:	d104      	bne.n	800eb6e <f_write+0x10e>
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	2201      	movs	r2, #1
 800eb68:	755a      	strb	r2, [r3, #21]
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	e0e9      	b.n	800ed42 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb72:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	689b      	ldr	r3, [r3, #8]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d102      	bne.n	800eb82 <f_write+0x122>
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb80:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	7d1b      	ldrb	r3, [r3, #20]
 800eb86:	b25b      	sxtb	r3, r3
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	da18      	bge.n	800ebbe <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eb8c:	693b      	ldr	r3, [r7, #16]
 800eb8e:	7858      	ldrb	r0, [r3, #1]
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	6a1a      	ldr	r2, [r3, #32]
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	f7fd ffc2 	bl	800cb24 <disk_write>
 800eba0:	4603      	mov	r3, r0
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d004      	beq.n	800ebb0 <f_write+0x150>
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	2201      	movs	r2, #1
 800ebaa:	755a      	strb	r2, [r3, #21]
 800ebac:	2301      	movs	r3, #1
 800ebae:	e0c8      	b.n	800ed42 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	7d1b      	ldrb	r3, [r3, #20]
 800ebb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ebb8:	b2da      	uxtb	r2, r3
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ebbe:	693a      	ldr	r2, [r7, #16]
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	69db      	ldr	r3, [r3, #28]
 800ebc4:	4619      	mov	r1, r3
 800ebc6:	4610      	mov	r0, r2
 800ebc8:	f7fe fb36 	bl	800d238 <clust2sect>
 800ebcc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ebce:	697b      	ldr	r3, [r7, #20]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d104      	bne.n	800ebde <f_write+0x17e>
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	2202      	movs	r2, #2
 800ebd8:	755a      	strb	r2, [r3, #21]
 800ebda:	2302      	movs	r3, #2
 800ebdc:	e0b1      	b.n	800ed42 <f_write+0x2e2>
			sect += csect;
 800ebde:	697a      	ldr	r2, [r7, #20]
 800ebe0:	69bb      	ldr	r3, [r7, #24]
 800ebe2:	4413      	add	r3, r2
 800ebe4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	0a5b      	lsrs	r3, r3, #9
 800ebea:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ebec:	6a3b      	ldr	r3, [r7, #32]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d03c      	beq.n	800ec6c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ebf2:	69ba      	ldr	r2, [r7, #24]
 800ebf4:	6a3b      	ldr	r3, [r7, #32]
 800ebf6:	4413      	add	r3, r2
 800ebf8:	693a      	ldr	r2, [r7, #16]
 800ebfa:	8952      	ldrh	r2, [r2, #10]
 800ebfc:	4293      	cmp	r3, r2
 800ebfe:	d905      	bls.n	800ec0c <f_write+0x1ac>
					cc = fs->csize - csect;
 800ec00:	693b      	ldr	r3, [r7, #16]
 800ec02:	895b      	ldrh	r3, [r3, #10]
 800ec04:	461a      	mov	r2, r3
 800ec06:	69bb      	ldr	r3, [r7, #24]
 800ec08:	1ad3      	subs	r3, r2, r3
 800ec0a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ec0c:	693b      	ldr	r3, [r7, #16]
 800ec0e:	7858      	ldrb	r0, [r3, #1]
 800ec10:	6a3b      	ldr	r3, [r7, #32]
 800ec12:	697a      	ldr	r2, [r7, #20]
 800ec14:	69f9      	ldr	r1, [r7, #28]
 800ec16:	f7fd ff85 	bl	800cb24 <disk_write>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d004      	beq.n	800ec2a <f_write+0x1ca>
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	2201      	movs	r2, #1
 800ec24:	755a      	strb	r2, [r3, #21]
 800ec26:	2301      	movs	r3, #1
 800ec28:	e08b      	b.n	800ed42 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	6a1a      	ldr	r2, [r3, #32]
 800ec2e:	697b      	ldr	r3, [r7, #20]
 800ec30:	1ad3      	subs	r3, r2, r3
 800ec32:	6a3a      	ldr	r2, [r7, #32]
 800ec34:	429a      	cmp	r2, r3
 800ec36:	d915      	bls.n	800ec64 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	6a1a      	ldr	r2, [r3, #32]
 800ec42:	697b      	ldr	r3, [r7, #20]
 800ec44:	1ad3      	subs	r3, r2, r3
 800ec46:	025b      	lsls	r3, r3, #9
 800ec48:	69fa      	ldr	r2, [r7, #28]
 800ec4a:	4413      	add	r3, r2
 800ec4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ec50:	4619      	mov	r1, r3
 800ec52:	f7fe f827 	bl	800cca4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	7d1b      	ldrb	r3, [r3, #20]
 800ec5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec5e:	b2da      	uxtb	r2, r3
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ec64:	6a3b      	ldr	r3, [r7, #32]
 800ec66:	025b      	lsls	r3, r3, #9
 800ec68:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ec6a:	e03f      	b.n	800ecec <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	6a1b      	ldr	r3, [r3, #32]
 800ec70:	697a      	ldr	r2, [r7, #20]
 800ec72:	429a      	cmp	r2, r3
 800ec74:	d016      	beq.n	800eca4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	699a      	ldr	r2, [r3, #24]
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ec7e:	429a      	cmp	r2, r3
 800ec80:	d210      	bcs.n	800eca4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ec82:	693b      	ldr	r3, [r7, #16]
 800ec84:	7858      	ldrb	r0, [r3, #1]
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ec8c:	2301      	movs	r3, #1
 800ec8e:	697a      	ldr	r2, [r7, #20]
 800ec90:	f7fd ff28 	bl	800cae4 <disk_read>
 800ec94:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d004      	beq.n	800eca4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	2201      	movs	r2, #1
 800ec9e:	755a      	strb	r2, [r3, #21]
 800eca0:	2301      	movs	r3, #1
 800eca2:	e04e      	b.n	800ed42 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	697a      	ldr	r2, [r7, #20]
 800eca8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	699b      	ldr	r3, [r3, #24]
 800ecae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecb2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ecb6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ecb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	429a      	cmp	r2, r3
 800ecbe:	d901      	bls.n	800ecc4 <f_write+0x264>
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	699b      	ldr	r3, [r3, #24]
 800ecce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecd2:	4413      	add	r3, r2
 800ecd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecd6:	69f9      	ldr	r1, [r7, #28]
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f7fd ffe3 	bl	800cca4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	7d1b      	ldrb	r3, [r3, #20]
 800ece2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ece6:	b2da      	uxtb	r2, r3
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ecec:	69fa      	ldr	r2, [r7, #28]
 800ecee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecf0:	4413      	add	r3, r2
 800ecf2:	61fb      	str	r3, [r7, #28]
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	699a      	ldr	r2, [r3, #24]
 800ecf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecfa:	441a      	add	r2, r3
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	619a      	str	r2, [r3, #24]
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	68da      	ldr	r2, [r3, #12]
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	699b      	ldr	r3, [r3, #24]
 800ed08:	429a      	cmp	r2, r3
 800ed0a:	bf38      	it	cc
 800ed0c:	461a      	movcc	r2, r3
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	60da      	str	r2, [r3, #12]
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	681a      	ldr	r2, [r3, #0]
 800ed16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed18:	441a      	add	r2, r3
 800ed1a:	683b      	ldr	r3, [r7, #0]
 800ed1c:	601a      	str	r2, [r3, #0]
 800ed1e:	687a      	ldr	r2, [r7, #4]
 800ed20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed22:	1ad3      	subs	r3, r2, r3
 800ed24:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	f47f aed4 	bne.w	800ead6 <f_write+0x76>
 800ed2e:	e000      	b.n	800ed32 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ed30:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	7d1b      	ldrb	r3, [r3, #20]
 800ed36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed3a:	b2da      	uxtb	r2, r3
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ed40:	2300      	movs	r3, #0
}
 800ed42:	4618      	mov	r0, r3
 800ed44:	3730      	adds	r7, #48	; 0x30
 800ed46:	46bd      	mov	sp, r7
 800ed48:	bd80      	pop	{r7, pc}

0800ed4a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ed4a:	b580      	push	{r7, lr}
 800ed4c:	b086      	sub	sp, #24
 800ed4e:	af00      	add	r7, sp, #0
 800ed50:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	f107 0208 	add.w	r2, r7, #8
 800ed58:	4611      	mov	r1, r2
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f7ff fc46 	bl	800e5ec <validate>
 800ed60:	4603      	mov	r3, r0
 800ed62:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ed64:	7dfb      	ldrb	r3, [r7, #23]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d168      	bne.n	800ee3c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	7d1b      	ldrb	r3, [r3, #20]
 800ed6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d062      	beq.n	800ee3c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	7d1b      	ldrb	r3, [r3, #20]
 800ed7a:	b25b      	sxtb	r3, r3
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	da15      	bge.n	800edac <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	7858      	ldrb	r0, [r3, #1]
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	6a1a      	ldr	r2, [r3, #32]
 800ed8e:	2301      	movs	r3, #1
 800ed90:	f7fd fec8 	bl	800cb24 <disk_write>
 800ed94:	4603      	mov	r3, r0
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d001      	beq.n	800ed9e <f_sync+0x54>
 800ed9a:	2301      	movs	r3, #1
 800ed9c:	e04f      	b.n	800ee3e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	7d1b      	ldrb	r3, [r3, #20]
 800eda2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eda6:	b2da      	uxtb	r2, r3
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800edac:	f7fb fcba 	bl	800a724 <get_fattime>
 800edb0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800edb2:	68ba      	ldr	r2, [r7, #8]
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edb8:	4619      	mov	r1, r3
 800edba:	4610      	mov	r0, r2
 800edbc:	f7fe f9a0 	bl	800d100 <move_window>
 800edc0:	4603      	mov	r3, r0
 800edc2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800edc4:	7dfb      	ldrb	r3, [r7, #23]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d138      	bne.n	800ee3c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edce:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	330b      	adds	r3, #11
 800edd4:	781a      	ldrb	r2, [r3, #0]
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	330b      	adds	r3, #11
 800edda:	f042 0220 	orr.w	r2, r2, #32
 800edde:	b2d2      	uxtb	r2, r2
 800ede0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	6818      	ldr	r0, [r3, #0]
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	689b      	ldr	r3, [r3, #8]
 800edea:	461a      	mov	r2, r3
 800edec:	68f9      	ldr	r1, [r7, #12]
 800edee:	f7fe fead 	bl	800db4c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	f103 021c 	add.w	r2, r3, #28
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	68db      	ldr	r3, [r3, #12]
 800edfc:	4619      	mov	r1, r3
 800edfe:	4610      	mov	r0, r2
 800ee00:	f7fd ff24 	bl	800cc4c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	3316      	adds	r3, #22
 800ee08:	6939      	ldr	r1, [r7, #16]
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f7fd ff1e 	bl	800cc4c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	3312      	adds	r3, #18
 800ee14:	2100      	movs	r1, #0
 800ee16:	4618      	mov	r0, r3
 800ee18:	f7fd fefd 	bl	800cc16 <st_word>
					fs->wflag = 1;
 800ee1c:	68bb      	ldr	r3, [r7, #8]
 800ee1e:	2201      	movs	r2, #1
 800ee20:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	4618      	mov	r0, r3
 800ee26:	f7fe f999 	bl	800d15c <sync_fs>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	7d1b      	ldrb	r3, [r3, #20]
 800ee32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ee36:	b2da      	uxtb	r2, r3
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ee3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	3718      	adds	r7, #24
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}

0800ee46 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ee46:	b580      	push	{r7, lr}
 800ee48:	b084      	sub	sp, #16
 800ee4a:	af00      	add	r7, sp, #0
 800ee4c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ee4e:	6878      	ldr	r0, [r7, #4]
 800ee50:	f7ff ff7b 	bl	800ed4a <f_sync>
 800ee54:	4603      	mov	r3, r0
 800ee56:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ee58:	7bfb      	ldrb	r3, [r7, #15]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d118      	bne.n	800ee90 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	f107 0208 	add.w	r2, r7, #8
 800ee64:	4611      	mov	r1, r2
 800ee66:	4618      	mov	r0, r3
 800ee68:	f7ff fbc0 	bl	800e5ec <validate>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ee70:	7bfb      	ldrb	r3, [r7, #15]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d10c      	bne.n	800ee90 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	691b      	ldr	r3, [r3, #16]
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	f7fe f89c 	bl	800cfb8 <dec_lock>
 800ee80:	4603      	mov	r3, r0
 800ee82:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ee84:	7bfb      	ldrb	r3, [r7, #15]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d102      	bne.n	800ee90 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ee90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee92:	4618      	mov	r0, r3
 800ee94:	3710      	adds	r7, #16
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd80      	pop	{r7, pc}

0800ee9a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800ee9a:	b580      	push	{r7, lr}
 800ee9c:	b090      	sub	sp, #64	; 0x40
 800ee9e:	af00      	add	r7, sp, #0
 800eea0:	6078      	str	r0, [r7, #4]
 800eea2:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f107 0208 	add.w	r2, r7, #8
 800eeaa:	4611      	mov	r1, r2
 800eeac:	4618      	mov	r0, r3
 800eeae:	f7ff fb9d 	bl	800e5ec <validate>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800eeb8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d103      	bne.n	800eec8 <f_lseek+0x2e>
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	7d5b      	ldrb	r3, [r3, #21]
 800eec4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800eec8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d002      	beq.n	800eed6 <f_lseek+0x3c>
 800eed0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800eed4:	e1e6      	b.n	800f2a4 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	f000 80d1 	beq.w	800f082 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eee6:	d15a      	bne.n	800ef9e <f_lseek+0x104>
			tbl = fp->cltbl;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeec:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800eeee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef0:	1d1a      	adds	r2, r3, #4
 800eef2:	627a      	str	r2, [r7, #36]	; 0x24
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	617b      	str	r3, [r7, #20]
 800eef8:	2302      	movs	r3, #2
 800eefa:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	689b      	ldr	r3, [r3, #8]
 800ef00:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800ef02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d03a      	beq.n	800ef7e <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ef08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef0a:	613b      	str	r3, [r7, #16]
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ef10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef12:	3302      	adds	r3, #2
 800ef14:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800ef16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef18:	60fb      	str	r3, [r7, #12]
 800ef1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef1c:	3301      	adds	r3, #1
 800ef1e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ef24:	4618      	mov	r0, r3
 800ef26:	f7fe f9a6 	bl	800d276 <get_fat>
 800ef2a:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ef2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef2e:	2b01      	cmp	r3, #1
 800ef30:	d804      	bhi.n	800ef3c <f_lseek+0xa2>
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	2202      	movs	r2, #2
 800ef36:	755a      	strb	r2, [r3, #21]
 800ef38:	2302      	movs	r3, #2
 800ef3a:	e1b3      	b.n	800f2a4 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ef3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef42:	d104      	bne.n	800ef4e <f_lseek+0xb4>
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2201      	movs	r2, #1
 800ef48:	755a      	strb	r2, [r3, #21]
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	e1aa      	b.n	800f2a4 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	3301      	adds	r3, #1
 800ef52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef54:	429a      	cmp	r2, r3
 800ef56:	d0de      	beq.n	800ef16 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ef58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef5a:	697b      	ldr	r3, [r7, #20]
 800ef5c:	429a      	cmp	r2, r3
 800ef5e:	d809      	bhi.n	800ef74 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800ef60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef62:	1d1a      	adds	r2, r3, #4
 800ef64:	627a      	str	r2, [r7, #36]	; 0x24
 800ef66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef68:	601a      	str	r2, [r3, #0]
 800ef6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef6c:	1d1a      	adds	r2, r3, #4
 800ef6e:	627a      	str	r2, [r7, #36]	; 0x24
 800ef70:	693a      	ldr	r2, [r7, #16]
 800ef72:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	695b      	ldr	r3, [r3, #20]
 800ef78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef7a:	429a      	cmp	r2, r3
 800ef7c:	d3c4      	bcc.n	800ef08 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef84:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800ef86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef88:	697b      	ldr	r3, [r7, #20]
 800ef8a:	429a      	cmp	r2, r3
 800ef8c:	d803      	bhi.n	800ef96 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800ef8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef90:	2200      	movs	r2, #0
 800ef92:	601a      	str	r2, [r3, #0]
 800ef94:	e184      	b.n	800f2a0 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800ef96:	2311      	movs	r3, #17
 800ef98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ef9c:	e180      	b.n	800f2a0 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	68db      	ldr	r3, [r3, #12]
 800efa2:	683a      	ldr	r2, [r7, #0]
 800efa4:	429a      	cmp	r2, r3
 800efa6:	d902      	bls.n	800efae <f_lseek+0x114>
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	68db      	ldr	r3, [r3, #12]
 800efac:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	683a      	ldr	r2, [r7, #0]
 800efb2:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	f000 8172 	beq.w	800f2a0 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800efbc:	683b      	ldr	r3, [r7, #0]
 800efbe:	3b01      	subs	r3, #1
 800efc0:	4619      	mov	r1, r3
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	f7fe fbe8 	bl	800d798 <clmt_clust>
 800efc8:	4602      	mov	r2, r0
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800efce:	68ba      	ldr	r2, [r7, #8]
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	69db      	ldr	r3, [r3, #28]
 800efd4:	4619      	mov	r1, r3
 800efd6:	4610      	mov	r0, r2
 800efd8:	f7fe f92e 	bl	800d238 <clust2sect>
 800efdc:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800efde:	69bb      	ldr	r3, [r7, #24]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d104      	bne.n	800efee <f_lseek+0x154>
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2202      	movs	r2, #2
 800efe8:	755a      	strb	r2, [r3, #21]
 800efea:	2302      	movs	r3, #2
 800efec:	e15a      	b.n	800f2a4 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800efee:	683b      	ldr	r3, [r7, #0]
 800eff0:	3b01      	subs	r3, #1
 800eff2:	0a5b      	lsrs	r3, r3, #9
 800eff4:	68ba      	ldr	r2, [r7, #8]
 800eff6:	8952      	ldrh	r2, [r2, #10]
 800eff8:	3a01      	subs	r2, #1
 800effa:	4013      	ands	r3, r2
 800effc:	69ba      	ldr	r2, [r7, #24]
 800effe:	4413      	add	r3, r2
 800f000:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	699b      	ldr	r3, [r3, #24]
 800f006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	f000 8148 	beq.w	800f2a0 <f_lseek+0x406>
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	6a1b      	ldr	r3, [r3, #32]
 800f014:	69ba      	ldr	r2, [r7, #24]
 800f016:	429a      	cmp	r2, r3
 800f018:	f000 8142 	beq.w	800f2a0 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	7d1b      	ldrb	r3, [r3, #20]
 800f020:	b25b      	sxtb	r3, r3
 800f022:	2b00      	cmp	r3, #0
 800f024:	da18      	bge.n	800f058 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f026:	68bb      	ldr	r3, [r7, #8]
 800f028:	7858      	ldrb	r0, [r3, #1]
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	6a1a      	ldr	r2, [r3, #32]
 800f034:	2301      	movs	r3, #1
 800f036:	f7fd fd75 	bl	800cb24 <disk_write>
 800f03a:	4603      	mov	r3, r0
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d004      	beq.n	800f04a <f_lseek+0x1b0>
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	2201      	movs	r2, #1
 800f044:	755a      	strb	r2, [r3, #21]
 800f046:	2301      	movs	r3, #1
 800f048:	e12c      	b.n	800f2a4 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	7d1b      	ldrb	r3, [r3, #20]
 800f04e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f052:	b2da      	uxtb	r2, r3
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800f058:	68bb      	ldr	r3, [r7, #8]
 800f05a:	7858      	ldrb	r0, [r3, #1]
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f062:	2301      	movs	r3, #1
 800f064:	69ba      	ldr	r2, [r7, #24]
 800f066:	f7fd fd3d 	bl	800cae4 <disk_read>
 800f06a:	4603      	mov	r3, r0
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d004      	beq.n	800f07a <f_lseek+0x1e0>
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	2201      	movs	r2, #1
 800f074:	755a      	strb	r2, [r3, #21]
 800f076:	2301      	movs	r3, #1
 800f078:	e114      	b.n	800f2a4 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	69ba      	ldr	r2, [r7, #24]
 800f07e:	621a      	str	r2, [r3, #32]
 800f080:	e10e      	b.n	800f2a0 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	68db      	ldr	r3, [r3, #12]
 800f086:	683a      	ldr	r2, [r7, #0]
 800f088:	429a      	cmp	r2, r3
 800f08a:	d908      	bls.n	800f09e <f_lseek+0x204>
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	7d1b      	ldrb	r3, [r3, #20]
 800f090:	f003 0302 	and.w	r3, r3, #2
 800f094:	2b00      	cmp	r3, #0
 800f096:	d102      	bne.n	800f09e <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	68db      	ldr	r3, [r3, #12]
 800f09c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	699b      	ldr	r3, [r3, #24]
 800f0a2:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	637b      	str	r3, [r7, #52]	; 0x34
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f0ac:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800f0ae:	683b      	ldr	r3, [r7, #0]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	f000 80a7 	beq.w	800f204 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f0b6:	68bb      	ldr	r3, [r7, #8]
 800f0b8:	895b      	ldrh	r3, [r3, #10]
 800f0ba:	025b      	lsls	r3, r3, #9
 800f0bc:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800f0be:	6a3b      	ldr	r3, [r7, #32]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d01b      	beq.n	800f0fc <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f0c4:	683b      	ldr	r3, [r7, #0]
 800f0c6:	1e5a      	subs	r2, r3, #1
 800f0c8:	69fb      	ldr	r3, [r7, #28]
 800f0ca:	fbb2 f2f3 	udiv	r2, r2, r3
 800f0ce:	6a3b      	ldr	r3, [r7, #32]
 800f0d0:	1e59      	subs	r1, r3, #1
 800f0d2:	69fb      	ldr	r3, [r7, #28]
 800f0d4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800f0d8:	429a      	cmp	r2, r3
 800f0da:	d30f      	bcc.n	800f0fc <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f0dc:	6a3b      	ldr	r3, [r7, #32]
 800f0de:	1e5a      	subs	r2, r3, #1
 800f0e0:	69fb      	ldr	r3, [r7, #28]
 800f0e2:	425b      	negs	r3, r3
 800f0e4:	401a      	ands	r2, r3
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	699b      	ldr	r3, [r3, #24]
 800f0ee:	683a      	ldr	r2, [r7, #0]
 800f0f0:	1ad3      	subs	r3, r2, r3
 800f0f2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	69db      	ldr	r3, [r3, #28]
 800f0f8:	63bb      	str	r3, [r7, #56]	; 0x38
 800f0fa:	e022      	b.n	800f142 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	689b      	ldr	r3, [r3, #8]
 800f100:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f104:	2b00      	cmp	r3, #0
 800f106:	d119      	bne.n	800f13c <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2100      	movs	r1, #0
 800f10c:	4618      	mov	r0, r3
 800f10e:	f7fe faab 	bl	800d668 <create_chain>
 800f112:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f116:	2b01      	cmp	r3, #1
 800f118:	d104      	bne.n	800f124 <f_lseek+0x28a>
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2202      	movs	r2, #2
 800f11e:	755a      	strb	r2, [r3, #21]
 800f120:	2302      	movs	r3, #2
 800f122:	e0bf      	b.n	800f2a4 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f12a:	d104      	bne.n	800f136 <f_lseek+0x29c>
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2201      	movs	r2, #1
 800f130:	755a      	strb	r2, [r3, #21]
 800f132:	2301      	movs	r3, #1
 800f134:	e0b6      	b.n	800f2a4 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f13a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f140:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800f142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f144:	2b00      	cmp	r3, #0
 800f146:	d05d      	beq.n	800f204 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800f148:	e03a      	b.n	800f1c0 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800f14a:	683a      	ldr	r2, [r7, #0]
 800f14c:	69fb      	ldr	r3, [r7, #28]
 800f14e:	1ad3      	subs	r3, r2, r3
 800f150:	603b      	str	r3, [r7, #0]
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	699a      	ldr	r2, [r3, #24]
 800f156:	69fb      	ldr	r3, [r7, #28]
 800f158:	441a      	add	r2, r3
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	7d1b      	ldrb	r3, [r3, #20]
 800f162:	f003 0302 	and.w	r3, r3, #2
 800f166:	2b00      	cmp	r3, #0
 800f168:	d00b      	beq.n	800f182 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f16e:	4618      	mov	r0, r3
 800f170:	f7fe fa7a 	bl	800d668 <create_chain>
 800f174:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d108      	bne.n	800f18e <f_lseek+0x2f4>
							ofs = 0; break;
 800f17c:	2300      	movs	r3, #0
 800f17e:	603b      	str	r3, [r7, #0]
 800f180:	e022      	b.n	800f1c8 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f186:	4618      	mov	r0, r3
 800f188:	f7fe f875 	bl	800d276 <get_fat>
 800f18c:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f190:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f194:	d104      	bne.n	800f1a0 <f_lseek+0x306>
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	2201      	movs	r2, #1
 800f19a:	755a      	strb	r2, [r3, #21]
 800f19c:	2301      	movs	r3, #1
 800f19e:	e081      	b.n	800f2a4 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1a2:	2b01      	cmp	r3, #1
 800f1a4:	d904      	bls.n	800f1b0 <f_lseek+0x316>
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	695b      	ldr	r3, [r3, #20]
 800f1aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f1ac:	429a      	cmp	r2, r3
 800f1ae:	d304      	bcc.n	800f1ba <f_lseek+0x320>
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2202      	movs	r2, #2
 800f1b4:	755a      	strb	r2, [r3, #21]
 800f1b6:	2302      	movs	r3, #2
 800f1b8:	e074      	b.n	800f2a4 <f_lseek+0x40a>
					fp->clust = clst;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f1be:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f1c0:	683a      	ldr	r2, [r7, #0]
 800f1c2:	69fb      	ldr	r3, [r7, #28]
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	d8c0      	bhi.n	800f14a <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	699a      	ldr	r2, [r3, #24]
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	441a      	add	r2, r3
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d012      	beq.n	800f204 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f1de:	68bb      	ldr	r3, [r7, #8]
 800f1e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	f7fe f828 	bl	800d238 <clust2sect>
 800f1e8:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f1ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d104      	bne.n	800f1fa <f_lseek+0x360>
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	2202      	movs	r2, #2
 800f1f4:	755a      	strb	r2, [r3, #21]
 800f1f6:	2302      	movs	r3, #2
 800f1f8:	e054      	b.n	800f2a4 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	0a5b      	lsrs	r3, r3, #9
 800f1fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f200:	4413      	add	r3, r2
 800f202:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	699a      	ldr	r2, [r3, #24]
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	68db      	ldr	r3, [r3, #12]
 800f20c:	429a      	cmp	r2, r3
 800f20e:	d90a      	bls.n	800f226 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	699a      	ldr	r2, [r3, #24]
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	7d1b      	ldrb	r3, [r3, #20]
 800f21c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f220:	b2da      	uxtb	r2, r3
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	699b      	ldr	r3, [r3, #24]
 800f22a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d036      	beq.n	800f2a0 <f_lseek+0x406>
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	6a1b      	ldr	r3, [r3, #32]
 800f236:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f238:	429a      	cmp	r2, r3
 800f23a:	d031      	beq.n	800f2a0 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	7d1b      	ldrb	r3, [r3, #20]
 800f240:	b25b      	sxtb	r3, r3
 800f242:	2b00      	cmp	r3, #0
 800f244:	da18      	bge.n	800f278 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f246:	68bb      	ldr	r3, [r7, #8]
 800f248:	7858      	ldrb	r0, [r3, #1]
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	6a1a      	ldr	r2, [r3, #32]
 800f254:	2301      	movs	r3, #1
 800f256:	f7fd fc65 	bl	800cb24 <disk_write>
 800f25a:	4603      	mov	r3, r0
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d004      	beq.n	800f26a <f_lseek+0x3d0>
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	2201      	movs	r2, #1
 800f264:	755a      	strb	r2, [r3, #21]
 800f266:	2301      	movs	r3, #1
 800f268:	e01c      	b.n	800f2a4 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	7d1b      	ldrb	r3, [r3, #20]
 800f26e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f272:	b2da      	uxtb	r2, r3
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f278:	68bb      	ldr	r3, [r7, #8]
 800f27a:	7858      	ldrb	r0, [r3, #1]
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f282:	2301      	movs	r3, #1
 800f284:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f286:	f7fd fc2d 	bl	800cae4 <disk_read>
 800f28a:	4603      	mov	r3, r0
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d004      	beq.n	800f29a <f_lseek+0x400>
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	2201      	movs	r2, #1
 800f294:	755a      	strb	r2, [r3, #21]
 800f296:	2301      	movs	r3, #1
 800f298:	e004      	b.n	800f2a4 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f29e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800f2a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	3740      	adds	r7, #64	; 0x40
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	bd80      	pop	{r7, pc}

0800f2ac <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b086      	sub	sp, #24
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
 800f2b4:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d101      	bne.n	800f2c0 <f_opendir+0x14>
 800f2bc:	2309      	movs	r3, #9
 800f2be:	e064      	b.n	800f38a <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800f2c4:	f107 010c 	add.w	r1, r7, #12
 800f2c8:	463b      	mov	r3, r7
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	f7fe ff41 	bl	800e154 <find_volume>
 800f2d2:	4603      	mov	r3, r0
 800f2d4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f2d6:	7dfb      	ldrb	r3, [r7, #23]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d14f      	bne.n	800f37c <f_opendir+0xd0>
		obj->fs = fs;
 800f2dc:	68fa      	ldr	r2, [r7, #12]
 800f2de:	693b      	ldr	r3, [r7, #16]
 800f2e0:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	4619      	mov	r1, r3
 800f2e6:	6878      	ldr	r0, [r7, #4]
 800f2e8:	f7fe fe28 	bl	800df3c <follow_path>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800f2f0:	7dfb      	ldrb	r3, [r7, #23]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d13d      	bne.n	800f372 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f2fc:	b25b      	sxtb	r3, r3
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	db12      	blt.n	800f328 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800f302:	693b      	ldr	r3, [r7, #16]
 800f304:	799b      	ldrb	r3, [r3, #6]
 800f306:	f003 0310 	and.w	r3, r3, #16
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d00a      	beq.n	800f324 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800f30e:	68fa      	ldr	r2, [r7, #12]
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	6a1b      	ldr	r3, [r3, #32]
 800f314:	4619      	mov	r1, r3
 800f316:	4610      	mov	r0, r2
 800f318:	f7fe fbf9 	bl	800db0e <ld_clust>
 800f31c:	4602      	mov	r2, r0
 800f31e:	693b      	ldr	r3, [r7, #16]
 800f320:	609a      	str	r2, [r3, #8]
 800f322:	e001      	b.n	800f328 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800f324:	2305      	movs	r3, #5
 800f326:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800f328:	7dfb      	ldrb	r3, [r7, #23]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d121      	bne.n	800f372 <f_opendir+0xc6>
				obj->id = fs->id;
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	88da      	ldrh	r2, [r3, #6]
 800f332:	693b      	ldr	r3, [r7, #16]
 800f334:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800f336:	2100      	movs	r1, #0
 800f338:	6878      	ldr	r0, [r7, #4]
 800f33a:	f7fe fa61 	bl	800d800 <dir_sdi>
 800f33e:	4603      	mov	r3, r0
 800f340:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800f342:	7dfb      	ldrb	r3, [r7, #23]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d114      	bne.n	800f372 <f_opendir+0xc6>
					if (obj->sclust) {
 800f348:	693b      	ldr	r3, [r7, #16]
 800f34a:	689b      	ldr	r3, [r3, #8]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d00d      	beq.n	800f36c <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800f350:	2100      	movs	r1, #0
 800f352:	6878      	ldr	r0, [r7, #4]
 800f354:	f7fd fda2 	bl	800ce9c <inc_lock>
 800f358:	4602      	mov	r2, r0
 800f35a:	693b      	ldr	r3, [r7, #16]
 800f35c:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800f35e:	693b      	ldr	r3, [r7, #16]
 800f360:	691b      	ldr	r3, [r3, #16]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d105      	bne.n	800f372 <f_opendir+0xc6>
 800f366:	2312      	movs	r3, #18
 800f368:	75fb      	strb	r3, [r7, #23]
 800f36a:	e002      	b.n	800f372 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800f36c:	693b      	ldr	r3, [r7, #16]
 800f36e:	2200      	movs	r2, #0
 800f370:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800f372:	7dfb      	ldrb	r3, [r7, #23]
 800f374:	2b04      	cmp	r3, #4
 800f376:	d101      	bne.n	800f37c <f_opendir+0xd0>
 800f378:	2305      	movs	r3, #5
 800f37a:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800f37c:	7dfb      	ldrb	r3, [r7, #23]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d002      	beq.n	800f388 <f_opendir+0xdc>
 800f382:	693b      	ldr	r3, [r7, #16]
 800f384:	2200      	movs	r2, #0
 800f386:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f388:	7dfb      	ldrb	r3, [r7, #23]
}
 800f38a:	4618      	mov	r0, r3
 800f38c:	3718      	adds	r7, #24
 800f38e:	46bd      	mov	sp, r7
 800f390:	bd80      	pop	{r7, pc}

0800f392 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800f392:	b580      	push	{r7, lr}
 800f394:	b084      	sub	sp, #16
 800f396:	af00      	add	r7, sp, #0
 800f398:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	f107 0208 	add.w	r2, r7, #8
 800f3a0:	4611      	mov	r1, r2
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	f7ff f922 	bl	800e5ec <validate>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f3ac:	7bfb      	ldrb	r3, [r7, #15]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d110      	bne.n	800f3d4 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	691b      	ldr	r3, [r3, #16]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d006      	beq.n	800f3c8 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	691b      	ldr	r3, [r3, #16]
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f7fd fdfa 	bl	800cfb8 <dec_lock>
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800f3c8:	7bfb      	ldrb	r3, [r7, #15]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d102      	bne.n	800f3d4 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800f3d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	3710      	adds	r7, #16
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	bd80      	pop	{r7, pc}

0800f3de <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800f3de:	b580      	push	{r7, lr}
 800f3e0:	b084      	sub	sp, #16
 800f3e2:	af00      	add	r7, sp, #0
 800f3e4:	6078      	str	r0, [r7, #4]
 800f3e6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	f107 0208 	add.w	r2, r7, #8
 800f3ee:	4611      	mov	r1, r2
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	f7ff f8fb 	bl	800e5ec <validate>
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f3fa:	7bfb      	ldrb	r3, [r7, #15]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d126      	bne.n	800f44e <f_readdir+0x70>
		if (!fno) {
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d106      	bne.n	800f414 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800f406:	2100      	movs	r1, #0
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	f7fe f9f9 	bl	800d800 <dir_sdi>
 800f40e:	4603      	mov	r3, r0
 800f410:	73fb      	strb	r3, [r7, #15]
 800f412:	e01c      	b.n	800f44e <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800f414:	2100      	movs	r1, #0
 800f416:	6878      	ldr	r0, [r7, #4]
 800f418:	f7fe fbb8 	bl	800db8c <dir_read>
 800f41c:	4603      	mov	r3, r0
 800f41e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800f420:	7bfb      	ldrb	r3, [r7, #15]
 800f422:	2b04      	cmp	r3, #4
 800f424:	d101      	bne.n	800f42a <f_readdir+0x4c>
 800f426:	2300      	movs	r3, #0
 800f428:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800f42a:	7bfb      	ldrb	r3, [r7, #15]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d10e      	bne.n	800f44e <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800f430:	6839      	ldr	r1, [r7, #0]
 800f432:	6878      	ldr	r0, [r7, #4]
 800f434:	f7fe fc8e 	bl	800dd54 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800f438:	2100      	movs	r1, #0
 800f43a:	6878      	ldr	r0, [r7, #4]
 800f43c:	f7fe fa5b 	bl	800d8f6 <dir_next>
 800f440:	4603      	mov	r3, r0
 800f442:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800f444:	7bfb      	ldrb	r3, [r7, #15]
 800f446:	2b04      	cmp	r3, #4
 800f448:	d101      	bne.n	800f44e <f_readdir+0x70>
 800f44a:	2300      	movs	r3, #0
 800f44c:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800f44e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f450:	4618      	mov	r0, r3
 800f452:	3710      	adds	r7, #16
 800f454:	46bd      	mov	sp, r7
 800f456:	bd80      	pop	{r7, pc}

0800f458 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f458:	b480      	push	{r7}
 800f45a:	b087      	sub	sp, #28
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	60f8      	str	r0, [r7, #12]
 800f460:	60b9      	str	r1, [r7, #8]
 800f462:	4613      	mov	r3, r2
 800f464:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f466:	2301      	movs	r3, #1
 800f468:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f46a:	2300      	movs	r3, #0
 800f46c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f46e:	4b1f      	ldr	r3, [pc, #124]	; (800f4ec <FATFS_LinkDriverEx+0x94>)
 800f470:	7a5b      	ldrb	r3, [r3, #9]
 800f472:	b2db      	uxtb	r3, r3
 800f474:	2b00      	cmp	r3, #0
 800f476:	d131      	bne.n	800f4dc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f478:	4b1c      	ldr	r3, [pc, #112]	; (800f4ec <FATFS_LinkDriverEx+0x94>)
 800f47a:	7a5b      	ldrb	r3, [r3, #9]
 800f47c:	b2db      	uxtb	r3, r3
 800f47e:	461a      	mov	r2, r3
 800f480:	4b1a      	ldr	r3, [pc, #104]	; (800f4ec <FATFS_LinkDriverEx+0x94>)
 800f482:	2100      	movs	r1, #0
 800f484:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f486:	4b19      	ldr	r3, [pc, #100]	; (800f4ec <FATFS_LinkDriverEx+0x94>)
 800f488:	7a5b      	ldrb	r3, [r3, #9]
 800f48a:	b2db      	uxtb	r3, r3
 800f48c:	4a17      	ldr	r2, [pc, #92]	; (800f4ec <FATFS_LinkDriverEx+0x94>)
 800f48e:	009b      	lsls	r3, r3, #2
 800f490:	4413      	add	r3, r2
 800f492:	68fa      	ldr	r2, [r7, #12]
 800f494:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f496:	4b15      	ldr	r3, [pc, #84]	; (800f4ec <FATFS_LinkDriverEx+0x94>)
 800f498:	7a5b      	ldrb	r3, [r3, #9]
 800f49a:	b2db      	uxtb	r3, r3
 800f49c:	461a      	mov	r2, r3
 800f49e:	4b13      	ldr	r3, [pc, #76]	; (800f4ec <FATFS_LinkDriverEx+0x94>)
 800f4a0:	4413      	add	r3, r2
 800f4a2:	79fa      	ldrb	r2, [r7, #7]
 800f4a4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f4a6:	4b11      	ldr	r3, [pc, #68]	; (800f4ec <FATFS_LinkDriverEx+0x94>)
 800f4a8:	7a5b      	ldrb	r3, [r3, #9]
 800f4aa:	b2db      	uxtb	r3, r3
 800f4ac:	1c5a      	adds	r2, r3, #1
 800f4ae:	b2d1      	uxtb	r1, r2
 800f4b0:	4a0e      	ldr	r2, [pc, #56]	; (800f4ec <FATFS_LinkDriverEx+0x94>)
 800f4b2:	7251      	strb	r1, [r2, #9]
 800f4b4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f4b6:	7dbb      	ldrb	r3, [r7, #22]
 800f4b8:	3330      	adds	r3, #48	; 0x30
 800f4ba:	b2da      	uxtb	r2, r3
 800f4bc:	68bb      	ldr	r3, [r7, #8]
 800f4be:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f4c0:	68bb      	ldr	r3, [r7, #8]
 800f4c2:	3301      	adds	r3, #1
 800f4c4:	223a      	movs	r2, #58	; 0x3a
 800f4c6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f4c8:	68bb      	ldr	r3, [r7, #8]
 800f4ca:	3302      	adds	r3, #2
 800f4cc:	222f      	movs	r2, #47	; 0x2f
 800f4ce:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	3303      	adds	r3, #3
 800f4d4:	2200      	movs	r2, #0
 800f4d6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f4d8:	2300      	movs	r3, #0
 800f4da:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f4dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4de:	4618      	mov	r0, r3
 800f4e0:	371c      	adds	r7, #28
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e8:	4770      	bx	lr
 800f4ea:	bf00      	nop
 800f4ec:	200008fc 	.word	0x200008fc

0800f4f0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b082      	sub	sp, #8
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
 800f4f8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	6839      	ldr	r1, [r7, #0]
 800f4fe:	6878      	ldr	r0, [r7, #4]
 800f500:	f7ff ffaa 	bl	800f458 <FATFS_LinkDriverEx>
 800f504:	4603      	mov	r3, r0
}
 800f506:	4618      	mov	r0, r3
 800f508:	3708      	adds	r7, #8
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd80      	pop	{r7, pc}
	...

0800f510 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f510:	b580      	push	{r7, lr}
 800f512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f514:	2200      	movs	r2, #0
 800f516:	4912      	ldr	r1, [pc, #72]	; (800f560 <MX_USB_DEVICE_Init+0x50>)
 800f518:	4812      	ldr	r0, [pc, #72]	; (800f564 <MX_USB_DEVICE_Init+0x54>)
 800f51a:	f7fc f939 	bl	800b790 <USBD_Init>
 800f51e:	4603      	mov	r3, r0
 800f520:	2b00      	cmp	r3, #0
 800f522:	d001      	beq.n	800f528 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f524:	f7f3 fc3a 	bl	8002d9c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f528:	490f      	ldr	r1, [pc, #60]	; (800f568 <MX_USB_DEVICE_Init+0x58>)
 800f52a:	480e      	ldr	r0, [pc, #56]	; (800f564 <MX_USB_DEVICE_Init+0x54>)
 800f52c:	f7fc f960 	bl	800b7f0 <USBD_RegisterClass>
 800f530:	4603      	mov	r3, r0
 800f532:	2b00      	cmp	r3, #0
 800f534:	d001      	beq.n	800f53a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f536:	f7f3 fc31 	bl	8002d9c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f53a:	490c      	ldr	r1, [pc, #48]	; (800f56c <MX_USB_DEVICE_Init+0x5c>)
 800f53c:	4809      	ldr	r0, [pc, #36]	; (800f564 <MX_USB_DEVICE_Init+0x54>)
 800f53e:	f7fc f8b1 	bl	800b6a4 <USBD_CDC_RegisterInterface>
 800f542:	4603      	mov	r3, r0
 800f544:	2b00      	cmp	r3, #0
 800f546:	d001      	beq.n	800f54c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f548:	f7f3 fc28 	bl	8002d9c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f54c:	4805      	ldr	r0, [pc, #20]	; (800f564 <MX_USB_DEVICE_Init+0x54>)
 800f54e:	f7fc f976 	bl	800b83e <USBD_Start>
 800f552:	4603      	mov	r3, r0
 800f554:	2b00      	cmp	r3, #0
 800f556:	d001      	beq.n	800f55c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f558:	f7f3 fc20 	bl	8002d9c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f55c:	bf00      	nop
 800f55e:	bd80      	pop	{r7, pc}
 800f560:	20000148 	.word	0x20000148
 800f564:	20001d8c 	.word	0x20001d8c
 800f568:	20000030 	.word	0x20000030
 800f56c:	20000134 	.word	0x20000134

0800f570 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f570:	b580      	push	{r7, lr}
 800f572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f574:	2200      	movs	r2, #0
 800f576:	4905      	ldr	r1, [pc, #20]	; (800f58c <CDC_Init_FS+0x1c>)
 800f578:	4805      	ldr	r0, [pc, #20]	; (800f590 <CDC_Init_FS+0x20>)
 800f57a:	f7fc f8a8 	bl	800b6ce <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f57e:	4905      	ldr	r1, [pc, #20]	; (800f594 <CDC_Init_FS+0x24>)
 800f580:	4803      	ldr	r0, [pc, #12]	; (800f590 <CDC_Init_FS+0x20>)
 800f582:	f7fc f8c2 	bl	800b70a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f586:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f588:	4618      	mov	r0, r3
 800f58a:	bd80      	pop	{r7, pc}
 800f58c:	2000285c 	.word	0x2000285c
 800f590:	20001d8c 	.word	0x20001d8c
 800f594:	2000205c 	.word	0x2000205c

0800f598 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f598:	b480      	push	{r7}
 800f59a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f59c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f59e:	4618      	mov	r0, r3
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a6:	4770      	bx	lr

0800f5a8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f5a8:	b480      	push	{r7}
 800f5aa:	b083      	sub	sp, #12
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	6039      	str	r1, [r7, #0]
 800f5b2:	71fb      	strb	r3, [r7, #7]
 800f5b4:	4613      	mov	r3, r2
 800f5b6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f5b8:	79fb      	ldrb	r3, [r7, #7]
 800f5ba:	2b23      	cmp	r3, #35	; 0x23
 800f5bc:	d84a      	bhi.n	800f654 <CDC_Control_FS+0xac>
 800f5be:	a201      	add	r2, pc, #4	; (adr r2, 800f5c4 <CDC_Control_FS+0x1c>)
 800f5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5c4:	0800f655 	.word	0x0800f655
 800f5c8:	0800f655 	.word	0x0800f655
 800f5cc:	0800f655 	.word	0x0800f655
 800f5d0:	0800f655 	.word	0x0800f655
 800f5d4:	0800f655 	.word	0x0800f655
 800f5d8:	0800f655 	.word	0x0800f655
 800f5dc:	0800f655 	.word	0x0800f655
 800f5e0:	0800f655 	.word	0x0800f655
 800f5e4:	0800f655 	.word	0x0800f655
 800f5e8:	0800f655 	.word	0x0800f655
 800f5ec:	0800f655 	.word	0x0800f655
 800f5f0:	0800f655 	.word	0x0800f655
 800f5f4:	0800f655 	.word	0x0800f655
 800f5f8:	0800f655 	.word	0x0800f655
 800f5fc:	0800f655 	.word	0x0800f655
 800f600:	0800f655 	.word	0x0800f655
 800f604:	0800f655 	.word	0x0800f655
 800f608:	0800f655 	.word	0x0800f655
 800f60c:	0800f655 	.word	0x0800f655
 800f610:	0800f655 	.word	0x0800f655
 800f614:	0800f655 	.word	0x0800f655
 800f618:	0800f655 	.word	0x0800f655
 800f61c:	0800f655 	.word	0x0800f655
 800f620:	0800f655 	.word	0x0800f655
 800f624:	0800f655 	.word	0x0800f655
 800f628:	0800f655 	.word	0x0800f655
 800f62c:	0800f655 	.word	0x0800f655
 800f630:	0800f655 	.word	0x0800f655
 800f634:	0800f655 	.word	0x0800f655
 800f638:	0800f655 	.word	0x0800f655
 800f63c:	0800f655 	.word	0x0800f655
 800f640:	0800f655 	.word	0x0800f655
 800f644:	0800f655 	.word	0x0800f655
 800f648:	0800f655 	.word	0x0800f655
 800f64c:	0800f655 	.word	0x0800f655
 800f650:	0800f655 	.word	0x0800f655
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f654:	bf00      	nop
  }

  return (USBD_OK);
 800f656:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f658:	4618      	mov	r0, r3
 800f65a:	370c      	adds	r7, #12
 800f65c:	46bd      	mov	sp, r7
 800f65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f662:	4770      	bx	lr

0800f664 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b082      	sub	sp, #8
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
 800f66c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f66e:	6879      	ldr	r1, [r7, #4]
 800f670:	4805      	ldr	r0, [pc, #20]	; (800f688 <CDC_Receive_FS+0x24>)
 800f672:	f7fc f84a 	bl	800b70a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f676:	4804      	ldr	r0, [pc, #16]	; (800f688 <CDC_Receive_FS+0x24>)
 800f678:	f7fc f860 	bl	800b73c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f67c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f67e:	4618      	mov	r0, r3
 800f680:	3708      	adds	r7, #8
 800f682:	46bd      	mov	sp, r7
 800f684:	bd80      	pop	{r7, pc}
 800f686:	bf00      	nop
 800f688:	20001d8c 	.word	0x20001d8c

0800f68c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f68c:	b480      	push	{r7}
 800f68e:	b087      	sub	sp, #28
 800f690:	af00      	add	r7, sp, #0
 800f692:	60f8      	str	r0, [r7, #12]
 800f694:	60b9      	str	r1, [r7, #8]
 800f696:	4613      	mov	r3, r2
 800f698:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f69a:	2300      	movs	r3, #0
 800f69c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f69e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	371c      	adds	r7, #28
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ac:	4770      	bx	lr
	...

0800f6b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6b0:	b480      	push	{r7}
 800f6b2:	b083      	sub	sp, #12
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	6039      	str	r1, [r7, #0]
 800f6ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	2212      	movs	r2, #18
 800f6c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f6c2:	4b03      	ldr	r3, [pc, #12]	; (800f6d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	370c      	adds	r7, #12
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ce:	4770      	bx	lr
 800f6d0:	20000164 	.word	0x20000164

0800f6d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6d4:	b480      	push	{r7}
 800f6d6:	b083      	sub	sp, #12
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	4603      	mov	r3, r0
 800f6dc:	6039      	str	r1, [r7, #0]
 800f6de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f6e0:	683b      	ldr	r3, [r7, #0]
 800f6e2:	2204      	movs	r2, #4
 800f6e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f6e6:	4b03      	ldr	r3, [pc, #12]	; (800f6f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	370c      	adds	r7, #12
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f2:	4770      	bx	lr
 800f6f4:	20000178 	.word	0x20000178

0800f6f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b082      	sub	sp, #8
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	4603      	mov	r3, r0
 800f700:	6039      	str	r1, [r7, #0]
 800f702:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f704:	79fb      	ldrb	r3, [r7, #7]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d105      	bne.n	800f716 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f70a:	683a      	ldr	r2, [r7, #0]
 800f70c:	4907      	ldr	r1, [pc, #28]	; (800f72c <USBD_FS_ProductStrDescriptor+0x34>)
 800f70e:	4808      	ldr	r0, [pc, #32]	; (800f730 <USBD_FS_ProductStrDescriptor+0x38>)
 800f710:	f7fd f8c7 	bl	800c8a2 <USBD_GetString>
 800f714:	e004      	b.n	800f720 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f716:	683a      	ldr	r2, [r7, #0]
 800f718:	4904      	ldr	r1, [pc, #16]	; (800f72c <USBD_FS_ProductStrDescriptor+0x34>)
 800f71a:	4805      	ldr	r0, [pc, #20]	; (800f730 <USBD_FS_ProductStrDescriptor+0x38>)
 800f71c:	f7fd f8c1 	bl	800c8a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f720:	4b02      	ldr	r3, [pc, #8]	; (800f72c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f722:	4618      	mov	r0, r3
 800f724:	3708      	adds	r7, #8
 800f726:	46bd      	mov	sp, r7
 800f728:	bd80      	pop	{r7, pc}
 800f72a:	bf00      	nop
 800f72c:	2000305c 	.word	0x2000305c
 800f730:	080153e4 	.word	0x080153e4

0800f734 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b082      	sub	sp, #8
 800f738:	af00      	add	r7, sp, #0
 800f73a:	4603      	mov	r3, r0
 800f73c:	6039      	str	r1, [r7, #0]
 800f73e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f740:	683a      	ldr	r2, [r7, #0]
 800f742:	4904      	ldr	r1, [pc, #16]	; (800f754 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f744:	4804      	ldr	r0, [pc, #16]	; (800f758 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f746:	f7fd f8ac 	bl	800c8a2 <USBD_GetString>
  return USBD_StrDesc;
 800f74a:	4b02      	ldr	r3, [pc, #8]	; (800f754 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f74c:	4618      	mov	r0, r3
 800f74e:	3708      	adds	r7, #8
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}
 800f754:	2000305c 	.word	0x2000305c
 800f758:	080153fc 	.word	0x080153fc

0800f75c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b082      	sub	sp, #8
 800f760:	af00      	add	r7, sp, #0
 800f762:	4603      	mov	r3, r0
 800f764:	6039      	str	r1, [r7, #0]
 800f766:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	221a      	movs	r2, #26
 800f76c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f76e:	f000 f843 	bl	800f7f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f772:	4b02      	ldr	r3, [pc, #8]	; (800f77c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f774:	4618      	mov	r0, r3
 800f776:	3708      	adds	r7, #8
 800f778:	46bd      	mov	sp, r7
 800f77a:	bd80      	pop	{r7, pc}
 800f77c:	2000017c 	.word	0x2000017c

0800f780 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b082      	sub	sp, #8
 800f784:	af00      	add	r7, sp, #0
 800f786:	4603      	mov	r3, r0
 800f788:	6039      	str	r1, [r7, #0]
 800f78a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f78c:	79fb      	ldrb	r3, [r7, #7]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d105      	bne.n	800f79e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f792:	683a      	ldr	r2, [r7, #0]
 800f794:	4907      	ldr	r1, [pc, #28]	; (800f7b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f796:	4808      	ldr	r0, [pc, #32]	; (800f7b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f798:	f7fd f883 	bl	800c8a2 <USBD_GetString>
 800f79c:	e004      	b.n	800f7a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f79e:	683a      	ldr	r2, [r7, #0]
 800f7a0:	4904      	ldr	r1, [pc, #16]	; (800f7b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f7a2:	4805      	ldr	r0, [pc, #20]	; (800f7b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f7a4:	f7fd f87d 	bl	800c8a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f7a8:	4b02      	ldr	r3, [pc, #8]	; (800f7b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	3708      	adds	r7, #8
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bd80      	pop	{r7, pc}
 800f7b2:	bf00      	nop
 800f7b4:	2000305c 	.word	0x2000305c
 800f7b8:	08015410 	.word	0x08015410

0800f7bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b082      	sub	sp, #8
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	6039      	str	r1, [r7, #0]
 800f7c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f7c8:	79fb      	ldrb	r3, [r7, #7]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d105      	bne.n	800f7da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f7ce:	683a      	ldr	r2, [r7, #0]
 800f7d0:	4907      	ldr	r1, [pc, #28]	; (800f7f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f7d2:	4808      	ldr	r0, [pc, #32]	; (800f7f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f7d4:	f7fd f865 	bl	800c8a2 <USBD_GetString>
 800f7d8:	e004      	b.n	800f7e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f7da:	683a      	ldr	r2, [r7, #0]
 800f7dc:	4904      	ldr	r1, [pc, #16]	; (800f7f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f7de:	4805      	ldr	r0, [pc, #20]	; (800f7f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f7e0:	f7fd f85f 	bl	800c8a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f7e4:	4b02      	ldr	r3, [pc, #8]	; (800f7f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	3708      	adds	r7, #8
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	bd80      	pop	{r7, pc}
 800f7ee:	bf00      	nop
 800f7f0:	2000305c 	.word	0x2000305c
 800f7f4:	0801541c 	.word	0x0801541c

0800f7f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b084      	sub	sp, #16
 800f7fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f7fe:	4b0f      	ldr	r3, [pc, #60]	; (800f83c <Get_SerialNum+0x44>)
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f804:	4b0e      	ldr	r3, [pc, #56]	; (800f840 <Get_SerialNum+0x48>)
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f80a:	4b0e      	ldr	r3, [pc, #56]	; (800f844 <Get_SerialNum+0x4c>)
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f810:	68fa      	ldr	r2, [r7, #12]
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	4413      	add	r3, r2
 800f816:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d009      	beq.n	800f832 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f81e:	2208      	movs	r2, #8
 800f820:	4909      	ldr	r1, [pc, #36]	; (800f848 <Get_SerialNum+0x50>)
 800f822:	68f8      	ldr	r0, [r7, #12]
 800f824:	f000 f814 	bl	800f850 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f828:	2204      	movs	r2, #4
 800f82a:	4908      	ldr	r1, [pc, #32]	; (800f84c <Get_SerialNum+0x54>)
 800f82c:	68b8      	ldr	r0, [r7, #8]
 800f82e:	f000 f80f 	bl	800f850 <IntToUnicode>
  }
}
 800f832:	bf00      	nop
 800f834:	3710      	adds	r7, #16
 800f836:	46bd      	mov	sp, r7
 800f838:	bd80      	pop	{r7, pc}
 800f83a:	bf00      	nop
 800f83c:	1fff7a10 	.word	0x1fff7a10
 800f840:	1fff7a14 	.word	0x1fff7a14
 800f844:	1fff7a18 	.word	0x1fff7a18
 800f848:	2000017e 	.word	0x2000017e
 800f84c:	2000018e 	.word	0x2000018e

0800f850 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f850:	b480      	push	{r7}
 800f852:	b087      	sub	sp, #28
 800f854:	af00      	add	r7, sp, #0
 800f856:	60f8      	str	r0, [r7, #12]
 800f858:	60b9      	str	r1, [r7, #8]
 800f85a:	4613      	mov	r3, r2
 800f85c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f85e:	2300      	movs	r3, #0
 800f860:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f862:	2300      	movs	r3, #0
 800f864:	75fb      	strb	r3, [r7, #23]
 800f866:	e027      	b.n	800f8b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	0f1b      	lsrs	r3, r3, #28
 800f86c:	2b09      	cmp	r3, #9
 800f86e:	d80b      	bhi.n	800f888 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	0f1b      	lsrs	r3, r3, #28
 800f874:	b2da      	uxtb	r2, r3
 800f876:	7dfb      	ldrb	r3, [r7, #23]
 800f878:	005b      	lsls	r3, r3, #1
 800f87a:	4619      	mov	r1, r3
 800f87c:	68bb      	ldr	r3, [r7, #8]
 800f87e:	440b      	add	r3, r1
 800f880:	3230      	adds	r2, #48	; 0x30
 800f882:	b2d2      	uxtb	r2, r2
 800f884:	701a      	strb	r2, [r3, #0]
 800f886:	e00a      	b.n	800f89e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	0f1b      	lsrs	r3, r3, #28
 800f88c:	b2da      	uxtb	r2, r3
 800f88e:	7dfb      	ldrb	r3, [r7, #23]
 800f890:	005b      	lsls	r3, r3, #1
 800f892:	4619      	mov	r1, r3
 800f894:	68bb      	ldr	r3, [r7, #8]
 800f896:	440b      	add	r3, r1
 800f898:	3237      	adds	r2, #55	; 0x37
 800f89a:	b2d2      	uxtb	r2, r2
 800f89c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	011b      	lsls	r3, r3, #4
 800f8a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f8a4:	7dfb      	ldrb	r3, [r7, #23]
 800f8a6:	005b      	lsls	r3, r3, #1
 800f8a8:	3301      	adds	r3, #1
 800f8aa:	68ba      	ldr	r2, [r7, #8]
 800f8ac:	4413      	add	r3, r2
 800f8ae:	2200      	movs	r2, #0
 800f8b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f8b2:	7dfb      	ldrb	r3, [r7, #23]
 800f8b4:	3301      	adds	r3, #1
 800f8b6:	75fb      	strb	r3, [r7, #23]
 800f8b8:	7dfa      	ldrb	r2, [r7, #23]
 800f8ba:	79fb      	ldrb	r3, [r7, #7]
 800f8bc:	429a      	cmp	r2, r3
 800f8be:	d3d3      	bcc.n	800f868 <IntToUnicode+0x18>
  }
}
 800f8c0:	bf00      	nop
 800f8c2:	bf00      	nop
 800f8c4:	371c      	adds	r7, #28
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8cc:	4770      	bx	lr
	...

0800f8d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b08a      	sub	sp, #40	; 0x28
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f8d8:	f107 0314 	add.w	r3, r7, #20
 800f8dc:	2200      	movs	r2, #0
 800f8de:	601a      	str	r2, [r3, #0]
 800f8e0:	605a      	str	r2, [r3, #4]
 800f8e2:	609a      	str	r2, [r3, #8]
 800f8e4:	60da      	str	r2, [r3, #12]
 800f8e6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f8f0:	d147      	bne.n	800f982 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	613b      	str	r3, [r7, #16]
 800f8f6:	4b25      	ldr	r3, [pc, #148]	; (800f98c <HAL_PCD_MspInit+0xbc>)
 800f8f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8fa:	4a24      	ldr	r2, [pc, #144]	; (800f98c <HAL_PCD_MspInit+0xbc>)
 800f8fc:	f043 0301 	orr.w	r3, r3, #1
 800f900:	6313      	str	r3, [r2, #48]	; 0x30
 800f902:	4b22      	ldr	r3, [pc, #136]	; (800f98c <HAL_PCD_MspInit+0xbc>)
 800f904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f906:	f003 0301 	and.w	r3, r3, #1
 800f90a:	613b      	str	r3, [r7, #16]
 800f90c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800f90e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f914:	2300      	movs	r3, #0
 800f916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f918:	2300      	movs	r3, #0
 800f91a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f91c:	f107 0314 	add.w	r3, r7, #20
 800f920:	4619      	mov	r1, r3
 800f922:	481b      	ldr	r0, [pc, #108]	; (800f990 <HAL_PCD_MspInit+0xc0>)
 800f924:	f7f4 fc62 	bl	80041ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f928:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f92c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f92e:	2302      	movs	r3, #2
 800f930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f932:	2300      	movs	r3, #0
 800f934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f936:	2303      	movs	r3, #3
 800f938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f93a:	230a      	movs	r3, #10
 800f93c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f93e:	f107 0314 	add.w	r3, r7, #20
 800f942:	4619      	mov	r1, r3
 800f944:	4812      	ldr	r0, [pc, #72]	; (800f990 <HAL_PCD_MspInit+0xc0>)
 800f946:	f7f4 fc51 	bl	80041ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f94a:	4b10      	ldr	r3, [pc, #64]	; (800f98c <HAL_PCD_MspInit+0xbc>)
 800f94c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f94e:	4a0f      	ldr	r2, [pc, #60]	; (800f98c <HAL_PCD_MspInit+0xbc>)
 800f950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f954:	6353      	str	r3, [r2, #52]	; 0x34
 800f956:	2300      	movs	r3, #0
 800f958:	60fb      	str	r3, [r7, #12]
 800f95a:	4b0c      	ldr	r3, [pc, #48]	; (800f98c <HAL_PCD_MspInit+0xbc>)
 800f95c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f95e:	4a0b      	ldr	r2, [pc, #44]	; (800f98c <HAL_PCD_MspInit+0xbc>)
 800f960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f964:	6453      	str	r3, [r2, #68]	; 0x44
 800f966:	4b09      	ldr	r3, [pc, #36]	; (800f98c <HAL_PCD_MspInit+0xbc>)
 800f968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f96a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f96e:	60fb      	str	r3, [r7, #12]
 800f970:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f972:	2200      	movs	r2, #0
 800f974:	2100      	movs	r1, #0
 800f976:	2043      	movs	r0, #67	; 0x43
 800f978:	f7f4 fc01 	bl	800417e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f97c:	2043      	movs	r0, #67	; 0x43
 800f97e:	f7f4 fc1a 	bl	80041b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f982:	bf00      	nop
 800f984:	3728      	adds	r7, #40	; 0x28
 800f986:	46bd      	mov	sp, r7
 800f988:	bd80      	pop	{r7, pc}
 800f98a:	bf00      	nop
 800f98c:	40023800 	.word	0x40023800
 800f990:	40020000 	.word	0x40020000

0800f994 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b082      	sub	sp, #8
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800f9a8:	4619      	mov	r1, r3
 800f9aa:	4610      	mov	r0, r2
 800f9ac:	f7fb ff92 	bl	800b8d4 <USBD_LL_SetupStage>
}
 800f9b0:	bf00      	nop
 800f9b2:	3708      	adds	r7, #8
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	bd80      	pop	{r7, pc}

0800f9b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b082      	sub	sp, #8
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
 800f9c0:	460b      	mov	r3, r1
 800f9c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800f9ca:	78fa      	ldrb	r2, [r7, #3]
 800f9cc:	6879      	ldr	r1, [r7, #4]
 800f9ce:	4613      	mov	r3, r2
 800f9d0:	00db      	lsls	r3, r3, #3
 800f9d2:	1a9b      	subs	r3, r3, r2
 800f9d4:	009b      	lsls	r3, r3, #2
 800f9d6:	440b      	add	r3, r1
 800f9d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f9dc:	681a      	ldr	r2, [r3, #0]
 800f9de:	78fb      	ldrb	r3, [r7, #3]
 800f9e0:	4619      	mov	r1, r3
 800f9e2:	f7fb ffcc 	bl	800b97e <USBD_LL_DataOutStage>
}
 800f9e6:	bf00      	nop
 800f9e8:	3708      	adds	r7, #8
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	bd80      	pop	{r7, pc}

0800f9ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9ee:	b580      	push	{r7, lr}
 800f9f0:	b082      	sub	sp, #8
 800f9f2:	af00      	add	r7, sp, #0
 800f9f4:	6078      	str	r0, [r7, #4]
 800f9f6:	460b      	mov	r3, r1
 800f9f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800fa00:	78fa      	ldrb	r2, [r7, #3]
 800fa02:	6879      	ldr	r1, [r7, #4]
 800fa04:	4613      	mov	r3, r2
 800fa06:	00db      	lsls	r3, r3, #3
 800fa08:	1a9b      	subs	r3, r3, r2
 800fa0a:	009b      	lsls	r3, r3, #2
 800fa0c:	440b      	add	r3, r1
 800fa0e:	3348      	adds	r3, #72	; 0x48
 800fa10:	681a      	ldr	r2, [r3, #0]
 800fa12:	78fb      	ldrb	r3, [r7, #3]
 800fa14:	4619      	mov	r1, r3
 800fa16:	f7fc f815 	bl	800ba44 <USBD_LL_DataInStage>
}
 800fa1a:	bf00      	nop
 800fa1c:	3708      	adds	r7, #8
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bd80      	pop	{r7, pc}

0800fa22 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa22:	b580      	push	{r7, lr}
 800fa24:	b082      	sub	sp, #8
 800fa26:	af00      	add	r7, sp, #0
 800fa28:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fa30:	4618      	mov	r0, r3
 800fa32:	f7fc f929 	bl	800bc88 <USBD_LL_SOF>
}
 800fa36:	bf00      	nop
 800fa38:	3708      	adds	r7, #8
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	bd80      	pop	{r7, pc}

0800fa3e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa3e:	b580      	push	{r7, lr}
 800fa40:	b084      	sub	sp, #16
 800fa42:	af00      	add	r7, sp, #0
 800fa44:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fa46:	2301      	movs	r3, #1
 800fa48:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	68db      	ldr	r3, [r3, #12]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d102      	bne.n	800fa58 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800fa52:	2300      	movs	r3, #0
 800fa54:	73fb      	strb	r3, [r7, #15]
 800fa56:	e008      	b.n	800fa6a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	68db      	ldr	r3, [r3, #12]
 800fa5c:	2b02      	cmp	r3, #2
 800fa5e:	d102      	bne.n	800fa66 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800fa60:	2301      	movs	r3, #1
 800fa62:	73fb      	strb	r3, [r7, #15]
 800fa64:	e001      	b.n	800fa6a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800fa66:	f7f3 f999 	bl	8002d9c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fa70:	7bfa      	ldrb	r2, [r7, #15]
 800fa72:	4611      	mov	r1, r2
 800fa74:	4618      	mov	r0, r3
 800fa76:	f7fc f8c9 	bl	800bc0c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fa80:	4618      	mov	r0, r3
 800fa82:	f7fc f875 	bl	800bb70 <USBD_LL_Reset>
}
 800fa86:	bf00      	nop
 800fa88:	3710      	adds	r7, #16
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bd80      	pop	{r7, pc}
	...

0800fa90 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b082      	sub	sp, #8
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7fc f8c4 	bl	800bc2c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	687a      	ldr	r2, [r7, #4]
 800fab0:	6812      	ldr	r2, [r2, #0]
 800fab2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fab6:	f043 0301 	orr.w	r3, r3, #1
 800faba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	6a1b      	ldr	r3, [r3, #32]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d005      	beq.n	800fad0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fac4:	4b04      	ldr	r3, [pc, #16]	; (800fad8 <HAL_PCD_SuspendCallback+0x48>)
 800fac6:	691b      	ldr	r3, [r3, #16]
 800fac8:	4a03      	ldr	r2, [pc, #12]	; (800fad8 <HAL_PCD_SuspendCallback+0x48>)
 800faca:	f043 0306 	orr.w	r3, r3, #6
 800face:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fad0:	bf00      	nop
 800fad2:	3708      	adds	r7, #8
 800fad4:	46bd      	mov	sp, r7
 800fad6:	bd80      	pop	{r7, pc}
 800fad8:	e000ed00 	.word	0xe000ed00

0800fadc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b082      	sub	sp, #8
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800faea:	4618      	mov	r0, r3
 800faec:	f7fc f8b4 	bl	800bc58 <USBD_LL_Resume>
}
 800faf0:	bf00      	nop
 800faf2:	3708      	adds	r7, #8
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}

0800faf8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b082      	sub	sp, #8
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
 800fb00:	460b      	mov	r3, r1
 800fb02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fb0a:	78fa      	ldrb	r2, [r7, #3]
 800fb0c:	4611      	mov	r1, r2
 800fb0e:	4618      	mov	r0, r3
 800fb10:	f7fc f902 	bl	800bd18 <USBD_LL_IsoOUTIncomplete>
}
 800fb14:	bf00      	nop
 800fb16:	3708      	adds	r7, #8
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	bd80      	pop	{r7, pc}

0800fb1c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b082      	sub	sp, #8
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
 800fb24:	460b      	mov	r3, r1
 800fb26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fb2e:	78fa      	ldrb	r2, [r7, #3]
 800fb30:	4611      	mov	r1, r2
 800fb32:	4618      	mov	r0, r3
 800fb34:	f7fc f8ca 	bl	800bccc <USBD_LL_IsoINIncomplete>
}
 800fb38:	bf00      	nop
 800fb3a:	3708      	adds	r7, #8
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bd80      	pop	{r7, pc}

0800fb40 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b082      	sub	sp, #8
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fb4e:	4618      	mov	r0, r3
 800fb50:	f7fc f908 	bl	800bd64 <USBD_LL_DevConnected>
}
 800fb54:	bf00      	nop
 800fb56:	3708      	adds	r7, #8
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}

0800fb5c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b082      	sub	sp, #8
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f7fc f905 	bl	800bd7a <USBD_LL_DevDisconnected>
}
 800fb70:	bf00      	nop
 800fb72:	3708      	adds	r7, #8
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd80      	pop	{r7, pc}

0800fb78 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b082      	sub	sp, #8
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	781b      	ldrb	r3, [r3, #0]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d13c      	bne.n	800fc02 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fb88:	4a20      	ldr	r2, [pc, #128]	; (800fc0c <USBD_LL_Init+0x94>)
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	4a1e      	ldr	r2, [pc, #120]	; (800fc0c <USBD_LL_Init+0x94>)
 800fb94:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fb98:	4b1c      	ldr	r3, [pc, #112]	; (800fc0c <USBD_LL_Init+0x94>)
 800fb9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800fb9e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800fba0:	4b1a      	ldr	r3, [pc, #104]	; (800fc0c <USBD_LL_Init+0x94>)
 800fba2:	2204      	movs	r2, #4
 800fba4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800fba6:	4b19      	ldr	r3, [pc, #100]	; (800fc0c <USBD_LL_Init+0x94>)
 800fba8:	2202      	movs	r2, #2
 800fbaa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fbac:	4b17      	ldr	r3, [pc, #92]	; (800fc0c <USBD_LL_Init+0x94>)
 800fbae:	2200      	movs	r2, #0
 800fbb0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fbb2:	4b16      	ldr	r3, [pc, #88]	; (800fc0c <USBD_LL_Init+0x94>)
 800fbb4:	2202      	movs	r2, #2
 800fbb6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fbb8:	4b14      	ldr	r3, [pc, #80]	; (800fc0c <USBD_LL_Init+0x94>)
 800fbba:	2200      	movs	r2, #0
 800fbbc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fbbe:	4b13      	ldr	r3, [pc, #76]	; (800fc0c <USBD_LL_Init+0x94>)
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fbc4:	4b11      	ldr	r3, [pc, #68]	; (800fc0c <USBD_LL_Init+0x94>)
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800fbca:	4b10      	ldr	r3, [pc, #64]	; (800fc0c <USBD_LL_Init+0x94>)
 800fbcc:	2201      	movs	r2, #1
 800fbce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fbd0:	4b0e      	ldr	r3, [pc, #56]	; (800fc0c <USBD_LL_Init+0x94>)
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fbd6:	480d      	ldr	r0, [pc, #52]	; (800fc0c <USBD_LL_Init+0x94>)
 800fbd8:	f7f5 fd3a 	bl	8005650 <HAL_PCD_Init>
 800fbdc:	4603      	mov	r3, r0
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d001      	beq.n	800fbe6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800fbe2:	f7f3 f8db 	bl	8002d9c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fbe6:	2180      	movs	r1, #128	; 0x80
 800fbe8:	4808      	ldr	r0, [pc, #32]	; (800fc0c <USBD_LL_Init+0x94>)
 800fbea:	f7f6 fe98 	bl	800691e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fbee:	2240      	movs	r2, #64	; 0x40
 800fbf0:	2100      	movs	r1, #0
 800fbf2:	4806      	ldr	r0, [pc, #24]	; (800fc0c <USBD_LL_Init+0x94>)
 800fbf4:	f7f6 fe4c 	bl	8006890 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fbf8:	2280      	movs	r2, #128	; 0x80
 800fbfa:	2101      	movs	r1, #1
 800fbfc:	4803      	ldr	r0, [pc, #12]	; (800fc0c <USBD_LL_Init+0x94>)
 800fbfe:	f7f6 fe47 	bl	8006890 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800fc02:	2300      	movs	r3, #0
}
 800fc04:	4618      	mov	r0, r3
 800fc06:	3708      	adds	r7, #8
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	bd80      	pop	{r7, pc}
 800fc0c:	2000325c 	.word	0x2000325c

0800fc10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b084      	sub	sp, #16
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc18:	2300      	movs	r3, #0
 800fc1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fc26:	4618      	mov	r0, r3
 800fc28:	f7f5 fe2f 	bl	800588a <HAL_PCD_Start>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc30:	7bfb      	ldrb	r3, [r7, #15]
 800fc32:	4618      	mov	r0, r3
 800fc34:	f000 f942 	bl	800febc <USBD_Get_USB_Status>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc3e:	4618      	mov	r0, r3
 800fc40:	3710      	adds	r7, #16
 800fc42:	46bd      	mov	sp, r7
 800fc44:	bd80      	pop	{r7, pc}

0800fc46 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fc46:	b580      	push	{r7, lr}
 800fc48:	b084      	sub	sp, #16
 800fc4a:	af00      	add	r7, sp, #0
 800fc4c:	6078      	str	r0, [r7, #4]
 800fc4e:	4608      	mov	r0, r1
 800fc50:	4611      	mov	r1, r2
 800fc52:	461a      	mov	r2, r3
 800fc54:	4603      	mov	r3, r0
 800fc56:	70fb      	strb	r3, [r7, #3]
 800fc58:	460b      	mov	r3, r1
 800fc5a:	70bb      	strb	r3, [r7, #2]
 800fc5c:	4613      	mov	r3, r2
 800fc5e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc60:	2300      	movs	r3, #0
 800fc62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc64:	2300      	movs	r3, #0
 800fc66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fc6e:	78bb      	ldrb	r3, [r7, #2]
 800fc70:	883a      	ldrh	r2, [r7, #0]
 800fc72:	78f9      	ldrb	r1, [r7, #3]
 800fc74:	f7f6 fa13 	bl	800609e <HAL_PCD_EP_Open>
 800fc78:	4603      	mov	r3, r0
 800fc7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc7c:	7bfb      	ldrb	r3, [r7, #15]
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f000 f91c 	bl	800febc <USBD_Get_USB_Status>
 800fc84:	4603      	mov	r3, r0
 800fc86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc88:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	3710      	adds	r7, #16
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	bd80      	pop	{r7, pc}

0800fc92 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc92:	b580      	push	{r7, lr}
 800fc94:	b084      	sub	sp, #16
 800fc96:	af00      	add	r7, sp, #0
 800fc98:	6078      	str	r0, [r7, #4]
 800fc9a:	460b      	mov	r3, r1
 800fc9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc9e:	2300      	movs	r3, #0
 800fca0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fca2:	2300      	movs	r3, #0
 800fca4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fcac:	78fa      	ldrb	r2, [r7, #3]
 800fcae:	4611      	mov	r1, r2
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f7f6 fa5c 	bl	800616e <HAL_PCD_EP_Close>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fcba:	7bfb      	ldrb	r3, [r7, #15]
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	f000 f8fd 	bl	800febc <USBD_Get_USB_Status>
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fcc6:	7bbb      	ldrb	r3, [r7, #14]
}
 800fcc8:	4618      	mov	r0, r3
 800fcca:	3710      	adds	r7, #16
 800fccc:	46bd      	mov	sp, r7
 800fcce:	bd80      	pop	{r7, pc}

0800fcd0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b084      	sub	sp, #16
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
 800fcd8:	460b      	mov	r3, r1
 800fcda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fcdc:	2300      	movs	r3, #0
 800fcde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fce0:	2300      	movs	r3, #0
 800fce2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fcea:	78fa      	ldrb	r2, [r7, #3]
 800fcec:	4611      	mov	r1, r2
 800fcee:	4618      	mov	r0, r3
 800fcf0:	f7f6 fb34 	bl	800635c <HAL_PCD_EP_SetStall>
 800fcf4:	4603      	mov	r3, r0
 800fcf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fcf8:	7bfb      	ldrb	r3, [r7, #15]
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f000 f8de 	bl	800febc <USBD_Get_USB_Status>
 800fd00:	4603      	mov	r3, r0
 800fd02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fd04:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd06:	4618      	mov	r0, r3
 800fd08:	3710      	adds	r7, #16
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	bd80      	pop	{r7, pc}

0800fd0e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fd0e:	b580      	push	{r7, lr}
 800fd10:	b084      	sub	sp, #16
 800fd12:	af00      	add	r7, sp, #0
 800fd14:	6078      	str	r0, [r7, #4]
 800fd16:	460b      	mov	r3, r1
 800fd18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd1e:	2300      	movs	r3, #0
 800fd20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fd28:	78fa      	ldrb	r2, [r7, #3]
 800fd2a:	4611      	mov	r1, r2
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	f7f6 fb79 	bl	8006424 <HAL_PCD_EP_ClrStall>
 800fd32:	4603      	mov	r3, r0
 800fd34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd36:	7bfb      	ldrb	r3, [r7, #15]
 800fd38:	4618      	mov	r0, r3
 800fd3a:	f000 f8bf 	bl	800febc <USBD_Get_USB_Status>
 800fd3e:	4603      	mov	r3, r0
 800fd40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fd42:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd44:	4618      	mov	r0, r3
 800fd46:	3710      	adds	r7, #16
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	bd80      	pop	{r7, pc}

0800fd4c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fd4c:	b480      	push	{r7}
 800fd4e:	b085      	sub	sp, #20
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
 800fd54:	460b      	mov	r3, r1
 800fd56:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fd5e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fd60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	da0b      	bge.n	800fd80 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fd68:	78fb      	ldrb	r3, [r7, #3]
 800fd6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fd6e:	68f9      	ldr	r1, [r7, #12]
 800fd70:	4613      	mov	r3, r2
 800fd72:	00db      	lsls	r3, r3, #3
 800fd74:	1a9b      	subs	r3, r3, r2
 800fd76:	009b      	lsls	r3, r3, #2
 800fd78:	440b      	add	r3, r1
 800fd7a:	333e      	adds	r3, #62	; 0x3e
 800fd7c:	781b      	ldrb	r3, [r3, #0]
 800fd7e:	e00b      	b.n	800fd98 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fd80:	78fb      	ldrb	r3, [r7, #3]
 800fd82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fd86:	68f9      	ldr	r1, [r7, #12]
 800fd88:	4613      	mov	r3, r2
 800fd8a:	00db      	lsls	r3, r3, #3
 800fd8c:	1a9b      	subs	r3, r3, r2
 800fd8e:	009b      	lsls	r3, r3, #2
 800fd90:	440b      	add	r3, r1
 800fd92:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fd96:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fd98:	4618      	mov	r0, r3
 800fd9a:	3714      	adds	r7, #20
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda2:	4770      	bx	lr

0800fda4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b084      	sub	sp, #16
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
 800fdac:	460b      	mov	r3, r1
 800fdae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fdbe:	78fa      	ldrb	r2, [r7, #3]
 800fdc0:	4611      	mov	r1, r2
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	f7f6 f946 	bl	8006054 <HAL_PCD_SetAddress>
 800fdc8:	4603      	mov	r3, r0
 800fdca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fdcc:	7bfb      	ldrb	r3, [r7, #15]
 800fdce:	4618      	mov	r0, r3
 800fdd0:	f000 f874 	bl	800febc <USBD_Get_USB_Status>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fdd8:	7bbb      	ldrb	r3, [r7, #14]
}
 800fdda:	4618      	mov	r0, r3
 800fddc:	3710      	adds	r7, #16
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd80      	pop	{r7, pc}

0800fde2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fde2:	b580      	push	{r7, lr}
 800fde4:	b086      	sub	sp, #24
 800fde6:	af00      	add	r7, sp, #0
 800fde8:	60f8      	str	r0, [r7, #12]
 800fdea:	607a      	str	r2, [r7, #4]
 800fdec:	603b      	str	r3, [r7, #0]
 800fdee:	460b      	mov	r3, r1
 800fdf0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fe00:	7af9      	ldrb	r1, [r7, #11]
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	687a      	ldr	r2, [r7, #4]
 800fe06:	f7f6 fa5f 	bl	80062c8 <HAL_PCD_EP_Transmit>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe0e:	7dfb      	ldrb	r3, [r7, #23]
 800fe10:	4618      	mov	r0, r3
 800fe12:	f000 f853 	bl	800febc <USBD_Get_USB_Status>
 800fe16:	4603      	mov	r3, r0
 800fe18:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fe1a:	7dbb      	ldrb	r3, [r7, #22]
}
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	3718      	adds	r7, #24
 800fe20:	46bd      	mov	sp, r7
 800fe22:	bd80      	pop	{r7, pc}

0800fe24 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b086      	sub	sp, #24
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	60f8      	str	r0, [r7, #12]
 800fe2c:	607a      	str	r2, [r7, #4]
 800fe2e:	603b      	str	r3, [r7, #0]
 800fe30:	460b      	mov	r3, r1
 800fe32:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe34:	2300      	movs	r3, #0
 800fe36:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe38:	2300      	movs	r3, #0
 800fe3a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fe42:	7af9      	ldrb	r1, [r7, #11]
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	687a      	ldr	r2, [r7, #4]
 800fe48:	f7f6 f9db 	bl	8006202 <HAL_PCD_EP_Receive>
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe50:	7dfb      	ldrb	r3, [r7, #23]
 800fe52:	4618      	mov	r0, r3
 800fe54:	f000 f832 	bl	800febc <USBD_Get_USB_Status>
 800fe58:	4603      	mov	r3, r0
 800fe5a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fe5c:	7dbb      	ldrb	r3, [r7, #22]
}
 800fe5e:	4618      	mov	r0, r3
 800fe60:	3718      	adds	r7, #24
 800fe62:	46bd      	mov	sp, r7
 800fe64:	bd80      	pop	{r7, pc}

0800fe66 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe66:	b580      	push	{r7, lr}
 800fe68:	b082      	sub	sp, #8
 800fe6a:	af00      	add	r7, sp, #0
 800fe6c:	6078      	str	r0, [r7, #4]
 800fe6e:	460b      	mov	r3, r1
 800fe70:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fe78:	78fa      	ldrb	r2, [r7, #3]
 800fe7a:	4611      	mov	r1, r2
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	f7f6 fa0b 	bl	8006298 <HAL_PCD_EP_GetRxCount>
 800fe82:	4603      	mov	r3, r0
}
 800fe84:	4618      	mov	r0, r3
 800fe86:	3708      	adds	r7, #8
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	bd80      	pop	{r7, pc}

0800fe8c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fe8c:	b480      	push	{r7}
 800fe8e:	b083      	sub	sp, #12
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fe94:	4b03      	ldr	r3, [pc, #12]	; (800fea4 <USBD_static_malloc+0x18>)
}
 800fe96:	4618      	mov	r0, r3
 800fe98:	370c      	adds	r7, #12
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea0:	4770      	bx	lr
 800fea2:	bf00      	nop
 800fea4:	20000908 	.word	0x20000908

0800fea8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fea8:	b480      	push	{r7}
 800feaa:	b083      	sub	sp, #12
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]

}
 800feb0:	bf00      	nop
 800feb2:	370c      	adds	r7, #12
 800feb4:	46bd      	mov	sp, r7
 800feb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feba:	4770      	bx	lr

0800febc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800febc:	b480      	push	{r7}
 800febe:	b085      	sub	sp, #20
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	4603      	mov	r3, r0
 800fec4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fec6:	2300      	movs	r3, #0
 800fec8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800feca:	79fb      	ldrb	r3, [r7, #7]
 800fecc:	2b03      	cmp	r3, #3
 800fece:	d817      	bhi.n	800ff00 <USBD_Get_USB_Status+0x44>
 800fed0:	a201      	add	r2, pc, #4	; (adr r2, 800fed8 <USBD_Get_USB_Status+0x1c>)
 800fed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fed6:	bf00      	nop
 800fed8:	0800fee9 	.word	0x0800fee9
 800fedc:	0800feef 	.word	0x0800feef
 800fee0:	0800fef5 	.word	0x0800fef5
 800fee4:	0800fefb 	.word	0x0800fefb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fee8:	2300      	movs	r3, #0
 800feea:	73fb      	strb	r3, [r7, #15]
    break;
 800feec:	e00b      	b.n	800ff06 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800feee:	2303      	movs	r3, #3
 800fef0:	73fb      	strb	r3, [r7, #15]
    break;
 800fef2:	e008      	b.n	800ff06 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fef4:	2301      	movs	r3, #1
 800fef6:	73fb      	strb	r3, [r7, #15]
    break;
 800fef8:	e005      	b.n	800ff06 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fefa:	2303      	movs	r3, #3
 800fefc:	73fb      	strb	r3, [r7, #15]
    break;
 800fefe:	e002      	b.n	800ff06 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ff00:	2303      	movs	r3, #3
 800ff02:	73fb      	strb	r3, [r7, #15]
    break;
 800ff04:	bf00      	nop
  }
  return usb_status;
 800ff06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff08:	4618      	mov	r0, r3
 800ff0a:	3714      	adds	r7, #20
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff12:	4770      	bx	lr

0800ff14 <__errno>:
 800ff14:	4b01      	ldr	r3, [pc, #4]	; (800ff1c <__errno+0x8>)
 800ff16:	6818      	ldr	r0, [r3, #0]
 800ff18:	4770      	bx	lr
 800ff1a:	bf00      	nop
 800ff1c:	20000198 	.word	0x20000198

0800ff20 <__libc_init_array>:
 800ff20:	b570      	push	{r4, r5, r6, lr}
 800ff22:	4d0d      	ldr	r5, [pc, #52]	; (800ff58 <__libc_init_array+0x38>)
 800ff24:	4c0d      	ldr	r4, [pc, #52]	; (800ff5c <__libc_init_array+0x3c>)
 800ff26:	1b64      	subs	r4, r4, r5
 800ff28:	10a4      	asrs	r4, r4, #2
 800ff2a:	2600      	movs	r6, #0
 800ff2c:	42a6      	cmp	r6, r4
 800ff2e:	d109      	bne.n	800ff44 <__libc_init_array+0x24>
 800ff30:	4d0b      	ldr	r5, [pc, #44]	; (800ff60 <__libc_init_array+0x40>)
 800ff32:	4c0c      	ldr	r4, [pc, #48]	; (800ff64 <__libc_init_array+0x44>)
 800ff34:	f005 f8ce 	bl	80150d4 <_init>
 800ff38:	1b64      	subs	r4, r4, r5
 800ff3a:	10a4      	asrs	r4, r4, #2
 800ff3c:	2600      	movs	r6, #0
 800ff3e:	42a6      	cmp	r6, r4
 800ff40:	d105      	bne.n	800ff4e <__libc_init_array+0x2e>
 800ff42:	bd70      	pop	{r4, r5, r6, pc}
 800ff44:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff48:	4798      	blx	r3
 800ff4a:	3601      	adds	r6, #1
 800ff4c:	e7ee      	b.n	800ff2c <__libc_init_array+0xc>
 800ff4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff52:	4798      	blx	r3
 800ff54:	3601      	adds	r6, #1
 800ff56:	e7f2      	b.n	800ff3e <__libc_init_array+0x1e>
 800ff58:	080159a4 	.word	0x080159a4
 800ff5c:	080159a4 	.word	0x080159a4
 800ff60:	080159a4 	.word	0x080159a4
 800ff64:	080159a8 	.word	0x080159a8

0800ff68 <memset>:
 800ff68:	4402      	add	r2, r0
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	4293      	cmp	r3, r2
 800ff6e:	d100      	bne.n	800ff72 <memset+0xa>
 800ff70:	4770      	bx	lr
 800ff72:	f803 1b01 	strb.w	r1, [r3], #1
 800ff76:	e7f9      	b.n	800ff6c <memset+0x4>

0800ff78 <__cvt>:
 800ff78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff7c:	ec55 4b10 	vmov	r4, r5, d0
 800ff80:	2d00      	cmp	r5, #0
 800ff82:	460e      	mov	r6, r1
 800ff84:	4619      	mov	r1, r3
 800ff86:	462b      	mov	r3, r5
 800ff88:	bfbb      	ittet	lt
 800ff8a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ff8e:	461d      	movlt	r5, r3
 800ff90:	2300      	movge	r3, #0
 800ff92:	232d      	movlt	r3, #45	; 0x2d
 800ff94:	700b      	strb	r3, [r1, #0]
 800ff96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ff98:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ff9c:	4691      	mov	r9, r2
 800ff9e:	f023 0820 	bic.w	r8, r3, #32
 800ffa2:	bfbc      	itt	lt
 800ffa4:	4622      	movlt	r2, r4
 800ffa6:	4614      	movlt	r4, r2
 800ffa8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ffac:	d005      	beq.n	800ffba <__cvt+0x42>
 800ffae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ffb2:	d100      	bne.n	800ffb6 <__cvt+0x3e>
 800ffb4:	3601      	adds	r6, #1
 800ffb6:	2102      	movs	r1, #2
 800ffb8:	e000      	b.n	800ffbc <__cvt+0x44>
 800ffba:	2103      	movs	r1, #3
 800ffbc:	ab03      	add	r3, sp, #12
 800ffbe:	9301      	str	r3, [sp, #4]
 800ffc0:	ab02      	add	r3, sp, #8
 800ffc2:	9300      	str	r3, [sp, #0]
 800ffc4:	ec45 4b10 	vmov	d0, r4, r5
 800ffc8:	4653      	mov	r3, sl
 800ffca:	4632      	mov	r2, r6
 800ffcc:	f001 ff64 	bl	8011e98 <_dtoa_r>
 800ffd0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ffd4:	4607      	mov	r7, r0
 800ffd6:	d102      	bne.n	800ffde <__cvt+0x66>
 800ffd8:	f019 0f01 	tst.w	r9, #1
 800ffdc:	d022      	beq.n	8010024 <__cvt+0xac>
 800ffde:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ffe2:	eb07 0906 	add.w	r9, r7, r6
 800ffe6:	d110      	bne.n	801000a <__cvt+0x92>
 800ffe8:	783b      	ldrb	r3, [r7, #0]
 800ffea:	2b30      	cmp	r3, #48	; 0x30
 800ffec:	d10a      	bne.n	8010004 <__cvt+0x8c>
 800ffee:	2200      	movs	r2, #0
 800fff0:	2300      	movs	r3, #0
 800fff2:	4620      	mov	r0, r4
 800fff4:	4629      	mov	r1, r5
 800fff6:	f7f0 fd77 	bl	8000ae8 <__aeabi_dcmpeq>
 800fffa:	b918      	cbnz	r0, 8010004 <__cvt+0x8c>
 800fffc:	f1c6 0601 	rsb	r6, r6, #1
 8010000:	f8ca 6000 	str.w	r6, [sl]
 8010004:	f8da 3000 	ldr.w	r3, [sl]
 8010008:	4499      	add	r9, r3
 801000a:	2200      	movs	r2, #0
 801000c:	2300      	movs	r3, #0
 801000e:	4620      	mov	r0, r4
 8010010:	4629      	mov	r1, r5
 8010012:	f7f0 fd69 	bl	8000ae8 <__aeabi_dcmpeq>
 8010016:	b108      	cbz	r0, 801001c <__cvt+0xa4>
 8010018:	f8cd 900c 	str.w	r9, [sp, #12]
 801001c:	2230      	movs	r2, #48	; 0x30
 801001e:	9b03      	ldr	r3, [sp, #12]
 8010020:	454b      	cmp	r3, r9
 8010022:	d307      	bcc.n	8010034 <__cvt+0xbc>
 8010024:	9b03      	ldr	r3, [sp, #12]
 8010026:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010028:	1bdb      	subs	r3, r3, r7
 801002a:	4638      	mov	r0, r7
 801002c:	6013      	str	r3, [r2, #0]
 801002e:	b004      	add	sp, #16
 8010030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010034:	1c59      	adds	r1, r3, #1
 8010036:	9103      	str	r1, [sp, #12]
 8010038:	701a      	strb	r2, [r3, #0]
 801003a:	e7f0      	b.n	801001e <__cvt+0xa6>

0801003c <__exponent>:
 801003c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801003e:	4603      	mov	r3, r0
 8010040:	2900      	cmp	r1, #0
 8010042:	bfb8      	it	lt
 8010044:	4249      	neglt	r1, r1
 8010046:	f803 2b02 	strb.w	r2, [r3], #2
 801004a:	bfb4      	ite	lt
 801004c:	222d      	movlt	r2, #45	; 0x2d
 801004e:	222b      	movge	r2, #43	; 0x2b
 8010050:	2909      	cmp	r1, #9
 8010052:	7042      	strb	r2, [r0, #1]
 8010054:	dd2a      	ble.n	80100ac <__exponent+0x70>
 8010056:	f10d 0407 	add.w	r4, sp, #7
 801005a:	46a4      	mov	ip, r4
 801005c:	270a      	movs	r7, #10
 801005e:	46a6      	mov	lr, r4
 8010060:	460a      	mov	r2, r1
 8010062:	fb91 f6f7 	sdiv	r6, r1, r7
 8010066:	fb07 1516 	mls	r5, r7, r6, r1
 801006a:	3530      	adds	r5, #48	; 0x30
 801006c:	2a63      	cmp	r2, #99	; 0x63
 801006e:	f104 34ff 	add.w	r4, r4, #4294967295
 8010072:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010076:	4631      	mov	r1, r6
 8010078:	dcf1      	bgt.n	801005e <__exponent+0x22>
 801007a:	3130      	adds	r1, #48	; 0x30
 801007c:	f1ae 0502 	sub.w	r5, lr, #2
 8010080:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010084:	1c44      	adds	r4, r0, #1
 8010086:	4629      	mov	r1, r5
 8010088:	4561      	cmp	r1, ip
 801008a:	d30a      	bcc.n	80100a2 <__exponent+0x66>
 801008c:	f10d 0209 	add.w	r2, sp, #9
 8010090:	eba2 020e 	sub.w	r2, r2, lr
 8010094:	4565      	cmp	r5, ip
 8010096:	bf88      	it	hi
 8010098:	2200      	movhi	r2, #0
 801009a:	4413      	add	r3, r2
 801009c:	1a18      	subs	r0, r3, r0
 801009e:	b003      	add	sp, #12
 80100a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80100a6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80100aa:	e7ed      	b.n	8010088 <__exponent+0x4c>
 80100ac:	2330      	movs	r3, #48	; 0x30
 80100ae:	3130      	adds	r1, #48	; 0x30
 80100b0:	7083      	strb	r3, [r0, #2]
 80100b2:	70c1      	strb	r1, [r0, #3]
 80100b4:	1d03      	adds	r3, r0, #4
 80100b6:	e7f1      	b.n	801009c <__exponent+0x60>

080100b8 <_printf_float>:
 80100b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100bc:	ed2d 8b02 	vpush	{d8}
 80100c0:	b08d      	sub	sp, #52	; 0x34
 80100c2:	460c      	mov	r4, r1
 80100c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80100c8:	4616      	mov	r6, r2
 80100ca:	461f      	mov	r7, r3
 80100cc:	4605      	mov	r5, r0
 80100ce:	f003 f9f5 	bl	80134bc <_localeconv_r>
 80100d2:	f8d0 a000 	ldr.w	sl, [r0]
 80100d6:	4650      	mov	r0, sl
 80100d8:	f7f0 f88a 	bl	80001f0 <strlen>
 80100dc:	2300      	movs	r3, #0
 80100de:	930a      	str	r3, [sp, #40]	; 0x28
 80100e0:	6823      	ldr	r3, [r4, #0]
 80100e2:	9305      	str	r3, [sp, #20]
 80100e4:	f8d8 3000 	ldr.w	r3, [r8]
 80100e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80100ec:	3307      	adds	r3, #7
 80100ee:	f023 0307 	bic.w	r3, r3, #7
 80100f2:	f103 0208 	add.w	r2, r3, #8
 80100f6:	f8c8 2000 	str.w	r2, [r8]
 80100fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100fe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010102:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010106:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801010a:	9307      	str	r3, [sp, #28]
 801010c:	f8cd 8018 	str.w	r8, [sp, #24]
 8010110:	ee08 0a10 	vmov	s16, r0
 8010114:	4b9f      	ldr	r3, [pc, #636]	; (8010394 <_printf_float+0x2dc>)
 8010116:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801011a:	f04f 32ff 	mov.w	r2, #4294967295
 801011e:	f7f0 fd15 	bl	8000b4c <__aeabi_dcmpun>
 8010122:	bb88      	cbnz	r0, 8010188 <_printf_float+0xd0>
 8010124:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010128:	4b9a      	ldr	r3, [pc, #616]	; (8010394 <_printf_float+0x2dc>)
 801012a:	f04f 32ff 	mov.w	r2, #4294967295
 801012e:	f7f0 fcef 	bl	8000b10 <__aeabi_dcmple>
 8010132:	bb48      	cbnz	r0, 8010188 <_printf_float+0xd0>
 8010134:	2200      	movs	r2, #0
 8010136:	2300      	movs	r3, #0
 8010138:	4640      	mov	r0, r8
 801013a:	4649      	mov	r1, r9
 801013c:	f7f0 fcde 	bl	8000afc <__aeabi_dcmplt>
 8010140:	b110      	cbz	r0, 8010148 <_printf_float+0x90>
 8010142:	232d      	movs	r3, #45	; 0x2d
 8010144:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010148:	4b93      	ldr	r3, [pc, #588]	; (8010398 <_printf_float+0x2e0>)
 801014a:	4894      	ldr	r0, [pc, #592]	; (801039c <_printf_float+0x2e4>)
 801014c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010150:	bf94      	ite	ls
 8010152:	4698      	movls	r8, r3
 8010154:	4680      	movhi	r8, r0
 8010156:	2303      	movs	r3, #3
 8010158:	6123      	str	r3, [r4, #16]
 801015a:	9b05      	ldr	r3, [sp, #20]
 801015c:	f023 0204 	bic.w	r2, r3, #4
 8010160:	6022      	str	r2, [r4, #0]
 8010162:	f04f 0900 	mov.w	r9, #0
 8010166:	9700      	str	r7, [sp, #0]
 8010168:	4633      	mov	r3, r6
 801016a:	aa0b      	add	r2, sp, #44	; 0x2c
 801016c:	4621      	mov	r1, r4
 801016e:	4628      	mov	r0, r5
 8010170:	f000 f9d8 	bl	8010524 <_printf_common>
 8010174:	3001      	adds	r0, #1
 8010176:	f040 8090 	bne.w	801029a <_printf_float+0x1e2>
 801017a:	f04f 30ff 	mov.w	r0, #4294967295
 801017e:	b00d      	add	sp, #52	; 0x34
 8010180:	ecbd 8b02 	vpop	{d8}
 8010184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010188:	4642      	mov	r2, r8
 801018a:	464b      	mov	r3, r9
 801018c:	4640      	mov	r0, r8
 801018e:	4649      	mov	r1, r9
 8010190:	f7f0 fcdc 	bl	8000b4c <__aeabi_dcmpun>
 8010194:	b140      	cbz	r0, 80101a8 <_printf_float+0xf0>
 8010196:	464b      	mov	r3, r9
 8010198:	2b00      	cmp	r3, #0
 801019a:	bfbc      	itt	lt
 801019c:	232d      	movlt	r3, #45	; 0x2d
 801019e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80101a2:	487f      	ldr	r0, [pc, #508]	; (80103a0 <_printf_float+0x2e8>)
 80101a4:	4b7f      	ldr	r3, [pc, #508]	; (80103a4 <_printf_float+0x2ec>)
 80101a6:	e7d1      	b.n	801014c <_printf_float+0x94>
 80101a8:	6863      	ldr	r3, [r4, #4]
 80101aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80101ae:	9206      	str	r2, [sp, #24]
 80101b0:	1c5a      	adds	r2, r3, #1
 80101b2:	d13f      	bne.n	8010234 <_printf_float+0x17c>
 80101b4:	2306      	movs	r3, #6
 80101b6:	6063      	str	r3, [r4, #4]
 80101b8:	9b05      	ldr	r3, [sp, #20]
 80101ba:	6861      	ldr	r1, [r4, #4]
 80101bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80101c0:	2300      	movs	r3, #0
 80101c2:	9303      	str	r3, [sp, #12]
 80101c4:	ab0a      	add	r3, sp, #40	; 0x28
 80101c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80101ca:	ab09      	add	r3, sp, #36	; 0x24
 80101cc:	ec49 8b10 	vmov	d0, r8, r9
 80101d0:	9300      	str	r3, [sp, #0]
 80101d2:	6022      	str	r2, [r4, #0]
 80101d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80101d8:	4628      	mov	r0, r5
 80101da:	f7ff fecd 	bl	800ff78 <__cvt>
 80101de:	9b06      	ldr	r3, [sp, #24]
 80101e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80101e2:	2b47      	cmp	r3, #71	; 0x47
 80101e4:	4680      	mov	r8, r0
 80101e6:	d108      	bne.n	80101fa <_printf_float+0x142>
 80101e8:	1cc8      	adds	r0, r1, #3
 80101ea:	db02      	blt.n	80101f2 <_printf_float+0x13a>
 80101ec:	6863      	ldr	r3, [r4, #4]
 80101ee:	4299      	cmp	r1, r3
 80101f0:	dd41      	ble.n	8010276 <_printf_float+0x1be>
 80101f2:	f1ab 0b02 	sub.w	fp, fp, #2
 80101f6:	fa5f fb8b 	uxtb.w	fp, fp
 80101fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80101fe:	d820      	bhi.n	8010242 <_printf_float+0x18a>
 8010200:	3901      	subs	r1, #1
 8010202:	465a      	mov	r2, fp
 8010204:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010208:	9109      	str	r1, [sp, #36]	; 0x24
 801020a:	f7ff ff17 	bl	801003c <__exponent>
 801020e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010210:	1813      	adds	r3, r2, r0
 8010212:	2a01      	cmp	r2, #1
 8010214:	4681      	mov	r9, r0
 8010216:	6123      	str	r3, [r4, #16]
 8010218:	dc02      	bgt.n	8010220 <_printf_float+0x168>
 801021a:	6822      	ldr	r2, [r4, #0]
 801021c:	07d2      	lsls	r2, r2, #31
 801021e:	d501      	bpl.n	8010224 <_printf_float+0x16c>
 8010220:	3301      	adds	r3, #1
 8010222:	6123      	str	r3, [r4, #16]
 8010224:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010228:	2b00      	cmp	r3, #0
 801022a:	d09c      	beq.n	8010166 <_printf_float+0xae>
 801022c:	232d      	movs	r3, #45	; 0x2d
 801022e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010232:	e798      	b.n	8010166 <_printf_float+0xae>
 8010234:	9a06      	ldr	r2, [sp, #24]
 8010236:	2a47      	cmp	r2, #71	; 0x47
 8010238:	d1be      	bne.n	80101b8 <_printf_float+0x100>
 801023a:	2b00      	cmp	r3, #0
 801023c:	d1bc      	bne.n	80101b8 <_printf_float+0x100>
 801023e:	2301      	movs	r3, #1
 8010240:	e7b9      	b.n	80101b6 <_printf_float+0xfe>
 8010242:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010246:	d118      	bne.n	801027a <_printf_float+0x1c2>
 8010248:	2900      	cmp	r1, #0
 801024a:	6863      	ldr	r3, [r4, #4]
 801024c:	dd0b      	ble.n	8010266 <_printf_float+0x1ae>
 801024e:	6121      	str	r1, [r4, #16]
 8010250:	b913      	cbnz	r3, 8010258 <_printf_float+0x1a0>
 8010252:	6822      	ldr	r2, [r4, #0]
 8010254:	07d0      	lsls	r0, r2, #31
 8010256:	d502      	bpl.n	801025e <_printf_float+0x1a6>
 8010258:	3301      	adds	r3, #1
 801025a:	440b      	add	r3, r1
 801025c:	6123      	str	r3, [r4, #16]
 801025e:	65a1      	str	r1, [r4, #88]	; 0x58
 8010260:	f04f 0900 	mov.w	r9, #0
 8010264:	e7de      	b.n	8010224 <_printf_float+0x16c>
 8010266:	b913      	cbnz	r3, 801026e <_printf_float+0x1b6>
 8010268:	6822      	ldr	r2, [r4, #0]
 801026a:	07d2      	lsls	r2, r2, #31
 801026c:	d501      	bpl.n	8010272 <_printf_float+0x1ba>
 801026e:	3302      	adds	r3, #2
 8010270:	e7f4      	b.n	801025c <_printf_float+0x1a4>
 8010272:	2301      	movs	r3, #1
 8010274:	e7f2      	b.n	801025c <_printf_float+0x1a4>
 8010276:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801027a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801027c:	4299      	cmp	r1, r3
 801027e:	db05      	blt.n	801028c <_printf_float+0x1d4>
 8010280:	6823      	ldr	r3, [r4, #0]
 8010282:	6121      	str	r1, [r4, #16]
 8010284:	07d8      	lsls	r0, r3, #31
 8010286:	d5ea      	bpl.n	801025e <_printf_float+0x1a6>
 8010288:	1c4b      	adds	r3, r1, #1
 801028a:	e7e7      	b.n	801025c <_printf_float+0x1a4>
 801028c:	2900      	cmp	r1, #0
 801028e:	bfd4      	ite	le
 8010290:	f1c1 0202 	rsble	r2, r1, #2
 8010294:	2201      	movgt	r2, #1
 8010296:	4413      	add	r3, r2
 8010298:	e7e0      	b.n	801025c <_printf_float+0x1a4>
 801029a:	6823      	ldr	r3, [r4, #0]
 801029c:	055a      	lsls	r2, r3, #21
 801029e:	d407      	bmi.n	80102b0 <_printf_float+0x1f8>
 80102a0:	6923      	ldr	r3, [r4, #16]
 80102a2:	4642      	mov	r2, r8
 80102a4:	4631      	mov	r1, r6
 80102a6:	4628      	mov	r0, r5
 80102a8:	47b8      	blx	r7
 80102aa:	3001      	adds	r0, #1
 80102ac:	d12c      	bne.n	8010308 <_printf_float+0x250>
 80102ae:	e764      	b.n	801017a <_printf_float+0xc2>
 80102b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80102b4:	f240 80e0 	bls.w	8010478 <_printf_float+0x3c0>
 80102b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80102bc:	2200      	movs	r2, #0
 80102be:	2300      	movs	r3, #0
 80102c0:	f7f0 fc12 	bl	8000ae8 <__aeabi_dcmpeq>
 80102c4:	2800      	cmp	r0, #0
 80102c6:	d034      	beq.n	8010332 <_printf_float+0x27a>
 80102c8:	4a37      	ldr	r2, [pc, #220]	; (80103a8 <_printf_float+0x2f0>)
 80102ca:	2301      	movs	r3, #1
 80102cc:	4631      	mov	r1, r6
 80102ce:	4628      	mov	r0, r5
 80102d0:	47b8      	blx	r7
 80102d2:	3001      	adds	r0, #1
 80102d4:	f43f af51 	beq.w	801017a <_printf_float+0xc2>
 80102d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80102dc:	429a      	cmp	r2, r3
 80102de:	db02      	blt.n	80102e6 <_printf_float+0x22e>
 80102e0:	6823      	ldr	r3, [r4, #0]
 80102e2:	07d8      	lsls	r0, r3, #31
 80102e4:	d510      	bpl.n	8010308 <_printf_float+0x250>
 80102e6:	ee18 3a10 	vmov	r3, s16
 80102ea:	4652      	mov	r2, sl
 80102ec:	4631      	mov	r1, r6
 80102ee:	4628      	mov	r0, r5
 80102f0:	47b8      	blx	r7
 80102f2:	3001      	adds	r0, #1
 80102f4:	f43f af41 	beq.w	801017a <_printf_float+0xc2>
 80102f8:	f04f 0800 	mov.w	r8, #0
 80102fc:	f104 091a 	add.w	r9, r4, #26
 8010300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010302:	3b01      	subs	r3, #1
 8010304:	4543      	cmp	r3, r8
 8010306:	dc09      	bgt.n	801031c <_printf_float+0x264>
 8010308:	6823      	ldr	r3, [r4, #0]
 801030a:	079b      	lsls	r3, r3, #30
 801030c:	f100 8105 	bmi.w	801051a <_printf_float+0x462>
 8010310:	68e0      	ldr	r0, [r4, #12]
 8010312:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010314:	4298      	cmp	r0, r3
 8010316:	bfb8      	it	lt
 8010318:	4618      	movlt	r0, r3
 801031a:	e730      	b.n	801017e <_printf_float+0xc6>
 801031c:	2301      	movs	r3, #1
 801031e:	464a      	mov	r2, r9
 8010320:	4631      	mov	r1, r6
 8010322:	4628      	mov	r0, r5
 8010324:	47b8      	blx	r7
 8010326:	3001      	adds	r0, #1
 8010328:	f43f af27 	beq.w	801017a <_printf_float+0xc2>
 801032c:	f108 0801 	add.w	r8, r8, #1
 8010330:	e7e6      	b.n	8010300 <_printf_float+0x248>
 8010332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010334:	2b00      	cmp	r3, #0
 8010336:	dc39      	bgt.n	80103ac <_printf_float+0x2f4>
 8010338:	4a1b      	ldr	r2, [pc, #108]	; (80103a8 <_printf_float+0x2f0>)
 801033a:	2301      	movs	r3, #1
 801033c:	4631      	mov	r1, r6
 801033e:	4628      	mov	r0, r5
 8010340:	47b8      	blx	r7
 8010342:	3001      	adds	r0, #1
 8010344:	f43f af19 	beq.w	801017a <_printf_float+0xc2>
 8010348:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801034c:	4313      	orrs	r3, r2
 801034e:	d102      	bne.n	8010356 <_printf_float+0x29e>
 8010350:	6823      	ldr	r3, [r4, #0]
 8010352:	07d9      	lsls	r1, r3, #31
 8010354:	d5d8      	bpl.n	8010308 <_printf_float+0x250>
 8010356:	ee18 3a10 	vmov	r3, s16
 801035a:	4652      	mov	r2, sl
 801035c:	4631      	mov	r1, r6
 801035e:	4628      	mov	r0, r5
 8010360:	47b8      	blx	r7
 8010362:	3001      	adds	r0, #1
 8010364:	f43f af09 	beq.w	801017a <_printf_float+0xc2>
 8010368:	f04f 0900 	mov.w	r9, #0
 801036c:	f104 0a1a 	add.w	sl, r4, #26
 8010370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010372:	425b      	negs	r3, r3
 8010374:	454b      	cmp	r3, r9
 8010376:	dc01      	bgt.n	801037c <_printf_float+0x2c4>
 8010378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801037a:	e792      	b.n	80102a2 <_printf_float+0x1ea>
 801037c:	2301      	movs	r3, #1
 801037e:	4652      	mov	r2, sl
 8010380:	4631      	mov	r1, r6
 8010382:	4628      	mov	r0, r5
 8010384:	47b8      	blx	r7
 8010386:	3001      	adds	r0, #1
 8010388:	f43f aef7 	beq.w	801017a <_printf_float+0xc2>
 801038c:	f109 0901 	add.w	r9, r9, #1
 8010390:	e7ee      	b.n	8010370 <_printf_float+0x2b8>
 8010392:	bf00      	nop
 8010394:	7fefffff 	.word	0x7fefffff
 8010398:	080155d8 	.word	0x080155d8
 801039c:	080155dc 	.word	0x080155dc
 80103a0:	080155e4 	.word	0x080155e4
 80103a4:	080155e0 	.word	0x080155e0
 80103a8:	08015949 	.word	0x08015949
 80103ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80103ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80103b0:	429a      	cmp	r2, r3
 80103b2:	bfa8      	it	ge
 80103b4:	461a      	movge	r2, r3
 80103b6:	2a00      	cmp	r2, #0
 80103b8:	4691      	mov	r9, r2
 80103ba:	dc37      	bgt.n	801042c <_printf_float+0x374>
 80103bc:	f04f 0b00 	mov.w	fp, #0
 80103c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80103c4:	f104 021a 	add.w	r2, r4, #26
 80103c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80103ca:	9305      	str	r3, [sp, #20]
 80103cc:	eba3 0309 	sub.w	r3, r3, r9
 80103d0:	455b      	cmp	r3, fp
 80103d2:	dc33      	bgt.n	801043c <_printf_float+0x384>
 80103d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80103d8:	429a      	cmp	r2, r3
 80103da:	db3b      	blt.n	8010454 <_printf_float+0x39c>
 80103dc:	6823      	ldr	r3, [r4, #0]
 80103de:	07da      	lsls	r2, r3, #31
 80103e0:	d438      	bmi.n	8010454 <_printf_float+0x39c>
 80103e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80103e4:	9b05      	ldr	r3, [sp, #20]
 80103e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80103e8:	1ad3      	subs	r3, r2, r3
 80103ea:	eba2 0901 	sub.w	r9, r2, r1
 80103ee:	4599      	cmp	r9, r3
 80103f0:	bfa8      	it	ge
 80103f2:	4699      	movge	r9, r3
 80103f4:	f1b9 0f00 	cmp.w	r9, #0
 80103f8:	dc35      	bgt.n	8010466 <_printf_float+0x3ae>
 80103fa:	f04f 0800 	mov.w	r8, #0
 80103fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010402:	f104 0a1a 	add.w	sl, r4, #26
 8010406:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801040a:	1a9b      	subs	r3, r3, r2
 801040c:	eba3 0309 	sub.w	r3, r3, r9
 8010410:	4543      	cmp	r3, r8
 8010412:	f77f af79 	ble.w	8010308 <_printf_float+0x250>
 8010416:	2301      	movs	r3, #1
 8010418:	4652      	mov	r2, sl
 801041a:	4631      	mov	r1, r6
 801041c:	4628      	mov	r0, r5
 801041e:	47b8      	blx	r7
 8010420:	3001      	adds	r0, #1
 8010422:	f43f aeaa 	beq.w	801017a <_printf_float+0xc2>
 8010426:	f108 0801 	add.w	r8, r8, #1
 801042a:	e7ec      	b.n	8010406 <_printf_float+0x34e>
 801042c:	4613      	mov	r3, r2
 801042e:	4631      	mov	r1, r6
 8010430:	4642      	mov	r2, r8
 8010432:	4628      	mov	r0, r5
 8010434:	47b8      	blx	r7
 8010436:	3001      	adds	r0, #1
 8010438:	d1c0      	bne.n	80103bc <_printf_float+0x304>
 801043a:	e69e      	b.n	801017a <_printf_float+0xc2>
 801043c:	2301      	movs	r3, #1
 801043e:	4631      	mov	r1, r6
 8010440:	4628      	mov	r0, r5
 8010442:	9205      	str	r2, [sp, #20]
 8010444:	47b8      	blx	r7
 8010446:	3001      	adds	r0, #1
 8010448:	f43f ae97 	beq.w	801017a <_printf_float+0xc2>
 801044c:	9a05      	ldr	r2, [sp, #20]
 801044e:	f10b 0b01 	add.w	fp, fp, #1
 8010452:	e7b9      	b.n	80103c8 <_printf_float+0x310>
 8010454:	ee18 3a10 	vmov	r3, s16
 8010458:	4652      	mov	r2, sl
 801045a:	4631      	mov	r1, r6
 801045c:	4628      	mov	r0, r5
 801045e:	47b8      	blx	r7
 8010460:	3001      	adds	r0, #1
 8010462:	d1be      	bne.n	80103e2 <_printf_float+0x32a>
 8010464:	e689      	b.n	801017a <_printf_float+0xc2>
 8010466:	9a05      	ldr	r2, [sp, #20]
 8010468:	464b      	mov	r3, r9
 801046a:	4442      	add	r2, r8
 801046c:	4631      	mov	r1, r6
 801046e:	4628      	mov	r0, r5
 8010470:	47b8      	blx	r7
 8010472:	3001      	adds	r0, #1
 8010474:	d1c1      	bne.n	80103fa <_printf_float+0x342>
 8010476:	e680      	b.n	801017a <_printf_float+0xc2>
 8010478:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801047a:	2a01      	cmp	r2, #1
 801047c:	dc01      	bgt.n	8010482 <_printf_float+0x3ca>
 801047e:	07db      	lsls	r3, r3, #31
 8010480:	d538      	bpl.n	80104f4 <_printf_float+0x43c>
 8010482:	2301      	movs	r3, #1
 8010484:	4642      	mov	r2, r8
 8010486:	4631      	mov	r1, r6
 8010488:	4628      	mov	r0, r5
 801048a:	47b8      	blx	r7
 801048c:	3001      	adds	r0, #1
 801048e:	f43f ae74 	beq.w	801017a <_printf_float+0xc2>
 8010492:	ee18 3a10 	vmov	r3, s16
 8010496:	4652      	mov	r2, sl
 8010498:	4631      	mov	r1, r6
 801049a:	4628      	mov	r0, r5
 801049c:	47b8      	blx	r7
 801049e:	3001      	adds	r0, #1
 80104a0:	f43f ae6b 	beq.w	801017a <_printf_float+0xc2>
 80104a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80104a8:	2200      	movs	r2, #0
 80104aa:	2300      	movs	r3, #0
 80104ac:	f7f0 fb1c 	bl	8000ae8 <__aeabi_dcmpeq>
 80104b0:	b9d8      	cbnz	r0, 80104ea <_printf_float+0x432>
 80104b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104b4:	f108 0201 	add.w	r2, r8, #1
 80104b8:	3b01      	subs	r3, #1
 80104ba:	4631      	mov	r1, r6
 80104bc:	4628      	mov	r0, r5
 80104be:	47b8      	blx	r7
 80104c0:	3001      	adds	r0, #1
 80104c2:	d10e      	bne.n	80104e2 <_printf_float+0x42a>
 80104c4:	e659      	b.n	801017a <_printf_float+0xc2>
 80104c6:	2301      	movs	r3, #1
 80104c8:	4652      	mov	r2, sl
 80104ca:	4631      	mov	r1, r6
 80104cc:	4628      	mov	r0, r5
 80104ce:	47b8      	blx	r7
 80104d0:	3001      	adds	r0, #1
 80104d2:	f43f ae52 	beq.w	801017a <_printf_float+0xc2>
 80104d6:	f108 0801 	add.w	r8, r8, #1
 80104da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104dc:	3b01      	subs	r3, #1
 80104de:	4543      	cmp	r3, r8
 80104e0:	dcf1      	bgt.n	80104c6 <_printf_float+0x40e>
 80104e2:	464b      	mov	r3, r9
 80104e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80104e8:	e6dc      	b.n	80102a4 <_printf_float+0x1ec>
 80104ea:	f04f 0800 	mov.w	r8, #0
 80104ee:	f104 0a1a 	add.w	sl, r4, #26
 80104f2:	e7f2      	b.n	80104da <_printf_float+0x422>
 80104f4:	2301      	movs	r3, #1
 80104f6:	4642      	mov	r2, r8
 80104f8:	e7df      	b.n	80104ba <_printf_float+0x402>
 80104fa:	2301      	movs	r3, #1
 80104fc:	464a      	mov	r2, r9
 80104fe:	4631      	mov	r1, r6
 8010500:	4628      	mov	r0, r5
 8010502:	47b8      	blx	r7
 8010504:	3001      	adds	r0, #1
 8010506:	f43f ae38 	beq.w	801017a <_printf_float+0xc2>
 801050a:	f108 0801 	add.w	r8, r8, #1
 801050e:	68e3      	ldr	r3, [r4, #12]
 8010510:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010512:	1a5b      	subs	r3, r3, r1
 8010514:	4543      	cmp	r3, r8
 8010516:	dcf0      	bgt.n	80104fa <_printf_float+0x442>
 8010518:	e6fa      	b.n	8010310 <_printf_float+0x258>
 801051a:	f04f 0800 	mov.w	r8, #0
 801051e:	f104 0919 	add.w	r9, r4, #25
 8010522:	e7f4      	b.n	801050e <_printf_float+0x456>

08010524 <_printf_common>:
 8010524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010528:	4616      	mov	r6, r2
 801052a:	4699      	mov	r9, r3
 801052c:	688a      	ldr	r2, [r1, #8]
 801052e:	690b      	ldr	r3, [r1, #16]
 8010530:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010534:	4293      	cmp	r3, r2
 8010536:	bfb8      	it	lt
 8010538:	4613      	movlt	r3, r2
 801053a:	6033      	str	r3, [r6, #0]
 801053c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010540:	4607      	mov	r7, r0
 8010542:	460c      	mov	r4, r1
 8010544:	b10a      	cbz	r2, 801054a <_printf_common+0x26>
 8010546:	3301      	adds	r3, #1
 8010548:	6033      	str	r3, [r6, #0]
 801054a:	6823      	ldr	r3, [r4, #0]
 801054c:	0699      	lsls	r1, r3, #26
 801054e:	bf42      	ittt	mi
 8010550:	6833      	ldrmi	r3, [r6, #0]
 8010552:	3302      	addmi	r3, #2
 8010554:	6033      	strmi	r3, [r6, #0]
 8010556:	6825      	ldr	r5, [r4, #0]
 8010558:	f015 0506 	ands.w	r5, r5, #6
 801055c:	d106      	bne.n	801056c <_printf_common+0x48>
 801055e:	f104 0a19 	add.w	sl, r4, #25
 8010562:	68e3      	ldr	r3, [r4, #12]
 8010564:	6832      	ldr	r2, [r6, #0]
 8010566:	1a9b      	subs	r3, r3, r2
 8010568:	42ab      	cmp	r3, r5
 801056a:	dc26      	bgt.n	80105ba <_printf_common+0x96>
 801056c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010570:	1e13      	subs	r3, r2, #0
 8010572:	6822      	ldr	r2, [r4, #0]
 8010574:	bf18      	it	ne
 8010576:	2301      	movne	r3, #1
 8010578:	0692      	lsls	r2, r2, #26
 801057a:	d42b      	bmi.n	80105d4 <_printf_common+0xb0>
 801057c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010580:	4649      	mov	r1, r9
 8010582:	4638      	mov	r0, r7
 8010584:	47c0      	blx	r8
 8010586:	3001      	adds	r0, #1
 8010588:	d01e      	beq.n	80105c8 <_printf_common+0xa4>
 801058a:	6823      	ldr	r3, [r4, #0]
 801058c:	68e5      	ldr	r5, [r4, #12]
 801058e:	6832      	ldr	r2, [r6, #0]
 8010590:	f003 0306 	and.w	r3, r3, #6
 8010594:	2b04      	cmp	r3, #4
 8010596:	bf08      	it	eq
 8010598:	1aad      	subeq	r5, r5, r2
 801059a:	68a3      	ldr	r3, [r4, #8]
 801059c:	6922      	ldr	r2, [r4, #16]
 801059e:	bf0c      	ite	eq
 80105a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80105a4:	2500      	movne	r5, #0
 80105a6:	4293      	cmp	r3, r2
 80105a8:	bfc4      	itt	gt
 80105aa:	1a9b      	subgt	r3, r3, r2
 80105ac:	18ed      	addgt	r5, r5, r3
 80105ae:	2600      	movs	r6, #0
 80105b0:	341a      	adds	r4, #26
 80105b2:	42b5      	cmp	r5, r6
 80105b4:	d11a      	bne.n	80105ec <_printf_common+0xc8>
 80105b6:	2000      	movs	r0, #0
 80105b8:	e008      	b.n	80105cc <_printf_common+0xa8>
 80105ba:	2301      	movs	r3, #1
 80105bc:	4652      	mov	r2, sl
 80105be:	4649      	mov	r1, r9
 80105c0:	4638      	mov	r0, r7
 80105c2:	47c0      	blx	r8
 80105c4:	3001      	adds	r0, #1
 80105c6:	d103      	bne.n	80105d0 <_printf_common+0xac>
 80105c8:	f04f 30ff 	mov.w	r0, #4294967295
 80105cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105d0:	3501      	adds	r5, #1
 80105d2:	e7c6      	b.n	8010562 <_printf_common+0x3e>
 80105d4:	18e1      	adds	r1, r4, r3
 80105d6:	1c5a      	adds	r2, r3, #1
 80105d8:	2030      	movs	r0, #48	; 0x30
 80105da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80105de:	4422      	add	r2, r4
 80105e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80105e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80105e8:	3302      	adds	r3, #2
 80105ea:	e7c7      	b.n	801057c <_printf_common+0x58>
 80105ec:	2301      	movs	r3, #1
 80105ee:	4622      	mov	r2, r4
 80105f0:	4649      	mov	r1, r9
 80105f2:	4638      	mov	r0, r7
 80105f4:	47c0      	blx	r8
 80105f6:	3001      	adds	r0, #1
 80105f8:	d0e6      	beq.n	80105c8 <_printf_common+0xa4>
 80105fa:	3601      	adds	r6, #1
 80105fc:	e7d9      	b.n	80105b2 <_printf_common+0x8e>
	...

08010600 <_printf_i>:
 8010600:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010604:	460c      	mov	r4, r1
 8010606:	4691      	mov	r9, r2
 8010608:	7e27      	ldrb	r7, [r4, #24]
 801060a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801060c:	2f78      	cmp	r7, #120	; 0x78
 801060e:	4680      	mov	r8, r0
 8010610:	469a      	mov	sl, r3
 8010612:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010616:	d807      	bhi.n	8010628 <_printf_i+0x28>
 8010618:	2f62      	cmp	r7, #98	; 0x62
 801061a:	d80a      	bhi.n	8010632 <_printf_i+0x32>
 801061c:	2f00      	cmp	r7, #0
 801061e:	f000 80d8 	beq.w	80107d2 <_printf_i+0x1d2>
 8010622:	2f58      	cmp	r7, #88	; 0x58
 8010624:	f000 80a3 	beq.w	801076e <_printf_i+0x16e>
 8010628:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801062c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010630:	e03a      	b.n	80106a8 <_printf_i+0xa8>
 8010632:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010636:	2b15      	cmp	r3, #21
 8010638:	d8f6      	bhi.n	8010628 <_printf_i+0x28>
 801063a:	a001      	add	r0, pc, #4	; (adr r0, 8010640 <_printf_i+0x40>)
 801063c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010640:	08010699 	.word	0x08010699
 8010644:	080106ad 	.word	0x080106ad
 8010648:	08010629 	.word	0x08010629
 801064c:	08010629 	.word	0x08010629
 8010650:	08010629 	.word	0x08010629
 8010654:	08010629 	.word	0x08010629
 8010658:	080106ad 	.word	0x080106ad
 801065c:	08010629 	.word	0x08010629
 8010660:	08010629 	.word	0x08010629
 8010664:	08010629 	.word	0x08010629
 8010668:	08010629 	.word	0x08010629
 801066c:	080107b9 	.word	0x080107b9
 8010670:	080106dd 	.word	0x080106dd
 8010674:	0801079b 	.word	0x0801079b
 8010678:	08010629 	.word	0x08010629
 801067c:	08010629 	.word	0x08010629
 8010680:	080107db 	.word	0x080107db
 8010684:	08010629 	.word	0x08010629
 8010688:	080106dd 	.word	0x080106dd
 801068c:	08010629 	.word	0x08010629
 8010690:	08010629 	.word	0x08010629
 8010694:	080107a3 	.word	0x080107a3
 8010698:	680b      	ldr	r3, [r1, #0]
 801069a:	1d1a      	adds	r2, r3, #4
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	600a      	str	r2, [r1, #0]
 80106a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80106a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80106a8:	2301      	movs	r3, #1
 80106aa:	e0a3      	b.n	80107f4 <_printf_i+0x1f4>
 80106ac:	6825      	ldr	r5, [r4, #0]
 80106ae:	6808      	ldr	r0, [r1, #0]
 80106b0:	062e      	lsls	r6, r5, #24
 80106b2:	f100 0304 	add.w	r3, r0, #4
 80106b6:	d50a      	bpl.n	80106ce <_printf_i+0xce>
 80106b8:	6805      	ldr	r5, [r0, #0]
 80106ba:	600b      	str	r3, [r1, #0]
 80106bc:	2d00      	cmp	r5, #0
 80106be:	da03      	bge.n	80106c8 <_printf_i+0xc8>
 80106c0:	232d      	movs	r3, #45	; 0x2d
 80106c2:	426d      	negs	r5, r5
 80106c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80106c8:	485e      	ldr	r0, [pc, #376]	; (8010844 <_printf_i+0x244>)
 80106ca:	230a      	movs	r3, #10
 80106cc:	e019      	b.n	8010702 <_printf_i+0x102>
 80106ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80106d2:	6805      	ldr	r5, [r0, #0]
 80106d4:	600b      	str	r3, [r1, #0]
 80106d6:	bf18      	it	ne
 80106d8:	b22d      	sxthne	r5, r5
 80106da:	e7ef      	b.n	80106bc <_printf_i+0xbc>
 80106dc:	680b      	ldr	r3, [r1, #0]
 80106de:	6825      	ldr	r5, [r4, #0]
 80106e0:	1d18      	adds	r0, r3, #4
 80106e2:	6008      	str	r0, [r1, #0]
 80106e4:	0628      	lsls	r0, r5, #24
 80106e6:	d501      	bpl.n	80106ec <_printf_i+0xec>
 80106e8:	681d      	ldr	r5, [r3, #0]
 80106ea:	e002      	b.n	80106f2 <_printf_i+0xf2>
 80106ec:	0669      	lsls	r1, r5, #25
 80106ee:	d5fb      	bpl.n	80106e8 <_printf_i+0xe8>
 80106f0:	881d      	ldrh	r5, [r3, #0]
 80106f2:	4854      	ldr	r0, [pc, #336]	; (8010844 <_printf_i+0x244>)
 80106f4:	2f6f      	cmp	r7, #111	; 0x6f
 80106f6:	bf0c      	ite	eq
 80106f8:	2308      	moveq	r3, #8
 80106fa:	230a      	movne	r3, #10
 80106fc:	2100      	movs	r1, #0
 80106fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010702:	6866      	ldr	r6, [r4, #4]
 8010704:	60a6      	str	r6, [r4, #8]
 8010706:	2e00      	cmp	r6, #0
 8010708:	bfa2      	ittt	ge
 801070a:	6821      	ldrge	r1, [r4, #0]
 801070c:	f021 0104 	bicge.w	r1, r1, #4
 8010710:	6021      	strge	r1, [r4, #0]
 8010712:	b90d      	cbnz	r5, 8010718 <_printf_i+0x118>
 8010714:	2e00      	cmp	r6, #0
 8010716:	d04d      	beq.n	80107b4 <_printf_i+0x1b4>
 8010718:	4616      	mov	r6, r2
 801071a:	fbb5 f1f3 	udiv	r1, r5, r3
 801071e:	fb03 5711 	mls	r7, r3, r1, r5
 8010722:	5dc7      	ldrb	r7, [r0, r7]
 8010724:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010728:	462f      	mov	r7, r5
 801072a:	42bb      	cmp	r3, r7
 801072c:	460d      	mov	r5, r1
 801072e:	d9f4      	bls.n	801071a <_printf_i+0x11a>
 8010730:	2b08      	cmp	r3, #8
 8010732:	d10b      	bne.n	801074c <_printf_i+0x14c>
 8010734:	6823      	ldr	r3, [r4, #0]
 8010736:	07df      	lsls	r7, r3, #31
 8010738:	d508      	bpl.n	801074c <_printf_i+0x14c>
 801073a:	6923      	ldr	r3, [r4, #16]
 801073c:	6861      	ldr	r1, [r4, #4]
 801073e:	4299      	cmp	r1, r3
 8010740:	bfde      	ittt	le
 8010742:	2330      	movle	r3, #48	; 0x30
 8010744:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010748:	f106 36ff 	addle.w	r6, r6, #4294967295
 801074c:	1b92      	subs	r2, r2, r6
 801074e:	6122      	str	r2, [r4, #16]
 8010750:	f8cd a000 	str.w	sl, [sp]
 8010754:	464b      	mov	r3, r9
 8010756:	aa03      	add	r2, sp, #12
 8010758:	4621      	mov	r1, r4
 801075a:	4640      	mov	r0, r8
 801075c:	f7ff fee2 	bl	8010524 <_printf_common>
 8010760:	3001      	adds	r0, #1
 8010762:	d14c      	bne.n	80107fe <_printf_i+0x1fe>
 8010764:	f04f 30ff 	mov.w	r0, #4294967295
 8010768:	b004      	add	sp, #16
 801076a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801076e:	4835      	ldr	r0, [pc, #212]	; (8010844 <_printf_i+0x244>)
 8010770:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010774:	6823      	ldr	r3, [r4, #0]
 8010776:	680e      	ldr	r6, [r1, #0]
 8010778:	061f      	lsls	r7, r3, #24
 801077a:	f856 5b04 	ldr.w	r5, [r6], #4
 801077e:	600e      	str	r6, [r1, #0]
 8010780:	d514      	bpl.n	80107ac <_printf_i+0x1ac>
 8010782:	07d9      	lsls	r1, r3, #31
 8010784:	bf44      	itt	mi
 8010786:	f043 0320 	orrmi.w	r3, r3, #32
 801078a:	6023      	strmi	r3, [r4, #0]
 801078c:	b91d      	cbnz	r5, 8010796 <_printf_i+0x196>
 801078e:	6823      	ldr	r3, [r4, #0]
 8010790:	f023 0320 	bic.w	r3, r3, #32
 8010794:	6023      	str	r3, [r4, #0]
 8010796:	2310      	movs	r3, #16
 8010798:	e7b0      	b.n	80106fc <_printf_i+0xfc>
 801079a:	6823      	ldr	r3, [r4, #0]
 801079c:	f043 0320 	orr.w	r3, r3, #32
 80107a0:	6023      	str	r3, [r4, #0]
 80107a2:	2378      	movs	r3, #120	; 0x78
 80107a4:	4828      	ldr	r0, [pc, #160]	; (8010848 <_printf_i+0x248>)
 80107a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80107aa:	e7e3      	b.n	8010774 <_printf_i+0x174>
 80107ac:	065e      	lsls	r6, r3, #25
 80107ae:	bf48      	it	mi
 80107b0:	b2ad      	uxthmi	r5, r5
 80107b2:	e7e6      	b.n	8010782 <_printf_i+0x182>
 80107b4:	4616      	mov	r6, r2
 80107b6:	e7bb      	b.n	8010730 <_printf_i+0x130>
 80107b8:	680b      	ldr	r3, [r1, #0]
 80107ba:	6826      	ldr	r6, [r4, #0]
 80107bc:	6960      	ldr	r0, [r4, #20]
 80107be:	1d1d      	adds	r5, r3, #4
 80107c0:	600d      	str	r5, [r1, #0]
 80107c2:	0635      	lsls	r5, r6, #24
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	d501      	bpl.n	80107cc <_printf_i+0x1cc>
 80107c8:	6018      	str	r0, [r3, #0]
 80107ca:	e002      	b.n	80107d2 <_printf_i+0x1d2>
 80107cc:	0671      	lsls	r1, r6, #25
 80107ce:	d5fb      	bpl.n	80107c8 <_printf_i+0x1c8>
 80107d0:	8018      	strh	r0, [r3, #0]
 80107d2:	2300      	movs	r3, #0
 80107d4:	6123      	str	r3, [r4, #16]
 80107d6:	4616      	mov	r6, r2
 80107d8:	e7ba      	b.n	8010750 <_printf_i+0x150>
 80107da:	680b      	ldr	r3, [r1, #0]
 80107dc:	1d1a      	adds	r2, r3, #4
 80107de:	600a      	str	r2, [r1, #0]
 80107e0:	681e      	ldr	r6, [r3, #0]
 80107e2:	6862      	ldr	r2, [r4, #4]
 80107e4:	2100      	movs	r1, #0
 80107e6:	4630      	mov	r0, r6
 80107e8:	f7ef fd0a 	bl	8000200 <memchr>
 80107ec:	b108      	cbz	r0, 80107f2 <_printf_i+0x1f2>
 80107ee:	1b80      	subs	r0, r0, r6
 80107f0:	6060      	str	r0, [r4, #4]
 80107f2:	6863      	ldr	r3, [r4, #4]
 80107f4:	6123      	str	r3, [r4, #16]
 80107f6:	2300      	movs	r3, #0
 80107f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80107fc:	e7a8      	b.n	8010750 <_printf_i+0x150>
 80107fe:	6923      	ldr	r3, [r4, #16]
 8010800:	4632      	mov	r2, r6
 8010802:	4649      	mov	r1, r9
 8010804:	4640      	mov	r0, r8
 8010806:	47d0      	blx	sl
 8010808:	3001      	adds	r0, #1
 801080a:	d0ab      	beq.n	8010764 <_printf_i+0x164>
 801080c:	6823      	ldr	r3, [r4, #0]
 801080e:	079b      	lsls	r3, r3, #30
 8010810:	d413      	bmi.n	801083a <_printf_i+0x23a>
 8010812:	68e0      	ldr	r0, [r4, #12]
 8010814:	9b03      	ldr	r3, [sp, #12]
 8010816:	4298      	cmp	r0, r3
 8010818:	bfb8      	it	lt
 801081a:	4618      	movlt	r0, r3
 801081c:	e7a4      	b.n	8010768 <_printf_i+0x168>
 801081e:	2301      	movs	r3, #1
 8010820:	4632      	mov	r2, r6
 8010822:	4649      	mov	r1, r9
 8010824:	4640      	mov	r0, r8
 8010826:	47d0      	blx	sl
 8010828:	3001      	adds	r0, #1
 801082a:	d09b      	beq.n	8010764 <_printf_i+0x164>
 801082c:	3501      	adds	r5, #1
 801082e:	68e3      	ldr	r3, [r4, #12]
 8010830:	9903      	ldr	r1, [sp, #12]
 8010832:	1a5b      	subs	r3, r3, r1
 8010834:	42ab      	cmp	r3, r5
 8010836:	dcf2      	bgt.n	801081e <_printf_i+0x21e>
 8010838:	e7eb      	b.n	8010812 <_printf_i+0x212>
 801083a:	2500      	movs	r5, #0
 801083c:	f104 0619 	add.w	r6, r4, #25
 8010840:	e7f5      	b.n	801082e <_printf_i+0x22e>
 8010842:	bf00      	nop
 8010844:	080155e8 	.word	0x080155e8
 8010848:	080155f9 	.word	0x080155f9

0801084c <_scanf_float>:
 801084c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010850:	b087      	sub	sp, #28
 8010852:	4617      	mov	r7, r2
 8010854:	9303      	str	r3, [sp, #12]
 8010856:	688b      	ldr	r3, [r1, #8]
 8010858:	1e5a      	subs	r2, r3, #1
 801085a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801085e:	bf83      	ittte	hi
 8010860:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010864:	195b      	addhi	r3, r3, r5
 8010866:	9302      	strhi	r3, [sp, #8]
 8010868:	2300      	movls	r3, #0
 801086a:	bf86      	itte	hi
 801086c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010870:	608b      	strhi	r3, [r1, #8]
 8010872:	9302      	strls	r3, [sp, #8]
 8010874:	680b      	ldr	r3, [r1, #0]
 8010876:	468b      	mov	fp, r1
 8010878:	2500      	movs	r5, #0
 801087a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801087e:	f84b 3b1c 	str.w	r3, [fp], #28
 8010882:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010886:	4680      	mov	r8, r0
 8010888:	460c      	mov	r4, r1
 801088a:	465e      	mov	r6, fp
 801088c:	46aa      	mov	sl, r5
 801088e:	46a9      	mov	r9, r5
 8010890:	9501      	str	r5, [sp, #4]
 8010892:	68a2      	ldr	r2, [r4, #8]
 8010894:	b152      	cbz	r2, 80108ac <_scanf_float+0x60>
 8010896:	683b      	ldr	r3, [r7, #0]
 8010898:	781b      	ldrb	r3, [r3, #0]
 801089a:	2b4e      	cmp	r3, #78	; 0x4e
 801089c:	d864      	bhi.n	8010968 <_scanf_float+0x11c>
 801089e:	2b40      	cmp	r3, #64	; 0x40
 80108a0:	d83c      	bhi.n	801091c <_scanf_float+0xd0>
 80108a2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80108a6:	b2c8      	uxtb	r0, r1
 80108a8:	280e      	cmp	r0, #14
 80108aa:	d93a      	bls.n	8010922 <_scanf_float+0xd6>
 80108ac:	f1b9 0f00 	cmp.w	r9, #0
 80108b0:	d003      	beq.n	80108ba <_scanf_float+0x6e>
 80108b2:	6823      	ldr	r3, [r4, #0]
 80108b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80108b8:	6023      	str	r3, [r4, #0]
 80108ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80108be:	f1ba 0f01 	cmp.w	sl, #1
 80108c2:	f200 8113 	bhi.w	8010aec <_scanf_float+0x2a0>
 80108c6:	455e      	cmp	r6, fp
 80108c8:	f200 8105 	bhi.w	8010ad6 <_scanf_float+0x28a>
 80108cc:	2501      	movs	r5, #1
 80108ce:	4628      	mov	r0, r5
 80108d0:	b007      	add	sp, #28
 80108d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108d6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80108da:	2a0d      	cmp	r2, #13
 80108dc:	d8e6      	bhi.n	80108ac <_scanf_float+0x60>
 80108de:	a101      	add	r1, pc, #4	; (adr r1, 80108e4 <_scanf_float+0x98>)
 80108e0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80108e4:	08010a23 	.word	0x08010a23
 80108e8:	080108ad 	.word	0x080108ad
 80108ec:	080108ad 	.word	0x080108ad
 80108f0:	080108ad 	.word	0x080108ad
 80108f4:	08010a83 	.word	0x08010a83
 80108f8:	08010a5b 	.word	0x08010a5b
 80108fc:	080108ad 	.word	0x080108ad
 8010900:	080108ad 	.word	0x080108ad
 8010904:	08010a31 	.word	0x08010a31
 8010908:	080108ad 	.word	0x080108ad
 801090c:	080108ad 	.word	0x080108ad
 8010910:	080108ad 	.word	0x080108ad
 8010914:	080108ad 	.word	0x080108ad
 8010918:	080109e9 	.word	0x080109e9
 801091c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8010920:	e7db      	b.n	80108da <_scanf_float+0x8e>
 8010922:	290e      	cmp	r1, #14
 8010924:	d8c2      	bhi.n	80108ac <_scanf_float+0x60>
 8010926:	a001      	add	r0, pc, #4	; (adr r0, 801092c <_scanf_float+0xe0>)
 8010928:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801092c:	080109db 	.word	0x080109db
 8010930:	080108ad 	.word	0x080108ad
 8010934:	080109db 	.word	0x080109db
 8010938:	08010a6f 	.word	0x08010a6f
 801093c:	080108ad 	.word	0x080108ad
 8010940:	08010989 	.word	0x08010989
 8010944:	080109c5 	.word	0x080109c5
 8010948:	080109c5 	.word	0x080109c5
 801094c:	080109c5 	.word	0x080109c5
 8010950:	080109c5 	.word	0x080109c5
 8010954:	080109c5 	.word	0x080109c5
 8010958:	080109c5 	.word	0x080109c5
 801095c:	080109c5 	.word	0x080109c5
 8010960:	080109c5 	.word	0x080109c5
 8010964:	080109c5 	.word	0x080109c5
 8010968:	2b6e      	cmp	r3, #110	; 0x6e
 801096a:	d809      	bhi.n	8010980 <_scanf_float+0x134>
 801096c:	2b60      	cmp	r3, #96	; 0x60
 801096e:	d8b2      	bhi.n	80108d6 <_scanf_float+0x8a>
 8010970:	2b54      	cmp	r3, #84	; 0x54
 8010972:	d077      	beq.n	8010a64 <_scanf_float+0x218>
 8010974:	2b59      	cmp	r3, #89	; 0x59
 8010976:	d199      	bne.n	80108ac <_scanf_float+0x60>
 8010978:	2d07      	cmp	r5, #7
 801097a:	d197      	bne.n	80108ac <_scanf_float+0x60>
 801097c:	2508      	movs	r5, #8
 801097e:	e029      	b.n	80109d4 <_scanf_float+0x188>
 8010980:	2b74      	cmp	r3, #116	; 0x74
 8010982:	d06f      	beq.n	8010a64 <_scanf_float+0x218>
 8010984:	2b79      	cmp	r3, #121	; 0x79
 8010986:	e7f6      	b.n	8010976 <_scanf_float+0x12a>
 8010988:	6821      	ldr	r1, [r4, #0]
 801098a:	05c8      	lsls	r0, r1, #23
 801098c:	d51a      	bpl.n	80109c4 <_scanf_float+0x178>
 801098e:	9b02      	ldr	r3, [sp, #8]
 8010990:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010994:	6021      	str	r1, [r4, #0]
 8010996:	f109 0901 	add.w	r9, r9, #1
 801099a:	b11b      	cbz	r3, 80109a4 <_scanf_float+0x158>
 801099c:	3b01      	subs	r3, #1
 801099e:	3201      	adds	r2, #1
 80109a0:	9302      	str	r3, [sp, #8]
 80109a2:	60a2      	str	r2, [r4, #8]
 80109a4:	68a3      	ldr	r3, [r4, #8]
 80109a6:	3b01      	subs	r3, #1
 80109a8:	60a3      	str	r3, [r4, #8]
 80109aa:	6923      	ldr	r3, [r4, #16]
 80109ac:	3301      	adds	r3, #1
 80109ae:	6123      	str	r3, [r4, #16]
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	3b01      	subs	r3, #1
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	607b      	str	r3, [r7, #4]
 80109b8:	f340 8084 	ble.w	8010ac4 <_scanf_float+0x278>
 80109bc:	683b      	ldr	r3, [r7, #0]
 80109be:	3301      	adds	r3, #1
 80109c0:	603b      	str	r3, [r7, #0]
 80109c2:	e766      	b.n	8010892 <_scanf_float+0x46>
 80109c4:	eb1a 0f05 	cmn.w	sl, r5
 80109c8:	f47f af70 	bne.w	80108ac <_scanf_float+0x60>
 80109cc:	6822      	ldr	r2, [r4, #0]
 80109ce:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80109d2:	6022      	str	r2, [r4, #0]
 80109d4:	f806 3b01 	strb.w	r3, [r6], #1
 80109d8:	e7e4      	b.n	80109a4 <_scanf_float+0x158>
 80109da:	6822      	ldr	r2, [r4, #0]
 80109dc:	0610      	lsls	r0, r2, #24
 80109de:	f57f af65 	bpl.w	80108ac <_scanf_float+0x60>
 80109e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80109e6:	e7f4      	b.n	80109d2 <_scanf_float+0x186>
 80109e8:	f1ba 0f00 	cmp.w	sl, #0
 80109ec:	d10e      	bne.n	8010a0c <_scanf_float+0x1c0>
 80109ee:	f1b9 0f00 	cmp.w	r9, #0
 80109f2:	d10e      	bne.n	8010a12 <_scanf_float+0x1c6>
 80109f4:	6822      	ldr	r2, [r4, #0]
 80109f6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80109fa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80109fe:	d108      	bne.n	8010a12 <_scanf_float+0x1c6>
 8010a00:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010a04:	6022      	str	r2, [r4, #0]
 8010a06:	f04f 0a01 	mov.w	sl, #1
 8010a0a:	e7e3      	b.n	80109d4 <_scanf_float+0x188>
 8010a0c:	f1ba 0f02 	cmp.w	sl, #2
 8010a10:	d055      	beq.n	8010abe <_scanf_float+0x272>
 8010a12:	2d01      	cmp	r5, #1
 8010a14:	d002      	beq.n	8010a1c <_scanf_float+0x1d0>
 8010a16:	2d04      	cmp	r5, #4
 8010a18:	f47f af48 	bne.w	80108ac <_scanf_float+0x60>
 8010a1c:	3501      	adds	r5, #1
 8010a1e:	b2ed      	uxtb	r5, r5
 8010a20:	e7d8      	b.n	80109d4 <_scanf_float+0x188>
 8010a22:	f1ba 0f01 	cmp.w	sl, #1
 8010a26:	f47f af41 	bne.w	80108ac <_scanf_float+0x60>
 8010a2a:	f04f 0a02 	mov.w	sl, #2
 8010a2e:	e7d1      	b.n	80109d4 <_scanf_float+0x188>
 8010a30:	b97d      	cbnz	r5, 8010a52 <_scanf_float+0x206>
 8010a32:	f1b9 0f00 	cmp.w	r9, #0
 8010a36:	f47f af3c 	bne.w	80108b2 <_scanf_float+0x66>
 8010a3a:	6822      	ldr	r2, [r4, #0]
 8010a3c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010a40:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010a44:	f47f af39 	bne.w	80108ba <_scanf_float+0x6e>
 8010a48:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010a4c:	6022      	str	r2, [r4, #0]
 8010a4e:	2501      	movs	r5, #1
 8010a50:	e7c0      	b.n	80109d4 <_scanf_float+0x188>
 8010a52:	2d03      	cmp	r5, #3
 8010a54:	d0e2      	beq.n	8010a1c <_scanf_float+0x1d0>
 8010a56:	2d05      	cmp	r5, #5
 8010a58:	e7de      	b.n	8010a18 <_scanf_float+0x1cc>
 8010a5a:	2d02      	cmp	r5, #2
 8010a5c:	f47f af26 	bne.w	80108ac <_scanf_float+0x60>
 8010a60:	2503      	movs	r5, #3
 8010a62:	e7b7      	b.n	80109d4 <_scanf_float+0x188>
 8010a64:	2d06      	cmp	r5, #6
 8010a66:	f47f af21 	bne.w	80108ac <_scanf_float+0x60>
 8010a6a:	2507      	movs	r5, #7
 8010a6c:	e7b2      	b.n	80109d4 <_scanf_float+0x188>
 8010a6e:	6822      	ldr	r2, [r4, #0]
 8010a70:	0591      	lsls	r1, r2, #22
 8010a72:	f57f af1b 	bpl.w	80108ac <_scanf_float+0x60>
 8010a76:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8010a7a:	6022      	str	r2, [r4, #0]
 8010a7c:	f8cd 9004 	str.w	r9, [sp, #4]
 8010a80:	e7a8      	b.n	80109d4 <_scanf_float+0x188>
 8010a82:	6822      	ldr	r2, [r4, #0]
 8010a84:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8010a88:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010a8c:	d006      	beq.n	8010a9c <_scanf_float+0x250>
 8010a8e:	0550      	lsls	r0, r2, #21
 8010a90:	f57f af0c 	bpl.w	80108ac <_scanf_float+0x60>
 8010a94:	f1b9 0f00 	cmp.w	r9, #0
 8010a98:	f43f af0f 	beq.w	80108ba <_scanf_float+0x6e>
 8010a9c:	0591      	lsls	r1, r2, #22
 8010a9e:	bf58      	it	pl
 8010aa0:	9901      	ldrpl	r1, [sp, #4]
 8010aa2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010aa6:	bf58      	it	pl
 8010aa8:	eba9 0101 	subpl.w	r1, r9, r1
 8010aac:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8010ab0:	bf58      	it	pl
 8010ab2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010ab6:	6022      	str	r2, [r4, #0]
 8010ab8:	f04f 0900 	mov.w	r9, #0
 8010abc:	e78a      	b.n	80109d4 <_scanf_float+0x188>
 8010abe:	f04f 0a03 	mov.w	sl, #3
 8010ac2:	e787      	b.n	80109d4 <_scanf_float+0x188>
 8010ac4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010ac8:	4639      	mov	r1, r7
 8010aca:	4640      	mov	r0, r8
 8010acc:	4798      	blx	r3
 8010ace:	2800      	cmp	r0, #0
 8010ad0:	f43f aedf 	beq.w	8010892 <_scanf_float+0x46>
 8010ad4:	e6ea      	b.n	80108ac <_scanf_float+0x60>
 8010ad6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010ada:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010ade:	463a      	mov	r2, r7
 8010ae0:	4640      	mov	r0, r8
 8010ae2:	4798      	blx	r3
 8010ae4:	6923      	ldr	r3, [r4, #16]
 8010ae6:	3b01      	subs	r3, #1
 8010ae8:	6123      	str	r3, [r4, #16]
 8010aea:	e6ec      	b.n	80108c6 <_scanf_float+0x7a>
 8010aec:	1e6b      	subs	r3, r5, #1
 8010aee:	2b06      	cmp	r3, #6
 8010af0:	d825      	bhi.n	8010b3e <_scanf_float+0x2f2>
 8010af2:	2d02      	cmp	r5, #2
 8010af4:	d836      	bhi.n	8010b64 <_scanf_float+0x318>
 8010af6:	455e      	cmp	r6, fp
 8010af8:	f67f aee8 	bls.w	80108cc <_scanf_float+0x80>
 8010afc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010b00:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010b04:	463a      	mov	r2, r7
 8010b06:	4640      	mov	r0, r8
 8010b08:	4798      	blx	r3
 8010b0a:	6923      	ldr	r3, [r4, #16]
 8010b0c:	3b01      	subs	r3, #1
 8010b0e:	6123      	str	r3, [r4, #16]
 8010b10:	e7f1      	b.n	8010af6 <_scanf_float+0x2aa>
 8010b12:	9802      	ldr	r0, [sp, #8]
 8010b14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010b18:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8010b1c:	9002      	str	r0, [sp, #8]
 8010b1e:	463a      	mov	r2, r7
 8010b20:	4640      	mov	r0, r8
 8010b22:	4798      	blx	r3
 8010b24:	6923      	ldr	r3, [r4, #16]
 8010b26:	3b01      	subs	r3, #1
 8010b28:	6123      	str	r3, [r4, #16]
 8010b2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010b2e:	fa5f fa8a 	uxtb.w	sl, sl
 8010b32:	f1ba 0f02 	cmp.w	sl, #2
 8010b36:	d1ec      	bne.n	8010b12 <_scanf_float+0x2c6>
 8010b38:	3d03      	subs	r5, #3
 8010b3a:	b2ed      	uxtb	r5, r5
 8010b3c:	1b76      	subs	r6, r6, r5
 8010b3e:	6823      	ldr	r3, [r4, #0]
 8010b40:	05da      	lsls	r2, r3, #23
 8010b42:	d52f      	bpl.n	8010ba4 <_scanf_float+0x358>
 8010b44:	055b      	lsls	r3, r3, #21
 8010b46:	d510      	bpl.n	8010b6a <_scanf_float+0x31e>
 8010b48:	455e      	cmp	r6, fp
 8010b4a:	f67f aebf 	bls.w	80108cc <_scanf_float+0x80>
 8010b4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010b52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010b56:	463a      	mov	r2, r7
 8010b58:	4640      	mov	r0, r8
 8010b5a:	4798      	blx	r3
 8010b5c:	6923      	ldr	r3, [r4, #16]
 8010b5e:	3b01      	subs	r3, #1
 8010b60:	6123      	str	r3, [r4, #16]
 8010b62:	e7f1      	b.n	8010b48 <_scanf_float+0x2fc>
 8010b64:	46aa      	mov	sl, r5
 8010b66:	9602      	str	r6, [sp, #8]
 8010b68:	e7df      	b.n	8010b2a <_scanf_float+0x2de>
 8010b6a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010b6e:	6923      	ldr	r3, [r4, #16]
 8010b70:	2965      	cmp	r1, #101	; 0x65
 8010b72:	f103 33ff 	add.w	r3, r3, #4294967295
 8010b76:	f106 35ff 	add.w	r5, r6, #4294967295
 8010b7a:	6123      	str	r3, [r4, #16]
 8010b7c:	d00c      	beq.n	8010b98 <_scanf_float+0x34c>
 8010b7e:	2945      	cmp	r1, #69	; 0x45
 8010b80:	d00a      	beq.n	8010b98 <_scanf_float+0x34c>
 8010b82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010b86:	463a      	mov	r2, r7
 8010b88:	4640      	mov	r0, r8
 8010b8a:	4798      	blx	r3
 8010b8c:	6923      	ldr	r3, [r4, #16]
 8010b8e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010b92:	3b01      	subs	r3, #1
 8010b94:	1eb5      	subs	r5, r6, #2
 8010b96:	6123      	str	r3, [r4, #16]
 8010b98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010b9c:	463a      	mov	r2, r7
 8010b9e:	4640      	mov	r0, r8
 8010ba0:	4798      	blx	r3
 8010ba2:	462e      	mov	r6, r5
 8010ba4:	6825      	ldr	r5, [r4, #0]
 8010ba6:	f015 0510 	ands.w	r5, r5, #16
 8010baa:	d158      	bne.n	8010c5e <_scanf_float+0x412>
 8010bac:	7035      	strb	r5, [r6, #0]
 8010bae:	6823      	ldr	r3, [r4, #0]
 8010bb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010bb8:	d11c      	bne.n	8010bf4 <_scanf_float+0x3a8>
 8010bba:	9b01      	ldr	r3, [sp, #4]
 8010bbc:	454b      	cmp	r3, r9
 8010bbe:	eba3 0209 	sub.w	r2, r3, r9
 8010bc2:	d124      	bne.n	8010c0e <_scanf_float+0x3c2>
 8010bc4:	2200      	movs	r2, #0
 8010bc6:	4659      	mov	r1, fp
 8010bc8:	4640      	mov	r0, r8
 8010bca:	f000 ff27 	bl	8011a1c <_strtod_r>
 8010bce:	9b03      	ldr	r3, [sp, #12]
 8010bd0:	6821      	ldr	r1, [r4, #0]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	f011 0f02 	tst.w	r1, #2
 8010bd8:	ec57 6b10 	vmov	r6, r7, d0
 8010bdc:	f103 0204 	add.w	r2, r3, #4
 8010be0:	d020      	beq.n	8010c24 <_scanf_float+0x3d8>
 8010be2:	9903      	ldr	r1, [sp, #12]
 8010be4:	600a      	str	r2, [r1, #0]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	e9c3 6700 	strd	r6, r7, [r3]
 8010bec:	68e3      	ldr	r3, [r4, #12]
 8010bee:	3301      	adds	r3, #1
 8010bf0:	60e3      	str	r3, [r4, #12]
 8010bf2:	e66c      	b.n	80108ce <_scanf_float+0x82>
 8010bf4:	9b04      	ldr	r3, [sp, #16]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d0e4      	beq.n	8010bc4 <_scanf_float+0x378>
 8010bfa:	9905      	ldr	r1, [sp, #20]
 8010bfc:	230a      	movs	r3, #10
 8010bfe:	462a      	mov	r2, r5
 8010c00:	3101      	adds	r1, #1
 8010c02:	4640      	mov	r0, r8
 8010c04:	f000 ff94 	bl	8011b30 <_strtol_r>
 8010c08:	9b04      	ldr	r3, [sp, #16]
 8010c0a:	9e05      	ldr	r6, [sp, #20]
 8010c0c:	1ac2      	subs	r2, r0, r3
 8010c0e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010c12:	429e      	cmp	r6, r3
 8010c14:	bf28      	it	cs
 8010c16:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8010c1a:	4912      	ldr	r1, [pc, #72]	; (8010c64 <_scanf_float+0x418>)
 8010c1c:	4630      	mov	r0, r6
 8010c1e:	f000 f82b 	bl	8010c78 <siprintf>
 8010c22:	e7cf      	b.n	8010bc4 <_scanf_float+0x378>
 8010c24:	f011 0f04 	tst.w	r1, #4
 8010c28:	9903      	ldr	r1, [sp, #12]
 8010c2a:	600a      	str	r2, [r1, #0]
 8010c2c:	d1db      	bne.n	8010be6 <_scanf_float+0x39a>
 8010c2e:	f8d3 8000 	ldr.w	r8, [r3]
 8010c32:	ee10 2a10 	vmov	r2, s0
 8010c36:	ee10 0a10 	vmov	r0, s0
 8010c3a:	463b      	mov	r3, r7
 8010c3c:	4639      	mov	r1, r7
 8010c3e:	f7ef ff85 	bl	8000b4c <__aeabi_dcmpun>
 8010c42:	b128      	cbz	r0, 8010c50 <_scanf_float+0x404>
 8010c44:	4808      	ldr	r0, [pc, #32]	; (8010c68 <_scanf_float+0x41c>)
 8010c46:	f000 f811 	bl	8010c6c <nanf>
 8010c4a:	ed88 0a00 	vstr	s0, [r8]
 8010c4e:	e7cd      	b.n	8010bec <_scanf_float+0x3a0>
 8010c50:	4630      	mov	r0, r6
 8010c52:	4639      	mov	r1, r7
 8010c54:	f7ef ffd8 	bl	8000c08 <__aeabi_d2f>
 8010c58:	f8c8 0000 	str.w	r0, [r8]
 8010c5c:	e7c6      	b.n	8010bec <_scanf_float+0x3a0>
 8010c5e:	2500      	movs	r5, #0
 8010c60:	e635      	b.n	80108ce <_scanf_float+0x82>
 8010c62:	bf00      	nop
 8010c64:	0801560a 	.word	0x0801560a
 8010c68:	0801599b 	.word	0x0801599b

08010c6c <nanf>:
 8010c6c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010c74 <nanf+0x8>
 8010c70:	4770      	bx	lr
 8010c72:	bf00      	nop
 8010c74:	7fc00000 	.word	0x7fc00000

08010c78 <siprintf>:
 8010c78:	b40e      	push	{r1, r2, r3}
 8010c7a:	b500      	push	{lr}
 8010c7c:	b09c      	sub	sp, #112	; 0x70
 8010c7e:	ab1d      	add	r3, sp, #116	; 0x74
 8010c80:	9002      	str	r0, [sp, #8]
 8010c82:	9006      	str	r0, [sp, #24]
 8010c84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010c88:	4809      	ldr	r0, [pc, #36]	; (8010cb0 <siprintf+0x38>)
 8010c8a:	9107      	str	r1, [sp, #28]
 8010c8c:	9104      	str	r1, [sp, #16]
 8010c8e:	4909      	ldr	r1, [pc, #36]	; (8010cb4 <siprintf+0x3c>)
 8010c90:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c94:	9105      	str	r1, [sp, #20]
 8010c96:	6800      	ldr	r0, [r0, #0]
 8010c98:	9301      	str	r3, [sp, #4]
 8010c9a:	a902      	add	r1, sp, #8
 8010c9c:	f003 fa84 	bl	80141a8 <_svfiprintf_r>
 8010ca0:	9b02      	ldr	r3, [sp, #8]
 8010ca2:	2200      	movs	r2, #0
 8010ca4:	701a      	strb	r2, [r3, #0]
 8010ca6:	b01c      	add	sp, #112	; 0x70
 8010ca8:	f85d eb04 	ldr.w	lr, [sp], #4
 8010cac:	b003      	add	sp, #12
 8010cae:	4770      	bx	lr
 8010cb0:	20000198 	.word	0x20000198
 8010cb4:	ffff0208 	.word	0xffff0208

08010cb8 <siscanf>:
 8010cb8:	b40e      	push	{r1, r2, r3}
 8010cba:	b510      	push	{r4, lr}
 8010cbc:	b09f      	sub	sp, #124	; 0x7c
 8010cbe:	ac21      	add	r4, sp, #132	; 0x84
 8010cc0:	f44f 7101 	mov.w	r1, #516	; 0x204
 8010cc4:	f854 2b04 	ldr.w	r2, [r4], #4
 8010cc8:	9201      	str	r2, [sp, #4]
 8010cca:	f8ad 101c 	strh.w	r1, [sp, #28]
 8010cce:	9004      	str	r0, [sp, #16]
 8010cd0:	9008      	str	r0, [sp, #32]
 8010cd2:	f7ef fa8d 	bl	80001f0 <strlen>
 8010cd6:	4b0c      	ldr	r3, [pc, #48]	; (8010d08 <siscanf+0x50>)
 8010cd8:	9005      	str	r0, [sp, #20]
 8010cda:	9009      	str	r0, [sp, #36]	; 0x24
 8010cdc:	930d      	str	r3, [sp, #52]	; 0x34
 8010cde:	480b      	ldr	r0, [pc, #44]	; (8010d0c <siscanf+0x54>)
 8010ce0:	9a01      	ldr	r2, [sp, #4]
 8010ce2:	6800      	ldr	r0, [r0, #0]
 8010ce4:	9403      	str	r4, [sp, #12]
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	9311      	str	r3, [sp, #68]	; 0x44
 8010cea:	9316      	str	r3, [sp, #88]	; 0x58
 8010cec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010cf0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8010cf4:	a904      	add	r1, sp, #16
 8010cf6:	4623      	mov	r3, r4
 8010cf8:	f003 fbb0 	bl	801445c <__ssvfiscanf_r>
 8010cfc:	b01f      	add	sp, #124	; 0x7c
 8010cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d02:	b003      	add	sp, #12
 8010d04:	4770      	bx	lr
 8010d06:	bf00      	nop
 8010d08:	08010d33 	.word	0x08010d33
 8010d0c:	20000198 	.word	0x20000198

08010d10 <__sread>:
 8010d10:	b510      	push	{r4, lr}
 8010d12:	460c      	mov	r4, r1
 8010d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d18:	f003 ffbe 	bl	8014c98 <_read_r>
 8010d1c:	2800      	cmp	r0, #0
 8010d1e:	bfab      	itete	ge
 8010d20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010d22:	89a3      	ldrhlt	r3, [r4, #12]
 8010d24:	181b      	addge	r3, r3, r0
 8010d26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010d2a:	bfac      	ite	ge
 8010d2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8010d2e:	81a3      	strhlt	r3, [r4, #12]
 8010d30:	bd10      	pop	{r4, pc}

08010d32 <__seofread>:
 8010d32:	2000      	movs	r0, #0
 8010d34:	4770      	bx	lr

08010d36 <__swrite>:
 8010d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d3a:	461f      	mov	r7, r3
 8010d3c:	898b      	ldrh	r3, [r1, #12]
 8010d3e:	05db      	lsls	r3, r3, #23
 8010d40:	4605      	mov	r5, r0
 8010d42:	460c      	mov	r4, r1
 8010d44:	4616      	mov	r6, r2
 8010d46:	d505      	bpl.n	8010d54 <__swrite+0x1e>
 8010d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d4c:	2302      	movs	r3, #2
 8010d4e:	2200      	movs	r2, #0
 8010d50:	f002 fbbc 	bl	80134cc <_lseek_r>
 8010d54:	89a3      	ldrh	r3, [r4, #12]
 8010d56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010d5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010d5e:	81a3      	strh	r3, [r4, #12]
 8010d60:	4632      	mov	r2, r6
 8010d62:	463b      	mov	r3, r7
 8010d64:	4628      	mov	r0, r5
 8010d66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d6a:	f000 bf79 	b.w	8011c60 <_write_r>

08010d6e <__sseek>:
 8010d6e:	b510      	push	{r4, lr}
 8010d70:	460c      	mov	r4, r1
 8010d72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d76:	f002 fba9 	bl	80134cc <_lseek_r>
 8010d7a:	1c43      	adds	r3, r0, #1
 8010d7c:	89a3      	ldrh	r3, [r4, #12]
 8010d7e:	bf15      	itete	ne
 8010d80:	6560      	strne	r0, [r4, #84]	; 0x54
 8010d82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010d86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010d8a:	81a3      	strheq	r3, [r4, #12]
 8010d8c:	bf18      	it	ne
 8010d8e:	81a3      	strhne	r3, [r4, #12]
 8010d90:	bd10      	pop	{r4, pc}

08010d92 <__sclose>:
 8010d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d96:	f000 bfe3 	b.w	8011d60 <_close_r>

08010d9a <strcpy>:
 8010d9a:	4603      	mov	r3, r0
 8010d9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010da0:	f803 2b01 	strb.w	r2, [r3], #1
 8010da4:	2a00      	cmp	r2, #0
 8010da6:	d1f9      	bne.n	8010d9c <strcpy+0x2>
 8010da8:	4770      	bx	lr

08010daa <strncmp>:
 8010daa:	b510      	push	{r4, lr}
 8010dac:	b16a      	cbz	r2, 8010dca <strncmp+0x20>
 8010dae:	3901      	subs	r1, #1
 8010db0:	1884      	adds	r4, r0, r2
 8010db2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010db6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010dba:	4293      	cmp	r3, r2
 8010dbc:	d103      	bne.n	8010dc6 <strncmp+0x1c>
 8010dbe:	42a0      	cmp	r0, r4
 8010dc0:	d001      	beq.n	8010dc6 <strncmp+0x1c>
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d1f5      	bne.n	8010db2 <strncmp+0x8>
 8010dc6:	1a98      	subs	r0, r3, r2
 8010dc8:	bd10      	pop	{r4, pc}
 8010dca:	4610      	mov	r0, r2
 8010dcc:	e7fc      	b.n	8010dc8 <strncmp+0x1e>

08010dce <sulp>:
 8010dce:	b570      	push	{r4, r5, r6, lr}
 8010dd0:	4604      	mov	r4, r0
 8010dd2:	460d      	mov	r5, r1
 8010dd4:	ec45 4b10 	vmov	d0, r4, r5
 8010dd8:	4616      	mov	r6, r2
 8010dda:	f002 ff81 	bl	8013ce0 <__ulp>
 8010dde:	ec51 0b10 	vmov	r0, r1, d0
 8010de2:	b17e      	cbz	r6, 8010e04 <sulp+0x36>
 8010de4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010de8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	dd09      	ble.n	8010e04 <sulp+0x36>
 8010df0:	051b      	lsls	r3, r3, #20
 8010df2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010df6:	2400      	movs	r4, #0
 8010df8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010dfc:	4622      	mov	r2, r4
 8010dfe:	462b      	mov	r3, r5
 8010e00:	f7ef fc0a 	bl	8000618 <__aeabi_dmul>
 8010e04:	bd70      	pop	{r4, r5, r6, pc}
	...

08010e08 <_strtod_l>:
 8010e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e0c:	b0a3      	sub	sp, #140	; 0x8c
 8010e0e:	461f      	mov	r7, r3
 8010e10:	2300      	movs	r3, #0
 8010e12:	931e      	str	r3, [sp, #120]	; 0x78
 8010e14:	4ba4      	ldr	r3, [pc, #656]	; (80110a8 <_strtod_l+0x2a0>)
 8010e16:	9219      	str	r2, [sp, #100]	; 0x64
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	9307      	str	r3, [sp, #28]
 8010e1c:	4604      	mov	r4, r0
 8010e1e:	4618      	mov	r0, r3
 8010e20:	4688      	mov	r8, r1
 8010e22:	f7ef f9e5 	bl	80001f0 <strlen>
 8010e26:	f04f 0a00 	mov.w	sl, #0
 8010e2a:	4605      	mov	r5, r0
 8010e2c:	f04f 0b00 	mov.w	fp, #0
 8010e30:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010e34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010e36:	781a      	ldrb	r2, [r3, #0]
 8010e38:	2a2b      	cmp	r2, #43	; 0x2b
 8010e3a:	d04c      	beq.n	8010ed6 <_strtod_l+0xce>
 8010e3c:	d839      	bhi.n	8010eb2 <_strtod_l+0xaa>
 8010e3e:	2a0d      	cmp	r2, #13
 8010e40:	d832      	bhi.n	8010ea8 <_strtod_l+0xa0>
 8010e42:	2a08      	cmp	r2, #8
 8010e44:	d832      	bhi.n	8010eac <_strtod_l+0xa4>
 8010e46:	2a00      	cmp	r2, #0
 8010e48:	d03c      	beq.n	8010ec4 <_strtod_l+0xbc>
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	930e      	str	r3, [sp, #56]	; 0x38
 8010e4e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8010e50:	7833      	ldrb	r3, [r6, #0]
 8010e52:	2b30      	cmp	r3, #48	; 0x30
 8010e54:	f040 80b4 	bne.w	8010fc0 <_strtod_l+0x1b8>
 8010e58:	7873      	ldrb	r3, [r6, #1]
 8010e5a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010e5e:	2b58      	cmp	r3, #88	; 0x58
 8010e60:	d16c      	bne.n	8010f3c <_strtod_l+0x134>
 8010e62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010e64:	9301      	str	r3, [sp, #4]
 8010e66:	ab1e      	add	r3, sp, #120	; 0x78
 8010e68:	9702      	str	r7, [sp, #8]
 8010e6a:	9300      	str	r3, [sp, #0]
 8010e6c:	4a8f      	ldr	r2, [pc, #572]	; (80110ac <_strtod_l+0x2a4>)
 8010e6e:	ab1f      	add	r3, sp, #124	; 0x7c
 8010e70:	a91d      	add	r1, sp, #116	; 0x74
 8010e72:	4620      	mov	r0, r4
 8010e74:	f002 f81a 	bl	8012eac <__gethex>
 8010e78:	f010 0707 	ands.w	r7, r0, #7
 8010e7c:	4605      	mov	r5, r0
 8010e7e:	d005      	beq.n	8010e8c <_strtod_l+0x84>
 8010e80:	2f06      	cmp	r7, #6
 8010e82:	d12a      	bne.n	8010eda <_strtod_l+0xd2>
 8010e84:	3601      	adds	r6, #1
 8010e86:	2300      	movs	r3, #0
 8010e88:	961d      	str	r6, [sp, #116]	; 0x74
 8010e8a:	930e      	str	r3, [sp, #56]	; 0x38
 8010e8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	f040 8596 	bne.w	80119c0 <_strtod_l+0xbb8>
 8010e94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010e96:	b1db      	cbz	r3, 8010ed0 <_strtod_l+0xc8>
 8010e98:	4652      	mov	r2, sl
 8010e9a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010e9e:	ec43 2b10 	vmov	d0, r2, r3
 8010ea2:	b023      	add	sp, #140	; 0x8c
 8010ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ea8:	2a20      	cmp	r2, #32
 8010eaa:	d1ce      	bne.n	8010e4a <_strtod_l+0x42>
 8010eac:	3301      	adds	r3, #1
 8010eae:	931d      	str	r3, [sp, #116]	; 0x74
 8010eb0:	e7c0      	b.n	8010e34 <_strtod_l+0x2c>
 8010eb2:	2a2d      	cmp	r2, #45	; 0x2d
 8010eb4:	d1c9      	bne.n	8010e4a <_strtod_l+0x42>
 8010eb6:	2201      	movs	r2, #1
 8010eb8:	920e      	str	r2, [sp, #56]	; 0x38
 8010eba:	1c5a      	adds	r2, r3, #1
 8010ebc:	921d      	str	r2, [sp, #116]	; 0x74
 8010ebe:	785b      	ldrb	r3, [r3, #1]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d1c4      	bne.n	8010e4e <_strtod_l+0x46>
 8010ec4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010ec6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	f040 8576 	bne.w	80119bc <_strtod_l+0xbb4>
 8010ed0:	4652      	mov	r2, sl
 8010ed2:	465b      	mov	r3, fp
 8010ed4:	e7e3      	b.n	8010e9e <_strtod_l+0x96>
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	e7ee      	b.n	8010eb8 <_strtod_l+0xb0>
 8010eda:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010edc:	b13a      	cbz	r2, 8010eee <_strtod_l+0xe6>
 8010ede:	2135      	movs	r1, #53	; 0x35
 8010ee0:	a820      	add	r0, sp, #128	; 0x80
 8010ee2:	f003 f808 	bl	8013ef6 <__copybits>
 8010ee6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010ee8:	4620      	mov	r0, r4
 8010eea:	f002 fbcd 	bl	8013688 <_Bfree>
 8010eee:	3f01      	subs	r7, #1
 8010ef0:	2f05      	cmp	r7, #5
 8010ef2:	d807      	bhi.n	8010f04 <_strtod_l+0xfc>
 8010ef4:	e8df f007 	tbb	[pc, r7]
 8010ef8:	1d180b0e 	.word	0x1d180b0e
 8010efc:	030e      	.short	0x030e
 8010efe:	f04f 0b00 	mov.w	fp, #0
 8010f02:	46da      	mov	sl, fp
 8010f04:	0728      	lsls	r0, r5, #28
 8010f06:	d5c1      	bpl.n	8010e8c <_strtod_l+0x84>
 8010f08:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8010f0c:	e7be      	b.n	8010e8c <_strtod_l+0x84>
 8010f0e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8010f12:	e7f7      	b.n	8010f04 <_strtod_l+0xfc>
 8010f14:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8010f18:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010f1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010f1e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010f22:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010f26:	e7ed      	b.n	8010f04 <_strtod_l+0xfc>
 8010f28:	f8df b184 	ldr.w	fp, [pc, #388]	; 80110b0 <_strtod_l+0x2a8>
 8010f2c:	f04f 0a00 	mov.w	sl, #0
 8010f30:	e7e8      	b.n	8010f04 <_strtod_l+0xfc>
 8010f32:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8010f36:	f04f 3aff 	mov.w	sl, #4294967295
 8010f3a:	e7e3      	b.n	8010f04 <_strtod_l+0xfc>
 8010f3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010f3e:	1c5a      	adds	r2, r3, #1
 8010f40:	921d      	str	r2, [sp, #116]	; 0x74
 8010f42:	785b      	ldrb	r3, [r3, #1]
 8010f44:	2b30      	cmp	r3, #48	; 0x30
 8010f46:	d0f9      	beq.n	8010f3c <_strtod_l+0x134>
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d09f      	beq.n	8010e8c <_strtod_l+0x84>
 8010f4c:	2301      	movs	r3, #1
 8010f4e:	f04f 0900 	mov.w	r9, #0
 8010f52:	9304      	str	r3, [sp, #16]
 8010f54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010f56:	930a      	str	r3, [sp, #40]	; 0x28
 8010f58:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8010f5c:	464f      	mov	r7, r9
 8010f5e:	220a      	movs	r2, #10
 8010f60:	981d      	ldr	r0, [sp, #116]	; 0x74
 8010f62:	7806      	ldrb	r6, [r0, #0]
 8010f64:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8010f68:	b2d9      	uxtb	r1, r3
 8010f6a:	2909      	cmp	r1, #9
 8010f6c:	d92a      	bls.n	8010fc4 <_strtod_l+0x1bc>
 8010f6e:	9907      	ldr	r1, [sp, #28]
 8010f70:	462a      	mov	r2, r5
 8010f72:	f7ff ff1a 	bl	8010daa <strncmp>
 8010f76:	b398      	cbz	r0, 8010fe0 <_strtod_l+0x1d8>
 8010f78:	2000      	movs	r0, #0
 8010f7a:	4633      	mov	r3, r6
 8010f7c:	463d      	mov	r5, r7
 8010f7e:	9007      	str	r0, [sp, #28]
 8010f80:	4602      	mov	r2, r0
 8010f82:	2b65      	cmp	r3, #101	; 0x65
 8010f84:	d001      	beq.n	8010f8a <_strtod_l+0x182>
 8010f86:	2b45      	cmp	r3, #69	; 0x45
 8010f88:	d118      	bne.n	8010fbc <_strtod_l+0x1b4>
 8010f8a:	b91d      	cbnz	r5, 8010f94 <_strtod_l+0x18c>
 8010f8c:	9b04      	ldr	r3, [sp, #16]
 8010f8e:	4303      	orrs	r3, r0
 8010f90:	d098      	beq.n	8010ec4 <_strtod_l+0xbc>
 8010f92:	2500      	movs	r5, #0
 8010f94:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8010f98:	f108 0301 	add.w	r3, r8, #1
 8010f9c:	931d      	str	r3, [sp, #116]	; 0x74
 8010f9e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010fa2:	2b2b      	cmp	r3, #43	; 0x2b
 8010fa4:	d075      	beq.n	8011092 <_strtod_l+0x28a>
 8010fa6:	2b2d      	cmp	r3, #45	; 0x2d
 8010fa8:	d07b      	beq.n	80110a2 <_strtod_l+0x29a>
 8010faa:	f04f 0c00 	mov.w	ip, #0
 8010fae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8010fb2:	2909      	cmp	r1, #9
 8010fb4:	f240 8082 	bls.w	80110bc <_strtod_l+0x2b4>
 8010fb8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010fbc:	2600      	movs	r6, #0
 8010fbe:	e09d      	b.n	80110fc <_strtod_l+0x2f4>
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	e7c4      	b.n	8010f4e <_strtod_l+0x146>
 8010fc4:	2f08      	cmp	r7, #8
 8010fc6:	bfd8      	it	le
 8010fc8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8010fca:	f100 0001 	add.w	r0, r0, #1
 8010fce:	bfda      	itte	le
 8010fd0:	fb02 3301 	mlale	r3, r2, r1, r3
 8010fd4:	9309      	strle	r3, [sp, #36]	; 0x24
 8010fd6:	fb02 3909 	mlagt	r9, r2, r9, r3
 8010fda:	3701      	adds	r7, #1
 8010fdc:	901d      	str	r0, [sp, #116]	; 0x74
 8010fde:	e7bf      	b.n	8010f60 <_strtod_l+0x158>
 8010fe0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010fe2:	195a      	adds	r2, r3, r5
 8010fe4:	921d      	str	r2, [sp, #116]	; 0x74
 8010fe6:	5d5b      	ldrb	r3, [r3, r5]
 8010fe8:	2f00      	cmp	r7, #0
 8010fea:	d037      	beq.n	801105c <_strtod_l+0x254>
 8010fec:	9007      	str	r0, [sp, #28]
 8010fee:	463d      	mov	r5, r7
 8010ff0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8010ff4:	2a09      	cmp	r2, #9
 8010ff6:	d912      	bls.n	801101e <_strtod_l+0x216>
 8010ff8:	2201      	movs	r2, #1
 8010ffa:	e7c2      	b.n	8010f82 <_strtod_l+0x17a>
 8010ffc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010ffe:	1c5a      	adds	r2, r3, #1
 8011000:	921d      	str	r2, [sp, #116]	; 0x74
 8011002:	785b      	ldrb	r3, [r3, #1]
 8011004:	3001      	adds	r0, #1
 8011006:	2b30      	cmp	r3, #48	; 0x30
 8011008:	d0f8      	beq.n	8010ffc <_strtod_l+0x1f4>
 801100a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801100e:	2a08      	cmp	r2, #8
 8011010:	f200 84db 	bhi.w	80119ca <_strtod_l+0xbc2>
 8011014:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011016:	9007      	str	r0, [sp, #28]
 8011018:	2000      	movs	r0, #0
 801101a:	920a      	str	r2, [sp, #40]	; 0x28
 801101c:	4605      	mov	r5, r0
 801101e:	3b30      	subs	r3, #48	; 0x30
 8011020:	f100 0201 	add.w	r2, r0, #1
 8011024:	d014      	beq.n	8011050 <_strtod_l+0x248>
 8011026:	9907      	ldr	r1, [sp, #28]
 8011028:	4411      	add	r1, r2
 801102a:	9107      	str	r1, [sp, #28]
 801102c:	462a      	mov	r2, r5
 801102e:	eb00 0e05 	add.w	lr, r0, r5
 8011032:	210a      	movs	r1, #10
 8011034:	4572      	cmp	r2, lr
 8011036:	d113      	bne.n	8011060 <_strtod_l+0x258>
 8011038:	182a      	adds	r2, r5, r0
 801103a:	2a08      	cmp	r2, #8
 801103c:	f105 0501 	add.w	r5, r5, #1
 8011040:	4405      	add	r5, r0
 8011042:	dc1c      	bgt.n	801107e <_strtod_l+0x276>
 8011044:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011046:	220a      	movs	r2, #10
 8011048:	fb02 3301 	mla	r3, r2, r1, r3
 801104c:	9309      	str	r3, [sp, #36]	; 0x24
 801104e:	2200      	movs	r2, #0
 8011050:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011052:	1c59      	adds	r1, r3, #1
 8011054:	911d      	str	r1, [sp, #116]	; 0x74
 8011056:	785b      	ldrb	r3, [r3, #1]
 8011058:	4610      	mov	r0, r2
 801105a:	e7c9      	b.n	8010ff0 <_strtod_l+0x1e8>
 801105c:	4638      	mov	r0, r7
 801105e:	e7d2      	b.n	8011006 <_strtod_l+0x1fe>
 8011060:	2a08      	cmp	r2, #8
 8011062:	dc04      	bgt.n	801106e <_strtod_l+0x266>
 8011064:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8011066:	434e      	muls	r6, r1
 8011068:	9609      	str	r6, [sp, #36]	; 0x24
 801106a:	3201      	adds	r2, #1
 801106c:	e7e2      	b.n	8011034 <_strtod_l+0x22c>
 801106e:	f102 0c01 	add.w	ip, r2, #1
 8011072:	f1bc 0f10 	cmp.w	ip, #16
 8011076:	bfd8      	it	le
 8011078:	fb01 f909 	mulle.w	r9, r1, r9
 801107c:	e7f5      	b.n	801106a <_strtod_l+0x262>
 801107e:	2d10      	cmp	r5, #16
 8011080:	bfdc      	itt	le
 8011082:	220a      	movle	r2, #10
 8011084:	fb02 3909 	mlale	r9, r2, r9, r3
 8011088:	e7e1      	b.n	801104e <_strtod_l+0x246>
 801108a:	2300      	movs	r3, #0
 801108c:	9307      	str	r3, [sp, #28]
 801108e:	2201      	movs	r2, #1
 8011090:	e77c      	b.n	8010f8c <_strtod_l+0x184>
 8011092:	f04f 0c00 	mov.w	ip, #0
 8011096:	f108 0302 	add.w	r3, r8, #2
 801109a:	931d      	str	r3, [sp, #116]	; 0x74
 801109c:	f898 3002 	ldrb.w	r3, [r8, #2]
 80110a0:	e785      	b.n	8010fae <_strtod_l+0x1a6>
 80110a2:	f04f 0c01 	mov.w	ip, #1
 80110a6:	e7f6      	b.n	8011096 <_strtod_l+0x28e>
 80110a8:	080157c0 	.word	0x080157c0
 80110ac:	08015610 	.word	0x08015610
 80110b0:	7ff00000 	.word	0x7ff00000
 80110b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80110b6:	1c59      	adds	r1, r3, #1
 80110b8:	911d      	str	r1, [sp, #116]	; 0x74
 80110ba:	785b      	ldrb	r3, [r3, #1]
 80110bc:	2b30      	cmp	r3, #48	; 0x30
 80110be:	d0f9      	beq.n	80110b4 <_strtod_l+0x2ac>
 80110c0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80110c4:	2908      	cmp	r1, #8
 80110c6:	f63f af79 	bhi.w	8010fbc <_strtod_l+0x1b4>
 80110ca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80110ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80110d0:	9308      	str	r3, [sp, #32]
 80110d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80110d4:	1c59      	adds	r1, r3, #1
 80110d6:	911d      	str	r1, [sp, #116]	; 0x74
 80110d8:	785b      	ldrb	r3, [r3, #1]
 80110da:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80110de:	2e09      	cmp	r6, #9
 80110e0:	d937      	bls.n	8011152 <_strtod_l+0x34a>
 80110e2:	9e08      	ldr	r6, [sp, #32]
 80110e4:	1b89      	subs	r1, r1, r6
 80110e6:	2908      	cmp	r1, #8
 80110e8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80110ec:	dc02      	bgt.n	80110f4 <_strtod_l+0x2ec>
 80110ee:	4576      	cmp	r6, lr
 80110f0:	bfa8      	it	ge
 80110f2:	4676      	movge	r6, lr
 80110f4:	f1bc 0f00 	cmp.w	ip, #0
 80110f8:	d000      	beq.n	80110fc <_strtod_l+0x2f4>
 80110fa:	4276      	negs	r6, r6
 80110fc:	2d00      	cmp	r5, #0
 80110fe:	d14f      	bne.n	80111a0 <_strtod_l+0x398>
 8011100:	9904      	ldr	r1, [sp, #16]
 8011102:	4301      	orrs	r1, r0
 8011104:	f47f aec2 	bne.w	8010e8c <_strtod_l+0x84>
 8011108:	2a00      	cmp	r2, #0
 801110a:	f47f aedb 	bne.w	8010ec4 <_strtod_l+0xbc>
 801110e:	2b69      	cmp	r3, #105	; 0x69
 8011110:	d027      	beq.n	8011162 <_strtod_l+0x35a>
 8011112:	dc24      	bgt.n	801115e <_strtod_l+0x356>
 8011114:	2b49      	cmp	r3, #73	; 0x49
 8011116:	d024      	beq.n	8011162 <_strtod_l+0x35a>
 8011118:	2b4e      	cmp	r3, #78	; 0x4e
 801111a:	f47f aed3 	bne.w	8010ec4 <_strtod_l+0xbc>
 801111e:	499e      	ldr	r1, [pc, #632]	; (8011398 <_strtod_l+0x590>)
 8011120:	a81d      	add	r0, sp, #116	; 0x74
 8011122:	f002 f91b 	bl	801335c <__match>
 8011126:	2800      	cmp	r0, #0
 8011128:	f43f aecc 	beq.w	8010ec4 <_strtod_l+0xbc>
 801112c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801112e:	781b      	ldrb	r3, [r3, #0]
 8011130:	2b28      	cmp	r3, #40	; 0x28
 8011132:	d12d      	bne.n	8011190 <_strtod_l+0x388>
 8011134:	4999      	ldr	r1, [pc, #612]	; (801139c <_strtod_l+0x594>)
 8011136:	aa20      	add	r2, sp, #128	; 0x80
 8011138:	a81d      	add	r0, sp, #116	; 0x74
 801113a:	f002 f923 	bl	8013384 <__hexnan>
 801113e:	2805      	cmp	r0, #5
 8011140:	d126      	bne.n	8011190 <_strtod_l+0x388>
 8011142:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011144:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8011148:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801114c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011150:	e69c      	b.n	8010e8c <_strtod_l+0x84>
 8011152:	210a      	movs	r1, #10
 8011154:	fb01 3e0e 	mla	lr, r1, lr, r3
 8011158:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801115c:	e7b9      	b.n	80110d2 <_strtod_l+0x2ca>
 801115e:	2b6e      	cmp	r3, #110	; 0x6e
 8011160:	e7db      	b.n	801111a <_strtod_l+0x312>
 8011162:	498f      	ldr	r1, [pc, #572]	; (80113a0 <_strtod_l+0x598>)
 8011164:	a81d      	add	r0, sp, #116	; 0x74
 8011166:	f002 f8f9 	bl	801335c <__match>
 801116a:	2800      	cmp	r0, #0
 801116c:	f43f aeaa 	beq.w	8010ec4 <_strtod_l+0xbc>
 8011170:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011172:	498c      	ldr	r1, [pc, #560]	; (80113a4 <_strtod_l+0x59c>)
 8011174:	3b01      	subs	r3, #1
 8011176:	a81d      	add	r0, sp, #116	; 0x74
 8011178:	931d      	str	r3, [sp, #116]	; 0x74
 801117a:	f002 f8ef 	bl	801335c <__match>
 801117e:	b910      	cbnz	r0, 8011186 <_strtod_l+0x37e>
 8011180:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011182:	3301      	adds	r3, #1
 8011184:	931d      	str	r3, [sp, #116]	; 0x74
 8011186:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80113b4 <_strtod_l+0x5ac>
 801118a:	f04f 0a00 	mov.w	sl, #0
 801118e:	e67d      	b.n	8010e8c <_strtod_l+0x84>
 8011190:	4885      	ldr	r0, [pc, #532]	; (80113a8 <_strtod_l+0x5a0>)
 8011192:	f003 fd95 	bl	8014cc0 <nan>
 8011196:	ed8d 0b04 	vstr	d0, [sp, #16]
 801119a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801119e:	e675      	b.n	8010e8c <_strtod_l+0x84>
 80111a0:	9b07      	ldr	r3, [sp, #28]
 80111a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80111a4:	1af3      	subs	r3, r6, r3
 80111a6:	2f00      	cmp	r7, #0
 80111a8:	bf08      	it	eq
 80111aa:	462f      	moveq	r7, r5
 80111ac:	2d10      	cmp	r5, #16
 80111ae:	9308      	str	r3, [sp, #32]
 80111b0:	46a8      	mov	r8, r5
 80111b2:	bfa8      	it	ge
 80111b4:	f04f 0810 	movge.w	r8, #16
 80111b8:	f7ef f9b4 	bl	8000524 <__aeabi_ui2d>
 80111bc:	2d09      	cmp	r5, #9
 80111be:	4682      	mov	sl, r0
 80111c0:	468b      	mov	fp, r1
 80111c2:	dd13      	ble.n	80111ec <_strtod_l+0x3e4>
 80111c4:	4b79      	ldr	r3, [pc, #484]	; (80113ac <_strtod_l+0x5a4>)
 80111c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80111ca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80111ce:	f7ef fa23 	bl	8000618 <__aeabi_dmul>
 80111d2:	4682      	mov	sl, r0
 80111d4:	4648      	mov	r0, r9
 80111d6:	468b      	mov	fp, r1
 80111d8:	f7ef f9a4 	bl	8000524 <__aeabi_ui2d>
 80111dc:	4602      	mov	r2, r0
 80111de:	460b      	mov	r3, r1
 80111e0:	4650      	mov	r0, sl
 80111e2:	4659      	mov	r1, fp
 80111e4:	f7ef f862 	bl	80002ac <__adddf3>
 80111e8:	4682      	mov	sl, r0
 80111ea:	468b      	mov	fp, r1
 80111ec:	2d0f      	cmp	r5, #15
 80111ee:	dc38      	bgt.n	8011262 <_strtod_l+0x45a>
 80111f0:	9b08      	ldr	r3, [sp, #32]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	f43f ae4a 	beq.w	8010e8c <_strtod_l+0x84>
 80111f8:	dd24      	ble.n	8011244 <_strtod_l+0x43c>
 80111fa:	2b16      	cmp	r3, #22
 80111fc:	dc0b      	bgt.n	8011216 <_strtod_l+0x40e>
 80111fe:	4d6b      	ldr	r5, [pc, #428]	; (80113ac <_strtod_l+0x5a4>)
 8011200:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8011204:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011208:	4652      	mov	r2, sl
 801120a:	465b      	mov	r3, fp
 801120c:	f7ef fa04 	bl	8000618 <__aeabi_dmul>
 8011210:	4682      	mov	sl, r0
 8011212:	468b      	mov	fp, r1
 8011214:	e63a      	b.n	8010e8c <_strtod_l+0x84>
 8011216:	9a08      	ldr	r2, [sp, #32]
 8011218:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801121c:	4293      	cmp	r3, r2
 801121e:	db20      	blt.n	8011262 <_strtod_l+0x45a>
 8011220:	4c62      	ldr	r4, [pc, #392]	; (80113ac <_strtod_l+0x5a4>)
 8011222:	f1c5 050f 	rsb	r5, r5, #15
 8011226:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801122a:	4652      	mov	r2, sl
 801122c:	465b      	mov	r3, fp
 801122e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011232:	f7ef f9f1 	bl	8000618 <__aeabi_dmul>
 8011236:	9b08      	ldr	r3, [sp, #32]
 8011238:	1b5d      	subs	r5, r3, r5
 801123a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801123e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011242:	e7e3      	b.n	801120c <_strtod_l+0x404>
 8011244:	9b08      	ldr	r3, [sp, #32]
 8011246:	3316      	adds	r3, #22
 8011248:	db0b      	blt.n	8011262 <_strtod_l+0x45a>
 801124a:	9b07      	ldr	r3, [sp, #28]
 801124c:	4a57      	ldr	r2, [pc, #348]	; (80113ac <_strtod_l+0x5a4>)
 801124e:	1b9e      	subs	r6, r3, r6
 8011250:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8011254:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011258:	4650      	mov	r0, sl
 801125a:	4659      	mov	r1, fp
 801125c:	f7ef fb06 	bl	800086c <__aeabi_ddiv>
 8011260:	e7d6      	b.n	8011210 <_strtod_l+0x408>
 8011262:	9b08      	ldr	r3, [sp, #32]
 8011264:	eba5 0808 	sub.w	r8, r5, r8
 8011268:	4498      	add	r8, r3
 801126a:	f1b8 0f00 	cmp.w	r8, #0
 801126e:	dd71      	ble.n	8011354 <_strtod_l+0x54c>
 8011270:	f018 030f 	ands.w	r3, r8, #15
 8011274:	d00a      	beq.n	801128c <_strtod_l+0x484>
 8011276:	494d      	ldr	r1, [pc, #308]	; (80113ac <_strtod_l+0x5a4>)
 8011278:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801127c:	4652      	mov	r2, sl
 801127e:	465b      	mov	r3, fp
 8011280:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011284:	f7ef f9c8 	bl	8000618 <__aeabi_dmul>
 8011288:	4682      	mov	sl, r0
 801128a:	468b      	mov	fp, r1
 801128c:	f038 080f 	bics.w	r8, r8, #15
 8011290:	d04d      	beq.n	801132e <_strtod_l+0x526>
 8011292:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8011296:	dd22      	ble.n	80112de <_strtod_l+0x4d6>
 8011298:	2500      	movs	r5, #0
 801129a:	462e      	mov	r6, r5
 801129c:	9509      	str	r5, [sp, #36]	; 0x24
 801129e:	9507      	str	r5, [sp, #28]
 80112a0:	2322      	movs	r3, #34	; 0x22
 80112a2:	f8df b110 	ldr.w	fp, [pc, #272]	; 80113b4 <_strtod_l+0x5ac>
 80112a6:	6023      	str	r3, [r4, #0]
 80112a8:	f04f 0a00 	mov.w	sl, #0
 80112ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	f43f adec 	beq.w	8010e8c <_strtod_l+0x84>
 80112b4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80112b6:	4620      	mov	r0, r4
 80112b8:	f002 f9e6 	bl	8013688 <_Bfree>
 80112bc:	9907      	ldr	r1, [sp, #28]
 80112be:	4620      	mov	r0, r4
 80112c0:	f002 f9e2 	bl	8013688 <_Bfree>
 80112c4:	4631      	mov	r1, r6
 80112c6:	4620      	mov	r0, r4
 80112c8:	f002 f9de 	bl	8013688 <_Bfree>
 80112cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80112ce:	4620      	mov	r0, r4
 80112d0:	f002 f9da 	bl	8013688 <_Bfree>
 80112d4:	4629      	mov	r1, r5
 80112d6:	4620      	mov	r0, r4
 80112d8:	f002 f9d6 	bl	8013688 <_Bfree>
 80112dc:	e5d6      	b.n	8010e8c <_strtod_l+0x84>
 80112de:	2300      	movs	r3, #0
 80112e0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80112e4:	4650      	mov	r0, sl
 80112e6:	4659      	mov	r1, fp
 80112e8:	4699      	mov	r9, r3
 80112ea:	f1b8 0f01 	cmp.w	r8, #1
 80112ee:	dc21      	bgt.n	8011334 <_strtod_l+0x52c>
 80112f0:	b10b      	cbz	r3, 80112f6 <_strtod_l+0x4ee>
 80112f2:	4682      	mov	sl, r0
 80112f4:	468b      	mov	fp, r1
 80112f6:	4b2e      	ldr	r3, [pc, #184]	; (80113b0 <_strtod_l+0x5a8>)
 80112f8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80112fc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8011300:	4652      	mov	r2, sl
 8011302:	465b      	mov	r3, fp
 8011304:	e9d9 0100 	ldrd	r0, r1, [r9]
 8011308:	f7ef f986 	bl	8000618 <__aeabi_dmul>
 801130c:	4b29      	ldr	r3, [pc, #164]	; (80113b4 <_strtod_l+0x5ac>)
 801130e:	460a      	mov	r2, r1
 8011310:	400b      	ands	r3, r1
 8011312:	4929      	ldr	r1, [pc, #164]	; (80113b8 <_strtod_l+0x5b0>)
 8011314:	428b      	cmp	r3, r1
 8011316:	4682      	mov	sl, r0
 8011318:	d8be      	bhi.n	8011298 <_strtod_l+0x490>
 801131a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801131e:	428b      	cmp	r3, r1
 8011320:	bf86      	itte	hi
 8011322:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80113bc <_strtod_l+0x5b4>
 8011326:	f04f 3aff 	movhi.w	sl, #4294967295
 801132a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801132e:	2300      	movs	r3, #0
 8011330:	9304      	str	r3, [sp, #16]
 8011332:	e081      	b.n	8011438 <_strtod_l+0x630>
 8011334:	f018 0f01 	tst.w	r8, #1
 8011338:	d007      	beq.n	801134a <_strtod_l+0x542>
 801133a:	4b1d      	ldr	r3, [pc, #116]	; (80113b0 <_strtod_l+0x5a8>)
 801133c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8011340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011344:	f7ef f968 	bl	8000618 <__aeabi_dmul>
 8011348:	2301      	movs	r3, #1
 801134a:	f109 0901 	add.w	r9, r9, #1
 801134e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011352:	e7ca      	b.n	80112ea <_strtod_l+0x4e2>
 8011354:	d0eb      	beq.n	801132e <_strtod_l+0x526>
 8011356:	f1c8 0800 	rsb	r8, r8, #0
 801135a:	f018 020f 	ands.w	r2, r8, #15
 801135e:	d00a      	beq.n	8011376 <_strtod_l+0x56e>
 8011360:	4b12      	ldr	r3, [pc, #72]	; (80113ac <_strtod_l+0x5a4>)
 8011362:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011366:	4650      	mov	r0, sl
 8011368:	4659      	mov	r1, fp
 801136a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801136e:	f7ef fa7d 	bl	800086c <__aeabi_ddiv>
 8011372:	4682      	mov	sl, r0
 8011374:	468b      	mov	fp, r1
 8011376:	ea5f 1828 	movs.w	r8, r8, asr #4
 801137a:	d0d8      	beq.n	801132e <_strtod_l+0x526>
 801137c:	f1b8 0f1f 	cmp.w	r8, #31
 8011380:	dd1e      	ble.n	80113c0 <_strtod_l+0x5b8>
 8011382:	2500      	movs	r5, #0
 8011384:	462e      	mov	r6, r5
 8011386:	9509      	str	r5, [sp, #36]	; 0x24
 8011388:	9507      	str	r5, [sp, #28]
 801138a:	2322      	movs	r3, #34	; 0x22
 801138c:	f04f 0a00 	mov.w	sl, #0
 8011390:	f04f 0b00 	mov.w	fp, #0
 8011394:	6023      	str	r3, [r4, #0]
 8011396:	e789      	b.n	80112ac <_strtod_l+0x4a4>
 8011398:	080155e5 	.word	0x080155e5
 801139c:	08015624 	.word	0x08015624
 80113a0:	080155dd 	.word	0x080155dd
 80113a4:	08015663 	.word	0x08015663
 80113a8:	0801599b 	.word	0x0801599b
 80113ac:	08015860 	.word	0x08015860
 80113b0:	08015838 	.word	0x08015838
 80113b4:	7ff00000 	.word	0x7ff00000
 80113b8:	7ca00000 	.word	0x7ca00000
 80113bc:	7fefffff 	.word	0x7fefffff
 80113c0:	f018 0310 	ands.w	r3, r8, #16
 80113c4:	bf18      	it	ne
 80113c6:	236a      	movne	r3, #106	; 0x6a
 80113c8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8011780 <_strtod_l+0x978>
 80113cc:	9304      	str	r3, [sp, #16]
 80113ce:	4650      	mov	r0, sl
 80113d0:	4659      	mov	r1, fp
 80113d2:	2300      	movs	r3, #0
 80113d4:	f018 0f01 	tst.w	r8, #1
 80113d8:	d004      	beq.n	80113e4 <_strtod_l+0x5dc>
 80113da:	e9d9 2300 	ldrd	r2, r3, [r9]
 80113de:	f7ef f91b 	bl	8000618 <__aeabi_dmul>
 80113e2:	2301      	movs	r3, #1
 80113e4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80113e8:	f109 0908 	add.w	r9, r9, #8
 80113ec:	d1f2      	bne.n	80113d4 <_strtod_l+0x5cc>
 80113ee:	b10b      	cbz	r3, 80113f4 <_strtod_l+0x5ec>
 80113f0:	4682      	mov	sl, r0
 80113f2:	468b      	mov	fp, r1
 80113f4:	9b04      	ldr	r3, [sp, #16]
 80113f6:	b1bb      	cbz	r3, 8011428 <_strtod_l+0x620>
 80113f8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80113fc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011400:	2b00      	cmp	r3, #0
 8011402:	4659      	mov	r1, fp
 8011404:	dd10      	ble.n	8011428 <_strtod_l+0x620>
 8011406:	2b1f      	cmp	r3, #31
 8011408:	f340 8128 	ble.w	801165c <_strtod_l+0x854>
 801140c:	2b34      	cmp	r3, #52	; 0x34
 801140e:	bfde      	ittt	le
 8011410:	3b20      	suble	r3, #32
 8011412:	f04f 32ff 	movle.w	r2, #4294967295
 8011416:	fa02 f303 	lslle.w	r3, r2, r3
 801141a:	f04f 0a00 	mov.w	sl, #0
 801141e:	bfcc      	ite	gt
 8011420:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011424:	ea03 0b01 	andle.w	fp, r3, r1
 8011428:	2200      	movs	r2, #0
 801142a:	2300      	movs	r3, #0
 801142c:	4650      	mov	r0, sl
 801142e:	4659      	mov	r1, fp
 8011430:	f7ef fb5a 	bl	8000ae8 <__aeabi_dcmpeq>
 8011434:	2800      	cmp	r0, #0
 8011436:	d1a4      	bne.n	8011382 <_strtod_l+0x57a>
 8011438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801143a:	9300      	str	r3, [sp, #0]
 801143c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801143e:	462b      	mov	r3, r5
 8011440:	463a      	mov	r2, r7
 8011442:	4620      	mov	r0, r4
 8011444:	f002 f98c 	bl	8013760 <__s2b>
 8011448:	9009      	str	r0, [sp, #36]	; 0x24
 801144a:	2800      	cmp	r0, #0
 801144c:	f43f af24 	beq.w	8011298 <_strtod_l+0x490>
 8011450:	9b07      	ldr	r3, [sp, #28]
 8011452:	1b9e      	subs	r6, r3, r6
 8011454:	9b08      	ldr	r3, [sp, #32]
 8011456:	2b00      	cmp	r3, #0
 8011458:	bfb4      	ite	lt
 801145a:	4633      	movlt	r3, r6
 801145c:	2300      	movge	r3, #0
 801145e:	9310      	str	r3, [sp, #64]	; 0x40
 8011460:	9b08      	ldr	r3, [sp, #32]
 8011462:	2500      	movs	r5, #0
 8011464:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011468:	9318      	str	r3, [sp, #96]	; 0x60
 801146a:	462e      	mov	r6, r5
 801146c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801146e:	4620      	mov	r0, r4
 8011470:	6859      	ldr	r1, [r3, #4]
 8011472:	f002 f8c9 	bl	8013608 <_Balloc>
 8011476:	9007      	str	r0, [sp, #28]
 8011478:	2800      	cmp	r0, #0
 801147a:	f43f af11 	beq.w	80112a0 <_strtod_l+0x498>
 801147e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011480:	691a      	ldr	r2, [r3, #16]
 8011482:	3202      	adds	r2, #2
 8011484:	f103 010c 	add.w	r1, r3, #12
 8011488:	0092      	lsls	r2, r2, #2
 801148a:	300c      	adds	r0, #12
 801148c:	f002 f8ae 	bl	80135ec <memcpy>
 8011490:	ec4b ab10 	vmov	d0, sl, fp
 8011494:	aa20      	add	r2, sp, #128	; 0x80
 8011496:	a91f      	add	r1, sp, #124	; 0x7c
 8011498:	4620      	mov	r0, r4
 801149a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801149e:	f002 fc9b 	bl	8013dd8 <__d2b>
 80114a2:	901e      	str	r0, [sp, #120]	; 0x78
 80114a4:	2800      	cmp	r0, #0
 80114a6:	f43f aefb 	beq.w	80112a0 <_strtod_l+0x498>
 80114aa:	2101      	movs	r1, #1
 80114ac:	4620      	mov	r0, r4
 80114ae:	f002 f9f1 	bl	8013894 <__i2b>
 80114b2:	4606      	mov	r6, r0
 80114b4:	2800      	cmp	r0, #0
 80114b6:	f43f aef3 	beq.w	80112a0 <_strtod_l+0x498>
 80114ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80114bc:	9904      	ldr	r1, [sp, #16]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	bfab      	itete	ge
 80114c2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80114c4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80114c6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80114c8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80114cc:	bfac      	ite	ge
 80114ce:	eb03 0902 	addge.w	r9, r3, r2
 80114d2:	1ad7      	sublt	r7, r2, r3
 80114d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80114d6:	eba3 0801 	sub.w	r8, r3, r1
 80114da:	4490      	add	r8, r2
 80114dc:	4ba3      	ldr	r3, [pc, #652]	; (801176c <_strtod_l+0x964>)
 80114de:	f108 38ff 	add.w	r8, r8, #4294967295
 80114e2:	4598      	cmp	r8, r3
 80114e4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80114e8:	f280 80cc 	bge.w	8011684 <_strtod_l+0x87c>
 80114ec:	eba3 0308 	sub.w	r3, r3, r8
 80114f0:	2b1f      	cmp	r3, #31
 80114f2:	eba2 0203 	sub.w	r2, r2, r3
 80114f6:	f04f 0101 	mov.w	r1, #1
 80114fa:	f300 80b6 	bgt.w	801166a <_strtod_l+0x862>
 80114fe:	fa01 f303 	lsl.w	r3, r1, r3
 8011502:	9311      	str	r3, [sp, #68]	; 0x44
 8011504:	2300      	movs	r3, #0
 8011506:	930c      	str	r3, [sp, #48]	; 0x30
 8011508:	eb09 0802 	add.w	r8, r9, r2
 801150c:	9b04      	ldr	r3, [sp, #16]
 801150e:	45c1      	cmp	r9, r8
 8011510:	4417      	add	r7, r2
 8011512:	441f      	add	r7, r3
 8011514:	464b      	mov	r3, r9
 8011516:	bfa8      	it	ge
 8011518:	4643      	movge	r3, r8
 801151a:	42bb      	cmp	r3, r7
 801151c:	bfa8      	it	ge
 801151e:	463b      	movge	r3, r7
 8011520:	2b00      	cmp	r3, #0
 8011522:	bfc2      	ittt	gt
 8011524:	eba8 0803 	subgt.w	r8, r8, r3
 8011528:	1aff      	subgt	r7, r7, r3
 801152a:	eba9 0903 	subgt.w	r9, r9, r3
 801152e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011530:	2b00      	cmp	r3, #0
 8011532:	dd17      	ble.n	8011564 <_strtod_l+0x75c>
 8011534:	4631      	mov	r1, r6
 8011536:	461a      	mov	r2, r3
 8011538:	4620      	mov	r0, r4
 801153a:	f002 fa67 	bl	8013a0c <__pow5mult>
 801153e:	4606      	mov	r6, r0
 8011540:	2800      	cmp	r0, #0
 8011542:	f43f aead 	beq.w	80112a0 <_strtod_l+0x498>
 8011546:	4601      	mov	r1, r0
 8011548:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801154a:	4620      	mov	r0, r4
 801154c:	f002 f9b8 	bl	80138c0 <__multiply>
 8011550:	900f      	str	r0, [sp, #60]	; 0x3c
 8011552:	2800      	cmp	r0, #0
 8011554:	f43f aea4 	beq.w	80112a0 <_strtod_l+0x498>
 8011558:	991e      	ldr	r1, [sp, #120]	; 0x78
 801155a:	4620      	mov	r0, r4
 801155c:	f002 f894 	bl	8013688 <_Bfree>
 8011560:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011562:	931e      	str	r3, [sp, #120]	; 0x78
 8011564:	f1b8 0f00 	cmp.w	r8, #0
 8011568:	f300 8091 	bgt.w	801168e <_strtod_l+0x886>
 801156c:	9b08      	ldr	r3, [sp, #32]
 801156e:	2b00      	cmp	r3, #0
 8011570:	dd08      	ble.n	8011584 <_strtod_l+0x77c>
 8011572:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011574:	9907      	ldr	r1, [sp, #28]
 8011576:	4620      	mov	r0, r4
 8011578:	f002 fa48 	bl	8013a0c <__pow5mult>
 801157c:	9007      	str	r0, [sp, #28]
 801157e:	2800      	cmp	r0, #0
 8011580:	f43f ae8e 	beq.w	80112a0 <_strtod_l+0x498>
 8011584:	2f00      	cmp	r7, #0
 8011586:	dd08      	ble.n	801159a <_strtod_l+0x792>
 8011588:	9907      	ldr	r1, [sp, #28]
 801158a:	463a      	mov	r2, r7
 801158c:	4620      	mov	r0, r4
 801158e:	f002 fa97 	bl	8013ac0 <__lshift>
 8011592:	9007      	str	r0, [sp, #28]
 8011594:	2800      	cmp	r0, #0
 8011596:	f43f ae83 	beq.w	80112a0 <_strtod_l+0x498>
 801159a:	f1b9 0f00 	cmp.w	r9, #0
 801159e:	dd08      	ble.n	80115b2 <_strtod_l+0x7aa>
 80115a0:	4631      	mov	r1, r6
 80115a2:	464a      	mov	r2, r9
 80115a4:	4620      	mov	r0, r4
 80115a6:	f002 fa8b 	bl	8013ac0 <__lshift>
 80115aa:	4606      	mov	r6, r0
 80115ac:	2800      	cmp	r0, #0
 80115ae:	f43f ae77 	beq.w	80112a0 <_strtod_l+0x498>
 80115b2:	9a07      	ldr	r2, [sp, #28]
 80115b4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80115b6:	4620      	mov	r0, r4
 80115b8:	f002 fb0a 	bl	8013bd0 <__mdiff>
 80115bc:	4605      	mov	r5, r0
 80115be:	2800      	cmp	r0, #0
 80115c0:	f43f ae6e 	beq.w	80112a0 <_strtod_l+0x498>
 80115c4:	68c3      	ldr	r3, [r0, #12]
 80115c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80115c8:	2300      	movs	r3, #0
 80115ca:	60c3      	str	r3, [r0, #12]
 80115cc:	4631      	mov	r1, r6
 80115ce:	f002 fae3 	bl	8013b98 <__mcmp>
 80115d2:	2800      	cmp	r0, #0
 80115d4:	da65      	bge.n	80116a2 <_strtod_l+0x89a>
 80115d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80115d8:	ea53 030a 	orrs.w	r3, r3, sl
 80115dc:	f040 8087 	bne.w	80116ee <_strtod_l+0x8e6>
 80115e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	f040 8082 	bne.w	80116ee <_strtod_l+0x8e6>
 80115ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80115ee:	0d1b      	lsrs	r3, r3, #20
 80115f0:	051b      	lsls	r3, r3, #20
 80115f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80115f6:	d97a      	bls.n	80116ee <_strtod_l+0x8e6>
 80115f8:	696b      	ldr	r3, [r5, #20]
 80115fa:	b913      	cbnz	r3, 8011602 <_strtod_l+0x7fa>
 80115fc:	692b      	ldr	r3, [r5, #16]
 80115fe:	2b01      	cmp	r3, #1
 8011600:	dd75      	ble.n	80116ee <_strtod_l+0x8e6>
 8011602:	4629      	mov	r1, r5
 8011604:	2201      	movs	r2, #1
 8011606:	4620      	mov	r0, r4
 8011608:	f002 fa5a 	bl	8013ac0 <__lshift>
 801160c:	4631      	mov	r1, r6
 801160e:	4605      	mov	r5, r0
 8011610:	f002 fac2 	bl	8013b98 <__mcmp>
 8011614:	2800      	cmp	r0, #0
 8011616:	dd6a      	ble.n	80116ee <_strtod_l+0x8e6>
 8011618:	9904      	ldr	r1, [sp, #16]
 801161a:	4a55      	ldr	r2, [pc, #340]	; (8011770 <_strtod_l+0x968>)
 801161c:	465b      	mov	r3, fp
 801161e:	2900      	cmp	r1, #0
 8011620:	f000 8085 	beq.w	801172e <_strtod_l+0x926>
 8011624:	ea02 010b 	and.w	r1, r2, fp
 8011628:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801162c:	dc7f      	bgt.n	801172e <_strtod_l+0x926>
 801162e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011632:	f77f aeaa 	ble.w	801138a <_strtod_l+0x582>
 8011636:	4a4f      	ldr	r2, [pc, #316]	; (8011774 <_strtod_l+0x96c>)
 8011638:	2300      	movs	r3, #0
 801163a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801163e:	4650      	mov	r0, sl
 8011640:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8011644:	4659      	mov	r1, fp
 8011646:	f7ee ffe7 	bl	8000618 <__aeabi_dmul>
 801164a:	460b      	mov	r3, r1
 801164c:	4303      	orrs	r3, r0
 801164e:	bf08      	it	eq
 8011650:	2322      	moveq	r3, #34	; 0x22
 8011652:	4682      	mov	sl, r0
 8011654:	468b      	mov	fp, r1
 8011656:	bf08      	it	eq
 8011658:	6023      	streq	r3, [r4, #0]
 801165a:	e62b      	b.n	80112b4 <_strtod_l+0x4ac>
 801165c:	f04f 32ff 	mov.w	r2, #4294967295
 8011660:	fa02 f303 	lsl.w	r3, r2, r3
 8011664:	ea03 0a0a 	and.w	sl, r3, sl
 8011668:	e6de      	b.n	8011428 <_strtod_l+0x620>
 801166a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801166e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8011672:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8011676:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801167a:	fa01 f308 	lsl.w	r3, r1, r8
 801167e:	930c      	str	r3, [sp, #48]	; 0x30
 8011680:	9111      	str	r1, [sp, #68]	; 0x44
 8011682:	e741      	b.n	8011508 <_strtod_l+0x700>
 8011684:	2300      	movs	r3, #0
 8011686:	930c      	str	r3, [sp, #48]	; 0x30
 8011688:	2301      	movs	r3, #1
 801168a:	9311      	str	r3, [sp, #68]	; 0x44
 801168c:	e73c      	b.n	8011508 <_strtod_l+0x700>
 801168e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011690:	4642      	mov	r2, r8
 8011692:	4620      	mov	r0, r4
 8011694:	f002 fa14 	bl	8013ac0 <__lshift>
 8011698:	901e      	str	r0, [sp, #120]	; 0x78
 801169a:	2800      	cmp	r0, #0
 801169c:	f47f af66 	bne.w	801156c <_strtod_l+0x764>
 80116a0:	e5fe      	b.n	80112a0 <_strtod_l+0x498>
 80116a2:	465f      	mov	r7, fp
 80116a4:	d16e      	bne.n	8011784 <_strtod_l+0x97c>
 80116a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80116a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80116ac:	b342      	cbz	r2, 8011700 <_strtod_l+0x8f8>
 80116ae:	4a32      	ldr	r2, [pc, #200]	; (8011778 <_strtod_l+0x970>)
 80116b0:	4293      	cmp	r3, r2
 80116b2:	d128      	bne.n	8011706 <_strtod_l+0x8fe>
 80116b4:	9b04      	ldr	r3, [sp, #16]
 80116b6:	4650      	mov	r0, sl
 80116b8:	b1eb      	cbz	r3, 80116f6 <_strtod_l+0x8ee>
 80116ba:	4a2d      	ldr	r2, [pc, #180]	; (8011770 <_strtod_l+0x968>)
 80116bc:	403a      	ands	r2, r7
 80116be:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80116c2:	f04f 31ff 	mov.w	r1, #4294967295
 80116c6:	d819      	bhi.n	80116fc <_strtod_l+0x8f4>
 80116c8:	0d12      	lsrs	r2, r2, #20
 80116ca:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80116ce:	fa01 f303 	lsl.w	r3, r1, r3
 80116d2:	4298      	cmp	r0, r3
 80116d4:	d117      	bne.n	8011706 <_strtod_l+0x8fe>
 80116d6:	4b29      	ldr	r3, [pc, #164]	; (801177c <_strtod_l+0x974>)
 80116d8:	429f      	cmp	r7, r3
 80116da:	d102      	bne.n	80116e2 <_strtod_l+0x8da>
 80116dc:	3001      	adds	r0, #1
 80116de:	f43f addf 	beq.w	80112a0 <_strtod_l+0x498>
 80116e2:	4b23      	ldr	r3, [pc, #140]	; (8011770 <_strtod_l+0x968>)
 80116e4:	403b      	ands	r3, r7
 80116e6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80116ea:	f04f 0a00 	mov.w	sl, #0
 80116ee:	9b04      	ldr	r3, [sp, #16]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d1a0      	bne.n	8011636 <_strtod_l+0x82e>
 80116f4:	e5de      	b.n	80112b4 <_strtod_l+0x4ac>
 80116f6:	f04f 33ff 	mov.w	r3, #4294967295
 80116fa:	e7ea      	b.n	80116d2 <_strtod_l+0x8ca>
 80116fc:	460b      	mov	r3, r1
 80116fe:	e7e8      	b.n	80116d2 <_strtod_l+0x8ca>
 8011700:	ea53 030a 	orrs.w	r3, r3, sl
 8011704:	d088      	beq.n	8011618 <_strtod_l+0x810>
 8011706:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011708:	b1db      	cbz	r3, 8011742 <_strtod_l+0x93a>
 801170a:	423b      	tst	r3, r7
 801170c:	d0ef      	beq.n	80116ee <_strtod_l+0x8e6>
 801170e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011710:	9a04      	ldr	r2, [sp, #16]
 8011712:	4650      	mov	r0, sl
 8011714:	4659      	mov	r1, fp
 8011716:	b1c3      	cbz	r3, 801174a <_strtod_l+0x942>
 8011718:	f7ff fb59 	bl	8010dce <sulp>
 801171c:	4602      	mov	r2, r0
 801171e:	460b      	mov	r3, r1
 8011720:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011724:	f7ee fdc2 	bl	80002ac <__adddf3>
 8011728:	4682      	mov	sl, r0
 801172a:	468b      	mov	fp, r1
 801172c:	e7df      	b.n	80116ee <_strtod_l+0x8e6>
 801172e:	4013      	ands	r3, r2
 8011730:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011734:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011738:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801173c:	f04f 3aff 	mov.w	sl, #4294967295
 8011740:	e7d5      	b.n	80116ee <_strtod_l+0x8e6>
 8011742:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011744:	ea13 0f0a 	tst.w	r3, sl
 8011748:	e7e0      	b.n	801170c <_strtod_l+0x904>
 801174a:	f7ff fb40 	bl	8010dce <sulp>
 801174e:	4602      	mov	r2, r0
 8011750:	460b      	mov	r3, r1
 8011752:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011756:	f7ee fda7 	bl	80002a8 <__aeabi_dsub>
 801175a:	2200      	movs	r2, #0
 801175c:	2300      	movs	r3, #0
 801175e:	4682      	mov	sl, r0
 8011760:	468b      	mov	fp, r1
 8011762:	f7ef f9c1 	bl	8000ae8 <__aeabi_dcmpeq>
 8011766:	2800      	cmp	r0, #0
 8011768:	d0c1      	beq.n	80116ee <_strtod_l+0x8e6>
 801176a:	e60e      	b.n	801138a <_strtod_l+0x582>
 801176c:	fffffc02 	.word	0xfffffc02
 8011770:	7ff00000 	.word	0x7ff00000
 8011774:	39500000 	.word	0x39500000
 8011778:	000fffff 	.word	0x000fffff
 801177c:	7fefffff 	.word	0x7fefffff
 8011780:	08015638 	.word	0x08015638
 8011784:	4631      	mov	r1, r6
 8011786:	4628      	mov	r0, r5
 8011788:	f002 fb82 	bl	8013e90 <__ratio>
 801178c:	ec59 8b10 	vmov	r8, r9, d0
 8011790:	ee10 0a10 	vmov	r0, s0
 8011794:	2200      	movs	r2, #0
 8011796:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801179a:	4649      	mov	r1, r9
 801179c:	f7ef f9b8 	bl	8000b10 <__aeabi_dcmple>
 80117a0:	2800      	cmp	r0, #0
 80117a2:	d07c      	beq.n	801189e <_strtod_l+0xa96>
 80117a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d04c      	beq.n	8011844 <_strtod_l+0xa3c>
 80117aa:	4b95      	ldr	r3, [pc, #596]	; (8011a00 <_strtod_l+0xbf8>)
 80117ac:	2200      	movs	r2, #0
 80117ae:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80117b2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8011a00 <_strtod_l+0xbf8>
 80117b6:	f04f 0800 	mov.w	r8, #0
 80117ba:	4b92      	ldr	r3, [pc, #584]	; (8011a04 <_strtod_l+0xbfc>)
 80117bc:	403b      	ands	r3, r7
 80117be:	9311      	str	r3, [sp, #68]	; 0x44
 80117c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80117c2:	4b91      	ldr	r3, [pc, #580]	; (8011a08 <_strtod_l+0xc00>)
 80117c4:	429a      	cmp	r2, r3
 80117c6:	f040 80b2 	bne.w	801192e <_strtod_l+0xb26>
 80117ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80117ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80117d2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80117d6:	ec4b ab10 	vmov	d0, sl, fp
 80117da:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80117de:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80117e2:	f002 fa7d 	bl	8013ce0 <__ulp>
 80117e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80117ea:	ec53 2b10 	vmov	r2, r3, d0
 80117ee:	f7ee ff13 	bl	8000618 <__aeabi_dmul>
 80117f2:	4652      	mov	r2, sl
 80117f4:	465b      	mov	r3, fp
 80117f6:	f7ee fd59 	bl	80002ac <__adddf3>
 80117fa:	460b      	mov	r3, r1
 80117fc:	4981      	ldr	r1, [pc, #516]	; (8011a04 <_strtod_l+0xbfc>)
 80117fe:	4a83      	ldr	r2, [pc, #524]	; (8011a0c <_strtod_l+0xc04>)
 8011800:	4019      	ands	r1, r3
 8011802:	4291      	cmp	r1, r2
 8011804:	4682      	mov	sl, r0
 8011806:	d95e      	bls.n	80118c6 <_strtod_l+0xabe>
 8011808:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801180a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801180e:	4293      	cmp	r3, r2
 8011810:	d103      	bne.n	801181a <_strtod_l+0xa12>
 8011812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011814:	3301      	adds	r3, #1
 8011816:	f43f ad43 	beq.w	80112a0 <_strtod_l+0x498>
 801181a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8011a18 <_strtod_l+0xc10>
 801181e:	f04f 3aff 	mov.w	sl, #4294967295
 8011822:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011824:	4620      	mov	r0, r4
 8011826:	f001 ff2f 	bl	8013688 <_Bfree>
 801182a:	9907      	ldr	r1, [sp, #28]
 801182c:	4620      	mov	r0, r4
 801182e:	f001 ff2b 	bl	8013688 <_Bfree>
 8011832:	4631      	mov	r1, r6
 8011834:	4620      	mov	r0, r4
 8011836:	f001 ff27 	bl	8013688 <_Bfree>
 801183a:	4629      	mov	r1, r5
 801183c:	4620      	mov	r0, r4
 801183e:	f001 ff23 	bl	8013688 <_Bfree>
 8011842:	e613      	b.n	801146c <_strtod_l+0x664>
 8011844:	f1ba 0f00 	cmp.w	sl, #0
 8011848:	d11b      	bne.n	8011882 <_strtod_l+0xa7a>
 801184a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801184e:	b9f3      	cbnz	r3, 801188e <_strtod_l+0xa86>
 8011850:	4b6b      	ldr	r3, [pc, #428]	; (8011a00 <_strtod_l+0xbf8>)
 8011852:	2200      	movs	r2, #0
 8011854:	4640      	mov	r0, r8
 8011856:	4649      	mov	r1, r9
 8011858:	f7ef f950 	bl	8000afc <__aeabi_dcmplt>
 801185c:	b9d0      	cbnz	r0, 8011894 <_strtod_l+0xa8c>
 801185e:	4640      	mov	r0, r8
 8011860:	4649      	mov	r1, r9
 8011862:	4b6b      	ldr	r3, [pc, #428]	; (8011a10 <_strtod_l+0xc08>)
 8011864:	2200      	movs	r2, #0
 8011866:	f7ee fed7 	bl	8000618 <__aeabi_dmul>
 801186a:	4680      	mov	r8, r0
 801186c:	4689      	mov	r9, r1
 801186e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011872:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8011876:	931b      	str	r3, [sp, #108]	; 0x6c
 8011878:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801187c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011880:	e79b      	b.n	80117ba <_strtod_l+0x9b2>
 8011882:	f1ba 0f01 	cmp.w	sl, #1
 8011886:	d102      	bne.n	801188e <_strtod_l+0xa86>
 8011888:	2f00      	cmp	r7, #0
 801188a:	f43f ad7e 	beq.w	801138a <_strtod_l+0x582>
 801188e:	4b61      	ldr	r3, [pc, #388]	; (8011a14 <_strtod_l+0xc0c>)
 8011890:	2200      	movs	r2, #0
 8011892:	e78c      	b.n	80117ae <_strtod_l+0x9a6>
 8011894:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8011a10 <_strtod_l+0xc08>
 8011898:	f04f 0800 	mov.w	r8, #0
 801189c:	e7e7      	b.n	801186e <_strtod_l+0xa66>
 801189e:	4b5c      	ldr	r3, [pc, #368]	; (8011a10 <_strtod_l+0xc08>)
 80118a0:	4640      	mov	r0, r8
 80118a2:	4649      	mov	r1, r9
 80118a4:	2200      	movs	r2, #0
 80118a6:	f7ee feb7 	bl	8000618 <__aeabi_dmul>
 80118aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80118ac:	4680      	mov	r8, r0
 80118ae:	4689      	mov	r9, r1
 80118b0:	b933      	cbnz	r3, 80118c0 <_strtod_l+0xab8>
 80118b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80118b6:	9012      	str	r0, [sp, #72]	; 0x48
 80118b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80118ba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80118be:	e7dd      	b.n	801187c <_strtod_l+0xa74>
 80118c0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80118c4:	e7f9      	b.n	80118ba <_strtod_l+0xab2>
 80118c6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80118ca:	9b04      	ldr	r3, [sp, #16]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d1a8      	bne.n	8011822 <_strtod_l+0xa1a>
 80118d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80118d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80118d6:	0d1b      	lsrs	r3, r3, #20
 80118d8:	051b      	lsls	r3, r3, #20
 80118da:	429a      	cmp	r2, r3
 80118dc:	d1a1      	bne.n	8011822 <_strtod_l+0xa1a>
 80118de:	4640      	mov	r0, r8
 80118e0:	4649      	mov	r1, r9
 80118e2:	f7ef f9f9 	bl	8000cd8 <__aeabi_d2lz>
 80118e6:	f7ee fe69 	bl	80005bc <__aeabi_l2d>
 80118ea:	4602      	mov	r2, r0
 80118ec:	460b      	mov	r3, r1
 80118ee:	4640      	mov	r0, r8
 80118f0:	4649      	mov	r1, r9
 80118f2:	f7ee fcd9 	bl	80002a8 <__aeabi_dsub>
 80118f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80118f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80118fc:	ea43 030a 	orr.w	r3, r3, sl
 8011900:	4313      	orrs	r3, r2
 8011902:	4680      	mov	r8, r0
 8011904:	4689      	mov	r9, r1
 8011906:	d053      	beq.n	80119b0 <_strtod_l+0xba8>
 8011908:	a335      	add	r3, pc, #212	; (adr r3, 80119e0 <_strtod_l+0xbd8>)
 801190a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801190e:	f7ef f8f5 	bl	8000afc <__aeabi_dcmplt>
 8011912:	2800      	cmp	r0, #0
 8011914:	f47f acce 	bne.w	80112b4 <_strtod_l+0x4ac>
 8011918:	a333      	add	r3, pc, #204	; (adr r3, 80119e8 <_strtod_l+0xbe0>)
 801191a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801191e:	4640      	mov	r0, r8
 8011920:	4649      	mov	r1, r9
 8011922:	f7ef f909 	bl	8000b38 <__aeabi_dcmpgt>
 8011926:	2800      	cmp	r0, #0
 8011928:	f43f af7b 	beq.w	8011822 <_strtod_l+0xa1a>
 801192c:	e4c2      	b.n	80112b4 <_strtod_l+0x4ac>
 801192e:	9b04      	ldr	r3, [sp, #16]
 8011930:	b333      	cbz	r3, 8011980 <_strtod_l+0xb78>
 8011932:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011934:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011938:	d822      	bhi.n	8011980 <_strtod_l+0xb78>
 801193a:	a32d      	add	r3, pc, #180	; (adr r3, 80119f0 <_strtod_l+0xbe8>)
 801193c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011940:	4640      	mov	r0, r8
 8011942:	4649      	mov	r1, r9
 8011944:	f7ef f8e4 	bl	8000b10 <__aeabi_dcmple>
 8011948:	b1a0      	cbz	r0, 8011974 <_strtod_l+0xb6c>
 801194a:	4649      	mov	r1, r9
 801194c:	4640      	mov	r0, r8
 801194e:	f7ef f93b 	bl	8000bc8 <__aeabi_d2uiz>
 8011952:	2801      	cmp	r0, #1
 8011954:	bf38      	it	cc
 8011956:	2001      	movcc	r0, #1
 8011958:	f7ee fde4 	bl	8000524 <__aeabi_ui2d>
 801195c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801195e:	4680      	mov	r8, r0
 8011960:	4689      	mov	r9, r1
 8011962:	bb13      	cbnz	r3, 80119aa <_strtod_l+0xba2>
 8011964:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011968:	9014      	str	r0, [sp, #80]	; 0x50
 801196a:	9315      	str	r3, [sp, #84]	; 0x54
 801196c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011970:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011974:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011976:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011978:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801197c:	1a9b      	subs	r3, r3, r2
 801197e:	930d      	str	r3, [sp, #52]	; 0x34
 8011980:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011984:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011988:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801198c:	f002 f9a8 	bl	8013ce0 <__ulp>
 8011990:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011994:	ec53 2b10 	vmov	r2, r3, d0
 8011998:	f7ee fe3e 	bl	8000618 <__aeabi_dmul>
 801199c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80119a0:	f7ee fc84 	bl	80002ac <__adddf3>
 80119a4:	4682      	mov	sl, r0
 80119a6:	468b      	mov	fp, r1
 80119a8:	e78f      	b.n	80118ca <_strtod_l+0xac2>
 80119aa:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80119ae:	e7dd      	b.n	801196c <_strtod_l+0xb64>
 80119b0:	a311      	add	r3, pc, #68	; (adr r3, 80119f8 <_strtod_l+0xbf0>)
 80119b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119b6:	f7ef f8a1 	bl	8000afc <__aeabi_dcmplt>
 80119ba:	e7b4      	b.n	8011926 <_strtod_l+0xb1e>
 80119bc:	2300      	movs	r3, #0
 80119be:	930e      	str	r3, [sp, #56]	; 0x38
 80119c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80119c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80119c4:	6013      	str	r3, [r2, #0]
 80119c6:	f7ff ba65 	b.w	8010e94 <_strtod_l+0x8c>
 80119ca:	2b65      	cmp	r3, #101	; 0x65
 80119cc:	f43f ab5d 	beq.w	801108a <_strtod_l+0x282>
 80119d0:	2b45      	cmp	r3, #69	; 0x45
 80119d2:	f43f ab5a 	beq.w	801108a <_strtod_l+0x282>
 80119d6:	2201      	movs	r2, #1
 80119d8:	f7ff bb92 	b.w	8011100 <_strtod_l+0x2f8>
 80119dc:	f3af 8000 	nop.w
 80119e0:	94a03595 	.word	0x94a03595
 80119e4:	3fdfffff 	.word	0x3fdfffff
 80119e8:	35afe535 	.word	0x35afe535
 80119ec:	3fe00000 	.word	0x3fe00000
 80119f0:	ffc00000 	.word	0xffc00000
 80119f4:	41dfffff 	.word	0x41dfffff
 80119f8:	94a03595 	.word	0x94a03595
 80119fc:	3fcfffff 	.word	0x3fcfffff
 8011a00:	3ff00000 	.word	0x3ff00000
 8011a04:	7ff00000 	.word	0x7ff00000
 8011a08:	7fe00000 	.word	0x7fe00000
 8011a0c:	7c9fffff 	.word	0x7c9fffff
 8011a10:	3fe00000 	.word	0x3fe00000
 8011a14:	bff00000 	.word	0xbff00000
 8011a18:	7fefffff 	.word	0x7fefffff

08011a1c <_strtod_r>:
 8011a1c:	4b01      	ldr	r3, [pc, #4]	; (8011a24 <_strtod_r+0x8>)
 8011a1e:	f7ff b9f3 	b.w	8010e08 <_strtod_l>
 8011a22:	bf00      	nop
 8011a24:	20000200 	.word	0x20000200

08011a28 <_strtol_l.isra.0>:
 8011a28:	2b01      	cmp	r3, #1
 8011a2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a2e:	d001      	beq.n	8011a34 <_strtol_l.isra.0+0xc>
 8011a30:	2b24      	cmp	r3, #36	; 0x24
 8011a32:	d906      	bls.n	8011a42 <_strtol_l.isra.0+0x1a>
 8011a34:	f7fe fa6e 	bl	800ff14 <__errno>
 8011a38:	2316      	movs	r3, #22
 8011a3a:	6003      	str	r3, [r0, #0]
 8011a3c:	2000      	movs	r0, #0
 8011a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a42:	4f3a      	ldr	r7, [pc, #232]	; (8011b2c <_strtol_l.isra.0+0x104>)
 8011a44:	468e      	mov	lr, r1
 8011a46:	4676      	mov	r6, lr
 8011a48:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011a4c:	5de5      	ldrb	r5, [r4, r7]
 8011a4e:	f015 0508 	ands.w	r5, r5, #8
 8011a52:	d1f8      	bne.n	8011a46 <_strtol_l.isra.0+0x1e>
 8011a54:	2c2d      	cmp	r4, #45	; 0x2d
 8011a56:	d134      	bne.n	8011ac2 <_strtol_l.isra.0+0x9a>
 8011a58:	f89e 4000 	ldrb.w	r4, [lr]
 8011a5c:	f04f 0801 	mov.w	r8, #1
 8011a60:	f106 0e02 	add.w	lr, r6, #2
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d05c      	beq.n	8011b22 <_strtol_l.isra.0+0xfa>
 8011a68:	2b10      	cmp	r3, #16
 8011a6a:	d10c      	bne.n	8011a86 <_strtol_l.isra.0+0x5e>
 8011a6c:	2c30      	cmp	r4, #48	; 0x30
 8011a6e:	d10a      	bne.n	8011a86 <_strtol_l.isra.0+0x5e>
 8011a70:	f89e 4000 	ldrb.w	r4, [lr]
 8011a74:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011a78:	2c58      	cmp	r4, #88	; 0x58
 8011a7a:	d14d      	bne.n	8011b18 <_strtol_l.isra.0+0xf0>
 8011a7c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8011a80:	2310      	movs	r3, #16
 8011a82:	f10e 0e02 	add.w	lr, lr, #2
 8011a86:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8011a8a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011a8e:	2600      	movs	r6, #0
 8011a90:	fbbc f9f3 	udiv	r9, ip, r3
 8011a94:	4635      	mov	r5, r6
 8011a96:	fb03 ca19 	mls	sl, r3, r9, ip
 8011a9a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8011a9e:	2f09      	cmp	r7, #9
 8011aa0:	d818      	bhi.n	8011ad4 <_strtol_l.isra.0+0xac>
 8011aa2:	463c      	mov	r4, r7
 8011aa4:	42a3      	cmp	r3, r4
 8011aa6:	dd24      	ble.n	8011af2 <_strtol_l.isra.0+0xca>
 8011aa8:	2e00      	cmp	r6, #0
 8011aaa:	db1f      	blt.n	8011aec <_strtol_l.isra.0+0xc4>
 8011aac:	45a9      	cmp	r9, r5
 8011aae:	d31d      	bcc.n	8011aec <_strtol_l.isra.0+0xc4>
 8011ab0:	d101      	bne.n	8011ab6 <_strtol_l.isra.0+0x8e>
 8011ab2:	45a2      	cmp	sl, r4
 8011ab4:	db1a      	blt.n	8011aec <_strtol_l.isra.0+0xc4>
 8011ab6:	fb05 4503 	mla	r5, r5, r3, r4
 8011aba:	2601      	movs	r6, #1
 8011abc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011ac0:	e7eb      	b.n	8011a9a <_strtol_l.isra.0+0x72>
 8011ac2:	2c2b      	cmp	r4, #43	; 0x2b
 8011ac4:	bf08      	it	eq
 8011ac6:	f89e 4000 	ldrbeq.w	r4, [lr]
 8011aca:	46a8      	mov	r8, r5
 8011acc:	bf08      	it	eq
 8011ace:	f106 0e02 	addeq.w	lr, r6, #2
 8011ad2:	e7c7      	b.n	8011a64 <_strtol_l.isra.0+0x3c>
 8011ad4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8011ad8:	2f19      	cmp	r7, #25
 8011ada:	d801      	bhi.n	8011ae0 <_strtol_l.isra.0+0xb8>
 8011adc:	3c37      	subs	r4, #55	; 0x37
 8011ade:	e7e1      	b.n	8011aa4 <_strtol_l.isra.0+0x7c>
 8011ae0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8011ae4:	2f19      	cmp	r7, #25
 8011ae6:	d804      	bhi.n	8011af2 <_strtol_l.isra.0+0xca>
 8011ae8:	3c57      	subs	r4, #87	; 0x57
 8011aea:	e7db      	b.n	8011aa4 <_strtol_l.isra.0+0x7c>
 8011aec:	f04f 36ff 	mov.w	r6, #4294967295
 8011af0:	e7e4      	b.n	8011abc <_strtol_l.isra.0+0x94>
 8011af2:	2e00      	cmp	r6, #0
 8011af4:	da05      	bge.n	8011b02 <_strtol_l.isra.0+0xda>
 8011af6:	2322      	movs	r3, #34	; 0x22
 8011af8:	6003      	str	r3, [r0, #0]
 8011afa:	4665      	mov	r5, ip
 8011afc:	b942      	cbnz	r2, 8011b10 <_strtol_l.isra.0+0xe8>
 8011afe:	4628      	mov	r0, r5
 8011b00:	e79d      	b.n	8011a3e <_strtol_l.isra.0+0x16>
 8011b02:	f1b8 0f00 	cmp.w	r8, #0
 8011b06:	d000      	beq.n	8011b0a <_strtol_l.isra.0+0xe2>
 8011b08:	426d      	negs	r5, r5
 8011b0a:	2a00      	cmp	r2, #0
 8011b0c:	d0f7      	beq.n	8011afe <_strtol_l.isra.0+0xd6>
 8011b0e:	b10e      	cbz	r6, 8011b14 <_strtol_l.isra.0+0xec>
 8011b10:	f10e 31ff 	add.w	r1, lr, #4294967295
 8011b14:	6011      	str	r1, [r2, #0]
 8011b16:	e7f2      	b.n	8011afe <_strtol_l.isra.0+0xd6>
 8011b18:	2430      	movs	r4, #48	; 0x30
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d1b3      	bne.n	8011a86 <_strtol_l.isra.0+0x5e>
 8011b1e:	2308      	movs	r3, #8
 8011b20:	e7b1      	b.n	8011a86 <_strtol_l.isra.0+0x5e>
 8011b22:	2c30      	cmp	r4, #48	; 0x30
 8011b24:	d0a4      	beq.n	8011a70 <_strtol_l.isra.0+0x48>
 8011b26:	230a      	movs	r3, #10
 8011b28:	e7ad      	b.n	8011a86 <_strtol_l.isra.0+0x5e>
 8011b2a:	bf00      	nop
 8011b2c:	080154d1 	.word	0x080154d1

08011b30 <_strtol_r>:
 8011b30:	f7ff bf7a 	b.w	8011a28 <_strtol_l.isra.0>

08011b34 <strtol>:
 8011b34:	4613      	mov	r3, r2
 8011b36:	460a      	mov	r2, r1
 8011b38:	4601      	mov	r1, r0
 8011b3a:	4802      	ldr	r0, [pc, #8]	; (8011b44 <strtol+0x10>)
 8011b3c:	6800      	ldr	r0, [r0, #0]
 8011b3e:	f7ff bf73 	b.w	8011a28 <_strtol_l.isra.0>
 8011b42:	bf00      	nop
 8011b44:	20000198 	.word	0x20000198

08011b48 <_vsniprintf_r>:
 8011b48:	b530      	push	{r4, r5, lr}
 8011b4a:	1e14      	subs	r4, r2, #0
 8011b4c:	4605      	mov	r5, r0
 8011b4e:	b09b      	sub	sp, #108	; 0x6c
 8011b50:	4618      	mov	r0, r3
 8011b52:	da05      	bge.n	8011b60 <_vsniprintf_r+0x18>
 8011b54:	238b      	movs	r3, #139	; 0x8b
 8011b56:	602b      	str	r3, [r5, #0]
 8011b58:	f04f 30ff 	mov.w	r0, #4294967295
 8011b5c:	b01b      	add	sp, #108	; 0x6c
 8011b5e:	bd30      	pop	{r4, r5, pc}
 8011b60:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011b64:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011b68:	bf14      	ite	ne
 8011b6a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011b6e:	4623      	moveq	r3, r4
 8011b70:	9302      	str	r3, [sp, #8]
 8011b72:	9305      	str	r3, [sp, #20]
 8011b74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011b78:	9100      	str	r1, [sp, #0]
 8011b7a:	9104      	str	r1, [sp, #16]
 8011b7c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011b80:	4602      	mov	r2, r0
 8011b82:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011b84:	4669      	mov	r1, sp
 8011b86:	4628      	mov	r0, r5
 8011b88:	f002 fb0e 	bl	80141a8 <_svfiprintf_r>
 8011b8c:	1c43      	adds	r3, r0, #1
 8011b8e:	bfbc      	itt	lt
 8011b90:	238b      	movlt	r3, #139	; 0x8b
 8011b92:	602b      	strlt	r3, [r5, #0]
 8011b94:	2c00      	cmp	r4, #0
 8011b96:	d0e1      	beq.n	8011b5c <_vsniprintf_r+0x14>
 8011b98:	9b00      	ldr	r3, [sp, #0]
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	701a      	strb	r2, [r3, #0]
 8011b9e:	e7dd      	b.n	8011b5c <_vsniprintf_r+0x14>

08011ba0 <vsniprintf>:
 8011ba0:	b507      	push	{r0, r1, r2, lr}
 8011ba2:	9300      	str	r3, [sp, #0]
 8011ba4:	4613      	mov	r3, r2
 8011ba6:	460a      	mov	r2, r1
 8011ba8:	4601      	mov	r1, r0
 8011baa:	4803      	ldr	r0, [pc, #12]	; (8011bb8 <vsniprintf+0x18>)
 8011bac:	6800      	ldr	r0, [r0, #0]
 8011bae:	f7ff ffcb 	bl	8011b48 <_vsniprintf_r>
 8011bb2:	b003      	add	sp, #12
 8011bb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8011bb8:	20000198 	.word	0x20000198

08011bbc <__swbuf_r>:
 8011bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bbe:	460e      	mov	r6, r1
 8011bc0:	4614      	mov	r4, r2
 8011bc2:	4605      	mov	r5, r0
 8011bc4:	b118      	cbz	r0, 8011bce <__swbuf_r+0x12>
 8011bc6:	6983      	ldr	r3, [r0, #24]
 8011bc8:	b90b      	cbnz	r3, 8011bce <__swbuf_r+0x12>
 8011bca:	f001 f86b 	bl	8012ca4 <__sinit>
 8011bce:	4b21      	ldr	r3, [pc, #132]	; (8011c54 <__swbuf_r+0x98>)
 8011bd0:	429c      	cmp	r4, r3
 8011bd2:	d12b      	bne.n	8011c2c <__swbuf_r+0x70>
 8011bd4:	686c      	ldr	r4, [r5, #4]
 8011bd6:	69a3      	ldr	r3, [r4, #24]
 8011bd8:	60a3      	str	r3, [r4, #8]
 8011bda:	89a3      	ldrh	r3, [r4, #12]
 8011bdc:	071a      	lsls	r2, r3, #28
 8011bde:	d52f      	bpl.n	8011c40 <__swbuf_r+0x84>
 8011be0:	6923      	ldr	r3, [r4, #16]
 8011be2:	b36b      	cbz	r3, 8011c40 <__swbuf_r+0x84>
 8011be4:	6923      	ldr	r3, [r4, #16]
 8011be6:	6820      	ldr	r0, [r4, #0]
 8011be8:	1ac0      	subs	r0, r0, r3
 8011bea:	6963      	ldr	r3, [r4, #20]
 8011bec:	b2f6      	uxtb	r6, r6
 8011bee:	4283      	cmp	r3, r0
 8011bf0:	4637      	mov	r7, r6
 8011bf2:	dc04      	bgt.n	8011bfe <__swbuf_r+0x42>
 8011bf4:	4621      	mov	r1, r4
 8011bf6:	4628      	mov	r0, r5
 8011bf8:	f000 ffc0 	bl	8012b7c <_fflush_r>
 8011bfc:	bb30      	cbnz	r0, 8011c4c <__swbuf_r+0x90>
 8011bfe:	68a3      	ldr	r3, [r4, #8]
 8011c00:	3b01      	subs	r3, #1
 8011c02:	60a3      	str	r3, [r4, #8]
 8011c04:	6823      	ldr	r3, [r4, #0]
 8011c06:	1c5a      	adds	r2, r3, #1
 8011c08:	6022      	str	r2, [r4, #0]
 8011c0a:	701e      	strb	r6, [r3, #0]
 8011c0c:	6963      	ldr	r3, [r4, #20]
 8011c0e:	3001      	adds	r0, #1
 8011c10:	4283      	cmp	r3, r0
 8011c12:	d004      	beq.n	8011c1e <__swbuf_r+0x62>
 8011c14:	89a3      	ldrh	r3, [r4, #12]
 8011c16:	07db      	lsls	r3, r3, #31
 8011c18:	d506      	bpl.n	8011c28 <__swbuf_r+0x6c>
 8011c1a:	2e0a      	cmp	r6, #10
 8011c1c:	d104      	bne.n	8011c28 <__swbuf_r+0x6c>
 8011c1e:	4621      	mov	r1, r4
 8011c20:	4628      	mov	r0, r5
 8011c22:	f000 ffab 	bl	8012b7c <_fflush_r>
 8011c26:	b988      	cbnz	r0, 8011c4c <__swbuf_r+0x90>
 8011c28:	4638      	mov	r0, r7
 8011c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c2c:	4b0a      	ldr	r3, [pc, #40]	; (8011c58 <__swbuf_r+0x9c>)
 8011c2e:	429c      	cmp	r4, r3
 8011c30:	d101      	bne.n	8011c36 <__swbuf_r+0x7a>
 8011c32:	68ac      	ldr	r4, [r5, #8]
 8011c34:	e7cf      	b.n	8011bd6 <__swbuf_r+0x1a>
 8011c36:	4b09      	ldr	r3, [pc, #36]	; (8011c5c <__swbuf_r+0xa0>)
 8011c38:	429c      	cmp	r4, r3
 8011c3a:	bf08      	it	eq
 8011c3c:	68ec      	ldreq	r4, [r5, #12]
 8011c3e:	e7ca      	b.n	8011bd6 <__swbuf_r+0x1a>
 8011c40:	4621      	mov	r1, r4
 8011c42:	4628      	mov	r0, r5
 8011c44:	f000 f81e 	bl	8011c84 <__swsetup_r>
 8011c48:	2800      	cmp	r0, #0
 8011c4a:	d0cb      	beq.n	8011be4 <__swbuf_r+0x28>
 8011c4c:	f04f 37ff 	mov.w	r7, #4294967295
 8011c50:	e7ea      	b.n	8011c28 <__swbuf_r+0x6c>
 8011c52:	bf00      	nop
 8011c54:	08015714 	.word	0x08015714
 8011c58:	08015734 	.word	0x08015734
 8011c5c:	080156f4 	.word	0x080156f4

08011c60 <_write_r>:
 8011c60:	b538      	push	{r3, r4, r5, lr}
 8011c62:	4d07      	ldr	r5, [pc, #28]	; (8011c80 <_write_r+0x20>)
 8011c64:	4604      	mov	r4, r0
 8011c66:	4608      	mov	r0, r1
 8011c68:	4611      	mov	r1, r2
 8011c6a:	2200      	movs	r2, #0
 8011c6c:	602a      	str	r2, [r5, #0]
 8011c6e:	461a      	mov	r2, r3
 8011c70:	f7f1 fddf 	bl	8003832 <_write>
 8011c74:	1c43      	adds	r3, r0, #1
 8011c76:	d102      	bne.n	8011c7e <_write_r+0x1e>
 8011c78:	682b      	ldr	r3, [r5, #0]
 8011c7a:	b103      	cbz	r3, 8011c7e <_write_r+0x1e>
 8011c7c:	6023      	str	r3, [r4, #0]
 8011c7e:	bd38      	pop	{r3, r4, r5, pc}
 8011c80:	20003670 	.word	0x20003670

08011c84 <__swsetup_r>:
 8011c84:	4b32      	ldr	r3, [pc, #200]	; (8011d50 <__swsetup_r+0xcc>)
 8011c86:	b570      	push	{r4, r5, r6, lr}
 8011c88:	681d      	ldr	r5, [r3, #0]
 8011c8a:	4606      	mov	r6, r0
 8011c8c:	460c      	mov	r4, r1
 8011c8e:	b125      	cbz	r5, 8011c9a <__swsetup_r+0x16>
 8011c90:	69ab      	ldr	r3, [r5, #24]
 8011c92:	b913      	cbnz	r3, 8011c9a <__swsetup_r+0x16>
 8011c94:	4628      	mov	r0, r5
 8011c96:	f001 f805 	bl	8012ca4 <__sinit>
 8011c9a:	4b2e      	ldr	r3, [pc, #184]	; (8011d54 <__swsetup_r+0xd0>)
 8011c9c:	429c      	cmp	r4, r3
 8011c9e:	d10f      	bne.n	8011cc0 <__swsetup_r+0x3c>
 8011ca0:	686c      	ldr	r4, [r5, #4]
 8011ca2:	89a3      	ldrh	r3, [r4, #12]
 8011ca4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011ca8:	0719      	lsls	r1, r3, #28
 8011caa:	d42c      	bmi.n	8011d06 <__swsetup_r+0x82>
 8011cac:	06dd      	lsls	r5, r3, #27
 8011cae:	d411      	bmi.n	8011cd4 <__swsetup_r+0x50>
 8011cb0:	2309      	movs	r3, #9
 8011cb2:	6033      	str	r3, [r6, #0]
 8011cb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011cb8:	81a3      	strh	r3, [r4, #12]
 8011cba:	f04f 30ff 	mov.w	r0, #4294967295
 8011cbe:	e03e      	b.n	8011d3e <__swsetup_r+0xba>
 8011cc0:	4b25      	ldr	r3, [pc, #148]	; (8011d58 <__swsetup_r+0xd4>)
 8011cc2:	429c      	cmp	r4, r3
 8011cc4:	d101      	bne.n	8011cca <__swsetup_r+0x46>
 8011cc6:	68ac      	ldr	r4, [r5, #8]
 8011cc8:	e7eb      	b.n	8011ca2 <__swsetup_r+0x1e>
 8011cca:	4b24      	ldr	r3, [pc, #144]	; (8011d5c <__swsetup_r+0xd8>)
 8011ccc:	429c      	cmp	r4, r3
 8011cce:	bf08      	it	eq
 8011cd0:	68ec      	ldreq	r4, [r5, #12]
 8011cd2:	e7e6      	b.n	8011ca2 <__swsetup_r+0x1e>
 8011cd4:	0758      	lsls	r0, r3, #29
 8011cd6:	d512      	bpl.n	8011cfe <__swsetup_r+0x7a>
 8011cd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011cda:	b141      	cbz	r1, 8011cee <__swsetup_r+0x6a>
 8011cdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011ce0:	4299      	cmp	r1, r3
 8011ce2:	d002      	beq.n	8011cea <__swsetup_r+0x66>
 8011ce4:	4630      	mov	r0, r6
 8011ce6:	f002 f959 	bl	8013f9c <_free_r>
 8011cea:	2300      	movs	r3, #0
 8011cec:	6363      	str	r3, [r4, #52]	; 0x34
 8011cee:	89a3      	ldrh	r3, [r4, #12]
 8011cf0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011cf4:	81a3      	strh	r3, [r4, #12]
 8011cf6:	2300      	movs	r3, #0
 8011cf8:	6063      	str	r3, [r4, #4]
 8011cfa:	6923      	ldr	r3, [r4, #16]
 8011cfc:	6023      	str	r3, [r4, #0]
 8011cfe:	89a3      	ldrh	r3, [r4, #12]
 8011d00:	f043 0308 	orr.w	r3, r3, #8
 8011d04:	81a3      	strh	r3, [r4, #12]
 8011d06:	6923      	ldr	r3, [r4, #16]
 8011d08:	b94b      	cbnz	r3, 8011d1e <__swsetup_r+0x9a>
 8011d0a:	89a3      	ldrh	r3, [r4, #12]
 8011d0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011d14:	d003      	beq.n	8011d1e <__swsetup_r+0x9a>
 8011d16:	4621      	mov	r1, r4
 8011d18:	4630      	mov	r0, r6
 8011d1a:	f001 fc0d 	bl	8013538 <__smakebuf_r>
 8011d1e:	89a0      	ldrh	r0, [r4, #12]
 8011d20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011d24:	f010 0301 	ands.w	r3, r0, #1
 8011d28:	d00a      	beq.n	8011d40 <__swsetup_r+0xbc>
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	60a3      	str	r3, [r4, #8]
 8011d2e:	6963      	ldr	r3, [r4, #20]
 8011d30:	425b      	negs	r3, r3
 8011d32:	61a3      	str	r3, [r4, #24]
 8011d34:	6923      	ldr	r3, [r4, #16]
 8011d36:	b943      	cbnz	r3, 8011d4a <__swsetup_r+0xc6>
 8011d38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011d3c:	d1ba      	bne.n	8011cb4 <__swsetup_r+0x30>
 8011d3e:	bd70      	pop	{r4, r5, r6, pc}
 8011d40:	0781      	lsls	r1, r0, #30
 8011d42:	bf58      	it	pl
 8011d44:	6963      	ldrpl	r3, [r4, #20]
 8011d46:	60a3      	str	r3, [r4, #8]
 8011d48:	e7f4      	b.n	8011d34 <__swsetup_r+0xb0>
 8011d4a:	2000      	movs	r0, #0
 8011d4c:	e7f7      	b.n	8011d3e <__swsetup_r+0xba>
 8011d4e:	bf00      	nop
 8011d50:	20000198 	.word	0x20000198
 8011d54:	08015714 	.word	0x08015714
 8011d58:	08015734 	.word	0x08015734
 8011d5c:	080156f4 	.word	0x080156f4

08011d60 <_close_r>:
 8011d60:	b538      	push	{r3, r4, r5, lr}
 8011d62:	4d06      	ldr	r5, [pc, #24]	; (8011d7c <_close_r+0x1c>)
 8011d64:	2300      	movs	r3, #0
 8011d66:	4604      	mov	r4, r0
 8011d68:	4608      	mov	r0, r1
 8011d6a:	602b      	str	r3, [r5, #0]
 8011d6c:	f7f1 fd7d 	bl	800386a <_close>
 8011d70:	1c43      	adds	r3, r0, #1
 8011d72:	d102      	bne.n	8011d7a <_close_r+0x1a>
 8011d74:	682b      	ldr	r3, [r5, #0]
 8011d76:	b103      	cbz	r3, 8011d7a <_close_r+0x1a>
 8011d78:	6023      	str	r3, [r4, #0]
 8011d7a:	bd38      	pop	{r3, r4, r5, pc}
 8011d7c:	20003670 	.word	0x20003670

08011d80 <quorem>:
 8011d80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d84:	6903      	ldr	r3, [r0, #16]
 8011d86:	690c      	ldr	r4, [r1, #16]
 8011d88:	42a3      	cmp	r3, r4
 8011d8a:	4607      	mov	r7, r0
 8011d8c:	f2c0 8081 	blt.w	8011e92 <quorem+0x112>
 8011d90:	3c01      	subs	r4, #1
 8011d92:	f101 0814 	add.w	r8, r1, #20
 8011d96:	f100 0514 	add.w	r5, r0, #20
 8011d9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011d9e:	9301      	str	r3, [sp, #4]
 8011da0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011da4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011da8:	3301      	adds	r3, #1
 8011daa:	429a      	cmp	r2, r3
 8011dac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011db0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011db4:	fbb2 f6f3 	udiv	r6, r2, r3
 8011db8:	d331      	bcc.n	8011e1e <quorem+0x9e>
 8011dba:	f04f 0e00 	mov.w	lr, #0
 8011dbe:	4640      	mov	r0, r8
 8011dc0:	46ac      	mov	ip, r5
 8011dc2:	46f2      	mov	sl, lr
 8011dc4:	f850 2b04 	ldr.w	r2, [r0], #4
 8011dc8:	b293      	uxth	r3, r2
 8011dca:	fb06 e303 	mla	r3, r6, r3, lr
 8011dce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011dd2:	b29b      	uxth	r3, r3
 8011dd4:	ebaa 0303 	sub.w	r3, sl, r3
 8011dd8:	0c12      	lsrs	r2, r2, #16
 8011dda:	f8dc a000 	ldr.w	sl, [ip]
 8011dde:	fb06 e202 	mla	r2, r6, r2, lr
 8011de2:	fa13 f38a 	uxtah	r3, r3, sl
 8011de6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011dea:	fa1f fa82 	uxth.w	sl, r2
 8011dee:	f8dc 2000 	ldr.w	r2, [ip]
 8011df2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8011df6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011dfa:	b29b      	uxth	r3, r3
 8011dfc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011e00:	4581      	cmp	r9, r0
 8011e02:	f84c 3b04 	str.w	r3, [ip], #4
 8011e06:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011e0a:	d2db      	bcs.n	8011dc4 <quorem+0x44>
 8011e0c:	f855 300b 	ldr.w	r3, [r5, fp]
 8011e10:	b92b      	cbnz	r3, 8011e1e <quorem+0x9e>
 8011e12:	9b01      	ldr	r3, [sp, #4]
 8011e14:	3b04      	subs	r3, #4
 8011e16:	429d      	cmp	r5, r3
 8011e18:	461a      	mov	r2, r3
 8011e1a:	d32e      	bcc.n	8011e7a <quorem+0xfa>
 8011e1c:	613c      	str	r4, [r7, #16]
 8011e1e:	4638      	mov	r0, r7
 8011e20:	f001 feba 	bl	8013b98 <__mcmp>
 8011e24:	2800      	cmp	r0, #0
 8011e26:	db24      	blt.n	8011e72 <quorem+0xf2>
 8011e28:	3601      	adds	r6, #1
 8011e2a:	4628      	mov	r0, r5
 8011e2c:	f04f 0c00 	mov.w	ip, #0
 8011e30:	f858 2b04 	ldr.w	r2, [r8], #4
 8011e34:	f8d0 e000 	ldr.w	lr, [r0]
 8011e38:	b293      	uxth	r3, r2
 8011e3a:	ebac 0303 	sub.w	r3, ip, r3
 8011e3e:	0c12      	lsrs	r2, r2, #16
 8011e40:	fa13 f38e 	uxtah	r3, r3, lr
 8011e44:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011e48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011e4c:	b29b      	uxth	r3, r3
 8011e4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011e52:	45c1      	cmp	r9, r8
 8011e54:	f840 3b04 	str.w	r3, [r0], #4
 8011e58:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011e5c:	d2e8      	bcs.n	8011e30 <quorem+0xb0>
 8011e5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011e62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011e66:	b922      	cbnz	r2, 8011e72 <quorem+0xf2>
 8011e68:	3b04      	subs	r3, #4
 8011e6a:	429d      	cmp	r5, r3
 8011e6c:	461a      	mov	r2, r3
 8011e6e:	d30a      	bcc.n	8011e86 <quorem+0x106>
 8011e70:	613c      	str	r4, [r7, #16]
 8011e72:	4630      	mov	r0, r6
 8011e74:	b003      	add	sp, #12
 8011e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e7a:	6812      	ldr	r2, [r2, #0]
 8011e7c:	3b04      	subs	r3, #4
 8011e7e:	2a00      	cmp	r2, #0
 8011e80:	d1cc      	bne.n	8011e1c <quorem+0x9c>
 8011e82:	3c01      	subs	r4, #1
 8011e84:	e7c7      	b.n	8011e16 <quorem+0x96>
 8011e86:	6812      	ldr	r2, [r2, #0]
 8011e88:	3b04      	subs	r3, #4
 8011e8a:	2a00      	cmp	r2, #0
 8011e8c:	d1f0      	bne.n	8011e70 <quorem+0xf0>
 8011e8e:	3c01      	subs	r4, #1
 8011e90:	e7eb      	b.n	8011e6a <quorem+0xea>
 8011e92:	2000      	movs	r0, #0
 8011e94:	e7ee      	b.n	8011e74 <quorem+0xf4>
	...

08011e98 <_dtoa_r>:
 8011e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e9c:	ed2d 8b02 	vpush	{d8}
 8011ea0:	ec57 6b10 	vmov	r6, r7, d0
 8011ea4:	b095      	sub	sp, #84	; 0x54
 8011ea6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011ea8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011eac:	9105      	str	r1, [sp, #20]
 8011eae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8011eb2:	4604      	mov	r4, r0
 8011eb4:	9209      	str	r2, [sp, #36]	; 0x24
 8011eb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8011eb8:	b975      	cbnz	r5, 8011ed8 <_dtoa_r+0x40>
 8011eba:	2010      	movs	r0, #16
 8011ebc:	f001 fb7c 	bl	80135b8 <malloc>
 8011ec0:	4602      	mov	r2, r0
 8011ec2:	6260      	str	r0, [r4, #36]	; 0x24
 8011ec4:	b920      	cbnz	r0, 8011ed0 <_dtoa_r+0x38>
 8011ec6:	4bb2      	ldr	r3, [pc, #712]	; (8012190 <_dtoa_r+0x2f8>)
 8011ec8:	21ea      	movs	r1, #234	; 0xea
 8011eca:	48b2      	ldr	r0, [pc, #712]	; (8012194 <_dtoa_r+0x2fc>)
 8011ecc:	f003 f810 	bl	8014ef0 <__assert_func>
 8011ed0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011ed4:	6005      	str	r5, [r0, #0]
 8011ed6:	60c5      	str	r5, [r0, #12]
 8011ed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011eda:	6819      	ldr	r1, [r3, #0]
 8011edc:	b151      	cbz	r1, 8011ef4 <_dtoa_r+0x5c>
 8011ede:	685a      	ldr	r2, [r3, #4]
 8011ee0:	604a      	str	r2, [r1, #4]
 8011ee2:	2301      	movs	r3, #1
 8011ee4:	4093      	lsls	r3, r2
 8011ee6:	608b      	str	r3, [r1, #8]
 8011ee8:	4620      	mov	r0, r4
 8011eea:	f001 fbcd 	bl	8013688 <_Bfree>
 8011eee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	601a      	str	r2, [r3, #0]
 8011ef4:	1e3b      	subs	r3, r7, #0
 8011ef6:	bfb9      	ittee	lt
 8011ef8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011efc:	9303      	strlt	r3, [sp, #12]
 8011efe:	2300      	movge	r3, #0
 8011f00:	f8c8 3000 	strge.w	r3, [r8]
 8011f04:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8011f08:	4ba3      	ldr	r3, [pc, #652]	; (8012198 <_dtoa_r+0x300>)
 8011f0a:	bfbc      	itt	lt
 8011f0c:	2201      	movlt	r2, #1
 8011f0e:	f8c8 2000 	strlt.w	r2, [r8]
 8011f12:	ea33 0309 	bics.w	r3, r3, r9
 8011f16:	d11b      	bne.n	8011f50 <_dtoa_r+0xb8>
 8011f18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011f1a:	f242 730f 	movw	r3, #9999	; 0x270f
 8011f1e:	6013      	str	r3, [r2, #0]
 8011f20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011f24:	4333      	orrs	r3, r6
 8011f26:	f000 857a 	beq.w	8012a1e <_dtoa_r+0xb86>
 8011f2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011f2c:	b963      	cbnz	r3, 8011f48 <_dtoa_r+0xb0>
 8011f2e:	4b9b      	ldr	r3, [pc, #620]	; (801219c <_dtoa_r+0x304>)
 8011f30:	e024      	b.n	8011f7c <_dtoa_r+0xe4>
 8011f32:	4b9b      	ldr	r3, [pc, #620]	; (80121a0 <_dtoa_r+0x308>)
 8011f34:	9300      	str	r3, [sp, #0]
 8011f36:	3308      	adds	r3, #8
 8011f38:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011f3a:	6013      	str	r3, [r2, #0]
 8011f3c:	9800      	ldr	r0, [sp, #0]
 8011f3e:	b015      	add	sp, #84	; 0x54
 8011f40:	ecbd 8b02 	vpop	{d8}
 8011f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f48:	4b94      	ldr	r3, [pc, #592]	; (801219c <_dtoa_r+0x304>)
 8011f4a:	9300      	str	r3, [sp, #0]
 8011f4c:	3303      	adds	r3, #3
 8011f4e:	e7f3      	b.n	8011f38 <_dtoa_r+0xa0>
 8011f50:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011f54:	2200      	movs	r2, #0
 8011f56:	ec51 0b17 	vmov	r0, r1, d7
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8011f60:	f7ee fdc2 	bl	8000ae8 <__aeabi_dcmpeq>
 8011f64:	4680      	mov	r8, r0
 8011f66:	b158      	cbz	r0, 8011f80 <_dtoa_r+0xe8>
 8011f68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011f6a:	2301      	movs	r3, #1
 8011f6c:	6013      	str	r3, [r2, #0]
 8011f6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	f000 8551 	beq.w	8012a18 <_dtoa_r+0xb80>
 8011f76:	488b      	ldr	r0, [pc, #556]	; (80121a4 <_dtoa_r+0x30c>)
 8011f78:	6018      	str	r0, [r3, #0]
 8011f7a:	1e43      	subs	r3, r0, #1
 8011f7c:	9300      	str	r3, [sp, #0]
 8011f7e:	e7dd      	b.n	8011f3c <_dtoa_r+0xa4>
 8011f80:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011f84:	aa12      	add	r2, sp, #72	; 0x48
 8011f86:	a913      	add	r1, sp, #76	; 0x4c
 8011f88:	4620      	mov	r0, r4
 8011f8a:	f001 ff25 	bl	8013dd8 <__d2b>
 8011f8e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011f92:	4683      	mov	fp, r0
 8011f94:	2d00      	cmp	r5, #0
 8011f96:	d07c      	beq.n	8012092 <_dtoa_r+0x1fa>
 8011f98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011f9a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8011f9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011fa2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8011fa6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011faa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8011fae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011fb2:	4b7d      	ldr	r3, [pc, #500]	; (80121a8 <_dtoa_r+0x310>)
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	4630      	mov	r0, r6
 8011fb8:	4639      	mov	r1, r7
 8011fba:	f7ee f975 	bl	80002a8 <__aeabi_dsub>
 8011fbe:	a36e      	add	r3, pc, #440	; (adr r3, 8012178 <_dtoa_r+0x2e0>)
 8011fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fc4:	f7ee fb28 	bl	8000618 <__aeabi_dmul>
 8011fc8:	a36d      	add	r3, pc, #436	; (adr r3, 8012180 <_dtoa_r+0x2e8>)
 8011fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fce:	f7ee f96d 	bl	80002ac <__adddf3>
 8011fd2:	4606      	mov	r6, r0
 8011fd4:	4628      	mov	r0, r5
 8011fd6:	460f      	mov	r7, r1
 8011fd8:	f7ee fab4 	bl	8000544 <__aeabi_i2d>
 8011fdc:	a36a      	add	r3, pc, #424	; (adr r3, 8012188 <_dtoa_r+0x2f0>)
 8011fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fe2:	f7ee fb19 	bl	8000618 <__aeabi_dmul>
 8011fe6:	4602      	mov	r2, r0
 8011fe8:	460b      	mov	r3, r1
 8011fea:	4630      	mov	r0, r6
 8011fec:	4639      	mov	r1, r7
 8011fee:	f7ee f95d 	bl	80002ac <__adddf3>
 8011ff2:	4606      	mov	r6, r0
 8011ff4:	460f      	mov	r7, r1
 8011ff6:	f7ee fdbf 	bl	8000b78 <__aeabi_d2iz>
 8011ffa:	2200      	movs	r2, #0
 8011ffc:	4682      	mov	sl, r0
 8011ffe:	2300      	movs	r3, #0
 8012000:	4630      	mov	r0, r6
 8012002:	4639      	mov	r1, r7
 8012004:	f7ee fd7a 	bl	8000afc <__aeabi_dcmplt>
 8012008:	b148      	cbz	r0, 801201e <_dtoa_r+0x186>
 801200a:	4650      	mov	r0, sl
 801200c:	f7ee fa9a 	bl	8000544 <__aeabi_i2d>
 8012010:	4632      	mov	r2, r6
 8012012:	463b      	mov	r3, r7
 8012014:	f7ee fd68 	bl	8000ae8 <__aeabi_dcmpeq>
 8012018:	b908      	cbnz	r0, 801201e <_dtoa_r+0x186>
 801201a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801201e:	f1ba 0f16 	cmp.w	sl, #22
 8012022:	d854      	bhi.n	80120ce <_dtoa_r+0x236>
 8012024:	4b61      	ldr	r3, [pc, #388]	; (80121ac <_dtoa_r+0x314>)
 8012026:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801202a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801202e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012032:	f7ee fd63 	bl	8000afc <__aeabi_dcmplt>
 8012036:	2800      	cmp	r0, #0
 8012038:	d04b      	beq.n	80120d2 <_dtoa_r+0x23a>
 801203a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801203e:	2300      	movs	r3, #0
 8012040:	930e      	str	r3, [sp, #56]	; 0x38
 8012042:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012044:	1b5d      	subs	r5, r3, r5
 8012046:	1e6b      	subs	r3, r5, #1
 8012048:	9304      	str	r3, [sp, #16]
 801204a:	bf43      	ittte	mi
 801204c:	2300      	movmi	r3, #0
 801204e:	f1c5 0801 	rsbmi	r8, r5, #1
 8012052:	9304      	strmi	r3, [sp, #16]
 8012054:	f04f 0800 	movpl.w	r8, #0
 8012058:	f1ba 0f00 	cmp.w	sl, #0
 801205c:	db3b      	blt.n	80120d6 <_dtoa_r+0x23e>
 801205e:	9b04      	ldr	r3, [sp, #16]
 8012060:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8012064:	4453      	add	r3, sl
 8012066:	9304      	str	r3, [sp, #16]
 8012068:	2300      	movs	r3, #0
 801206a:	9306      	str	r3, [sp, #24]
 801206c:	9b05      	ldr	r3, [sp, #20]
 801206e:	2b09      	cmp	r3, #9
 8012070:	d869      	bhi.n	8012146 <_dtoa_r+0x2ae>
 8012072:	2b05      	cmp	r3, #5
 8012074:	bfc4      	itt	gt
 8012076:	3b04      	subgt	r3, #4
 8012078:	9305      	strgt	r3, [sp, #20]
 801207a:	9b05      	ldr	r3, [sp, #20]
 801207c:	f1a3 0302 	sub.w	r3, r3, #2
 8012080:	bfcc      	ite	gt
 8012082:	2500      	movgt	r5, #0
 8012084:	2501      	movle	r5, #1
 8012086:	2b03      	cmp	r3, #3
 8012088:	d869      	bhi.n	801215e <_dtoa_r+0x2c6>
 801208a:	e8df f003 	tbb	[pc, r3]
 801208e:	4e2c      	.short	0x4e2c
 8012090:	5a4c      	.short	0x5a4c
 8012092:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8012096:	441d      	add	r5, r3
 8012098:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801209c:	2b20      	cmp	r3, #32
 801209e:	bfc1      	itttt	gt
 80120a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80120a4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80120a8:	fa09 f303 	lslgt.w	r3, r9, r3
 80120ac:	fa26 f000 	lsrgt.w	r0, r6, r0
 80120b0:	bfda      	itte	le
 80120b2:	f1c3 0320 	rsble	r3, r3, #32
 80120b6:	fa06 f003 	lslle.w	r0, r6, r3
 80120ba:	4318      	orrgt	r0, r3
 80120bc:	f7ee fa32 	bl	8000524 <__aeabi_ui2d>
 80120c0:	2301      	movs	r3, #1
 80120c2:	4606      	mov	r6, r0
 80120c4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80120c8:	3d01      	subs	r5, #1
 80120ca:	9310      	str	r3, [sp, #64]	; 0x40
 80120cc:	e771      	b.n	8011fb2 <_dtoa_r+0x11a>
 80120ce:	2301      	movs	r3, #1
 80120d0:	e7b6      	b.n	8012040 <_dtoa_r+0x1a8>
 80120d2:	900e      	str	r0, [sp, #56]	; 0x38
 80120d4:	e7b5      	b.n	8012042 <_dtoa_r+0x1aa>
 80120d6:	f1ca 0300 	rsb	r3, sl, #0
 80120da:	9306      	str	r3, [sp, #24]
 80120dc:	2300      	movs	r3, #0
 80120de:	eba8 080a 	sub.w	r8, r8, sl
 80120e2:	930d      	str	r3, [sp, #52]	; 0x34
 80120e4:	e7c2      	b.n	801206c <_dtoa_r+0x1d4>
 80120e6:	2300      	movs	r3, #0
 80120e8:	9308      	str	r3, [sp, #32]
 80120ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	dc39      	bgt.n	8012164 <_dtoa_r+0x2cc>
 80120f0:	f04f 0901 	mov.w	r9, #1
 80120f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80120f8:	464b      	mov	r3, r9
 80120fa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80120fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012100:	2200      	movs	r2, #0
 8012102:	6042      	str	r2, [r0, #4]
 8012104:	2204      	movs	r2, #4
 8012106:	f102 0614 	add.w	r6, r2, #20
 801210a:	429e      	cmp	r6, r3
 801210c:	6841      	ldr	r1, [r0, #4]
 801210e:	d92f      	bls.n	8012170 <_dtoa_r+0x2d8>
 8012110:	4620      	mov	r0, r4
 8012112:	f001 fa79 	bl	8013608 <_Balloc>
 8012116:	9000      	str	r0, [sp, #0]
 8012118:	2800      	cmp	r0, #0
 801211a:	d14b      	bne.n	80121b4 <_dtoa_r+0x31c>
 801211c:	4b24      	ldr	r3, [pc, #144]	; (80121b0 <_dtoa_r+0x318>)
 801211e:	4602      	mov	r2, r0
 8012120:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012124:	e6d1      	b.n	8011eca <_dtoa_r+0x32>
 8012126:	2301      	movs	r3, #1
 8012128:	e7de      	b.n	80120e8 <_dtoa_r+0x250>
 801212a:	2300      	movs	r3, #0
 801212c:	9308      	str	r3, [sp, #32]
 801212e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012130:	eb0a 0903 	add.w	r9, sl, r3
 8012134:	f109 0301 	add.w	r3, r9, #1
 8012138:	2b01      	cmp	r3, #1
 801213a:	9301      	str	r3, [sp, #4]
 801213c:	bfb8      	it	lt
 801213e:	2301      	movlt	r3, #1
 8012140:	e7dd      	b.n	80120fe <_dtoa_r+0x266>
 8012142:	2301      	movs	r3, #1
 8012144:	e7f2      	b.n	801212c <_dtoa_r+0x294>
 8012146:	2501      	movs	r5, #1
 8012148:	2300      	movs	r3, #0
 801214a:	9305      	str	r3, [sp, #20]
 801214c:	9508      	str	r5, [sp, #32]
 801214e:	f04f 39ff 	mov.w	r9, #4294967295
 8012152:	2200      	movs	r2, #0
 8012154:	f8cd 9004 	str.w	r9, [sp, #4]
 8012158:	2312      	movs	r3, #18
 801215a:	9209      	str	r2, [sp, #36]	; 0x24
 801215c:	e7cf      	b.n	80120fe <_dtoa_r+0x266>
 801215e:	2301      	movs	r3, #1
 8012160:	9308      	str	r3, [sp, #32]
 8012162:	e7f4      	b.n	801214e <_dtoa_r+0x2b6>
 8012164:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012168:	f8cd 9004 	str.w	r9, [sp, #4]
 801216c:	464b      	mov	r3, r9
 801216e:	e7c6      	b.n	80120fe <_dtoa_r+0x266>
 8012170:	3101      	adds	r1, #1
 8012172:	6041      	str	r1, [r0, #4]
 8012174:	0052      	lsls	r2, r2, #1
 8012176:	e7c6      	b.n	8012106 <_dtoa_r+0x26e>
 8012178:	636f4361 	.word	0x636f4361
 801217c:	3fd287a7 	.word	0x3fd287a7
 8012180:	8b60c8b3 	.word	0x8b60c8b3
 8012184:	3fc68a28 	.word	0x3fc68a28
 8012188:	509f79fb 	.word	0x509f79fb
 801218c:	3fd34413 	.word	0x3fd34413
 8012190:	0801566d 	.word	0x0801566d
 8012194:	08015684 	.word	0x08015684
 8012198:	7ff00000 	.word	0x7ff00000
 801219c:	08015669 	.word	0x08015669
 80121a0:	08015660 	.word	0x08015660
 80121a4:	0801594a 	.word	0x0801594a
 80121a8:	3ff80000 	.word	0x3ff80000
 80121ac:	08015860 	.word	0x08015860
 80121b0:	080156e3 	.word	0x080156e3
 80121b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80121b6:	9a00      	ldr	r2, [sp, #0]
 80121b8:	601a      	str	r2, [r3, #0]
 80121ba:	9b01      	ldr	r3, [sp, #4]
 80121bc:	2b0e      	cmp	r3, #14
 80121be:	f200 80ad 	bhi.w	801231c <_dtoa_r+0x484>
 80121c2:	2d00      	cmp	r5, #0
 80121c4:	f000 80aa 	beq.w	801231c <_dtoa_r+0x484>
 80121c8:	f1ba 0f00 	cmp.w	sl, #0
 80121cc:	dd36      	ble.n	801223c <_dtoa_r+0x3a4>
 80121ce:	4ac3      	ldr	r2, [pc, #780]	; (80124dc <_dtoa_r+0x644>)
 80121d0:	f00a 030f 	and.w	r3, sl, #15
 80121d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80121d8:	ed93 7b00 	vldr	d7, [r3]
 80121dc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80121e0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80121e4:	eeb0 8a47 	vmov.f32	s16, s14
 80121e8:	eef0 8a67 	vmov.f32	s17, s15
 80121ec:	d016      	beq.n	801221c <_dtoa_r+0x384>
 80121ee:	4bbc      	ldr	r3, [pc, #752]	; (80124e0 <_dtoa_r+0x648>)
 80121f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80121f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80121f8:	f7ee fb38 	bl	800086c <__aeabi_ddiv>
 80121fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012200:	f007 070f 	and.w	r7, r7, #15
 8012204:	2503      	movs	r5, #3
 8012206:	4eb6      	ldr	r6, [pc, #728]	; (80124e0 <_dtoa_r+0x648>)
 8012208:	b957      	cbnz	r7, 8012220 <_dtoa_r+0x388>
 801220a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801220e:	ec53 2b18 	vmov	r2, r3, d8
 8012212:	f7ee fb2b 	bl	800086c <__aeabi_ddiv>
 8012216:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801221a:	e029      	b.n	8012270 <_dtoa_r+0x3d8>
 801221c:	2502      	movs	r5, #2
 801221e:	e7f2      	b.n	8012206 <_dtoa_r+0x36e>
 8012220:	07f9      	lsls	r1, r7, #31
 8012222:	d508      	bpl.n	8012236 <_dtoa_r+0x39e>
 8012224:	ec51 0b18 	vmov	r0, r1, d8
 8012228:	e9d6 2300 	ldrd	r2, r3, [r6]
 801222c:	f7ee f9f4 	bl	8000618 <__aeabi_dmul>
 8012230:	ec41 0b18 	vmov	d8, r0, r1
 8012234:	3501      	adds	r5, #1
 8012236:	107f      	asrs	r7, r7, #1
 8012238:	3608      	adds	r6, #8
 801223a:	e7e5      	b.n	8012208 <_dtoa_r+0x370>
 801223c:	f000 80a6 	beq.w	801238c <_dtoa_r+0x4f4>
 8012240:	f1ca 0600 	rsb	r6, sl, #0
 8012244:	4ba5      	ldr	r3, [pc, #660]	; (80124dc <_dtoa_r+0x644>)
 8012246:	4fa6      	ldr	r7, [pc, #664]	; (80124e0 <_dtoa_r+0x648>)
 8012248:	f006 020f 	and.w	r2, r6, #15
 801224c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012254:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012258:	f7ee f9de 	bl	8000618 <__aeabi_dmul>
 801225c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012260:	1136      	asrs	r6, r6, #4
 8012262:	2300      	movs	r3, #0
 8012264:	2502      	movs	r5, #2
 8012266:	2e00      	cmp	r6, #0
 8012268:	f040 8085 	bne.w	8012376 <_dtoa_r+0x4de>
 801226c:	2b00      	cmp	r3, #0
 801226e:	d1d2      	bne.n	8012216 <_dtoa_r+0x37e>
 8012270:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012272:	2b00      	cmp	r3, #0
 8012274:	f000 808c 	beq.w	8012390 <_dtoa_r+0x4f8>
 8012278:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801227c:	4b99      	ldr	r3, [pc, #612]	; (80124e4 <_dtoa_r+0x64c>)
 801227e:	2200      	movs	r2, #0
 8012280:	4630      	mov	r0, r6
 8012282:	4639      	mov	r1, r7
 8012284:	f7ee fc3a 	bl	8000afc <__aeabi_dcmplt>
 8012288:	2800      	cmp	r0, #0
 801228a:	f000 8081 	beq.w	8012390 <_dtoa_r+0x4f8>
 801228e:	9b01      	ldr	r3, [sp, #4]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d07d      	beq.n	8012390 <_dtoa_r+0x4f8>
 8012294:	f1b9 0f00 	cmp.w	r9, #0
 8012298:	dd3c      	ble.n	8012314 <_dtoa_r+0x47c>
 801229a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801229e:	9307      	str	r3, [sp, #28]
 80122a0:	2200      	movs	r2, #0
 80122a2:	4b91      	ldr	r3, [pc, #580]	; (80124e8 <_dtoa_r+0x650>)
 80122a4:	4630      	mov	r0, r6
 80122a6:	4639      	mov	r1, r7
 80122a8:	f7ee f9b6 	bl	8000618 <__aeabi_dmul>
 80122ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80122b0:	3501      	adds	r5, #1
 80122b2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80122b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80122ba:	4628      	mov	r0, r5
 80122bc:	f7ee f942 	bl	8000544 <__aeabi_i2d>
 80122c0:	4632      	mov	r2, r6
 80122c2:	463b      	mov	r3, r7
 80122c4:	f7ee f9a8 	bl	8000618 <__aeabi_dmul>
 80122c8:	4b88      	ldr	r3, [pc, #544]	; (80124ec <_dtoa_r+0x654>)
 80122ca:	2200      	movs	r2, #0
 80122cc:	f7ed ffee 	bl	80002ac <__adddf3>
 80122d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80122d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80122d8:	9303      	str	r3, [sp, #12]
 80122da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d15c      	bne.n	801239a <_dtoa_r+0x502>
 80122e0:	4b83      	ldr	r3, [pc, #524]	; (80124f0 <_dtoa_r+0x658>)
 80122e2:	2200      	movs	r2, #0
 80122e4:	4630      	mov	r0, r6
 80122e6:	4639      	mov	r1, r7
 80122e8:	f7ed ffde 	bl	80002a8 <__aeabi_dsub>
 80122ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80122f0:	4606      	mov	r6, r0
 80122f2:	460f      	mov	r7, r1
 80122f4:	f7ee fc20 	bl	8000b38 <__aeabi_dcmpgt>
 80122f8:	2800      	cmp	r0, #0
 80122fa:	f040 8296 	bne.w	801282a <_dtoa_r+0x992>
 80122fe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012302:	4630      	mov	r0, r6
 8012304:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012308:	4639      	mov	r1, r7
 801230a:	f7ee fbf7 	bl	8000afc <__aeabi_dcmplt>
 801230e:	2800      	cmp	r0, #0
 8012310:	f040 8288 	bne.w	8012824 <_dtoa_r+0x98c>
 8012314:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012318:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801231c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801231e:	2b00      	cmp	r3, #0
 8012320:	f2c0 8158 	blt.w	80125d4 <_dtoa_r+0x73c>
 8012324:	f1ba 0f0e 	cmp.w	sl, #14
 8012328:	f300 8154 	bgt.w	80125d4 <_dtoa_r+0x73c>
 801232c:	4b6b      	ldr	r3, [pc, #428]	; (80124dc <_dtoa_r+0x644>)
 801232e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012332:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012338:	2b00      	cmp	r3, #0
 801233a:	f280 80e3 	bge.w	8012504 <_dtoa_r+0x66c>
 801233e:	9b01      	ldr	r3, [sp, #4]
 8012340:	2b00      	cmp	r3, #0
 8012342:	f300 80df 	bgt.w	8012504 <_dtoa_r+0x66c>
 8012346:	f040 826d 	bne.w	8012824 <_dtoa_r+0x98c>
 801234a:	4b69      	ldr	r3, [pc, #420]	; (80124f0 <_dtoa_r+0x658>)
 801234c:	2200      	movs	r2, #0
 801234e:	4640      	mov	r0, r8
 8012350:	4649      	mov	r1, r9
 8012352:	f7ee f961 	bl	8000618 <__aeabi_dmul>
 8012356:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801235a:	f7ee fbe3 	bl	8000b24 <__aeabi_dcmpge>
 801235e:	9e01      	ldr	r6, [sp, #4]
 8012360:	4637      	mov	r7, r6
 8012362:	2800      	cmp	r0, #0
 8012364:	f040 8243 	bne.w	80127ee <_dtoa_r+0x956>
 8012368:	9d00      	ldr	r5, [sp, #0]
 801236a:	2331      	movs	r3, #49	; 0x31
 801236c:	f805 3b01 	strb.w	r3, [r5], #1
 8012370:	f10a 0a01 	add.w	sl, sl, #1
 8012374:	e23f      	b.n	80127f6 <_dtoa_r+0x95e>
 8012376:	07f2      	lsls	r2, r6, #31
 8012378:	d505      	bpl.n	8012386 <_dtoa_r+0x4ee>
 801237a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801237e:	f7ee f94b 	bl	8000618 <__aeabi_dmul>
 8012382:	3501      	adds	r5, #1
 8012384:	2301      	movs	r3, #1
 8012386:	1076      	asrs	r6, r6, #1
 8012388:	3708      	adds	r7, #8
 801238a:	e76c      	b.n	8012266 <_dtoa_r+0x3ce>
 801238c:	2502      	movs	r5, #2
 801238e:	e76f      	b.n	8012270 <_dtoa_r+0x3d8>
 8012390:	9b01      	ldr	r3, [sp, #4]
 8012392:	f8cd a01c 	str.w	sl, [sp, #28]
 8012396:	930c      	str	r3, [sp, #48]	; 0x30
 8012398:	e78d      	b.n	80122b6 <_dtoa_r+0x41e>
 801239a:	9900      	ldr	r1, [sp, #0]
 801239c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801239e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80123a0:	4b4e      	ldr	r3, [pc, #312]	; (80124dc <_dtoa_r+0x644>)
 80123a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80123a6:	4401      	add	r1, r0
 80123a8:	9102      	str	r1, [sp, #8]
 80123aa:	9908      	ldr	r1, [sp, #32]
 80123ac:	eeb0 8a47 	vmov.f32	s16, s14
 80123b0:	eef0 8a67 	vmov.f32	s17, s15
 80123b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80123b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80123bc:	2900      	cmp	r1, #0
 80123be:	d045      	beq.n	801244c <_dtoa_r+0x5b4>
 80123c0:	494c      	ldr	r1, [pc, #304]	; (80124f4 <_dtoa_r+0x65c>)
 80123c2:	2000      	movs	r0, #0
 80123c4:	f7ee fa52 	bl	800086c <__aeabi_ddiv>
 80123c8:	ec53 2b18 	vmov	r2, r3, d8
 80123cc:	f7ed ff6c 	bl	80002a8 <__aeabi_dsub>
 80123d0:	9d00      	ldr	r5, [sp, #0]
 80123d2:	ec41 0b18 	vmov	d8, r0, r1
 80123d6:	4639      	mov	r1, r7
 80123d8:	4630      	mov	r0, r6
 80123da:	f7ee fbcd 	bl	8000b78 <__aeabi_d2iz>
 80123de:	900c      	str	r0, [sp, #48]	; 0x30
 80123e0:	f7ee f8b0 	bl	8000544 <__aeabi_i2d>
 80123e4:	4602      	mov	r2, r0
 80123e6:	460b      	mov	r3, r1
 80123e8:	4630      	mov	r0, r6
 80123ea:	4639      	mov	r1, r7
 80123ec:	f7ed ff5c 	bl	80002a8 <__aeabi_dsub>
 80123f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80123f2:	3330      	adds	r3, #48	; 0x30
 80123f4:	f805 3b01 	strb.w	r3, [r5], #1
 80123f8:	ec53 2b18 	vmov	r2, r3, d8
 80123fc:	4606      	mov	r6, r0
 80123fe:	460f      	mov	r7, r1
 8012400:	f7ee fb7c 	bl	8000afc <__aeabi_dcmplt>
 8012404:	2800      	cmp	r0, #0
 8012406:	d165      	bne.n	80124d4 <_dtoa_r+0x63c>
 8012408:	4632      	mov	r2, r6
 801240a:	463b      	mov	r3, r7
 801240c:	4935      	ldr	r1, [pc, #212]	; (80124e4 <_dtoa_r+0x64c>)
 801240e:	2000      	movs	r0, #0
 8012410:	f7ed ff4a 	bl	80002a8 <__aeabi_dsub>
 8012414:	ec53 2b18 	vmov	r2, r3, d8
 8012418:	f7ee fb70 	bl	8000afc <__aeabi_dcmplt>
 801241c:	2800      	cmp	r0, #0
 801241e:	f040 80b9 	bne.w	8012594 <_dtoa_r+0x6fc>
 8012422:	9b02      	ldr	r3, [sp, #8]
 8012424:	429d      	cmp	r5, r3
 8012426:	f43f af75 	beq.w	8012314 <_dtoa_r+0x47c>
 801242a:	4b2f      	ldr	r3, [pc, #188]	; (80124e8 <_dtoa_r+0x650>)
 801242c:	ec51 0b18 	vmov	r0, r1, d8
 8012430:	2200      	movs	r2, #0
 8012432:	f7ee f8f1 	bl	8000618 <__aeabi_dmul>
 8012436:	4b2c      	ldr	r3, [pc, #176]	; (80124e8 <_dtoa_r+0x650>)
 8012438:	ec41 0b18 	vmov	d8, r0, r1
 801243c:	2200      	movs	r2, #0
 801243e:	4630      	mov	r0, r6
 8012440:	4639      	mov	r1, r7
 8012442:	f7ee f8e9 	bl	8000618 <__aeabi_dmul>
 8012446:	4606      	mov	r6, r0
 8012448:	460f      	mov	r7, r1
 801244a:	e7c4      	b.n	80123d6 <_dtoa_r+0x53e>
 801244c:	ec51 0b17 	vmov	r0, r1, d7
 8012450:	f7ee f8e2 	bl	8000618 <__aeabi_dmul>
 8012454:	9b02      	ldr	r3, [sp, #8]
 8012456:	9d00      	ldr	r5, [sp, #0]
 8012458:	930c      	str	r3, [sp, #48]	; 0x30
 801245a:	ec41 0b18 	vmov	d8, r0, r1
 801245e:	4639      	mov	r1, r7
 8012460:	4630      	mov	r0, r6
 8012462:	f7ee fb89 	bl	8000b78 <__aeabi_d2iz>
 8012466:	9011      	str	r0, [sp, #68]	; 0x44
 8012468:	f7ee f86c 	bl	8000544 <__aeabi_i2d>
 801246c:	4602      	mov	r2, r0
 801246e:	460b      	mov	r3, r1
 8012470:	4630      	mov	r0, r6
 8012472:	4639      	mov	r1, r7
 8012474:	f7ed ff18 	bl	80002a8 <__aeabi_dsub>
 8012478:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801247a:	3330      	adds	r3, #48	; 0x30
 801247c:	f805 3b01 	strb.w	r3, [r5], #1
 8012480:	9b02      	ldr	r3, [sp, #8]
 8012482:	429d      	cmp	r5, r3
 8012484:	4606      	mov	r6, r0
 8012486:	460f      	mov	r7, r1
 8012488:	f04f 0200 	mov.w	r2, #0
 801248c:	d134      	bne.n	80124f8 <_dtoa_r+0x660>
 801248e:	4b19      	ldr	r3, [pc, #100]	; (80124f4 <_dtoa_r+0x65c>)
 8012490:	ec51 0b18 	vmov	r0, r1, d8
 8012494:	f7ed ff0a 	bl	80002ac <__adddf3>
 8012498:	4602      	mov	r2, r0
 801249a:	460b      	mov	r3, r1
 801249c:	4630      	mov	r0, r6
 801249e:	4639      	mov	r1, r7
 80124a0:	f7ee fb4a 	bl	8000b38 <__aeabi_dcmpgt>
 80124a4:	2800      	cmp	r0, #0
 80124a6:	d175      	bne.n	8012594 <_dtoa_r+0x6fc>
 80124a8:	ec53 2b18 	vmov	r2, r3, d8
 80124ac:	4911      	ldr	r1, [pc, #68]	; (80124f4 <_dtoa_r+0x65c>)
 80124ae:	2000      	movs	r0, #0
 80124b0:	f7ed fefa 	bl	80002a8 <__aeabi_dsub>
 80124b4:	4602      	mov	r2, r0
 80124b6:	460b      	mov	r3, r1
 80124b8:	4630      	mov	r0, r6
 80124ba:	4639      	mov	r1, r7
 80124bc:	f7ee fb1e 	bl	8000afc <__aeabi_dcmplt>
 80124c0:	2800      	cmp	r0, #0
 80124c2:	f43f af27 	beq.w	8012314 <_dtoa_r+0x47c>
 80124c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80124c8:	1e6b      	subs	r3, r5, #1
 80124ca:	930c      	str	r3, [sp, #48]	; 0x30
 80124cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80124d0:	2b30      	cmp	r3, #48	; 0x30
 80124d2:	d0f8      	beq.n	80124c6 <_dtoa_r+0x62e>
 80124d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80124d8:	e04a      	b.n	8012570 <_dtoa_r+0x6d8>
 80124da:	bf00      	nop
 80124dc:	08015860 	.word	0x08015860
 80124e0:	08015838 	.word	0x08015838
 80124e4:	3ff00000 	.word	0x3ff00000
 80124e8:	40240000 	.word	0x40240000
 80124ec:	401c0000 	.word	0x401c0000
 80124f0:	40140000 	.word	0x40140000
 80124f4:	3fe00000 	.word	0x3fe00000
 80124f8:	4baf      	ldr	r3, [pc, #700]	; (80127b8 <_dtoa_r+0x920>)
 80124fa:	f7ee f88d 	bl	8000618 <__aeabi_dmul>
 80124fe:	4606      	mov	r6, r0
 8012500:	460f      	mov	r7, r1
 8012502:	e7ac      	b.n	801245e <_dtoa_r+0x5c6>
 8012504:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012508:	9d00      	ldr	r5, [sp, #0]
 801250a:	4642      	mov	r2, r8
 801250c:	464b      	mov	r3, r9
 801250e:	4630      	mov	r0, r6
 8012510:	4639      	mov	r1, r7
 8012512:	f7ee f9ab 	bl	800086c <__aeabi_ddiv>
 8012516:	f7ee fb2f 	bl	8000b78 <__aeabi_d2iz>
 801251a:	9002      	str	r0, [sp, #8]
 801251c:	f7ee f812 	bl	8000544 <__aeabi_i2d>
 8012520:	4642      	mov	r2, r8
 8012522:	464b      	mov	r3, r9
 8012524:	f7ee f878 	bl	8000618 <__aeabi_dmul>
 8012528:	4602      	mov	r2, r0
 801252a:	460b      	mov	r3, r1
 801252c:	4630      	mov	r0, r6
 801252e:	4639      	mov	r1, r7
 8012530:	f7ed feba 	bl	80002a8 <__aeabi_dsub>
 8012534:	9e02      	ldr	r6, [sp, #8]
 8012536:	9f01      	ldr	r7, [sp, #4]
 8012538:	3630      	adds	r6, #48	; 0x30
 801253a:	f805 6b01 	strb.w	r6, [r5], #1
 801253e:	9e00      	ldr	r6, [sp, #0]
 8012540:	1bae      	subs	r6, r5, r6
 8012542:	42b7      	cmp	r7, r6
 8012544:	4602      	mov	r2, r0
 8012546:	460b      	mov	r3, r1
 8012548:	d137      	bne.n	80125ba <_dtoa_r+0x722>
 801254a:	f7ed feaf 	bl	80002ac <__adddf3>
 801254e:	4642      	mov	r2, r8
 8012550:	464b      	mov	r3, r9
 8012552:	4606      	mov	r6, r0
 8012554:	460f      	mov	r7, r1
 8012556:	f7ee faef 	bl	8000b38 <__aeabi_dcmpgt>
 801255a:	b9c8      	cbnz	r0, 8012590 <_dtoa_r+0x6f8>
 801255c:	4642      	mov	r2, r8
 801255e:	464b      	mov	r3, r9
 8012560:	4630      	mov	r0, r6
 8012562:	4639      	mov	r1, r7
 8012564:	f7ee fac0 	bl	8000ae8 <__aeabi_dcmpeq>
 8012568:	b110      	cbz	r0, 8012570 <_dtoa_r+0x6d8>
 801256a:	9b02      	ldr	r3, [sp, #8]
 801256c:	07d9      	lsls	r1, r3, #31
 801256e:	d40f      	bmi.n	8012590 <_dtoa_r+0x6f8>
 8012570:	4620      	mov	r0, r4
 8012572:	4659      	mov	r1, fp
 8012574:	f001 f888 	bl	8013688 <_Bfree>
 8012578:	2300      	movs	r3, #0
 801257a:	702b      	strb	r3, [r5, #0]
 801257c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801257e:	f10a 0001 	add.w	r0, sl, #1
 8012582:	6018      	str	r0, [r3, #0]
 8012584:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012586:	2b00      	cmp	r3, #0
 8012588:	f43f acd8 	beq.w	8011f3c <_dtoa_r+0xa4>
 801258c:	601d      	str	r5, [r3, #0]
 801258e:	e4d5      	b.n	8011f3c <_dtoa_r+0xa4>
 8012590:	f8cd a01c 	str.w	sl, [sp, #28]
 8012594:	462b      	mov	r3, r5
 8012596:	461d      	mov	r5, r3
 8012598:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801259c:	2a39      	cmp	r2, #57	; 0x39
 801259e:	d108      	bne.n	80125b2 <_dtoa_r+0x71a>
 80125a0:	9a00      	ldr	r2, [sp, #0]
 80125a2:	429a      	cmp	r2, r3
 80125a4:	d1f7      	bne.n	8012596 <_dtoa_r+0x6fe>
 80125a6:	9a07      	ldr	r2, [sp, #28]
 80125a8:	9900      	ldr	r1, [sp, #0]
 80125aa:	3201      	adds	r2, #1
 80125ac:	9207      	str	r2, [sp, #28]
 80125ae:	2230      	movs	r2, #48	; 0x30
 80125b0:	700a      	strb	r2, [r1, #0]
 80125b2:	781a      	ldrb	r2, [r3, #0]
 80125b4:	3201      	adds	r2, #1
 80125b6:	701a      	strb	r2, [r3, #0]
 80125b8:	e78c      	b.n	80124d4 <_dtoa_r+0x63c>
 80125ba:	4b7f      	ldr	r3, [pc, #508]	; (80127b8 <_dtoa_r+0x920>)
 80125bc:	2200      	movs	r2, #0
 80125be:	f7ee f82b 	bl	8000618 <__aeabi_dmul>
 80125c2:	2200      	movs	r2, #0
 80125c4:	2300      	movs	r3, #0
 80125c6:	4606      	mov	r6, r0
 80125c8:	460f      	mov	r7, r1
 80125ca:	f7ee fa8d 	bl	8000ae8 <__aeabi_dcmpeq>
 80125ce:	2800      	cmp	r0, #0
 80125d0:	d09b      	beq.n	801250a <_dtoa_r+0x672>
 80125d2:	e7cd      	b.n	8012570 <_dtoa_r+0x6d8>
 80125d4:	9a08      	ldr	r2, [sp, #32]
 80125d6:	2a00      	cmp	r2, #0
 80125d8:	f000 80c4 	beq.w	8012764 <_dtoa_r+0x8cc>
 80125dc:	9a05      	ldr	r2, [sp, #20]
 80125de:	2a01      	cmp	r2, #1
 80125e0:	f300 80a8 	bgt.w	8012734 <_dtoa_r+0x89c>
 80125e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80125e6:	2a00      	cmp	r2, #0
 80125e8:	f000 80a0 	beq.w	801272c <_dtoa_r+0x894>
 80125ec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80125f0:	9e06      	ldr	r6, [sp, #24]
 80125f2:	4645      	mov	r5, r8
 80125f4:	9a04      	ldr	r2, [sp, #16]
 80125f6:	2101      	movs	r1, #1
 80125f8:	441a      	add	r2, r3
 80125fa:	4620      	mov	r0, r4
 80125fc:	4498      	add	r8, r3
 80125fe:	9204      	str	r2, [sp, #16]
 8012600:	f001 f948 	bl	8013894 <__i2b>
 8012604:	4607      	mov	r7, r0
 8012606:	2d00      	cmp	r5, #0
 8012608:	dd0b      	ble.n	8012622 <_dtoa_r+0x78a>
 801260a:	9b04      	ldr	r3, [sp, #16]
 801260c:	2b00      	cmp	r3, #0
 801260e:	dd08      	ble.n	8012622 <_dtoa_r+0x78a>
 8012610:	42ab      	cmp	r3, r5
 8012612:	9a04      	ldr	r2, [sp, #16]
 8012614:	bfa8      	it	ge
 8012616:	462b      	movge	r3, r5
 8012618:	eba8 0803 	sub.w	r8, r8, r3
 801261c:	1aed      	subs	r5, r5, r3
 801261e:	1ad3      	subs	r3, r2, r3
 8012620:	9304      	str	r3, [sp, #16]
 8012622:	9b06      	ldr	r3, [sp, #24]
 8012624:	b1fb      	cbz	r3, 8012666 <_dtoa_r+0x7ce>
 8012626:	9b08      	ldr	r3, [sp, #32]
 8012628:	2b00      	cmp	r3, #0
 801262a:	f000 809f 	beq.w	801276c <_dtoa_r+0x8d4>
 801262e:	2e00      	cmp	r6, #0
 8012630:	dd11      	ble.n	8012656 <_dtoa_r+0x7be>
 8012632:	4639      	mov	r1, r7
 8012634:	4632      	mov	r2, r6
 8012636:	4620      	mov	r0, r4
 8012638:	f001 f9e8 	bl	8013a0c <__pow5mult>
 801263c:	465a      	mov	r2, fp
 801263e:	4601      	mov	r1, r0
 8012640:	4607      	mov	r7, r0
 8012642:	4620      	mov	r0, r4
 8012644:	f001 f93c 	bl	80138c0 <__multiply>
 8012648:	4659      	mov	r1, fp
 801264a:	9007      	str	r0, [sp, #28]
 801264c:	4620      	mov	r0, r4
 801264e:	f001 f81b 	bl	8013688 <_Bfree>
 8012652:	9b07      	ldr	r3, [sp, #28]
 8012654:	469b      	mov	fp, r3
 8012656:	9b06      	ldr	r3, [sp, #24]
 8012658:	1b9a      	subs	r2, r3, r6
 801265a:	d004      	beq.n	8012666 <_dtoa_r+0x7ce>
 801265c:	4659      	mov	r1, fp
 801265e:	4620      	mov	r0, r4
 8012660:	f001 f9d4 	bl	8013a0c <__pow5mult>
 8012664:	4683      	mov	fp, r0
 8012666:	2101      	movs	r1, #1
 8012668:	4620      	mov	r0, r4
 801266a:	f001 f913 	bl	8013894 <__i2b>
 801266e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012670:	2b00      	cmp	r3, #0
 8012672:	4606      	mov	r6, r0
 8012674:	dd7c      	ble.n	8012770 <_dtoa_r+0x8d8>
 8012676:	461a      	mov	r2, r3
 8012678:	4601      	mov	r1, r0
 801267a:	4620      	mov	r0, r4
 801267c:	f001 f9c6 	bl	8013a0c <__pow5mult>
 8012680:	9b05      	ldr	r3, [sp, #20]
 8012682:	2b01      	cmp	r3, #1
 8012684:	4606      	mov	r6, r0
 8012686:	dd76      	ble.n	8012776 <_dtoa_r+0x8de>
 8012688:	2300      	movs	r3, #0
 801268a:	9306      	str	r3, [sp, #24]
 801268c:	6933      	ldr	r3, [r6, #16]
 801268e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012692:	6918      	ldr	r0, [r3, #16]
 8012694:	f001 f8ae 	bl	80137f4 <__hi0bits>
 8012698:	f1c0 0020 	rsb	r0, r0, #32
 801269c:	9b04      	ldr	r3, [sp, #16]
 801269e:	4418      	add	r0, r3
 80126a0:	f010 001f 	ands.w	r0, r0, #31
 80126a4:	f000 8086 	beq.w	80127b4 <_dtoa_r+0x91c>
 80126a8:	f1c0 0320 	rsb	r3, r0, #32
 80126ac:	2b04      	cmp	r3, #4
 80126ae:	dd7f      	ble.n	80127b0 <_dtoa_r+0x918>
 80126b0:	f1c0 001c 	rsb	r0, r0, #28
 80126b4:	9b04      	ldr	r3, [sp, #16]
 80126b6:	4403      	add	r3, r0
 80126b8:	4480      	add	r8, r0
 80126ba:	4405      	add	r5, r0
 80126bc:	9304      	str	r3, [sp, #16]
 80126be:	f1b8 0f00 	cmp.w	r8, #0
 80126c2:	dd05      	ble.n	80126d0 <_dtoa_r+0x838>
 80126c4:	4659      	mov	r1, fp
 80126c6:	4642      	mov	r2, r8
 80126c8:	4620      	mov	r0, r4
 80126ca:	f001 f9f9 	bl	8013ac0 <__lshift>
 80126ce:	4683      	mov	fp, r0
 80126d0:	9b04      	ldr	r3, [sp, #16]
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	dd05      	ble.n	80126e2 <_dtoa_r+0x84a>
 80126d6:	4631      	mov	r1, r6
 80126d8:	461a      	mov	r2, r3
 80126da:	4620      	mov	r0, r4
 80126dc:	f001 f9f0 	bl	8013ac0 <__lshift>
 80126e0:	4606      	mov	r6, r0
 80126e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d069      	beq.n	80127bc <_dtoa_r+0x924>
 80126e8:	4631      	mov	r1, r6
 80126ea:	4658      	mov	r0, fp
 80126ec:	f001 fa54 	bl	8013b98 <__mcmp>
 80126f0:	2800      	cmp	r0, #0
 80126f2:	da63      	bge.n	80127bc <_dtoa_r+0x924>
 80126f4:	2300      	movs	r3, #0
 80126f6:	4659      	mov	r1, fp
 80126f8:	220a      	movs	r2, #10
 80126fa:	4620      	mov	r0, r4
 80126fc:	f000 ffe6 	bl	80136cc <__multadd>
 8012700:	9b08      	ldr	r3, [sp, #32]
 8012702:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012706:	4683      	mov	fp, r0
 8012708:	2b00      	cmp	r3, #0
 801270a:	f000 818f 	beq.w	8012a2c <_dtoa_r+0xb94>
 801270e:	4639      	mov	r1, r7
 8012710:	2300      	movs	r3, #0
 8012712:	220a      	movs	r2, #10
 8012714:	4620      	mov	r0, r4
 8012716:	f000 ffd9 	bl	80136cc <__multadd>
 801271a:	f1b9 0f00 	cmp.w	r9, #0
 801271e:	4607      	mov	r7, r0
 8012720:	f300 808e 	bgt.w	8012840 <_dtoa_r+0x9a8>
 8012724:	9b05      	ldr	r3, [sp, #20]
 8012726:	2b02      	cmp	r3, #2
 8012728:	dc50      	bgt.n	80127cc <_dtoa_r+0x934>
 801272a:	e089      	b.n	8012840 <_dtoa_r+0x9a8>
 801272c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801272e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012732:	e75d      	b.n	80125f0 <_dtoa_r+0x758>
 8012734:	9b01      	ldr	r3, [sp, #4]
 8012736:	1e5e      	subs	r6, r3, #1
 8012738:	9b06      	ldr	r3, [sp, #24]
 801273a:	42b3      	cmp	r3, r6
 801273c:	bfbf      	itttt	lt
 801273e:	9b06      	ldrlt	r3, [sp, #24]
 8012740:	9606      	strlt	r6, [sp, #24]
 8012742:	1af2      	sublt	r2, r6, r3
 8012744:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8012746:	bfb6      	itet	lt
 8012748:	189b      	addlt	r3, r3, r2
 801274a:	1b9e      	subge	r6, r3, r6
 801274c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801274e:	9b01      	ldr	r3, [sp, #4]
 8012750:	bfb8      	it	lt
 8012752:	2600      	movlt	r6, #0
 8012754:	2b00      	cmp	r3, #0
 8012756:	bfb5      	itete	lt
 8012758:	eba8 0503 	sublt.w	r5, r8, r3
 801275c:	9b01      	ldrge	r3, [sp, #4]
 801275e:	2300      	movlt	r3, #0
 8012760:	4645      	movge	r5, r8
 8012762:	e747      	b.n	80125f4 <_dtoa_r+0x75c>
 8012764:	9e06      	ldr	r6, [sp, #24]
 8012766:	9f08      	ldr	r7, [sp, #32]
 8012768:	4645      	mov	r5, r8
 801276a:	e74c      	b.n	8012606 <_dtoa_r+0x76e>
 801276c:	9a06      	ldr	r2, [sp, #24]
 801276e:	e775      	b.n	801265c <_dtoa_r+0x7c4>
 8012770:	9b05      	ldr	r3, [sp, #20]
 8012772:	2b01      	cmp	r3, #1
 8012774:	dc18      	bgt.n	80127a8 <_dtoa_r+0x910>
 8012776:	9b02      	ldr	r3, [sp, #8]
 8012778:	b9b3      	cbnz	r3, 80127a8 <_dtoa_r+0x910>
 801277a:	9b03      	ldr	r3, [sp, #12]
 801277c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012780:	b9a3      	cbnz	r3, 80127ac <_dtoa_r+0x914>
 8012782:	9b03      	ldr	r3, [sp, #12]
 8012784:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012788:	0d1b      	lsrs	r3, r3, #20
 801278a:	051b      	lsls	r3, r3, #20
 801278c:	b12b      	cbz	r3, 801279a <_dtoa_r+0x902>
 801278e:	9b04      	ldr	r3, [sp, #16]
 8012790:	3301      	adds	r3, #1
 8012792:	9304      	str	r3, [sp, #16]
 8012794:	f108 0801 	add.w	r8, r8, #1
 8012798:	2301      	movs	r3, #1
 801279a:	9306      	str	r3, [sp, #24]
 801279c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801279e:	2b00      	cmp	r3, #0
 80127a0:	f47f af74 	bne.w	801268c <_dtoa_r+0x7f4>
 80127a4:	2001      	movs	r0, #1
 80127a6:	e779      	b.n	801269c <_dtoa_r+0x804>
 80127a8:	2300      	movs	r3, #0
 80127aa:	e7f6      	b.n	801279a <_dtoa_r+0x902>
 80127ac:	9b02      	ldr	r3, [sp, #8]
 80127ae:	e7f4      	b.n	801279a <_dtoa_r+0x902>
 80127b0:	d085      	beq.n	80126be <_dtoa_r+0x826>
 80127b2:	4618      	mov	r0, r3
 80127b4:	301c      	adds	r0, #28
 80127b6:	e77d      	b.n	80126b4 <_dtoa_r+0x81c>
 80127b8:	40240000 	.word	0x40240000
 80127bc:	9b01      	ldr	r3, [sp, #4]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	dc38      	bgt.n	8012834 <_dtoa_r+0x99c>
 80127c2:	9b05      	ldr	r3, [sp, #20]
 80127c4:	2b02      	cmp	r3, #2
 80127c6:	dd35      	ble.n	8012834 <_dtoa_r+0x99c>
 80127c8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80127cc:	f1b9 0f00 	cmp.w	r9, #0
 80127d0:	d10d      	bne.n	80127ee <_dtoa_r+0x956>
 80127d2:	4631      	mov	r1, r6
 80127d4:	464b      	mov	r3, r9
 80127d6:	2205      	movs	r2, #5
 80127d8:	4620      	mov	r0, r4
 80127da:	f000 ff77 	bl	80136cc <__multadd>
 80127de:	4601      	mov	r1, r0
 80127e0:	4606      	mov	r6, r0
 80127e2:	4658      	mov	r0, fp
 80127e4:	f001 f9d8 	bl	8013b98 <__mcmp>
 80127e8:	2800      	cmp	r0, #0
 80127ea:	f73f adbd 	bgt.w	8012368 <_dtoa_r+0x4d0>
 80127ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127f0:	9d00      	ldr	r5, [sp, #0]
 80127f2:	ea6f 0a03 	mvn.w	sl, r3
 80127f6:	f04f 0800 	mov.w	r8, #0
 80127fa:	4631      	mov	r1, r6
 80127fc:	4620      	mov	r0, r4
 80127fe:	f000 ff43 	bl	8013688 <_Bfree>
 8012802:	2f00      	cmp	r7, #0
 8012804:	f43f aeb4 	beq.w	8012570 <_dtoa_r+0x6d8>
 8012808:	f1b8 0f00 	cmp.w	r8, #0
 801280c:	d005      	beq.n	801281a <_dtoa_r+0x982>
 801280e:	45b8      	cmp	r8, r7
 8012810:	d003      	beq.n	801281a <_dtoa_r+0x982>
 8012812:	4641      	mov	r1, r8
 8012814:	4620      	mov	r0, r4
 8012816:	f000 ff37 	bl	8013688 <_Bfree>
 801281a:	4639      	mov	r1, r7
 801281c:	4620      	mov	r0, r4
 801281e:	f000 ff33 	bl	8013688 <_Bfree>
 8012822:	e6a5      	b.n	8012570 <_dtoa_r+0x6d8>
 8012824:	2600      	movs	r6, #0
 8012826:	4637      	mov	r7, r6
 8012828:	e7e1      	b.n	80127ee <_dtoa_r+0x956>
 801282a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801282c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012830:	4637      	mov	r7, r6
 8012832:	e599      	b.n	8012368 <_dtoa_r+0x4d0>
 8012834:	9b08      	ldr	r3, [sp, #32]
 8012836:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801283a:	2b00      	cmp	r3, #0
 801283c:	f000 80fd 	beq.w	8012a3a <_dtoa_r+0xba2>
 8012840:	2d00      	cmp	r5, #0
 8012842:	dd05      	ble.n	8012850 <_dtoa_r+0x9b8>
 8012844:	4639      	mov	r1, r7
 8012846:	462a      	mov	r2, r5
 8012848:	4620      	mov	r0, r4
 801284a:	f001 f939 	bl	8013ac0 <__lshift>
 801284e:	4607      	mov	r7, r0
 8012850:	9b06      	ldr	r3, [sp, #24]
 8012852:	2b00      	cmp	r3, #0
 8012854:	d05c      	beq.n	8012910 <_dtoa_r+0xa78>
 8012856:	6879      	ldr	r1, [r7, #4]
 8012858:	4620      	mov	r0, r4
 801285a:	f000 fed5 	bl	8013608 <_Balloc>
 801285e:	4605      	mov	r5, r0
 8012860:	b928      	cbnz	r0, 801286e <_dtoa_r+0x9d6>
 8012862:	4b80      	ldr	r3, [pc, #512]	; (8012a64 <_dtoa_r+0xbcc>)
 8012864:	4602      	mov	r2, r0
 8012866:	f240 21ea 	movw	r1, #746	; 0x2ea
 801286a:	f7ff bb2e 	b.w	8011eca <_dtoa_r+0x32>
 801286e:	693a      	ldr	r2, [r7, #16]
 8012870:	3202      	adds	r2, #2
 8012872:	0092      	lsls	r2, r2, #2
 8012874:	f107 010c 	add.w	r1, r7, #12
 8012878:	300c      	adds	r0, #12
 801287a:	f000 feb7 	bl	80135ec <memcpy>
 801287e:	2201      	movs	r2, #1
 8012880:	4629      	mov	r1, r5
 8012882:	4620      	mov	r0, r4
 8012884:	f001 f91c 	bl	8013ac0 <__lshift>
 8012888:	9b00      	ldr	r3, [sp, #0]
 801288a:	3301      	adds	r3, #1
 801288c:	9301      	str	r3, [sp, #4]
 801288e:	9b00      	ldr	r3, [sp, #0]
 8012890:	444b      	add	r3, r9
 8012892:	9307      	str	r3, [sp, #28]
 8012894:	9b02      	ldr	r3, [sp, #8]
 8012896:	f003 0301 	and.w	r3, r3, #1
 801289a:	46b8      	mov	r8, r7
 801289c:	9306      	str	r3, [sp, #24]
 801289e:	4607      	mov	r7, r0
 80128a0:	9b01      	ldr	r3, [sp, #4]
 80128a2:	4631      	mov	r1, r6
 80128a4:	3b01      	subs	r3, #1
 80128a6:	4658      	mov	r0, fp
 80128a8:	9302      	str	r3, [sp, #8]
 80128aa:	f7ff fa69 	bl	8011d80 <quorem>
 80128ae:	4603      	mov	r3, r0
 80128b0:	3330      	adds	r3, #48	; 0x30
 80128b2:	9004      	str	r0, [sp, #16]
 80128b4:	4641      	mov	r1, r8
 80128b6:	4658      	mov	r0, fp
 80128b8:	9308      	str	r3, [sp, #32]
 80128ba:	f001 f96d 	bl	8013b98 <__mcmp>
 80128be:	463a      	mov	r2, r7
 80128c0:	4681      	mov	r9, r0
 80128c2:	4631      	mov	r1, r6
 80128c4:	4620      	mov	r0, r4
 80128c6:	f001 f983 	bl	8013bd0 <__mdiff>
 80128ca:	68c2      	ldr	r2, [r0, #12]
 80128cc:	9b08      	ldr	r3, [sp, #32]
 80128ce:	4605      	mov	r5, r0
 80128d0:	bb02      	cbnz	r2, 8012914 <_dtoa_r+0xa7c>
 80128d2:	4601      	mov	r1, r0
 80128d4:	4658      	mov	r0, fp
 80128d6:	f001 f95f 	bl	8013b98 <__mcmp>
 80128da:	9b08      	ldr	r3, [sp, #32]
 80128dc:	4602      	mov	r2, r0
 80128de:	4629      	mov	r1, r5
 80128e0:	4620      	mov	r0, r4
 80128e2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80128e6:	f000 fecf 	bl	8013688 <_Bfree>
 80128ea:	9b05      	ldr	r3, [sp, #20]
 80128ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80128ee:	9d01      	ldr	r5, [sp, #4]
 80128f0:	ea43 0102 	orr.w	r1, r3, r2
 80128f4:	9b06      	ldr	r3, [sp, #24]
 80128f6:	430b      	orrs	r3, r1
 80128f8:	9b08      	ldr	r3, [sp, #32]
 80128fa:	d10d      	bne.n	8012918 <_dtoa_r+0xa80>
 80128fc:	2b39      	cmp	r3, #57	; 0x39
 80128fe:	d029      	beq.n	8012954 <_dtoa_r+0xabc>
 8012900:	f1b9 0f00 	cmp.w	r9, #0
 8012904:	dd01      	ble.n	801290a <_dtoa_r+0xa72>
 8012906:	9b04      	ldr	r3, [sp, #16]
 8012908:	3331      	adds	r3, #49	; 0x31
 801290a:	9a02      	ldr	r2, [sp, #8]
 801290c:	7013      	strb	r3, [r2, #0]
 801290e:	e774      	b.n	80127fa <_dtoa_r+0x962>
 8012910:	4638      	mov	r0, r7
 8012912:	e7b9      	b.n	8012888 <_dtoa_r+0x9f0>
 8012914:	2201      	movs	r2, #1
 8012916:	e7e2      	b.n	80128de <_dtoa_r+0xa46>
 8012918:	f1b9 0f00 	cmp.w	r9, #0
 801291c:	db06      	blt.n	801292c <_dtoa_r+0xa94>
 801291e:	9905      	ldr	r1, [sp, #20]
 8012920:	ea41 0909 	orr.w	r9, r1, r9
 8012924:	9906      	ldr	r1, [sp, #24]
 8012926:	ea59 0101 	orrs.w	r1, r9, r1
 801292a:	d120      	bne.n	801296e <_dtoa_r+0xad6>
 801292c:	2a00      	cmp	r2, #0
 801292e:	ddec      	ble.n	801290a <_dtoa_r+0xa72>
 8012930:	4659      	mov	r1, fp
 8012932:	2201      	movs	r2, #1
 8012934:	4620      	mov	r0, r4
 8012936:	9301      	str	r3, [sp, #4]
 8012938:	f001 f8c2 	bl	8013ac0 <__lshift>
 801293c:	4631      	mov	r1, r6
 801293e:	4683      	mov	fp, r0
 8012940:	f001 f92a 	bl	8013b98 <__mcmp>
 8012944:	2800      	cmp	r0, #0
 8012946:	9b01      	ldr	r3, [sp, #4]
 8012948:	dc02      	bgt.n	8012950 <_dtoa_r+0xab8>
 801294a:	d1de      	bne.n	801290a <_dtoa_r+0xa72>
 801294c:	07da      	lsls	r2, r3, #31
 801294e:	d5dc      	bpl.n	801290a <_dtoa_r+0xa72>
 8012950:	2b39      	cmp	r3, #57	; 0x39
 8012952:	d1d8      	bne.n	8012906 <_dtoa_r+0xa6e>
 8012954:	9a02      	ldr	r2, [sp, #8]
 8012956:	2339      	movs	r3, #57	; 0x39
 8012958:	7013      	strb	r3, [r2, #0]
 801295a:	462b      	mov	r3, r5
 801295c:	461d      	mov	r5, r3
 801295e:	3b01      	subs	r3, #1
 8012960:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012964:	2a39      	cmp	r2, #57	; 0x39
 8012966:	d050      	beq.n	8012a0a <_dtoa_r+0xb72>
 8012968:	3201      	adds	r2, #1
 801296a:	701a      	strb	r2, [r3, #0]
 801296c:	e745      	b.n	80127fa <_dtoa_r+0x962>
 801296e:	2a00      	cmp	r2, #0
 8012970:	dd03      	ble.n	801297a <_dtoa_r+0xae2>
 8012972:	2b39      	cmp	r3, #57	; 0x39
 8012974:	d0ee      	beq.n	8012954 <_dtoa_r+0xabc>
 8012976:	3301      	adds	r3, #1
 8012978:	e7c7      	b.n	801290a <_dtoa_r+0xa72>
 801297a:	9a01      	ldr	r2, [sp, #4]
 801297c:	9907      	ldr	r1, [sp, #28]
 801297e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012982:	428a      	cmp	r2, r1
 8012984:	d02a      	beq.n	80129dc <_dtoa_r+0xb44>
 8012986:	4659      	mov	r1, fp
 8012988:	2300      	movs	r3, #0
 801298a:	220a      	movs	r2, #10
 801298c:	4620      	mov	r0, r4
 801298e:	f000 fe9d 	bl	80136cc <__multadd>
 8012992:	45b8      	cmp	r8, r7
 8012994:	4683      	mov	fp, r0
 8012996:	f04f 0300 	mov.w	r3, #0
 801299a:	f04f 020a 	mov.w	r2, #10
 801299e:	4641      	mov	r1, r8
 80129a0:	4620      	mov	r0, r4
 80129a2:	d107      	bne.n	80129b4 <_dtoa_r+0xb1c>
 80129a4:	f000 fe92 	bl	80136cc <__multadd>
 80129a8:	4680      	mov	r8, r0
 80129aa:	4607      	mov	r7, r0
 80129ac:	9b01      	ldr	r3, [sp, #4]
 80129ae:	3301      	adds	r3, #1
 80129b0:	9301      	str	r3, [sp, #4]
 80129b2:	e775      	b.n	80128a0 <_dtoa_r+0xa08>
 80129b4:	f000 fe8a 	bl	80136cc <__multadd>
 80129b8:	4639      	mov	r1, r7
 80129ba:	4680      	mov	r8, r0
 80129bc:	2300      	movs	r3, #0
 80129be:	220a      	movs	r2, #10
 80129c0:	4620      	mov	r0, r4
 80129c2:	f000 fe83 	bl	80136cc <__multadd>
 80129c6:	4607      	mov	r7, r0
 80129c8:	e7f0      	b.n	80129ac <_dtoa_r+0xb14>
 80129ca:	f1b9 0f00 	cmp.w	r9, #0
 80129ce:	9a00      	ldr	r2, [sp, #0]
 80129d0:	bfcc      	ite	gt
 80129d2:	464d      	movgt	r5, r9
 80129d4:	2501      	movle	r5, #1
 80129d6:	4415      	add	r5, r2
 80129d8:	f04f 0800 	mov.w	r8, #0
 80129dc:	4659      	mov	r1, fp
 80129de:	2201      	movs	r2, #1
 80129e0:	4620      	mov	r0, r4
 80129e2:	9301      	str	r3, [sp, #4]
 80129e4:	f001 f86c 	bl	8013ac0 <__lshift>
 80129e8:	4631      	mov	r1, r6
 80129ea:	4683      	mov	fp, r0
 80129ec:	f001 f8d4 	bl	8013b98 <__mcmp>
 80129f0:	2800      	cmp	r0, #0
 80129f2:	dcb2      	bgt.n	801295a <_dtoa_r+0xac2>
 80129f4:	d102      	bne.n	80129fc <_dtoa_r+0xb64>
 80129f6:	9b01      	ldr	r3, [sp, #4]
 80129f8:	07db      	lsls	r3, r3, #31
 80129fa:	d4ae      	bmi.n	801295a <_dtoa_r+0xac2>
 80129fc:	462b      	mov	r3, r5
 80129fe:	461d      	mov	r5, r3
 8012a00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012a04:	2a30      	cmp	r2, #48	; 0x30
 8012a06:	d0fa      	beq.n	80129fe <_dtoa_r+0xb66>
 8012a08:	e6f7      	b.n	80127fa <_dtoa_r+0x962>
 8012a0a:	9a00      	ldr	r2, [sp, #0]
 8012a0c:	429a      	cmp	r2, r3
 8012a0e:	d1a5      	bne.n	801295c <_dtoa_r+0xac4>
 8012a10:	f10a 0a01 	add.w	sl, sl, #1
 8012a14:	2331      	movs	r3, #49	; 0x31
 8012a16:	e779      	b.n	801290c <_dtoa_r+0xa74>
 8012a18:	4b13      	ldr	r3, [pc, #76]	; (8012a68 <_dtoa_r+0xbd0>)
 8012a1a:	f7ff baaf 	b.w	8011f7c <_dtoa_r+0xe4>
 8012a1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	f47f aa86 	bne.w	8011f32 <_dtoa_r+0x9a>
 8012a26:	4b11      	ldr	r3, [pc, #68]	; (8012a6c <_dtoa_r+0xbd4>)
 8012a28:	f7ff baa8 	b.w	8011f7c <_dtoa_r+0xe4>
 8012a2c:	f1b9 0f00 	cmp.w	r9, #0
 8012a30:	dc03      	bgt.n	8012a3a <_dtoa_r+0xba2>
 8012a32:	9b05      	ldr	r3, [sp, #20]
 8012a34:	2b02      	cmp	r3, #2
 8012a36:	f73f aec9 	bgt.w	80127cc <_dtoa_r+0x934>
 8012a3a:	9d00      	ldr	r5, [sp, #0]
 8012a3c:	4631      	mov	r1, r6
 8012a3e:	4658      	mov	r0, fp
 8012a40:	f7ff f99e 	bl	8011d80 <quorem>
 8012a44:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012a48:	f805 3b01 	strb.w	r3, [r5], #1
 8012a4c:	9a00      	ldr	r2, [sp, #0]
 8012a4e:	1aaa      	subs	r2, r5, r2
 8012a50:	4591      	cmp	r9, r2
 8012a52:	ddba      	ble.n	80129ca <_dtoa_r+0xb32>
 8012a54:	4659      	mov	r1, fp
 8012a56:	2300      	movs	r3, #0
 8012a58:	220a      	movs	r2, #10
 8012a5a:	4620      	mov	r0, r4
 8012a5c:	f000 fe36 	bl	80136cc <__multadd>
 8012a60:	4683      	mov	fp, r0
 8012a62:	e7eb      	b.n	8012a3c <_dtoa_r+0xba4>
 8012a64:	080156e3 	.word	0x080156e3
 8012a68:	08015949 	.word	0x08015949
 8012a6c:	08015660 	.word	0x08015660

08012a70 <__sflush_r>:
 8012a70:	898a      	ldrh	r2, [r1, #12]
 8012a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a76:	4605      	mov	r5, r0
 8012a78:	0710      	lsls	r0, r2, #28
 8012a7a:	460c      	mov	r4, r1
 8012a7c:	d458      	bmi.n	8012b30 <__sflush_r+0xc0>
 8012a7e:	684b      	ldr	r3, [r1, #4]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	dc05      	bgt.n	8012a90 <__sflush_r+0x20>
 8012a84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	dc02      	bgt.n	8012a90 <__sflush_r+0x20>
 8012a8a:	2000      	movs	r0, #0
 8012a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012a92:	2e00      	cmp	r6, #0
 8012a94:	d0f9      	beq.n	8012a8a <__sflush_r+0x1a>
 8012a96:	2300      	movs	r3, #0
 8012a98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012a9c:	682f      	ldr	r7, [r5, #0]
 8012a9e:	602b      	str	r3, [r5, #0]
 8012aa0:	d032      	beq.n	8012b08 <__sflush_r+0x98>
 8012aa2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012aa4:	89a3      	ldrh	r3, [r4, #12]
 8012aa6:	075a      	lsls	r2, r3, #29
 8012aa8:	d505      	bpl.n	8012ab6 <__sflush_r+0x46>
 8012aaa:	6863      	ldr	r3, [r4, #4]
 8012aac:	1ac0      	subs	r0, r0, r3
 8012aae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012ab0:	b10b      	cbz	r3, 8012ab6 <__sflush_r+0x46>
 8012ab2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012ab4:	1ac0      	subs	r0, r0, r3
 8012ab6:	2300      	movs	r3, #0
 8012ab8:	4602      	mov	r2, r0
 8012aba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012abc:	6a21      	ldr	r1, [r4, #32]
 8012abe:	4628      	mov	r0, r5
 8012ac0:	47b0      	blx	r6
 8012ac2:	1c43      	adds	r3, r0, #1
 8012ac4:	89a3      	ldrh	r3, [r4, #12]
 8012ac6:	d106      	bne.n	8012ad6 <__sflush_r+0x66>
 8012ac8:	6829      	ldr	r1, [r5, #0]
 8012aca:	291d      	cmp	r1, #29
 8012acc:	d82c      	bhi.n	8012b28 <__sflush_r+0xb8>
 8012ace:	4a2a      	ldr	r2, [pc, #168]	; (8012b78 <__sflush_r+0x108>)
 8012ad0:	40ca      	lsrs	r2, r1
 8012ad2:	07d6      	lsls	r6, r2, #31
 8012ad4:	d528      	bpl.n	8012b28 <__sflush_r+0xb8>
 8012ad6:	2200      	movs	r2, #0
 8012ad8:	6062      	str	r2, [r4, #4]
 8012ada:	04d9      	lsls	r1, r3, #19
 8012adc:	6922      	ldr	r2, [r4, #16]
 8012ade:	6022      	str	r2, [r4, #0]
 8012ae0:	d504      	bpl.n	8012aec <__sflush_r+0x7c>
 8012ae2:	1c42      	adds	r2, r0, #1
 8012ae4:	d101      	bne.n	8012aea <__sflush_r+0x7a>
 8012ae6:	682b      	ldr	r3, [r5, #0]
 8012ae8:	b903      	cbnz	r3, 8012aec <__sflush_r+0x7c>
 8012aea:	6560      	str	r0, [r4, #84]	; 0x54
 8012aec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012aee:	602f      	str	r7, [r5, #0]
 8012af0:	2900      	cmp	r1, #0
 8012af2:	d0ca      	beq.n	8012a8a <__sflush_r+0x1a>
 8012af4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012af8:	4299      	cmp	r1, r3
 8012afa:	d002      	beq.n	8012b02 <__sflush_r+0x92>
 8012afc:	4628      	mov	r0, r5
 8012afe:	f001 fa4d 	bl	8013f9c <_free_r>
 8012b02:	2000      	movs	r0, #0
 8012b04:	6360      	str	r0, [r4, #52]	; 0x34
 8012b06:	e7c1      	b.n	8012a8c <__sflush_r+0x1c>
 8012b08:	6a21      	ldr	r1, [r4, #32]
 8012b0a:	2301      	movs	r3, #1
 8012b0c:	4628      	mov	r0, r5
 8012b0e:	47b0      	blx	r6
 8012b10:	1c41      	adds	r1, r0, #1
 8012b12:	d1c7      	bne.n	8012aa4 <__sflush_r+0x34>
 8012b14:	682b      	ldr	r3, [r5, #0]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d0c4      	beq.n	8012aa4 <__sflush_r+0x34>
 8012b1a:	2b1d      	cmp	r3, #29
 8012b1c:	d001      	beq.n	8012b22 <__sflush_r+0xb2>
 8012b1e:	2b16      	cmp	r3, #22
 8012b20:	d101      	bne.n	8012b26 <__sflush_r+0xb6>
 8012b22:	602f      	str	r7, [r5, #0]
 8012b24:	e7b1      	b.n	8012a8a <__sflush_r+0x1a>
 8012b26:	89a3      	ldrh	r3, [r4, #12]
 8012b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b2c:	81a3      	strh	r3, [r4, #12]
 8012b2e:	e7ad      	b.n	8012a8c <__sflush_r+0x1c>
 8012b30:	690f      	ldr	r7, [r1, #16]
 8012b32:	2f00      	cmp	r7, #0
 8012b34:	d0a9      	beq.n	8012a8a <__sflush_r+0x1a>
 8012b36:	0793      	lsls	r3, r2, #30
 8012b38:	680e      	ldr	r6, [r1, #0]
 8012b3a:	bf08      	it	eq
 8012b3c:	694b      	ldreq	r3, [r1, #20]
 8012b3e:	600f      	str	r7, [r1, #0]
 8012b40:	bf18      	it	ne
 8012b42:	2300      	movne	r3, #0
 8012b44:	eba6 0807 	sub.w	r8, r6, r7
 8012b48:	608b      	str	r3, [r1, #8]
 8012b4a:	f1b8 0f00 	cmp.w	r8, #0
 8012b4e:	dd9c      	ble.n	8012a8a <__sflush_r+0x1a>
 8012b50:	6a21      	ldr	r1, [r4, #32]
 8012b52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012b54:	4643      	mov	r3, r8
 8012b56:	463a      	mov	r2, r7
 8012b58:	4628      	mov	r0, r5
 8012b5a:	47b0      	blx	r6
 8012b5c:	2800      	cmp	r0, #0
 8012b5e:	dc06      	bgt.n	8012b6e <__sflush_r+0xfe>
 8012b60:	89a3      	ldrh	r3, [r4, #12]
 8012b62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b66:	81a3      	strh	r3, [r4, #12]
 8012b68:	f04f 30ff 	mov.w	r0, #4294967295
 8012b6c:	e78e      	b.n	8012a8c <__sflush_r+0x1c>
 8012b6e:	4407      	add	r7, r0
 8012b70:	eba8 0800 	sub.w	r8, r8, r0
 8012b74:	e7e9      	b.n	8012b4a <__sflush_r+0xda>
 8012b76:	bf00      	nop
 8012b78:	20400001 	.word	0x20400001

08012b7c <_fflush_r>:
 8012b7c:	b538      	push	{r3, r4, r5, lr}
 8012b7e:	690b      	ldr	r3, [r1, #16]
 8012b80:	4605      	mov	r5, r0
 8012b82:	460c      	mov	r4, r1
 8012b84:	b913      	cbnz	r3, 8012b8c <_fflush_r+0x10>
 8012b86:	2500      	movs	r5, #0
 8012b88:	4628      	mov	r0, r5
 8012b8a:	bd38      	pop	{r3, r4, r5, pc}
 8012b8c:	b118      	cbz	r0, 8012b96 <_fflush_r+0x1a>
 8012b8e:	6983      	ldr	r3, [r0, #24]
 8012b90:	b90b      	cbnz	r3, 8012b96 <_fflush_r+0x1a>
 8012b92:	f000 f887 	bl	8012ca4 <__sinit>
 8012b96:	4b14      	ldr	r3, [pc, #80]	; (8012be8 <_fflush_r+0x6c>)
 8012b98:	429c      	cmp	r4, r3
 8012b9a:	d11b      	bne.n	8012bd4 <_fflush_r+0x58>
 8012b9c:	686c      	ldr	r4, [r5, #4]
 8012b9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d0ef      	beq.n	8012b86 <_fflush_r+0xa>
 8012ba6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012ba8:	07d0      	lsls	r0, r2, #31
 8012baa:	d404      	bmi.n	8012bb6 <_fflush_r+0x3a>
 8012bac:	0599      	lsls	r1, r3, #22
 8012bae:	d402      	bmi.n	8012bb6 <_fflush_r+0x3a>
 8012bb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012bb2:	f000 fc88 	bl	80134c6 <__retarget_lock_acquire_recursive>
 8012bb6:	4628      	mov	r0, r5
 8012bb8:	4621      	mov	r1, r4
 8012bba:	f7ff ff59 	bl	8012a70 <__sflush_r>
 8012bbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012bc0:	07da      	lsls	r2, r3, #31
 8012bc2:	4605      	mov	r5, r0
 8012bc4:	d4e0      	bmi.n	8012b88 <_fflush_r+0xc>
 8012bc6:	89a3      	ldrh	r3, [r4, #12]
 8012bc8:	059b      	lsls	r3, r3, #22
 8012bca:	d4dd      	bmi.n	8012b88 <_fflush_r+0xc>
 8012bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012bce:	f000 fc7b 	bl	80134c8 <__retarget_lock_release_recursive>
 8012bd2:	e7d9      	b.n	8012b88 <_fflush_r+0xc>
 8012bd4:	4b05      	ldr	r3, [pc, #20]	; (8012bec <_fflush_r+0x70>)
 8012bd6:	429c      	cmp	r4, r3
 8012bd8:	d101      	bne.n	8012bde <_fflush_r+0x62>
 8012bda:	68ac      	ldr	r4, [r5, #8]
 8012bdc:	e7df      	b.n	8012b9e <_fflush_r+0x22>
 8012bde:	4b04      	ldr	r3, [pc, #16]	; (8012bf0 <_fflush_r+0x74>)
 8012be0:	429c      	cmp	r4, r3
 8012be2:	bf08      	it	eq
 8012be4:	68ec      	ldreq	r4, [r5, #12]
 8012be6:	e7da      	b.n	8012b9e <_fflush_r+0x22>
 8012be8:	08015714 	.word	0x08015714
 8012bec:	08015734 	.word	0x08015734
 8012bf0:	080156f4 	.word	0x080156f4

08012bf4 <std>:
 8012bf4:	2300      	movs	r3, #0
 8012bf6:	b510      	push	{r4, lr}
 8012bf8:	4604      	mov	r4, r0
 8012bfa:	e9c0 3300 	strd	r3, r3, [r0]
 8012bfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012c02:	6083      	str	r3, [r0, #8]
 8012c04:	8181      	strh	r1, [r0, #12]
 8012c06:	6643      	str	r3, [r0, #100]	; 0x64
 8012c08:	81c2      	strh	r2, [r0, #14]
 8012c0a:	6183      	str	r3, [r0, #24]
 8012c0c:	4619      	mov	r1, r3
 8012c0e:	2208      	movs	r2, #8
 8012c10:	305c      	adds	r0, #92	; 0x5c
 8012c12:	f7fd f9a9 	bl	800ff68 <memset>
 8012c16:	4b05      	ldr	r3, [pc, #20]	; (8012c2c <std+0x38>)
 8012c18:	6263      	str	r3, [r4, #36]	; 0x24
 8012c1a:	4b05      	ldr	r3, [pc, #20]	; (8012c30 <std+0x3c>)
 8012c1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8012c1e:	4b05      	ldr	r3, [pc, #20]	; (8012c34 <std+0x40>)
 8012c20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012c22:	4b05      	ldr	r3, [pc, #20]	; (8012c38 <std+0x44>)
 8012c24:	6224      	str	r4, [r4, #32]
 8012c26:	6323      	str	r3, [r4, #48]	; 0x30
 8012c28:	bd10      	pop	{r4, pc}
 8012c2a:	bf00      	nop
 8012c2c:	08010d11 	.word	0x08010d11
 8012c30:	08010d37 	.word	0x08010d37
 8012c34:	08010d6f 	.word	0x08010d6f
 8012c38:	08010d93 	.word	0x08010d93

08012c3c <_cleanup_r>:
 8012c3c:	4901      	ldr	r1, [pc, #4]	; (8012c44 <_cleanup_r+0x8>)
 8012c3e:	f000 b8af 	b.w	8012da0 <_fwalk_reent>
 8012c42:	bf00      	nop
 8012c44:	08012b7d 	.word	0x08012b7d

08012c48 <__sfmoreglue>:
 8012c48:	b570      	push	{r4, r5, r6, lr}
 8012c4a:	1e4a      	subs	r2, r1, #1
 8012c4c:	2568      	movs	r5, #104	; 0x68
 8012c4e:	4355      	muls	r5, r2
 8012c50:	460e      	mov	r6, r1
 8012c52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012c56:	f001 f9f1 	bl	801403c <_malloc_r>
 8012c5a:	4604      	mov	r4, r0
 8012c5c:	b140      	cbz	r0, 8012c70 <__sfmoreglue+0x28>
 8012c5e:	2100      	movs	r1, #0
 8012c60:	e9c0 1600 	strd	r1, r6, [r0]
 8012c64:	300c      	adds	r0, #12
 8012c66:	60a0      	str	r0, [r4, #8]
 8012c68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012c6c:	f7fd f97c 	bl	800ff68 <memset>
 8012c70:	4620      	mov	r0, r4
 8012c72:	bd70      	pop	{r4, r5, r6, pc}

08012c74 <__sfp_lock_acquire>:
 8012c74:	4801      	ldr	r0, [pc, #4]	; (8012c7c <__sfp_lock_acquire+0x8>)
 8012c76:	f000 bc26 	b.w	80134c6 <__retarget_lock_acquire_recursive>
 8012c7a:	bf00      	nop
 8012c7c:	2000366c 	.word	0x2000366c

08012c80 <__sfp_lock_release>:
 8012c80:	4801      	ldr	r0, [pc, #4]	; (8012c88 <__sfp_lock_release+0x8>)
 8012c82:	f000 bc21 	b.w	80134c8 <__retarget_lock_release_recursive>
 8012c86:	bf00      	nop
 8012c88:	2000366c 	.word	0x2000366c

08012c8c <__sinit_lock_acquire>:
 8012c8c:	4801      	ldr	r0, [pc, #4]	; (8012c94 <__sinit_lock_acquire+0x8>)
 8012c8e:	f000 bc1a 	b.w	80134c6 <__retarget_lock_acquire_recursive>
 8012c92:	bf00      	nop
 8012c94:	20003667 	.word	0x20003667

08012c98 <__sinit_lock_release>:
 8012c98:	4801      	ldr	r0, [pc, #4]	; (8012ca0 <__sinit_lock_release+0x8>)
 8012c9a:	f000 bc15 	b.w	80134c8 <__retarget_lock_release_recursive>
 8012c9e:	bf00      	nop
 8012ca0:	20003667 	.word	0x20003667

08012ca4 <__sinit>:
 8012ca4:	b510      	push	{r4, lr}
 8012ca6:	4604      	mov	r4, r0
 8012ca8:	f7ff fff0 	bl	8012c8c <__sinit_lock_acquire>
 8012cac:	69a3      	ldr	r3, [r4, #24]
 8012cae:	b11b      	cbz	r3, 8012cb8 <__sinit+0x14>
 8012cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012cb4:	f7ff bff0 	b.w	8012c98 <__sinit_lock_release>
 8012cb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012cbc:	6523      	str	r3, [r4, #80]	; 0x50
 8012cbe:	4b13      	ldr	r3, [pc, #76]	; (8012d0c <__sinit+0x68>)
 8012cc0:	4a13      	ldr	r2, [pc, #76]	; (8012d10 <__sinit+0x6c>)
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	62a2      	str	r2, [r4, #40]	; 0x28
 8012cc6:	42a3      	cmp	r3, r4
 8012cc8:	bf04      	itt	eq
 8012cca:	2301      	moveq	r3, #1
 8012ccc:	61a3      	streq	r3, [r4, #24]
 8012cce:	4620      	mov	r0, r4
 8012cd0:	f000 f820 	bl	8012d14 <__sfp>
 8012cd4:	6060      	str	r0, [r4, #4]
 8012cd6:	4620      	mov	r0, r4
 8012cd8:	f000 f81c 	bl	8012d14 <__sfp>
 8012cdc:	60a0      	str	r0, [r4, #8]
 8012cde:	4620      	mov	r0, r4
 8012ce0:	f000 f818 	bl	8012d14 <__sfp>
 8012ce4:	2200      	movs	r2, #0
 8012ce6:	60e0      	str	r0, [r4, #12]
 8012ce8:	2104      	movs	r1, #4
 8012cea:	6860      	ldr	r0, [r4, #4]
 8012cec:	f7ff ff82 	bl	8012bf4 <std>
 8012cf0:	68a0      	ldr	r0, [r4, #8]
 8012cf2:	2201      	movs	r2, #1
 8012cf4:	2109      	movs	r1, #9
 8012cf6:	f7ff ff7d 	bl	8012bf4 <std>
 8012cfa:	68e0      	ldr	r0, [r4, #12]
 8012cfc:	2202      	movs	r2, #2
 8012cfe:	2112      	movs	r1, #18
 8012d00:	f7ff ff78 	bl	8012bf4 <std>
 8012d04:	2301      	movs	r3, #1
 8012d06:	61a3      	str	r3, [r4, #24]
 8012d08:	e7d2      	b.n	8012cb0 <__sinit+0xc>
 8012d0a:	bf00      	nop
 8012d0c:	080155d4 	.word	0x080155d4
 8012d10:	08012c3d 	.word	0x08012c3d

08012d14 <__sfp>:
 8012d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d16:	4607      	mov	r7, r0
 8012d18:	f7ff ffac 	bl	8012c74 <__sfp_lock_acquire>
 8012d1c:	4b1e      	ldr	r3, [pc, #120]	; (8012d98 <__sfp+0x84>)
 8012d1e:	681e      	ldr	r6, [r3, #0]
 8012d20:	69b3      	ldr	r3, [r6, #24]
 8012d22:	b913      	cbnz	r3, 8012d2a <__sfp+0x16>
 8012d24:	4630      	mov	r0, r6
 8012d26:	f7ff ffbd 	bl	8012ca4 <__sinit>
 8012d2a:	3648      	adds	r6, #72	; 0x48
 8012d2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012d30:	3b01      	subs	r3, #1
 8012d32:	d503      	bpl.n	8012d3c <__sfp+0x28>
 8012d34:	6833      	ldr	r3, [r6, #0]
 8012d36:	b30b      	cbz	r3, 8012d7c <__sfp+0x68>
 8012d38:	6836      	ldr	r6, [r6, #0]
 8012d3a:	e7f7      	b.n	8012d2c <__sfp+0x18>
 8012d3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012d40:	b9d5      	cbnz	r5, 8012d78 <__sfp+0x64>
 8012d42:	4b16      	ldr	r3, [pc, #88]	; (8012d9c <__sfp+0x88>)
 8012d44:	60e3      	str	r3, [r4, #12]
 8012d46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012d4a:	6665      	str	r5, [r4, #100]	; 0x64
 8012d4c:	f000 fbba 	bl	80134c4 <__retarget_lock_init_recursive>
 8012d50:	f7ff ff96 	bl	8012c80 <__sfp_lock_release>
 8012d54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012d58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012d5c:	6025      	str	r5, [r4, #0]
 8012d5e:	61a5      	str	r5, [r4, #24]
 8012d60:	2208      	movs	r2, #8
 8012d62:	4629      	mov	r1, r5
 8012d64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012d68:	f7fd f8fe 	bl	800ff68 <memset>
 8012d6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012d70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012d74:	4620      	mov	r0, r4
 8012d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d78:	3468      	adds	r4, #104	; 0x68
 8012d7a:	e7d9      	b.n	8012d30 <__sfp+0x1c>
 8012d7c:	2104      	movs	r1, #4
 8012d7e:	4638      	mov	r0, r7
 8012d80:	f7ff ff62 	bl	8012c48 <__sfmoreglue>
 8012d84:	4604      	mov	r4, r0
 8012d86:	6030      	str	r0, [r6, #0]
 8012d88:	2800      	cmp	r0, #0
 8012d8a:	d1d5      	bne.n	8012d38 <__sfp+0x24>
 8012d8c:	f7ff ff78 	bl	8012c80 <__sfp_lock_release>
 8012d90:	230c      	movs	r3, #12
 8012d92:	603b      	str	r3, [r7, #0]
 8012d94:	e7ee      	b.n	8012d74 <__sfp+0x60>
 8012d96:	bf00      	nop
 8012d98:	080155d4 	.word	0x080155d4
 8012d9c:	ffff0001 	.word	0xffff0001

08012da0 <_fwalk_reent>:
 8012da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012da4:	4606      	mov	r6, r0
 8012da6:	4688      	mov	r8, r1
 8012da8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012dac:	2700      	movs	r7, #0
 8012dae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012db2:	f1b9 0901 	subs.w	r9, r9, #1
 8012db6:	d505      	bpl.n	8012dc4 <_fwalk_reent+0x24>
 8012db8:	6824      	ldr	r4, [r4, #0]
 8012dba:	2c00      	cmp	r4, #0
 8012dbc:	d1f7      	bne.n	8012dae <_fwalk_reent+0xe>
 8012dbe:	4638      	mov	r0, r7
 8012dc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012dc4:	89ab      	ldrh	r3, [r5, #12]
 8012dc6:	2b01      	cmp	r3, #1
 8012dc8:	d907      	bls.n	8012dda <_fwalk_reent+0x3a>
 8012dca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012dce:	3301      	adds	r3, #1
 8012dd0:	d003      	beq.n	8012dda <_fwalk_reent+0x3a>
 8012dd2:	4629      	mov	r1, r5
 8012dd4:	4630      	mov	r0, r6
 8012dd6:	47c0      	blx	r8
 8012dd8:	4307      	orrs	r7, r0
 8012dda:	3568      	adds	r5, #104	; 0x68
 8012ddc:	e7e9      	b.n	8012db2 <_fwalk_reent+0x12>

08012dde <rshift>:
 8012dde:	6903      	ldr	r3, [r0, #16]
 8012de0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012de4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012de8:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012dec:	f100 0414 	add.w	r4, r0, #20
 8012df0:	dd45      	ble.n	8012e7e <rshift+0xa0>
 8012df2:	f011 011f 	ands.w	r1, r1, #31
 8012df6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012dfa:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012dfe:	d10c      	bne.n	8012e1a <rshift+0x3c>
 8012e00:	f100 0710 	add.w	r7, r0, #16
 8012e04:	4629      	mov	r1, r5
 8012e06:	42b1      	cmp	r1, r6
 8012e08:	d334      	bcc.n	8012e74 <rshift+0x96>
 8012e0a:	1a9b      	subs	r3, r3, r2
 8012e0c:	009b      	lsls	r3, r3, #2
 8012e0e:	1eea      	subs	r2, r5, #3
 8012e10:	4296      	cmp	r6, r2
 8012e12:	bf38      	it	cc
 8012e14:	2300      	movcc	r3, #0
 8012e16:	4423      	add	r3, r4
 8012e18:	e015      	b.n	8012e46 <rshift+0x68>
 8012e1a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012e1e:	f1c1 0820 	rsb	r8, r1, #32
 8012e22:	40cf      	lsrs	r7, r1
 8012e24:	f105 0e04 	add.w	lr, r5, #4
 8012e28:	46a1      	mov	r9, r4
 8012e2a:	4576      	cmp	r6, lr
 8012e2c:	46f4      	mov	ip, lr
 8012e2e:	d815      	bhi.n	8012e5c <rshift+0x7e>
 8012e30:	1a9b      	subs	r3, r3, r2
 8012e32:	009a      	lsls	r2, r3, #2
 8012e34:	3a04      	subs	r2, #4
 8012e36:	3501      	adds	r5, #1
 8012e38:	42ae      	cmp	r6, r5
 8012e3a:	bf38      	it	cc
 8012e3c:	2200      	movcc	r2, #0
 8012e3e:	18a3      	adds	r3, r4, r2
 8012e40:	50a7      	str	r7, [r4, r2]
 8012e42:	b107      	cbz	r7, 8012e46 <rshift+0x68>
 8012e44:	3304      	adds	r3, #4
 8012e46:	1b1a      	subs	r2, r3, r4
 8012e48:	42a3      	cmp	r3, r4
 8012e4a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012e4e:	bf08      	it	eq
 8012e50:	2300      	moveq	r3, #0
 8012e52:	6102      	str	r2, [r0, #16]
 8012e54:	bf08      	it	eq
 8012e56:	6143      	streq	r3, [r0, #20]
 8012e58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012e5c:	f8dc c000 	ldr.w	ip, [ip]
 8012e60:	fa0c fc08 	lsl.w	ip, ip, r8
 8012e64:	ea4c 0707 	orr.w	r7, ip, r7
 8012e68:	f849 7b04 	str.w	r7, [r9], #4
 8012e6c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012e70:	40cf      	lsrs	r7, r1
 8012e72:	e7da      	b.n	8012e2a <rshift+0x4c>
 8012e74:	f851 cb04 	ldr.w	ip, [r1], #4
 8012e78:	f847 cf04 	str.w	ip, [r7, #4]!
 8012e7c:	e7c3      	b.n	8012e06 <rshift+0x28>
 8012e7e:	4623      	mov	r3, r4
 8012e80:	e7e1      	b.n	8012e46 <rshift+0x68>

08012e82 <__hexdig_fun>:
 8012e82:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012e86:	2b09      	cmp	r3, #9
 8012e88:	d802      	bhi.n	8012e90 <__hexdig_fun+0xe>
 8012e8a:	3820      	subs	r0, #32
 8012e8c:	b2c0      	uxtb	r0, r0
 8012e8e:	4770      	bx	lr
 8012e90:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012e94:	2b05      	cmp	r3, #5
 8012e96:	d801      	bhi.n	8012e9c <__hexdig_fun+0x1a>
 8012e98:	3847      	subs	r0, #71	; 0x47
 8012e9a:	e7f7      	b.n	8012e8c <__hexdig_fun+0xa>
 8012e9c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012ea0:	2b05      	cmp	r3, #5
 8012ea2:	d801      	bhi.n	8012ea8 <__hexdig_fun+0x26>
 8012ea4:	3827      	subs	r0, #39	; 0x27
 8012ea6:	e7f1      	b.n	8012e8c <__hexdig_fun+0xa>
 8012ea8:	2000      	movs	r0, #0
 8012eaa:	4770      	bx	lr

08012eac <__gethex>:
 8012eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012eb0:	ed2d 8b02 	vpush	{d8}
 8012eb4:	b089      	sub	sp, #36	; 0x24
 8012eb6:	ee08 0a10 	vmov	s16, r0
 8012eba:	9304      	str	r3, [sp, #16]
 8012ebc:	4bbc      	ldr	r3, [pc, #752]	; (80131b0 <__gethex+0x304>)
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	9301      	str	r3, [sp, #4]
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	468b      	mov	fp, r1
 8012ec6:	4690      	mov	r8, r2
 8012ec8:	f7ed f992 	bl	80001f0 <strlen>
 8012ecc:	9b01      	ldr	r3, [sp, #4]
 8012ece:	f8db 2000 	ldr.w	r2, [fp]
 8012ed2:	4403      	add	r3, r0
 8012ed4:	4682      	mov	sl, r0
 8012ed6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8012eda:	9305      	str	r3, [sp, #20]
 8012edc:	1c93      	adds	r3, r2, #2
 8012ede:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8012ee2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012ee6:	32fe      	adds	r2, #254	; 0xfe
 8012ee8:	18d1      	adds	r1, r2, r3
 8012eea:	461f      	mov	r7, r3
 8012eec:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012ef0:	9100      	str	r1, [sp, #0]
 8012ef2:	2830      	cmp	r0, #48	; 0x30
 8012ef4:	d0f8      	beq.n	8012ee8 <__gethex+0x3c>
 8012ef6:	f7ff ffc4 	bl	8012e82 <__hexdig_fun>
 8012efa:	4604      	mov	r4, r0
 8012efc:	2800      	cmp	r0, #0
 8012efe:	d13a      	bne.n	8012f76 <__gethex+0xca>
 8012f00:	9901      	ldr	r1, [sp, #4]
 8012f02:	4652      	mov	r2, sl
 8012f04:	4638      	mov	r0, r7
 8012f06:	f7fd ff50 	bl	8010daa <strncmp>
 8012f0a:	4605      	mov	r5, r0
 8012f0c:	2800      	cmp	r0, #0
 8012f0e:	d168      	bne.n	8012fe2 <__gethex+0x136>
 8012f10:	f817 000a 	ldrb.w	r0, [r7, sl]
 8012f14:	eb07 060a 	add.w	r6, r7, sl
 8012f18:	f7ff ffb3 	bl	8012e82 <__hexdig_fun>
 8012f1c:	2800      	cmp	r0, #0
 8012f1e:	d062      	beq.n	8012fe6 <__gethex+0x13a>
 8012f20:	4633      	mov	r3, r6
 8012f22:	7818      	ldrb	r0, [r3, #0]
 8012f24:	2830      	cmp	r0, #48	; 0x30
 8012f26:	461f      	mov	r7, r3
 8012f28:	f103 0301 	add.w	r3, r3, #1
 8012f2c:	d0f9      	beq.n	8012f22 <__gethex+0x76>
 8012f2e:	f7ff ffa8 	bl	8012e82 <__hexdig_fun>
 8012f32:	2301      	movs	r3, #1
 8012f34:	fab0 f480 	clz	r4, r0
 8012f38:	0964      	lsrs	r4, r4, #5
 8012f3a:	4635      	mov	r5, r6
 8012f3c:	9300      	str	r3, [sp, #0]
 8012f3e:	463a      	mov	r2, r7
 8012f40:	4616      	mov	r6, r2
 8012f42:	3201      	adds	r2, #1
 8012f44:	7830      	ldrb	r0, [r6, #0]
 8012f46:	f7ff ff9c 	bl	8012e82 <__hexdig_fun>
 8012f4a:	2800      	cmp	r0, #0
 8012f4c:	d1f8      	bne.n	8012f40 <__gethex+0x94>
 8012f4e:	9901      	ldr	r1, [sp, #4]
 8012f50:	4652      	mov	r2, sl
 8012f52:	4630      	mov	r0, r6
 8012f54:	f7fd ff29 	bl	8010daa <strncmp>
 8012f58:	b980      	cbnz	r0, 8012f7c <__gethex+0xd0>
 8012f5a:	b94d      	cbnz	r5, 8012f70 <__gethex+0xc4>
 8012f5c:	eb06 050a 	add.w	r5, r6, sl
 8012f60:	462a      	mov	r2, r5
 8012f62:	4616      	mov	r6, r2
 8012f64:	3201      	adds	r2, #1
 8012f66:	7830      	ldrb	r0, [r6, #0]
 8012f68:	f7ff ff8b 	bl	8012e82 <__hexdig_fun>
 8012f6c:	2800      	cmp	r0, #0
 8012f6e:	d1f8      	bne.n	8012f62 <__gethex+0xb6>
 8012f70:	1bad      	subs	r5, r5, r6
 8012f72:	00ad      	lsls	r5, r5, #2
 8012f74:	e004      	b.n	8012f80 <__gethex+0xd4>
 8012f76:	2400      	movs	r4, #0
 8012f78:	4625      	mov	r5, r4
 8012f7a:	e7e0      	b.n	8012f3e <__gethex+0x92>
 8012f7c:	2d00      	cmp	r5, #0
 8012f7e:	d1f7      	bne.n	8012f70 <__gethex+0xc4>
 8012f80:	7833      	ldrb	r3, [r6, #0]
 8012f82:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012f86:	2b50      	cmp	r3, #80	; 0x50
 8012f88:	d13b      	bne.n	8013002 <__gethex+0x156>
 8012f8a:	7873      	ldrb	r3, [r6, #1]
 8012f8c:	2b2b      	cmp	r3, #43	; 0x2b
 8012f8e:	d02c      	beq.n	8012fea <__gethex+0x13e>
 8012f90:	2b2d      	cmp	r3, #45	; 0x2d
 8012f92:	d02e      	beq.n	8012ff2 <__gethex+0x146>
 8012f94:	1c71      	adds	r1, r6, #1
 8012f96:	f04f 0900 	mov.w	r9, #0
 8012f9a:	7808      	ldrb	r0, [r1, #0]
 8012f9c:	f7ff ff71 	bl	8012e82 <__hexdig_fun>
 8012fa0:	1e43      	subs	r3, r0, #1
 8012fa2:	b2db      	uxtb	r3, r3
 8012fa4:	2b18      	cmp	r3, #24
 8012fa6:	d82c      	bhi.n	8013002 <__gethex+0x156>
 8012fa8:	f1a0 0210 	sub.w	r2, r0, #16
 8012fac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012fb0:	f7ff ff67 	bl	8012e82 <__hexdig_fun>
 8012fb4:	1e43      	subs	r3, r0, #1
 8012fb6:	b2db      	uxtb	r3, r3
 8012fb8:	2b18      	cmp	r3, #24
 8012fba:	d91d      	bls.n	8012ff8 <__gethex+0x14c>
 8012fbc:	f1b9 0f00 	cmp.w	r9, #0
 8012fc0:	d000      	beq.n	8012fc4 <__gethex+0x118>
 8012fc2:	4252      	negs	r2, r2
 8012fc4:	4415      	add	r5, r2
 8012fc6:	f8cb 1000 	str.w	r1, [fp]
 8012fca:	b1e4      	cbz	r4, 8013006 <__gethex+0x15a>
 8012fcc:	9b00      	ldr	r3, [sp, #0]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	bf14      	ite	ne
 8012fd2:	2700      	movne	r7, #0
 8012fd4:	2706      	moveq	r7, #6
 8012fd6:	4638      	mov	r0, r7
 8012fd8:	b009      	add	sp, #36	; 0x24
 8012fda:	ecbd 8b02 	vpop	{d8}
 8012fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fe2:	463e      	mov	r6, r7
 8012fe4:	4625      	mov	r5, r4
 8012fe6:	2401      	movs	r4, #1
 8012fe8:	e7ca      	b.n	8012f80 <__gethex+0xd4>
 8012fea:	f04f 0900 	mov.w	r9, #0
 8012fee:	1cb1      	adds	r1, r6, #2
 8012ff0:	e7d3      	b.n	8012f9a <__gethex+0xee>
 8012ff2:	f04f 0901 	mov.w	r9, #1
 8012ff6:	e7fa      	b.n	8012fee <__gethex+0x142>
 8012ff8:	230a      	movs	r3, #10
 8012ffa:	fb03 0202 	mla	r2, r3, r2, r0
 8012ffe:	3a10      	subs	r2, #16
 8013000:	e7d4      	b.n	8012fac <__gethex+0x100>
 8013002:	4631      	mov	r1, r6
 8013004:	e7df      	b.n	8012fc6 <__gethex+0x11a>
 8013006:	1bf3      	subs	r3, r6, r7
 8013008:	3b01      	subs	r3, #1
 801300a:	4621      	mov	r1, r4
 801300c:	2b07      	cmp	r3, #7
 801300e:	dc0b      	bgt.n	8013028 <__gethex+0x17c>
 8013010:	ee18 0a10 	vmov	r0, s16
 8013014:	f000 faf8 	bl	8013608 <_Balloc>
 8013018:	4604      	mov	r4, r0
 801301a:	b940      	cbnz	r0, 801302e <__gethex+0x182>
 801301c:	4b65      	ldr	r3, [pc, #404]	; (80131b4 <__gethex+0x308>)
 801301e:	4602      	mov	r2, r0
 8013020:	21de      	movs	r1, #222	; 0xde
 8013022:	4865      	ldr	r0, [pc, #404]	; (80131b8 <__gethex+0x30c>)
 8013024:	f001 ff64 	bl	8014ef0 <__assert_func>
 8013028:	3101      	adds	r1, #1
 801302a:	105b      	asrs	r3, r3, #1
 801302c:	e7ee      	b.n	801300c <__gethex+0x160>
 801302e:	f100 0914 	add.w	r9, r0, #20
 8013032:	f04f 0b00 	mov.w	fp, #0
 8013036:	f1ca 0301 	rsb	r3, sl, #1
 801303a:	f8cd 9008 	str.w	r9, [sp, #8]
 801303e:	f8cd b000 	str.w	fp, [sp]
 8013042:	9306      	str	r3, [sp, #24]
 8013044:	42b7      	cmp	r7, r6
 8013046:	d340      	bcc.n	80130ca <__gethex+0x21e>
 8013048:	9802      	ldr	r0, [sp, #8]
 801304a:	9b00      	ldr	r3, [sp, #0]
 801304c:	f840 3b04 	str.w	r3, [r0], #4
 8013050:	eba0 0009 	sub.w	r0, r0, r9
 8013054:	1080      	asrs	r0, r0, #2
 8013056:	0146      	lsls	r6, r0, #5
 8013058:	6120      	str	r0, [r4, #16]
 801305a:	4618      	mov	r0, r3
 801305c:	f000 fbca 	bl	80137f4 <__hi0bits>
 8013060:	1a30      	subs	r0, r6, r0
 8013062:	f8d8 6000 	ldr.w	r6, [r8]
 8013066:	42b0      	cmp	r0, r6
 8013068:	dd63      	ble.n	8013132 <__gethex+0x286>
 801306a:	1b87      	subs	r7, r0, r6
 801306c:	4639      	mov	r1, r7
 801306e:	4620      	mov	r0, r4
 8013070:	f000 ff64 	bl	8013f3c <__any_on>
 8013074:	4682      	mov	sl, r0
 8013076:	b1a8      	cbz	r0, 80130a4 <__gethex+0x1f8>
 8013078:	1e7b      	subs	r3, r7, #1
 801307a:	1159      	asrs	r1, r3, #5
 801307c:	f003 021f 	and.w	r2, r3, #31
 8013080:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8013084:	f04f 0a01 	mov.w	sl, #1
 8013088:	fa0a f202 	lsl.w	r2, sl, r2
 801308c:	420a      	tst	r2, r1
 801308e:	d009      	beq.n	80130a4 <__gethex+0x1f8>
 8013090:	4553      	cmp	r3, sl
 8013092:	dd05      	ble.n	80130a0 <__gethex+0x1f4>
 8013094:	1eb9      	subs	r1, r7, #2
 8013096:	4620      	mov	r0, r4
 8013098:	f000 ff50 	bl	8013f3c <__any_on>
 801309c:	2800      	cmp	r0, #0
 801309e:	d145      	bne.n	801312c <__gethex+0x280>
 80130a0:	f04f 0a02 	mov.w	sl, #2
 80130a4:	4639      	mov	r1, r7
 80130a6:	4620      	mov	r0, r4
 80130a8:	f7ff fe99 	bl	8012dde <rshift>
 80130ac:	443d      	add	r5, r7
 80130ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80130b2:	42ab      	cmp	r3, r5
 80130b4:	da4c      	bge.n	8013150 <__gethex+0x2a4>
 80130b6:	ee18 0a10 	vmov	r0, s16
 80130ba:	4621      	mov	r1, r4
 80130bc:	f000 fae4 	bl	8013688 <_Bfree>
 80130c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80130c2:	2300      	movs	r3, #0
 80130c4:	6013      	str	r3, [r2, #0]
 80130c6:	27a3      	movs	r7, #163	; 0xa3
 80130c8:	e785      	b.n	8012fd6 <__gethex+0x12a>
 80130ca:	1e73      	subs	r3, r6, #1
 80130cc:	9a05      	ldr	r2, [sp, #20]
 80130ce:	9303      	str	r3, [sp, #12]
 80130d0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80130d4:	4293      	cmp	r3, r2
 80130d6:	d019      	beq.n	801310c <__gethex+0x260>
 80130d8:	f1bb 0f20 	cmp.w	fp, #32
 80130dc:	d107      	bne.n	80130ee <__gethex+0x242>
 80130de:	9b02      	ldr	r3, [sp, #8]
 80130e0:	9a00      	ldr	r2, [sp, #0]
 80130e2:	f843 2b04 	str.w	r2, [r3], #4
 80130e6:	9302      	str	r3, [sp, #8]
 80130e8:	2300      	movs	r3, #0
 80130ea:	9300      	str	r3, [sp, #0]
 80130ec:	469b      	mov	fp, r3
 80130ee:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80130f2:	f7ff fec6 	bl	8012e82 <__hexdig_fun>
 80130f6:	9b00      	ldr	r3, [sp, #0]
 80130f8:	f000 000f 	and.w	r0, r0, #15
 80130fc:	fa00 f00b 	lsl.w	r0, r0, fp
 8013100:	4303      	orrs	r3, r0
 8013102:	9300      	str	r3, [sp, #0]
 8013104:	f10b 0b04 	add.w	fp, fp, #4
 8013108:	9b03      	ldr	r3, [sp, #12]
 801310a:	e00d      	b.n	8013128 <__gethex+0x27c>
 801310c:	9b03      	ldr	r3, [sp, #12]
 801310e:	9a06      	ldr	r2, [sp, #24]
 8013110:	4413      	add	r3, r2
 8013112:	42bb      	cmp	r3, r7
 8013114:	d3e0      	bcc.n	80130d8 <__gethex+0x22c>
 8013116:	4618      	mov	r0, r3
 8013118:	9901      	ldr	r1, [sp, #4]
 801311a:	9307      	str	r3, [sp, #28]
 801311c:	4652      	mov	r2, sl
 801311e:	f7fd fe44 	bl	8010daa <strncmp>
 8013122:	9b07      	ldr	r3, [sp, #28]
 8013124:	2800      	cmp	r0, #0
 8013126:	d1d7      	bne.n	80130d8 <__gethex+0x22c>
 8013128:	461e      	mov	r6, r3
 801312a:	e78b      	b.n	8013044 <__gethex+0x198>
 801312c:	f04f 0a03 	mov.w	sl, #3
 8013130:	e7b8      	b.n	80130a4 <__gethex+0x1f8>
 8013132:	da0a      	bge.n	801314a <__gethex+0x29e>
 8013134:	1a37      	subs	r7, r6, r0
 8013136:	4621      	mov	r1, r4
 8013138:	ee18 0a10 	vmov	r0, s16
 801313c:	463a      	mov	r2, r7
 801313e:	f000 fcbf 	bl	8013ac0 <__lshift>
 8013142:	1bed      	subs	r5, r5, r7
 8013144:	4604      	mov	r4, r0
 8013146:	f100 0914 	add.w	r9, r0, #20
 801314a:	f04f 0a00 	mov.w	sl, #0
 801314e:	e7ae      	b.n	80130ae <__gethex+0x202>
 8013150:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8013154:	42a8      	cmp	r0, r5
 8013156:	dd72      	ble.n	801323e <__gethex+0x392>
 8013158:	1b45      	subs	r5, r0, r5
 801315a:	42ae      	cmp	r6, r5
 801315c:	dc36      	bgt.n	80131cc <__gethex+0x320>
 801315e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013162:	2b02      	cmp	r3, #2
 8013164:	d02a      	beq.n	80131bc <__gethex+0x310>
 8013166:	2b03      	cmp	r3, #3
 8013168:	d02c      	beq.n	80131c4 <__gethex+0x318>
 801316a:	2b01      	cmp	r3, #1
 801316c:	d115      	bne.n	801319a <__gethex+0x2ee>
 801316e:	42ae      	cmp	r6, r5
 8013170:	d113      	bne.n	801319a <__gethex+0x2ee>
 8013172:	2e01      	cmp	r6, #1
 8013174:	d10b      	bne.n	801318e <__gethex+0x2e2>
 8013176:	9a04      	ldr	r2, [sp, #16]
 8013178:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801317c:	6013      	str	r3, [r2, #0]
 801317e:	2301      	movs	r3, #1
 8013180:	6123      	str	r3, [r4, #16]
 8013182:	f8c9 3000 	str.w	r3, [r9]
 8013186:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013188:	2762      	movs	r7, #98	; 0x62
 801318a:	601c      	str	r4, [r3, #0]
 801318c:	e723      	b.n	8012fd6 <__gethex+0x12a>
 801318e:	1e71      	subs	r1, r6, #1
 8013190:	4620      	mov	r0, r4
 8013192:	f000 fed3 	bl	8013f3c <__any_on>
 8013196:	2800      	cmp	r0, #0
 8013198:	d1ed      	bne.n	8013176 <__gethex+0x2ca>
 801319a:	ee18 0a10 	vmov	r0, s16
 801319e:	4621      	mov	r1, r4
 80131a0:	f000 fa72 	bl	8013688 <_Bfree>
 80131a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80131a6:	2300      	movs	r3, #0
 80131a8:	6013      	str	r3, [r2, #0]
 80131aa:	2750      	movs	r7, #80	; 0x50
 80131ac:	e713      	b.n	8012fd6 <__gethex+0x12a>
 80131ae:	bf00      	nop
 80131b0:	080157c0 	.word	0x080157c0
 80131b4:	080156e3 	.word	0x080156e3
 80131b8:	08015754 	.word	0x08015754
 80131bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d1eb      	bne.n	801319a <__gethex+0x2ee>
 80131c2:	e7d8      	b.n	8013176 <__gethex+0x2ca>
 80131c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d1d5      	bne.n	8013176 <__gethex+0x2ca>
 80131ca:	e7e6      	b.n	801319a <__gethex+0x2ee>
 80131cc:	1e6f      	subs	r7, r5, #1
 80131ce:	f1ba 0f00 	cmp.w	sl, #0
 80131d2:	d131      	bne.n	8013238 <__gethex+0x38c>
 80131d4:	b127      	cbz	r7, 80131e0 <__gethex+0x334>
 80131d6:	4639      	mov	r1, r7
 80131d8:	4620      	mov	r0, r4
 80131da:	f000 feaf 	bl	8013f3c <__any_on>
 80131de:	4682      	mov	sl, r0
 80131e0:	117b      	asrs	r3, r7, #5
 80131e2:	2101      	movs	r1, #1
 80131e4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80131e8:	f007 071f 	and.w	r7, r7, #31
 80131ec:	fa01 f707 	lsl.w	r7, r1, r7
 80131f0:	421f      	tst	r7, r3
 80131f2:	4629      	mov	r1, r5
 80131f4:	4620      	mov	r0, r4
 80131f6:	bf18      	it	ne
 80131f8:	f04a 0a02 	orrne.w	sl, sl, #2
 80131fc:	1b76      	subs	r6, r6, r5
 80131fe:	f7ff fdee 	bl	8012dde <rshift>
 8013202:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013206:	2702      	movs	r7, #2
 8013208:	f1ba 0f00 	cmp.w	sl, #0
 801320c:	d048      	beq.n	80132a0 <__gethex+0x3f4>
 801320e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013212:	2b02      	cmp	r3, #2
 8013214:	d015      	beq.n	8013242 <__gethex+0x396>
 8013216:	2b03      	cmp	r3, #3
 8013218:	d017      	beq.n	801324a <__gethex+0x39e>
 801321a:	2b01      	cmp	r3, #1
 801321c:	d109      	bne.n	8013232 <__gethex+0x386>
 801321e:	f01a 0f02 	tst.w	sl, #2
 8013222:	d006      	beq.n	8013232 <__gethex+0x386>
 8013224:	f8d9 0000 	ldr.w	r0, [r9]
 8013228:	ea4a 0a00 	orr.w	sl, sl, r0
 801322c:	f01a 0f01 	tst.w	sl, #1
 8013230:	d10e      	bne.n	8013250 <__gethex+0x3a4>
 8013232:	f047 0710 	orr.w	r7, r7, #16
 8013236:	e033      	b.n	80132a0 <__gethex+0x3f4>
 8013238:	f04f 0a01 	mov.w	sl, #1
 801323c:	e7d0      	b.n	80131e0 <__gethex+0x334>
 801323e:	2701      	movs	r7, #1
 8013240:	e7e2      	b.n	8013208 <__gethex+0x35c>
 8013242:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013244:	f1c3 0301 	rsb	r3, r3, #1
 8013248:	9315      	str	r3, [sp, #84]	; 0x54
 801324a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801324c:	2b00      	cmp	r3, #0
 801324e:	d0f0      	beq.n	8013232 <__gethex+0x386>
 8013250:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013254:	f104 0314 	add.w	r3, r4, #20
 8013258:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801325c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013260:	f04f 0c00 	mov.w	ip, #0
 8013264:	4618      	mov	r0, r3
 8013266:	f853 2b04 	ldr.w	r2, [r3], #4
 801326a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801326e:	d01c      	beq.n	80132aa <__gethex+0x3fe>
 8013270:	3201      	adds	r2, #1
 8013272:	6002      	str	r2, [r0, #0]
 8013274:	2f02      	cmp	r7, #2
 8013276:	f104 0314 	add.w	r3, r4, #20
 801327a:	d13f      	bne.n	80132fc <__gethex+0x450>
 801327c:	f8d8 2000 	ldr.w	r2, [r8]
 8013280:	3a01      	subs	r2, #1
 8013282:	42b2      	cmp	r2, r6
 8013284:	d10a      	bne.n	801329c <__gethex+0x3f0>
 8013286:	1171      	asrs	r1, r6, #5
 8013288:	2201      	movs	r2, #1
 801328a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801328e:	f006 061f 	and.w	r6, r6, #31
 8013292:	fa02 f606 	lsl.w	r6, r2, r6
 8013296:	421e      	tst	r6, r3
 8013298:	bf18      	it	ne
 801329a:	4617      	movne	r7, r2
 801329c:	f047 0720 	orr.w	r7, r7, #32
 80132a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80132a2:	601c      	str	r4, [r3, #0]
 80132a4:	9b04      	ldr	r3, [sp, #16]
 80132a6:	601d      	str	r5, [r3, #0]
 80132a8:	e695      	b.n	8012fd6 <__gethex+0x12a>
 80132aa:	4299      	cmp	r1, r3
 80132ac:	f843 cc04 	str.w	ip, [r3, #-4]
 80132b0:	d8d8      	bhi.n	8013264 <__gethex+0x3b8>
 80132b2:	68a3      	ldr	r3, [r4, #8]
 80132b4:	459b      	cmp	fp, r3
 80132b6:	db19      	blt.n	80132ec <__gethex+0x440>
 80132b8:	6861      	ldr	r1, [r4, #4]
 80132ba:	ee18 0a10 	vmov	r0, s16
 80132be:	3101      	adds	r1, #1
 80132c0:	f000 f9a2 	bl	8013608 <_Balloc>
 80132c4:	4681      	mov	r9, r0
 80132c6:	b918      	cbnz	r0, 80132d0 <__gethex+0x424>
 80132c8:	4b1a      	ldr	r3, [pc, #104]	; (8013334 <__gethex+0x488>)
 80132ca:	4602      	mov	r2, r0
 80132cc:	2184      	movs	r1, #132	; 0x84
 80132ce:	e6a8      	b.n	8013022 <__gethex+0x176>
 80132d0:	6922      	ldr	r2, [r4, #16]
 80132d2:	3202      	adds	r2, #2
 80132d4:	f104 010c 	add.w	r1, r4, #12
 80132d8:	0092      	lsls	r2, r2, #2
 80132da:	300c      	adds	r0, #12
 80132dc:	f000 f986 	bl	80135ec <memcpy>
 80132e0:	4621      	mov	r1, r4
 80132e2:	ee18 0a10 	vmov	r0, s16
 80132e6:	f000 f9cf 	bl	8013688 <_Bfree>
 80132ea:	464c      	mov	r4, r9
 80132ec:	6923      	ldr	r3, [r4, #16]
 80132ee:	1c5a      	adds	r2, r3, #1
 80132f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80132f4:	6122      	str	r2, [r4, #16]
 80132f6:	2201      	movs	r2, #1
 80132f8:	615a      	str	r2, [r3, #20]
 80132fa:	e7bb      	b.n	8013274 <__gethex+0x3c8>
 80132fc:	6922      	ldr	r2, [r4, #16]
 80132fe:	455a      	cmp	r2, fp
 8013300:	dd0b      	ble.n	801331a <__gethex+0x46e>
 8013302:	2101      	movs	r1, #1
 8013304:	4620      	mov	r0, r4
 8013306:	f7ff fd6a 	bl	8012dde <rshift>
 801330a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801330e:	3501      	adds	r5, #1
 8013310:	42ab      	cmp	r3, r5
 8013312:	f6ff aed0 	blt.w	80130b6 <__gethex+0x20a>
 8013316:	2701      	movs	r7, #1
 8013318:	e7c0      	b.n	801329c <__gethex+0x3f0>
 801331a:	f016 061f 	ands.w	r6, r6, #31
 801331e:	d0fa      	beq.n	8013316 <__gethex+0x46a>
 8013320:	449a      	add	sl, r3
 8013322:	f1c6 0620 	rsb	r6, r6, #32
 8013326:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801332a:	f000 fa63 	bl	80137f4 <__hi0bits>
 801332e:	42b0      	cmp	r0, r6
 8013330:	dbe7      	blt.n	8013302 <__gethex+0x456>
 8013332:	e7f0      	b.n	8013316 <__gethex+0x46a>
 8013334:	080156e3 	.word	0x080156e3

08013338 <L_shift>:
 8013338:	f1c2 0208 	rsb	r2, r2, #8
 801333c:	0092      	lsls	r2, r2, #2
 801333e:	b570      	push	{r4, r5, r6, lr}
 8013340:	f1c2 0620 	rsb	r6, r2, #32
 8013344:	6843      	ldr	r3, [r0, #4]
 8013346:	6804      	ldr	r4, [r0, #0]
 8013348:	fa03 f506 	lsl.w	r5, r3, r6
 801334c:	432c      	orrs	r4, r5
 801334e:	40d3      	lsrs	r3, r2
 8013350:	6004      	str	r4, [r0, #0]
 8013352:	f840 3f04 	str.w	r3, [r0, #4]!
 8013356:	4288      	cmp	r0, r1
 8013358:	d3f4      	bcc.n	8013344 <L_shift+0xc>
 801335a:	bd70      	pop	{r4, r5, r6, pc}

0801335c <__match>:
 801335c:	b530      	push	{r4, r5, lr}
 801335e:	6803      	ldr	r3, [r0, #0]
 8013360:	3301      	adds	r3, #1
 8013362:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013366:	b914      	cbnz	r4, 801336e <__match+0x12>
 8013368:	6003      	str	r3, [r0, #0]
 801336a:	2001      	movs	r0, #1
 801336c:	bd30      	pop	{r4, r5, pc}
 801336e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013372:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8013376:	2d19      	cmp	r5, #25
 8013378:	bf98      	it	ls
 801337a:	3220      	addls	r2, #32
 801337c:	42a2      	cmp	r2, r4
 801337e:	d0f0      	beq.n	8013362 <__match+0x6>
 8013380:	2000      	movs	r0, #0
 8013382:	e7f3      	b.n	801336c <__match+0x10>

08013384 <__hexnan>:
 8013384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013388:	680b      	ldr	r3, [r1, #0]
 801338a:	6801      	ldr	r1, [r0, #0]
 801338c:	115e      	asrs	r6, r3, #5
 801338e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013392:	f013 031f 	ands.w	r3, r3, #31
 8013396:	b087      	sub	sp, #28
 8013398:	bf18      	it	ne
 801339a:	3604      	addne	r6, #4
 801339c:	2500      	movs	r5, #0
 801339e:	1f37      	subs	r7, r6, #4
 80133a0:	4682      	mov	sl, r0
 80133a2:	4690      	mov	r8, r2
 80133a4:	9301      	str	r3, [sp, #4]
 80133a6:	f846 5c04 	str.w	r5, [r6, #-4]
 80133aa:	46b9      	mov	r9, r7
 80133ac:	463c      	mov	r4, r7
 80133ae:	9502      	str	r5, [sp, #8]
 80133b0:	46ab      	mov	fp, r5
 80133b2:	784a      	ldrb	r2, [r1, #1]
 80133b4:	1c4b      	adds	r3, r1, #1
 80133b6:	9303      	str	r3, [sp, #12]
 80133b8:	b342      	cbz	r2, 801340c <__hexnan+0x88>
 80133ba:	4610      	mov	r0, r2
 80133bc:	9105      	str	r1, [sp, #20]
 80133be:	9204      	str	r2, [sp, #16]
 80133c0:	f7ff fd5f 	bl	8012e82 <__hexdig_fun>
 80133c4:	2800      	cmp	r0, #0
 80133c6:	d14f      	bne.n	8013468 <__hexnan+0xe4>
 80133c8:	9a04      	ldr	r2, [sp, #16]
 80133ca:	9905      	ldr	r1, [sp, #20]
 80133cc:	2a20      	cmp	r2, #32
 80133ce:	d818      	bhi.n	8013402 <__hexnan+0x7e>
 80133d0:	9b02      	ldr	r3, [sp, #8]
 80133d2:	459b      	cmp	fp, r3
 80133d4:	dd13      	ble.n	80133fe <__hexnan+0x7a>
 80133d6:	454c      	cmp	r4, r9
 80133d8:	d206      	bcs.n	80133e8 <__hexnan+0x64>
 80133da:	2d07      	cmp	r5, #7
 80133dc:	dc04      	bgt.n	80133e8 <__hexnan+0x64>
 80133de:	462a      	mov	r2, r5
 80133e0:	4649      	mov	r1, r9
 80133e2:	4620      	mov	r0, r4
 80133e4:	f7ff ffa8 	bl	8013338 <L_shift>
 80133e8:	4544      	cmp	r4, r8
 80133ea:	d950      	bls.n	801348e <__hexnan+0x10a>
 80133ec:	2300      	movs	r3, #0
 80133ee:	f1a4 0904 	sub.w	r9, r4, #4
 80133f2:	f844 3c04 	str.w	r3, [r4, #-4]
 80133f6:	f8cd b008 	str.w	fp, [sp, #8]
 80133fa:	464c      	mov	r4, r9
 80133fc:	461d      	mov	r5, r3
 80133fe:	9903      	ldr	r1, [sp, #12]
 8013400:	e7d7      	b.n	80133b2 <__hexnan+0x2e>
 8013402:	2a29      	cmp	r2, #41	; 0x29
 8013404:	d156      	bne.n	80134b4 <__hexnan+0x130>
 8013406:	3102      	adds	r1, #2
 8013408:	f8ca 1000 	str.w	r1, [sl]
 801340c:	f1bb 0f00 	cmp.w	fp, #0
 8013410:	d050      	beq.n	80134b4 <__hexnan+0x130>
 8013412:	454c      	cmp	r4, r9
 8013414:	d206      	bcs.n	8013424 <__hexnan+0xa0>
 8013416:	2d07      	cmp	r5, #7
 8013418:	dc04      	bgt.n	8013424 <__hexnan+0xa0>
 801341a:	462a      	mov	r2, r5
 801341c:	4649      	mov	r1, r9
 801341e:	4620      	mov	r0, r4
 8013420:	f7ff ff8a 	bl	8013338 <L_shift>
 8013424:	4544      	cmp	r4, r8
 8013426:	d934      	bls.n	8013492 <__hexnan+0x10e>
 8013428:	f1a8 0204 	sub.w	r2, r8, #4
 801342c:	4623      	mov	r3, r4
 801342e:	f853 1b04 	ldr.w	r1, [r3], #4
 8013432:	f842 1f04 	str.w	r1, [r2, #4]!
 8013436:	429f      	cmp	r7, r3
 8013438:	d2f9      	bcs.n	801342e <__hexnan+0xaa>
 801343a:	1b3b      	subs	r3, r7, r4
 801343c:	f023 0303 	bic.w	r3, r3, #3
 8013440:	3304      	adds	r3, #4
 8013442:	3401      	adds	r4, #1
 8013444:	3e03      	subs	r6, #3
 8013446:	42b4      	cmp	r4, r6
 8013448:	bf88      	it	hi
 801344a:	2304      	movhi	r3, #4
 801344c:	4443      	add	r3, r8
 801344e:	2200      	movs	r2, #0
 8013450:	f843 2b04 	str.w	r2, [r3], #4
 8013454:	429f      	cmp	r7, r3
 8013456:	d2fb      	bcs.n	8013450 <__hexnan+0xcc>
 8013458:	683b      	ldr	r3, [r7, #0]
 801345a:	b91b      	cbnz	r3, 8013464 <__hexnan+0xe0>
 801345c:	4547      	cmp	r7, r8
 801345e:	d127      	bne.n	80134b0 <__hexnan+0x12c>
 8013460:	2301      	movs	r3, #1
 8013462:	603b      	str	r3, [r7, #0]
 8013464:	2005      	movs	r0, #5
 8013466:	e026      	b.n	80134b6 <__hexnan+0x132>
 8013468:	3501      	adds	r5, #1
 801346a:	2d08      	cmp	r5, #8
 801346c:	f10b 0b01 	add.w	fp, fp, #1
 8013470:	dd06      	ble.n	8013480 <__hexnan+0xfc>
 8013472:	4544      	cmp	r4, r8
 8013474:	d9c3      	bls.n	80133fe <__hexnan+0x7a>
 8013476:	2300      	movs	r3, #0
 8013478:	f844 3c04 	str.w	r3, [r4, #-4]
 801347c:	2501      	movs	r5, #1
 801347e:	3c04      	subs	r4, #4
 8013480:	6822      	ldr	r2, [r4, #0]
 8013482:	f000 000f 	and.w	r0, r0, #15
 8013486:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801348a:	6022      	str	r2, [r4, #0]
 801348c:	e7b7      	b.n	80133fe <__hexnan+0x7a>
 801348e:	2508      	movs	r5, #8
 8013490:	e7b5      	b.n	80133fe <__hexnan+0x7a>
 8013492:	9b01      	ldr	r3, [sp, #4]
 8013494:	2b00      	cmp	r3, #0
 8013496:	d0df      	beq.n	8013458 <__hexnan+0xd4>
 8013498:	f04f 32ff 	mov.w	r2, #4294967295
 801349c:	f1c3 0320 	rsb	r3, r3, #32
 80134a0:	fa22 f303 	lsr.w	r3, r2, r3
 80134a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80134a8:	401a      	ands	r2, r3
 80134aa:	f846 2c04 	str.w	r2, [r6, #-4]
 80134ae:	e7d3      	b.n	8013458 <__hexnan+0xd4>
 80134b0:	3f04      	subs	r7, #4
 80134b2:	e7d1      	b.n	8013458 <__hexnan+0xd4>
 80134b4:	2004      	movs	r0, #4
 80134b6:	b007      	add	sp, #28
 80134b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080134bc <_localeconv_r>:
 80134bc:	4800      	ldr	r0, [pc, #0]	; (80134c0 <_localeconv_r+0x4>)
 80134be:	4770      	bx	lr
 80134c0:	200002f0 	.word	0x200002f0

080134c4 <__retarget_lock_init_recursive>:
 80134c4:	4770      	bx	lr

080134c6 <__retarget_lock_acquire_recursive>:
 80134c6:	4770      	bx	lr

080134c8 <__retarget_lock_release_recursive>:
 80134c8:	4770      	bx	lr
	...

080134cc <_lseek_r>:
 80134cc:	b538      	push	{r3, r4, r5, lr}
 80134ce:	4d07      	ldr	r5, [pc, #28]	; (80134ec <_lseek_r+0x20>)
 80134d0:	4604      	mov	r4, r0
 80134d2:	4608      	mov	r0, r1
 80134d4:	4611      	mov	r1, r2
 80134d6:	2200      	movs	r2, #0
 80134d8:	602a      	str	r2, [r5, #0]
 80134da:	461a      	mov	r2, r3
 80134dc:	f7f0 f9ec 	bl	80038b8 <_lseek>
 80134e0:	1c43      	adds	r3, r0, #1
 80134e2:	d102      	bne.n	80134ea <_lseek_r+0x1e>
 80134e4:	682b      	ldr	r3, [r5, #0]
 80134e6:	b103      	cbz	r3, 80134ea <_lseek_r+0x1e>
 80134e8:	6023      	str	r3, [r4, #0]
 80134ea:	bd38      	pop	{r3, r4, r5, pc}
 80134ec:	20003670 	.word	0x20003670

080134f0 <__swhatbuf_r>:
 80134f0:	b570      	push	{r4, r5, r6, lr}
 80134f2:	460e      	mov	r6, r1
 80134f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134f8:	2900      	cmp	r1, #0
 80134fa:	b096      	sub	sp, #88	; 0x58
 80134fc:	4614      	mov	r4, r2
 80134fe:	461d      	mov	r5, r3
 8013500:	da07      	bge.n	8013512 <__swhatbuf_r+0x22>
 8013502:	2300      	movs	r3, #0
 8013504:	602b      	str	r3, [r5, #0]
 8013506:	89b3      	ldrh	r3, [r6, #12]
 8013508:	061a      	lsls	r2, r3, #24
 801350a:	d410      	bmi.n	801352e <__swhatbuf_r+0x3e>
 801350c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013510:	e00e      	b.n	8013530 <__swhatbuf_r+0x40>
 8013512:	466a      	mov	r2, sp
 8013514:	f001 fd1c 	bl	8014f50 <_fstat_r>
 8013518:	2800      	cmp	r0, #0
 801351a:	dbf2      	blt.n	8013502 <__swhatbuf_r+0x12>
 801351c:	9a01      	ldr	r2, [sp, #4]
 801351e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013522:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013526:	425a      	negs	r2, r3
 8013528:	415a      	adcs	r2, r3
 801352a:	602a      	str	r2, [r5, #0]
 801352c:	e7ee      	b.n	801350c <__swhatbuf_r+0x1c>
 801352e:	2340      	movs	r3, #64	; 0x40
 8013530:	2000      	movs	r0, #0
 8013532:	6023      	str	r3, [r4, #0]
 8013534:	b016      	add	sp, #88	; 0x58
 8013536:	bd70      	pop	{r4, r5, r6, pc}

08013538 <__smakebuf_r>:
 8013538:	898b      	ldrh	r3, [r1, #12]
 801353a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801353c:	079d      	lsls	r5, r3, #30
 801353e:	4606      	mov	r6, r0
 8013540:	460c      	mov	r4, r1
 8013542:	d507      	bpl.n	8013554 <__smakebuf_r+0x1c>
 8013544:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013548:	6023      	str	r3, [r4, #0]
 801354a:	6123      	str	r3, [r4, #16]
 801354c:	2301      	movs	r3, #1
 801354e:	6163      	str	r3, [r4, #20]
 8013550:	b002      	add	sp, #8
 8013552:	bd70      	pop	{r4, r5, r6, pc}
 8013554:	ab01      	add	r3, sp, #4
 8013556:	466a      	mov	r2, sp
 8013558:	f7ff ffca 	bl	80134f0 <__swhatbuf_r>
 801355c:	9900      	ldr	r1, [sp, #0]
 801355e:	4605      	mov	r5, r0
 8013560:	4630      	mov	r0, r6
 8013562:	f000 fd6b 	bl	801403c <_malloc_r>
 8013566:	b948      	cbnz	r0, 801357c <__smakebuf_r+0x44>
 8013568:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801356c:	059a      	lsls	r2, r3, #22
 801356e:	d4ef      	bmi.n	8013550 <__smakebuf_r+0x18>
 8013570:	f023 0303 	bic.w	r3, r3, #3
 8013574:	f043 0302 	orr.w	r3, r3, #2
 8013578:	81a3      	strh	r3, [r4, #12]
 801357a:	e7e3      	b.n	8013544 <__smakebuf_r+0xc>
 801357c:	4b0d      	ldr	r3, [pc, #52]	; (80135b4 <__smakebuf_r+0x7c>)
 801357e:	62b3      	str	r3, [r6, #40]	; 0x28
 8013580:	89a3      	ldrh	r3, [r4, #12]
 8013582:	6020      	str	r0, [r4, #0]
 8013584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013588:	81a3      	strh	r3, [r4, #12]
 801358a:	9b00      	ldr	r3, [sp, #0]
 801358c:	6163      	str	r3, [r4, #20]
 801358e:	9b01      	ldr	r3, [sp, #4]
 8013590:	6120      	str	r0, [r4, #16]
 8013592:	b15b      	cbz	r3, 80135ac <__smakebuf_r+0x74>
 8013594:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013598:	4630      	mov	r0, r6
 801359a:	f001 fceb 	bl	8014f74 <_isatty_r>
 801359e:	b128      	cbz	r0, 80135ac <__smakebuf_r+0x74>
 80135a0:	89a3      	ldrh	r3, [r4, #12]
 80135a2:	f023 0303 	bic.w	r3, r3, #3
 80135a6:	f043 0301 	orr.w	r3, r3, #1
 80135aa:	81a3      	strh	r3, [r4, #12]
 80135ac:	89a0      	ldrh	r0, [r4, #12]
 80135ae:	4305      	orrs	r5, r0
 80135b0:	81a5      	strh	r5, [r4, #12]
 80135b2:	e7cd      	b.n	8013550 <__smakebuf_r+0x18>
 80135b4:	08012c3d 	.word	0x08012c3d

080135b8 <malloc>:
 80135b8:	4b02      	ldr	r3, [pc, #8]	; (80135c4 <malloc+0xc>)
 80135ba:	4601      	mov	r1, r0
 80135bc:	6818      	ldr	r0, [r3, #0]
 80135be:	f000 bd3d 	b.w	801403c <_malloc_r>
 80135c2:	bf00      	nop
 80135c4:	20000198 	.word	0x20000198

080135c8 <__ascii_mbtowc>:
 80135c8:	b082      	sub	sp, #8
 80135ca:	b901      	cbnz	r1, 80135ce <__ascii_mbtowc+0x6>
 80135cc:	a901      	add	r1, sp, #4
 80135ce:	b142      	cbz	r2, 80135e2 <__ascii_mbtowc+0x1a>
 80135d0:	b14b      	cbz	r3, 80135e6 <__ascii_mbtowc+0x1e>
 80135d2:	7813      	ldrb	r3, [r2, #0]
 80135d4:	600b      	str	r3, [r1, #0]
 80135d6:	7812      	ldrb	r2, [r2, #0]
 80135d8:	1e10      	subs	r0, r2, #0
 80135da:	bf18      	it	ne
 80135dc:	2001      	movne	r0, #1
 80135de:	b002      	add	sp, #8
 80135e0:	4770      	bx	lr
 80135e2:	4610      	mov	r0, r2
 80135e4:	e7fb      	b.n	80135de <__ascii_mbtowc+0x16>
 80135e6:	f06f 0001 	mvn.w	r0, #1
 80135ea:	e7f8      	b.n	80135de <__ascii_mbtowc+0x16>

080135ec <memcpy>:
 80135ec:	440a      	add	r2, r1
 80135ee:	4291      	cmp	r1, r2
 80135f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80135f4:	d100      	bne.n	80135f8 <memcpy+0xc>
 80135f6:	4770      	bx	lr
 80135f8:	b510      	push	{r4, lr}
 80135fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80135fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013602:	4291      	cmp	r1, r2
 8013604:	d1f9      	bne.n	80135fa <memcpy+0xe>
 8013606:	bd10      	pop	{r4, pc}

08013608 <_Balloc>:
 8013608:	b570      	push	{r4, r5, r6, lr}
 801360a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801360c:	4604      	mov	r4, r0
 801360e:	460d      	mov	r5, r1
 8013610:	b976      	cbnz	r6, 8013630 <_Balloc+0x28>
 8013612:	2010      	movs	r0, #16
 8013614:	f7ff ffd0 	bl	80135b8 <malloc>
 8013618:	4602      	mov	r2, r0
 801361a:	6260      	str	r0, [r4, #36]	; 0x24
 801361c:	b920      	cbnz	r0, 8013628 <_Balloc+0x20>
 801361e:	4b18      	ldr	r3, [pc, #96]	; (8013680 <_Balloc+0x78>)
 8013620:	4818      	ldr	r0, [pc, #96]	; (8013684 <_Balloc+0x7c>)
 8013622:	2166      	movs	r1, #102	; 0x66
 8013624:	f001 fc64 	bl	8014ef0 <__assert_func>
 8013628:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801362c:	6006      	str	r6, [r0, #0]
 801362e:	60c6      	str	r6, [r0, #12]
 8013630:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013632:	68f3      	ldr	r3, [r6, #12]
 8013634:	b183      	cbz	r3, 8013658 <_Balloc+0x50>
 8013636:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013638:	68db      	ldr	r3, [r3, #12]
 801363a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801363e:	b9b8      	cbnz	r0, 8013670 <_Balloc+0x68>
 8013640:	2101      	movs	r1, #1
 8013642:	fa01 f605 	lsl.w	r6, r1, r5
 8013646:	1d72      	adds	r2, r6, #5
 8013648:	0092      	lsls	r2, r2, #2
 801364a:	4620      	mov	r0, r4
 801364c:	f000 fc97 	bl	8013f7e <_calloc_r>
 8013650:	b160      	cbz	r0, 801366c <_Balloc+0x64>
 8013652:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013656:	e00e      	b.n	8013676 <_Balloc+0x6e>
 8013658:	2221      	movs	r2, #33	; 0x21
 801365a:	2104      	movs	r1, #4
 801365c:	4620      	mov	r0, r4
 801365e:	f000 fc8e 	bl	8013f7e <_calloc_r>
 8013662:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013664:	60f0      	str	r0, [r6, #12]
 8013666:	68db      	ldr	r3, [r3, #12]
 8013668:	2b00      	cmp	r3, #0
 801366a:	d1e4      	bne.n	8013636 <_Balloc+0x2e>
 801366c:	2000      	movs	r0, #0
 801366e:	bd70      	pop	{r4, r5, r6, pc}
 8013670:	6802      	ldr	r2, [r0, #0]
 8013672:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013676:	2300      	movs	r3, #0
 8013678:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801367c:	e7f7      	b.n	801366e <_Balloc+0x66>
 801367e:	bf00      	nop
 8013680:	0801566d 	.word	0x0801566d
 8013684:	080157d4 	.word	0x080157d4

08013688 <_Bfree>:
 8013688:	b570      	push	{r4, r5, r6, lr}
 801368a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801368c:	4605      	mov	r5, r0
 801368e:	460c      	mov	r4, r1
 8013690:	b976      	cbnz	r6, 80136b0 <_Bfree+0x28>
 8013692:	2010      	movs	r0, #16
 8013694:	f7ff ff90 	bl	80135b8 <malloc>
 8013698:	4602      	mov	r2, r0
 801369a:	6268      	str	r0, [r5, #36]	; 0x24
 801369c:	b920      	cbnz	r0, 80136a8 <_Bfree+0x20>
 801369e:	4b09      	ldr	r3, [pc, #36]	; (80136c4 <_Bfree+0x3c>)
 80136a0:	4809      	ldr	r0, [pc, #36]	; (80136c8 <_Bfree+0x40>)
 80136a2:	218a      	movs	r1, #138	; 0x8a
 80136a4:	f001 fc24 	bl	8014ef0 <__assert_func>
 80136a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80136ac:	6006      	str	r6, [r0, #0]
 80136ae:	60c6      	str	r6, [r0, #12]
 80136b0:	b13c      	cbz	r4, 80136c2 <_Bfree+0x3a>
 80136b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80136b4:	6862      	ldr	r2, [r4, #4]
 80136b6:	68db      	ldr	r3, [r3, #12]
 80136b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80136bc:	6021      	str	r1, [r4, #0]
 80136be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80136c2:	bd70      	pop	{r4, r5, r6, pc}
 80136c4:	0801566d 	.word	0x0801566d
 80136c8:	080157d4 	.word	0x080157d4

080136cc <__multadd>:
 80136cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136d0:	690e      	ldr	r6, [r1, #16]
 80136d2:	4607      	mov	r7, r0
 80136d4:	4698      	mov	r8, r3
 80136d6:	460c      	mov	r4, r1
 80136d8:	f101 0014 	add.w	r0, r1, #20
 80136dc:	2300      	movs	r3, #0
 80136de:	6805      	ldr	r5, [r0, #0]
 80136e0:	b2a9      	uxth	r1, r5
 80136e2:	fb02 8101 	mla	r1, r2, r1, r8
 80136e6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80136ea:	0c2d      	lsrs	r5, r5, #16
 80136ec:	fb02 c505 	mla	r5, r2, r5, ip
 80136f0:	b289      	uxth	r1, r1
 80136f2:	3301      	adds	r3, #1
 80136f4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80136f8:	429e      	cmp	r6, r3
 80136fa:	f840 1b04 	str.w	r1, [r0], #4
 80136fe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8013702:	dcec      	bgt.n	80136de <__multadd+0x12>
 8013704:	f1b8 0f00 	cmp.w	r8, #0
 8013708:	d022      	beq.n	8013750 <__multadd+0x84>
 801370a:	68a3      	ldr	r3, [r4, #8]
 801370c:	42b3      	cmp	r3, r6
 801370e:	dc19      	bgt.n	8013744 <__multadd+0x78>
 8013710:	6861      	ldr	r1, [r4, #4]
 8013712:	4638      	mov	r0, r7
 8013714:	3101      	adds	r1, #1
 8013716:	f7ff ff77 	bl	8013608 <_Balloc>
 801371a:	4605      	mov	r5, r0
 801371c:	b928      	cbnz	r0, 801372a <__multadd+0x5e>
 801371e:	4602      	mov	r2, r0
 8013720:	4b0d      	ldr	r3, [pc, #52]	; (8013758 <__multadd+0x8c>)
 8013722:	480e      	ldr	r0, [pc, #56]	; (801375c <__multadd+0x90>)
 8013724:	21b5      	movs	r1, #181	; 0xb5
 8013726:	f001 fbe3 	bl	8014ef0 <__assert_func>
 801372a:	6922      	ldr	r2, [r4, #16]
 801372c:	3202      	adds	r2, #2
 801372e:	f104 010c 	add.w	r1, r4, #12
 8013732:	0092      	lsls	r2, r2, #2
 8013734:	300c      	adds	r0, #12
 8013736:	f7ff ff59 	bl	80135ec <memcpy>
 801373a:	4621      	mov	r1, r4
 801373c:	4638      	mov	r0, r7
 801373e:	f7ff ffa3 	bl	8013688 <_Bfree>
 8013742:	462c      	mov	r4, r5
 8013744:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8013748:	3601      	adds	r6, #1
 801374a:	f8c3 8014 	str.w	r8, [r3, #20]
 801374e:	6126      	str	r6, [r4, #16]
 8013750:	4620      	mov	r0, r4
 8013752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013756:	bf00      	nop
 8013758:	080156e3 	.word	0x080156e3
 801375c:	080157d4 	.word	0x080157d4

08013760 <__s2b>:
 8013760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013764:	460c      	mov	r4, r1
 8013766:	4615      	mov	r5, r2
 8013768:	461f      	mov	r7, r3
 801376a:	2209      	movs	r2, #9
 801376c:	3308      	adds	r3, #8
 801376e:	4606      	mov	r6, r0
 8013770:	fb93 f3f2 	sdiv	r3, r3, r2
 8013774:	2100      	movs	r1, #0
 8013776:	2201      	movs	r2, #1
 8013778:	429a      	cmp	r2, r3
 801377a:	db09      	blt.n	8013790 <__s2b+0x30>
 801377c:	4630      	mov	r0, r6
 801377e:	f7ff ff43 	bl	8013608 <_Balloc>
 8013782:	b940      	cbnz	r0, 8013796 <__s2b+0x36>
 8013784:	4602      	mov	r2, r0
 8013786:	4b19      	ldr	r3, [pc, #100]	; (80137ec <__s2b+0x8c>)
 8013788:	4819      	ldr	r0, [pc, #100]	; (80137f0 <__s2b+0x90>)
 801378a:	21ce      	movs	r1, #206	; 0xce
 801378c:	f001 fbb0 	bl	8014ef0 <__assert_func>
 8013790:	0052      	lsls	r2, r2, #1
 8013792:	3101      	adds	r1, #1
 8013794:	e7f0      	b.n	8013778 <__s2b+0x18>
 8013796:	9b08      	ldr	r3, [sp, #32]
 8013798:	6143      	str	r3, [r0, #20]
 801379a:	2d09      	cmp	r5, #9
 801379c:	f04f 0301 	mov.w	r3, #1
 80137a0:	6103      	str	r3, [r0, #16]
 80137a2:	dd16      	ble.n	80137d2 <__s2b+0x72>
 80137a4:	f104 0909 	add.w	r9, r4, #9
 80137a8:	46c8      	mov	r8, r9
 80137aa:	442c      	add	r4, r5
 80137ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 80137b0:	4601      	mov	r1, r0
 80137b2:	3b30      	subs	r3, #48	; 0x30
 80137b4:	220a      	movs	r2, #10
 80137b6:	4630      	mov	r0, r6
 80137b8:	f7ff ff88 	bl	80136cc <__multadd>
 80137bc:	45a0      	cmp	r8, r4
 80137be:	d1f5      	bne.n	80137ac <__s2b+0x4c>
 80137c0:	f1a5 0408 	sub.w	r4, r5, #8
 80137c4:	444c      	add	r4, r9
 80137c6:	1b2d      	subs	r5, r5, r4
 80137c8:	1963      	adds	r3, r4, r5
 80137ca:	42bb      	cmp	r3, r7
 80137cc:	db04      	blt.n	80137d8 <__s2b+0x78>
 80137ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137d2:	340a      	adds	r4, #10
 80137d4:	2509      	movs	r5, #9
 80137d6:	e7f6      	b.n	80137c6 <__s2b+0x66>
 80137d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80137dc:	4601      	mov	r1, r0
 80137de:	3b30      	subs	r3, #48	; 0x30
 80137e0:	220a      	movs	r2, #10
 80137e2:	4630      	mov	r0, r6
 80137e4:	f7ff ff72 	bl	80136cc <__multadd>
 80137e8:	e7ee      	b.n	80137c8 <__s2b+0x68>
 80137ea:	bf00      	nop
 80137ec:	080156e3 	.word	0x080156e3
 80137f0:	080157d4 	.word	0x080157d4

080137f4 <__hi0bits>:
 80137f4:	0c03      	lsrs	r3, r0, #16
 80137f6:	041b      	lsls	r3, r3, #16
 80137f8:	b9d3      	cbnz	r3, 8013830 <__hi0bits+0x3c>
 80137fa:	0400      	lsls	r0, r0, #16
 80137fc:	2310      	movs	r3, #16
 80137fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013802:	bf04      	itt	eq
 8013804:	0200      	lsleq	r0, r0, #8
 8013806:	3308      	addeq	r3, #8
 8013808:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801380c:	bf04      	itt	eq
 801380e:	0100      	lsleq	r0, r0, #4
 8013810:	3304      	addeq	r3, #4
 8013812:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013816:	bf04      	itt	eq
 8013818:	0080      	lsleq	r0, r0, #2
 801381a:	3302      	addeq	r3, #2
 801381c:	2800      	cmp	r0, #0
 801381e:	db05      	blt.n	801382c <__hi0bits+0x38>
 8013820:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013824:	f103 0301 	add.w	r3, r3, #1
 8013828:	bf08      	it	eq
 801382a:	2320      	moveq	r3, #32
 801382c:	4618      	mov	r0, r3
 801382e:	4770      	bx	lr
 8013830:	2300      	movs	r3, #0
 8013832:	e7e4      	b.n	80137fe <__hi0bits+0xa>

08013834 <__lo0bits>:
 8013834:	6803      	ldr	r3, [r0, #0]
 8013836:	f013 0207 	ands.w	r2, r3, #7
 801383a:	4601      	mov	r1, r0
 801383c:	d00b      	beq.n	8013856 <__lo0bits+0x22>
 801383e:	07da      	lsls	r2, r3, #31
 8013840:	d424      	bmi.n	801388c <__lo0bits+0x58>
 8013842:	0798      	lsls	r0, r3, #30
 8013844:	bf49      	itett	mi
 8013846:	085b      	lsrmi	r3, r3, #1
 8013848:	089b      	lsrpl	r3, r3, #2
 801384a:	2001      	movmi	r0, #1
 801384c:	600b      	strmi	r3, [r1, #0]
 801384e:	bf5c      	itt	pl
 8013850:	600b      	strpl	r3, [r1, #0]
 8013852:	2002      	movpl	r0, #2
 8013854:	4770      	bx	lr
 8013856:	b298      	uxth	r0, r3
 8013858:	b9b0      	cbnz	r0, 8013888 <__lo0bits+0x54>
 801385a:	0c1b      	lsrs	r3, r3, #16
 801385c:	2010      	movs	r0, #16
 801385e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013862:	bf04      	itt	eq
 8013864:	0a1b      	lsreq	r3, r3, #8
 8013866:	3008      	addeq	r0, #8
 8013868:	071a      	lsls	r2, r3, #28
 801386a:	bf04      	itt	eq
 801386c:	091b      	lsreq	r3, r3, #4
 801386e:	3004      	addeq	r0, #4
 8013870:	079a      	lsls	r2, r3, #30
 8013872:	bf04      	itt	eq
 8013874:	089b      	lsreq	r3, r3, #2
 8013876:	3002      	addeq	r0, #2
 8013878:	07da      	lsls	r2, r3, #31
 801387a:	d403      	bmi.n	8013884 <__lo0bits+0x50>
 801387c:	085b      	lsrs	r3, r3, #1
 801387e:	f100 0001 	add.w	r0, r0, #1
 8013882:	d005      	beq.n	8013890 <__lo0bits+0x5c>
 8013884:	600b      	str	r3, [r1, #0]
 8013886:	4770      	bx	lr
 8013888:	4610      	mov	r0, r2
 801388a:	e7e8      	b.n	801385e <__lo0bits+0x2a>
 801388c:	2000      	movs	r0, #0
 801388e:	4770      	bx	lr
 8013890:	2020      	movs	r0, #32
 8013892:	4770      	bx	lr

08013894 <__i2b>:
 8013894:	b510      	push	{r4, lr}
 8013896:	460c      	mov	r4, r1
 8013898:	2101      	movs	r1, #1
 801389a:	f7ff feb5 	bl	8013608 <_Balloc>
 801389e:	4602      	mov	r2, r0
 80138a0:	b928      	cbnz	r0, 80138ae <__i2b+0x1a>
 80138a2:	4b05      	ldr	r3, [pc, #20]	; (80138b8 <__i2b+0x24>)
 80138a4:	4805      	ldr	r0, [pc, #20]	; (80138bc <__i2b+0x28>)
 80138a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80138aa:	f001 fb21 	bl	8014ef0 <__assert_func>
 80138ae:	2301      	movs	r3, #1
 80138b0:	6144      	str	r4, [r0, #20]
 80138b2:	6103      	str	r3, [r0, #16]
 80138b4:	bd10      	pop	{r4, pc}
 80138b6:	bf00      	nop
 80138b8:	080156e3 	.word	0x080156e3
 80138bc:	080157d4 	.word	0x080157d4

080138c0 <__multiply>:
 80138c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138c4:	4614      	mov	r4, r2
 80138c6:	690a      	ldr	r2, [r1, #16]
 80138c8:	6923      	ldr	r3, [r4, #16]
 80138ca:	429a      	cmp	r2, r3
 80138cc:	bfb8      	it	lt
 80138ce:	460b      	movlt	r3, r1
 80138d0:	460d      	mov	r5, r1
 80138d2:	bfbc      	itt	lt
 80138d4:	4625      	movlt	r5, r4
 80138d6:	461c      	movlt	r4, r3
 80138d8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80138dc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80138e0:	68ab      	ldr	r3, [r5, #8]
 80138e2:	6869      	ldr	r1, [r5, #4]
 80138e4:	eb0a 0709 	add.w	r7, sl, r9
 80138e8:	42bb      	cmp	r3, r7
 80138ea:	b085      	sub	sp, #20
 80138ec:	bfb8      	it	lt
 80138ee:	3101      	addlt	r1, #1
 80138f0:	f7ff fe8a 	bl	8013608 <_Balloc>
 80138f4:	b930      	cbnz	r0, 8013904 <__multiply+0x44>
 80138f6:	4602      	mov	r2, r0
 80138f8:	4b42      	ldr	r3, [pc, #264]	; (8013a04 <__multiply+0x144>)
 80138fa:	4843      	ldr	r0, [pc, #268]	; (8013a08 <__multiply+0x148>)
 80138fc:	f240 115d 	movw	r1, #349	; 0x15d
 8013900:	f001 faf6 	bl	8014ef0 <__assert_func>
 8013904:	f100 0614 	add.w	r6, r0, #20
 8013908:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801390c:	4633      	mov	r3, r6
 801390e:	2200      	movs	r2, #0
 8013910:	4543      	cmp	r3, r8
 8013912:	d31e      	bcc.n	8013952 <__multiply+0x92>
 8013914:	f105 0c14 	add.w	ip, r5, #20
 8013918:	f104 0314 	add.w	r3, r4, #20
 801391c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8013920:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8013924:	9202      	str	r2, [sp, #8]
 8013926:	ebac 0205 	sub.w	r2, ip, r5
 801392a:	3a15      	subs	r2, #21
 801392c:	f022 0203 	bic.w	r2, r2, #3
 8013930:	3204      	adds	r2, #4
 8013932:	f105 0115 	add.w	r1, r5, #21
 8013936:	458c      	cmp	ip, r1
 8013938:	bf38      	it	cc
 801393a:	2204      	movcc	r2, #4
 801393c:	9201      	str	r2, [sp, #4]
 801393e:	9a02      	ldr	r2, [sp, #8]
 8013940:	9303      	str	r3, [sp, #12]
 8013942:	429a      	cmp	r2, r3
 8013944:	d808      	bhi.n	8013958 <__multiply+0x98>
 8013946:	2f00      	cmp	r7, #0
 8013948:	dc55      	bgt.n	80139f6 <__multiply+0x136>
 801394a:	6107      	str	r7, [r0, #16]
 801394c:	b005      	add	sp, #20
 801394e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013952:	f843 2b04 	str.w	r2, [r3], #4
 8013956:	e7db      	b.n	8013910 <__multiply+0x50>
 8013958:	f8b3 a000 	ldrh.w	sl, [r3]
 801395c:	f1ba 0f00 	cmp.w	sl, #0
 8013960:	d020      	beq.n	80139a4 <__multiply+0xe4>
 8013962:	f105 0e14 	add.w	lr, r5, #20
 8013966:	46b1      	mov	r9, r6
 8013968:	2200      	movs	r2, #0
 801396a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801396e:	f8d9 b000 	ldr.w	fp, [r9]
 8013972:	b2a1      	uxth	r1, r4
 8013974:	fa1f fb8b 	uxth.w	fp, fp
 8013978:	fb0a b101 	mla	r1, sl, r1, fp
 801397c:	4411      	add	r1, r2
 801397e:	f8d9 2000 	ldr.w	r2, [r9]
 8013982:	0c24      	lsrs	r4, r4, #16
 8013984:	0c12      	lsrs	r2, r2, #16
 8013986:	fb0a 2404 	mla	r4, sl, r4, r2
 801398a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801398e:	b289      	uxth	r1, r1
 8013990:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8013994:	45f4      	cmp	ip, lr
 8013996:	f849 1b04 	str.w	r1, [r9], #4
 801399a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801399e:	d8e4      	bhi.n	801396a <__multiply+0xaa>
 80139a0:	9901      	ldr	r1, [sp, #4]
 80139a2:	5072      	str	r2, [r6, r1]
 80139a4:	9a03      	ldr	r2, [sp, #12]
 80139a6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80139aa:	3304      	adds	r3, #4
 80139ac:	f1b9 0f00 	cmp.w	r9, #0
 80139b0:	d01f      	beq.n	80139f2 <__multiply+0x132>
 80139b2:	6834      	ldr	r4, [r6, #0]
 80139b4:	f105 0114 	add.w	r1, r5, #20
 80139b8:	46b6      	mov	lr, r6
 80139ba:	f04f 0a00 	mov.w	sl, #0
 80139be:	880a      	ldrh	r2, [r1, #0]
 80139c0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80139c4:	fb09 b202 	mla	r2, r9, r2, fp
 80139c8:	4492      	add	sl, r2
 80139ca:	b2a4      	uxth	r4, r4
 80139cc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80139d0:	f84e 4b04 	str.w	r4, [lr], #4
 80139d4:	f851 4b04 	ldr.w	r4, [r1], #4
 80139d8:	f8be 2000 	ldrh.w	r2, [lr]
 80139dc:	0c24      	lsrs	r4, r4, #16
 80139de:	fb09 2404 	mla	r4, r9, r4, r2
 80139e2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80139e6:	458c      	cmp	ip, r1
 80139e8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80139ec:	d8e7      	bhi.n	80139be <__multiply+0xfe>
 80139ee:	9a01      	ldr	r2, [sp, #4]
 80139f0:	50b4      	str	r4, [r6, r2]
 80139f2:	3604      	adds	r6, #4
 80139f4:	e7a3      	b.n	801393e <__multiply+0x7e>
 80139f6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d1a5      	bne.n	801394a <__multiply+0x8a>
 80139fe:	3f01      	subs	r7, #1
 8013a00:	e7a1      	b.n	8013946 <__multiply+0x86>
 8013a02:	bf00      	nop
 8013a04:	080156e3 	.word	0x080156e3
 8013a08:	080157d4 	.word	0x080157d4

08013a0c <__pow5mult>:
 8013a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a10:	4615      	mov	r5, r2
 8013a12:	f012 0203 	ands.w	r2, r2, #3
 8013a16:	4606      	mov	r6, r0
 8013a18:	460f      	mov	r7, r1
 8013a1a:	d007      	beq.n	8013a2c <__pow5mult+0x20>
 8013a1c:	4c25      	ldr	r4, [pc, #148]	; (8013ab4 <__pow5mult+0xa8>)
 8013a1e:	3a01      	subs	r2, #1
 8013a20:	2300      	movs	r3, #0
 8013a22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013a26:	f7ff fe51 	bl	80136cc <__multadd>
 8013a2a:	4607      	mov	r7, r0
 8013a2c:	10ad      	asrs	r5, r5, #2
 8013a2e:	d03d      	beq.n	8013aac <__pow5mult+0xa0>
 8013a30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013a32:	b97c      	cbnz	r4, 8013a54 <__pow5mult+0x48>
 8013a34:	2010      	movs	r0, #16
 8013a36:	f7ff fdbf 	bl	80135b8 <malloc>
 8013a3a:	4602      	mov	r2, r0
 8013a3c:	6270      	str	r0, [r6, #36]	; 0x24
 8013a3e:	b928      	cbnz	r0, 8013a4c <__pow5mult+0x40>
 8013a40:	4b1d      	ldr	r3, [pc, #116]	; (8013ab8 <__pow5mult+0xac>)
 8013a42:	481e      	ldr	r0, [pc, #120]	; (8013abc <__pow5mult+0xb0>)
 8013a44:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013a48:	f001 fa52 	bl	8014ef0 <__assert_func>
 8013a4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013a50:	6004      	str	r4, [r0, #0]
 8013a52:	60c4      	str	r4, [r0, #12]
 8013a54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013a58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013a5c:	b94c      	cbnz	r4, 8013a72 <__pow5mult+0x66>
 8013a5e:	f240 2171 	movw	r1, #625	; 0x271
 8013a62:	4630      	mov	r0, r6
 8013a64:	f7ff ff16 	bl	8013894 <__i2b>
 8013a68:	2300      	movs	r3, #0
 8013a6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8013a6e:	4604      	mov	r4, r0
 8013a70:	6003      	str	r3, [r0, #0]
 8013a72:	f04f 0900 	mov.w	r9, #0
 8013a76:	07eb      	lsls	r3, r5, #31
 8013a78:	d50a      	bpl.n	8013a90 <__pow5mult+0x84>
 8013a7a:	4639      	mov	r1, r7
 8013a7c:	4622      	mov	r2, r4
 8013a7e:	4630      	mov	r0, r6
 8013a80:	f7ff ff1e 	bl	80138c0 <__multiply>
 8013a84:	4639      	mov	r1, r7
 8013a86:	4680      	mov	r8, r0
 8013a88:	4630      	mov	r0, r6
 8013a8a:	f7ff fdfd 	bl	8013688 <_Bfree>
 8013a8e:	4647      	mov	r7, r8
 8013a90:	106d      	asrs	r5, r5, #1
 8013a92:	d00b      	beq.n	8013aac <__pow5mult+0xa0>
 8013a94:	6820      	ldr	r0, [r4, #0]
 8013a96:	b938      	cbnz	r0, 8013aa8 <__pow5mult+0x9c>
 8013a98:	4622      	mov	r2, r4
 8013a9a:	4621      	mov	r1, r4
 8013a9c:	4630      	mov	r0, r6
 8013a9e:	f7ff ff0f 	bl	80138c0 <__multiply>
 8013aa2:	6020      	str	r0, [r4, #0]
 8013aa4:	f8c0 9000 	str.w	r9, [r0]
 8013aa8:	4604      	mov	r4, r0
 8013aaa:	e7e4      	b.n	8013a76 <__pow5mult+0x6a>
 8013aac:	4638      	mov	r0, r7
 8013aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ab2:	bf00      	nop
 8013ab4:	08015928 	.word	0x08015928
 8013ab8:	0801566d 	.word	0x0801566d
 8013abc:	080157d4 	.word	0x080157d4

08013ac0 <__lshift>:
 8013ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ac4:	460c      	mov	r4, r1
 8013ac6:	6849      	ldr	r1, [r1, #4]
 8013ac8:	6923      	ldr	r3, [r4, #16]
 8013aca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013ace:	68a3      	ldr	r3, [r4, #8]
 8013ad0:	4607      	mov	r7, r0
 8013ad2:	4691      	mov	r9, r2
 8013ad4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013ad8:	f108 0601 	add.w	r6, r8, #1
 8013adc:	42b3      	cmp	r3, r6
 8013ade:	db0b      	blt.n	8013af8 <__lshift+0x38>
 8013ae0:	4638      	mov	r0, r7
 8013ae2:	f7ff fd91 	bl	8013608 <_Balloc>
 8013ae6:	4605      	mov	r5, r0
 8013ae8:	b948      	cbnz	r0, 8013afe <__lshift+0x3e>
 8013aea:	4602      	mov	r2, r0
 8013aec:	4b28      	ldr	r3, [pc, #160]	; (8013b90 <__lshift+0xd0>)
 8013aee:	4829      	ldr	r0, [pc, #164]	; (8013b94 <__lshift+0xd4>)
 8013af0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013af4:	f001 f9fc 	bl	8014ef0 <__assert_func>
 8013af8:	3101      	adds	r1, #1
 8013afa:	005b      	lsls	r3, r3, #1
 8013afc:	e7ee      	b.n	8013adc <__lshift+0x1c>
 8013afe:	2300      	movs	r3, #0
 8013b00:	f100 0114 	add.w	r1, r0, #20
 8013b04:	f100 0210 	add.w	r2, r0, #16
 8013b08:	4618      	mov	r0, r3
 8013b0a:	4553      	cmp	r3, sl
 8013b0c:	db33      	blt.n	8013b76 <__lshift+0xb6>
 8013b0e:	6920      	ldr	r0, [r4, #16]
 8013b10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013b14:	f104 0314 	add.w	r3, r4, #20
 8013b18:	f019 091f 	ands.w	r9, r9, #31
 8013b1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013b20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013b24:	d02b      	beq.n	8013b7e <__lshift+0xbe>
 8013b26:	f1c9 0e20 	rsb	lr, r9, #32
 8013b2a:	468a      	mov	sl, r1
 8013b2c:	2200      	movs	r2, #0
 8013b2e:	6818      	ldr	r0, [r3, #0]
 8013b30:	fa00 f009 	lsl.w	r0, r0, r9
 8013b34:	4302      	orrs	r2, r0
 8013b36:	f84a 2b04 	str.w	r2, [sl], #4
 8013b3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b3e:	459c      	cmp	ip, r3
 8013b40:	fa22 f20e 	lsr.w	r2, r2, lr
 8013b44:	d8f3      	bhi.n	8013b2e <__lshift+0x6e>
 8013b46:	ebac 0304 	sub.w	r3, ip, r4
 8013b4a:	3b15      	subs	r3, #21
 8013b4c:	f023 0303 	bic.w	r3, r3, #3
 8013b50:	3304      	adds	r3, #4
 8013b52:	f104 0015 	add.w	r0, r4, #21
 8013b56:	4584      	cmp	ip, r0
 8013b58:	bf38      	it	cc
 8013b5a:	2304      	movcc	r3, #4
 8013b5c:	50ca      	str	r2, [r1, r3]
 8013b5e:	b10a      	cbz	r2, 8013b64 <__lshift+0xa4>
 8013b60:	f108 0602 	add.w	r6, r8, #2
 8013b64:	3e01      	subs	r6, #1
 8013b66:	4638      	mov	r0, r7
 8013b68:	612e      	str	r6, [r5, #16]
 8013b6a:	4621      	mov	r1, r4
 8013b6c:	f7ff fd8c 	bl	8013688 <_Bfree>
 8013b70:	4628      	mov	r0, r5
 8013b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b76:	f842 0f04 	str.w	r0, [r2, #4]!
 8013b7a:	3301      	adds	r3, #1
 8013b7c:	e7c5      	b.n	8013b0a <__lshift+0x4a>
 8013b7e:	3904      	subs	r1, #4
 8013b80:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b84:	f841 2f04 	str.w	r2, [r1, #4]!
 8013b88:	459c      	cmp	ip, r3
 8013b8a:	d8f9      	bhi.n	8013b80 <__lshift+0xc0>
 8013b8c:	e7ea      	b.n	8013b64 <__lshift+0xa4>
 8013b8e:	bf00      	nop
 8013b90:	080156e3 	.word	0x080156e3
 8013b94:	080157d4 	.word	0x080157d4

08013b98 <__mcmp>:
 8013b98:	b530      	push	{r4, r5, lr}
 8013b9a:	6902      	ldr	r2, [r0, #16]
 8013b9c:	690c      	ldr	r4, [r1, #16]
 8013b9e:	1b12      	subs	r2, r2, r4
 8013ba0:	d10e      	bne.n	8013bc0 <__mcmp+0x28>
 8013ba2:	f100 0314 	add.w	r3, r0, #20
 8013ba6:	3114      	adds	r1, #20
 8013ba8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013bac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013bb0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013bb4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013bb8:	42a5      	cmp	r5, r4
 8013bba:	d003      	beq.n	8013bc4 <__mcmp+0x2c>
 8013bbc:	d305      	bcc.n	8013bca <__mcmp+0x32>
 8013bbe:	2201      	movs	r2, #1
 8013bc0:	4610      	mov	r0, r2
 8013bc2:	bd30      	pop	{r4, r5, pc}
 8013bc4:	4283      	cmp	r3, r0
 8013bc6:	d3f3      	bcc.n	8013bb0 <__mcmp+0x18>
 8013bc8:	e7fa      	b.n	8013bc0 <__mcmp+0x28>
 8013bca:	f04f 32ff 	mov.w	r2, #4294967295
 8013bce:	e7f7      	b.n	8013bc0 <__mcmp+0x28>

08013bd0 <__mdiff>:
 8013bd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bd4:	460c      	mov	r4, r1
 8013bd6:	4606      	mov	r6, r0
 8013bd8:	4611      	mov	r1, r2
 8013bda:	4620      	mov	r0, r4
 8013bdc:	4617      	mov	r7, r2
 8013bde:	f7ff ffdb 	bl	8013b98 <__mcmp>
 8013be2:	1e05      	subs	r5, r0, #0
 8013be4:	d110      	bne.n	8013c08 <__mdiff+0x38>
 8013be6:	4629      	mov	r1, r5
 8013be8:	4630      	mov	r0, r6
 8013bea:	f7ff fd0d 	bl	8013608 <_Balloc>
 8013bee:	b930      	cbnz	r0, 8013bfe <__mdiff+0x2e>
 8013bf0:	4b39      	ldr	r3, [pc, #228]	; (8013cd8 <__mdiff+0x108>)
 8013bf2:	4602      	mov	r2, r0
 8013bf4:	f240 2132 	movw	r1, #562	; 0x232
 8013bf8:	4838      	ldr	r0, [pc, #224]	; (8013cdc <__mdiff+0x10c>)
 8013bfa:	f001 f979 	bl	8014ef0 <__assert_func>
 8013bfe:	2301      	movs	r3, #1
 8013c00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013c04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c08:	bfa4      	itt	ge
 8013c0a:	463b      	movge	r3, r7
 8013c0c:	4627      	movge	r7, r4
 8013c0e:	4630      	mov	r0, r6
 8013c10:	6879      	ldr	r1, [r7, #4]
 8013c12:	bfa6      	itte	ge
 8013c14:	461c      	movge	r4, r3
 8013c16:	2500      	movge	r5, #0
 8013c18:	2501      	movlt	r5, #1
 8013c1a:	f7ff fcf5 	bl	8013608 <_Balloc>
 8013c1e:	b920      	cbnz	r0, 8013c2a <__mdiff+0x5a>
 8013c20:	4b2d      	ldr	r3, [pc, #180]	; (8013cd8 <__mdiff+0x108>)
 8013c22:	4602      	mov	r2, r0
 8013c24:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013c28:	e7e6      	b.n	8013bf8 <__mdiff+0x28>
 8013c2a:	693e      	ldr	r6, [r7, #16]
 8013c2c:	60c5      	str	r5, [r0, #12]
 8013c2e:	6925      	ldr	r5, [r4, #16]
 8013c30:	f107 0114 	add.w	r1, r7, #20
 8013c34:	f104 0914 	add.w	r9, r4, #20
 8013c38:	f100 0e14 	add.w	lr, r0, #20
 8013c3c:	f107 0210 	add.w	r2, r7, #16
 8013c40:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8013c44:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8013c48:	46f2      	mov	sl, lr
 8013c4a:	2700      	movs	r7, #0
 8013c4c:	f859 3b04 	ldr.w	r3, [r9], #4
 8013c50:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013c54:	fa1f f883 	uxth.w	r8, r3
 8013c58:	fa17 f78b 	uxtah	r7, r7, fp
 8013c5c:	0c1b      	lsrs	r3, r3, #16
 8013c5e:	eba7 0808 	sub.w	r8, r7, r8
 8013c62:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013c66:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013c6a:	fa1f f888 	uxth.w	r8, r8
 8013c6e:	141f      	asrs	r7, r3, #16
 8013c70:	454d      	cmp	r5, r9
 8013c72:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013c76:	f84a 3b04 	str.w	r3, [sl], #4
 8013c7a:	d8e7      	bhi.n	8013c4c <__mdiff+0x7c>
 8013c7c:	1b2b      	subs	r3, r5, r4
 8013c7e:	3b15      	subs	r3, #21
 8013c80:	f023 0303 	bic.w	r3, r3, #3
 8013c84:	3304      	adds	r3, #4
 8013c86:	3415      	adds	r4, #21
 8013c88:	42a5      	cmp	r5, r4
 8013c8a:	bf38      	it	cc
 8013c8c:	2304      	movcc	r3, #4
 8013c8e:	4419      	add	r1, r3
 8013c90:	4473      	add	r3, lr
 8013c92:	469e      	mov	lr, r3
 8013c94:	460d      	mov	r5, r1
 8013c96:	4565      	cmp	r5, ip
 8013c98:	d30e      	bcc.n	8013cb8 <__mdiff+0xe8>
 8013c9a:	f10c 0203 	add.w	r2, ip, #3
 8013c9e:	1a52      	subs	r2, r2, r1
 8013ca0:	f022 0203 	bic.w	r2, r2, #3
 8013ca4:	3903      	subs	r1, #3
 8013ca6:	458c      	cmp	ip, r1
 8013ca8:	bf38      	it	cc
 8013caa:	2200      	movcc	r2, #0
 8013cac:	441a      	add	r2, r3
 8013cae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013cb2:	b17b      	cbz	r3, 8013cd4 <__mdiff+0x104>
 8013cb4:	6106      	str	r6, [r0, #16]
 8013cb6:	e7a5      	b.n	8013c04 <__mdiff+0x34>
 8013cb8:	f855 8b04 	ldr.w	r8, [r5], #4
 8013cbc:	fa17 f488 	uxtah	r4, r7, r8
 8013cc0:	1422      	asrs	r2, r4, #16
 8013cc2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8013cc6:	b2a4      	uxth	r4, r4
 8013cc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8013ccc:	f84e 4b04 	str.w	r4, [lr], #4
 8013cd0:	1417      	asrs	r7, r2, #16
 8013cd2:	e7e0      	b.n	8013c96 <__mdiff+0xc6>
 8013cd4:	3e01      	subs	r6, #1
 8013cd6:	e7ea      	b.n	8013cae <__mdiff+0xde>
 8013cd8:	080156e3 	.word	0x080156e3
 8013cdc:	080157d4 	.word	0x080157d4

08013ce0 <__ulp>:
 8013ce0:	b082      	sub	sp, #8
 8013ce2:	ed8d 0b00 	vstr	d0, [sp]
 8013ce6:	9b01      	ldr	r3, [sp, #4]
 8013ce8:	4912      	ldr	r1, [pc, #72]	; (8013d34 <__ulp+0x54>)
 8013cea:	4019      	ands	r1, r3
 8013cec:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8013cf0:	2900      	cmp	r1, #0
 8013cf2:	dd05      	ble.n	8013d00 <__ulp+0x20>
 8013cf4:	2200      	movs	r2, #0
 8013cf6:	460b      	mov	r3, r1
 8013cf8:	ec43 2b10 	vmov	d0, r2, r3
 8013cfc:	b002      	add	sp, #8
 8013cfe:	4770      	bx	lr
 8013d00:	4249      	negs	r1, r1
 8013d02:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8013d06:	ea4f 5021 	mov.w	r0, r1, asr #20
 8013d0a:	f04f 0200 	mov.w	r2, #0
 8013d0e:	f04f 0300 	mov.w	r3, #0
 8013d12:	da04      	bge.n	8013d1e <__ulp+0x3e>
 8013d14:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8013d18:	fa41 f300 	asr.w	r3, r1, r0
 8013d1c:	e7ec      	b.n	8013cf8 <__ulp+0x18>
 8013d1e:	f1a0 0114 	sub.w	r1, r0, #20
 8013d22:	291e      	cmp	r1, #30
 8013d24:	bfda      	itte	le
 8013d26:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8013d2a:	fa20 f101 	lsrle.w	r1, r0, r1
 8013d2e:	2101      	movgt	r1, #1
 8013d30:	460a      	mov	r2, r1
 8013d32:	e7e1      	b.n	8013cf8 <__ulp+0x18>
 8013d34:	7ff00000 	.word	0x7ff00000

08013d38 <__b2d>:
 8013d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d3a:	6905      	ldr	r5, [r0, #16]
 8013d3c:	f100 0714 	add.w	r7, r0, #20
 8013d40:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013d44:	1f2e      	subs	r6, r5, #4
 8013d46:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013d4a:	4620      	mov	r0, r4
 8013d4c:	f7ff fd52 	bl	80137f4 <__hi0bits>
 8013d50:	f1c0 0320 	rsb	r3, r0, #32
 8013d54:	280a      	cmp	r0, #10
 8013d56:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8013dd4 <__b2d+0x9c>
 8013d5a:	600b      	str	r3, [r1, #0]
 8013d5c:	dc14      	bgt.n	8013d88 <__b2d+0x50>
 8013d5e:	f1c0 0e0b 	rsb	lr, r0, #11
 8013d62:	fa24 f10e 	lsr.w	r1, r4, lr
 8013d66:	42b7      	cmp	r7, r6
 8013d68:	ea41 030c 	orr.w	r3, r1, ip
 8013d6c:	bf34      	ite	cc
 8013d6e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013d72:	2100      	movcs	r1, #0
 8013d74:	3015      	adds	r0, #21
 8013d76:	fa04 f000 	lsl.w	r0, r4, r0
 8013d7a:	fa21 f10e 	lsr.w	r1, r1, lr
 8013d7e:	ea40 0201 	orr.w	r2, r0, r1
 8013d82:	ec43 2b10 	vmov	d0, r2, r3
 8013d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d88:	42b7      	cmp	r7, r6
 8013d8a:	bf3a      	itte	cc
 8013d8c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013d90:	f1a5 0608 	subcc.w	r6, r5, #8
 8013d94:	2100      	movcs	r1, #0
 8013d96:	380b      	subs	r0, #11
 8013d98:	d017      	beq.n	8013dca <__b2d+0x92>
 8013d9a:	f1c0 0c20 	rsb	ip, r0, #32
 8013d9e:	fa04 f500 	lsl.w	r5, r4, r0
 8013da2:	42be      	cmp	r6, r7
 8013da4:	fa21 f40c 	lsr.w	r4, r1, ip
 8013da8:	ea45 0504 	orr.w	r5, r5, r4
 8013dac:	bf8c      	ite	hi
 8013dae:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013db2:	2400      	movls	r4, #0
 8013db4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8013db8:	fa01 f000 	lsl.w	r0, r1, r0
 8013dbc:	fa24 f40c 	lsr.w	r4, r4, ip
 8013dc0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013dc4:	ea40 0204 	orr.w	r2, r0, r4
 8013dc8:	e7db      	b.n	8013d82 <__b2d+0x4a>
 8013dca:	ea44 030c 	orr.w	r3, r4, ip
 8013dce:	460a      	mov	r2, r1
 8013dd0:	e7d7      	b.n	8013d82 <__b2d+0x4a>
 8013dd2:	bf00      	nop
 8013dd4:	3ff00000 	.word	0x3ff00000

08013dd8 <__d2b>:
 8013dd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013ddc:	4689      	mov	r9, r1
 8013dde:	2101      	movs	r1, #1
 8013de0:	ec57 6b10 	vmov	r6, r7, d0
 8013de4:	4690      	mov	r8, r2
 8013de6:	f7ff fc0f 	bl	8013608 <_Balloc>
 8013dea:	4604      	mov	r4, r0
 8013dec:	b930      	cbnz	r0, 8013dfc <__d2b+0x24>
 8013dee:	4602      	mov	r2, r0
 8013df0:	4b25      	ldr	r3, [pc, #148]	; (8013e88 <__d2b+0xb0>)
 8013df2:	4826      	ldr	r0, [pc, #152]	; (8013e8c <__d2b+0xb4>)
 8013df4:	f240 310a 	movw	r1, #778	; 0x30a
 8013df8:	f001 f87a 	bl	8014ef0 <__assert_func>
 8013dfc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013e00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013e04:	bb35      	cbnz	r5, 8013e54 <__d2b+0x7c>
 8013e06:	2e00      	cmp	r6, #0
 8013e08:	9301      	str	r3, [sp, #4]
 8013e0a:	d028      	beq.n	8013e5e <__d2b+0x86>
 8013e0c:	4668      	mov	r0, sp
 8013e0e:	9600      	str	r6, [sp, #0]
 8013e10:	f7ff fd10 	bl	8013834 <__lo0bits>
 8013e14:	9900      	ldr	r1, [sp, #0]
 8013e16:	b300      	cbz	r0, 8013e5a <__d2b+0x82>
 8013e18:	9a01      	ldr	r2, [sp, #4]
 8013e1a:	f1c0 0320 	rsb	r3, r0, #32
 8013e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8013e22:	430b      	orrs	r3, r1
 8013e24:	40c2      	lsrs	r2, r0
 8013e26:	6163      	str	r3, [r4, #20]
 8013e28:	9201      	str	r2, [sp, #4]
 8013e2a:	9b01      	ldr	r3, [sp, #4]
 8013e2c:	61a3      	str	r3, [r4, #24]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	bf14      	ite	ne
 8013e32:	2202      	movne	r2, #2
 8013e34:	2201      	moveq	r2, #1
 8013e36:	6122      	str	r2, [r4, #16]
 8013e38:	b1d5      	cbz	r5, 8013e70 <__d2b+0x98>
 8013e3a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013e3e:	4405      	add	r5, r0
 8013e40:	f8c9 5000 	str.w	r5, [r9]
 8013e44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013e48:	f8c8 0000 	str.w	r0, [r8]
 8013e4c:	4620      	mov	r0, r4
 8013e4e:	b003      	add	sp, #12
 8013e50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013e54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013e58:	e7d5      	b.n	8013e06 <__d2b+0x2e>
 8013e5a:	6161      	str	r1, [r4, #20]
 8013e5c:	e7e5      	b.n	8013e2a <__d2b+0x52>
 8013e5e:	a801      	add	r0, sp, #4
 8013e60:	f7ff fce8 	bl	8013834 <__lo0bits>
 8013e64:	9b01      	ldr	r3, [sp, #4]
 8013e66:	6163      	str	r3, [r4, #20]
 8013e68:	2201      	movs	r2, #1
 8013e6a:	6122      	str	r2, [r4, #16]
 8013e6c:	3020      	adds	r0, #32
 8013e6e:	e7e3      	b.n	8013e38 <__d2b+0x60>
 8013e70:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013e74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013e78:	f8c9 0000 	str.w	r0, [r9]
 8013e7c:	6918      	ldr	r0, [r3, #16]
 8013e7e:	f7ff fcb9 	bl	80137f4 <__hi0bits>
 8013e82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013e86:	e7df      	b.n	8013e48 <__d2b+0x70>
 8013e88:	080156e3 	.word	0x080156e3
 8013e8c:	080157d4 	.word	0x080157d4

08013e90 <__ratio>:
 8013e90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e94:	4688      	mov	r8, r1
 8013e96:	4669      	mov	r1, sp
 8013e98:	4681      	mov	r9, r0
 8013e9a:	f7ff ff4d 	bl	8013d38 <__b2d>
 8013e9e:	a901      	add	r1, sp, #4
 8013ea0:	4640      	mov	r0, r8
 8013ea2:	ec55 4b10 	vmov	r4, r5, d0
 8013ea6:	f7ff ff47 	bl	8013d38 <__b2d>
 8013eaa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013eae:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013eb2:	eba3 0c02 	sub.w	ip, r3, r2
 8013eb6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013eba:	1a9b      	subs	r3, r3, r2
 8013ebc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013ec0:	ec51 0b10 	vmov	r0, r1, d0
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	bfd6      	itet	le
 8013ec8:	460a      	movle	r2, r1
 8013eca:	462a      	movgt	r2, r5
 8013ecc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013ed0:	468b      	mov	fp, r1
 8013ed2:	462f      	mov	r7, r5
 8013ed4:	bfd4      	ite	le
 8013ed6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8013eda:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8013ede:	4620      	mov	r0, r4
 8013ee0:	ee10 2a10 	vmov	r2, s0
 8013ee4:	465b      	mov	r3, fp
 8013ee6:	4639      	mov	r1, r7
 8013ee8:	f7ec fcc0 	bl	800086c <__aeabi_ddiv>
 8013eec:	ec41 0b10 	vmov	d0, r0, r1
 8013ef0:	b003      	add	sp, #12
 8013ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013ef6 <__copybits>:
 8013ef6:	3901      	subs	r1, #1
 8013ef8:	b570      	push	{r4, r5, r6, lr}
 8013efa:	1149      	asrs	r1, r1, #5
 8013efc:	6914      	ldr	r4, [r2, #16]
 8013efe:	3101      	adds	r1, #1
 8013f00:	f102 0314 	add.w	r3, r2, #20
 8013f04:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013f08:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013f0c:	1f05      	subs	r5, r0, #4
 8013f0e:	42a3      	cmp	r3, r4
 8013f10:	d30c      	bcc.n	8013f2c <__copybits+0x36>
 8013f12:	1aa3      	subs	r3, r4, r2
 8013f14:	3b11      	subs	r3, #17
 8013f16:	f023 0303 	bic.w	r3, r3, #3
 8013f1a:	3211      	adds	r2, #17
 8013f1c:	42a2      	cmp	r2, r4
 8013f1e:	bf88      	it	hi
 8013f20:	2300      	movhi	r3, #0
 8013f22:	4418      	add	r0, r3
 8013f24:	2300      	movs	r3, #0
 8013f26:	4288      	cmp	r0, r1
 8013f28:	d305      	bcc.n	8013f36 <__copybits+0x40>
 8013f2a:	bd70      	pop	{r4, r5, r6, pc}
 8013f2c:	f853 6b04 	ldr.w	r6, [r3], #4
 8013f30:	f845 6f04 	str.w	r6, [r5, #4]!
 8013f34:	e7eb      	b.n	8013f0e <__copybits+0x18>
 8013f36:	f840 3b04 	str.w	r3, [r0], #4
 8013f3a:	e7f4      	b.n	8013f26 <__copybits+0x30>

08013f3c <__any_on>:
 8013f3c:	f100 0214 	add.w	r2, r0, #20
 8013f40:	6900      	ldr	r0, [r0, #16]
 8013f42:	114b      	asrs	r3, r1, #5
 8013f44:	4298      	cmp	r0, r3
 8013f46:	b510      	push	{r4, lr}
 8013f48:	db11      	blt.n	8013f6e <__any_on+0x32>
 8013f4a:	dd0a      	ble.n	8013f62 <__any_on+0x26>
 8013f4c:	f011 011f 	ands.w	r1, r1, #31
 8013f50:	d007      	beq.n	8013f62 <__any_on+0x26>
 8013f52:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013f56:	fa24 f001 	lsr.w	r0, r4, r1
 8013f5a:	fa00 f101 	lsl.w	r1, r0, r1
 8013f5e:	428c      	cmp	r4, r1
 8013f60:	d10b      	bne.n	8013f7a <__any_on+0x3e>
 8013f62:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013f66:	4293      	cmp	r3, r2
 8013f68:	d803      	bhi.n	8013f72 <__any_on+0x36>
 8013f6a:	2000      	movs	r0, #0
 8013f6c:	bd10      	pop	{r4, pc}
 8013f6e:	4603      	mov	r3, r0
 8013f70:	e7f7      	b.n	8013f62 <__any_on+0x26>
 8013f72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013f76:	2900      	cmp	r1, #0
 8013f78:	d0f5      	beq.n	8013f66 <__any_on+0x2a>
 8013f7a:	2001      	movs	r0, #1
 8013f7c:	e7f6      	b.n	8013f6c <__any_on+0x30>

08013f7e <_calloc_r>:
 8013f7e:	b513      	push	{r0, r1, r4, lr}
 8013f80:	434a      	muls	r2, r1
 8013f82:	4611      	mov	r1, r2
 8013f84:	9201      	str	r2, [sp, #4]
 8013f86:	f000 f859 	bl	801403c <_malloc_r>
 8013f8a:	4604      	mov	r4, r0
 8013f8c:	b118      	cbz	r0, 8013f96 <_calloc_r+0x18>
 8013f8e:	9a01      	ldr	r2, [sp, #4]
 8013f90:	2100      	movs	r1, #0
 8013f92:	f7fb ffe9 	bl	800ff68 <memset>
 8013f96:	4620      	mov	r0, r4
 8013f98:	b002      	add	sp, #8
 8013f9a:	bd10      	pop	{r4, pc}

08013f9c <_free_r>:
 8013f9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013f9e:	2900      	cmp	r1, #0
 8013fa0:	d048      	beq.n	8014034 <_free_r+0x98>
 8013fa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013fa6:	9001      	str	r0, [sp, #4]
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	f1a1 0404 	sub.w	r4, r1, #4
 8013fae:	bfb8      	it	lt
 8013fb0:	18e4      	addlt	r4, r4, r3
 8013fb2:	f001 f809 	bl	8014fc8 <__malloc_lock>
 8013fb6:	4a20      	ldr	r2, [pc, #128]	; (8014038 <_free_r+0x9c>)
 8013fb8:	9801      	ldr	r0, [sp, #4]
 8013fba:	6813      	ldr	r3, [r2, #0]
 8013fbc:	4615      	mov	r5, r2
 8013fbe:	b933      	cbnz	r3, 8013fce <_free_r+0x32>
 8013fc0:	6063      	str	r3, [r4, #4]
 8013fc2:	6014      	str	r4, [r2, #0]
 8013fc4:	b003      	add	sp, #12
 8013fc6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013fca:	f001 b803 	b.w	8014fd4 <__malloc_unlock>
 8013fce:	42a3      	cmp	r3, r4
 8013fd0:	d90b      	bls.n	8013fea <_free_r+0x4e>
 8013fd2:	6821      	ldr	r1, [r4, #0]
 8013fd4:	1862      	adds	r2, r4, r1
 8013fd6:	4293      	cmp	r3, r2
 8013fd8:	bf04      	itt	eq
 8013fda:	681a      	ldreq	r2, [r3, #0]
 8013fdc:	685b      	ldreq	r3, [r3, #4]
 8013fde:	6063      	str	r3, [r4, #4]
 8013fe0:	bf04      	itt	eq
 8013fe2:	1852      	addeq	r2, r2, r1
 8013fe4:	6022      	streq	r2, [r4, #0]
 8013fe6:	602c      	str	r4, [r5, #0]
 8013fe8:	e7ec      	b.n	8013fc4 <_free_r+0x28>
 8013fea:	461a      	mov	r2, r3
 8013fec:	685b      	ldr	r3, [r3, #4]
 8013fee:	b10b      	cbz	r3, 8013ff4 <_free_r+0x58>
 8013ff0:	42a3      	cmp	r3, r4
 8013ff2:	d9fa      	bls.n	8013fea <_free_r+0x4e>
 8013ff4:	6811      	ldr	r1, [r2, #0]
 8013ff6:	1855      	adds	r5, r2, r1
 8013ff8:	42a5      	cmp	r5, r4
 8013ffa:	d10b      	bne.n	8014014 <_free_r+0x78>
 8013ffc:	6824      	ldr	r4, [r4, #0]
 8013ffe:	4421      	add	r1, r4
 8014000:	1854      	adds	r4, r2, r1
 8014002:	42a3      	cmp	r3, r4
 8014004:	6011      	str	r1, [r2, #0]
 8014006:	d1dd      	bne.n	8013fc4 <_free_r+0x28>
 8014008:	681c      	ldr	r4, [r3, #0]
 801400a:	685b      	ldr	r3, [r3, #4]
 801400c:	6053      	str	r3, [r2, #4]
 801400e:	4421      	add	r1, r4
 8014010:	6011      	str	r1, [r2, #0]
 8014012:	e7d7      	b.n	8013fc4 <_free_r+0x28>
 8014014:	d902      	bls.n	801401c <_free_r+0x80>
 8014016:	230c      	movs	r3, #12
 8014018:	6003      	str	r3, [r0, #0]
 801401a:	e7d3      	b.n	8013fc4 <_free_r+0x28>
 801401c:	6825      	ldr	r5, [r4, #0]
 801401e:	1961      	adds	r1, r4, r5
 8014020:	428b      	cmp	r3, r1
 8014022:	bf04      	itt	eq
 8014024:	6819      	ldreq	r1, [r3, #0]
 8014026:	685b      	ldreq	r3, [r3, #4]
 8014028:	6063      	str	r3, [r4, #4]
 801402a:	bf04      	itt	eq
 801402c:	1949      	addeq	r1, r1, r5
 801402e:	6021      	streq	r1, [r4, #0]
 8014030:	6054      	str	r4, [r2, #4]
 8014032:	e7c7      	b.n	8013fc4 <_free_r+0x28>
 8014034:	b003      	add	sp, #12
 8014036:	bd30      	pop	{r4, r5, pc}
 8014038:	20000b28 	.word	0x20000b28

0801403c <_malloc_r>:
 801403c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801403e:	1ccd      	adds	r5, r1, #3
 8014040:	f025 0503 	bic.w	r5, r5, #3
 8014044:	3508      	adds	r5, #8
 8014046:	2d0c      	cmp	r5, #12
 8014048:	bf38      	it	cc
 801404a:	250c      	movcc	r5, #12
 801404c:	2d00      	cmp	r5, #0
 801404e:	4606      	mov	r6, r0
 8014050:	db01      	blt.n	8014056 <_malloc_r+0x1a>
 8014052:	42a9      	cmp	r1, r5
 8014054:	d903      	bls.n	801405e <_malloc_r+0x22>
 8014056:	230c      	movs	r3, #12
 8014058:	6033      	str	r3, [r6, #0]
 801405a:	2000      	movs	r0, #0
 801405c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801405e:	f000 ffb3 	bl	8014fc8 <__malloc_lock>
 8014062:	4921      	ldr	r1, [pc, #132]	; (80140e8 <_malloc_r+0xac>)
 8014064:	680a      	ldr	r2, [r1, #0]
 8014066:	4614      	mov	r4, r2
 8014068:	b99c      	cbnz	r4, 8014092 <_malloc_r+0x56>
 801406a:	4f20      	ldr	r7, [pc, #128]	; (80140ec <_malloc_r+0xb0>)
 801406c:	683b      	ldr	r3, [r7, #0]
 801406e:	b923      	cbnz	r3, 801407a <_malloc_r+0x3e>
 8014070:	4621      	mov	r1, r4
 8014072:	4630      	mov	r0, r6
 8014074:	f000 fe2c 	bl	8014cd0 <_sbrk_r>
 8014078:	6038      	str	r0, [r7, #0]
 801407a:	4629      	mov	r1, r5
 801407c:	4630      	mov	r0, r6
 801407e:	f000 fe27 	bl	8014cd0 <_sbrk_r>
 8014082:	1c43      	adds	r3, r0, #1
 8014084:	d123      	bne.n	80140ce <_malloc_r+0x92>
 8014086:	230c      	movs	r3, #12
 8014088:	6033      	str	r3, [r6, #0]
 801408a:	4630      	mov	r0, r6
 801408c:	f000 ffa2 	bl	8014fd4 <__malloc_unlock>
 8014090:	e7e3      	b.n	801405a <_malloc_r+0x1e>
 8014092:	6823      	ldr	r3, [r4, #0]
 8014094:	1b5b      	subs	r3, r3, r5
 8014096:	d417      	bmi.n	80140c8 <_malloc_r+0x8c>
 8014098:	2b0b      	cmp	r3, #11
 801409a:	d903      	bls.n	80140a4 <_malloc_r+0x68>
 801409c:	6023      	str	r3, [r4, #0]
 801409e:	441c      	add	r4, r3
 80140a0:	6025      	str	r5, [r4, #0]
 80140a2:	e004      	b.n	80140ae <_malloc_r+0x72>
 80140a4:	6863      	ldr	r3, [r4, #4]
 80140a6:	42a2      	cmp	r2, r4
 80140a8:	bf0c      	ite	eq
 80140aa:	600b      	streq	r3, [r1, #0]
 80140ac:	6053      	strne	r3, [r2, #4]
 80140ae:	4630      	mov	r0, r6
 80140b0:	f000 ff90 	bl	8014fd4 <__malloc_unlock>
 80140b4:	f104 000b 	add.w	r0, r4, #11
 80140b8:	1d23      	adds	r3, r4, #4
 80140ba:	f020 0007 	bic.w	r0, r0, #7
 80140be:	1ac2      	subs	r2, r0, r3
 80140c0:	d0cc      	beq.n	801405c <_malloc_r+0x20>
 80140c2:	1a1b      	subs	r3, r3, r0
 80140c4:	50a3      	str	r3, [r4, r2]
 80140c6:	e7c9      	b.n	801405c <_malloc_r+0x20>
 80140c8:	4622      	mov	r2, r4
 80140ca:	6864      	ldr	r4, [r4, #4]
 80140cc:	e7cc      	b.n	8014068 <_malloc_r+0x2c>
 80140ce:	1cc4      	adds	r4, r0, #3
 80140d0:	f024 0403 	bic.w	r4, r4, #3
 80140d4:	42a0      	cmp	r0, r4
 80140d6:	d0e3      	beq.n	80140a0 <_malloc_r+0x64>
 80140d8:	1a21      	subs	r1, r4, r0
 80140da:	4630      	mov	r0, r6
 80140dc:	f000 fdf8 	bl	8014cd0 <_sbrk_r>
 80140e0:	3001      	adds	r0, #1
 80140e2:	d1dd      	bne.n	80140a0 <_malloc_r+0x64>
 80140e4:	e7cf      	b.n	8014086 <_malloc_r+0x4a>
 80140e6:	bf00      	nop
 80140e8:	20000b28 	.word	0x20000b28
 80140ec:	20000b2c 	.word	0x20000b2c

080140f0 <__ssputs_r>:
 80140f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80140f4:	688e      	ldr	r6, [r1, #8]
 80140f6:	429e      	cmp	r6, r3
 80140f8:	4682      	mov	sl, r0
 80140fa:	460c      	mov	r4, r1
 80140fc:	4690      	mov	r8, r2
 80140fe:	461f      	mov	r7, r3
 8014100:	d838      	bhi.n	8014174 <__ssputs_r+0x84>
 8014102:	898a      	ldrh	r2, [r1, #12]
 8014104:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014108:	d032      	beq.n	8014170 <__ssputs_r+0x80>
 801410a:	6825      	ldr	r5, [r4, #0]
 801410c:	6909      	ldr	r1, [r1, #16]
 801410e:	eba5 0901 	sub.w	r9, r5, r1
 8014112:	6965      	ldr	r5, [r4, #20]
 8014114:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014118:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801411c:	3301      	adds	r3, #1
 801411e:	444b      	add	r3, r9
 8014120:	106d      	asrs	r5, r5, #1
 8014122:	429d      	cmp	r5, r3
 8014124:	bf38      	it	cc
 8014126:	461d      	movcc	r5, r3
 8014128:	0553      	lsls	r3, r2, #21
 801412a:	d531      	bpl.n	8014190 <__ssputs_r+0xa0>
 801412c:	4629      	mov	r1, r5
 801412e:	f7ff ff85 	bl	801403c <_malloc_r>
 8014132:	4606      	mov	r6, r0
 8014134:	b950      	cbnz	r0, 801414c <__ssputs_r+0x5c>
 8014136:	230c      	movs	r3, #12
 8014138:	f8ca 3000 	str.w	r3, [sl]
 801413c:	89a3      	ldrh	r3, [r4, #12]
 801413e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014142:	81a3      	strh	r3, [r4, #12]
 8014144:	f04f 30ff 	mov.w	r0, #4294967295
 8014148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801414c:	6921      	ldr	r1, [r4, #16]
 801414e:	464a      	mov	r2, r9
 8014150:	f7ff fa4c 	bl	80135ec <memcpy>
 8014154:	89a3      	ldrh	r3, [r4, #12]
 8014156:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801415a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801415e:	81a3      	strh	r3, [r4, #12]
 8014160:	6126      	str	r6, [r4, #16]
 8014162:	6165      	str	r5, [r4, #20]
 8014164:	444e      	add	r6, r9
 8014166:	eba5 0509 	sub.w	r5, r5, r9
 801416a:	6026      	str	r6, [r4, #0]
 801416c:	60a5      	str	r5, [r4, #8]
 801416e:	463e      	mov	r6, r7
 8014170:	42be      	cmp	r6, r7
 8014172:	d900      	bls.n	8014176 <__ssputs_r+0x86>
 8014174:	463e      	mov	r6, r7
 8014176:	4632      	mov	r2, r6
 8014178:	6820      	ldr	r0, [r4, #0]
 801417a:	4641      	mov	r1, r8
 801417c:	f000 ff0a 	bl	8014f94 <memmove>
 8014180:	68a3      	ldr	r3, [r4, #8]
 8014182:	6822      	ldr	r2, [r4, #0]
 8014184:	1b9b      	subs	r3, r3, r6
 8014186:	4432      	add	r2, r6
 8014188:	60a3      	str	r3, [r4, #8]
 801418a:	6022      	str	r2, [r4, #0]
 801418c:	2000      	movs	r0, #0
 801418e:	e7db      	b.n	8014148 <__ssputs_r+0x58>
 8014190:	462a      	mov	r2, r5
 8014192:	f000 ff25 	bl	8014fe0 <_realloc_r>
 8014196:	4606      	mov	r6, r0
 8014198:	2800      	cmp	r0, #0
 801419a:	d1e1      	bne.n	8014160 <__ssputs_r+0x70>
 801419c:	6921      	ldr	r1, [r4, #16]
 801419e:	4650      	mov	r0, sl
 80141a0:	f7ff fefc 	bl	8013f9c <_free_r>
 80141a4:	e7c7      	b.n	8014136 <__ssputs_r+0x46>
	...

080141a8 <_svfiprintf_r>:
 80141a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141ac:	4698      	mov	r8, r3
 80141ae:	898b      	ldrh	r3, [r1, #12]
 80141b0:	061b      	lsls	r3, r3, #24
 80141b2:	b09d      	sub	sp, #116	; 0x74
 80141b4:	4607      	mov	r7, r0
 80141b6:	460d      	mov	r5, r1
 80141b8:	4614      	mov	r4, r2
 80141ba:	d50e      	bpl.n	80141da <_svfiprintf_r+0x32>
 80141bc:	690b      	ldr	r3, [r1, #16]
 80141be:	b963      	cbnz	r3, 80141da <_svfiprintf_r+0x32>
 80141c0:	2140      	movs	r1, #64	; 0x40
 80141c2:	f7ff ff3b 	bl	801403c <_malloc_r>
 80141c6:	6028      	str	r0, [r5, #0]
 80141c8:	6128      	str	r0, [r5, #16]
 80141ca:	b920      	cbnz	r0, 80141d6 <_svfiprintf_r+0x2e>
 80141cc:	230c      	movs	r3, #12
 80141ce:	603b      	str	r3, [r7, #0]
 80141d0:	f04f 30ff 	mov.w	r0, #4294967295
 80141d4:	e0d1      	b.n	801437a <_svfiprintf_r+0x1d2>
 80141d6:	2340      	movs	r3, #64	; 0x40
 80141d8:	616b      	str	r3, [r5, #20]
 80141da:	2300      	movs	r3, #0
 80141dc:	9309      	str	r3, [sp, #36]	; 0x24
 80141de:	2320      	movs	r3, #32
 80141e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80141e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80141e8:	2330      	movs	r3, #48	; 0x30
 80141ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014394 <_svfiprintf_r+0x1ec>
 80141ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80141f2:	f04f 0901 	mov.w	r9, #1
 80141f6:	4623      	mov	r3, r4
 80141f8:	469a      	mov	sl, r3
 80141fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80141fe:	b10a      	cbz	r2, 8014204 <_svfiprintf_r+0x5c>
 8014200:	2a25      	cmp	r2, #37	; 0x25
 8014202:	d1f9      	bne.n	80141f8 <_svfiprintf_r+0x50>
 8014204:	ebba 0b04 	subs.w	fp, sl, r4
 8014208:	d00b      	beq.n	8014222 <_svfiprintf_r+0x7a>
 801420a:	465b      	mov	r3, fp
 801420c:	4622      	mov	r2, r4
 801420e:	4629      	mov	r1, r5
 8014210:	4638      	mov	r0, r7
 8014212:	f7ff ff6d 	bl	80140f0 <__ssputs_r>
 8014216:	3001      	adds	r0, #1
 8014218:	f000 80aa 	beq.w	8014370 <_svfiprintf_r+0x1c8>
 801421c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801421e:	445a      	add	r2, fp
 8014220:	9209      	str	r2, [sp, #36]	; 0x24
 8014222:	f89a 3000 	ldrb.w	r3, [sl]
 8014226:	2b00      	cmp	r3, #0
 8014228:	f000 80a2 	beq.w	8014370 <_svfiprintf_r+0x1c8>
 801422c:	2300      	movs	r3, #0
 801422e:	f04f 32ff 	mov.w	r2, #4294967295
 8014232:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014236:	f10a 0a01 	add.w	sl, sl, #1
 801423a:	9304      	str	r3, [sp, #16]
 801423c:	9307      	str	r3, [sp, #28]
 801423e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014242:	931a      	str	r3, [sp, #104]	; 0x68
 8014244:	4654      	mov	r4, sl
 8014246:	2205      	movs	r2, #5
 8014248:	f814 1b01 	ldrb.w	r1, [r4], #1
 801424c:	4851      	ldr	r0, [pc, #324]	; (8014394 <_svfiprintf_r+0x1ec>)
 801424e:	f7eb ffd7 	bl	8000200 <memchr>
 8014252:	9a04      	ldr	r2, [sp, #16]
 8014254:	b9d8      	cbnz	r0, 801428e <_svfiprintf_r+0xe6>
 8014256:	06d0      	lsls	r0, r2, #27
 8014258:	bf44      	itt	mi
 801425a:	2320      	movmi	r3, #32
 801425c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014260:	0711      	lsls	r1, r2, #28
 8014262:	bf44      	itt	mi
 8014264:	232b      	movmi	r3, #43	; 0x2b
 8014266:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801426a:	f89a 3000 	ldrb.w	r3, [sl]
 801426e:	2b2a      	cmp	r3, #42	; 0x2a
 8014270:	d015      	beq.n	801429e <_svfiprintf_r+0xf6>
 8014272:	9a07      	ldr	r2, [sp, #28]
 8014274:	4654      	mov	r4, sl
 8014276:	2000      	movs	r0, #0
 8014278:	f04f 0c0a 	mov.w	ip, #10
 801427c:	4621      	mov	r1, r4
 801427e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014282:	3b30      	subs	r3, #48	; 0x30
 8014284:	2b09      	cmp	r3, #9
 8014286:	d94e      	bls.n	8014326 <_svfiprintf_r+0x17e>
 8014288:	b1b0      	cbz	r0, 80142b8 <_svfiprintf_r+0x110>
 801428a:	9207      	str	r2, [sp, #28]
 801428c:	e014      	b.n	80142b8 <_svfiprintf_r+0x110>
 801428e:	eba0 0308 	sub.w	r3, r0, r8
 8014292:	fa09 f303 	lsl.w	r3, r9, r3
 8014296:	4313      	orrs	r3, r2
 8014298:	9304      	str	r3, [sp, #16]
 801429a:	46a2      	mov	sl, r4
 801429c:	e7d2      	b.n	8014244 <_svfiprintf_r+0x9c>
 801429e:	9b03      	ldr	r3, [sp, #12]
 80142a0:	1d19      	adds	r1, r3, #4
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	9103      	str	r1, [sp, #12]
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	bfbb      	ittet	lt
 80142aa:	425b      	neglt	r3, r3
 80142ac:	f042 0202 	orrlt.w	r2, r2, #2
 80142b0:	9307      	strge	r3, [sp, #28]
 80142b2:	9307      	strlt	r3, [sp, #28]
 80142b4:	bfb8      	it	lt
 80142b6:	9204      	strlt	r2, [sp, #16]
 80142b8:	7823      	ldrb	r3, [r4, #0]
 80142ba:	2b2e      	cmp	r3, #46	; 0x2e
 80142bc:	d10c      	bne.n	80142d8 <_svfiprintf_r+0x130>
 80142be:	7863      	ldrb	r3, [r4, #1]
 80142c0:	2b2a      	cmp	r3, #42	; 0x2a
 80142c2:	d135      	bne.n	8014330 <_svfiprintf_r+0x188>
 80142c4:	9b03      	ldr	r3, [sp, #12]
 80142c6:	1d1a      	adds	r2, r3, #4
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	9203      	str	r2, [sp, #12]
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	bfb8      	it	lt
 80142d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80142d4:	3402      	adds	r4, #2
 80142d6:	9305      	str	r3, [sp, #20]
 80142d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80143a4 <_svfiprintf_r+0x1fc>
 80142dc:	7821      	ldrb	r1, [r4, #0]
 80142de:	2203      	movs	r2, #3
 80142e0:	4650      	mov	r0, sl
 80142e2:	f7eb ff8d 	bl	8000200 <memchr>
 80142e6:	b140      	cbz	r0, 80142fa <_svfiprintf_r+0x152>
 80142e8:	2340      	movs	r3, #64	; 0x40
 80142ea:	eba0 000a 	sub.w	r0, r0, sl
 80142ee:	fa03 f000 	lsl.w	r0, r3, r0
 80142f2:	9b04      	ldr	r3, [sp, #16]
 80142f4:	4303      	orrs	r3, r0
 80142f6:	3401      	adds	r4, #1
 80142f8:	9304      	str	r3, [sp, #16]
 80142fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80142fe:	4826      	ldr	r0, [pc, #152]	; (8014398 <_svfiprintf_r+0x1f0>)
 8014300:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014304:	2206      	movs	r2, #6
 8014306:	f7eb ff7b 	bl	8000200 <memchr>
 801430a:	2800      	cmp	r0, #0
 801430c:	d038      	beq.n	8014380 <_svfiprintf_r+0x1d8>
 801430e:	4b23      	ldr	r3, [pc, #140]	; (801439c <_svfiprintf_r+0x1f4>)
 8014310:	bb1b      	cbnz	r3, 801435a <_svfiprintf_r+0x1b2>
 8014312:	9b03      	ldr	r3, [sp, #12]
 8014314:	3307      	adds	r3, #7
 8014316:	f023 0307 	bic.w	r3, r3, #7
 801431a:	3308      	adds	r3, #8
 801431c:	9303      	str	r3, [sp, #12]
 801431e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014320:	4433      	add	r3, r6
 8014322:	9309      	str	r3, [sp, #36]	; 0x24
 8014324:	e767      	b.n	80141f6 <_svfiprintf_r+0x4e>
 8014326:	fb0c 3202 	mla	r2, ip, r2, r3
 801432a:	460c      	mov	r4, r1
 801432c:	2001      	movs	r0, #1
 801432e:	e7a5      	b.n	801427c <_svfiprintf_r+0xd4>
 8014330:	2300      	movs	r3, #0
 8014332:	3401      	adds	r4, #1
 8014334:	9305      	str	r3, [sp, #20]
 8014336:	4619      	mov	r1, r3
 8014338:	f04f 0c0a 	mov.w	ip, #10
 801433c:	4620      	mov	r0, r4
 801433e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014342:	3a30      	subs	r2, #48	; 0x30
 8014344:	2a09      	cmp	r2, #9
 8014346:	d903      	bls.n	8014350 <_svfiprintf_r+0x1a8>
 8014348:	2b00      	cmp	r3, #0
 801434a:	d0c5      	beq.n	80142d8 <_svfiprintf_r+0x130>
 801434c:	9105      	str	r1, [sp, #20]
 801434e:	e7c3      	b.n	80142d8 <_svfiprintf_r+0x130>
 8014350:	fb0c 2101 	mla	r1, ip, r1, r2
 8014354:	4604      	mov	r4, r0
 8014356:	2301      	movs	r3, #1
 8014358:	e7f0      	b.n	801433c <_svfiprintf_r+0x194>
 801435a:	ab03      	add	r3, sp, #12
 801435c:	9300      	str	r3, [sp, #0]
 801435e:	462a      	mov	r2, r5
 8014360:	4b0f      	ldr	r3, [pc, #60]	; (80143a0 <_svfiprintf_r+0x1f8>)
 8014362:	a904      	add	r1, sp, #16
 8014364:	4638      	mov	r0, r7
 8014366:	f7fb fea7 	bl	80100b8 <_printf_float>
 801436a:	1c42      	adds	r2, r0, #1
 801436c:	4606      	mov	r6, r0
 801436e:	d1d6      	bne.n	801431e <_svfiprintf_r+0x176>
 8014370:	89ab      	ldrh	r3, [r5, #12]
 8014372:	065b      	lsls	r3, r3, #25
 8014374:	f53f af2c 	bmi.w	80141d0 <_svfiprintf_r+0x28>
 8014378:	9809      	ldr	r0, [sp, #36]	; 0x24
 801437a:	b01d      	add	sp, #116	; 0x74
 801437c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014380:	ab03      	add	r3, sp, #12
 8014382:	9300      	str	r3, [sp, #0]
 8014384:	462a      	mov	r2, r5
 8014386:	4b06      	ldr	r3, [pc, #24]	; (80143a0 <_svfiprintf_r+0x1f8>)
 8014388:	a904      	add	r1, sp, #16
 801438a:	4638      	mov	r0, r7
 801438c:	f7fc f938 	bl	8010600 <_printf_i>
 8014390:	e7eb      	b.n	801436a <_svfiprintf_r+0x1c2>
 8014392:	bf00      	nop
 8014394:	08015934 	.word	0x08015934
 8014398:	0801593e 	.word	0x0801593e
 801439c:	080100b9 	.word	0x080100b9
 80143a0:	080140f1 	.word	0x080140f1
 80143a4:	0801593a 	.word	0x0801593a

080143a8 <_sungetc_r>:
 80143a8:	b538      	push	{r3, r4, r5, lr}
 80143aa:	1c4b      	adds	r3, r1, #1
 80143ac:	4614      	mov	r4, r2
 80143ae:	d103      	bne.n	80143b8 <_sungetc_r+0x10>
 80143b0:	f04f 35ff 	mov.w	r5, #4294967295
 80143b4:	4628      	mov	r0, r5
 80143b6:	bd38      	pop	{r3, r4, r5, pc}
 80143b8:	8993      	ldrh	r3, [r2, #12]
 80143ba:	f023 0320 	bic.w	r3, r3, #32
 80143be:	8193      	strh	r3, [r2, #12]
 80143c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80143c2:	6852      	ldr	r2, [r2, #4]
 80143c4:	b2cd      	uxtb	r5, r1
 80143c6:	b18b      	cbz	r3, 80143ec <_sungetc_r+0x44>
 80143c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80143ca:	4293      	cmp	r3, r2
 80143cc:	dd08      	ble.n	80143e0 <_sungetc_r+0x38>
 80143ce:	6823      	ldr	r3, [r4, #0]
 80143d0:	1e5a      	subs	r2, r3, #1
 80143d2:	6022      	str	r2, [r4, #0]
 80143d4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80143d8:	6863      	ldr	r3, [r4, #4]
 80143da:	3301      	adds	r3, #1
 80143dc:	6063      	str	r3, [r4, #4]
 80143de:	e7e9      	b.n	80143b4 <_sungetc_r+0xc>
 80143e0:	4621      	mov	r1, r4
 80143e2:	f000 fd3d 	bl	8014e60 <__submore>
 80143e6:	2800      	cmp	r0, #0
 80143e8:	d0f1      	beq.n	80143ce <_sungetc_r+0x26>
 80143ea:	e7e1      	b.n	80143b0 <_sungetc_r+0x8>
 80143ec:	6921      	ldr	r1, [r4, #16]
 80143ee:	6823      	ldr	r3, [r4, #0]
 80143f0:	b151      	cbz	r1, 8014408 <_sungetc_r+0x60>
 80143f2:	4299      	cmp	r1, r3
 80143f4:	d208      	bcs.n	8014408 <_sungetc_r+0x60>
 80143f6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80143fa:	42a9      	cmp	r1, r5
 80143fc:	d104      	bne.n	8014408 <_sungetc_r+0x60>
 80143fe:	3b01      	subs	r3, #1
 8014400:	3201      	adds	r2, #1
 8014402:	6023      	str	r3, [r4, #0]
 8014404:	6062      	str	r2, [r4, #4]
 8014406:	e7d5      	b.n	80143b4 <_sungetc_r+0xc>
 8014408:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801440c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014410:	6363      	str	r3, [r4, #52]	; 0x34
 8014412:	2303      	movs	r3, #3
 8014414:	63a3      	str	r3, [r4, #56]	; 0x38
 8014416:	4623      	mov	r3, r4
 8014418:	f803 5f46 	strb.w	r5, [r3, #70]!
 801441c:	6023      	str	r3, [r4, #0]
 801441e:	2301      	movs	r3, #1
 8014420:	e7dc      	b.n	80143dc <_sungetc_r+0x34>

08014422 <__ssrefill_r>:
 8014422:	b510      	push	{r4, lr}
 8014424:	460c      	mov	r4, r1
 8014426:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014428:	b169      	cbz	r1, 8014446 <__ssrefill_r+0x24>
 801442a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801442e:	4299      	cmp	r1, r3
 8014430:	d001      	beq.n	8014436 <__ssrefill_r+0x14>
 8014432:	f7ff fdb3 	bl	8013f9c <_free_r>
 8014436:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014438:	6063      	str	r3, [r4, #4]
 801443a:	2000      	movs	r0, #0
 801443c:	6360      	str	r0, [r4, #52]	; 0x34
 801443e:	b113      	cbz	r3, 8014446 <__ssrefill_r+0x24>
 8014440:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8014442:	6023      	str	r3, [r4, #0]
 8014444:	bd10      	pop	{r4, pc}
 8014446:	6923      	ldr	r3, [r4, #16]
 8014448:	6023      	str	r3, [r4, #0]
 801444a:	2300      	movs	r3, #0
 801444c:	6063      	str	r3, [r4, #4]
 801444e:	89a3      	ldrh	r3, [r4, #12]
 8014450:	f043 0320 	orr.w	r3, r3, #32
 8014454:	81a3      	strh	r3, [r4, #12]
 8014456:	f04f 30ff 	mov.w	r0, #4294967295
 801445a:	e7f3      	b.n	8014444 <__ssrefill_r+0x22>

0801445c <__ssvfiscanf_r>:
 801445c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014460:	460c      	mov	r4, r1
 8014462:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8014466:	2100      	movs	r1, #0
 8014468:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801446c:	49b2      	ldr	r1, [pc, #712]	; (8014738 <__ssvfiscanf_r+0x2dc>)
 801446e:	91a0      	str	r1, [sp, #640]	; 0x280
 8014470:	f10d 0804 	add.w	r8, sp, #4
 8014474:	49b1      	ldr	r1, [pc, #708]	; (801473c <__ssvfiscanf_r+0x2e0>)
 8014476:	4fb2      	ldr	r7, [pc, #712]	; (8014740 <__ssvfiscanf_r+0x2e4>)
 8014478:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8014744 <__ssvfiscanf_r+0x2e8>
 801447c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8014480:	4606      	mov	r6, r0
 8014482:	91a1      	str	r1, [sp, #644]	; 0x284
 8014484:	9300      	str	r3, [sp, #0]
 8014486:	f892 a000 	ldrb.w	sl, [r2]
 801448a:	f1ba 0f00 	cmp.w	sl, #0
 801448e:	f000 8151 	beq.w	8014734 <__ssvfiscanf_r+0x2d8>
 8014492:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8014496:	f013 0308 	ands.w	r3, r3, #8
 801449a:	f102 0501 	add.w	r5, r2, #1
 801449e:	d019      	beq.n	80144d4 <__ssvfiscanf_r+0x78>
 80144a0:	6863      	ldr	r3, [r4, #4]
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	dd0f      	ble.n	80144c6 <__ssvfiscanf_r+0x6a>
 80144a6:	6823      	ldr	r3, [r4, #0]
 80144a8:	781a      	ldrb	r2, [r3, #0]
 80144aa:	5cba      	ldrb	r2, [r7, r2]
 80144ac:	0712      	lsls	r2, r2, #28
 80144ae:	d401      	bmi.n	80144b4 <__ssvfiscanf_r+0x58>
 80144b0:	462a      	mov	r2, r5
 80144b2:	e7e8      	b.n	8014486 <__ssvfiscanf_r+0x2a>
 80144b4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80144b6:	3201      	adds	r2, #1
 80144b8:	9245      	str	r2, [sp, #276]	; 0x114
 80144ba:	6862      	ldr	r2, [r4, #4]
 80144bc:	3301      	adds	r3, #1
 80144be:	3a01      	subs	r2, #1
 80144c0:	6062      	str	r2, [r4, #4]
 80144c2:	6023      	str	r3, [r4, #0]
 80144c4:	e7ec      	b.n	80144a0 <__ssvfiscanf_r+0x44>
 80144c6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80144c8:	4621      	mov	r1, r4
 80144ca:	4630      	mov	r0, r6
 80144cc:	4798      	blx	r3
 80144ce:	2800      	cmp	r0, #0
 80144d0:	d0e9      	beq.n	80144a6 <__ssvfiscanf_r+0x4a>
 80144d2:	e7ed      	b.n	80144b0 <__ssvfiscanf_r+0x54>
 80144d4:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80144d8:	f040 8083 	bne.w	80145e2 <__ssvfiscanf_r+0x186>
 80144dc:	9341      	str	r3, [sp, #260]	; 0x104
 80144de:	9343      	str	r3, [sp, #268]	; 0x10c
 80144e0:	7853      	ldrb	r3, [r2, #1]
 80144e2:	2b2a      	cmp	r3, #42	; 0x2a
 80144e4:	bf02      	ittt	eq
 80144e6:	2310      	moveq	r3, #16
 80144e8:	1c95      	addeq	r5, r2, #2
 80144ea:	9341      	streq	r3, [sp, #260]	; 0x104
 80144ec:	220a      	movs	r2, #10
 80144ee:	46ab      	mov	fp, r5
 80144f0:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80144f4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80144f8:	2b09      	cmp	r3, #9
 80144fa:	d91d      	bls.n	8014538 <__ssvfiscanf_r+0xdc>
 80144fc:	4891      	ldr	r0, [pc, #580]	; (8014744 <__ssvfiscanf_r+0x2e8>)
 80144fe:	2203      	movs	r2, #3
 8014500:	f7eb fe7e 	bl	8000200 <memchr>
 8014504:	b140      	cbz	r0, 8014518 <__ssvfiscanf_r+0xbc>
 8014506:	2301      	movs	r3, #1
 8014508:	eba0 0009 	sub.w	r0, r0, r9
 801450c:	fa03 f000 	lsl.w	r0, r3, r0
 8014510:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014512:	4318      	orrs	r0, r3
 8014514:	9041      	str	r0, [sp, #260]	; 0x104
 8014516:	465d      	mov	r5, fp
 8014518:	f815 3b01 	ldrb.w	r3, [r5], #1
 801451c:	2b78      	cmp	r3, #120	; 0x78
 801451e:	d806      	bhi.n	801452e <__ssvfiscanf_r+0xd2>
 8014520:	2b57      	cmp	r3, #87	; 0x57
 8014522:	d810      	bhi.n	8014546 <__ssvfiscanf_r+0xea>
 8014524:	2b25      	cmp	r3, #37	; 0x25
 8014526:	d05c      	beq.n	80145e2 <__ssvfiscanf_r+0x186>
 8014528:	d856      	bhi.n	80145d8 <__ssvfiscanf_r+0x17c>
 801452a:	2b00      	cmp	r3, #0
 801452c:	d074      	beq.n	8014618 <__ssvfiscanf_r+0x1bc>
 801452e:	2303      	movs	r3, #3
 8014530:	9347      	str	r3, [sp, #284]	; 0x11c
 8014532:	230a      	movs	r3, #10
 8014534:	9342      	str	r3, [sp, #264]	; 0x108
 8014536:	e081      	b.n	801463c <__ssvfiscanf_r+0x1e0>
 8014538:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801453a:	fb02 1303 	mla	r3, r2, r3, r1
 801453e:	3b30      	subs	r3, #48	; 0x30
 8014540:	9343      	str	r3, [sp, #268]	; 0x10c
 8014542:	465d      	mov	r5, fp
 8014544:	e7d3      	b.n	80144ee <__ssvfiscanf_r+0x92>
 8014546:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801454a:	2a20      	cmp	r2, #32
 801454c:	d8ef      	bhi.n	801452e <__ssvfiscanf_r+0xd2>
 801454e:	a101      	add	r1, pc, #4	; (adr r1, 8014554 <__ssvfiscanf_r+0xf8>)
 8014550:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014554:	08014627 	.word	0x08014627
 8014558:	0801452f 	.word	0x0801452f
 801455c:	0801452f 	.word	0x0801452f
 8014560:	08014685 	.word	0x08014685
 8014564:	0801452f 	.word	0x0801452f
 8014568:	0801452f 	.word	0x0801452f
 801456c:	0801452f 	.word	0x0801452f
 8014570:	0801452f 	.word	0x0801452f
 8014574:	0801452f 	.word	0x0801452f
 8014578:	0801452f 	.word	0x0801452f
 801457c:	0801452f 	.word	0x0801452f
 8014580:	0801469b 	.word	0x0801469b
 8014584:	08014671 	.word	0x08014671
 8014588:	080145df 	.word	0x080145df
 801458c:	080145df 	.word	0x080145df
 8014590:	080145df 	.word	0x080145df
 8014594:	0801452f 	.word	0x0801452f
 8014598:	08014675 	.word	0x08014675
 801459c:	0801452f 	.word	0x0801452f
 80145a0:	0801452f 	.word	0x0801452f
 80145a4:	0801452f 	.word	0x0801452f
 80145a8:	0801452f 	.word	0x0801452f
 80145ac:	080146ab 	.word	0x080146ab
 80145b0:	0801467d 	.word	0x0801467d
 80145b4:	0801461f 	.word	0x0801461f
 80145b8:	0801452f 	.word	0x0801452f
 80145bc:	0801452f 	.word	0x0801452f
 80145c0:	080146a7 	.word	0x080146a7
 80145c4:	0801452f 	.word	0x0801452f
 80145c8:	08014671 	.word	0x08014671
 80145cc:	0801452f 	.word	0x0801452f
 80145d0:	0801452f 	.word	0x0801452f
 80145d4:	08014627 	.word	0x08014627
 80145d8:	3b45      	subs	r3, #69	; 0x45
 80145da:	2b02      	cmp	r3, #2
 80145dc:	d8a7      	bhi.n	801452e <__ssvfiscanf_r+0xd2>
 80145de:	2305      	movs	r3, #5
 80145e0:	e02b      	b.n	801463a <__ssvfiscanf_r+0x1de>
 80145e2:	6863      	ldr	r3, [r4, #4]
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	dd0d      	ble.n	8014604 <__ssvfiscanf_r+0x1a8>
 80145e8:	6823      	ldr	r3, [r4, #0]
 80145ea:	781a      	ldrb	r2, [r3, #0]
 80145ec:	4552      	cmp	r2, sl
 80145ee:	f040 80a1 	bne.w	8014734 <__ssvfiscanf_r+0x2d8>
 80145f2:	3301      	adds	r3, #1
 80145f4:	6862      	ldr	r2, [r4, #4]
 80145f6:	6023      	str	r3, [r4, #0]
 80145f8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80145fa:	3a01      	subs	r2, #1
 80145fc:	3301      	adds	r3, #1
 80145fe:	6062      	str	r2, [r4, #4]
 8014600:	9345      	str	r3, [sp, #276]	; 0x114
 8014602:	e755      	b.n	80144b0 <__ssvfiscanf_r+0x54>
 8014604:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014606:	4621      	mov	r1, r4
 8014608:	4630      	mov	r0, r6
 801460a:	4798      	blx	r3
 801460c:	2800      	cmp	r0, #0
 801460e:	d0eb      	beq.n	80145e8 <__ssvfiscanf_r+0x18c>
 8014610:	9844      	ldr	r0, [sp, #272]	; 0x110
 8014612:	2800      	cmp	r0, #0
 8014614:	f040 8084 	bne.w	8014720 <__ssvfiscanf_r+0x2c4>
 8014618:	f04f 30ff 	mov.w	r0, #4294967295
 801461c:	e086      	b.n	801472c <__ssvfiscanf_r+0x2d0>
 801461e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014620:	f042 0220 	orr.w	r2, r2, #32
 8014624:	9241      	str	r2, [sp, #260]	; 0x104
 8014626:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801462c:	9241      	str	r2, [sp, #260]	; 0x104
 801462e:	2210      	movs	r2, #16
 8014630:	2b6f      	cmp	r3, #111	; 0x6f
 8014632:	9242      	str	r2, [sp, #264]	; 0x108
 8014634:	bf34      	ite	cc
 8014636:	2303      	movcc	r3, #3
 8014638:	2304      	movcs	r3, #4
 801463a:	9347      	str	r3, [sp, #284]	; 0x11c
 801463c:	6863      	ldr	r3, [r4, #4]
 801463e:	2b00      	cmp	r3, #0
 8014640:	dd41      	ble.n	80146c6 <__ssvfiscanf_r+0x26a>
 8014642:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014644:	0659      	lsls	r1, r3, #25
 8014646:	d404      	bmi.n	8014652 <__ssvfiscanf_r+0x1f6>
 8014648:	6823      	ldr	r3, [r4, #0]
 801464a:	781a      	ldrb	r2, [r3, #0]
 801464c:	5cba      	ldrb	r2, [r7, r2]
 801464e:	0712      	lsls	r2, r2, #28
 8014650:	d440      	bmi.n	80146d4 <__ssvfiscanf_r+0x278>
 8014652:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8014654:	2b02      	cmp	r3, #2
 8014656:	dc4f      	bgt.n	80146f8 <__ssvfiscanf_r+0x29c>
 8014658:	466b      	mov	r3, sp
 801465a:	4622      	mov	r2, r4
 801465c:	a941      	add	r1, sp, #260	; 0x104
 801465e:	4630      	mov	r0, r6
 8014660:	f000 f9ce 	bl	8014a00 <_scanf_chars>
 8014664:	2801      	cmp	r0, #1
 8014666:	d065      	beq.n	8014734 <__ssvfiscanf_r+0x2d8>
 8014668:	2802      	cmp	r0, #2
 801466a:	f47f af21 	bne.w	80144b0 <__ssvfiscanf_r+0x54>
 801466e:	e7cf      	b.n	8014610 <__ssvfiscanf_r+0x1b4>
 8014670:	220a      	movs	r2, #10
 8014672:	e7dd      	b.n	8014630 <__ssvfiscanf_r+0x1d4>
 8014674:	2300      	movs	r3, #0
 8014676:	9342      	str	r3, [sp, #264]	; 0x108
 8014678:	2303      	movs	r3, #3
 801467a:	e7de      	b.n	801463a <__ssvfiscanf_r+0x1de>
 801467c:	2308      	movs	r3, #8
 801467e:	9342      	str	r3, [sp, #264]	; 0x108
 8014680:	2304      	movs	r3, #4
 8014682:	e7da      	b.n	801463a <__ssvfiscanf_r+0x1de>
 8014684:	4629      	mov	r1, r5
 8014686:	4640      	mov	r0, r8
 8014688:	f000 fb32 	bl	8014cf0 <__sccl>
 801468c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801468e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014692:	9341      	str	r3, [sp, #260]	; 0x104
 8014694:	4605      	mov	r5, r0
 8014696:	2301      	movs	r3, #1
 8014698:	e7cf      	b.n	801463a <__ssvfiscanf_r+0x1de>
 801469a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801469c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80146a0:	9341      	str	r3, [sp, #260]	; 0x104
 80146a2:	2300      	movs	r3, #0
 80146a4:	e7c9      	b.n	801463a <__ssvfiscanf_r+0x1de>
 80146a6:	2302      	movs	r3, #2
 80146a8:	e7c7      	b.n	801463a <__ssvfiscanf_r+0x1de>
 80146aa:	9841      	ldr	r0, [sp, #260]	; 0x104
 80146ac:	06c3      	lsls	r3, r0, #27
 80146ae:	f53f aeff 	bmi.w	80144b0 <__ssvfiscanf_r+0x54>
 80146b2:	9b00      	ldr	r3, [sp, #0]
 80146b4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80146b6:	1d19      	adds	r1, r3, #4
 80146b8:	9100      	str	r1, [sp, #0]
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	07c0      	lsls	r0, r0, #31
 80146be:	bf4c      	ite	mi
 80146c0:	801a      	strhmi	r2, [r3, #0]
 80146c2:	601a      	strpl	r2, [r3, #0]
 80146c4:	e6f4      	b.n	80144b0 <__ssvfiscanf_r+0x54>
 80146c6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80146c8:	4621      	mov	r1, r4
 80146ca:	4630      	mov	r0, r6
 80146cc:	4798      	blx	r3
 80146ce:	2800      	cmp	r0, #0
 80146d0:	d0b7      	beq.n	8014642 <__ssvfiscanf_r+0x1e6>
 80146d2:	e79d      	b.n	8014610 <__ssvfiscanf_r+0x1b4>
 80146d4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80146d6:	3201      	adds	r2, #1
 80146d8:	9245      	str	r2, [sp, #276]	; 0x114
 80146da:	6862      	ldr	r2, [r4, #4]
 80146dc:	3a01      	subs	r2, #1
 80146de:	2a00      	cmp	r2, #0
 80146e0:	6062      	str	r2, [r4, #4]
 80146e2:	dd02      	ble.n	80146ea <__ssvfiscanf_r+0x28e>
 80146e4:	3301      	adds	r3, #1
 80146e6:	6023      	str	r3, [r4, #0]
 80146e8:	e7ae      	b.n	8014648 <__ssvfiscanf_r+0x1ec>
 80146ea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80146ec:	4621      	mov	r1, r4
 80146ee:	4630      	mov	r0, r6
 80146f0:	4798      	blx	r3
 80146f2:	2800      	cmp	r0, #0
 80146f4:	d0a8      	beq.n	8014648 <__ssvfiscanf_r+0x1ec>
 80146f6:	e78b      	b.n	8014610 <__ssvfiscanf_r+0x1b4>
 80146f8:	2b04      	cmp	r3, #4
 80146fa:	dc06      	bgt.n	801470a <__ssvfiscanf_r+0x2ae>
 80146fc:	466b      	mov	r3, sp
 80146fe:	4622      	mov	r2, r4
 8014700:	a941      	add	r1, sp, #260	; 0x104
 8014702:	4630      	mov	r0, r6
 8014704:	f000 f9d4 	bl	8014ab0 <_scanf_i>
 8014708:	e7ac      	b.n	8014664 <__ssvfiscanf_r+0x208>
 801470a:	4b0f      	ldr	r3, [pc, #60]	; (8014748 <__ssvfiscanf_r+0x2ec>)
 801470c:	2b00      	cmp	r3, #0
 801470e:	f43f aecf 	beq.w	80144b0 <__ssvfiscanf_r+0x54>
 8014712:	466b      	mov	r3, sp
 8014714:	4622      	mov	r2, r4
 8014716:	a941      	add	r1, sp, #260	; 0x104
 8014718:	4630      	mov	r0, r6
 801471a:	f7fc f897 	bl	801084c <_scanf_float>
 801471e:	e7a1      	b.n	8014664 <__ssvfiscanf_r+0x208>
 8014720:	89a3      	ldrh	r3, [r4, #12]
 8014722:	f013 0f40 	tst.w	r3, #64	; 0x40
 8014726:	bf18      	it	ne
 8014728:	f04f 30ff 	movne.w	r0, #4294967295
 801472c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8014730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014734:	9844      	ldr	r0, [sp, #272]	; 0x110
 8014736:	e7f9      	b.n	801472c <__ssvfiscanf_r+0x2d0>
 8014738:	080143a9 	.word	0x080143a9
 801473c:	08014423 	.word	0x08014423
 8014740:	080154d1 	.word	0x080154d1
 8014744:	0801593a 	.word	0x0801593a
 8014748:	0801084d 	.word	0x0801084d

0801474c <__sfputc_r>:
 801474c:	6893      	ldr	r3, [r2, #8]
 801474e:	3b01      	subs	r3, #1
 8014750:	2b00      	cmp	r3, #0
 8014752:	b410      	push	{r4}
 8014754:	6093      	str	r3, [r2, #8]
 8014756:	da08      	bge.n	801476a <__sfputc_r+0x1e>
 8014758:	6994      	ldr	r4, [r2, #24]
 801475a:	42a3      	cmp	r3, r4
 801475c:	db01      	blt.n	8014762 <__sfputc_r+0x16>
 801475e:	290a      	cmp	r1, #10
 8014760:	d103      	bne.n	801476a <__sfputc_r+0x1e>
 8014762:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014766:	f7fd ba29 	b.w	8011bbc <__swbuf_r>
 801476a:	6813      	ldr	r3, [r2, #0]
 801476c:	1c58      	adds	r0, r3, #1
 801476e:	6010      	str	r0, [r2, #0]
 8014770:	7019      	strb	r1, [r3, #0]
 8014772:	4608      	mov	r0, r1
 8014774:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014778:	4770      	bx	lr

0801477a <__sfputs_r>:
 801477a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801477c:	4606      	mov	r6, r0
 801477e:	460f      	mov	r7, r1
 8014780:	4614      	mov	r4, r2
 8014782:	18d5      	adds	r5, r2, r3
 8014784:	42ac      	cmp	r4, r5
 8014786:	d101      	bne.n	801478c <__sfputs_r+0x12>
 8014788:	2000      	movs	r0, #0
 801478a:	e007      	b.n	801479c <__sfputs_r+0x22>
 801478c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014790:	463a      	mov	r2, r7
 8014792:	4630      	mov	r0, r6
 8014794:	f7ff ffda 	bl	801474c <__sfputc_r>
 8014798:	1c43      	adds	r3, r0, #1
 801479a:	d1f3      	bne.n	8014784 <__sfputs_r+0xa>
 801479c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080147a0 <_vfiprintf_r>:
 80147a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147a4:	460d      	mov	r5, r1
 80147a6:	b09d      	sub	sp, #116	; 0x74
 80147a8:	4614      	mov	r4, r2
 80147aa:	4698      	mov	r8, r3
 80147ac:	4606      	mov	r6, r0
 80147ae:	b118      	cbz	r0, 80147b8 <_vfiprintf_r+0x18>
 80147b0:	6983      	ldr	r3, [r0, #24]
 80147b2:	b90b      	cbnz	r3, 80147b8 <_vfiprintf_r+0x18>
 80147b4:	f7fe fa76 	bl	8012ca4 <__sinit>
 80147b8:	4b89      	ldr	r3, [pc, #548]	; (80149e0 <_vfiprintf_r+0x240>)
 80147ba:	429d      	cmp	r5, r3
 80147bc:	d11b      	bne.n	80147f6 <_vfiprintf_r+0x56>
 80147be:	6875      	ldr	r5, [r6, #4]
 80147c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80147c2:	07d9      	lsls	r1, r3, #31
 80147c4:	d405      	bmi.n	80147d2 <_vfiprintf_r+0x32>
 80147c6:	89ab      	ldrh	r3, [r5, #12]
 80147c8:	059a      	lsls	r2, r3, #22
 80147ca:	d402      	bmi.n	80147d2 <_vfiprintf_r+0x32>
 80147cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80147ce:	f7fe fe7a 	bl	80134c6 <__retarget_lock_acquire_recursive>
 80147d2:	89ab      	ldrh	r3, [r5, #12]
 80147d4:	071b      	lsls	r3, r3, #28
 80147d6:	d501      	bpl.n	80147dc <_vfiprintf_r+0x3c>
 80147d8:	692b      	ldr	r3, [r5, #16]
 80147da:	b9eb      	cbnz	r3, 8014818 <_vfiprintf_r+0x78>
 80147dc:	4629      	mov	r1, r5
 80147de:	4630      	mov	r0, r6
 80147e0:	f7fd fa50 	bl	8011c84 <__swsetup_r>
 80147e4:	b1c0      	cbz	r0, 8014818 <_vfiprintf_r+0x78>
 80147e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80147e8:	07dc      	lsls	r4, r3, #31
 80147ea:	d50e      	bpl.n	801480a <_vfiprintf_r+0x6a>
 80147ec:	f04f 30ff 	mov.w	r0, #4294967295
 80147f0:	b01d      	add	sp, #116	; 0x74
 80147f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147f6:	4b7b      	ldr	r3, [pc, #492]	; (80149e4 <_vfiprintf_r+0x244>)
 80147f8:	429d      	cmp	r5, r3
 80147fa:	d101      	bne.n	8014800 <_vfiprintf_r+0x60>
 80147fc:	68b5      	ldr	r5, [r6, #8]
 80147fe:	e7df      	b.n	80147c0 <_vfiprintf_r+0x20>
 8014800:	4b79      	ldr	r3, [pc, #484]	; (80149e8 <_vfiprintf_r+0x248>)
 8014802:	429d      	cmp	r5, r3
 8014804:	bf08      	it	eq
 8014806:	68f5      	ldreq	r5, [r6, #12]
 8014808:	e7da      	b.n	80147c0 <_vfiprintf_r+0x20>
 801480a:	89ab      	ldrh	r3, [r5, #12]
 801480c:	0598      	lsls	r0, r3, #22
 801480e:	d4ed      	bmi.n	80147ec <_vfiprintf_r+0x4c>
 8014810:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014812:	f7fe fe59 	bl	80134c8 <__retarget_lock_release_recursive>
 8014816:	e7e9      	b.n	80147ec <_vfiprintf_r+0x4c>
 8014818:	2300      	movs	r3, #0
 801481a:	9309      	str	r3, [sp, #36]	; 0x24
 801481c:	2320      	movs	r3, #32
 801481e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014822:	f8cd 800c 	str.w	r8, [sp, #12]
 8014826:	2330      	movs	r3, #48	; 0x30
 8014828:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80149ec <_vfiprintf_r+0x24c>
 801482c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014830:	f04f 0901 	mov.w	r9, #1
 8014834:	4623      	mov	r3, r4
 8014836:	469a      	mov	sl, r3
 8014838:	f813 2b01 	ldrb.w	r2, [r3], #1
 801483c:	b10a      	cbz	r2, 8014842 <_vfiprintf_r+0xa2>
 801483e:	2a25      	cmp	r2, #37	; 0x25
 8014840:	d1f9      	bne.n	8014836 <_vfiprintf_r+0x96>
 8014842:	ebba 0b04 	subs.w	fp, sl, r4
 8014846:	d00b      	beq.n	8014860 <_vfiprintf_r+0xc0>
 8014848:	465b      	mov	r3, fp
 801484a:	4622      	mov	r2, r4
 801484c:	4629      	mov	r1, r5
 801484e:	4630      	mov	r0, r6
 8014850:	f7ff ff93 	bl	801477a <__sfputs_r>
 8014854:	3001      	adds	r0, #1
 8014856:	f000 80aa 	beq.w	80149ae <_vfiprintf_r+0x20e>
 801485a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801485c:	445a      	add	r2, fp
 801485e:	9209      	str	r2, [sp, #36]	; 0x24
 8014860:	f89a 3000 	ldrb.w	r3, [sl]
 8014864:	2b00      	cmp	r3, #0
 8014866:	f000 80a2 	beq.w	80149ae <_vfiprintf_r+0x20e>
 801486a:	2300      	movs	r3, #0
 801486c:	f04f 32ff 	mov.w	r2, #4294967295
 8014870:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014874:	f10a 0a01 	add.w	sl, sl, #1
 8014878:	9304      	str	r3, [sp, #16]
 801487a:	9307      	str	r3, [sp, #28]
 801487c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014880:	931a      	str	r3, [sp, #104]	; 0x68
 8014882:	4654      	mov	r4, sl
 8014884:	2205      	movs	r2, #5
 8014886:	f814 1b01 	ldrb.w	r1, [r4], #1
 801488a:	4858      	ldr	r0, [pc, #352]	; (80149ec <_vfiprintf_r+0x24c>)
 801488c:	f7eb fcb8 	bl	8000200 <memchr>
 8014890:	9a04      	ldr	r2, [sp, #16]
 8014892:	b9d8      	cbnz	r0, 80148cc <_vfiprintf_r+0x12c>
 8014894:	06d1      	lsls	r1, r2, #27
 8014896:	bf44      	itt	mi
 8014898:	2320      	movmi	r3, #32
 801489a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801489e:	0713      	lsls	r3, r2, #28
 80148a0:	bf44      	itt	mi
 80148a2:	232b      	movmi	r3, #43	; 0x2b
 80148a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80148a8:	f89a 3000 	ldrb.w	r3, [sl]
 80148ac:	2b2a      	cmp	r3, #42	; 0x2a
 80148ae:	d015      	beq.n	80148dc <_vfiprintf_r+0x13c>
 80148b0:	9a07      	ldr	r2, [sp, #28]
 80148b2:	4654      	mov	r4, sl
 80148b4:	2000      	movs	r0, #0
 80148b6:	f04f 0c0a 	mov.w	ip, #10
 80148ba:	4621      	mov	r1, r4
 80148bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80148c0:	3b30      	subs	r3, #48	; 0x30
 80148c2:	2b09      	cmp	r3, #9
 80148c4:	d94e      	bls.n	8014964 <_vfiprintf_r+0x1c4>
 80148c6:	b1b0      	cbz	r0, 80148f6 <_vfiprintf_r+0x156>
 80148c8:	9207      	str	r2, [sp, #28]
 80148ca:	e014      	b.n	80148f6 <_vfiprintf_r+0x156>
 80148cc:	eba0 0308 	sub.w	r3, r0, r8
 80148d0:	fa09 f303 	lsl.w	r3, r9, r3
 80148d4:	4313      	orrs	r3, r2
 80148d6:	9304      	str	r3, [sp, #16]
 80148d8:	46a2      	mov	sl, r4
 80148da:	e7d2      	b.n	8014882 <_vfiprintf_r+0xe2>
 80148dc:	9b03      	ldr	r3, [sp, #12]
 80148de:	1d19      	adds	r1, r3, #4
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	9103      	str	r1, [sp, #12]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	bfbb      	ittet	lt
 80148e8:	425b      	neglt	r3, r3
 80148ea:	f042 0202 	orrlt.w	r2, r2, #2
 80148ee:	9307      	strge	r3, [sp, #28]
 80148f0:	9307      	strlt	r3, [sp, #28]
 80148f2:	bfb8      	it	lt
 80148f4:	9204      	strlt	r2, [sp, #16]
 80148f6:	7823      	ldrb	r3, [r4, #0]
 80148f8:	2b2e      	cmp	r3, #46	; 0x2e
 80148fa:	d10c      	bne.n	8014916 <_vfiprintf_r+0x176>
 80148fc:	7863      	ldrb	r3, [r4, #1]
 80148fe:	2b2a      	cmp	r3, #42	; 0x2a
 8014900:	d135      	bne.n	801496e <_vfiprintf_r+0x1ce>
 8014902:	9b03      	ldr	r3, [sp, #12]
 8014904:	1d1a      	adds	r2, r3, #4
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	9203      	str	r2, [sp, #12]
 801490a:	2b00      	cmp	r3, #0
 801490c:	bfb8      	it	lt
 801490e:	f04f 33ff 	movlt.w	r3, #4294967295
 8014912:	3402      	adds	r4, #2
 8014914:	9305      	str	r3, [sp, #20]
 8014916:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80149fc <_vfiprintf_r+0x25c>
 801491a:	7821      	ldrb	r1, [r4, #0]
 801491c:	2203      	movs	r2, #3
 801491e:	4650      	mov	r0, sl
 8014920:	f7eb fc6e 	bl	8000200 <memchr>
 8014924:	b140      	cbz	r0, 8014938 <_vfiprintf_r+0x198>
 8014926:	2340      	movs	r3, #64	; 0x40
 8014928:	eba0 000a 	sub.w	r0, r0, sl
 801492c:	fa03 f000 	lsl.w	r0, r3, r0
 8014930:	9b04      	ldr	r3, [sp, #16]
 8014932:	4303      	orrs	r3, r0
 8014934:	3401      	adds	r4, #1
 8014936:	9304      	str	r3, [sp, #16]
 8014938:	f814 1b01 	ldrb.w	r1, [r4], #1
 801493c:	482c      	ldr	r0, [pc, #176]	; (80149f0 <_vfiprintf_r+0x250>)
 801493e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014942:	2206      	movs	r2, #6
 8014944:	f7eb fc5c 	bl	8000200 <memchr>
 8014948:	2800      	cmp	r0, #0
 801494a:	d03f      	beq.n	80149cc <_vfiprintf_r+0x22c>
 801494c:	4b29      	ldr	r3, [pc, #164]	; (80149f4 <_vfiprintf_r+0x254>)
 801494e:	bb1b      	cbnz	r3, 8014998 <_vfiprintf_r+0x1f8>
 8014950:	9b03      	ldr	r3, [sp, #12]
 8014952:	3307      	adds	r3, #7
 8014954:	f023 0307 	bic.w	r3, r3, #7
 8014958:	3308      	adds	r3, #8
 801495a:	9303      	str	r3, [sp, #12]
 801495c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801495e:	443b      	add	r3, r7
 8014960:	9309      	str	r3, [sp, #36]	; 0x24
 8014962:	e767      	b.n	8014834 <_vfiprintf_r+0x94>
 8014964:	fb0c 3202 	mla	r2, ip, r2, r3
 8014968:	460c      	mov	r4, r1
 801496a:	2001      	movs	r0, #1
 801496c:	e7a5      	b.n	80148ba <_vfiprintf_r+0x11a>
 801496e:	2300      	movs	r3, #0
 8014970:	3401      	adds	r4, #1
 8014972:	9305      	str	r3, [sp, #20]
 8014974:	4619      	mov	r1, r3
 8014976:	f04f 0c0a 	mov.w	ip, #10
 801497a:	4620      	mov	r0, r4
 801497c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014980:	3a30      	subs	r2, #48	; 0x30
 8014982:	2a09      	cmp	r2, #9
 8014984:	d903      	bls.n	801498e <_vfiprintf_r+0x1ee>
 8014986:	2b00      	cmp	r3, #0
 8014988:	d0c5      	beq.n	8014916 <_vfiprintf_r+0x176>
 801498a:	9105      	str	r1, [sp, #20]
 801498c:	e7c3      	b.n	8014916 <_vfiprintf_r+0x176>
 801498e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014992:	4604      	mov	r4, r0
 8014994:	2301      	movs	r3, #1
 8014996:	e7f0      	b.n	801497a <_vfiprintf_r+0x1da>
 8014998:	ab03      	add	r3, sp, #12
 801499a:	9300      	str	r3, [sp, #0]
 801499c:	462a      	mov	r2, r5
 801499e:	4b16      	ldr	r3, [pc, #88]	; (80149f8 <_vfiprintf_r+0x258>)
 80149a0:	a904      	add	r1, sp, #16
 80149a2:	4630      	mov	r0, r6
 80149a4:	f7fb fb88 	bl	80100b8 <_printf_float>
 80149a8:	4607      	mov	r7, r0
 80149aa:	1c78      	adds	r0, r7, #1
 80149ac:	d1d6      	bne.n	801495c <_vfiprintf_r+0x1bc>
 80149ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80149b0:	07d9      	lsls	r1, r3, #31
 80149b2:	d405      	bmi.n	80149c0 <_vfiprintf_r+0x220>
 80149b4:	89ab      	ldrh	r3, [r5, #12]
 80149b6:	059a      	lsls	r2, r3, #22
 80149b8:	d402      	bmi.n	80149c0 <_vfiprintf_r+0x220>
 80149ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80149bc:	f7fe fd84 	bl	80134c8 <__retarget_lock_release_recursive>
 80149c0:	89ab      	ldrh	r3, [r5, #12]
 80149c2:	065b      	lsls	r3, r3, #25
 80149c4:	f53f af12 	bmi.w	80147ec <_vfiprintf_r+0x4c>
 80149c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80149ca:	e711      	b.n	80147f0 <_vfiprintf_r+0x50>
 80149cc:	ab03      	add	r3, sp, #12
 80149ce:	9300      	str	r3, [sp, #0]
 80149d0:	462a      	mov	r2, r5
 80149d2:	4b09      	ldr	r3, [pc, #36]	; (80149f8 <_vfiprintf_r+0x258>)
 80149d4:	a904      	add	r1, sp, #16
 80149d6:	4630      	mov	r0, r6
 80149d8:	f7fb fe12 	bl	8010600 <_printf_i>
 80149dc:	e7e4      	b.n	80149a8 <_vfiprintf_r+0x208>
 80149de:	bf00      	nop
 80149e0:	08015714 	.word	0x08015714
 80149e4:	08015734 	.word	0x08015734
 80149e8:	080156f4 	.word	0x080156f4
 80149ec:	08015934 	.word	0x08015934
 80149f0:	0801593e 	.word	0x0801593e
 80149f4:	080100b9 	.word	0x080100b9
 80149f8:	0801477b 	.word	0x0801477b
 80149fc:	0801593a 	.word	0x0801593a

08014a00 <_scanf_chars>:
 8014a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a04:	4615      	mov	r5, r2
 8014a06:	688a      	ldr	r2, [r1, #8]
 8014a08:	4680      	mov	r8, r0
 8014a0a:	460c      	mov	r4, r1
 8014a0c:	b932      	cbnz	r2, 8014a1c <_scanf_chars+0x1c>
 8014a0e:	698a      	ldr	r2, [r1, #24]
 8014a10:	2a00      	cmp	r2, #0
 8014a12:	bf0c      	ite	eq
 8014a14:	2201      	moveq	r2, #1
 8014a16:	f04f 32ff 	movne.w	r2, #4294967295
 8014a1a:	608a      	str	r2, [r1, #8]
 8014a1c:	6822      	ldr	r2, [r4, #0]
 8014a1e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8014aac <_scanf_chars+0xac>
 8014a22:	06d1      	lsls	r1, r2, #27
 8014a24:	bf5f      	itttt	pl
 8014a26:	681a      	ldrpl	r2, [r3, #0]
 8014a28:	1d11      	addpl	r1, r2, #4
 8014a2a:	6019      	strpl	r1, [r3, #0]
 8014a2c:	6816      	ldrpl	r6, [r2, #0]
 8014a2e:	2700      	movs	r7, #0
 8014a30:	69a0      	ldr	r0, [r4, #24]
 8014a32:	b188      	cbz	r0, 8014a58 <_scanf_chars+0x58>
 8014a34:	2801      	cmp	r0, #1
 8014a36:	d107      	bne.n	8014a48 <_scanf_chars+0x48>
 8014a38:	682b      	ldr	r3, [r5, #0]
 8014a3a:	781a      	ldrb	r2, [r3, #0]
 8014a3c:	6963      	ldr	r3, [r4, #20]
 8014a3e:	5c9b      	ldrb	r3, [r3, r2]
 8014a40:	b953      	cbnz	r3, 8014a58 <_scanf_chars+0x58>
 8014a42:	bb27      	cbnz	r7, 8014a8e <_scanf_chars+0x8e>
 8014a44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a48:	2802      	cmp	r0, #2
 8014a4a:	d120      	bne.n	8014a8e <_scanf_chars+0x8e>
 8014a4c:	682b      	ldr	r3, [r5, #0]
 8014a4e:	781b      	ldrb	r3, [r3, #0]
 8014a50:	f813 3009 	ldrb.w	r3, [r3, r9]
 8014a54:	071b      	lsls	r3, r3, #28
 8014a56:	d41a      	bmi.n	8014a8e <_scanf_chars+0x8e>
 8014a58:	6823      	ldr	r3, [r4, #0]
 8014a5a:	06da      	lsls	r2, r3, #27
 8014a5c:	bf5e      	ittt	pl
 8014a5e:	682b      	ldrpl	r3, [r5, #0]
 8014a60:	781b      	ldrbpl	r3, [r3, #0]
 8014a62:	f806 3b01 	strbpl.w	r3, [r6], #1
 8014a66:	682a      	ldr	r2, [r5, #0]
 8014a68:	686b      	ldr	r3, [r5, #4]
 8014a6a:	3201      	adds	r2, #1
 8014a6c:	602a      	str	r2, [r5, #0]
 8014a6e:	68a2      	ldr	r2, [r4, #8]
 8014a70:	3b01      	subs	r3, #1
 8014a72:	3a01      	subs	r2, #1
 8014a74:	606b      	str	r3, [r5, #4]
 8014a76:	3701      	adds	r7, #1
 8014a78:	60a2      	str	r2, [r4, #8]
 8014a7a:	b142      	cbz	r2, 8014a8e <_scanf_chars+0x8e>
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	dcd7      	bgt.n	8014a30 <_scanf_chars+0x30>
 8014a80:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014a84:	4629      	mov	r1, r5
 8014a86:	4640      	mov	r0, r8
 8014a88:	4798      	blx	r3
 8014a8a:	2800      	cmp	r0, #0
 8014a8c:	d0d0      	beq.n	8014a30 <_scanf_chars+0x30>
 8014a8e:	6823      	ldr	r3, [r4, #0]
 8014a90:	f013 0310 	ands.w	r3, r3, #16
 8014a94:	d105      	bne.n	8014aa2 <_scanf_chars+0xa2>
 8014a96:	68e2      	ldr	r2, [r4, #12]
 8014a98:	3201      	adds	r2, #1
 8014a9a:	60e2      	str	r2, [r4, #12]
 8014a9c:	69a2      	ldr	r2, [r4, #24]
 8014a9e:	b102      	cbz	r2, 8014aa2 <_scanf_chars+0xa2>
 8014aa0:	7033      	strb	r3, [r6, #0]
 8014aa2:	6923      	ldr	r3, [r4, #16]
 8014aa4:	441f      	add	r7, r3
 8014aa6:	6127      	str	r7, [r4, #16]
 8014aa8:	2000      	movs	r0, #0
 8014aaa:	e7cb      	b.n	8014a44 <_scanf_chars+0x44>
 8014aac:	080154d1 	.word	0x080154d1

08014ab0 <_scanf_i>:
 8014ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ab4:	4698      	mov	r8, r3
 8014ab6:	4b74      	ldr	r3, [pc, #464]	; (8014c88 <_scanf_i+0x1d8>)
 8014ab8:	460c      	mov	r4, r1
 8014aba:	4682      	mov	sl, r0
 8014abc:	4616      	mov	r6, r2
 8014abe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014ac2:	b087      	sub	sp, #28
 8014ac4:	ab03      	add	r3, sp, #12
 8014ac6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014aca:	4b70      	ldr	r3, [pc, #448]	; (8014c8c <_scanf_i+0x1dc>)
 8014acc:	69a1      	ldr	r1, [r4, #24]
 8014ace:	4a70      	ldr	r2, [pc, #448]	; (8014c90 <_scanf_i+0x1e0>)
 8014ad0:	2903      	cmp	r1, #3
 8014ad2:	bf18      	it	ne
 8014ad4:	461a      	movne	r2, r3
 8014ad6:	68a3      	ldr	r3, [r4, #8]
 8014ad8:	9201      	str	r2, [sp, #4]
 8014ada:	1e5a      	subs	r2, r3, #1
 8014adc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8014ae0:	bf88      	it	hi
 8014ae2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8014ae6:	4627      	mov	r7, r4
 8014ae8:	bf82      	ittt	hi
 8014aea:	eb03 0905 	addhi.w	r9, r3, r5
 8014aee:	f240 135d 	movwhi	r3, #349	; 0x15d
 8014af2:	60a3      	strhi	r3, [r4, #8]
 8014af4:	f857 3b1c 	ldr.w	r3, [r7], #28
 8014af8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8014afc:	bf98      	it	ls
 8014afe:	f04f 0900 	movls.w	r9, #0
 8014b02:	6023      	str	r3, [r4, #0]
 8014b04:	463d      	mov	r5, r7
 8014b06:	f04f 0b00 	mov.w	fp, #0
 8014b0a:	6831      	ldr	r1, [r6, #0]
 8014b0c:	ab03      	add	r3, sp, #12
 8014b0e:	7809      	ldrb	r1, [r1, #0]
 8014b10:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8014b14:	2202      	movs	r2, #2
 8014b16:	f7eb fb73 	bl	8000200 <memchr>
 8014b1a:	b328      	cbz	r0, 8014b68 <_scanf_i+0xb8>
 8014b1c:	f1bb 0f01 	cmp.w	fp, #1
 8014b20:	d159      	bne.n	8014bd6 <_scanf_i+0x126>
 8014b22:	6862      	ldr	r2, [r4, #4]
 8014b24:	b92a      	cbnz	r2, 8014b32 <_scanf_i+0x82>
 8014b26:	6822      	ldr	r2, [r4, #0]
 8014b28:	2308      	movs	r3, #8
 8014b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014b2e:	6063      	str	r3, [r4, #4]
 8014b30:	6022      	str	r2, [r4, #0]
 8014b32:	6822      	ldr	r2, [r4, #0]
 8014b34:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8014b38:	6022      	str	r2, [r4, #0]
 8014b3a:	68a2      	ldr	r2, [r4, #8]
 8014b3c:	1e51      	subs	r1, r2, #1
 8014b3e:	60a1      	str	r1, [r4, #8]
 8014b40:	b192      	cbz	r2, 8014b68 <_scanf_i+0xb8>
 8014b42:	6832      	ldr	r2, [r6, #0]
 8014b44:	1c51      	adds	r1, r2, #1
 8014b46:	6031      	str	r1, [r6, #0]
 8014b48:	7812      	ldrb	r2, [r2, #0]
 8014b4a:	f805 2b01 	strb.w	r2, [r5], #1
 8014b4e:	6872      	ldr	r2, [r6, #4]
 8014b50:	3a01      	subs	r2, #1
 8014b52:	2a00      	cmp	r2, #0
 8014b54:	6072      	str	r2, [r6, #4]
 8014b56:	dc07      	bgt.n	8014b68 <_scanf_i+0xb8>
 8014b58:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8014b5c:	4631      	mov	r1, r6
 8014b5e:	4650      	mov	r0, sl
 8014b60:	4790      	blx	r2
 8014b62:	2800      	cmp	r0, #0
 8014b64:	f040 8085 	bne.w	8014c72 <_scanf_i+0x1c2>
 8014b68:	f10b 0b01 	add.w	fp, fp, #1
 8014b6c:	f1bb 0f03 	cmp.w	fp, #3
 8014b70:	d1cb      	bne.n	8014b0a <_scanf_i+0x5a>
 8014b72:	6863      	ldr	r3, [r4, #4]
 8014b74:	b90b      	cbnz	r3, 8014b7a <_scanf_i+0xca>
 8014b76:	230a      	movs	r3, #10
 8014b78:	6063      	str	r3, [r4, #4]
 8014b7a:	6863      	ldr	r3, [r4, #4]
 8014b7c:	4945      	ldr	r1, [pc, #276]	; (8014c94 <_scanf_i+0x1e4>)
 8014b7e:	6960      	ldr	r0, [r4, #20]
 8014b80:	1ac9      	subs	r1, r1, r3
 8014b82:	f000 f8b5 	bl	8014cf0 <__sccl>
 8014b86:	f04f 0b00 	mov.w	fp, #0
 8014b8a:	68a3      	ldr	r3, [r4, #8]
 8014b8c:	6822      	ldr	r2, [r4, #0]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d03d      	beq.n	8014c0e <_scanf_i+0x15e>
 8014b92:	6831      	ldr	r1, [r6, #0]
 8014b94:	6960      	ldr	r0, [r4, #20]
 8014b96:	f891 c000 	ldrb.w	ip, [r1]
 8014b9a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8014b9e:	2800      	cmp	r0, #0
 8014ba0:	d035      	beq.n	8014c0e <_scanf_i+0x15e>
 8014ba2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8014ba6:	d124      	bne.n	8014bf2 <_scanf_i+0x142>
 8014ba8:	0510      	lsls	r0, r2, #20
 8014baa:	d522      	bpl.n	8014bf2 <_scanf_i+0x142>
 8014bac:	f10b 0b01 	add.w	fp, fp, #1
 8014bb0:	f1b9 0f00 	cmp.w	r9, #0
 8014bb4:	d003      	beq.n	8014bbe <_scanf_i+0x10e>
 8014bb6:	3301      	adds	r3, #1
 8014bb8:	f109 39ff 	add.w	r9, r9, #4294967295
 8014bbc:	60a3      	str	r3, [r4, #8]
 8014bbe:	6873      	ldr	r3, [r6, #4]
 8014bc0:	3b01      	subs	r3, #1
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	6073      	str	r3, [r6, #4]
 8014bc6:	dd1b      	ble.n	8014c00 <_scanf_i+0x150>
 8014bc8:	6833      	ldr	r3, [r6, #0]
 8014bca:	3301      	adds	r3, #1
 8014bcc:	6033      	str	r3, [r6, #0]
 8014bce:	68a3      	ldr	r3, [r4, #8]
 8014bd0:	3b01      	subs	r3, #1
 8014bd2:	60a3      	str	r3, [r4, #8]
 8014bd4:	e7d9      	b.n	8014b8a <_scanf_i+0xda>
 8014bd6:	f1bb 0f02 	cmp.w	fp, #2
 8014bda:	d1ae      	bne.n	8014b3a <_scanf_i+0x8a>
 8014bdc:	6822      	ldr	r2, [r4, #0]
 8014bde:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8014be2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8014be6:	d1bf      	bne.n	8014b68 <_scanf_i+0xb8>
 8014be8:	2310      	movs	r3, #16
 8014bea:	6063      	str	r3, [r4, #4]
 8014bec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8014bf0:	e7a2      	b.n	8014b38 <_scanf_i+0x88>
 8014bf2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8014bf6:	6022      	str	r2, [r4, #0]
 8014bf8:	780b      	ldrb	r3, [r1, #0]
 8014bfa:	f805 3b01 	strb.w	r3, [r5], #1
 8014bfe:	e7de      	b.n	8014bbe <_scanf_i+0x10e>
 8014c00:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014c04:	4631      	mov	r1, r6
 8014c06:	4650      	mov	r0, sl
 8014c08:	4798      	blx	r3
 8014c0a:	2800      	cmp	r0, #0
 8014c0c:	d0df      	beq.n	8014bce <_scanf_i+0x11e>
 8014c0e:	6823      	ldr	r3, [r4, #0]
 8014c10:	05d9      	lsls	r1, r3, #23
 8014c12:	d50d      	bpl.n	8014c30 <_scanf_i+0x180>
 8014c14:	42bd      	cmp	r5, r7
 8014c16:	d909      	bls.n	8014c2c <_scanf_i+0x17c>
 8014c18:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014c1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014c20:	4632      	mov	r2, r6
 8014c22:	4650      	mov	r0, sl
 8014c24:	4798      	blx	r3
 8014c26:	f105 39ff 	add.w	r9, r5, #4294967295
 8014c2a:	464d      	mov	r5, r9
 8014c2c:	42bd      	cmp	r5, r7
 8014c2e:	d028      	beq.n	8014c82 <_scanf_i+0x1d2>
 8014c30:	6822      	ldr	r2, [r4, #0]
 8014c32:	f012 0210 	ands.w	r2, r2, #16
 8014c36:	d113      	bne.n	8014c60 <_scanf_i+0x1b0>
 8014c38:	702a      	strb	r2, [r5, #0]
 8014c3a:	6863      	ldr	r3, [r4, #4]
 8014c3c:	9e01      	ldr	r6, [sp, #4]
 8014c3e:	4639      	mov	r1, r7
 8014c40:	4650      	mov	r0, sl
 8014c42:	47b0      	blx	r6
 8014c44:	f8d8 3000 	ldr.w	r3, [r8]
 8014c48:	6821      	ldr	r1, [r4, #0]
 8014c4a:	1d1a      	adds	r2, r3, #4
 8014c4c:	f8c8 2000 	str.w	r2, [r8]
 8014c50:	f011 0f20 	tst.w	r1, #32
 8014c54:	681b      	ldr	r3, [r3, #0]
 8014c56:	d00f      	beq.n	8014c78 <_scanf_i+0x1c8>
 8014c58:	6018      	str	r0, [r3, #0]
 8014c5a:	68e3      	ldr	r3, [r4, #12]
 8014c5c:	3301      	adds	r3, #1
 8014c5e:	60e3      	str	r3, [r4, #12]
 8014c60:	1bed      	subs	r5, r5, r7
 8014c62:	44ab      	add	fp, r5
 8014c64:	6925      	ldr	r5, [r4, #16]
 8014c66:	445d      	add	r5, fp
 8014c68:	6125      	str	r5, [r4, #16]
 8014c6a:	2000      	movs	r0, #0
 8014c6c:	b007      	add	sp, #28
 8014c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c72:	f04f 0b00 	mov.w	fp, #0
 8014c76:	e7ca      	b.n	8014c0e <_scanf_i+0x15e>
 8014c78:	07ca      	lsls	r2, r1, #31
 8014c7a:	bf4c      	ite	mi
 8014c7c:	8018      	strhmi	r0, [r3, #0]
 8014c7e:	6018      	strpl	r0, [r3, #0]
 8014c80:	e7eb      	b.n	8014c5a <_scanf_i+0x1aa>
 8014c82:	2001      	movs	r0, #1
 8014c84:	e7f2      	b.n	8014c6c <_scanf_i+0x1bc>
 8014c86:	bf00      	nop
 8014c88:	0801542c 	.word	0x0801542c
 8014c8c:	08014e5d 	.word	0x08014e5d
 8014c90:	08011b31 	.word	0x08011b31
 8014c94:	0801595e 	.word	0x0801595e

08014c98 <_read_r>:
 8014c98:	b538      	push	{r3, r4, r5, lr}
 8014c9a:	4d07      	ldr	r5, [pc, #28]	; (8014cb8 <_read_r+0x20>)
 8014c9c:	4604      	mov	r4, r0
 8014c9e:	4608      	mov	r0, r1
 8014ca0:	4611      	mov	r1, r2
 8014ca2:	2200      	movs	r2, #0
 8014ca4:	602a      	str	r2, [r5, #0]
 8014ca6:	461a      	mov	r2, r3
 8014ca8:	f7ee fda6 	bl	80037f8 <_read>
 8014cac:	1c43      	adds	r3, r0, #1
 8014cae:	d102      	bne.n	8014cb6 <_read_r+0x1e>
 8014cb0:	682b      	ldr	r3, [r5, #0]
 8014cb2:	b103      	cbz	r3, 8014cb6 <_read_r+0x1e>
 8014cb4:	6023      	str	r3, [r4, #0]
 8014cb6:	bd38      	pop	{r3, r4, r5, pc}
 8014cb8:	20003670 	.word	0x20003670
 8014cbc:	00000000 	.word	0x00000000

08014cc0 <nan>:
 8014cc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014cc8 <nan+0x8>
 8014cc4:	4770      	bx	lr
 8014cc6:	bf00      	nop
 8014cc8:	00000000 	.word	0x00000000
 8014ccc:	7ff80000 	.word	0x7ff80000

08014cd0 <_sbrk_r>:
 8014cd0:	b538      	push	{r3, r4, r5, lr}
 8014cd2:	4d06      	ldr	r5, [pc, #24]	; (8014cec <_sbrk_r+0x1c>)
 8014cd4:	2300      	movs	r3, #0
 8014cd6:	4604      	mov	r4, r0
 8014cd8:	4608      	mov	r0, r1
 8014cda:	602b      	str	r3, [r5, #0]
 8014cdc:	f7ee fdfa 	bl	80038d4 <_sbrk>
 8014ce0:	1c43      	adds	r3, r0, #1
 8014ce2:	d102      	bne.n	8014cea <_sbrk_r+0x1a>
 8014ce4:	682b      	ldr	r3, [r5, #0]
 8014ce6:	b103      	cbz	r3, 8014cea <_sbrk_r+0x1a>
 8014ce8:	6023      	str	r3, [r4, #0]
 8014cea:	bd38      	pop	{r3, r4, r5, pc}
 8014cec:	20003670 	.word	0x20003670

08014cf0 <__sccl>:
 8014cf0:	b570      	push	{r4, r5, r6, lr}
 8014cf2:	780b      	ldrb	r3, [r1, #0]
 8014cf4:	4604      	mov	r4, r0
 8014cf6:	2b5e      	cmp	r3, #94	; 0x5e
 8014cf8:	bf0b      	itete	eq
 8014cfa:	784b      	ldrbeq	r3, [r1, #1]
 8014cfc:	1c48      	addne	r0, r1, #1
 8014cfe:	1c88      	addeq	r0, r1, #2
 8014d00:	2200      	movne	r2, #0
 8014d02:	bf08      	it	eq
 8014d04:	2201      	moveq	r2, #1
 8014d06:	1e61      	subs	r1, r4, #1
 8014d08:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8014d0c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8014d10:	42a9      	cmp	r1, r5
 8014d12:	d1fb      	bne.n	8014d0c <__sccl+0x1c>
 8014d14:	b90b      	cbnz	r3, 8014d1a <__sccl+0x2a>
 8014d16:	3801      	subs	r0, #1
 8014d18:	bd70      	pop	{r4, r5, r6, pc}
 8014d1a:	f082 0101 	eor.w	r1, r2, #1
 8014d1e:	54e1      	strb	r1, [r4, r3]
 8014d20:	1c42      	adds	r2, r0, #1
 8014d22:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8014d26:	2d2d      	cmp	r5, #45	; 0x2d
 8014d28:	f102 36ff 	add.w	r6, r2, #4294967295
 8014d2c:	4610      	mov	r0, r2
 8014d2e:	d006      	beq.n	8014d3e <__sccl+0x4e>
 8014d30:	2d5d      	cmp	r5, #93	; 0x5d
 8014d32:	d0f1      	beq.n	8014d18 <__sccl+0x28>
 8014d34:	b90d      	cbnz	r5, 8014d3a <__sccl+0x4a>
 8014d36:	4630      	mov	r0, r6
 8014d38:	e7ee      	b.n	8014d18 <__sccl+0x28>
 8014d3a:	462b      	mov	r3, r5
 8014d3c:	e7ef      	b.n	8014d1e <__sccl+0x2e>
 8014d3e:	7816      	ldrb	r6, [r2, #0]
 8014d40:	2e5d      	cmp	r6, #93	; 0x5d
 8014d42:	d0fa      	beq.n	8014d3a <__sccl+0x4a>
 8014d44:	42b3      	cmp	r3, r6
 8014d46:	dcf8      	bgt.n	8014d3a <__sccl+0x4a>
 8014d48:	4618      	mov	r0, r3
 8014d4a:	3001      	adds	r0, #1
 8014d4c:	4286      	cmp	r6, r0
 8014d4e:	5421      	strb	r1, [r4, r0]
 8014d50:	dcfb      	bgt.n	8014d4a <__sccl+0x5a>
 8014d52:	43d8      	mvns	r0, r3
 8014d54:	4430      	add	r0, r6
 8014d56:	1c5d      	adds	r5, r3, #1
 8014d58:	42b3      	cmp	r3, r6
 8014d5a:	bfa8      	it	ge
 8014d5c:	2000      	movge	r0, #0
 8014d5e:	182b      	adds	r3, r5, r0
 8014d60:	3202      	adds	r2, #2
 8014d62:	e7de      	b.n	8014d22 <__sccl+0x32>

08014d64 <_strtoul_l.isra.0>:
 8014d64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014d68:	4e3b      	ldr	r6, [pc, #236]	; (8014e58 <_strtoul_l.isra.0+0xf4>)
 8014d6a:	4686      	mov	lr, r0
 8014d6c:	468c      	mov	ip, r1
 8014d6e:	4660      	mov	r0, ip
 8014d70:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8014d74:	5da5      	ldrb	r5, [r4, r6]
 8014d76:	f015 0508 	ands.w	r5, r5, #8
 8014d7a:	d1f8      	bne.n	8014d6e <_strtoul_l.isra.0+0xa>
 8014d7c:	2c2d      	cmp	r4, #45	; 0x2d
 8014d7e:	d134      	bne.n	8014dea <_strtoul_l.isra.0+0x86>
 8014d80:	f89c 4000 	ldrb.w	r4, [ip]
 8014d84:	f04f 0801 	mov.w	r8, #1
 8014d88:	f100 0c02 	add.w	ip, r0, #2
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d05e      	beq.n	8014e4e <_strtoul_l.isra.0+0xea>
 8014d90:	2b10      	cmp	r3, #16
 8014d92:	d10c      	bne.n	8014dae <_strtoul_l.isra.0+0x4a>
 8014d94:	2c30      	cmp	r4, #48	; 0x30
 8014d96:	d10a      	bne.n	8014dae <_strtoul_l.isra.0+0x4a>
 8014d98:	f89c 0000 	ldrb.w	r0, [ip]
 8014d9c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8014da0:	2858      	cmp	r0, #88	; 0x58
 8014da2:	d14f      	bne.n	8014e44 <_strtoul_l.isra.0+0xe0>
 8014da4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8014da8:	2310      	movs	r3, #16
 8014daa:	f10c 0c02 	add.w	ip, ip, #2
 8014dae:	f04f 37ff 	mov.w	r7, #4294967295
 8014db2:	2500      	movs	r5, #0
 8014db4:	fbb7 f7f3 	udiv	r7, r7, r3
 8014db8:	fb03 f907 	mul.w	r9, r3, r7
 8014dbc:	ea6f 0909 	mvn.w	r9, r9
 8014dc0:	4628      	mov	r0, r5
 8014dc2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8014dc6:	2e09      	cmp	r6, #9
 8014dc8:	d818      	bhi.n	8014dfc <_strtoul_l.isra.0+0x98>
 8014dca:	4634      	mov	r4, r6
 8014dcc:	42a3      	cmp	r3, r4
 8014dce:	dd24      	ble.n	8014e1a <_strtoul_l.isra.0+0xb6>
 8014dd0:	2d00      	cmp	r5, #0
 8014dd2:	db1f      	blt.n	8014e14 <_strtoul_l.isra.0+0xb0>
 8014dd4:	4287      	cmp	r7, r0
 8014dd6:	d31d      	bcc.n	8014e14 <_strtoul_l.isra.0+0xb0>
 8014dd8:	d101      	bne.n	8014dde <_strtoul_l.isra.0+0x7a>
 8014dda:	45a1      	cmp	r9, r4
 8014ddc:	db1a      	blt.n	8014e14 <_strtoul_l.isra.0+0xb0>
 8014dde:	fb00 4003 	mla	r0, r0, r3, r4
 8014de2:	2501      	movs	r5, #1
 8014de4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8014de8:	e7eb      	b.n	8014dc2 <_strtoul_l.isra.0+0x5e>
 8014dea:	2c2b      	cmp	r4, #43	; 0x2b
 8014dec:	bf08      	it	eq
 8014dee:	f89c 4000 	ldrbeq.w	r4, [ip]
 8014df2:	46a8      	mov	r8, r5
 8014df4:	bf08      	it	eq
 8014df6:	f100 0c02 	addeq.w	ip, r0, #2
 8014dfa:	e7c7      	b.n	8014d8c <_strtoul_l.isra.0+0x28>
 8014dfc:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8014e00:	2e19      	cmp	r6, #25
 8014e02:	d801      	bhi.n	8014e08 <_strtoul_l.isra.0+0xa4>
 8014e04:	3c37      	subs	r4, #55	; 0x37
 8014e06:	e7e1      	b.n	8014dcc <_strtoul_l.isra.0+0x68>
 8014e08:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8014e0c:	2e19      	cmp	r6, #25
 8014e0e:	d804      	bhi.n	8014e1a <_strtoul_l.isra.0+0xb6>
 8014e10:	3c57      	subs	r4, #87	; 0x57
 8014e12:	e7db      	b.n	8014dcc <_strtoul_l.isra.0+0x68>
 8014e14:	f04f 35ff 	mov.w	r5, #4294967295
 8014e18:	e7e4      	b.n	8014de4 <_strtoul_l.isra.0+0x80>
 8014e1a:	2d00      	cmp	r5, #0
 8014e1c:	da07      	bge.n	8014e2e <_strtoul_l.isra.0+0xca>
 8014e1e:	2322      	movs	r3, #34	; 0x22
 8014e20:	f8ce 3000 	str.w	r3, [lr]
 8014e24:	f04f 30ff 	mov.w	r0, #4294967295
 8014e28:	b942      	cbnz	r2, 8014e3c <_strtoul_l.isra.0+0xd8>
 8014e2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e2e:	f1b8 0f00 	cmp.w	r8, #0
 8014e32:	d000      	beq.n	8014e36 <_strtoul_l.isra.0+0xd2>
 8014e34:	4240      	negs	r0, r0
 8014e36:	2a00      	cmp	r2, #0
 8014e38:	d0f7      	beq.n	8014e2a <_strtoul_l.isra.0+0xc6>
 8014e3a:	b10d      	cbz	r5, 8014e40 <_strtoul_l.isra.0+0xdc>
 8014e3c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8014e40:	6011      	str	r1, [r2, #0]
 8014e42:	e7f2      	b.n	8014e2a <_strtoul_l.isra.0+0xc6>
 8014e44:	2430      	movs	r4, #48	; 0x30
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d1b1      	bne.n	8014dae <_strtoul_l.isra.0+0x4a>
 8014e4a:	2308      	movs	r3, #8
 8014e4c:	e7af      	b.n	8014dae <_strtoul_l.isra.0+0x4a>
 8014e4e:	2c30      	cmp	r4, #48	; 0x30
 8014e50:	d0a2      	beq.n	8014d98 <_strtoul_l.isra.0+0x34>
 8014e52:	230a      	movs	r3, #10
 8014e54:	e7ab      	b.n	8014dae <_strtoul_l.isra.0+0x4a>
 8014e56:	bf00      	nop
 8014e58:	080154d1 	.word	0x080154d1

08014e5c <_strtoul_r>:
 8014e5c:	f7ff bf82 	b.w	8014d64 <_strtoul_l.isra.0>

08014e60 <__submore>:
 8014e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e64:	460c      	mov	r4, r1
 8014e66:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014e68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014e6c:	4299      	cmp	r1, r3
 8014e6e:	d11d      	bne.n	8014eac <__submore+0x4c>
 8014e70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014e74:	f7ff f8e2 	bl	801403c <_malloc_r>
 8014e78:	b918      	cbnz	r0, 8014e82 <__submore+0x22>
 8014e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8014e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014e86:	63a3      	str	r3, [r4, #56]	; 0x38
 8014e88:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8014e8c:	6360      	str	r0, [r4, #52]	; 0x34
 8014e8e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8014e92:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8014e96:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8014e9a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8014e9e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8014ea2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8014ea6:	6020      	str	r0, [r4, #0]
 8014ea8:	2000      	movs	r0, #0
 8014eaa:	e7e8      	b.n	8014e7e <__submore+0x1e>
 8014eac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8014eae:	0077      	lsls	r7, r6, #1
 8014eb0:	463a      	mov	r2, r7
 8014eb2:	f000 f895 	bl	8014fe0 <_realloc_r>
 8014eb6:	4605      	mov	r5, r0
 8014eb8:	2800      	cmp	r0, #0
 8014eba:	d0de      	beq.n	8014e7a <__submore+0x1a>
 8014ebc:	eb00 0806 	add.w	r8, r0, r6
 8014ec0:	4601      	mov	r1, r0
 8014ec2:	4632      	mov	r2, r6
 8014ec4:	4640      	mov	r0, r8
 8014ec6:	f7fe fb91 	bl	80135ec <memcpy>
 8014eca:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8014ece:	f8c4 8000 	str.w	r8, [r4]
 8014ed2:	e7e9      	b.n	8014ea8 <__submore+0x48>

08014ed4 <__ascii_wctomb>:
 8014ed4:	b149      	cbz	r1, 8014eea <__ascii_wctomb+0x16>
 8014ed6:	2aff      	cmp	r2, #255	; 0xff
 8014ed8:	bf85      	ittet	hi
 8014eda:	238a      	movhi	r3, #138	; 0x8a
 8014edc:	6003      	strhi	r3, [r0, #0]
 8014ede:	700a      	strbls	r2, [r1, #0]
 8014ee0:	f04f 30ff 	movhi.w	r0, #4294967295
 8014ee4:	bf98      	it	ls
 8014ee6:	2001      	movls	r0, #1
 8014ee8:	4770      	bx	lr
 8014eea:	4608      	mov	r0, r1
 8014eec:	4770      	bx	lr
	...

08014ef0 <__assert_func>:
 8014ef0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014ef2:	4614      	mov	r4, r2
 8014ef4:	461a      	mov	r2, r3
 8014ef6:	4b09      	ldr	r3, [pc, #36]	; (8014f1c <__assert_func+0x2c>)
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	4605      	mov	r5, r0
 8014efc:	68d8      	ldr	r0, [r3, #12]
 8014efe:	b14c      	cbz	r4, 8014f14 <__assert_func+0x24>
 8014f00:	4b07      	ldr	r3, [pc, #28]	; (8014f20 <__assert_func+0x30>)
 8014f02:	9100      	str	r1, [sp, #0]
 8014f04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014f08:	4906      	ldr	r1, [pc, #24]	; (8014f24 <__assert_func+0x34>)
 8014f0a:	462b      	mov	r3, r5
 8014f0c:	f000 f80e 	bl	8014f2c <fiprintf>
 8014f10:	f000 f88c 	bl	801502c <abort>
 8014f14:	4b04      	ldr	r3, [pc, #16]	; (8014f28 <__assert_func+0x38>)
 8014f16:	461c      	mov	r4, r3
 8014f18:	e7f3      	b.n	8014f02 <__assert_func+0x12>
 8014f1a:	bf00      	nop
 8014f1c:	20000198 	.word	0x20000198
 8014f20:	08015960 	.word	0x08015960
 8014f24:	0801596d 	.word	0x0801596d
 8014f28:	0801599b 	.word	0x0801599b

08014f2c <fiprintf>:
 8014f2c:	b40e      	push	{r1, r2, r3}
 8014f2e:	b503      	push	{r0, r1, lr}
 8014f30:	4601      	mov	r1, r0
 8014f32:	ab03      	add	r3, sp, #12
 8014f34:	4805      	ldr	r0, [pc, #20]	; (8014f4c <fiprintf+0x20>)
 8014f36:	f853 2b04 	ldr.w	r2, [r3], #4
 8014f3a:	6800      	ldr	r0, [r0, #0]
 8014f3c:	9301      	str	r3, [sp, #4]
 8014f3e:	f7ff fc2f 	bl	80147a0 <_vfiprintf_r>
 8014f42:	b002      	add	sp, #8
 8014f44:	f85d eb04 	ldr.w	lr, [sp], #4
 8014f48:	b003      	add	sp, #12
 8014f4a:	4770      	bx	lr
 8014f4c:	20000198 	.word	0x20000198

08014f50 <_fstat_r>:
 8014f50:	b538      	push	{r3, r4, r5, lr}
 8014f52:	4d07      	ldr	r5, [pc, #28]	; (8014f70 <_fstat_r+0x20>)
 8014f54:	2300      	movs	r3, #0
 8014f56:	4604      	mov	r4, r0
 8014f58:	4608      	mov	r0, r1
 8014f5a:	4611      	mov	r1, r2
 8014f5c:	602b      	str	r3, [r5, #0]
 8014f5e:	f7ee fc90 	bl	8003882 <_fstat>
 8014f62:	1c43      	adds	r3, r0, #1
 8014f64:	d102      	bne.n	8014f6c <_fstat_r+0x1c>
 8014f66:	682b      	ldr	r3, [r5, #0]
 8014f68:	b103      	cbz	r3, 8014f6c <_fstat_r+0x1c>
 8014f6a:	6023      	str	r3, [r4, #0]
 8014f6c:	bd38      	pop	{r3, r4, r5, pc}
 8014f6e:	bf00      	nop
 8014f70:	20003670 	.word	0x20003670

08014f74 <_isatty_r>:
 8014f74:	b538      	push	{r3, r4, r5, lr}
 8014f76:	4d06      	ldr	r5, [pc, #24]	; (8014f90 <_isatty_r+0x1c>)
 8014f78:	2300      	movs	r3, #0
 8014f7a:	4604      	mov	r4, r0
 8014f7c:	4608      	mov	r0, r1
 8014f7e:	602b      	str	r3, [r5, #0]
 8014f80:	f7ee fc8f 	bl	80038a2 <_isatty>
 8014f84:	1c43      	adds	r3, r0, #1
 8014f86:	d102      	bne.n	8014f8e <_isatty_r+0x1a>
 8014f88:	682b      	ldr	r3, [r5, #0]
 8014f8a:	b103      	cbz	r3, 8014f8e <_isatty_r+0x1a>
 8014f8c:	6023      	str	r3, [r4, #0]
 8014f8e:	bd38      	pop	{r3, r4, r5, pc}
 8014f90:	20003670 	.word	0x20003670

08014f94 <memmove>:
 8014f94:	4288      	cmp	r0, r1
 8014f96:	b510      	push	{r4, lr}
 8014f98:	eb01 0402 	add.w	r4, r1, r2
 8014f9c:	d902      	bls.n	8014fa4 <memmove+0x10>
 8014f9e:	4284      	cmp	r4, r0
 8014fa0:	4623      	mov	r3, r4
 8014fa2:	d807      	bhi.n	8014fb4 <memmove+0x20>
 8014fa4:	1e43      	subs	r3, r0, #1
 8014fa6:	42a1      	cmp	r1, r4
 8014fa8:	d008      	beq.n	8014fbc <memmove+0x28>
 8014faa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014fae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014fb2:	e7f8      	b.n	8014fa6 <memmove+0x12>
 8014fb4:	4402      	add	r2, r0
 8014fb6:	4601      	mov	r1, r0
 8014fb8:	428a      	cmp	r2, r1
 8014fba:	d100      	bne.n	8014fbe <memmove+0x2a>
 8014fbc:	bd10      	pop	{r4, pc}
 8014fbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014fc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014fc6:	e7f7      	b.n	8014fb8 <memmove+0x24>

08014fc8 <__malloc_lock>:
 8014fc8:	4801      	ldr	r0, [pc, #4]	; (8014fd0 <__malloc_lock+0x8>)
 8014fca:	f7fe ba7c 	b.w	80134c6 <__retarget_lock_acquire_recursive>
 8014fce:	bf00      	nop
 8014fd0:	20003668 	.word	0x20003668

08014fd4 <__malloc_unlock>:
 8014fd4:	4801      	ldr	r0, [pc, #4]	; (8014fdc <__malloc_unlock+0x8>)
 8014fd6:	f7fe ba77 	b.w	80134c8 <__retarget_lock_release_recursive>
 8014fda:	bf00      	nop
 8014fdc:	20003668 	.word	0x20003668

08014fe0 <_realloc_r>:
 8014fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fe2:	4607      	mov	r7, r0
 8014fe4:	4614      	mov	r4, r2
 8014fe6:	460e      	mov	r6, r1
 8014fe8:	b921      	cbnz	r1, 8014ff4 <_realloc_r+0x14>
 8014fea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014fee:	4611      	mov	r1, r2
 8014ff0:	f7ff b824 	b.w	801403c <_malloc_r>
 8014ff4:	b922      	cbnz	r2, 8015000 <_realloc_r+0x20>
 8014ff6:	f7fe ffd1 	bl	8013f9c <_free_r>
 8014ffa:	4625      	mov	r5, r4
 8014ffc:	4628      	mov	r0, r5
 8014ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015000:	f000 f81b 	bl	801503a <_malloc_usable_size_r>
 8015004:	42a0      	cmp	r0, r4
 8015006:	d20f      	bcs.n	8015028 <_realloc_r+0x48>
 8015008:	4621      	mov	r1, r4
 801500a:	4638      	mov	r0, r7
 801500c:	f7ff f816 	bl	801403c <_malloc_r>
 8015010:	4605      	mov	r5, r0
 8015012:	2800      	cmp	r0, #0
 8015014:	d0f2      	beq.n	8014ffc <_realloc_r+0x1c>
 8015016:	4631      	mov	r1, r6
 8015018:	4622      	mov	r2, r4
 801501a:	f7fe fae7 	bl	80135ec <memcpy>
 801501e:	4631      	mov	r1, r6
 8015020:	4638      	mov	r0, r7
 8015022:	f7fe ffbb 	bl	8013f9c <_free_r>
 8015026:	e7e9      	b.n	8014ffc <_realloc_r+0x1c>
 8015028:	4635      	mov	r5, r6
 801502a:	e7e7      	b.n	8014ffc <_realloc_r+0x1c>

0801502c <abort>:
 801502c:	b508      	push	{r3, lr}
 801502e:	2006      	movs	r0, #6
 8015030:	f000 f834 	bl	801509c <raise>
 8015034:	2001      	movs	r0, #1
 8015036:	f7ee fbd5 	bl	80037e4 <_exit>

0801503a <_malloc_usable_size_r>:
 801503a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801503e:	1f18      	subs	r0, r3, #4
 8015040:	2b00      	cmp	r3, #0
 8015042:	bfbc      	itt	lt
 8015044:	580b      	ldrlt	r3, [r1, r0]
 8015046:	18c0      	addlt	r0, r0, r3
 8015048:	4770      	bx	lr

0801504a <_raise_r>:
 801504a:	291f      	cmp	r1, #31
 801504c:	b538      	push	{r3, r4, r5, lr}
 801504e:	4604      	mov	r4, r0
 8015050:	460d      	mov	r5, r1
 8015052:	d904      	bls.n	801505e <_raise_r+0x14>
 8015054:	2316      	movs	r3, #22
 8015056:	6003      	str	r3, [r0, #0]
 8015058:	f04f 30ff 	mov.w	r0, #4294967295
 801505c:	bd38      	pop	{r3, r4, r5, pc}
 801505e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015060:	b112      	cbz	r2, 8015068 <_raise_r+0x1e>
 8015062:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015066:	b94b      	cbnz	r3, 801507c <_raise_r+0x32>
 8015068:	4620      	mov	r0, r4
 801506a:	f000 f831 	bl	80150d0 <_getpid_r>
 801506e:	462a      	mov	r2, r5
 8015070:	4601      	mov	r1, r0
 8015072:	4620      	mov	r0, r4
 8015074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015078:	f000 b818 	b.w	80150ac <_kill_r>
 801507c:	2b01      	cmp	r3, #1
 801507e:	d00a      	beq.n	8015096 <_raise_r+0x4c>
 8015080:	1c59      	adds	r1, r3, #1
 8015082:	d103      	bne.n	801508c <_raise_r+0x42>
 8015084:	2316      	movs	r3, #22
 8015086:	6003      	str	r3, [r0, #0]
 8015088:	2001      	movs	r0, #1
 801508a:	e7e7      	b.n	801505c <_raise_r+0x12>
 801508c:	2400      	movs	r4, #0
 801508e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015092:	4628      	mov	r0, r5
 8015094:	4798      	blx	r3
 8015096:	2000      	movs	r0, #0
 8015098:	e7e0      	b.n	801505c <_raise_r+0x12>
	...

0801509c <raise>:
 801509c:	4b02      	ldr	r3, [pc, #8]	; (80150a8 <raise+0xc>)
 801509e:	4601      	mov	r1, r0
 80150a0:	6818      	ldr	r0, [r3, #0]
 80150a2:	f7ff bfd2 	b.w	801504a <_raise_r>
 80150a6:	bf00      	nop
 80150a8:	20000198 	.word	0x20000198

080150ac <_kill_r>:
 80150ac:	b538      	push	{r3, r4, r5, lr}
 80150ae:	4d07      	ldr	r5, [pc, #28]	; (80150cc <_kill_r+0x20>)
 80150b0:	2300      	movs	r3, #0
 80150b2:	4604      	mov	r4, r0
 80150b4:	4608      	mov	r0, r1
 80150b6:	4611      	mov	r1, r2
 80150b8:	602b      	str	r3, [r5, #0]
 80150ba:	f7ee fb83 	bl	80037c4 <_kill>
 80150be:	1c43      	adds	r3, r0, #1
 80150c0:	d102      	bne.n	80150c8 <_kill_r+0x1c>
 80150c2:	682b      	ldr	r3, [r5, #0]
 80150c4:	b103      	cbz	r3, 80150c8 <_kill_r+0x1c>
 80150c6:	6023      	str	r3, [r4, #0]
 80150c8:	bd38      	pop	{r3, r4, r5, pc}
 80150ca:	bf00      	nop
 80150cc:	20003670 	.word	0x20003670

080150d0 <_getpid_r>:
 80150d0:	f7ee bb70 	b.w	80037b4 <_getpid>

080150d4 <_init>:
 80150d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150d6:	bf00      	nop
 80150d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80150da:	bc08      	pop	{r3}
 80150dc:	469e      	mov	lr, r3
 80150de:	4770      	bx	lr

080150e0 <_fini>:
 80150e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150e2:	bf00      	nop
 80150e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80150e6:	bc08      	pop	{r3}
 80150e8:	469e      	mov	lr, r3
 80150ea:	4770      	bx	lr
