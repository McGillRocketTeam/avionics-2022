
f437_fc_v4.1.5_blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014bcc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000084c  08014d80  08014d80  00024d80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080155cc  080155cc  0003036c  2**0
                  CONTENTS
  4 .ARM          00000008  080155cc  080155cc  000255cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080155d4  080155d4  0003036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080155d4  080155d4  000255d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080155d8  080155d8  000255d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000036c  20000000  080155dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003036c  2**0
                  CONTENTS
 10 .bss          00003028  2000036c  2000036c  0003036c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003394  20003394  0003036c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003036c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000447c2  00000000  00000000  0003039c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006372  00000000  00000000  00074b5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002838  00000000  00000000  0007aed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002608  00000000  00000000  0007d708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002da5c  00000000  00000000  0007fd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002dad0  00000000  00000000  000ad76c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fa2a9  00000000  00000000  000db23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001d54e5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000c3e4  00000000  00000000  001d5538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000036c 	.word	0x2000036c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08014d64 	.word	0x08014d64

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000370 	.word	0x20000370
 80001ec:	08014d64 	.word	0x08014d64

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <GPS_Poll>:
	CDC_Transmit_FS((unsigned char *) buf, (uint16_t) strlen(buf));
}
#endif

void GPS_Poll(float *latitude, float *longitude, float *time)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08c      	sub	sp, #48	; 0x30
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 8001018:	2364      	movs	r3, #100	; 0x64
 800101a:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
	while(loop_count < max_loop_count && !done){
 8001024:	e06a      	b.n	80010fc <GPS_Poll+0xf0>
		HAL_UART_Receive(GPS_USART, (uint8_t*)&rx_current, 1, 100);
 8001026:	2364      	movs	r3, #100	; 0x64
 8001028:	2201      	movs	r2, #1
 800102a:	493a      	ldr	r1, [pc, #232]	; (8001114 <GPS_Poll+0x108>)
 800102c:	483a      	ldr	r0, [pc, #232]	; (8001118 <GPS_Poll+0x10c>)
 800102e:	f007 fb5a 	bl	80086e6 <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 8001032:	4b38      	ldr	r3, [pc, #224]	; (8001114 <GPS_Poll+0x108>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b0a      	cmp	r3, #10
 8001038:	d00f      	beq.n	800105a <GPS_Poll+0x4e>
 800103a:	4b38      	ldr	r3, [pc, #224]	; (800111c <GPS_Poll+0x110>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b63      	cmp	r3, #99	; 0x63
 8001040:	d80b      	bhi.n	800105a <GPS_Poll+0x4e>
			rx_buffer[rx_index++] = rx_current;
 8001042:	4b36      	ldr	r3, [pc, #216]	; (800111c <GPS_Poll+0x110>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	1c5a      	adds	r2, r3, #1
 8001048:	b2d1      	uxtb	r1, r2
 800104a:	4a34      	ldr	r2, [pc, #208]	; (800111c <GPS_Poll+0x110>)
 800104c:	7011      	strb	r1, [r2, #0]
 800104e:	461a      	mov	r2, r3
 8001050:	4b30      	ldr	r3, [pc, #192]	; (8001114 <GPS_Poll+0x108>)
 8001052:	7819      	ldrb	r1, [r3, #0]
 8001054:	4b32      	ldr	r3, [pc, #200]	; (8001120 <GPS_Poll+0x114>)
 8001056:	5499      	strb	r1, [r3, r2]
 8001058:	e021      	b.n	800109e <GPS_Poll+0x92>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 800105a:	4831      	ldr	r0, [pc, #196]	; (8001120 <GPS_Poll+0x114>)
 800105c:	f000 f864 	bl	8001128 <GPS_validate>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d013      	beq.n	800108e <GPS_Poll+0x82>
				if(GPS_parse((char*) rx_buffer)){
 8001066:	482e      	ldr	r0, [pc, #184]	; (8001120 <GPS_Poll+0x114>)
 8001068:	f000 f8c0 	bl	80011ec <GPS_parse>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d00d      	beq.n	800108e <GPS_Poll+0x82>
					*latitude = GPS.dec_latitude;
 8001072:	4b2c      	ldr	r3, [pc, #176]	; (8001124 <GPS_Poll+0x118>)
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 800107a:	4b2a      	ldr	r3, [pc, #168]	; (8001124 <GPS_Poll+0x118>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 8001082:	4b28      	ldr	r3, [pc, #160]	; (8001124 <GPS_Poll+0x118>)
 8001084:	695a      	ldr	r2, [r3, #20]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	601a      	str	r2, [r3, #0]
					done = 1;
 800108a:	2301      	movs	r3, #1
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 800108e:	4b23      	ldr	r3, [pc, #140]	; (800111c <GPS_Poll+0x110>)
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 8001094:	2264      	movs	r2, #100	; 0x64
 8001096:	2100      	movs	r1, #0
 8001098:	4821      	ldr	r0, [pc, #132]	; (8001120 <GPS_Poll+0x114>)
 800109a:	f00e fdab 	bl	800fbf4 <memset>
		// from f303 code
//		__HAL_UART_CLEAR_FLAG(GPS_USART, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS_USART);
 800109e:	2300      	movs	r3, #0
 80010a0:	623b      	str	r3, [r7, #32]
 80010a2:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <GPS_Poll+0x10c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	623b      	str	r3, [r7, #32]
 80010aa:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <GPS_Poll+0x10c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	623b      	str	r3, [r7, #32]
 80010b2:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS_USART);
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
 80010b8:	4b17      	ldr	r3, [pc, #92]	; (8001118 <GPS_Poll+0x10c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	61fb      	str	r3, [r7, #28]
 80010c0:	4b15      	ldr	r3, [pc, #84]	; (8001118 <GPS_Poll+0x10c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	61fb      	str	r3, [r7, #28]
 80010c8:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS_USART);
 80010ca:	2300      	movs	r3, #0
 80010cc:	61bb      	str	r3, [r7, #24]
 80010ce:	4b12      	ldr	r3, [pc, #72]	; (8001118 <GPS_Poll+0x10c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	61bb      	str	r3, [r7, #24]
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <GPS_Poll+0x10c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	61bb      	str	r3, [r7, #24]
 80010de:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS_USART);
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <GPS_Poll+0x10c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <GPS_Poll+0x10c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 80010f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80010f8:	3301      	adds	r3, #1
 80010fa:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 80010fc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80010fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001100:	429a      	cmp	r2, r3
 8001102:	d202      	bcs.n	800110a <GPS_Poll+0xfe>
 8001104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001106:	2b00      	cmp	r3, #0
 8001108:	d08d      	beq.n	8001026 <GPS_Poll+0x1a>
	}

}
 800110a:	bf00      	nop
 800110c:	3730      	adds	r7, #48	; 0x30
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000388 	.word	0x20000388
 8001118:	20000f74 	.word	0x20000f74
 800111c:	20000389 	.word	0x20000389
 8001120:	20000be4 	.word	0x20000be4
 8001124:	20000b8c 	.word	0x20000b8c

08001128 <GPS_validate>:

int GPS_validate(char *nmeastr){
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b24      	cmp	r3, #36	; 0x24
 8001142:	d103      	bne.n	800114c <GPS_validate+0x24>
        i++;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	3301      	adds	r3, #1
 8001148:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800114a:	e00c      	b.n	8001166 <GPS_validate+0x3e>
        return 0;
 800114c:	2300      	movs	r3, #0
 800114e:	e047      	b.n	80011e0 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	4053      	eors	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        i++;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	3301      	adds	r3, #1
 8001164:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	4413      	add	r3, r2
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d008      	beq.n	8001184 <GPS_validate+0x5c>
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b2a      	cmp	r3, #42	; 0x2a
 800117c:	d002      	beq.n	8001184 <GPS_validate+0x5c>
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	2b4a      	cmp	r3, #74	; 0x4a
 8001182:	dde5      	ble.n	8001150 <GPS_validate+0x28>
    }

    if(i >= 75){
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	2b4a      	cmp	r3, #74	; 0x4a
 8001188:	dd01      	ble.n	800118e <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 800118a:	2300      	movs	r3, #0
 800118c:	e028      	b.n	80011e0 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	4413      	add	r3, r2
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b2a      	cmp	r3, #42	; 0x2a
 8001198:	d119      	bne.n	80011ce <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	3301      	adds	r3, #1
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	3302      	adds	r3, #2
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 80011b6:	f107 0308 	add.w	r3, r7, #8
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	490a      	ldr	r1, [pc, #40]	; (80011e8 <GPS_validate+0xc0>)
 80011be:	4618      	mov	r0, r3
 80011c0:	f00f fba0 	bl	8010904 <siprintf>
    return((checkcalcstr[0] == check[0])
 80011c4:	7a3a      	ldrb	r2, [r7, #8]
 80011c6:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d108      	bne.n	80011de <GPS_validate+0xb6>
 80011cc:	e001      	b.n	80011d2 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 80011ce:	2300      	movs	r3, #0
 80011d0:	e006      	b.n	80011e0 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80011d2:	7a7a      	ldrb	r2, [r7, #9]
 80011d4:	7b7b      	ldrb	r3, [r7, #13]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d101      	bne.n	80011de <GPS_validate+0xb6>
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <GPS_validate+0xb8>
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	08014d80 	.word	0x08014d80

080011ec <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	; 0x28
 80011f0:	af08      	add	r7, sp, #32
 80011f2:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 80011f4:	2206      	movs	r2, #6
 80011f6:	496d      	ldr	r1, [pc, #436]	; (80013ac <GPS_parse+0x1c0>)
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f00f fc1c 	bl	8010a36 <strncmp>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d139      	bne.n	8001278 <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8001204:	4b6a      	ldr	r3, [pc, #424]	; (80013b0 <GPS_parse+0x1c4>)
 8001206:	9307      	str	r3, [sp, #28]
 8001208:	4b6a      	ldr	r3, [pc, #424]	; (80013b4 <GPS_parse+0x1c8>)
 800120a:	9306      	str	r3, [sp, #24]
 800120c:	4b6a      	ldr	r3, [pc, #424]	; (80013b8 <GPS_parse+0x1cc>)
 800120e:	9305      	str	r3, [sp, #20]
 8001210:	4b6a      	ldr	r3, [pc, #424]	; (80013bc <GPS_parse+0x1d0>)
 8001212:	9304      	str	r3, [sp, #16]
 8001214:	4b6a      	ldr	r3, [pc, #424]	; (80013c0 <GPS_parse+0x1d4>)
 8001216:	9303      	str	r3, [sp, #12]
 8001218:	4b6a      	ldr	r3, [pc, #424]	; (80013c4 <GPS_parse+0x1d8>)
 800121a:	9302      	str	r3, [sp, #8]
 800121c:	4b6a      	ldr	r3, [pc, #424]	; (80013c8 <GPS_parse+0x1dc>)
 800121e:	9301      	str	r3, [sp, #4]
 8001220:	4b6a      	ldr	r3, [pc, #424]	; (80013cc <GPS_parse+0x1e0>)
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	4b6a      	ldr	r3, [pc, #424]	; (80013d0 <GPS_parse+0x1e4>)
 8001226:	4a6b      	ldr	r2, [pc, #428]	; (80013d4 <GPS_parse+0x1e8>)
 8001228:	496b      	ldr	r1, [pc, #428]	; (80013d8 <GPS_parse+0x1ec>)
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f00f fb8a 	bl	8010944 <siscanf>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	f340 80b5 	ble.w	80013a2 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8001238:	4b68      	ldr	r3, [pc, #416]	; (80013dc <GPS_parse+0x1f0>)
 800123a:	edd3 7a04 	vldr	s15, [r3, #16]
 800123e:	4b67      	ldr	r3, [pc, #412]	; (80013dc <GPS_parse+0x1f0>)
 8001240:	7e1b      	ldrb	r3, [r3, #24]
 8001242:	4618      	mov	r0, r3
 8001244:	eeb0 0a67 	vmov.f32	s0, s15
 8001248:	f000 f8ec 	bl	8001424 <GPS_nmea_to_dec>
 800124c:	eef0 7a40 	vmov.f32	s15, s0
 8001250:	4b62      	ldr	r3, [pc, #392]	; (80013dc <GPS_parse+0x1f0>)
 8001252:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8001256:	4b61      	ldr	r3, [pc, #388]	; (80013dc <GPS_parse+0x1f0>)
 8001258:	edd3 7a03 	vldr	s15, [r3, #12]
 800125c:	4b5f      	ldr	r3, [pc, #380]	; (80013dc <GPS_parse+0x1f0>)
 800125e:	7e5b      	ldrb	r3, [r3, #25]
 8001260:	4618      	mov	r0, r3
 8001262:	eeb0 0a67 	vmov.f32	s0, s15
 8001266:	f000 f8dd 	bl	8001424 <GPS_nmea_to_dec>
 800126a:	eef0 7a40 	vmov.f32	s15, s0
 800126e:	4b5b      	ldr	r3, [pc, #364]	; (80013dc <GPS_parse+0x1f0>)
 8001270:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8001274:	2301      	movs	r3, #1
 8001276:	e095      	b.n	80013a4 <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 8001278:	2206      	movs	r2, #6
 800127a:	4959      	ldr	r1, [pc, #356]	; (80013e0 <GPS_parse+0x1f4>)
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f00f fbda 	bl	8010a36 <strncmp>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d134      	bne.n	80012f2 <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 8001288:	4b56      	ldr	r3, [pc, #344]	; (80013e4 <GPS_parse+0x1f8>)
 800128a:	9305      	str	r3, [sp, #20]
 800128c:	4b56      	ldr	r3, [pc, #344]	; (80013e8 <GPS_parse+0x1fc>)
 800128e:	9304      	str	r3, [sp, #16]
 8001290:	4b56      	ldr	r3, [pc, #344]	; (80013ec <GPS_parse+0x200>)
 8001292:	9303      	str	r3, [sp, #12]
 8001294:	4b4b      	ldr	r3, [pc, #300]	; (80013c4 <GPS_parse+0x1d8>)
 8001296:	9302      	str	r3, [sp, #8]
 8001298:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <GPS_parse+0x1dc>)
 800129a:	9301      	str	r3, [sp, #4]
 800129c:	4b4b      	ldr	r3, [pc, #300]	; (80013cc <GPS_parse+0x1e0>)
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	4b4b      	ldr	r3, [pc, #300]	; (80013d0 <GPS_parse+0x1e4>)
 80012a2:	4a4c      	ldr	r2, [pc, #304]	; (80013d4 <GPS_parse+0x1e8>)
 80012a4:	4952      	ldr	r1, [pc, #328]	; (80013f0 <GPS_parse+0x204>)
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f00f fb4c 	bl	8010944 <siscanf>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	dd77      	ble.n	80013a2 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80012b2:	4b4a      	ldr	r3, [pc, #296]	; (80013dc <GPS_parse+0x1f0>)
 80012b4:	edd3 7a04 	vldr	s15, [r3, #16]
 80012b8:	4b48      	ldr	r3, [pc, #288]	; (80013dc <GPS_parse+0x1f0>)
 80012ba:	7e1b      	ldrb	r3, [r3, #24]
 80012bc:	4618      	mov	r0, r3
 80012be:	eeb0 0a67 	vmov.f32	s0, s15
 80012c2:	f000 f8af 	bl	8001424 <GPS_nmea_to_dec>
 80012c6:	eef0 7a40 	vmov.f32	s15, s0
 80012ca:	4b44      	ldr	r3, [pc, #272]	; (80013dc <GPS_parse+0x1f0>)
 80012cc:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80012d0:	4b42      	ldr	r3, [pc, #264]	; (80013dc <GPS_parse+0x1f0>)
 80012d2:	edd3 7a03 	vldr	s15, [r3, #12]
 80012d6:	4b41      	ldr	r3, [pc, #260]	; (80013dc <GPS_parse+0x1f0>)
 80012d8:	7e5b      	ldrb	r3, [r3, #25]
 80012da:	4618      	mov	r0, r3
 80012dc:	eeb0 0a67 	vmov.f32	s0, s15
 80012e0:	f000 f8a0 	bl	8001424 <GPS_nmea_to_dec>
 80012e4:	eef0 7a40 	vmov.f32	s15, s0
 80012e8:	4b3c      	ldr	r3, [pc, #240]	; (80013dc <GPS_parse+0x1f0>)
 80012ea:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e058      	b.n	80013a4 <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 80012f2:	2206      	movs	r2, #6
 80012f4:	493f      	ldr	r1, [pc, #252]	; (80013f4 <GPS_parse+0x208>)
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f00f fb9d 	bl	8010a36 <strncmp>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d130      	bne.n	8001364 <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 8001302:	4b3d      	ldr	r3, [pc, #244]	; (80013f8 <GPS_parse+0x20c>)
 8001304:	9303      	str	r3, [sp, #12]
 8001306:	4b33      	ldr	r3, [pc, #204]	; (80013d4 <GPS_parse+0x1e8>)
 8001308:	9302      	str	r3, [sp, #8]
 800130a:	4b2e      	ldr	r3, [pc, #184]	; (80013c4 <GPS_parse+0x1d8>)
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	4b2e      	ldr	r3, [pc, #184]	; (80013c8 <GPS_parse+0x1dc>)
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	4b2e      	ldr	r3, [pc, #184]	; (80013cc <GPS_parse+0x1e0>)
 8001314:	4a2e      	ldr	r2, [pc, #184]	; (80013d0 <GPS_parse+0x1e4>)
 8001316:	4939      	ldr	r1, [pc, #228]	; (80013fc <GPS_parse+0x210>)
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f00f fb13 	bl	8010944 <siscanf>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	dd3e      	ble.n	80013a2 <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8001324:	4b2d      	ldr	r3, [pc, #180]	; (80013dc <GPS_parse+0x1f0>)
 8001326:	edd3 7a04 	vldr	s15, [r3, #16]
 800132a:	4b2c      	ldr	r3, [pc, #176]	; (80013dc <GPS_parse+0x1f0>)
 800132c:	7e1b      	ldrb	r3, [r3, #24]
 800132e:	4618      	mov	r0, r3
 8001330:	eeb0 0a67 	vmov.f32	s0, s15
 8001334:	f000 f876 	bl	8001424 <GPS_nmea_to_dec>
 8001338:	eef0 7a40 	vmov.f32	s15, s0
 800133c:	4b27      	ldr	r3, [pc, #156]	; (80013dc <GPS_parse+0x1f0>)
 800133e:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8001342:	4b26      	ldr	r3, [pc, #152]	; (80013dc <GPS_parse+0x1f0>)
 8001344:	edd3 7a03 	vldr	s15, [r3, #12]
 8001348:	4b24      	ldr	r3, [pc, #144]	; (80013dc <GPS_parse+0x1f0>)
 800134a:	7e5b      	ldrb	r3, [r3, #25]
 800134c:	4618      	mov	r0, r3
 800134e:	eeb0 0a67 	vmov.f32	s0, s15
 8001352:	f000 f867 	bl	8001424 <GPS_nmea_to_dec>
 8001356:	eef0 7a40 	vmov.f32	s15, s0
 800135a:	4b20      	ldr	r3, [pc, #128]	; (80013dc <GPS_parse+0x1f0>)
 800135c:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 8001360:	2301      	movs	r3, #1
 8001362:	e01f      	b.n	80013a4 <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 8001364:	2206      	movs	r2, #6
 8001366:	4926      	ldr	r1, [pc, #152]	; (8001400 <GPS_parse+0x214>)
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f00f fb64 	bl	8010a36 <strncmp>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d116      	bne.n	80013a2 <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8001374:	4b23      	ldr	r3, [pc, #140]	; (8001404 <GPS_parse+0x218>)
 8001376:	9305      	str	r3, [sp, #20]
 8001378:	4b23      	ldr	r3, [pc, #140]	; (8001408 <GPS_parse+0x21c>)
 800137a:	9304      	str	r3, [sp, #16]
 800137c:	4b23      	ldr	r3, [pc, #140]	; (800140c <GPS_parse+0x220>)
 800137e:	9303      	str	r3, [sp, #12]
 8001380:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <GPS_parse+0x200>)
 8001382:	9302      	str	r3, [sp, #8]
 8001384:	4b22      	ldr	r3, [pc, #136]	; (8001410 <GPS_parse+0x224>)
 8001386:	9301      	str	r3, [sp, #4]
 8001388:	4b22      	ldr	r3, [pc, #136]	; (8001414 <GPS_parse+0x228>)
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	4b22      	ldr	r3, [pc, #136]	; (8001418 <GPS_parse+0x22c>)
 800138e:	4a23      	ldr	r2, [pc, #140]	; (800141c <GPS_parse+0x230>)
 8001390:	4923      	ldr	r1, [pc, #140]	; (8001420 <GPS_parse+0x234>)
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f00f fad6 	bl	8010944 <siscanf>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	dd01      	ble.n	80013a2 <GPS_parse+0x1b6>
            return 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	e000      	b.n	80013a4 <GPS_parse+0x1b8>
    }
    return 0;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	08014d88 	.word	0x08014d88
 80013b0:	20000bb8 	.word	0x20000bb8
 80013b4:	20000bb4 	.word	0x20000bb4
 80013b8:	20000bb0 	.word	0x20000bb0
 80013bc:	20000bac 	.word	0x20000bac
 80013c0:	20000ba8 	.word	0x20000ba8
 80013c4:	20000ba5 	.word	0x20000ba5
 80013c8:	20000b98 	.word	0x20000b98
 80013cc:	20000ba4 	.word	0x20000ba4
 80013d0:	20000b9c 	.word	0x20000b9c
 80013d4:	20000ba0 	.word	0x20000ba0
 80013d8:	08014d90 	.word	0x08014d90
 80013dc:	20000b8c 	.word	0x20000b8c
 80013e0:	08014db8 	.word	0x08014db8
 80013e4:	20000bc4 	.word	0x20000bc4
 80013e8:	20000bc0 	.word	0x20000bc0
 80013ec:	20000bbc 	.word	0x20000bbc
 80013f0:	08014dc0 	.word	0x08014dc0
 80013f4:	08014de0 	.word	0x08014de0
 80013f8:	20000bc8 	.word	0x20000bc8
 80013fc:	08014de8 	.word	0x08014de8
 8001400:	08014e04 	.word	0x08014e04
 8001404:	20000be0 	.word	0x20000be0
 8001408:	20000bdc 	.word	0x20000bdc
 800140c:	20000bd9 	.word	0x20000bd9
 8001410:	20000bd8 	.word	0x20000bd8
 8001414:	20000bd4 	.word	0x20000bd4
 8001418:	20000bd0 	.word	0x20000bd0
 800141c:	20000bcc 	.word	0x20000bcc
 8001420:	08014e0c 	.word	0x08014e0c

08001424 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8001424:	b480      	push	{r7}
 8001426:	b087      	sub	sp, #28
 8001428:	af00      	add	r7, sp, #0
 800142a:	ed87 0a01 	vstr	s0, [r7, #4]
 800142e:	4603      	mov	r3, r0
 8001430:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8001432:	ed97 7a01 	vldr	s14, [r7, #4]
 8001436:	eddf 6a20 	vldr	s13, [pc, #128]	; 80014b8 <GPS_nmea_to_dec+0x94>
 800143a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800143e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001442:	ee17 3a90 	vmov	r3, s15
 8001446:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	2264      	movs	r2, #100	; 0x64
 800144c:	fb02 f303 	mul.w	r3, r2, r3
 8001450:	ee07 3a90 	vmov	s15, r3
 8001454:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001458:	ed97 7a01 	vldr	s14, [r7, #4]
 800145c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001460:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8001464:	ed97 7a03 	vldr	s14, [r7, #12]
 8001468:	eddf 6a14 	vldr	s13, [pc, #80]	; 80014bc <GPS_nmea_to_dec+0x98>
 800146c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001470:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	ee07 3a90 	vmov	s15, r3
 800147a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001482:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001486:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 800148a:	78fb      	ldrb	r3, [r7, #3]
 800148c:	2b53      	cmp	r3, #83	; 0x53
 800148e:	d002      	beq.n	8001496 <GPS_nmea_to_dec+0x72>
 8001490:	78fb      	ldrb	r3, [r7, #3]
 8001492:	2b57      	cmp	r3, #87	; 0x57
 8001494:	d105      	bne.n	80014a2 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8001496:	edd7 7a05 	vldr	s15, [r7, #20]
 800149a:	eef1 7a67 	vneg.f32	s15, s15
 800149e:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	ee07 3a90 	vmov	s15, r3
}
 80014a8:	eeb0 0a67 	vmov.f32	s0, s15
 80014ac:	371c      	adds	r7, #28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	42c80000 	.word	0x42c80000
 80014bc:	42700000 	.word	0x42700000

080014c0 <GPS_check_nonzero_data>:

void GPS_check_nonzero_data(float latitude, float longitude, uint8_t *gps_fix_lat, uint8_t *gps_fix_long)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	ed87 0a03 	vstr	s0, [r7, #12]
 80014ca:	edc7 0a02 	vstr	s1, [r7, #8]
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
	if (latitude == 0)
 80014d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80014d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014de:	d110      	bne.n	8001502 <GPS_check_nonzero_data+0x42>
	{
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2104      	movs	r1, #4
 80014e4:	4825      	ldr	r0, [pc, #148]	; (800157c <GPS_check_nonzero_data+0xbc>)
 80014e6:	f002 ff1f 	bl	8004328 <HAL_GPIO_WritePin>

		if (*gps_fix_lat == 1)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d117      	bne.n	8001522 <GPS_check_nonzero_data+0x62>
		{
			*gps_fix_lat = 0;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
			tone(200, 2);
 80014f8:	2102      	movs	r1, #2
 80014fa:	20c8      	movs	r0, #200	; 0xc8
 80014fc:	f001 fb8c 	bl	8002c18 <tone>
 8001500:	e00f      	b.n	8001522 <GPS_check_nonzero_data+0x62>
		}
	}
	else
	{
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 8001502:	2201      	movs	r2, #1
 8001504:	2104      	movs	r1, #4
 8001506:	481d      	ldr	r0, [pc, #116]	; (800157c <GPS_check_nonzero_data+0xbc>)
 8001508:	f002 ff0e 	bl	8004328 <HAL_GPIO_WritePin>
		if (*gps_fix_lat == 0)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d106      	bne.n	8001522 <GPS_check_nonzero_data+0x62>
		{
			*gps_fix_lat = 1;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2201      	movs	r2, #1
 8001518:	701a      	strb	r2, [r3, #0]
			tone(200, 4);
 800151a:	2104      	movs	r1, #4
 800151c:	20c8      	movs	r0, #200	; 0xc8
 800151e:	f001 fb7b 	bl	8002c18 <tone>
		}
	}

	if (longitude == 0)
 8001522:	edd7 7a02 	vldr	s15, [r7, #8]
 8001526:	eef5 7a40 	vcmp.f32	s15, #0.0
 800152a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152e:	d110      	bne.n	8001552 <GPS_check_nonzero_data+0x92>
	{
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8001530:	2200      	movs	r2, #0
 8001532:	2108      	movs	r1, #8
 8001534:	4811      	ldr	r0, [pc, #68]	; (800157c <GPS_check_nonzero_data+0xbc>)
 8001536:	f002 fef7 	bl	8004328 <HAL_GPIO_WritePin>
		if (*gps_fix_long == 1)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d117      	bne.n	8001572 <GPS_check_nonzero_data+0xb2>
		{
			*gps_fix_long = 0;
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	2200      	movs	r2, #0
 8001546:	701a      	strb	r2, [r3, #0]
			tone(200, 2);
 8001548:	2102      	movs	r1, #2
 800154a:	20c8      	movs	r0, #200	; 0xc8
 800154c:	f001 fb64 	bl	8002c18 <tone>
		{
			*gps_fix_long = 1;
			tone(200, 4);
		}
	}
}
 8001550:	e00f      	b.n	8001572 <GPS_check_nonzero_data+0xb2>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET);
 8001552:	2201      	movs	r2, #1
 8001554:	2108      	movs	r1, #8
 8001556:	4809      	ldr	r0, [pc, #36]	; (800157c <GPS_check_nonzero_data+0xbc>)
 8001558:	f002 fee6 	bl	8004328 <HAL_GPIO_WritePin>
		if (*gps_fix_long == 0)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d106      	bne.n	8001572 <GPS_check_nonzero_data+0xb2>
			*gps_fix_long = 1;
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	2201      	movs	r2, #1
 8001568:	701a      	strb	r2, [r3, #0]
			tone(200, 4);
 800156a:	2104      	movs	r1, #4
 800156c:	20c8      	movs	r0, #200	; 0xc8
 800156e:	f001 fb53 	bl	8002c18 <tone>
}
 8001572:	bf00      	nop
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40020800 	.word	0x40020800

08001580 <lsm6dsl_init>:
                             uint16_t len);
static void platform_delay(uint32_t ms);

/* LSM6DSL Functions ---------------------------------------------------------*/

stmdev_ctx_t lsm6dsl_init(void){
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	b087      	sub	sp, #28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]

	stmdev_ctx_t dev_ctx_lsm6dsl;

	/* Initialize mems driver interface */
	dev_ctx_lsm6dsl.write_reg = lsm6dsl_write;
 8001588:	4b2f      	ldr	r3, [pc, #188]	; (8001648 <lsm6dsl_init+0xc8>)
 800158a:	60fb      	str	r3, [r7, #12]
	dev_ctx_lsm6dsl.read_reg = lsm6dsl_read;
 800158c:	4b2f      	ldr	r3, [pc, #188]	; (800164c <lsm6dsl_init+0xcc>)
 800158e:	613b      	str	r3, [r7, #16]
	dev_ctx_lsm6dsl.handle = &SENSOR_BUS;
 8001590:	4b2f      	ldr	r3, [pc, #188]	; (8001650 <lsm6dsl_init+0xd0>)
 8001592:	617b      	str	r3, [r7, #20]

	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 8001594:	200a      	movs	r0, #10
 8001596:	f000 fa13 	bl	80019c0 <platform_delay>

	/* Check device ID */
	lsm6dsl_device_id_get(&dev_ctx_lsm6dsl, &whoamI_lsm6dsl);
 800159a:	f107 030c 	add.w	r3, r7, #12
 800159e:	492d      	ldr	r1, [pc, #180]	; (8001654 <lsm6dsl_init+0xd4>)
 80015a0:	4618      	mov	r0, r3
 80015a2:	f000 fd71 	bl	8002088 <lsm6dsl_device_id_get>

	if (whoamI_lsm6dsl != LSM6DSL_ID){
 80015a6:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <lsm6dsl_init+0xd4>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b6a      	cmp	r3, #106	; 0x6a
 80015ac:	d005      	beq.n	80015ba <lsm6dsl_init+0x3a>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80015ae:	2201      	movs	r2, #1
 80015b0:	2102      	movs	r1, #2
 80015b2:	4829      	ldr	r0, [pc, #164]	; (8001658 <lsm6dsl_init+0xd8>)
 80015b4:	f002 feb8 	bl	8004328 <HAL_GPIO_WritePin>
		__BKPT();
 80015b8:	be00      	bkpt	0x0000
//		Error_Handler();
	}

	/* Restore default configuration */
	lsm6dsl_reset_set(&dev_ctx_lsm6dsl, PROPERTY_ENABLE);
 80015ba:	f107 030c 	add.w	r3, r7, #12
 80015be:	2101      	movs	r1, #1
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 fd72 	bl	80020aa <lsm6dsl_reset_set>

	do {
	lsm6dsl_reset_get(&dev_ctx_lsm6dsl, &rst_lsm6dsl);
 80015c6:	f107 030c 	add.w	r3, r7, #12
 80015ca:	4924      	ldr	r1, [pc, #144]	; (800165c <lsm6dsl_init+0xdc>)
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 fd92 	bl	80020f6 <lsm6dsl_reset_get>
	} while (rst_lsm6dsl);
 80015d2:	4b22      	ldr	r3, [pc, #136]	; (800165c <lsm6dsl_init+0xdc>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f5      	bne.n	80015c6 <lsm6dsl_init+0x46>

	/* Enable Block Data Update */
	lsm6dsl_block_data_update_set(&dev_ctx_lsm6dsl, PROPERTY_ENABLE);
 80015da:	f107 030c 	add.w	r3, r7, #12
 80015de:	2101      	movs	r1, #1
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 fc63 	bl	8001eac <lsm6dsl_block_data_update_set>

	/* Set Output Data Rate */
	lsm6dsl_xl_data_rate_set(&dev_ctx_lsm6dsl, LSM6DSL_XL_ODR_104Hz);
 80015e6:	f107 030c 	add.w	r3, r7, #12
 80015ea:	2104      	movs	r1, #4
 80015ec:	4618      	mov	r0, r3
 80015ee:	f000 fbeb 	bl	8001dc8 <lsm6dsl_xl_data_rate_set>
	lsm6dsl_gy_data_rate_set(&dev_ctx_lsm6dsl, LSM6DSL_GY_ODR_104Hz);
 80015f2:	f107 030c 	add.w	r3, r7, #12
 80015f6:	2104      	movs	r1, #4
 80015f8:	4618      	mov	r0, r3
 80015fa:	f000 fc31 	bl	8001e60 <lsm6dsl_gy_data_rate_set>

	/* Set full scale */
	lsm6dsl_xl_full_scale_set(&dev_ctx_lsm6dsl, LSM6DSL_8g);
 80015fe:	f107 030c 	add.w	r3, r7, #12
 8001602:	2103      	movs	r1, #3
 8001604:	4618      	mov	r0, r3
 8001606:	f000 fbb9 	bl	8001d7c <lsm6dsl_xl_full_scale_set>
	lsm6dsl_gy_full_scale_set(&dev_ctx_lsm6dsl, LSM6DSL_2000dps);
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	2106      	movs	r1, #6
 8001610:	4618      	mov	r0, r3
 8001612:	f000 fbff 	bl	8001e14 <lsm6dsl_gy_full_scale_set>

	/* Configure filtering chain(No aux interface)
	* Accelerometer - LPF1 + LPF2 path
	*/
	lsm6dsl_xl_lp2_bandwidth_set(&dev_ctx_lsm6dsl, LSM6DSL_XL_LOW_NOISE_LP_ODR_DIV_100);
 8001616:	f107 030c 	add.w	r3, r7, #12
 800161a:	2111      	movs	r1, #17
 800161c:	4618      	mov	r0, r3
 800161e:	f000 fd83 	bl	8002128 <lsm6dsl_xl_lp2_bandwidth_set>
	/* Accelerometer - High Pass / Slope path */
	//lsm6dsl_xl_reference_mode_set(&dev_ctx_lsm, PROPERTY_DISABLE);
	//lsm6dsl_xl_hp_bandwidth_set(&dev_ctx_lsm, LSM6DSL_XL_HP_ODR_DIV_100);
	/* Gyroscope - filtering chain */
	lsm6dsl_gy_band_pass_set(&dev_ctx_lsm6dsl, LSM6DSL_HP_260mHz_LP1_STRONG);
 8001622:	f107 030c 	add.w	r3, r7, #12
 8001626:	21a8      	movs	r1, #168	; 0xa8
 8001628:	4618      	mov	r0, r3
 800162a:	f000 fdb4 	bl	8002196 <lsm6dsl_gy_band_pass_set>

	return dev_ctx_lsm6dsl;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	461c      	mov	r4, r3
 8001632:	f107 030c 	add.w	r3, r7, #12
 8001636:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800163a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	371c      	adds	r7, #28
 8001642:	46bd      	mov	sp, r7
 8001644:	bd90      	pop	{r4, r7, pc}
 8001646:	bf00      	nop
 8001648:	080018d9 	.word	0x080018d9
 800164c:	08001913 	.word	0x08001913
 8001650:	20000c48 	.word	0x20000c48
 8001654:	2000039c 	.word	0x2000039c
 8001658:	40020800 	.word	0x40020800
 800165c:	2000039d 	.word	0x2000039d

08001660 <get_acceleration>:

void get_acceleration(stmdev_ctx_t dev_ctx_lsm6dsl, float *acceleration_mg){
 8001660:	b590      	push	{r4, r7, lr}
 8001662:	b087      	sub	sp, #28
 8001664:	af00      	add	r7, sp, #0
 8001666:	1d3c      	adds	r4, r7, #4
 8001668:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800166c:	603b      	str	r3, [r7, #0]

	uint8_t reg;

	/* Read output only if new xl value is available */
	lsm6dsl_xl_flag_data_ready_get(&dev_ctx_lsm6dsl, &reg);
 800166e:	f107 0217 	add.w	r2, r7, #23
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	4611      	mov	r1, r2
 8001676:	4618      	mov	r0, r3
 8001678:	f000 fc3e 	bl	8001ef8 <lsm6dsl_xl_flag_data_ready_get>

	if (reg) {
 800167c:	7dfb      	ldrb	r3, [r7, #23]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d02d      	beq.n	80016de <get_acceleration+0x7e>
	  /* Read acceleration field data */
	  memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001682:	2206      	movs	r2, #6
 8001684:	2100      	movs	r1, #0
 8001686:	4818      	ldr	r0, [pc, #96]	; (80016e8 <get_acceleration+0x88>)
 8001688:	f00e fab4 	bl	800fbf4 <memset>
	  lsm6dsl_acceleration_raw_get(&dev_ctx_lsm6dsl, data_raw_acceleration);
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	4916      	ldr	r1, [pc, #88]	; (80016e8 <get_acceleration+0x88>)
 8001690:	4618      	mov	r0, r3
 8001692:	f000 fcae 	bl	8001ff2 <lsm6dsl_acceleration_raw_get>
	  acceleration_mg[0] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[0]);
 8001696:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <get_acceleration+0x88>)
 8001698:	f9b3 3000 	ldrsh.w	r3, [r3]
 800169c:	4618      	mov	r0, r3
 800169e:	f000 fb3d 	bl	8001d1c <lsm6dsl_from_fs8g_to_mg>
 80016a2:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[0] =
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	edc3 7a00 	vstr	s15, [r3]
	  acceleration_mg[1] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[1]);
 80016ac:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <get_acceleration+0x88>)
 80016ae:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	  acceleration_mg[1] =
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	1d1c      	adds	r4, r3, #4
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[1]);
 80016b6:	4610      	mov	r0, r2
 80016b8:	f000 fb30 	bl	8001d1c <lsm6dsl_from_fs8g_to_mg>
 80016bc:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[1] =
 80016c0:	edc4 7a00 	vstr	s15, [r4]
	  acceleration_mg[2] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[2]);
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <get_acceleration+0x88>)
 80016c6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
	  acceleration_mg[2] =
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	f103 0408 	add.w	r4, r3, #8
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[2]);
 80016d0:	4610      	mov	r0, r2
 80016d2:	f000 fb23 	bl	8001d1c <lsm6dsl_from_fs8g_to_mg>
 80016d6:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[2] =
 80016da:	edc4 7a00 	vstr	s15, [r4]
	}

}
 80016de:	bf00      	nop
 80016e0:	371c      	adds	r7, #28
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd90      	pop	{r4, r7, pc}
 80016e6:	bf00      	nop
 80016e8:	2000038c 	.word	0x2000038c

080016ec <get_angvelocity>:

void get_angvelocity(stmdev_ctx_t dev_ctx_lsm6dsl, float *angular_rate_mdps){
 80016ec:	b590      	push	{r4, r7, lr}
 80016ee:	b087      	sub	sp, #28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	1d3c      	adds	r4, r7, #4
 80016f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80016f8:	603b      	str	r3, [r7, #0]
	uint8_t reg;

	/* Read output only if new gyro value is available*/
	lsm6dsl_gy_flag_data_ready_get(&dev_ctx_lsm6dsl, &reg);
 80016fa:	f107 0217 	add.w	r2, r7, #23
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	4611      	mov	r1, r2
 8001702:	4618      	mov	r0, r3
 8001704:	f000 fc11 	bl	8001f2a <lsm6dsl_gy_flag_data_ready_get>

	if (reg) {
 8001708:	7dfb      	ldrb	r3, [r7, #23]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d02d      	beq.n	800176a <get_angvelocity+0x7e>
	  /* Read angular rate field data */
	  memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 800170e:	2206      	movs	r2, #6
 8001710:	2100      	movs	r1, #0
 8001712:	4818      	ldr	r0, [pc, #96]	; (8001774 <get_angvelocity+0x88>)
 8001714:	f00e fa6e 	bl	800fbf4 <memset>
	  lsm6dsl_angular_rate_raw_get(&dev_ctx_lsm6dsl, data_raw_angular_rate);
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	4916      	ldr	r1, [pc, #88]	; (8001774 <get_angvelocity+0x88>)
 800171c:	4618      	mov	r0, r3
 800171e:	f000 fc1d 	bl	8001f5c <lsm6dsl_angular_rate_raw_get>
	  angular_rate_mdps[0] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8001722:	4b14      	ldr	r3, [pc, #80]	; (8001774 <get_angvelocity+0x88>)
 8001724:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001728:	4618      	mov	r0, r3
 800172a:	f000 fb0f 	bl	8001d4c <lsm6dsl_from_fs2000dps_to_mdps>
 800172e:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[0] =
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	edc3 7a00 	vstr	s15, [r3]
	  angular_rate_mdps[1] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001738:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <get_angvelocity+0x88>)
 800173a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	  angular_rate_mdps[1] =
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	1d1c      	adds	r4, r3, #4
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001742:	4610      	mov	r0, r2
 8001744:	f000 fb02 	bl	8001d4c <lsm6dsl_from_fs2000dps_to_mdps>
 8001748:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[1] =
 800174c:	edc4 7a00 	vstr	s15, [r4]
	  angular_rate_mdps[2] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001750:	4b08      	ldr	r3, [pc, #32]	; (8001774 <get_angvelocity+0x88>)
 8001752:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
	  angular_rate_mdps[2] =
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	f103 0408 	add.w	r4, r3, #8
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 800175c:	4610      	mov	r0, r2
 800175e:	f000 faf5 	bl	8001d4c <lsm6dsl_from_fs2000dps_to_mdps>
 8001762:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[2] =
 8001766:	edc4 7a00 	vstr	s15, [r4]
	}
}
 800176a:	bf00      	nop
 800176c:	371c      	adds	r7, #28
 800176e:	46bd      	mov	sp, r7
 8001770:	bd90      	pop	{r4, r7, pc}
 8001772:	bf00      	nop
 8001774:	20000394 	.word	0x20000394

08001778 <lps22hh_init>:

/* LPS22HH Functions ---------------------------------------------------------*/
stmdev_ctx_t lps22hh_init(void){
 8001778:	b590      	push	{r4, r7, lr}
 800177a:	b087      	sub	sp, #28
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	stmdev_ctx_t dev_ctx_lps22hh;

	/* Initialize mems driver interface */
	dev_ctx_lps22hh.write_reg = lps22hh_write;
 8001780:	4b22      	ldr	r3, [pc, #136]	; (800180c <lps22hh_init+0x94>)
 8001782:	60fb      	str	r3, [r7, #12]
	dev_ctx_lps22hh.read_reg = lps22hh_read;
 8001784:	4b22      	ldr	r3, [pc, #136]	; (8001810 <lps22hh_init+0x98>)
 8001786:	613b      	str	r3, [r7, #16]
	dev_ctx_lps22hh.handle = &SENSOR_BUS;
 8001788:	4b22      	ldr	r3, [pc, #136]	; (8001814 <lps22hh_init+0x9c>)
 800178a:	617b      	str	r3, [r7, #20]


	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 800178c:	200a      	movs	r0, #10
 800178e:	f000 f917 	bl	80019c0 <platform_delay>

	/* Check device ID */
	whoamI_lps22hh = 0;
 8001792:	4b21      	ldr	r3, [pc, #132]	; (8001818 <lps22hh_init+0xa0>)
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]
	lps22hh_device_id_get(&dev_ctx_lps22hh, &whoamI_lps22hh);
 8001798:	f107 030c 	add.w	r3, r7, #12
 800179c:	491e      	ldr	r1, [pc, #120]	; (8001818 <lps22hh_init+0xa0>)
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 fa3c 	bl	8001c1c <lps22hh_device_id_get>

	if ( whoamI_lps22hh != LPS22HH_ID ){
 80017a4:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <lps22hh_init+0xa0>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2bb3      	cmp	r3, #179	; 0xb3
 80017aa:	d007      	beq.n	80017bc <lps22hh_init+0x44>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80017ac:	2201      	movs	r2, #1
 80017ae:	2104      	movs	r1, #4
 80017b0:	481a      	ldr	r0, [pc, #104]	; (800181c <lps22hh_init+0xa4>)
 80017b2:	f002 fdb9 	bl	8004328 <HAL_GPIO_WritePin>
		__BKPT();
 80017b6:	be00      	bkpt	0x0000
		Error_Handler();
 80017b8:	f001 fa52 	bl	8002c60 <Error_Handler>
	}


	/* Restore default configuration */
	lps22hh_reset_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 80017bc:	f107 030c 	add.w	r3, r7, #12
 80017c0:	2101      	movs	r1, #1
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 fa3b 	bl	8001c3e <lps22hh_reset_set>

	do {
		lps22hh_reset_get(&dev_ctx_lps22hh, &rst_lps22hh);
 80017c8:	f107 030c 	add.w	r3, r7, #12
 80017cc:	4914      	ldr	r1, [pc, #80]	; (8001820 <lps22hh_init+0xa8>)
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 fa5b 	bl	8001c8a <lps22hh_reset_get>
	} while (rst_lps22hh);
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <lps22hh_init+0xa8>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1f5      	bne.n	80017c8 <lps22hh_init+0x50>

	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 80017dc:	f107 030c 	add.w	r3, r7, #12
 80017e0:	2101      	movs	r1, #1
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 f95a 	bl	8001a9c <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&dev_ctx_lps22hh, LPS22HH_75_Hz_LOW_NOISE);
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	2115      	movs	r1, #21
 80017ee:	4618      	mov	r0, r3
 80017f0:	f000 f97a 	bl	8001ae8 <lps22hh_data_rate_set>

	return dev_ctx_lps22hh;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	461c      	mov	r4, r3
 80017f8:	f107 030c 	add.w	r3, r7, #12
 80017fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001800:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	371c      	adds	r7, #28
 8001808:	46bd      	mov	sp, r7
 800180a:	bd90      	pop	{r4, r7, pc}
 800180c:	0800194d 	.word	0x0800194d
 8001810:	08001987 	.word	0x08001987
 8001814:	20000c48 	.word	0x20000c48
 8001818:	200003a4 	.word	0x200003a4
 800181c:	40020800 	.word	0x40020800
 8001820:	200003a5 	.word	0x200003a5

08001824 <get_pressure>:

void get_pressure(stmdev_ctx_t dev_ctx_lps22hh, float *pressure){
 8001824:	b590      	push	{r4, r7, lr}
 8001826:	b087      	sub	sp, #28
 8001828:	af00      	add	r7, sp, #0
 800182a:	1d3c      	adds	r4, r7, #4
 800182c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001830:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&dev_ctx_lps22hh, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 8001832:	f107 0214 	add.w	r2, r7, #20
 8001836:	1d38      	adds	r0, r7, #4
 8001838:	2301      	movs	r3, #1
 800183a:	2127      	movs	r1, #39	; 0x27
 800183c:	f000 f8cb 	bl	80019d6 <lps22hh_read_reg>

	if (reg.status.p_da) {
 8001840:	7d3b      	ldrb	r3, [r7, #20]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b00      	cmp	r3, #0
 800184a:	d011      	beq.n	8001870 <get_pressure+0x4c>
 800184c:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <get_pressure+0x54>)
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
	  lps22hh_pressure_raw_get(&dev_ctx_lps22hh, &data_raw_pressure);
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	4908      	ldr	r1, [pc, #32]	; (8001878 <get_pressure+0x54>)
 8001856:	4618      	mov	r0, r3
 8001858:	f000 f994 	bl	8001b84 <lps22hh_pressure_raw_get>
	  *pressure = lps22hh_from_lsb_to_hpa( data_raw_pressure);
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <get_pressure+0x54>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f000 f8e9 	bl	8001a38 <lps22hh_from_lsb_to_hpa>
 8001866:	eef0 7a40 	vmov.f32	s15, s0
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001870:	bf00      	nop
 8001872:	371c      	adds	r7, #28
 8001874:	46bd      	mov	sp, r7
 8001876:	bd90      	pop	{r4, r7, pc}
 8001878:	200003a0 	.word	0x200003a0

0800187c <get_temperature>:

void get_temperature(stmdev_ctx_t dev_ctx_lps22hh, float *temperature){
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b087      	sub	sp, #28
 8001880:	af00      	add	r7, sp, #0
 8001882:	1d3c      	adds	r4, r7, #4
 8001884:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001888:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&dev_ctx_lps22hh, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 800188a:	f107 0214 	add.w	r2, r7, #20
 800188e:	1d38      	adds	r0, r7, #4
 8001890:	2301      	movs	r3, #1
 8001892:	2127      	movs	r1, #39	; 0x27
 8001894:	f000 f89f 	bl	80019d6 <lps22hh_read_reg>

	if (reg.status.t_da) {
 8001898:	7d3b      	ldrb	r3, [r7, #20]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d012      	beq.n	80018ca <get_temperature+0x4e>
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <get_temperature+0x58>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	801a      	strh	r2, [r3, #0]
	  memset(&data_raw_temperature, 0x00, sizeof(int16_t));
	  lps22hh_temperature_raw_get(&dev_ctx_lps22hh, &data_raw_temperature);
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	4909      	ldr	r1, [pc, #36]	; (80018d4 <get_temperature+0x58>)
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 f991 	bl	8001bd6 <lps22hh_temperature_raw_get>
	  *temperature = lps22hh_from_lsb_to_celsius(data_raw_temperature);
 80018b4:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <get_temperature+0x58>)
 80018b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 f8d4 	bl	8001a68 <lps22hh_from_lsb_to_celsius>
 80018c0:	eef0 7a40 	vmov.f32	s15, s0
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80018ca:	bf00      	nop
 80018cc:	371c      	adds	r7, #28
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd90      	pop	{r4, r7, pc}
 80018d2:	bf00      	nop
 80018d4:	2000039a 	.word	0x2000039a

080018d8 <lsm6dsl_write>:
 *
 */
static int32_t lsm6dsl_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af04      	add	r7, sp, #16
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	607a      	str	r2, [r7, #4]
 80018e2:	461a      	mov	r2, r3
 80018e4:	460b      	mov	r3, r1
 80018e6:	72fb      	strb	r3, [r7, #11]
 80018e8:	4613      	mov	r3, r2
 80018ea:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LSM6DSL_I2C_ADD_L, reg,
 80018ec:	7afb      	ldrb	r3, [r7, #11]
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f4:	9302      	str	r3, [sp, #8]
 80018f6:	893b      	ldrh	r3, [r7, #8]
 80018f8:	9301      	str	r3, [sp, #4]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	2301      	movs	r3, #1
 8001900:	21d5      	movs	r1, #213	; 0xd5
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f002 fe86 	bl	8004614 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <lsm6dsl_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lsm6dsl_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b088      	sub	sp, #32
 8001916:	af04      	add	r7, sp, #16
 8001918:	60f8      	str	r0, [r7, #12]
 800191a:	607a      	str	r2, [r7, #4]
 800191c:	461a      	mov	r2, r3
 800191e:	460b      	mov	r3, r1
 8001920:	72fb      	strb	r3, [r7, #11]
 8001922:	4613      	mov	r3, r2
 8001924:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Read(handle, LSM6DSL_I2C_ADD_L, reg,
 8001926:	7afb      	ldrb	r3, [r7, #11]
 8001928:	b29a      	uxth	r2, r3
 800192a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800192e:	9302      	str	r3, [sp, #8]
 8001930:	893b      	ldrh	r3, [r7, #8]
 8001932:	9301      	str	r3, [sp, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	2301      	movs	r3, #1
 800193a:	21d5      	movs	r1, #213	; 0xd5
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f002 ff63 	bl	8004808 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <lps22hh_write>:
 *
 */
static int32_t lps22hh_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af04      	add	r7, sp, #16
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	607a      	str	r2, [r7, #4]
 8001956:	461a      	mov	r2, r3
 8001958:	460b      	mov	r3, r1
 800195a:	72fb      	strb	r3, [r7, #11]
 800195c:	4613      	mov	r3, r2
 800195e:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_L, reg,
 8001960:	7afb      	ldrb	r3, [r7, #11]
 8001962:	b29a      	uxth	r2, r3
 8001964:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001968:	9302      	str	r3, [sp, #8]
 800196a:	893b      	ldrh	r3, [r7, #8]
 800196c:	9301      	str	r3, [sp, #4]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	2301      	movs	r3, #1
 8001974:	21b9      	movs	r1, #185	; 0xb9
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	f002 fe4c 	bl	8004614 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <lps22hh_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lps22hh_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b088      	sub	sp, #32
 800198a:	af04      	add	r7, sp, #16
 800198c:	60f8      	str	r0, [r7, #12]
 800198e:	607a      	str	r2, [r7, #4]
 8001990:	461a      	mov	r2, r3
 8001992:	460b      	mov	r3, r1
 8001994:	72fb      	strb	r3, [r7, #11]
 8001996:	4613      	mov	r3, r2
 8001998:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_L, reg,
 800199a:	7afb      	ldrb	r3, [r7, #11]
 800199c:	b29a      	uxth	r2, r3
 800199e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019a2:	9302      	str	r3, [sp, #8]
 80019a4:	893b      	ldrh	r3, [r7, #8]
 80019a6:	9301      	str	r3, [sp, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	2301      	movs	r3, #1
 80019ae:	21b9      	movs	r1, #185	; 0xb9
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f002 ff29 	bl	8004808 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f001 ff59 	bl	8003880 <HAL_Delay>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80019d6:	b590      	push	{r4, r7, lr}
 80019d8:	b087      	sub	sp, #28
 80019da:	af00      	add	r7, sp, #0
 80019dc:	60f8      	str	r0, [r7, #12]
 80019de:	607a      	str	r2, [r7, #4]
 80019e0:	461a      	mov	r2, r3
 80019e2:	460b      	mov	r3, r1
 80019e4:	72fb      	strb	r3, [r7, #11]
 80019e6:	4613      	mov	r3, r2
 80019e8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	685c      	ldr	r4, [r3, #4]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6898      	ldr	r0, [r3, #8]
 80019f2:	893b      	ldrh	r3, [r7, #8]
 80019f4:	7af9      	ldrb	r1, [r7, #11]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	47a0      	blx	r4
 80019fa:	6178      	str	r0, [r7, #20]

  return ret;
 80019fc:	697b      	ldr	r3, [r7, #20]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	371c      	adds	r7, #28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd90      	pop	{r4, r7, pc}

08001a06 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001a06:	b590      	push	{r4, r7, lr}
 8001a08:	b087      	sub	sp, #28
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	60f8      	str	r0, [r7, #12]
 8001a0e:	607a      	str	r2, [r7, #4]
 8001a10:	461a      	mov	r2, r3
 8001a12:	460b      	mov	r3, r1
 8001a14:	72fb      	strb	r3, [r7, #11]
 8001a16:	4613      	mov	r3, r2
 8001a18:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681c      	ldr	r4, [r3, #0]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6898      	ldr	r0, [r3, #8]
 8001a22:	893b      	ldrh	r3, [r7, #8]
 8001a24:	7af9      	ldrb	r1, [r7, #11]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	47a0      	blx	r4
 8001a2a:	6178      	str	r0, [r7, #20]

  return ret;
 8001a2c:	697b      	ldr	r3, [r7, #20]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	371c      	adds	r7, #28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd90      	pop	{r4, r7, pc}
	...

08001a38 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	ee07 3a90 	vmov	s15, r3
 8001a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a4a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001a64 <lps22hh_from_lsb_to_hpa+0x2c>
 8001a4e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a52:	eef0 7a66 	vmov.f32	s15, s13
}
 8001a56:	eeb0 0a67 	vmov.f32	s0, s15
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	49800000 	.word	0x49800000

08001a68 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8001a72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a76:	ee07 3a90 	vmov	s15, r3
 8001a7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a7e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001a98 <lps22hh_from_lsb_to_celsius+0x30>
 8001a82:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a86:	eef0 7a66 	vmov.f32	s15, s13
}
 8001a8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	42c80000 	.word	0x42c80000

08001a9c <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8001aa8:	f107 0208 	add.w	r2, r7, #8
 8001aac:	2301      	movs	r3, #1
 8001aae:	2110      	movs	r1, #16
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff ff90 	bl	80019d6 <lps22hh_read_reg>
 8001ab6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10f      	bne.n	8001ade <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8001abe:	78fb      	ldrb	r3, [r7, #3]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	7a3b      	ldrb	r3, [r7, #8]
 8001ac8:	f362 0341 	bfi	r3, r2, #1, #1
 8001acc:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8001ace:	f107 0208 	add.w	r2, r7, #8
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	2110      	movs	r1, #16
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff ff95 	bl	8001a06 <lps22hh_write_reg>
 8001adc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001ade:	68fb      	ldr	r3, [r7, #12]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001af4:	f107 0210 	add.w	r2, r7, #16
 8001af8:	2301      	movs	r3, #1
 8001afa:	2110      	movs	r1, #16
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff ff6a 	bl	80019d6 <lps22hh_read_reg>
 8001b02:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d107      	bne.n	8001b1a <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8001b0a:	f107 020c 	add.w	r2, r7, #12
 8001b0e:	2301      	movs	r3, #1
 8001b10:	2111      	movs	r1, #17
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff ff5f 	bl	80019d6 <lps22hh_read_reg>
 8001b18:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d10f      	bne.n	8001b40 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8001b20:	78fb      	ldrb	r3, [r7, #3]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	7c3b      	ldrb	r3, [r7, #16]
 8001b2a:	f362 1306 	bfi	r3, r2, #4, #3
 8001b2e:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001b30:	f107 0210 	add.w	r2, r7, #16
 8001b34:	2301      	movs	r3, #1
 8001b36:	2110      	movs	r1, #16
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff ff64 	bl	8001a06 <lps22hh_write_reg>
 8001b3e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d119      	bne.n	8001b7a <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8001b46:	78fb      	ldrb	r3, [r7, #3]
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	7b3b      	ldrb	r3, [r7, #12]
 8001b52:	f362 0341 	bfi	r3, r2, #1, #1
 8001b56:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8001b58:	78fb      	ldrb	r3, [r7, #3]
 8001b5a:	08db      	lsrs	r3, r3, #3
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	7b3b      	ldrb	r3, [r7, #12]
 8001b64:	f362 0300 	bfi	r3, r2, #0, #1
 8001b68:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8001b6a:	f107 020c 	add.w	r2, r7, #12
 8001b6e:	2301      	movs	r3, #1
 8001b70:	2111      	movs	r1, #17
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff ff47 	bl	8001a06 <lps22hh_write_reg>
 8001b78:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8001b7a:	697b      	ldr	r3, [r7, #20]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8001b8e:	f107 0208 	add.w	r2, r7, #8
 8001b92:	2303      	movs	r3, #3
 8001b94:	2128      	movs	r1, #40	; 0x28
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff ff1d 	bl	80019d6 <lps22hh_read_reg>
 8001b9c:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8001b9e:	7abb      	ldrb	r3, [r7, #10]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	021b      	lsls	r3, r3, #8
 8001bac:	7a7a      	ldrb	r2, [r7, #9]
 8001bae:	441a      	add	r2, r3
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	021b      	lsls	r3, r3, #8
 8001bba:	7a3a      	ldrb	r2, [r7, #8]
 8001bbc:	441a      	add	r2, r3
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	021a      	lsls	r2, r3, #8
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	601a      	str	r2, [r3, #0]

  return ret;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b084      	sub	sp, #16
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8001be0:	f107 0208 	add.w	r2, r7, #8
 8001be4:	2302      	movs	r3, #2
 8001be6:	212b      	movs	r1, #43	; 0x2b
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff fef4 	bl	80019d6 <lps22hh_read_reg>
 8001bee:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8001bf0:	7a7b      	ldrb	r3, [r7, #9]
 8001bf2:	b21a      	sxth	r2, r3
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	021b      	lsls	r3, r3, #8
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	7a3b      	ldrb	r3, [r7, #8]
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	4413      	add	r3, r2
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	b21a      	sxth	r2, r3
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	801a      	strh	r2, [r3, #0]

  return ret;
 8001c12:	68fb      	ldr	r3, [r7, #12]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8001c26:	2301      	movs	r3, #1
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	210f      	movs	r1, #15
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7ff fed2 	bl	80019d6 <lps22hh_read_reg>
 8001c32:	60f8      	str	r0, [r7, #12]

  return ret;
 8001c34:	68fb      	ldr	r3, [r7, #12]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b084      	sub	sp, #16
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
 8001c46:	460b      	mov	r3, r1
 8001c48:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8001c4a:	f107 0208 	add.w	r2, r7, #8
 8001c4e:	2301      	movs	r3, #1
 8001c50:	2111      	movs	r1, #17
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff febf 	bl	80019d6 <lps22hh_read_reg>
 8001c58:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d10f      	bne.n	8001c80 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	7a3b      	ldrb	r3, [r7, #8]
 8001c6a:	f362 0382 	bfi	r3, r2, #2, #1
 8001c6e:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8001c70:	f107 0208 	add.w	r2, r7, #8
 8001c74:	2301      	movs	r3, #1
 8001c76:	2111      	movs	r1, #17
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff fec4 	bl	8001a06 <lps22hh_write_reg>
 8001c7e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001c80:	68fb      	ldr	r3, [r7, #12]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b084      	sub	sp, #16
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8001c94:	f107 0208 	add.w	r2, r7, #8
 8001c98:	2301      	movs	r3, #1
 8001c9a:	2111      	movs	r1, #17
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff fe9a 	bl	80019d6 <lps22hh_read_reg>
 8001ca2:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8001ca4:	7a3b      	ldrb	r3, [r7, #8]
 8001ca6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	461a      	mov	r2, r3
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	701a      	strb	r2, [r3, #0]

  return ret;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001cbc:	b590      	push	{r4, r7, lr}
 8001cbe:	b087      	sub	sp, #28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	607a      	str	r2, [r7, #4]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	460b      	mov	r3, r1
 8001cca:	72fb      	strb	r3, [r7, #11]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	685c      	ldr	r4, [r3, #4]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6898      	ldr	r0, [r3, #8]
 8001cd8:	893b      	ldrh	r3, [r7, #8]
 8001cda:	7af9      	ldrb	r1, [r7, #11]
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	47a0      	blx	r4
 8001ce0:	6178      	str	r0, [r7, #20]

  return ret;
 8001ce2:	697b      	ldr	r3, [r7, #20]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	371c      	adds	r7, #28
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd90      	pop	{r4, r7, pc}

08001cec <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001cec:	b590      	push	{r4, r7, lr}
 8001cee:	b087      	sub	sp, #28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	607a      	str	r2, [r7, #4]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	72fb      	strb	r3, [r7, #11]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681c      	ldr	r4, [r3, #0]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6898      	ldr	r0, [r3, #8]
 8001d08:	893b      	ldrh	r3, [r7, #8]
 8001d0a:	7af9      	ldrb	r1, [r7, #11]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	47a0      	blx	r4
 8001d10:	6178      	str	r0, [r7, #20]

  return ret;
 8001d12:	697b      	ldr	r3, [r7, #20]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	371c      	adds	r7, #28
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd90      	pop	{r4, r7, pc}

08001d1c <lsm6dsl_from_fs8g_to_mg>:
{
  return ((float_t)lsb * 0.122f);
}

float_t lsm6dsl_from_fs8g_to_mg(int16_t lsb)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.244f);
 8001d26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d2a:	ee07 3a90 	vmov	s15, r3
 8001d2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d32:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001d48 <lsm6dsl_from_fs8g_to_mg+0x2c>
 8001d36:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001d3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	3e79db23 	.word	0x3e79db23

08001d4c <lsm6dsl_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsl_from_fs2000dps_to_mdps(int16_t lsb)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8001d56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d5a:	ee07 3a90 	vmov	s15, r3
 8001d5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d62:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001d78 <lsm6dsl_from_fs2000dps_to_mdps+0x2c>
 8001d66:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001d6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	428c0000 	.word	0x428c0000

08001d7c <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001d88:	f107 0208 	add.w	r2, r7, #8
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	2110      	movs	r1, #16
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff ff93 	bl	8001cbc <lsm6dsl_read_reg>
 8001d96:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10f      	bne.n	8001dbe <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8001d9e:	78fb      	ldrb	r3, [r7, #3]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	7a3b      	ldrb	r3, [r7, #8]
 8001da8:	f362 0383 	bfi	r3, r2, #2, #2
 8001dac:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001dae:	f107 0208 	add.w	r2, r7, #8
 8001db2:	2301      	movs	r3, #1
 8001db4:	2110      	movs	r1, #16
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff ff98 	bl	8001cec <lsm6dsl_write_reg>
 8001dbc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001dd4:	f107 0208 	add.w	r2, r7, #8
 8001dd8:	2301      	movs	r3, #1
 8001dda:	2110      	movs	r1, #16
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff ff6d 	bl	8001cbc <lsm6dsl_read_reg>
 8001de2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10f      	bne.n	8001e0a <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8001dea:	78fb      	ldrb	r3, [r7, #3]
 8001dec:	f003 030f 	and.w	r3, r3, #15
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	7a3b      	ldrb	r3, [r7, #8]
 8001df4:	f362 1307 	bfi	r3, r2, #4, #4
 8001df8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001dfa:	f107 0208 	add.w	r2, r7, #8
 8001dfe:	2301      	movs	r3, #1
 8001e00:	2110      	movs	r1, #16
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff ff72 	bl	8001cec <lsm6dsl_write_reg>
 8001e08:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001e20:	f107 0208 	add.w	r2, r7, #8
 8001e24:	2301      	movs	r3, #1
 8001e26:	2111      	movs	r1, #17
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7ff ff47 	bl	8001cbc <lsm6dsl_read_reg>
 8001e2e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10f      	bne.n	8001e56 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8001e36:	78fb      	ldrb	r3, [r7, #3]
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	7a3b      	ldrb	r3, [r7, #8]
 8001e40:	f362 0343 	bfi	r3, r2, #1, #3
 8001e44:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001e46:	f107 0208 	add.w	r2, r7, #8
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	2111      	movs	r1, #17
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ff4c 	bl	8001cec <lsm6dsl_write_reg>
 8001e54:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001e56:	68fb      	ldr	r3, [r7, #12]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001e6c:	f107 0208 	add.w	r2, r7, #8
 8001e70:	2301      	movs	r3, #1
 8001e72:	2111      	movs	r1, #17
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff ff21 	bl	8001cbc <lsm6dsl_read_reg>
 8001e7a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10f      	bne.n	8001ea2 <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 8001e82:	78fb      	ldrb	r3, [r7, #3]
 8001e84:	f003 030f 	and.w	r3, r3, #15
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	7a3b      	ldrb	r3, [r7, #8]
 8001e8c:	f362 1307 	bfi	r3, r2, #4, #4
 8001e90:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001e92:	f107 0208 	add.w	r2, r7, #8
 8001e96:	2301      	movs	r3, #1
 8001e98:	2111      	movs	r1, #17
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff ff26 	bl	8001cec <lsm6dsl_write_reg>
 8001ea0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001eb8:	f107 0208 	add.w	r2, r7, #8
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	2112      	movs	r1, #18
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7ff fefb 	bl	8001cbc <lsm6dsl_read_reg>
 8001ec6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10f      	bne.n	8001eee <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8001ece:	78fb      	ldrb	r3, [r7, #3]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	7a3b      	ldrb	r3, [r7, #8]
 8001ed8:	f362 1386 	bfi	r3, r2, #6, #1
 8001edc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001ede:	f107 0208 	add.w	r2, r7, #8
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	2112      	movs	r1, #18
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff ff00 	bl	8001cec <lsm6dsl_write_reg>
 8001eec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001eee:	68fb      	ldr	r3, [r7, #12]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <lsm6dsl_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  lsm6dsl_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG,
 8001f02:	f107 0208 	add.w	r2, r7, #8
 8001f06:	2301      	movs	r3, #1
 8001f08:	211e      	movs	r1, #30
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7ff fed6 	bl	8001cbc <lsm6dsl_read_reg>
 8001f10:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 8001f12:	7a3b      	ldrb	r3, [r7, #8]
 8001f14:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	701a      	strb	r2, [r3, #0]

  return ret;
 8001f20:	68fb      	ldr	r3, [r7, #12]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <lsm6dsl_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b084      	sub	sp, #16
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	6039      	str	r1, [r7, #0]
  lsm6dsl_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG,
 8001f34:	f107 0208 	add.w	r2, r7, #8
 8001f38:	2301      	movs	r3, #1
 8001f3a:	211e      	movs	r1, #30
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7ff febd 	bl	8001cbc <lsm6dsl_read_reg>
 8001f42:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8001f44:	7a3b      	ldrb	r3, [r7, #8]
 8001f46:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	701a      	strb	r2, [r3, #0]

  return ret;
 8001f52:	68fb      	ldr	r3, [r7, #12]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8001f66:	f107 020c 	add.w	r2, r7, #12
 8001f6a:	2306      	movs	r3, #6
 8001f6c:	2122      	movs	r1, #34	; 0x22
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7ff fea4 	bl	8001cbc <lsm6dsl_read_reg>
 8001f74:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001f76:	7b7b      	ldrb	r3, [r7, #13]
 8001f78:	b21a      	sxth	r2, r3
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	021b      	lsls	r3, r3, #8
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	7b3b      	ldrb	r3, [r7, #12]
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	4413      	add	r3, r2
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	b21a      	sxth	r2, r3
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001f98:	7bfa      	ldrb	r2, [r7, #15]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	b212      	sxth	r2, r2
 8001fa0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	3302      	adds	r3, #2
 8001fa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	021b      	lsls	r3, r3, #8
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	7bbb      	ldrb	r3, [r7, #14]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	3302      	adds	r3, #2
 8001fbc:	b212      	sxth	r2, r2
 8001fbe:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001fc0:	7c7a      	ldrb	r2, [r7, #17]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	b212      	sxth	r2, r2
 8001fc8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	3304      	adds	r3, #4
 8001fce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	021b      	lsls	r3, r3, #8
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	7c3b      	ldrb	r3, [r7, #16]
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	4413      	add	r3, r2
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	b212      	sxth	r2, r2
 8001fe6:	801a      	strh	r2, [r3, #0]

  return ret;
 8001fe8:	697b      	ldr	r3, [r7, #20]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b086      	sub	sp, #24
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8001ffc:	f107 020c 	add.w	r2, r7, #12
 8002000:	2306      	movs	r3, #6
 8002002:	2128      	movs	r1, #40	; 0x28
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7ff fe59 	bl	8001cbc <lsm6dsl_read_reg>
 800200a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800200c:	7b7b      	ldrb	r3, [r7, #13]
 800200e:	b21a      	sxth	r2, r3
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	f9b3 3000 	ldrsh.w	r3, [r3]
 800201a:	b29b      	uxth	r3, r3
 800201c:	021b      	lsls	r3, r3, #8
 800201e:	b29a      	uxth	r2, r3
 8002020:	7b3b      	ldrb	r3, [r7, #12]
 8002022:	b29b      	uxth	r3, r3
 8002024:	4413      	add	r3, r2
 8002026:	b29b      	uxth	r3, r3
 8002028:	b21a      	sxth	r2, r3
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800202e:	7bfa      	ldrb	r2, [r7, #15]
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	3302      	adds	r3, #2
 8002034:	b212      	sxth	r2, r2
 8002036:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	3302      	adds	r3, #2
 800203c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002040:	b29b      	uxth	r3, r3
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	b29a      	uxth	r2, r3
 8002046:	7bbb      	ldrb	r3, [r7, #14]
 8002048:	b29b      	uxth	r3, r3
 800204a:	4413      	add	r3, r2
 800204c:	b29a      	uxth	r2, r3
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	3302      	adds	r3, #2
 8002052:	b212      	sxth	r2, r2
 8002054:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002056:	7c7a      	ldrb	r2, [r7, #17]
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	3304      	adds	r3, #4
 800205c:	b212      	sxth	r2, r2
 800205e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	3304      	adds	r3, #4
 8002064:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002068:	b29b      	uxth	r3, r3
 800206a:	021b      	lsls	r3, r3, #8
 800206c:	b29a      	uxth	r2, r3
 800206e:	7c3b      	ldrb	r3, [r7, #16]
 8002070:	b29b      	uxth	r3, r3
 8002072:	4413      	add	r3, r2
 8002074:	b29a      	uxth	r2, r3
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	3304      	adds	r3, #4
 800207a:	b212      	sxth	r2, r2
 800207c:	801a      	strh	r2, [r3, #0]

  return ret;
 800207e:	697b      	ldr	r3, [r7, #20]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8002092:	2301      	movs	r3, #1
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	210f      	movs	r1, #15
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff fe0f 	bl	8001cbc <lsm6dsl_read_reg>
 800209e:	60f8      	str	r0, [r7, #12]

  return ret;
 80020a0:	68fb      	ldr	r3, [r7, #12]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b084      	sub	sp, #16
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	460b      	mov	r3, r1
 80020b4:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80020b6:	f107 0208 	add.w	r2, r7, #8
 80020ba:	2301      	movs	r3, #1
 80020bc:	2112      	movs	r1, #18
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff fdfc 	bl	8001cbc <lsm6dsl_read_reg>
 80020c4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10f      	bne.n	80020ec <lsm6dsl_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 80020cc:	78fb      	ldrb	r3, [r7, #3]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	7a3b      	ldrb	r3, [r7, #8]
 80020d6:	f362 0300 	bfi	r3, r2, #0, #1
 80020da:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80020dc:	f107 0208 	add.w	r2, r7, #8
 80020e0:	2301      	movs	r3, #1
 80020e2:	2112      	movs	r1, #18
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff fe01 	bl	8001cec <lsm6dsl_write_reg>
 80020ea:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80020ec:	68fb      	ldr	r3, [r7, #12]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <lsm6dsl_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b084      	sub	sp, #16
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
 80020fe:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002100:	f107 0208 	add.w	r2, r7, #8
 8002104:	2301      	movs	r3, #1
 8002106:	2112      	movs	r1, #18
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff fdd7 	bl	8001cbc <lsm6dsl_read_reg>
 800210e:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8002110:	7a3b      	ldrb	r3, [r7, #8]
 8002112:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002116:	b2db      	uxtb	r3, r3
 8002118:	461a      	mov	r2, r3
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	701a      	strb	r2, [r3, #0]

  return ret;
 800211e:	68fb      	ldr	r3, [r7, #12]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <lsm6dsl_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                     lsm6dsl_input_composite_t val)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8002134:	f107 0208 	add.w	r2, r7, #8
 8002138:	2301      	movs	r3, #1
 800213a:	2117      	movs	r1, #23
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff fdbd 	bl	8001cbc <lsm6dsl_read_reg>
 8002142:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d120      	bne.n	800218c <lsm6dsl_xl_lp2_bandwidth_set+0x64>
  {
    ctrl8_xl.input_composite = ((uint8_t) val & 0x10U) >> 4;
 800214a:	78fb      	ldrb	r3, [r7, #3]
 800214c:	091b      	lsrs	r3, r3, #4
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	b2da      	uxtb	r2, r3
 8002154:	7a3b      	ldrb	r3, [r7, #8]
 8002156:	f362 03c3 	bfi	r3, r2, #3, #1
 800215a:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 800215c:	78fb      	ldrb	r3, [r7, #3]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	b2da      	uxtb	r2, r3
 8002164:	7a3b      	ldrb	r3, [r7, #8]
 8002166:	f362 1346 	bfi	r3, r2, #5, #2
 800216a:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 800216c:	7a3b      	ldrb	r3, [r7, #8]
 800216e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002172:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 8002174:	7a3b      	ldrb	r3, [r7, #8]
 8002176:	f36f 0382 	bfc	r3, #2, #1
 800217a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 800217c:	f107 0208 	add.w	r2, r7, #8
 8002180:	2301      	movs	r3, #1
 8002182:	2117      	movs	r1, #23
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff fdb1 	bl	8001cec <lsm6dsl_write_reg>
 800218a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800218c:	68fb      	ldr	r3, [r7, #12]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <lsm6dsl_gy_band_pass_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_band_pass_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_lpf1_sel_g_t val)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b086      	sub	sp, #24
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	460b      	mov	r3, r1
 80021a0:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_ctrl6_c_t ctrl6_c;
  lsm6dsl_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 80021a2:	f107 0208 	add.w	r2, r7, #8
 80021a6:	2301      	movs	r3, #1
 80021a8:	2116      	movs	r1, #22
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff fd86 	bl	8001cbc <lsm6dsl_read_reg>
 80021b0:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d157      	bne.n	8002268 <lsm6dsl_gy_band_pass_set+0xd2>
  {
    ctrl7_g.hpm_g  = ((uint8_t)val & 0x30U) >> 4;
 80021b8:	78fb      	ldrb	r3, [r7, #3]
 80021ba:	091b      	lsrs	r3, r3, #4
 80021bc:	f003 0303 	and.w	r3, r3, #3
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	7a3b      	ldrb	r3, [r7, #8]
 80021c4:	f362 1305 	bfi	r3, r2, #4, #2
 80021c8:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ((uint8_t)val & 0x80U) >> 7;
 80021ca:	78fb      	ldrb	r3, [r7, #3]
 80021cc:	09db      	lsrs	r3, r3, #7
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	7a3b      	ldrb	r3, [r7, #8]
 80021d8:	f362 1386 	bfi	r3, r2, #6, #1
 80021dc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 80021de:	f107 0208 	add.w	r2, r7, #8
 80021e2:	2301      	movs	r3, #1
 80021e4:	2116      	movs	r1, #22
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff fd80 	bl	8001cec <lsm6dsl_write_reg>
 80021ec:	6178      	str	r0, [r7, #20]

    if (ret == 0)
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d139      	bne.n	8002268 <lsm6dsl_gy_band_pass_set+0xd2>
    {
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 80021f4:	f107 020c 	add.w	r2, r7, #12
 80021f8:	2301      	movs	r3, #1
 80021fa:	2115      	movs	r1, #21
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7ff fd5d 	bl	8001cbc <lsm6dsl_read_reg>
 8002202:	6178      	str	r0, [r7, #20]

      if (ret == 0)
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d12e      	bne.n	8002268 <lsm6dsl_gy_band_pass_set+0xd2>
      {
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	f003 0303 	and.w	r3, r3, #3
 8002210:	b2da      	uxtb	r2, r3
 8002212:	7b3b      	ldrb	r3, [r7, #12]
 8002214:	f362 0301 	bfi	r3, r2, #0, #2
 8002218:	733b      	strb	r3, [r7, #12]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 800221a:	f107 020c 	add.w	r2, r7, #12
 800221e:	2301      	movs	r3, #1
 8002220:	2115      	movs	r1, #21
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7ff fd62 	bl	8001cec <lsm6dsl_write_reg>
 8002228:	6178      	str	r0, [r7, #20]

        if (ret == 0)
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d11b      	bne.n	8002268 <lsm6dsl_gy_band_pass_set+0xd2>
        {
          ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C,
 8002230:	f107 0210 	add.w	r2, r7, #16
 8002234:	2301      	movs	r3, #1
 8002236:	2113      	movs	r1, #19
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff fd3f 	bl	8001cbc <lsm6dsl_read_reg>
 800223e:	6178      	str	r0, [r7, #20]
                                 (uint8_t *)&ctrl4_c, 1);

          if (ret == 0)
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d110      	bne.n	8002268 <lsm6dsl_gy_band_pass_set+0xd2>
          {
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 8002246:	78fb      	ldrb	r3, [r7, #3]
 8002248:	08db      	lsrs	r3, r3, #3
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	b2da      	uxtb	r2, r3
 8002250:	7c3b      	ldrb	r3, [r7, #16]
 8002252:	f362 0341 	bfi	r3, r2, #1, #1
 8002256:	743b      	strb	r3, [r7, #16]
            ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C,
 8002258:	f107 0210 	add.w	r2, r7, #16
 800225c:	2301      	movs	r3, #1
 800225e:	2113      	movs	r1, #19
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff fd43 	bl	8001cec <lsm6dsl_write_reg>
 8002266:	6178      	str	r0, [r7, #20]
        }
      }
    }
  }

  return ret;
 8002268:	697b      	ldr	r3, [r7, #20]
}
 800226a:	4618      	mov	r0, r3
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002278:	b0a6      	sub	sp, #152	; 0x98
 800227a:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800227c:	f001 fa8e 	bl	800379c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002280:	f000 f972 	bl	8002568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002284:	f000 fb78 	bl	8002978 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002288:	f000 f9d8 	bl	800263c <MX_ADC1_Init>
  MX_SPI4_Init();
 800228c:	f000 fa68 	bl	8002760 <MX_SPI4_Init>
  MX_TIM2_Init();
 8002290:	f000 fad2 	bl	8002838 <MX_TIM2_Init>
  MX_SPI5_Init();
 8002294:	f000 fa9a 	bl	80027cc <MX_SPI5_Init>
  MX_FATFS_Init();
 8002298:	f008 f878 	bl	800a38c <MX_FATFS_Init>
  MX_I2C3_Init();
 800229c:	f000 fa20 	bl	80026e0 <MX_I2C3_Init>
  MX_USART6_UART_Init();
 80022a0:	f000 fb40 	bl	8002924 <MX_USART6_UART_Init>
  MX_USB_DEVICE_Init();
 80022a4:	f00c ff7a 	bl	800f19c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // reset LEDs
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 80022a8:	2200      	movs	r2, #0
 80022aa:	2102      	movs	r1, #2
 80022ac:	4895      	ldr	r0, [pc, #596]	; (8002504 <main+0x290>)
 80022ae:	f002 f83b 	bl	8004328 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 80022b2:	2200      	movs	r2, #0
 80022b4:	2104      	movs	r1, #4
 80022b6:	4893      	ldr	r0, [pc, #588]	; (8002504 <main+0x290>)
 80022b8:	f002 f836 	bl	8004328 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 80022bc:	2200      	movs	r2, #0
 80022be:	2108      	movs	r1, #8
 80022c0:	4890      	ldr	r0, [pc, #576]	; (8002504 <main+0x290>)
 80022c2:	f002 f831 	bl	8004328 <HAL_GPIO_WritePin>

  // reset recovery pyro pins
  HAL_GPIO_WritePin(Rcov_Arm_GPIO_Port, Rcov_Arm_Pin, RESET);
 80022c6:	2200      	movs	r2, #0
 80022c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022cc:	488e      	ldr	r0, [pc, #568]	; (8002508 <main+0x294>)
 80022ce:	f002 f82b 	bl	8004328 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Rcov_Gate_Drogue_GPIO_Port, Rcov_Gate_Drogue_Pin, RESET);
 80022d2:	2200      	movs	r2, #0
 80022d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022d8:	488b      	ldr	r0, [pc, #556]	; (8002508 <main+0x294>)
 80022da:	f002 f825 	bl	8004328 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Rcov_Gate_Main_GPIO_Port, Rcov_Gate_Main_Pin, RESET);
 80022de:	2200      	movs	r2, #0
 80022e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022e4:	4888      	ldr	r0, [pc, #544]	; (8002508 <main+0x294>)
 80022e6:	f002 f81f 	bl	8004328 <HAL_GPIO_WritePin>

  // reset prop pyro pins
  HAL_GPIO_WritePin(Prop_Pyro_Arming_GPIO_Port, Prop_Pyro_Arming_Pin, RESET);
 80022ea:	2200      	movs	r2, #0
 80022ec:	2102      	movs	r1, #2
 80022ee:	4886      	ldr	r0, [pc, #536]	; (8002508 <main+0x294>)
 80022f0:	f002 f81a 	bl	8004328 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Prop_Gate_1_GPIO_Port, Prop_Gate_1_Pin, RESET);
 80022f4:	2200      	movs	r2, #0
 80022f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022fa:	4884      	ldr	r0, [pc, #528]	; (800250c <main+0x298>)
 80022fc:	f002 f814 	bl	8004328 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Prop_Gate_2_GPIO_Port, Prop_Gate_2_Pin, RESET);
 8002300:	2200      	movs	r2, #0
 8002302:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002306:	4881      	ldr	r0, [pc, #516]	; (800250c <main+0x298>)
 8002308:	f002 f80e 	bl	8004328 <HAL_GPIO_WritePin>

  // reset 12 V buck converter enable pin (disable converter)
  HAL_GPIO_WritePin(PM_12V_EN_GPIO_Port, PM_12V_EN_Pin, RESET);
 800230c:	2200      	movs	r2, #0
 800230e:	2104      	movs	r1, #4
 8002310:	487f      	ldr	r0, [pc, #508]	; (8002510 <main+0x29c>)
 8002312:	f002 f809 	bl	8004328 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET);
 8002316:	2200      	movs	r2, #0
 8002318:	2180      	movs	r1, #128	; 0x80
 800231a:	487d      	ldr	r0, [pc, #500]	; (8002510 <main+0x29c>)
 800231c:	f002 f804 	bl	8004328 <HAL_GPIO_WritePin>

  // reset payload EN signal
  HAL_GPIO_WritePin(Payload_EN_GPIO_Port, Payload_EN_Pin, RESET);
 8002320:	2200      	movs	r2, #0
 8002322:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002326:	487a      	ldr	r0, [pc, #488]	; (8002510 <main+0x29c>)
 8002328:	f001 fffe 	bl	8004328 <HAL_GPIO_WritePin>

  // set CS pin for thermocouple chip high
  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

  // set power off for VR
  HAL_GPIO_WritePin(VR_CTRL_PWR_GPIO_Port, VR_CTRL_PWR_Pin, RESET);
 800232c:	2200      	movs	r2, #0
 800232e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002332:	4874      	ldr	r0, [pc, #464]	; (8002504 <main+0x290>)
 8002334:	f001 fff8 	bl	8004328 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, RESET);
 8002338:	2200      	movs	r2, #0
 800233a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800233e:	4875      	ldr	r0, [pc, #468]	; (8002514 <main+0x2a0>)
 8002340:	f001 fff2 	bl	8004328 <HAL_GPIO_WritePin>

  dev_ctx_lsm = lsm6dsl_init();
 8002344:	4c74      	ldr	r4, [pc, #464]	; (8002518 <main+0x2a4>)
 8002346:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff f918 	bl	8001580 <lsm6dsl_init>
 8002350:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002354:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002358:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  dev_ctx_lps = lps22hh_init();
 800235c:	4c6f      	ldr	r4, [pc, #444]	; (800251c <main+0x2a8>)
 800235e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fa08 	bl	8001778 <lps22hh_init>
 8002368:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800236c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002370:	e884 0007 	stmia.w	r4, {r0, r1, r2}

#ifdef TEST_ALL_SENSORS_WITH_SD_CARD

//	sd_init("fcdata.txt", "S,PRESSURE_HPA,TEMP_DEG_C,ACCx,ACCy,ACCz,GYRx,GYRy,GYRz,LAT,LONG,E\r\n");
	char filename[13]; // filename will be of form fc000000.txt which is 13 chars in the array (with null termination)
	sd_init_dynamic_filename("FC", "S,PRESSURE_HPA,TEMP_DEG_C,ACCx,ACCy,ACCz,GYRx,GYRy,GYRz,LAT,LONG,E\r\n", filename);
 8002374:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002378:	461a      	mov	r2, r3
 800237a:	4969      	ldr	r1, [pc, #420]	; (8002520 <main+0x2ac>)
 800237c:	4869      	ldr	r0, [pc, #420]	; (8002524 <main+0x2b0>)
 800237e:	f000 fca3 	bl	8002cc8 <sd_init_dynamic_filename>


	while (1)
	{
		// poll data
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8002382:	2201      	movs	r2, #1
 8002384:	2102      	movs	r1, #2
 8002386:	485f      	ldr	r0, [pc, #380]	; (8002504 <main+0x290>)
 8002388:	f001 ffce 	bl	8004328 <HAL_GPIO_WritePin>
		// lsm6dsl data
		get_acceleration(dev_ctx_lsm, acceleration_mg);
 800238c:	4a62      	ldr	r2, [pc, #392]	; (8002518 <main+0x2a4>)
 800238e:	4b66      	ldr	r3, [pc, #408]	; (8002528 <main+0x2b4>)
 8002390:	ca07      	ldmia	r2, {r0, r1, r2}
 8002392:	f7ff f965 	bl	8001660 <get_acceleration>
		get_angvelocity(dev_ctx_lsm, angular_rate_mdps);
 8002396:	4a60      	ldr	r2, [pc, #384]	; (8002518 <main+0x2a4>)
 8002398:	4b64      	ldr	r3, [pc, #400]	; (800252c <main+0x2b8>)
 800239a:	ca07      	ldmia	r2, {r0, r1, r2}
 800239c:	f7ff f9a6 	bl	80016ec <get_angvelocity>

		// lps22hh data
		get_pressure(dev_ctx_lps, &pressure_hPa);
 80023a0:	4a5e      	ldr	r2, [pc, #376]	; (800251c <main+0x2a8>)
 80023a2:	4b63      	ldr	r3, [pc, #396]	; (8002530 <main+0x2bc>)
 80023a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80023a6:	f7ff fa3d 	bl	8001824 <get_pressure>
		get_temperature(dev_ctx_lps, &temperature_degC);
 80023aa:	4a5c      	ldr	r2, [pc, #368]	; (800251c <main+0x2a8>)
 80023ac:	4b61      	ldr	r3, [pc, #388]	; (8002534 <main+0x2c0>)
 80023ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80023b0:	f7ff fa64 	bl	800187c <get_temperature>

		// use beeper for GPS to make sure we know whether coordinates are nonzero
		GPS_Poll(&latitude, &longitude, &time);
 80023b4:	4a60      	ldr	r2, [pc, #384]	; (8002538 <main+0x2c4>)
 80023b6:	4961      	ldr	r1, [pc, #388]	; (800253c <main+0x2c8>)
 80023b8:	4861      	ldr	r0, [pc, #388]	; (8002540 <main+0x2cc>)
 80023ba:	f7fe fe27 	bl	800100c <GPS_Poll>
		GPS_check_nonzero_data(latitude, longitude, &gps_fix_lat, &gps_fix_long);
 80023be:	4b60      	ldr	r3, [pc, #384]	; (8002540 <main+0x2cc>)
 80023c0:	edd3 7a00 	vldr	s15, [r3]
 80023c4:	4b5d      	ldr	r3, [pc, #372]	; (800253c <main+0x2c8>)
 80023c6:	ed93 7a00 	vldr	s14, [r3]
 80023ca:	495e      	ldr	r1, [pc, #376]	; (8002544 <main+0x2d0>)
 80023cc:	485e      	ldr	r0, [pc, #376]	; (8002548 <main+0x2d4>)
 80023ce:	eef0 0a47 	vmov.f32	s1, s14
 80023d2:	eeb0 0a67 	vmov.f32	s0, s15
 80023d6:	f7ff f873 	bl	80014c0 <GPS_check_nonzero_data>

		// make buffer with data and save
		sprintf((char *)msg_buffer, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,E\r\n",
 80023da:	4b55      	ldr	r3, [pc, #340]	; (8002530 <main+0x2bc>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe f8c2 	bl	8000568 <__aeabi_f2d>
 80023e4:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 80023e8:	4b52      	ldr	r3, [pc, #328]	; (8002534 <main+0x2c0>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fe f8bb 	bl	8000568 <__aeabi_f2d>
 80023f2:	e9c7 0108 	strd	r0, r1, [r7, #32]
				pressure_hPa, temperature_degC,
				acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 80023f6:	4b4c      	ldr	r3, [pc, #304]	; (8002528 <main+0x2b4>)
 80023f8:	681b      	ldr	r3, [r3, #0]
		sprintf((char *)msg_buffer, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,E\r\n",
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe f8b4 	bl	8000568 <__aeabi_f2d>
 8002400:	e9c7 0106 	strd	r0, r1, [r7, #24]
				acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 8002404:	4b48      	ldr	r3, [pc, #288]	; (8002528 <main+0x2b4>)
 8002406:	685b      	ldr	r3, [r3, #4]
		sprintf((char *)msg_buffer, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,E\r\n",
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe f8ad 	bl	8000568 <__aeabi_f2d>
 800240e:	e9c7 0104 	strd	r0, r1, [r7, #16]
				acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 8002412:	4b45      	ldr	r3, [pc, #276]	; (8002528 <main+0x2b4>)
 8002414:	689b      	ldr	r3, [r3, #8]
		sprintf((char *)msg_buffer, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,E\r\n",
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe f8a6 	bl	8000568 <__aeabi_f2d>
 800241c:	e9c7 0102 	strd	r0, r1, [r7, #8]
				angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2],
 8002420:	4b42      	ldr	r3, [pc, #264]	; (800252c <main+0x2b8>)
 8002422:	681b      	ldr	r3, [r3, #0]
		sprintf((char *)msg_buffer, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,E\r\n",
 8002424:	4618      	mov	r0, r3
 8002426:	f7fe f89f 	bl	8000568 <__aeabi_f2d>
 800242a:	e9c7 0100 	strd	r0, r1, [r7]
				angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2],
 800242e:	4b3f      	ldr	r3, [pc, #252]	; (800252c <main+0x2b8>)
 8002430:	685b      	ldr	r3, [r3, #4]
		sprintf((char *)msg_buffer, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,E\r\n",
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe f898 	bl	8000568 <__aeabi_f2d>
 8002438:	4682      	mov	sl, r0
 800243a:	468b      	mov	fp, r1
				angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2],
 800243c:	4b3b      	ldr	r3, [pc, #236]	; (800252c <main+0x2b8>)
 800243e:	689b      	ldr	r3, [r3, #8]
		sprintf((char *)msg_buffer, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,E\r\n",
 8002440:	4618      	mov	r0, r3
 8002442:	f7fe f891 	bl	8000568 <__aeabi_f2d>
 8002446:	4680      	mov	r8, r0
 8002448:	4689      	mov	r9, r1
 800244a:	4b3d      	ldr	r3, [pc, #244]	; (8002540 <main+0x2cc>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe f88a 	bl	8000568 <__aeabi_f2d>
 8002454:	4604      	mov	r4, r0
 8002456:	460d      	mov	r5, r1
 8002458:	4b38      	ldr	r3, [pc, #224]	; (800253c <main+0x2c8>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f7fe f883 	bl	8000568 <__aeabi_f2d>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800246a:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 800246e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8002472:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8002476:	ed97 7b00 	vldr	d7, [r7]
 800247a:	ed8d 7b08 	vstr	d7, [sp, #32]
 800247e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002482:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002486:	ed97 7b04 	vldr	d7, [r7, #16]
 800248a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800248e:	ed97 7b06 	vldr	d7, [r7, #24]
 8002492:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002496:	ed97 7b08 	vldr	d7, [r7, #32]
 800249a:	ed8d 7b00 	vstr	d7, [sp]
 800249e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024a2:	492a      	ldr	r1, [pc, #168]	; (800254c <main+0x2d8>)
 80024a4:	482a      	ldr	r0, [pc, #168]	; (8002550 <main+0x2dc>)
 80024a6:	f00e fa2d 	bl	8010904 <siprintf>
				latitude, longitude);

		fres = sd_open_file(filename);
 80024aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 fc88 	bl	8002dc4 <sd_open_file>
 80024b4:	4603      	mov	r3, r0
 80024b6:	461a      	mov	r2, r3
 80024b8:	4b26      	ldr	r3, [pc, #152]	; (8002554 <main+0x2e0>)
 80024ba:	701a      	strb	r2, [r3, #0]
		if (fres == FR_OK) {
 80024bc:	4b25      	ldr	r3, [pc, #148]	; (8002554 <main+0x2e0>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d103      	bne.n	80024cc <main+0x258>
			myprintf("I was able to open filename.txt for writing\r\n");
 80024c4:	4824      	ldr	r0, [pc, #144]	; (8002558 <main+0x2e4>)
 80024c6:	f000 fbe7 	bl	8002c98 <myprintf>
 80024ca:	e005      	b.n	80024d8 <main+0x264>
		} else {
			myprintf("f_open error (%i)\r\n", fres);
 80024cc:	4b21      	ldr	r3, [pc, #132]	; (8002554 <main+0x2e0>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	4619      	mov	r1, r3
 80024d2:	4822      	ldr	r0, [pc, #136]	; (800255c <main+0x2e8>)
 80024d4:	f000 fbe0 	bl	8002c98 <myprintf>
		}
		sd_write(&fil, msg_buffer);
 80024d8:	491d      	ldr	r1, [pc, #116]	; (8002550 <main+0x2dc>)
 80024da:	4821      	ldr	r0, [pc, #132]	; (8002560 <main+0x2ec>)
 80024dc:	f000 fc8a 	bl	8002df4 <sd_write>

#ifdef OUTPUT_USB_WITH_TEST
		CDC_Transmit_FS((uint8_t *)msg_buffer, strlen((char *)msg_buffer));
#endif

		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 80024e0:	2200      	movs	r2, #0
 80024e2:	2102      	movs	r1, #2
 80024e4:	4807      	ldr	r0, [pc, #28]	; (8002504 <main+0x290>)
 80024e6:	f001 ff1f 	bl	8004328 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80024ea:	2064      	movs	r0, #100	; 0x64
 80024ec:	f001 f9c8 	bl	8003880 <HAL_Delay>

		// close file
		f_close(&fil);
 80024f0:	481b      	ldr	r0, [pc, #108]	; (8002560 <main+0x2ec>)
 80024f2:	f00c faee 	bl	800ead2 <f_close>

		if (start_ejection) // stop when button pressed
 80024f6:	4b1b      	ldr	r3, [pc, #108]	; (8002564 <main+0x2f0>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f43f af40 	beq.w	8002382 <main+0x10e>
	HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, SET);
	HAL_Delay(1000);
	HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, RESET);
#endif

	while (1); // stop here
 8002502:	e7fe      	b.n	8002502 <main+0x28e>
 8002504:	40020800 	.word	0x40020800
 8002508:	40021800 	.word	0x40021800
 800250c:	40021400 	.word	0x40021400
 8002510:	40021000 	.word	0x40021000
 8002514:	40020000 	.word	0x40020000
 8002518:	20001004 	.word	0x20001004
 800251c:	20001010 	.word	0x20001010
 8002520:	08014e2c 	.word	0x08014e2c
 8002524:	08014e74 	.word	0x08014e74
 8002528:	200003a8 	.word	0x200003a8
 800252c:	200003b4 	.word	0x200003b4
 8002530:	200003c0 	.word	0x200003c0
 8002534:	200003c4 	.word	0x200003c4
 8002538:	20000f70 	.word	0x20000f70
 800253c:	20000f6c 	.word	0x20000f6c
 8002540:	20000fb8 	.word	0x20000fb8
 8002544:	200003c9 	.word	0x200003c9
 8002548:	200003c8 	.word	0x200003c8
 800254c:	08014e78 	.word	0x08014e78
 8002550:	200003cc 	.word	0x200003cc
 8002554:	2000101c 	.word	0x2000101c
 8002558:	08014ec4 	.word	0x08014ec4
 800255c:	08014ef4 	.word	0x08014ef4
 8002560:	20001020 	.word	0x20001020
 8002564:	200003a6 	.word	0x200003a6

08002568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b094      	sub	sp, #80	; 0x50
 800256c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800256e:	f107 0320 	add.w	r3, r7, #32
 8002572:	2230      	movs	r2, #48	; 0x30
 8002574:	2100      	movs	r1, #0
 8002576:	4618      	mov	r0, r3
 8002578:	f00d fb3c 	bl	800fbf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800257c:	f107 030c 	add.w	r3, r7, #12
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800258c:	2300      	movs	r3, #0
 800258e:	60bb      	str	r3, [r7, #8]
 8002590:	4b28      	ldr	r3, [pc, #160]	; (8002634 <SystemClock_Config+0xcc>)
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	4a27      	ldr	r2, [pc, #156]	; (8002634 <SystemClock_Config+0xcc>)
 8002596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800259a:	6413      	str	r3, [r2, #64]	; 0x40
 800259c:	4b25      	ldr	r3, [pc, #148]	; (8002634 <SystemClock_Config+0xcc>)
 800259e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80025a8:	2300      	movs	r3, #0
 80025aa:	607b      	str	r3, [r7, #4]
 80025ac:	4b22      	ldr	r3, [pc, #136]	; (8002638 <SystemClock_Config+0xd0>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80025b4:	4a20      	ldr	r2, [pc, #128]	; (8002638 <SystemClock_Config+0xd0>)
 80025b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025ba:	6013      	str	r3, [r2, #0]
 80025bc:	4b1e      	ldr	r3, [pc, #120]	; (8002638 <SystemClock_Config+0xd0>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025c4:	607b      	str	r3, [r7, #4]
 80025c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025c8:	2301      	movs	r3, #1
 80025ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025d2:	2302      	movs	r3, #2
 80025d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80025dc:	2308      	movs	r3, #8
 80025de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80025e0:	2348      	movs	r3, #72	; 0x48
 80025e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025e4:	2302      	movs	r3, #2
 80025e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80025e8:	2303      	movs	r3, #3
 80025ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025ec:	f107 0320 	add.w	r3, r7, #32
 80025f0:	4618      	mov	r0, r3
 80025f2:	f004 f889 	bl	8006708 <HAL_RCC_OscConfig>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80025fc:	f000 fb30 	bl	8002c60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002600:	230f      	movs	r3, #15
 8002602:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002604:	2302      	movs	r3, #2
 8002606:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002608:	2300      	movs	r3, #0
 800260a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800260c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002610:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002612:	2300      	movs	r3, #0
 8002614:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002616:	f107 030c 	add.w	r3, r7, #12
 800261a:	2102      	movs	r1, #2
 800261c:	4618      	mov	r0, r3
 800261e:	f004 faeb 	bl	8006bf8 <HAL_RCC_ClockConfig>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002628:	f000 fb1a 	bl	8002c60 <Error_Handler>
  }
}
 800262c:	bf00      	nop
 800262e:	3750      	adds	r7, #80	; 0x50
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40023800 	.word	0x40023800
 8002638:	40007000 	.word	0x40007000

0800263c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002642:	463b      	mov	r3, r7
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800264e:	4b21      	ldr	r3, [pc, #132]	; (80026d4 <MX_ADC1_Init+0x98>)
 8002650:	4a21      	ldr	r2, [pc, #132]	; (80026d8 <MX_ADC1_Init+0x9c>)
 8002652:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002654:	4b1f      	ldr	r3, [pc, #124]	; (80026d4 <MX_ADC1_Init+0x98>)
 8002656:	2200      	movs	r2, #0
 8002658:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800265a:	4b1e      	ldr	r3, [pc, #120]	; (80026d4 <MX_ADC1_Init+0x98>)
 800265c:	2200      	movs	r2, #0
 800265e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002660:	4b1c      	ldr	r3, [pc, #112]	; (80026d4 <MX_ADC1_Init+0x98>)
 8002662:	2200      	movs	r2, #0
 8002664:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002666:	4b1b      	ldr	r3, [pc, #108]	; (80026d4 <MX_ADC1_Init+0x98>)
 8002668:	2200      	movs	r2, #0
 800266a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800266c:	4b19      	ldr	r3, [pc, #100]	; (80026d4 <MX_ADC1_Init+0x98>)
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002674:	4b17      	ldr	r3, [pc, #92]	; (80026d4 <MX_ADC1_Init+0x98>)
 8002676:	2200      	movs	r2, #0
 8002678:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800267a:	4b16      	ldr	r3, [pc, #88]	; (80026d4 <MX_ADC1_Init+0x98>)
 800267c:	4a17      	ldr	r2, [pc, #92]	; (80026dc <MX_ADC1_Init+0xa0>)
 800267e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002680:	4b14      	ldr	r3, [pc, #80]	; (80026d4 <MX_ADC1_Init+0x98>)
 8002682:	2200      	movs	r2, #0
 8002684:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002686:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <MX_ADC1_Init+0x98>)
 8002688:	2201      	movs	r2, #1
 800268a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800268c:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <MX_ADC1_Init+0x98>)
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002694:	4b0f      	ldr	r3, [pc, #60]	; (80026d4 <MX_ADC1_Init+0x98>)
 8002696:	2201      	movs	r2, #1
 8002698:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800269a:	480e      	ldr	r0, [pc, #56]	; (80026d4 <MX_ADC1_Init+0x98>)
 800269c:	f001 f914 	bl	80038c8 <HAL_ADC_Init>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80026a6:	f000 fadb 	bl	8002c60 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80026aa:	2306      	movs	r3, #6
 80026ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80026ae:	2301      	movs	r3, #1
 80026b0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80026b2:	2307      	movs	r3, #7
 80026b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026b6:	463b      	mov	r3, r7
 80026b8:	4619      	mov	r1, r3
 80026ba:	4806      	ldr	r0, [pc, #24]	; (80026d4 <MX_ADC1_Init+0x98>)
 80026bc:	f001 f948 	bl	8003950 <HAL_ADC_ConfigChannel>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80026c6:	f000 facb 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80026ca:	bf00      	nop
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20000f24 	.word	0x20000f24
 80026d8:	40012000 	.word	0x40012000
 80026dc:	0f000001 	.word	0x0f000001

080026e0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80026e4:	4b1b      	ldr	r3, [pc, #108]	; (8002754 <MX_I2C3_Init+0x74>)
 80026e6:	4a1c      	ldr	r2, [pc, #112]	; (8002758 <MX_I2C3_Init+0x78>)
 80026e8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80026ea:	4b1a      	ldr	r3, [pc, #104]	; (8002754 <MX_I2C3_Init+0x74>)
 80026ec:	4a1b      	ldr	r2, [pc, #108]	; (800275c <MX_I2C3_Init+0x7c>)
 80026ee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026f0:	4b18      	ldr	r3, [pc, #96]	; (8002754 <MX_I2C3_Init+0x74>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80026f6:	4b17      	ldr	r3, [pc, #92]	; (8002754 <MX_I2C3_Init+0x74>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026fc:	4b15      	ldr	r3, [pc, #84]	; (8002754 <MX_I2C3_Init+0x74>)
 80026fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002702:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002704:	4b13      	ldr	r3, [pc, #76]	; (8002754 <MX_I2C3_Init+0x74>)
 8002706:	2200      	movs	r2, #0
 8002708:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800270a:	4b12      	ldr	r3, [pc, #72]	; (8002754 <MX_I2C3_Init+0x74>)
 800270c:	2200      	movs	r2, #0
 800270e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002710:	4b10      	ldr	r3, [pc, #64]	; (8002754 <MX_I2C3_Init+0x74>)
 8002712:	2200      	movs	r2, #0
 8002714:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002716:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <MX_I2C3_Init+0x74>)
 8002718:	2200      	movs	r2, #0
 800271a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800271c:	480d      	ldr	r0, [pc, #52]	; (8002754 <MX_I2C3_Init+0x74>)
 800271e:	f001 fe35 	bl	800438c <HAL_I2C_Init>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002728:	f000 fa9a 	bl	8002c60 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800272c:	2100      	movs	r1, #0
 800272e:	4809      	ldr	r0, [pc, #36]	; (8002754 <MX_I2C3_Init+0x74>)
 8002730:	f002 fdeb 	bl	800530a <HAL_I2CEx_ConfigAnalogFilter>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800273a:	f000 fa91 	bl	8002c60 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800273e:	2100      	movs	r1, #0
 8002740:	4804      	ldr	r0, [pc, #16]	; (8002754 <MX_I2C3_Init+0x74>)
 8002742:	f002 fe1e 	bl	8005382 <HAL_I2CEx_ConfigDigitalFilter>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800274c:	f000 fa88 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002750:	bf00      	nop
 8002752:	bd80      	pop	{r7, pc}
 8002754:	20000c48 	.word	0x20000c48
 8002758:	40005c00 	.word	0x40005c00
 800275c:	000186a0 	.word	0x000186a0

08002760 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8002764:	4b17      	ldr	r3, [pc, #92]	; (80027c4 <MX_SPI4_Init+0x64>)
 8002766:	4a18      	ldr	r2, [pc, #96]	; (80027c8 <MX_SPI4_Init+0x68>)
 8002768:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800276a:	4b16      	ldr	r3, [pc, #88]	; (80027c4 <MX_SPI4_Init+0x64>)
 800276c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002770:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002772:	4b14      	ldr	r3, [pc, #80]	; (80027c4 <MX_SPI4_Init+0x64>)
 8002774:	2200      	movs	r2, #0
 8002776:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002778:	4b12      	ldr	r3, [pc, #72]	; (80027c4 <MX_SPI4_Init+0x64>)
 800277a:	2200      	movs	r2, #0
 800277c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800277e:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <MX_SPI4_Init+0x64>)
 8002780:	2200      	movs	r2, #0
 8002782:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002784:	4b0f      	ldr	r3, [pc, #60]	; (80027c4 <MX_SPI4_Init+0x64>)
 8002786:	2200      	movs	r2, #0
 8002788:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800278a:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <MX_SPI4_Init+0x64>)
 800278c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002790:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002792:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <MX_SPI4_Init+0x64>)
 8002794:	2230      	movs	r2, #48	; 0x30
 8002796:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002798:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <MX_SPI4_Init+0x64>)
 800279a:	2200      	movs	r2, #0
 800279c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800279e:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <MX_SPI4_Init+0x64>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027a4:	4b07      	ldr	r3, [pc, #28]	; (80027c4 <MX_SPI4_Init+0x64>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 80027aa:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <MX_SPI4_Init+0x64>)
 80027ac:	220a      	movs	r2, #10
 80027ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80027b0:	4804      	ldr	r0, [pc, #16]	; (80027c4 <MX_SPI4_Init+0x64>)
 80027b2:	f004 fc1b 	bl	8006fec <HAL_SPI_Init>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 80027bc:	f000 fa50 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80027c0:	bf00      	nop
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20000b34 	.word	0x20000b34
 80027c8:	40013400 	.word	0x40013400

080027cc <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80027d0:	4b17      	ldr	r3, [pc, #92]	; (8002830 <MX_SPI5_Init+0x64>)
 80027d2:	4a18      	ldr	r2, [pc, #96]	; (8002834 <MX_SPI5_Init+0x68>)
 80027d4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80027d6:	4b16      	ldr	r3, [pc, #88]	; (8002830 <MX_SPI5_Init+0x64>)
 80027d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027dc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80027de:	4b14      	ldr	r3, [pc, #80]	; (8002830 <MX_SPI5_Init+0x64>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80027e4:	4b12      	ldr	r3, [pc, #72]	; (8002830 <MX_SPI5_Init+0x64>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027ea:	4b11      	ldr	r3, [pc, #68]	; (8002830 <MX_SPI5_Init+0x64>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027f0:	4b0f      	ldr	r3, [pc, #60]	; (8002830 <MX_SPI5_Init+0x64>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80027f6:	4b0e      	ldr	r3, [pc, #56]	; (8002830 <MX_SPI5_Init+0x64>)
 80027f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027fc:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80027fe:	4b0c      	ldr	r3, [pc, #48]	; (8002830 <MX_SPI5_Init+0x64>)
 8002800:	2238      	movs	r2, #56	; 0x38
 8002802:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002804:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <MX_SPI5_Init+0x64>)
 8002806:	2200      	movs	r2, #0
 8002808:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800280a:	4b09      	ldr	r3, [pc, #36]	; (8002830 <MX_SPI5_Init+0x64>)
 800280c:	2200      	movs	r2, #0
 800280e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002810:	4b07      	ldr	r3, [pc, #28]	; (8002830 <MX_SPI5_Init+0x64>)
 8002812:	2200      	movs	r2, #0
 8002814:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002816:	4b06      	ldr	r3, [pc, #24]	; (8002830 <MX_SPI5_Init+0x64>)
 8002818:	220a      	movs	r2, #10
 800281a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800281c:	4804      	ldr	r0, [pc, #16]	; (8002830 <MX_SPI5_Init+0x64>)
 800281e:	f004 fbe5 	bl	8006fec <HAL_SPI_Init>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002828:	f000 fa1a 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800282c:	bf00      	nop
 800282e:	bd80      	pop	{r7, pc}
 8002830:	20000c9c 	.word	0x20000c9c
 8002834:	40015000 	.word	0x40015000

08002838 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08e      	sub	sp, #56	; 0x38
 800283c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800283e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	605a      	str	r2, [r3, #4]
 8002848:	609a      	str	r2, [r3, #8]
 800284a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800284c:	f107 0320 	add.w	r3, r7, #32
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002856:	1d3b      	adds	r3, r7, #4
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	60da      	str	r2, [r3, #12]
 8002862:	611a      	str	r2, [r3, #16]
 8002864:	615a      	str	r2, [r3, #20]
 8002866:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002868:	4b2d      	ldr	r3, [pc, #180]	; (8002920 <MX_TIM2_Init+0xe8>)
 800286a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800286e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50;
 8002870:	4b2b      	ldr	r3, [pc, #172]	; (8002920 <MX_TIM2_Init+0xe8>)
 8002872:	2232      	movs	r2, #50	; 0x32
 8002874:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002876:	4b2a      	ldr	r3, [pc, #168]	; (8002920 <MX_TIM2_Init+0xe8>)
 8002878:	2200      	movs	r2, #0
 800287a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800287c:	4b28      	ldr	r3, [pc, #160]	; (8002920 <MX_TIM2_Init+0xe8>)
 800287e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002882:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002884:	4b26      	ldr	r3, [pc, #152]	; (8002920 <MX_TIM2_Init+0xe8>)
 8002886:	2200      	movs	r2, #0
 8002888:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800288a:	4b25      	ldr	r3, [pc, #148]	; (8002920 <MX_TIM2_Init+0xe8>)
 800288c:	2200      	movs	r2, #0
 800288e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002890:	4823      	ldr	r0, [pc, #140]	; (8002920 <MX_TIM2_Init+0xe8>)
 8002892:	f004 fea1 	bl	80075d8 <HAL_TIM_Base_Init>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800289c:	f000 f9e0 	bl	8002c60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028a4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028aa:	4619      	mov	r1, r3
 80028ac:	481c      	ldr	r0, [pc, #112]	; (8002920 <MX_TIM2_Init+0xe8>)
 80028ae:	f005 fa3d 	bl	8007d2c <HAL_TIM_ConfigClockSource>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80028b8:	f000 f9d2 	bl	8002c60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80028bc:	4818      	ldr	r0, [pc, #96]	; (8002920 <MX_TIM2_Init+0xe8>)
 80028be:	f004 feda 	bl	8007676 <HAL_TIM_PWM_Init>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80028c8:	f000 f9ca 	bl	8002c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80028cc:	2320      	movs	r3, #32
 80028ce:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028d0:	2300      	movs	r3, #0
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028d4:	f107 0320 	add.w	r3, r7, #32
 80028d8:	4619      	mov	r1, r3
 80028da:	4811      	ldr	r0, [pc, #68]	; (8002920 <MX_TIM2_Init+0xe8>)
 80028dc:	f005 fe26 	bl	800852c <HAL_TIMEx_MasterConfigSynchronization>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80028e6:	f000 f9bb 	bl	8002c60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028ea:	2360      	movs	r3, #96	; 0x60
 80028ec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 80028ee:	2364      	movs	r3, #100	; 0x64
 80028f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80028fa:	1d3b      	adds	r3, r7, #4
 80028fc:	2208      	movs	r2, #8
 80028fe:	4619      	mov	r1, r3
 8002900:	4807      	ldr	r0, [pc, #28]	; (8002920 <MX_TIM2_Init+0xe8>)
 8002902:	f005 f951 	bl	8007ba8 <HAL_TIM_PWM_ConfigChannel>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800290c:	f000 f9a8 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002910:	4803      	ldr	r0, [pc, #12]	; (8002920 <MX_TIM2_Init+0xe8>)
 8002912:	f000 fd7b 	bl	800340c <HAL_TIM_MspPostInit>

}
 8002916:	bf00      	nop
 8002918:	3738      	adds	r7, #56	; 0x38
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20000fbc 	.word	0x20000fbc

08002924 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002928:	4b11      	ldr	r3, [pc, #68]	; (8002970 <MX_USART6_UART_Init+0x4c>)
 800292a:	4a12      	ldr	r2, [pc, #72]	; (8002974 <MX_USART6_UART_Init+0x50>)
 800292c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 800292e:	4b10      	ldr	r3, [pc, #64]	; (8002970 <MX_USART6_UART_Init+0x4c>)
 8002930:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002934:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002936:	4b0e      	ldr	r3, [pc, #56]	; (8002970 <MX_USART6_UART_Init+0x4c>)
 8002938:	2200      	movs	r2, #0
 800293a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800293c:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <MX_USART6_UART_Init+0x4c>)
 800293e:	2200      	movs	r2, #0
 8002940:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002942:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <MX_USART6_UART_Init+0x4c>)
 8002944:	2200      	movs	r2, #0
 8002946:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002948:	4b09      	ldr	r3, [pc, #36]	; (8002970 <MX_USART6_UART_Init+0x4c>)
 800294a:	220c      	movs	r2, #12
 800294c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800294e:	4b08      	ldr	r3, [pc, #32]	; (8002970 <MX_USART6_UART_Init+0x4c>)
 8002950:	2200      	movs	r2, #0
 8002952:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002954:	4b06      	ldr	r3, [pc, #24]	; (8002970 <MX_USART6_UART_Init+0x4c>)
 8002956:	2200      	movs	r2, #0
 8002958:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800295a:	4805      	ldr	r0, [pc, #20]	; (8002970 <MX_USART6_UART_Init+0x4c>)
 800295c:	f005 fe76 	bl	800864c <HAL_UART_Init>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002966:	f000 f97b 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800296a:	bf00      	nop
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20000f74 	.word	0x20000f74
 8002974:	40011400 	.word	0x40011400

08002978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b08c      	sub	sp, #48	; 0x30
 800297c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297e:	f107 031c 	add.w	r3, r7, #28
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	605a      	str	r2, [r3, #4]
 8002988:	609a      	str	r2, [r3, #8]
 800298a:	60da      	str	r2, [r3, #12]
 800298c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	61bb      	str	r3, [r7, #24]
 8002992:	4b8b      	ldr	r3, [pc, #556]	; (8002bc0 <MX_GPIO_Init+0x248>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	4a8a      	ldr	r2, [pc, #552]	; (8002bc0 <MX_GPIO_Init+0x248>)
 8002998:	f043 0310 	orr.w	r3, r3, #16
 800299c:	6313      	str	r3, [r2, #48]	; 0x30
 800299e:	4b88      	ldr	r3, [pc, #544]	; (8002bc0 <MX_GPIO_Init+0x248>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	f003 0310 	and.w	r3, r3, #16
 80029a6:	61bb      	str	r3, [r7, #24]
 80029a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	4b84      	ldr	r3, [pc, #528]	; (8002bc0 <MX_GPIO_Init+0x248>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	4a83      	ldr	r2, [pc, #524]	; (8002bc0 <MX_GPIO_Init+0x248>)
 80029b4:	f043 0304 	orr.w	r3, r3, #4
 80029b8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ba:	4b81      	ldr	r3, [pc, #516]	; (8002bc0 <MX_GPIO_Init+0x248>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	613b      	str	r3, [r7, #16]
 80029ca:	4b7d      	ldr	r3, [pc, #500]	; (8002bc0 <MX_GPIO_Init+0x248>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	4a7c      	ldr	r2, [pc, #496]	; (8002bc0 <MX_GPIO_Init+0x248>)
 80029d0:	f043 0320 	orr.w	r3, r3, #32
 80029d4:	6313      	str	r3, [r2, #48]	; 0x30
 80029d6:	4b7a      	ldr	r3, [pc, #488]	; (8002bc0 <MX_GPIO_Init+0x248>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	f003 0320 	and.w	r3, r3, #32
 80029de:	613b      	str	r3, [r7, #16]
 80029e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	4b76      	ldr	r3, [pc, #472]	; (8002bc0 <MX_GPIO_Init+0x248>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	4a75      	ldr	r2, [pc, #468]	; (8002bc0 <MX_GPIO_Init+0x248>)
 80029ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029f0:	6313      	str	r3, [r2, #48]	; 0x30
 80029f2:	4b73      	ldr	r3, [pc, #460]	; (8002bc0 <MX_GPIO_Init+0x248>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	4b6f      	ldr	r3, [pc, #444]	; (8002bc0 <MX_GPIO_Init+0x248>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	4a6e      	ldr	r2, [pc, #440]	; (8002bc0 <MX_GPIO_Init+0x248>)
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0e:	4b6c      	ldr	r3, [pc, #432]	; (8002bc0 <MX_GPIO_Init+0x248>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	60bb      	str	r3, [r7, #8]
 8002a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	607b      	str	r3, [r7, #4]
 8002a1e:	4b68      	ldr	r3, [pc, #416]	; (8002bc0 <MX_GPIO_Init+0x248>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	4a67      	ldr	r2, [pc, #412]	; (8002bc0 <MX_GPIO_Init+0x248>)
 8002a24:	f043 0302 	orr.w	r3, r3, #2
 8002a28:	6313      	str	r3, [r2, #48]	; 0x30
 8002a2a:	4b65      	ldr	r3, [pc, #404]	; (8002bc0 <MX_GPIO_Init+0x248>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	607b      	str	r3, [r7, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	603b      	str	r3, [r7, #0]
 8002a3a:	4b61      	ldr	r3, [pc, #388]	; (8002bc0 <MX_GPIO_Init+0x248>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	4a60      	ldr	r2, [pc, #384]	; (8002bc0 <MX_GPIO_Init+0x248>)
 8002a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a44:	6313      	str	r3, [r2, #48]	; 0x30
 8002a46:	4b5e      	ldr	r3, [pc, #376]	; (8002bc0 <MX_GPIO_Init+0x248>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4e:	603b      	str	r3, [r7, #0]
 8002a50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PM_12V_EN_Pin|Vent_Valve_EN_Pin|Payload_EN_Pin|TH_CS_1_Pin
 8002a52:	2200      	movs	r2, #0
 8002a54:	f640 6184 	movw	r1, #3716	; 0xe84
 8002a58:	485a      	ldr	r0, [pc, #360]	; (8002bc4 <MX_GPIO_Init+0x24c>)
 8002a5a:	f001 fc65 	bl	8004328 <HAL_GPIO_WritePin>
                          |TH_CS_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|Prop_Gate_2_Pin|Prop_Gate_1_Pin, GPIO_PIN_RESET);
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8002a64:	4858      	ldr	r0, [pc, #352]	; (8002bc8 <MX_GPIO_Init+0x250>)
 8002a66:	f001 fc5f 	bl	8004328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin|VR_CTRL_PWR_Pin, GPIO_PIN_RESET);
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f240 410e 	movw	r1, #1038	; 0x40e
 8002a70:	4856      	ldr	r0, [pc, #344]	; (8002bcc <MX_GPIO_Init+0x254>)
 8002a72:	f001 fc59 	bl	8004328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Prop_Pyro_Arming_Pin|Rcov_Gate_Main_Pin|Rcov_Gate_Drogue_Pin|Rcov_Arm_Pin, GPIO_PIN_RESET);
 8002a76:	2200      	movs	r2, #0
 8002a78:	f645 0102 	movw	r1, #22530	; 0x5802
 8002a7c:	4854      	ldr	r0, [pc, #336]	; (8002bd0 <MX_GPIO_Init+0x258>)
 8002a7e:	f001 fc53 	bl	8004328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, GPIO_PIN_RESET);
 8002a82:	2200      	movs	r2, #0
 8002a84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a88:	4852      	ldr	r0, [pc, #328]	; (8002bd4 <MX_GPIO_Init+0x25c>)
 8002a8a:	f001 fc4d 	bl	8004328 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PM_12V_EN_Pin Vent_Valve_EN_Pin Payload_EN_Pin TH_CS_1_Pin
                           TH_CS_2_Pin */
  GPIO_InitStruct.Pin = PM_12V_EN_Pin|Vent_Valve_EN_Pin|Payload_EN_Pin|TH_CS_1_Pin
 8002a8e:	f640 6384 	movw	r3, #3716	; 0xe84
 8002a92:	61fb      	str	r3, [r7, #28]
                          |TH_CS_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a94:	2301      	movs	r3, #1
 8002a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002aa0:	f107 031c 	add.w	r3, r7, #28
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4847      	ldr	r0, [pc, #284]	; (8002bc4 <MX_GPIO_Init+0x24c>)
 8002aa8:	f001 fa92 	bl	8003fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8002aac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aba:	2300      	movs	r3, #0
 8002abc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8002abe:	f107 031c 	add.w	r3, r7, #28
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4840      	ldr	r0, [pc, #256]	; (8002bc8 <MX_GPIO_Init+0x250>)
 8002ac6:	f001 fa83 	bl	8003fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8002aca:	2301      	movs	r3, #1
 8002acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ace:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002ad2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8002ad8:	f107 031c 	add.w	r3, r7, #28
 8002adc:	4619      	mov	r1, r3
 8002ade:	483b      	ldr	r0, [pc, #236]	; (8002bcc <MX_GPIO_Init+0x254>)
 8002ae0:	f001 fa76 	bl	8003fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin VR_CTRL_PWR_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|VR_CTRL_PWR_Pin;
 8002ae4:	f240 430e 	movw	r3, #1038	; 0x40e
 8002ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aea:	2301      	movs	r3, #1
 8002aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af2:	2300      	movs	r3, #0
 8002af4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002af6:	f107 031c 	add.w	r3, r7, #28
 8002afa:	4619      	mov	r1, r3
 8002afc:	4833      	ldr	r0, [pc, #204]	; (8002bcc <MX_GPIO_Init+0x254>)
 8002afe:	f001 fa67 	bl	8003fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Vent_Valve_FB_Pin */
  GPIO_InitStruct.Pin = Vent_Valve_FB_Pin;
 8002b02:	2302      	movs	r3, #2
 8002b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b06:	2300      	movs	r3, #0
 8002b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Vent_Valve_FB_GPIO_Port, &GPIO_InitStruct);
 8002b0e:	f107 031c 	add.w	r3, r7, #28
 8002b12:	4619      	mov	r1, r3
 8002b14:	4830      	ldr	r0, [pc, #192]	; (8002bd8 <MX_GPIO_Init+0x260>)
 8002b16:	f001 fa5b 	bl	8003fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Prop_Cont_2_Pin */
  GPIO_InitStruct.Pin = Prop_Cont_2_Pin;
 8002b1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b20:	2300      	movs	r3, #0
 8002b22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Prop_Cont_2_GPIO_Port, &GPIO_InitStruct);
 8002b28:	f107 031c 	add.w	r3, r7, #28
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4826      	ldr	r0, [pc, #152]	; (8002bc8 <MX_GPIO_Init+0x250>)
 8002b30:	f001 fa4e 	bl	8003fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Gate_2_Pin Prop_Gate_1_Pin */
  GPIO_InitStruct.Pin = Prop_Gate_2_Pin|Prop_Gate_1_Pin;
 8002b34:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b42:	2300      	movs	r3, #0
 8002b44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b46:	f107 031c 	add.w	r3, r7, #28
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	481e      	ldr	r0, [pc, #120]	; (8002bc8 <MX_GPIO_Init+0x250>)
 8002b4e:	f001 fa3f 	bl	8003fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Cont_1_Pin Rcov_Cont_Main_Pin Rcov_Cont_Drogue_Pin */
  GPIO_InitStruct.Pin = Prop_Cont_1_Pin|Rcov_Cont_Main_Pin|Rcov_Cont_Drogue_Pin;
 8002b52:	f242 4301 	movw	r3, #9217	; 0x2401
 8002b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b60:	f107 031c 	add.w	r3, r7, #28
 8002b64:	4619      	mov	r1, r3
 8002b66:	481a      	ldr	r0, [pc, #104]	; (8002bd0 <MX_GPIO_Init+0x258>)
 8002b68:	f001 fa32 	bl	8003fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Pyro_Arming_Pin Rcov_Gate_Main_Pin Rcov_Gate_Drogue_Pin Rcov_Arm_Pin */
  GPIO_InitStruct.Pin = Prop_Pyro_Arming_Pin|Rcov_Gate_Main_Pin|Rcov_Gate_Drogue_Pin|Rcov_Arm_Pin;
 8002b6c:	f645 0302 	movw	r3, #22530	; 0x5802
 8002b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b72:	2301      	movs	r3, #1
 8002b74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b7e:	f107 031c 	add.w	r3, r7, #28
 8002b82:	4619      	mov	r1, r3
 8002b84:	4812      	ldr	r0, [pc, #72]	; (8002bd0 <MX_GPIO_Init+0x258>)
 8002b86:	f001 fa23 	bl	8003fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VR_CTRL_REC_Pin */
  GPIO_InitStruct.Pin = VR_CTRL_REC_Pin;
 8002b8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b90:	2301      	movs	r3, #1
 8002b92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(VR_CTRL_REC_GPIO_Port, &GPIO_InitStruct);
 8002b9c:	f107 031c 	add.w	r3, r7, #28
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	480c      	ldr	r0, [pc, #48]	; (8002bd4 <MX_GPIO_Init+0x25c>)
 8002ba4:	f001 fa14 	bl	8003fd0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002ba8:	2200      	movs	r2, #0
 8002baa:	2100      	movs	r1, #0
 8002bac:	2006      	movs	r0, #6
 8002bae:	f001 f9d8 	bl	8003f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002bb2:	2006      	movs	r0, #6
 8002bb4:	f001 f9f1 	bl	8003f9a <HAL_NVIC_EnableIRQ>

}
 8002bb8:	bf00      	nop
 8002bba:	3730      	adds	r7, #48	; 0x30
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	40021400 	.word	0x40021400
 8002bcc:	40020800 	.word	0x40020800
 8002bd0:	40021800 	.word	0x40021800
 8002bd4:	40020000 	.word	0x40020000
 8002bd8:	40020400 	.word	0x40020400

08002bdc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Button_Pin)
 8002be6:	88fb      	ldrh	r3, [r7, #6]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d102      	bne.n	8002bf2 <HAL_GPIO_EXTI_Callback+0x16>
	{
		start_ejection = 1;
 8002bec:	4b04      	ldr	r3, [pc, #16]	; (8002c00 <HAL_GPIO_EXTI_Callback+0x24>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	701a      	strb	r2, [r3, #0]
	}
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	200003a6 	.word	0x200003a6

08002c04 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
//		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
//		HAL_GPIO_TogglePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin);
		timer_actuated_vent_valve = 1;
	}
#endif
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <tone>:

void tone(uint32_t duration, uint32_t repeats)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
	for (uint32_t i = 0; i < repeats; i++)
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	e010      	b.n	8002c4a <tone+0x32>
	{
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002c28:	2108      	movs	r1, #8
 8002c2a:	480c      	ldr	r0, [pc, #48]	; (8002c5c <tone+0x44>)
 8002c2c:	f004 fd7c 	bl	8007728 <HAL_TIM_PWM_Start>
		HAL_Delay(duration); // wait so i can probe voltage
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 fe25 	bl	8003880 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8002c36:	2108      	movs	r1, #8
 8002c38:	4808      	ldr	r0, [pc, #32]	; (8002c5c <tone+0x44>)
 8002c3a:	f004 fe3d 	bl	80078b8 <HAL_TIM_PWM_Stop>
		HAL_Delay(duration);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 fe1e 	bl	8003880 <HAL_Delay>
	for (uint32_t i = 0; i < repeats; i++)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	3301      	adds	r3, #1
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d3ea      	bcc.n	8002c28 <tone+0x10>
	}
}
 8002c52:	bf00      	nop
 8002c54:	bf00      	nop
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	20000fbc 	.word	0x20000fbc

08002c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
//  __disable_irq();
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET); // error occurred, fatal
 8002c64:	2201      	movs	r2, #1
 8002c66:	2108      	movs	r1, #8
 8002c68:	4809      	ldr	r0, [pc, #36]	; (8002c90 <Error_Handler+0x30>)
 8002c6a:	f001 fb5d 	bl	8004328 <HAL_GPIO_WritePin>
  while (1)
  {
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002c6e:	2108      	movs	r1, #8
 8002c70:	4808      	ldr	r0, [pc, #32]	; (8002c94 <Error_Handler+0x34>)
 8002c72:	f004 fd59 	bl	8007728 <HAL_TIM_PWM_Start>
	  HAL_Delay(2000);
 8002c76:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002c7a:	f000 fe01 	bl	8003880 <HAL_Delay>
	  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8002c7e:	2108      	movs	r1, #8
 8002c80:	4804      	ldr	r0, [pc, #16]	; (8002c94 <Error_Handler+0x34>)
 8002c82:	f004 fe19 	bl	80078b8 <HAL_TIM_PWM_Stop>
	  HAL_Delay(2000);
 8002c86:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002c8a:	f000 fdf9 	bl	8003880 <HAL_Delay>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002c8e:	e7ee      	b.n	8002c6e <Error_Handler+0xe>
 8002c90:	40020800 	.word	0x40020800
 8002c94:	20000fbc 	.word	0x20000fbc

08002c98 <myprintf>:
extern FIL fil;
uint8_t msg_buffer[1000];


// private functions
void myprintf(const char *fmt, ...) { // currently does nothing, was copied from a tutorial to make the code work
 8002c98:	b40f      	push	{r0, r1, r2, r3}
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8002ca0:	f107 0314 	add.w	r3, r7, #20
 8002ca4:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cae:	4805      	ldr	r0, [pc, #20]	; (8002cc4 <myprintf+0x2c>)
 8002cb0:	f00e fdbe 	bl	8011830 <vsniprintf>
  va_end(args);

//  int len = strlen(buffer);
//  HAL_UART_Transmit(&huart8, (uint8_t*)buffer, len, -1);

}
 8002cb4:	bf00      	nop
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002cbe:	b004      	add	sp, #16
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	200007b4 	.word	0x200007b4

08002cc8 <sd_init_dynamic_filename>:
 * creates new file of form "[prefix][number].txt"
 * where the string composed of "[prefix][number]" is 8 characters long.
 *
 */
FRESULT sd_init_dynamic_filename(char *prefix, char *header_text, char* return_filename)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b08a      	sub	sp, #40	; 0x28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
	FRESULT fres = f_mount(&FatFs, "", 1);
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	4932      	ldr	r1, [pc, #200]	; (8002da0 <sd_init_dynamic_filename+0xd8>)
 8002cd8:	4832      	ldr	r0, [pc, #200]	; (8002da4 <sd_init_dynamic_filename+0xdc>)
 8002cda:	f00b fb03 	bl	800e2e4 <f_mount>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (fres != FR_OK) {
 8002ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <sd_init_dynamic_filename+0x36>
		myprintf("f_mount error (%i)\r\n", fres);
 8002cec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	482d      	ldr	r0, [pc, #180]	; (8002da8 <sd_init_dynamic_filename+0xe0>)
 8002cf4:	f7ff ffd0 	bl	8002c98 <myprintf>
		return fres;
 8002cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cfc:	e04b      	b.n	8002d96 <sd_init_dynamic_filename+0xce>
	}

	// scan files on drive to figure out what suffix number is appropriate
	uint32_t max_used_value = 0;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	623b      	str	r3, [r7, #32]
	fres = scan_files("", prefix, &max_used_value);
 8002d02:	f107 0320 	add.w	r3, r7, #32
 8002d06:	461a      	mov	r2, r3
 8002d08:	68f9      	ldr	r1, [r7, #12]
 8002d0a:	4825      	ldr	r0, [pc, #148]	; (8002da0 <sd_init_dynamic_filename+0xd8>)
 8002d0c:	f000 f89c 	bl	8002e48 <scan_files>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// create filename (max filename length in char array is 13 without LFN)
	char filename[13];
	sprintf(filename, "fc%06lu.txt", max_used_value + 1);
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	1c5a      	adds	r2, r3, #1
 8002d1a:	f107 0310 	add.w	r3, r7, #16
 8002d1e:	4923      	ldr	r1, [pc, #140]	; (8002dac <sd_init_dynamic_filename+0xe4>)
 8002d20:	4618      	mov	r0, r3
 8002d22:	f00d fdef 	bl	8010904 <siprintf>
	return_filename = strcpy(return_filename, filename); // needed so that other functions can open the file!
 8002d26:	f107 0310 	add.w	r3, r7, #16
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f00d fe7a 	bl	8010a26 <strcpy>
 8002d32:	6078      	str	r0, [r7, #4]

	// open file (create file) on SD card
	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8002d34:	f107 0310 	add.w	r3, r7, #16
 8002d38:	221a      	movs	r2, #26
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	481c      	ldr	r0, [pc, #112]	; (8002db0 <sd_init_dynamic_filename+0xe8>)
 8002d3e:	f00b fb17 	bl	800e370 <f_open>
 8002d42:	4603      	mov	r3, r0
 8002d44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (fres == FR_OK) {
 8002d48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d11a      	bne.n	8002d86 <sd_init_dynamic_filename+0xbe>
		myprintf("I was able to open filename.txt for writing\r\n");
 8002d50:	4818      	ldr	r0, [pc, #96]	; (8002db4 <sd_init_dynamic_filename+0xec>)
 8002d52:	f7ff ffa1 	bl	8002c98 <myprintf>
	} else {
		myprintf("f_open error (%i)\r\n", fres);
		return fres;
	}
	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8002d56:	4b16      	ldr	r3, [pc, #88]	; (8002db0 <sd_init_dynamic_filename+0xe8>)
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4814      	ldr	r0, [pc, #80]	; (8002db0 <sd_init_dynamic_filename+0xe8>)
 8002d5e:	f00b fee2 	bl	800eb26 <f_lseek>

	// save indicate start of new log session
	sprintf((char *)msg_buffer, "--- new logging session! ---\r\n");
 8002d62:	4915      	ldr	r1, [pc, #84]	; (8002db8 <sd_init_dynamic_filename+0xf0>)
 8002d64:	4815      	ldr	r0, [pc, #84]	; (8002dbc <sd_init_dynamic_filename+0xf4>)
 8002d66:	f00d fdcd 	bl	8010904 <siprintf>
	sd_write(&fil, msg_buffer);
 8002d6a:	4914      	ldr	r1, [pc, #80]	; (8002dbc <sd_init_dynamic_filename+0xf4>)
 8002d6c:	4810      	ldr	r0, [pc, #64]	; (8002db0 <sd_init_dynamic_filename+0xe8>)
 8002d6e:	f000 f841 	bl	8002df4 <sd_write>

	// save header row to indicate what the data is
	sd_write(&fil, (uint8_t *)header_text);
 8002d72:	68b9      	ldr	r1, [r7, #8]
 8002d74:	480e      	ldr	r0, [pc, #56]	; (8002db0 <sd_init_dynamic_filename+0xe8>)
 8002d76:	f000 f83d 	bl	8002df4 <sd_write>
	f_close(&fil);
 8002d7a:	480d      	ldr	r0, [pc, #52]	; (8002db0 <sd_init_dynamic_filename+0xe8>)
 8002d7c:	f00b fea9 	bl	800ead2 <f_close>

	return fres;
 8002d80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d84:	e007      	b.n	8002d96 <sd_init_dynamic_filename+0xce>
		myprintf("f_open error (%i)\r\n", fres);
 8002d86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	480c      	ldr	r0, [pc, #48]	; (8002dc0 <sd_init_dynamic_filename+0xf8>)
 8002d8e:	f7ff ff83 	bl	8002c98 <myprintf>
		return fres;
 8002d92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3728      	adds	r7, #40	; 0x28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	08014f08 	.word	0x08014f08
 8002da4:	20000cf4 	.word	0x20000cf4
 8002da8:	08014f0c 	.word	0x08014f0c
 8002dac:	08014f88 	.word	0x08014f88
 8002db0:	20001020 	.word	0x20001020
 8002db4:	08014f24 	.word	0x08014f24
 8002db8:	08014f68 	.word	0x08014f68
 8002dbc:	20001250 	.word	0x20001250
 8002dc0:	08014f54 	.word	0x08014f54

08002dc4 <sd_open_file>:

/*
 * always open in mode FA_WRITE | FA_OPEN_ALWAYS and then appends.
 */
FRESULT sd_open_file(char *filename)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
	// write start to SD card
	FRESULT fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS);
 8002dcc:	2212      	movs	r2, #18
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4807      	ldr	r0, [pc, #28]	; (8002df0 <sd_open_file+0x2c>)
 8002dd2:	f00b facd 	bl	800e370 <f_open>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	73fb      	strb	r3, [r7, #15]

	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8002dda:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <sd_open_file+0x2c>)
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	4619      	mov	r1, r3
 8002de0:	4803      	ldr	r0, [pc, #12]	; (8002df0 <sd_open_file+0x2c>)
 8002de2:	f00b fea0 	bl	800eb26 <f_lseek>

	return fres;
 8002de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	20001020 	.word	0x20001020

08002df4 <sd_write>:
 * @brief  write buffer to file on sd card.
 * @param  fp 		file to save to
 * @param  buffer	data to write to file
 */
int8_t sd_write(FIL* fp, uint8_t* buffer)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
	UINT bytesWrote;
	FRESULT fres = f_write(fp, buffer, strlen((char const *)buffer), &bytesWrote);
 8002dfe:	6838      	ldr	r0, [r7, #0]
 8002e00:	f7fd f9f6 	bl	80001f0 <strlen>
 8002e04:	4602      	mov	r2, r0
 8002e06:	f107 0308 	add.w	r3, r7, #8
 8002e0a:	6839      	ldr	r1, [r7, #0]
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f00b fc6d 	bl	800e6ec <f_write>
 8002e12:	4603      	mov	r3, r0
 8002e14:	73fb      	strb	r3, [r7, #15]
	if (fres == FR_OK) {
 8002e16:	7bfb      	ldrb	r3, [r7, #15]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d107      	bne.n	8002e2c <sd_write+0x38>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4807      	ldr	r0, [pc, #28]	; (8002e40 <sd_write+0x4c>)
 8002e22:	f7ff ff39 	bl	8002c98 <myprintf>
		return bytesWrote;
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	b25b      	sxtb	r3, r3
 8002e2a:	e004      	b.n	8002e36 <sd_write+0x42>
	} else {
		myprintf("f_write error (%i)\r\n");
 8002e2c:	4805      	ldr	r0, [pc, #20]	; (8002e44 <sd_write+0x50>)
 8002e2e:	f7ff ff33 	bl	8002c98 <myprintf>
		return -1;
 8002e32:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	08014f94 	.word	0x08014f94
 8002e44:	08014fb8 	.word	0x08014fb8

08002e48 <scan_files>:
FRESULT scan_files (
    char* path,        /* Start node to be scanned (***also used as work area***) */
	char* prefix,	   /* prefix in the filename for our datafiles */
	uint32_t* max_used_value
)
{
 8002e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e4a:	b099      	sub	sp, #100	; 0x64
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
 8002e54:	466b      	mov	r3, sp
 8002e56:	461d      	mov	r5, r3
    DIR dir;
//    UINT i;
    static FILINFO fno;

    // does not change so make it static
    uint8_t len_prefix = strlen(prefix);
 8002e58:	68b8      	ldr	r0, [r7, #8]
 8002e5a:	f7fd f9c9 	bl	80001f0 <strlen>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    char prefix_upper[len_prefix];
 8002e64:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 8002e68:	4623      	mov	r3, r4
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e6e:	b2e0      	uxtb	r0, r4
 8002e70:	f04f 0100 	mov.w	r1, #0
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	00cb      	lsls	r3, r1, #3
 8002e7e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002e82:	00c2      	lsls	r2, r0, #3
 8002e84:	b2e0      	uxtb	r0, r4
 8002e86:	f04f 0100 	mov.w	r1, #0
 8002e8a:	f04f 0200 	mov.w	r2, #0
 8002e8e:	f04f 0300 	mov.w	r3, #0
 8002e92:	00cb      	lsls	r3, r1, #3
 8002e94:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002e98:	00c2      	lsls	r2, r0, #3
 8002e9a:	4623      	mov	r3, r4
 8002e9c:	3307      	adds	r3, #7
 8002e9e:	08db      	lsrs	r3, r3, #3
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	ebad 0d03 	sub.w	sp, sp, r3
 8002ea6:	466b      	mov	r3, sp
 8002ea8:	3300      	adds	r3, #0
 8002eaa:	657b      	str	r3, [r7, #84]	; 0x54
	str2upper(prefix, prefix_upper);
 8002eac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eae:	4619      	mov	r1, r3
 8002eb0:	68b8      	ldr	r0, [r7, #8]
 8002eb2:	f000 f8ff 	bl	80030b4 <str2upper>

	*max_used_value = 0; // initialize to known minimum value
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
	uint32_t num_files_fc = 0; // suffix on the files containing fc data already on sd card
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]

    res = f_opendir(&dir, path);                       /* Open the directory */
 8002ec0:	f107 0318 	add.w	r3, r7, #24
 8002ec4:	68f9      	ldr	r1, [r7, #12]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f00c f836 	bl	800ef38 <f_opendir>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (res == FR_OK) {
 8002ed2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d16c      	bne.n	8002fb4 <scan_files+0x16c>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8002eda:	f107 0318 	add.w	r3, r7, #24
 8002ede:	4939      	ldr	r1, [pc, #228]	; (8002fc4 <scan_files+0x17c>)
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f00c f8c2 	bl	800f06a <f_readdir>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8002eec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d15a      	bne.n	8002faa <scan_files+0x162>
 8002ef4:	4b33      	ldr	r3, [pc, #204]	; (8002fc4 <scan_files+0x17c>)
 8002ef6:	7a5b      	ldrb	r3, [r3, #9]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d056      	beq.n	8002faa <scan_files+0x162>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 8002efc:	4b31      	ldr	r3, [pc, #196]	; (8002fc4 <scan_files+0x17c>)
 8002efe:	7a1b      	ldrb	r3, [r3, #8]
 8002f00:	f003 0310 	and.w	r3, r3, #16
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d14e      	bne.n	8002fa6 <scan_files+0x15e>
//                i = strlen(path);
//                sprintf(&path[i], "/%s", fno.fname);
//                res = scan_files(path, prefix, max_used_value);    /* Enter the directory */
//                if (res != FR_OK) break;
//                path[i] = 0;
            } else {                                       /* It is a file. */
 8002f08:	466b      	mov	r3, sp
 8002f0a:	461e      	mov	r6, r3
//                printf("%s/%s\n", path, fno.fname);

            	// check if filename contains parts of our standard prefix "FC000000.txt"
            	// but first convert to uppercase to make case insensitive

            	char fname_upper[strlen((char *)fno.fname)];
 8002f0c:	482e      	ldr	r0, [pc, #184]	; (8002fc8 <scan_files+0x180>)
 8002f0e:	f7fd f96f 	bl	80001f0 <strlen>
 8002f12:	4604      	mov	r4, r0
 8002f14:	4623      	mov	r3, r4
 8002f16:	3b01      	subs	r3, #1
 8002f18:	653b      	str	r3, [r7, #80]	; 0x50
 8002f1a:	4620      	mov	r0, r4
 8002f1c:	f04f 0100 	mov.w	r1, #0
 8002f20:	f04f 0200 	mov.w	r2, #0
 8002f24:	f04f 0300 	mov.w	r3, #0
 8002f28:	00cb      	lsls	r3, r1, #3
 8002f2a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002f2e:	00c2      	lsls	r2, r0, #3
 8002f30:	4620      	mov	r0, r4
 8002f32:	f04f 0100 	mov.w	r1, #0
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	00cb      	lsls	r3, r1, #3
 8002f40:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002f44:	00c2      	lsls	r2, r0, #3
 8002f46:	1de3      	adds	r3, r4, #7
 8002f48:	08db      	lsrs	r3, r3, #3
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	ebad 0d03 	sub.w	sp, sp, r3
 8002f50:	466b      	mov	r3, sp
 8002f52:	3300      	adds	r3, #0
 8002f54:	64fb      	str	r3, [r7, #76]	; 0x4c
            	str2upper((char *)fno.fname, fname_upper);
 8002f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f58:	4619      	mov	r1, r3
 8002f5a:	481b      	ldr	r0, [pc, #108]	; (8002fc8 <scan_files+0x180>)
 8002f5c:	f000 f8aa 	bl	80030b4 <str2upper>

            	int8_t contains_prefix = strncmp(fno.fname, prefix_upper, len_prefix);
 8002f60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f62:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8002f66:	4619      	mov	r1, r3
 8002f68:	4817      	ldr	r0, [pc, #92]	; (8002fc8 <scan_files+0x180>)
 8002f6a:	f00d fd64 	bl	8010a36 <strncmp>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

            	if (contains_prefix == 0)
 8002f74:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d112      	bne.n	8002fa2 <scan_files+0x15a>
            	{
            		// can do error checking with status if desired
            		uint8_t status = extract_filename_suffix(fname_upper, len_prefix, &num_files_fc);
 8002f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f7e:	f107 0214 	add.w	r2, r7, #20
 8002f82:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 f820 	bl	8002fcc <extract_filename_suffix>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

            		if (num_files_fc > *max_used_value)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d202      	bcs.n	8002fa2 <scan_files+0x15a>
            		{
            			*max_used_value = num_files_fc;
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	46b5      	mov	sp, r6
 8002fa4:	e799      	b.n	8002eda <scan_files+0x92>
            	continue; // don't enter directory
 8002fa6:	bf00      	nop
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8002fa8:	e797      	b.n	8002eda <scan_files+0x92>
            		}
            	}
            }
        }

        f_closedir(&dir);
 8002faa:	f107 0318 	add.w	r3, r7, #24
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f00c f835 	bl	800f01e <f_closedir>
    }

    return res;
 8002fb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002fb8:	46ad      	mov	sp, r5
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3764      	adds	r7, #100	; 0x64
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	200008b4 	.word	0x200008b4
 8002fc8:	200008bd 	.word	0x200008bd

08002fcc <extract_filename_suffix>:
 * which is assumed to be .txt. assumes that filename contains prefix.
 *
 * returns integer indicating success/fail: 0 = success, 1 = fail
 */
uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value)
{
 8002fcc:	b5b0      	push	{r4, r5, r7, lr}
 8002fce:	b088      	sub	sp, #32
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	607a      	str	r2, [r7, #4]
 8002fd8:	72fb      	strb	r3, [r7, #11]
 8002fda:	466b      	mov	r3, sp
 8002fdc:	461d      	mov	r5, r3
	uint8_t len_filename = strlen(filename);
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f7fd f906 	bl	80001f0 <strlen>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	77bb      	strb	r3, [r7, #30]

	// add characters between prefix and filename extension to buffer
	uint8_t len_buf = 8;
 8002fe8:	2308      	movs	r3, #8
 8002fea:	777b      	strb	r3, [r7, #29]
	char buf[len_buf]; // filenames can't be longer than 8 characters total
 8002fec:	7f7c      	ldrb	r4, [r7, #29]
 8002fee:	4623      	mov	r3, r4
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	61bb      	str	r3, [r7, #24]
 8002ff4:	b2e0      	uxtb	r0, r4
 8002ff6:	f04f 0100 	mov.w	r1, #0
 8002ffa:	f04f 0200 	mov.w	r2, #0
 8002ffe:	f04f 0300 	mov.w	r3, #0
 8003002:	00cb      	lsls	r3, r1, #3
 8003004:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003008:	00c2      	lsls	r2, r0, #3
 800300a:	b2e0      	uxtb	r0, r4
 800300c:	f04f 0100 	mov.w	r1, #0
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	00cb      	lsls	r3, r1, #3
 800301a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800301e:	00c2      	lsls	r2, r0, #3
 8003020:	4623      	mov	r3, r4
 8003022:	3307      	adds	r3, #7
 8003024:	08db      	lsrs	r3, r3, #3
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	ebad 0d03 	sub.w	sp, sp, r3
 800302c:	466b      	mov	r3, sp
 800302e:	3300      	adds	r3, #0
 8003030:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len_buf; i++)
 8003032:	2300      	movs	r3, #0
 8003034:	77fb      	strb	r3, [r7, #31]
 8003036:	e014      	b.n	8003062 <extract_filename_suffix+0x96>
	{
		if (len_prefix - 1 + i < len_filename - 1) // go to end of filename
 8003038:	7afb      	ldrb	r3, [r7, #11]
 800303a:	1e5a      	subs	r2, r3, #1
 800303c:	7ffb      	ldrb	r3, [r7, #31]
 800303e:	441a      	add	r2, r3
 8003040:	7fbb      	ldrb	r3, [r7, #30]
 8003042:	3b01      	subs	r3, #1
 8003044:	429a      	cmp	r2, r3
 8003046:	da11      	bge.n	800306c <extract_filename_suffix+0xa0>
		{
			buf[i] = filename[len_prefix + i];
 8003048:	7afa      	ldrb	r2, [r7, #11]
 800304a:	7ffb      	ldrb	r3, [r7, #31]
 800304c:	4413      	add	r3, r2
 800304e:	461a      	mov	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	441a      	add	r2, r3
 8003054:	7ffb      	ldrb	r3, [r7, #31]
 8003056:	7811      	ldrb	r1, [r2, #0]
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len_buf; i++)
 800305c:	7ffb      	ldrb	r3, [r7, #31]
 800305e:	3301      	adds	r3, #1
 8003060:	77fb      	strb	r3, [r7, #31]
 8003062:	7ffa      	ldrb	r2, [r7, #31]
 8003064:	7f7b      	ldrb	r3, [r7, #29]
 8003066:	429a      	cmp	r2, r3
 8003068:	d3e6      	bcc.n	8003038 <extract_filename_suffix+0x6c>
 800306a:	e000      	b.n	800306e <extract_filename_suffix+0xa2>
		}
		else break;
 800306c:	bf00      	nop
	}

	// change chars to integer, strtol will strip out the .txt
	char *ptr;
	*num_value = strtol(buf, &ptr, 10);
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f107 0110 	add.w	r1, r7, #16
 8003074:	220a      	movs	r2, #10
 8003076:	4618      	mov	r0, r3
 8003078:	f00e fba4 	bl	80117c4 <strtol>
 800307c:	4603      	mov	r3, r0
 800307e:	461a      	mov	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	601a      	str	r2, [r3, #0]

	if (ptr == buf || *num_value == LONG_MIN || *num_value == LONG_MAX)
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	429a      	cmp	r2, r3
 800308a:	d00a      	beq.n	80030a2 <extract_filename_suffix+0xd6>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003094:	d005      	beq.n	80030a2 <extract_filename_suffix+0xd6>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800309e:	4293      	cmp	r3, r2
 80030a0:	d101      	bne.n	80030a6 <extract_filename_suffix+0xda>
	{
		return 1;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e000      	b.n	80030a8 <extract_filename_suffix+0xdc>
	}

	return 0;
 80030a6:	2300      	movs	r3, #0
 80030a8:	46ad      	mov	sp, r5
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3720      	adds	r7, #32
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080030b4 <str2upper>:
/**
 * assumes that upper has enough characters in the array
 * to store the uppercase version.
 */
void str2upper(char* string, char* upper)
{
 80030b4:	b590      	push	{r4, r7, lr}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 80030be:	2300      	movs	r3, #0
 80030c0:	73fb      	strb	r3, [r7, #15]
 80030c2:	e019      	b.n	80030f8 <str2upper+0x44>
	{
		upper[i] = toupper(string[i]);
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	4413      	add	r3, r2
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	73bb      	strb	r3, [r7, #14]
 80030ce:	7bbb      	ldrb	r3, [r7, #14]
 80030d0:	3301      	adds	r3, #1
 80030d2:	4a0f      	ldr	r2, [pc, #60]	; (8003110 <str2upper+0x5c>)
 80030d4:	4413      	add	r3, r2
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	f003 0303 	and.w	r3, r3, #3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d102      	bne.n	80030e6 <str2upper+0x32>
 80030e0:	7bbb      	ldrb	r3, [r7, #14]
 80030e2:	3b20      	subs	r3, #32
 80030e4:	e000      	b.n	80030e8 <str2upper+0x34>
 80030e6:	7bbb      	ldrb	r3, [r7, #14]
 80030e8:	7bfa      	ldrb	r2, [r7, #15]
 80030ea:	6839      	ldr	r1, [r7, #0]
 80030ec:	440a      	add	r2, r1
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
 80030f4:	3301      	adds	r3, #1
 80030f6:	73fb      	strb	r3, [r7, #15]
 80030f8:	7bfc      	ldrb	r4, [r7, #15]
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fd f878 	bl	80001f0 <strlen>
 8003100:	4603      	mov	r3, r0
 8003102:	429c      	cmp	r4, r3
 8003104:	d3de      	bcc.n	80030c4 <str2upper+0x10>
	}
}
 8003106:	bf00      	nop
 8003108:	bf00      	nop
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	bd90      	pop	{r4, r7, pc}
 8003110:	08015100 	.word	0x08015100

08003114 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800311a:	2300      	movs	r3, #0
 800311c:	607b      	str	r3, [r7, #4]
 800311e:	4b10      	ldr	r3, [pc, #64]	; (8003160 <HAL_MspInit+0x4c>)
 8003120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003122:	4a0f      	ldr	r2, [pc, #60]	; (8003160 <HAL_MspInit+0x4c>)
 8003124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003128:	6453      	str	r3, [r2, #68]	; 0x44
 800312a:	4b0d      	ldr	r3, [pc, #52]	; (8003160 <HAL_MspInit+0x4c>)
 800312c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003132:	607b      	str	r3, [r7, #4]
 8003134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	603b      	str	r3, [r7, #0]
 800313a:	4b09      	ldr	r3, [pc, #36]	; (8003160 <HAL_MspInit+0x4c>)
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	4a08      	ldr	r2, [pc, #32]	; (8003160 <HAL_MspInit+0x4c>)
 8003140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003144:	6413      	str	r3, [r2, #64]	; 0x40
 8003146:	4b06      	ldr	r3, [pc, #24]	; (8003160 <HAL_MspInit+0x4c>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314e:	603b      	str	r3, [r7, #0]
 8003150:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	40023800 	.word	0x40023800

08003164 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b08a      	sub	sp, #40	; 0x28
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800316c:	f107 0314 	add.w	r3, r7, #20
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	605a      	str	r2, [r3, #4]
 8003176:	609a      	str	r2, [r3, #8]
 8003178:	60da      	str	r2, [r3, #12]
 800317a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a17      	ldr	r2, [pc, #92]	; (80031e0 <HAL_ADC_MspInit+0x7c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d127      	bne.n	80031d6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	4b16      	ldr	r3, [pc, #88]	; (80031e4 <HAL_ADC_MspInit+0x80>)
 800318c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318e:	4a15      	ldr	r2, [pc, #84]	; (80031e4 <HAL_ADC_MspInit+0x80>)
 8003190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003194:	6453      	str	r3, [r2, #68]	; 0x44
 8003196:	4b13      	ldr	r3, [pc, #76]	; (80031e4 <HAL_ADC_MspInit+0x80>)
 8003198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031a2:	2300      	movs	r3, #0
 80031a4:	60fb      	str	r3, [r7, #12]
 80031a6:	4b0f      	ldr	r3, [pc, #60]	; (80031e4 <HAL_ADC_MspInit+0x80>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031aa:	4a0e      	ldr	r2, [pc, #56]	; (80031e4 <HAL_ADC_MspInit+0x80>)
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	6313      	str	r3, [r2, #48]	; 0x30
 80031b2:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <HAL_ADC_MspInit+0x80>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80031be:	2340      	movs	r3, #64	; 0x40
 80031c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031c2:	2303      	movs	r3, #3
 80031c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c6:	2300      	movs	r3, #0
 80031c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ca:	f107 0314 	add.w	r3, r7, #20
 80031ce:	4619      	mov	r1, r3
 80031d0:	4805      	ldr	r0, [pc, #20]	; (80031e8 <HAL_ADC_MspInit+0x84>)
 80031d2:	f000 fefd 	bl	8003fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80031d6:	bf00      	nop
 80031d8:	3728      	adds	r7, #40	; 0x28
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40012000 	.word	0x40012000
 80031e4:	40023800 	.word	0x40023800
 80031e8:	40020000 	.word	0x40020000

080031ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08a      	sub	sp, #40	; 0x28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f4:	f107 0314 	add.w	r3, r7, #20
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	605a      	str	r2, [r3, #4]
 80031fe:	609a      	str	r2, [r3, #8]
 8003200:	60da      	str	r2, [r3, #12]
 8003202:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a29      	ldr	r2, [pc, #164]	; (80032b0 <HAL_I2C_MspInit+0xc4>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d14b      	bne.n	80032a6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	4b28      	ldr	r3, [pc, #160]	; (80032b4 <HAL_I2C_MspInit+0xc8>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	4a27      	ldr	r2, [pc, #156]	; (80032b4 <HAL_I2C_MspInit+0xc8>)
 8003218:	f043 0304 	orr.w	r3, r3, #4
 800321c:	6313      	str	r3, [r2, #48]	; 0x30
 800321e:	4b25      	ldr	r3, [pc, #148]	; (80032b4 <HAL_I2C_MspInit+0xc8>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	f003 0304 	and.w	r3, r3, #4
 8003226:	613b      	str	r3, [r7, #16]
 8003228:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	4b21      	ldr	r3, [pc, #132]	; (80032b4 <HAL_I2C_MspInit+0xc8>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	4a20      	ldr	r2, [pc, #128]	; (80032b4 <HAL_I2C_MspInit+0xc8>)
 8003234:	f043 0301 	orr.w	r3, r3, #1
 8003238:	6313      	str	r3, [r2, #48]	; 0x30
 800323a:	4b1e      	ldr	r3, [pc, #120]	; (80032b4 <HAL_I2C_MspInit+0xc8>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003246:	f44f 7300 	mov.w	r3, #512	; 0x200
 800324a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800324c:	2312      	movs	r3, #18
 800324e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003250:	2300      	movs	r3, #0
 8003252:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003254:	2303      	movs	r3, #3
 8003256:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003258:	2304      	movs	r3, #4
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800325c:	f107 0314 	add.w	r3, r7, #20
 8003260:	4619      	mov	r1, r3
 8003262:	4815      	ldr	r0, [pc, #84]	; (80032b8 <HAL_I2C_MspInit+0xcc>)
 8003264:	f000 feb4 	bl	8003fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003268:	f44f 7380 	mov.w	r3, #256	; 0x100
 800326c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800326e:	2312      	movs	r3, #18
 8003270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003272:	2300      	movs	r3, #0
 8003274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003276:	2303      	movs	r3, #3
 8003278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800327a:	2304      	movs	r3, #4
 800327c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800327e:	f107 0314 	add.w	r3, r7, #20
 8003282:	4619      	mov	r1, r3
 8003284:	480d      	ldr	r0, [pc, #52]	; (80032bc <HAL_I2C_MspInit+0xd0>)
 8003286:	f000 fea3 	bl	8003fd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800328a:	2300      	movs	r3, #0
 800328c:	60bb      	str	r3, [r7, #8]
 800328e:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <HAL_I2C_MspInit+0xc8>)
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	4a08      	ldr	r2, [pc, #32]	; (80032b4 <HAL_I2C_MspInit+0xc8>)
 8003294:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003298:	6413      	str	r3, [r2, #64]	; 0x40
 800329a:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <HAL_I2C_MspInit+0xc8>)
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032a2:	60bb      	str	r3, [r7, #8]
 80032a4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80032a6:	bf00      	nop
 80032a8:	3728      	adds	r7, #40	; 0x28
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	40005c00 	.word	0x40005c00
 80032b4:	40023800 	.word	0x40023800
 80032b8:	40020800 	.word	0x40020800
 80032bc:	40020000 	.word	0x40020000

080032c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08c      	sub	sp, #48	; 0x30
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c8:	f107 031c 	add.w	r3, r7, #28
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	605a      	str	r2, [r3, #4]
 80032d2:	609a      	str	r2, [r3, #8]
 80032d4:	60da      	str	r2, [r3, #12]
 80032d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a33      	ldr	r2, [pc, #204]	; (80033ac <HAL_SPI_MspInit+0xec>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d12d      	bne.n	800333e <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80032e2:	2300      	movs	r3, #0
 80032e4:	61bb      	str	r3, [r7, #24]
 80032e6:	4b32      	ldr	r3, [pc, #200]	; (80033b0 <HAL_SPI_MspInit+0xf0>)
 80032e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ea:	4a31      	ldr	r2, [pc, #196]	; (80033b0 <HAL_SPI_MspInit+0xf0>)
 80032ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80032f0:	6453      	str	r3, [r2, #68]	; 0x44
 80032f2:	4b2f      	ldr	r3, [pc, #188]	; (80033b0 <HAL_SPI_MspInit+0xf0>)
 80032f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032fa:	61bb      	str	r3, [r7, #24]
 80032fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80032fe:	2300      	movs	r3, #0
 8003300:	617b      	str	r3, [r7, #20]
 8003302:	4b2b      	ldr	r3, [pc, #172]	; (80033b0 <HAL_SPI_MspInit+0xf0>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	4a2a      	ldr	r2, [pc, #168]	; (80033b0 <HAL_SPI_MspInit+0xf0>)
 8003308:	f043 0310 	orr.w	r3, r3, #16
 800330c:	6313      	str	r3, [r2, #48]	; 0x30
 800330e:	4b28      	ldr	r3, [pc, #160]	; (80033b0 <HAL_SPI_MspInit+0xf0>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	f003 0310 	and.w	r3, r3, #16
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	697b      	ldr	r3, [r7, #20]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800331a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800331e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003320:	2302      	movs	r3, #2
 8003322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003324:	2300      	movs	r3, #0
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003328:	2303      	movs	r3, #3
 800332a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800332c:	2305      	movs	r3, #5
 800332e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003330:	f107 031c 	add.w	r3, r7, #28
 8003334:	4619      	mov	r1, r3
 8003336:	481f      	ldr	r0, [pc, #124]	; (80033b4 <HAL_SPI_MspInit+0xf4>)
 8003338:	f000 fe4a 	bl	8003fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800333c:	e031      	b.n	80033a2 <HAL_SPI_MspInit+0xe2>
  else if(hspi->Instance==SPI5)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a1d      	ldr	r2, [pc, #116]	; (80033b8 <HAL_SPI_MspInit+0xf8>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d12c      	bne.n	80033a2 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003348:	2300      	movs	r3, #0
 800334a:	613b      	str	r3, [r7, #16]
 800334c:	4b18      	ldr	r3, [pc, #96]	; (80033b0 <HAL_SPI_MspInit+0xf0>)
 800334e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003350:	4a17      	ldr	r2, [pc, #92]	; (80033b0 <HAL_SPI_MspInit+0xf0>)
 8003352:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003356:	6453      	str	r3, [r2, #68]	; 0x44
 8003358:	4b15      	ldr	r3, [pc, #84]	; (80033b0 <HAL_SPI_MspInit+0xf0>)
 800335a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003360:	613b      	str	r3, [r7, #16]
 8003362:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003364:	2300      	movs	r3, #0
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	4b11      	ldr	r3, [pc, #68]	; (80033b0 <HAL_SPI_MspInit+0xf0>)
 800336a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336c:	4a10      	ldr	r2, [pc, #64]	; (80033b0 <HAL_SPI_MspInit+0xf0>)
 800336e:	f043 0320 	orr.w	r3, r3, #32
 8003372:	6313      	str	r3, [r2, #48]	; 0x30
 8003374:	4b0e      	ldr	r3, [pc, #56]	; (80033b0 <HAL_SPI_MspInit+0xf0>)
 8003376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003378:	f003 0320 	and.w	r3, r3, #32
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003380:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003386:	2302      	movs	r3, #2
 8003388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800338a:	2301      	movs	r3, #1
 800338c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800338e:	2303      	movs	r3, #3
 8003390:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003392:	2305      	movs	r3, #5
 8003394:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003396:	f107 031c 	add.w	r3, r7, #28
 800339a:	4619      	mov	r1, r3
 800339c:	4807      	ldr	r0, [pc, #28]	; (80033bc <HAL_SPI_MspInit+0xfc>)
 800339e:	f000 fe17 	bl	8003fd0 <HAL_GPIO_Init>
}
 80033a2:	bf00      	nop
 80033a4:	3730      	adds	r7, #48	; 0x30
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40013400 	.word	0x40013400
 80033b0:	40023800 	.word	0x40023800
 80033b4:	40021000 	.word	0x40021000
 80033b8:	40015000 	.word	0x40015000
 80033bc:	40021400 	.word	0x40021400

080033c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d0:	d115      	bne.n	80033fe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033d2:	2300      	movs	r3, #0
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	4b0c      	ldr	r3, [pc, #48]	; (8003408 <HAL_TIM_Base_MspInit+0x48>)
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	4a0b      	ldr	r2, [pc, #44]	; (8003408 <HAL_TIM_Base_MspInit+0x48>)
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	6413      	str	r3, [r2, #64]	; 0x40
 80033e2:	4b09      	ldr	r3, [pc, #36]	; (8003408 <HAL_TIM_Base_MspInit+0x48>)
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80033ee:	2200      	movs	r2, #0
 80033f0:	2100      	movs	r1, #0
 80033f2:	201c      	movs	r0, #28
 80033f4:	f000 fdb5 	bl	8003f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80033f8:	201c      	movs	r0, #28
 80033fa:	f000 fdce 	bl	8003f9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80033fe:	bf00      	nop
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40023800 	.word	0x40023800

0800340c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003414:	f107 030c 	add.w	r3, r7, #12
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	605a      	str	r2, [r3, #4]
 800341e:	609a      	str	r2, [r3, #8]
 8003420:	60da      	str	r2, [r3, #12]
 8003422:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800342c:	d11d      	bne.n	800346a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800342e:	2300      	movs	r3, #0
 8003430:	60bb      	str	r3, [r7, #8]
 8003432:	4b10      	ldr	r3, [pc, #64]	; (8003474 <HAL_TIM_MspPostInit+0x68>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	4a0f      	ldr	r2, [pc, #60]	; (8003474 <HAL_TIM_MspPostInit+0x68>)
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	6313      	str	r3, [r2, #48]	; 0x30
 800343e:	4b0d      	ldr	r3, [pc, #52]	; (8003474 <HAL_TIM_MspPostInit+0x68>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	60bb      	str	r3, [r7, #8]
 8003448:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800344a:	2304      	movs	r3, #4
 800344c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344e:	2302      	movs	r3, #2
 8003450:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003452:	2300      	movs	r3, #0
 8003454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003456:	2300      	movs	r3, #0
 8003458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800345a:	2301      	movs	r3, #1
 800345c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800345e:	f107 030c 	add.w	r3, r7, #12
 8003462:	4619      	mov	r1, r3
 8003464:	4804      	ldr	r0, [pc, #16]	; (8003478 <HAL_TIM_MspPostInit+0x6c>)
 8003466:	f000 fdb3 	bl	8003fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800346a:	bf00      	nop
 800346c:	3720      	adds	r7, #32
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	40023800 	.word	0x40023800
 8003478:	40020000 	.word	0x40020000

0800347c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b08a      	sub	sp, #40	; 0x28
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003484:	f107 0314 	add.w	r3, r7, #20
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	605a      	str	r2, [r3, #4]
 800348e:	609a      	str	r2, [r3, #8]
 8003490:	60da      	str	r2, [r3, #12]
 8003492:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a19      	ldr	r2, [pc, #100]	; (8003500 <HAL_UART_MspInit+0x84>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d12b      	bne.n	80034f6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800349e:	2300      	movs	r3, #0
 80034a0:	613b      	str	r3, [r7, #16]
 80034a2:	4b18      	ldr	r3, [pc, #96]	; (8003504 <HAL_UART_MspInit+0x88>)
 80034a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a6:	4a17      	ldr	r2, [pc, #92]	; (8003504 <HAL_UART_MspInit+0x88>)
 80034a8:	f043 0320 	orr.w	r3, r3, #32
 80034ac:	6453      	str	r3, [r2, #68]	; 0x44
 80034ae:	4b15      	ldr	r3, [pc, #84]	; (8003504 <HAL_UART_MspInit+0x88>)
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	f003 0320 	and.w	r3, r3, #32
 80034b6:	613b      	str	r3, [r7, #16]
 80034b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ba:	2300      	movs	r3, #0
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	4b11      	ldr	r3, [pc, #68]	; (8003504 <HAL_UART_MspInit+0x88>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c2:	4a10      	ldr	r2, [pc, #64]	; (8003504 <HAL_UART_MspInit+0x88>)
 80034c4:	f043 0304 	orr.w	r3, r3, #4
 80034c8:	6313      	str	r3, [r2, #48]	; 0x30
 80034ca:	4b0e      	ldr	r3, [pc, #56]	; (8003504 <HAL_UART_MspInit+0x88>)
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	f003 0304 	and.w	r3, r3, #4
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80034d6:	23c0      	movs	r3, #192	; 0xc0
 80034d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034da:	2302      	movs	r3, #2
 80034dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034de:	2300      	movs	r3, #0
 80034e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034e2:	2303      	movs	r3, #3
 80034e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80034e6:	2308      	movs	r3, #8
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034ea:	f107 0314 	add.w	r3, r7, #20
 80034ee:	4619      	mov	r1, r3
 80034f0:	4805      	ldr	r0, [pc, #20]	; (8003508 <HAL_UART_MspInit+0x8c>)
 80034f2:	f000 fd6d 	bl	8003fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80034f6:	bf00      	nop
 80034f8:	3728      	adds	r7, #40	; 0x28
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40011400 	.word	0x40011400
 8003504:	40023800 	.word	0x40023800
 8003508:	40020800 	.word	0x40020800

0800350c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003510:	e7fe      	b.n	8003510 <NMI_Handler+0x4>

08003512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003512:	b480      	push	{r7}
 8003514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003516:	e7fe      	b.n	8003516 <HardFault_Handler+0x4>

08003518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800351c:	e7fe      	b.n	800351c <MemManage_Handler+0x4>

0800351e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800351e:	b480      	push	{r7}
 8003520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003522:	e7fe      	b.n	8003522 <BusFault_Handler+0x4>

08003524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003528:	e7fe      	b.n	8003528 <UsageFault_Handler+0x4>

0800352a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800352a:	b480      	push	{r7}
 800352c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800352e:	bf00      	nop
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800353c:	bf00      	nop
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003546:	b480      	push	{r7}
 8003548:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800354a:	bf00      	nop
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003558:	f000 f972 	bl	8003840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800355c:	bf00      	nop
 800355e:	bd80      	pop	{r7, pc}

08003560 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003564:	2001      	movs	r0, #1
 8003566:	f000 fef9 	bl	800435c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800356a:	bf00      	nop
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003574:	4802      	ldr	r0, [pc, #8]	; (8003580 <TIM2_IRQHandler+0x10>)
 8003576:	f004 fa0f 	bl	8007998 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800357a:	bf00      	nop
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	20000fbc 	.word	0x20000fbc

08003584 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003588:	4802      	ldr	r0, [pc, #8]	; (8003594 <OTG_FS_IRQHandler+0x10>)
 800358a:	f002 f889 	bl	80056a0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800358e:	bf00      	nop
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	20002f7c 	.word	0x20002f7c

08003598 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
	return 1;
 800359c:	2301      	movs	r3, #1
}
 800359e:	4618      	mov	r0, r3
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <_kill>:

int _kill(int pid, int sig)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80035b2:	f00c faf5 	bl	800fba0 <__errno>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2216      	movs	r2, #22
 80035ba:	601a      	str	r2, [r3, #0]
	return -1;
 80035bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3708      	adds	r7, #8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <_exit>:

void _exit (int status)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80035d0:	f04f 31ff 	mov.w	r1, #4294967295
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f7ff ffe7 	bl	80035a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80035da:	e7fe      	b.n	80035da <_exit+0x12>

080035dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035e8:	2300      	movs	r3, #0
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	e00a      	b.n	8003604 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80035ee:	f3af 8000 	nop.w
 80035f2:	4601      	mov	r1, r0
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	1c5a      	adds	r2, r3, #1
 80035f8:	60ba      	str	r2, [r7, #8]
 80035fa:	b2ca      	uxtb	r2, r1
 80035fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	3301      	adds	r3, #1
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	429a      	cmp	r2, r3
 800360a:	dbf0      	blt.n	80035ee <_read+0x12>
	}

return len;
 800360c:	687b      	ldr	r3, [r7, #4]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b086      	sub	sp, #24
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003622:	2300      	movs	r3, #0
 8003624:	617b      	str	r3, [r7, #20]
 8003626:	e009      	b.n	800363c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	1c5a      	adds	r2, r3, #1
 800362c:	60ba      	str	r2, [r7, #8]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	3301      	adds	r3, #1
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	429a      	cmp	r2, r3
 8003642:	dbf1      	blt.n	8003628 <_write+0x12>
	}
	return len;
 8003644:	687b      	ldr	r3, [r7, #4]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3718      	adds	r7, #24
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <_close>:

int _close(int file)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
	return -1;
 8003656:	f04f 33ff 	mov.w	r3, #4294967295
}
 800365a:	4618      	mov	r0, r3
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003666:	b480      	push	{r7}
 8003668:	b083      	sub	sp, #12
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
 800366e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003676:	605a      	str	r2, [r3, #4]
	return 0;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <_isatty>:

int _isatty(int file)
{
 8003686:	b480      	push	{r7}
 8003688:	b083      	sub	sp, #12
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
	return 1;
 800368e:	2301      	movs	r3, #1
}
 8003690:	4618      	mov	r0, r3
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
	return 0;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
	...

080036b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036c0:	4a14      	ldr	r2, [pc, #80]	; (8003714 <_sbrk+0x5c>)
 80036c2:	4b15      	ldr	r3, [pc, #84]	; (8003718 <_sbrk+0x60>)
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036cc:	4b13      	ldr	r3, [pc, #76]	; (800371c <_sbrk+0x64>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d102      	bne.n	80036da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036d4:	4b11      	ldr	r3, [pc, #68]	; (800371c <_sbrk+0x64>)
 80036d6:	4a12      	ldr	r2, [pc, #72]	; (8003720 <_sbrk+0x68>)
 80036d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036da:	4b10      	ldr	r3, [pc, #64]	; (800371c <_sbrk+0x64>)
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4413      	add	r3, r2
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d207      	bcs.n	80036f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036e8:	f00c fa5a 	bl	800fba0 <__errno>
 80036ec:	4603      	mov	r3, r0
 80036ee:	220c      	movs	r2, #12
 80036f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036f2:	f04f 33ff 	mov.w	r3, #4294967295
 80036f6:	e009      	b.n	800370c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036f8:	4b08      	ldr	r3, [pc, #32]	; (800371c <_sbrk+0x64>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036fe:	4b07      	ldr	r3, [pc, #28]	; (800371c <_sbrk+0x64>)
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4413      	add	r3, r2
 8003706:	4a05      	ldr	r2, [pc, #20]	; (800371c <_sbrk+0x64>)
 8003708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800370a:	68fb      	ldr	r3, [r7, #12]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3718      	adds	r7, #24
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	20030000 	.word	0x20030000
 8003718:	00000400 	.word	0x00000400
 800371c:	200008cc 	.word	0x200008cc
 8003720:	20003398 	.word	0x20003398

08003724 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003728:	4b06      	ldr	r3, [pc, #24]	; (8003744 <SystemInit+0x20>)
 800372a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372e:	4a05      	ldr	r2, [pc, #20]	; (8003744 <SystemInit+0x20>)
 8003730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003738:	bf00      	nop
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	e000ed00 	.word	0xe000ed00

08003748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003748:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003780 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800374c:	480d      	ldr	r0, [pc, #52]	; (8003784 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800374e:	490e      	ldr	r1, [pc, #56]	; (8003788 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003750:	4a0e      	ldr	r2, [pc, #56]	; (800378c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003754:	e002      	b.n	800375c <LoopCopyDataInit>

08003756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800375a:	3304      	adds	r3, #4

0800375c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800375c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800375e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003760:	d3f9      	bcc.n	8003756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003762:	4a0b      	ldr	r2, [pc, #44]	; (8003790 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003764:	4c0b      	ldr	r4, [pc, #44]	; (8003794 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003768:	e001      	b.n	800376e <LoopFillZerobss>

0800376a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800376a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800376c:	3204      	adds	r2, #4

0800376e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800376e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003770:	d3fb      	bcc.n	800376a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003772:	f7ff ffd7 	bl	8003724 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003776:	f00c fa19 	bl	800fbac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800377a:	f7fe fd7b 	bl	8002274 <main>
  bx  lr    
 800377e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003780:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003788:	2000036c 	.word	0x2000036c
  ldr r2, =_sidata
 800378c:	080155dc 	.word	0x080155dc
  ldr r2, =_sbss
 8003790:	2000036c 	.word	0x2000036c
  ldr r4, =_ebss
 8003794:	20003394 	.word	0x20003394

08003798 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003798:	e7fe      	b.n	8003798 <ADC_IRQHandler>
	...

0800379c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037a0:	4b0e      	ldr	r3, [pc, #56]	; (80037dc <HAL_Init+0x40>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a0d      	ldr	r2, [pc, #52]	; (80037dc <HAL_Init+0x40>)
 80037a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037ac:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <HAL_Init+0x40>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a0a      	ldr	r2, [pc, #40]	; (80037dc <HAL_Init+0x40>)
 80037b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037b8:	4b08      	ldr	r3, [pc, #32]	; (80037dc <HAL_Init+0x40>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a07      	ldr	r2, [pc, #28]	; (80037dc <HAL_Init+0x40>)
 80037be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037c4:	2003      	movs	r0, #3
 80037c6:	f000 fbc1 	bl	8003f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037ca:	200f      	movs	r0, #15
 80037cc:	f000 f808 	bl	80037e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037d0:	f7ff fca0 	bl	8003114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	40023c00 	.word	0x40023c00

080037e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037e8:	4b12      	ldr	r3, [pc, #72]	; (8003834 <HAL_InitTick+0x54>)
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	4b12      	ldr	r3, [pc, #72]	; (8003838 <HAL_InitTick+0x58>)
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	4619      	mov	r1, r3
 80037f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80037fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 fbd9 	bl	8003fb6 <HAL_SYSTICK_Config>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e00e      	b.n	800382c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b0f      	cmp	r3, #15
 8003812:	d80a      	bhi.n	800382a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003814:	2200      	movs	r2, #0
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	f04f 30ff 	mov.w	r0, #4294967295
 800381c:	f000 fba1 	bl	8003f62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003820:	4a06      	ldr	r2, [pc, #24]	; (800383c <HAL_InitTick+0x5c>)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	e000      	b.n	800382c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
}
 800382c:	4618      	mov	r0, r3
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	20000000 	.word	0x20000000
 8003838:	20000008 	.word	0x20000008
 800383c:	20000004 	.word	0x20000004

08003840 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003844:	4b06      	ldr	r3, [pc, #24]	; (8003860 <HAL_IncTick+0x20>)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	461a      	mov	r2, r3
 800384a:	4b06      	ldr	r3, [pc, #24]	; (8003864 <HAL_IncTick+0x24>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4413      	add	r3, r2
 8003850:	4a04      	ldr	r2, [pc, #16]	; (8003864 <HAL_IncTick+0x24>)
 8003852:	6013      	str	r3, [r2, #0]
}
 8003854:	bf00      	nop
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	20000008 	.word	0x20000008
 8003864:	20001638 	.word	0x20001638

08003868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  return uwTick;
 800386c:	4b03      	ldr	r3, [pc, #12]	; (800387c <HAL_GetTick+0x14>)
 800386e:	681b      	ldr	r3, [r3, #0]
}
 8003870:	4618      	mov	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	20001638 	.word	0x20001638

08003880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003888:	f7ff ffee 	bl	8003868 <HAL_GetTick>
 800388c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003898:	d005      	beq.n	80038a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800389a:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <HAL_Delay+0x44>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	461a      	mov	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4413      	add	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038a6:	bf00      	nop
 80038a8:	f7ff ffde 	bl	8003868 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d8f7      	bhi.n	80038a8 <HAL_Delay+0x28>
  {
  }
}
 80038b8:	bf00      	nop
 80038ba:	bf00      	nop
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	20000008 	.word	0x20000008

080038c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e033      	b.n	8003946 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d109      	bne.n	80038fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7ff fc3c 	bl	8003164 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	f003 0310 	and.w	r3, r3, #16
 8003902:	2b00      	cmp	r3, #0
 8003904:	d118      	bne.n	8003938 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800390e:	f023 0302 	bic.w	r3, r3, #2
 8003912:	f043 0202 	orr.w	r2, r3, #2
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f94a 	bl	8003bb4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	f023 0303 	bic.w	r3, r3, #3
 800392e:	f043 0201 	orr.w	r2, r3, #1
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	641a      	str	r2, [r3, #64]	; 0x40
 8003936:	e001      	b.n	800393c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003944:	7bfb      	ldrb	r3, [r7, #15]
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
	...

08003950 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800395a:	2300      	movs	r3, #0
 800395c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003964:	2b01      	cmp	r3, #1
 8003966:	d101      	bne.n	800396c <HAL_ADC_ConfigChannel+0x1c>
 8003968:	2302      	movs	r3, #2
 800396a:	e113      	b.n	8003b94 <HAL_ADC_ConfigChannel+0x244>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2b09      	cmp	r3, #9
 800397a:	d925      	bls.n	80039c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68d9      	ldr	r1, [r3, #12]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	b29b      	uxth	r3, r3
 8003988:	461a      	mov	r2, r3
 800398a:	4613      	mov	r3, r2
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	4413      	add	r3, r2
 8003990:	3b1e      	subs	r3, #30
 8003992:	2207      	movs	r2, #7
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	43da      	mvns	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	400a      	ands	r2, r1
 80039a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68d9      	ldr	r1, [r3, #12]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	4618      	mov	r0, r3
 80039b4:	4603      	mov	r3, r0
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	4403      	add	r3, r0
 80039ba:	3b1e      	subs	r3, #30
 80039bc:	409a      	lsls	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	60da      	str	r2, [r3, #12]
 80039c6:	e022      	b.n	8003a0e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6919      	ldr	r1, [r3, #16]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	461a      	mov	r2, r3
 80039d6:	4613      	mov	r3, r2
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	4413      	add	r3, r2
 80039dc:	2207      	movs	r2, #7
 80039de:	fa02 f303 	lsl.w	r3, r2, r3
 80039e2:	43da      	mvns	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	400a      	ands	r2, r1
 80039ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6919      	ldr	r1, [r3, #16]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	689a      	ldr	r2, [r3, #8]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	4618      	mov	r0, r3
 80039fe:	4603      	mov	r3, r0
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	4403      	add	r3, r0
 8003a04:	409a      	lsls	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b06      	cmp	r3, #6
 8003a14:	d824      	bhi.n	8003a60 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	3b05      	subs	r3, #5
 8003a28:	221f      	movs	r2, #31
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	43da      	mvns	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	400a      	ands	r2, r1
 8003a36:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	4618      	mov	r0, r3
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4413      	add	r3, r2
 8003a50:	3b05      	subs	r3, #5
 8003a52:	fa00 f203 	lsl.w	r2, r0, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	635a      	str	r2, [r3, #52]	; 0x34
 8003a5e:	e04c      	b.n	8003afa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2b0c      	cmp	r3, #12
 8003a66:	d824      	bhi.n	8003ab2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	4613      	mov	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	3b23      	subs	r3, #35	; 0x23
 8003a7a:	221f      	movs	r2, #31
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	43da      	mvns	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	400a      	ands	r2, r1
 8003a88:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	4618      	mov	r0, r3
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	3b23      	subs	r3, #35	; 0x23
 8003aa4:	fa00 f203 	lsl.w	r2, r0, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	631a      	str	r2, [r3, #48]	; 0x30
 8003ab0:	e023      	b.n	8003afa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	4613      	mov	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	3b41      	subs	r3, #65	; 0x41
 8003ac4:	221f      	movs	r2, #31
 8003ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aca:	43da      	mvns	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	400a      	ands	r2, r1
 8003ad2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	3b41      	subs	r3, #65	; 0x41
 8003aee:	fa00 f203 	lsl.w	r2, r0, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003afa:	4b29      	ldr	r3, [pc, #164]	; (8003ba0 <HAL_ADC_ConfigChannel+0x250>)
 8003afc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a28      	ldr	r2, [pc, #160]	; (8003ba4 <HAL_ADC_ConfigChannel+0x254>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d10f      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x1d8>
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b12      	cmp	r3, #18
 8003b0e:	d10b      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a1d      	ldr	r2, [pc, #116]	; (8003ba4 <HAL_ADC_ConfigChannel+0x254>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d12b      	bne.n	8003b8a <HAL_ADC_ConfigChannel+0x23a>
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a1c      	ldr	r2, [pc, #112]	; (8003ba8 <HAL_ADC_ConfigChannel+0x258>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d003      	beq.n	8003b44 <HAL_ADC_ConfigChannel+0x1f4>
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b11      	cmp	r3, #17
 8003b42:	d122      	bne.n	8003b8a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a11      	ldr	r2, [pc, #68]	; (8003ba8 <HAL_ADC_ConfigChannel+0x258>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d111      	bne.n	8003b8a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b66:	4b11      	ldr	r3, [pc, #68]	; (8003bac <HAL_ADC_ConfigChannel+0x25c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a11      	ldr	r2, [pc, #68]	; (8003bb0 <HAL_ADC_ConfigChannel+0x260>)
 8003b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b70:	0c9a      	lsrs	r2, r3, #18
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b7c:	e002      	b.n	8003b84 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	3b01      	subs	r3, #1
 8003b82:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f9      	bne.n	8003b7e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr
 8003ba0:	40012300 	.word	0x40012300
 8003ba4:	40012000 	.word	0x40012000
 8003ba8:	10000012 	.word	0x10000012
 8003bac:	20000000 	.word	0x20000000
 8003bb0:	431bde83 	.word	0x431bde83

08003bb4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bbc:	4b79      	ldr	r3, [pc, #484]	; (8003da4 <ADC_Init+0x1f0>)
 8003bbe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003be8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6859      	ldr	r1, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	021a      	lsls	r2, r3, #8
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003c0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6859      	ldr	r1, [r3, #4]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6899      	ldr	r1, [r3, #8]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c46:	4a58      	ldr	r2, [pc, #352]	; (8003da8 <ADC_Init+0x1f4>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d022      	beq.n	8003c92 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689a      	ldr	r2, [r3, #8]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6899      	ldr	r1, [r3, #8]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6899      	ldr	r1, [r3, #8]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	609a      	str	r2, [r3, #8]
 8003c90:	e00f      	b.n	8003cb2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ca0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003cb0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0202 	bic.w	r2, r2, #2
 8003cc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6899      	ldr	r1, [r3, #8]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	7e1b      	ldrb	r3, [r3, #24]
 8003ccc:	005a      	lsls	r2, r3, #1
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d01b      	beq.n	8003d18 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003cfe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6859      	ldr	r1, [r3, #4]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	035a      	lsls	r2, r3, #13
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	605a      	str	r2, [r3, #4]
 8003d16:	e007      	b.n	8003d28 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d26:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003d36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	3b01      	subs	r3, #1
 8003d44:	051a      	lsls	r2, r3, #20
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6899      	ldr	r1, [r3, #8]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d6a:	025a      	lsls	r2, r3, #9
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6899      	ldr	r1, [r3, #8]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	029a      	lsls	r2, r3, #10
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	609a      	str	r2, [r3, #8]
}
 8003d98:	bf00      	nop
 8003d9a:	3714      	adds	r7, #20
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	40012300 	.word	0x40012300
 8003da8:	0f000001 	.word	0x0f000001

08003dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dbc:	4b0c      	ldr	r3, [pc, #48]	; (8003df0 <__NVIC_SetPriorityGrouping+0x44>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003dc8:	4013      	ands	r3, r2
 8003dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dde:	4a04      	ldr	r2, [pc, #16]	; (8003df0 <__NVIC_SetPriorityGrouping+0x44>)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	60d3      	str	r3, [r2, #12]
}
 8003de4:	bf00      	nop
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	e000ed00 	.word	0xe000ed00

08003df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003df8:	4b04      	ldr	r3, [pc, #16]	; (8003e0c <__NVIC_GetPriorityGrouping+0x18>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	0a1b      	lsrs	r3, r3, #8
 8003dfe:	f003 0307 	and.w	r3, r3, #7
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	e000ed00 	.word	0xe000ed00

08003e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	4603      	mov	r3, r0
 8003e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	db0b      	blt.n	8003e3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e22:	79fb      	ldrb	r3, [r7, #7]
 8003e24:	f003 021f 	and.w	r2, r3, #31
 8003e28:	4907      	ldr	r1, [pc, #28]	; (8003e48 <__NVIC_EnableIRQ+0x38>)
 8003e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2e:	095b      	lsrs	r3, r3, #5
 8003e30:	2001      	movs	r0, #1
 8003e32:	fa00 f202 	lsl.w	r2, r0, r2
 8003e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	e000e100 	.word	0xe000e100

08003e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	4603      	mov	r3, r0
 8003e54:	6039      	str	r1, [r7, #0]
 8003e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	db0a      	blt.n	8003e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	490c      	ldr	r1, [pc, #48]	; (8003e98 <__NVIC_SetPriority+0x4c>)
 8003e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6a:	0112      	lsls	r2, r2, #4
 8003e6c:	b2d2      	uxtb	r2, r2
 8003e6e:	440b      	add	r3, r1
 8003e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e74:	e00a      	b.n	8003e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	4908      	ldr	r1, [pc, #32]	; (8003e9c <__NVIC_SetPriority+0x50>)
 8003e7c:	79fb      	ldrb	r3, [r7, #7]
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	3b04      	subs	r3, #4
 8003e84:	0112      	lsls	r2, r2, #4
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	440b      	add	r3, r1
 8003e8a:	761a      	strb	r2, [r3, #24]
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	e000e100 	.word	0xe000e100
 8003e9c:	e000ed00 	.word	0xe000ed00

08003ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b089      	sub	sp, #36	; 0x24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	f1c3 0307 	rsb	r3, r3, #7
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	bf28      	it	cs
 8003ebe:	2304      	movcs	r3, #4
 8003ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	2b06      	cmp	r3, #6
 8003ec8:	d902      	bls.n	8003ed0 <NVIC_EncodePriority+0x30>
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	3b03      	subs	r3, #3
 8003ece:	e000      	b.n	8003ed2 <NVIC_EncodePriority+0x32>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	43da      	mvns	r2, r3
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	401a      	ands	r2, r3
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef2:	43d9      	mvns	r1, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ef8:	4313      	orrs	r3, r2
         );
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3724      	adds	r7, #36	; 0x24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
	...

08003f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f18:	d301      	bcc.n	8003f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e00f      	b.n	8003f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f1e:	4a0a      	ldr	r2, [pc, #40]	; (8003f48 <SysTick_Config+0x40>)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f26:	210f      	movs	r1, #15
 8003f28:	f04f 30ff 	mov.w	r0, #4294967295
 8003f2c:	f7ff ff8e 	bl	8003e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f30:	4b05      	ldr	r3, [pc, #20]	; (8003f48 <SysTick_Config+0x40>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f36:	4b04      	ldr	r3, [pc, #16]	; (8003f48 <SysTick_Config+0x40>)
 8003f38:	2207      	movs	r2, #7
 8003f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	e000e010 	.word	0xe000e010

08003f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f7ff ff29 	bl	8003dac <__NVIC_SetPriorityGrouping>
}
 8003f5a:	bf00      	nop
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b086      	sub	sp, #24
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	4603      	mov	r3, r0
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	607a      	str	r2, [r7, #4]
 8003f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f74:	f7ff ff3e 	bl	8003df4 <__NVIC_GetPriorityGrouping>
 8003f78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	68b9      	ldr	r1, [r7, #8]
 8003f7e:	6978      	ldr	r0, [r7, #20]
 8003f80:	f7ff ff8e 	bl	8003ea0 <NVIC_EncodePriority>
 8003f84:	4602      	mov	r2, r0
 8003f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f8a:	4611      	mov	r1, r2
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7ff ff5d 	bl	8003e4c <__NVIC_SetPriority>
}
 8003f92:	bf00      	nop
 8003f94:	3718      	adds	r7, #24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b082      	sub	sp, #8
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7ff ff31 	bl	8003e10 <__NVIC_EnableIRQ>
}
 8003fae:	bf00      	nop
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b082      	sub	sp, #8
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7ff ffa2 	bl	8003f08 <SysTick_Config>
 8003fc4:	4603      	mov	r3, r0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b089      	sub	sp, #36	; 0x24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	61fb      	str	r3, [r7, #28]
 8003fea:	e177      	b.n	80042dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fec:	2201      	movs	r2, #1
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	429a      	cmp	r2, r3
 8004006:	f040 8166 	bne.w	80042d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	2b01      	cmp	r3, #1
 8004014:	d005      	beq.n	8004022 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800401e:	2b02      	cmp	r3, #2
 8004020:	d130      	bne.n	8004084 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	2203      	movs	r2, #3
 800402e:	fa02 f303 	lsl.w	r3, r2, r3
 8004032:	43db      	mvns	r3, r3
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	4013      	ands	r3, r2
 8004038:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68da      	ldr	r2, [r3, #12]
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	fa02 f303 	lsl.w	r3, r2, r3
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	4313      	orrs	r3, r2
 800404a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004058:	2201      	movs	r2, #1
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	43db      	mvns	r3, r3
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	4013      	ands	r3, r2
 8004066:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	091b      	lsrs	r3, r3, #4
 800406e:	f003 0201 	and.w	r2, r3, #1
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	4313      	orrs	r3, r2
 800407c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f003 0303 	and.w	r3, r3, #3
 800408c:	2b03      	cmp	r3, #3
 800408e:	d017      	beq.n	80040c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	2203      	movs	r2, #3
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	43db      	mvns	r3, r3
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	4013      	ands	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	005b      	lsls	r3, r3, #1
 80040b0:	fa02 f303 	lsl.w	r3, r2, r3
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f003 0303 	and.w	r3, r3, #3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d123      	bne.n	8004114 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	08da      	lsrs	r2, r3, #3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3208      	adds	r2, #8
 80040d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	220f      	movs	r2, #15
 80040e4:	fa02 f303 	lsl.w	r3, r2, r3
 80040e8:	43db      	mvns	r3, r3
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	4013      	ands	r3, r2
 80040ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	f003 0307 	and.w	r3, r3, #7
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	4313      	orrs	r3, r2
 8004104:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	08da      	lsrs	r2, r3, #3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	3208      	adds	r2, #8
 800410e:	69b9      	ldr	r1, [r7, #24]
 8004110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	2203      	movs	r2, #3
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	43db      	mvns	r3, r3
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	4013      	ands	r3, r2
 800412a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f003 0203 	and.w	r2, r3, #3
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	fa02 f303 	lsl.w	r3, r2, r3
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	4313      	orrs	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 80c0 	beq.w	80042d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004156:	2300      	movs	r3, #0
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	4b66      	ldr	r3, [pc, #408]	; (80042f4 <HAL_GPIO_Init+0x324>)
 800415c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415e:	4a65      	ldr	r2, [pc, #404]	; (80042f4 <HAL_GPIO_Init+0x324>)
 8004160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004164:	6453      	str	r3, [r2, #68]	; 0x44
 8004166:	4b63      	ldr	r3, [pc, #396]	; (80042f4 <HAL_GPIO_Init+0x324>)
 8004168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004172:	4a61      	ldr	r2, [pc, #388]	; (80042f8 <HAL_GPIO_Init+0x328>)
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	089b      	lsrs	r3, r3, #2
 8004178:	3302      	adds	r3, #2
 800417a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800417e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	220f      	movs	r2, #15
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	43db      	mvns	r3, r3
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	4013      	ands	r3, r2
 8004194:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a58      	ldr	r2, [pc, #352]	; (80042fc <HAL_GPIO_Init+0x32c>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d037      	beq.n	800420e <HAL_GPIO_Init+0x23e>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a57      	ldr	r2, [pc, #348]	; (8004300 <HAL_GPIO_Init+0x330>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d031      	beq.n	800420a <HAL_GPIO_Init+0x23a>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a56      	ldr	r2, [pc, #344]	; (8004304 <HAL_GPIO_Init+0x334>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d02b      	beq.n	8004206 <HAL_GPIO_Init+0x236>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a55      	ldr	r2, [pc, #340]	; (8004308 <HAL_GPIO_Init+0x338>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d025      	beq.n	8004202 <HAL_GPIO_Init+0x232>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a54      	ldr	r2, [pc, #336]	; (800430c <HAL_GPIO_Init+0x33c>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d01f      	beq.n	80041fe <HAL_GPIO_Init+0x22e>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a53      	ldr	r2, [pc, #332]	; (8004310 <HAL_GPIO_Init+0x340>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d019      	beq.n	80041fa <HAL_GPIO_Init+0x22a>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a52      	ldr	r2, [pc, #328]	; (8004314 <HAL_GPIO_Init+0x344>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d013      	beq.n	80041f6 <HAL_GPIO_Init+0x226>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a51      	ldr	r2, [pc, #324]	; (8004318 <HAL_GPIO_Init+0x348>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d00d      	beq.n	80041f2 <HAL_GPIO_Init+0x222>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a50      	ldr	r2, [pc, #320]	; (800431c <HAL_GPIO_Init+0x34c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d007      	beq.n	80041ee <HAL_GPIO_Init+0x21e>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a4f      	ldr	r2, [pc, #316]	; (8004320 <HAL_GPIO_Init+0x350>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d101      	bne.n	80041ea <HAL_GPIO_Init+0x21a>
 80041e6:	2309      	movs	r3, #9
 80041e8:	e012      	b.n	8004210 <HAL_GPIO_Init+0x240>
 80041ea:	230a      	movs	r3, #10
 80041ec:	e010      	b.n	8004210 <HAL_GPIO_Init+0x240>
 80041ee:	2308      	movs	r3, #8
 80041f0:	e00e      	b.n	8004210 <HAL_GPIO_Init+0x240>
 80041f2:	2307      	movs	r3, #7
 80041f4:	e00c      	b.n	8004210 <HAL_GPIO_Init+0x240>
 80041f6:	2306      	movs	r3, #6
 80041f8:	e00a      	b.n	8004210 <HAL_GPIO_Init+0x240>
 80041fa:	2305      	movs	r3, #5
 80041fc:	e008      	b.n	8004210 <HAL_GPIO_Init+0x240>
 80041fe:	2304      	movs	r3, #4
 8004200:	e006      	b.n	8004210 <HAL_GPIO_Init+0x240>
 8004202:	2303      	movs	r3, #3
 8004204:	e004      	b.n	8004210 <HAL_GPIO_Init+0x240>
 8004206:	2302      	movs	r3, #2
 8004208:	e002      	b.n	8004210 <HAL_GPIO_Init+0x240>
 800420a:	2301      	movs	r3, #1
 800420c:	e000      	b.n	8004210 <HAL_GPIO_Init+0x240>
 800420e:	2300      	movs	r3, #0
 8004210:	69fa      	ldr	r2, [r7, #28]
 8004212:	f002 0203 	and.w	r2, r2, #3
 8004216:	0092      	lsls	r2, r2, #2
 8004218:	4093      	lsls	r3, r2
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	4313      	orrs	r3, r2
 800421e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004220:	4935      	ldr	r1, [pc, #212]	; (80042f8 <HAL_GPIO_Init+0x328>)
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	089b      	lsrs	r3, r3, #2
 8004226:	3302      	adds	r3, #2
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800422e:	4b3d      	ldr	r3, [pc, #244]	; (8004324 <HAL_GPIO_Init+0x354>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	43db      	mvns	r3, r3
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	4013      	ands	r3, r2
 800423c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	4313      	orrs	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004252:	4a34      	ldr	r2, [pc, #208]	; (8004324 <HAL_GPIO_Init+0x354>)
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004258:	4b32      	ldr	r3, [pc, #200]	; (8004324 <HAL_GPIO_Init+0x354>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	43db      	mvns	r3, r3
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	4013      	ands	r3, r2
 8004266:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	4313      	orrs	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800427c:	4a29      	ldr	r2, [pc, #164]	; (8004324 <HAL_GPIO_Init+0x354>)
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004282:	4b28      	ldr	r3, [pc, #160]	; (8004324 <HAL_GPIO_Init+0x354>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	43db      	mvns	r3, r3
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	4013      	ands	r3, r2
 8004290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042a6:	4a1f      	ldr	r2, [pc, #124]	; (8004324 <HAL_GPIO_Init+0x354>)
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042ac:	4b1d      	ldr	r3, [pc, #116]	; (8004324 <HAL_GPIO_Init+0x354>)
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	43db      	mvns	r3, r3
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	4013      	ands	r3, r2
 80042ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042d0:	4a14      	ldr	r2, [pc, #80]	; (8004324 <HAL_GPIO_Init+0x354>)
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	3301      	adds	r3, #1
 80042da:	61fb      	str	r3, [r7, #28]
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	2b0f      	cmp	r3, #15
 80042e0:	f67f ae84 	bls.w	8003fec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042e4:	bf00      	nop
 80042e6:	bf00      	nop
 80042e8:	3724      	adds	r7, #36	; 0x24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	40023800 	.word	0x40023800
 80042f8:	40013800 	.word	0x40013800
 80042fc:	40020000 	.word	0x40020000
 8004300:	40020400 	.word	0x40020400
 8004304:	40020800 	.word	0x40020800
 8004308:	40020c00 	.word	0x40020c00
 800430c:	40021000 	.word	0x40021000
 8004310:	40021400 	.word	0x40021400
 8004314:	40021800 	.word	0x40021800
 8004318:	40021c00 	.word	0x40021c00
 800431c:	40022000 	.word	0x40022000
 8004320:	40022400 	.word	0x40022400
 8004324:	40013c00 	.word	0x40013c00

08004328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	460b      	mov	r3, r1
 8004332:	807b      	strh	r3, [r7, #2]
 8004334:	4613      	mov	r3, r2
 8004336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004338:	787b      	ldrb	r3, [r7, #1]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800433e:	887a      	ldrh	r2, [r7, #2]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004344:	e003      	b.n	800434e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004346:	887b      	ldrh	r3, [r7, #2]
 8004348:	041a      	lsls	r2, r3, #16
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	619a      	str	r2, [r3, #24]
}
 800434e:	bf00      	nop
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
	...

0800435c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	4603      	mov	r3, r0
 8004364:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004366:	4b08      	ldr	r3, [pc, #32]	; (8004388 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004368:	695a      	ldr	r2, [r3, #20]
 800436a:	88fb      	ldrh	r3, [r7, #6]
 800436c:	4013      	ands	r3, r2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d006      	beq.n	8004380 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004372:	4a05      	ldr	r2, [pc, #20]	; (8004388 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004374:	88fb      	ldrh	r3, [r7, #6]
 8004376:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004378:	88fb      	ldrh	r3, [r7, #6]
 800437a:	4618      	mov	r0, r3
 800437c:	f7fe fc2e 	bl	8002bdc <HAL_GPIO_EXTI_Callback>
  }
}
 8004380:	bf00      	nop
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	40013c00 	.word	0x40013c00

0800438c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e12b      	b.n	80045f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d106      	bne.n	80043b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7fe ff1a 	bl	80031ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2224      	movs	r2, #36	; 0x24
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 0201 	bic.w	r2, r2, #1
 80043ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80043f0:	f002 fdd4 	bl	8006f9c <HAL_RCC_GetPCLK1Freq>
 80043f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	4a81      	ldr	r2, [pc, #516]	; (8004600 <HAL_I2C_Init+0x274>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d807      	bhi.n	8004410 <HAL_I2C_Init+0x84>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4a80      	ldr	r2, [pc, #512]	; (8004604 <HAL_I2C_Init+0x278>)
 8004404:	4293      	cmp	r3, r2
 8004406:	bf94      	ite	ls
 8004408:	2301      	movls	r3, #1
 800440a:	2300      	movhi	r3, #0
 800440c:	b2db      	uxtb	r3, r3
 800440e:	e006      	b.n	800441e <HAL_I2C_Init+0x92>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4a7d      	ldr	r2, [pc, #500]	; (8004608 <HAL_I2C_Init+0x27c>)
 8004414:	4293      	cmp	r3, r2
 8004416:	bf94      	ite	ls
 8004418:	2301      	movls	r3, #1
 800441a:	2300      	movhi	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e0e7      	b.n	80045f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	4a78      	ldr	r2, [pc, #480]	; (800460c <HAL_I2C_Init+0x280>)
 800442a:	fba2 2303 	umull	r2, r3, r2, r3
 800442e:	0c9b      	lsrs	r3, r3, #18
 8004430:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	430a      	orrs	r2, r1
 8004444:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	4a6a      	ldr	r2, [pc, #424]	; (8004600 <HAL_I2C_Init+0x274>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d802      	bhi.n	8004460 <HAL_I2C_Init+0xd4>
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	3301      	adds	r3, #1
 800445e:	e009      	b.n	8004474 <HAL_I2C_Init+0xe8>
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004466:	fb02 f303 	mul.w	r3, r2, r3
 800446a:	4a69      	ldr	r2, [pc, #420]	; (8004610 <HAL_I2C_Init+0x284>)
 800446c:	fba2 2303 	umull	r2, r3, r2, r3
 8004470:	099b      	lsrs	r3, r3, #6
 8004472:	3301      	adds	r3, #1
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6812      	ldr	r2, [r2, #0]
 8004478:	430b      	orrs	r3, r1
 800447a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004486:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	495c      	ldr	r1, [pc, #368]	; (8004600 <HAL_I2C_Init+0x274>)
 8004490:	428b      	cmp	r3, r1
 8004492:	d819      	bhi.n	80044c8 <HAL_I2C_Init+0x13c>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	1e59      	subs	r1, r3, #1
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	fbb1 f3f3 	udiv	r3, r1, r3
 80044a2:	1c59      	adds	r1, r3, #1
 80044a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80044a8:	400b      	ands	r3, r1
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00a      	beq.n	80044c4 <HAL_I2C_Init+0x138>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	1e59      	subs	r1, r3, #1
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80044bc:	3301      	adds	r3, #1
 80044be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044c2:	e051      	b.n	8004568 <HAL_I2C_Init+0x1dc>
 80044c4:	2304      	movs	r3, #4
 80044c6:	e04f      	b.n	8004568 <HAL_I2C_Init+0x1dc>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d111      	bne.n	80044f4 <HAL_I2C_Init+0x168>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	1e58      	subs	r0, r3, #1
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6859      	ldr	r1, [r3, #4]
 80044d8:	460b      	mov	r3, r1
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	440b      	add	r3, r1
 80044de:	fbb0 f3f3 	udiv	r3, r0, r3
 80044e2:	3301      	adds	r3, #1
 80044e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	bf0c      	ite	eq
 80044ec:	2301      	moveq	r3, #1
 80044ee:	2300      	movne	r3, #0
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	e012      	b.n	800451a <HAL_I2C_Init+0x18e>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	1e58      	subs	r0, r3, #1
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6859      	ldr	r1, [r3, #4]
 80044fc:	460b      	mov	r3, r1
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	440b      	add	r3, r1
 8004502:	0099      	lsls	r1, r3, #2
 8004504:	440b      	add	r3, r1
 8004506:	fbb0 f3f3 	udiv	r3, r0, r3
 800450a:	3301      	adds	r3, #1
 800450c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004510:	2b00      	cmp	r3, #0
 8004512:	bf0c      	ite	eq
 8004514:	2301      	moveq	r3, #1
 8004516:	2300      	movne	r3, #0
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <HAL_I2C_Init+0x196>
 800451e:	2301      	movs	r3, #1
 8004520:	e022      	b.n	8004568 <HAL_I2C_Init+0x1dc>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10e      	bne.n	8004548 <HAL_I2C_Init+0x1bc>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	1e58      	subs	r0, r3, #1
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6859      	ldr	r1, [r3, #4]
 8004532:	460b      	mov	r3, r1
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	440b      	add	r3, r1
 8004538:	fbb0 f3f3 	udiv	r3, r0, r3
 800453c:	3301      	adds	r3, #1
 800453e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004546:	e00f      	b.n	8004568 <HAL_I2C_Init+0x1dc>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	1e58      	subs	r0, r3, #1
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6859      	ldr	r1, [r3, #4]
 8004550:	460b      	mov	r3, r1
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	440b      	add	r3, r1
 8004556:	0099      	lsls	r1, r3, #2
 8004558:	440b      	add	r3, r1
 800455a:	fbb0 f3f3 	udiv	r3, r0, r3
 800455e:	3301      	adds	r3, #1
 8004560:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004564:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004568:	6879      	ldr	r1, [r7, #4]
 800456a:	6809      	ldr	r1, [r1, #0]
 800456c:	4313      	orrs	r3, r2
 800456e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	69da      	ldr	r2, [r3, #28]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	431a      	orrs	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	430a      	orrs	r2, r1
 800458a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004596:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	6911      	ldr	r1, [r2, #16]
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	68d2      	ldr	r2, [r2, #12]
 80045a2:	4311      	orrs	r1, r2
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6812      	ldr	r2, [r2, #0]
 80045a8:	430b      	orrs	r3, r1
 80045aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	695a      	ldr	r2, [r3, #20]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	430a      	orrs	r2, r1
 80045c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f042 0201 	orr.w	r2, r2, #1
 80045d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2220      	movs	r2, #32
 80045e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	000186a0 	.word	0x000186a0
 8004604:	001e847f 	.word	0x001e847f
 8004608:	003d08ff 	.word	0x003d08ff
 800460c:	431bde83 	.word	0x431bde83
 8004610:	10624dd3 	.word	0x10624dd3

08004614 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b088      	sub	sp, #32
 8004618:	af02      	add	r7, sp, #8
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	4608      	mov	r0, r1
 800461e:	4611      	mov	r1, r2
 8004620:	461a      	mov	r2, r3
 8004622:	4603      	mov	r3, r0
 8004624:	817b      	strh	r3, [r7, #10]
 8004626:	460b      	mov	r3, r1
 8004628:	813b      	strh	r3, [r7, #8]
 800462a:	4613      	mov	r3, r2
 800462c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800462e:	f7ff f91b 	bl	8003868 <HAL_GetTick>
 8004632:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b20      	cmp	r3, #32
 800463e:	f040 80d9 	bne.w	80047f4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	2319      	movs	r3, #25
 8004648:	2201      	movs	r2, #1
 800464a:	496d      	ldr	r1, [pc, #436]	; (8004800 <HAL_I2C_Mem_Write+0x1ec>)
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 fc7f 	bl	8004f50 <I2C_WaitOnFlagUntilTimeout>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d001      	beq.n	800465c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004658:	2302      	movs	r3, #2
 800465a:	e0cc      	b.n	80047f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004662:	2b01      	cmp	r3, #1
 8004664:	d101      	bne.n	800466a <HAL_I2C_Mem_Write+0x56>
 8004666:	2302      	movs	r3, #2
 8004668:	e0c5      	b.n	80047f6 <HAL_I2C_Mem_Write+0x1e2>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b01      	cmp	r3, #1
 800467e:	d007      	beq.n	8004690 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0201 	orr.w	r2, r2, #1
 800468e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800469e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2221      	movs	r2, #33	; 0x21
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2240      	movs	r2, #64	; 0x40
 80046ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6a3a      	ldr	r2, [r7, #32]
 80046ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80046c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4a4d      	ldr	r2, [pc, #308]	; (8004804 <HAL_I2C_Mem_Write+0x1f0>)
 80046d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046d2:	88f8      	ldrh	r0, [r7, #6]
 80046d4:	893a      	ldrh	r2, [r7, #8]
 80046d6:	8979      	ldrh	r1, [r7, #10]
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	9301      	str	r3, [sp, #4]
 80046dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	4603      	mov	r3, r0
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f000 fab6 	bl	8004c54 <I2C_RequestMemoryWrite>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d052      	beq.n	8004794 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e081      	b.n	80047f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f000 fd00 	bl	80050fc <I2C_WaitOnTXEFlagUntilTimeout>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00d      	beq.n	800471e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	2b04      	cmp	r3, #4
 8004708:	d107      	bne.n	800471a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004718:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e06b      	b.n	80047f6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	781a      	ldrb	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	1c5a      	adds	r2, r3, #1
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004738:	3b01      	subs	r3, #1
 800473a:	b29a      	uxth	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004744:	b29b      	uxth	r3, r3
 8004746:	3b01      	subs	r3, #1
 8004748:	b29a      	uxth	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b04      	cmp	r3, #4
 800475a:	d11b      	bne.n	8004794 <HAL_I2C_Mem_Write+0x180>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004760:	2b00      	cmp	r3, #0
 8004762:	d017      	beq.n	8004794 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	781a      	ldrb	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	1c5a      	adds	r2, r3, #1
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800477e:	3b01      	subs	r3, #1
 8004780:	b29a      	uxth	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800478a:	b29b      	uxth	r3, r3
 800478c:	3b01      	subs	r3, #1
 800478e:	b29a      	uxth	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1aa      	bne.n	80046f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 fcec 	bl	800517e <I2C_WaitOnBTFFlagUntilTimeout>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00d      	beq.n	80047c8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b0:	2b04      	cmp	r3, #4
 80047b2:	d107      	bne.n	80047c4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e016      	b.n	80047f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2220      	movs	r2, #32
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80047f0:	2300      	movs	r3, #0
 80047f2:	e000      	b.n	80047f6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80047f4:	2302      	movs	r3, #2
  }
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	00100002 	.word	0x00100002
 8004804:	ffff0000 	.word	0xffff0000

08004808 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b08c      	sub	sp, #48	; 0x30
 800480c:	af02      	add	r7, sp, #8
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	4608      	mov	r0, r1
 8004812:	4611      	mov	r1, r2
 8004814:	461a      	mov	r2, r3
 8004816:	4603      	mov	r3, r0
 8004818:	817b      	strh	r3, [r7, #10]
 800481a:	460b      	mov	r3, r1
 800481c:	813b      	strh	r3, [r7, #8]
 800481e:	4613      	mov	r3, r2
 8004820:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004822:	f7ff f821 	bl	8003868 <HAL_GetTick>
 8004826:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b20      	cmp	r3, #32
 8004832:	f040 8208 	bne.w	8004c46 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	2319      	movs	r3, #25
 800483c:	2201      	movs	r2, #1
 800483e:	497b      	ldr	r1, [pc, #492]	; (8004a2c <HAL_I2C_Mem_Read+0x224>)
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f000 fb85 	bl	8004f50 <I2C_WaitOnFlagUntilTimeout>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d001      	beq.n	8004850 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800484c:	2302      	movs	r3, #2
 800484e:	e1fb      	b.n	8004c48 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004856:	2b01      	cmp	r3, #1
 8004858:	d101      	bne.n	800485e <HAL_I2C_Mem_Read+0x56>
 800485a:	2302      	movs	r3, #2
 800485c:	e1f4      	b.n	8004c48 <HAL_I2C_Mem_Read+0x440>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b01      	cmp	r3, #1
 8004872:	d007      	beq.n	8004884 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 0201 	orr.w	r2, r2, #1
 8004882:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004892:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2222      	movs	r2, #34	; 0x22
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2240      	movs	r2, #64	; 0x40
 80048a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80048b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4a5b      	ldr	r2, [pc, #364]	; (8004a30 <HAL_I2C_Mem_Read+0x228>)
 80048c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048c6:	88f8      	ldrh	r0, [r7, #6]
 80048c8:	893a      	ldrh	r2, [r7, #8]
 80048ca:	8979      	ldrh	r1, [r7, #10]
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	9301      	str	r3, [sp, #4]
 80048d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	4603      	mov	r3, r0
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 fa52 	bl	8004d80 <I2C_RequestMemoryRead>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e1b0      	b.n	8004c48 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d113      	bne.n	8004916 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ee:	2300      	movs	r3, #0
 80048f0:	623b      	str	r3, [r7, #32]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	623b      	str	r3, [r7, #32]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	623b      	str	r3, [r7, #32]
 8004902:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	e184      	b.n	8004c20 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800491a:	2b01      	cmp	r3, #1
 800491c:	d11b      	bne.n	8004956 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800492c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800492e:	2300      	movs	r3, #0
 8004930:	61fb      	str	r3, [r7, #28]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	61fb      	str	r3, [r7, #28]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	61fb      	str	r3, [r7, #28]
 8004942:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	e164      	b.n	8004c20 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800495a:	2b02      	cmp	r3, #2
 800495c:	d11b      	bne.n	8004996 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800496c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800497c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800497e:	2300      	movs	r3, #0
 8004980:	61bb      	str	r3, [r7, #24]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	61bb      	str	r3, [r7, #24]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	61bb      	str	r3, [r7, #24]
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	e144      	b.n	8004c20 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004996:	2300      	movs	r3, #0
 8004998:	617b      	str	r3, [r7, #20]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	617b      	str	r3, [r7, #20]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	617b      	str	r3, [r7, #20]
 80049aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80049ac:	e138      	b.n	8004c20 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b2:	2b03      	cmp	r3, #3
 80049b4:	f200 80f1 	bhi.w	8004b9a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d123      	bne.n	8004a08 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 fc1b 	bl	8005200 <I2C_WaitOnRXNEFlagUntilTimeout>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e139      	b.n	8004c48 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	691a      	ldr	r2, [r3, #16]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	b2d2      	uxtb	r2, r2
 80049e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	1c5a      	adds	r2, r3, #1
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f0:	3b01      	subs	r3, #1
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	3b01      	subs	r3, #1
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a06:	e10b      	b.n	8004c20 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d14e      	bne.n	8004aae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a16:	2200      	movs	r2, #0
 8004a18:	4906      	ldr	r1, [pc, #24]	; (8004a34 <HAL_I2C_Mem_Read+0x22c>)
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 fa98 	bl	8004f50 <I2C_WaitOnFlagUntilTimeout>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d008      	beq.n	8004a38 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e10e      	b.n	8004c48 <HAL_I2C_Mem_Read+0x440>
 8004a2a:	bf00      	nop
 8004a2c:	00100002 	.word	0x00100002
 8004a30:	ffff0000 	.word	0xffff0000
 8004a34:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	691a      	ldr	r2, [r3, #16]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a52:	b2d2      	uxtb	r2, r2
 8004a54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	1c5a      	adds	r2, r3, #1
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a64:	3b01      	subs	r3, #1
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	3b01      	subs	r3, #1
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	691a      	ldr	r2, [r3, #16]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	b2d2      	uxtb	r2, r2
 8004a86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a96:	3b01      	subs	r3, #1
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004aac:	e0b8      	b.n	8004c20 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	4966      	ldr	r1, [pc, #408]	; (8004c50 <HAL_I2C_Mem_Read+0x448>)
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 fa49 	bl	8004f50 <I2C_WaitOnFlagUntilTimeout>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e0bf      	b.n	8004c48 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ad6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	691a      	ldr	r2, [r3, #16]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	b2d2      	uxtb	r2, r2
 8004ae4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	1c5a      	adds	r2, r3, #1
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af4:	3b01      	subs	r3, #1
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	3b01      	subs	r3, #1
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b10:	2200      	movs	r2, #0
 8004b12:	494f      	ldr	r1, [pc, #316]	; (8004c50 <HAL_I2C_Mem_Read+0x448>)
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 fa1b 	bl	8004f50 <I2C_WaitOnFlagUntilTimeout>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e091      	b.n	8004c48 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	691a      	ldr	r2, [r3, #16]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	b2d2      	uxtb	r2, r2
 8004b40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b46:	1c5a      	adds	r2, r3, #1
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b50:	3b01      	subs	r3, #1
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	691a      	ldr	r2, [r3, #16]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b70:	b2d2      	uxtb	r2, r2
 8004b72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	1c5a      	adds	r2, r3, #1
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b82:	3b01      	subs	r3, #1
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	3b01      	subs	r3, #1
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b98:	e042      	b.n	8004c20 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 fb2e 	bl	8005200 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e04c      	b.n	8004c48 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	691a      	ldr	r2, [r3, #16]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb8:	b2d2      	uxtb	r2, r2
 8004bba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	1c5a      	adds	r2, r3, #1
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	f003 0304 	and.w	r3, r3, #4
 8004bea:	2b04      	cmp	r3, #4
 8004bec:	d118      	bne.n	8004c20 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	691a      	ldr	r2, [r3, #16]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	b2d2      	uxtb	r2, r2
 8004bfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	1c5a      	adds	r2, r3, #1
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f47f aec2 	bne.w	80049ae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	e000      	b.n	8004c48 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004c46:	2302      	movs	r3, #2
  }
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3728      	adds	r7, #40	; 0x28
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	00010004 	.word	0x00010004

08004c54 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b088      	sub	sp, #32
 8004c58:	af02      	add	r7, sp, #8
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	4608      	mov	r0, r1
 8004c5e:	4611      	mov	r1, r2
 8004c60:	461a      	mov	r2, r3
 8004c62:	4603      	mov	r3, r0
 8004c64:	817b      	strh	r3, [r7, #10]
 8004c66:	460b      	mov	r3, r1
 8004c68:	813b      	strh	r3, [r7, #8]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	9300      	str	r3, [sp, #0]
 8004c82:	6a3b      	ldr	r3, [r7, #32]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f000 f960 	bl	8004f50 <I2C_WaitOnFlagUntilTimeout>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00d      	beq.n	8004cb2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ca4:	d103      	bne.n	8004cae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e05f      	b.n	8004d72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cb2:	897b      	ldrh	r3, [r7, #10]
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004cc0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc4:	6a3a      	ldr	r2, [r7, #32]
 8004cc6:	492d      	ldr	r1, [pc, #180]	; (8004d7c <I2C_RequestMemoryWrite+0x128>)
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f000 f998 	bl	8004ffe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d001      	beq.n	8004cd8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e04c      	b.n	8004d72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cd8:	2300      	movs	r3, #0
 8004cda:	617b      	str	r3, [r7, #20]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	617b      	str	r3, [r7, #20]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	617b      	str	r3, [r7, #20]
 8004cec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cf0:	6a39      	ldr	r1, [r7, #32]
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f000 fa02 	bl	80050fc <I2C_WaitOnTXEFlagUntilTimeout>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00d      	beq.n	8004d1a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	d107      	bne.n	8004d16 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e02b      	b.n	8004d72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d1a:	88fb      	ldrh	r3, [r7, #6]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d105      	bne.n	8004d2c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d20:	893b      	ldrh	r3, [r7, #8]
 8004d22:	b2da      	uxtb	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	611a      	str	r2, [r3, #16]
 8004d2a:	e021      	b.n	8004d70 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d2c:	893b      	ldrh	r3, [r7, #8]
 8004d2e:	0a1b      	lsrs	r3, r3, #8
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d3c:	6a39      	ldr	r1, [r7, #32]
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 f9dc 	bl	80050fc <I2C_WaitOnTXEFlagUntilTimeout>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00d      	beq.n	8004d66 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	2b04      	cmp	r3, #4
 8004d50:	d107      	bne.n	8004d62 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e005      	b.n	8004d72 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d66:	893b      	ldrh	r3, [r7, #8]
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3718      	adds	r7, #24
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	00010002 	.word	0x00010002

08004d80 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b088      	sub	sp, #32
 8004d84:	af02      	add	r7, sp, #8
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	4608      	mov	r0, r1
 8004d8a:	4611      	mov	r1, r2
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	4603      	mov	r3, r0
 8004d90:	817b      	strh	r3, [r7, #10]
 8004d92:	460b      	mov	r3, r1
 8004d94:	813b      	strh	r3, [r7, #8]
 8004d96:	4613      	mov	r3, r2
 8004d98:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004da8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004db8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	6a3b      	ldr	r3, [r7, #32]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f000 f8c2 	bl	8004f50 <I2C_WaitOnFlagUntilTimeout>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00d      	beq.n	8004dee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ddc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004de0:	d103      	bne.n	8004dea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004de8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e0aa      	b.n	8004f44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dee:	897b      	ldrh	r3, [r7, #10]
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	461a      	mov	r2, r3
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004dfc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	6a3a      	ldr	r2, [r7, #32]
 8004e02:	4952      	ldr	r1, [pc, #328]	; (8004f4c <I2C_RequestMemoryRead+0x1cc>)
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f000 f8fa 	bl	8004ffe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d001      	beq.n	8004e14 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e097      	b.n	8004f44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e14:	2300      	movs	r3, #0
 8004e16:	617b      	str	r3, [r7, #20]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	617b      	str	r3, [r7, #20]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	617b      	str	r3, [r7, #20]
 8004e28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e2c:	6a39      	ldr	r1, [r7, #32]
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f000 f964 	bl	80050fc <I2C_WaitOnTXEFlagUntilTimeout>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00d      	beq.n	8004e56 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	2b04      	cmp	r3, #4
 8004e40:	d107      	bne.n	8004e52 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e076      	b.n	8004f44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e56:	88fb      	ldrh	r3, [r7, #6]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d105      	bne.n	8004e68 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e5c:	893b      	ldrh	r3, [r7, #8]
 8004e5e:	b2da      	uxtb	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	611a      	str	r2, [r3, #16]
 8004e66:	e021      	b.n	8004eac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e68:	893b      	ldrh	r3, [r7, #8]
 8004e6a:	0a1b      	lsrs	r3, r3, #8
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e78:	6a39      	ldr	r1, [r7, #32]
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f000 f93e 	bl	80050fc <I2C_WaitOnTXEFlagUntilTimeout>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00d      	beq.n	8004ea2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	2b04      	cmp	r3, #4
 8004e8c:	d107      	bne.n	8004e9e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e050      	b.n	8004f44 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ea2:	893b      	ldrh	r3, [r7, #8]
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eae:	6a39      	ldr	r1, [r7, #32]
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f000 f923 	bl	80050fc <I2C_WaitOnTXEFlagUntilTimeout>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00d      	beq.n	8004ed8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec0:	2b04      	cmp	r3, #4
 8004ec2:	d107      	bne.n	8004ed4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ed2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e035      	b.n	8004f44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ee6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	6a3b      	ldr	r3, [r7, #32]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 f82b 	bl	8004f50 <I2C_WaitOnFlagUntilTimeout>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00d      	beq.n	8004f1c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f0e:	d103      	bne.n	8004f18 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f16:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e013      	b.n	8004f44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004f1c:	897b      	ldrh	r3, [r7, #10]
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	f043 0301 	orr.w	r3, r3, #1
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	6a3a      	ldr	r2, [r7, #32]
 8004f30:	4906      	ldr	r1, [pc, #24]	; (8004f4c <I2C_RequestMemoryRead+0x1cc>)
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 f863 	bl	8004ffe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e000      	b.n	8004f44 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3718      	adds	r7, #24
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	00010002 	.word	0x00010002

08004f50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	603b      	str	r3, [r7, #0]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f60:	e025      	b.n	8004fae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f68:	d021      	beq.n	8004fae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f6a:	f7fe fc7d 	bl	8003868 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d302      	bcc.n	8004f80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d116      	bne.n	8004fae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2220      	movs	r2, #32
 8004f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	f043 0220 	orr.w	r2, r3, #32
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e023      	b.n	8004ff6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	0c1b      	lsrs	r3, r3, #16
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d10d      	bne.n	8004fd4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	43da      	mvns	r2, r3
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	bf0c      	ite	eq
 8004fca:	2301      	moveq	r3, #1
 8004fcc:	2300      	movne	r3, #0
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	e00c      	b.n	8004fee <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	43da      	mvns	r2, r3
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	bf0c      	ite	eq
 8004fe6:	2301      	moveq	r3, #1
 8004fe8:	2300      	movne	r3, #0
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	461a      	mov	r2, r3
 8004fee:	79fb      	ldrb	r3, [r7, #7]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d0b6      	beq.n	8004f62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b084      	sub	sp, #16
 8005002:	af00      	add	r7, sp, #0
 8005004:	60f8      	str	r0, [r7, #12]
 8005006:	60b9      	str	r1, [r7, #8]
 8005008:	607a      	str	r2, [r7, #4]
 800500a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800500c:	e051      	b.n	80050b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800501c:	d123      	bne.n	8005066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800502c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005036:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2220      	movs	r2, #32
 8005042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	f043 0204 	orr.w	r2, r3, #4
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e046      	b.n	80050f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506c:	d021      	beq.n	80050b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800506e:	f7fe fbfb 	bl	8003868 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	429a      	cmp	r2, r3
 800507c:	d302      	bcc.n	8005084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d116      	bne.n	80050b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2220      	movs	r2, #32
 800508e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	f043 0220 	orr.w	r2, r3, #32
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e020      	b.n	80050f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	0c1b      	lsrs	r3, r3, #16
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d10c      	bne.n	80050d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	43da      	mvns	r2, r3
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	4013      	ands	r3, r2
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	bf14      	ite	ne
 80050ce:	2301      	movne	r3, #1
 80050d0:	2300      	moveq	r3, #0
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	e00b      	b.n	80050ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	43da      	mvns	r2, r3
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	4013      	ands	r3, r2
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	bf14      	ite	ne
 80050e8:	2301      	movne	r3, #1
 80050ea:	2300      	moveq	r3, #0
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d18d      	bne.n	800500e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005108:	e02d      	b.n	8005166 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 f8ce 	bl	80052ac <I2C_IsAcknowledgeFailed>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e02d      	b.n	8005176 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005120:	d021      	beq.n	8005166 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005122:	f7fe fba1 	bl	8003868 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	429a      	cmp	r2, r3
 8005130:	d302      	bcc.n	8005138 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d116      	bne.n	8005166 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2220      	movs	r2, #32
 8005142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005152:	f043 0220 	orr.w	r2, r3, #32
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e007      	b.n	8005176 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	695b      	ldr	r3, [r3, #20]
 800516c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005170:	2b80      	cmp	r3, #128	; 0x80
 8005172:	d1ca      	bne.n	800510a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b084      	sub	sp, #16
 8005182:	af00      	add	r7, sp, #0
 8005184:	60f8      	str	r0, [r7, #12]
 8005186:	60b9      	str	r1, [r7, #8]
 8005188:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800518a:	e02d      	b.n	80051e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 f88d 	bl	80052ac <I2C_IsAcknowledgeFailed>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e02d      	b.n	80051f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a2:	d021      	beq.n	80051e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051a4:	f7fe fb60 	bl	8003868 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d302      	bcc.n	80051ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d116      	bne.n	80051e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2220      	movs	r2, #32
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d4:	f043 0220 	orr.w	r2, r3, #32
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e007      	b.n	80051f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	f003 0304 	and.w	r3, r3, #4
 80051f2:	2b04      	cmp	r3, #4
 80051f4:	d1ca      	bne.n	800518c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800520c:	e042      	b.n	8005294 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	f003 0310 	and.w	r3, r3, #16
 8005218:	2b10      	cmp	r3, #16
 800521a:	d119      	bne.n	8005250 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f06f 0210 	mvn.w	r2, #16
 8005224:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2220      	movs	r2, #32
 8005230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e029      	b.n	80052a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005250:	f7fe fb0a 	bl	8003868 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	429a      	cmp	r2, r3
 800525e:	d302      	bcc.n	8005266 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d116      	bne.n	8005294 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2220      	movs	r2, #32
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005280:	f043 0220 	orr.w	r2, r3, #32
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e007      	b.n	80052a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800529e:	2b40      	cmp	r3, #64	; 0x40
 80052a0:	d1b5      	bne.n	800520e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052c2:	d11b      	bne.n	80052fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2220      	movs	r2, #32
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e8:	f043 0204 	orr.w	r2, r3, #4
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e000      	b.n	80052fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800530a:	b480      	push	{r7}
 800530c:	b083      	sub	sp, #12
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
 8005312:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b20      	cmp	r3, #32
 800531e:	d129      	bne.n	8005374 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2224      	movs	r2, #36	; 0x24
 8005324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f022 0201 	bic.w	r2, r2, #1
 8005336:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0210 	bic.w	r2, r2, #16
 8005346:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	430a      	orrs	r2, r1
 8005356:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f042 0201 	orr.w	r2, r2, #1
 8005366:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2220      	movs	r2, #32
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005370:	2300      	movs	r3, #0
 8005372:	e000      	b.n	8005376 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005374:	2302      	movs	r3, #2
  }
}
 8005376:	4618      	mov	r0, r3
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005382:	b480      	push	{r7}
 8005384:	b085      	sub	sp, #20
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
 800538a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800538c:	2300      	movs	r3, #0
 800538e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b20      	cmp	r3, #32
 800539a:	d12a      	bne.n	80053f2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2224      	movs	r2, #36	; 0x24
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f022 0201 	bic.w	r2, r2, #1
 80053b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ba:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80053bc:	89fb      	ldrh	r3, [r7, #14]
 80053be:	f023 030f 	bic.w	r3, r3, #15
 80053c2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	89fb      	ldrh	r3, [r7, #14]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	89fa      	ldrh	r2, [r7, #14]
 80053d4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f042 0201 	orr.w	r2, r2, #1
 80053e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2220      	movs	r2, #32
 80053ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80053ee:	2300      	movs	r3, #0
 80053f0:	e000      	b.n	80053f4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80053f2:	2302      	movs	r3, #2
  }
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3714      	adds	r7, #20
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005402:	b08f      	sub	sp, #60	; 0x3c
 8005404:	af0a      	add	r7, sp, #40	; 0x28
 8005406:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e10f      	b.n	8005632 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b00      	cmp	r3, #0
 8005422:	d106      	bne.n	8005432 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f00a f895 	bl	800f55c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2203      	movs	r2, #3
 8005436:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800543e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005442:	2b00      	cmp	r3, #0
 8005444:	d102      	bne.n	800544c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4618      	mov	r0, r3
 8005452:	f003 fd36 	bl	8008ec2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	603b      	str	r3, [r7, #0]
 800545c:	687e      	ldr	r6, [r7, #4]
 800545e:	466d      	mov	r5, sp
 8005460:	f106 0410 	add.w	r4, r6, #16
 8005464:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005466:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005468:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800546a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800546c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005470:	e885 0003 	stmia.w	r5, {r0, r1}
 8005474:	1d33      	adds	r3, r6, #4
 8005476:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005478:	6838      	ldr	r0, [r7, #0]
 800547a:	f003 fc0d 	bl	8008c98 <USB_CoreInit>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d005      	beq.n	8005490 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e0d0      	b.n	8005632 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2100      	movs	r1, #0
 8005496:	4618      	mov	r0, r3
 8005498:	f003 fd24 	bl	8008ee4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800549c:	2300      	movs	r3, #0
 800549e:	73fb      	strb	r3, [r7, #15]
 80054a0:	e04a      	b.n	8005538 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80054a2:	7bfa      	ldrb	r2, [r7, #15]
 80054a4:	6879      	ldr	r1, [r7, #4]
 80054a6:	4613      	mov	r3, r2
 80054a8:	00db      	lsls	r3, r3, #3
 80054aa:	1a9b      	subs	r3, r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	440b      	add	r3, r1
 80054b0:	333d      	adds	r3, #61	; 0x3d
 80054b2:	2201      	movs	r2, #1
 80054b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80054b6:	7bfa      	ldrb	r2, [r7, #15]
 80054b8:	6879      	ldr	r1, [r7, #4]
 80054ba:	4613      	mov	r3, r2
 80054bc:	00db      	lsls	r3, r3, #3
 80054be:	1a9b      	subs	r3, r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	440b      	add	r3, r1
 80054c4:	333c      	adds	r3, #60	; 0x3c
 80054c6:	7bfa      	ldrb	r2, [r7, #15]
 80054c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80054ca:	7bfa      	ldrb	r2, [r7, #15]
 80054cc:	7bfb      	ldrb	r3, [r7, #15]
 80054ce:	b298      	uxth	r0, r3
 80054d0:	6879      	ldr	r1, [r7, #4]
 80054d2:	4613      	mov	r3, r2
 80054d4:	00db      	lsls	r3, r3, #3
 80054d6:	1a9b      	subs	r3, r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	440b      	add	r3, r1
 80054dc:	3342      	adds	r3, #66	; 0x42
 80054de:	4602      	mov	r2, r0
 80054e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80054e2:	7bfa      	ldrb	r2, [r7, #15]
 80054e4:	6879      	ldr	r1, [r7, #4]
 80054e6:	4613      	mov	r3, r2
 80054e8:	00db      	lsls	r3, r3, #3
 80054ea:	1a9b      	subs	r3, r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	440b      	add	r3, r1
 80054f0:	333f      	adds	r3, #63	; 0x3f
 80054f2:	2200      	movs	r2, #0
 80054f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80054f6:	7bfa      	ldrb	r2, [r7, #15]
 80054f8:	6879      	ldr	r1, [r7, #4]
 80054fa:	4613      	mov	r3, r2
 80054fc:	00db      	lsls	r3, r3, #3
 80054fe:	1a9b      	subs	r3, r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	440b      	add	r3, r1
 8005504:	3344      	adds	r3, #68	; 0x44
 8005506:	2200      	movs	r2, #0
 8005508:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800550a:	7bfa      	ldrb	r2, [r7, #15]
 800550c:	6879      	ldr	r1, [r7, #4]
 800550e:	4613      	mov	r3, r2
 8005510:	00db      	lsls	r3, r3, #3
 8005512:	1a9b      	subs	r3, r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	440b      	add	r3, r1
 8005518:	3348      	adds	r3, #72	; 0x48
 800551a:	2200      	movs	r2, #0
 800551c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800551e:	7bfa      	ldrb	r2, [r7, #15]
 8005520:	6879      	ldr	r1, [r7, #4]
 8005522:	4613      	mov	r3, r2
 8005524:	00db      	lsls	r3, r3, #3
 8005526:	1a9b      	subs	r3, r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	440b      	add	r3, r1
 800552c:	3350      	adds	r3, #80	; 0x50
 800552e:	2200      	movs	r2, #0
 8005530:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005532:	7bfb      	ldrb	r3, [r7, #15]
 8005534:	3301      	adds	r3, #1
 8005536:	73fb      	strb	r3, [r7, #15]
 8005538:	7bfa      	ldrb	r2, [r7, #15]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	429a      	cmp	r2, r3
 8005540:	d3af      	bcc.n	80054a2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005542:	2300      	movs	r3, #0
 8005544:	73fb      	strb	r3, [r7, #15]
 8005546:	e044      	b.n	80055d2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005548:	7bfa      	ldrb	r2, [r7, #15]
 800554a:	6879      	ldr	r1, [r7, #4]
 800554c:	4613      	mov	r3, r2
 800554e:	00db      	lsls	r3, r3, #3
 8005550:	1a9b      	subs	r3, r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	440b      	add	r3, r1
 8005556:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800555a:	2200      	movs	r2, #0
 800555c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800555e:	7bfa      	ldrb	r2, [r7, #15]
 8005560:	6879      	ldr	r1, [r7, #4]
 8005562:	4613      	mov	r3, r2
 8005564:	00db      	lsls	r3, r3, #3
 8005566:	1a9b      	subs	r3, r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	440b      	add	r3, r1
 800556c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005570:	7bfa      	ldrb	r2, [r7, #15]
 8005572:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005574:	7bfa      	ldrb	r2, [r7, #15]
 8005576:	6879      	ldr	r1, [r7, #4]
 8005578:	4613      	mov	r3, r2
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	1a9b      	subs	r3, r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	440b      	add	r3, r1
 8005582:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005586:	2200      	movs	r2, #0
 8005588:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800558a:	7bfa      	ldrb	r2, [r7, #15]
 800558c:	6879      	ldr	r1, [r7, #4]
 800558e:	4613      	mov	r3, r2
 8005590:	00db      	lsls	r3, r3, #3
 8005592:	1a9b      	subs	r3, r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	440b      	add	r3, r1
 8005598:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800559c:	2200      	movs	r2, #0
 800559e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80055a0:	7bfa      	ldrb	r2, [r7, #15]
 80055a2:	6879      	ldr	r1, [r7, #4]
 80055a4:	4613      	mov	r3, r2
 80055a6:	00db      	lsls	r3, r3, #3
 80055a8:	1a9b      	subs	r3, r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	440b      	add	r3, r1
 80055ae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80055b6:	7bfa      	ldrb	r2, [r7, #15]
 80055b8:	6879      	ldr	r1, [r7, #4]
 80055ba:	4613      	mov	r3, r2
 80055bc:	00db      	lsls	r3, r3, #3
 80055be:	1a9b      	subs	r3, r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	440b      	add	r3, r1
 80055c4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80055c8:	2200      	movs	r2, #0
 80055ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
 80055ce:	3301      	adds	r3, #1
 80055d0:	73fb      	strb	r3, [r7, #15]
 80055d2:	7bfa      	ldrb	r2, [r7, #15]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d3b5      	bcc.n	8005548 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	603b      	str	r3, [r7, #0]
 80055e2:	687e      	ldr	r6, [r7, #4]
 80055e4:	466d      	mov	r5, sp
 80055e6:	f106 0410 	add.w	r4, r6, #16
 80055ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80055f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80055fa:	1d33      	adds	r3, r6, #4
 80055fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055fe:	6838      	ldr	r0, [r7, #0]
 8005600:	f003 fcbc 	bl	8008f7c <USB_DevInit>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d005      	beq.n	8005616 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2202      	movs	r2, #2
 800560e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e00d      	b.n	8005632 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4618      	mov	r0, r3
 800562c:	f004 fd38 	bl	800a0a0 <USB_DevDisconnect>

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800563a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b084      	sub	sp, #16
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800564e:	2b01      	cmp	r3, #1
 8005650:	d101      	bne.n	8005656 <HAL_PCD_Start+0x1c>
 8005652:	2302      	movs	r3, #2
 8005654:	e020      	b.n	8005698 <HAL_PCD_Start+0x5e>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005662:	2b01      	cmp	r3, #1
 8005664:	d109      	bne.n	800567a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800566a:	2b01      	cmp	r3, #1
 800566c:	d005      	beq.n	800567a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005672:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4618      	mov	r0, r3
 8005680:	f003 fc0e 	bl	8008ea0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4618      	mov	r0, r3
 800568a:	f004 fce8 	bl	800a05e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80056a0:	b590      	push	{r4, r7, lr}
 80056a2:	b08d      	sub	sp, #52	; 0x34
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ae:	6a3b      	ldr	r3, [r7, #32]
 80056b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f004 fda6 	bl	800a208 <USB_GetMode>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f040 839d 	bne.w	8005dfe <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f004 fd0a 	bl	800a0e2 <USB_ReadInterrupts>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f000 8393 	beq.w	8005dfc <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4618      	mov	r0, r3
 80056dc:	f004 fd01 	bl	800a0e2 <USB_ReadInterrupts>
 80056e0:	4603      	mov	r3, r0
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d107      	bne.n	80056fa <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	695a      	ldr	r2, [r3, #20]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f002 0202 	and.w	r2, r2, #2
 80056f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4618      	mov	r0, r3
 8005700:	f004 fcef 	bl	800a0e2 <USB_ReadInterrupts>
 8005704:	4603      	mov	r3, r0
 8005706:	f003 0310 	and.w	r3, r3, #16
 800570a:	2b10      	cmp	r3, #16
 800570c:	d161      	bne.n	80057d2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	699a      	ldr	r2, [r3, #24]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 0210 	bic.w	r2, r2, #16
 800571c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	f003 020f 	and.w	r2, r3, #15
 800572a:	4613      	mov	r3, r2
 800572c:	00db      	lsls	r3, r3, #3
 800572e:	1a9b      	subs	r3, r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	4413      	add	r3, r2
 800573a:	3304      	adds	r3, #4
 800573c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	0c5b      	lsrs	r3, r3, #17
 8005742:	f003 030f 	and.w	r3, r3, #15
 8005746:	2b02      	cmp	r3, #2
 8005748:	d124      	bne.n	8005794 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005750:	4013      	ands	r3, r2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d035      	beq.n	80057c2 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	091b      	lsrs	r3, r3, #4
 800575e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005760:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005764:	b29b      	uxth	r3, r3
 8005766:	461a      	mov	r2, r3
 8005768:	6a38      	ldr	r0, [r7, #32]
 800576a:	f004 fb26 	bl	8009dba <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	68da      	ldr	r2, [r3, #12]
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	091b      	lsrs	r3, r3, #4
 8005776:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800577a:	441a      	add	r2, r3
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	699a      	ldr	r2, [r3, #24]
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	091b      	lsrs	r3, r3, #4
 8005788:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800578c:	441a      	add	r2, r3
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	619a      	str	r2, [r3, #24]
 8005792:	e016      	b.n	80057c2 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	0c5b      	lsrs	r3, r3, #17
 8005798:	f003 030f 	and.w	r3, r3, #15
 800579c:	2b06      	cmp	r3, #6
 800579e:	d110      	bne.n	80057c2 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80057a6:	2208      	movs	r2, #8
 80057a8:	4619      	mov	r1, r3
 80057aa:	6a38      	ldr	r0, [r7, #32]
 80057ac:	f004 fb05 	bl	8009dba <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	699a      	ldr	r2, [r3, #24]
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	091b      	lsrs	r3, r3, #4
 80057b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057bc:	441a      	add	r2, r3
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	699a      	ldr	r2, [r3, #24]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f042 0210 	orr.w	r2, r2, #16
 80057d0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f004 fc83 	bl	800a0e2 <USB_ReadInterrupts>
 80057dc:	4603      	mov	r3, r0
 80057de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80057e6:	d16e      	bne.n	80058c6 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80057e8:	2300      	movs	r3, #0
 80057ea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f004 fc89 	bl	800a108 <USB_ReadDevAllOutEpInterrupt>
 80057f6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80057f8:	e062      	b.n	80058c0 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80057fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b00      	cmp	r3, #0
 8005802:	d057      	beq.n	80058b4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800580a:	b2d2      	uxtb	r2, r2
 800580c:	4611      	mov	r1, r2
 800580e:	4618      	mov	r0, r3
 8005810:	f004 fcae 	bl	800a170 <USB_ReadDevOutEPInterrupt>
 8005814:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	f003 0301 	and.w	r3, r3, #1
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00c      	beq.n	800583a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	4413      	add	r3, r2
 8005828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800582c:	461a      	mov	r2, r3
 800582e:	2301      	movs	r3, #1
 8005830:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005832:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 fdb1 	bl	800639c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	f003 0308 	and.w	r3, r3, #8
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00c      	beq.n	800585e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	4413      	add	r3, r2
 800584c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005850:	461a      	mov	r2, r3
 8005852:	2308      	movs	r3, #8
 8005854:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005856:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 feab 	bl	80065b4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	f003 0310 	and.w	r3, r3, #16
 8005864:	2b00      	cmp	r3, #0
 8005866:	d008      	beq.n	800587a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005874:	461a      	mov	r2, r3
 8005876:	2310      	movs	r3, #16
 8005878:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f003 0320 	and.w	r3, r3, #32
 8005880:	2b00      	cmp	r3, #0
 8005882:	d008      	beq.n	8005896 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	4413      	add	r3, r2
 800588c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005890:	461a      	mov	r2, r3
 8005892:	2320      	movs	r3, #32
 8005894:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d009      	beq.n	80058b4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	015a      	lsls	r2, r3, #5
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	4413      	add	r3, r2
 80058a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ac:	461a      	mov	r2, r3
 80058ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058b2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	3301      	adds	r3, #1
 80058b8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80058ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058bc:	085b      	lsrs	r3, r3, #1
 80058be:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80058c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d199      	bne.n	80057fa <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f004 fc09 	bl	800a0e2 <USB_ReadInterrupts>
 80058d0:	4603      	mov	r3, r0
 80058d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80058da:	f040 80c0 	bne.w	8005a5e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f004 fc2a 	bl	800a13c <USB_ReadDevAllInEpInterrupt>
 80058e8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80058ea:	2300      	movs	r3, #0
 80058ec:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80058ee:	e0b2      	b.n	8005a56 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80058f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 80a7 	beq.w	8005a4a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005902:	b2d2      	uxtb	r2, r2
 8005904:	4611      	mov	r1, r2
 8005906:	4618      	mov	r0, r3
 8005908:	f004 fc50 	bl	800a1ac <USB_ReadDevInEPInterrupt>
 800590c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	f003 0301 	and.w	r3, r3, #1
 8005914:	2b00      	cmp	r3, #0
 8005916:	d057      	beq.n	80059c8 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	f003 030f 	and.w	r3, r3, #15
 800591e:	2201      	movs	r2, #1
 8005920:	fa02 f303 	lsl.w	r3, r2, r3
 8005924:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800592c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	43db      	mvns	r3, r3
 8005932:	69f9      	ldr	r1, [r7, #28]
 8005934:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005938:	4013      	ands	r3, r2
 800593a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	4413      	add	r3, r2
 8005944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005948:	461a      	mov	r2, r3
 800594a:	2301      	movs	r3, #1
 800594c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d132      	bne.n	80059bc <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005956:	6879      	ldr	r1, [r7, #4]
 8005958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800595a:	4613      	mov	r3, r2
 800595c:	00db      	lsls	r3, r3, #3
 800595e:	1a9b      	subs	r3, r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	440b      	add	r3, r1
 8005964:	3348      	adds	r3, #72	; 0x48
 8005966:	6819      	ldr	r1, [r3, #0]
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800596c:	4613      	mov	r3, r2
 800596e:	00db      	lsls	r3, r3, #3
 8005970:	1a9b      	subs	r3, r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4403      	add	r3, r0
 8005976:	3344      	adds	r3, #68	; 0x44
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4419      	add	r1, r3
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005980:	4613      	mov	r3, r2
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	1a9b      	subs	r3, r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4403      	add	r3, r0
 800598a:	3348      	adds	r3, #72	; 0x48
 800598c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800598e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005990:	2b00      	cmp	r3, #0
 8005992:	d113      	bne.n	80059bc <HAL_PCD_IRQHandler+0x31c>
 8005994:	6879      	ldr	r1, [r7, #4]
 8005996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005998:	4613      	mov	r3, r2
 800599a:	00db      	lsls	r3, r3, #3
 800599c:	1a9b      	subs	r3, r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	440b      	add	r3, r1
 80059a2:	3350      	adds	r3, #80	; 0x50
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d108      	bne.n	80059bc <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6818      	ldr	r0, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80059b4:	461a      	mov	r2, r3
 80059b6:	2101      	movs	r1, #1
 80059b8:	f004 fc58 	bl	800a26c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80059bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	4619      	mov	r1, r3
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f009 fe59 	bl	800f67a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	f003 0308 	and.w	r3, r3, #8
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d008      	beq.n	80059e4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80059d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d4:	015a      	lsls	r2, r3, #5
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	4413      	add	r3, r2
 80059da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059de:	461a      	mov	r2, r3
 80059e0:	2308      	movs	r3, #8
 80059e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	f003 0310 	and.w	r3, r3, #16
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d008      	beq.n	8005a00 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80059ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f0:	015a      	lsls	r2, r3, #5
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	4413      	add	r3, r2
 80059f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059fa:	461a      	mov	r2, r3
 80059fc:	2310      	movs	r3, #16
 80059fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d008      	beq.n	8005a1c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a16:	461a      	mov	r2, r3
 8005a18:	2340      	movs	r3, #64	; 0x40
 8005a1a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d008      	beq.n	8005a38 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	015a      	lsls	r2, r3, #5
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a32:	461a      	mov	r2, r3
 8005a34:	2302      	movs	r3, #2
 8005a36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005a42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 fc1b 	bl	8006280 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a52:	085b      	lsrs	r3, r3, #1
 8005a54:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f47f af49 	bne.w	80058f0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f004 fb3d 	bl	800a0e2 <USB_ReadInterrupts>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a72:	d122      	bne.n	8005aba <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	69fa      	ldr	r2, [r7, #28]
 8005a7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a82:	f023 0301 	bic.w	r3, r3, #1
 8005a86:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d108      	bne.n	8005aa4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 fe27 	bl	80066f0 <HAL_PCDEx_LPM_Callback>
 8005aa2:	e002      	b.n	8005aaa <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f009 fe5f 	bl	800f768 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	695a      	ldr	r2, [r3, #20]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005ab8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f004 fb0f 	bl	800a0e2 <USB_ReadInterrupts>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005aca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ace:	d112      	bne.n	8005af6 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f003 0301 	and.w	r3, r3, #1
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d102      	bne.n	8005ae6 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f009 fe1b 	bl	800f71c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	695a      	ldr	r2, [r3, #20]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005af4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f004 faf1 	bl	800a0e2 <USB_ReadInterrupts>
 8005b00:	4603      	mov	r3, r0
 8005b02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b0a:	f040 80c7 	bne.w	8005c9c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	69fa      	ldr	r2, [r7, #28]
 8005b18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b1c:	f023 0301 	bic.w	r3, r3, #1
 8005b20:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2110      	movs	r1, #16
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f003 fb8b 	bl	8009244 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b2e:	2300      	movs	r3, #0
 8005b30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b32:	e056      	b.n	8005be2 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b36:	015a      	lsls	r2, r3, #5
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b40:	461a      	mov	r2, r3
 8005b42:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b46:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4a:	015a      	lsls	r2, r3, #5
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	4413      	add	r3, r2
 8005b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b58:	0151      	lsls	r1, r2, #5
 8005b5a:	69fa      	ldr	r2, [r7, #28]
 8005b5c:	440a      	add	r2, r1
 8005b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b66:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b78:	0151      	lsls	r1, r2, #5
 8005b7a:	69fa      	ldr	r2, [r7, #28]
 8005b7c:	440a      	add	r2, r1
 8005b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b86:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b94:	461a      	mov	r2, r3
 8005b96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b9a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9e:	015a      	lsls	r2, r3, #5
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bac:	0151      	lsls	r1, r2, #5
 8005bae:	69fa      	ldr	r2, [r7, #28]
 8005bb0:	440a      	add	r2, r1
 8005bb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005bba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bcc:	0151      	lsls	r1, r2, #5
 8005bce:	69fa      	ldr	r2, [r7, #28]
 8005bd0:	440a      	add	r2, r1
 8005bd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005bda:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bde:	3301      	adds	r3, #1
 8005be0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d3a3      	bcc.n	8005b34 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf2:	69db      	ldr	r3, [r3, #28]
 8005bf4:	69fa      	ldr	r2, [r7, #28]
 8005bf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bfa:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005bfe:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d016      	beq.n	8005c36 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c12:	69fa      	ldr	r2, [r7, #28]
 8005c14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c18:	f043 030b 	orr.w	r3, r3, #11
 8005c1c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c28:	69fa      	ldr	r2, [r7, #28]
 8005c2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c2e:	f043 030b 	orr.w	r3, r3, #11
 8005c32:	6453      	str	r3, [r2, #68]	; 0x44
 8005c34:	e015      	b.n	8005c62 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	69fa      	ldr	r2, [r7, #28]
 8005c40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005c48:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005c4c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	69fa      	ldr	r2, [r7, #28]
 8005c58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c5c:	f043 030b 	orr.w	r3, r3, #11
 8005c60:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	69fa      	ldr	r2, [r7, #28]
 8005c6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c70:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005c74:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6818      	ldr	r0, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005c86:	461a      	mov	r2, r3
 8005c88:	f004 faf0 	bl	800a26c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	695a      	ldr	r2, [r3, #20]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005c9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f004 fa1e 	bl	800a0e2 <USB_ReadInterrupts>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cb0:	d124      	bne.n	8005cfc <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f004 fab4 	bl	800a224 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f003 fb1c 	bl	80092fe <USB_GetDevSpeed>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	461a      	mov	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681c      	ldr	r4, [r3, #0]
 8005cd2:	f001 f957 	bl	8006f84 <HAL_RCC_GetHCLKFreq>
 8005cd6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	461a      	mov	r2, r3
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	f003 f83b 	bl	8008d5c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f009 fcef 	bl	800f6ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	695a      	ldr	r2, [r3, #20]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005cfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4618      	mov	r0, r3
 8005d02:	f004 f9ee 	bl	800a0e2 <USB_ReadInterrupts>
 8005d06:	4603      	mov	r3, r0
 8005d08:	f003 0308 	and.w	r3, r3, #8
 8005d0c:	2b08      	cmp	r3, #8
 8005d0e:	d10a      	bne.n	8005d26 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f009 fccc 	bl	800f6ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	695a      	ldr	r2, [r3, #20]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f002 0208 	and.w	r2, r2, #8
 8005d24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f004 f9d9 	bl	800a0e2 <USB_ReadInterrupts>
 8005d30:	4603      	mov	r3, r0
 8005d32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d3a:	d10f      	bne.n	8005d5c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	4619      	mov	r1, r3
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f009 fd2e 	bl	800f7a8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	695a      	ldr	r2, [r3, #20]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005d5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4618      	mov	r0, r3
 8005d62:	f004 f9be 	bl	800a0e2 <USB_ReadInterrupts>
 8005d66:	4603      	mov	r3, r0
 8005d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d70:	d10f      	bne.n	8005d92 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005d72:	2300      	movs	r3, #0
 8005d74:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f009 fd01 	bl	800f784 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	695a      	ldr	r2, [r3, #20]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005d90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f004 f9a3 	bl	800a0e2 <USB_ReadInterrupts>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005da6:	d10a      	bne.n	8005dbe <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f009 fd0f 	bl	800f7cc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	695a      	ldr	r2, [r3, #20]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005dbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f004 f98d 	bl	800a0e2 <USB_ReadInterrupts>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	f003 0304 	and.w	r3, r3, #4
 8005dce:	2b04      	cmp	r3, #4
 8005dd0:	d115      	bne.n	8005dfe <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	f003 0304 	and.w	r3, r3, #4
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d002      	beq.n	8005dea <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f009 fcff 	bl	800f7e8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6859      	ldr	r1, [r3, #4]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	69ba      	ldr	r2, [r7, #24]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	605a      	str	r2, [r3, #4]
 8005dfa:	e000      	b.n	8005dfe <HAL_PCD_IRQHandler+0x75e>
      return;
 8005dfc:	bf00      	nop
    }
  }
}
 8005dfe:	3734      	adds	r7, #52	; 0x34
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd90      	pop	{r4, r7, pc}

08005e04 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d101      	bne.n	8005e1e <HAL_PCD_SetAddress+0x1a>
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	e013      	b.n	8005e46 <HAL_PCD_SetAddress+0x42>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	78fa      	ldrb	r2, [r7, #3]
 8005e2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	78fa      	ldrb	r2, [r7, #3]
 8005e34:	4611      	mov	r1, r2
 8005e36:	4618      	mov	r0, r3
 8005e38:	f004 f8eb 	bl	800a012 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3708      	adds	r7, #8
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b084      	sub	sp, #16
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
 8005e56:	4608      	mov	r0, r1
 8005e58:	4611      	mov	r1, r2
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	70fb      	strb	r3, [r7, #3]
 8005e60:	460b      	mov	r3, r1
 8005e62:	803b      	strh	r3, [r7, #0]
 8005e64:	4613      	mov	r3, r2
 8005e66:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005e6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	da0f      	bge.n	8005e94 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e74:	78fb      	ldrb	r3, [r7, #3]
 8005e76:	f003 020f 	and.w	r2, r3, #15
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	00db      	lsls	r3, r3, #3
 8005e7e:	1a9b      	subs	r3, r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	3338      	adds	r3, #56	; 0x38
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	4413      	add	r3, r2
 8005e88:	3304      	adds	r3, #4
 8005e8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	705a      	strb	r2, [r3, #1]
 8005e92:	e00f      	b.n	8005eb4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e94:	78fb      	ldrb	r3, [r7, #3]
 8005e96:	f003 020f 	and.w	r2, r3, #15
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	00db      	lsls	r3, r3, #3
 8005e9e:	1a9b      	subs	r3, r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	3304      	adds	r3, #4
 8005eac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005eb4:	78fb      	ldrb	r3, [r7, #3]
 8005eb6:	f003 030f 	and.w	r3, r3, #15
 8005eba:	b2da      	uxtb	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005ec0:	883a      	ldrh	r2, [r7, #0]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	78ba      	ldrb	r2, [r7, #2]
 8005eca:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	785b      	ldrb	r3, [r3, #1]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d004      	beq.n	8005ede <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005ede:	78bb      	ldrb	r3, [r7, #2]
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d102      	bne.n	8005eea <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d101      	bne.n	8005ef8 <HAL_PCD_EP_Open+0xaa>
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	e00e      	b.n	8005f16 <HAL_PCD_EP_Open+0xc8>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68f9      	ldr	r1, [r7, #12]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f003 fa1e 	bl	8009348 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005f14:	7afb      	ldrb	r3, [r7, #11]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b084      	sub	sp, #16
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
 8005f26:	460b      	mov	r3, r1
 8005f28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	da0f      	bge.n	8005f52 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f32:	78fb      	ldrb	r3, [r7, #3]
 8005f34:	f003 020f 	and.w	r2, r3, #15
 8005f38:	4613      	mov	r3, r2
 8005f3a:	00db      	lsls	r3, r3, #3
 8005f3c:	1a9b      	subs	r3, r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	3338      	adds	r3, #56	; 0x38
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	4413      	add	r3, r2
 8005f46:	3304      	adds	r3, #4
 8005f48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	705a      	strb	r2, [r3, #1]
 8005f50:	e00f      	b.n	8005f72 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f52:	78fb      	ldrb	r3, [r7, #3]
 8005f54:	f003 020f 	and.w	r2, r3, #15
 8005f58:	4613      	mov	r3, r2
 8005f5a:	00db      	lsls	r3, r3, #3
 8005f5c:	1a9b      	subs	r3, r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	4413      	add	r3, r2
 8005f68:	3304      	adds	r3, #4
 8005f6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005f72:	78fb      	ldrb	r3, [r7, #3]
 8005f74:	f003 030f 	and.w	r3, r3, #15
 8005f78:	b2da      	uxtb	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d101      	bne.n	8005f8c <HAL_PCD_EP_Close+0x6e>
 8005f88:	2302      	movs	r3, #2
 8005f8a:	e00e      	b.n	8005faa <HAL_PCD_EP_Close+0x8c>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68f9      	ldr	r1, [r7, #12]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f003 fa5c 	bl	8009458 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b086      	sub	sp, #24
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	60f8      	str	r0, [r7, #12]
 8005fba:	607a      	str	r2, [r7, #4]
 8005fbc:	603b      	str	r3, [r7, #0]
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005fc2:	7afb      	ldrb	r3, [r7, #11]
 8005fc4:	f003 020f 	and.w	r2, r3, #15
 8005fc8:	4613      	mov	r3, r2
 8005fca:	00db      	lsls	r3, r3, #3
 8005fcc:	1a9b      	subs	r3, r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	3304      	adds	r3, #4
 8005fda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	2200      	movs	r2, #0
 8005fec:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ff4:	7afb      	ldrb	r3, [r7, #11]
 8005ff6:	f003 030f 	and.w	r3, r3, #15
 8005ffa:	b2da      	uxtb	r2, r3
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d102      	bne.n	800600e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800600e:	7afb      	ldrb	r3, [r7, #11]
 8006010:	f003 030f 	and.w	r3, r3, #15
 8006014:	2b00      	cmp	r3, #0
 8006016:	d109      	bne.n	800602c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6818      	ldr	r0, [r3, #0]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	b2db      	uxtb	r3, r3
 8006022:	461a      	mov	r2, r3
 8006024:	6979      	ldr	r1, [r7, #20]
 8006026:	f003 fd37 	bl	8009a98 <USB_EP0StartXfer>
 800602a:	e008      	b.n	800603e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6818      	ldr	r0, [r3, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	b2db      	uxtb	r3, r3
 8006036:	461a      	mov	r2, r3
 8006038:	6979      	ldr	r1, [r7, #20]
 800603a:	f003 fae9 	bl	8009610 <USB_EPStartXfer>
  }

  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3718      	adds	r7, #24
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	460b      	mov	r3, r1
 8006052:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006054:	78fb      	ldrb	r3, [r7, #3]
 8006056:	f003 020f 	and.w	r2, r3, #15
 800605a:	6879      	ldr	r1, [r7, #4]
 800605c:	4613      	mov	r3, r2
 800605e:	00db      	lsls	r3, r3, #3
 8006060:	1a9b      	subs	r3, r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	440b      	add	r3, r1
 8006066:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800606a:	681b      	ldr	r3, [r3, #0]
}
 800606c:	4618      	mov	r0, r3
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	607a      	str	r2, [r7, #4]
 8006082:	603b      	str	r3, [r7, #0]
 8006084:	460b      	mov	r3, r1
 8006086:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006088:	7afb      	ldrb	r3, [r7, #11]
 800608a:	f003 020f 	and.w	r2, r3, #15
 800608e:	4613      	mov	r3, r2
 8006090:	00db      	lsls	r3, r3, #3
 8006092:	1a9b      	subs	r3, r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	3338      	adds	r3, #56	; 0x38
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	4413      	add	r3, r2
 800609c:	3304      	adds	r3, #4
 800609e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	683a      	ldr	r2, [r7, #0]
 80060aa:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	2200      	movs	r2, #0
 80060b0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	2201      	movs	r2, #1
 80060b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060b8:	7afb      	ldrb	r3, [r7, #11]
 80060ba:	f003 030f 	and.w	r3, r3, #15
 80060be:	b2da      	uxtb	r2, r3
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d102      	bne.n	80060d2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80060d2:	7afb      	ldrb	r3, [r7, #11]
 80060d4:	f003 030f 	and.w	r3, r3, #15
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d109      	bne.n	80060f0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6818      	ldr	r0, [r3, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	461a      	mov	r2, r3
 80060e8:	6979      	ldr	r1, [r7, #20]
 80060ea:	f003 fcd5 	bl	8009a98 <USB_EP0StartXfer>
 80060ee:	e008      	b.n	8006102 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6818      	ldr	r0, [r3, #0]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	461a      	mov	r2, r3
 80060fc:	6979      	ldr	r1, [r7, #20]
 80060fe:	f003 fa87 	bl	8009610 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3718      	adds	r7, #24
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	460b      	mov	r3, r1
 8006116:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006118:	78fb      	ldrb	r3, [r7, #3]
 800611a:	f003 020f 	and.w	r2, r3, #15
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	429a      	cmp	r2, r3
 8006124:	d901      	bls.n	800612a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e050      	b.n	80061cc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800612a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800612e:	2b00      	cmp	r3, #0
 8006130:	da0f      	bge.n	8006152 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006132:	78fb      	ldrb	r3, [r7, #3]
 8006134:	f003 020f 	and.w	r2, r3, #15
 8006138:	4613      	mov	r3, r2
 800613a:	00db      	lsls	r3, r3, #3
 800613c:	1a9b      	subs	r3, r3, r2
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	3338      	adds	r3, #56	; 0x38
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	4413      	add	r3, r2
 8006146:	3304      	adds	r3, #4
 8006148:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2201      	movs	r2, #1
 800614e:	705a      	strb	r2, [r3, #1]
 8006150:	e00d      	b.n	800616e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006152:	78fa      	ldrb	r2, [r7, #3]
 8006154:	4613      	mov	r3, r2
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	1a9b      	subs	r3, r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	4413      	add	r3, r2
 8006164:	3304      	adds	r3, #4
 8006166:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2201      	movs	r2, #1
 8006172:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006174:	78fb      	ldrb	r3, [r7, #3]
 8006176:	f003 030f 	and.w	r3, r3, #15
 800617a:	b2da      	uxtb	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006186:	2b01      	cmp	r3, #1
 8006188:	d101      	bne.n	800618e <HAL_PCD_EP_SetStall+0x82>
 800618a:	2302      	movs	r3, #2
 800618c:	e01e      	b.n	80061cc <HAL_PCD_EP_SetStall+0xc0>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68f9      	ldr	r1, [r7, #12]
 800619c:	4618      	mov	r0, r3
 800619e:	f003 fe64 	bl	8009e6a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80061a2:	78fb      	ldrb	r3, [r7, #3]
 80061a4:	f003 030f 	and.w	r3, r3, #15
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10a      	bne.n	80061c2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6818      	ldr	r0, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	b2d9      	uxtb	r1, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80061bc:	461a      	mov	r2, r3
 80061be:	f004 f855 	bl	800a26c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	460b      	mov	r3, r1
 80061de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80061e0:	78fb      	ldrb	r3, [r7, #3]
 80061e2:	f003 020f 	and.w	r2, r3, #15
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d901      	bls.n	80061f2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e042      	b.n	8006278 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80061f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	da0f      	bge.n	800621a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061fa:	78fb      	ldrb	r3, [r7, #3]
 80061fc:	f003 020f 	and.w	r2, r3, #15
 8006200:	4613      	mov	r3, r2
 8006202:	00db      	lsls	r3, r3, #3
 8006204:	1a9b      	subs	r3, r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	3338      	adds	r3, #56	; 0x38
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	4413      	add	r3, r2
 800620e:	3304      	adds	r3, #4
 8006210:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2201      	movs	r2, #1
 8006216:	705a      	strb	r2, [r3, #1]
 8006218:	e00f      	b.n	800623a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800621a:	78fb      	ldrb	r3, [r7, #3]
 800621c:	f003 020f 	and.w	r2, r3, #15
 8006220:	4613      	mov	r3, r2
 8006222:	00db      	lsls	r3, r3, #3
 8006224:	1a9b      	subs	r3, r3, r2
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	4413      	add	r3, r2
 8006230:	3304      	adds	r3, #4
 8006232:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006240:	78fb      	ldrb	r3, [r7, #3]
 8006242:	f003 030f 	and.w	r3, r3, #15
 8006246:	b2da      	uxtb	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006252:	2b01      	cmp	r3, #1
 8006254:	d101      	bne.n	800625a <HAL_PCD_EP_ClrStall+0x86>
 8006256:	2302      	movs	r3, #2
 8006258:	e00e      	b.n	8006278 <HAL_PCD_EP_ClrStall+0xa4>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68f9      	ldr	r1, [r7, #12]
 8006268:	4618      	mov	r0, r3
 800626a:	f003 fe6c 	bl	8009f46 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b08a      	sub	sp, #40	; 0x28
 8006284:	af02      	add	r7, sp, #8
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006294:	683a      	ldr	r2, [r7, #0]
 8006296:	4613      	mov	r3, r2
 8006298:	00db      	lsls	r3, r3, #3
 800629a:	1a9b      	subs	r3, r3, r2
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	3338      	adds	r3, #56	; 0x38
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	4413      	add	r3, r2
 80062a4:	3304      	adds	r3, #4
 80062a6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	699a      	ldr	r2, [r3, #24]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d901      	bls.n	80062b8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e06c      	b.n	8006392 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	695a      	ldr	r2, [r3, #20]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	699b      	ldr	r3, [r3, #24]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	69fa      	ldr	r2, [r7, #28]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d902      	bls.n	80062d4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	3303      	adds	r3, #3
 80062d8:	089b      	lsrs	r3, r3, #2
 80062da:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80062dc:	e02b      	b.n	8006336 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	695a      	ldr	r2, [r3, #20]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	69fa      	ldr	r2, [r7, #28]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d902      	bls.n	80062fa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	3303      	adds	r3, #3
 80062fe:	089b      	lsrs	r3, r3, #2
 8006300:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	68d9      	ldr	r1, [r3, #12]
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	b2da      	uxtb	r2, r3
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006312:	b2db      	uxtb	r3, r3
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	4603      	mov	r3, r0
 8006318:	6978      	ldr	r0, [r7, #20]
 800631a:	f003 fd10 	bl	8009d3e <USB_WritePacket>

    ep->xfer_buff  += len;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	68da      	ldr	r2, [r3, #12]
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	441a      	add	r2, r3
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	699a      	ldr	r2, [r3, #24]
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	441a      	add	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	4413      	add	r3, r2
 800633e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	b29b      	uxth	r3, r3
 8006346:	69ba      	ldr	r2, [r7, #24]
 8006348:	429a      	cmp	r2, r3
 800634a:	d809      	bhi.n	8006360 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	699a      	ldr	r2, [r3, #24]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006354:	429a      	cmp	r2, r3
 8006356:	d203      	bcs.n	8006360 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1be      	bne.n	80062de <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	695a      	ldr	r2, [r3, #20]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	429a      	cmp	r2, r3
 800636a:	d811      	bhi.n	8006390 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	f003 030f 	and.w	r3, r3, #15
 8006372:	2201      	movs	r2, #1
 8006374:	fa02 f303 	lsl.w	r3, r2, r3
 8006378:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006380:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	43db      	mvns	r3, r3
 8006386:	6939      	ldr	r1, [r7, #16]
 8006388:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800638c:	4013      	ands	r3, r2
 800638e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3720      	adds	r7, #32
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
	...

0800639c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	333c      	adds	r3, #60	; 0x3c
 80063b4:	3304      	adds	r3, #4
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	015a      	lsls	r2, r3, #5
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	4413      	add	r3, r2
 80063c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	f040 80a0 	bne.w	8006514 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	f003 0308 	and.w	r3, r3, #8
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d015      	beq.n	800640a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4a72      	ldr	r2, [pc, #456]	; (80065ac <PCD_EP_OutXfrComplete_int+0x210>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	f240 80dd 	bls.w	80065a2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f000 80d7 	beq.w	80065a2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	015a      	lsls	r2, r3, #5
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	4413      	add	r3, r2
 80063fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006400:	461a      	mov	r2, r3
 8006402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006406:	6093      	str	r3, [r2, #8]
 8006408:	e0cb      	b.n	80065a2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	f003 0320 	and.w	r3, r3, #32
 8006410:	2b00      	cmp	r3, #0
 8006412:	d009      	beq.n	8006428 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	4413      	add	r3, r2
 800641c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006420:	461a      	mov	r2, r3
 8006422:	2320      	movs	r3, #32
 8006424:	6093      	str	r3, [r2, #8]
 8006426:	e0bc      	b.n	80065a2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800642e:	2b00      	cmp	r3, #0
 8006430:	f040 80b7 	bne.w	80065a2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	4a5d      	ldr	r2, [pc, #372]	; (80065ac <PCD_EP_OutXfrComplete_int+0x210>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d90f      	bls.n	800645c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00a      	beq.n	800645c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	015a      	lsls	r2, r3, #5
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	4413      	add	r3, r2
 800644e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006452:	461a      	mov	r2, r3
 8006454:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006458:	6093      	str	r3, [r2, #8]
 800645a:	e0a2      	b.n	80065a2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800645c:	6879      	ldr	r1, [r7, #4]
 800645e:	683a      	ldr	r2, [r7, #0]
 8006460:	4613      	mov	r3, r2
 8006462:	00db      	lsls	r3, r3, #3
 8006464:	1a9b      	subs	r3, r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	440b      	add	r3, r1
 800646a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800646e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	0159      	lsls	r1, r3, #5
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	440b      	add	r3, r1
 8006478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006482:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	4613      	mov	r3, r2
 800648a:	00db      	lsls	r3, r3, #3
 800648c:	1a9b      	subs	r3, r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	4403      	add	r3, r0
 8006492:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006496:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006498:	6879      	ldr	r1, [r7, #4]
 800649a:	683a      	ldr	r2, [r7, #0]
 800649c:	4613      	mov	r3, r2
 800649e:	00db      	lsls	r3, r3, #3
 80064a0:	1a9b      	subs	r3, r3, r2
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	440b      	add	r3, r1
 80064a6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80064aa:	6819      	ldr	r1, [r3, #0]
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	4613      	mov	r3, r2
 80064b2:	00db      	lsls	r3, r3, #3
 80064b4:	1a9b      	subs	r3, r3, r2
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4403      	add	r3, r0
 80064ba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4419      	add	r1, r3
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	683a      	ldr	r2, [r7, #0]
 80064c6:	4613      	mov	r3, r2
 80064c8:	00db      	lsls	r3, r3, #3
 80064ca:	1a9b      	subs	r3, r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4403      	add	r3, r0
 80064d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80064d4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d114      	bne.n	8006506 <PCD_EP_OutXfrComplete_int+0x16a>
 80064dc:	6879      	ldr	r1, [r7, #4]
 80064de:	683a      	ldr	r2, [r7, #0]
 80064e0:	4613      	mov	r3, r2
 80064e2:	00db      	lsls	r3, r3, #3
 80064e4:	1a9b      	subs	r3, r3, r2
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	440b      	add	r3, r1
 80064ea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d108      	bne.n	8006506 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6818      	ldr	r0, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80064fe:	461a      	mov	r2, r3
 8006500:	2101      	movs	r1, #1
 8006502:	f003 feb3 	bl	800a26c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	b2db      	uxtb	r3, r3
 800650a:	4619      	mov	r1, r3
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f009 f899 	bl	800f644 <HAL_PCD_DataOutStageCallback>
 8006512:	e046      	b.n	80065a2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	4a26      	ldr	r2, [pc, #152]	; (80065b0 <PCD_EP_OutXfrComplete_int+0x214>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d124      	bne.n	8006566 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	015a      	lsls	r2, r3, #5
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	4413      	add	r3, r2
 800652e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006532:	461a      	mov	r2, r3
 8006534:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006538:	6093      	str	r3, [r2, #8]
 800653a:	e032      	b.n	80065a2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	f003 0320 	and.w	r3, r3, #32
 8006542:	2b00      	cmp	r3, #0
 8006544:	d008      	beq.n	8006558 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	015a      	lsls	r2, r3, #5
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	4413      	add	r3, r2
 800654e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006552:	461a      	mov	r2, r3
 8006554:	2320      	movs	r3, #32
 8006556:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	b2db      	uxtb	r3, r3
 800655c:	4619      	mov	r1, r3
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f009 f870 	bl	800f644 <HAL_PCD_DataOutStageCallback>
 8006564:	e01d      	b.n	80065a2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d114      	bne.n	8006596 <PCD_EP_OutXfrComplete_int+0x1fa>
 800656c:	6879      	ldr	r1, [r7, #4]
 800656e:	683a      	ldr	r2, [r7, #0]
 8006570:	4613      	mov	r3, r2
 8006572:	00db      	lsls	r3, r3, #3
 8006574:	1a9b      	subs	r3, r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	440b      	add	r3, r1
 800657a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d108      	bne.n	8006596 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6818      	ldr	r0, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800658e:	461a      	mov	r2, r3
 8006590:	2100      	movs	r1, #0
 8006592:	f003 fe6b 	bl	800a26c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	b2db      	uxtb	r3, r3
 800659a:	4619      	mov	r1, r3
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f009 f851 	bl	800f644 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3718      	adds	r7, #24
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	4f54300a 	.word	0x4f54300a
 80065b0:	4f54310a 	.word	0x4f54310a

080065b4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	333c      	adds	r3, #60	; 0x3c
 80065cc:	3304      	adds	r3, #4
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	015a      	lsls	r2, r3, #5
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	4413      	add	r3, r2
 80065da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	4a15      	ldr	r2, [pc, #84]	; (800663c <PCD_EP_OutSetupPacket_int+0x88>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d90e      	bls.n	8006608 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d009      	beq.n	8006608 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	015a      	lsls	r2, r3, #5
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	4413      	add	r3, r2
 80065fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006600:	461a      	mov	r2, r3
 8006602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006606:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f009 f809 	bl	800f620 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	4a0a      	ldr	r2, [pc, #40]	; (800663c <PCD_EP_OutSetupPacket_int+0x88>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d90c      	bls.n	8006630 <PCD_EP_OutSetupPacket_int+0x7c>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d108      	bne.n	8006630 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6818      	ldr	r0, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006628:	461a      	mov	r2, r3
 800662a:	2101      	movs	r1, #1
 800662c:	f003 fe1e 	bl	800a26c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3718      	adds	r7, #24
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	4f54300a 	.word	0x4f54300a

08006640 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	460b      	mov	r3, r1
 800664a:	70fb      	strb	r3, [r7, #3]
 800664c:	4613      	mov	r3, r2
 800664e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006656:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006658:	78fb      	ldrb	r3, [r7, #3]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d107      	bne.n	800666e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800665e:	883b      	ldrh	r3, [r7, #0]
 8006660:	0419      	lsls	r1, r3, #16
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	430a      	orrs	r2, r1
 800666a:	629a      	str	r2, [r3, #40]	; 0x28
 800666c:	e028      	b.n	80066c0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006674:	0c1b      	lsrs	r3, r3, #16
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	4413      	add	r3, r2
 800667a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800667c:	2300      	movs	r3, #0
 800667e:	73fb      	strb	r3, [r7, #15]
 8006680:	e00d      	b.n	800669e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	7bfb      	ldrb	r3, [r7, #15]
 8006688:	3340      	adds	r3, #64	; 0x40
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4413      	add	r3, r2
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	0c1b      	lsrs	r3, r3, #16
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	4413      	add	r3, r2
 8006696:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006698:	7bfb      	ldrb	r3, [r7, #15]
 800669a:	3301      	adds	r3, #1
 800669c:	73fb      	strb	r3, [r7, #15]
 800669e:	7bfa      	ldrb	r2, [r7, #15]
 80066a0:	78fb      	ldrb	r3, [r7, #3]
 80066a2:	3b01      	subs	r3, #1
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d3ec      	bcc.n	8006682 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80066a8:	883b      	ldrh	r3, [r7, #0]
 80066aa:	0418      	lsls	r0, r3, #16
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6819      	ldr	r1, [r3, #0]
 80066b0:	78fb      	ldrb	r3, [r7, #3]
 80066b2:	3b01      	subs	r3, #1
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	4302      	orrs	r2, r0
 80066b8:	3340      	adds	r3, #64	; 0x40
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	440b      	add	r3, r1
 80066be:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3714      	adds	r7, #20
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b083      	sub	sp, #12
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
 80066d6:	460b      	mov	r3, r1
 80066d8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	887a      	ldrh	r2, [r7, #2]
 80066e0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	460b      	mov	r3, r1
 80066fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d101      	bne.n	800671a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e264      	b.n	8006be4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d075      	beq.n	8006812 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006726:	4ba3      	ldr	r3, [pc, #652]	; (80069b4 <HAL_RCC_OscConfig+0x2ac>)
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f003 030c 	and.w	r3, r3, #12
 800672e:	2b04      	cmp	r3, #4
 8006730:	d00c      	beq.n	800674c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006732:	4ba0      	ldr	r3, [pc, #640]	; (80069b4 <HAL_RCC_OscConfig+0x2ac>)
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800673a:	2b08      	cmp	r3, #8
 800673c:	d112      	bne.n	8006764 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800673e:	4b9d      	ldr	r3, [pc, #628]	; (80069b4 <HAL_RCC_OscConfig+0x2ac>)
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006746:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800674a:	d10b      	bne.n	8006764 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800674c:	4b99      	ldr	r3, [pc, #612]	; (80069b4 <HAL_RCC_OscConfig+0x2ac>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d05b      	beq.n	8006810 <HAL_RCC_OscConfig+0x108>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d157      	bne.n	8006810 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e23f      	b.n	8006be4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800676c:	d106      	bne.n	800677c <HAL_RCC_OscConfig+0x74>
 800676e:	4b91      	ldr	r3, [pc, #580]	; (80069b4 <HAL_RCC_OscConfig+0x2ac>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a90      	ldr	r2, [pc, #576]	; (80069b4 <HAL_RCC_OscConfig+0x2ac>)
 8006774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006778:	6013      	str	r3, [r2, #0]
 800677a:	e01d      	b.n	80067b8 <HAL_RCC_OscConfig+0xb0>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006784:	d10c      	bne.n	80067a0 <HAL_RCC_OscConfig+0x98>
 8006786:	4b8b      	ldr	r3, [pc, #556]	; (80069b4 <HAL_RCC_OscConfig+0x2ac>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a8a      	ldr	r2, [pc, #552]	; (80069b4 <HAL_RCC_OscConfig+0x2ac>)
 800678c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006790:	6013      	str	r3, [r2, #0]
 8006792:	4b88      	ldr	r3, [pc, #544]	; (80069b4 <HAL_RCC_OscConfig+0x2ac>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a87      	ldr	r2, [pc, #540]	; (80069b4 <HAL_RCC_OscConfig+0x2ac>)
 8006798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800679c:	6013      	str	r3, [r2, #0]
 800679e:	e00b      	b.n	80067b8 <HAL_RCC_OscConfig+0xb0>
 80067a0:	4b84      	ldr	r3, [pc, #528]	; (80069b4 <HAL_RCC_OscConfig+0x2ac>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a83      	ldr	r2, [pc, #524]	; (80069b4 <HAL_RCC_OscConfig+0x2ac>)
 80067a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067aa:	6013      	str	r3, [r2, #0]
 80067ac:	4b81      	ldr	r3, [pc, #516]	; (80069b4 <HAL_RCC_OscConfig+0x2ac>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a80      	ldr	r2, [pc, #512]	; (80069b4 <HAL_RCC_OscConfig+0x2ac>)
 80067b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d013      	beq.n	80067e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067c0:	f7fd f852 	bl	8003868 <HAL_GetTick>
 80067c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067c6:	e008      	b.n	80067da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067c8:	f7fd f84e 	bl	8003868 <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	2b64      	cmp	r3, #100	; 0x64
 80067d4:	d901      	bls.n	80067da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e204      	b.n	8006be4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067da:	4b76      	ldr	r3, [pc, #472]	; (80069b4 <HAL_RCC_OscConfig+0x2ac>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d0f0      	beq.n	80067c8 <HAL_RCC_OscConfig+0xc0>
 80067e6:	e014      	b.n	8006812 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067e8:	f7fd f83e 	bl	8003868 <HAL_GetTick>
 80067ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067ee:	e008      	b.n	8006802 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067f0:	f7fd f83a 	bl	8003868 <HAL_GetTick>
 80067f4:	4602      	mov	r2, r0
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	2b64      	cmp	r3, #100	; 0x64
 80067fc:	d901      	bls.n	8006802 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e1f0      	b.n	8006be4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006802:	4b6c      	ldr	r3, [pc, #432]	; (80069b4 <HAL_RCC_OscConfig+0x2ac>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1f0      	bne.n	80067f0 <HAL_RCC_OscConfig+0xe8>
 800680e:	e000      	b.n	8006812 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	2b00      	cmp	r3, #0
 800681c:	d063      	beq.n	80068e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800681e:	4b65      	ldr	r3, [pc, #404]	; (80069b4 <HAL_RCC_OscConfig+0x2ac>)
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	f003 030c 	and.w	r3, r3, #12
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00b      	beq.n	8006842 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800682a:	4b62      	ldr	r3, [pc, #392]	; (80069b4 <HAL_RCC_OscConfig+0x2ac>)
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006832:	2b08      	cmp	r3, #8
 8006834:	d11c      	bne.n	8006870 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006836:	4b5f      	ldr	r3, [pc, #380]	; (80069b4 <HAL_RCC_OscConfig+0x2ac>)
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d116      	bne.n	8006870 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006842:	4b5c      	ldr	r3, [pc, #368]	; (80069b4 <HAL_RCC_OscConfig+0x2ac>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0302 	and.w	r3, r3, #2
 800684a:	2b00      	cmp	r3, #0
 800684c:	d005      	beq.n	800685a <HAL_RCC_OscConfig+0x152>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	2b01      	cmp	r3, #1
 8006854:	d001      	beq.n	800685a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e1c4      	b.n	8006be4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800685a:	4b56      	ldr	r3, [pc, #344]	; (80069b4 <HAL_RCC_OscConfig+0x2ac>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	00db      	lsls	r3, r3, #3
 8006868:	4952      	ldr	r1, [pc, #328]	; (80069b4 <HAL_RCC_OscConfig+0x2ac>)
 800686a:	4313      	orrs	r3, r2
 800686c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800686e:	e03a      	b.n	80068e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d020      	beq.n	80068ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006878:	4b4f      	ldr	r3, [pc, #316]	; (80069b8 <HAL_RCC_OscConfig+0x2b0>)
 800687a:	2201      	movs	r2, #1
 800687c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800687e:	f7fc fff3 	bl	8003868 <HAL_GetTick>
 8006882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006884:	e008      	b.n	8006898 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006886:	f7fc ffef 	bl	8003868 <HAL_GetTick>
 800688a:	4602      	mov	r2, r0
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	2b02      	cmp	r3, #2
 8006892:	d901      	bls.n	8006898 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e1a5      	b.n	8006be4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006898:	4b46      	ldr	r3, [pc, #280]	; (80069b4 <HAL_RCC_OscConfig+0x2ac>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0302 	and.w	r3, r3, #2
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d0f0      	beq.n	8006886 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068a4:	4b43      	ldr	r3, [pc, #268]	; (80069b4 <HAL_RCC_OscConfig+0x2ac>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	00db      	lsls	r3, r3, #3
 80068b2:	4940      	ldr	r1, [pc, #256]	; (80069b4 <HAL_RCC_OscConfig+0x2ac>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	600b      	str	r3, [r1, #0]
 80068b8:	e015      	b.n	80068e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068ba:	4b3f      	ldr	r3, [pc, #252]	; (80069b8 <HAL_RCC_OscConfig+0x2b0>)
 80068bc:	2200      	movs	r2, #0
 80068be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c0:	f7fc ffd2 	bl	8003868 <HAL_GetTick>
 80068c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068c6:	e008      	b.n	80068da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068c8:	f7fc ffce 	bl	8003868 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d901      	bls.n	80068da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e184      	b.n	8006be4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068da:	4b36      	ldr	r3, [pc, #216]	; (80069b4 <HAL_RCC_OscConfig+0x2ac>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1f0      	bne.n	80068c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0308 	and.w	r3, r3, #8
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d030      	beq.n	8006954 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d016      	beq.n	8006928 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068fa:	4b30      	ldr	r3, [pc, #192]	; (80069bc <HAL_RCC_OscConfig+0x2b4>)
 80068fc:	2201      	movs	r2, #1
 80068fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006900:	f7fc ffb2 	bl	8003868 <HAL_GetTick>
 8006904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006906:	e008      	b.n	800691a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006908:	f7fc ffae 	bl	8003868 <HAL_GetTick>
 800690c:	4602      	mov	r2, r0
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	2b02      	cmp	r3, #2
 8006914:	d901      	bls.n	800691a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e164      	b.n	8006be4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800691a:	4b26      	ldr	r3, [pc, #152]	; (80069b4 <HAL_RCC_OscConfig+0x2ac>)
 800691c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	2b00      	cmp	r3, #0
 8006924:	d0f0      	beq.n	8006908 <HAL_RCC_OscConfig+0x200>
 8006926:	e015      	b.n	8006954 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006928:	4b24      	ldr	r3, [pc, #144]	; (80069bc <HAL_RCC_OscConfig+0x2b4>)
 800692a:	2200      	movs	r2, #0
 800692c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800692e:	f7fc ff9b 	bl	8003868 <HAL_GetTick>
 8006932:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006934:	e008      	b.n	8006948 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006936:	f7fc ff97 	bl	8003868 <HAL_GetTick>
 800693a:	4602      	mov	r2, r0
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	2b02      	cmp	r3, #2
 8006942:	d901      	bls.n	8006948 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006944:	2303      	movs	r3, #3
 8006946:	e14d      	b.n	8006be4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006948:	4b1a      	ldr	r3, [pc, #104]	; (80069b4 <HAL_RCC_OscConfig+0x2ac>)
 800694a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800694c:	f003 0302 	and.w	r3, r3, #2
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1f0      	bne.n	8006936 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0304 	and.w	r3, r3, #4
 800695c:	2b00      	cmp	r3, #0
 800695e:	f000 80a0 	beq.w	8006aa2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006962:	2300      	movs	r3, #0
 8006964:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006966:	4b13      	ldr	r3, [pc, #76]	; (80069b4 <HAL_RCC_OscConfig+0x2ac>)
 8006968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10f      	bne.n	8006992 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006972:	2300      	movs	r3, #0
 8006974:	60bb      	str	r3, [r7, #8]
 8006976:	4b0f      	ldr	r3, [pc, #60]	; (80069b4 <HAL_RCC_OscConfig+0x2ac>)
 8006978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697a:	4a0e      	ldr	r2, [pc, #56]	; (80069b4 <HAL_RCC_OscConfig+0x2ac>)
 800697c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006980:	6413      	str	r3, [r2, #64]	; 0x40
 8006982:	4b0c      	ldr	r3, [pc, #48]	; (80069b4 <HAL_RCC_OscConfig+0x2ac>)
 8006984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800698a:	60bb      	str	r3, [r7, #8]
 800698c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800698e:	2301      	movs	r3, #1
 8006990:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006992:	4b0b      	ldr	r3, [pc, #44]	; (80069c0 <HAL_RCC_OscConfig+0x2b8>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800699a:	2b00      	cmp	r3, #0
 800699c:	d121      	bne.n	80069e2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800699e:	4b08      	ldr	r3, [pc, #32]	; (80069c0 <HAL_RCC_OscConfig+0x2b8>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a07      	ldr	r2, [pc, #28]	; (80069c0 <HAL_RCC_OscConfig+0x2b8>)
 80069a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069aa:	f7fc ff5d 	bl	8003868 <HAL_GetTick>
 80069ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069b0:	e011      	b.n	80069d6 <HAL_RCC_OscConfig+0x2ce>
 80069b2:	bf00      	nop
 80069b4:	40023800 	.word	0x40023800
 80069b8:	42470000 	.word	0x42470000
 80069bc:	42470e80 	.word	0x42470e80
 80069c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069c4:	f7fc ff50 	bl	8003868 <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d901      	bls.n	80069d6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e106      	b.n	8006be4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069d6:	4b85      	ldr	r3, [pc, #532]	; (8006bec <HAL_RCC_OscConfig+0x4e4>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d0f0      	beq.n	80069c4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d106      	bne.n	80069f8 <HAL_RCC_OscConfig+0x2f0>
 80069ea:	4b81      	ldr	r3, [pc, #516]	; (8006bf0 <HAL_RCC_OscConfig+0x4e8>)
 80069ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ee:	4a80      	ldr	r2, [pc, #512]	; (8006bf0 <HAL_RCC_OscConfig+0x4e8>)
 80069f0:	f043 0301 	orr.w	r3, r3, #1
 80069f4:	6713      	str	r3, [r2, #112]	; 0x70
 80069f6:	e01c      	b.n	8006a32 <HAL_RCC_OscConfig+0x32a>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	2b05      	cmp	r3, #5
 80069fe:	d10c      	bne.n	8006a1a <HAL_RCC_OscConfig+0x312>
 8006a00:	4b7b      	ldr	r3, [pc, #492]	; (8006bf0 <HAL_RCC_OscConfig+0x4e8>)
 8006a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a04:	4a7a      	ldr	r2, [pc, #488]	; (8006bf0 <HAL_RCC_OscConfig+0x4e8>)
 8006a06:	f043 0304 	orr.w	r3, r3, #4
 8006a0a:	6713      	str	r3, [r2, #112]	; 0x70
 8006a0c:	4b78      	ldr	r3, [pc, #480]	; (8006bf0 <HAL_RCC_OscConfig+0x4e8>)
 8006a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a10:	4a77      	ldr	r2, [pc, #476]	; (8006bf0 <HAL_RCC_OscConfig+0x4e8>)
 8006a12:	f043 0301 	orr.w	r3, r3, #1
 8006a16:	6713      	str	r3, [r2, #112]	; 0x70
 8006a18:	e00b      	b.n	8006a32 <HAL_RCC_OscConfig+0x32a>
 8006a1a:	4b75      	ldr	r3, [pc, #468]	; (8006bf0 <HAL_RCC_OscConfig+0x4e8>)
 8006a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a1e:	4a74      	ldr	r2, [pc, #464]	; (8006bf0 <HAL_RCC_OscConfig+0x4e8>)
 8006a20:	f023 0301 	bic.w	r3, r3, #1
 8006a24:	6713      	str	r3, [r2, #112]	; 0x70
 8006a26:	4b72      	ldr	r3, [pc, #456]	; (8006bf0 <HAL_RCC_OscConfig+0x4e8>)
 8006a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a2a:	4a71      	ldr	r2, [pc, #452]	; (8006bf0 <HAL_RCC_OscConfig+0x4e8>)
 8006a2c:	f023 0304 	bic.w	r3, r3, #4
 8006a30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d015      	beq.n	8006a66 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a3a:	f7fc ff15 	bl	8003868 <HAL_GetTick>
 8006a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a40:	e00a      	b.n	8006a58 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a42:	f7fc ff11 	bl	8003868 <HAL_GetTick>
 8006a46:	4602      	mov	r2, r0
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d901      	bls.n	8006a58 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e0c5      	b.n	8006be4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a58:	4b65      	ldr	r3, [pc, #404]	; (8006bf0 <HAL_RCC_OscConfig+0x4e8>)
 8006a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a5c:	f003 0302 	and.w	r3, r3, #2
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d0ee      	beq.n	8006a42 <HAL_RCC_OscConfig+0x33a>
 8006a64:	e014      	b.n	8006a90 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a66:	f7fc feff 	bl	8003868 <HAL_GetTick>
 8006a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a6c:	e00a      	b.n	8006a84 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a6e:	f7fc fefb 	bl	8003868 <HAL_GetTick>
 8006a72:	4602      	mov	r2, r0
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d901      	bls.n	8006a84 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	e0af      	b.n	8006be4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a84:	4b5a      	ldr	r3, [pc, #360]	; (8006bf0 <HAL_RCC_OscConfig+0x4e8>)
 8006a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a88:	f003 0302 	and.w	r3, r3, #2
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1ee      	bne.n	8006a6e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a90:	7dfb      	ldrb	r3, [r7, #23]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d105      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a96:	4b56      	ldr	r3, [pc, #344]	; (8006bf0 <HAL_RCC_OscConfig+0x4e8>)
 8006a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9a:	4a55      	ldr	r2, [pc, #340]	; (8006bf0 <HAL_RCC_OscConfig+0x4e8>)
 8006a9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006aa0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	699b      	ldr	r3, [r3, #24]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f000 809b 	beq.w	8006be2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006aac:	4b50      	ldr	r3, [pc, #320]	; (8006bf0 <HAL_RCC_OscConfig+0x4e8>)
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	f003 030c 	and.w	r3, r3, #12
 8006ab4:	2b08      	cmp	r3, #8
 8006ab6:	d05c      	beq.n	8006b72 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	699b      	ldr	r3, [r3, #24]
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d141      	bne.n	8006b44 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ac0:	4b4c      	ldr	r3, [pc, #304]	; (8006bf4 <HAL_RCC_OscConfig+0x4ec>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ac6:	f7fc fecf 	bl	8003868 <HAL_GetTick>
 8006aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006acc:	e008      	b.n	8006ae0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ace:	f7fc fecb 	bl	8003868 <HAL_GetTick>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d901      	bls.n	8006ae0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e081      	b.n	8006be4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ae0:	4b43      	ldr	r3, [pc, #268]	; (8006bf0 <HAL_RCC_OscConfig+0x4e8>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1f0      	bne.n	8006ace <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	69da      	ldr	r2, [r3, #28]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	431a      	orrs	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afa:	019b      	lsls	r3, r3, #6
 8006afc:	431a      	orrs	r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b02:	085b      	lsrs	r3, r3, #1
 8006b04:	3b01      	subs	r3, #1
 8006b06:	041b      	lsls	r3, r3, #16
 8006b08:	431a      	orrs	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0e:	061b      	lsls	r3, r3, #24
 8006b10:	4937      	ldr	r1, [pc, #220]	; (8006bf0 <HAL_RCC_OscConfig+0x4e8>)
 8006b12:	4313      	orrs	r3, r2
 8006b14:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b16:	4b37      	ldr	r3, [pc, #220]	; (8006bf4 <HAL_RCC_OscConfig+0x4ec>)
 8006b18:	2201      	movs	r2, #1
 8006b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b1c:	f7fc fea4 	bl	8003868 <HAL_GetTick>
 8006b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b22:	e008      	b.n	8006b36 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b24:	f7fc fea0 	bl	8003868 <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d901      	bls.n	8006b36 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e056      	b.n	8006be4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b36:	4b2e      	ldr	r3, [pc, #184]	; (8006bf0 <HAL_RCC_OscConfig+0x4e8>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d0f0      	beq.n	8006b24 <HAL_RCC_OscConfig+0x41c>
 8006b42:	e04e      	b.n	8006be2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b44:	4b2b      	ldr	r3, [pc, #172]	; (8006bf4 <HAL_RCC_OscConfig+0x4ec>)
 8006b46:	2200      	movs	r2, #0
 8006b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b4a:	f7fc fe8d 	bl	8003868 <HAL_GetTick>
 8006b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b50:	e008      	b.n	8006b64 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b52:	f7fc fe89 	bl	8003868 <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d901      	bls.n	8006b64 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006b60:	2303      	movs	r3, #3
 8006b62:	e03f      	b.n	8006be4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b64:	4b22      	ldr	r3, [pc, #136]	; (8006bf0 <HAL_RCC_OscConfig+0x4e8>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1f0      	bne.n	8006b52 <HAL_RCC_OscConfig+0x44a>
 8006b70:	e037      	b.n	8006be2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d101      	bne.n	8006b7e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e032      	b.n	8006be4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b7e:	4b1c      	ldr	r3, [pc, #112]	; (8006bf0 <HAL_RCC_OscConfig+0x4e8>)
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d028      	beq.n	8006bde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d121      	bne.n	8006bde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d11a      	bne.n	8006bde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006bae:	4013      	ands	r3, r2
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006bb4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d111      	bne.n	8006bde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc4:	085b      	lsrs	r3, r3, #1
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d107      	bne.n	8006bde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d001      	beq.n	8006be2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e000      	b.n	8006be4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3718      	adds	r7, #24
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	40007000 	.word	0x40007000
 8006bf0:	40023800 	.word	0x40023800
 8006bf4:	42470060 	.word	0x42470060

08006bf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d101      	bne.n	8006c0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e0cc      	b.n	8006da6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c0c:	4b68      	ldr	r3, [pc, #416]	; (8006db0 <HAL_RCC_ClockConfig+0x1b8>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 030f 	and.w	r3, r3, #15
 8006c14:	683a      	ldr	r2, [r7, #0]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d90c      	bls.n	8006c34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c1a:	4b65      	ldr	r3, [pc, #404]	; (8006db0 <HAL_RCC_ClockConfig+0x1b8>)
 8006c1c:	683a      	ldr	r2, [r7, #0]
 8006c1e:	b2d2      	uxtb	r2, r2
 8006c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c22:	4b63      	ldr	r3, [pc, #396]	; (8006db0 <HAL_RCC_ClockConfig+0x1b8>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 030f 	and.w	r3, r3, #15
 8006c2a:	683a      	ldr	r2, [r7, #0]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d001      	beq.n	8006c34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e0b8      	b.n	8006da6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0302 	and.w	r3, r3, #2
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d020      	beq.n	8006c82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 0304 	and.w	r3, r3, #4
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d005      	beq.n	8006c58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c4c:	4b59      	ldr	r3, [pc, #356]	; (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	4a58      	ldr	r2, [pc, #352]	; (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 0308 	and.w	r3, r3, #8
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d005      	beq.n	8006c70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c64:	4b53      	ldr	r3, [pc, #332]	; (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	4a52      	ldr	r2, [pc, #328]	; (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c70:	4b50      	ldr	r3, [pc, #320]	; (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	494d      	ldr	r1, [pc, #308]	; (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d044      	beq.n	8006d18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d107      	bne.n	8006ca6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c96:	4b47      	ldr	r3, [pc, #284]	; (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d119      	bne.n	8006cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e07f      	b.n	8006da6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d003      	beq.n	8006cb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cb2:	2b03      	cmp	r3, #3
 8006cb4:	d107      	bne.n	8006cc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cb6:	4b3f      	ldr	r3, [pc, #252]	; (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d109      	bne.n	8006cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e06f      	b.n	8006da6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cc6:	4b3b      	ldr	r3, [pc, #236]	; (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0302 	and.w	r3, r3, #2
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e067      	b.n	8006da6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006cd6:	4b37      	ldr	r3, [pc, #220]	; (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f023 0203 	bic.w	r2, r3, #3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	4934      	ldr	r1, [pc, #208]	; (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ce8:	f7fc fdbe 	bl	8003868 <HAL_GetTick>
 8006cec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cee:	e00a      	b.n	8006d06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cf0:	f7fc fdba 	bl	8003868 <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d901      	bls.n	8006d06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d02:	2303      	movs	r3, #3
 8006d04:	e04f      	b.n	8006da6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d06:	4b2b      	ldr	r3, [pc, #172]	; (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f003 020c 	and.w	r2, r3, #12
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d1eb      	bne.n	8006cf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d18:	4b25      	ldr	r3, [pc, #148]	; (8006db0 <HAL_RCC_ClockConfig+0x1b8>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 030f 	and.w	r3, r3, #15
 8006d20:	683a      	ldr	r2, [r7, #0]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d20c      	bcs.n	8006d40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d26:	4b22      	ldr	r3, [pc, #136]	; (8006db0 <HAL_RCC_ClockConfig+0x1b8>)
 8006d28:	683a      	ldr	r2, [r7, #0]
 8006d2a:	b2d2      	uxtb	r2, r2
 8006d2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d2e:	4b20      	ldr	r3, [pc, #128]	; (8006db0 <HAL_RCC_ClockConfig+0x1b8>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 030f 	and.w	r3, r3, #15
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d001      	beq.n	8006d40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e032      	b.n	8006da6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0304 	and.w	r3, r3, #4
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d008      	beq.n	8006d5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d4c:	4b19      	ldr	r3, [pc, #100]	; (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	4916      	ldr	r1, [pc, #88]	; (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0308 	and.w	r3, r3, #8
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d009      	beq.n	8006d7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d6a:	4b12      	ldr	r3, [pc, #72]	; (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	00db      	lsls	r3, r3, #3
 8006d78:	490e      	ldr	r1, [pc, #56]	; (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d7e:	f000 f821 	bl	8006dc4 <HAL_RCC_GetSysClockFreq>
 8006d82:	4602      	mov	r2, r0
 8006d84:	4b0b      	ldr	r3, [pc, #44]	; (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	091b      	lsrs	r3, r3, #4
 8006d8a:	f003 030f 	and.w	r3, r3, #15
 8006d8e:	490a      	ldr	r1, [pc, #40]	; (8006db8 <HAL_RCC_ClockConfig+0x1c0>)
 8006d90:	5ccb      	ldrb	r3, [r1, r3]
 8006d92:	fa22 f303 	lsr.w	r3, r2, r3
 8006d96:	4a09      	ldr	r2, [pc, #36]	; (8006dbc <HAL_RCC_ClockConfig+0x1c4>)
 8006d98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006d9a:	4b09      	ldr	r3, [pc, #36]	; (8006dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7fc fd1e 	bl	80037e0 <HAL_InitTick>

  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	40023c00 	.word	0x40023c00
 8006db4:	40023800 	.word	0x40023800
 8006db8:	08015068 	.word	0x08015068
 8006dbc:	20000000 	.word	0x20000000
 8006dc0:	20000004 	.word	0x20000004

08006dc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006dc4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006dc8:	b084      	sub	sp, #16
 8006dca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	607b      	str	r3, [r7, #4]
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	60fb      	str	r3, [r7, #12]
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ddc:	4b67      	ldr	r3, [pc, #412]	; (8006f7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f003 030c 	and.w	r3, r3, #12
 8006de4:	2b08      	cmp	r3, #8
 8006de6:	d00d      	beq.n	8006e04 <HAL_RCC_GetSysClockFreq+0x40>
 8006de8:	2b08      	cmp	r3, #8
 8006dea:	f200 80bd 	bhi.w	8006f68 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d002      	beq.n	8006df8 <HAL_RCC_GetSysClockFreq+0x34>
 8006df2:	2b04      	cmp	r3, #4
 8006df4:	d003      	beq.n	8006dfe <HAL_RCC_GetSysClockFreq+0x3a>
 8006df6:	e0b7      	b.n	8006f68 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006df8:	4b61      	ldr	r3, [pc, #388]	; (8006f80 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006dfa:	60bb      	str	r3, [r7, #8]
       break;
 8006dfc:	e0b7      	b.n	8006f6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006dfe:	4b60      	ldr	r3, [pc, #384]	; (8006f80 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006e00:	60bb      	str	r3, [r7, #8]
      break;
 8006e02:	e0b4      	b.n	8006f6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e04:	4b5d      	ldr	r3, [pc, #372]	; (8006f7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e0c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e0e:	4b5b      	ldr	r3, [pc, #364]	; (8006f7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d04d      	beq.n	8006eb6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e1a:	4b58      	ldr	r3, [pc, #352]	; (8006f7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	099b      	lsrs	r3, r3, #6
 8006e20:	461a      	mov	r2, r3
 8006e22:	f04f 0300 	mov.w	r3, #0
 8006e26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006e2a:	f04f 0100 	mov.w	r1, #0
 8006e2e:	ea02 0800 	and.w	r8, r2, r0
 8006e32:	ea03 0901 	and.w	r9, r3, r1
 8006e36:	4640      	mov	r0, r8
 8006e38:	4649      	mov	r1, r9
 8006e3a:	f04f 0200 	mov.w	r2, #0
 8006e3e:	f04f 0300 	mov.w	r3, #0
 8006e42:	014b      	lsls	r3, r1, #5
 8006e44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006e48:	0142      	lsls	r2, r0, #5
 8006e4a:	4610      	mov	r0, r2
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	ebb0 0008 	subs.w	r0, r0, r8
 8006e52:	eb61 0109 	sbc.w	r1, r1, r9
 8006e56:	f04f 0200 	mov.w	r2, #0
 8006e5a:	f04f 0300 	mov.w	r3, #0
 8006e5e:	018b      	lsls	r3, r1, #6
 8006e60:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006e64:	0182      	lsls	r2, r0, #6
 8006e66:	1a12      	subs	r2, r2, r0
 8006e68:	eb63 0301 	sbc.w	r3, r3, r1
 8006e6c:	f04f 0000 	mov.w	r0, #0
 8006e70:	f04f 0100 	mov.w	r1, #0
 8006e74:	00d9      	lsls	r1, r3, #3
 8006e76:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e7a:	00d0      	lsls	r0, r2, #3
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	460b      	mov	r3, r1
 8006e80:	eb12 0208 	adds.w	r2, r2, r8
 8006e84:	eb43 0309 	adc.w	r3, r3, r9
 8006e88:	f04f 0000 	mov.w	r0, #0
 8006e8c:	f04f 0100 	mov.w	r1, #0
 8006e90:	0299      	lsls	r1, r3, #10
 8006e92:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006e96:	0290      	lsls	r0, r2, #10
 8006e98:	4602      	mov	r2, r0
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	f04f 0300 	mov.w	r3, #0
 8006ea8:	f7f9 fefe 	bl	8000ca8 <__aeabi_uldivmod>
 8006eac:	4602      	mov	r2, r0
 8006eae:	460b      	mov	r3, r1
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	60fb      	str	r3, [r7, #12]
 8006eb4:	e04a      	b.n	8006f4c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006eb6:	4b31      	ldr	r3, [pc, #196]	; (8006f7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	099b      	lsrs	r3, r3, #6
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	f04f 0300 	mov.w	r3, #0
 8006ec2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006ec6:	f04f 0100 	mov.w	r1, #0
 8006eca:	ea02 0400 	and.w	r4, r2, r0
 8006ece:	ea03 0501 	and.w	r5, r3, r1
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	4629      	mov	r1, r5
 8006ed6:	f04f 0200 	mov.w	r2, #0
 8006eda:	f04f 0300 	mov.w	r3, #0
 8006ede:	014b      	lsls	r3, r1, #5
 8006ee0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006ee4:	0142      	lsls	r2, r0, #5
 8006ee6:	4610      	mov	r0, r2
 8006ee8:	4619      	mov	r1, r3
 8006eea:	1b00      	subs	r0, r0, r4
 8006eec:	eb61 0105 	sbc.w	r1, r1, r5
 8006ef0:	f04f 0200 	mov.w	r2, #0
 8006ef4:	f04f 0300 	mov.w	r3, #0
 8006ef8:	018b      	lsls	r3, r1, #6
 8006efa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006efe:	0182      	lsls	r2, r0, #6
 8006f00:	1a12      	subs	r2, r2, r0
 8006f02:	eb63 0301 	sbc.w	r3, r3, r1
 8006f06:	f04f 0000 	mov.w	r0, #0
 8006f0a:	f04f 0100 	mov.w	r1, #0
 8006f0e:	00d9      	lsls	r1, r3, #3
 8006f10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f14:	00d0      	lsls	r0, r2, #3
 8006f16:	4602      	mov	r2, r0
 8006f18:	460b      	mov	r3, r1
 8006f1a:	1912      	adds	r2, r2, r4
 8006f1c:	eb45 0303 	adc.w	r3, r5, r3
 8006f20:	f04f 0000 	mov.w	r0, #0
 8006f24:	f04f 0100 	mov.w	r1, #0
 8006f28:	0299      	lsls	r1, r3, #10
 8006f2a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006f2e:	0290      	lsls	r0, r2, #10
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
 8006f34:	4610      	mov	r0, r2
 8006f36:	4619      	mov	r1, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	f04f 0300 	mov.w	r3, #0
 8006f40:	f7f9 feb2 	bl	8000ca8 <__aeabi_uldivmod>
 8006f44:	4602      	mov	r2, r0
 8006f46:	460b      	mov	r3, r1
 8006f48:	4613      	mov	r3, r2
 8006f4a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f4c:	4b0b      	ldr	r3, [pc, #44]	; (8006f7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	0c1b      	lsrs	r3, r3, #16
 8006f52:	f003 0303 	and.w	r3, r3, #3
 8006f56:	3301      	adds	r3, #1
 8006f58:	005b      	lsls	r3, r3, #1
 8006f5a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f64:	60bb      	str	r3, [r7, #8]
      break;
 8006f66:	e002      	b.n	8006f6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f68:	4b05      	ldr	r3, [pc, #20]	; (8006f80 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006f6a:	60bb      	str	r3, [r7, #8]
      break;
 8006f6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f6e:	68bb      	ldr	r3, [r7, #8]
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006f7a:	bf00      	nop
 8006f7c:	40023800 	.word	0x40023800
 8006f80:	00f42400 	.word	0x00f42400

08006f84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f84:	b480      	push	{r7}
 8006f86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f88:	4b03      	ldr	r3, [pc, #12]	; (8006f98 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	20000000 	.word	0x20000000

08006f9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006fa0:	f7ff fff0 	bl	8006f84 <HAL_RCC_GetHCLKFreq>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	4b05      	ldr	r3, [pc, #20]	; (8006fbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	0a9b      	lsrs	r3, r3, #10
 8006fac:	f003 0307 	and.w	r3, r3, #7
 8006fb0:	4903      	ldr	r1, [pc, #12]	; (8006fc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006fb2:	5ccb      	ldrb	r3, [r1, r3]
 8006fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	40023800 	.word	0x40023800
 8006fc0:	08015078 	.word	0x08015078

08006fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006fc8:	f7ff ffdc 	bl	8006f84 <HAL_RCC_GetHCLKFreq>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	4b05      	ldr	r3, [pc, #20]	; (8006fe4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	0b5b      	lsrs	r3, r3, #13
 8006fd4:	f003 0307 	and.w	r3, r3, #7
 8006fd8:	4903      	ldr	r1, [pc, #12]	; (8006fe8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fda:	5ccb      	ldrb	r3, [r1, r3]
 8006fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	40023800 	.word	0x40023800
 8006fe8:	08015078 	.word	0x08015078

08006fec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d101      	bne.n	8006ffe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e07b      	b.n	80070f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007002:	2b00      	cmp	r3, #0
 8007004:	d108      	bne.n	8007018 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800700e:	d009      	beq.n	8007024 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	61da      	str	r2, [r3, #28]
 8007016:	e005      	b.n	8007024 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007030:	b2db      	uxtb	r3, r3
 8007032:	2b00      	cmp	r3, #0
 8007034:	d106      	bne.n	8007044 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f7fc f93e 	bl	80032c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2202      	movs	r2, #2
 8007048:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800705a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800706c:	431a      	orrs	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007076:	431a      	orrs	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	f003 0302 	and.w	r3, r3, #2
 8007080:	431a      	orrs	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	695b      	ldr	r3, [r3, #20]
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	431a      	orrs	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007094:	431a      	orrs	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	69db      	ldr	r3, [r3, #28]
 800709a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800709e:	431a      	orrs	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a1b      	ldr	r3, [r3, #32]
 80070a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070a8:	ea42 0103 	orr.w	r1, r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	430a      	orrs	r2, r1
 80070ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	699b      	ldr	r3, [r3, #24]
 80070c0:	0c1b      	lsrs	r3, r3, #16
 80070c2:	f003 0104 	and.w	r1, r3, #4
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ca:	f003 0210 	and.w	r2, r3, #16
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	430a      	orrs	r2, r1
 80070d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	69da      	ldr	r2, [r3, #28]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3708      	adds	r7, #8
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b08c      	sub	sp, #48	; 0x30
 8007102:	af00      	add	r7, sp, #0
 8007104:	60f8      	str	r0, [r7, #12]
 8007106:	60b9      	str	r1, [r7, #8]
 8007108:	607a      	str	r2, [r7, #4]
 800710a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800710c:	2301      	movs	r3, #1
 800710e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007110:	2300      	movs	r3, #0
 8007112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800711c:	2b01      	cmp	r3, #1
 800711e:	d101      	bne.n	8007124 <HAL_SPI_TransmitReceive+0x26>
 8007120:	2302      	movs	r3, #2
 8007122:	e18a      	b.n	800743a <HAL_SPI_TransmitReceive+0x33c>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800712c:	f7fc fb9c 	bl	8003868 <HAL_GetTick>
 8007130:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007138:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007142:	887b      	ldrh	r3, [r7, #2]
 8007144:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007146:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800714a:	2b01      	cmp	r3, #1
 800714c:	d00f      	beq.n	800716e <HAL_SPI_TransmitReceive+0x70>
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007154:	d107      	bne.n	8007166 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d103      	bne.n	8007166 <HAL_SPI_TransmitReceive+0x68>
 800715e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007162:	2b04      	cmp	r3, #4
 8007164:	d003      	beq.n	800716e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007166:	2302      	movs	r3, #2
 8007168:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800716c:	e15b      	b.n	8007426 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d005      	beq.n	8007180 <HAL_SPI_TransmitReceive+0x82>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d002      	beq.n	8007180 <HAL_SPI_TransmitReceive+0x82>
 800717a:	887b      	ldrh	r3, [r7, #2]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d103      	bne.n	8007188 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007186:	e14e      	b.n	8007426 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800718e:	b2db      	uxtb	r3, r3
 8007190:	2b04      	cmp	r3, #4
 8007192:	d003      	beq.n	800719c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2205      	movs	r2, #5
 8007198:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	887a      	ldrh	r2, [r7, #2]
 80071ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	887a      	ldrh	r2, [r7, #2]
 80071b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	68ba      	ldr	r2, [r7, #8]
 80071b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	887a      	ldrh	r2, [r7, #2]
 80071be:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	887a      	ldrh	r2, [r7, #2]
 80071c4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2200      	movs	r2, #0
 80071d0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071dc:	2b40      	cmp	r3, #64	; 0x40
 80071de:	d007      	beq.n	80071f0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071f8:	d178      	bne.n	80072ec <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d002      	beq.n	8007208 <HAL_SPI_TransmitReceive+0x10a>
 8007202:	8b7b      	ldrh	r3, [r7, #26]
 8007204:	2b01      	cmp	r3, #1
 8007206:	d166      	bne.n	80072d6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720c:	881a      	ldrh	r2, [r3, #0]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007218:	1c9a      	adds	r2, r3, #2
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007222:	b29b      	uxth	r3, r3
 8007224:	3b01      	subs	r3, #1
 8007226:	b29a      	uxth	r2, r3
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800722c:	e053      	b.n	80072d6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	f003 0302 	and.w	r3, r3, #2
 8007238:	2b02      	cmp	r3, #2
 800723a:	d11b      	bne.n	8007274 <HAL_SPI_TransmitReceive+0x176>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007240:	b29b      	uxth	r3, r3
 8007242:	2b00      	cmp	r3, #0
 8007244:	d016      	beq.n	8007274 <HAL_SPI_TransmitReceive+0x176>
 8007246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007248:	2b01      	cmp	r3, #1
 800724a:	d113      	bne.n	8007274 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007250:	881a      	ldrh	r2, [r3, #0]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725c:	1c9a      	adds	r2, r3, #2
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007266:	b29b      	uxth	r3, r3
 8007268:	3b01      	subs	r3, #1
 800726a:	b29a      	uxth	r2, r3
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007270:	2300      	movs	r3, #0
 8007272:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f003 0301 	and.w	r3, r3, #1
 800727e:	2b01      	cmp	r3, #1
 8007280:	d119      	bne.n	80072b6 <HAL_SPI_TransmitReceive+0x1b8>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007286:	b29b      	uxth	r3, r3
 8007288:	2b00      	cmp	r3, #0
 800728a:	d014      	beq.n	80072b6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68da      	ldr	r2, [r3, #12]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007296:	b292      	uxth	r2, r2
 8007298:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729e:	1c9a      	adds	r2, r3, #2
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	3b01      	subs	r3, #1
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80072b2:	2301      	movs	r3, #1
 80072b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80072b6:	f7fc fad7 	bl	8003868 <HAL_GetTick>
 80072ba:	4602      	mov	r2, r0
 80072bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d807      	bhi.n	80072d6 <HAL_SPI_TransmitReceive+0x1d8>
 80072c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072cc:	d003      	beq.n	80072d6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80072d4:	e0a7      	b.n	8007426 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072da:	b29b      	uxth	r3, r3
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1a6      	bne.n	800722e <HAL_SPI_TransmitReceive+0x130>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1a1      	bne.n	800722e <HAL_SPI_TransmitReceive+0x130>
 80072ea:	e07c      	b.n	80073e6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d002      	beq.n	80072fa <HAL_SPI_TransmitReceive+0x1fc>
 80072f4:	8b7b      	ldrh	r3, [r7, #26]
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d16b      	bne.n	80073d2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	330c      	adds	r3, #12
 8007304:	7812      	ldrb	r2, [r2, #0]
 8007306:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800730c:	1c5a      	adds	r2, r3, #1
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007316:	b29b      	uxth	r3, r3
 8007318:	3b01      	subs	r3, #1
 800731a:	b29a      	uxth	r2, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007320:	e057      	b.n	80073d2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	f003 0302 	and.w	r3, r3, #2
 800732c:	2b02      	cmp	r3, #2
 800732e:	d11c      	bne.n	800736a <HAL_SPI_TransmitReceive+0x26c>
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007334:	b29b      	uxth	r3, r3
 8007336:	2b00      	cmp	r3, #0
 8007338:	d017      	beq.n	800736a <HAL_SPI_TransmitReceive+0x26c>
 800733a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733c:	2b01      	cmp	r3, #1
 800733e:	d114      	bne.n	800736a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	330c      	adds	r3, #12
 800734a:	7812      	ldrb	r2, [r2, #0]
 800734c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007352:	1c5a      	adds	r2, r3, #1
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800735c:	b29b      	uxth	r3, r3
 800735e:	3b01      	subs	r3, #1
 8007360:	b29a      	uxth	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007366:	2300      	movs	r3, #0
 8007368:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f003 0301 	and.w	r3, r3, #1
 8007374:	2b01      	cmp	r3, #1
 8007376:	d119      	bne.n	80073ac <HAL_SPI_TransmitReceive+0x2ae>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800737c:	b29b      	uxth	r3, r3
 800737e:	2b00      	cmp	r3, #0
 8007380:	d014      	beq.n	80073ac <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68da      	ldr	r2, [r3, #12]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738c:	b2d2      	uxtb	r2, r2
 800738e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007394:	1c5a      	adds	r2, r3, #1
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800739e:	b29b      	uxth	r3, r3
 80073a0:	3b01      	subs	r3, #1
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80073a8:	2301      	movs	r3, #1
 80073aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80073ac:	f7fc fa5c 	bl	8003868 <HAL_GetTick>
 80073b0:	4602      	mov	r2, r0
 80073b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d803      	bhi.n	80073c4 <HAL_SPI_TransmitReceive+0x2c6>
 80073bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c2:	d102      	bne.n	80073ca <HAL_SPI_TransmitReceive+0x2cc>
 80073c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d103      	bne.n	80073d2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80073ca:	2303      	movs	r3, #3
 80073cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80073d0:	e029      	b.n	8007426 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d1a2      	bne.n	8007322 <HAL_SPI_TransmitReceive+0x224>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d19d      	bne.n	8007322 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f000 f8b2 	bl	8007554 <SPI_EndRxTxTransaction>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d006      	beq.n	8007404 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2220      	movs	r2, #32
 8007400:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007402:	e010      	b.n	8007426 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d10b      	bne.n	8007424 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800740c:	2300      	movs	r3, #0
 800740e:	617b      	str	r3, [r7, #20]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	617b      	str	r3, [r7, #20]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	617b      	str	r3, [r7, #20]
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	e000      	b.n	8007426 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007424:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2201      	movs	r2, #1
 800742a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2200      	movs	r2, #0
 8007432:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007436:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800743a:	4618      	mov	r0, r3
 800743c:	3730      	adds	r7, #48	; 0x30
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
	...

08007444 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b088      	sub	sp, #32
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	603b      	str	r3, [r7, #0]
 8007450:	4613      	mov	r3, r2
 8007452:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007454:	f7fc fa08 	bl	8003868 <HAL_GetTick>
 8007458:	4602      	mov	r2, r0
 800745a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745c:	1a9b      	subs	r3, r3, r2
 800745e:	683a      	ldr	r2, [r7, #0]
 8007460:	4413      	add	r3, r2
 8007462:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007464:	f7fc fa00 	bl	8003868 <HAL_GetTick>
 8007468:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800746a:	4b39      	ldr	r3, [pc, #228]	; (8007550 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	015b      	lsls	r3, r3, #5
 8007470:	0d1b      	lsrs	r3, r3, #20
 8007472:	69fa      	ldr	r2, [r7, #28]
 8007474:	fb02 f303 	mul.w	r3, r2, r3
 8007478:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800747a:	e054      	b.n	8007526 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007482:	d050      	beq.n	8007526 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007484:	f7fc f9f0 	bl	8003868 <HAL_GetTick>
 8007488:	4602      	mov	r2, r0
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	1ad3      	subs	r3, r2, r3
 800748e:	69fa      	ldr	r2, [r7, #28]
 8007490:	429a      	cmp	r2, r3
 8007492:	d902      	bls.n	800749a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d13d      	bne.n	8007516 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	685a      	ldr	r2, [r3, #4]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80074a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074b2:	d111      	bne.n	80074d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074bc:	d004      	beq.n	80074c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074c6:	d107      	bne.n	80074d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074e0:	d10f      	bne.n	8007502 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074f0:	601a      	str	r2, [r3, #0]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007500:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007512:	2303      	movs	r3, #3
 8007514:	e017      	b.n	8007546 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d101      	bne.n	8007520 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800751c:	2300      	movs	r3, #0
 800751e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	3b01      	subs	r3, #1
 8007524:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	689a      	ldr	r2, [r3, #8]
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	4013      	ands	r3, r2
 8007530:	68ba      	ldr	r2, [r7, #8]
 8007532:	429a      	cmp	r2, r3
 8007534:	bf0c      	ite	eq
 8007536:	2301      	moveq	r3, #1
 8007538:	2300      	movne	r3, #0
 800753a:	b2db      	uxtb	r3, r3
 800753c:	461a      	mov	r2, r3
 800753e:	79fb      	ldrb	r3, [r7, #7]
 8007540:	429a      	cmp	r2, r3
 8007542:	d19b      	bne.n	800747c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3720      	adds	r7, #32
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	20000000 	.word	0x20000000

08007554 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b088      	sub	sp, #32
 8007558:	af02      	add	r7, sp, #8
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007560:	4b1b      	ldr	r3, [pc, #108]	; (80075d0 <SPI_EndRxTxTransaction+0x7c>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a1b      	ldr	r2, [pc, #108]	; (80075d4 <SPI_EndRxTxTransaction+0x80>)
 8007566:	fba2 2303 	umull	r2, r3, r2, r3
 800756a:	0d5b      	lsrs	r3, r3, #21
 800756c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007570:	fb02 f303 	mul.w	r3, r2, r3
 8007574:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800757e:	d112      	bne.n	80075a6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	2200      	movs	r2, #0
 8007588:	2180      	movs	r1, #128	; 0x80
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	f7ff ff5a 	bl	8007444 <SPI_WaitFlagStateUntilTimeout>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d016      	beq.n	80075c4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800759a:	f043 0220 	orr.w	r2, r3, #32
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80075a2:	2303      	movs	r3, #3
 80075a4:	e00f      	b.n	80075c6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00a      	beq.n	80075c2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	3b01      	subs	r3, #1
 80075b0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075bc:	2b80      	cmp	r3, #128	; 0x80
 80075be:	d0f2      	beq.n	80075a6 <SPI_EndRxTxTransaction+0x52>
 80075c0:	e000      	b.n	80075c4 <SPI_EndRxTxTransaction+0x70>
        break;
 80075c2:	bf00      	nop
  }

  return HAL_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3718      	adds	r7, #24
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	20000000 	.word	0x20000000
 80075d4:	165e9f81 	.word	0x165e9f81

080075d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d101      	bne.n	80075ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e041      	b.n	800766e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d106      	bne.n	8007604 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f7fb fede 	bl	80033c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2202      	movs	r2, #2
 8007608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	3304      	adds	r3, #4
 8007614:	4619      	mov	r1, r3
 8007616:	4610      	mov	r0, r2
 8007618:	f000 fc78 	bl	8007f0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3708      	adds	r7, #8
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b082      	sub	sp, #8
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d101      	bne.n	8007688 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	e041      	b.n	800770c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800768e:	b2db      	uxtb	r3, r3
 8007690:	2b00      	cmp	r3, #0
 8007692:	d106      	bne.n	80076a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f839 	bl	8007714 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2202      	movs	r2, #2
 80076a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	3304      	adds	r3, #4
 80076b2:	4619      	mov	r1, r3
 80076b4:	4610      	mov	r0, r2
 80076b6:	f000 fc29 	bl	8007f0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2201      	movs	r2, #1
 80076be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2201      	movs	r2, #1
 80076c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2201      	movs	r2, #1
 80076ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2201      	movs	r2, #1
 80076d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2201      	movs	r2, #1
 80076de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2201      	movs	r2, #1
 80076f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2201      	movs	r2, #1
 80076fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2201      	movs	r2, #1
 8007706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	3708      	adds	r7, #8
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800771c:	bf00      	nop
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d109      	bne.n	800774c <HAL_TIM_PWM_Start+0x24>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800773e:	b2db      	uxtb	r3, r3
 8007740:	2b01      	cmp	r3, #1
 8007742:	bf14      	ite	ne
 8007744:	2301      	movne	r3, #1
 8007746:	2300      	moveq	r3, #0
 8007748:	b2db      	uxtb	r3, r3
 800774a:	e022      	b.n	8007792 <HAL_TIM_PWM_Start+0x6a>
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	2b04      	cmp	r3, #4
 8007750:	d109      	bne.n	8007766 <HAL_TIM_PWM_Start+0x3e>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007758:	b2db      	uxtb	r3, r3
 800775a:	2b01      	cmp	r3, #1
 800775c:	bf14      	ite	ne
 800775e:	2301      	movne	r3, #1
 8007760:	2300      	moveq	r3, #0
 8007762:	b2db      	uxtb	r3, r3
 8007764:	e015      	b.n	8007792 <HAL_TIM_PWM_Start+0x6a>
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	2b08      	cmp	r3, #8
 800776a:	d109      	bne.n	8007780 <HAL_TIM_PWM_Start+0x58>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007772:	b2db      	uxtb	r3, r3
 8007774:	2b01      	cmp	r3, #1
 8007776:	bf14      	ite	ne
 8007778:	2301      	movne	r3, #1
 800777a:	2300      	moveq	r3, #0
 800777c:	b2db      	uxtb	r3, r3
 800777e:	e008      	b.n	8007792 <HAL_TIM_PWM_Start+0x6a>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007786:	b2db      	uxtb	r3, r3
 8007788:	2b01      	cmp	r3, #1
 800778a:	bf14      	ite	ne
 800778c:	2301      	movne	r3, #1
 800778e:	2300      	moveq	r3, #0
 8007790:	b2db      	uxtb	r3, r3
 8007792:	2b00      	cmp	r3, #0
 8007794:	d001      	beq.n	800779a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e07c      	b.n	8007894 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d104      	bne.n	80077aa <HAL_TIM_PWM_Start+0x82>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2202      	movs	r2, #2
 80077a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077a8:	e013      	b.n	80077d2 <HAL_TIM_PWM_Start+0xaa>
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	2b04      	cmp	r3, #4
 80077ae:	d104      	bne.n	80077ba <HAL_TIM_PWM_Start+0x92>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2202      	movs	r2, #2
 80077b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077b8:	e00b      	b.n	80077d2 <HAL_TIM_PWM_Start+0xaa>
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	2b08      	cmp	r3, #8
 80077be:	d104      	bne.n	80077ca <HAL_TIM_PWM_Start+0xa2>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2202      	movs	r2, #2
 80077c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077c8:	e003      	b.n	80077d2 <HAL_TIM_PWM_Start+0xaa>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2202      	movs	r2, #2
 80077ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2201      	movs	r2, #1
 80077d8:	6839      	ldr	r1, [r7, #0]
 80077da:	4618      	mov	r0, r3
 80077dc:	f000 fe80 	bl	80084e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a2d      	ldr	r2, [pc, #180]	; (800789c <HAL_TIM_PWM_Start+0x174>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d004      	beq.n	80077f4 <HAL_TIM_PWM_Start+0xcc>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a2c      	ldr	r2, [pc, #176]	; (80078a0 <HAL_TIM_PWM_Start+0x178>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d101      	bne.n	80077f8 <HAL_TIM_PWM_Start+0xd0>
 80077f4:	2301      	movs	r3, #1
 80077f6:	e000      	b.n	80077fa <HAL_TIM_PWM_Start+0xd2>
 80077f8:	2300      	movs	r3, #0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d007      	beq.n	800780e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800780c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a22      	ldr	r2, [pc, #136]	; (800789c <HAL_TIM_PWM_Start+0x174>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d022      	beq.n	800785e <HAL_TIM_PWM_Start+0x136>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007820:	d01d      	beq.n	800785e <HAL_TIM_PWM_Start+0x136>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a1f      	ldr	r2, [pc, #124]	; (80078a4 <HAL_TIM_PWM_Start+0x17c>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d018      	beq.n	800785e <HAL_TIM_PWM_Start+0x136>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a1d      	ldr	r2, [pc, #116]	; (80078a8 <HAL_TIM_PWM_Start+0x180>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d013      	beq.n	800785e <HAL_TIM_PWM_Start+0x136>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a1c      	ldr	r2, [pc, #112]	; (80078ac <HAL_TIM_PWM_Start+0x184>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d00e      	beq.n	800785e <HAL_TIM_PWM_Start+0x136>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a16      	ldr	r2, [pc, #88]	; (80078a0 <HAL_TIM_PWM_Start+0x178>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d009      	beq.n	800785e <HAL_TIM_PWM_Start+0x136>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a18      	ldr	r2, [pc, #96]	; (80078b0 <HAL_TIM_PWM_Start+0x188>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d004      	beq.n	800785e <HAL_TIM_PWM_Start+0x136>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a16      	ldr	r2, [pc, #88]	; (80078b4 <HAL_TIM_PWM_Start+0x18c>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d111      	bne.n	8007882 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	f003 0307 	and.w	r3, r3, #7
 8007868:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2b06      	cmp	r3, #6
 800786e:	d010      	beq.n	8007892 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f042 0201 	orr.w	r2, r2, #1
 800787e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007880:	e007      	b.n	8007892 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f042 0201 	orr.w	r2, r2, #1
 8007890:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	40010000 	.word	0x40010000
 80078a0:	40010400 	.word	0x40010400
 80078a4:	40000400 	.word	0x40000400
 80078a8:	40000800 	.word	0x40000800
 80078ac:	40000c00 	.word	0x40000c00
 80078b0:	40014000 	.word	0x40014000
 80078b4:	40001800 	.word	0x40001800

080078b8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2200      	movs	r2, #0
 80078c8:	6839      	ldr	r1, [r7, #0]
 80078ca:	4618      	mov	r0, r3
 80078cc:	f000 fe08 	bl	80084e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a2e      	ldr	r2, [pc, #184]	; (8007990 <HAL_TIM_PWM_Stop+0xd8>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d004      	beq.n	80078e4 <HAL_TIM_PWM_Stop+0x2c>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a2d      	ldr	r2, [pc, #180]	; (8007994 <HAL_TIM_PWM_Stop+0xdc>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d101      	bne.n	80078e8 <HAL_TIM_PWM_Stop+0x30>
 80078e4:	2301      	movs	r3, #1
 80078e6:	e000      	b.n	80078ea <HAL_TIM_PWM_Stop+0x32>
 80078e8:	2300      	movs	r3, #0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d017      	beq.n	800791e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	6a1a      	ldr	r2, [r3, #32]
 80078f4:	f241 1311 	movw	r3, #4369	; 0x1111
 80078f8:	4013      	ands	r3, r2
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d10f      	bne.n	800791e <HAL_TIM_PWM_Stop+0x66>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	6a1a      	ldr	r2, [r3, #32]
 8007904:	f240 4344 	movw	r3, #1092	; 0x444
 8007908:	4013      	ands	r3, r2
 800790a:	2b00      	cmp	r3, #0
 800790c:	d107      	bne.n	800791e <HAL_TIM_PWM_Stop+0x66>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800791c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	6a1a      	ldr	r2, [r3, #32]
 8007924:	f241 1311 	movw	r3, #4369	; 0x1111
 8007928:	4013      	ands	r3, r2
 800792a:	2b00      	cmp	r3, #0
 800792c:	d10f      	bne.n	800794e <HAL_TIM_PWM_Stop+0x96>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	6a1a      	ldr	r2, [r3, #32]
 8007934:	f240 4344 	movw	r3, #1092	; 0x444
 8007938:	4013      	ands	r3, r2
 800793a:	2b00      	cmp	r3, #0
 800793c:	d107      	bne.n	800794e <HAL_TIM_PWM_Stop+0x96>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f022 0201 	bic.w	r2, r2, #1
 800794c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d104      	bne.n	800795e <HAL_TIM_PWM_Stop+0xa6>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800795c:	e013      	b.n	8007986 <HAL_TIM_PWM_Stop+0xce>
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	2b04      	cmp	r3, #4
 8007962:	d104      	bne.n	800796e <HAL_TIM_PWM_Stop+0xb6>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800796c:	e00b      	b.n	8007986 <HAL_TIM_PWM_Stop+0xce>
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	2b08      	cmp	r3, #8
 8007972:	d104      	bne.n	800797e <HAL_TIM_PWM_Stop+0xc6>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800797c:	e003      	b.n	8007986 <HAL_TIM_PWM_Stop+0xce>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2201      	movs	r2, #1
 8007982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007986:	2300      	movs	r3, #0
}
 8007988:	4618      	mov	r0, r3
 800798a:	3708      	adds	r7, #8
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}
 8007990:	40010000 	.word	0x40010000
 8007994:	40010400 	.word	0x40010400

08007998 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	f003 0302 	and.w	r3, r3, #2
 80079aa:	2b02      	cmp	r3, #2
 80079ac:	d122      	bne.n	80079f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	f003 0302 	and.w	r3, r3, #2
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d11b      	bne.n	80079f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f06f 0202 	mvn.w	r2, #2
 80079c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2201      	movs	r2, #1
 80079ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	f003 0303 	and.w	r3, r3, #3
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d003      	beq.n	80079e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 fa77 	bl	8007ece <HAL_TIM_IC_CaptureCallback>
 80079e0:	e005      	b.n	80079ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 fa69 	bl	8007eba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fa7a 	bl	8007ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	f003 0304 	and.w	r3, r3, #4
 80079fe:	2b04      	cmp	r3, #4
 8007a00:	d122      	bne.n	8007a48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	f003 0304 	and.w	r3, r3, #4
 8007a0c:	2b04      	cmp	r3, #4
 8007a0e:	d11b      	bne.n	8007a48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f06f 0204 	mvn.w	r2, #4
 8007a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2202      	movs	r2, #2
 8007a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d003      	beq.n	8007a36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fa4d 	bl	8007ece <HAL_TIM_IC_CaptureCallback>
 8007a34:	e005      	b.n	8007a42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 fa3f 	bl	8007eba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 fa50 	bl	8007ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	f003 0308 	and.w	r3, r3, #8
 8007a52:	2b08      	cmp	r3, #8
 8007a54:	d122      	bne.n	8007a9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	f003 0308 	and.w	r3, r3, #8
 8007a60:	2b08      	cmp	r3, #8
 8007a62:	d11b      	bne.n	8007a9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f06f 0208 	mvn.w	r2, #8
 8007a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2204      	movs	r2, #4
 8007a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	69db      	ldr	r3, [r3, #28]
 8007a7a:	f003 0303 	and.w	r3, r3, #3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d003      	beq.n	8007a8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 fa23 	bl	8007ece <HAL_TIM_IC_CaptureCallback>
 8007a88:	e005      	b.n	8007a96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 fa15 	bl	8007eba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 fa26 	bl	8007ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	f003 0310 	and.w	r3, r3, #16
 8007aa6:	2b10      	cmp	r3, #16
 8007aa8:	d122      	bne.n	8007af0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	f003 0310 	and.w	r3, r3, #16
 8007ab4:	2b10      	cmp	r3, #16
 8007ab6:	d11b      	bne.n	8007af0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f06f 0210 	mvn.w	r2, #16
 8007ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2208      	movs	r2, #8
 8007ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	69db      	ldr	r3, [r3, #28]
 8007ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d003      	beq.n	8007ade <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f9f9 	bl	8007ece <HAL_TIM_IC_CaptureCallback>
 8007adc:	e005      	b.n	8007aea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f9eb 	bl	8007eba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f9fc 	bl	8007ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	f003 0301 	and.w	r3, r3, #1
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d10e      	bne.n	8007b1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	f003 0301 	and.w	r3, r3, #1
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d107      	bne.n	8007b1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f06f 0201 	mvn.w	r2, #1
 8007b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f7fb f874 	bl	8002c04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b26:	2b80      	cmp	r3, #128	; 0x80
 8007b28:	d10e      	bne.n	8007b48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b34:	2b80      	cmp	r3, #128	; 0x80
 8007b36:	d107      	bne.n	8007b48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 fd78 	bl	8008638 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b52:	2b40      	cmp	r3, #64	; 0x40
 8007b54:	d10e      	bne.n	8007b74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b60:	2b40      	cmp	r3, #64	; 0x40
 8007b62:	d107      	bne.n	8007b74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f9c1 	bl	8007ef6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	f003 0320 	and.w	r3, r3, #32
 8007b7e:	2b20      	cmp	r3, #32
 8007b80:	d10e      	bne.n	8007ba0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	f003 0320 	and.w	r3, r3, #32
 8007b8c:	2b20      	cmp	r3, #32
 8007b8e:	d107      	bne.n	8007ba0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f06f 0220 	mvn.w	r2, #32
 8007b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 fd42 	bl	8008624 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ba0:	bf00      	nop
 8007ba2:	3708      	adds	r7, #8
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b086      	sub	sp, #24
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d101      	bne.n	8007bc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007bc2:	2302      	movs	r3, #2
 8007bc4:	e0ae      	b.n	8007d24 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2b0c      	cmp	r3, #12
 8007bd2:	f200 809f 	bhi.w	8007d14 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007bd6:	a201      	add	r2, pc, #4	; (adr r2, 8007bdc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bdc:	08007c11 	.word	0x08007c11
 8007be0:	08007d15 	.word	0x08007d15
 8007be4:	08007d15 	.word	0x08007d15
 8007be8:	08007d15 	.word	0x08007d15
 8007bec:	08007c51 	.word	0x08007c51
 8007bf0:	08007d15 	.word	0x08007d15
 8007bf4:	08007d15 	.word	0x08007d15
 8007bf8:	08007d15 	.word	0x08007d15
 8007bfc:	08007c93 	.word	0x08007c93
 8007c00:	08007d15 	.word	0x08007d15
 8007c04:	08007d15 	.word	0x08007d15
 8007c08:	08007d15 	.word	0x08007d15
 8007c0c:	08007cd3 	.word	0x08007cd3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68b9      	ldr	r1, [r7, #8]
 8007c16:	4618      	mov	r0, r3
 8007c18:	f000 fa18 	bl	800804c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	699a      	ldr	r2, [r3, #24]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f042 0208 	orr.w	r2, r2, #8
 8007c2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	699a      	ldr	r2, [r3, #24]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f022 0204 	bic.w	r2, r2, #4
 8007c3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	6999      	ldr	r1, [r3, #24]
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	691a      	ldr	r2, [r3, #16]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	430a      	orrs	r2, r1
 8007c4c:	619a      	str	r2, [r3, #24]
      break;
 8007c4e:	e064      	b.n	8007d1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68b9      	ldr	r1, [r7, #8]
 8007c56:	4618      	mov	r0, r3
 8007c58:	f000 fa68 	bl	800812c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	699a      	ldr	r2, [r3, #24]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	699a      	ldr	r2, [r3, #24]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	6999      	ldr	r1, [r3, #24]
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	021a      	lsls	r2, r3, #8
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	430a      	orrs	r2, r1
 8007c8e:	619a      	str	r2, [r3, #24]
      break;
 8007c90:	e043      	b.n	8007d1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	68b9      	ldr	r1, [r7, #8]
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f000 fabd 	bl	8008218 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	69da      	ldr	r2, [r3, #28]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f042 0208 	orr.w	r2, r2, #8
 8007cac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	69da      	ldr	r2, [r3, #28]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f022 0204 	bic.w	r2, r2, #4
 8007cbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	69d9      	ldr	r1, [r3, #28]
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	691a      	ldr	r2, [r3, #16]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	430a      	orrs	r2, r1
 8007cce:	61da      	str	r2, [r3, #28]
      break;
 8007cd0:	e023      	b.n	8007d1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68b9      	ldr	r1, [r7, #8]
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f000 fb11 	bl	8008300 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	69da      	ldr	r2, [r3, #28]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	69da      	ldr	r2, [r3, #28]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	69d9      	ldr	r1, [r3, #28]
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	021a      	lsls	r2, r3, #8
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	430a      	orrs	r2, r1
 8007d10:	61da      	str	r2, [r3, #28]
      break;
 8007d12:	e002      	b.n	8007d1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	75fb      	strb	r3, [r7, #23]
      break;
 8007d18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3718      	adds	r7, #24
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d36:	2300      	movs	r3, #0
 8007d38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d101      	bne.n	8007d48 <HAL_TIM_ConfigClockSource+0x1c>
 8007d44:	2302      	movs	r3, #2
 8007d46:	e0b4      	b.n	8007eb2 <HAL_TIM_ConfigClockSource+0x186>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2202      	movs	r2, #2
 8007d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68ba      	ldr	r2, [r7, #8]
 8007d76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d80:	d03e      	beq.n	8007e00 <HAL_TIM_ConfigClockSource+0xd4>
 8007d82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d86:	f200 8087 	bhi.w	8007e98 <HAL_TIM_ConfigClockSource+0x16c>
 8007d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d8e:	f000 8086 	beq.w	8007e9e <HAL_TIM_ConfigClockSource+0x172>
 8007d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d96:	d87f      	bhi.n	8007e98 <HAL_TIM_ConfigClockSource+0x16c>
 8007d98:	2b70      	cmp	r3, #112	; 0x70
 8007d9a:	d01a      	beq.n	8007dd2 <HAL_TIM_ConfigClockSource+0xa6>
 8007d9c:	2b70      	cmp	r3, #112	; 0x70
 8007d9e:	d87b      	bhi.n	8007e98 <HAL_TIM_ConfigClockSource+0x16c>
 8007da0:	2b60      	cmp	r3, #96	; 0x60
 8007da2:	d050      	beq.n	8007e46 <HAL_TIM_ConfigClockSource+0x11a>
 8007da4:	2b60      	cmp	r3, #96	; 0x60
 8007da6:	d877      	bhi.n	8007e98 <HAL_TIM_ConfigClockSource+0x16c>
 8007da8:	2b50      	cmp	r3, #80	; 0x50
 8007daa:	d03c      	beq.n	8007e26 <HAL_TIM_ConfigClockSource+0xfa>
 8007dac:	2b50      	cmp	r3, #80	; 0x50
 8007dae:	d873      	bhi.n	8007e98 <HAL_TIM_ConfigClockSource+0x16c>
 8007db0:	2b40      	cmp	r3, #64	; 0x40
 8007db2:	d058      	beq.n	8007e66 <HAL_TIM_ConfigClockSource+0x13a>
 8007db4:	2b40      	cmp	r3, #64	; 0x40
 8007db6:	d86f      	bhi.n	8007e98 <HAL_TIM_ConfigClockSource+0x16c>
 8007db8:	2b30      	cmp	r3, #48	; 0x30
 8007dba:	d064      	beq.n	8007e86 <HAL_TIM_ConfigClockSource+0x15a>
 8007dbc:	2b30      	cmp	r3, #48	; 0x30
 8007dbe:	d86b      	bhi.n	8007e98 <HAL_TIM_ConfigClockSource+0x16c>
 8007dc0:	2b20      	cmp	r3, #32
 8007dc2:	d060      	beq.n	8007e86 <HAL_TIM_ConfigClockSource+0x15a>
 8007dc4:	2b20      	cmp	r3, #32
 8007dc6:	d867      	bhi.n	8007e98 <HAL_TIM_ConfigClockSource+0x16c>
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d05c      	beq.n	8007e86 <HAL_TIM_ConfigClockSource+0x15a>
 8007dcc:	2b10      	cmp	r3, #16
 8007dce:	d05a      	beq.n	8007e86 <HAL_TIM_ConfigClockSource+0x15a>
 8007dd0:	e062      	b.n	8007e98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6818      	ldr	r0, [r3, #0]
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	6899      	ldr	r1, [r3, #8]
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	685a      	ldr	r2, [r3, #4]
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	f000 fb5d 	bl	80084a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007df4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68ba      	ldr	r2, [r7, #8]
 8007dfc:	609a      	str	r2, [r3, #8]
      break;
 8007dfe:	e04f      	b.n	8007ea0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6818      	ldr	r0, [r3, #0]
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	6899      	ldr	r1, [r3, #8]
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	685a      	ldr	r2, [r3, #4]
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	f000 fb46 	bl	80084a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	689a      	ldr	r2, [r3, #8]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e22:	609a      	str	r2, [r3, #8]
      break;
 8007e24:	e03c      	b.n	8007ea0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6818      	ldr	r0, [r3, #0]
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	6859      	ldr	r1, [r3, #4]
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	461a      	mov	r2, r3
 8007e34:	f000 faba 	bl	80083ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2150      	movs	r1, #80	; 0x50
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f000 fb13 	bl	800846a <TIM_ITRx_SetConfig>
      break;
 8007e44:	e02c      	b.n	8007ea0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6818      	ldr	r0, [r3, #0]
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	6859      	ldr	r1, [r3, #4]
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	461a      	mov	r2, r3
 8007e54:	f000 fad9 	bl	800840a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2160      	movs	r1, #96	; 0x60
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f000 fb03 	bl	800846a <TIM_ITRx_SetConfig>
      break;
 8007e64:	e01c      	b.n	8007ea0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6818      	ldr	r0, [r3, #0]
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	6859      	ldr	r1, [r3, #4]
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	461a      	mov	r2, r3
 8007e74:	f000 fa9a 	bl	80083ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2140      	movs	r1, #64	; 0x40
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f000 faf3 	bl	800846a <TIM_ITRx_SetConfig>
      break;
 8007e84:	e00c      	b.n	8007ea0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4619      	mov	r1, r3
 8007e90:	4610      	mov	r0, r2
 8007e92:	f000 faea 	bl	800846a <TIM_ITRx_SetConfig>
      break;
 8007e96:	e003      	b.n	8007ea0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e9c:	e000      	b.n	8007ea0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007e9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3710      	adds	r7, #16
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007eba:	b480      	push	{r7}
 8007ebc:	b083      	sub	sp, #12
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ec2:	bf00      	nop
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr

08007ece <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ece:	b480      	push	{r7}
 8007ed0:	b083      	sub	sp, #12
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ed6:	bf00      	nop
 8007ed8:	370c      	adds	r7, #12
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr

08007ee2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ee2:	b480      	push	{r7}
 8007ee4:	b083      	sub	sp, #12
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007eea:	bf00      	nop
 8007eec:	370c      	adds	r7, #12
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	b083      	sub	sp, #12
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007efe:	bf00      	nop
 8007f00:	370c      	adds	r7, #12
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr
	...

08007f0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a40      	ldr	r2, [pc, #256]	; (8008020 <TIM_Base_SetConfig+0x114>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d013      	beq.n	8007f4c <TIM_Base_SetConfig+0x40>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f2a:	d00f      	beq.n	8007f4c <TIM_Base_SetConfig+0x40>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a3d      	ldr	r2, [pc, #244]	; (8008024 <TIM_Base_SetConfig+0x118>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d00b      	beq.n	8007f4c <TIM_Base_SetConfig+0x40>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a3c      	ldr	r2, [pc, #240]	; (8008028 <TIM_Base_SetConfig+0x11c>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d007      	beq.n	8007f4c <TIM_Base_SetConfig+0x40>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4a3b      	ldr	r2, [pc, #236]	; (800802c <TIM_Base_SetConfig+0x120>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d003      	beq.n	8007f4c <TIM_Base_SetConfig+0x40>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4a3a      	ldr	r2, [pc, #232]	; (8008030 <TIM_Base_SetConfig+0x124>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d108      	bne.n	8007f5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	68fa      	ldr	r2, [r7, #12]
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a2f      	ldr	r2, [pc, #188]	; (8008020 <TIM_Base_SetConfig+0x114>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d02b      	beq.n	8007fbe <TIM_Base_SetConfig+0xb2>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f6c:	d027      	beq.n	8007fbe <TIM_Base_SetConfig+0xb2>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a2c      	ldr	r2, [pc, #176]	; (8008024 <TIM_Base_SetConfig+0x118>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d023      	beq.n	8007fbe <TIM_Base_SetConfig+0xb2>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a2b      	ldr	r2, [pc, #172]	; (8008028 <TIM_Base_SetConfig+0x11c>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d01f      	beq.n	8007fbe <TIM_Base_SetConfig+0xb2>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4a2a      	ldr	r2, [pc, #168]	; (800802c <TIM_Base_SetConfig+0x120>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d01b      	beq.n	8007fbe <TIM_Base_SetConfig+0xb2>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4a29      	ldr	r2, [pc, #164]	; (8008030 <TIM_Base_SetConfig+0x124>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d017      	beq.n	8007fbe <TIM_Base_SetConfig+0xb2>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4a28      	ldr	r2, [pc, #160]	; (8008034 <TIM_Base_SetConfig+0x128>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d013      	beq.n	8007fbe <TIM_Base_SetConfig+0xb2>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a27      	ldr	r2, [pc, #156]	; (8008038 <TIM_Base_SetConfig+0x12c>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d00f      	beq.n	8007fbe <TIM_Base_SetConfig+0xb2>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a26      	ldr	r2, [pc, #152]	; (800803c <TIM_Base_SetConfig+0x130>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d00b      	beq.n	8007fbe <TIM_Base_SetConfig+0xb2>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a25      	ldr	r2, [pc, #148]	; (8008040 <TIM_Base_SetConfig+0x134>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d007      	beq.n	8007fbe <TIM_Base_SetConfig+0xb2>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4a24      	ldr	r2, [pc, #144]	; (8008044 <TIM_Base_SetConfig+0x138>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d003      	beq.n	8007fbe <TIM_Base_SetConfig+0xb2>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a23      	ldr	r2, [pc, #140]	; (8008048 <TIM_Base_SetConfig+0x13c>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d108      	bne.n	8007fd0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	695b      	ldr	r3, [r3, #20]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	689a      	ldr	r2, [r3, #8]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	4a0a      	ldr	r2, [pc, #40]	; (8008020 <TIM_Base_SetConfig+0x114>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d003      	beq.n	8008004 <TIM_Base_SetConfig+0xf8>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	4a0c      	ldr	r2, [pc, #48]	; (8008030 <TIM_Base_SetConfig+0x124>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d103      	bne.n	800800c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	691a      	ldr	r2, [r3, #16]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	615a      	str	r2, [r3, #20]
}
 8008012:	bf00      	nop
 8008014:	3714      	adds	r7, #20
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop
 8008020:	40010000 	.word	0x40010000
 8008024:	40000400 	.word	0x40000400
 8008028:	40000800 	.word	0x40000800
 800802c:	40000c00 	.word	0x40000c00
 8008030:	40010400 	.word	0x40010400
 8008034:	40014000 	.word	0x40014000
 8008038:	40014400 	.word	0x40014400
 800803c:	40014800 	.word	0x40014800
 8008040:	40001800 	.word	0x40001800
 8008044:	40001c00 	.word	0x40001c00
 8008048:	40002000 	.word	0x40002000

0800804c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800804c:	b480      	push	{r7}
 800804e:	b087      	sub	sp, #28
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6a1b      	ldr	r3, [r3, #32]
 800805a:	f023 0201 	bic.w	r2, r3, #1
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a1b      	ldr	r3, [r3, #32]
 8008066:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	699b      	ldr	r3, [r3, #24]
 8008072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800807a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f023 0303 	bic.w	r3, r3, #3
 8008082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	4313      	orrs	r3, r2
 800808c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	f023 0302 	bic.w	r3, r3, #2
 8008094:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	697a      	ldr	r2, [r7, #20]
 800809c:	4313      	orrs	r3, r2
 800809e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	4a20      	ldr	r2, [pc, #128]	; (8008124 <TIM_OC1_SetConfig+0xd8>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d003      	beq.n	80080b0 <TIM_OC1_SetConfig+0x64>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	4a1f      	ldr	r2, [pc, #124]	; (8008128 <TIM_OC1_SetConfig+0xdc>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d10c      	bne.n	80080ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	f023 0308 	bic.w	r3, r3, #8
 80080b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	697a      	ldr	r2, [r7, #20]
 80080be:	4313      	orrs	r3, r2
 80080c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	f023 0304 	bic.w	r3, r3, #4
 80080c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	4a15      	ldr	r2, [pc, #84]	; (8008124 <TIM_OC1_SetConfig+0xd8>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d003      	beq.n	80080da <TIM_OC1_SetConfig+0x8e>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4a14      	ldr	r2, [pc, #80]	; (8008128 <TIM_OC1_SetConfig+0xdc>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d111      	bne.n	80080fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	695b      	ldr	r3, [r3, #20]
 80080ee:	693a      	ldr	r2, [r7, #16]
 80080f0:	4313      	orrs	r3, r2
 80080f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	699b      	ldr	r3, [r3, #24]
 80080f8:	693a      	ldr	r2, [r7, #16]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	693a      	ldr	r2, [r7, #16]
 8008102:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	685a      	ldr	r2, [r3, #4]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	697a      	ldr	r2, [r7, #20]
 8008116:	621a      	str	r2, [r3, #32]
}
 8008118:	bf00      	nop
 800811a:	371c      	adds	r7, #28
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr
 8008124:	40010000 	.word	0x40010000
 8008128:	40010400 	.word	0x40010400

0800812c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800812c:	b480      	push	{r7}
 800812e:	b087      	sub	sp, #28
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a1b      	ldr	r3, [r3, #32]
 800813a:	f023 0210 	bic.w	r2, r3, #16
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a1b      	ldr	r3, [r3, #32]
 8008146:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	699b      	ldr	r3, [r3, #24]
 8008152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800815a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008162:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	021b      	lsls	r3, r3, #8
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	4313      	orrs	r3, r2
 800816e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	f023 0320 	bic.w	r3, r3, #32
 8008176:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	011b      	lsls	r3, r3, #4
 800817e:	697a      	ldr	r2, [r7, #20]
 8008180:	4313      	orrs	r3, r2
 8008182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4a22      	ldr	r2, [pc, #136]	; (8008210 <TIM_OC2_SetConfig+0xe4>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d003      	beq.n	8008194 <TIM_OC2_SetConfig+0x68>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4a21      	ldr	r2, [pc, #132]	; (8008214 <TIM_OC2_SetConfig+0xe8>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d10d      	bne.n	80081b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800819a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	011b      	lsls	r3, r3, #4
 80081a2:	697a      	ldr	r2, [r7, #20]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	4a17      	ldr	r2, [pc, #92]	; (8008210 <TIM_OC2_SetConfig+0xe4>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d003      	beq.n	80081c0 <TIM_OC2_SetConfig+0x94>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4a16      	ldr	r2, [pc, #88]	; (8008214 <TIM_OC2_SetConfig+0xe8>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d113      	bne.n	80081e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	695b      	ldr	r3, [r3, #20]
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	693a      	ldr	r2, [r7, #16]
 80081d8:	4313      	orrs	r3, r2
 80081da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	699b      	ldr	r3, [r3, #24]
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	693a      	ldr	r2, [r7, #16]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	693a      	ldr	r2, [r7, #16]
 80081ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	68fa      	ldr	r2, [r7, #12]
 80081f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	685a      	ldr	r2, [r3, #4]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	697a      	ldr	r2, [r7, #20]
 8008200:	621a      	str	r2, [r3, #32]
}
 8008202:	bf00      	nop
 8008204:	371c      	adds	r7, #28
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr
 800820e:	bf00      	nop
 8008210:	40010000 	.word	0x40010000
 8008214:	40010400 	.word	0x40010400

08008218 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008218:	b480      	push	{r7}
 800821a:	b087      	sub	sp, #28
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6a1b      	ldr	r3, [r3, #32]
 8008226:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a1b      	ldr	r3, [r3, #32]
 8008232:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	69db      	ldr	r3, [r3, #28]
 800823e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f023 0303 	bic.w	r3, r3, #3
 800824e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	4313      	orrs	r3, r2
 8008258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008260:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	021b      	lsls	r3, r3, #8
 8008268:	697a      	ldr	r2, [r7, #20]
 800826a:	4313      	orrs	r3, r2
 800826c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4a21      	ldr	r2, [pc, #132]	; (80082f8 <TIM_OC3_SetConfig+0xe0>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d003      	beq.n	800827e <TIM_OC3_SetConfig+0x66>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	4a20      	ldr	r2, [pc, #128]	; (80082fc <TIM_OC3_SetConfig+0xe4>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d10d      	bne.n	800829a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008284:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	021b      	lsls	r3, r3, #8
 800828c:	697a      	ldr	r2, [r7, #20]
 800828e:	4313      	orrs	r3, r2
 8008290:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008298:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a16      	ldr	r2, [pc, #88]	; (80082f8 <TIM_OC3_SetConfig+0xe0>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d003      	beq.n	80082aa <TIM_OC3_SetConfig+0x92>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a15      	ldr	r2, [pc, #84]	; (80082fc <TIM_OC3_SetConfig+0xe4>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d113      	bne.n	80082d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	695b      	ldr	r3, [r3, #20]
 80082be:	011b      	lsls	r3, r3, #4
 80082c0:	693a      	ldr	r2, [r7, #16]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	699b      	ldr	r3, [r3, #24]
 80082ca:	011b      	lsls	r3, r3, #4
 80082cc:	693a      	ldr	r2, [r7, #16]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	693a      	ldr	r2, [r7, #16]
 80082d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	68fa      	ldr	r2, [r7, #12]
 80082dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	685a      	ldr	r2, [r3, #4]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	697a      	ldr	r2, [r7, #20]
 80082ea:	621a      	str	r2, [r3, #32]
}
 80082ec:	bf00      	nop
 80082ee:	371c      	adds	r7, #28
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr
 80082f8:	40010000 	.word	0x40010000
 80082fc:	40010400 	.word	0x40010400

08008300 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008300:	b480      	push	{r7}
 8008302:	b087      	sub	sp, #28
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6a1b      	ldr	r3, [r3, #32]
 800830e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a1b      	ldr	r3, [r3, #32]
 800831a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	69db      	ldr	r3, [r3, #28]
 8008326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800832e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008336:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	021b      	lsls	r3, r3, #8
 800833e:	68fa      	ldr	r2, [r7, #12]
 8008340:	4313      	orrs	r3, r2
 8008342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800834a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	031b      	lsls	r3, r3, #12
 8008352:	693a      	ldr	r2, [r7, #16]
 8008354:	4313      	orrs	r3, r2
 8008356:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a12      	ldr	r2, [pc, #72]	; (80083a4 <TIM_OC4_SetConfig+0xa4>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d003      	beq.n	8008368 <TIM_OC4_SetConfig+0x68>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4a11      	ldr	r2, [pc, #68]	; (80083a8 <TIM_OC4_SetConfig+0xa8>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d109      	bne.n	800837c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800836e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	695b      	ldr	r3, [r3, #20]
 8008374:	019b      	lsls	r3, r3, #6
 8008376:	697a      	ldr	r2, [r7, #20]
 8008378:	4313      	orrs	r3, r2
 800837a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	697a      	ldr	r2, [r7, #20]
 8008380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	685a      	ldr	r2, [r3, #4]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	693a      	ldr	r2, [r7, #16]
 8008394:	621a      	str	r2, [r3, #32]
}
 8008396:	bf00      	nop
 8008398:	371c      	adds	r7, #28
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	40010000 	.word	0x40010000
 80083a8:	40010400 	.word	0x40010400

080083ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b087      	sub	sp, #28
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6a1b      	ldr	r3, [r3, #32]
 80083bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6a1b      	ldr	r3, [r3, #32]
 80083c2:	f023 0201 	bic.w	r2, r3, #1
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80083d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	011b      	lsls	r3, r3, #4
 80083dc:	693a      	ldr	r2, [r7, #16]
 80083de:	4313      	orrs	r3, r2
 80083e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	f023 030a 	bic.w	r3, r3, #10
 80083e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80083ea:	697a      	ldr	r2, [r7, #20]
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	693a      	ldr	r2, [r7, #16]
 80083f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	697a      	ldr	r2, [r7, #20]
 80083fc:	621a      	str	r2, [r3, #32]
}
 80083fe:	bf00      	nop
 8008400:	371c      	adds	r7, #28
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr

0800840a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800840a:	b480      	push	{r7}
 800840c:	b087      	sub	sp, #28
 800840e:	af00      	add	r7, sp, #0
 8008410:	60f8      	str	r0, [r7, #12]
 8008412:	60b9      	str	r1, [r7, #8]
 8008414:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6a1b      	ldr	r3, [r3, #32]
 800841a:	f023 0210 	bic.w	r2, r3, #16
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	699b      	ldr	r3, [r3, #24]
 8008426:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6a1b      	ldr	r3, [r3, #32]
 800842c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008434:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	031b      	lsls	r3, r3, #12
 800843a:	697a      	ldr	r2, [r7, #20]
 800843c:	4313      	orrs	r3, r2
 800843e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008446:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	011b      	lsls	r3, r3, #4
 800844c:	693a      	ldr	r2, [r7, #16]
 800844e:	4313      	orrs	r3, r2
 8008450:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	697a      	ldr	r2, [r7, #20]
 8008456:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	693a      	ldr	r2, [r7, #16]
 800845c:	621a      	str	r2, [r3, #32]
}
 800845e:	bf00      	nop
 8008460:	371c      	adds	r7, #28
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr

0800846a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800846a:	b480      	push	{r7}
 800846c:	b085      	sub	sp, #20
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008480:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008482:	683a      	ldr	r2, [r7, #0]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	4313      	orrs	r3, r2
 8008488:	f043 0307 	orr.w	r3, r3, #7
 800848c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	609a      	str	r2, [r3, #8]
}
 8008494:	bf00      	nop
 8008496:	3714      	adds	r7, #20
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b087      	sub	sp, #28
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	607a      	str	r2, [r7, #4]
 80084ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80084ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	021a      	lsls	r2, r3, #8
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	431a      	orrs	r2, r3
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	4313      	orrs	r3, r2
 80084c8:	697a      	ldr	r2, [r7, #20]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	697a      	ldr	r2, [r7, #20]
 80084d2:	609a      	str	r2, [r3, #8]
}
 80084d4:	bf00      	nop
 80084d6:	371c      	adds	r7, #28
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b087      	sub	sp, #28
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	f003 031f 	and.w	r3, r3, #31
 80084f2:	2201      	movs	r2, #1
 80084f4:	fa02 f303 	lsl.w	r3, r2, r3
 80084f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6a1a      	ldr	r2, [r3, #32]
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	43db      	mvns	r3, r3
 8008502:	401a      	ands	r2, r3
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6a1a      	ldr	r2, [r3, #32]
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	f003 031f 	and.w	r3, r3, #31
 8008512:	6879      	ldr	r1, [r7, #4]
 8008514:	fa01 f303 	lsl.w	r3, r1, r3
 8008518:	431a      	orrs	r2, r3
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	621a      	str	r2, [r3, #32]
}
 800851e:	bf00      	nop
 8008520:	371c      	adds	r7, #28
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
	...

0800852c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800852c:	b480      	push	{r7}
 800852e:	b085      	sub	sp, #20
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800853c:	2b01      	cmp	r3, #1
 800853e:	d101      	bne.n	8008544 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008540:	2302      	movs	r3, #2
 8008542:	e05a      	b.n	80085fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2202      	movs	r2, #2
 8008550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800856a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68fa      	ldr	r2, [r7, #12]
 8008572:	4313      	orrs	r3, r2
 8008574:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	68fa      	ldr	r2, [r7, #12]
 800857c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a21      	ldr	r2, [pc, #132]	; (8008608 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d022      	beq.n	80085ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008590:	d01d      	beq.n	80085ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a1d      	ldr	r2, [pc, #116]	; (800860c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d018      	beq.n	80085ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a1b      	ldr	r2, [pc, #108]	; (8008610 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d013      	beq.n	80085ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a1a      	ldr	r2, [pc, #104]	; (8008614 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d00e      	beq.n	80085ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a18      	ldr	r2, [pc, #96]	; (8008618 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d009      	beq.n	80085ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a17      	ldr	r2, [pc, #92]	; (800861c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d004      	beq.n	80085ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a15      	ldr	r2, [pc, #84]	; (8008620 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d10c      	bne.n	80085e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	68ba      	ldr	r2, [r7, #8]
 80085dc:	4313      	orrs	r3, r2
 80085de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	68ba      	ldr	r2, [r7, #8]
 80085e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085f8:	2300      	movs	r3, #0
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3714      	adds	r7, #20
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr
 8008606:	bf00      	nop
 8008608:	40010000 	.word	0x40010000
 800860c:	40000400 	.word	0x40000400
 8008610:	40000800 	.word	0x40000800
 8008614:	40000c00 	.word	0x40000c00
 8008618:	40010400 	.word	0x40010400
 800861c:	40014000 	.word	0x40014000
 8008620:	40001800 	.word	0x40001800

08008624 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800862c:	bf00      	nop
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008640:	bf00      	nop
 8008642:	370c      	adds	r7, #12
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d101      	bne.n	800865e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	e03f      	b.n	80086de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008664:	b2db      	uxtb	r3, r3
 8008666:	2b00      	cmp	r3, #0
 8008668:	d106      	bne.n	8008678 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f7fa ff02 	bl	800347c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2224      	movs	r2, #36	; 0x24
 800867c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	68da      	ldr	r2, [r3, #12]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800868e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 f939 	bl	8008908 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	691a      	ldr	r2, [r3, #16]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80086a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	695a      	ldr	r2, [r3, #20]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80086b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68da      	ldr	r2, [r3, #12]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80086c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2220      	movs	r2, #32
 80086d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2220      	movs	r2, #32
 80086d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3708      	adds	r7, #8
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b08a      	sub	sp, #40	; 0x28
 80086ea:	af02      	add	r7, sp, #8
 80086ec:	60f8      	str	r0, [r7, #12]
 80086ee:	60b9      	str	r1, [r7, #8]
 80086f0:	603b      	str	r3, [r7, #0]
 80086f2:	4613      	mov	r3, r2
 80086f4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80086f6:	2300      	movs	r3, #0
 80086f8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008700:	b2db      	uxtb	r3, r3
 8008702:	2b20      	cmp	r3, #32
 8008704:	f040 808c 	bne.w	8008820 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d002      	beq.n	8008714 <HAL_UART_Receive+0x2e>
 800870e:	88fb      	ldrh	r3, [r7, #6]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d101      	bne.n	8008718 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	e084      	b.n	8008822 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800871e:	2b01      	cmp	r3, #1
 8008720:	d101      	bne.n	8008726 <HAL_UART_Receive+0x40>
 8008722:	2302      	movs	r3, #2
 8008724:	e07d      	b.n	8008822 <HAL_UART_Receive+0x13c>
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2201      	movs	r2, #1
 800872a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2200      	movs	r2, #0
 8008732:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2222      	movs	r2, #34	; 0x22
 8008738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2200      	movs	r2, #0
 8008740:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008742:	f7fb f891 	bl	8003868 <HAL_GetTick>
 8008746:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	88fa      	ldrh	r2, [r7, #6]
 800874c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	88fa      	ldrh	r2, [r7, #6]
 8008752:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800875c:	d108      	bne.n	8008770 <HAL_UART_Receive+0x8a>
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d104      	bne.n	8008770 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8008766:	2300      	movs	r3, #0
 8008768:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	61bb      	str	r3, [r7, #24]
 800876e:	e003      	b.n	8008778 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008774:	2300      	movs	r3, #0
 8008776:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2200      	movs	r2, #0
 800877c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008780:	e043      	b.n	800880a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	9300      	str	r3, [sp, #0]
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	2200      	movs	r2, #0
 800878a:	2120      	movs	r1, #32
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	f000 f84c 	bl	800882a <UART_WaitOnFlagUntilTimeout>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d001      	beq.n	800879c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8008798:	2303      	movs	r3, #3
 800879a:	e042      	b.n	8008822 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d10c      	bne.n	80087bc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ae:	b29a      	uxth	r2, r3
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	3302      	adds	r3, #2
 80087b8:	61bb      	str	r3, [r7, #24]
 80087ba:	e01f      	b.n	80087fc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087c4:	d007      	beq.n	80087d6 <HAL_UART_Receive+0xf0>
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d10a      	bne.n	80087e4 <HAL_UART_Receive+0xfe>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d106      	bne.n	80087e4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	b2da      	uxtb	r2, r3
 80087de:	69fb      	ldr	r3, [r7, #28]
 80087e0:	701a      	strb	r2, [r3, #0]
 80087e2:	e008      	b.n	80087f6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087f0:	b2da      	uxtb	r2, r3
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80087f6:	69fb      	ldr	r3, [r7, #28]
 80087f8:	3301      	adds	r3, #1
 80087fa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008800:	b29b      	uxth	r3, r3
 8008802:	3b01      	subs	r3, #1
 8008804:	b29a      	uxth	r2, r3
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800880e:	b29b      	uxth	r3, r3
 8008810:	2b00      	cmp	r3, #0
 8008812:	d1b6      	bne.n	8008782 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2220      	movs	r2, #32
 8008818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800881c:	2300      	movs	r3, #0
 800881e:	e000      	b.n	8008822 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8008820:	2302      	movs	r3, #2
  }
}
 8008822:	4618      	mov	r0, r3
 8008824:	3720      	adds	r7, #32
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b090      	sub	sp, #64	; 0x40
 800882e:	af00      	add	r7, sp, #0
 8008830:	60f8      	str	r0, [r7, #12]
 8008832:	60b9      	str	r1, [r7, #8]
 8008834:	603b      	str	r3, [r7, #0]
 8008836:	4613      	mov	r3, r2
 8008838:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800883a:	e050      	b.n	80088de <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800883c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800883e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008842:	d04c      	beq.n	80088de <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008844:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008846:	2b00      	cmp	r3, #0
 8008848:	d007      	beq.n	800885a <UART_WaitOnFlagUntilTimeout+0x30>
 800884a:	f7fb f80d 	bl	8003868 <HAL_GetTick>
 800884e:	4602      	mov	r2, r0
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	1ad3      	subs	r3, r2, r3
 8008854:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008856:	429a      	cmp	r2, r3
 8008858:	d241      	bcs.n	80088de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	330c      	adds	r3, #12
 8008860:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008864:	e853 3f00 	ldrex	r3, [r3]
 8008868:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800886a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008870:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	330c      	adds	r3, #12
 8008878:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800887a:	637a      	str	r2, [r7, #52]	; 0x34
 800887c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800887e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008880:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008882:	e841 2300 	strex	r3, r2, [r1]
 8008886:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1e5      	bne.n	800885a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	3314      	adds	r3, #20
 8008894:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	e853 3f00 	ldrex	r3, [r3]
 800889c:	613b      	str	r3, [r7, #16]
   return(result);
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	f023 0301 	bic.w	r3, r3, #1
 80088a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	3314      	adds	r3, #20
 80088ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088ae:	623a      	str	r2, [r7, #32]
 80088b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b2:	69f9      	ldr	r1, [r7, #28]
 80088b4:	6a3a      	ldr	r2, [r7, #32]
 80088b6:	e841 2300 	strex	r3, r2, [r1]
 80088ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1e5      	bne.n	800888e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2220      	movs	r2, #32
 80088c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2220      	movs	r2, #32
 80088ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80088da:	2303      	movs	r3, #3
 80088dc:	e00f      	b.n	80088fe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	4013      	ands	r3, r2
 80088e8:	68ba      	ldr	r2, [r7, #8]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	bf0c      	ite	eq
 80088ee:	2301      	moveq	r3, #1
 80088f0:	2300      	movne	r3, #0
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	461a      	mov	r2, r3
 80088f6:	79fb      	ldrb	r3, [r7, #7]
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d09f      	beq.n	800883c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3740      	adds	r7, #64	; 0x40
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
	...

08008908 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800890c:	b09f      	sub	sp, #124	; 0x7c
 800890e:	af00      	add	r7, sp, #0
 8008910:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800891c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800891e:	68d9      	ldr	r1, [r3, #12]
 8008920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	ea40 0301 	orr.w	r3, r0, r1
 8008928:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800892a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800892c:	689a      	ldr	r2, [r3, #8]
 800892e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008930:	691b      	ldr	r3, [r3, #16]
 8008932:	431a      	orrs	r2, r3
 8008934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008936:	695b      	ldr	r3, [r3, #20]
 8008938:	431a      	orrs	r2, r3
 800893a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800893c:	69db      	ldr	r3, [r3, #28]
 800893e:	4313      	orrs	r3, r2
 8008940:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800894c:	f021 010c 	bic.w	r1, r1, #12
 8008950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008956:	430b      	orrs	r3, r1
 8008958:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800895a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	695b      	ldr	r3, [r3, #20]
 8008960:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008966:	6999      	ldr	r1, [r3, #24]
 8008968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	ea40 0301 	orr.w	r3, r0, r1
 8008970:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	4bc5      	ldr	r3, [pc, #788]	; (8008c8c <UART_SetConfig+0x384>)
 8008978:	429a      	cmp	r2, r3
 800897a:	d004      	beq.n	8008986 <UART_SetConfig+0x7e>
 800897c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	4bc3      	ldr	r3, [pc, #780]	; (8008c90 <UART_SetConfig+0x388>)
 8008982:	429a      	cmp	r2, r3
 8008984:	d103      	bne.n	800898e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008986:	f7fe fb1d 	bl	8006fc4 <HAL_RCC_GetPCLK2Freq>
 800898a:	6778      	str	r0, [r7, #116]	; 0x74
 800898c:	e002      	b.n	8008994 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800898e:	f7fe fb05 	bl	8006f9c <HAL_RCC_GetPCLK1Freq>
 8008992:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008996:	69db      	ldr	r3, [r3, #28]
 8008998:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800899c:	f040 80b6 	bne.w	8008b0c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80089a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089a2:	461c      	mov	r4, r3
 80089a4:	f04f 0500 	mov.w	r5, #0
 80089a8:	4622      	mov	r2, r4
 80089aa:	462b      	mov	r3, r5
 80089ac:	1891      	adds	r1, r2, r2
 80089ae:	6439      	str	r1, [r7, #64]	; 0x40
 80089b0:	415b      	adcs	r3, r3
 80089b2:	647b      	str	r3, [r7, #68]	; 0x44
 80089b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80089b8:	1912      	adds	r2, r2, r4
 80089ba:	eb45 0303 	adc.w	r3, r5, r3
 80089be:	f04f 0000 	mov.w	r0, #0
 80089c2:	f04f 0100 	mov.w	r1, #0
 80089c6:	00d9      	lsls	r1, r3, #3
 80089c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80089cc:	00d0      	lsls	r0, r2, #3
 80089ce:	4602      	mov	r2, r0
 80089d0:	460b      	mov	r3, r1
 80089d2:	1911      	adds	r1, r2, r4
 80089d4:	6639      	str	r1, [r7, #96]	; 0x60
 80089d6:	416b      	adcs	r3, r5
 80089d8:	667b      	str	r3, [r7, #100]	; 0x64
 80089da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	461a      	mov	r2, r3
 80089e0:	f04f 0300 	mov.w	r3, #0
 80089e4:	1891      	adds	r1, r2, r2
 80089e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80089e8:	415b      	adcs	r3, r3
 80089ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80089f0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80089f4:	f7f8 f958 	bl	8000ca8 <__aeabi_uldivmod>
 80089f8:	4602      	mov	r2, r0
 80089fa:	460b      	mov	r3, r1
 80089fc:	4ba5      	ldr	r3, [pc, #660]	; (8008c94 <UART_SetConfig+0x38c>)
 80089fe:	fba3 2302 	umull	r2, r3, r3, r2
 8008a02:	095b      	lsrs	r3, r3, #5
 8008a04:	011e      	lsls	r6, r3, #4
 8008a06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a08:	461c      	mov	r4, r3
 8008a0a:	f04f 0500 	mov.w	r5, #0
 8008a0e:	4622      	mov	r2, r4
 8008a10:	462b      	mov	r3, r5
 8008a12:	1891      	adds	r1, r2, r2
 8008a14:	6339      	str	r1, [r7, #48]	; 0x30
 8008a16:	415b      	adcs	r3, r3
 8008a18:	637b      	str	r3, [r7, #52]	; 0x34
 8008a1a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008a1e:	1912      	adds	r2, r2, r4
 8008a20:	eb45 0303 	adc.w	r3, r5, r3
 8008a24:	f04f 0000 	mov.w	r0, #0
 8008a28:	f04f 0100 	mov.w	r1, #0
 8008a2c:	00d9      	lsls	r1, r3, #3
 8008a2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008a32:	00d0      	lsls	r0, r2, #3
 8008a34:	4602      	mov	r2, r0
 8008a36:	460b      	mov	r3, r1
 8008a38:	1911      	adds	r1, r2, r4
 8008a3a:	65b9      	str	r1, [r7, #88]	; 0x58
 8008a3c:	416b      	adcs	r3, r5
 8008a3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	461a      	mov	r2, r3
 8008a46:	f04f 0300 	mov.w	r3, #0
 8008a4a:	1891      	adds	r1, r2, r2
 8008a4c:	62b9      	str	r1, [r7, #40]	; 0x28
 8008a4e:	415b      	adcs	r3, r3
 8008a50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a56:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008a5a:	f7f8 f925 	bl	8000ca8 <__aeabi_uldivmod>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	460b      	mov	r3, r1
 8008a62:	4b8c      	ldr	r3, [pc, #560]	; (8008c94 <UART_SetConfig+0x38c>)
 8008a64:	fba3 1302 	umull	r1, r3, r3, r2
 8008a68:	095b      	lsrs	r3, r3, #5
 8008a6a:	2164      	movs	r1, #100	; 0x64
 8008a6c:	fb01 f303 	mul.w	r3, r1, r3
 8008a70:	1ad3      	subs	r3, r2, r3
 8008a72:	00db      	lsls	r3, r3, #3
 8008a74:	3332      	adds	r3, #50	; 0x32
 8008a76:	4a87      	ldr	r2, [pc, #540]	; (8008c94 <UART_SetConfig+0x38c>)
 8008a78:	fba2 2303 	umull	r2, r3, r2, r3
 8008a7c:	095b      	lsrs	r3, r3, #5
 8008a7e:	005b      	lsls	r3, r3, #1
 8008a80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008a84:	441e      	add	r6, r3
 8008a86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f04f 0100 	mov.w	r1, #0
 8008a8e:	4602      	mov	r2, r0
 8008a90:	460b      	mov	r3, r1
 8008a92:	1894      	adds	r4, r2, r2
 8008a94:	623c      	str	r4, [r7, #32]
 8008a96:	415b      	adcs	r3, r3
 8008a98:	627b      	str	r3, [r7, #36]	; 0x24
 8008a9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008a9e:	1812      	adds	r2, r2, r0
 8008aa0:	eb41 0303 	adc.w	r3, r1, r3
 8008aa4:	f04f 0400 	mov.w	r4, #0
 8008aa8:	f04f 0500 	mov.w	r5, #0
 8008aac:	00dd      	lsls	r5, r3, #3
 8008aae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008ab2:	00d4      	lsls	r4, r2, #3
 8008ab4:	4622      	mov	r2, r4
 8008ab6:	462b      	mov	r3, r5
 8008ab8:	1814      	adds	r4, r2, r0
 8008aba:	653c      	str	r4, [r7, #80]	; 0x50
 8008abc:	414b      	adcs	r3, r1
 8008abe:	657b      	str	r3, [r7, #84]	; 0x54
 8008ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	f04f 0300 	mov.w	r3, #0
 8008aca:	1891      	adds	r1, r2, r2
 8008acc:	61b9      	str	r1, [r7, #24]
 8008ace:	415b      	adcs	r3, r3
 8008ad0:	61fb      	str	r3, [r7, #28]
 8008ad2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ad6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008ada:	f7f8 f8e5 	bl	8000ca8 <__aeabi_uldivmod>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	4b6c      	ldr	r3, [pc, #432]	; (8008c94 <UART_SetConfig+0x38c>)
 8008ae4:	fba3 1302 	umull	r1, r3, r3, r2
 8008ae8:	095b      	lsrs	r3, r3, #5
 8008aea:	2164      	movs	r1, #100	; 0x64
 8008aec:	fb01 f303 	mul.w	r3, r1, r3
 8008af0:	1ad3      	subs	r3, r2, r3
 8008af2:	00db      	lsls	r3, r3, #3
 8008af4:	3332      	adds	r3, #50	; 0x32
 8008af6:	4a67      	ldr	r2, [pc, #412]	; (8008c94 <UART_SetConfig+0x38c>)
 8008af8:	fba2 2303 	umull	r2, r3, r2, r3
 8008afc:	095b      	lsrs	r3, r3, #5
 8008afe:	f003 0207 	and.w	r2, r3, #7
 8008b02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4432      	add	r2, r6
 8008b08:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008b0a:	e0b9      	b.n	8008c80 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b0e:	461c      	mov	r4, r3
 8008b10:	f04f 0500 	mov.w	r5, #0
 8008b14:	4622      	mov	r2, r4
 8008b16:	462b      	mov	r3, r5
 8008b18:	1891      	adds	r1, r2, r2
 8008b1a:	6139      	str	r1, [r7, #16]
 8008b1c:	415b      	adcs	r3, r3
 8008b1e:	617b      	str	r3, [r7, #20]
 8008b20:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008b24:	1912      	adds	r2, r2, r4
 8008b26:	eb45 0303 	adc.w	r3, r5, r3
 8008b2a:	f04f 0000 	mov.w	r0, #0
 8008b2e:	f04f 0100 	mov.w	r1, #0
 8008b32:	00d9      	lsls	r1, r3, #3
 8008b34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008b38:	00d0      	lsls	r0, r2, #3
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	eb12 0804 	adds.w	r8, r2, r4
 8008b42:	eb43 0905 	adc.w	r9, r3, r5
 8008b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f04f 0100 	mov.w	r1, #0
 8008b50:	f04f 0200 	mov.w	r2, #0
 8008b54:	f04f 0300 	mov.w	r3, #0
 8008b58:	008b      	lsls	r3, r1, #2
 8008b5a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008b5e:	0082      	lsls	r2, r0, #2
 8008b60:	4640      	mov	r0, r8
 8008b62:	4649      	mov	r1, r9
 8008b64:	f7f8 f8a0 	bl	8000ca8 <__aeabi_uldivmod>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	4b49      	ldr	r3, [pc, #292]	; (8008c94 <UART_SetConfig+0x38c>)
 8008b6e:	fba3 2302 	umull	r2, r3, r3, r2
 8008b72:	095b      	lsrs	r3, r3, #5
 8008b74:	011e      	lsls	r6, r3, #4
 8008b76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f04f 0100 	mov.w	r1, #0
 8008b7e:	4602      	mov	r2, r0
 8008b80:	460b      	mov	r3, r1
 8008b82:	1894      	adds	r4, r2, r2
 8008b84:	60bc      	str	r4, [r7, #8]
 8008b86:	415b      	adcs	r3, r3
 8008b88:	60fb      	str	r3, [r7, #12]
 8008b8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b8e:	1812      	adds	r2, r2, r0
 8008b90:	eb41 0303 	adc.w	r3, r1, r3
 8008b94:	f04f 0400 	mov.w	r4, #0
 8008b98:	f04f 0500 	mov.w	r5, #0
 8008b9c:	00dd      	lsls	r5, r3, #3
 8008b9e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008ba2:	00d4      	lsls	r4, r2, #3
 8008ba4:	4622      	mov	r2, r4
 8008ba6:	462b      	mov	r3, r5
 8008ba8:	1814      	adds	r4, r2, r0
 8008baa:	64bc      	str	r4, [r7, #72]	; 0x48
 8008bac:	414b      	adcs	r3, r1
 8008bae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f04f 0100 	mov.w	r1, #0
 8008bba:	f04f 0200 	mov.w	r2, #0
 8008bbe:	f04f 0300 	mov.w	r3, #0
 8008bc2:	008b      	lsls	r3, r1, #2
 8008bc4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008bc8:	0082      	lsls	r2, r0, #2
 8008bca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008bce:	f7f8 f86b 	bl	8000ca8 <__aeabi_uldivmod>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	4b2f      	ldr	r3, [pc, #188]	; (8008c94 <UART_SetConfig+0x38c>)
 8008bd8:	fba3 1302 	umull	r1, r3, r3, r2
 8008bdc:	095b      	lsrs	r3, r3, #5
 8008bde:	2164      	movs	r1, #100	; 0x64
 8008be0:	fb01 f303 	mul.w	r3, r1, r3
 8008be4:	1ad3      	subs	r3, r2, r3
 8008be6:	011b      	lsls	r3, r3, #4
 8008be8:	3332      	adds	r3, #50	; 0x32
 8008bea:	4a2a      	ldr	r2, [pc, #168]	; (8008c94 <UART_SetConfig+0x38c>)
 8008bec:	fba2 2303 	umull	r2, r3, r2, r3
 8008bf0:	095b      	lsrs	r3, r3, #5
 8008bf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008bf6:	441e      	add	r6, r3
 8008bf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f04f 0100 	mov.w	r1, #0
 8008c00:	4602      	mov	r2, r0
 8008c02:	460b      	mov	r3, r1
 8008c04:	1894      	adds	r4, r2, r2
 8008c06:	603c      	str	r4, [r7, #0]
 8008c08:	415b      	adcs	r3, r3
 8008c0a:	607b      	str	r3, [r7, #4]
 8008c0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c10:	1812      	adds	r2, r2, r0
 8008c12:	eb41 0303 	adc.w	r3, r1, r3
 8008c16:	f04f 0400 	mov.w	r4, #0
 8008c1a:	f04f 0500 	mov.w	r5, #0
 8008c1e:	00dd      	lsls	r5, r3, #3
 8008c20:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008c24:	00d4      	lsls	r4, r2, #3
 8008c26:	4622      	mov	r2, r4
 8008c28:	462b      	mov	r3, r5
 8008c2a:	eb12 0a00 	adds.w	sl, r2, r0
 8008c2e:	eb43 0b01 	adc.w	fp, r3, r1
 8008c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	4618      	mov	r0, r3
 8008c38:	f04f 0100 	mov.w	r1, #0
 8008c3c:	f04f 0200 	mov.w	r2, #0
 8008c40:	f04f 0300 	mov.w	r3, #0
 8008c44:	008b      	lsls	r3, r1, #2
 8008c46:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008c4a:	0082      	lsls	r2, r0, #2
 8008c4c:	4650      	mov	r0, sl
 8008c4e:	4659      	mov	r1, fp
 8008c50:	f7f8 f82a 	bl	8000ca8 <__aeabi_uldivmod>
 8008c54:	4602      	mov	r2, r0
 8008c56:	460b      	mov	r3, r1
 8008c58:	4b0e      	ldr	r3, [pc, #56]	; (8008c94 <UART_SetConfig+0x38c>)
 8008c5a:	fba3 1302 	umull	r1, r3, r3, r2
 8008c5e:	095b      	lsrs	r3, r3, #5
 8008c60:	2164      	movs	r1, #100	; 0x64
 8008c62:	fb01 f303 	mul.w	r3, r1, r3
 8008c66:	1ad3      	subs	r3, r2, r3
 8008c68:	011b      	lsls	r3, r3, #4
 8008c6a:	3332      	adds	r3, #50	; 0x32
 8008c6c:	4a09      	ldr	r2, [pc, #36]	; (8008c94 <UART_SetConfig+0x38c>)
 8008c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c72:	095b      	lsrs	r3, r3, #5
 8008c74:	f003 020f 	and.w	r2, r3, #15
 8008c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4432      	add	r2, r6
 8008c7e:	609a      	str	r2, [r3, #8]
}
 8008c80:	bf00      	nop
 8008c82:	377c      	adds	r7, #124	; 0x7c
 8008c84:	46bd      	mov	sp, r7
 8008c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c8a:	bf00      	nop
 8008c8c:	40011000 	.word	0x40011000
 8008c90:	40011400 	.word	0x40011400
 8008c94:	51eb851f 	.word	0x51eb851f

08008c98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008c98:	b084      	sub	sp, #16
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b084      	sub	sp, #16
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
 8008ca2:	f107 001c 	add.w	r0, r7, #28
 8008ca6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d122      	bne.n	8008cf6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008cc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d105      	bne.n	8008cea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	68db      	ldr	r3, [r3, #12]
 8008ce2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f001 fb1c 	bl	800a328 <USB_CoreReset>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	73fb      	strb	r3, [r7, #15]
 8008cf4:	e01a      	b.n	8008d2c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f001 fb10 	bl	800a328 <USB_CoreReset>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008d0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d106      	bne.n	8008d20 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	639a      	str	r2, [r3, #56]	; 0x38
 8008d1e:	e005      	b.n	8008d2c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d10b      	bne.n	8008d4a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	f043 0206 	orr.w	r2, r3, #6
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	f043 0220 	orr.w	r2, r3, #32
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d56:	b004      	add	sp, #16
 8008d58:	4770      	bx	lr
	...

08008d5c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b087      	sub	sp, #28
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	4613      	mov	r3, r2
 8008d68:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008d6a:	79fb      	ldrb	r3, [r7, #7]
 8008d6c:	2b02      	cmp	r3, #2
 8008d6e:	d165      	bne.n	8008e3c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	4a41      	ldr	r2, [pc, #260]	; (8008e78 <USB_SetTurnaroundTime+0x11c>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d906      	bls.n	8008d86 <USB_SetTurnaroundTime+0x2a>
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	4a40      	ldr	r2, [pc, #256]	; (8008e7c <USB_SetTurnaroundTime+0x120>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d202      	bcs.n	8008d86 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008d80:	230f      	movs	r3, #15
 8008d82:	617b      	str	r3, [r7, #20]
 8008d84:	e062      	b.n	8008e4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	4a3c      	ldr	r2, [pc, #240]	; (8008e7c <USB_SetTurnaroundTime+0x120>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d306      	bcc.n	8008d9c <USB_SetTurnaroundTime+0x40>
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	4a3b      	ldr	r2, [pc, #236]	; (8008e80 <USB_SetTurnaroundTime+0x124>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d202      	bcs.n	8008d9c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008d96:	230e      	movs	r3, #14
 8008d98:	617b      	str	r3, [r7, #20]
 8008d9a:	e057      	b.n	8008e4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	4a38      	ldr	r2, [pc, #224]	; (8008e80 <USB_SetTurnaroundTime+0x124>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d306      	bcc.n	8008db2 <USB_SetTurnaroundTime+0x56>
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	4a37      	ldr	r2, [pc, #220]	; (8008e84 <USB_SetTurnaroundTime+0x128>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d202      	bcs.n	8008db2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008dac:	230d      	movs	r3, #13
 8008dae:	617b      	str	r3, [r7, #20]
 8008db0:	e04c      	b.n	8008e4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	4a33      	ldr	r2, [pc, #204]	; (8008e84 <USB_SetTurnaroundTime+0x128>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d306      	bcc.n	8008dc8 <USB_SetTurnaroundTime+0x6c>
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	4a32      	ldr	r2, [pc, #200]	; (8008e88 <USB_SetTurnaroundTime+0x12c>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d802      	bhi.n	8008dc8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008dc2:	230c      	movs	r3, #12
 8008dc4:	617b      	str	r3, [r7, #20]
 8008dc6:	e041      	b.n	8008e4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	4a2f      	ldr	r2, [pc, #188]	; (8008e88 <USB_SetTurnaroundTime+0x12c>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d906      	bls.n	8008dde <USB_SetTurnaroundTime+0x82>
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	4a2e      	ldr	r2, [pc, #184]	; (8008e8c <USB_SetTurnaroundTime+0x130>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d802      	bhi.n	8008dde <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008dd8:	230b      	movs	r3, #11
 8008dda:	617b      	str	r3, [r7, #20]
 8008ddc:	e036      	b.n	8008e4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	4a2a      	ldr	r2, [pc, #168]	; (8008e8c <USB_SetTurnaroundTime+0x130>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d906      	bls.n	8008df4 <USB_SetTurnaroundTime+0x98>
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	4a29      	ldr	r2, [pc, #164]	; (8008e90 <USB_SetTurnaroundTime+0x134>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d802      	bhi.n	8008df4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008dee:	230a      	movs	r3, #10
 8008df0:	617b      	str	r3, [r7, #20]
 8008df2:	e02b      	b.n	8008e4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	4a26      	ldr	r2, [pc, #152]	; (8008e90 <USB_SetTurnaroundTime+0x134>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d906      	bls.n	8008e0a <USB_SetTurnaroundTime+0xae>
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	4a25      	ldr	r2, [pc, #148]	; (8008e94 <USB_SetTurnaroundTime+0x138>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d202      	bcs.n	8008e0a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008e04:	2309      	movs	r3, #9
 8008e06:	617b      	str	r3, [r7, #20]
 8008e08:	e020      	b.n	8008e4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	4a21      	ldr	r2, [pc, #132]	; (8008e94 <USB_SetTurnaroundTime+0x138>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d306      	bcc.n	8008e20 <USB_SetTurnaroundTime+0xc4>
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	4a20      	ldr	r2, [pc, #128]	; (8008e98 <USB_SetTurnaroundTime+0x13c>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d802      	bhi.n	8008e20 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008e1a:	2308      	movs	r3, #8
 8008e1c:	617b      	str	r3, [r7, #20]
 8008e1e:	e015      	b.n	8008e4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	4a1d      	ldr	r2, [pc, #116]	; (8008e98 <USB_SetTurnaroundTime+0x13c>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d906      	bls.n	8008e36 <USB_SetTurnaroundTime+0xda>
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	4a1c      	ldr	r2, [pc, #112]	; (8008e9c <USB_SetTurnaroundTime+0x140>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d202      	bcs.n	8008e36 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008e30:	2307      	movs	r3, #7
 8008e32:	617b      	str	r3, [r7, #20]
 8008e34:	e00a      	b.n	8008e4c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008e36:	2306      	movs	r3, #6
 8008e38:	617b      	str	r3, [r7, #20]
 8008e3a:	e007      	b.n	8008e4c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008e3c:	79fb      	ldrb	r3, [r7, #7]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d102      	bne.n	8008e48 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008e42:	2309      	movs	r3, #9
 8008e44:	617b      	str	r3, [r7, #20]
 8008e46:	e001      	b.n	8008e4c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008e48:	2309      	movs	r3, #9
 8008e4a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	68db      	ldr	r3, [r3, #12]
 8008e50:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	68da      	ldr	r2, [r3, #12]
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	029b      	lsls	r3, r3, #10
 8008e60:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008e64:	431a      	orrs	r2, r3
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	371c      	adds	r7, #28
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr
 8008e78:	00d8acbf 	.word	0x00d8acbf
 8008e7c:	00e4e1c0 	.word	0x00e4e1c0
 8008e80:	00f42400 	.word	0x00f42400
 8008e84:	01067380 	.word	0x01067380
 8008e88:	011a499f 	.word	0x011a499f
 8008e8c:	01312cff 	.word	0x01312cff
 8008e90:	014ca43f 	.word	0x014ca43f
 8008e94:	016e3600 	.word	0x016e3600
 8008e98:	01a6ab1f 	.word	0x01a6ab1f
 8008e9c:	01e84800 	.word	0x01e84800

08008ea0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	689b      	ldr	r3, [r3, #8]
 8008eac:	f043 0201 	orr.w	r2, r3, #1
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008eb4:	2300      	movs	r3, #0
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	370c      	adds	r7, #12
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr

08008ec2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ec2:	b480      	push	{r7}
 8008ec4:	b083      	sub	sp, #12
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	f023 0201 	bic.w	r2, r3, #1
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ed6:	2300      	movs	r3, #0
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	370c      	adds	r7, #12
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr

08008ee4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	460b      	mov	r3, r1
 8008eee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008f00:	78fb      	ldrb	r3, [r7, #3]
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d115      	bne.n	8008f32 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008f12:	2001      	movs	r0, #1
 8008f14:	f7fa fcb4 	bl	8003880 <HAL_Delay>
      ms++;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f001 f972 	bl	800a208 <USB_GetMode>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d01e      	beq.n	8008f68 <USB_SetCurrentMode+0x84>
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2b31      	cmp	r3, #49	; 0x31
 8008f2e:	d9f0      	bls.n	8008f12 <USB_SetCurrentMode+0x2e>
 8008f30:	e01a      	b.n	8008f68 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008f32:	78fb      	ldrb	r3, [r7, #3]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d115      	bne.n	8008f64 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008f44:	2001      	movs	r0, #1
 8008f46:	f7fa fc9b 	bl	8003880 <HAL_Delay>
      ms++;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f001 f959 	bl	800a208 <USB_GetMode>
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d005      	beq.n	8008f68 <USB_SetCurrentMode+0x84>
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2b31      	cmp	r3, #49	; 0x31
 8008f60:	d9f0      	bls.n	8008f44 <USB_SetCurrentMode+0x60>
 8008f62:	e001      	b.n	8008f68 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008f64:	2301      	movs	r3, #1
 8008f66:	e005      	b.n	8008f74 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2b32      	cmp	r3, #50	; 0x32
 8008f6c:	d101      	bne.n	8008f72 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e000      	b.n	8008f74 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3710      	adds	r7, #16
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f7c:	b084      	sub	sp, #16
 8008f7e:	b580      	push	{r7, lr}
 8008f80:	b086      	sub	sp, #24
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
 8008f86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008f8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008f96:	2300      	movs	r3, #0
 8008f98:	613b      	str	r3, [r7, #16]
 8008f9a:	e009      	b.n	8008fb0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	3340      	adds	r3, #64	; 0x40
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	4413      	add	r3, r2
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	3301      	adds	r3, #1
 8008fae:	613b      	str	r3, [r7, #16]
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	2b0e      	cmp	r3, #14
 8008fb4:	d9f2      	bls.n	8008f9c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d11c      	bne.n	8008ff6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fca:	f043 0302 	orr.w	r3, r3, #2
 8008fce:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fec:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	639a      	str	r2, [r3, #56]	; 0x38
 8008ff4:	e00b      	b.n	800900e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ffa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009006:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009014:	461a      	mov	r2, r3
 8009016:	2300      	movs	r3, #0
 8009018:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009020:	4619      	mov	r1, r3
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009028:	461a      	mov	r2, r3
 800902a:	680b      	ldr	r3, [r1, #0]
 800902c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800902e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009030:	2b01      	cmp	r3, #1
 8009032:	d10c      	bne.n	800904e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009036:	2b00      	cmp	r3, #0
 8009038:	d104      	bne.n	8009044 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800903a:	2100      	movs	r1, #0
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 f945 	bl	80092cc <USB_SetDevSpeed>
 8009042:	e008      	b.n	8009056 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009044:	2101      	movs	r1, #1
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 f940 	bl	80092cc <USB_SetDevSpeed>
 800904c:	e003      	b.n	8009056 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800904e:	2103      	movs	r1, #3
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 f93b 	bl	80092cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009056:	2110      	movs	r1, #16
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 f8f3 	bl	8009244 <USB_FlushTxFifo>
 800905e:	4603      	mov	r3, r0
 8009060:	2b00      	cmp	r3, #0
 8009062:	d001      	beq.n	8009068 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 f90f 	bl	800928c <USB_FlushRxFifo>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d001      	beq.n	8009078 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009074:	2301      	movs	r3, #1
 8009076:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800907e:	461a      	mov	r2, r3
 8009080:	2300      	movs	r3, #0
 8009082:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800908a:	461a      	mov	r2, r3
 800908c:	2300      	movs	r3, #0
 800908e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009096:	461a      	mov	r2, r3
 8009098:	2300      	movs	r3, #0
 800909a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800909c:	2300      	movs	r3, #0
 800909e:	613b      	str	r3, [r7, #16]
 80090a0:	e043      	b.n	800912a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	015a      	lsls	r2, r3, #5
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	4413      	add	r3, r2
 80090aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090b8:	d118      	bne.n	80090ec <USB_DevInit+0x170>
    {
      if (i == 0U)
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d10a      	bne.n	80090d6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	015a      	lsls	r2, r3, #5
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	4413      	add	r3, r2
 80090c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090cc:	461a      	mov	r2, r3
 80090ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80090d2:	6013      	str	r3, [r2, #0]
 80090d4:	e013      	b.n	80090fe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	015a      	lsls	r2, r3, #5
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	4413      	add	r3, r2
 80090de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090e2:	461a      	mov	r2, r3
 80090e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80090e8:	6013      	str	r3, [r2, #0]
 80090ea:	e008      	b.n	80090fe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	015a      	lsls	r2, r3, #5
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	4413      	add	r3, r2
 80090f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090f8:	461a      	mov	r2, r3
 80090fa:	2300      	movs	r3, #0
 80090fc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	015a      	lsls	r2, r3, #5
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	4413      	add	r3, r2
 8009106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800910a:	461a      	mov	r2, r3
 800910c:	2300      	movs	r3, #0
 800910e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	015a      	lsls	r2, r3, #5
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	4413      	add	r3, r2
 8009118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800911c:	461a      	mov	r2, r3
 800911e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009122:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	3301      	adds	r3, #1
 8009128:	613b      	str	r3, [r7, #16]
 800912a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912c:	693a      	ldr	r2, [r7, #16]
 800912e:	429a      	cmp	r2, r3
 8009130:	d3b7      	bcc.n	80090a2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009132:	2300      	movs	r3, #0
 8009134:	613b      	str	r3, [r7, #16]
 8009136:	e043      	b.n	80091c0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	015a      	lsls	r2, r3, #5
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	4413      	add	r3, r2
 8009140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800914a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800914e:	d118      	bne.n	8009182 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d10a      	bne.n	800916c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	015a      	lsls	r2, r3, #5
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	4413      	add	r3, r2
 800915e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009162:	461a      	mov	r2, r3
 8009164:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009168:	6013      	str	r3, [r2, #0]
 800916a:	e013      	b.n	8009194 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	015a      	lsls	r2, r3, #5
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	4413      	add	r3, r2
 8009174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009178:	461a      	mov	r2, r3
 800917a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800917e:	6013      	str	r3, [r2, #0]
 8009180:	e008      	b.n	8009194 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	015a      	lsls	r2, r3, #5
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	4413      	add	r3, r2
 800918a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800918e:	461a      	mov	r2, r3
 8009190:	2300      	movs	r3, #0
 8009192:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	015a      	lsls	r2, r3, #5
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	4413      	add	r3, r2
 800919c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091a0:	461a      	mov	r2, r3
 80091a2:	2300      	movs	r3, #0
 80091a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	015a      	lsls	r2, r3, #5
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	4413      	add	r3, r2
 80091ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091b2:	461a      	mov	r2, r3
 80091b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80091b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	3301      	adds	r3, #1
 80091be:	613b      	str	r3, [r7, #16]
 80091c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c2:	693a      	ldr	r2, [r7, #16]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d3b7      	bcc.n	8009138 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091ce:	691b      	ldr	r3, [r3, #16]
 80091d0:	68fa      	ldr	r2, [r7, #12]
 80091d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091da:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2200      	movs	r2, #0
 80091e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80091e8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80091ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d105      	bne.n	80091fc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	699b      	ldr	r3, [r3, #24]
 80091f4:	f043 0210 	orr.w	r2, r3, #16
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	699a      	ldr	r2, [r3, #24]
 8009200:	4b0f      	ldr	r3, [pc, #60]	; (8009240 <USB_DevInit+0x2c4>)
 8009202:	4313      	orrs	r3, r2
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800920a:	2b00      	cmp	r3, #0
 800920c:	d005      	beq.n	800921a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	699b      	ldr	r3, [r3, #24]
 8009212:	f043 0208 	orr.w	r2, r3, #8
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800921a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800921c:	2b01      	cmp	r3, #1
 800921e:	d107      	bne.n	8009230 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	699b      	ldr	r3, [r3, #24]
 8009224:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009228:	f043 0304 	orr.w	r3, r3, #4
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009230:	7dfb      	ldrb	r3, [r7, #23]
}
 8009232:	4618      	mov	r0, r3
 8009234:	3718      	adds	r7, #24
 8009236:	46bd      	mov	sp, r7
 8009238:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800923c:	b004      	add	sp, #16
 800923e:	4770      	bx	lr
 8009240:	803c3800 	.word	0x803c3800

08009244 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800924e:	2300      	movs	r3, #0
 8009250:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	019b      	lsls	r3, r3, #6
 8009256:	f043 0220 	orr.w	r2, r3, #32
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	3301      	adds	r3, #1
 8009262:	60fb      	str	r3, [r7, #12]
 8009264:	4a08      	ldr	r2, [pc, #32]	; (8009288 <USB_FlushTxFifo+0x44>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d901      	bls.n	800926e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800926a:	2303      	movs	r3, #3
 800926c:	e006      	b.n	800927c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	691b      	ldr	r3, [r3, #16]
 8009272:	f003 0320 	and.w	r3, r3, #32
 8009276:	2b20      	cmp	r3, #32
 8009278:	d0f1      	beq.n	800925e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800927a:	2300      	movs	r3, #0
}
 800927c:	4618      	mov	r0, r3
 800927e:	3714      	adds	r7, #20
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr
 8009288:	00030d40 	.word	0x00030d40

0800928c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009294:	2300      	movs	r3, #0
 8009296:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2210      	movs	r2, #16
 800929c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	3301      	adds	r3, #1
 80092a2:	60fb      	str	r3, [r7, #12]
 80092a4:	4a08      	ldr	r2, [pc, #32]	; (80092c8 <USB_FlushRxFifo+0x3c>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d901      	bls.n	80092ae <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80092aa:	2303      	movs	r3, #3
 80092ac:	e006      	b.n	80092bc <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	691b      	ldr	r3, [r3, #16]
 80092b2:	f003 0310 	and.w	r3, r3, #16
 80092b6:	2b10      	cmp	r3, #16
 80092b8:	d0f1      	beq.n	800929e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80092ba:	2300      	movs	r3, #0
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3714      	adds	r7, #20
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr
 80092c8:	00030d40 	.word	0x00030d40

080092cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b085      	sub	sp, #20
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	460b      	mov	r3, r1
 80092d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	78fb      	ldrb	r3, [r7, #3]
 80092e6:	68f9      	ldr	r1, [r7, #12]
 80092e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092ec:	4313      	orrs	r3, r2
 80092ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3714      	adds	r7, #20
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr

080092fe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80092fe:	b480      	push	{r7}
 8009300:	b087      	sub	sp, #28
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	f003 0306 	and.w	r3, r3, #6
 8009316:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d102      	bne.n	8009324 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800931e:	2300      	movs	r3, #0
 8009320:	75fb      	strb	r3, [r7, #23]
 8009322:	e00a      	b.n	800933a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2b02      	cmp	r3, #2
 8009328:	d002      	beq.n	8009330 <USB_GetDevSpeed+0x32>
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2b06      	cmp	r3, #6
 800932e:	d102      	bne.n	8009336 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009330:	2302      	movs	r3, #2
 8009332:	75fb      	strb	r3, [r7, #23]
 8009334:	e001      	b.n	800933a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009336:	230f      	movs	r3, #15
 8009338:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800933a:	7dfb      	ldrb	r3, [r7, #23]
}
 800933c:	4618      	mov	r0, r3
 800933e:	371c      	adds	r7, #28
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009348:	b480      	push	{r7}
 800934a:	b085      	sub	sp, #20
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	785b      	ldrb	r3, [r3, #1]
 8009360:	2b01      	cmp	r3, #1
 8009362:	d13a      	bne.n	80093da <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800936a:	69da      	ldr	r2, [r3, #28]
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	f003 030f 	and.w	r3, r3, #15
 8009374:	2101      	movs	r1, #1
 8009376:	fa01 f303 	lsl.w	r3, r1, r3
 800937a:	b29b      	uxth	r3, r3
 800937c:	68f9      	ldr	r1, [r7, #12]
 800937e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009382:	4313      	orrs	r3, r2
 8009384:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	015a      	lsls	r2, r3, #5
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	4413      	add	r3, r2
 800938e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009398:	2b00      	cmp	r3, #0
 800939a:	d155      	bne.n	8009448 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	015a      	lsls	r2, r3, #5
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	4413      	add	r3, r2
 80093a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	78db      	ldrb	r3, [r3, #3]
 80093b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80093b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	059b      	lsls	r3, r3, #22
 80093be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80093c0:	4313      	orrs	r3, r2
 80093c2:	68ba      	ldr	r2, [r7, #8]
 80093c4:	0151      	lsls	r1, r2, #5
 80093c6:	68fa      	ldr	r2, [r7, #12]
 80093c8:	440a      	add	r2, r1
 80093ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093d6:	6013      	str	r3, [r2, #0]
 80093d8:	e036      	b.n	8009448 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093e0:	69da      	ldr	r2, [r3, #28]
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	f003 030f 	and.w	r3, r3, #15
 80093ea:	2101      	movs	r1, #1
 80093ec:	fa01 f303 	lsl.w	r3, r1, r3
 80093f0:	041b      	lsls	r3, r3, #16
 80093f2:	68f9      	ldr	r1, [r7, #12]
 80093f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093f8:	4313      	orrs	r3, r2
 80093fa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	015a      	lsls	r2, r3, #5
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	4413      	add	r3, r2
 8009404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800940e:	2b00      	cmp	r3, #0
 8009410:	d11a      	bne.n	8009448 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	015a      	lsls	r2, r3, #5
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	4413      	add	r3, r2
 800941a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	78db      	ldrb	r3, [r3, #3]
 800942c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800942e:	430b      	orrs	r3, r1
 8009430:	4313      	orrs	r3, r2
 8009432:	68ba      	ldr	r2, [r7, #8]
 8009434:	0151      	lsls	r1, r2, #5
 8009436:	68fa      	ldr	r2, [r7, #12]
 8009438:	440a      	add	r2, r1
 800943a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800943e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009446:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009448:	2300      	movs	r3, #0
}
 800944a:	4618      	mov	r0, r3
 800944c:	3714      	adds	r7, #20
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr
	...

08009458 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009458:	b480      	push	{r7}
 800945a:	b085      	sub	sp, #20
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	785b      	ldrb	r3, [r3, #1]
 8009470:	2b01      	cmp	r3, #1
 8009472:	d161      	bne.n	8009538 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	015a      	lsls	r2, r3, #5
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	4413      	add	r3, r2
 800947c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009486:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800948a:	d11f      	bne.n	80094cc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	015a      	lsls	r2, r3, #5
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	4413      	add	r3, r2
 8009494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	68ba      	ldr	r2, [r7, #8]
 800949c:	0151      	lsls	r1, r2, #5
 800949e:	68fa      	ldr	r2, [r7, #12]
 80094a0:	440a      	add	r2, r1
 80094a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80094aa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	015a      	lsls	r2, r3, #5
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	4413      	add	r3, r2
 80094b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	68ba      	ldr	r2, [r7, #8]
 80094bc:	0151      	lsls	r1, r2, #5
 80094be:	68fa      	ldr	r2, [r7, #12]
 80094c0:	440a      	add	r2, r1
 80094c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80094ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	f003 030f 	and.w	r3, r3, #15
 80094dc:	2101      	movs	r1, #1
 80094de:	fa01 f303 	lsl.w	r3, r1, r3
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	43db      	mvns	r3, r3
 80094e6:	68f9      	ldr	r1, [r7, #12]
 80094e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094ec:	4013      	ands	r3, r2
 80094ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094f6:	69da      	ldr	r2, [r3, #28]
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	f003 030f 	and.w	r3, r3, #15
 8009500:	2101      	movs	r1, #1
 8009502:	fa01 f303 	lsl.w	r3, r1, r3
 8009506:	b29b      	uxth	r3, r3
 8009508:	43db      	mvns	r3, r3
 800950a:	68f9      	ldr	r1, [r7, #12]
 800950c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009510:	4013      	ands	r3, r2
 8009512:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	015a      	lsls	r2, r3, #5
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	4413      	add	r3, r2
 800951c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	0159      	lsls	r1, r3, #5
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	440b      	add	r3, r1
 800952a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800952e:	4619      	mov	r1, r3
 8009530:	4b35      	ldr	r3, [pc, #212]	; (8009608 <USB_DeactivateEndpoint+0x1b0>)
 8009532:	4013      	ands	r3, r2
 8009534:	600b      	str	r3, [r1, #0]
 8009536:	e060      	b.n	80095fa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	015a      	lsls	r2, r3, #5
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	4413      	add	r3, r2
 8009540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800954a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800954e:	d11f      	bne.n	8009590 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	015a      	lsls	r2, r3, #5
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	4413      	add	r3, r2
 8009558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	68ba      	ldr	r2, [r7, #8]
 8009560:	0151      	lsls	r1, r2, #5
 8009562:	68fa      	ldr	r2, [r7, #12]
 8009564:	440a      	add	r2, r1
 8009566:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800956a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800956e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	015a      	lsls	r2, r3, #5
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	4413      	add	r3, r2
 8009578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	68ba      	ldr	r2, [r7, #8]
 8009580:	0151      	lsls	r1, r2, #5
 8009582:	68fa      	ldr	r2, [r7, #12]
 8009584:	440a      	add	r2, r1
 8009586:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800958a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800958e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009596:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	f003 030f 	and.w	r3, r3, #15
 80095a0:	2101      	movs	r1, #1
 80095a2:	fa01 f303 	lsl.w	r3, r1, r3
 80095a6:	041b      	lsls	r3, r3, #16
 80095a8:	43db      	mvns	r3, r3
 80095aa:	68f9      	ldr	r1, [r7, #12]
 80095ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095b0:	4013      	ands	r3, r2
 80095b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ba:	69da      	ldr	r2, [r3, #28]
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	781b      	ldrb	r3, [r3, #0]
 80095c0:	f003 030f 	and.w	r3, r3, #15
 80095c4:	2101      	movs	r1, #1
 80095c6:	fa01 f303 	lsl.w	r3, r1, r3
 80095ca:	041b      	lsls	r3, r3, #16
 80095cc:	43db      	mvns	r3, r3
 80095ce:	68f9      	ldr	r1, [r7, #12]
 80095d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095d4:	4013      	ands	r3, r2
 80095d6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	015a      	lsls	r2, r3, #5
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	4413      	add	r3, r2
 80095e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	0159      	lsls	r1, r3, #5
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	440b      	add	r3, r1
 80095ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095f2:	4619      	mov	r1, r3
 80095f4:	4b05      	ldr	r3, [pc, #20]	; (800960c <USB_DeactivateEndpoint+0x1b4>)
 80095f6:	4013      	ands	r3, r2
 80095f8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80095fa:	2300      	movs	r3, #0
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3714      	adds	r7, #20
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr
 8009608:	ec337800 	.word	0xec337800
 800960c:	eff37800 	.word	0xeff37800

08009610 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b08a      	sub	sp, #40	; 0x28
 8009614:	af02      	add	r7, sp, #8
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	60b9      	str	r1, [r7, #8]
 800961a:	4613      	mov	r3, r2
 800961c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	785b      	ldrb	r3, [r3, #1]
 800962c:	2b01      	cmp	r3, #1
 800962e:	f040 815c 	bne.w	80098ea <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	695b      	ldr	r3, [r3, #20]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d132      	bne.n	80096a0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800963a:	69bb      	ldr	r3, [r7, #24]
 800963c:	015a      	lsls	r2, r3, #5
 800963e:	69fb      	ldr	r3, [r7, #28]
 8009640:	4413      	add	r3, r2
 8009642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	69ba      	ldr	r2, [r7, #24]
 800964a:	0151      	lsls	r1, r2, #5
 800964c:	69fa      	ldr	r2, [r7, #28]
 800964e:	440a      	add	r2, r1
 8009650:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009654:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009658:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800965c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800965e:	69bb      	ldr	r3, [r7, #24]
 8009660:	015a      	lsls	r2, r3, #5
 8009662:	69fb      	ldr	r3, [r7, #28]
 8009664:	4413      	add	r3, r2
 8009666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800966a:	691b      	ldr	r3, [r3, #16]
 800966c:	69ba      	ldr	r2, [r7, #24]
 800966e:	0151      	lsls	r1, r2, #5
 8009670:	69fa      	ldr	r2, [r7, #28]
 8009672:	440a      	add	r2, r1
 8009674:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009678:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800967c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	015a      	lsls	r2, r3, #5
 8009682:	69fb      	ldr	r3, [r7, #28]
 8009684:	4413      	add	r3, r2
 8009686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800968a:	691b      	ldr	r3, [r3, #16]
 800968c:	69ba      	ldr	r2, [r7, #24]
 800968e:	0151      	lsls	r1, r2, #5
 8009690:	69fa      	ldr	r2, [r7, #28]
 8009692:	440a      	add	r2, r1
 8009694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009698:	0cdb      	lsrs	r3, r3, #19
 800969a:	04db      	lsls	r3, r3, #19
 800969c:	6113      	str	r3, [r2, #16]
 800969e:	e074      	b.n	800978a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80096a0:	69bb      	ldr	r3, [r7, #24]
 80096a2:	015a      	lsls	r2, r3, #5
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	4413      	add	r3, r2
 80096a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ac:	691b      	ldr	r3, [r3, #16]
 80096ae:	69ba      	ldr	r2, [r7, #24]
 80096b0:	0151      	lsls	r1, r2, #5
 80096b2:	69fa      	ldr	r2, [r7, #28]
 80096b4:	440a      	add	r2, r1
 80096b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096ba:	0cdb      	lsrs	r3, r3, #19
 80096bc:	04db      	lsls	r3, r3, #19
 80096be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80096c0:	69bb      	ldr	r3, [r7, #24]
 80096c2:	015a      	lsls	r2, r3, #5
 80096c4:	69fb      	ldr	r3, [r7, #28]
 80096c6:	4413      	add	r3, r2
 80096c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096cc:	691b      	ldr	r3, [r3, #16]
 80096ce:	69ba      	ldr	r2, [r7, #24]
 80096d0:	0151      	lsls	r1, r2, #5
 80096d2:	69fa      	ldr	r2, [r7, #28]
 80096d4:	440a      	add	r2, r1
 80096d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80096de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80096e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80096e4:	69bb      	ldr	r3, [r7, #24]
 80096e6:	015a      	lsls	r2, r3, #5
 80096e8:	69fb      	ldr	r3, [r7, #28]
 80096ea:	4413      	add	r3, r2
 80096ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096f0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	6959      	ldr	r1, [r3, #20]
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	689b      	ldr	r3, [r3, #8]
 80096fa:	440b      	add	r3, r1
 80096fc:	1e59      	subs	r1, r3, #1
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	fbb1 f3f3 	udiv	r3, r1, r3
 8009706:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009708:	4b9d      	ldr	r3, [pc, #628]	; (8009980 <USB_EPStartXfer+0x370>)
 800970a:	400b      	ands	r3, r1
 800970c:	69b9      	ldr	r1, [r7, #24]
 800970e:	0148      	lsls	r0, r1, #5
 8009710:	69f9      	ldr	r1, [r7, #28]
 8009712:	4401      	add	r1, r0
 8009714:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009718:	4313      	orrs	r3, r2
 800971a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800971c:	69bb      	ldr	r3, [r7, #24]
 800971e:	015a      	lsls	r2, r3, #5
 8009720:	69fb      	ldr	r3, [r7, #28]
 8009722:	4413      	add	r3, r2
 8009724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009728:	691a      	ldr	r2, [r3, #16]
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	695b      	ldr	r3, [r3, #20]
 800972e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009732:	69b9      	ldr	r1, [r7, #24]
 8009734:	0148      	lsls	r0, r1, #5
 8009736:	69f9      	ldr	r1, [r7, #28]
 8009738:	4401      	add	r1, r0
 800973a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800973e:	4313      	orrs	r3, r2
 8009740:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	78db      	ldrb	r3, [r3, #3]
 8009746:	2b01      	cmp	r3, #1
 8009748:	d11f      	bne.n	800978a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800974a:	69bb      	ldr	r3, [r7, #24]
 800974c:	015a      	lsls	r2, r3, #5
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	4413      	add	r3, r2
 8009752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009756:	691b      	ldr	r3, [r3, #16]
 8009758:	69ba      	ldr	r2, [r7, #24]
 800975a:	0151      	lsls	r1, r2, #5
 800975c:	69fa      	ldr	r2, [r7, #28]
 800975e:	440a      	add	r2, r1
 8009760:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009764:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009768:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	015a      	lsls	r2, r3, #5
 800976e:	69fb      	ldr	r3, [r7, #28]
 8009770:	4413      	add	r3, r2
 8009772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	69ba      	ldr	r2, [r7, #24]
 800977a:	0151      	lsls	r1, r2, #5
 800977c:	69fa      	ldr	r2, [r7, #28]
 800977e:	440a      	add	r2, r1
 8009780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009784:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009788:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800978a:	79fb      	ldrb	r3, [r7, #7]
 800978c:	2b01      	cmp	r3, #1
 800978e:	d14b      	bne.n	8009828 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	691b      	ldr	r3, [r3, #16]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d009      	beq.n	80097ac <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009798:	69bb      	ldr	r3, [r7, #24]
 800979a:	015a      	lsls	r2, r3, #5
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	4413      	add	r3, r2
 80097a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097a4:	461a      	mov	r2, r3
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	691b      	ldr	r3, [r3, #16]
 80097aa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	78db      	ldrb	r3, [r3, #3]
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d128      	bne.n	8009806 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097ba:	689b      	ldr	r3, [r3, #8]
 80097bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d110      	bne.n	80097e6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80097c4:	69bb      	ldr	r3, [r7, #24]
 80097c6:	015a      	lsls	r2, r3, #5
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	4413      	add	r3, r2
 80097cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	69ba      	ldr	r2, [r7, #24]
 80097d4:	0151      	lsls	r1, r2, #5
 80097d6:	69fa      	ldr	r2, [r7, #28]
 80097d8:	440a      	add	r2, r1
 80097da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80097e2:	6013      	str	r3, [r2, #0]
 80097e4:	e00f      	b.n	8009806 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80097e6:	69bb      	ldr	r3, [r7, #24]
 80097e8:	015a      	lsls	r2, r3, #5
 80097ea:	69fb      	ldr	r3, [r7, #28]
 80097ec:	4413      	add	r3, r2
 80097ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	69ba      	ldr	r2, [r7, #24]
 80097f6:	0151      	lsls	r1, r2, #5
 80097f8:	69fa      	ldr	r2, [r7, #28]
 80097fa:	440a      	add	r2, r1
 80097fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009804:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009806:	69bb      	ldr	r3, [r7, #24]
 8009808:	015a      	lsls	r2, r3, #5
 800980a:	69fb      	ldr	r3, [r7, #28]
 800980c:	4413      	add	r3, r2
 800980e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	69ba      	ldr	r2, [r7, #24]
 8009816:	0151      	lsls	r1, r2, #5
 8009818:	69fa      	ldr	r2, [r7, #28]
 800981a:	440a      	add	r2, r1
 800981c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009820:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009824:	6013      	str	r3, [r2, #0]
 8009826:	e12f      	b.n	8009a88 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009828:	69bb      	ldr	r3, [r7, #24]
 800982a:	015a      	lsls	r2, r3, #5
 800982c:	69fb      	ldr	r3, [r7, #28]
 800982e:	4413      	add	r3, r2
 8009830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	69ba      	ldr	r2, [r7, #24]
 8009838:	0151      	lsls	r1, r2, #5
 800983a:	69fa      	ldr	r2, [r7, #28]
 800983c:	440a      	add	r2, r1
 800983e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009842:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009846:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	78db      	ldrb	r3, [r3, #3]
 800984c:	2b01      	cmp	r3, #1
 800984e:	d015      	beq.n	800987c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	695b      	ldr	r3, [r3, #20]
 8009854:	2b00      	cmp	r3, #0
 8009856:	f000 8117 	beq.w	8009a88 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800985a:	69fb      	ldr	r3, [r7, #28]
 800985c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	f003 030f 	and.w	r3, r3, #15
 800986a:	2101      	movs	r1, #1
 800986c:	fa01 f303 	lsl.w	r3, r1, r3
 8009870:	69f9      	ldr	r1, [r7, #28]
 8009872:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009876:	4313      	orrs	r3, r2
 8009878:	634b      	str	r3, [r1, #52]	; 0x34
 800987a:	e105      	b.n	8009a88 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800987c:	69fb      	ldr	r3, [r7, #28]
 800987e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009882:	689b      	ldr	r3, [r3, #8]
 8009884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009888:	2b00      	cmp	r3, #0
 800988a:	d110      	bne.n	80098ae <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	015a      	lsls	r2, r3, #5
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	4413      	add	r3, r2
 8009894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	69ba      	ldr	r2, [r7, #24]
 800989c:	0151      	lsls	r1, r2, #5
 800989e:	69fa      	ldr	r2, [r7, #28]
 80098a0:	440a      	add	r2, r1
 80098a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80098aa:	6013      	str	r3, [r2, #0]
 80098ac:	e00f      	b.n	80098ce <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80098ae:	69bb      	ldr	r3, [r7, #24]
 80098b0:	015a      	lsls	r2, r3, #5
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	4413      	add	r3, r2
 80098b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	69ba      	ldr	r2, [r7, #24]
 80098be:	0151      	lsls	r1, r2, #5
 80098c0:	69fa      	ldr	r2, [r7, #28]
 80098c2:	440a      	add	r2, r1
 80098c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098cc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	68d9      	ldr	r1, [r3, #12]
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	781a      	ldrb	r2, [r3, #0]
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	695b      	ldr	r3, [r3, #20]
 80098da:	b298      	uxth	r0, r3
 80098dc:	79fb      	ldrb	r3, [r7, #7]
 80098de:	9300      	str	r3, [sp, #0]
 80098e0:	4603      	mov	r3, r0
 80098e2:	68f8      	ldr	r0, [r7, #12]
 80098e4:	f000 fa2b 	bl	8009d3e <USB_WritePacket>
 80098e8:	e0ce      	b.n	8009a88 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	015a      	lsls	r2, r3, #5
 80098ee:	69fb      	ldr	r3, [r7, #28]
 80098f0:	4413      	add	r3, r2
 80098f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	69ba      	ldr	r2, [r7, #24]
 80098fa:	0151      	lsls	r1, r2, #5
 80098fc:	69fa      	ldr	r2, [r7, #28]
 80098fe:	440a      	add	r2, r1
 8009900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009904:	0cdb      	lsrs	r3, r3, #19
 8009906:	04db      	lsls	r3, r3, #19
 8009908:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800990a:	69bb      	ldr	r3, [r7, #24]
 800990c:	015a      	lsls	r2, r3, #5
 800990e:	69fb      	ldr	r3, [r7, #28]
 8009910:	4413      	add	r3, r2
 8009912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009916:	691b      	ldr	r3, [r3, #16]
 8009918:	69ba      	ldr	r2, [r7, #24]
 800991a:	0151      	lsls	r1, r2, #5
 800991c:	69fa      	ldr	r2, [r7, #28]
 800991e:	440a      	add	r2, r1
 8009920:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009924:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009928:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800992c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	695b      	ldr	r3, [r3, #20]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d126      	bne.n	8009984 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009936:	69bb      	ldr	r3, [r7, #24]
 8009938:	015a      	lsls	r2, r3, #5
 800993a:	69fb      	ldr	r3, [r7, #28]
 800993c:	4413      	add	r3, r2
 800993e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009942:	691a      	ldr	r2, [r3, #16]
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	689b      	ldr	r3, [r3, #8]
 8009948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800994c:	69b9      	ldr	r1, [r7, #24]
 800994e:	0148      	lsls	r0, r1, #5
 8009950:	69f9      	ldr	r1, [r7, #28]
 8009952:	4401      	add	r1, r0
 8009954:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009958:	4313      	orrs	r3, r2
 800995a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800995c:	69bb      	ldr	r3, [r7, #24]
 800995e:	015a      	lsls	r2, r3, #5
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	4413      	add	r3, r2
 8009964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009968:	691b      	ldr	r3, [r3, #16]
 800996a:	69ba      	ldr	r2, [r7, #24]
 800996c:	0151      	lsls	r1, r2, #5
 800996e:	69fa      	ldr	r2, [r7, #28]
 8009970:	440a      	add	r2, r1
 8009972:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009976:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800997a:	6113      	str	r3, [r2, #16]
 800997c:	e036      	b.n	80099ec <USB_EPStartXfer+0x3dc>
 800997e:	bf00      	nop
 8009980:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	695a      	ldr	r2, [r3, #20]
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	689b      	ldr	r3, [r3, #8]
 800998c:	4413      	add	r3, r2
 800998e:	1e5a      	subs	r2, r3, #1
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	689b      	ldr	r3, [r3, #8]
 8009994:	fbb2 f3f3 	udiv	r3, r2, r3
 8009998:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	015a      	lsls	r2, r3, #5
 800999e:	69fb      	ldr	r3, [r7, #28]
 80099a0:	4413      	add	r3, r2
 80099a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099a6:	691a      	ldr	r2, [r3, #16]
 80099a8:	8afb      	ldrh	r3, [r7, #22]
 80099aa:	04d9      	lsls	r1, r3, #19
 80099ac:	4b39      	ldr	r3, [pc, #228]	; (8009a94 <USB_EPStartXfer+0x484>)
 80099ae:	400b      	ands	r3, r1
 80099b0:	69b9      	ldr	r1, [r7, #24]
 80099b2:	0148      	lsls	r0, r1, #5
 80099b4:	69f9      	ldr	r1, [r7, #28]
 80099b6:	4401      	add	r1, r0
 80099b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80099bc:	4313      	orrs	r3, r2
 80099be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80099c0:	69bb      	ldr	r3, [r7, #24]
 80099c2:	015a      	lsls	r2, r3, #5
 80099c4:	69fb      	ldr	r3, [r7, #28]
 80099c6:	4413      	add	r3, r2
 80099c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099cc:	691a      	ldr	r2, [r3, #16]
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	8af9      	ldrh	r1, [r7, #22]
 80099d4:	fb01 f303 	mul.w	r3, r1, r3
 80099d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099dc:	69b9      	ldr	r1, [r7, #24]
 80099de:	0148      	lsls	r0, r1, #5
 80099e0:	69f9      	ldr	r1, [r7, #28]
 80099e2:	4401      	add	r1, r0
 80099e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80099e8:	4313      	orrs	r3, r2
 80099ea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80099ec:	79fb      	ldrb	r3, [r7, #7]
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d10d      	bne.n	8009a0e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d009      	beq.n	8009a0e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	68d9      	ldr	r1, [r3, #12]
 80099fe:	69bb      	ldr	r3, [r7, #24]
 8009a00:	015a      	lsls	r2, r3, #5
 8009a02:	69fb      	ldr	r3, [r7, #28]
 8009a04:	4413      	add	r3, r2
 8009a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a0a:	460a      	mov	r2, r1
 8009a0c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	78db      	ldrb	r3, [r3, #3]
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d128      	bne.n	8009a68 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009a16:	69fb      	ldr	r3, [r7, #28]
 8009a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a1c:	689b      	ldr	r3, [r3, #8]
 8009a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d110      	bne.n	8009a48 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009a26:	69bb      	ldr	r3, [r7, #24]
 8009a28:	015a      	lsls	r2, r3, #5
 8009a2a:	69fb      	ldr	r3, [r7, #28]
 8009a2c:	4413      	add	r3, r2
 8009a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	69ba      	ldr	r2, [r7, #24]
 8009a36:	0151      	lsls	r1, r2, #5
 8009a38:	69fa      	ldr	r2, [r7, #28]
 8009a3a:	440a      	add	r2, r1
 8009a3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009a44:	6013      	str	r3, [r2, #0]
 8009a46:	e00f      	b.n	8009a68 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009a48:	69bb      	ldr	r3, [r7, #24]
 8009a4a:	015a      	lsls	r2, r3, #5
 8009a4c:	69fb      	ldr	r3, [r7, #28]
 8009a4e:	4413      	add	r3, r2
 8009a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	69ba      	ldr	r2, [r7, #24]
 8009a58:	0151      	lsls	r1, r2, #5
 8009a5a:	69fa      	ldr	r2, [r7, #28]
 8009a5c:	440a      	add	r2, r1
 8009a5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a66:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009a68:	69bb      	ldr	r3, [r7, #24]
 8009a6a:	015a      	lsls	r2, r3, #5
 8009a6c:	69fb      	ldr	r3, [r7, #28]
 8009a6e:	4413      	add	r3, r2
 8009a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	69ba      	ldr	r2, [r7, #24]
 8009a78:	0151      	lsls	r1, r2, #5
 8009a7a:	69fa      	ldr	r2, [r7, #28]
 8009a7c:	440a      	add	r2, r1
 8009a7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009a86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a88:	2300      	movs	r3, #0
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3720      	adds	r7, #32
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
 8009a92:	bf00      	nop
 8009a94:	1ff80000 	.word	0x1ff80000

08009a98 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b087      	sub	sp, #28
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	60b9      	str	r1, [r7, #8]
 8009aa2:	4613      	mov	r3, r2
 8009aa4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	785b      	ldrb	r3, [r3, #1]
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	f040 80cd 	bne.w	8009c54 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	695b      	ldr	r3, [r3, #20]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d132      	bne.n	8009b28 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	015a      	lsls	r2, r3, #5
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	4413      	add	r3, r2
 8009aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ace:	691b      	ldr	r3, [r3, #16]
 8009ad0:	693a      	ldr	r2, [r7, #16]
 8009ad2:	0151      	lsls	r1, r2, #5
 8009ad4:	697a      	ldr	r2, [r7, #20]
 8009ad6:	440a      	add	r2, r1
 8009ad8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009adc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009ae0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009ae4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	015a      	lsls	r2, r3, #5
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	4413      	add	r3, r2
 8009aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009af2:	691b      	ldr	r3, [r3, #16]
 8009af4:	693a      	ldr	r2, [r7, #16]
 8009af6:	0151      	lsls	r1, r2, #5
 8009af8:	697a      	ldr	r2, [r7, #20]
 8009afa:	440a      	add	r2, r1
 8009afc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	015a      	lsls	r2, r3, #5
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b12:	691b      	ldr	r3, [r3, #16]
 8009b14:	693a      	ldr	r2, [r7, #16]
 8009b16:	0151      	lsls	r1, r2, #5
 8009b18:	697a      	ldr	r2, [r7, #20]
 8009b1a:	440a      	add	r2, r1
 8009b1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b20:	0cdb      	lsrs	r3, r3, #19
 8009b22:	04db      	lsls	r3, r3, #19
 8009b24:	6113      	str	r3, [r2, #16]
 8009b26:	e04e      	b.n	8009bc6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	015a      	lsls	r2, r3, #5
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	4413      	add	r3, r2
 8009b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b34:	691b      	ldr	r3, [r3, #16]
 8009b36:	693a      	ldr	r2, [r7, #16]
 8009b38:	0151      	lsls	r1, r2, #5
 8009b3a:	697a      	ldr	r2, [r7, #20]
 8009b3c:	440a      	add	r2, r1
 8009b3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b42:	0cdb      	lsrs	r3, r3, #19
 8009b44:	04db      	lsls	r3, r3, #19
 8009b46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	015a      	lsls	r2, r3, #5
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	4413      	add	r3, r2
 8009b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b54:	691b      	ldr	r3, [r3, #16]
 8009b56:	693a      	ldr	r2, [r7, #16]
 8009b58:	0151      	lsls	r1, r2, #5
 8009b5a:	697a      	ldr	r2, [r7, #20]
 8009b5c:	440a      	add	r2, r1
 8009b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b62:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009b66:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009b6a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	695a      	ldr	r2, [r3, #20]
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d903      	bls.n	8009b80 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	689a      	ldr	r2, [r3, #8]
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	015a      	lsls	r2, r3, #5
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	4413      	add	r3, r2
 8009b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b8c:	691b      	ldr	r3, [r3, #16]
 8009b8e:	693a      	ldr	r2, [r7, #16]
 8009b90:	0151      	lsls	r1, r2, #5
 8009b92:	697a      	ldr	r2, [r7, #20]
 8009b94:	440a      	add	r2, r1
 8009b96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	015a      	lsls	r2, r3, #5
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bac:	691a      	ldr	r2, [r3, #16]
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	695b      	ldr	r3, [r3, #20]
 8009bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009bb6:	6939      	ldr	r1, [r7, #16]
 8009bb8:	0148      	lsls	r0, r1, #5
 8009bba:	6979      	ldr	r1, [r7, #20]
 8009bbc:	4401      	add	r1, r0
 8009bbe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009bc6:	79fb      	ldrb	r3, [r7, #7]
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d11e      	bne.n	8009c0a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	691b      	ldr	r3, [r3, #16]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d009      	beq.n	8009be8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	015a      	lsls	r2, r3, #5
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	4413      	add	r3, r2
 8009bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009be0:	461a      	mov	r2, r3
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	691b      	ldr	r3, [r3, #16]
 8009be6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	015a      	lsls	r2, r3, #5
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	4413      	add	r3, r2
 8009bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	693a      	ldr	r2, [r7, #16]
 8009bf8:	0151      	lsls	r1, r2, #5
 8009bfa:	697a      	ldr	r2, [r7, #20]
 8009bfc:	440a      	add	r2, r1
 8009bfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009c06:	6013      	str	r3, [r2, #0]
 8009c08:	e092      	b.n	8009d30 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	015a      	lsls	r2, r3, #5
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	4413      	add	r3, r2
 8009c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	693a      	ldr	r2, [r7, #16]
 8009c1a:	0151      	lsls	r1, r2, #5
 8009c1c:	697a      	ldr	r2, [r7, #20]
 8009c1e:	440a      	add	r2, r1
 8009c20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c24:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009c28:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	695b      	ldr	r3, [r3, #20]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d07e      	beq.n	8009d30 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	f003 030f 	and.w	r3, r3, #15
 8009c42:	2101      	movs	r1, #1
 8009c44:	fa01 f303 	lsl.w	r3, r1, r3
 8009c48:	6979      	ldr	r1, [r7, #20]
 8009c4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	634b      	str	r3, [r1, #52]	; 0x34
 8009c52:	e06d      	b.n	8009d30 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	015a      	lsls	r2, r3, #5
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	4413      	add	r3, r2
 8009c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c60:	691b      	ldr	r3, [r3, #16]
 8009c62:	693a      	ldr	r2, [r7, #16]
 8009c64:	0151      	lsls	r1, r2, #5
 8009c66:	697a      	ldr	r2, [r7, #20]
 8009c68:	440a      	add	r2, r1
 8009c6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c6e:	0cdb      	lsrs	r3, r3, #19
 8009c70:	04db      	lsls	r3, r3, #19
 8009c72:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	015a      	lsls	r2, r3, #5
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	4413      	add	r3, r2
 8009c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c80:	691b      	ldr	r3, [r3, #16]
 8009c82:	693a      	ldr	r2, [r7, #16]
 8009c84:	0151      	lsls	r1, r2, #5
 8009c86:	697a      	ldr	r2, [r7, #20]
 8009c88:	440a      	add	r2, r1
 8009c8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c8e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009c92:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009c96:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	695b      	ldr	r3, [r3, #20]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d003      	beq.n	8009ca8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	689a      	ldr	r2, [r3, #8]
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	015a      	lsls	r2, r3, #5
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	4413      	add	r3, r2
 8009cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cb4:	691b      	ldr	r3, [r3, #16]
 8009cb6:	693a      	ldr	r2, [r7, #16]
 8009cb8:	0151      	lsls	r1, r2, #5
 8009cba:	697a      	ldr	r2, [r7, #20]
 8009cbc:	440a      	add	r2, r1
 8009cbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009cc6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	015a      	lsls	r2, r3, #5
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	4413      	add	r3, r2
 8009cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cd4:	691a      	ldr	r2, [r3, #16]
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	689b      	ldr	r3, [r3, #8]
 8009cda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cde:	6939      	ldr	r1, [r7, #16]
 8009ce0:	0148      	lsls	r0, r1, #5
 8009ce2:	6979      	ldr	r1, [r7, #20]
 8009ce4:	4401      	add	r1, r0
 8009ce6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009cea:	4313      	orrs	r3, r2
 8009cec:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009cee:	79fb      	ldrb	r3, [r7, #7]
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d10d      	bne.n	8009d10 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	68db      	ldr	r3, [r3, #12]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d009      	beq.n	8009d10 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	68d9      	ldr	r1, [r3, #12]
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	015a      	lsls	r2, r3, #5
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	4413      	add	r3, r2
 8009d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d0c:	460a      	mov	r2, r1
 8009d0e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	015a      	lsls	r2, r3, #5
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	4413      	add	r3, r2
 8009d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	693a      	ldr	r2, [r7, #16]
 8009d20:	0151      	lsls	r1, r2, #5
 8009d22:	697a      	ldr	r2, [r7, #20]
 8009d24:	440a      	add	r2, r1
 8009d26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009d2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	371c      	adds	r7, #28
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr

08009d3e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009d3e:	b480      	push	{r7}
 8009d40:	b089      	sub	sp, #36	; 0x24
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	60f8      	str	r0, [r7, #12]
 8009d46:	60b9      	str	r1, [r7, #8]
 8009d48:	4611      	mov	r1, r2
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	71fb      	strb	r3, [r7, #7]
 8009d50:	4613      	mov	r3, r2
 8009d52:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009d5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d123      	bne.n	8009dac <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009d64:	88bb      	ldrh	r3, [r7, #4]
 8009d66:	3303      	adds	r3, #3
 8009d68:	089b      	lsrs	r3, r3, #2
 8009d6a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	61bb      	str	r3, [r7, #24]
 8009d70:	e018      	b.n	8009da4 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009d72:	79fb      	ldrb	r3, [r7, #7]
 8009d74:	031a      	lsls	r2, r3, #12
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	4413      	add	r3, r2
 8009d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d7e:	461a      	mov	r2, r3
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009d86:	69fb      	ldr	r3, [r7, #28]
 8009d88:	3301      	adds	r3, #1
 8009d8a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	3301      	adds	r3, #1
 8009d90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009d92:	69fb      	ldr	r3, [r7, #28]
 8009d94:	3301      	adds	r3, #1
 8009d96:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009d98:	69fb      	ldr	r3, [r7, #28]
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009d9e:	69bb      	ldr	r3, [r7, #24]
 8009da0:	3301      	adds	r3, #1
 8009da2:	61bb      	str	r3, [r7, #24]
 8009da4:	69ba      	ldr	r2, [r7, #24]
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d3e2      	bcc.n	8009d72 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009dac:	2300      	movs	r3, #0
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3724      	adds	r7, #36	; 0x24
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr

08009dba <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009dba:	b480      	push	{r7}
 8009dbc:	b08b      	sub	sp, #44	; 0x2c
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	60f8      	str	r0, [r7, #12]
 8009dc2:	60b9      	str	r1, [r7, #8]
 8009dc4:	4613      	mov	r3, r2
 8009dc6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009dd0:	88fb      	ldrh	r3, [r7, #6]
 8009dd2:	089b      	lsrs	r3, r3, #2
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009dd8:	88fb      	ldrh	r3, [r7, #6]
 8009dda:	f003 0303 	and.w	r3, r3, #3
 8009dde:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009de0:	2300      	movs	r3, #0
 8009de2:	623b      	str	r3, [r7, #32]
 8009de4:	e014      	b.n	8009e10 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009de6:	69bb      	ldr	r3, [r7, #24]
 8009de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df0:	601a      	str	r2, [r3, #0]
    pDest++;
 8009df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df4:	3301      	adds	r3, #1
 8009df6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e00:	3301      	adds	r3, #1
 8009e02:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e06:	3301      	adds	r3, #1
 8009e08:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009e0a:	6a3b      	ldr	r3, [r7, #32]
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	623b      	str	r3, [r7, #32]
 8009e10:	6a3a      	ldr	r2, [r7, #32]
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d3e6      	bcc.n	8009de6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009e18:	8bfb      	ldrh	r3, [r7, #30]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d01e      	beq.n	8009e5c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009e22:	69bb      	ldr	r3, [r7, #24]
 8009e24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e28:	461a      	mov	r2, r3
 8009e2a:	f107 0310 	add.w	r3, r7, #16
 8009e2e:	6812      	ldr	r2, [r2, #0]
 8009e30:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009e32:	693a      	ldr	r2, [r7, #16]
 8009e34:	6a3b      	ldr	r3, [r7, #32]
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	00db      	lsls	r3, r3, #3
 8009e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8009e3e:	b2da      	uxtb	r2, r3
 8009e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e42:	701a      	strb	r2, [r3, #0]
      i++;
 8009e44:	6a3b      	ldr	r3, [r7, #32]
 8009e46:	3301      	adds	r3, #1
 8009e48:	623b      	str	r3, [r7, #32]
      pDest++;
 8009e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009e50:	8bfb      	ldrh	r3, [r7, #30]
 8009e52:	3b01      	subs	r3, #1
 8009e54:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009e56:	8bfb      	ldrh	r3, [r7, #30]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d1ea      	bne.n	8009e32 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	372c      	adds	r7, #44	; 0x2c
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr

08009e6a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e6a:	b480      	push	{r7}
 8009e6c:	b085      	sub	sp, #20
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
 8009e72:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	785b      	ldrb	r3, [r3, #1]
 8009e82:	2b01      	cmp	r3, #1
 8009e84:	d12c      	bne.n	8009ee0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	015a      	lsls	r2, r3, #5
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	4413      	add	r3, r2
 8009e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	db12      	blt.n	8009ebe <USB_EPSetStall+0x54>
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d00f      	beq.n	8009ebe <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	015a      	lsls	r2, r3, #5
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	4413      	add	r3, r2
 8009ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	68ba      	ldr	r2, [r7, #8]
 8009eae:	0151      	lsls	r1, r2, #5
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	440a      	add	r2, r1
 8009eb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009eb8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009ebc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	015a      	lsls	r2, r3, #5
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	4413      	add	r3, r2
 8009ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	68ba      	ldr	r2, [r7, #8]
 8009ece:	0151      	lsls	r1, r2, #5
 8009ed0:	68fa      	ldr	r2, [r7, #12]
 8009ed2:	440a      	add	r2, r1
 8009ed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ed8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009edc:	6013      	str	r3, [r2, #0]
 8009ede:	e02b      	b.n	8009f38 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	015a      	lsls	r2, r3, #5
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	4413      	add	r3, r2
 8009ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	db12      	blt.n	8009f18 <USB_EPSetStall+0xae>
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d00f      	beq.n	8009f18 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	015a      	lsls	r2, r3, #5
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	4413      	add	r3, r2
 8009f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	68ba      	ldr	r2, [r7, #8]
 8009f08:	0151      	lsls	r1, r2, #5
 8009f0a:	68fa      	ldr	r2, [r7, #12]
 8009f0c:	440a      	add	r2, r1
 8009f0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009f16:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	015a      	lsls	r2, r3, #5
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	4413      	add	r3, r2
 8009f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	68ba      	ldr	r2, [r7, #8]
 8009f28:	0151      	lsls	r1, r2, #5
 8009f2a:	68fa      	ldr	r2, [r7, #12]
 8009f2c:	440a      	add	r2, r1
 8009f2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009f36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009f38:	2300      	movs	r3, #0
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3714      	adds	r7, #20
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr

08009f46 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009f46:	b480      	push	{r7}
 8009f48:	b085      	sub	sp, #20
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
 8009f4e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	785b      	ldrb	r3, [r3, #1]
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	d128      	bne.n	8009fb4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	015a      	lsls	r2, r3, #5
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	4413      	add	r3, r2
 8009f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	68ba      	ldr	r2, [r7, #8]
 8009f72:	0151      	lsls	r1, r2, #5
 8009f74:	68fa      	ldr	r2, [r7, #12]
 8009f76:	440a      	add	r2, r1
 8009f78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009f80:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	78db      	ldrb	r3, [r3, #3]
 8009f86:	2b03      	cmp	r3, #3
 8009f88:	d003      	beq.n	8009f92 <USB_EPClearStall+0x4c>
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	78db      	ldrb	r3, [r3, #3]
 8009f8e:	2b02      	cmp	r3, #2
 8009f90:	d138      	bne.n	800a004 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	015a      	lsls	r2, r3, #5
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	4413      	add	r3, r2
 8009f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	68ba      	ldr	r2, [r7, #8]
 8009fa2:	0151      	lsls	r1, r2, #5
 8009fa4:	68fa      	ldr	r2, [r7, #12]
 8009fa6:	440a      	add	r2, r1
 8009fa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fb0:	6013      	str	r3, [r2, #0]
 8009fb2:	e027      	b.n	800a004 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	015a      	lsls	r2, r3, #5
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	4413      	add	r3, r2
 8009fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	68ba      	ldr	r2, [r7, #8]
 8009fc4:	0151      	lsls	r1, r2, #5
 8009fc6:	68fa      	ldr	r2, [r7, #12]
 8009fc8:	440a      	add	r2, r1
 8009fca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009fd2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	78db      	ldrb	r3, [r3, #3]
 8009fd8:	2b03      	cmp	r3, #3
 8009fda:	d003      	beq.n	8009fe4 <USB_EPClearStall+0x9e>
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	78db      	ldrb	r3, [r3, #3]
 8009fe0:	2b02      	cmp	r3, #2
 8009fe2:	d10f      	bne.n	800a004 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	015a      	lsls	r2, r3, #5
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	4413      	add	r3, r2
 8009fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	68ba      	ldr	r2, [r7, #8]
 8009ff4:	0151      	lsls	r1, r2, #5
 8009ff6:	68fa      	ldr	r2, [r7, #12]
 8009ff8:	440a      	add	r2, r1
 8009ffa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a002:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a004:	2300      	movs	r3, #0
}
 800a006:	4618      	mov	r0, r3
 800a008:	3714      	adds	r7, #20
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr

0800a012 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a012:	b480      	push	{r7}
 800a014:	b085      	sub	sp, #20
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
 800a01a:	460b      	mov	r3, r1
 800a01c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	68fa      	ldr	r2, [r7, #12]
 800a02c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a030:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a034:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	78fb      	ldrb	r3, [r7, #3]
 800a040:	011b      	lsls	r3, r3, #4
 800a042:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a046:	68f9      	ldr	r1, [r7, #12]
 800a048:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a04c:	4313      	orrs	r3, r2
 800a04e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a050:	2300      	movs	r3, #0
}
 800a052:	4618      	mov	r0, r3
 800a054:	3714      	adds	r7, #20
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr

0800a05e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a05e:	b480      	push	{r7}
 800a060:	b085      	sub	sp, #20
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	68fa      	ldr	r2, [r7, #12]
 800a074:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a078:	f023 0303 	bic.w	r3, r3, #3
 800a07c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	68fa      	ldr	r2, [r7, #12]
 800a088:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a08c:	f023 0302 	bic.w	r3, r3, #2
 800a090:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	3714      	adds	r7, #20
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr

0800a0a0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b085      	sub	sp, #20
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a0ba:	f023 0303 	bic.w	r3, r3, #3
 800a0be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0ce:	f043 0302 	orr.w	r3, r3, #2
 800a0d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a0d4:	2300      	movs	r3, #0
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3714      	adds	r7, #20
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr

0800a0e2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a0e2:	b480      	push	{r7}
 800a0e4:	b085      	sub	sp, #20
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	695b      	ldr	r3, [r3, #20]
 800a0ee:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	699b      	ldr	r3, [r3, #24]
 800a0f4:	68fa      	ldr	r2, [r7, #12]
 800a0f6:	4013      	ands	r3, r2
 800a0f8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3714      	adds	r7, #20
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a108:	b480      	push	{r7}
 800a10a:	b085      	sub	sp, #20
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a11a:	699b      	ldr	r3, [r3, #24]
 800a11c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a124:	69db      	ldr	r3, [r3, #28]
 800a126:	68ba      	ldr	r2, [r7, #8]
 800a128:	4013      	ands	r3, r2
 800a12a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	0c1b      	lsrs	r3, r3, #16
}
 800a130:	4618      	mov	r0, r3
 800a132:	3714      	adds	r7, #20
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr

0800a13c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b085      	sub	sp, #20
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a14e:	699b      	ldr	r3, [r3, #24]
 800a150:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a158:	69db      	ldr	r3, [r3, #28]
 800a15a:	68ba      	ldr	r2, [r7, #8]
 800a15c:	4013      	ands	r3, r2
 800a15e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	b29b      	uxth	r3, r3
}
 800a164:	4618      	mov	r0, r3
 800a166:	3714      	adds	r7, #20
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr

0800a170 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a170:	b480      	push	{r7}
 800a172:	b085      	sub	sp, #20
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	460b      	mov	r3, r1
 800a17a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a180:	78fb      	ldrb	r3, [r7, #3]
 800a182:	015a      	lsls	r2, r3, #5
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	4413      	add	r3, r2
 800a188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a196:	695b      	ldr	r3, [r3, #20]
 800a198:	68ba      	ldr	r2, [r7, #8]
 800a19a:	4013      	ands	r3, r2
 800a19c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a19e:	68bb      	ldr	r3, [r7, #8]
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3714      	adds	r7, #20
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr

0800a1ac <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b087      	sub	sp, #28
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1c2:	691b      	ldr	r3, [r3, #16]
 800a1c4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1ce:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a1d0:	78fb      	ldrb	r3, [r7, #3]
 800a1d2:	f003 030f 	and.w	r3, r3, #15
 800a1d6:	68fa      	ldr	r2, [r7, #12]
 800a1d8:	fa22 f303 	lsr.w	r3, r2, r3
 800a1dc:	01db      	lsls	r3, r3, #7
 800a1de:	b2db      	uxtb	r3, r3
 800a1e0:	693a      	ldr	r2, [r7, #16]
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a1e6:	78fb      	ldrb	r3, [r7, #3]
 800a1e8:	015a      	lsls	r2, r3, #5
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	4413      	add	r3, r2
 800a1ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1f2:	689b      	ldr	r3, [r3, #8]
 800a1f4:	693a      	ldr	r2, [r7, #16]
 800a1f6:	4013      	ands	r3, r2
 800a1f8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a1fa:	68bb      	ldr	r3, [r7, #8]
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	371c      	adds	r7, #28
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr

0800a208 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	695b      	ldr	r3, [r3, #20]
 800a214:	f003 0301 	and.w	r3, r3, #1
}
 800a218:	4618      	mov	r0, r3
 800a21a:	370c      	adds	r7, #12
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a224:	b480      	push	{r7}
 800a226:	b085      	sub	sp, #20
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	68fa      	ldr	r2, [r7, #12]
 800a23a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a23e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a242:	f023 0307 	bic.w	r3, r3, #7
 800a246:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	68fa      	ldr	r2, [r7, #12]
 800a252:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a25a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a25c:	2300      	movs	r3, #0
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3714      	adds	r7, #20
 800a262:	46bd      	mov	sp, r7
 800a264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a268:	4770      	bx	lr
	...

0800a26c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b087      	sub	sp, #28
 800a270:	af00      	add	r7, sp, #0
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	460b      	mov	r3, r1
 800a276:	607a      	str	r2, [r7, #4]
 800a278:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	333c      	adds	r3, #60	; 0x3c
 800a282:	3304      	adds	r3, #4
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	4a26      	ldr	r2, [pc, #152]	; (800a324 <USB_EP0_OutStart+0xb8>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d90a      	bls.n	800a2a6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a29c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a2a0:	d101      	bne.n	800a2a6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	e037      	b.n	800a316 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2b8:	691b      	ldr	r3, [r3, #16]
 800a2ba:	697a      	ldr	r2, [r7, #20]
 800a2bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a2c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2cc:	691b      	ldr	r3, [r3, #16]
 800a2ce:	697a      	ldr	r2, [r7, #20]
 800a2d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2d4:	f043 0318 	orr.w	r3, r3, #24
 800a2d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2e0:	691b      	ldr	r3, [r3, #16]
 800a2e2:	697a      	ldr	r2, [r7, #20]
 800a2e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2e8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a2ec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a2ee:	7afb      	ldrb	r3, [r7, #11]
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d10f      	bne.n	800a314 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	697a      	ldr	r2, [r7, #20]
 800a30a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a30e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a312:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a314:	2300      	movs	r3, #0
}
 800a316:	4618      	mov	r0, r3
 800a318:	371c      	adds	r7, #28
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr
 800a322:	bf00      	nop
 800a324:	4f54300a 	.word	0x4f54300a

0800a328 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a328:	b480      	push	{r7}
 800a32a:	b085      	sub	sp, #20
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a330:	2300      	movs	r3, #0
 800a332:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	3301      	adds	r3, #1
 800a338:	60fb      	str	r3, [r7, #12]
 800a33a:	4a13      	ldr	r2, [pc, #76]	; (800a388 <USB_CoreReset+0x60>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d901      	bls.n	800a344 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800a340:	2303      	movs	r3, #3
 800a342:	e01a      	b.n	800a37a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	691b      	ldr	r3, [r3, #16]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	daf3      	bge.n	800a334 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a34c:	2300      	movs	r3, #0
 800a34e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	691b      	ldr	r3, [r3, #16]
 800a354:	f043 0201 	orr.w	r2, r3, #1
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	3301      	adds	r3, #1
 800a360:	60fb      	str	r3, [r7, #12]
 800a362:	4a09      	ldr	r2, [pc, #36]	; (800a388 <USB_CoreReset+0x60>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d901      	bls.n	800a36c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800a368:	2303      	movs	r3, #3
 800a36a:	e006      	b.n	800a37a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	691b      	ldr	r3, [r3, #16]
 800a370:	f003 0301 	and.w	r3, r3, #1
 800a374:	2b01      	cmp	r3, #1
 800a376:	d0f1      	beq.n	800a35c <USB_CoreReset+0x34>

  return HAL_OK;
 800a378:	2300      	movs	r3, #0
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3714      	adds	r7, #20
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr
 800a386:	bf00      	nop
 800a388:	00030d40 	.word	0x00030d40

0800a38c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a390:	4904      	ldr	r1, [pc, #16]	; (800a3a4 <MX_FATFS_Init+0x18>)
 800a392:	4805      	ldr	r0, [pc, #20]	; (800a3a8 <MX_FATFS_Init+0x1c>)
 800a394:	f004 fef2 	bl	800f17c <FATFS_LinkDriver>
 800a398:	4603      	mov	r3, r0
 800a39a:	461a      	mov	r2, r3
 800a39c:	4b03      	ldr	r3, [pc, #12]	; (800a3ac <MX_FATFS_Init+0x20>)
 800a39e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a3a0:	bf00      	nop
 800a3a2:	bd80      	pop	{r7, pc}
 800a3a4:	2000163c 	.word	0x2000163c
 800a3a8:	2000000c 	.word	0x2000000c
 800a3ac:	20001640 	.word	0x20001640

0800a3b0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a3b4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr

0800a3c0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b082      	sub	sp, #8
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800a3ca:	79fb      	ldrb	r3, [r7, #7]
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f000 f9dd 	bl	800a78c <USER_SPI_initialize>
 800a3d2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3708      	adds	r7, #8
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}

0800a3dc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800a3e6:	79fb      	ldrb	r3, [r7, #7]
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f000 fab9 	bl	800a960 <USER_SPI_status>
 800a3ee:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3708      	adds	r7, #8
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b084      	sub	sp, #16
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	60b9      	str	r1, [r7, #8]
 800a400:	607a      	str	r2, [r7, #4]
 800a402:	603b      	str	r3, [r7, #0]
 800a404:	4603      	mov	r3, r0
 800a406:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800a408:	7bf8      	ldrb	r0, [r7, #15]
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	68b9      	ldr	r1, [r7, #8]
 800a410:	f000 fabc 	bl	800a98c <USER_SPI_read>
 800a414:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800a416:	4618      	mov	r0, r3
 800a418:	3710      	adds	r7, #16
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}

0800a41e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a41e:	b580      	push	{r7, lr}
 800a420:	b084      	sub	sp, #16
 800a422:	af00      	add	r7, sp, #0
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	607a      	str	r2, [r7, #4]
 800a428:	603b      	str	r3, [r7, #0]
 800a42a:	4603      	mov	r3, r0
 800a42c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800a42e:	7bf8      	ldrb	r0, [r7, #15]
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	68b9      	ldr	r1, [r7, #8]
 800a436:	f000 fb0f 	bl	800aa58 <USER_SPI_write>
 800a43a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3710      	adds	r7, #16
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	4603      	mov	r3, r0
 800a44c:	603a      	str	r2, [r7, #0]
 800a44e:	71fb      	strb	r3, [r7, #7]
 800a450:	460b      	mov	r3, r1
 800a452:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800a454:	79b9      	ldrb	r1, [r7, #6]
 800a456:	79fb      	ldrb	r3, [r7, #7]
 800a458:	683a      	ldr	r2, [r7, #0]
 800a45a:	4618      	mov	r0, r3
 800a45c:	f000 fb78 	bl	800ab50 <USER_SPI_ioctl>
 800a460:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800a462:	4618      	mov	r0, r3
 800a464:	3708      	adds	r7, #8
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
	...

0800a46c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800a474:	f7f9 f9f8 	bl	8003868 <HAL_GetTick>
 800a478:	4603      	mov	r3, r0
 800a47a:	4a04      	ldr	r2, [pc, #16]	; (800a48c <SPI_Timer_On+0x20>)
 800a47c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800a47e:	4a04      	ldr	r2, [pc, #16]	; (800a490 <SPI_Timer_On+0x24>)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6013      	str	r3, [r2, #0]
}
 800a484:	bf00      	nop
 800a486:	3708      	adds	r7, #8
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	20001aa4 	.word	0x20001aa4
 800a490:	20001aa8 	.word	0x20001aa8

0800a494 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800a494:	b580      	push	{r7, lr}
 800a496:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800a498:	f7f9 f9e6 	bl	8003868 <HAL_GetTick>
 800a49c:	4602      	mov	r2, r0
 800a49e:	4b06      	ldr	r3, [pc, #24]	; (800a4b8 <SPI_Timer_Status+0x24>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	1ad2      	subs	r2, r2, r3
 800a4a4:	4b05      	ldr	r3, [pc, #20]	; (800a4bc <SPI_Timer_Status+0x28>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	bf34      	ite	cc
 800a4ac:	2301      	movcc	r3, #1
 800a4ae:	2300      	movcs	r3, #0
 800a4b0:	b2db      	uxtb	r3, r3
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	20001aa4 	.word	0x20001aa4
 800a4bc:	20001aa8 	.word	0x20001aa8

0800a4c0 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b086      	sub	sp, #24
 800a4c4:	af02      	add	r7, sp, #8
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a4ca:	f107 020f 	add.w	r2, r7, #15
 800a4ce:	1df9      	adds	r1, r7, #7
 800a4d0:	2332      	movs	r3, #50	; 0x32
 800a4d2:	9300      	str	r3, [sp, #0]
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	4804      	ldr	r0, [pc, #16]	; (800a4e8 <xchg_spi+0x28>)
 800a4d8:	f7fc fe11 	bl	80070fe <HAL_SPI_TransmitReceive>
    return rxDat;
 800a4dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3710      	adds	r7, #16
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	20000c9c 	.word	0x20000c9c

0800a4ec <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800a4ec:	b590      	push	{r4, r7, lr}
 800a4ee:	b085      	sub	sp, #20
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	60fb      	str	r3, [r7, #12]
 800a4fa:	e00a      	b.n	800a512 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	18d4      	adds	r4, r2, r3
 800a502:	20ff      	movs	r0, #255	; 0xff
 800a504:	f7ff ffdc 	bl	800a4c0 <xchg_spi>
 800a508:	4603      	mov	r3, r0
 800a50a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	3301      	adds	r3, #1
 800a510:	60fb      	str	r3, [r7, #12]
 800a512:	68fa      	ldr	r2, [r7, #12]
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	429a      	cmp	r2, r3
 800a518:	d3f0      	bcc.n	800a4fc <rcvr_spi_multi+0x10>
	}
}
 800a51a:	bf00      	nop
 800a51c:	bf00      	nop
 800a51e:	3714      	adds	r7, #20
 800a520:	46bd      	mov	sp, r7
 800a522:	bd90      	pop	{r4, r7, pc}

0800a524 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800a52e:	2300      	movs	r3, #0
 800a530:	60fb      	str	r3, [r7, #12]
 800a532:	e009      	b.n	800a548 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800a534:	687a      	ldr	r2, [r7, #4]
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	4413      	add	r3, r2
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	4618      	mov	r0, r3
 800a53e:	f7ff ffbf 	bl	800a4c0 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	3301      	adds	r3, #1
 800a546:	60fb      	str	r3, [r7, #12]
 800a548:	68fa      	ldr	r2, [r7, #12]
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d3f1      	bcc.n	800a534 <xmit_spi_multi+0x10>
	}
}
 800a550:	bf00      	nop
 800a552:	bf00      	nop
 800a554:	3710      	adds	r7, #16
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}

0800a55a <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800a55a:	b580      	push	{r7, lr}
 800a55c:	b086      	sub	sp, #24
 800a55e:	af00      	add	r7, sp, #0
 800a560:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800a562:	f7f9 f981 	bl	8003868 <HAL_GetTick>
 800a566:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800a56c:	20ff      	movs	r0, #255	; 0xff
 800a56e:	f7ff ffa7 	bl	800a4c0 <xchg_spi>
 800a572:	4603      	mov	r3, r0
 800a574:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800a576:	7bfb      	ldrb	r3, [r7, #15]
 800a578:	2bff      	cmp	r3, #255	; 0xff
 800a57a:	d007      	beq.n	800a58c <wait_ready+0x32>
 800a57c:	f7f9 f974 	bl	8003868 <HAL_GetTick>
 800a580:	4602      	mov	r2, r0
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	1ad3      	subs	r3, r2, r3
 800a586:	693a      	ldr	r2, [r7, #16]
 800a588:	429a      	cmp	r2, r3
 800a58a:	d8ef      	bhi.n	800a56c <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800a58c:	7bfb      	ldrb	r3, [r7, #15]
 800a58e:	2bff      	cmp	r3, #255	; 0xff
 800a590:	bf0c      	ite	eq
 800a592:	2301      	moveq	r3, #1
 800a594:	2300      	movne	r3, #0
 800a596:	b2db      	uxtb	r3, r3
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3718      	adds	r7, #24
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a5aa:	4804      	ldr	r0, [pc, #16]	; (800a5bc <despiselect+0x1c>)
 800a5ac:	f7f9 febc 	bl	8004328 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800a5b0:	20ff      	movs	r0, #255	; 0xff
 800a5b2:	f7ff ff85 	bl	800a4c0 <xchg_spi>

}
 800a5b6:	bf00      	nop
 800a5b8:	bd80      	pop	{r7, pc}
 800a5ba:	bf00      	nop
 800a5bc:	40021400 	.word	0x40021400

0800a5c0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a5ca:	480a      	ldr	r0, [pc, #40]	; (800a5f4 <spiselect+0x34>)
 800a5cc:	f7f9 feac 	bl	8004328 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800a5d0:	20ff      	movs	r0, #255	; 0xff
 800a5d2:	f7ff ff75 	bl	800a4c0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800a5d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a5da:	f7ff ffbe 	bl	800a55a <wait_ready>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d001      	beq.n	800a5e8 <spiselect+0x28>
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	e002      	b.n	800a5ee <spiselect+0x2e>

	despiselect();
 800a5e8:	f7ff ffda 	bl	800a5a0 <despiselect>
	return 0;	/* Timeout */
 800a5ec:	2300      	movs	r3, #0
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	bd80      	pop	{r7, pc}
 800a5f2:	bf00      	nop
 800a5f4:	40021400 	.word	0x40021400

0800a5f8 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b084      	sub	sp, #16
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800a602:	20c8      	movs	r0, #200	; 0xc8
 800a604:	f7ff ff32 	bl	800a46c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800a608:	20ff      	movs	r0, #255	; 0xff
 800a60a:	f7ff ff59 	bl	800a4c0 <xchg_spi>
 800a60e:	4603      	mov	r3, r0
 800a610:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800a612:	7bfb      	ldrb	r3, [r7, #15]
 800a614:	2bff      	cmp	r3, #255	; 0xff
 800a616:	d104      	bne.n	800a622 <rcvr_datablock+0x2a>
 800a618:	f7ff ff3c 	bl	800a494 <SPI_Timer_Status>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d1f2      	bne.n	800a608 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800a622:	7bfb      	ldrb	r3, [r7, #15]
 800a624:	2bfe      	cmp	r3, #254	; 0xfe
 800a626:	d001      	beq.n	800a62c <rcvr_datablock+0x34>
 800a628:	2300      	movs	r3, #0
 800a62a:	e00a      	b.n	800a642 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800a62c:	6839      	ldr	r1, [r7, #0]
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f7ff ff5c 	bl	800a4ec <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800a634:	20ff      	movs	r0, #255	; 0xff
 800a636:	f7ff ff43 	bl	800a4c0 <xchg_spi>
 800a63a:	20ff      	movs	r0, #255	; 0xff
 800a63c:	f7ff ff40 	bl	800a4c0 <xchg_spi>

	return 1;						/* Function succeeded */
 800a640:	2301      	movs	r3, #1
}
 800a642:	4618      	mov	r0, r3
 800a644:	3710      	adds	r7, #16
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}

0800a64a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800a64a:	b580      	push	{r7, lr}
 800a64c:	b084      	sub	sp, #16
 800a64e:	af00      	add	r7, sp, #0
 800a650:	6078      	str	r0, [r7, #4]
 800a652:	460b      	mov	r3, r1
 800a654:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800a656:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a65a:	f7ff ff7e 	bl	800a55a <wait_ready>
 800a65e:	4603      	mov	r3, r0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d101      	bne.n	800a668 <xmit_datablock+0x1e>
 800a664:	2300      	movs	r3, #0
 800a666:	e01e      	b.n	800a6a6 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800a668:	78fb      	ldrb	r3, [r7, #3]
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7ff ff28 	bl	800a4c0 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800a670:	78fb      	ldrb	r3, [r7, #3]
 800a672:	2bfd      	cmp	r3, #253	; 0xfd
 800a674:	d016      	beq.n	800a6a4 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800a676:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f7ff ff52 	bl	800a524 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800a680:	20ff      	movs	r0, #255	; 0xff
 800a682:	f7ff ff1d 	bl	800a4c0 <xchg_spi>
 800a686:	20ff      	movs	r0, #255	; 0xff
 800a688:	f7ff ff1a 	bl	800a4c0 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800a68c:	20ff      	movs	r0, #255	; 0xff
 800a68e:	f7ff ff17 	bl	800a4c0 <xchg_spi>
 800a692:	4603      	mov	r3, r0
 800a694:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800a696:	7bfb      	ldrb	r3, [r7, #15]
 800a698:	f003 031f 	and.w	r3, r3, #31
 800a69c:	2b05      	cmp	r3, #5
 800a69e:	d001      	beq.n	800a6a4 <xmit_datablock+0x5a>
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	e000      	b.n	800a6a6 <xmit_datablock+0x5c>
	}
	return 1;
 800a6a4:	2301      	movs	r3, #1
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3710      	adds	r7, #16
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b084      	sub	sp, #16
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	6039      	str	r1, [r7, #0]
 800a6b8:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800a6ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	da0e      	bge.n	800a6e0 <send_cmd+0x32>
		cmd &= 0x7F;
 800a6c2:	79fb      	ldrb	r3, [r7, #7]
 800a6c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6c8:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800a6ca:	2100      	movs	r1, #0
 800a6cc:	2037      	movs	r0, #55	; 0x37
 800a6ce:	f7ff ffee 	bl	800a6ae <send_cmd>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800a6d6:	7bbb      	ldrb	r3, [r7, #14]
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d901      	bls.n	800a6e0 <send_cmd+0x32>
 800a6dc:	7bbb      	ldrb	r3, [r7, #14]
 800a6de:	e051      	b.n	800a784 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800a6e0:	79fb      	ldrb	r3, [r7, #7]
 800a6e2:	2b0c      	cmp	r3, #12
 800a6e4:	d008      	beq.n	800a6f8 <send_cmd+0x4a>
		despiselect();
 800a6e6:	f7ff ff5b 	bl	800a5a0 <despiselect>
		if (!spiselect()) return 0xFF;
 800a6ea:	f7ff ff69 	bl	800a5c0 <spiselect>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d101      	bne.n	800a6f8 <send_cmd+0x4a>
 800a6f4:	23ff      	movs	r3, #255	; 0xff
 800a6f6:	e045      	b.n	800a784 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800a6f8:	79fb      	ldrb	r3, [r7, #7]
 800a6fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	4618      	mov	r0, r3
 800a702:	f7ff fedd 	bl	800a4c0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	0e1b      	lsrs	r3, r3, #24
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	4618      	mov	r0, r3
 800a70e:	f7ff fed7 	bl	800a4c0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	0c1b      	lsrs	r3, r3, #16
 800a716:	b2db      	uxtb	r3, r3
 800a718:	4618      	mov	r0, r3
 800a71a:	f7ff fed1 	bl	800a4c0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	0a1b      	lsrs	r3, r3, #8
 800a722:	b2db      	uxtb	r3, r3
 800a724:	4618      	mov	r0, r3
 800a726:	f7ff fecb 	bl	800a4c0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	4618      	mov	r0, r3
 800a730:	f7ff fec6 	bl	800a4c0 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800a734:	2301      	movs	r3, #1
 800a736:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800a738:	79fb      	ldrb	r3, [r7, #7]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d101      	bne.n	800a742 <send_cmd+0x94>
 800a73e:	2395      	movs	r3, #149	; 0x95
 800a740:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800a742:	79fb      	ldrb	r3, [r7, #7]
 800a744:	2b08      	cmp	r3, #8
 800a746:	d101      	bne.n	800a74c <send_cmd+0x9e>
 800a748:	2387      	movs	r3, #135	; 0x87
 800a74a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800a74c:	7bfb      	ldrb	r3, [r7, #15]
 800a74e:	4618      	mov	r0, r3
 800a750:	f7ff feb6 	bl	800a4c0 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800a754:	79fb      	ldrb	r3, [r7, #7]
 800a756:	2b0c      	cmp	r3, #12
 800a758:	d102      	bne.n	800a760 <send_cmd+0xb2>
 800a75a:	20ff      	movs	r0, #255	; 0xff
 800a75c:	f7ff feb0 	bl	800a4c0 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800a760:	230a      	movs	r3, #10
 800a762:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800a764:	20ff      	movs	r0, #255	; 0xff
 800a766:	f7ff feab 	bl	800a4c0 <xchg_spi>
 800a76a:	4603      	mov	r3, r0
 800a76c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800a76e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a772:	2b00      	cmp	r3, #0
 800a774:	da05      	bge.n	800a782 <send_cmd+0xd4>
 800a776:	7bfb      	ldrb	r3, [r7, #15]
 800a778:	3b01      	subs	r3, #1
 800a77a:	73fb      	strb	r3, [r7, #15]
 800a77c:	7bfb      	ldrb	r3, [r7, #15]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d1f0      	bne.n	800a764 <send_cmd+0xb6>

	return res;							/* Return received response */
 800a782:	7bbb      	ldrb	r3, [r7, #14]
}
 800a784:	4618      	mov	r0, r3
 800a786:	3710      	adds	r7, #16
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800a78c:	b590      	push	{r4, r7, lr}
 800a78e:	b085      	sub	sp, #20
 800a790:	af00      	add	r7, sp, #0
 800a792:	4603      	mov	r3, r0
 800a794:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800a796:	79fb      	ldrb	r3, [r7, #7]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d001      	beq.n	800a7a0 <USER_SPI_initialize+0x14>
 800a79c:	2301      	movs	r3, #1
 800a79e:	e0d4      	b.n	800a94a <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800a7a0:	4b6c      	ldr	r3, [pc, #432]	; (800a954 <USER_SPI_initialize+0x1c8>)
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	b2db      	uxtb	r3, r3
 800a7a6:	f003 0302 	and.w	r3, r3, #2
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d003      	beq.n	800a7b6 <USER_SPI_initialize+0x2a>
 800a7ae:	4b69      	ldr	r3, [pc, #420]	; (800a954 <USER_SPI_initialize+0x1c8>)
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	b2db      	uxtb	r3, r3
 800a7b4:	e0c9      	b.n	800a94a <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 800a7b6:	4b68      	ldr	r3, [pc, #416]	; (800a958 <USER_SPI_initialize+0x1cc>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	4b66      	ldr	r3, [pc, #408]	; (800a958 <USER_SPI_initialize+0x1cc>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800a7c4:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800a7c6:	230a      	movs	r3, #10
 800a7c8:	73fb      	strb	r3, [r7, #15]
 800a7ca:	e005      	b.n	800a7d8 <USER_SPI_initialize+0x4c>
 800a7cc:	20ff      	movs	r0, #255	; 0xff
 800a7ce:	f7ff fe77 	bl	800a4c0 <xchg_spi>
 800a7d2:	7bfb      	ldrb	r3, [r7, #15]
 800a7d4:	3b01      	subs	r3, #1
 800a7d6:	73fb      	strb	r3, [r7, #15]
 800a7d8:	7bfb      	ldrb	r3, [r7, #15]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d1f6      	bne.n	800a7cc <USER_SPI_initialize+0x40>

	ty = 0;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800a7e2:	2100      	movs	r1, #0
 800a7e4:	2000      	movs	r0, #0
 800a7e6:	f7ff ff62 	bl	800a6ae <send_cmd>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	f040 808b 	bne.w	800a908 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800a7f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a7f6:	f7ff fe39 	bl	800a46c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800a7fa:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a7fe:	2008      	movs	r0, #8
 800a800:	f7ff ff55 	bl	800a6ae <send_cmd>
 800a804:	4603      	mov	r3, r0
 800a806:	2b01      	cmp	r3, #1
 800a808:	d151      	bne.n	800a8ae <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800a80a:	2300      	movs	r3, #0
 800a80c:	73fb      	strb	r3, [r7, #15]
 800a80e:	e00d      	b.n	800a82c <USER_SPI_initialize+0xa0>
 800a810:	7bfc      	ldrb	r4, [r7, #15]
 800a812:	20ff      	movs	r0, #255	; 0xff
 800a814:	f7ff fe54 	bl	800a4c0 <xchg_spi>
 800a818:	4603      	mov	r3, r0
 800a81a:	461a      	mov	r2, r3
 800a81c:	f107 0310 	add.w	r3, r7, #16
 800a820:	4423      	add	r3, r4
 800a822:	f803 2c08 	strb.w	r2, [r3, #-8]
 800a826:	7bfb      	ldrb	r3, [r7, #15]
 800a828:	3301      	adds	r3, #1
 800a82a:	73fb      	strb	r3, [r7, #15]
 800a82c:	7bfb      	ldrb	r3, [r7, #15]
 800a82e:	2b03      	cmp	r3, #3
 800a830:	d9ee      	bls.n	800a810 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800a832:	7abb      	ldrb	r3, [r7, #10]
 800a834:	2b01      	cmp	r3, #1
 800a836:	d167      	bne.n	800a908 <USER_SPI_initialize+0x17c>
 800a838:	7afb      	ldrb	r3, [r7, #11]
 800a83a:	2baa      	cmp	r3, #170	; 0xaa
 800a83c:	d164      	bne.n	800a908 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800a83e:	bf00      	nop
 800a840:	f7ff fe28 	bl	800a494 <SPI_Timer_Status>
 800a844:	4603      	mov	r3, r0
 800a846:	2b00      	cmp	r3, #0
 800a848:	d007      	beq.n	800a85a <USER_SPI_initialize+0xce>
 800a84a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a84e:	20a9      	movs	r0, #169	; 0xa9
 800a850:	f7ff ff2d 	bl	800a6ae <send_cmd>
 800a854:	4603      	mov	r3, r0
 800a856:	2b00      	cmp	r3, #0
 800a858:	d1f2      	bne.n	800a840 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800a85a:	f7ff fe1b 	bl	800a494 <SPI_Timer_Status>
 800a85e:	4603      	mov	r3, r0
 800a860:	2b00      	cmp	r3, #0
 800a862:	d051      	beq.n	800a908 <USER_SPI_initialize+0x17c>
 800a864:	2100      	movs	r1, #0
 800a866:	203a      	movs	r0, #58	; 0x3a
 800a868:	f7ff ff21 	bl	800a6ae <send_cmd>
 800a86c:	4603      	mov	r3, r0
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d14a      	bne.n	800a908 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800a872:	2300      	movs	r3, #0
 800a874:	73fb      	strb	r3, [r7, #15]
 800a876:	e00d      	b.n	800a894 <USER_SPI_initialize+0x108>
 800a878:	7bfc      	ldrb	r4, [r7, #15]
 800a87a:	20ff      	movs	r0, #255	; 0xff
 800a87c:	f7ff fe20 	bl	800a4c0 <xchg_spi>
 800a880:	4603      	mov	r3, r0
 800a882:	461a      	mov	r2, r3
 800a884:	f107 0310 	add.w	r3, r7, #16
 800a888:	4423      	add	r3, r4
 800a88a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800a88e:	7bfb      	ldrb	r3, [r7, #15]
 800a890:	3301      	adds	r3, #1
 800a892:	73fb      	strb	r3, [r7, #15]
 800a894:	7bfb      	ldrb	r3, [r7, #15]
 800a896:	2b03      	cmp	r3, #3
 800a898:	d9ee      	bls.n	800a878 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800a89a:	7a3b      	ldrb	r3, [r7, #8]
 800a89c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d001      	beq.n	800a8a8 <USER_SPI_initialize+0x11c>
 800a8a4:	230c      	movs	r3, #12
 800a8a6:	e000      	b.n	800a8aa <USER_SPI_initialize+0x11e>
 800a8a8:	2304      	movs	r3, #4
 800a8aa:	737b      	strb	r3, [r7, #13]
 800a8ac:	e02c      	b.n	800a908 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800a8ae:	2100      	movs	r1, #0
 800a8b0:	20a9      	movs	r0, #169	; 0xa9
 800a8b2:	f7ff fefc 	bl	800a6ae <send_cmd>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d804      	bhi.n	800a8c6 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800a8bc:	2302      	movs	r3, #2
 800a8be:	737b      	strb	r3, [r7, #13]
 800a8c0:	23a9      	movs	r3, #169	; 0xa9
 800a8c2:	73bb      	strb	r3, [r7, #14]
 800a8c4:	e003      	b.n	800a8ce <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	737b      	strb	r3, [r7, #13]
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800a8ce:	bf00      	nop
 800a8d0:	f7ff fde0 	bl	800a494 <SPI_Timer_Status>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d007      	beq.n	800a8ea <USER_SPI_initialize+0x15e>
 800a8da:	7bbb      	ldrb	r3, [r7, #14]
 800a8dc:	2100      	movs	r1, #0
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f7ff fee5 	bl	800a6ae <send_cmd>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d1f2      	bne.n	800a8d0 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800a8ea:	f7ff fdd3 	bl	800a494 <SPI_Timer_Status>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d007      	beq.n	800a904 <USER_SPI_initialize+0x178>
 800a8f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a8f8:	2010      	movs	r0, #16
 800a8fa:	f7ff fed8 	bl	800a6ae <send_cmd>
 800a8fe:	4603      	mov	r3, r0
 800a900:	2b00      	cmp	r3, #0
 800a902:	d001      	beq.n	800a908 <USER_SPI_initialize+0x17c>
				ty = 0;
 800a904:	2300      	movs	r3, #0
 800a906:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800a908:	4a14      	ldr	r2, [pc, #80]	; (800a95c <USER_SPI_initialize+0x1d0>)
 800a90a:	7b7b      	ldrb	r3, [r7, #13]
 800a90c:	7013      	strb	r3, [r2, #0]
	despiselect();
 800a90e:	f7ff fe47 	bl	800a5a0 <despiselect>

	if (ty) {			/* OK */
 800a912:	7b7b      	ldrb	r3, [r7, #13]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d012      	beq.n	800a93e <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 800a918:	4b0f      	ldr	r3, [pc, #60]	; (800a958 <USER_SPI_initialize+0x1cc>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a922:	4b0d      	ldr	r3, [pc, #52]	; (800a958 <USER_SPI_initialize+0x1cc>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f042 0218 	orr.w	r2, r2, #24
 800a92a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800a92c:	4b09      	ldr	r3, [pc, #36]	; (800a954 <USER_SPI_initialize+0x1c8>)
 800a92e:	781b      	ldrb	r3, [r3, #0]
 800a930:	b2db      	uxtb	r3, r3
 800a932:	f023 0301 	bic.w	r3, r3, #1
 800a936:	b2da      	uxtb	r2, r3
 800a938:	4b06      	ldr	r3, [pc, #24]	; (800a954 <USER_SPI_initialize+0x1c8>)
 800a93a:	701a      	strb	r2, [r3, #0]
 800a93c:	e002      	b.n	800a944 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800a93e:	4b05      	ldr	r3, [pc, #20]	; (800a954 <USER_SPI_initialize+0x1c8>)
 800a940:	2201      	movs	r2, #1
 800a942:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800a944:	4b03      	ldr	r3, [pc, #12]	; (800a954 <USER_SPI_initialize+0x1c8>)
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	b2db      	uxtb	r3, r3
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3714      	adds	r7, #20
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd90      	pop	{r4, r7, pc}
 800a952:	bf00      	nop
 800a954:	20000020 	.word	0x20000020
 800a958:	20000c9c 	.word	0x20000c9c
 800a95c:	200008d0 	.word	0x200008d0

0800a960 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800a960:	b480      	push	{r7}
 800a962:	b083      	sub	sp, #12
 800a964:	af00      	add	r7, sp, #0
 800a966:	4603      	mov	r3, r0
 800a968:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800a96a:	79fb      	ldrb	r3, [r7, #7]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d001      	beq.n	800a974 <USER_SPI_status+0x14>
 800a970:	2301      	movs	r3, #1
 800a972:	e002      	b.n	800a97a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800a974:	4b04      	ldr	r3, [pc, #16]	; (800a988 <USER_SPI_status+0x28>)
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	b2db      	uxtb	r3, r3
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	370c      	adds	r7, #12
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr
 800a986:	bf00      	nop
 800a988:	20000020 	.word	0x20000020

0800a98c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0
 800a992:	60b9      	str	r1, [r7, #8]
 800a994:	607a      	str	r2, [r7, #4]
 800a996:	603b      	str	r3, [r7, #0]
 800a998:	4603      	mov	r3, r0
 800a99a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a99c:	7bfb      	ldrb	r3, [r7, #15]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d102      	bne.n	800a9a8 <USER_SPI_read+0x1c>
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d101      	bne.n	800a9ac <USER_SPI_read+0x20>
 800a9a8:	2304      	movs	r3, #4
 800a9aa:	e04d      	b.n	800aa48 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800a9ac:	4b28      	ldr	r3, [pc, #160]	; (800aa50 <USER_SPI_read+0xc4>)
 800a9ae:	781b      	ldrb	r3, [r3, #0]
 800a9b0:	b2db      	uxtb	r3, r3
 800a9b2:	f003 0301 	and.w	r3, r3, #1
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d001      	beq.n	800a9be <USER_SPI_read+0x32>
 800a9ba:	2303      	movs	r3, #3
 800a9bc:	e044      	b.n	800aa48 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800a9be:	4b25      	ldr	r3, [pc, #148]	; (800aa54 <USER_SPI_read+0xc8>)
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	f003 0308 	and.w	r3, r3, #8
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d102      	bne.n	800a9d0 <USER_SPI_read+0x44>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	025b      	lsls	r3, r3, #9
 800a9ce:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	2b01      	cmp	r3, #1
 800a9d4:	d111      	bne.n	800a9fa <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800a9d6:	6879      	ldr	r1, [r7, #4]
 800a9d8:	2011      	movs	r0, #17
 800a9da:	f7ff fe68 	bl	800a6ae <send_cmd>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d129      	bne.n	800aa38 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800a9e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a9e8:	68b8      	ldr	r0, [r7, #8]
 800a9ea:	f7ff fe05 	bl	800a5f8 <rcvr_datablock>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d021      	beq.n	800aa38 <USER_SPI_read+0xac>
			count = 0;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	603b      	str	r3, [r7, #0]
 800a9f8:	e01e      	b.n	800aa38 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800a9fa:	6879      	ldr	r1, [r7, #4]
 800a9fc:	2012      	movs	r0, #18
 800a9fe:	f7ff fe56 	bl	800a6ae <send_cmd>
 800aa02:	4603      	mov	r3, r0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d117      	bne.n	800aa38 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800aa08:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aa0c:	68b8      	ldr	r0, [r7, #8]
 800aa0e:	f7ff fdf3 	bl	800a5f8 <rcvr_datablock>
 800aa12:	4603      	mov	r3, r0
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d00a      	beq.n	800aa2e <USER_SPI_read+0xa2>
				buff += 512;
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800aa1e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	3b01      	subs	r3, #1
 800aa24:	603b      	str	r3, [r7, #0]
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d1ed      	bne.n	800aa08 <USER_SPI_read+0x7c>
 800aa2c:	e000      	b.n	800aa30 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800aa2e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800aa30:	2100      	movs	r1, #0
 800aa32:	200c      	movs	r0, #12
 800aa34:	f7ff fe3b 	bl	800a6ae <send_cmd>
		}
	}
	despiselect();
 800aa38:	f7ff fdb2 	bl	800a5a0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	bf14      	ite	ne
 800aa42:	2301      	movne	r3, #1
 800aa44:	2300      	moveq	r3, #0
 800aa46:	b2db      	uxtb	r3, r3
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3710      	adds	r7, #16
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	20000020 	.word	0x20000020
 800aa54:	200008d0 	.word	0x200008d0

0800aa58 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b084      	sub	sp, #16
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	60b9      	str	r1, [r7, #8]
 800aa60:	607a      	str	r2, [r7, #4]
 800aa62:	603b      	str	r3, [r7, #0]
 800aa64:	4603      	mov	r3, r0
 800aa66:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800aa68:	7bfb      	ldrb	r3, [r7, #15]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d102      	bne.n	800aa74 <USER_SPI_write+0x1c>
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d101      	bne.n	800aa78 <USER_SPI_write+0x20>
 800aa74:	2304      	movs	r3, #4
 800aa76:	e063      	b.n	800ab40 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800aa78:	4b33      	ldr	r3, [pc, #204]	; (800ab48 <USER_SPI_write+0xf0>)
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	f003 0301 	and.w	r3, r3, #1
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d001      	beq.n	800aa8a <USER_SPI_write+0x32>
 800aa86:	2303      	movs	r3, #3
 800aa88:	e05a      	b.n	800ab40 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800aa8a:	4b2f      	ldr	r3, [pc, #188]	; (800ab48 <USER_SPI_write+0xf0>)
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	f003 0304 	and.w	r3, r3, #4
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d001      	beq.n	800aa9c <USER_SPI_write+0x44>
 800aa98:	2302      	movs	r3, #2
 800aa9a:	e051      	b.n	800ab40 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800aa9c:	4b2b      	ldr	r3, [pc, #172]	; (800ab4c <USER_SPI_write+0xf4>)
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	f003 0308 	and.w	r3, r3, #8
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d102      	bne.n	800aaae <USER_SPI_write+0x56>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	025b      	lsls	r3, r3, #9
 800aaac:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d110      	bne.n	800aad6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800aab4:	6879      	ldr	r1, [r7, #4]
 800aab6:	2018      	movs	r0, #24
 800aab8:	f7ff fdf9 	bl	800a6ae <send_cmd>
 800aabc:	4603      	mov	r3, r0
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d136      	bne.n	800ab30 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800aac2:	21fe      	movs	r1, #254	; 0xfe
 800aac4:	68b8      	ldr	r0, [r7, #8]
 800aac6:	f7ff fdc0 	bl	800a64a <xmit_datablock>
 800aaca:	4603      	mov	r3, r0
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d02f      	beq.n	800ab30 <USER_SPI_write+0xd8>
			count = 0;
 800aad0:	2300      	movs	r3, #0
 800aad2:	603b      	str	r3, [r7, #0]
 800aad4:	e02c      	b.n	800ab30 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800aad6:	4b1d      	ldr	r3, [pc, #116]	; (800ab4c <USER_SPI_write+0xf4>)
 800aad8:	781b      	ldrb	r3, [r3, #0]
 800aada:	f003 0306 	and.w	r3, r3, #6
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d003      	beq.n	800aaea <USER_SPI_write+0x92>
 800aae2:	6839      	ldr	r1, [r7, #0]
 800aae4:	2097      	movs	r0, #151	; 0x97
 800aae6:	f7ff fde2 	bl	800a6ae <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800aaea:	6879      	ldr	r1, [r7, #4]
 800aaec:	2019      	movs	r0, #25
 800aaee:	f7ff fdde 	bl	800a6ae <send_cmd>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d11b      	bne.n	800ab30 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800aaf8:	21fc      	movs	r1, #252	; 0xfc
 800aafa:	68b8      	ldr	r0, [r7, #8]
 800aafc:	f7ff fda5 	bl	800a64a <xmit_datablock>
 800ab00:	4603      	mov	r3, r0
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d00a      	beq.n	800ab1c <USER_SPI_write+0xc4>
				buff += 512;
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ab0c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	3b01      	subs	r3, #1
 800ab12:	603b      	str	r3, [r7, #0]
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d1ee      	bne.n	800aaf8 <USER_SPI_write+0xa0>
 800ab1a:	e000      	b.n	800ab1e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800ab1c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800ab1e:	21fd      	movs	r1, #253	; 0xfd
 800ab20:	2000      	movs	r0, #0
 800ab22:	f7ff fd92 	bl	800a64a <xmit_datablock>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d101      	bne.n	800ab30 <USER_SPI_write+0xd8>
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800ab30:	f7ff fd36 	bl	800a5a0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	bf14      	ite	ne
 800ab3a:	2301      	movne	r3, #1
 800ab3c:	2300      	moveq	r3, #0
 800ab3e:	b2db      	uxtb	r3, r3
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3710      	adds	r7, #16
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}
 800ab48:	20000020 	.word	0x20000020
 800ab4c:	200008d0 	.word	0x200008d0

0800ab50 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b08c      	sub	sp, #48	; 0x30
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	4603      	mov	r3, r0
 800ab58:	603a      	str	r2, [r7, #0]
 800ab5a:	71fb      	strb	r3, [r7, #7]
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800ab60:	79fb      	ldrb	r3, [r7, #7]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d001      	beq.n	800ab6a <USER_SPI_ioctl+0x1a>
 800ab66:	2304      	movs	r3, #4
 800ab68:	e15a      	b.n	800ae20 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800ab6a:	4baf      	ldr	r3, [pc, #700]	; (800ae28 <USER_SPI_ioctl+0x2d8>)
 800ab6c:	781b      	ldrb	r3, [r3, #0]
 800ab6e:	b2db      	uxtb	r3, r3
 800ab70:	f003 0301 	and.w	r3, r3, #1
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d001      	beq.n	800ab7c <USER_SPI_ioctl+0x2c>
 800ab78:	2303      	movs	r3, #3
 800ab7a:	e151      	b.n	800ae20 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800ab82:	79bb      	ldrb	r3, [r7, #6]
 800ab84:	2b04      	cmp	r3, #4
 800ab86:	f200 8136 	bhi.w	800adf6 <USER_SPI_ioctl+0x2a6>
 800ab8a:	a201      	add	r2, pc, #4	; (adr r2, 800ab90 <USER_SPI_ioctl+0x40>)
 800ab8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab90:	0800aba5 	.word	0x0800aba5
 800ab94:	0800abb9 	.word	0x0800abb9
 800ab98:	0800adf7 	.word	0x0800adf7
 800ab9c:	0800ac65 	.word	0x0800ac65
 800aba0:	0800ad5b 	.word	0x0800ad5b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800aba4:	f7ff fd0c 	bl	800a5c0 <spiselect>
 800aba8:	4603      	mov	r3, r0
 800abaa:	2b00      	cmp	r3, #0
 800abac:	f000 8127 	beq.w	800adfe <USER_SPI_ioctl+0x2ae>
 800abb0:	2300      	movs	r3, #0
 800abb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800abb6:	e122      	b.n	800adfe <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800abb8:	2100      	movs	r1, #0
 800abba:	2009      	movs	r0, #9
 800abbc:	f7ff fd77 	bl	800a6ae <send_cmd>
 800abc0:	4603      	mov	r3, r0
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	f040 811d 	bne.w	800ae02 <USER_SPI_ioctl+0x2b2>
 800abc8:	f107 030c 	add.w	r3, r7, #12
 800abcc:	2110      	movs	r1, #16
 800abce:	4618      	mov	r0, r3
 800abd0:	f7ff fd12 	bl	800a5f8 <rcvr_datablock>
 800abd4:	4603      	mov	r3, r0
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	f000 8113 	beq.w	800ae02 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800abdc:	7b3b      	ldrb	r3, [r7, #12]
 800abde:	099b      	lsrs	r3, r3, #6
 800abe0:	b2db      	uxtb	r3, r3
 800abe2:	2b01      	cmp	r3, #1
 800abe4:	d111      	bne.n	800ac0a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800abe6:	7d7b      	ldrb	r3, [r7, #21]
 800abe8:	461a      	mov	r2, r3
 800abea:	7d3b      	ldrb	r3, [r7, #20]
 800abec:	021b      	lsls	r3, r3, #8
 800abee:	4413      	add	r3, r2
 800abf0:	461a      	mov	r2, r3
 800abf2:	7cfb      	ldrb	r3, [r7, #19]
 800abf4:	041b      	lsls	r3, r3, #16
 800abf6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800abfa:	4413      	add	r3, r2
 800abfc:	3301      	adds	r3, #1
 800abfe:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800ac00:	69fb      	ldr	r3, [r7, #28]
 800ac02:	029a      	lsls	r2, r3, #10
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	601a      	str	r2, [r3, #0]
 800ac08:	e028      	b.n	800ac5c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800ac0a:	7c7b      	ldrb	r3, [r7, #17]
 800ac0c:	f003 030f 	and.w	r3, r3, #15
 800ac10:	b2da      	uxtb	r2, r3
 800ac12:	7dbb      	ldrb	r3, [r7, #22]
 800ac14:	09db      	lsrs	r3, r3, #7
 800ac16:	b2db      	uxtb	r3, r3
 800ac18:	4413      	add	r3, r2
 800ac1a:	b2da      	uxtb	r2, r3
 800ac1c:	7d7b      	ldrb	r3, [r7, #21]
 800ac1e:	005b      	lsls	r3, r3, #1
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	f003 0306 	and.w	r3, r3, #6
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	4413      	add	r3, r2
 800ac2a:	b2db      	uxtb	r3, r3
 800ac2c:	3302      	adds	r3, #2
 800ac2e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800ac32:	7d3b      	ldrb	r3, [r7, #20]
 800ac34:	099b      	lsrs	r3, r3, #6
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	461a      	mov	r2, r3
 800ac3a:	7cfb      	ldrb	r3, [r7, #19]
 800ac3c:	009b      	lsls	r3, r3, #2
 800ac3e:	441a      	add	r2, r3
 800ac40:	7cbb      	ldrb	r3, [r7, #18]
 800ac42:	029b      	lsls	r3, r3, #10
 800ac44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ac48:	4413      	add	r3, r2
 800ac4a:	3301      	adds	r3, #1
 800ac4c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800ac4e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ac52:	3b09      	subs	r3, #9
 800ac54:	69fa      	ldr	r2, [r7, #28]
 800ac56:	409a      	lsls	r2, r3
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800ac62:	e0ce      	b.n	800ae02 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800ac64:	4b71      	ldr	r3, [pc, #452]	; (800ae2c <USER_SPI_ioctl+0x2dc>)
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	f003 0304 	and.w	r3, r3, #4
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d031      	beq.n	800acd4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800ac70:	2100      	movs	r1, #0
 800ac72:	208d      	movs	r0, #141	; 0x8d
 800ac74:	f7ff fd1b 	bl	800a6ae <send_cmd>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	f040 80c3 	bne.w	800ae06 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800ac80:	20ff      	movs	r0, #255	; 0xff
 800ac82:	f7ff fc1d 	bl	800a4c0 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800ac86:	f107 030c 	add.w	r3, r7, #12
 800ac8a:	2110      	movs	r1, #16
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f7ff fcb3 	bl	800a5f8 <rcvr_datablock>
 800ac92:	4603      	mov	r3, r0
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	f000 80b6 	beq.w	800ae06 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800ac9a:	2330      	movs	r3, #48	; 0x30
 800ac9c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800aca0:	e007      	b.n	800acb2 <USER_SPI_ioctl+0x162>
 800aca2:	20ff      	movs	r0, #255	; 0xff
 800aca4:	f7ff fc0c 	bl	800a4c0 <xchg_spi>
 800aca8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800acac:	3b01      	subs	r3, #1
 800acae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800acb2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d1f3      	bne.n	800aca2 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800acba:	7dbb      	ldrb	r3, [r7, #22]
 800acbc:	091b      	lsrs	r3, r3, #4
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	461a      	mov	r2, r3
 800acc2:	2310      	movs	r3, #16
 800acc4:	fa03 f202 	lsl.w	r2, r3, r2
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800accc:	2300      	movs	r3, #0
 800acce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800acd2:	e098      	b.n	800ae06 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800acd4:	2100      	movs	r1, #0
 800acd6:	2009      	movs	r0, #9
 800acd8:	f7ff fce9 	bl	800a6ae <send_cmd>
 800acdc:	4603      	mov	r3, r0
 800acde:	2b00      	cmp	r3, #0
 800ace0:	f040 8091 	bne.w	800ae06 <USER_SPI_ioctl+0x2b6>
 800ace4:	f107 030c 	add.w	r3, r7, #12
 800ace8:	2110      	movs	r1, #16
 800acea:	4618      	mov	r0, r3
 800acec:	f7ff fc84 	bl	800a5f8 <rcvr_datablock>
 800acf0:	4603      	mov	r3, r0
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	f000 8087 	beq.w	800ae06 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800acf8:	4b4c      	ldr	r3, [pc, #304]	; (800ae2c <USER_SPI_ioctl+0x2dc>)
 800acfa:	781b      	ldrb	r3, [r3, #0]
 800acfc:	f003 0302 	and.w	r3, r3, #2
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d012      	beq.n	800ad2a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800ad04:	7dbb      	ldrb	r3, [r7, #22]
 800ad06:	005b      	lsls	r3, r3, #1
 800ad08:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800ad0c:	7dfa      	ldrb	r2, [r7, #23]
 800ad0e:	09d2      	lsrs	r2, r2, #7
 800ad10:	b2d2      	uxtb	r2, r2
 800ad12:	4413      	add	r3, r2
 800ad14:	1c5a      	adds	r2, r3, #1
 800ad16:	7e7b      	ldrb	r3, [r7, #25]
 800ad18:	099b      	lsrs	r3, r3, #6
 800ad1a:	b2db      	uxtb	r3, r3
 800ad1c:	3b01      	subs	r3, #1
 800ad1e:	fa02 f303 	lsl.w	r3, r2, r3
 800ad22:	461a      	mov	r2, r3
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	601a      	str	r2, [r3, #0]
 800ad28:	e013      	b.n	800ad52 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800ad2a:	7dbb      	ldrb	r3, [r7, #22]
 800ad2c:	109b      	asrs	r3, r3, #2
 800ad2e:	b29b      	uxth	r3, r3
 800ad30:	f003 031f 	and.w	r3, r3, #31
 800ad34:	3301      	adds	r3, #1
 800ad36:	7dfa      	ldrb	r2, [r7, #23]
 800ad38:	00d2      	lsls	r2, r2, #3
 800ad3a:	f002 0218 	and.w	r2, r2, #24
 800ad3e:	7df9      	ldrb	r1, [r7, #23]
 800ad40:	0949      	lsrs	r1, r1, #5
 800ad42:	b2c9      	uxtb	r1, r1
 800ad44:	440a      	add	r2, r1
 800ad46:	3201      	adds	r2, #1
 800ad48:	fb02 f303 	mul.w	r3, r2, r3
 800ad4c:	461a      	mov	r2, r3
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800ad52:	2300      	movs	r3, #0
 800ad54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800ad58:	e055      	b.n	800ae06 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800ad5a:	4b34      	ldr	r3, [pc, #208]	; (800ae2c <USER_SPI_ioctl+0x2dc>)
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	f003 0306 	and.w	r3, r3, #6
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d051      	beq.n	800ae0a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800ad66:	f107 020c 	add.w	r2, r7, #12
 800ad6a:	79fb      	ldrb	r3, [r7, #7]
 800ad6c:	210b      	movs	r1, #11
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f7ff feee 	bl	800ab50 <USER_SPI_ioctl>
 800ad74:	4603      	mov	r3, r0
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d149      	bne.n	800ae0e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800ad7a:	7b3b      	ldrb	r3, [r7, #12]
 800ad7c:	099b      	lsrs	r3, r3, #6
 800ad7e:	b2db      	uxtb	r3, r3
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d104      	bne.n	800ad8e <USER_SPI_ioctl+0x23e>
 800ad84:	7dbb      	ldrb	r3, [r7, #22]
 800ad86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d041      	beq.n	800ae12 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	623b      	str	r3, [r7, #32]
 800ad92:	6a3b      	ldr	r3, [r7, #32]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad98:	6a3b      	ldr	r3, [r7, #32]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800ad9e:	4b23      	ldr	r3, [pc, #140]	; (800ae2c <USER_SPI_ioctl+0x2dc>)
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	f003 0308 	and.w	r3, r3, #8
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d105      	bne.n	800adb6 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800adaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adac:	025b      	lsls	r3, r3, #9
 800adae:	62bb      	str	r3, [r7, #40]	; 0x28
 800adb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb2:	025b      	lsls	r3, r3, #9
 800adb4:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800adb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800adb8:	2020      	movs	r0, #32
 800adba:	f7ff fc78 	bl	800a6ae <send_cmd>
 800adbe:	4603      	mov	r3, r0
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d128      	bne.n	800ae16 <USER_SPI_ioctl+0x2c6>
 800adc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800adc6:	2021      	movs	r0, #33	; 0x21
 800adc8:	f7ff fc71 	bl	800a6ae <send_cmd>
 800adcc:	4603      	mov	r3, r0
 800adce:	2b00      	cmp	r3, #0
 800add0:	d121      	bne.n	800ae16 <USER_SPI_ioctl+0x2c6>
 800add2:	2100      	movs	r1, #0
 800add4:	2026      	movs	r0, #38	; 0x26
 800add6:	f7ff fc6a 	bl	800a6ae <send_cmd>
 800adda:	4603      	mov	r3, r0
 800addc:	2b00      	cmp	r3, #0
 800adde:	d11a      	bne.n	800ae16 <USER_SPI_ioctl+0x2c6>
 800ade0:	f247 5030 	movw	r0, #30000	; 0x7530
 800ade4:	f7ff fbb9 	bl	800a55a <wait_ready>
 800ade8:	4603      	mov	r3, r0
 800adea:	2b00      	cmp	r3, #0
 800adec:	d013      	beq.n	800ae16 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800adee:	2300      	movs	r3, #0
 800adf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800adf4:	e00f      	b.n	800ae16 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800adf6:	2304      	movs	r3, #4
 800adf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800adfc:	e00c      	b.n	800ae18 <USER_SPI_ioctl+0x2c8>
		break;
 800adfe:	bf00      	nop
 800ae00:	e00a      	b.n	800ae18 <USER_SPI_ioctl+0x2c8>
		break;
 800ae02:	bf00      	nop
 800ae04:	e008      	b.n	800ae18 <USER_SPI_ioctl+0x2c8>
		break;
 800ae06:	bf00      	nop
 800ae08:	e006      	b.n	800ae18 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800ae0a:	bf00      	nop
 800ae0c:	e004      	b.n	800ae18 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800ae0e:	bf00      	nop
 800ae10:	e002      	b.n	800ae18 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800ae12:	bf00      	nop
 800ae14:	e000      	b.n	800ae18 <USER_SPI_ioctl+0x2c8>
		break;
 800ae16:	bf00      	nop
	}

	despiselect();
 800ae18:	f7ff fbc2 	bl	800a5a0 <despiselect>

	return res;
 800ae1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3730      	adds	r7, #48	; 0x30
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}
 800ae28:	20000020 	.word	0x20000020
 800ae2c:	200008d0 	.word	0x200008d0

0800ae30 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	460b      	mov	r3, r1
 800ae3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ae3c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ae40:	f004 fe6a 	bl	800fb18 <USBD_static_malloc>
 800ae44:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d105      	bne.n	800ae58 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800ae54:	2302      	movs	r3, #2
 800ae56:	e066      	b.n	800af26 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	68fa      	ldr	r2, [r7, #12]
 800ae5c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	7c1b      	ldrb	r3, [r3, #16]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d119      	bne.n	800ae9c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ae68:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae6c:	2202      	movs	r2, #2
 800ae6e:	2181      	movs	r1, #129	; 0x81
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f004 fd2e 	bl	800f8d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2201      	movs	r2, #1
 800ae7a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ae7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae80:	2202      	movs	r2, #2
 800ae82:	2101      	movs	r1, #1
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f004 fd24 	bl	800f8d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2210      	movs	r2, #16
 800ae96:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800ae9a:	e016      	b.n	800aeca <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ae9c:	2340      	movs	r3, #64	; 0x40
 800ae9e:	2202      	movs	r2, #2
 800aea0:	2181      	movs	r1, #129	; 0x81
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f004 fd15 	bl	800f8d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2201      	movs	r2, #1
 800aeac:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800aeae:	2340      	movs	r3, #64	; 0x40
 800aeb0:	2202      	movs	r2, #2
 800aeb2:	2101      	movs	r1, #1
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f004 fd0c 	bl	800f8d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2201      	movs	r2, #1
 800aebe:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2210      	movs	r2, #16
 800aec6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800aeca:	2308      	movs	r3, #8
 800aecc:	2203      	movs	r2, #3
 800aece:	2182      	movs	r1, #130	; 0x82
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f004 fcfe 	bl	800f8d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2201      	movs	r2, #1
 800aeda:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2200      	movs	r2, #0
 800aeec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2200      	movs	r2, #0
 800aef4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	7c1b      	ldrb	r3, [r3, #16]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d109      	bne.n	800af14 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800af06:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af0a:	2101      	movs	r1, #1
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f004 fdcf 	bl	800fab0 <USBD_LL_PrepareReceive>
 800af12:	e007      	b.n	800af24 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800af1a:	2340      	movs	r3, #64	; 0x40
 800af1c:	2101      	movs	r1, #1
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f004 fdc6 	bl	800fab0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800af24:	2300      	movs	r3, #0
}
 800af26:	4618      	mov	r0, r3
 800af28:	3710      	adds	r7, #16
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}

0800af2e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af2e:	b580      	push	{r7, lr}
 800af30:	b082      	sub	sp, #8
 800af32:	af00      	add	r7, sp, #0
 800af34:	6078      	str	r0, [r7, #4]
 800af36:	460b      	mov	r3, r1
 800af38:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800af3a:	2181      	movs	r1, #129	; 0x81
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f004 fcee 	bl	800f91e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2200      	movs	r2, #0
 800af46:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800af48:	2101      	movs	r1, #1
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f004 fce7 	bl	800f91e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2200      	movs	r2, #0
 800af54:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800af58:	2182      	movs	r1, #130	; 0x82
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f004 fcdf 	bl	800f91e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2200      	movs	r2, #0
 800af64:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2200      	movs	r2, #0
 800af6c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af76:	2b00      	cmp	r3, #0
 800af78:	d00e      	beq.n	800af98 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af8a:	4618      	mov	r0, r3
 800af8c:	f004 fdd2 	bl	800fb34 <USBD_static_free>
    pdev->pClassData = NULL;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2200      	movs	r2, #0
 800af94:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800af98:	2300      	movs	r3, #0
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3708      	adds	r7, #8
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}
	...

0800afa4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b086      	sub	sp, #24
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800afb4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800afb6:	2300      	movs	r3, #0
 800afb8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800afba:	2300      	movs	r3, #0
 800afbc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800afbe:	2300      	movs	r3, #0
 800afc0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d101      	bne.n	800afcc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800afc8:	2303      	movs	r3, #3
 800afca:	e0af      	b.n	800b12c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d03f      	beq.n	800b058 <USBD_CDC_Setup+0xb4>
 800afd8:	2b20      	cmp	r3, #32
 800afda:	f040 809f 	bne.w	800b11c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	88db      	ldrh	r3, [r3, #6]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d02e      	beq.n	800b044 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	b25b      	sxtb	r3, r3
 800afec:	2b00      	cmp	r3, #0
 800afee:	da16      	bge.n	800b01e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aff6:	689b      	ldr	r3, [r3, #8]
 800aff8:	683a      	ldr	r2, [r7, #0]
 800affa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800affc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800affe:	683a      	ldr	r2, [r7, #0]
 800b000:	88d2      	ldrh	r2, [r2, #6]
 800b002:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	88db      	ldrh	r3, [r3, #6]
 800b008:	2b07      	cmp	r3, #7
 800b00a:	bf28      	it	cs
 800b00c:	2307      	movcs	r3, #7
 800b00e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	89fa      	ldrh	r2, [r7, #14]
 800b014:	4619      	mov	r1, r3
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f001 fae9 	bl	800c5ee <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b01c:	e085      	b.n	800b12a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	785a      	ldrb	r2, [r3, #1]
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	88db      	ldrh	r3, [r3, #6]
 800b02c:	b2da      	uxtb	r2, r3
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b034:	6939      	ldr	r1, [r7, #16]
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	88db      	ldrh	r3, [r3, #6]
 800b03a:	461a      	mov	r2, r3
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f001 fb02 	bl	800c646 <USBD_CtlPrepareRx>
      break;
 800b042:	e072      	b.n	800b12a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b04a:	689b      	ldr	r3, [r3, #8]
 800b04c:	683a      	ldr	r2, [r7, #0]
 800b04e:	7850      	ldrb	r0, [r2, #1]
 800b050:	2200      	movs	r2, #0
 800b052:	6839      	ldr	r1, [r7, #0]
 800b054:	4798      	blx	r3
      break;
 800b056:	e068      	b.n	800b12a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	785b      	ldrb	r3, [r3, #1]
 800b05c:	2b0b      	cmp	r3, #11
 800b05e:	d852      	bhi.n	800b106 <USBD_CDC_Setup+0x162>
 800b060:	a201      	add	r2, pc, #4	; (adr r2, 800b068 <USBD_CDC_Setup+0xc4>)
 800b062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b066:	bf00      	nop
 800b068:	0800b099 	.word	0x0800b099
 800b06c:	0800b115 	.word	0x0800b115
 800b070:	0800b107 	.word	0x0800b107
 800b074:	0800b107 	.word	0x0800b107
 800b078:	0800b107 	.word	0x0800b107
 800b07c:	0800b107 	.word	0x0800b107
 800b080:	0800b107 	.word	0x0800b107
 800b084:	0800b107 	.word	0x0800b107
 800b088:	0800b107 	.word	0x0800b107
 800b08c:	0800b107 	.word	0x0800b107
 800b090:	0800b0c3 	.word	0x0800b0c3
 800b094:	0800b0ed 	.word	0x0800b0ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	2b03      	cmp	r3, #3
 800b0a2:	d107      	bne.n	800b0b4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b0a4:	f107 030a 	add.w	r3, r7, #10
 800b0a8:	2202      	movs	r2, #2
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f001 fa9e 	bl	800c5ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b0b2:	e032      	b.n	800b11a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b0b4:	6839      	ldr	r1, [r7, #0]
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f001 fa28 	bl	800c50c <USBD_CtlError>
            ret = USBD_FAIL;
 800b0bc:	2303      	movs	r3, #3
 800b0be:	75fb      	strb	r3, [r7, #23]
          break;
 800b0c0:	e02b      	b.n	800b11a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0c8:	b2db      	uxtb	r3, r3
 800b0ca:	2b03      	cmp	r3, #3
 800b0cc:	d107      	bne.n	800b0de <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b0ce:	f107 030d 	add.w	r3, r7, #13
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f001 fa89 	bl	800c5ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b0dc:	e01d      	b.n	800b11a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b0de:	6839      	ldr	r1, [r7, #0]
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f001 fa13 	bl	800c50c <USBD_CtlError>
            ret = USBD_FAIL;
 800b0e6:	2303      	movs	r3, #3
 800b0e8:	75fb      	strb	r3, [r7, #23]
          break;
 800b0ea:	e016      	b.n	800b11a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0f2:	b2db      	uxtb	r3, r3
 800b0f4:	2b03      	cmp	r3, #3
 800b0f6:	d00f      	beq.n	800b118 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b0f8:	6839      	ldr	r1, [r7, #0]
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f001 fa06 	bl	800c50c <USBD_CtlError>
            ret = USBD_FAIL;
 800b100:	2303      	movs	r3, #3
 800b102:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b104:	e008      	b.n	800b118 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b106:	6839      	ldr	r1, [r7, #0]
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f001 f9ff 	bl	800c50c <USBD_CtlError>
          ret = USBD_FAIL;
 800b10e:	2303      	movs	r3, #3
 800b110:	75fb      	strb	r3, [r7, #23]
          break;
 800b112:	e002      	b.n	800b11a <USBD_CDC_Setup+0x176>
          break;
 800b114:	bf00      	nop
 800b116:	e008      	b.n	800b12a <USBD_CDC_Setup+0x186>
          break;
 800b118:	bf00      	nop
      }
      break;
 800b11a:	e006      	b.n	800b12a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b11c:	6839      	ldr	r1, [r7, #0]
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f001 f9f4 	bl	800c50c <USBD_CtlError>
      ret = USBD_FAIL;
 800b124:	2303      	movs	r3, #3
 800b126:	75fb      	strb	r3, [r7, #23]
      break;
 800b128:	bf00      	nop
  }

  return (uint8_t)ret;
 800b12a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3718      	adds	r7, #24
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b084      	sub	sp, #16
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	460b      	mov	r3, r1
 800b13e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b146:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d101      	bne.n	800b156 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b152:	2303      	movs	r3, #3
 800b154:	e04f      	b.n	800b1f6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b15c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b15e:	78fa      	ldrb	r2, [r7, #3]
 800b160:	6879      	ldr	r1, [r7, #4]
 800b162:	4613      	mov	r3, r2
 800b164:	009b      	lsls	r3, r3, #2
 800b166:	4413      	add	r3, r2
 800b168:	009b      	lsls	r3, r3, #2
 800b16a:	440b      	add	r3, r1
 800b16c:	3318      	adds	r3, #24
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d029      	beq.n	800b1c8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b174:	78fa      	ldrb	r2, [r7, #3]
 800b176:	6879      	ldr	r1, [r7, #4]
 800b178:	4613      	mov	r3, r2
 800b17a:	009b      	lsls	r3, r3, #2
 800b17c:	4413      	add	r3, r2
 800b17e:	009b      	lsls	r3, r3, #2
 800b180:	440b      	add	r3, r1
 800b182:	3318      	adds	r3, #24
 800b184:	681a      	ldr	r2, [r3, #0]
 800b186:	78f9      	ldrb	r1, [r7, #3]
 800b188:	68f8      	ldr	r0, [r7, #12]
 800b18a:	460b      	mov	r3, r1
 800b18c:	00db      	lsls	r3, r3, #3
 800b18e:	1a5b      	subs	r3, r3, r1
 800b190:	009b      	lsls	r3, r3, #2
 800b192:	4403      	add	r3, r0
 800b194:	3344      	adds	r3, #68	; 0x44
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	fbb2 f1f3 	udiv	r1, r2, r3
 800b19c:	fb03 f301 	mul.w	r3, r3, r1
 800b1a0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d110      	bne.n	800b1c8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b1a6:	78fa      	ldrb	r2, [r7, #3]
 800b1a8:	6879      	ldr	r1, [r7, #4]
 800b1aa:	4613      	mov	r3, r2
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	4413      	add	r3, r2
 800b1b0:	009b      	lsls	r3, r3, #2
 800b1b2:	440b      	add	r3, r1
 800b1b4:	3318      	adds	r3, #24
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b1ba:	78f9      	ldrb	r1, [r7, #3]
 800b1bc:	2300      	movs	r3, #0
 800b1be:	2200      	movs	r2, #0
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f004 fc54 	bl	800fa6e <USBD_LL_Transmit>
 800b1c6:	e015      	b.n	800b1f4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b1d6:	691b      	ldr	r3, [r3, #16]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d00b      	beq.n	800b1f4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b1e2:	691b      	ldr	r3, [r3, #16]
 800b1e4:	68ba      	ldr	r2, [r7, #8]
 800b1e6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b1ea:	68ba      	ldr	r2, [r7, #8]
 800b1ec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b1f0:	78fa      	ldrb	r2, [r7, #3]
 800b1f2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b1f4:	2300      	movs	r3, #0
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3710      	adds	r7, #16
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}

0800b1fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b1fe:	b580      	push	{r7, lr}
 800b200:	b084      	sub	sp, #16
 800b202:	af00      	add	r7, sp, #0
 800b204:	6078      	str	r0, [r7, #4]
 800b206:	460b      	mov	r3, r1
 800b208:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b210:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d101      	bne.n	800b220 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b21c:	2303      	movs	r3, #3
 800b21e:	e015      	b.n	800b24c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b220:	78fb      	ldrb	r3, [r7, #3]
 800b222:	4619      	mov	r1, r3
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f004 fc64 	bl	800faf2 <USBD_LL_GetRxDataSize>
 800b22a:	4602      	mov	r2, r0
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b238:	68db      	ldr	r3, [r3, #12]
 800b23a:	68fa      	ldr	r2, [r7, #12]
 800b23c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b240:	68fa      	ldr	r2, [r7, #12]
 800b242:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b246:	4611      	mov	r1, r2
 800b248:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b24a:	2300      	movs	r3, #0
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3710      	adds	r7, #16
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}

0800b254 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b084      	sub	sp, #16
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b262:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d101      	bne.n	800b26e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b26a:	2303      	movs	r3, #3
 800b26c:	e01b      	b.n	800b2a6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b274:	2b00      	cmp	r3, #0
 800b276:	d015      	beq.n	800b2a4 <USBD_CDC_EP0_RxReady+0x50>
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b27e:	2bff      	cmp	r3, #255	; 0xff
 800b280:	d010      	beq.n	800b2a4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b288:	689b      	ldr	r3, [r3, #8]
 800b28a:	68fa      	ldr	r2, [r7, #12]
 800b28c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b290:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b292:	68fa      	ldr	r2, [r7, #12]
 800b294:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b298:	b292      	uxth	r2, r2
 800b29a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	22ff      	movs	r2, #255	; 0xff
 800b2a0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b2a4:	2300      	movs	r3, #0
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3710      	adds	r7, #16
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
	...

0800b2b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b083      	sub	sp, #12
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2243      	movs	r2, #67	; 0x43
 800b2bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b2be:	4b03      	ldr	r3, [pc, #12]	; (800b2cc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	370c      	adds	r7, #12
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr
 800b2cc:	200000ac 	.word	0x200000ac

0800b2d0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b083      	sub	sp, #12
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2243      	movs	r2, #67	; 0x43
 800b2dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b2de:	4b03      	ldr	r3, [pc, #12]	; (800b2ec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	370c      	adds	r7, #12
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr
 800b2ec:	20000068 	.word	0x20000068

0800b2f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2243      	movs	r2, #67	; 0x43
 800b2fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b2fe:	4b03      	ldr	r3, [pc, #12]	; (800b30c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b300:	4618      	mov	r0, r3
 800b302:	370c      	adds	r7, #12
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr
 800b30c:	200000f0 	.word	0x200000f0

0800b310 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b310:	b480      	push	{r7}
 800b312:	b083      	sub	sp, #12
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	220a      	movs	r2, #10
 800b31c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b31e:	4b03      	ldr	r3, [pc, #12]	; (800b32c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b320:	4618      	mov	r0, r3
 800b322:	370c      	adds	r7, #12
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr
 800b32c:	20000024 	.word	0x20000024

0800b330 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b330:	b480      	push	{r7}
 800b332:	b083      	sub	sp, #12
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d101      	bne.n	800b344 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b340:	2303      	movs	r3, #3
 800b342:	e004      	b.n	800b34e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	683a      	ldr	r2, [r7, #0]
 800b348:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b34c:	2300      	movs	r3, #0
}
 800b34e:	4618      	mov	r0, r3
 800b350:	370c      	adds	r7, #12
 800b352:	46bd      	mov	sp, r7
 800b354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b358:	4770      	bx	lr

0800b35a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b35a:	b480      	push	{r7}
 800b35c:	b087      	sub	sp, #28
 800b35e:	af00      	add	r7, sp, #0
 800b360:	60f8      	str	r0, [r7, #12]
 800b362:	60b9      	str	r1, [r7, #8]
 800b364:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b36c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d101      	bne.n	800b378 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b374:	2303      	movs	r3, #3
 800b376:	e008      	b.n	800b38a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	68ba      	ldr	r2, [r7, #8]
 800b37c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	687a      	ldr	r2, [r7, #4]
 800b384:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b388:	2300      	movs	r3, #0
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	371c      	adds	r7, #28
 800b38e:	46bd      	mov	sp, r7
 800b390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b394:	4770      	bx	lr

0800b396 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b396:	b480      	push	{r7}
 800b398:	b085      	sub	sp, #20
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	6078      	str	r0, [r7, #4]
 800b39e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b3a6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d101      	bne.n	800b3b2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b3ae:	2303      	movs	r3, #3
 800b3b0:	e004      	b.n	800b3bc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	683a      	ldr	r2, [r7, #0]
 800b3b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b3ba:	2300      	movs	r3, #0
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3714      	adds	r7, #20
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c6:	4770      	bx	lr

0800b3c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b084      	sub	sp, #16
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b3d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d101      	bne.n	800b3e6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b3e2:	2303      	movs	r3, #3
 800b3e4:	e016      	b.n	800b414 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	7c1b      	ldrb	r3, [r3, #16]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d109      	bne.n	800b402 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b3f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3f8:	2101      	movs	r1, #1
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f004 fb58 	bl	800fab0 <USBD_LL_PrepareReceive>
 800b400:	e007      	b.n	800b412 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b408:	2340      	movs	r3, #64	; 0x40
 800b40a:	2101      	movs	r1, #1
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f004 fb4f 	bl	800fab0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b412:	2300      	movs	r3, #0
}
 800b414:	4618      	mov	r0, r3
 800b416:	3710      	adds	r7, #16
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}

0800b41c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b086      	sub	sp, #24
 800b420:	af00      	add	r7, sp, #0
 800b422:	60f8      	str	r0, [r7, #12]
 800b424:	60b9      	str	r1, [r7, #8]
 800b426:	4613      	mov	r3, r2
 800b428:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d101      	bne.n	800b434 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b430:	2303      	movs	r3, #3
 800b432:	e01f      	b.n	800b474 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2200      	movs	r2, #0
 800b438:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2200      	movs	r2, #0
 800b440:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	2200      	movs	r2, #0
 800b448:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d003      	beq.n	800b45a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	68ba      	ldr	r2, [r7, #8]
 800b456:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	2201      	movs	r2, #1
 800b45e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	79fa      	ldrb	r2, [r7, #7]
 800b466:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b468:	68f8      	ldr	r0, [r7, #12]
 800b46a:	f004 f9cb 	bl	800f804 <USBD_LL_Init>
 800b46e:	4603      	mov	r3, r0
 800b470:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b472:	7dfb      	ldrb	r3, [r7, #23]
}
 800b474:	4618      	mov	r0, r3
 800b476:	3718      	adds	r7, #24
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}

0800b47c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b084      	sub	sp, #16
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b486:	2300      	movs	r3, #0
 800b488:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d101      	bne.n	800b494 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b490:	2303      	movs	r3, #3
 800b492:	e016      	b.n	800b4c2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	683a      	ldr	r2, [r7, #0]
 800b498:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d00b      	beq.n	800b4c0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4b0:	f107 020e 	add.w	r2, r7, #14
 800b4b4:	4610      	mov	r0, r2
 800b4b6:	4798      	blx	r3
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b4c0:	2300      	movs	r3, #0
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3710      	adds	r7, #16
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}

0800b4ca <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b4ca:	b580      	push	{r7, lr}
 800b4cc:	b082      	sub	sp, #8
 800b4ce:	af00      	add	r7, sp, #0
 800b4d0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f004 f9e2 	bl	800f89c <USBD_LL_Start>
 800b4d8:	4603      	mov	r3, r0
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3708      	adds	r7, #8
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}

0800b4e2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b4e2:	b480      	push	{r7}
 800b4e4:	b083      	sub	sp, #12
 800b4e6:	af00      	add	r7, sp, #0
 800b4e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b4ea:	2300      	movs	r3, #0
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	370c      	adds	r7, #12
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr

0800b4f8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	460b      	mov	r3, r1
 800b502:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b504:	2303      	movs	r3, #3
 800b506:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d009      	beq.n	800b526 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	78fa      	ldrb	r2, [r7, #3]
 800b51c:	4611      	mov	r1, r2
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	4798      	blx	r3
 800b522:	4603      	mov	r3, r0
 800b524:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b526:	7bfb      	ldrb	r3, [r7, #15]
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3710      	adds	r7, #16
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b082      	sub	sp, #8
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	460b      	mov	r3, r1
 800b53a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b542:	2b00      	cmp	r3, #0
 800b544:	d007      	beq.n	800b556 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b54c:	685b      	ldr	r3, [r3, #4]
 800b54e:	78fa      	ldrb	r2, [r7, #3]
 800b550:	4611      	mov	r1, r2
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	4798      	blx	r3
  }

  return USBD_OK;
 800b556:	2300      	movs	r3, #0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3708      	adds	r7, #8
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b084      	sub	sp, #16
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b570:	6839      	ldr	r1, [r7, #0]
 800b572:	4618      	mov	r0, r3
 800b574:	f000 ff90 	bl	800c498 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2201      	movs	r2, #1
 800b57c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b586:	461a      	mov	r2, r3
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b594:	f003 031f 	and.w	r3, r3, #31
 800b598:	2b02      	cmp	r3, #2
 800b59a:	d01a      	beq.n	800b5d2 <USBD_LL_SetupStage+0x72>
 800b59c:	2b02      	cmp	r3, #2
 800b59e:	d822      	bhi.n	800b5e6 <USBD_LL_SetupStage+0x86>
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d002      	beq.n	800b5aa <USBD_LL_SetupStage+0x4a>
 800b5a4:	2b01      	cmp	r3, #1
 800b5a6:	d00a      	beq.n	800b5be <USBD_LL_SetupStage+0x5e>
 800b5a8:	e01d      	b.n	800b5e6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f000 fa62 	bl	800ba7c <USBD_StdDevReq>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	73fb      	strb	r3, [r7, #15]
      break;
 800b5bc:	e020      	b.n	800b600 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f000 fac6 	bl	800bb58 <USBD_StdItfReq>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	73fb      	strb	r3, [r7, #15]
      break;
 800b5d0:	e016      	b.n	800b600 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b5d8:	4619      	mov	r1, r3
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 fb05 	bl	800bbea <USBD_StdEPReq>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	73fb      	strb	r3, [r7, #15]
      break;
 800b5e4:	e00c      	b.n	800b600 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b5ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b5f0:	b2db      	uxtb	r3, r3
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f004 f9b1 	bl	800f95c <USBD_LL_StallEP>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	73fb      	strb	r3, [r7, #15]
      break;
 800b5fe:	bf00      	nop
  }

  return ret;
 800b600:	7bfb      	ldrb	r3, [r7, #15]
}
 800b602:	4618      	mov	r0, r3
 800b604:	3710      	adds	r7, #16
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}

0800b60a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b60a:	b580      	push	{r7, lr}
 800b60c:	b086      	sub	sp, #24
 800b60e:	af00      	add	r7, sp, #0
 800b610:	60f8      	str	r0, [r7, #12]
 800b612:	460b      	mov	r3, r1
 800b614:	607a      	str	r2, [r7, #4]
 800b616:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b618:	7afb      	ldrb	r3, [r7, #11]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d138      	bne.n	800b690 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b624:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b62c:	2b03      	cmp	r3, #3
 800b62e:	d14a      	bne.n	800b6c6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	689a      	ldr	r2, [r3, #8]
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	68db      	ldr	r3, [r3, #12]
 800b638:	429a      	cmp	r2, r3
 800b63a:	d913      	bls.n	800b664 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	689a      	ldr	r2, [r3, #8]
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	68db      	ldr	r3, [r3, #12]
 800b644:	1ad2      	subs	r2, r2, r3
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	68da      	ldr	r2, [r3, #12]
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	689b      	ldr	r3, [r3, #8]
 800b652:	4293      	cmp	r3, r2
 800b654:	bf28      	it	cs
 800b656:	4613      	movcs	r3, r2
 800b658:	461a      	mov	r2, r3
 800b65a:	6879      	ldr	r1, [r7, #4]
 800b65c:	68f8      	ldr	r0, [r7, #12]
 800b65e:	f001 f80f 	bl	800c680 <USBD_CtlContinueRx>
 800b662:	e030      	b.n	800b6c6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b66a:	b2db      	uxtb	r3, r3
 800b66c:	2b03      	cmp	r3, #3
 800b66e:	d10b      	bne.n	800b688 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b676:	691b      	ldr	r3, [r3, #16]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d005      	beq.n	800b688 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b682:	691b      	ldr	r3, [r3, #16]
 800b684:	68f8      	ldr	r0, [r7, #12]
 800b686:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b688:	68f8      	ldr	r0, [r7, #12]
 800b68a:	f001 f80a 	bl	800c6a2 <USBD_CtlSendStatus>
 800b68e:	e01a      	b.n	800b6c6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b696:	b2db      	uxtb	r3, r3
 800b698:	2b03      	cmp	r3, #3
 800b69a:	d114      	bne.n	800b6c6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6a2:	699b      	ldr	r3, [r3, #24]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d00e      	beq.n	800b6c6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6ae:	699b      	ldr	r3, [r3, #24]
 800b6b0:	7afa      	ldrb	r2, [r7, #11]
 800b6b2:	4611      	mov	r1, r2
 800b6b4:	68f8      	ldr	r0, [r7, #12]
 800b6b6:	4798      	blx	r3
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b6bc:	7dfb      	ldrb	r3, [r7, #23]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d001      	beq.n	800b6c6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b6c2:	7dfb      	ldrb	r3, [r7, #23]
 800b6c4:	e000      	b.n	800b6c8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b6c6:	2300      	movs	r3, #0
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3718      	adds	r7, #24
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b086      	sub	sp, #24
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	60f8      	str	r0, [r7, #12]
 800b6d8:	460b      	mov	r3, r1
 800b6da:	607a      	str	r2, [r7, #4]
 800b6dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b6de:	7afb      	ldrb	r3, [r7, #11]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d16b      	bne.n	800b7bc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	3314      	adds	r3, #20
 800b6e8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b6f0:	2b02      	cmp	r3, #2
 800b6f2:	d156      	bne.n	800b7a2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	689a      	ldr	r2, [r3, #8]
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	68db      	ldr	r3, [r3, #12]
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d914      	bls.n	800b72a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b700:	693b      	ldr	r3, [r7, #16]
 800b702:	689a      	ldr	r2, [r3, #8]
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	68db      	ldr	r3, [r3, #12]
 800b708:	1ad2      	subs	r2, r2, r3
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	689b      	ldr	r3, [r3, #8]
 800b712:	461a      	mov	r2, r3
 800b714:	6879      	ldr	r1, [r7, #4]
 800b716:	68f8      	ldr	r0, [r7, #12]
 800b718:	f000 ff84 	bl	800c624 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b71c:	2300      	movs	r3, #0
 800b71e:	2200      	movs	r2, #0
 800b720:	2100      	movs	r1, #0
 800b722:	68f8      	ldr	r0, [r7, #12]
 800b724:	f004 f9c4 	bl	800fab0 <USBD_LL_PrepareReceive>
 800b728:	e03b      	b.n	800b7a2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	68da      	ldr	r2, [r3, #12]
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	689b      	ldr	r3, [r3, #8]
 800b732:	429a      	cmp	r2, r3
 800b734:	d11c      	bne.n	800b770 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	685a      	ldr	r2, [r3, #4]
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b73e:	429a      	cmp	r2, r3
 800b740:	d316      	bcc.n	800b770 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	685a      	ldr	r2, [r3, #4]
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d20f      	bcs.n	800b770 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b750:	2200      	movs	r2, #0
 800b752:	2100      	movs	r1, #0
 800b754:	68f8      	ldr	r0, [r7, #12]
 800b756:	f000 ff65 	bl	800c624 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2200      	movs	r2, #0
 800b75e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b762:	2300      	movs	r3, #0
 800b764:	2200      	movs	r2, #0
 800b766:	2100      	movs	r1, #0
 800b768:	68f8      	ldr	r0, [r7, #12]
 800b76a:	f004 f9a1 	bl	800fab0 <USBD_LL_PrepareReceive>
 800b76e:	e018      	b.n	800b7a2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b776:	b2db      	uxtb	r3, r3
 800b778:	2b03      	cmp	r3, #3
 800b77a:	d10b      	bne.n	800b794 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b782:	68db      	ldr	r3, [r3, #12]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d005      	beq.n	800b794 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b78e:	68db      	ldr	r3, [r3, #12]
 800b790:	68f8      	ldr	r0, [r7, #12]
 800b792:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b794:	2180      	movs	r1, #128	; 0x80
 800b796:	68f8      	ldr	r0, [r7, #12]
 800b798:	f004 f8e0 	bl	800f95c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b79c:	68f8      	ldr	r0, [r7, #12]
 800b79e:	f000 ff93 	bl	800c6c8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	d122      	bne.n	800b7f2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b7ac:	68f8      	ldr	r0, [r7, #12]
 800b7ae:	f7ff fe98 	bl	800b4e2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b7ba:	e01a      	b.n	800b7f2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7c2:	b2db      	uxtb	r3, r3
 800b7c4:	2b03      	cmp	r3, #3
 800b7c6:	d114      	bne.n	800b7f2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7ce:	695b      	ldr	r3, [r3, #20]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d00e      	beq.n	800b7f2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7da:	695b      	ldr	r3, [r3, #20]
 800b7dc:	7afa      	ldrb	r2, [r7, #11]
 800b7de:	4611      	mov	r1, r2
 800b7e0:	68f8      	ldr	r0, [r7, #12]
 800b7e2:	4798      	blx	r3
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b7e8:	7dfb      	ldrb	r3, [r7, #23]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d001      	beq.n	800b7f2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b7ee:	7dfb      	ldrb	r3, [r7, #23]
 800b7f0:	e000      	b.n	800b7f4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b7f2:	2300      	movs	r3, #0
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3718      	adds	r7, #24
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b082      	sub	sp, #8
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2201      	movs	r2, #1
 800b808:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2200      	movs	r2, #0
 800b810:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2200      	movs	r2, #0
 800b818:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2200      	movs	r2, #0
 800b81e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d101      	bne.n	800b830 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b82c:	2303      	movs	r3, #3
 800b82e:	e02f      	b.n	800b890 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b836:	2b00      	cmp	r3, #0
 800b838:	d00f      	beq.n	800b85a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b840:	685b      	ldr	r3, [r3, #4]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d009      	beq.n	800b85a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	6852      	ldr	r2, [r2, #4]
 800b852:	b2d2      	uxtb	r2, r2
 800b854:	4611      	mov	r1, r2
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b85a:	2340      	movs	r3, #64	; 0x40
 800b85c:	2200      	movs	r2, #0
 800b85e:	2100      	movs	r1, #0
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f004 f836 	bl	800f8d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2201      	movs	r2, #1
 800b86a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2240      	movs	r2, #64	; 0x40
 800b872:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b876:	2340      	movs	r3, #64	; 0x40
 800b878:	2200      	movs	r2, #0
 800b87a:	2180      	movs	r1, #128	; 0x80
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f004 f828 	bl	800f8d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2201      	movs	r2, #1
 800b886:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2240      	movs	r2, #64	; 0x40
 800b88c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b88e:	2300      	movs	r3, #0
}
 800b890:	4618      	mov	r0, r3
 800b892:	3708      	adds	r7, #8
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}

0800b898 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b898:	b480      	push	{r7}
 800b89a:	b083      	sub	sp, #12
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	460b      	mov	r3, r1
 800b8a2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	78fa      	ldrb	r2, [r7, #3]
 800b8a8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b8aa:	2300      	movs	r3, #0
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	370c      	adds	r7, #12
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr

0800b8b8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b083      	sub	sp, #12
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8c6:	b2da      	uxtb	r2, r3
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2204      	movs	r2, #4
 800b8d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b8d6:	2300      	movs	r3, #0
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	370c      	adds	r7, #12
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr

0800b8e4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b083      	sub	sp, #12
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8f2:	b2db      	uxtb	r3, r3
 800b8f4:	2b04      	cmp	r3, #4
 800b8f6:	d106      	bne.n	800b906 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b8fe:	b2da      	uxtb	r2, r3
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b906:	2300      	movs	r3, #0
}
 800b908:	4618      	mov	r0, r3
 800b90a:	370c      	adds	r7, #12
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr

0800b914 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b082      	sub	sp, #8
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b922:	2b00      	cmp	r3, #0
 800b924:	d101      	bne.n	800b92a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b926:	2303      	movs	r3, #3
 800b928:	e012      	b.n	800b950 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b930:	b2db      	uxtb	r3, r3
 800b932:	2b03      	cmp	r3, #3
 800b934:	d10b      	bne.n	800b94e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b93c:	69db      	ldr	r3, [r3, #28]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d005      	beq.n	800b94e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b948:	69db      	ldr	r3, [r3, #28]
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b94e:	2300      	movs	r3, #0
}
 800b950:	4618      	mov	r0, r3
 800b952:	3708      	adds	r7, #8
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b082      	sub	sp, #8
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	460b      	mov	r3, r1
 800b962:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d101      	bne.n	800b972 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b96e:	2303      	movs	r3, #3
 800b970:	e014      	b.n	800b99c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b978:	b2db      	uxtb	r3, r3
 800b97a:	2b03      	cmp	r3, #3
 800b97c:	d10d      	bne.n	800b99a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b984:	6a1b      	ldr	r3, [r3, #32]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d007      	beq.n	800b99a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b990:	6a1b      	ldr	r3, [r3, #32]
 800b992:	78fa      	ldrb	r2, [r7, #3]
 800b994:	4611      	mov	r1, r2
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b99a:	2300      	movs	r3, #0
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3708      	adds	r7, #8
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}

0800b9a4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b082      	sub	sp, #8
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d101      	bne.n	800b9be <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b9ba:	2303      	movs	r3, #3
 800b9bc:	e014      	b.n	800b9e8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	2b03      	cmp	r3, #3
 800b9c8:	d10d      	bne.n	800b9e6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d007      	beq.n	800b9e6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9de:	78fa      	ldrb	r2, [r7, #3]
 800b9e0:	4611      	mov	r1, r2
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b9e6:	2300      	movs	r3, #0
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3708      	adds	r7, #8
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b083      	sub	sp, #12
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b9f8:	2300      	movs	r3, #0
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	370c      	adds	r7, #12
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba04:	4770      	bx	lr

0800ba06 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ba06:	b580      	push	{r7, lr}
 800ba08:	b082      	sub	sp, #8
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2201      	movs	r2, #1
 800ba12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d009      	beq.n	800ba34 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	687a      	ldr	r2, [r7, #4]
 800ba2a:	6852      	ldr	r2, [r2, #4]
 800ba2c:	b2d2      	uxtb	r2, r2
 800ba2e:	4611      	mov	r1, r2
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	4798      	blx	r3
  }

  return USBD_OK;
 800ba34:	2300      	movs	r3, #0
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3708      	adds	r7, #8
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}

0800ba3e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ba3e:	b480      	push	{r7}
 800ba40:	b087      	sub	sp, #28
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	781b      	ldrb	r3, [r3, #0]
 800ba4e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	3301      	adds	r3, #1
 800ba54:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	781b      	ldrb	r3, [r3, #0]
 800ba5a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ba5c:	8a3b      	ldrh	r3, [r7, #16]
 800ba5e:	021b      	lsls	r3, r3, #8
 800ba60:	b21a      	sxth	r2, r3
 800ba62:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ba66:	4313      	orrs	r3, r2
 800ba68:	b21b      	sxth	r3, r3
 800ba6a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ba6c:	89fb      	ldrh	r3, [r7, #14]
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	371c      	adds	r7, #28
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr
	...

0800ba7c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba86:	2300      	movs	r3, #0
 800ba88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ba92:	2b40      	cmp	r3, #64	; 0x40
 800ba94:	d005      	beq.n	800baa2 <USBD_StdDevReq+0x26>
 800ba96:	2b40      	cmp	r3, #64	; 0x40
 800ba98:	d853      	bhi.n	800bb42 <USBD_StdDevReq+0xc6>
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d00b      	beq.n	800bab6 <USBD_StdDevReq+0x3a>
 800ba9e:	2b20      	cmp	r3, #32
 800baa0:	d14f      	bne.n	800bb42 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baa8:	689b      	ldr	r3, [r3, #8]
 800baaa:	6839      	ldr	r1, [r7, #0]
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	4798      	blx	r3
 800bab0:	4603      	mov	r3, r0
 800bab2:	73fb      	strb	r3, [r7, #15]
      break;
 800bab4:	e04a      	b.n	800bb4c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	785b      	ldrb	r3, [r3, #1]
 800baba:	2b09      	cmp	r3, #9
 800babc:	d83b      	bhi.n	800bb36 <USBD_StdDevReq+0xba>
 800babe:	a201      	add	r2, pc, #4	; (adr r2, 800bac4 <USBD_StdDevReq+0x48>)
 800bac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bac4:	0800bb19 	.word	0x0800bb19
 800bac8:	0800bb2d 	.word	0x0800bb2d
 800bacc:	0800bb37 	.word	0x0800bb37
 800bad0:	0800bb23 	.word	0x0800bb23
 800bad4:	0800bb37 	.word	0x0800bb37
 800bad8:	0800baf7 	.word	0x0800baf7
 800badc:	0800baed 	.word	0x0800baed
 800bae0:	0800bb37 	.word	0x0800bb37
 800bae4:	0800bb0f 	.word	0x0800bb0f
 800bae8:	0800bb01 	.word	0x0800bb01
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800baec:	6839      	ldr	r1, [r7, #0]
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 f9de 	bl	800beb0 <USBD_GetDescriptor>
          break;
 800baf4:	e024      	b.n	800bb40 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800baf6:	6839      	ldr	r1, [r7, #0]
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f000 fb43 	bl	800c184 <USBD_SetAddress>
          break;
 800bafe:	e01f      	b.n	800bb40 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bb00:	6839      	ldr	r1, [r7, #0]
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 fb82 	bl	800c20c <USBD_SetConfig>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	73fb      	strb	r3, [r7, #15]
          break;
 800bb0c:	e018      	b.n	800bb40 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bb0e:	6839      	ldr	r1, [r7, #0]
 800bb10:	6878      	ldr	r0, [r7, #4]
 800bb12:	f000 fc21 	bl	800c358 <USBD_GetConfig>
          break;
 800bb16:	e013      	b.n	800bb40 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bb18:	6839      	ldr	r1, [r7, #0]
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f000 fc52 	bl	800c3c4 <USBD_GetStatus>
          break;
 800bb20:	e00e      	b.n	800bb40 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bb22:	6839      	ldr	r1, [r7, #0]
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f000 fc81 	bl	800c42c <USBD_SetFeature>
          break;
 800bb2a:	e009      	b.n	800bb40 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bb2c:	6839      	ldr	r1, [r7, #0]
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f000 fc90 	bl	800c454 <USBD_ClrFeature>
          break;
 800bb34:	e004      	b.n	800bb40 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800bb36:	6839      	ldr	r1, [r7, #0]
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f000 fce7 	bl	800c50c <USBD_CtlError>
          break;
 800bb3e:	bf00      	nop
      }
      break;
 800bb40:	e004      	b.n	800bb4c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800bb42:	6839      	ldr	r1, [r7, #0]
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f000 fce1 	bl	800c50c <USBD_CtlError>
      break;
 800bb4a:	bf00      	nop
  }

  return ret;
 800bb4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3710      	adds	r7, #16
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
 800bb56:	bf00      	nop

0800bb58 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b084      	sub	sp, #16
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb62:	2300      	movs	r3, #0
 800bb64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	781b      	ldrb	r3, [r3, #0]
 800bb6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bb6e:	2b40      	cmp	r3, #64	; 0x40
 800bb70:	d005      	beq.n	800bb7e <USBD_StdItfReq+0x26>
 800bb72:	2b40      	cmp	r3, #64	; 0x40
 800bb74:	d82f      	bhi.n	800bbd6 <USBD_StdItfReq+0x7e>
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d001      	beq.n	800bb7e <USBD_StdItfReq+0x26>
 800bb7a:	2b20      	cmp	r3, #32
 800bb7c:	d12b      	bne.n	800bbd6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb84:	b2db      	uxtb	r3, r3
 800bb86:	3b01      	subs	r3, #1
 800bb88:	2b02      	cmp	r3, #2
 800bb8a:	d81d      	bhi.n	800bbc8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	889b      	ldrh	r3, [r3, #4]
 800bb90:	b2db      	uxtb	r3, r3
 800bb92:	2b01      	cmp	r3, #1
 800bb94:	d813      	bhi.n	800bbbe <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb9c:	689b      	ldr	r3, [r3, #8]
 800bb9e:	6839      	ldr	r1, [r7, #0]
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	4798      	blx	r3
 800bba4:	4603      	mov	r3, r0
 800bba6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	88db      	ldrh	r3, [r3, #6]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d110      	bne.n	800bbd2 <USBD_StdItfReq+0x7a>
 800bbb0:	7bfb      	ldrb	r3, [r7, #15]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d10d      	bne.n	800bbd2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f000 fd73 	bl	800c6a2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bbbc:	e009      	b.n	800bbd2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800bbbe:	6839      	ldr	r1, [r7, #0]
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f000 fca3 	bl	800c50c <USBD_CtlError>
          break;
 800bbc6:	e004      	b.n	800bbd2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800bbc8:	6839      	ldr	r1, [r7, #0]
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f000 fc9e 	bl	800c50c <USBD_CtlError>
          break;
 800bbd0:	e000      	b.n	800bbd4 <USBD_StdItfReq+0x7c>
          break;
 800bbd2:	bf00      	nop
      }
      break;
 800bbd4:	e004      	b.n	800bbe0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800bbd6:	6839      	ldr	r1, [r7, #0]
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f000 fc97 	bl	800c50c <USBD_CtlError>
      break;
 800bbde:	bf00      	nop
  }

  return ret;
 800bbe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3710      	adds	r7, #16
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}

0800bbea <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbea:	b580      	push	{r7, lr}
 800bbec:	b084      	sub	sp, #16
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	6078      	str	r0, [r7, #4]
 800bbf2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	889b      	ldrh	r3, [r3, #4]
 800bbfc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bc06:	2b40      	cmp	r3, #64	; 0x40
 800bc08:	d007      	beq.n	800bc1a <USBD_StdEPReq+0x30>
 800bc0a:	2b40      	cmp	r3, #64	; 0x40
 800bc0c:	f200 8145 	bhi.w	800be9a <USBD_StdEPReq+0x2b0>
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d00c      	beq.n	800bc2e <USBD_StdEPReq+0x44>
 800bc14:	2b20      	cmp	r3, #32
 800bc16:	f040 8140 	bne.w	800be9a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc20:	689b      	ldr	r3, [r3, #8]
 800bc22:	6839      	ldr	r1, [r7, #0]
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	4798      	blx	r3
 800bc28:	4603      	mov	r3, r0
 800bc2a:	73fb      	strb	r3, [r7, #15]
      break;
 800bc2c:	e13a      	b.n	800bea4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	785b      	ldrb	r3, [r3, #1]
 800bc32:	2b03      	cmp	r3, #3
 800bc34:	d007      	beq.n	800bc46 <USBD_StdEPReq+0x5c>
 800bc36:	2b03      	cmp	r3, #3
 800bc38:	f300 8129 	bgt.w	800be8e <USBD_StdEPReq+0x2a4>
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d07f      	beq.n	800bd40 <USBD_StdEPReq+0x156>
 800bc40:	2b01      	cmp	r3, #1
 800bc42:	d03c      	beq.n	800bcbe <USBD_StdEPReq+0xd4>
 800bc44:	e123      	b.n	800be8e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc4c:	b2db      	uxtb	r3, r3
 800bc4e:	2b02      	cmp	r3, #2
 800bc50:	d002      	beq.n	800bc58 <USBD_StdEPReq+0x6e>
 800bc52:	2b03      	cmp	r3, #3
 800bc54:	d016      	beq.n	800bc84 <USBD_StdEPReq+0x9a>
 800bc56:	e02c      	b.n	800bcb2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc58:	7bbb      	ldrb	r3, [r7, #14]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d00d      	beq.n	800bc7a <USBD_StdEPReq+0x90>
 800bc5e:	7bbb      	ldrb	r3, [r7, #14]
 800bc60:	2b80      	cmp	r3, #128	; 0x80
 800bc62:	d00a      	beq.n	800bc7a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bc64:	7bbb      	ldrb	r3, [r7, #14]
 800bc66:	4619      	mov	r1, r3
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f003 fe77 	bl	800f95c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc6e:	2180      	movs	r1, #128	; 0x80
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f003 fe73 	bl	800f95c <USBD_LL_StallEP>
 800bc76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bc78:	e020      	b.n	800bcbc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800bc7a:	6839      	ldr	r1, [r7, #0]
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f000 fc45 	bl	800c50c <USBD_CtlError>
              break;
 800bc82:	e01b      	b.n	800bcbc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	885b      	ldrh	r3, [r3, #2]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d10e      	bne.n	800bcaa <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bc8c:	7bbb      	ldrb	r3, [r7, #14]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d00b      	beq.n	800bcaa <USBD_StdEPReq+0xc0>
 800bc92:	7bbb      	ldrb	r3, [r7, #14]
 800bc94:	2b80      	cmp	r3, #128	; 0x80
 800bc96:	d008      	beq.n	800bcaa <USBD_StdEPReq+0xc0>
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	88db      	ldrh	r3, [r3, #6]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d104      	bne.n	800bcaa <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bca0:	7bbb      	ldrb	r3, [r7, #14]
 800bca2:	4619      	mov	r1, r3
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f003 fe59 	bl	800f95c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f000 fcf9 	bl	800c6a2 <USBD_CtlSendStatus>

              break;
 800bcb0:	e004      	b.n	800bcbc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800bcb2:	6839      	ldr	r1, [r7, #0]
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f000 fc29 	bl	800c50c <USBD_CtlError>
              break;
 800bcba:	bf00      	nop
          }
          break;
 800bcbc:	e0ec      	b.n	800be98 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcc4:	b2db      	uxtb	r3, r3
 800bcc6:	2b02      	cmp	r3, #2
 800bcc8:	d002      	beq.n	800bcd0 <USBD_StdEPReq+0xe6>
 800bcca:	2b03      	cmp	r3, #3
 800bccc:	d016      	beq.n	800bcfc <USBD_StdEPReq+0x112>
 800bcce:	e030      	b.n	800bd32 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bcd0:	7bbb      	ldrb	r3, [r7, #14]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d00d      	beq.n	800bcf2 <USBD_StdEPReq+0x108>
 800bcd6:	7bbb      	ldrb	r3, [r7, #14]
 800bcd8:	2b80      	cmp	r3, #128	; 0x80
 800bcda:	d00a      	beq.n	800bcf2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bcdc:	7bbb      	ldrb	r3, [r7, #14]
 800bcde:	4619      	mov	r1, r3
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f003 fe3b 	bl	800f95c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bce6:	2180      	movs	r1, #128	; 0x80
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f003 fe37 	bl	800f95c <USBD_LL_StallEP>
 800bcee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bcf0:	e025      	b.n	800bd3e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800bcf2:	6839      	ldr	r1, [r7, #0]
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f000 fc09 	bl	800c50c <USBD_CtlError>
              break;
 800bcfa:	e020      	b.n	800bd3e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	885b      	ldrh	r3, [r3, #2]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d11b      	bne.n	800bd3c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bd04:	7bbb      	ldrb	r3, [r7, #14]
 800bd06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d004      	beq.n	800bd18 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bd0e:	7bbb      	ldrb	r3, [r7, #14]
 800bd10:	4619      	mov	r1, r3
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f003 fe41 	bl	800f99a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f000 fcc2 	bl	800c6a2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd24:	689b      	ldr	r3, [r3, #8]
 800bd26:	6839      	ldr	r1, [r7, #0]
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	4798      	blx	r3
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800bd30:	e004      	b.n	800bd3c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800bd32:	6839      	ldr	r1, [r7, #0]
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f000 fbe9 	bl	800c50c <USBD_CtlError>
              break;
 800bd3a:	e000      	b.n	800bd3e <USBD_StdEPReq+0x154>
              break;
 800bd3c:	bf00      	nop
          }
          break;
 800bd3e:	e0ab      	b.n	800be98 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd46:	b2db      	uxtb	r3, r3
 800bd48:	2b02      	cmp	r3, #2
 800bd4a:	d002      	beq.n	800bd52 <USBD_StdEPReq+0x168>
 800bd4c:	2b03      	cmp	r3, #3
 800bd4e:	d032      	beq.n	800bdb6 <USBD_StdEPReq+0x1cc>
 800bd50:	e097      	b.n	800be82 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd52:	7bbb      	ldrb	r3, [r7, #14]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d007      	beq.n	800bd68 <USBD_StdEPReq+0x17e>
 800bd58:	7bbb      	ldrb	r3, [r7, #14]
 800bd5a:	2b80      	cmp	r3, #128	; 0x80
 800bd5c:	d004      	beq.n	800bd68 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800bd5e:	6839      	ldr	r1, [r7, #0]
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f000 fbd3 	bl	800c50c <USBD_CtlError>
                break;
 800bd66:	e091      	b.n	800be8c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	da0b      	bge.n	800bd88 <USBD_StdEPReq+0x19e>
 800bd70:	7bbb      	ldrb	r3, [r7, #14]
 800bd72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd76:	4613      	mov	r3, r2
 800bd78:	009b      	lsls	r3, r3, #2
 800bd7a:	4413      	add	r3, r2
 800bd7c:	009b      	lsls	r3, r3, #2
 800bd7e:	3310      	adds	r3, #16
 800bd80:	687a      	ldr	r2, [r7, #4]
 800bd82:	4413      	add	r3, r2
 800bd84:	3304      	adds	r3, #4
 800bd86:	e00b      	b.n	800bda0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bd88:	7bbb      	ldrb	r3, [r7, #14]
 800bd8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd8e:	4613      	mov	r3, r2
 800bd90:	009b      	lsls	r3, r3, #2
 800bd92:	4413      	add	r3, r2
 800bd94:	009b      	lsls	r3, r3, #2
 800bd96:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bd9a:	687a      	ldr	r2, [r7, #4]
 800bd9c:	4413      	add	r3, r2
 800bd9e:	3304      	adds	r3, #4
 800bda0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	2200      	movs	r2, #0
 800bda6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	2202      	movs	r2, #2
 800bdac:	4619      	mov	r1, r3
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f000 fc1d 	bl	800c5ee <USBD_CtlSendData>
              break;
 800bdb4:	e06a      	b.n	800be8c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bdb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	da11      	bge.n	800bde2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bdbe:	7bbb      	ldrb	r3, [r7, #14]
 800bdc0:	f003 020f 	and.w	r2, r3, #15
 800bdc4:	6879      	ldr	r1, [r7, #4]
 800bdc6:	4613      	mov	r3, r2
 800bdc8:	009b      	lsls	r3, r3, #2
 800bdca:	4413      	add	r3, r2
 800bdcc:	009b      	lsls	r3, r3, #2
 800bdce:	440b      	add	r3, r1
 800bdd0:	3324      	adds	r3, #36	; 0x24
 800bdd2:	881b      	ldrh	r3, [r3, #0]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d117      	bne.n	800be08 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bdd8:	6839      	ldr	r1, [r7, #0]
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f000 fb96 	bl	800c50c <USBD_CtlError>
                  break;
 800bde0:	e054      	b.n	800be8c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bde2:	7bbb      	ldrb	r3, [r7, #14]
 800bde4:	f003 020f 	and.w	r2, r3, #15
 800bde8:	6879      	ldr	r1, [r7, #4]
 800bdea:	4613      	mov	r3, r2
 800bdec:	009b      	lsls	r3, r3, #2
 800bdee:	4413      	add	r3, r2
 800bdf0:	009b      	lsls	r3, r3, #2
 800bdf2:	440b      	add	r3, r1
 800bdf4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bdf8:	881b      	ldrh	r3, [r3, #0]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d104      	bne.n	800be08 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bdfe:	6839      	ldr	r1, [r7, #0]
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f000 fb83 	bl	800c50c <USBD_CtlError>
                  break;
 800be06:	e041      	b.n	800be8c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	da0b      	bge.n	800be28 <USBD_StdEPReq+0x23e>
 800be10:	7bbb      	ldrb	r3, [r7, #14]
 800be12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be16:	4613      	mov	r3, r2
 800be18:	009b      	lsls	r3, r3, #2
 800be1a:	4413      	add	r3, r2
 800be1c:	009b      	lsls	r3, r3, #2
 800be1e:	3310      	adds	r3, #16
 800be20:	687a      	ldr	r2, [r7, #4]
 800be22:	4413      	add	r3, r2
 800be24:	3304      	adds	r3, #4
 800be26:	e00b      	b.n	800be40 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800be28:	7bbb      	ldrb	r3, [r7, #14]
 800be2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be2e:	4613      	mov	r3, r2
 800be30:	009b      	lsls	r3, r3, #2
 800be32:	4413      	add	r3, r2
 800be34:	009b      	lsls	r3, r3, #2
 800be36:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800be3a:	687a      	ldr	r2, [r7, #4]
 800be3c:	4413      	add	r3, r2
 800be3e:	3304      	adds	r3, #4
 800be40:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800be42:	7bbb      	ldrb	r3, [r7, #14]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d002      	beq.n	800be4e <USBD_StdEPReq+0x264>
 800be48:	7bbb      	ldrb	r3, [r7, #14]
 800be4a:	2b80      	cmp	r3, #128	; 0x80
 800be4c:	d103      	bne.n	800be56 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	2200      	movs	r2, #0
 800be52:	601a      	str	r2, [r3, #0]
 800be54:	e00e      	b.n	800be74 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800be56:	7bbb      	ldrb	r3, [r7, #14]
 800be58:	4619      	mov	r1, r3
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f003 fdbc 	bl	800f9d8 <USBD_LL_IsStallEP>
 800be60:	4603      	mov	r3, r0
 800be62:	2b00      	cmp	r3, #0
 800be64:	d003      	beq.n	800be6e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	2201      	movs	r2, #1
 800be6a:	601a      	str	r2, [r3, #0]
 800be6c:	e002      	b.n	800be74 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	2200      	movs	r2, #0
 800be72:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	2202      	movs	r2, #2
 800be78:	4619      	mov	r1, r3
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 fbb7 	bl	800c5ee <USBD_CtlSendData>
              break;
 800be80:	e004      	b.n	800be8c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800be82:	6839      	ldr	r1, [r7, #0]
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f000 fb41 	bl	800c50c <USBD_CtlError>
              break;
 800be8a:	bf00      	nop
          }
          break;
 800be8c:	e004      	b.n	800be98 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800be8e:	6839      	ldr	r1, [r7, #0]
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f000 fb3b 	bl	800c50c <USBD_CtlError>
          break;
 800be96:	bf00      	nop
      }
      break;
 800be98:	e004      	b.n	800bea4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800be9a:	6839      	ldr	r1, [r7, #0]
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f000 fb35 	bl	800c50c <USBD_CtlError>
      break;
 800bea2:	bf00      	nop
  }

  return ret;
 800bea4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3710      	adds	r7, #16
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}
	...

0800beb0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b084      	sub	sp, #16
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800beba:	2300      	movs	r3, #0
 800bebc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bebe:	2300      	movs	r3, #0
 800bec0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bec2:	2300      	movs	r3, #0
 800bec4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	885b      	ldrh	r3, [r3, #2]
 800beca:	0a1b      	lsrs	r3, r3, #8
 800becc:	b29b      	uxth	r3, r3
 800bece:	3b01      	subs	r3, #1
 800bed0:	2b06      	cmp	r3, #6
 800bed2:	f200 8128 	bhi.w	800c126 <USBD_GetDescriptor+0x276>
 800bed6:	a201      	add	r2, pc, #4	; (adr r2, 800bedc <USBD_GetDescriptor+0x2c>)
 800bed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bedc:	0800bef9 	.word	0x0800bef9
 800bee0:	0800bf11 	.word	0x0800bf11
 800bee4:	0800bf51 	.word	0x0800bf51
 800bee8:	0800c127 	.word	0x0800c127
 800beec:	0800c127 	.word	0x0800c127
 800bef0:	0800c0c7 	.word	0x0800c0c7
 800bef4:	0800c0f3 	.word	0x0800c0f3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	687a      	ldr	r2, [r7, #4]
 800bf02:	7c12      	ldrb	r2, [r2, #16]
 800bf04:	f107 0108 	add.w	r1, r7, #8
 800bf08:	4610      	mov	r0, r2
 800bf0a:	4798      	blx	r3
 800bf0c:	60f8      	str	r0, [r7, #12]
      break;
 800bf0e:	e112      	b.n	800c136 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	7c1b      	ldrb	r3, [r3, #16]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d10d      	bne.n	800bf34 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf20:	f107 0208 	add.w	r2, r7, #8
 800bf24:	4610      	mov	r0, r2
 800bf26:	4798      	blx	r3
 800bf28:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	3301      	adds	r3, #1
 800bf2e:	2202      	movs	r2, #2
 800bf30:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bf32:	e100      	b.n	800c136 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf3c:	f107 0208 	add.w	r2, r7, #8
 800bf40:	4610      	mov	r0, r2
 800bf42:	4798      	blx	r3
 800bf44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	3301      	adds	r3, #1
 800bf4a:	2202      	movs	r2, #2
 800bf4c:	701a      	strb	r2, [r3, #0]
      break;
 800bf4e:	e0f2      	b.n	800c136 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	885b      	ldrh	r3, [r3, #2]
 800bf54:	b2db      	uxtb	r3, r3
 800bf56:	2b05      	cmp	r3, #5
 800bf58:	f200 80ac 	bhi.w	800c0b4 <USBD_GetDescriptor+0x204>
 800bf5c:	a201      	add	r2, pc, #4	; (adr r2, 800bf64 <USBD_GetDescriptor+0xb4>)
 800bf5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf62:	bf00      	nop
 800bf64:	0800bf7d 	.word	0x0800bf7d
 800bf68:	0800bfb1 	.word	0x0800bfb1
 800bf6c:	0800bfe5 	.word	0x0800bfe5
 800bf70:	0800c019 	.word	0x0800c019
 800bf74:	0800c04d 	.word	0x0800c04d
 800bf78:	0800c081 	.word	0x0800c081
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf82:	685b      	ldr	r3, [r3, #4]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d00b      	beq.n	800bfa0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf8e:	685b      	ldr	r3, [r3, #4]
 800bf90:	687a      	ldr	r2, [r7, #4]
 800bf92:	7c12      	ldrb	r2, [r2, #16]
 800bf94:	f107 0108 	add.w	r1, r7, #8
 800bf98:	4610      	mov	r0, r2
 800bf9a:	4798      	blx	r3
 800bf9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf9e:	e091      	b.n	800c0c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bfa0:	6839      	ldr	r1, [r7, #0]
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f000 fab2 	bl	800c50c <USBD_CtlError>
            err++;
 800bfa8:	7afb      	ldrb	r3, [r7, #11]
 800bfaa:	3301      	adds	r3, #1
 800bfac:	72fb      	strb	r3, [r7, #11]
          break;
 800bfae:	e089      	b.n	800c0c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfb6:	689b      	ldr	r3, [r3, #8]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d00b      	beq.n	800bfd4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfc2:	689b      	ldr	r3, [r3, #8]
 800bfc4:	687a      	ldr	r2, [r7, #4]
 800bfc6:	7c12      	ldrb	r2, [r2, #16]
 800bfc8:	f107 0108 	add.w	r1, r7, #8
 800bfcc:	4610      	mov	r0, r2
 800bfce:	4798      	blx	r3
 800bfd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bfd2:	e077      	b.n	800c0c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bfd4:	6839      	ldr	r1, [r7, #0]
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f000 fa98 	bl	800c50c <USBD_CtlError>
            err++;
 800bfdc:	7afb      	ldrb	r3, [r7, #11]
 800bfde:	3301      	adds	r3, #1
 800bfe0:	72fb      	strb	r3, [r7, #11]
          break;
 800bfe2:	e06f      	b.n	800c0c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfea:	68db      	ldr	r3, [r3, #12]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d00b      	beq.n	800c008 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bff6:	68db      	ldr	r3, [r3, #12]
 800bff8:	687a      	ldr	r2, [r7, #4]
 800bffa:	7c12      	ldrb	r2, [r2, #16]
 800bffc:	f107 0108 	add.w	r1, r7, #8
 800c000:	4610      	mov	r0, r2
 800c002:	4798      	blx	r3
 800c004:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c006:	e05d      	b.n	800c0c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c008:	6839      	ldr	r1, [r7, #0]
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f000 fa7e 	bl	800c50c <USBD_CtlError>
            err++;
 800c010:	7afb      	ldrb	r3, [r7, #11]
 800c012:	3301      	adds	r3, #1
 800c014:	72fb      	strb	r3, [r7, #11]
          break;
 800c016:	e055      	b.n	800c0c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c01e:	691b      	ldr	r3, [r3, #16]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d00b      	beq.n	800c03c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c02a:	691b      	ldr	r3, [r3, #16]
 800c02c:	687a      	ldr	r2, [r7, #4]
 800c02e:	7c12      	ldrb	r2, [r2, #16]
 800c030:	f107 0108 	add.w	r1, r7, #8
 800c034:	4610      	mov	r0, r2
 800c036:	4798      	blx	r3
 800c038:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c03a:	e043      	b.n	800c0c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c03c:	6839      	ldr	r1, [r7, #0]
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f000 fa64 	bl	800c50c <USBD_CtlError>
            err++;
 800c044:	7afb      	ldrb	r3, [r7, #11]
 800c046:	3301      	adds	r3, #1
 800c048:	72fb      	strb	r3, [r7, #11]
          break;
 800c04a:	e03b      	b.n	800c0c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c052:	695b      	ldr	r3, [r3, #20]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d00b      	beq.n	800c070 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c05e:	695b      	ldr	r3, [r3, #20]
 800c060:	687a      	ldr	r2, [r7, #4]
 800c062:	7c12      	ldrb	r2, [r2, #16]
 800c064:	f107 0108 	add.w	r1, r7, #8
 800c068:	4610      	mov	r0, r2
 800c06a:	4798      	blx	r3
 800c06c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c06e:	e029      	b.n	800c0c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c070:	6839      	ldr	r1, [r7, #0]
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 fa4a 	bl	800c50c <USBD_CtlError>
            err++;
 800c078:	7afb      	ldrb	r3, [r7, #11]
 800c07a:	3301      	adds	r3, #1
 800c07c:	72fb      	strb	r3, [r7, #11]
          break;
 800c07e:	e021      	b.n	800c0c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c086:	699b      	ldr	r3, [r3, #24]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d00b      	beq.n	800c0a4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c092:	699b      	ldr	r3, [r3, #24]
 800c094:	687a      	ldr	r2, [r7, #4]
 800c096:	7c12      	ldrb	r2, [r2, #16]
 800c098:	f107 0108 	add.w	r1, r7, #8
 800c09c:	4610      	mov	r0, r2
 800c09e:	4798      	blx	r3
 800c0a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0a2:	e00f      	b.n	800c0c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c0a4:	6839      	ldr	r1, [r7, #0]
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f000 fa30 	bl	800c50c <USBD_CtlError>
            err++;
 800c0ac:	7afb      	ldrb	r3, [r7, #11]
 800c0ae:	3301      	adds	r3, #1
 800c0b0:	72fb      	strb	r3, [r7, #11]
          break;
 800c0b2:	e007      	b.n	800c0c4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c0b4:	6839      	ldr	r1, [r7, #0]
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f000 fa28 	bl	800c50c <USBD_CtlError>
          err++;
 800c0bc:	7afb      	ldrb	r3, [r7, #11]
 800c0be:	3301      	adds	r3, #1
 800c0c0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c0c2:	bf00      	nop
      }
      break;
 800c0c4:	e037      	b.n	800c136 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	7c1b      	ldrb	r3, [r3, #16]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d109      	bne.n	800c0e2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0d6:	f107 0208 	add.w	r2, r7, #8
 800c0da:	4610      	mov	r0, r2
 800c0dc:	4798      	blx	r3
 800c0de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c0e0:	e029      	b.n	800c136 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c0e2:	6839      	ldr	r1, [r7, #0]
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f000 fa11 	bl	800c50c <USBD_CtlError>
        err++;
 800c0ea:	7afb      	ldrb	r3, [r7, #11]
 800c0ec:	3301      	adds	r3, #1
 800c0ee:	72fb      	strb	r3, [r7, #11]
      break;
 800c0f0:	e021      	b.n	800c136 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	7c1b      	ldrb	r3, [r3, #16]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d10d      	bne.n	800c116 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c102:	f107 0208 	add.w	r2, r7, #8
 800c106:	4610      	mov	r0, r2
 800c108:	4798      	blx	r3
 800c10a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	3301      	adds	r3, #1
 800c110:	2207      	movs	r2, #7
 800c112:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c114:	e00f      	b.n	800c136 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c116:	6839      	ldr	r1, [r7, #0]
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f000 f9f7 	bl	800c50c <USBD_CtlError>
        err++;
 800c11e:	7afb      	ldrb	r3, [r7, #11]
 800c120:	3301      	adds	r3, #1
 800c122:	72fb      	strb	r3, [r7, #11]
      break;
 800c124:	e007      	b.n	800c136 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c126:	6839      	ldr	r1, [r7, #0]
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f000 f9ef 	bl	800c50c <USBD_CtlError>
      err++;
 800c12e:	7afb      	ldrb	r3, [r7, #11]
 800c130:	3301      	adds	r3, #1
 800c132:	72fb      	strb	r3, [r7, #11]
      break;
 800c134:	bf00      	nop
  }

  if (err != 0U)
 800c136:	7afb      	ldrb	r3, [r7, #11]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d11e      	bne.n	800c17a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	88db      	ldrh	r3, [r3, #6]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d016      	beq.n	800c172 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c144:	893b      	ldrh	r3, [r7, #8]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d00e      	beq.n	800c168 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	88da      	ldrh	r2, [r3, #6]
 800c14e:	893b      	ldrh	r3, [r7, #8]
 800c150:	4293      	cmp	r3, r2
 800c152:	bf28      	it	cs
 800c154:	4613      	movcs	r3, r2
 800c156:	b29b      	uxth	r3, r3
 800c158:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c15a:	893b      	ldrh	r3, [r7, #8]
 800c15c:	461a      	mov	r2, r3
 800c15e:	68f9      	ldr	r1, [r7, #12]
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f000 fa44 	bl	800c5ee <USBD_CtlSendData>
 800c166:	e009      	b.n	800c17c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c168:	6839      	ldr	r1, [r7, #0]
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f000 f9ce 	bl	800c50c <USBD_CtlError>
 800c170:	e004      	b.n	800c17c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 fa95 	bl	800c6a2 <USBD_CtlSendStatus>
 800c178:	e000      	b.n	800c17c <USBD_GetDescriptor+0x2cc>
    return;
 800c17a:	bf00      	nop
  }
}
 800c17c:	3710      	adds	r7, #16
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}
 800c182:	bf00      	nop

0800c184 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b084      	sub	sp, #16
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	889b      	ldrh	r3, [r3, #4]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d131      	bne.n	800c1fa <USBD_SetAddress+0x76>
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	88db      	ldrh	r3, [r3, #6]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d12d      	bne.n	800c1fa <USBD_SetAddress+0x76>
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	885b      	ldrh	r3, [r3, #2]
 800c1a2:	2b7f      	cmp	r3, #127	; 0x7f
 800c1a4:	d829      	bhi.n	800c1fa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	885b      	ldrh	r3, [r3, #2]
 800c1aa:	b2db      	uxtb	r3, r3
 800c1ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1b8:	b2db      	uxtb	r3, r3
 800c1ba:	2b03      	cmp	r3, #3
 800c1bc:	d104      	bne.n	800c1c8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c1be:	6839      	ldr	r1, [r7, #0]
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f000 f9a3 	bl	800c50c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1c6:	e01d      	b.n	800c204 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	7bfa      	ldrb	r2, [r7, #15]
 800c1cc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c1d0:	7bfb      	ldrb	r3, [r7, #15]
 800c1d2:	4619      	mov	r1, r3
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f003 fc2b 	bl	800fa30 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f000 fa61 	bl	800c6a2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c1e0:	7bfb      	ldrb	r3, [r7, #15]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d004      	beq.n	800c1f0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2202      	movs	r2, #2
 800c1ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1ee:	e009      	b.n	800c204 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1f8:	e004      	b.n	800c204 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c1fa:	6839      	ldr	r1, [r7, #0]
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f000 f985 	bl	800c50c <USBD_CtlError>
  }
}
 800c202:	bf00      	nop
 800c204:	bf00      	nop
 800c206:	3710      	adds	r7, #16
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}

0800c20c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b084      	sub	sp, #16
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c216:	2300      	movs	r3, #0
 800c218:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	885b      	ldrh	r3, [r3, #2]
 800c21e:	b2da      	uxtb	r2, r3
 800c220:	4b4c      	ldr	r3, [pc, #304]	; (800c354 <USBD_SetConfig+0x148>)
 800c222:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c224:	4b4b      	ldr	r3, [pc, #300]	; (800c354 <USBD_SetConfig+0x148>)
 800c226:	781b      	ldrb	r3, [r3, #0]
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d905      	bls.n	800c238 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c22c:	6839      	ldr	r1, [r7, #0]
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f000 f96c 	bl	800c50c <USBD_CtlError>
    return USBD_FAIL;
 800c234:	2303      	movs	r3, #3
 800c236:	e088      	b.n	800c34a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c23e:	b2db      	uxtb	r3, r3
 800c240:	2b02      	cmp	r3, #2
 800c242:	d002      	beq.n	800c24a <USBD_SetConfig+0x3e>
 800c244:	2b03      	cmp	r3, #3
 800c246:	d025      	beq.n	800c294 <USBD_SetConfig+0x88>
 800c248:	e071      	b.n	800c32e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c24a:	4b42      	ldr	r3, [pc, #264]	; (800c354 <USBD_SetConfig+0x148>)
 800c24c:	781b      	ldrb	r3, [r3, #0]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d01c      	beq.n	800c28c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c252:	4b40      	ldr	r3, [pc, #256]	; (800c354 <USBD_SetConfig+0x148>)
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	461a      	mov	r2, r3
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c25c:	4b3d      	ldr	r3, [pc, #244]	; (800c354 <USBD_SetConfig+0x148>)
 800c25e:	781b      	ldrb	r3, [r3, #0]
 800c260:	4619      	mov	r1, r3
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f7ff f948 	bl	800b4f8 <USBD_SetClassConfig>
 800c268:	4603      	mov	r3, r0
 800c26a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c26c:	7bfb      	ldrb	r3, [r7, #15]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d004      	beq.n	800c27c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c272:	6839      	ldr	r1, [r7, #0]
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f000 f949 	bl	800c50c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c27a:	e065      	b.n	800c348 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f000 fa10 	bl	800c6a2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2203      	movs	r2, #3
 800c286:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c28a:	e05d      	b.n	800c348 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f000 fa08 	bl	800c6a2 <USBD_CtlSendStatus>
      break;
 800c292:	e059      	b.n	800c348 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c294:	4b2f      	ldr	r3, [pc, #188]	; (800c354 <USBD_SetConfig+0x148>)
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d112      	bne.n	800c2c2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2202      	movs	r2, #2
 800c2a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c2a4:	4b2b      	ldr	r3, [pc, #172]	; (800c354 <USBD_SetConfig+0x148>)
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	461a      	mov	r2, r3
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c2ae:	4b29      	ldr	r3, [pc, #164]	; (800c354 <USBD_SetConfig+0x148>)
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f7ff f93b 	bl	800b530 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f000 f9f1 	bl	800c6a2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c2c0:	e042      	b.n	800c348 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c2c2:	4b24      	ldr	r3, [pc, #144]	; (800c354 <USBD_SetConfig+0x148>)
 800c2c4:	781b      	ldrb	r3, [r3, #0]
 800c2c6:	461a      	mov	r2, r3
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	685b      	ldr	r3, [r3, #4]
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d02a      	beq.n	800c326 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	b2db      	uxtb	r3, r3
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f7ff f929 	bl	800b530 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c2de:	4b1d      	ldr	r3, [pc, #116]	; (800c354 <USBD_SetConfig+0x148>)
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c2e8:	4b1a      	ldr	r3, [pc, #104]	; (800c354 <USBD_SetConfig+0x148>)
 800c2ea:	781b      	ldrb	r3, [r3, #0]
 800c2ec:	4619      	mov	r1, r3
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f7ff f902 	bl	800b4f8 <USBD_SetClassConfig>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c2f8:	7bfb      	ldrb	r3, [r7, #15]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d00f      	beq.n	800c31e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c2fe:	6839      	ldr	r1, [r7, #0]
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f000 f903 	bl	800c50c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	685b      	ldr	r3, [r3, #4]
 800c30a:	b2db      	uxtb	r3, r3
 800c30c:	4619      	mov	r1, r3
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f7ff f90e 	bl	800b530 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2202      	movs	r2, #2
 800c318:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c31c:	e014      	b.n	800c348 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f000 f9bf 	bl	800c6a2 <USBD_CtlSendStatus>
      break;
 800c324:	e010      	b.n	800c348 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f000 f9bb 	bl	800c6a2 <USBD_CtlSendStatus>
      break;
 800c32c:	e00c      	b.n	800c348 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c32e:	6839      	ldr	r1, [r7, #0]
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f000 f8eb 	bl	800c50c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c336:	4b07      	ldr	r3, [pc, #28]	; (800c354 <USBD_SetConfig+0x148>)
 800c338:	781b      	ldrb	r3, [r3, #0]
 800c33a:	4619      	mov	r1, r3
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f7ff f8f7 	bl	800b530 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c342:	2303      	movs	r3, #3
 800c344:	73fb      	strb	r3, [r7, #15]
      break;
 800c346:	bf00      	nop
  }

  return ret;
 800c348:	7bfb      	ldrb	r3, [r7, #15]
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3710      	adds	r7, #16
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}
 800c352:	bf00      	nop
 800c354:	200008d1 	.word	0x200008d1

0800c358 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b082      	sub	sp, #8
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	88db      	ldrh	r3, [r3, #6]
 800c366:	2b01      	cmp	r3, #1
 800c368:	d004      	beq.n	800c374 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c36a:	6839      	ldr	r1, [r7, #0]
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f000 f8cd 	bl	800c50c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c372:	e023      	b.n	800c3bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c37a:	b2db      	uxtb	r3, r3
 800c37c:	2b02      	cmp	r3, #2
 800c37e:	dc02      	bgt.n	800c386 <USBD_GetConfig+0x2e>
 800c380:	2b00      	cmp	r3, #0
 800c382:	dc03      	bgt.n	800c38c <USBD_GetConfig+0x34>
 800c384:	e015      	b.n	800c3b2 <USBD_GetConfig+0x5a>
 800c386:	2b03      	cmp	r3, #3
 800c388:	d00b      	beq.n	800c3a2 <USBD_GetConfig+0x4a>
 800c38a:	e012      	b.n	800c3b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2200      	movs	r2, #0
 800c390:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	3308      	adds	r3, #8
 800c396:	2201      	movs	r2, #1
 800c398:	4619      	mov	r1, r3
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f000 f927 	bl	800c5ee <USBD_CtlSendData>
        break;
 800c3a0:	e00c      	b.n	800c3bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	3304      	adds	r3, #4
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	4619      	mov	r1, r3
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f000 f91f 	bl	800c5ee <USBD_CtlSendData>
        break;
 800c3b0:	e004      	b.n	800c3bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c3b2:	6839      	ldr	r1, [r7, #0]
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f000 f8a9 	bl	800c50c <USBD_CtlError>
        break;
 800c3ba:	bf00      	nop
}
 800c3bc:	bf00      	nop
 800c3be:	3708      	adds	r7, #8
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}

0800c3c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b082      	sub	sp, #8
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
 800c3cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3d4:	b2db      	uxtb	r3, r3
 800c3d6:	3b01      	subs	r3, #1
 800c3d8:	2b02      	cmp	r3, #2
 800c3da:	d81e      	bhi.n	800c41a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	88db      	ldrh	r3, [r3, #6]
 800c3e0:	2b02      	cmp	r3, #2
 800c3e2:	d004      	beq.n	800c3ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c3e4:	6839      	ldr	r1, [r7, #0]
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f000 f890 	bl	800c50c <USBD_CtlError>
        break;
 800c3ec:	e01a      	b.n	800c424 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2201      	movs	r2, #1
 800c3f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d005      	beq.n	800c40a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	68db      	ldr	r3, [r3, #12]
 800c402:	f043 0202 	orr.w	r2, r3, #2
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	330c      	adds	r3, #12
 800c40e:	2202      	movs	r2, #2
 800c410:	4619      	mov	r1, r3
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f000 f8eb 	bl	800c5ee <USBD_CtlSendData>
      break;
 800c418:	e004      	b.n	800c424 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c41a:	6839      	ldr	r1, [r7, #0]
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f000 f875 	bl	800c50c <USBD_CtlError>
      break;
 800c422:	bf00      	nop
  }
}
 800c424:	bf00      	nop
 800c426:	3708      	adds	r7, #8
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}

0800c42c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b082      	sub	sp, #8
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
 800c434:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	885b      	ldrh	r3, [r3, #2]
 800c43a:	2b01      	cmp	r3, #1
 800c43c:	d106      	bne.n	800c44c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2201      	movs	r2, #1
 800c442:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f000 f92b 	bl	800c6a2 <USBD_CtlSendStatus>
  }
}
 800c44c:	bf00      	nop
 800c44e:	3708      	adds	r7, #8
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}

0800c454 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b082      	sub	sp, #8
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
 800c45c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c464:	b2db      	uxtb	r3, r3
 800c466:	3b01      	subs	r3, #1
 800c468:	2b02      	cmp	r3, #2
 800c46a:	d80b      	bhi.n	800c484 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	885b      	ldrh	r3, [r3, #2]
 800c470:	2b01      	cmp	r3, #1
 800c472:	d10c      	bne.n	800c48e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2200      	movs	r2, #0
 800c478:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f000 f910 	bl	800c6a2 <USBD_CtlSendStatus>
      }
      break;
 800c482:	e004      	b.n	800c48e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c484:	6839      	ldr	r1, [r7, #0]
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f000 f840 	bl	800c50c <USBD_CtlError>
      break;
 800c48c:	e000      	b.n	800c490 <USBD_ClrFeature+0x3c>
      break;
 800c48e:	bf00      	nop
  }
}
 800c490:	bf00      	nop
 800c492:	3708      	adds	r7, #8
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}

0800c498 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b084      	sub	sp, #16
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
 800c4a0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	781a      	ldrb	r2, [r3, #0]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	3301      	adds	r3, #1
 800c4b2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	781a      	ldrb	r2, [r3, #0]
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	3301      	adds	r3, #1
 800c4c0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c4c2:	68f8      	ldr	r0, [r7, #12]
 800c4c4:	f7ff fabb 	bl	800ba3e <SWAPBYTE>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	461a      	mov	r2, r3
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	3301      	adds	r3, #1
 800c4da:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c4dc:	68f8      	ldr	r0, [r7, #12]
 800c4de:	f7ff faae 	bl	800ba3e <SWAPBYTE>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	461a      	mov	r2, r3
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	3301      	adds	r3, #1
 800c4ee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	3301      	adds	r3, #1
 800c4f4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c4f6:	68f8      	ldr	r0, [r7, #12]
 800c4f8:	f7ff faa1 	bl	800ba3e <SWAPBYTE>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	461a      	mov	r2, r3
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	80da      	strh	r2, [r3, #6]
}
 800c504:	bf00      	nop
 800c506:	3710      	adds	r7, #16
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}

0800c50c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b082      	sub	sp, #8
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
 800c514:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c516:	2180      	movs	r1, #128	; 0x80
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f003 fa1f 	bl	800f95c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c51e:	2100      	movs	r1, #0
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f003 fa1b 	bl	800f95c <USBD_LL_StallEP>
}
 800c526:	bf00      	nop
 800c528:	3708      	adds	r7, #8
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}

0800c52e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c52e:	b580      	push	{r7, lr}
 800c530:	b086      	sub	sp, #24
 800c532:	af00      	add	r7, sp, #0
 800c534:	60f8      	str	r0, [r7, #12]
 800c536:	60b9      	str	r1, [r7, #8]
 800c538:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c53a:	2300      	movs	r3, #0
 800c53c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d036      	beq.n	800c5b2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c548:	6938      	ldr	r0, [r7, #16]
 800c54a:	f000 f836 	bl	800c5ba <USBD_GetLen>
 800c54e:	4603      	mov	r3, r0
 800c550:	3301      	adds	r3, #1
 800c552:	b29b      	uxth	r3, r3
 800c554:	005b      	lsls	r3, r3, #1
 800c556:	b29a      	uxth	r2, r3
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c55c:	7dfb      	ldrb	r3, [r7, #23]
 800c55e:	68ba      	ldr	r2, [r7, #8]
 800c560:	4413      	add	r3, r2
 800c562:	687a      	ldr	r2, [r7, #4]
 800c564:	7812      	ldrb	r2, [r2, #0]
 800c566:	701a      	strb	r2, [r3, #0]
  idx++;
 800c568:	7dfb      	ldrb	r3, [r7, #23]
 800c56a:	3301      	adds	r3, #1
 800c56c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c56e:	7dfb      	ldrb	r3, [r7, #23]
 800c570:	68ba      	ldr	r2, [r7, #8]
 800c572:	4413      	add	r3, r2
 800c574:	2203      	movs	r2, #3
 800c576:	701a      	strb	r2, [r3, #0]
  idx++;
 800c578:	7dfb      	ldrb	r3, [r7, #23]
 800c57a:	3301      	adds	r3, #1
 800c57c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c57e:	e013      	b.n	800c5a8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c580:	7dfb      	ldrb	r3, [r7, #23]
 800c582:	68ba      	ldr	r2, [r7, #8]
 800c584:	4413      	add	r3, r2
 800c586:	693a      	ldr	r2, [r7, #16]
 800c588:	7812      	ldrb	r2, [r2, #0]
 800c58a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c58c:	693b      	ldr	r3, [r7, #16]
 800c58e:	3301      	adds	r3, #1
 800c590:	613b      	str	r3, [r7, #16]
    idx++;
 800c592:	7dfb      	ldrb	r3, [r7, #23]
 800c594:	3301      	adds	r3, #1
 800c596:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c598:	7dfb      	ldrb	r3, [r7, #23]
 800c59a:	68ba      	ldr	r2, [r7, #8]
 800c59c:	4413      	add	r3, r2
 800c59e:	2200      	movs	r2, #0
 800c5a0:	701a      	strb	r2, [r3, #0]
    idx++;
 800c5a2:	7dfb      	ldrb	r3, [r7, #23]
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	781b      	ldrb	r3, [r3, #0]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d1e7      	bne.n	800c580 <USBD_GetString+0x52>
 800c5b0:	e000      	b.n	800c5b4 <USBD_GetString+0x86>
    return;
 800c5b2:	bf00      	nop
  }
}
 800c5b4:	3718      	adds	r7, #24
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}

0800c5ba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c5ba:	b480      	push	{r7}
 800c5bc:	b085      	sub	sp, #20
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c5ca:	e005      	b.n	800c5d8 <USBD_GetLen+0x1e>
  {
    len++;
 800c5cc:	7bfb      	ldrb	r3, [r7, #15]
 800c5ce:	3301      	adds	r3, #1
 800c5d0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	3301      	adds	r3, #1
 800c5d6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	781b      	ldrb	r3, [r3, #0]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d1f5      	bne.n	800c5cc <USBD_GetLen+0x12>
  }

  return len;
 800c5e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3714      	adds	r7, #20
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ec:	4770      	bx	lr

0800c5ee <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c5ee:	b580      	push	{r7, lr}
 800c5f0:	b084      	sub	sp, #16
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	60f8      	str	r0, [r7, #12]
 800c5f6:	60b9      	str	r1, [r7, #8]
 800c5f8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	2202      	movs	r2, #2
 800c5fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	687a      	ldr	r2, [r7, #4]
 800c606:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	687a      	ldr	r2, [r7, #4]
 800c60c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	68ba      	ldr	r2, [r7, #8]
 800c612:	2100      	movs	r1, #0
 800c614:	68f8      	ldr	r0, [r7, #12]
 800c616:	f003 fa2a 	bl	800fa6e <USBD_LL_Transmit>

  return USBD_OK;
 800c61a:	2300      	movs	r3, #0
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3710      	adds	r7, #16
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b084      	sub	sp, #16
 800c628:	af00      	add	r7, sp, #0
 800c62a:	60f8      	str	r0, [r7, #12]
 800c62c:	60b9      	str	r1, [r7, #8]
 800c62e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	68ba      	ldr	r2, [r7, #8]
 800c634:	2100      	movs	r1, #0
 800c636:	68f8      	ldr	r0, [r7, #12]
 800c638:	f003 fa19 	bl	800fa6e <USBD_LL_Transmit>

  return USBD_OK;
 800c63c:	2300      	movs	r3, #0
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3710      	adds	r7, #16
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}

0800c646 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c646:	b580      	push	{r7, lr}
 800c648:	b084      	sub	sp, #16
 800c64a:	af00      	add	r7, sp, #0
 800c64c:	60f8      	str	r0, [r7, #12]
 800c64e:	60b9      	str	r1, [r7, #8]
 800c650:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	2203      	movs	r2, #3
 800c656:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	687a      	ldr	r2, [r7, #4]
 800c65e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	68ba      	ldr	r2, [r7, #8]
 800c66e:	2100      	movs	r1, #0
 800c670:	68f8      	ldr	r0, [r7, #12]
 800c672:	f003 fa1d 	bl	800fab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c676:	2300      	movs	r3, #0
}
 800c678:	4618      	mov	r0, r3
 800c67a:	3710      	adds	r7, #16
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}

0800c680 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b084      	sub	sp, #16
 800c684:	af00      	add	r7, sp, #0
 800c686:	60f8      	str	r0, [r7, #12]
 800c688:	60b9      	str	r1, [r7, #8]
 800c68a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	68ba      	ldr	r2, [r7, #8]
 800c690:	2100      	movs	r1, #0
 800c692:	68f8      	ldr	r0, [r7, #12]
 800c694:	f003 fa0c 	bl	800fab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c698:	2300      	movs	r3, #0
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3710      	adds	r7, #16
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}

0800c6a2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c6a2:	b580      	push	{r7, lr}
 800c6a4:	b082      	sub	sp, #8
 800c6a6:	af00      	add	r7, sp, #0
 800c6a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2204      	movs	r2, #4
 800c6ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	2100      	movs	r1, #0
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f003 f9d8 	bl	800fa6e <USBD_LL_Transmit>

  return USBD_OK;
 800c6be:	2300      	movs	r3, #0
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3708      	adds	r7, #8
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}

0800c6c8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b082      	sub	sp, #8
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2205      	movs	r2, #5
 800c6d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c6d8:	2300      	movs	r3, #0
 800c6da:	2200      	movs	r2, #0
 800c6dc:	2100      	movs	r1, #0
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f003 f9e6 	bl	800fab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c6e4:	2300      	movs	r3, #0
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3708      	adds	r7, #8
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}
	...

0800c6f0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b084      	sub	sp, #16
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c6fa:	79fb      	ldrb	r3, [r7, #7]
 800c6fc:	4a08      	ldr	r2, [pc, #32]	; (800c720 <disk_status+0x30>)
 800c6fe:	009b      	lsls	r3, r3, #2
 800c700:	4413      	add	r3, r2
 800c702:	685b      	ldr	r3, [r3, #4]
 800c704:	685b      	ldr	r3, [r3, #4]
 800c706:	79fa      	ldrb	r2, [r7, #7]
 800c708:	4905      	ldr	r1, [pc, #20]	; (800c720 <disk_status+0x30>)
 800c70a:	440a      	add	r2, r1
 800c70c:	7a12      	ldrb	r2, [r2, #8]
 800c70e:	4610      	mov	r0, r2
 800c710:	4798      	blx	r3
 800c712:	4603      	mov	r3, r0
 800c714:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c716:	7bfb      	ldrb	r3, [r7, #15]
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3710      	adds	r7, #16
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}
 800c720:	200008fc 	.word	0x200008fc

0800c724 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b084      	sub	sp, #16
 800c728:	af00      	add	r7, sp, #0
 800c72a:	4603      	mov	r3, r0
 800c72c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c72e:	2300      	movs	r3, #0
 800c730:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c732:	79fb      	ldrb	r3, [r7, #7]
 800c734:	4a0d      	ldr	r2, [pc, #52]	; (800c76c <disk_initialize+0x48>)
 800c736:	5cd3      	ldrb	r3, [r2, r3]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d111      	bne.n	800c760 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c73c:	79fb      	ldrb	r3, [r7, #7]
 800c73e:	4a0b      	ldr	r2, [pc, #44]	; (800c76c <disk_initialize+0x48>)
 800c740:	2101      	movs	r1, #1
 800c742:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c744:	79fb      	ldrb	r3, [r7, #7]
 800c746:	4a09      	ldr	r2, [pc, #36]	; (800c76c <disk_initialize+0x48>)
 800c748:	009b      	lsls	r3, r3, #2
 800c74a:	4413      	add	r3, r2
 800c74c:	685b      	ldr	r3, [r3, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	79fa      	ldrb	r2, [r7, #7]
 800c752:	4906      	ldr	r1, [pc, #24]	; (800c76c <disk_initialize+0x48>)
 800c754:	440a      	add	r2, r1
 800c756:	7a12      	ldrb	r2, [r2, #8]
 800c758:	4610      	mov	r0, r2
 800c75a:	4798      	blx	r3
 800c75c:	4603      	mov	r3, r0
 800c75e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c760:	7bfb      	ldrb	r3, [r7, #15]
}
 800c762:	4618      	mov	r0, r3
 800c764:	3710      	adds	r7, #16
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}
 800c76a:	bf00      	nop
 800c76c:	200008fc 	.word	0x200008fc

0800c770 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c770:	b590      	push	{r4, r7, lr}
 800c772:	b087      	sub	sp, #28
 800c774:	af00      	add	r7, sp, #0
 800c776:	60b9      	str	r1, [r7, #8]
 800c778:	607a      	str	r2, [r7, #4]
 800c77a:	603b      	str	r3, [r7, #0]
 800c77c:	4603      	mov	r3, r0
 800c77e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c780:	7bfb      	ldrb	r3, [r7, #15]
 800c782:	4a0a      	ldr	r2, [pc, #40]	; (800c7ac <disk_read+0x3c>)
 800c784:	009b      	lsls	r3, r3, #2
 800c786:	4413      	add	r3, r2
 800c788:	685b      	ldr	r3, [r3, #4]
 800c78a:	689c      	ldr	r4, [r3, #8]
 800c78c:	7bfb      	ldrb	r3, [r7, #15]
 800c78e:	4a07      	ldr	r2, [pc, #28]	; (800c7ac <disk_read+0x3c>)
 800c790:	4413      	add	r3, r2
 800c792:	7a18      	ldrb	r0, [r3, #8]
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	687a      	ldr	r2, [r7, #4]
 800c798:	68b9      	ldr	r1, [r7, #8]
 800c79a:	47a0      	blx	r4
 800c79c:	4603      	mov	r3, r0
 800c79e:	75fb      	strb	r3, [r7, #23]
  return res;
 800c7a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	371c      	adds	r7, #28
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd90      	pop	{r4, r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	200008fc 	.word	0x200008fc

0800c7b0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c7b0:	b590      	push	{r4, r7, lr}
 800c7b2:	b087      	sub	sp, #28
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	60b9      	str	r1, [r7, #8]
 800c7b8:	607a      	str	r2, [r7, #4]
 800c7ba:	603b      	str	r3, [r7, #0]
 800c7bc:	4603      	mov	r3, r0
 800c7be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c7c0:	7bfb      	ldrb	r3, [r7, #15]
 800c7c2:	4a0a      	ldr	r2, [pc, #40]	; (800c7ec <disk_write+0x3c>)
 800c7c4:	009b      	lsls	r3, r3, #2
 800c7c6:	4413      	add	r3, r2
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	68dc      	ldr	r4, [r3, #12]
 800c7cc:	7bfb      	ldrb	r3, [r7, #15]
 800c7ce:	4a07      	ldr	r2, [pc, #28]	; (800c7ec <disk_write+0x3c>)
 800c7d0:	4413      	add	r3, r2
 800c7d2:	7a18      	ldrb	r0, [r3, #8]
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	687a      	ldr	r2, [r7, #4]
 800c7d8:	68b9      	ldr	r1, [r7, #8]
 800c7da:	47a0      	blx	r4
 800c7dc:	4603      	mov	r3, r0
 800c7de:	75fb      	strb	r3, [r7, #23]
  return res;
 800c7e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	371c      	adds	r7, #28
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd90      	pop	{r4, r7, pc}
 800c7ea:	bf00      	nop
 800c7ec:	200008fc 	.word	0x200008fc

0800c7f0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	603a      	str	r2, [r7, #0]
 800c7fa:	71fb      	strb	r3, [r7, #7]
 800c7fc:	460b      	mov	r3, r1
 800c7fe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c800:	79fb      	ldrb	r3, [r7, #7]
 800c802:	4a09      	ldr	r2, [pc, #36]	; (800c828 <disk_ioctl+0x38>)
 800c804:	009b      	lsls	r3, r3, #2
 800c806:	4413      	add	r3, r2
 800c808:	685b      	ldr	r3, [r3, #4]
 800c80a:	691b      	ldr	r3, [r3, #16]
 800c80c:	79fa      	ldrb	r2, [r7, #7]
 800c80e:	4906      	ldr	r1, [pc, #24]	; (800c828 <disk_ioctl+0x38>)
 800c810:	440a      	add	r2, r1
 800c812:	7a10      	ldrb	r0, [r2, #8]
 800c814:	79b9      	ldrb	r1, [r7, #6]
 800c816:	683a      	ldr	r2, [r7, #0]
 800c818:	4798      	blx	r3
 800c81a:	4603      	mov	r3, r0
 800c81c:	73fb      	strb	r3, [r7, #15]
  return res;
 800c81e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c820:	4618      	mov	r0, r3
 800c822:	3710      	adds	r7, #16
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}
 800c828:	200008fc 	.word	0x200008fc

0800c82c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c82c:	b480      	push	{r7}
 800c82e:	b085      	sub	sp, #20
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	3301      	adds	r3, #1
 800c838:	781b      	ldrb	r3, [r3, #0]
 800c83a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c83c:	89fb      	ldrh	r3, [r7, #14]
 800c83e:	021b      	lsls	r3, r3, #8
 800c840:	b21a      	sxth	r2, r3
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	781b      	ldrb	r3, [r3, #0]
 800c846:	b21b      	sxth	r3, r3
 800c848:	4313      	orrs	r3, r2
 800c84a:	b21b      	sxth	r3, r3
 800c84c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c84e:	89fb      	ldrh	r3, [r7, #14]
}
 800c850:	4618      	mov	r0, r3
 800c852:	3714      	adds	r7, #20
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr

0800c85c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c85c:	b480      	push	{r7}
 800c85e:	b085      	sub	sp, #20
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	3303      	adds	r3, #3
 800c868:	781b      	ldrb	r3, [r3, #0]
 800c86a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	021b      	lsls	r3, r3, #8
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	3202      	adds	r2, #2
 800c874:	7812      	ldrb	r2, [r2, #0]
 800c876:	4313      	orrs	r3, r2
 800c878:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	021b      	lsls	r3, r3, #8
 800c87e:	687a      	ldr	r2, [r7, #4]
 800c880:	3201      	adds	r2, #1
 800c882:	7812      	ldrb	r2, [r2, #0]
 800c884:	4313      	orrs	r3, r2
 800c886:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	021b      	lsls	r3, r3, #8
 800c88c:	687a      	ldr	r2, [r7, #4]
 800c88e:	7812      	ldrb	r2, [r2, #0]
 800c890:	4313      	orrs	r3, r2
 800c892:	60fb      	str	r3, [r7, #12]
	return rv;
 800c894:	68fb      	ldr	r3, [r7, #12]
}
 800c896:	4618      	mov	r0, r3
 800c898:	3714      	adds	r7, #20
 800c89a:	46bd      	mov	sp, r7
 800c89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a0:	4770      	bx	lr

0800c8a2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c8a2:	b480      	push	{r7}
 800c8a4:	b083      	sub	sp, #12
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	6078      	str	r0, [r7, #4]
 800c8aa:	460b      	mov	r3, r1
 800c8ac:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	1c5a      	adds	r2, r3, #1
 800c8b2:	607a      	str	r2, [r7, #4]
 800c8b4:	887a      	ldrh	r2, [r7, #2]
 800c8b6:	b2d2      	uxtb	r2, r2
 800c8b8:	701a      	strb	r2, [r3, #0]
 800c8ba:	887b      	ldrh	r3, [r7, #2]
 800c8bc:	0a1b      	lsrs	r3, r3, #8
 800c8be:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	1c5a      	adds	r2, r3, #1
 800c8c4:	607a      	str	r2, [r7, #4]
 800c8c6:	887a      	ldrh	r2, [r7, #2]
 800c8c8:	b2d2      	uxtb	r2, r2
 800c8ca:	701a      	strb	r2, [r3, #0]
}
 800c8cc:	bf00      	nop
 800c8ce:	370c      	adds	r7, #12
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d6:	4770      	bx	lr

0800c8d8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b083      	sub	sp, #12
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
 800c8e0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	1c5a      	adds	r2, r3, #1
 800c8e6:	607a      	str	r2, [r7, #4]
 800c8e8:	683a      	ldr	r2, [r7, #0]
 800c8ea:	b2d2      	uxtb	r2, r2
 800c8ec:	701a      	strb	r2, [r3, #0]
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	0a1b      	lsrs	r3, r3, #8
 800c8f2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	1c5a      	adds	r2, r3, #1
 800c8f8:	607a      	str	r2, [r7, #4]
 800c8fa:	683a      	ldr	r2, [r7, #0]
 800c8fc:	b2d2      	uxtb	r2, r2
 800c8fe:	701a      	strb	r2, [r3, #0]
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	0a1b      	lsrs	r3, r3, #8
 800c904:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	1c5a      	adds	r2, r3, #1
 800c90a:	607a      	str	r2, [r7, #4]
 800c90c:	683a      	ldr	r2, [r7, #0]
 800c90e:	b2d2      	uxtb	r2, r2
 800c910:	701a      	strb	r2, [r3, #0]
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	0a1b      	lsrs	r3, r3, #8
 800c916:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	1c5a      	adds	r2, r3, #1
 800c91c:	607a      	str	r2, [r7, #4]
 800c91e:	683a      	ldr	r2, [r7, #0]
 800c920:	b2d2      	uxtb	r2, r2
 800c922:	701a      	strb	r2, [r3, #0]
}
 800c924:	bf00      	nop
 800c926:	370c      	adds	r7, #12
 800c928:	46bd      	mov	sp, r7
 800c92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92e:	4770      	bx	lr

0800c930 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c930:	b480      	push	{r7}
 800c932:	b087      	sub	sp, #28
 800c934:	af00      	add	r7, sp, #0
 800c936:	60f8      	str	r0, [r7, #12]
 800c938:	60b9      	str	r1, [r7, #8]
 800c93a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d00d      	beq.n	800c966 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c94a:	693a      	ldr	r2, [r7, #16]
 800c94c:	1c53      	adds	r3, r2, #1
 800c94e:	613b      	str	r3, [r7, #16]
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	1c59      	adds	r1, r3, #1
 800c954:	6179      	str	r1, [r7, #20]
 800c956:	7812      	ldrb	r2, [r2, #0]
 800c958:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	3b01      	subs	r3, #1
 800c95e:	607b      	str	r3, [r7, #4]
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d1f1      	bne.n	800c94a <mem_cpy+0x1a>
	}
}
 800c966:	bf00      	nop
 800c968:	371c      	adds	r7, #28
 800c96a:	46bd      	mov	sp, r7
 800c96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c970:	4770      	bx	lr

0800c972 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c972:	b480      	push	{r7}
 800c974:	b087      	sub	sp, #28
 800c976:	af00      	add	r7, sp, #0
 800c978:	60f8      	str	r0, [r7, #12]
 800c97a:	60b9      	str	r1, [r7, #8]
 800c97c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	1c5a      	adds	r2, r3, #1
 800c986:	617a      	str	r2, [r7, #20]
 800c988:	68ba      	ldr	r2, [r7, #8]
 800c98a:	b2d2      	uxtb	r2, r2
 800c98c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	3b01      	subs	r3, #1
 800c992:	607b      	str	r3, [r7, #4]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d1f3      	bne.n	800c982 <mem_set+0x10>
}
 800c99a:	bf00      	nop
 800c99c:	bf00      	nop
 800c99e:	371c      	adds	r7, #28
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a6:	4770      	bx	lr

0800c9a8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c9a8:	b480      	push	{r7}
 800c9aa:	b089      	sub	sp, #36	; 0x24
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	60f8      	str	r0, [r7, #12]
 800c9b0:	60b9      	str	r1, [r7, #8]
 800c9b2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	61fb      	str	r3, [r7, #28]
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c9bc:	2300      	movs	r3, #0
 800c9be:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c9c0:	69fb      	ldr	r3, [r7, #28]
 800c9c2:	1c5a      	adds	r2, r3, #1
 800c9c4:	61fa      	str	r2, [r7, #28]
 800c9c6:	781b      	ldrb	r3, [r3, #0]
 800c9c8:	4619      	mov	r1, r3
 800c9ca:	69bb      	ldr	r3, [r7, #24]
 800c9cc:	1c5a      	adds	r2, r3, #1
 800c9ce:	61ba      	str	r2, [r7, #24]
 800c9d0:	781b      	ldrb	r3, [r3, #0]
 800c9d2:	1acb      	subs	r3, r1, r3
 800c9d4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	3b01      	subs	r3, #1
 800c9da:	607b      	str	r3, [r7, #4]
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d002      	beq.n	800c9e8 <mem_cmp+0x40>
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d0eb      	beq.n	800c9c0 <mem_cmp+0x18>

	return r;
 800c9e8:	697b      	ldr	r3, [r7, #20]
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3724      	adds	r7, #36	; 0x24
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f4:	4770      	bx	lr

0800c9f6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c9f6:	b480      	push	{r7}
 800c9f8:	b083      	sub	sp, #12
 800c9fa:	af00      	add	r7, sp, #0
 800c9fc:	6078      	str	r0, [r7, #4]
 800c9fe:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ca00:	e002      	b.n	800ca08 <chk_chr+0x12>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	3301      	adds	r3, #1
 800ca06:	607b      	str	r3, [r7, #4]
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	781b      	ldrb	r3, [r3, #0]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d005      	beq.n	800ca1c <chk_chr+0x26>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	781b      	ldrb	r3, [r3, #0]
 800ca14:	461a      	mov	r2, r3
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	4293      	cmp	r3, r2
 800ca1a:	d1f2      	bne.n	800ca02 <chk_chr+0xc>
	return *str;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	781b      	ldrb	r3, [r3, #0]
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	370c      	adds	r7, #12
 800ca24:	46bd      	mov	sp, r7
 800ca26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2a:	4770      	bx	lr

0800ca2c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b085      	sub	sp, #20
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
 800ca34:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ca36:	2300      	movs	r3, #0
 800ca38:	60bb      	str	r3, [r7, #8]
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	60fb      	str	r3, [r7, #12]
 800ca3e:	e029      	b.n	800ca94 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ca40:	4a27      	ldr	r2, [pc, #156]	; (800cae0 <chk_lock+0xb4>)
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	011b      	lsls	r3, r3, #4
 800ca46:	4413      	add	r3, r2
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d01d      	beq.n	800ca8a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ca4e:	4a24      	ldr	r2, [pc, #144]	; (800cae0 <chk_lock+0xb4>)
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	011b      	lsls	r3, r3, #4
 800ca54:	4413      	add	r3, r2
 800ca56:	681a      	ldr	r2, [r3, #0]
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	d116      	bne.n	800ca8e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ca60:	4a1f      	ldr	r2, [pc, #124]	; (800cae0 <chk_lock+0xb4>)
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	011b      	lsls	r3, r3, #4
 800ca66:	4413      	add	r3, r2
 800ca68:	3304      	adds	r3, #4
 800ca6a:	681a      	ldr	r2, [r3, #0]
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d10c      	bne.n	800ca8e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ca74:	4a1a      	ldr	r2, [pc, #104]	; (800cae0 <chk_lock+0xb4>)
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	011b      	lsls	r3, r3, #4
 800ca7a:	4413      	add	r3, r2
 800ca7c:	3308      	adds	r3, #8
 800ca7e:	681a      	ldr	r2, [r3, #0]
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ca84:	429a      	cmp	r2, r3
 800ca86:	d102      	bne.n	800ca8e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ca88:	e007      	b.n	800ca9a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	3301      	adds	r3, #1
 800ca92:	60fb      	str	r3, [r7, #12]
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	2b01      	cmp	r3, #1
 800ca98:	d9d2      	bls.n	800ca40 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	2b02      	cmp	r3, #2
 800ca9e:	d109      	bne.n	800cab4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d102      	bne.n	800caac <chk_lock+0x80>
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	2b02      	cmp	r3, #2
 800caaa:	d101      	bne.n	800cab0 <chk_lock+0x84>
 800caac:	2300      	movs	r3, #0
 800caae:	e010      	b.n	800cad2 <chk_lock+0xa6>
 800cab0:	2312      	movs	r3, #18
 800cab2:	e00e      	b.n	800cad2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d108      	bne.n	800cacc <chk_lock+0xa0>
 800caba:	4a09      	ldr	r2, [pc, #36]	; (800cae0 <chk_lock+0xb4>)
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	011b      	lsls	r3, r3, #4
 800cac0:	4413      	add	r3, r2
 800cac2:	330c      	adds	r3, #12
 800cac4:	881b      	ldrh	r3, [r3, #0]
 800cac6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800caca:	d101      	bne.n	800cad0 <chk_lock+0xa4>
 800cacc:	2310      	movs	r3, #16
 800cace:	e000      	b.n	800cad2 <chk_lock+0xa6>
 800cad0:	2300      	movs	r3, #0
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3714      	adds	r7, #20
 800cad6:	46bd      	mov	sp, r7
 800cad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cadc:	4770      	bx	lr
 800cade:	bf00      	nop
 800cae0:	200008dc 	.word	0x200008dc

0800cae4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800cae4:	b480      	push	{r7}
 800cae6:	b083      	sub	sp, #12
 800cae8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800caea:	2300      	movs	r3, #0
 800caec:	607b      	str	r3, [r7, #4]
 800caee:	e002      	b.n	800caf6 <enq_lock+0x12>
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	3301      	adds	r3, #1
 800caf4:	607b      	str	r3, [r7, #4]
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	d806      	bhi.n	800cb0a <enq_lock+0x26>
 800cafc:	4a09      	ldr	r2, [pc, #36]	; (800cb24 <enq_lock+0x40>)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	011b      	lsls	r3, r3, #4
 800cb02:	4413      	add	r3, r2
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d1f2      	bne.n	800caf0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2b02      	cmp	r3, #2
 800cb0e:	bf14      	ite	ne
 800cb10:	2301      	movne	r3, #1
 800cb12:	2300      	moveq	r3, #0
 800cb14:	b2db      	uxtb	r3, r3
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	370c      	adds	r7, #12
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb20:	4770      	bx	lr
 800cb22:	bf00      	nop
 800cb24:	200008dc 	.word	0x200008dc

0800cb28 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b085      	sub	sp, #20
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
 800cb30:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cb32:	2300      	movs	r3, #0
 800cb34:	60fb      	str	r3, [r7, #12]
 800cb36:	e01f      	b.n	800cb78 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800cb38:	4a41      	ldr	r2, [pc, #260]	; (800cc40 <inc_lock+0x118>)
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	011b      	lsls	r3, r3, #4
 800cb3e:	4413      	add	r3, r2
 800cb40:	681a      	ldr	r2, [r3, #0]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	429a      	cmp	r2, r3
 800cb48:	d113      	bne.n	800cb72 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800cb4a:	4a3d      	ldr	r2, [pc, #244]	; (800cc40 <inc_lock+0x118>)
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	011b      	lsls	r3, r3, #4
 800cb50:	4413      	add	r3, r2
 800cb52:	3304      	adds	r3, #4
 800cb54:	681a      	ldr	r2, [r3, #0]
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	d109      	bne.n	800cb72 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800cb5e:	4a38      	ldr	r2, [pc, #224]	; (800cc40 <inc_lock+0x118>)
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	011b      	lsls	r3, r3, #4
 800cb64:	4413      	add	r3, r2
 800cb66:	3308      	adds	r3, #8
 800cb68:	681a      	ldr	r2, [r3, #0]
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	d006      	beq.n	800cb80 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	3301      	adds	r3, #1
 800cb76:	60fb      	str	r3, [r7, #12]
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	2b01      	cmp	r3, #1
 800cb7c:	d9dc      	bls.n	800cb38 <inc_lock+0x10>
 800cb7e:	e000      	b.n	800cb82 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800cb80:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	2b02      	cmp	r3, #2
 800cb86:	d132      	bne.n	800cbee <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	60fb      	str	r3, [r7, #12]
 800cb8c:	e002      	b.n	800cb94 <inc_lock+0x6c>
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	3301      	adds	r3, #1
 800cb92:	60fb      	str	r3, [r7, #12]
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	2b01      	cmp	r3, #1
 800cb98:	d806      	bhi.n	800cba8 <inc_lock+0x80>
 800cb9a:	4a29      	ldr	r2, [pc, #164]	; (800cc40 <inc_lock+0x118>)
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	011b      	lsls	r3, r3, #4
 800cba0:	4413      	add	r3, r2
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d1f2      	bne.n	800cb8e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	2b02      	cmp	r3, #2
 800cbac:	d101      	bne.n	800cbb2 <inc_lock+0x8a>
 800cbae:	2300      	movs	r3, #0
 800cbb0:	e040      	b.n	800cc34 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681a      	ldr	r2, [r3, #0]
 800cbb6:	4922      	ldr	r1, [pc, #136]	; (800cc40 <inc_lock+0x118>)
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	011b      	lsls	r3, r3, #4
 800cbbc:	440b      	add	r3, r1
 800cbbe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	689a      	ldr	r2, [r3, #8]
 800cbc4:	491e      	ldr	r1, [pc, #120]	; (800cc40 <inc_lock+0x118>)
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	011b      	lsls	r3, r3, #4
 800cbca:	440b      	add	r3, r1
 800cbcc:	3304      	adds	r3, #4
 800cbce:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	695a      	ldr	r2, [r3, #20]
 800cbd4:	491a      	ldr	r1, [pc, #104]	; (800cc40 <inc_lock+0x118>)
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	011b      	lsls	r3, r3, #4
 800cbda:	440b      	add	r3, r1
 800cbdc:	3308      	adds	r3, #8
 800cbde:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800cbe0:	4a17      	ldr	r2, [pc, #92]	; (800cc40 <inc_lock+0x118>)
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	011b      	lsls	r3, r3, #4
 800cbe6:	4413      	add	r3, r2
 800cbe8:	330c      	adds	r3, #12
 800cbea:	2200      	movs	r2, #0
 800cbec:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d009      	beq.n	800cc08 <inc_lock+0xe0>
 800cbf4:	4a12      	ldr	r2, [pc, #72]	; (800cc40 <inc_lock+0x118>)
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	011b      	lsls	r3, r3, #4
 800cbfa:	4413      	add	r3, r2
 800cbfc:	330c      	adds	r3, #12
 800cbfe:	881b      	ldrh	r3, [r3, #0]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d001      	beq.n	800cc08 <inc_lock+0xe0>
 800cc04:	2300      	movs	r3, #0
 800cc06:	e015      	b.n	800cc34 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d108      	bne.n	800cc20 <inc_lock+0xf8>
 800cc0e:	4a0c      	ldr	r2, [pc, #48]	; (800cc40 <inc_lock+0x118>)
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	011b      	lsls	r3, r3, #4
 800cc14:	4413      	add	r3, r2
 800cc16:	330c      	adds	r3, #12
 800cc18:	881b      	ldrh	r3, [r3, #0]
 800cc1a:	3301      	adds	r3, #1
 800cc1c:	b29a      	uxth	r2, r3
 800cc1e:	e001      	b.n	800cc24 <inc_lock+0xfc>
 800cc20:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cc24:	4906      	ldr	r1, [pc, #24]	; (800cc40 <inc_lock+0x118>)
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	011b      	lsls	r3, r3, #4
 800cc2a:	440b      	add	r3, r1
 800cc2c:	330c      	adds	r3, #12
 800cc2e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	3301      	adds	r3, #1
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	3714      	adds	r7, #20
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3e:	4770      	bx	lr
 800cc40:	200008dc 	.word	0x200008dc

0800cc44 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800cc44:	b480      	push	{r7}
 800cc46:	b085      	sub	sp, #20
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	3b01      	subs	r3, #1
 800cc50:	607b      	str	r3, [r7, #4]
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2b01      	cmp	r3, #1
 800cc56:	d825      	bhi.n	800cca4 <dec_lock+0x60>
		n = Files[i].ctr;
 800cc58:	4a17      	ldr	r2, [pc, #92]	; (800ccb8 <dec_lock+0x74>)
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	011b      	lsls	r3, r3, #4
 800cc5e:	4413      	add	r3, r2
 800cc60:	330c      	adds	r3, #12
 800cc62:	881b      	ldrh	r3, [r3, #0]
 800cc64:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800cc66:	89fb      	ldrh	r3, [r7, #14]
 800cc68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc6c:	d101      	bne.n	800cc72 <dec_lock+0x2e>
 800cc6e:	2300      	movs	r3, #0
 800cc70:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800cc72:	89fb      	ldrh	r3, [r7, #14]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d002      	beq.n	800cc7e <dec_lock+0x3a>
 800cc78:	89fb      	ldrh	r3, [r7, #14]
 800cc7a:	3b01      	subs	r3, #1
 800cc7c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800cc7e:	4a0e      	ldr	r2, [pc, #56]	; (800ccb8 <dec_lock+0x74>)
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	011b      	lsls	r3, r3, #4
 800cc84:	4413      	add	r3, r2
 800cc86:	330c      	adds	r3, #12
 800cc88:	89fa      	ldrh	r2, [r7, #14]
 800cc8a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800cc8c:	89fb      	ldrh	r3, [r7, #14]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d105      	bne.n	800cc9e <dec_lock+0x5a>
 800cc92:	4a09      	ldr	r2, [pc, #36]	; (800ccb8 <dec_lock+0x74>)
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	011b      	lsls	r3, r3, #4
 800cc98:	4413      	add	r3, r2
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	737b      	strb	r3, [r7, #13]
 800cca2:	e001      	b.n	800cca8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800cca4:	2302      	movs	r3, #2
 800cca6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800cca8:	7b7b      	ldrb	r3, [r7, #13]
}
 800ccaa:	4618      	mov	r0, r3
 800ccac:	3714      	adds	r7, #20
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb4:	4770      	bx	lr
 800ccb6:	bf00      	nop
 800ccb8:	200008dc 	.word	0x200008dc

0800ccbc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b085      	sub	sp, #20
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	60fb      	str	r3, [r7, #12]
 800ccc8:	e010      	b.n	800ccec <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ccca:	4a0d      	ldr	r2, [pc, #52]	; (800cd00 <clear_lock+0x44>)
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	011b      	lsls	r3, r3, #4
 800ccd0:	4413      	add	r3, r2
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	687a      	ldr	r2, [r7, #4]
 800ccd6:	429a      	cmp	r2, r3
 800ccd8:	d105      	bne.n	800cce6 <clear_lock+0x2a>
 800ccda:	4a09      	ldr	r2, [pc, #36]	; (800cd00 <clear_lock+0x44>)
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	011b      	lsls	r3, r3, #4
 800cce0:	4413      	add	r3, r2
 800cce2:	2200      	movs	r2, #0
 800cce4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	3301      	adds	r3, #1
 800ccea:	60fb      	str	r3, [r7, #12]
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	2b01      	cmp	r3, #1
 800ccf0:	d9eb      	bls.n	800ccca <clear_lock+0xe>
	}
}
 800ccf2:	bf00      	nop
 800ccf4:	bf00      	nop
 800ccf6:	3714      	adds	r7, #20
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfe:	4770      	bx	lr
 800cd00:	200008dc 	.word	0x200008dc

0800cd04 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b086      	sub	sp, #24
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	78db      	ldrb	r3, [r3, #3]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d034      	beq.n	800cd82 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd1c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	7858      	ldrb	r0, [r3, #1]
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cd28:	2301      	movs	r3, #1
 800cd2a:	697a      	ldr	r2, [r7, #20]
 800cd2c:	f7ff fd40 	bl	800c7b0 <disk_write>
 800cd30:	4603      	mov	r3, r0
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d002      	beq.n	800cd3c <sync_window+0x38>
			res = FR_DISK_ERR;
 800cd36:	2301      	movs	r3, #1
 800cd38:	73fb      	strb	r3, [r7, #15]
 800cd3a:	e022      	b.n	800cd82 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6a1b      	ldr	r3, [r3, #32]
 800cd46:	697a      	ldr	r2, [r7, #20]
 800cd48:	1ad2      	subs	r2, r2, r3
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	699b      	ldr	r3, [r3, #24]
 800cd4e:	429a      	cmp	r2, r3
 800cd50:	d217      	bcs.n	800cd82 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	789b      	ldrb	r3, [r3, #2]
 800cd56:	613b      	str	r3, [r7, #16]
 800cd58:	e010      	b.n	800cd7c <sync_window+0x78>
					wsect += fs->fsize;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	699b      	ldr	r3, [r3, #24]
 800cd5e:	697a      	ldr	r2, [r7, #20]
 800cd60:	4413      	add	r3, r2
 800cd62:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	7858      	ldrb	r0, [r3, #1]
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cd6e:	2301      	movs	r3, #1
 800cd70:	697a      	ldr	r2, [r7, #20]
 800cd72:	f7ff fd1d 	bl	800c7b0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cd76:	693b      	ldr	r3, [r7, #16]
 800cd78:	3b01      	subs	r3, #1
 800cd7a:	613b      	str	r3, [r7, #16]
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	2b01      	cmp	r3, #1
 800cd80:	d8eb      	bhi.n	800cd5a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800cd82:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd84:	4618      	mov	r0, r3
 800cd86:	3718      	adds	r7, #24
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bd80      	pop	{r7, pc}

0800cd8c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b084      	sub	sp, #16
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
 800cd94:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800cd96:	2300      	movs	r3, #0
 800cd98:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd9e:	683a      	ldr	r2, [r7, #0]
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d01b      	beq.n	800cddc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f7ff ffad 	bl	800cd04 <sync_window>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cdae:	7bfb      	ldrb	r3, [r7, #15]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d113      	bne.n	800cddc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	7858      	ldrb	r0, [r3, #1]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	683a      	ldr	r2, [r7, #0]
 800cdc2:	f7ff fcd5 	bl	800c770 <disk_read>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d004      	beq.n	800cdd6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cdcc:	f04f 33ff 	mov.w	r3, #4294967295
 800cdd0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	683a      	ldr	r2, [r7, #0]
 800cdda:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800cddc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3710      	adds	r7, #16
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}
	...

0800cde8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b084      	sub	sp, #16
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f7ff ff87 	bl	800cd04 <sync_window>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cdfa:	7bfb      	ldrb	r3, [r7, #15]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d158      	bne.n	800ceb2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	781b      	ldrb	r3, [r3, #0]
 800ce04:	2b03      	cmp	r3, #3
 800ce06:	d148      	bne.n	800ce9a <sync_fs+0xb2>
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	791b      	ldrb	r3, [r3, #4]
 800ce0c:	2b01      	cmp	r3, #1
 800ce0e:	d144      	bne.n	800ce9a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	3330      	adds	r3, #48	; 0x30
 800ce14:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ce18:	2100      	movs	r1, #0
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f7ff fda9 	bl	800c972 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	3330      	adds	r3, #48	; 0x30
 800ce24:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ce28:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f7ff fd38 	bl	800c8a2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	3330      	adds	r3, #48	; 0x30
 800ce36:	4921      	ldr	r1, [pc, #132]	; (800cebc <sync_fs+0xd4>)
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f7ff fd4d 	bl	800c8d8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	3330      	adds	r3, #48	; 0x30
 800ce42:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ce46:	491e      	ldr	r1, [pc, #120]	; (800cec0 <sync_fs+0xd8>)
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f7ff fd45 	bl	800c8d8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	3330      	adds	r3, #48	; 0x30
 800ce52:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	691b      	ldr	r3, [r3, #16]
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	4610      	mov	r0, r2
 800ce5e:	f7ff fd3b 	bl	800c8d8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	3330      	adds	r3, #48	; 0x30
 800ce66:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	68db      	ldr	r3, [r3, #12]
 800ce6e:	4619      	mov	r1, r3
 800ce70:	4610      	mov	r0, r2
 800ce72:	f7ff fd31 	bl	800c8d8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	69db      	ldr	r3, [r3, #28]
 800ce7a:	1c5a      	adds	r2, r3, #1
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	7858      	ldrb	r0, [r3, #1]
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce8e:	2301      	movs	r3, #1
 800ce90:	f7ff fc8e 	bl	800c7b0 <disk_write>
			fs->fsi_flag = 0;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2200      	movs	r2, #0
 800ce98:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	785b      	ldrb	r3, [r3, #1]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	2100      	movs	r1, #0
 800cea2:	4618      	mov	r0, r3
 800cea4:	f7ff fca4 	bl	800c7f0 <disk_ioctl>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d001      	beq.n	800ceb2 <sync_fs+0xca>
 800ceae:	2301      	movs	r3, #1
 800ceb0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ceb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3710      	adds	r7, #16
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}
 800cebc:	41615252 	.word	0x41615252
 800cec0:	61417272 	.word	0x61417272

0800cec4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800cec4:	b480      	push	{r7}
 800cec6:	b083      	sub	sp, #12
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
 800cecc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	3b02      	subs	r3, #2
 800ced2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	695b      	ldr	r3, [r3, #20]
 800ced8:	3b02      	subs	r3, #2
 800ceda:	683a      	ldr	r2, [r7, #0]
 800cedc:	429a      	cmp	r2, r3
 800cede:	d301      	bcc.n	800cee4 <clust2sect+0x20>
 800cee0:	2300      	movs	r3, #0
 800cee2:	e008      	b.n	800cef6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	895b      	ldrh	r3, [r3, #10]
 800cee8:	461a      	mov	r2, r3
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	fb03 f202 	mul.w	r2, r3, r2
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cef4:	4413      	add	r3, r2
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	370c      	adds	r7, #12
 800cefa:	46bd      	mov	sp, r7
 800cefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf00:	4770      	bx	lr

0800cf02 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800cf02:	b580      	push	{r7, lr}
 800cf04:	b086      	sub	sp, #24
 800cf06:	af00      	add	r7, sp, #0
 800cf08:	6078      	str	r0, [r7, #4]
 800cf0a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	2b01      	cmp	r3, #1
 800cf16:	d904      	bls.n	800cf22 <get_fat+0x20>
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	695b      	ldr	r3, [r3, #20]
 800cf1c:	683a      	ldr	r2, [r7, #0]
 800cf1e:	429a      	cmp	r2, r3
 800cf20:	d302      	bcc.n	800cf28 <get_fat+0x26>
		val = 1;	/* Internal error */
 800cf22:	2301      	movs	r3, #1
 800cf24:	617b      	str	r3, [r7, #20]
 800cf26:	e08f      	b.n	800d048 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cf28:	f04f 33ff 	mov.w	r3, #4294967295
 800cf2c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	781b      	ldrb	r3, [r3, #0]
 800cf32:	2b03      	cmp	r3, #3
 800cf34:	d062      	beq.n	800cffc <get_fat+0xfa>
 800cf36:	2b03      	cmp	r3, #3
 800cf38:	dc7c      	bgt.n	800d034 <get_fat+0x132>
 800cf3a:	2b01      	cmp	r3, #1
 800cf3c:	d002      	beq.n	800cf44 <get_fat+0x42>
 800cf3e:	2b02      	cmp	r3, #2
 800cf40:	d042      	beq.n	800cfc8 <get_fat+0xc6>
 800cf42:	e077      	b.n	800d034 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	60fb      	str	r3, [r7, #12]
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	085b      	lsrs	r3, r3, #1
 800cf4c:	68fa      	ldr	r2, [r7, #12]
 800cf4e:	4413      	add	r3, r2
 800cf50:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	6a1a      	ldr	r2, [r3, #32]
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	0a5b      	lsrs	r3, r3, #9
 800cf5a:	4413      	add	r3, r2
 800cf5c:	4619      	mov	r1, r3
 800cf5e:	6938      	ldr	r0, [r7, #16]
 800cf60:	f7ff ff14 	bl	800cd8c <move_window>
 800cf64:	4603      	mov	r3, r0
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d167      	bne.n	800d03a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	1c5a      	adds	r2, r3, #1
 800cf6e:	60fa      	str	r2, [r7, #12]
 800cf70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf74:	693a      	ldr	r2, [r7, #16]
 800cf76:	4413      	add	r3, r2
 800cf78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cf7c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	6a1a      	ldr	r2, [r3, #32]
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	0a5b      	lsrs	r3, r3, #9
 800cf86:	4413      	add	r3, r2
 800cf88:	4619      	mov	r1, r3
 800cf8a:	6938      	ldr	r0, [r7, #16]
 800cf8c:	f7ff fefe 	bl	800cd8c <move_window>
 800cf90:	4603      	mov	r3, r0
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d153      	bne.n	800d03e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf9c:	693a      	ldr	r2, [r7, #16]
 800cf9e:	4413      	add	r3, r2
 800cfa0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cfa4:	021b      	lsls	r3, r3, #8
 800cfa6:	461a      	mov	r2, r3
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	4313      	orrs	r3, r2
 800cfac:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	f003 0301 	and.w	r3, r3, #1
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d002      	beq.n	800cfbe <get_fat+0xbc>
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	091b      	lsrs	r3, r3, #4
 800cfbc:	e002      	b.n	800cfc4 <get_fat+0xc2>
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cfc4:	617b      	str	r3, [r7, #20]
			break;
 800cfc6:	e03f      	b.n	800d048 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	6a1a      	ldr	r2, [r3, #32]
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	0a1b      	lsrs	r3, r3, #8
 800cfd0:	4413      	add	r3, r2
 800cfd2:	4619      	mov	r1, r3
 800cfd4:	6938      	ldr	r0, [r7, #16]
 800cfd6:	f7ff fed9 	bl	800cd8c <move_window>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d130      	bne.n	800d042 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800cfe0:	693b      	ldr	r3, [r7, #16]
 800cfe2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	005b      	lsls	r3, r3, #1
 800cfea:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800cfee:	4413      	add	r3, r2
 800cff0:	4618      	mov	r0, r3
 800cff2:	f7ff fc1b 	bl	800c82c <ld_word>
 800cff6:	4603      	mov	r3, r0
 800cff8:	617b      	str	r3, [r7, #20]
			break;
 800cffa:	e025      	b.n	800d048 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	6a1a      	ldr	r2, [r3, #32]
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	09db      	lsrs	r3, r3, #7
 800d004:	4413      	add	r3, r2
 800d006:	4619      	mov	r1, r3
 800d008:	6938      	ldr	r0, [r7, #16]
 800d00a:	f7ff febf 	bl	800cd8c <move_window>
 800d00e:	4603      	mov	r3, r0
 800d010:	2b00      	cmp	r3, #0
 800d012:	d118      	bne.n	800d046 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d014:	693b      	ldr	r3, [r7, #16]
 800d016:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	009b      	lsls	r3, r3, #2
 800d01e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d022:	4413      	add	r3, r2
 800d024:	4618      	mov	r0, r3
 800d026:	f7ff fc19 	bl	800c85c <ld_dword>
 800d02a:	4603      	mov	r3, r0
 800d02c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d030:	617b      	str	r3, [r7, #20]
			break;
 800d032:	e009      	b.n	800d048 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d034:	2301      	movs	r3, #1
 800d036:	617b      	str	r3, [r7, #20]
 800d038:	e006      	b.n	800d048 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d03a:	bf00      	nop
 800d03c:	e004      	b.n	800d048 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d03e:	bf00      	nop
 800d040:	e002      	b.n	800d048 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d042:	bf00      	nop
 800d044:	e000      	b.n	800d048 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d046:	bf00      	nop
		}
	}

	return val;
 800d048:	697b      	ldr	r3, [r7, #20]
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	3718      	adds	r7, #24
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}

0800d052 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d052:	b590      	push	{r4, r7, lr}
 800d054:	b089      	sub	sp, #36	; 0x24
 800d056:	af00      	add	r7, sp, #0
 800d058:	60f8      	str	r0, [r7, #12]
 800d05a:	60b9      	str	r1, [r7, #8]
 800d05c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d05e:	2302      	movs	r3, #2
 800d060:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	2b01      	cmp	r3, #1
 800d066:	f240 80d2 	bls.w	800d20e <put_fat+0x1bc>
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	695b      	ldr	r3, [r3, #20]
 800d06e:	68ba      	ldr	r2, [r7, #8]
 800d070:	429a      	cmp	r2, r3
 800d072:	f080 80cc 	bcs.w	800d20e <put_fat+0x1bc>
		switch (fs->fs_type) {
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	781b      	ldrb	r3, [r3, #0]
 800d07a:	2b03      	cmp	r3, #3
 800d07c:	f000 8096 	beq.w	800d1ac <put_fat+0x15a>
 800d080:	2b03      	cmp	r3, #3
 800d082:	f300 80cd 	bgt.w	800d220 <put_fat+0x1ce>
 800d086:	2b01      	cmp	r3, #1
 800d088:	d002      	beq.n	800d090 <put_fat+0x3e>
 800d08a:	2b02      	cmp	r3, #2
 800d08c:	d06e      	beq.n	800d16c <put_fat+0x11a>
 800d08e:	e0c7      	b.n	800d220 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	61bb      	str	r3, [r7, #24]
 800d094:	69bb      	ldr	r3, [r7, #24]
 800d096:	085b      	lsrs	r3, r3, #1
 800d098:	69ba      	ldr	r2, [r7, #24]
 800d09a:	4413      	add	r3, r2
 800d09c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	6a1a      	ldr	r2, [r3, #32]
 800d0a2:	69bb      	ldr	r3, [r7, #24]
 800d0a4:	0a5b      	lsrs	r3, r3, #9
 800d0a6:	4413      	add	r3, r2
 800d0a8:	4619      	mov	r1, r3
 800d0aa:	68f8      	ldr	r0, [r7, #12]
 800d0ac:	f7ff fe6e 	bl	800cd8c <move_window>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d0b4:	7ffb      	ldrb	r3, [r7, #31]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	f040 80ab 	bne.w	800d212 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d0c2:	69bb      	ldr	r3, [r7, #24]
 800d0c4:	1c59      	adds	r1, r3, #1
 800d0c6:	61b9      	str	r1, [r7, #24]
 800d0c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0cc:	4413      	add	r3, r2
 800d0ce:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	f003 0301 	and.w	r3, r3, #1
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d00d      	beq.n	800d0f6 <put_fat+0xa4>
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	781b      	ldrb	r3, [r3, #0]
 800d0de:	b25b      	sxtb	r3, r3
 800d0e0:	f003 030f 	and.w	r3, r3, #15
 800d0e4:	b25a      	sxtb	r2, r3
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	b2db      	uxtb	r3, r3
 800d0ea:	011b      	lsls	r3, r3, #4
 800d0ec:	b25b      	sxtb	r3, r3
 800d0ee:	4313      	orrs	r3, r2
 800d0f0:	b25b      	sxtb	r3, r3
 800d0f2:	b2db      	uxtb	r3, r3
 800d0f4:	e001      	b.n	800d0fa <put_fat+0xa8>
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	b2db      	uxtb	r3, r3
 800d0fa:	697a      	ldr	r2, [r7, #20]
 800d0fc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	2201      	movs	r2, #1
 800d102:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	6a1a      	ldr	r2, [r3, #32]
 800d108:	69bb      	ldr	r3, [r7, #24]
 800d10a:	0a5b      	lsrs	r3, r3, #9
 800d10c:	4413      	add	r3, r2
 800d10e:	4619      	mov	r1, r3
 800d110:	68f8      	ldr	r0, [r7, #12]
 800d112:	f7ff fe3b 	bl	800cd8c <move_window>
 800d116:	4603      	mov	r3, r0
 800d118:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d11a:	7ffb      	ldrb	r3, [r7, #31]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d17a      	bne.n	800d216 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d126:	69bb      	ldr	r3, [r7, #24]
 800d128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d12c:	4413      	add	r3, r2
 800d12e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	f003 0301 	and.w	r3, r3, #1
 800d136:	2b00      	cmp	r3, #0
 800d138:	d003      	beq.n	800d142 <put_fat+0xf0>
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	091b      	lsrs	r3, r3, #4
 800d13e:	b2db      	uxtb	r3, r3
 800d140:	e00e      	b.n	800d160 <put_fat+0x10e>
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	b25b      	sxtb	r3, r3
 800d148:	f023 030f 	bic.w	r3, r3, #15
 800d14c:	b25a      	sxtb	r2, r3
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	0a1b      	lsrs	r3, r3, #8
 800d152:	b25b      	sxtb	r3, r3
 800d154:	f003 030f 	and.w	r3, r3, #15
 800d158:	b25b      	sxtb	r3, r3
 800d15a:	4313      	orrs	r3, r2
 800d15c:	b25b      	sxtb	r3, r3
 800d15e:	b2db      	uxtb	r3, r3
 800d160:	697a      	ldr	r2, [r7, #20]
 800d162:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	2201      	movs	r2, #1
 800d168:	70da      	strb	r2, [r3, #3]
			break;
 800d16a:	e059      	b.n	800d220 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	6a1a      	ldr	r2, [r3, #32]
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	0a1b      	lsrs	r3, r3, #8
 800d174:	4413      	add	r3, r2
 800d176:	4619      	mov	r1, r3
 800d178:	68f8      	ldr	r0, [r7, #12]
 800d17a:	f7ff fe07 	bl	800cd8c <move_window>
 800d17e:	4603      	mov	r3, r0
 800d180:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d182:	7ffb      	ldrb	r3, [r7, #31]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d148      	bne.n	800d21a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	005b      	lsls	r3, r3, #1
 800d192:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d196:	4413      	add	r3, r2
 800d198:	687a      	ldr	r2, [r7, #4]
 800d19a:	b292      	uxth	r2, r2
 800d19c:	4611      	mov	r1, r2
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f7ff fb7f 	bl	800c8a2 <st_word>
			fs->wflag = 1;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	2201      	movs	r2, #1
 800d1a8:	70da      	strb	r2, [r3, #3]
			break;
 800d1aa:	e039      	b.n	800d220 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	6a1a      	ldr	r2, [r3, #32]
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	09db      	lsrs	r3, r3, #7
 800d1b4:	4413      	add	r3, r2
 800d1b6:	4619      	mov	r1, r3
 800d1b8:	68f8      	ldr	r0, [r7, #12]
 800d1ba:	f7ff fde7 	bl	800cd8c <move_window>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d1c2:	7ffb      	ldrb	r3, [r7, #31]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d12a      	bne.n	800d21e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	009b      	lsls	r3, r3, #2
 800d1d8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d1dc:	4413      	add	r3, r2
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f7ff fb3c 	bl	800c85c <ld_dword>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d1ea:	4323      	orrs	r3, r4
 800d1ec:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	009b      	lsls	r3, r3, #2
 800d1f8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d1fc:	4413      	add	r3, r2
 800d1fe:	6879      	ldr	r1, [r7, #4]
 800d200:	4618      	mov	r0, r3
 800d202:	f7ff fb69 	bl	800c8d8 <st_dword>
			fs->wflag = 1;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2201      	movs	r2, #1
 800d20a:	70da      	strb	r2, [r3, #3]
			break;
 800d20c:	e008      	b.n	800d220 <put_fat+0x1ce>
		}
	}
 800d20e:	bf00      	nop
 800d210:	e006      	b.n	800d220 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d212:	bf00      	nop
 800d214:	e004      	b.n	800d220 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d216:	bf00      	nop
 800d218:	e002      	b.n	800d220 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d21a:	bf00      	nop
 800d21c:	e000      	b.n	800d220 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d21e:	bf00      	nop
	return res;
 800d220:	7ffb      	ldrb	r3, [r7, #31]
}
 800d222:	4618      	mov	r0, r3
 800d224:	3724      	adds	r7, #36	; 0x24
 800d226:	46bd      	mov	sp, r7
 800d228:	bd90      	pop	{r4, r7, pc}

0800d22a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d22a:	b580      	push	{r7, lr}
 800d22c:	b088      	sub	sp, #32
 800d22e:	af00      	add	r7, sp, #0
 800d230:	60f8      	str	r0, [r7, #12]
 800d232:	60b9      	str	r1, [r7, #8]
 800d234:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d236:	2300      	movs	r3, #0
 800d238:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	2b01      	cmp	r3, #1
 800d244:	d904      	bls.n	800d250 <remove_chain+0x26>
 800d246:	69bb      	ldr	r3, [r7, #24]
 800d248:	695b      	ldr	r3, [r3, #20]
 800d24a:	68ba      	ldr	r2, [r7, #8]
 800d24c:	429a      	cmp	r2, r3
 800d24e:	d301      	bcc.n	800d254 <remove_chain+0x2a>
 800d250:	2302      	movs	r3, #2
 800d252:	e04b      	b.n	800d2ec <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d00c      	beq.n	800d274 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d25a:	f04f 32ff 	mov.w	r2, #4294967295
 800d25e:	6879      	ldr	r1, [r7, #4]
 800d260:	69b8      	ldr	r0, [r7, #24]
 800d262:	f7ff fef6 	bl	800d052 <put_fat>
 800d266:	4603      	mov	r3, r0
 800d268:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d26a:	7ffb      	ldrb	r3, [r7, #31]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d001      	beq.n	800d274 <remove_chain+0x4a>
 800d270:	7ffb      	ldrb	r3, [r7, #31]
 800d272:	e03b      	b.n	800d2ec <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d274:	68b9      	ldr	r1, [r7, #8]
 800d276:	68f8      	ldr	r0, [r7, #12]
 800d278:	f7ff fe43 	bl	800cf02 <get_fat>
 800d27c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d031      	beq.n	800d2e8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d284:	697b      	ldr	r3, [r7, #20]
 800d286:	2b01      	cmp	r3, #1
 800d288:	d101      	bne.n	800d28e <remove_chain+0x64>
 800d28a:	2302      	movs	r3, #2
 800d28c:	e02e      	b.n	800d2ec <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d28e:	697b      	ldr	r3, [r7, #20]
 800d290:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d294:	d101      	bne.n	800d29a <remove_chain+0x70>
 800d296:	2301      	movs	r3, #1
 800d298:	e028      	b.n	800d2ec <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d29a:	2200      	movs	r2, #0
 800d29c:	68b9      	ldr	r1, [r7, #8]
 800d29e:	69b8      	ldr	r0, [r7, #24]
 800d2a0:	f7ff fed7 	bl	800d052 <put_fat>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d2a8:	7ffb      	ldrb	r3, [r7, #31]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d001      	beq.n	800d2b2 <remove_chain+0x88>
 800d2ae:	7ffb      	ldrb	r3, [r7, #31]
 800d2b0:	e01c      	b.n	800d2ec <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d2b2:	69bb      	ldr	r3, [r7, #24]
 800d2b4:	691a      	ldr	r2, [r3, #16]
 800d2b6:	69bb      	ldr	r3, [r7, #24]
 800d2b8:	695b      	ldr	r3, [r3, #20]
 800d2ba:	3b02      	subs	r3, #2
 800d2bc:	429a      	cmp	r2, r3
 800d2be:	d20b      	bcs.n	800d2d8 <remove_chain+0xae>
			fs->free_clst++;
 800d2c0:	69bb      	ldr	r3, [r7, #24]
 800d2c2:	691b      	ldr	r3, [r3, #16]
 800d2c4:	1c5a      	adds	r2, r3, #1
 800d2c6:	69bb      	ldr	r3, [r7, #24]
 800d2c8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800d2ca:	69bb      	ldr	r3, [r7, #24]
 800d2cc:	791b      	ldrb	r3, [r3, #4]
 800d2ce:	f043 0301 	orr.w	r3, r3, #1
 800d2d2:	b2da      	uxtb	r2, r3
 800d2d4:	69bb      	ldr	r3, [r7, #24]
 800d2d6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d2dc:	69bb      	ldr	r3, [r7, #24]
 800d2de:	695b      	ldr	r3, [r3, #20]
 800d2e0:	68ba      	ldr	r2, [r7, #8]
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d3c6      	bcc.n	800d274 <remove_chain+0x4a>
 800d2e6:	e000      	b.n	800d2ea <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d2e8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d2ea:	2300      	movs	r3, #0
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3720      	adds	r7, #32
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}

0800d2f4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b088      	sub	sp, #32
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d10d      	bne.n	800d326 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	68db      	ldr	r3, [r3, #12]
 800d30e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d310:	69bb      	ldr	r3, [r7, #24]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d004      	beq.n	800d320 <create_chain+0x2c>
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	695b      	ldr	r3, [r3, #20]
 800d31a:	69ba      	ldr	r2, [r7, #24]
 800d31c:	429a      	cmp	r2, r3
 800d31e:	d31b      	bcc.n	800d358 <create_chain+0x64>
 800d320:	2301      	movs	r3, #1
 800d322:	61bb      	str	r3, [r7, #24]
 800d324:	e018      	b.n	800d358 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d326:	6839      	ldr	r1, [r7, #0]
 800d328:	6878      	ldr	r0, [r7, #4]
 800d32a:	f7ff fdea 	bl	800cf02 <get_fat>
 800d32e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	2b01      	cmp	r3, #1
 800d334:	d801      	bhi.n	800d33a <create_chain+0x46>
 800d336:	2301      	movs	r3, #1
 800d338:	e070      	b.n	800d41c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d340:	d101      	bne.n	800d346 <create_chain+0x52>
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	e06a      	b.n	800d41c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d346:	693b      	ldr	r3, [r7, #16]
 800d348:	695b      	ldr	r3, [r3, #20]
 800d34a:	68fa      	ldr	r2, [r7, #12]
 800d34c:	429a      	cmp	r2, r3
 800d34e:	d201      	bcs.n	800d354 <create_chain+0x60>
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	e063      	b.n	800d41c <create_chain+0x128>
		scl = clst;
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d358:	69bb      	ldr	r3, [r7, #24]
 800d35a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d35c:	69fb      	ldr	r3, [r7, #28]
 800d35e:	3301      	adds	r3, #1
 800d360:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	695b      	ldr	r3, [r3, #20]
 800d366:	69fa      	ldr	r2, [r7, #28]
 800d368:	429a      	cmp	r2, r3
 800d36a:	d307      	bcc.n	800d37c <create_chain+0x88>
				ncl = 2;
 800d36c:	2302      	movs	r3, #2
 800d36e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d370:	69fa      	ldr	r2, [r7, #28]
 800d372:	69bb      	ldr	r3, [r7, #24]
 800d374:	429a      	cmp	r2, r3
 800d376:	d901      	bls.n	800d37c <create_chain+0x88>
 800d378:	2300      	movs	r3, #0
 800d37a:	e04f      	b.n	800d41c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d37c:	69f9      	ldr	r1, [r7, #28]
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f7ff fdbf 	bl	800cf02 <get_fat>
 800d384:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d00e      	beq.n	800d3aa <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	2b01      	cmp	r3, #1
 800d390:	d003      	beq.n	800d39a <create_chain+0xa6>
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d398:	d101      	bne.n	800d39e <create_chain+0xaa>
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	e03e      	b.n	800d41c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d39e:	69fa      	ldr	r2, [r7, #28]
 800d3a0:	69bb      	ldr	r3, [r7, #24]
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	d1da      	bne.n	800d35c <create_chain+0x68>
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	e038      	b.n	800d41c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d3aa:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d3ac:	f04f 32ff 	mov.w	r2, #4294967295
 800d3b0:	69f9      	ldr	r1, [r7, #28]
 800d3b2:	6938      	ldr	r0, [r7, #16]
 800d3b4:	f7ff fe4d 	bl	800d052 <put_fat>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d3bc:	7dfb      	ldrb	r3, [r7, #23]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d109      	bne.n	800d3d6 <create_chain+0xe2>
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d006      	beq.n	800d3d6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d3c8:	69fa      	ldr	r2, [r7, #28]
 800d3ca:	6839      	ldr	r1, [r7, #0]
 800d3cc:	6938      	ldr	r0, [r7, #16]
 800d3ce:	f7ff fe40 	bl	800d052 <put_fat>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d3d6:	7dfb      	ldrb	r3, [r7, #23]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d116      	bne.n	800d40a <create_chain+0x116>
		fs->last_clst = ncl;
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	69fa      	ldr	r2, [r7, #28]
 800d3e0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	691a      	ldr	r2, [r3, #16]
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	695b      	ldr	r3, [r3, #20]
 800d3ea:	3b02      	subs	r3, #2
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	d804      	bhi.n	800d3fa <create_chain+0x106>
 800d3f0:	693b      	ldr	r3, [r7, #16]
 800d3f2:	691b      	ldr	r3, [r3, #16]
 800d3f4:	1e5a      	subs	r2, r3, #1
 800d3f6:	693b      	ldr	r3, [r7, #16]
 800d3f8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	791b      	ldrb	r3, [r3, #4]
 800d3fe:	f043 0301 	orr.w	r3, r3, #1
 800d402:	b2da      	uxtb	r2, r3
 800d404:	693b      	ldr	r3, [r7, #16]
 800d406:	711a      	strb	r2, [r3, #4]
 800d408:	e007      	b.n	800d41a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d40a:	7dfb      	ldrb	r3, [r7, #23]
 800d40c:	2b01      	cmp	r3, #1
 800d40e:	d102      	bne.n	800d416 <create_chain+0x122>
 800d410:	f04f 33ff 	mov.w	r3, #4294967295
 800d414:	e000      	b.n	800d418 <create_chain+0x124>
 800d416:	2301      	movs	r3, #1
 800d418:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d41a:	69fb      	ldr	r3, [r7, #28]
}
 800d41c:	4618      	mov	r0, r3
 800d41e:	3720      	adds	r7, #32
 800d420:	46bd      	mov	sp, r7
 800d422:	bd80      	pop	{r7, pc}

0800d424 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d424:	b480      	push	{r7}
 800d426:	b087      	sub	sp, #28
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
 800d42c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d438:	3304      	adds	r3, #4
 800d43a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	0a5b      	lsrs	r3, r3, #9
 800d440:	68fa      	ldr	r2, [r7, #12]
 800d442:	8952      	ldrh	r2, [r2, #10]
 800d444:	fbb3 f3f2 	udiv	r3, r3, r2
 800d448:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d44a:	693b      	ldr	r3, [r7, #16]
 800d44c:	1d1a      	adds	r2, r3, #4
 800d44e:	613a      	str	r2, [r7, #16]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d454:	68bb      	ldr	r3, [r7, #8]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d101      	bne.n	800d45e <clmt_clust+0x3a>
 800d45a:	2300      	movs	r3, #0
 800d45c:	e010      	b.n	800d480 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d45e:	697a      	ldr	r2, [r7, #20]
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	429a      	cmp	r2, r3
 800d464:	d307      	bcc.n	800d476 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d466:	697a      	ldr	r2, [r7, #20]
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	1ad3      	subs	r3, r2, r3
 800d46c:	617b      	str	r3, [r7, #20]
 800d46e:	693b      	ldr	r3, [r7, #16]
 800d470:	3304      	adds	r3, #4
 800d472:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d474:	e7e9      	b.n	800d44a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d476:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d478:	693b      	ldr	r3, [r7, #16]
 800d47a:	681a      	ldr	r2, [r3, #0]
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	4413      	add	r3, r2
}
 800d480:	4618      	mov	r0, r3
 800d482:	371c      	adds	r7, #28
 800d484:	46bd      	mov	sp, r7
 800d486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48a:	4770      	bx	lr

0800d48c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b086      	sub	sp, #24
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
 800d494:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d4a2:	d204      	bcs.n	800d4ae <dir_sdi+0x22>
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	f003 031f 	and.w	r3, r3, #31
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d001      	beq.n	800d4b2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d4ae:	2302      	movs	r3, #2
 800d4b0:	e063      	b.n	800d57a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	683a      	ldr	r2, [r7, #0]
 800d4b6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	689b      	ldr	r3, [r3, #8]
 800d4bc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d106      	bne.n	800d4d2 <dir_sdi+0x46>
 800d4c4:	693b      	ldr	r3, [r7, #16]
 800d4c6:	781b      	ldrb	r3, [r3, #0]
 800d4c8:	2b02      	cmp	r3, #2
 800d4ca:	d902      	bls.n	800d4d2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d4cc:	693b      	ldr	r3, [r7, #16]
 800d4ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4d0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d10c      	bne.n	800d4f2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	095b      	lsrs	r3, r3, #5
 800d4dc:	693a      	ldr	r2, [r7, #16]
 800d4de:	8912      	ldrh	r2, [r2, #8]
 800d4e0:	4293      	cmp	r3, r2
 800d4e2:	d301      	bcc.n	800d4e8 <dir_sdi+0x5c>
 800d4e4:	2302      	movs	r3, #2
 800d4e6:	e048      	b.n	800d57a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d4e8:	693b      	ldr	r3, [r7, #16]
 800d4ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	61da      	str	r2, [r3, #28]
 800d4f0:	e029      	b.n	800d546 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	895b      	ldrh	r3, [r3, #10]
 800d4f6:	025b      	lsls	r3, r3, #9
 800d4f8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d4fa:	e019      	b.n	800d530 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	6979      	ldr	r1, [r7, #20]
 800d500:	4618      	mov	r0, r3
 800d502:	f7ff fcfe 	bl	800cf02 <get_fat>
 800d506:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d50e:	d101      	bne.n	800d514 <dir_sdi+0x88>
 800d510:	2301      	movs	r3, #1
 800d512:	e032      	b.n	800d57a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	2b01      	cmp	r3, #1
 800d518:	d904      	bls.n	800d524 <dir_sdi+0x98>
 800d51a:	693b      	ldr	r3, [r7, #16]
 800d51c:	695b      	ldr	r3, [r3, #20]
 800d51e:	697a      	ldr	r2, [r7, #20]
 800d520:	429a      	cmp	r2, r3
 800d522:	d301      	bcc.n	800d528 <dir_sdi+0x9c>
 800d524:	2302      	movs	r3, #2
 800d526:	e028      	b.n	800d57a <dir_sdi+0xee>
			ofs -= csz;
 800d528:	683a      	ldr	r2, [r7, #0]
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	1ad3      	subs	r3, r2, r3
 800d52e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d530:	683a      	ldr	r2, [r7, #0]
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	429a      	cmp	r2, r3
 800d536:	d2e1      	bcs.n	800d4fc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d538:	6979      	ldr	r1, [r7, #20]
 800d53a:	6938      	ldr	r0, [r7, #16]
 800d53c:	f7ff fcc2 	bl	800cec4 <clust2sect>
 800d540:	4602      	mov	r2, r0
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	697a      	ldr	r2, [r7, #20]
 800d54a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	69db      	ldr	r3, [r3, #28]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d101      	bne.n	800d558 <dir_sdi+0xcc>
 800d554:	2302      	movs	r3, #2
 800d556:	e010      	b.n	800d57a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	69da      	ldr	r2, [r3, #28]
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	0a5b      	lsrs	r3, r3, #9
 800d560:	441a      	add	r2, r3
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d566:	693b      	ldr	r3, [r7, #16]
 800d568:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d572:	441a      	add	r2, r3
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d578:	2300      	movs	r3, #0
}
 800d57a:	4618      	mov	r0, r3
 800d57c:	3718      	adds	r7, #24
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}

0800d582 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d582:	b580      	push	{r7, lr}
 800d584:	b086      	sub	sp, #24
 800d586:	af00      	add	r7, sp, #0
 800d588:	6078      	str	r0, [r7, #4]
 800d58a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	695b      	ldr	r3, [r3, #20]
 800d596:	3320      	adds	r3, #32
 800d598:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	69db      	ldr	r3, [r3, #28]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d003      	beq.n	800d5aa <dir_next+0x28>
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d5a8:	d301      	bcc.n	800d5ae <dir_next+0x2c>
 800d5aa:	2304      	movs	r3, #4
 800d5ac:	e0aa      	b.n	800d704 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	f040 8098 	bne.w	800d6ea <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	69db      	ldr	r3, [r3, #28]
 800d5be:	1c5a      	adds	r2, r3, #1
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	699b      	ldr	r3, [r3, #24]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d10b      	bne.n	800d5e4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d5cc:	68bb      	ldr	r3, [r7, #8]
 800d5ce:	095b      	lsrs	r3, r3, #5
 800d5d0:	68fa      	ldr	r2, [r7, #12]
 800d5d2:	8912      	ldrh	r2, [r2, #8]
 800d5d4:	4293      	cmp	r3, r2
 800d5d6:	f0c0 8088 	bcc.w	800d6ea <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	61da      	str	r2, [r3, #28]
 800d5e0:	2304      	movs	r3, #4
 800d5e2:	e08f      	b.n	800d704 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	0a5b      	lsrs	r3, r3, #9
 800d5e8:	68fa      	ldr	r2, [r7, #12]
 800d5ea:	8952      	ldrh	r2, [r2, #10]
 800d5ec:	3a01      	subs	r2, #1
 800d5ee:	4013      	ands	r3, r2
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d17a      	bne.n	800d6ea <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d5f4:	687a      	ldr	r2, [r7, #4]
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	699b      	ldr	r3, [r3, #24]
 800d5fa:	4619      	mov	r1, r3
 800d5fc:	4610      	mov	r0, r2
 800d5fe:	f7ff fc80 	bl	800cf02 <get_fat>
 800d602:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	2b01      	cmp	r3, #1
 800d608:	d801      	bhi.n	800d60e <dir_next+0x8c>
 800d60a:	2302      	movs	r3, #2
 800d60c:	e07a      	b.n	800d704 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d614:	d101      	bne.n	800d61a <dir_next+0x98>
 800d616:	2301      	movs	r3, #1
 800d618:	e074      	b.n	800d704 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	695b      	ldr	r3, [r3, #20]
 800d61e:	697a      	ldr	r2, [r7, #20]
 800d620:	429a      	cmp	r2, r3
 800d622:	d358      	bcc.n	800d6d6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d104      	bne.n	800d634 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2200      	movs	r2, #0
 800d62e:	61da      	str	r2, [r3, #28]
 800d630:	2304      	movs	r3, #4
 800d632:	e067      	b.n	800d704 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d634:	687a      	ldr	r2, [r7, #4]
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	699b      	ldr	r3, [r3, #24]
 800d63a:	4619      	mov	r1, r3
 800d63c:	4610      	mov	r0, r2
 800d63e:	f7ff fe59 	bl	800d2f4 <create_chain>
 800d642:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d101      	bne.n	800d64e <dir_next+0xcc>
 800d64a:	2307      	movs	r3, #7
 800d64c:	e05a      	b.n	800d704 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	2b01      	cmp	r3, #1
 800d652:	d101      	bne.n	800d658 <dir_next+0xd6>
 800d654:	2302      	movs	r3, #2
 800d656:	e055      	b.n	800d704 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d65e:	d101      	bne.n	800d664 <dir_next+0xe2>
 800d660:	2301      	movs	r3, #1
 800d662:	e04f      	b.n	800d704 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d664:	68f8      	ldr	r0, [r7, #12]
 800d666:	f7ff fb4d 	bl	800cd04 <sync_window>
 800d66a:	4603      	mov	r3, r0
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d001      	beq.n	800d674 <dir_next+0xf2>
 800d670:	2301      	movs	r3, #1
 800d672:	e047      	b.n	800d704 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	3330      	adds	r3, #48	; 0x30
 800d678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d67c:	2100      	movs	r1, #0
 800d67e:	4618      	mov	r0, r3
 800d680:	f7ff f977 	bl	800c972 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d684:	2300      	movs	r3, #0
 800d686:	613b      	str	r3, [r7, #16]
 800d688:	6979      	ldr	r1, [r7, #20]
 800d68a:	68f8      	ldr	r0, [r7, #12]
 800d68c:	f7ff fc1a 	bl	800cec4 <clust2sect>
 800d690:	4602      	mov	r2, r0
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	62da      	str	r2, [r3, #44]	; 0x2c
 800d696:	e012      	b.n	800d6be <dir_next+0x13c>
						fs->wflag = 1;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	2201      	movs	r2, #1
 800d69c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d69e:	68f8      	ldr	r0, [r7, #12]
 800d6a0:	f7ff fb30 	bl	800cd04 <sync_window>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d001      	beq.n	800d6ae <dir_next+0x12c>
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	e02a      	b.n	800d704 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	3301      	adds	r3, #1
 800d6b2:	613b      	str	r3, [r7, #16]
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6b8:	1c5a      	adds	r2, r3, #1
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	62da      	str	r2, [r3, #44]	; 0x2c
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	895b      	ldrh	r3, [r3, #10]
 800d6c2:	461a      	mov	r2, r3
 800d6c4:	693b      	ldr	r3, [r7, #16]
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	d3e6      	bcc.n	800d698 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	1ad2      	subs	r2, r2, r3
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	697a      	ldr	r2, [r7, #20]
 800d6da:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d6dc:	6979      	ldr	r1, [r7, #20]
 800d6de:	68f8      	ldr	r0, [r7, #12]
 800d6e0:	f7ff fbf0 	bl	800cec4 <clust2sect>
 800d6e4:	4602      	mov	r2, r0
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	68ba      	ldr	r2, [r7, #8]
 800d6ee:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6fc:	441a      	add	r2, r3
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d702:	2300      	movs	r3, #0
}
 800d704:	4618      	mov	r0, r3
 800d706:	3718      	adds	r7, #24
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}

0800d70c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b086      	sub	sp, #24
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
 800d714:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d71c:	2100      	movs	r1, #0
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f7ff feb4 	bl	800d48c <dir_sdi>
 800d724:	4603      	mov	r3, r0
 800d726:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d728:	7dfb      	ldrb	r3, [r7, #23]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d12b      	bne.n	800d786 <dir_alloc+0x7a>
		n = 0;
 800d72e:	2300      	movs	r3, #0
 800d730:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	69db      	ldr	r3, [r3, #28]
 800d736:	4619      	mov	r1, r3
 800d738:	68f8      	ldr	r0, [r7, #12]
 800d73a:	f7ff fb27 	bl	800cd8c <move_window>
 800d73e:	4603      	mov	r3, r0
 800d740:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d742:	7dfb      	ldrb	r3, [r7, #23]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d11d      	bne.n	800d784 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6a1b      	ldr	r3, [r3, #32]
 800d74c:	781b      	ldrb	r3, [r3, #0]
 800d74e:	2be5      	cmp	r3, #229	; 0xe5
 800d750:	d004      	beq.n	800d75c <dir_alloc+0x50>
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6a1b      	ldr	r3, [r3, #32]
 800d756:	781b      	ldrb	r3, [r3, #0]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d107      	bne.n	800d76c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	3301      	adds	r3, #1
 800d760:	613b      	str	r3, [r7, #16]
 800d762:	693a      	ldr	r2, [r7, #16]
 800d764:	683b      	ldr	r3, [r7, #0]
 800d766:	429a      	cmp	r2, r3
 800d768:	d102      	bne.n	800d770 <dir_alloc+0x64>
 800d76a:	e00c      	b.n	800d786 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d76c:	2300      	movs	r3, #0
 800d76e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d770:	2101      	movs	r1, #1
 800d772:	6878      	ldr	r0, [r7, #4]
 800d774:	f7ff ff05 	bl	800d582 <dir_next>
 800d778:	4603      	mov	r3, r0
 800d77a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d77c:	7dfb      	ldrb	r3, [r7, #23]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d0d7      	beq.n	800d732 <dir_alloc+0x26>
 800d782:	e000      	b.n	800d786 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d784:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d786:	7dfb      	ldrb	r3, [r7, #23]
 800d788:	2b04      	cmp	r3, #4
 800d78a:	d101      	bne.n	800d790 <dir_alloc+0x84>
 800d78c:	2307      	movs	r3, #7
 800d78e:	75fb      	strb	r3, [r7, #23]
	return res;
 800d790:	7dfb      	ldrb	r3, [r7, #23]
}
 800d792:	4618      	mov	r0, r3
 800d794:	3718      	adds	r7, #24
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}

0800d79a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d79a:	b580      	push	{r7, lr}
 800d79c:	b084      	sub	sp, #16
 800d79e:	af00      	add	r7, sp, #0
 800d7a0:	6078      	str	r0, [r7, #4]
 800d7a2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	331a      	adds	r3, #26
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f7ff f83f 	bl	800c82c <ld_word>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	781b      	ldrb	r3, [r3, #0]
 800d7b6:	2b03      	cmp	r3, #3
 800d7b8:	d109      	bne.n	800d7ce <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	3314      	adds	r3, #20
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f7ff f834 	bl	800c82c <ld_word>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	041b      	lsls	r3, r3, #16
 800d7c8:	68fa      	ldr	r2, [r7, #12]
 800d7ca:	4313      	orrs	r3, r2
 800d7cc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	3710      	adds	r7, #16
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}

0800d7d8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b084      	sub	sp, #16
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	60f8      	str	r0, [r7, #12]
 800d7e0:	60b9      	str	r1, [r7, #8]
 800d7e2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	331a      	adds	r3, #26
 800d7e8:	687a      	ldr	r2, [r7, #4]
 800d7ea:	b292      	uxth	r2, r2
 800d7ec:	4611      	mov	r1, r2
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	f7ff f857 	bl	800c8a2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	781b      	ldrb	r3, [r3, #0]
 800d7f8:	2b03      	cmp	r3, #3
 800d7fa:	d109      	bne.n	800d810 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d7fc:	68bb      	ldr	r3, [r7, #8]
 800d7fe:	f103 0214 	add.w	r2, r3, #20
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	0c1b      	lsrs	r3, r3, #16
 800d806:	b29b      	uxth	r3, r3
 800d808:	4619      	mov	r1, r3
 800d80a:	4610      	mov	r0, r2
 800d80c:	f7ff f849 	bl	800c8a2 <st_word>
	}
}
 800d810:	bf00      	nop
 800d812:	3710      	adds	r7, #16
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}

0800d818 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b086      	sub	sp, #24
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
 800d820:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800d822:	2304      	movs	r3, #4
 800d824:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800d82c:	e03c      	b.n	800d8a8 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	69db      	ldr	r3, [r3, #28]
 800d832:	4619      	mov	r1, r3
 800d834:	6938      	ldr	r0, [r7, #16]
 800d836:	f7ff faa9 	bl	800cd8c <move_window>
 800d83a:	4603      	mov	r3, r0
 800d83c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d83e:	7dfb      	ldrb	r3, [r7, #23]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d136      	bne.n	800d8b2 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	6a1b      	ldr	r3, [r3, #32]
 800d848:	781b      	ldrb	r3, [r3, #0]
 800d84a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800d84c:	7bfb      	ldrb	r3, [r7, #15]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d102      	bne.n	800d858 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800d852:	2304      	movs	r3, #4
 800d854:	75fb      	strb	r3, [r7, #23]
 800d856:	e031      	b.n	800d8bc <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6a1b      	ldr	r3, [r3, #32]
 800d85c:	330b      	adds	r3, #11
 800d85e:	781b      	ldrb	r3, [r3, #0]
 800d860:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d864:	73bb      	strb	r3, [r7, #14]
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	7bba      	ldrb	r2, [r7, #14]
 800d86a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800d86c:	7bfb      	ldrb	r3, [r7, #15]
 800d86e:	2be5      	cmp	r3, #229	; 0xe5
 800d870:	d011      	beq.n	800d896 <dir_read+0x7e>
 800d872:	7bfb      	ldrb	r3, [r7, #15]
 800d874:	2b2e      	cmp	r3, #46	; 0x2e
 800d876:	d00e      	beq.n	800d896 <dir_read+0x7e>
 800d878:	7bbb      	ldrb	r3, [r7, #14]
 800d87a:	2b0f      	cmp	r3, #15
 800d87c:	d00b      	beq.n	800d896 <dir_read+0x7e>
 800d87e:	7bbb      	ldrb	r3, [r7, #14]
 800d880:	f023 0320 	bic.w	r3, r3, #32
 800d884:	2b08      	cmp	r3, #8
 800d886:	bf0c      	ite	eq
 800d888:	2301      	moveq	r3, #1
 800d88a:	2300      	movne	r3, #0
 800d88c:	b2db      	uxtb	r3, r3
 800d88e:	461a      	mov	r2, r3
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	4293      	cmp	r3, r2
 800d894:	d00f      	beq.n	800d8b6 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800d896:	2100      	movs	r1, #0
 800d898:	6878      	ldr	r0, [r7, #4]
 800d89a:	f7ff fe72 	bl	800d582 <dir_next>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d8a2:	7dfb      	ldrb	r3, [r7, #23]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d108      	bne.n	800d8ba <dir_read+0xa2>
	while (dp->sect) {
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	69db      	ldr	r3, [r3, #28]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d1be      	bne.n	800d82e <dir_read+0x16>
 800d8b0:	e004      	b.n	800d8bc <dir_read+0xa4>
		if (res != FR_OK) break;
 800d8b2:	bf00      	nop
 800d8b4:	e002      	b.n	800d8bc <dir_read+0xa4>
				break;
 800d8b6:	bf00      	nop
 800d8b8:	e000      	b.n	800d8bc <dir_read+0xa4>
		if (res != FR_OK) break;
 800d8ba:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d8bc:	7dfb      	ldrb	r3, [r7, #23]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d002      	beq.n	800d8c8 <dir_read+0xb0>
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	61da      	str	r2, [r3, #28]
	return res;
 800d8c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3718      	adds	r7, #24
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}

0800d8d2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d8d2:	b580      	push	{r7, lr}
 800d8d4:	b086      	sub	sp, #24
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d8e0:	2100      	movs	r1, #0
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f7ff fdd2 	bl	800d48c <dir_sdi>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d8ec:	7dfb      	ldrb	r3, [r7, #23]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d001      	beq.n	800d8f6 <dir_find+0x24>
 800d8f2:	7dfb      	ldrb	r3, [r7, #23]
 800d8f4:	e03e      	b.n	800d974 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	69db      	ldr	r3, [r3, #28]
 800d8fa:	4619      	mov	r1, r3
 800d8fc:	6938      	ldr	r0, [r7, #16]
 800d8fe:	f7ff fa45 	bl	800cd8c <move_window>
 800d902:	4603      	mov	r3, r0
 800d904:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d906:	7dfb      	ldrb	r3, [r7, #23]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d12f      	bne.n	800d96c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	6a1b      	ldr	r3, [r3, #32]
 800d910:	781b      	ldrb	r3, [r3, #0]
 800d912:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d914:	7bfb      	ldrb	r3, [r7, #15]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d102      	bne.n	800d920 <dir_find+0x4e>
 800d91a:	2304      	movs	r3, #4
 800d91c:	75fb      	strb	r3, [r7, #23]
 800d91e:	e028      	b.n	800d972 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	6a1b      	ldr	r3, [r3, #32]
 800d924:	330b      	adds	r3, #11
 800d926:	781b      	ldrb	r3, [r3, #0]
 800d928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d92c:	b2da      	uxtb	r2, r3
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6a1b      	ldr	r3, [r3, #32]
 800d936:	330b      	adds	r3, #11
 800d938:	781b      	ldrb	r3, [r3, #0]
 800d93a:	f003 0308 	and.w	r3, r3, #8
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d10a      	bne.n	800d958 <dir_find+0x86>
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6a18      	ldr	r0, [r3, #32]
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	3324      	adds	r3, #36	; 0x24
 800d94a:	220b      	movs	r2, #11
 800d94c:	4619      	mov	r1, r3
 800d94e:	f7ff f82b 	bl	800c9a8 <mem_cmp>
 800d952:	4603      	mov	r3, r0
 800d954:	2b00      	cmp	r3, #0
 800d956:	d00b      	beq.n	800d970 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d958:	2100      	movs	r1, #0
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	f7ff fe11 	bl	800d582 <dir_next>
 800d960:	4603      	mov	r3, r0
 800d962:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d964:	7dfb      	ldrb	r3, [r7, #23]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d0c5      	beq.n	800d8f6 <dir_find+0x24>
 800d96a:	e002      	b.n	800d972 <dir_find+0xa0>
		if (res != FR_OK) break;
 800d96c:	bf00      	nop
 800d96e:	e000      	b.n	800d972 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d970:	bf00      	nop

	return res;
 800d972:	7dfb      	ldrb	r3, [r7, #23]
}
 800d974:	4618      	mov	r0, r3
 800d976:	3718      	adds	r7, #24
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}

0800d97c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b084      	sub	sp, #16
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d98a:	2101      	movs	r1, #1
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	f7ff febd 	bl	800d70c <dir_alloc>
 800d992:	4603      	mov	r3, r0
 800d994:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d996:	7bfb      	ldrb	r3, [r7, #15]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d11c      	bne.n	800d9d6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	69db      	ldr	r3, [r3, #28]
 800d9a0:	4619      	mov	r1, r3
 800d9a2:	68b8      	ldr	r0, [r7, #8]
 800d9a4:	f7ff f9f2 	bl	800cd8c <move_window>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d9ac:	7bfb      	ldrb	r3, [r7, #15]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d111      	bne.n	800d9d6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6a1b      	ldr	r3, [r3, #32]
 800d9b6:	2220      	movs	r2, #32
 800d9b8:	2100      	movs	r1, #0
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f7fe ffd9 	bl	800c972 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6a18      	ldr	r0, [r3, #32]
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	3324      	adds	r3, #36	; 0x24
 800d9c8:	220b      	movs	r2, #11
 800d9ca:	4619      	mov	r1, r3
 800d9cc:	f7fe ffb0 	bl	800c930 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	2201      	movs	r2, #1
 800d9d4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d9d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3710      	adds	r7, #16
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}

0800d9e0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b086      	sub	sp, #24
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
 800d9e8:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	69db      	ldr	r3, [r3, #28]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d04e      	beq.n	800da96 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	613b      	str	r3, [r7, #16]
 800d9fc:	693b      	ldr	r3, [r7, #16]
 800d9fe:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800da00:	e021      	b.n	800da46 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6a1a      	ldr	r2, [r3, #32]
 800da06:	697b      	ldr	r3, [r7, #20]
 800da08:	1c59      	adds	r1, r3, #1
 800da0a:	6179      	str	r1, [r7, #20]
 800da0c:	4413      	add	r3, r2
 800da0e:	781b      	ldrb	r3, [r3, #0]
 800da10:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800da12:	7bfb      	ldrb	r3, [r7, #15]
 800da14:	2b20      	cmp	r3, #32
 800da16:	d100      	bne.n	800da1a <get_fileinfo+0x3a>
 800da18:	e015      	b.n	800da46 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800da1a:	7bfb      	ldrb	r3, [r7, #15]
 800da1c:	2b05      	cmp	r3, #5
 800da1e:	d101      	bne.n	800da24 <get_fileinfo+0x44>
 800da20:	23e5      	movs	r3, #229	; 0xe5
 800da22:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800da24:	697b      	ldr	r3, [r7, #20]
 800da26:	2b09      	cmp	r3, #9
 800da28:	d106      	bne.n	800da38 <get_fileinfo+0x58>
 800da2a:	693b      	ldr	r3, [r7, #16]
 800da2c:	1c5a      	adds	r2, r3, #1
 800da2e:	613a      	str	r2, [r7, #16]
 800da30:	683a      	ldr	r2, [r7, #0]
 800da32:	4413      	add	r3, r2
 800da34:	222e      	movs	r2, #46	; 0x2e
 800da36:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800da38:	693b      	ldr	r3, [r7, #16]
 800da3a:	1c5a      	adds	r2, r3, #1
 800da3c:	613a      	str	r2, [r7, #16]
 800da3e:	683a      	ldr	r2, [r7, #0]
 800da40:	4413      	add	r3, r2
 800da42:	7bfa      	ldrb	r2, [r7, #15]
 800da44:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800da46:	697b      	ldr	r3, [r7, #20]
 800da48:	2b0a      	cmp	r3, #10
 800da4a:	d9da      	bls.n	800da02 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800da4c:	683a      	ldr	r2, [r7, #0]
 800da4e:	693b      	ldr	r3, [r7, #16]
 800da50:	4413      	add	r3, r2
 800da52:	3309      	adds	r3, #9
 800da54:	2200      	movs	r2, #0
 800da56:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6a1b      	ldr	r3, [r3, #32]
 800da5c:	7ada      	ldrb	r2, [r3, #11]
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	6a1b      	ldr	r3, [r3, #32]
 800da66:	331c      	adds	r3, #28
 800da68:	4618      	mov	r0, r3
 800da6a:	f7fe fef7 	bl	800c85c <ld_dword>
 800da6e:	4602      	mov	r2, r0
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6a1b      	ldr	r3, [r3, #32]
 800da78:	3316      	adds	r3, #22
 800da7a:	4618      	mov	r0, r3
 800da7c:	f7fe feee 	bl	800c85c <ld_dword>
 800da80:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	b29a      	uxth	r2, r3
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	80da      	strh	r2, [r3, #6]
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	0c1b      	lsrs	r3, r3, #16
 800da8e:	b29a      	uxth	r2, r3
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	809a      	strh	r2, [r3, #4]
 800da94:	e000      	b.n	800da98 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800da96:	bf00      	nop
}
 800da98:	3718      	adds	r7, #24
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bd80      	pop	{r7, pc}
	...

0800daa0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b088      	sub	sp, #32
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
 800daa8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	60fb      	str	r3, [r7, #12]
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	3324      	adds	r3, #36	; 0x24
 800dab4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800dab6:	220b      	movs	r2, #11
 800dab8:	2120      	movs	r1, #32
 800daba:	68b8      	ldr	r0, [r7, #8]
 800dabc:	f7fe ff59 	bl	800c972 <mem_set>
	si = i = 0; ni = 8;
 800dac0:	2300      	movs	r3, #0
 800dac2:	613b      	str	r3, [r7, #16]
 800dac4:	693b      	ldr	r3, [r7, #16]
 800dac6:	61fb      	str	r3, [r7, #28]
 800dac8:	2308      	movs	r3, #8
 800daca:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800dacc:	69fb      	ldr	r3, [r7, #28]
 800dace:	1c5a      	adds	r2, r3, #1
 800dad0:	61fa      	str	r2, [r7, #28]
 800dad2:	68fa      	ldr	r2, [r7, #12]
 800dad4:	4413      	add	r3, r2
 800dad6:	781b      	ldrb	r3, [r3, #0]
 800dad8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800dada:	7efb      	ldrb	r3, [r7, #27]
 800dadc:	2b20      	cmp	r3, #32
 800dade:	d94e      	bls.n	800db7e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800dae0:	7efb      	ldrb	r3, [r7, #27]
 800dae2:	2b2f      	cmp	r3, #47	; 0x2f
 800dae4:	d006      	beq.n	800daf4 <create_name+0x54>
 800dae6:	7efb      	ldrb	r3, [r7, #27]
 800dae8:	2b5c      	cmp	r3, #92	; 0x5c
 800daea:	d110      	bne.n	800db0e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800daec:	e002      	b.n	800daf4 <create_name+0x54>
 800daee:	69fb      	ldr	r3, [r7, #28]
 800daf0:	3301      	adds	r3, #1
 800daf2:	61fb      	str	r3, [r7, #28]
 800daf4:	68fa      	ldr	r2, [r7, #12]
 800daf6:	69fb      	ldr	r3, [r7, #28]
 800daf8:	4413      	add	r3, r2
 800dafa:	781b      	ldrb	r3, [r3, #0]
 800dafc:	2b2f      	cmp	r3, #47	; 0x2f
 800dafe:	d0f6      	beq.n	800daee <create_name+0x4e>
 800db00:	68fa      	ldr	r2, [r7, #12]
 800db02:	69fb      	ldr	r3, [r7, #28]
 800db04:	4413      	add	r3, r2
 800db06:	781b      	ldrb	r3, [r3, #0]
 800db08:	2b5c      	cmp	r3, #92	; 0x5c
 800db0a:	d0f0      	beq.n	800daee <create_name+0x4e>
			break;
 800db0c:	e038      	b.n	800db80 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800db0e:	7efb      	ldrb	r3, [r7, #27]
 800db10:	2b2e      	cmp	r3, #46	; 0x2e
 800db12:	d003      	beq.n	800db1c <create_name+0x7c>
 800db14:	693a      	ldr	r2, [r7, #16]
 800db16:	697b      	ldr	r3, [r7, #20]
 800db18:	429a      	cmp	r2, r3
 800db1a:	d30c      	bcc.n	800db36 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	2b0b      	cmp	r3, #11
 800db20:	d002      	beq.n	800db28 <create_name+0x88>
 800db22:	7efb      	ldrb	r3, [r7, #27]
 800db24:	2b2e      	cmp	r3, #46	; 0x2e
 800db26:	d001      	beq.n	800db2c <create_name+0x8c>
 800db28:	2306      	movs	r3, #6
 800db2a:	e044      	b.n	800dbb6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800db2c:	2308      	movs	r3, #8
 800db2e:	613b      	str	r3, [r7, #16]
 800db30:	230b      	movs	r3, #11
 800db32:	617b      	str	r3, [r7, #20]
			continue;
 800db34:	e022      	b.n	800db7c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800db36:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	da04      	bge.n	800db48 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800db3e:	7efb      	ldrb	r3, [r7, #27]
 800db40:	3b80      	subs	r3, #128	; 0x80
 800db42:	4a1f      	ldr	r2, [pc, #124]	; (800dbc0 <create_name+0x120>)
 800db44:	5cd3      	ldrb	r3, [r2, r3]
 800db46:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800db48:	7efb      	ldrb	r3, [r7, #27]
 800db4a:	4619      	mov	r1, r3
 800db4c:	481d      	ldr	r0, [pc, #116]	; (800dbc4 <create_name+0x124>)
 800db4e:	f7fe ff52 	bl	800c9f6 <chk_chr>
 800db52:	4603      	mov	r3, r0
 800db54:	2b00      	cmp	r3, #0
 800db56:	d001      	beq.n	800db5c <create_name+0xbc>
 800db58:	2306      	movs	r3, #6
 800db5a:	e02c      	b.n	800dbb6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800db5c:	7efb      	ldrb	r3, [r7, #27]
 800db5e:	2b60      	cmp	r3, #96	; 0x60
 800db60:	d905      	bls.n	800db6e <create_name+0xce>
 800db62:	7efb      	ldrb	r3, [r7, #27]
 800db64:	2b7a      	cmp	r3, #122	; 0x7a
 800db66:	d802      	bhi.n	800db6e <create_name+0xce>
 800db68:	7efb      	ldrb	r3, [r7, #27]
 800db6a:	3b20      	subs	r3, #32
 800db6c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	1c5a      	adds	r2, r3, #1
 800db72:	613a      	str	r2, [r7, #16]
 800db74:	68ba      	ldr	r2, [r7, #8]
 800db76:	4413      	add	r3, r2
 800db78:	7efa      	ldrb	r2, [r7, #27]
 800db7a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800db7c:	e7a6      	b.n	800dacc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800db7e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800db80:	68fa      	ldr	r2, [r7, #12]
 800db82:	69fb      	ldr	r3, [r7, #28]
 800db84:	441a      	add	r2, r3
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800db8a:	693b      	ldr	r3, [r7, #16]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d101      	bne.n	800db94 <create_name+0xf4>
 800db90:	2306      	movs	r3, #6
 800db92:	e010      	b.n	800dbb6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800db94:	68bb      	ldr	r3, [r7, #8]
 800db96:	781b      	ldrb	r3, [r3, #0]
 800db98:	2be5      	cmp	r3, #229	; 0xe5
 800db9a:	d102      	bne.n	800dba2 <create_name+0x102>
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	2205      	movs	r2, #5
 800dba0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800dba2:	7efb      	ldrb	r3, [r7, #27]
 800dba4:	2b20      	cmp	r3, #32
 800dba6:	d801      	bhi.n	800dbac <create_name+0x10c>
 800dba8:	2204      	movs	r2, #4
 800dbaa:	e000      	b.n	800dbae <create_name+0x10e>
 800dbac:	2200      	movs	r2, #0
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	330b      	adds	r3, #11
 800dbb2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800dbb4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	3720      	adds	r7, #32
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}
 800dbbe:	bf00      	nop
 800dbc0:	08015080 	.word	0x08015080
 800dbc4:	08014fd0 	.word	0x08014fd0

0800dbc8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b086      	sub	sp, #24
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
 800dbd0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800dbd6:	693b      	ldr	r3, [r7, #16]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800dbdc:	e002      	b.n	800dbe4 <follow_path+0x1c>
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	3301      	adds	r3, #1
 800dbe2:	603b      	str	r3, [r7, #0]
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	781b      	ldrb	r3, [r3, #0]
 800dbe8:	2b2f      	cmp	r3, #47	; 0x2f
 800dbea:	d0f8      	beq.n	800dbde <follow_path+0x16>
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	781b      	ldrb	r3, [r3, #0]
 800dbf0:	2b5c      	cmp	r3, #92	; 0x5c
 800dbf2:	d0f4      	beq.n	800dbde <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800dbf4:	693b      	ldr	r3, [r7, #16]
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	781b      	ldrb	r3, [r3, #0]
 800dbfe:	2b1f      	cmp	r3, #31
 800dc00:	d80a      	bhi.n	800dc18 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	2280      	movs	r2, #128	; 0x80
 800dc06:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800dc0a:	2100      	movs	r1, #0
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f7ff fc3d 	bl	800d48c <dir_sdi>
 800dc12:	4603      	mov	r3, r0
 800dc14:	75fb      	strb	r3, [r7, #23]
 800dc16:	e043      	b.n	800dca0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dc18:	463b      	mov	r3, r7
 800dc1a:	4619      	mov	r1, r3
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f7ff ff3f 	bl	800daa0 <create_name>
 800dc22:	4603      	mov	r3, r0
 800dc24:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dc26:	7dfb      	ldrb	r3, [r7, #23]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d134      	bne.n	800dc96 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f7ff fe50 	bl	800d8d2 <dir_find>
 800dc32:	4603      	mov	r3, r0
 800dc34:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dc3c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800dc3e:	7dfb      	ldrb	r3, [r7, #23]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d00a      	beq.n	800dc5a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800dc44:	7dfb      	ldrb	r3, [r7, #23]
 800dc46:	2b04      	cmp	r3, #4
 800dc48:	d127      	bne.n	800dc9a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800dc4a:	7afb      	ldrb	r3, [r7, #11]
 800dc4c:	f003 0304 	and.w	r3, r3, #4
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d122      	bne.n	800dc9a <follow_path+0xd2>
 800dc54:	2305      	movs	r3, #5
 800dc56:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800dc58:	e01f      	b.n	800dc9a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dc5a:	7afb      	ldrb	r3, [r7, #11]
 800dc5c:	f003 0304 	and.w	r3, r3, #4
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d11c      	bne.n	800dc9e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800dc64:	693b      	ldr	r3, [r7, #16]
 800dc66:	799b      	ldrb	r3, [r3, #6]
 800dc68:	f003 0310 	and.w	r3, r3, #16
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d102      	bne.n	800dc76 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800dc70:	2305      	movs	r3, #5
 800dc72:	75fb      	strb	r3, [r7, #23]
 800dc74:	e014      	b.n	800dca0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	695b      	ldr	r3, [r3, #20]
 800dc80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc84:	4413      	add	r3, r2
 800dc86:	4619      	mov	r1, r3
 800dc88:	68f8      	ldr	r0, [r7, #12]
 800dc8a:	f7ff fd86 	bl	800d79a <ld_clust>
 800dc8e:	4602      	mov	r2, r0
 800dc90:	693b      	ldr	r3, [r7, #16]
 800dc92:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dc94:	e7c0      	b.n	800dc18 <follow_path+0x50>
			if (res != FR_OK) break;
 800dc96:	bf00      	nop
 800dc98:	e002      	b.n	800dca0 <follow_path+0xd8>
				break;
 800dc9a:	bf00      	nop
 800dc9c:	e000      	b.n	800dca0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dc9e:	bf00      	nop
			}
		}
	}

	return res;
 800dca0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	3718      	adds	r7, #24
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}

0800dcaa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800dcaa:	b480      	push	{r7}
 800dcac:	b087      	sub	sp, #28
 800dcae:	af00      	add	r7, sp, #0
 800dcb0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800dcb2:	f04f 33ff 	mov.w	r3, #4294967295
 800dcb6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d031      	beq.n	800dd24 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	617b      	str	r3, [r7, #20]
 800dcc6:	e002      	b.n	800dcce <get_ldnumber+0x24>
 800dcc8:	697b      	ldr	r3, [r7, #20]
 800dcca:	3301      	adds	r3, #1
 800dccc:	617b      	str	r3, [r7, #20]
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	781b      	ldrb	r3, [r3, #0]
 800dcd2:	2b20      	cmp	r3, #32
 800dcd4:	d903      	bls.n	800dcde <get_ldnumber+0x34>
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	781b      	ldrb	r3, [r3, #0]
 800dcda:	2b3a      	cmp	r3, #58	; 0x3a
 800dcdc:	d1f4      	bne.n	800dcc8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	781b      	ldrb	r3, [r3, #0]
 800dce2:	2b3a      	cmp	r3, #58	; 0x3a
 800dce4:	d11c      	bne.n	800dd20 <get_ldnumber+0x76>
			tp = *path;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	1c5a      	adds	r2, r3, #1
 800dcf0:	60fa      	str	r2, [r7, #12]
 800dcf2:	781b      	ldrb	r3, [r3, #0]
 800dcf4:	3b30      	subs	r3, #48	; 0x30
 800dcf6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800dcf8:	68bb      	ldr	r3, [r7, #8]
 800dcfa:	2b09      	cmp	r3, #9
 800dcfc:	d80e      	bhi.n	800dd1c <get_ldnumber+0x72>
 800dcfe:	68fa      	ldr	r2, [r7, #12]
 800dd00:	697b      	ldr	r3, [r7, #20]
 800dd02:	429a      	cmp	r2, r3
 800dd04:	d10a      	bne.n	800dd1c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d107      	bne.n	800dd1c <get_ldnumber+0x72>
					vol = (int)i;
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800dd10:	697b      	ldr	r3, [r7, #20]
 800dd12:	3301      	adds	r3, #1
 800dd14:	617b      	str	r3, [r7, #20]
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	697a      	ldr	r2, [r7, #20]
 800dd1a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800dd1c:	693b      	ldr	r3, [r7, #16]
 800dd1e:	e002      	b.n	800dd26 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800dd20:	2300      	movs	r3, #0
 800dd22:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800dd24:	693b      	ldr	r3, [r7, #16]
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	371c      	adds	r7, #28
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd30:	4770      	bx	lr
	...

0800dd34 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b082      	sub	sp, #8
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
 800dd3c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2200      	movs	r2, #0
 800dd42:	70da      	strb	r2, [r3, #3]
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f04f 32ff 	mov.w	r2, #4294967295
 800dd4a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800dd4c:	6839      	ldr	r1, [r7, #0]
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	f7ff f81c 	bl	800cd8c <move_window>
 800dd54:	4603      	mov	r3, r0
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d001      	beq.n	800dd5e <check_fs+0x2a>
 800dd5a:	2304      	movs	r3, #4
 800dd5c:	e038      	b.n	800ddd0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	3330      	adds	r3, #48	; 0x30
 800dd62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dd66:	4618      	mov	r0, r3
 800dd68:	f7fe fd60 	bl	800c82c <ld_word>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	461a      	mov	r2, r3
 800dd70:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800dd74:	429a      	cmp	r2, r3
 800dd76:	d001      	beq.n	800dd7c <check_fs+0x48>
 800dd78:	2303      	movs	r3, #3
 800dd7a:	e029      	b.n	800ddd0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dd82:	2be9      	cmp	r3, #233	; 0xe9
 800dd84:	d009      	beq.n	800dd9a <check_fs+0x66>
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dd8c:	2beb      	cmp	r3, #235	; 0xeb
 800dd8e:	d11e      	bne.n	800ddce <check_fs+0x9a>
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800dd96:	2b90      	cmp	r3, #144	; 0x90
 800dd98:	d119      	bne.n	800ddce <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	3330      	adds	r3, #48	; 0x30
 800dd9e:	3336      	adds	r3, #54	; 0x36
 800dda0:	4618      	mov	r0, r3
 800dda2:	f7fe fd5b 	bl	800c85c <ld_dword>
 800dda6:	4603      	mov	r3, r0
 800dda8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ddac:	4a0a      	ldr	r2, [pc, #40]	; (800ddd8 <check_fs+0xa4>)
 800ddae:	4293      	cmp	r3, r2
 800ddb0:	d101      	bne.n	800ddb6 <check_fs+0x82>
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	e00c      	b.n	800ddd0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	3330      	adds	r3, #48	; 0x30
 800ddba:	3352      	adds	r3, #82	; 0x52
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	f7fe fd4d 	bl	800c85c <ld_dword>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	4a05      	ldr	r2, [pc, #20]	; (800dddc <check_fs+0xa8>)
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d101      	bne.n	800ddce <check_fs+0x9a>
 800ddca:	2300      	movs	r3, #0
 800ddcc:	e000      	b.n	800ddd0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ddce:	2302      	movs	r3, #2
}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	3708      	adds	r7, #8
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}
 800ddd8:	00544146 	.word	0x00544146
 800dddc:	33544146 	.word	0x33544146

0800dde0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b096      	sub	sp, #88	; 0x58
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	60f8      	str	r0, [r7, #12]
 800dde8:	60b9      	str	r1, [r7, #8]
 800ddea:	4613      	mov	r3, r2
 800ddec:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ddf4:	68f8      	ldr	r0, [r7, #12]
 800ddf6:	f7ff ff58 	bl	800dcaa <get_ldnumber>
 800ddfa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ddfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	da01      	bge.n	800de06 <find_volume+0x26>
 800de02:	230b      	movs	r3, #11
 800de04:	e22e      	b.n	800e264 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800de06:	4aa8      	ldr	r2, [pc, #672]	; (800e0a8 <find_volume+0x2c8>)
 800de08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de0e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800de10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de12:	2b00      	cmp	r3, #0
 800de14:	d101      	bne.n	800de1a <find_volume+0x3a>
 800de16:	230c      	movs	r3, #12
 800de18:	e224      	b.n	800e264 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de1e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800de20:	79fb      	ldrb	r3, [r7, #7]
 800de22:	f023 0301 	bic.w	r3, r3, #1
 800de26:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800de28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de2a:	781b      	ldrb	r3, [r3, #0]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d01a      	beq.n	800de66 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800de30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de32:	785b      	ldrb	r3, [r3, #1]
 800de34:	4618      	mov	r0, r3
 800de36:	f7fe fc5b 	bl	800c6f0 <disk_status>
 800de3a:	4603      	mov	r3, r0
 800de3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800de40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800de44:	f003 0301 	and.w	r3, r3, #1
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d10c      	bne.n	800de66 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800de4c:	79fb      	ldrb	r3, [r7, #7]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d007      	beq.n	800de62 <find_volume+0x82>
 800de52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800de56:	f003 0304 	and.w	r3, r3, #4
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d001      	beq.n	800de62 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800de5e:	230a      	movs	r3, #10
 800de60:	e200      	b.n	800e264 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800de62:	2300      	movs	r3, #0
 800de64:	e1fe      	b.n	800e264 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800de66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de68:	2200      	movs	r2, #0
 800de6a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800de6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de6e:	b2da      	uxtb	r2, r3
 800de70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de72:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800de74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de76:	785b      	ldrb	r3, [r3, #1]
 800de78:	4618      	mov	r0, r3
 800de7a:	f7fe fc53 	bl	800c724 <disk_initialize>
 800de7e:	4603      	mov	r3, r0
 800de80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800de84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800de88:	f003 0301 	and.w	r3, r3, #1
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d001      	beq.n	800de94 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800de90:	2303      	movs	r3, #3
 800de92:	e1e7      	b.n	800e264 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800de94:	79fb      	ldrb	r3, [r7, #7]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d007      	beq.n	800deaa <find_volume+0xca>
 800de9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800de9e:	f003 0304 	and.w	r3, r3, #4
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d001      	beq.n	800deaa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800dea6:	230a      	movs	r3, #10
 800dea8:	e1dc      	b.n	800e264 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800deaa:	2300      	movs	r3, #0
 800deac:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800deae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800deb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800deb2:	f7ff ff3f 	bl	800dd34 <check_fs>
 800deb6:	4603      	mov	r3, r0
 800deb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800debc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dec0:	2b02      	cmp	r3, #2
 800dec2:	d14b      	bne.n	800df5c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dec4:	2300      	movs	r3, #0
 800dec6:	643b      	str	r3, [r7, #64]	; 0x40
 800dec8:	e01f      	b.n	800df0a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800deca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800decc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ded0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ded2:	011b      	lsls	r3, r3, #4
 800ded4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ded8:	4413      	add	r3, r2
 800deda:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800dedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dede:	3304      	adds	r3, #4
 800dee0:	781b      	ldrb	r3, [r3, #0]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d006      	beq.n	800def4 <find_volume+0x114>
 800dee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dee8:	3308      	adds	r3, #8
 800deea:	4618      	mov	r0, r3
 800deec:	f7fe fcb6 	bl	800c85c <ld_dword>
 800def0:	4602      	mov	r2, r0
 800def2:	e000      	b.n	800def6 <find_volume+0x116>
 800def4:	2200      	movs	r2, #0
 800def6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800def8:	009b      	lsls	r3, r3, #2
 800defa:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800defe:	440b      	add	r3, r1
 800df00:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800df04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df06:	3301      	adds	r3, #1
 800df08:	643b      	str	r3, [r7, #64]	; 0x40
 800df0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df0c:	2b03      	cmp	r3, #3
 800df0e:	d9dc      	bls.n	800deca <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800df10:	2300      	movs	r3, #0
 800df12:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800df14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df16:	2b00      	cmp	r3, #0
 800df18:	d002      	beq.n	800df20 <find_volume+0x140>
 800df1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df1c:	3b01      	subs	r3, #1
 800df1e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800df20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df22:	009b      	lsls	r3, r3, #2
 800df24:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800df28:	4413      	add	r3, r2
 800df2a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800df2e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800df30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df32:	2b00      	cmp	r3, #0
 800df34:	d005      	beq.n	800df42 <find_volume+0x162>
 800df36:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800df38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800df3a:	f7ff fefb 	bl	800dd34 <check_fs>
 800df3e:	4603      	mov	r3, r0
 800df40:	e000      	b.n	800df44 <find_volume+0x164>
 800df42:	2303      	movs	r3, #3
 800df44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800df48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800df4c:	2b01      	cmp	r3, #1
 800df4e:	d905      	bls.n	800df5c <find_volume+0x17c>
 800df50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df52:	3301      	adds	r3, #1
 800df54:	643b      	str	r3, [r7, #64]	; 0x40
 800df56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df58:	2b03      	cmp	r3, #3
 800df5a:	d9e1      	bls.n	800df20 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800df5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800df60:	2b04      	cmp	r3, #4
 800df62:	d101      	bne.n	800df68 <find_volume+0x188>
 800df64:	2301      	movs	r3, #1
 800df66:	e17d      	b.n	800e264 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800df68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800df6c:	2b01      	cmp	r3, #1
 800df6e:	d901      	bls.n	800df74 <find_volume+0x194>
 800df70:	230d      	movs	r3, #13
 800df72:	e177      	b.n	800e264 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800df74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df76:	3330      	adds	r3, #48	; 0x30
 800df78:	330b      	adds	r3, #11
 800df7a:	4618      	mov	r0, r3
 800df7c:	f7fe fc56 	bl	800c82c <ld_word>
 800df80:	4603      	mov	r3, r0
 800df82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df86:	d001      	beq.n	800df8c <find_volume+0x1ac>
 800df88:	230d      	movs	r3, #13
 800df8a:	e16b      	b.n	800e264 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800df8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df8e:	3330      	adds	r3, #48	; 0x30
 800df90:	3316      	adds	r3, #22
 800df92:	4618      	mov	r0, r3
 800df94:	f7fe fc4a 	bl	800c82c <ld_word>
 800df98:	4603      	mov	r3, r0
 800df9a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800df9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d106      	bne.n	800dfb0 <find_volume+0x1d0>
 800dfa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfa4:	3330      	adds	r3, #48	; 0x30
 800dfa6:	3324      	adds	r3, #36	; 0x24
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f7fe fc57 	bl	800c85c <ld_dword>
 800dfae:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800dfb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dfb4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800dfb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfb8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800dfbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfbe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800dfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc2:	789b      	ldrb	r3, [r3, #2]
 800dfc4:	2b01      	cmp	r3, #1
 800dfc6:	d005      	beq.n	800dfd4 <find_volume+0x1f4>
 800dfc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfca:	789b      	ldrb	r3, [r3, #2]
 800dfcc:	2b02      	cmp	r3, #2
 800dfce:	d001      	beq.n	800dfd4 <find_volume+0x1f4>
 800dfd0:	230d      	movs	r3, #13
 800dfd2:	e147      	b.n	800e264 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800dfd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfd6:	789b      	ldrb	r3, [r3, #2]
 800dfd8:	461a      	mov	r2, r3
 800dfda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfdc:	fb02 f303 	mul.w	r3, r2, r3
 800dfe0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800dfe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dfe8:	b29a      	uxth	r2, r3
 800dfea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfec:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800dfee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dff0:	895b      	ldrh	r3, [r3, #10]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d008      	beq.n	800e008 <find_volume+0x228>
 800dff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dff8:	895b      	ldrh	r3, [r3, #10]
 800dffa:	461a      	mov	r2, r3
 800dffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dffe:	895b      	ldrh	r3, [r3, #10]
 800e000:	3b01      	subs	r3, #1
 800e002:	4013      	ands	r3, r2
 800e004:	2b00      	cmp	r3, #0
 800e006:	d001      	beq.n	800e00c <find_volume+0x22c>
 800e008:	230d      	movs	r3, #13
 800e00a:	e12b      	b.n	800e264 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e00e:	3330      	adds	r3, #48	; 0x30
 800e010:	3311      	adds	r3, #17
 800e012:	4618      	mov	r0, r3
 800e014:	f7fe fc0a 	bl	800c82c <ld_word>
 800e018:	4603      	mov	r3, r0
 800e01a:	461a      	mov	r2, r3
 800e01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e01e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e022:	891b      	ldrh	r3, [r3, #8]
 800e024:	f003 030f 	and.w	r3, r3, #15
 800e028:	b29b      	uxth	r3, r3
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d001      	beq.n	800e032 <find_volume+0x252>
 800e02e:	230d      	movs	r3, #13
 800e030:	e118      	b.n	800e264 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e034:	3330      	adds	r3, #48	; 0x30
 800e036:	3313      	adds	r3, #19
 800e038:	4618      	mov	r0, r3
 800e03a:	f7fe fbf7 	bl	800c82c <ld_word>
 800e03e:	4603      	mov	r3, r0
 800e040:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e044:	2b00      	cmp	r3, #0
 800e046:	d106      	bne.n	800e056 <find_volume+0x276>
 800e048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e04a:	3330      	adds	r3, #48	; 0x30
 800e04c:	3320      	adds	r3, #32
 800e04e:	4618      	mov	r0, r3
 800e050:	f7fe fc04 	bl	800c85c <ld_dword>
 800e054:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e058:	3330      	adds	r3, #48	; 0x30
 800e05a:	330e      	adds	r3, #14
 800e05c:	4618      	mov	r0, r3
 800e05e:	f7fe fbe5 	bl	800c82c <ld_word>
 800e062:	4603      	mov	r3, r0
 800e064:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e066:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d101      	bne.n	800e070 <find_volume+0x290>
 800e06c:	230d      	movs	r3, #13
 800e06e:	e0f9      	b.n	800e264 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e070:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e074:	4413      	add	r3, r2
 800e076:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e078:	8912      	ldrh	r2, [r2, #8]
 800e07a:	0912      	lsrs	r2, r2, #4
 800e07c:	b292      	uxth	r2, r2
 800e07e:	4413      	add	r3, r2
 800e080:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e082:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e086:	429a      	cmp	r2, r3
 800e088:	d201      	bcs.n	800e08e <find_volume+0x2ae>
 800e08a:	230d      	movs	r3, #13
 800e08c:	e0ea      	b.n	800e264 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e08e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e092:	1ad3      	subs	r3, r2, r3
 800e094:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e096:	8952      	ldrh	r2, [r2, #10]
 800e098:	fbb3 f3f2 	udiv	r3, r3, r2
 800e09c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d103      	bne.n	800e0ac <find_volume+0x2cc>
 800e0a4:	230d      	movs	r3, #13
 800e0a6:	e0dd      	b.n	800e264 <find_volume+0x484>
 800e0a8:	200008d4 	.word	0x200008d4
		fmt = FS_FAT32;
 800e0ac:	2303      	movs	r3, #3
 800e0ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e0b8:	4293      	cmp	r3, r2
 800e0ba:	d802      	bhi.n	800e0c2 <find_volume+0x2e2>
 800e0bc:	2302      	movs	r3, #2
 800e0be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e0c8:	4293      	cmp	r3, r2
 800e0ca:	d802      	bhi.n	800e0d2 <find_volume+0x2f2>
 800e0cc:	2301      	movs	r3, #1
 800e0ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d4:	1c9a      	adds	r2, r3, #2
 800e0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0d8:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800e0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e0de:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e0e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e0e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0e4:	441a      	add	r2, r3
 800e0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0e8:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800e0ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ee:	441a      	add	r2, r3
 800e0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0f2:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800e0f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e0f8:	2b03      	cmp	r3, #3
 800e0fa:	d11e      	bne.n	800e13a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0fe:	3330      	adds	r3, #48	; 0x30
 800e100:	332a      	adds	r3, #42	; 0x2a
 800e102:	4618      	mov	r0, r3
 800e104:	f7fe fb92 	bl	800c82c <ld_word>
 800e108:	4603      	mov	r3, r0
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d001      	beq.n	800e112 <find_volume+0x332>
 800e10e:	230d      	movs	r3, #13
 800e110:	e0a8      	b.n	800e264 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e114:	891b      	ldrh	r3, [r3, #8]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d001      	beq.n	800e11e <find_volume+0x33e>
 800e11a:	230d      	movs	r3, #13
 800e11c:	e0a2      	b.n	800e264 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e11e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e120:	3330      	adds	r3, #48	; 0x30
 800e122:	332c      	adds	r3, #44	; 0x2c
 800e124:	4618      	mov	r0, r3
 800e126:	f7fe fb99 	bl	800c85c <ld_dword>
 800e12a:	4602      	mov	r2, r0
 800e12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e12e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e132:	695b      	ldr	r3, [r3, #20]
 800e134:	009b      	lsls	r3, r3, #2
 800e136:	647b      	str	r3, [r7, #68]	; 0x44
 800e138:	e01f      	b.n	800e17a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e13c:	891b      	ldrh	r3, [r3, #8]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d101      	bne.n	800e146 <find_volume+0x366>
 800e142:	230d      	movs	r3, #13
 800e144:	e08e      	b.n	800e264 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e148:	6a1a      	ldr	r2, [r3, #32]
 800e14a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e14c:	441a      	add	r2, r3
 800e14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e150:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e152:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e156:	2b02      	cmp	r3, #2
 800e158:	d103      	bne.n	800e162 <find_volume+0x382>
 800e15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e15c:	695b      	ldr	r3, [r3, #20]
 800e15e:	005b      	lsls	r3, r3, #1
 800e160:	e00a      	b.n	800e178 <find_volume+0x398>
 800e162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e164:	695a      	ldr	r2, [r3, #20]
 800e166:	4613      	mov	r3, r2
 800e168:	005b      	lsls	r3, r3, #1
 800e16a:	4413      	add	r3, r2
 800e16c:	085a      	lsrs	r2, r3, #1
 800e16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e170:	695b      	ldr	r3, [r3, #20]
 800e172:	f003 0301 	and.w	r3, r3, #1
 800e176:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e178:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e17c:	699a      	ldr	r2, [r3, #24]
 800e17e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e180:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e184:	0a5b      	lsrs	r3, r3, #9
 800e186:	429a      	cmp	r2, r3
 800e188:	d201      	bcs.n	800e18e <find_volume+0x3ae>
 800e18a:	230d      	movs	r3, #13
 800e18c:	e06a      	b.n	800e264 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e190:	f04f 32ff 	mov.w	r2, #4294967295
 800e194:	611a      	str	r2, [r3, #16]
 800e196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e198:	691a      	ldr	r2, [r3, #16]
 800e19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e19c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800e19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1a0:	2280      	movs	r2, #128	; 0x80
 800e1a2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e1a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e1a8:	2b03      	cmp	r3, #3
 800e1aa:	d149      	bne.n	800e240 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ae:	3330      	adds	r3, #48	; 0x30
 800e1b0:	3330      	adds	r3, #48	; 0x30
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f7fe fb3a 	bl	800c82c <ld_word>
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	2b01      	cmp	r3, #1
 800e1bc:	d140      	bne.n	800e240 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e1be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1c0:	3301      	adds	r3, #1
 800e1c2:	4619      	mov	r1, r3
 800e1c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e1c6:	f7fe fde1 	bl	800cd8c <move_window>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d137      	bne.n	800e240 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800e1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1d8:	3330      	adds	r3, #48	; 0x30
 800e1da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f7fe fb24 	bl	800c82c <ld_word>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	461a      	mov	r2, r3
 800e1e8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e1ec:	429a      	cmp	r2, r3
 800e1ee:	d127      	bne.n	800e240 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1f2:	3330      	adds	r3, #48	; 0x30
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	f7fe fb31 	bl	800c85c <ld_dword>
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	4a1b      	ldr	r2, [pc, #108]	; (800e26c <find_volume+0x48c>)
 800e1fe:	4293      	cmp	r3, r2
 800e200:	d11e      	bne.n	800e240 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e204:	3330      	adds	r3, #48	; 0x30
 800e206:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e20a:	4618      	mov	r0, r3
 800e20c:	f7fe fb26 	bl	800c85c <ld_dword>
 800e210:	4603      	mov	r3, r0
 800e212:	4a17      	ldr	r2, [pc, #92]	; (800e270 <find_volume+0x490>)
 800e214:	4293      	cmp	r3, r2
 800e216:	d113      	bne.n	800e240 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e21a:	3330      	adds	r3, #48	; 0x30
 800e21c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e220:	4618      	mov	r0, r3
 800e222:	f7fe fb1b 	bl	800c85c <ld_dword>
 800e226:	4602      	mov	r2, r0
 800e228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e22a:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e22e:	3330      	adds	r3, #48	; 0x30
 800e230:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e234:	4618      	mov	r0, r3
 800e236:	f7fe fb11 	bl	800c85c <ld_dword>
 800e23a:	4602      	mov	r2, r0
 800e23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e23e:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e242:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e246:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e248:	4b0a      	ldr	r3, [pc, #40]	; (800e274 <find_volume+0x494>)
 800e24a:	881b      	ldrh	r3, [r3, #0]
 800e24c:	3301      	adds	r3, #1
 800e24e:	b29a      	uxth	r2, r3
 800e250:	4b08      	ldr	r3, [pc, #32]	; (800e274 <find_volume+0x494>)
 800e252:	801a      	strh	r2, [r3, #0]
 800e254:	4b07      	ldr	r3, [pc, #28]	; (800e274 <find_volume+0x494>)
 800e256:	881a      	ldrh	r2, [r3, #0]
 800e258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e25a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e25c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e25e:	f7fe fd2d 	bl	800ccbc <clear_lock>
#endif
	return FR_OK;
 800e262:	2300      	movs	r3, #0
}
 800e264:	4618      	mov	r0, r3
 800e266:	3758      	adds	r7, #88	; 0x58
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}
 800e26c:	41615252 	.word	0x41615252
 800e270:	61417272 	.word	0x61417272
 800e274:	200008d8 	.word	0x200008d8

0800e278 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b084      	sub	sp, #16
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
 800e280:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e282:	2309      	movs	r3, #9
 800e284:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d01c      	beq.n	800e2c6 <validate+0x4e>
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d018      	beq.n	800e2c6 <validate+0x4e>
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	781b      	ldrb	r3, [r3, #0]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d013      	beq.n	800e2c6 <validate+0x4e>
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	889a      	ldrh	r2, [r3, #4]
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	88db      	ldrh	r3, [r3, #6]
 800e2a8:	429a      	cmp	r2, r3
 800e2aa:	d10c      	bne.n	800e2c6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	785b      	ldrb	r3, [r3, #1]
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7fe fa1c 	bl	800c6f0 <disk_status>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	f003 0301 	and.w	r3, r3, #1
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d101      	bne.n	800e2c6 <validate+0x4e>
			res = FR_OK;
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e2c6:	7bfb      	ldrb	r3, [r7, #15]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d102      	bne.n	800e2d2 <validate+0x5a>
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	e000      	b.n	800e2d4 <validate+0x5c>
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	683a      	ldr	r2, [r7, #0]
 800e2d6:	6013      	str	r3, [r2, #0]
	return res;
 800e2d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	3710      	adds	r7, #16
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}
	...

0800e2e4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b088      	sub	sp, #32
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	60f8      	str	r0, [r7, #12]
 800e2ec:	60b9      	str	r1, [r7, #8]
 800e2ee:	4613      	mov	r3, r2
 800e2f0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e2f2:	68bb      	ldr	r3, [r7, #8]
 800e2f4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e2f6:	f107 0310 	add.w	r3, r7, #16
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f7ff fcd5 	bl	800dcaa <get_ldnumber>
 800e300:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e302:	69fb      	ldr	r3, [r7, #28]
 800e304:	2b00      	cmp	r3, #0
 800e306:	da01      	bge.n	800e30c <f_mount+0x28>
 800e308:	230b      	movs	r3, #11
 800e30a:	e02b      	b.n	800e364 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e30c:	4a17      	ldr	r2, [pc, #92]	; (800e36c <f_mount+0x88>)
 800e30e:	69fb      	ldr	r3, [r7, #28]
 800e310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e314:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e316:	69bb      	ldr	r3, [r7, #24]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d005      	beq.n	800e328 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e31c:	69b8      	ldr	r0, [r7, #24]
 800e31e:	f7fe fccd 	bl	800ccbc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e322:	69bb      	ldr	r3, [r7, #24]
 800e324:	2200      	movs	r2, #0
 800e326:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d002      	beq.n	800e334 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	2200      	movs	r2, #0
 800e332:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e334:	68fa      	ldr	r2, [r7, #12]
 800e336:	490d      	ldr	r1, [pc, #52]	; (800e36c <f_mount+0x88>)
 800e338:	69fb      	ldr	r3, [r7, #28]
 800e33a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d002      	beq.n	800e34a <f_mount+0x66>
 800e344:	79fb      	ldrb	r3, [r7, #7]
 800e346:	2b01      	cmp	r3, #1
 800e348:	d001      	beq.n	800e34e <f_mount+0x6a>
 800e34a:	2300      	movs	r3, #0
 800e34c:	e00a      	b.n	800e364 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e34e:	f107 010c 	add.w	r1, r7, #12
 800e352:	f107 0308 	add.w	r3, r7, #8
 800e356:	2200      	movs	r2, #0
 800e358:	4618      	mov	r0, r3
 800e35a:	f7ff fd41 	bl	800dde0 <find_volume>
 800e35e:	4603      	mov	r3, r0
 800e360:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e362:	7dfb      	ldrb	r3, [r7, #23]
}
 800e364:	4618      	mov	r0, r3
 800e366:	3720      	adds	r7, #32
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}
 800e36c:	200008d4 	.word	0x200008d4

0800e370 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b098      	sub	sp, #96	; 0x60
 800e374:	af00      	add	r7, sp, #0
 800e376:	60f8      	str	r0, [r7, #12]
 800e378:	60b9      	str	r1, [r7, #8]
 800e37a:	4613      	mov	r3, r2
 800e37c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d101      	bne.n	800e388 <f_open+0x18>
 800e384:	2309      	movs	r3, #9
 800e386:	e1ad      	b.n	800e6e4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e388:	79fb      	ldrb	r3, [r7, #7]
 800e38a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e38e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e390:	79fa      	ldrb	r2, [r7, #7]
 800e392:	f107 0110 	add.w	r1, r7, #16
 800e396:	f107 0308 	add.w	r3, r7, #8
 800e39a:	4618      	mov	r0, r3
 800e39c:	f7ff fd20 	bl	800dde0 <find_volume>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800e3a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	f040 8191 	bne.w	800e6d2 <f_open+0x362>
		dj.obj.fs = fs;
 800e3b0:	693b      	ldr	r3, [r7, #16]
 800e3b2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e3b4:	68ba      	ldr	r2, [r7, #8]
 800e3b6:	f107 0314 	add.w	r3, r7, #20
 800e3ba:	4611      	mov	r1, r2
 800e3bc:	4618      	mov	r0, r3
 800e3be:	f7ff fc03 	bl	800dbc8 <follow_path>
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e3c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d11a      	bne.n	800e406 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e3d0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e3d4:	b25b      	sxtb	r3, r3
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	da03      	bge.n	800e3e2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e3da:	2306      	movs	r3, #6
 800e3dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e3e0:	e011      	b.n	800e406 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e3e2:	79fb      	ldrb	r3, [r7, #7]
 800e3e4:	f023 0301 	bic.w	r3, r3, #1
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	bf14      	ite	ne
 800e3ec:	2301      	movne	r3, #1
 800e3ee:	2300      	moveq	r3, #0
 800e3f0:	b2db      	uxtb	r3, r3
 800e3f2:	461a      	mov	r2, r3
 800e3f4:	f107 0314 	add.w	r3, r7, #20
 800e3f8:	4611      	mov	r1, r2
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f7fe fb16 	bl	800ca2c <chk_lock>
 800e400:	4603      	mov	r3, r0
 800e402:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e406:	79fb      	ldrb	r3, [r7, #7]
 800e408:	f003 031c 	and.w	r3, r3, #28
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d07f      	beq.n	800e510 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e410:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e414:	2b00      	cmp	r3, #0
 800e416:	d017      	beq.n	800e448 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e418:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e41c:	2b04      	cmp	r3, #4
 800e41e:	d10e      	bne.n	800e43e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e420:	f7fe fb60 	bl	800cae4 <enq_lock>
 800e424:	4603      	mov	r3, r0
 800e426:	2b00      	cmp	r3, #0
 800e428:	d006      	beq.n	800e438 <f_open+0xc8>
 800e42a:	f107 0314 	add.w	r3, r7, #20
 800e42e:	4618      	mov	r0, r3
 800e430:	f7ff faa4 	bl	800d97c <dir_register>
 800e434:	4603      	mov	r3, r0
 800e436:	e000      	b.n	800e43a <f_open+0xca>
 800e438:	2312      	movs	r3, #18
 800e43a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e43e:	79fb      	ldrb	r3, [r7, #7]
 800e440:	f043 0308 	orr.w	r3, r3, #8
 800e444:	71fb      	strb	r3, [r7, #7]
 800e446:	e010      	b.n	800e46a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e448:	7ebb      	ldrb	r3, [r7, #26]
 800e44a:	f003 0311 	and.w	r3, r3, #17
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d003      	beq.n	800e45a <f_open+0xea>
					res = FR_DENIED;
 800e452:	2307      	movs	r3, #7
 800e454:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e458:	e007      	b.n	800e46a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e45a:	79fb      	ldrb	r3, [r7, #7]
 800e45c:	f003 0304 	and.w	r3, r3, #4
 800e460:	2b00      	cmp	r3, #0
 800e462:	d002      	beq.n	800e46a <f_open+0xfa>
 800e464:	2308      	movs	r3, #8
 800e466:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e46a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d168      	bne.n	800e544 <f_open+0x1d4>
 800e472:	79fb      	ldrb	r3, [r7, #7]
 800e474:	f003 0308 	and.w	r3, r3, #8
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d063      	beq.n	800e544 <f_open+0x1d4>
				dw = GET_FATTIME();
 800e47c:	f7fb ff98 	bl	800a3b0 <get_fattime>
 800e480:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e484:	330e      	adds	r3, #14
 800e486:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e488:	4618      	mov	r0, r3
 800e48a:	f7fe fa25 	bl	800c8d8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e48e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e490:	3316      	adds	r3, #22
 800e492:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e494:	4618      	mov	r0, r3
 800e496:	f7fe fa1f 	bl	800c8d8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e49a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e49c:	330b      	adds	r3, #11
 800e49e:	2220      	movs	r2, #32
 800e4a0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e4a2:	693b      	ldr	r3, [r7, #16]
 800e4a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e4a6:	4611      	mov	r1, r2
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	f7ff f976 	bl	800d79a <ld_clust>
 800e4ae:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e4b0:	693b      	ldr	r3, [r7, #16]
 800e4b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f7ff f98e 	bl	800d7d8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e4bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4be:	331c      	adds	r3, #28
 800e4c0:	2100      	movs	r1, #0
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f7fe fa08 	bl	800c8d8 <st_dword>
					fs->wflag = 1;
 800e4c8:	693b      	ldr	r3, [r7, #16]
 800e4ca:	2201      	movs	r2, #1
 800e4cc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e4ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d037      	beq.n	800e544 <f_open+0x1d4>
						dw = fs->winsect;
 800e4d4:	693b      	ldr	r3, [r7, #16]
 800e4d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4d8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e4da:	f107 0314 	add.w	r3, r7, #20
 800e4de:	2200      	movs	r2, #0
 800e4e0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	f7fe fea1 	bl	800d22a <remove_chain>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800e4ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d126      	bne.n	800e544 <f_open+0x1d4>
							res = move_window(fs, dw);
 800e4f6:	693b      	ldr	r3, [r7, #16]
 800e4f8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f7fe fc46 	bl	800cd8c <move_window>
 800e500:	4603      	mov	r3, r0
 800e502:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e506:	693b      	ldr	r3, [r7, #16]
 800e508:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e50a:	3a01      	subs	r2, #1
 800e50c:	60da      	str	r2, [r3, #12]
 800e50e:	e019      	b.n	800e544 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e510:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e514:	2b00      	cmp	r3, #0
 800e516:	d115      	bne.n	800e544 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e518:	7ebb      	ldrb	r3, [r7, #26]
 800e51a:	f003 0310 	and.w	r3, r3, #16
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d003      	beq.n	800e52a <f_open+0x1ba>
					res = FR_NO_FILE;
 800e522:	2304      	movs	r3, #4
 800e524:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e528:	e00c      	b.n	800e544 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e52a:	79fb      	ldrb	r3, [r7, #7]
 800e52c:	f003 0302 	and.w	r3, r3, #2
 800e530:	2b00      	cmp	r3, #0
 800e532:	d007      	beq.n	800e544 <f_open+0x1d4>
 800e534:	7ebb      	ldrb	r3, [r7, #26]
 800e536:	f003 0301 	and.w	r3, r3, #1
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d002      	beq.n	800e544 <f_open+0x1d4>
						res = FR_DENIED;
 800e53e:	2307      	movs	r3, #7
 800e540:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e544:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d128      	bne.n	800e59e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e54c:	79fb      	ldrb	r3, [r7, #7]
 800e54e:	f003 0308 	and.w	r3, r3, #8
 800e552:	2b00      	cmp	r3, #0
 800e554:	d003      	beq.n	800e55e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e556:	79fb      	ldrb	r3, [r7, #7]
 800e558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e55c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e55e:	693b      	ldr	r3, [r7, #16]
 800e560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e566:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e56c:	79fb      	ldrb	r3, [r7, #7]
 800e56e:	f023 0301 	bic.w	r3, r3, #1
 800e572:	2b00      	cmp	r3, #0
 800e574:	bf14      	ite	ne
 800e576:	2301      	movne	r3, #1
 800e578:	2300      	moveq	r3, #0
 800e57a:	b2db      	uxtb	r3, r3
 800e57c:	461a      	mov	r2, r3
 800e57e:	f107 0314 	add.w	r3, r7, #20
 800e582:	4611      	mov	r1, r2
 800e584:	4618      	mov	r0, r3
 800e586:	f7fe facf 	bl	800cb28 <inc_lock>
 800e58a:	4602      	mov	r2, r0
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	691b      	ldr	r3, [r3, #16]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d102      	bne.n	800e59e <f_open+0x22e>
 800e598:	2302      	movs	r3, #2
 800e59a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e59e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	f040 8095 	bne.w	800e6d2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e5a8:	693b      	ldr	r3, [r7, #16]
 800e5aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e5ac:	4611      	mov	r1, r2
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f7ff f8f3 	bl	800d79a <ld_clust>
 800e5b4:	4602      	mov	r2, r0
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e5ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5bc:	331c      	adds	r3, #28
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f7fe f94c 	bl	800c85c <ld_dword>
 800e5c4:	4602      	mov	r2, r0
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e5d0:	693a      	ldr	r2, [r7, #16]
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e5d6:	693b      	ldr	r3, [r7, #16]
 800e5d8:	88da      	ldrh	r2, [r3, #6]
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	79fa      	ldrb	r2, [r7, #7]
 800e5e2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	3330      	adds	r3, #48	; 0x30
 800e5fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e5fe:	2100      	movs	r1, #0
 800e600:	4618      	mov	r0, r3
 800e602:	f7fe f9b6 	bl	800c972 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e606:	79fb      	ldrb	r3, [r7, #7]
 800e608:	f003 0320 	and.w	r3, r3, #32
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d060      	beq.n	800e6d2 <f_open+0x362>
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	68db      	ldr	r3, [r3, #12]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d05c      	beq.n	800e6d2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	68da      	ldr	r2, [r3, #12]
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e620:	693b      	ldr	r3, [r7, #16]
 800e622:	895b      	ldrh	r3, [r3, #10]
 800e624:	025b      	lsls	r3, r3, #9
 800e626:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	689b      	ldr	r3, [r3, #8]
 800e62c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	68db      	ldr	r3, [r3, #12]
 800e632:	657b      	str	r3, [r7, #84]	; 0x54
 800e634:	e016      	b.n	800e664 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e63a:	4618      	mov	r0, r3
 800e63c:	f7fe fc61 	bl	800cf02 <get_fat>
 800e640:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e642:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e644:	2b01      	cmp	r3, #1
 800e646:	d802      	bhi.n	800e64e <f_open+0x2de>
 800e648:	2302      	movs	r3, #2
 800e64a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e64e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e650:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e654:	d102      	bne.n	800e65c <f_open+0x2ec>
 800e656:	2301      	movs	r3, #1
 800e658:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e65c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e65e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e660:	1ad3      	subs	r3, r2, r3
 800e662:	657b      	str	r3, [r7, #84]	; 0x54
 800e664:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d103      	bne.n	800e674 <f_open+0x304>
 800e66c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e66e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e670:	429a      	cmp	r2, r3
 800e672:	d8e0      	bhi.n	800e636 <f_open+0x2c6>
				}
				fp->clust = clst;
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e678:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e67a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d127      	bne.n	800e6d2 <f_open+0x362>
 800e682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d022      	beq.n	800e6d2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e68c:	693b      	ldr	r3, [r7, #16]
 800e68e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e690:	4618      	mov	r0, r3
 800e692:	f7fe fc17 	bl	800cec4 <clust2sect>
 800e696:	6478      	str	r0, [r7, #68]	; 0x44
 800e698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d103      	bne.n	800e6a6 <f_open+0x336>
						res = FR_INT_ERR;
 800e69e:	2302      	movs	r3, #2
 800e6a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e6a4:	e015      	b.n	800e6d2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e6a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6a8:	0a5a      	lsrs	r2, r3, #9
 800e6aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6ac:	441a      	add	r2, r3
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e6b2:	693b      	ldr	r3, [r7, #16]
 800e6b4:	7858      	ldrb	r0, [r3, #1]
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	6a1a      	ldr	r2, [r3, #32]
 800e6c0:	2301      	movs	r3, #1
 800e6c2:	f7fe f855 	bl	800c770 <disk_read>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d002      	beq.n	800e6d2 <f_open+0x362>
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e6d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d002      	beq.n	800e6e0 <f_open+0x370>
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	2200      	movs	r2, #0
 800e6de:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e6e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	3760      	adds	r7, #96	; 0x60
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	bd80      	pop	{r7, pc}

0800e6ec <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b08c      	sub	sp, #48	; 0x30
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	60f8      	str	r0, [r7, #12]
 800e6f4:	60b9      	str	r1, [r7, #8]
 800e6f6:	607a      	str	r2, [r7, #4]
 800e6f8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e6fa:	68bb      	ldr	r3, [r7, #8]
 800e6fc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	2200      	movs	r2, #0
 800e702:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	f107 0210 	add.w	r2, r7, #16
 800e70a:	4611      	mov	r1, r2
 800e70c:	4618      	mov	r0, r3
 800e70e:	f7ff fdb3 	bl	800e278 <validate>
 800e712:	4603      	mov	r3, r0
 800e714:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e718:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d107      	bne.n	800e730 <f_write+0x44>
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	7d5b      	ldrb	r3, [r3, #21]
 800e724:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e728:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d002      	beq.n	800e736 <f_write+0x4a>
 800e730:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e734:	e14b      	b.n	800e9ce <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	7d1b      	ldrb	r3, [r3, #20]
 800e73a:	f003 0302 	and.w	r3, r3, #2
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d101      	bne.n	800e746 <f_write+0x5a>
 800e742:	2307      	movs	r3, #7
 800e744:	e143      	b.n	800e9ce <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	699a      	ldr	r2, [r3, #24]
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	441a      	add	r2, r3
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	699b      	ldr	r3, [r3, #24]
 800e752:	429a      	cmp	r2, r3
 800e754:	f080 812d 	bcs.w	800e9b2 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	699b      	ldr	r3, [r3, #24]
 800e75c:	43db      	mvns	r3, r3
 800e75e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e760:	e127      	b.n	800e9b2 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	699b      	ldr	r3, [r3, #24]
 800e766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	f040 80e3 	bne.w	800e936 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	699b      	ldr	r3, [r3, #24]
 800e774:	0a5b      	lsrs	r3, r3, #9
 800e776:	693a      	ldr	r2, [r7, #16]
 800e778:	8952      	ldrh	r2, [r2, #10]
 800e77a:	3a01      	subs	r2, #1
 800e77c:	4013      	ands	r3, r2
 800e77e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e780:	69bb      	ldr	r3, [r7, #24]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d143      	bne.n	800e80e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	699b      	ldr	r3, [r3, #24]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d10c      	bne.n	800e7a8 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	689b      	ldr	r3, [r3, #8]
 800e792:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e796:	2b00      	cmp	r3, #0
 800e798:	d11a      	bne.n	800e7d0 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	2100      	movs	r1, #0
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f7fe fda8 	bl	800d2f4 <create_chain>
 800e7a4:	62b8      	str	r0, [r7, #40]	; 0x28
 800e7a6:	e013      	b.n	800e7d0 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d007      	beq.n	800e7c0 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	699b      	ldr	r3, [r3, #24]
 800e7b4:	4619      	mov	r1, r3
 800e7b6:	68f8      	ldr	r0, [r7, #12]
 800e7b8:	f7fe fe34 	bl	800d424 <clmt_clust>
 800e7bc:	62b8      	str	r0, [r7, #40]	; 0x28
 800e7be:	e007      	b.n	800e7d0 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e7c0:	68fa      	ldr	r2, [r7, #12]
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	69db      	ldr	r3, [r3, #28]
 800e7c6:	4619      	mov	r1, r3
 800e7c8:	4610      	mov	r0, r2
 800e7ca:	f7fe fd93 	bl	800d2f4 <create_chain>
 800e7ce:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	f000 80f2 	beq.w	800e9bc <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7da:	2b01      	cmp	r3, #1
 800e7dc:	d104      	bne.n	800e7e8 <f_write+0xfc>
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	2202      	movs	r2, #2
 800e7e2:	755a      	strb	r2, [r3, #21]
 800e7e4:	2302      	movs	r3, #2
 800e7e6:	e0f2      	b.n	800e9ce <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7ee:	d104      	bne.n	800e7fa <f_write+0x10e>
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	2201      	movs	r2, #1
 800e7f4:	755a      	strb	r2, [r3, #21]
 800e7f6:	2301      	movs	r3, #1
 800e7f8:	e0e9      	b.n	800e9ce <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7fe:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	689b      	ldr	r3, [r3, #8]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d102      	bne.n	800e80e <f_write+0x122>
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e80c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	7d1b      	ldrb	r3, [r3, #20]
 800e812:	b25b      	sxtb	r3, r3
 800e814:	2b00      	cmp	r3, #0
 800e816:	da18      	bge.n	800e84a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e818:	693b      	ldr	r3, [r7, #16]
 800e81a:	7858      	ldrb	r0, [r3, #1]
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	6a1a      	ldr	r2, [r3, #32]
 800e826:	2301      	movs	r3, #1
 800e828:	f7fd ffc2 	bl	800c7b0 <disk_write>
 800e82c:	4603      	mov	r3, r0
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d004      	beq.n	800e83c <f_write+0x150>
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	2201      	movs	r2, #1
 800e836:	755a      	strb	r2, [r3, #21]
 800e838:	2301      	movs	r3, #1
 800e83a:	e0c8      	b.n	800e9ce <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	7d1b      	ldrb	r3, [r3, #20]
 800e840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e844:	b2da      	uxtb	r2, r3
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e84a:	693a      	ldr	r2, [r7, #16]
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	69db      	ldr	r3, [r3, #28]
 800e850:	4619      	mov	r1, r3
 800e852:	4610      	mov	r0, r2
 800e854:	f7fe fb36 	bl	800cec4 <clust2sect>
 800e858:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e85a:	697b      	ldr	r3, [r7, #20]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d104      	bne.n	800e86a <f_write+0x17e>
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	2202      	movs	r2, #2
 800e864:	755a      	strb	r2, [r3, #21]
 800e866:	2302      	movs	r3, #2
 800e868:	e0b1      	b.n	800e9ce <f_write+0x2e2>
			sect += csect;
 800e86a:	697a      	ldr	r2, [r7, #20]
 800e86c:	69bb      	ldr	r3, [r7, #24]
 800e86e:	4413      	add	r3, r2
 800e870:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	0a5b      	lsrs	r3, r3, #9
 800e876:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e878:	6a3b      	ldr	r3, [r7, #32]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d03c      	beq.n	800e8f8 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e87e:	69ba      	ldr	r2, [r7, #24]
 800e880:	6a3b      	ldr	r3, [r7, #32]
 800e882:	4413      	add	r3, r2
 800e884:	693a      	ldr	r2, [r7, #16]
 800e886:	8952      	ldrh	r2, [r2, #10]
 800e888:	4293      	cmp	r3, r2
 800e88a:	d905      	bls.n	800e898 <f_write+0x1ac>
					cc = fs->csize - csect;
 800e88c:	693b      	ldr	r3, [r7, #16]
 800e88e:	895b      	ldrh	r3, [r3, #10]
 800e890:	461a      	mov	r2, r3
 800e892:	69bb      	ldr	r3, [r7, #24]
 800e894:	1ad3      	subs	r3, r2, r3
 800e896:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e898:	693b      	ldr	r3, [r7, #16]
 800e89a:	7858      	ldrb	r0, [r3, #1]
 800e89c:	6a3b      	ldr	r3, [r7, #32]
 800e89e:	697a      	ldr	r2, [r7, #20]
 800e8a0:	69f9      	ldr	r1, [r7, #28]
 800e8a2:	f7fd ff85 	bl	800c7b0 <disk_write>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d004      	beq.n	800e8b6 <f_write+0x1ca>
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	2201      	movs	r2, #1
 800e8b0:	755a      	strb	r2, [r3, #21]
 800e8b2:	2301      	movs	r3, #1
 800e8b4:	e08b      	b.n	800e9ce <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	6a1a      	ldr	r2, [r3, #32]
 800e8ba:	697b      	ldr	r3, [r7, #20]
 800e8bc:	1ad3      	subs	r3, r2, r3
 800e8be:	6a3a      	ldr	r2, [r7, #32]
 800e8c0:	429a      	cmp	r2, r3
 800e8c2:	d915      	bls.n	800e8f0 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	6a1a      	ldr	r2, [r3, #32]
 800e8ce:	697b      	ldr	r3, [r7, #20]
 800e8d0:	1ad3      	subs	r3, r2, r3
 800e8d2:	025b      	lsls	r3, r3, #9
 800e8d4:	69fa      	ldr	r2, [r7, #28]
 800e8d6:	4413      	add	r3, r2
 800e8d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e8dc:	4619      	mov	r1, r3
 800e8de:	f7fe f827 	bl	800c930 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	7d1b      	ldrb	r3, [r3, #20]
 800e8e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e8ea:	b2da      	uxtb	r2, r3
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e8f0:	6a3b      	ldr	r3, [r7, #32]
 800e8f2:	025b      	lsls	r3, r3, #9
 800e8f4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800e8f6:	e03f      	b.n	800e978 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	6a1b      	ldr	r3, [r3, #32]
 800e8fc:	697a      	ldr	r2, [r7, #20]
 800e8fe:	429a      	cmp	r2, r3
 800e900:	d016      	beq.n	800e930 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	699a      	ldr	r2, [r3, #24]
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e90a:	429a      	cmp	r2, r3
 800e90c:	d210      	bcs.n	800e930 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e90e:	693b      	ldr	r3, [r7, #16]
 800e910:	7858      	ldrb	r0, [r3, #1]
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e918:	2301      	movs	r3, #1
 800e91a:	697a      	ldr	r2, [r7, #20]
 800e91c:	f7fd ff28 	bl	800c770 <disk_read>
 800e920:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e922:	2b00      	cmp	r3, #0
 800e924:	d004      	beq.n	800e930 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	2201      	movs	r2, #1
 800e92a:	755a      	strb	r2, [r3, #21]
 800e92c:	2301      	movs	r3, #1
 800e92e:	e04e      	b.n	800e9ce <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	697a      	ldr	r2, [r7, #20]
 800e934:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	699b      	ldr	r3, [r3, #24]
 800e93a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e93e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e942:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	429a      	cmp	r2, r3
 800e94a:	d901      	bls.n	800e950 <f_write+0x264>
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	699b      	ldr	r3, [r3, #24]
 800e95a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e95e:	4413      	add	r3, r2
 800e960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e962:	69f9      	ldr	r1, [r7, #28]
 800e964:	4618      	mov	r0, r3
 800e966:	f7fd ffe3 	bl	800c930 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	7d1b      	ldrb	r3, [r3, #20]
 800e96e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e972:	b2da      	uxtb	r2, r3
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e978:	69fa      	ldr	r2, [r7, #28]
 800e97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e97c:	4413      	add	r3, r2
 800e97e:	61fb      	str	r3, [r7, #28]
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	699a      	ldr	r2, [r3, #24]
 800e984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e986:	441a      	add	r2, r3
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	619a      	str	r2, [r3, #24]
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	68da      	ldr	r2, [r3, #12]
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	699b      	ldr	r3, [r3, #24]
 800e994:	429a      	cmp	r2, r3
 800e996:	bf38      	it	cc
 800e998:	461a      	movcc	r2, r3
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	60da      	str	r2, [r3, #12]
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	681a      	ldr	r2, [r3, #0]
 800e9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a4:	441a      	add	r2, r3
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	601a      	str	r2, [r3, #0]
 800e9aa:	687a      	ldr	r2, [r7, #4]
 800e9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ae:	1ad3      	subs	r3, r2, r3
 800e9b0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	f47f aed4 	bne.w	800e762 <f_write+0x76>
 800e9ba:	e000      	b.n	800e9be <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e9bc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	7d1b      	ldrb	r3, [r3, #20]
 800e9c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9c6:	b2da      	uxtb	r2, r3
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e9cc:	2300      	movs	r3, #0
}
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	3730      	adds	r7, #48	; 0x30
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd80      	pop	{r7, pc}

0800e9d6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e9d6:	b580      	push	{r7, lr}
 800e9d8:	b086      	sub	sp, #24
 800e9da:	af00      	add	r7, sp, #0
 800e9dc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	f107 0208 	add.w	r2, r7, #8
 800e9e4:	4611      	mov	r1, r2
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f7ff fc46 	bl	800e278 <validate>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e9f0:	7dfb      	ldrb	r3, [r7, #23]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d168      	bne.n	800eac8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	7d1b      	ldrb	r3, [r3, #20]
 800e9fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d062      	beq.n	800eac8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	7d1b      	ldrb	r3, [r3, #20]
 800ea06:	b25b      	sxtb	r3, r3
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	da15      	bge.n	800ea38 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ea0c:	68bb      	ldr	r3, [r7, #8]
 800ea0e:	7858      	ldrb	r0, [r3, #1]
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	6a1a      	ldr	r2, [r3, #32]
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	f7fd fec8 	bl	800c7b0 <disk_write>
 800ea20:	4603      	mov	r3, r0
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d001      	beq.n	800ea2a <f_sync+0x54>
 800ea26:	2301      	movs	r3, #1
 800ea28:	e04f      	b.n	800eaca <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	7d1b      	ldrb	r3, [r3, #20]
 800ea2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea32:	b2da      	uxtb	r2, r3
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ea38:	f7fb fcba 	bl	800a3b0 <get_fattime>
 800ea3c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ea3e:	68ba      	ldr	r2, [r7, #8]
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea44:	4619      	mov	r1, r3
 800ea46:	4610      	mov	r0, r2
 800ea48:	f7fe f9a0 	bl	800cd8c <move_window>
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ea50:	7dfb      	ldrb	r3, [r7, #23]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d138      	bne.n	800eac8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea5a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	330b      	adds	r3, #11
 800ea60:	781a      	ldrb	r2, [r3, #0]
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	330b      	adds	r3, #11
 800ea66:	f042 0220 	orr.w	r2, r2, #32
 800ea6a:	b2d2      	uxtb	r2, r2
 800ea6c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	6818      	ldr	r0, [r3, #0]
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	689b      	ldr	r3, [r3, #8]
 800ea76:	461a      	mov	r2, r3
 800ea78:	68f9      	ldr	r1, [r7, #12]
 800ea7a:	f7fe fead 	bl	800d7d8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	f103 021c 	add.w	r2, r3, #28
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	68db      	ldr	r3, [r3, #12]
 800ea88:	4619      	mov	r1, r3
 800ea8a:	4610      	mov	r0, r2
 800ea8c:	f7fd ff24 	bl	800c8d8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	3316      	adds	r3, #22
 800ea94:	6939      	ldr	r1, [r7, #16]
 800ea96:	4618      	mov	r0, r3
 800ea98:	f7fd ff1e 	bl	800c8d8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	3312      	adds	r3, #18
 800eaa0:	2100      	movs	r1, #0
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	f7fd fefd 	bl	800c8a2 <st_word>
					fs->wflag = 1;
 800eaa8:	68bb      	ldr	r3, [r7, #8]
 800eaaa:	2201      	movs	r2, #1
 800eaac:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	4618      	mov	r0, r3
 800eab2:	f7fe f999 	bl	800cde8 <sync_fs>
 800eab6:	4603      	mov	r3, r0
 800eab8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	7d1b      	ldrb	r3, [r3, #20]
 800eabe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eac2:	b2da      	uxtb	r2, r3
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800eac8:	7dfb      	ldrb	r3, [r7, #23]
}
 800eaca:	4618      	mov	r0, r3
 800eacc:	3718      	adds	r7, #24
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}

0800ead2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ead2:	b580      	push	{r7, lr}
 800ead4:	b084      	sub	sp, #16
 800ead6:	af00      	add	r7, sp, #0
 800ead8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	f7ff ff7b 	bl	800e9d6 <f_sync>
 800eae0:	4603      	mov	r3, r0
 800eae2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800eae4:	7bfb      	ldrb	r3, [r7, #15]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d118      	bne.n	800eb1c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	f107 0208 	add.w	r2, r7, #8
 800eaf0:	4611      	mov	r1, r2
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f7ff fbc0 	bl	800e278 <validate>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800eafc:	7bfb      	ldrb	r3, [r7, #15]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d10c      	bne.n	800eb1c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	691b      	ldr	r3, [r3, #16]
 800eb06:	4618      	mov	r0, r3
 800eb08:	f7fe f89c 	bl	800cc44 <dec_lock>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800eb10:	7bfb      	ldrb	r3, [r7, #15]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d102      	bne.n	800eb1c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	2200      	movs	r2, #0
 800eb1a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800eb1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb1e:	4618      	mov	r0, r3
 800eb20:	3710      	adds	r7, #16
 800eb22:	46bd      	mov	sp, r7
 800eb24:	bd80      	pop	{r7, pc}

0800eb26 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800eb26:	b580      	push	{r7, lr}
 800eb28:	b090      	sub	sp, #64	; 0x40
 800eb2a:	af00      	add	r7, sp, #0
 800eb2c:	6078      	str	r0, [r7, #4]
 800eb2e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f107 0208 	add.w	r2, r7, #8
 800eb36:	4611      	mov	r1, r2
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f7ff fb9d 	bl	800e278 <validate>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800eb44:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d103      	bne.n	800eb54 <f_lseek+0x2e>
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	7d5b      	ldrb	r3, [r3, #21]
 800eb50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800eb54:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d002      	beq.n	800eb62 <f_lseek+0x3c>
 800eb5c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800eb60:	e1e6      	b.n	800ef30 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	f000 80d1 	beq.w	800ed0e <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb72:	d15a      	bne.n	800ec2a <f_lseek+0x104>
			tbl = fp->cltbl;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb78:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800eb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb7c:	1d1a      	adds	r2, r3, #4
 800eb7e:	627a      	str	r2, [r7, #36]	; 0x24
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	617b      	str	r3, [r7, #20]
 800eb84:	2302      	movs	r3, #2
 800eb86:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	689b      	ldr	r3, [r3, #8]
 800eb8c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800eb8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d03a      	beq.n	800ec0a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800eb94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb96:	613b      	str	r3, [r7, #16]
 800eb98:	2300      	movs	r3, #0
 800eb9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb9e:	3302      	adds	r3, #2
 800eba0:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800eba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eba4:	60fb      	str	r3, [r7, #12]
 800eba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba8:	3301      	adds	r3, #1
 800ebaa:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f7fe f9a6 	bl	800cf02 <get_fat>
 800ebb6:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ebb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebba:	2b01      	cmp	r3, #1
 800ebbc:	d804      	bhi.n	800ebc8 <f_lseek+0xa2>
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	2202      	movs	r2, #2
 800ebc2:	755a      	strb	r2, [r3, #21]
 800ebc4:	2302      	movs	r3, #2
 800ebc6:	e1b3      	b.n	800ef30 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ebc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebce:	d104      	bne.n	800ebda <f_lseek+0xb4>
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2201      	movs	r2, #1
 800ebd4:	755a      	strb	r2, [r3, #21]
 800ebd6:	2301      	movs	r3, #1
 800ebd8:	e1aa      	b.n	800ef30 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	3301      	adds	r3, #1
 800ebde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebe0:	429a      	cmp	r2, r3
 800ebe2:	d0de      	beq.n	800eba2 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ebe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebe6:	697b      	ldr	r3, [r7, #20]
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	d809      	bhi.n	800ec00 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800ebec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebee:	1d1a      	adds	r2, r3, #4
 800ebf0:	627a      	str	r2, [r7, #36]	; 0x24
 800ebf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ebf4:	601a      	str	r2, [r3, #0]
 800ebf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebf8:	1d1a      	adds	r2, r3, #4
 800ebfa:	627a      	str	r2, [r7, #36]	; 0x24
 800ebfc:	693a      	ldr	r2, [r7, #16]
 800ebfe:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	695b      	ldr	r3, [r3, #20]
 800ec04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec06:	429a      	cmp	r2, r3
 800ec08:	d3c4      	bcc.n	800eb94 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec10:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800ec12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec14:	697b      	ldr	r3, [r7, #20]
 800ec16:	429a      	cmp	r2, r3
 800ec18:	d803      	bhi.n	800ec22 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800ec1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	601a      	str	r2, [r3, #0]
 800ec20:	e184      	b.n	800ef2c <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800ec22:	2311      	movs	r3, #17
 800ec24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ec28:	e180      	b.n	800ef2c <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	68db      	ldr	r3, [r3, #12]
 800ec2e:	683a      	ldr	r2, [r7, #0]
 800ec30:	429a      	cmp	r2, r3
 800ec32:	d902      	bls.n	800ec3a <f_lseek+0x114>
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	68db      	ldr	r3, [r3, #12]
 800ec38:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	683a      	ldr	r2, [r7, #0]
 800ec3e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	f000 8172 	beq.w	800ef2c <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	3b01      	subs	r3, #1
 800ec4c:	4619      	mov	r1, r3
 800ec4e:	6878      	ldr	r0, [r7, #4]
 800ec50:	f7fe fbe8 	bl	800d424 <clmt_clust>
 800ec54:	4602      	mov	r2, r0
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800ec5a:	68ba      	ldr	r2, [r7, #8]
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	69db      	ldr	r3, [r3, #28]
 800ec60:	4619      	mov	r1, r3
 800ec62:	4610      	mov	r0, r2
 800ec64:	f7fe f92e 	bl	800cec4 <clust2sect>
 800ec68:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800ec6a:	69bb      	ldr	r3, [r7, #24]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d104      	bne.n	800ec7a <f_lseek+0x154>
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2202      	movs	r2, #2
 800ec74:	755a      	strb	r2, [r3, #21]
 800ec76:	2302      	movs	r3, #2
 800ec78:	e15a      	b.n	800ef30 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	3b01      	subs	r3, #1
 800ec7e:	0a5b      	lsrs	r3, r3, #9
 800ec80:	68ba      	ldr	r2, [r7, #8]
 800ec82:	8952      	ldrh	r2, [r2, #10]
 800ec84:	3a01      	subs	r2, #1
 800ec86:	4013      	ands	r3, r2
 800ec88:	69ba      	ldr	r2, [r7, #24]
 800ec8a:	4413      	add	r3, r2
 800ec8c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	699b      	ldr	r3, [r3, #24]
 800ec92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	f000 8148 	beq.w	800ef2c <f_lseek+0x406>
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	6a1b      	ldr	r3, [r3, #32]
 800eca0:	69ba      	ldr	r2, [r7, #24]
 800eca2:	429a      	cmp	r2, r3
 800eca4:	f000 8142 	beq.w	800ef2c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	7d1b      	ldrb	r3, [r3, #20]
 800ecac:	b25b      	sxtb	r3, r3
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	da18      	bge.n	800ece4 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	7858      	ldrb	r0, [r3, #1]
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	6a1a      	ldr	r2, [r3, #32]
 800ecc0:	2301      	movs	r3, #1
 800ecc2:	f7fd fd75 	bl	800c7b0 <disk_write>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d004      	beq.n	800ecd6 <f_lseek+0x1b0>
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	2201      	movs	r2, #1
 800ecd0:	755a      	strb	r2, [r3, #21]
 800ecd2:	2301      	movs	r3, #1
 800ecd4:	e12c      	b.n	800ef30 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	7d1b      	ldrb	r3, [r3, #20]
 800ecda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ecde:	b2da      	uxtb	r2, r3
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800ece4:	68bb      	ldr	r3, [r7, #8]
 800ece6:	7858      	ldrb	r0, [r3, #1]
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ecee:	2301      	movs	r3, #1
 800ecf0:	69ba      	ldr	r2, [r7, #24]
 800ecf2:	f7fd fd3d 	bl	800c770 <disk_read>
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d004      	beq.n	800ed06 <f_lseek+0x1e0>
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2201      	movs	r2, #1
 800ed00:	755a      	strb	r2, [r3, #21]
 800ed02:	2301      	movs	r3, #1
 800ed04:	e114      	b.n	800ef30 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	69ba      	ldr	r2, [r7, #24]
 800ed0a:	621a      	str	r2, [r3, #32]
 800ed0c:	e10e      	b.n	800ef2c <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	68db      	ldr	r3, [r3, #12]
 800ed12:	683a      	ldr	r2, [r7, #0]
 800ed14:	429a      	cmp	r2, r3
 800ed16:	d908      	bls.n	800ed2a <f_lseek+0x204>
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	7d1b      	ldrb	r3, [r3, #20]
 800ed1c:	f003 0302 	and.w	r3, r3, #2
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d102      	bne.n	800ed2a <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	68db      	ldr	r3, [r3, #12]
 800ed28:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	699b      	ldr	r3, [r3, #24]
 800ed2e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800ed30:	2300      	movs	r3, #0
 800ed32:	637b      	str	r3, [r7, #52]	; 0x34
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ed38:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	f000 80a7 	beq.w	800ee90 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800ed42:	68bb      	ldr	r3, [r7, #8]
 800ed44:	895b      	ldrh	r3, [r3, #10]
 800ed46:	025b      	lsls	r3, r3, #9
 800ed48:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800ed4a:	6a3b      	ldr	r3, [r7, #32]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d01b      	beq.n	800ed88 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800ed50:	683b      	ldr	r3, [r7, #0]
 800ed52:	1e5a      	subs	r2, r3, #1
 800ed54:	69fb      	ldr	r3, [r7, #28]
 800ed56:	fbb2 f2f3 	udiv	r2, r2, r3
 800ed5a:	6a3b      	ldr	r3, [r7, #32]
 800ed5c:	1e59      	subs	r1, r3, #1
 800ed5e:	69fb      	ldr	r3, [r7, #28]
 800ed60:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800ed64:	429a      	cmp	r2, r3
 800ed66:	d30f      	bcc.n	800ed88 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800ed68:	6a3b      	ldr	r3, [r7, #32]
 800ed6a:	1e5a      	subs	r2, r3, #1
 800ed6c:	69fb      	ldr	r3, [r7, #28]
 800ed6e:	425b      	negs	r3, r3
 800ed70:	401a      	ands	r2, r3
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	699b      	ldr	r3, [r3, #24]
 800ed7a:	683a      	ldr	r2, [r7, #0]
 800ed7c:	1ad3      	subs	r3, r2, r3
 800ed7e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	69db      	ldr	r3, [r3, #28]
 800ed84:	63bb      	str	r3, [r7, #56]	; 0x38
 800ed86:	e022      	b.n	800edce <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	689b      	ldr	r3, [r3, #8]
 800ed8c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800ed8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d119      	bne.n	800edc8 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2100      	movs	r1, #0
 800ed98:	4618      	mov	r0, r3
 800ed9a:	f7fe faab 	bl	800d2f4 <create_chain>
 800ed9e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800eda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eda2:	2b01      	cmp	r3, #1
 800eda4:	d104      	bne.n	800edb0 <f_lseek+0x28a>
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	2202      	movs	r2, #2
 800edaa:	755a      	strb	r2, [r3, #21]
 800edac:	2302      	movs	r3, #2
 800edae:	e0bf      	b.n	800ef30 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800edb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edb6:	d104      	bne.n	800edc2 <f_lseek+0x29c>
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2201      	movs	r2, #1
 800edbc:	755a      	strb	r2, [r3, #21]
 800edbe:	2301      	movs	r3, #1
 800edc0:	e0b6      	b.n	800ef30 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800edc6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800edcc:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800edce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d05d      	beq.n	800ee90 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800edd4:	e03a      	b.n	800ee4c <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800edd6:	683a      	ldr	r2, [r7, #0]
 800edd8:	69fb      	ldr	r3, [r7, #28]
 800edda:	1ad3      	subs	r3, r2, r3
 800eddc:	603b      	str	r3, [r7, #0]
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	699a      	ldr	r2, [r3, #24]
 800ede2:	69fb      	ldr	r3, [r7, #28]
 800ede4:	441a      	add	r2, r3
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	7d1b      	ldrb	r3, [r3, #20]
 800edee:	f003 0302 	and.w	r3, r3, #2
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d00b      	beq.n	800ee0e <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800edfa:	4618      	mov	r0, r3
 800edfc:	f7fe fa7a 	bl	800d2f4 <create_chain>
 800ee00:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800ee02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d108      	bne.n	800ee1a <f_lseek+0x2f4>
							ofs = 0; break;
 800ee08:	2300      	movs	r3, #0
 800ee0a:	603b      	str	r3, [r7, #0]
 800ee0c:	e022      	b.n	800ee54 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ee12:	4618      	mov	r0, r3
 800ee14:	f7fe f875 	bl	800cf02 <get_fat>
 800ee18:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ee1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee20:	d104      	bne.n	800ee2c <f_lseek+0x306>
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	2201      	movs	r2, #1
 800ee26:	755a      	strb	r2, [r3, #21]
 800ee28:	2301      	movs	r3, #1
 800ee2a:	e081      	b.n	800ef30 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800ee2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee2e:	2b01      	cmp	r3, #1
 800ee30:	d904      	bls.n	800ee3c <f_lseek+0x316>
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	695b      	ldr	r3, [r3, #20]
 800ee36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee38:	429a      	cmp	r2, r3
 800ee3a:	d304      	bcc.n	800ee46 <f_lseek+0x320>
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	2202      	movs	r2, #2
 800ee40:	755a      	strb	r2, [r3, #21]
 800ee42:	2302      	movs	r3, #2
 800ee44:	e074      	b.n	800ef30 <f_lseek+0x40a>
					fp->clust = clst;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee4a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800ee4c:	683a      	ldr	r2, [r7, #0]
 800ee4e:	69fb      	ldr	r3, [r7, #28]
 800ee50:	429a      	cmp	r2, r3
 800ee52:	d8c0      	bhi.n	800edd6 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	699a      	ldr	r2, [r3, #24]
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	441a      	add	r2, r3
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d012      	beq.n	800ee90 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800ee6a:	68bb      	ldr	r3, [r7, #8]
 800ee6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f7fe f828 	bl	800cec4 <clust2sect>
 800ee74:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800ee76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d104      	bne.n	800ee86 <f_lseek+0x360>
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2202      	movs	r2, #2
 800ee80:	755a      	strb	r2, [r3, #21]
 800ee82:	2302      	movs	r3, #2
 800ee84:	e054      	b.n	800ef30 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800ee86:	683b      	ldr	r3, [r7, #0]
 800ee88:	0a5b      	lsrs	r3, r3, #9
 800ee8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee8c:	4413      	add	r3, r2
 800ee8e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	699a      	ldr	r2, [r3, #24]
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	68db      	ldr	r3, [r3, #12]
 800ee98:	429a      	cmp	r2, r3
 800ee9a:	d90a      	bls.n	800eeb2 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	699a      	ldr	r2, [r3, #24]
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	7d1b      	ldrb	r3, [r3, #20]
 800eea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eeac:	b2da      	uxtb	r2, r3
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	699b      	ldr	r3, [r3, #24]
 800eeb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d036      	beq.n	800ef2c <f_lseek+0x406>
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	6a1b      	ldr	r3, [r3, #32]
 800eec2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eec4:	429a      	cmp	r2, r3
 800eec6:	d031      	beq.n	800ef2c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	7d1b      	ldrb	r3, [r3, #20]
 800eecc:	b25b      	sxtb	r3, r3
 800eece:	2b00      	cmp	r3, #0
 800eed0:	da18      	bge.n	800ef04 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eed2:	68bb      	ldr	r3, [r7, #8]
 800eed4:	7858      	ldrb	r0, [r3, #1]
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	6a1a      	ldr	r2, [r3, #32]
 800eee0:	2301      	movs	r3, #1
 800eee2:	f7fd fc65 	bl	800c7b0 <disk_write>
 800eee6:	4603      	mov	r3, r0
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d004      	beq.n	800eef6 <f_lseek+0x3d0>
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2201      	movs	r2, #1
 800eef0:	755a      	strb	r2, [r3, #21]
 800eef2:	2301      	movs	r3, #1
 800eef4:	e01c      	b.n	800ef30 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	7d1b      	ldrb	r3, [r3, #20]
 800eefa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eefe:	b2da      	uxtb	r2, r3
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ef04:	68bb      	ldr	r3, [r7, #8]
 800ef06:	7858      	ldrb	r0, [r3, #1]
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ef0e:	2301      	movs	r3, #1
 800ef10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ef12:	f7fd fc2d 	bl	800c770 <disk_read>
 800ef16:	4603      	mov	r3, r0
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d004      	beq.n	800ef26 <f_lseek+0x400>
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	2201      	movs	r2, #1
 800ef20:	755a      	strb	r2, [r3, #21]
 800ef22:	2301      	movs	r3, #1
 800ef24:	e004      	b.n	800ef30 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ef2a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800ef2c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800ef30:	4618      	mov	r0, r3
 800ef32:	3740      	adds	r7, #64	; 0x40
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd80      	pop	{r7, pc}

0800ef38 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b086      	sub	sp, #24
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
 800ef40:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d101      	bne.n	800ef4c <f_opendir+0x14>
 800ef48:	2309      	movs	r3, #9
 800ef4a:	e064      	b.n	800f016 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800ef50:	f107 010c 	add.w	r1, r7, #12
 800ef54:	463b      	mov	r3, r7
 800ef56:	2200      	movs	r2, #0
 800ef58:	4618      	mov	r0, r3
 800ef5a:	f7fe ff41 	bl	800dde0 <find_volume>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ef62:	7dfb      	ldrb	r3, [r7, #23]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d14f      	bne.n	800f008 <f_opendir+0xd0>
		obj->fs = fs;
 800ef68:	68fa      	ldr	r2, [r7, #12]
 800ef6a:	693b      	ldr	r3, [r7, #16]
 800ef6c:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800ef6e:	683b      	ldr	r3, [r7, #0]
 800ef70:	4619      	mov	r1, r3
 800ef72:	6878      	ldr	r0, [r7, #4]
 800ef74:	f7fe fe28 	bl	800dbc8 <follow_path>
 800ef78:	4603      	mov	r3, r0
 800ef7a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800ef7c:	7dfb      	ldrb	r3, [r7, #23]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d13d      	bne.n	800effe <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ef88:	b25b      	sxtb	r3, r3
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	db12      	blt.n	800efb4 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800ef8e:	693b      	ldr	r3, [r7, #16]
 800ef90:	799b      	ldrb	r3, [r3, #6]
 800ef92:	f003 0310 	and.w	r3, r3, #16
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d00a      	beq.n	800efb0 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800ef9a:	68fa      	ldr	r2, [r7, #12]
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	6a1b      	ldr	r3, [r3, #32]
 800efa0:	4619      	mov	r1, r3
 800efa2:	4610      	mov	r0, r2
 800efa4:	f7fe fbf9 	bl	800d79a <ld_clust>
 800efa8:	4602      	mov	r2, r0
 800efaa:	693b      	ldr	r3, [r7, #16]
 800efac:	609a      	str	r2, [r3, #8]
 800efae:	e001      	b.n	800efb4 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800efb0:	2305      	movs	r3, #5
 800efb2:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800efb4:	7dfb      	ldrb	r3, [r7, #23]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d121      	bne.n	800effe <f_opendir+0xc6>
				obj->id = fs->id;
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	88da      	ldrh	r2, [r3, #6]
 800efbe:	693b      	ldr	r3, [r7, #16]
 800efc0:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800efc2:	2100      	movs	r1, #0
 800efc4:	6878      	ldr	r0, [r7, #4]
 800efc6:	f7fe fa61 	bl	800d48c <dir_sdi>
 800efca:	4603      	mov	r3, r0
 800efcc:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800efce:	7dfb      	ldrb	r3, [r7, #23]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d114      	bne.n	800effe <f_opendir+0xc6>
					if (obj->sclust) {
 800efd4:	693b      	ldr	r3, [r7, #16]
 800efd6:	689b      	ldr	r3, [r3, #8]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d00d      	beq.n	800eff8 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800efdc:	2100      	movs	r1, #0
 800efde:	6878      	ldr	r0, [r7, #4]
 800efe0:	f7fd fda2 	bl	800cb28 <inc_lock>
 800efe4:	4602      	mov	r2, r0
 800efe6:	693b      	ldr	r3, [r7, #16]
 800efe8:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800efea:	693b      	ldr	r3, [r7, #16]
 800efec:	691b      	ldr	r3, [r3, #16]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d105      	bne.n	800effe <f_opendir+0xc6>
 800eff2:	2312      	movs	r3, #18
 800eff4:	75fb      	strb	r3, [r7, #23]
 800eff6:	e002      	b.n	800effe <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800eff8:	693b      	ldr	r3, [r7, #16]
 800effa:	2200      	movs	r2, #0
 800effc:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800effe:	7dfb      	ldrb	r3, [r7, #23]
 800f000:	2b04      	cmp	r3, #4
 800f002:	d101      	bne.n	800f008 <f_opendir+0xd0>
 800f004:	2305      	movs	r3, #5
 800f006:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800f008:	7dfb      	ldrb	r3, [r7, #23]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d002      	beq.n	800f014 <f_opendir+0xdc>
 800f00e:	693b      	ldr	r3, [r7, #16]
 800f010:	2200      	movs	r2, #0
 800f012:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f014:	7dfb      	ldrb	r3, [r7, #23]
}
 800f016:	4618      	mov	r0, r3
 800f018:	3718      	adds	r7, #24
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}

0800f01e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800f01e:	b580      	push	{r7, lr}
 800f020:	b084      	sub	sp, #16
 800f022:	af00      	add	r7, sp, #0
 800f024:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	f107 0208 	add.w	r2, r7, #8
 800f02c:	4611      	mov	r1, r2
 800f02e:	4618      	mov	r0, r3
 800f030:	f7ff f922 	bl	800e278 <validate>
 800f034:	4603      	mov	r3, r0
 800f036:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f038:	7bfb      	ldrb	r3, [r7, #15]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d110      	bne.n	800f060 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	691b      	ldr	r3, [r3, #16]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d006      	beq.n	800f054 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	691b      	ldr	r3, [r3, #16]
 800f04a:	4618      	mov	r0, r3
 800f04c:	f7fd fdfa 	bl	800cc44 <dec_lock>
 800f050:	4603      	mov	r3, r0
 800f052:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800f054:	7bfb      	ldrb	r3, [r7, #15]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d102      	bne.n	800f060 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	2200      	movs	r2, #0
 800f05e:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800f060:	7bfb      	ldrb	r3, [r7, #15]
}
 800f062:	4618      	mov	r0, r3
 800f064:	3710      	adds	r7, #16
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}

0800f06a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800f06a:	b580      	push	{r7, lr}
 800f06c:	b084      	sub	sp, #16
 800f06e:	af00      	add	r7, sp, #0
 800f070:	6078      	str	r0, [r7, #4]
 800f072:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f107 0208 	add.w	r2, r7, #8
 800f07a:	4611      	mov	r1, r2
 800f07c:	4618      	mov	r0, r3
 800f07e:	f7ff f8fb 	bl	800e278 <validate>
 800f082:	4603      	mov	r3, r0
 800f084:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f086:	7bfb      	ldrb	r3, [r7, #15]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d126      	bne.n	800f0da <f_readdir+0x70>
		if (!fno) {
 800f08c:	683b      	ldr	r3, [r7, #0]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d106      	bne.n	800f0a0 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800f092:	2100      	movs	r1, #0
 800f094:	6878      	ldr	r0, [r7, #4]
 800f096:	f7fe f9f9 	bl	800d48c <dir_sdi>
 800f09a:	4603      	mov	r3, r0
 800f09c:	73fb      	strb	r3, [r7, #15]
 800f09e:	e01c      	b.n	800f0da <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800f0a0:	2100      	movs	r1, #0
 800f0a2:	6878      	ldr	r0, [r7, #4]
 800f0a4:	f7fe fbb8 	bl	800d818 <dir_read>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800f0ac:	7bfb      	ldrb	r3, [r7, #15]
 800f0ae:	2b04      	cmp	r3, #4
 800f0b0:	d101      	bne.n	800f0b6 <f_readdir+0x4c>
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800f0b6:	7bfb      	ldrb	r3, [r7, #15]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d10e      	bne.n	800f0da <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800f0bc:	6839      	ldr	r1, [r7, #0]
 800f0be:	6878      	ldr	r0, [r7, #4]
 800f0c0:	f7fe fc8e 	bl	800d9e0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800f0c4:	2100      	movs	r1, #0
 800f0c6:	6878      	ldr	r0, [r7, #4]
 800f0c8:	f7fe fa5b 	bl	800d582 <dir_next>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800f0d0:	7bfb      	ldrb	r3, [r7, #15]
 800f0d2:	2b04      	cmp	r3, #4
 800f0d4:	d101      	bne.n	800f0da <f_readdir+0x70>
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800f0da:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0dc:	4618      	mov	r0, r3
 800f0de:	3710      	adds	r7, #16
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	bd80      	pop	{r7, pc}

0800f0e4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f0e4:	b480      	push	{r7}
 800f0e6:	b087      	sub	sp, #28
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	60f8      	str	r0, [r7, #12]
 800f0ec:	60b9      	str	r1, [r7, #8]
 800f0ee:	4613      	mov	r3, r2
 800f0f0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f0f2:	2301      	movs	r3, #1
 800f0f4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f0fa:	4b1f      	ldr	r3, [pc, #124]	; (800f178 <FATFS_LinkDriverEx+0x94>)
 800f0fc:	7a5b      	ldrb	r3, [r3, #9]
 800f0fe:	b2db      	uxtb	r3, r3
 800f100:	2b00      	cmp	r3, #0
 800f102:	d131      	bne.n	800f168 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f104:	4b1c      	ldr	r3, [pc, #112]	; (800f178 <FATFS_LinkDriverEx+0x94>)
 800f106:	7a5b      	ldrb	r3, [r3, #9]
 800f108:	b2db      	uxtb	r3, r3
 800f10a:	461a      	mov	r2, r3
 800f10c:	4b1a      	ldr	r3, [pc, #104]	; (800f178 <FATFS_LinkDriverEx+0x94>)
 800f10e:	2100      	movs	r1, #0
 800f110:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f112:	4b19      	ldr	r3, [pc, #100]	; (800f178 <FATFS_LinkDriverEx+0x94>)
 800f114:	7a5b      	ldrb	r3, [r3, #9]
 800f116:	b2db      	uxtb	r3, r3
 800f118:	4a17      	ldr	r2, [pc, #92]	; (800f178 <FATFS_LinkDriverEx+0x94>)
 800f11a:	009b      	lsls	r3, r3, #2
 800f11c:	4413      	add	r3, r2
 800f11e:	68fa      	ldr	r2, [r7, #12]
 800f120:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f122:	4b15      	ldr	r3, [pc, #84]	; (800f178 <FATFS_LinkDriverEx+0x94>)
 800f124:	7a5b      	ldrb	r3, [r3, #9]
 800f126:	b2db      	uxtb	r3, r3
 800f128:	461a      	mov	r2, r3
 800f12a:	4b13      	ldr	r3, [pc, #76]	; (800f178 <FATFS_LinkDriverEx+0x94>)
 800f12c:	4413      	add	r3, r2
 800f12e:	79fa      	ldrb	r2, [r7, #7]
 800f130:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f132:	4b11      	ldr	r3, [pc, #68]	; (800f178 <FATFS_LinkDriverEx+0x94>)
 800f134:	7a5b      	ldrb	r3, [r3, #9]
 800f136:	b2db      	uxtb	r3, r3
 800f138:	1c5a      	adds	r2, r3, #1
 800f13a:	b2d1      	uxtb	r1, r2
 800f13c:	4a0e      	ldr	r2, [pc, #56]	; (800f178 <FATFS_LinkDriverEx+0x94>)
 800f13e:	7251      	strb	r1, [r2, #9]
 800f140:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f142:	7dbb      	ldrb	r3, [r7, #22]
 800f144:	3330      	adds	r3, #48	; 0x30
 800f146:	b2da      	uxtb	r2, r3
 800f148:	68bb      	ldr	r3, [r7, #8]
 800f14a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f14c:	68bb      	ldr	r3, [r7, #8]
 800f14e:	3301      	adds	r3, #1
 800f150:	223a      	movs	r2, #58	; 0x3a
 800f152:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f154:	68bb      	ldr	r3, [r7, #8]
 800f156:	3302      	adds	r3, #2
 800f158:	222f      	movs	r2, #47	; 0x2f
 800f15a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f15c:	68bb      	ldr	r3, [r7, #8]
 800f15e:	3303      	adds	r3, #3
 800f160:	2200      	movs	r2, #0
 800f162:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f164:	2300      	movs	r3, #0
 800f166:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f168:	7dfb      	ldrb	r3, [r7, #23]
}
 800f16a:	4618      	mov	r0, r3
 800f16c:	371c      	adds	r7, #28
 800f16e:	46bd      	mov	sp, r7
 800f170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f174:	4770      	bx	lr
 800f176:	bf00      	nop
 800f178:	200008fc 	.word	0x200008fc

0800f17c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b082      	sub	sp, #8
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
 800f184:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f186:	2200      	movs	r2, #0
 800f188:	6839      	ldr	r1, [r7, #0]
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f7ff ffaa 	bl	800f0e4 <FATFS_LinkDriverEx>
 800f190:	4603      	mov	r3, r0
}
 800f192:	4618      	mov	r0, r3
 800f194:	3708      	adds	r7, #8
 800f196:	46bd      	mov	sp, r7
 800f198:	bd80      	pop	{r7, pc}
	...

0800f19c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	4912      	ldr	r1, [pc, #72]	; (800f1ec <MX_USB_DEVICE_Init+0x50>)
 800f1a4:	4812      	ldr	r0, [pc, #72]	; (800f1f0 <MX_USB_DEVICE_Init+0x54>)
 800f1a6:	f7fc f939 	bl	800b41c <USBD_Init>
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d001      	beq.n	800f1b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f1b0:	f7f3 fd56 	bl	8002c60 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f1b4:	490f      	ldr	r1, [pc, #60]	; (800f1f4 <MX_USB_DEVICE_Init+0x58>)
 800f1b6:	480e      	ldr	r0, [pc, #56]	; (800f1f0 <MX_USB_DEVICE_Init+0x54>)
 800f1b8:	f7fc f960 	bl	800b47c <USBD_RegisterClass>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d001      	beq.n	800f1c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f1c2:	f7f3 fd4d 	bl	8002c60 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f1c6:	490c      	ldr	r1, [pc, #48]	; (800f1f8 <MX_USB_DEVICE_Init+0x5c>)
 800f1c8:	4809      	ldr	r0, [pc, #36]	; (800f1f0 <MX_USB_DEVICE_Init+0x54>)
 800f1ca:	f7fc f8b1 	bl	800b330 <USBD_CDC_RegisterInterface>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d001      	beq.n	800f1d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f1d4:	f7f3 fd44 	bl	8002c60 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f1d8:	4805      	ldr	r0, [pc, #20]	; (800f1f0 <MX_USB_DEVICE_Init+0x54>)
 800f1da:	f7fc f976 	bl	800b4ca <USBD_Start>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d001      	beq.n	800f1e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f1e4:	f7f3 fd3c 	bl	8002c60 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f1e8:	bf00      	nop
 800f1ea:	bd80      	pop	{r7, pc}
 800f1ec:	20000148 	.word	0x20000148
 800f1f0:	20001aac 	.word	0x20001aac
 800f1f4:	20000030 	.word	0x20000030
 800f1f8:	20000134 	.word	0x20000134

0800f1fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f200:	2200      	movs	r2, #0
 800f202:	4905      	ldr	r1, [pc, #20]	; (800f218 <CDC_Init_FS+0x1c>)
 800f204:	4805      	ldr	r0, [pc, #20]	; (800f21c <CDC_Init_FS+0x20>)
 800f206:	f7fc f8a8 	bl	800b35a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f20a:	4905      	ldr	r1, [pc, #20]	; (800f220 <CDC_Init_FS+0x24>)
 800f20c:	4803      	ldr	r0, [pc, #12]	; (800f21c <CDC_Init_FS+0x20>)
 800f20e:	f7fc f8c2 	bl	800b396 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f212:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f214:	4618      	mov	r0, r3
 800f216:	bd80      	pop	{r7, pc}
 800f218:	2000257c 	.word	0x2000257c
 800f21c:	20001aac 	.word	0x20001aac
 800f220:	20001d7c 	.word	0x20001d7c

0800f224 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f224:	b480      	push	{r7}
 800f226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f228:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f22a:	4618      	mov	r0, r3
 800f22c:	46bd      	mov	sp, r7
 800f22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f232:	4770      	bx	lr

0800f234 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f234:	b480      	push	{r7}
 800f236:	b083      	sub	sp, #12
 800f238:	af00      	add	r7, sp, #0
 800f23a:	4603      	mov	r3, r0
 800f23c:	6039      	str	r1, [r7, #0]
 800f23e:	71fb      	strb	r3, [r7, #7]
 800f240:	4613      	mov	r3, r2
 800f242:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f244:	79fb      	ldrb	r3, [r7, #7]
 800f246:	2b23      	cmp	r3, #35	; 0x23
 800f248:	d84a      	bhi.n	800f2e0 <CDC_Control_FS+0xac>
 800f24a:	a201      	add	r2, pc, #4	; (adr r2, 800f250 <CDC_Control_FS+0x1c>)
 800f24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f250:	0800f2e1 	.word	0x0800f2e1
 800f254:	0800f2e1 	.word	0x0800f2e1
 800f258:	0800f2e1 	.word	0x0800f2e1
 800f25c:	0800f2e1 	.word	0x0800f2e1
 800f260:	0800f2e1 	.word	0x0800f2e1
 800f264:	0800f2e1 	.word	0x0800f2e1
 800f268:	0800f2e1 	.word	0x0800f2e1
 800f26c:	0800f2e1 	.word	0x0800f2e1
 800f270:	0800f2e1 	.word	0x0800f2e1
 800f274:	0800f2e1 	.word	0x0800f2e1
 800f278:	0800f2e1 	.word	0x0800f2e1
 800f27c:	0800f2e1 	.word	0x0800f2e1
 800f280:	0800f2e1 	.word	0x0800f2e1
 800f284:	0800f2e1 	.word	0x0800f2e1
 800f288:	0800f2e1 	.word	0x0800f2e1
 800f28c:	0800f2e1 	.word	0x0800f2e1
 800f290:	0800f2e1 	.word	0x0800f2e1
 800f294:	0800f2e1 	.word	0x0800f2e1
 800f298:	0800f2e1 	.word	0x0800f2e1
 800f29c:	0800f2e1 	.word	0x0800f2e1
 800f2a0:	0800f2e1 	.word	0x0800f2e1
 800f2a4:	0800f2e1 	.word	0x0800f2e1
 800f2a8:	0800f2e1 	.word	0x0800f2e1
 800f2ac:	0800f2e1 	.word	0x0800f2e1
 800f2b0:	0800f2e1 	.word	0x0800f2e1
 800f2b4:	0800f2e1 	.word	0x0800f2e1
 800f2b8:	0800f2e1 	.word	0x0800f2e1
 800f2bc:	0800f2e1 	.word	0x0800f2e1
 800f2c0:	0800f2e1 	.word	0x0800f2e1
 800f2c4:	0800f2e1 	.word	0x0800f2e1
 800f2c8:	0800f2e1 	.word	0x0800f2e1
 800f2cc:	0800f2e1 	.word	0x0800f2e1
 800f2d0:	0800f2e1 	.word	0x0800f2e1
 800f2d4:	0800f2e1 	.word	0x0800f2e1
 800f2d8:	0800f2e1 	.word	0x0800f2e1
 800f2dc:	0800f2e1 	.word	0x0800f2e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f2e0:	bf00      	nop
  }

  return (USBD_OK);
 800f2e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	370c      	adds	r7, #12
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ee:	4770      	bx	lr

0800f2f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b082      	sub	sp, #8
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
 800f2f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f2fa:	6879      	ldr	r1, [r7, #4]
 800f2fc:	4805      	ldr	r0, [pc, #20]	; (800f314 <CDC_Receive_FS+0x24>)
 800f2fe:	f7fc f84a 	bl	800b396 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f302:	4804      	ldr	r0, [pc, #16]	; (800f314 <CDC_Receive_FS+0x24>)
 800f304:	f7fc f860 	bl	800b3c8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f308:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f30a:	4618      	mov	r0, r3
 800f30c:	3708      	adds	r7, #8
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd80      	pop	{r7, pc}
 800f312:	bf00      	nop
 800f314:	20001aac 	.word	0x20001aac

0800f318 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f318:	b480      	push	{r7}
 800f31a:	b087      	sub	sp, #28
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	60f8      	str	r0, [r7, #12]
 800f320:	60b9      	str	r1, [r7, #8]
 800f322:	4613      	mov	r3, r2
 800f324:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f326:	2300      	movs	r3, #0
 800f328:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f32a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f32e:	4618      	mov	r0, r3
 800f330:	371c      	adds	r7, #28
 800f332:	46bd      	mov	sp, r7
 800f334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f338:	4770      	bx	lr
	...

0800f33c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f33c:	b480      	push	{r7}
 800f33e:	b083      	sub	sp, #12
 800f340:	af00      	add	r7, sp, #0
 800f342:	4603      	mov	r3, r0
 800f344:	6039      	str	r1, [r7, #0]
 800f346:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	2212      	movs	r2, #18
 800f34c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f34e:	4b03      	ldr	r3, [pc, #12]	; (800f35c <USBD_FS_DeviceDescriptor+0x20>)
}
 800f350:	4618      	mov	r0, r3
 800f352:	370c      	adds	r7, #12
 800f354:	46bd      	mov	sp, r7
 800f356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35a:	4770      	bx	lr
 800f35c:	20000164 	.word	0x20000164

0800f360 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f360:	b480      	push	{r7}
 800f362:	b083      	sub	sp, #12
 800f364:	af00      	add	r7, sp, #0
 800f366:	4603      	mov	r3, r0
 800f368:	6039      	str	r1, [r7, #0]
 800f36a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	2204      	movs	r2, #4
 800f370:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f372:	4b03      	ldr	r3, [pc, #12]	; (800f380 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f374:	4618      	mov	r0, r3
 800f376:	370c      	adds	r7, #12
 800f378:	46bd      	mov	sp, r7
 800f37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37e:	4770      	bx	lr
 800f380:	20000178 	.word	0x20000178

0800f384 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b082      	sub	sp, #8
 800f388:	af00      	add	r7, sp, #0
 800f38a:	4603      	mov	r3, r0
 800f38c:	6039      	str	r1, [r7, #0]
 800f38e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f390:	79fb      	ldrb	r3, [r7, #7]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d105      	bne.n	800f3a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f396:	683a      	ldr	r2, [r7, #0]
 800f398:	4907      	ldr	r1, [pc, #28]	; (800f3b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800f39a:	4808      	ldr	r0, [pc, #32]	; (800f3bc <USBD_FS_ProductStrDescriptor+0x38>)
 800f39c:	f7fd f8c7 	bl	800c52e <USBD_GetString>
 800f3a0:	e004      	b.n	800f3ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f3a2:	683a      	ldr	r2, [r7, #0]
 800f3a4:	4904      	ldr	r1, [pc, #16]	; (800f3b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800f3a6:	4805      	ldr	r0, [pc, #20]	; (800f3bc <USBD_FS_ProductStrDescriptor+0x38>)
 800f3a8:	f7fd f8c1 	bl	800c52e <USBD_GetString>
  }
  return USBD_StrDesc;
 800f3ac:	4b02      	ldr	r3, [pc, #8]	; (800f3b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	3708      	adds	r7, #8
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	bd80      	pop	{r7, pc}
 800f3b6:	bf00      	nop
 800f3b8:	20002d7c 	.word	0x20002d7c
 800f3bc:	08015014 	.word	0x08015014

0800f3c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b082      	sub	sp, #8
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	6039      	str	r1, [r7, #0]
 800f3ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f3cc:	683a      	ldr	r2, [r7, #0]
 800f3ce:	4904      	ldr	r1, [pc, #16]	; (800f3e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f3d0:	4804      	ldr	r0, [pc, #16]	; (800f3e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f3d2:	f7fd f8ac 	bl	800c52e <USBD_GetString>
  return USBD_StrDesc;
 800f3d6:	4b02      	ldr	r3, [pc, #8]	; (800f3e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f3d8:	4618      	mov	r0, r3
 800f3da:	3708      	adds	r7, #8
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	bd80      	pop	{r7, pc}
 800f3e0:	20002d7c 	.word	0x20002d7c
 800f3e4:	0801502c 	.word	0x0801502c

0800f3e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b082      	sub	sp, #8
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	4603      	mov	r3, r0
 800f3f0:	6039      	str	r1, [r7, #0]
 800f3f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	221a      	movs	r2, #26
 800f3f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f3fa:	f000 f843 	bl	800f484 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f3fe:	4b02      	ldr	r3, [pc, #8]	; (800f408 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f400:	4618      	mov	r0, r3
 800f402:	3708      	adds	r7, #8
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}
 800f408:	2000017c 	.word	0x2000017c

0800f40c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b082      	sub	sp, #8
 800f410:	af00      	add	r7, sp, #0
 800f412:	4603      	mov	r3, r0
 800f414:	6039      	str	r1, [r7, #0]
 800f416:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f418:	79fb      	ldrb	r3, [r7, #7]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d105      	bne.n	800f42a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f41e:	683a      	ldr	r2, [r7, #0]
 800f420:	4907      	ldr	r1, [pc, #28]	; (800f440 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f422:	4808      	ldr	r0, [pc, #32]	; (800f444 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f424:	f7fd f883 	bl	800c52e <USBD_GetString>
 800f428:	e004      	b.n	800f434 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f42a:	683a      	ldr	r2, [r7, #0]
 800f42c:	4904      	ldr	r1, [pc, #16]	; (800f440 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f42e:	4805      	ldr	r0, [pc, #20]	; (800f444 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f430:	f7fd f87d 	bl	800c52e <USBD_GetString>
  }
  return USBD_StrDesc;
 800f434:	4b02      	ldr	r3, [pc, #8]	; (800f440 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f436:	4618      	mov	r0, r3
 800f438:	3708      	adds	r7, #8
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bd80      	pop	{r7, pc}
 800f43e:	bf00      	nop
 800f440:	20002d7c 	.word	0x20002d7c
 800f444:	08015040 	.word	0x08015040

0800f448 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b082      	sub	sp, #8
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	4603      	mov	r3, r0
 800f450:	6039      	str	r1, [r7, #0]
 800f452:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f454:	79fb      	ldrb	r3, [r7, #7]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d105      	bne.n	800f466 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f45a:	683a      	ldr	r2, [r7, #0]
 800f45c:	4907      	ldr	r1, [pc, #28]	; (800f47c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f45e:	4808      	ldr	r0, [pc, #32]	; (800f480 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f460:	f7fd f865 	bl	800c52e <USBD_GetString>
 800f464:	e004      	b.n	800f470 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f466:	683a      	ldr	r2, [r7, #0]
 800f468:	4904      	ldr	r1, [pc, #16]	; (800f47c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f46a:	4805      	ldr	r0, [pc, #20]	; (800f480 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f46c:	f7fd f85f 	bl	800c52e <USBD_GetString>
  }
  return USBD_StrDesc;
 800f470:	4b02      	ldr	r3, [pc, #8]	; (800f47c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f472:	4618      	mov	r0, r3
 800f474:	3708      	adds	r7, #8
 800f476:	46bd      	mov	sp, r7
 800f478:	bd80      	pop	{r7, pc}
 800f47a:	bf00      	nop
 800f47c:	20002d7c 	.word	0x20002d7c
 800f480:	0801504c 	.word	0x0801504c

0800f484 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b084      	sub	sp, #16
 800f488:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f48a:	4b0f      	ldr	r3, [pc, #60]	; (800f4c8 <Get_SerialNum+0x44>)
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f490:	4b0e      	ldr	r3, [pc, #56]	; (800f4cc <Get_SerialNum+0x48>)
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f496:	4b0e      	ldr	r3, [pc, #56]	; (800f4d0 <Get_SerialNum+0x4c>)
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f49c:	68fa      	ldr	r2, [r7, #12]
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	4413      	add	r3, r2
 800f4a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d009      	beq.n	800f4be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f4aa:	2208      	movs	r2, #8
 800f4ac:	4909      	ldr	r1, [pc, #36]	; (800f4d4 <Get_SerialNum+0x50>)
 800f4ae:	68f8      	ldr	r0, [r7, #12]
 800f4b0:	f000 f814 	bl	800f4dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f4b4:	2204      	movs	r2, #4
 800f4b6:	4908      	ldr	r1, [pc, #32]	; (800f4d8 <Get_SerialNum+0x54>)
 800f4b8:	68b8      	ldr	r0, [r7, #8]
 800f4ba:	f000 f80f 	bl	800f4dc <IntToUnicode>
  }
}
 800f4be:	bf00      	nop
 800f4c0:	3710      	adds	r7, #16
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bd80      	pop	{r7, pc}
 800f4c6:	bf00      	nop
 800f4c8:	1fff7a10 	.word	0x1fff7a10
 800f4cc:	1fff7a14 	.word	0x1fff7a14
 800f4d0:	1fff7a18 	.word	0x1fff7a18
 800f4d4:	2000017e 	.word	0x2000017e
 800f4d8:	2000018e 	.word	0x2000018e

0800f4dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f4dc:	b480      	push	{r7}
 800f4de:	b087      	sub	sp, #28
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	60f8      	str	r0, [r7, #12]
 800f4e4:	60b9      	str	r1, [r7, #8]
 800f4e6:	4613      	mov	r3, r2
 800f4e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	75fb      	strb	r3, [r7, #23]
 800f4f2:	e027      	b.n	800f544 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	0f1b      	lsrs	r3, r3, #28
 800f4f8:	2b09      	cmp	r3, #9
 800f4fa:	d80b      	bhi.n	800f514 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	0f1b      	lsrs	r3, r3, #28
 800f500:	b2da      	uxtb	r2, r3
 800f502:	7dfb      	ldrb	r3, [r7, #23]
 800f504:	005b      	lsls	r3, r3, #1
 800f506:	4619      	mov	r1, r3
 800f508:	68bb      	ldr	r3, [r7, #8]
 800f50a:	440b      	add	r3, r1
 800f50c:	3230      	adds	r2, #48	; 0x30
 800f50e:	b2d2      	uxtb	r2, r2
 800f510:	701a      	strb	r2, [r3, #0]
 800f512:	e00a      	b.n	800f52a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	0f1b      	lsrs	r3, r3, #28
 800f518:	b2da      	uxtb	r2, r3
 800f51a:	7dfb      	ldrb	r3, [r7, #23]
 800f51c:	005b      	lsls	r3, r3, #1
 800f51e:	4619      	mov	r1, r3
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	440b      	add	r3, r1
 800f524:	3237      	adds	r2, #55	; 0x37
 800f526:	b2d2      	uxtb	r2, r2
 800f528:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	011b      	lsls	r3, r3, #4
 800f52e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f530:	7dfb      	ldrb	r3, [r7, #23]
 800f532:	005b      	lsls	r3, r3, #1
 800f534:	3301      	adds	r3, #1
 800f536:	68ba      	ldr	r2, [r7, #8]
 800f538:	4413      	add	r3, r2
 800f53a:	2200      	movs	r2, #0
 800f53c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f53e:	7dfb      	ldrb	r3, [r7, #23]
 800f540:	3301      	adds	r3, #1
 800f542:	75fb      	strb	r3, [r7, #23]
 800f544:	7dfa      	ldrb	r2, [r7, #23]
 800f546:	79fb      	ldrb	r3, [r7, #7]
 800f548:	429a      	cmp	r2, r3
 800f54a:	d3d3      	bcc.n	800f4f4 <IntToUnicode+0x18>
  }
}
 800f54c:	bf00      	nop
 800f54e:	bf00      	nop
 800f550:	371c      	adds	r7, #28
 800f552:	46bd      	mov	sp, r7
 800f554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f558:	4770      	bx	lr
	...

0800f55c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b08a      	sub	sp, #40	; 0x28
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f564:	f107 0314 	add.w	r3, r7, #20
 800f568:	2200      	movs	r2, #0
 800f56a:	601a      	str	r2, [r3, #0]
 800f56c:	605a      	str	r2, [r3, #4]
 800f56e:	609a      	str	r2, [r3, #8]
 800f570:	60da      	str	r2, [r3, #12]
 800f572:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f57c:	d147      	bne.n	800f60e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f57e:	2300      	movs	r3, #0
 800f580:	613b      	str	r3, [r7, #16]
 800f582:	4b25      	ldr	r3, [pc, #148]	; (800f618 <HAL_PCD_MspInit+0xbc>)
 800f584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f586:	4a24      	ldr	r2, [pc, #144]	; (800f618 <HAL_PCD_MspInit+0xbc>)
 800f588:	f043 0301 	orr.w	r3, r3, #1
 800f58c:	6313      	str	r3, [r2, #48]	; 0x30
 800f58e:	4b22      	ldr	r3, [pc, #136]	; (800f618 <HAL_PCD_MspInit+0xbc>)
 800f590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f592:	f003 0301 	and.w	r3, r3, #1
 800f596:	613b      	str	r3, [r7, #16]
 800f598:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800f59a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f59e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f5a8:	f107 0314 	add.w	r3, r7, #20
 800f5ac:	4619      	mov	r1, r3
 800f5ae:	481b      	ldr	r0, [pc, #108]	; (800f61c <HAL_PCD_MspInit+0xc0>)
 800f5b0:	f7f4 fd0e 	bl	8003fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f5b4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f5b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f5ba:	2302      	movs	r3, #2
 800f5bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5be:	2300      	movs	r3, #0
 800f5c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f5c2:	2303      	movs	r3, #3
 800f5c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f5c6:	230a      	movs	r3, #10
 800f5c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f5ca:	f107 0314 	add.w	r3, r7, #20
 800f5ce:	4619      	mov	r1, r3
 800f5d0:	4812      	ldr	r0, [pc, #72]	; (800f61c <HAL_PCD_MspInit+0xc0>)
 800f5d2:	f7f4 fcfd 	bl	8003fd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f5d6:	4b10      	ldr	r3, [pc, #64]	; (800f618 <HAL_PCD_MspInit+0xbc>)
 800f5d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5da:	4a0f      	ldr	r2, [pc, #60]	; (800f618 <HAL_PCD_MspInit+0xbc>)
 800f5dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5e0:	6353      	str	r3, [r2, #52]	; 0x34
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	60fb      	str	r3, [r7, #12]
 800f5e6:	4b0c      	ldr	r3, [pc, #48]	; (800f618 <HAL_PCD_MspInit+0xbc>)
 800f5e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5ea:	4a0b      	ldr	r2, [pc, #44]	; (800f618 <HAL_PCD_MspInit+0xbc>)
 800f5ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f5f0:	6453      	str	r3, [r2, #68]	; 0x44
 800f5f2:	4b09      	ldr	r3, [pc, #36]	; (800f618 <HAL_PCD_MspInit+0xbc>)
 800f5f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f5fa:	60fb      	str	r3, [r7, #12]
 800f5fc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f5fe:	2200      	movs	r2, #0
 800f600:	2100      	movs	r1, #0
 800f602:	2043      	movs	r0, #67	; 0x43
 800f604:	f7f4 fcad 	bl	8003f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f608:	2043      	movs	r0, #67	; 0x43
 800f60a:	f7f4 fcc6 	bl	8003f9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f60e:	bf00      	nop
 800f610:	3728      	adds	r7, #40	; 0x28
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}
 800f616:	bf00      	nop
 800f618:	40023800 	.word	0x40023800
 800f61c:	40020000 	.word	0x40020000

0800f620 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b082      	sub	sp, #8
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800f634:	4619      	mov	r1, r3
 800f636:	4610      	mov	r0, r2
 800f638:	f7fb ff92 	bl	800b560 <USBD_LL_SetupStage>
}
 800f63c:	bf00      	nop
 800f63e:	3708      	adds	r7, #8
 800f640:	46bd      	mov	sp, r7
 800f642:	bd80      	pop	{r7, pc}

0800f644 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b082      	sub	sp, #8
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
 800f64c:	460b      	mov	r3, r1
 800f64e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800f656:	78fa      	ldrb	r2, [r7, #3]
 800f658:	6879      	ldr	r1, [r7, #4]
 800f65a:	4613      	mov	r3, r2
 800f65c:	00db      	lsls	r3, r3, #3
 800f65e:	1a9b      	subs	r3, r3, r2
 800f660:	009b      	lsls	r3, r3, #2
 800f662:	440b      	add	r3, r1
 800f664:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f668:	681a      	ldr	r2, [r3, #0]
 800f66a:	78fb      	ldrb	r3, [r7, #3]
 800f66c:	4619      	mov	r1, r3
 800f66e:	f7fb ffcc 	bl	800b60a <USBD_LL_DataOutStage>
}
 800f672:	bf00      	nop
 800f674:	3708      	adds	r7, #8
 800f676:	46bd      	mov	sp, r7
 800f678:	bd80      	pop	{r7, pc}

0800f67a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f67a:	b580      	push	{r7, lr}
 800f67c:	b082      	sub	sp, #8
 800f67e:	af00      	add	r7, sp, #0
 800f680:	6078      	str	r0, [r7, #4]
 800f682:	460b      	mov	r3, r1
 800f684:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800f68c:	78fa      	ldrb	r2, [r7, #3]
 800f68e:	6879      	ldr	r1, [r7, #4]
 800f690:	4613      	mov	r3, r2
 800f692:	00db      	lsls	r3, r3, #3
 800f694:	1a9b      	subs	r3, r3, r2
 800f696:	009b      	lsls	r3, r3, #2
 800f698:	440b      	add	r3, r1
 800f69a:	3348      	adds	r3, #72	; 0x48
 800f69c:	681a      	ldr	r2, [r3, #0]
 800f69e:	78fb      	ldrb	r3, [r7, #3]
 800f6a0:	4619      	mov	r1, r3
 800f6a2:	f7fc f815 	bl	800b6d0 <USBD_LL_DataInStage>
}
 800f6a6:	bf00      	nop
 800f6a8:	3708      	adds	r7, #8
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bd80      	pop	{r7, pc}

0800f6ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6ae:	b580      	push	{r7, lr}
 800f6b0:	b082      	sub	sp, #8
 800f6b2:	af00      	add	r7, sp, #0
 800f6b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f6bc:	4618      	mov	r0, r3
 800f6be:	f7fc f929 	bl	800b914 <USBD_LL_SOF>
}
 800f6c2:	bf00      	nop
 800f6c4:	3708      	adds	r7, #8
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	bd80      	pop	{r7, pc}

0800f6ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6ca:	b580      	push	{r7, lr}
 800f6cc:	b084      	sub	sp, #16
 800f6ce:	af00      	add	r7, sp, #0
 800f6d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f6d2:	2301      	movs	r3, #1
 800f6d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	68db      	ldr	r3, [r3, #12]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d102      	bne.n	800f6e4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f6de:	2300      	movs	r3, #0
 800f6e0:	73fb      	strb	r3, [r7, #15]
 800f6e2:	e008      	b.n	800f6f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	68db      	ldr	r3, [r3, #12]
 800f6e8:	2b02      	cmp	r3, #2
 800f6ea:	d102      	bne.n	800f6f2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f6ec:	2301      	movs	r3, #1
 800f6ee:	73fb      	strb	r3, [r7, #15]
 800f6f0:	e001      	b.n	800f6f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f6f2:	f7f3 fab5 	bl	8002c60 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f6fc:	7bfa      	ldrb	r2, [r7, #15]
 800f6fe:	4611      	mov	r1, r2
 800f700:	4618      	mov	r0, r3
 800f702:	f7fc f8c9 	bl	800b898 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f70c:	4618      	mov	r0, r3
 800f70e:	f7fc f875 	bl	800b7fc <USBD_LL_Reset>
}
 800f712:	bf00      	nop
 800f714:	3710      	adds	r7, #16
 800f716:	46bd      	mov	sp, r7
 800f718:	bd80      	pop	{r7, pc}
	...

0800f71c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b082      	sub	sp, #8
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f72a:	4618      	mov	r0, r3
 800f72c:	f7fc f8c4 	bl	800b8b8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	687a      	ldr	r2, [r7, #4]
 800f73c:	6812      	ldr	r2, [r2, #0]
 800f73e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f742:	f043 0301 	orr.w	r3, r3, #1
 800f746:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	6a1b      	ldr	r3, [r3, #32]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d005      	beq.n	800f75c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f750:	4b04      	ldr	r3, [pc, #16]	; (800f764 <HAL_PCD_SuspendCallback+0x48>)
 800f752:	691b      	ldr	r3, [r3, #16]
 800f754:	4a03      	ldr	r2, [pc, #12]	; (800f764 <HAL_PCD_SuspendCallback+0x48>)
 800f756:	f043 0306 	orr.w	r3, r3, #6
 800f75a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f75c:	bf00      	nop
 800f75e:	3708      	adds	r7, #8
 800f760:	46bd      	mov	sp, r7
 800f762:	bd80      	pop	{r7, pc}
 800f764:	e000ed00 	.word	0xe000ed00

0800f768 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b082      	sub	sp, #8
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f776:	4618      	mov	r0, r3
 800f778:	f7fc f8b4 	bl	800b8e4 <USBD_LL_Resume>
}
 800f77c:	bf00      	nop
 800f77e:	3708      	adds	r7, #8
 800f780:	46bd      	mov	sp, r7
 800f782:	bd80      	pop	{r7, pc}

0800f784 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b082      	sub	sp, #8
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
 800f78c:	460b      	mov	r3, r1
 800f78e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f796:	78fa      	ldrb	r2, [r7, #3]
 800f798:	4611      	mov	r1, r2
 800f79a:	4618      	mov	r0, r3
 800f79c:	f7fc f902 	bl	800b9a4 <USBD_LL_IsoOUTIncomplete>
}
 800f7a0:	bf00      	nop
 800f7a2:	3708      	adds	r7, #8
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	bd80      	pop	{r7, pc}

0800f7a8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b082      	sub	sp, #8
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
 800f7b0:	460b      	mov	r3, r1
 800f7b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f7ba:	78fa      	ldrb	r2, [r7, #3]
 800f7bc:	4611      	mov	r1, r2
 800f7be:	4618      	mov	r0, r3
 800f7c0:	f7fc f8ca 	bl	800b958 <USBD_LL_IsoINIncomplete>
}
 800f7c4:	bf00      	nop
 800f7c6:	3708      	adds	r7, #8
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	bd80      	pop	{r7, pc}

0800f7cc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b082      	sub	sp, #8
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f7da:	4618      	mov	r0, r3
 800f7dc:	f7fc f908 	bl	800b9f0 <USBD_LL_DevConnected>
}
 800f7e0:	bf00      	nop
 800f7e2:	3708      	adds	r7, #8
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	bd80      	pop	{r7, pc}

0800f7e8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b082      	sub	sp, #8
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f7fc f905 	bl	800ba06 <USBD_LL_DevDisconnected>
}
 800f7fc:	bf00      	nop
 800f7fe:	3708      	adds	r7, #8
 800f800:	46bd      	mov	sp, r7
 800f802:	bd80      	pop	{r7, pc}

0800f804 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f804:	b580      	push	{r7, lr}
 800f806:	b082      	sub	sp, #8
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	781b      	ldrb	r3, [r3, #0]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d13c      	bne.n	800f88e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f814:	4a20      	ldr	r2, [pc, #128]	; (800f898 <USBD_LL_Init+0x94>)
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	4a1e      	ldr	r2, [pc, #120]	; (800f898 <USBD_LL_Init+0x94>)
 800f820:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f824:	4b1c      	ldr	r3, [pc, #112]	; (800f898 <USBD_LL_Init+0x94>)
 800f826:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f82a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f82c:	4b1a      	ldr	r3, [pc, #104]	; (800f898 <USBD_LL_Init+0x94>)
 800f82e:	2204      	movs	r2, #4
 800f830:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f832:	4b19      	ldr	r3, [pc, #100]	; (800f898 <USBD_LL_Init+0x94>)
 800f834:	2202      	movs	r2, #2
 800f836:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f838:	4b17      	ldr	r3, [pc, #92]	; (800f898 <USBD_LL_Init+0x94>)
 800f83a:	2200      	movs	r2, #0
 800f83c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f83e:	4b16      	ldr	r3, [pc, #88]	; (800f898 <USBD_LL_Init+0x94>)
 800f840:	2202      	movs	r2, #2
 800f842:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f844:	4b14      	ldr	r3, [pc, #80]	; (800f898 <USBD_LL_Init+0x94>)
 800f846:	2200      	movs	r2, #0
 800f848:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f84a:	4b13      	ldr	r3, [pc, #76]	; (800f898 <USBD_LL_Init+0x94>)
 800f84c:	2200      	movs	r2, #0
 800f84e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f850:	4b11      	ldr	r3, [pc, #68]	; (800f898 <USBD_LL_Init+0x94>)
 800f852:	2200      	movs	r2, #0
 800f854:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800f856:	4b10      	ldr	r3, [pc, #64]	; (800f898 <USBD_LL_Init+0x94>)
 800f858:	2201      	movs	r2, #1
 800f85a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f85c:	4b0e      	ldr	r3, [pc, #56]	; (800f898 <USBD_LL_Init+0x94>)
 800f85e:	2200      	movs	r2, #0
 800f860:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f862:	480d      	ldr	r0, [pc, #52]	; (800f898 <USBD_LL_Init+0x94>)
 800f864:	f7f5 fdcc 	bl	8005400 <HAL_PCD_Init>
 800f868:	4603      	mov	r3, r0
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d001      	beq.n	800f872 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f86e:	f7f3 f9f7 	bl	8002c60 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f872:	2180      	movs	r1, #128	; 0x80
 800f874:	4808      	ldr	r0, [pc, #32]	; (800f898 <USBD_LL_Init+0x94>)
 800f876:	f7f6 ff2a 	bl	80066ce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f87a:	2240      	movs	r2, #64	; 0x40
 800f87c:	2100      	movs	r1, #0
 800f87e:	4806      	ldr	r0, [pc, #24]	; (800f898 <USBD_LL_Init+0x94>)
 800f880:	f7f6 fede 	bl	8006640 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f884:	2280      	movs	r2, #128	; 0x80
 800f886:	2101      	movs	r1, #1
 800f888:	4803      	ldr	r0, [pc, #12]	; (800f898 <USBD_LL_Init+0x94>)
 800f88a:	f7f6 fed9 	bl	8006640 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f88e:	2300      	movs	r3, #0
}
 800f890:	4618      	mov	r0, r3
 800f892:	3708      	adds	r7, #8
 800f894:	46bd      	mov	sp, r7
 800f896:	bd80      	pop	{r7, pc}
 800f898:	20002f7c 	.word	0x20002f7c

0800f89c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b084      	sub	sp, #16
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	f7f5 fec1 	bl	800563a <HAL_PCD_Start>
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f8bc:	7bfb      	ldrb	r3, [r7, #15]
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f000 f942 	bl	800fb48 <USBD_Get_USB_Status>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f8c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	3710      	adds	r7, #16
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}

0800f8d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f8d2:	b580      	push	{r7, lr}
 800f8d4:	b084      	sub	sp, #16
 800f8d6:	af00      	add	r7, sp, #0
 800f8d8:	6078      	str	r0, [r7, #4]
 800f8da:	4608      	mov	r0, r1
 800f8dc:	4611      	mov	r1, r2
 800f8de:	461a      	mov	r2, r3
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	70fb      	strb	r3, [r7, #3]
 800f8e4:	460b      	mov	r3, r1
 800f8e6:	70bb      	strb	r3, [r7, #2]
 800f8e8:	4613      	mov	r3, r2
 800f8ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f8fa:	78bb      	ldrb	r3, [r7, #2]
 800f8fc:	883a      	ldrh	r2, [r7, #0]
 800f8fe:	78f9      	ldrb	r1, [r7, #3]
 800f900:	f7f6 faa5 	bl	8005e4e <HAL_PCD_EP_Open>
 800f904:	4603      	mov	r3, r0
 800f906:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f908:	7bfb      	ldrb	r3, [r7, #15]
 800f90a:	4618      	mov	r0, r3
 800f90c:	f000 f91c 	bl	800fb48 <USBD_Get_USB_Status>
 800f910:	4603      	mov	r3, r0
 800f912:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f914:	7bbb      	ldrb	r3, [r7, #14]
}
 800f916:	4618      	mov	r0, r3
 800f918:	3710      	adds	r7, #16
 800f91a:	46bd      	mov	sp, r7
 800f91c:	bd80      	pop	{r7, pc}

0800f91e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f91e:	b580      	push	{r7, lr}
 800f920:	b084      	sub	sp, #16
 800f922:	af00      	add	r7, sp, #0
 800f924:	6078      	str	r0, [r7, #4]
 800f926:	460b      	mov	r3, r1
 800f928:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f92a:	2300      	movs	r3, #0
 800f92c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f92e:	2300      	movs	r3, #0
 800f930:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f938:	78fa      	ldrb	r2, [r7, #3]
 800f93a:	4611      	mov	r1, r2
 800f93c:	4618      	mov	r0, r3
 800f93e:	f7f6 faee 	bl	8005f1e <HAL_PCD_EP_Close>
 800f942:	4603      	mov	r3, r0
 800f944:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f946:	7bfb      	ldrb	r3, [r7, #15]
 800f948:	4618      	mov	r0, r3
 800f94a:	f000 f8fd 	bl	800fb48 <USBD_Get_USB_Status>
 800f94e:	4603      	mov	r3, r0
 800f950:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f952:	7bbb      	ldrb	r3, [r7, #14]
}
 800f954:	4618      	mov	r0, r3
 800f956:	3710      	adds	r7, #16
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd80      	pop	{r7, pc}

0800f95c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b084      	sub	sp, #16
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
 800f964:	460b      	mov	r3, r1
 800f966:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f968:	2300      	movs	r3, #0
 800f96a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f96c:	2300      	movs	r3, #0
 800f96e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f976:	78fa      	ldrb	r2, [r7, #3]
 800f978:	4611      	mov	r1, r2
 800f97a:	4618      	mov	r0, r3
 800f97c:	f7f6 fbc6 	bl	800610c <HAL_PCD_EP_SetStall>
 800f980:	4603      	mov	r3, r0
 800f982:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f984:	7bfb      	ldrb	r3, [r7, #15]
 800f986:	4618      	mov	r0, r3
 800f988:	f000 f8de 	bl	800fb48 <USBD_Get_USB_Status>
 800f98c:	4603      	mov	r3, r0
 800f98e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f990:	7bbb      	ldrb	r3, [r7, #14]
}
 800f992:	4618      	mov	r0, r3
 800f994:	3710      	adds	r7, #16
 800f996:	46bd      	mov	sp, r7
 800f998:	bd80      	pop	{r7, pc}

0800f99a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f99a:	b580      	push	{r7, lr}
 800f99c:	b084      	sub	sp, #16
 800f99e:	af00      	add	r7, sp, #0
 800f9a0:	6078      	str	r0, [r7, #4]
 800f9a2:	460b      	mov	r3, r1
 800f9a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f9b4:	78fa      	ldrb	r2, [r7, #3]
 800f9b6:	4611      	mov	r1, r2
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f7f6 fc0b 	bl	80061d4 <HAL_PCD_EP_ClrStall>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f9c2:	7bfb      	ldrb	r3, [r7, #15]
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	f000 f8bf 	bl	800fb48 <USBD_Get_USB_Status>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f9ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	3710      	adds	r7, #16
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd80      	pop	{r7, pc}

0800f9d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f9d8:	b480      	push	{r7}
 800f9da:	b085      	sub	sp, #20
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
 800f9e0:	460b      	mov	r3, r1
 800f9e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f9ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f9ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	da0b      	bge.n	800fa0c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f9f4:	78fb      	ldrb	r3, [r7, #3]
 800f9f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f9fa:	68f9      	ldr	r1, [r7, #12]
 800f9fc:	4613      	mov	r3, r2
 800f9fe:	00db      	lsls	r3, r3, #3
 800fa00:	1a9b      	subs	r3, r3, r2
 800fa02:	009b      	lsls	r3, r3, #2
 800fa04:	440b      	add	r3, r1
 800fa06:	333e      	adds	r3, #62	; 0x3e
 800fa08:	781b      	ldrb	r3, [r3, #0]
 800fa0a:	e00b      	b.n	800fa24 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fa0c:	78fb      	ldrb	r3, [r7, #3]
 800fa0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fa12:	68f9      	ldr	r1, [r7, #12]
 800fa14:	4613      	mov	r3, r2
 800fa16:	00db      	lsls	r3, r3, #3
 800fa18:	1a9b      	subs	r3, r3, r2
 800fa1a:	009b      	lsls	r3, r3, #2
 800fa1c:	440b      	add	r3, r1
 800fa1e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fa22:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fa24:	4618      	mov	r0, r3
 800fa26:	3714      	adds	r7, #20
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2e:	4770      	bx	lr

0800fa30 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b084      	sub	sp, #16
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
 800fa38:	460b      	mov	r3, r1
 800fa3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa40:	2300      	movs	r3, #0
 800fa42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fa4a:	78fa      	ldrb	r2, [r7, #3]
 800fa4c:	4611      	mov	r1, r2
 800fa4e:	4618      	mov	r0, r3
 800fa50:	f7f6 f9d8 	bl	8005e04 <HAL_PCD_SetAddress>
 800fa54:	4603      	mov	r3, r0
 800fa56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa58:	7bfb      	ldrb	r3, [r7, #15]
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f000 f874 	bl	800fb48 <USBD_Get_USB_Status>
 800fa60:	4603      	mov	r3, r0
 800fa62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa64:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa66:	4618      	mov	r0, r3
 800fa68:	3710      	adds	r7, #16
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}

0800fa6e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fa6e:	b580      	push	{r7, lr}
 800fa70:	b086      	sub	sp, #24
 800fa72:	af00      	add	r7, sp, #0
 800fa74:	60f8      	str	r0, [r7, #12]
 800fa76:	607a      	str	r2, [r7, #4]
 800fa78:	603b      	str	r3, [r7, #0]
 800fa7a:	460b      	mov	r3, r1
 800fa7c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa7e:	2300      	movs	r3, #0
 800fa80:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa82:	2300      	movs	r3, #0
 800fa84:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fa8c:	7af9      	ldrb	r1, [r7, #11]
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	687a      	ldr	r2, [r7, #4]
 800fa92:	f7f6 faf1 	bl	8006078 <HAL_PCD_EP_Transmit>
 800fa96:	4603      	mov	r3, r0
 800fa98:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa9a:	7dfb      	ldrb	r3, [r7, #23]
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	f000 f853 	bl	800fb48 <USBD_Get_USB_Status>
 800faa2:	4603      	mov	r3, r0
 800faa4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800faa6:	7dbb      	ldrb	r3, [r7, #22]
}
 800faa8:	4618      	mov	r0, r3
 800faaa:	3718      	adds	r7, #24
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}

0800fab0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b086      	sub	sp, #24
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	60f8      	str	r0, [r7, #12]
 800fab8:	607a      	str	r2, [r7, #4]
 800faba:	603b      	str	r3, [r7, #0]
 800fabc:	460b      	mov	r3, r1
 800fabe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fac0:	2300      	movs	r3, #0
 800fac2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fac4:	2300      	movs	r3, #0
 800fac6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800face:	7af9      	ldrb	r1, [r7, #11]
 800fad0:	683b      	ldr	r3, [r7, #0]
 800fad2:	687a      	ldr	r2, [r7, #4]
 800fad4:	f7f6 fa6d 	bl	8005fb2 <HAL_PCD_EP_Receive>
 800fad8:	4603      	mov	r3, r0
 800fada:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fadc:	7dfb      	ldrb	r3, [r7, #23]
 800fade:	4618      	mov	r0, r3
 800fae0:	f000 f832 	bl	800fb48 <USBD_Get_USB_Status>
 800fae4:	4603      	mov	r3, r0
 800fae6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fae8:	7dbb      	ldrb	r3, [r7, #22]
}
 800faea:	4618      	mov	r0, r3
 800faec:	3718      	adds	r7, #24
 800faee:	46bd      	mov	sp, r7
 800faf0:	bd80      	pop	{r7, pc}

0800faf2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800faf2:	b580      	push	{r7, lr}
 800faf4:	b082      	sub	sp, #8
 800faf6:	af00      	add	r7, sp, #0
 800faf8:	6078      	str	r0, [r7, #4]
 800fafa:	460b      	mov	r3, r1
 800fafc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fb04:	78fa      	ldrb	r2, [r7, #3]
 800fb06:	4611      	mov	r1, r2
 800fb08:	4618      	mov	r0, r3
 800fb0a:	f7f6 fa9d 	bl	8006048 <HAL_PCD_EP_GetRxCount>
 800fb0e:	4603      	mov	r3, r0
}
 800fb10:	4618      	mov	r0, r3
 800fb12:	3708      	adds	r7, #8
 800fb14:	46bd      	mov	sp, r7
 800fb16:	bd80      	pop	{r7, pc}

0800fb18 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fb18:	b480      	push	{r7}
 800fb1a:	b083      	sub	sp, #12
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fb20:	4b03      	ldr	r3, [pc, #12]	; (800fb30 <USBD_static_malloc+0x18>)
}
 800fb22:	4618      	mov	r0, r3
 800fb24:	370c      	adds	r7, #12
 800fb26:	46bd      	mov	sp, r7
 800fb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2c:	4770      	bx	lr
 800fb2e:	bf00      	nop
 800fb30:	20000908 	.word	0x20000908

0800fb34 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fb34:	b480      	push	{r7}
 800fb36:	b083      	sub	sp, #12
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]

}
 800fb3c:	bf00      	nop
 800fb3e:	370c      	adds	r7, #12
 800fb40:	46bd      	mov	sp, r7
 800fb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb46:	4770      	bx	lr

0800fb48 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fb48:	b480      	push	{r7}
 800fb4a:	b085      	sub	sp, #20
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	4603      	mov	r3, r0
 800fb50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb52:	2300      	movs	r3, #0
 800fb54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fb56:	79fb      	ldrb	r3, [r7, #7]
 800fb58:	2b03      	cmp	r3, #3
 800fb5a:	d817      	bhi.n	800fb8c <USBD_Get_USB_Status+0x44>
 800fb5c:	a201      	add	r2, pc, #4	; (adr r2, 800fb64 <USBD_Get_USB_Status+0x1c>)
 800fb5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb62:	bf00      	nop
 800fb64:	0800fb75 	.word	0x0800fb75
 800fb68:	0800fb7b 	.word	0x0800fb7b
 800fb6c:	0800fb81 	.word	0x0800fb81
 800fb70:	0800fb87 	.word	0x0800fb87
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fb74:	2300      	movs	r3, #0
 800fb76:	73fb      	strb	r3, [r7, #15]
    break;
 800fb78:	e00b      	b.n	800fb92 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fb7a:	2303      	movs	r3, #3
 800fb7c:	73fb      	strb	r3, [r7, #15]
    break;
 800fb7e:	e008      	b.n	800fb92 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fb80:	2301      	movs	r3, #1
 800fb82:	73fb      	strb	r3, [r7, #15]
    break;
 800fb84:	e005      	b.n	800fb92 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fb86:	2303      	movs	r3, #3
 800fb88:	73fb      	strb	r3, [r7, #15]
    break;
 800fb8a:	e002      	b.n	800fb92 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fb8c:	2303      	movs	r3, #3
 800fb8e:	73fb      	strb	r3, [r7, #15]
    break;
 800fb90:	bf00      	nop
  }
  return usb_status;
 800fb92:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb94:	4618      	mov	r0, r3
 800fb96:	3714      	adds	r7, #20
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9e:	4770      	bx	lr

0800fba0 <__errno>:
 800fba0:	4b01      	ldr	r3, [pc, #4]	; (800fba8 <__errno+0x8>)
 800fba2:	6818      	ldr	r0, [r3, #0]
 800fba4:	4770      	bx	lr
 800fba6:	bf00      	nop
 800fba8:	20000198 	.word	0x20000198

0800fbac <__libc_init_array>:
 800fbac:	b570      	push	{r4, r5, r6, lr}
 800fbae:	4d0d      	ldr	r5, [pc, #52]	; (800fbe4 <__libc_init_array+0x38>)
 800fbb0:	4c0d      	ldr	r4, [pc, #52]	; (800fbe8 <__libc_init_array+0x3c>)
 800fbb2:	1b64      	subs	r4, r4, r5
 800fbb4:	10a4      	asrs	r4, r4, #2
 800fbb6:	2600      	movs	r6, #0
 800fbb8:	42a6      	cmp	r6, r4
 800fbba:	d109      	bne.n	800fbd0 <__libc_init_array+0x24>
 800fbbc:	4d0b      	ldr	r5, [pc, #44]	; (800fbec <__libc_init_array+0x40>)
 800fbbe:	4c0c      	ldr	r4, [pc, #48]	; (800fbf0 <__libc_init_array+0x44>)
 800fbc0:	f005 f8d0 	bl	8014d64 <_init>
 800fbc4:	1b64      	subs	r4, r4, r5
 800fbc6:	10a4      	asrs	r4, r4, #2
 800fbc8:	2600      	movs	r6, #0
 800fbca:	42a6      	cmp	r6, r4
 800fbcc:	d105      	bne.n	800fbda <__libc_init_array+0x2e>
 800fbce:	bd70      	pop	{r4, r5, r6, pc}
 800fbd0:	f855 3b04 	ldr.w	r3, [r5], #4
 800fbd4:	4798      	blx	r3
 800fbd6:	3601      	adds	r6, #1
 800fbd8:	e7ee      	b.n	800fbb8 <__libc_init_array+0xc>
 800fbda:	f855 3b04 	ldr.w	r3, [r5], #4
 800fbde:	4798      	blx	r3
 800fbe0:	3601      	adds	r6, #1
 800fbe2:	e7f2      	b.n	800fbca <__libc_init_array+0x1e>
 800fbe4:	080155d4 	.word	0x080155d4
 800fbe8:	080155d4 	.word	0x080155d4
 800fbec:	080155d4 	.word	0x080155d4
 800fbf0:	080155d8 	.word	0x080155d8

0800fbf4 <memset>:
 800fbf4:	4402      	add	r2, r0
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	4293      	cmp	r3, r2
 800fbfa:	d100      	bne.n	800fbfe <memset+0xa>
 800fbfc:	4770      	bx	lr
 800fbfe:	f803 1b01 	strb.w	r1, [r3], #1
 800fc02:	e7f9      	b.n	800fbf8 <memset+0x4>

0800fc04 <__cvt>:
 800fc04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc08:	ec55 4b10 	vmov	r4, r5, d0
 800fc0c:	2d00      	cmp	r5, #0
 800fc0e:	460e      	mov	r6, r1
 800fc10:	4619      	mov	r1, r3
 800fc12:	462b      	mov	r3, r5
 800fc14:	bfbb      	ittet	lt
 800fc16:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fc1a:	461d      	movlt	r5, r3
 800fc1c:	2300      	movge	r3, #0
 800fc1e:	232d      	movlt	r3, #45	; 0x2d
 800fc20:	700b      	strb	r3, [r1, #0]
 800fc22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fc24:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800fc28:	4691      	mov	r9, r2
 800fc2a:	f023 0820 	bic.w	r8, r3, #32
 800fc2e:	bfbc      	itt	lt
 800fc30:	4622      	movlt	r2, r4
 800fc32:	4614      	movlt	r4, r2
 800fc34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fc38:	d005      	beq.n	800fc46 <__cvt+0x42>
 800fc3a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800fc3e:	d100      	bne.n	800fc42 <__cvt+0x3e>
 800fc40:	3601      	adds	r6, #1
 800fc42:	2102      	movs	r1, #2
 800fc44:	e000      	b.n	800fc48 <__cvt+0x44>
 800fc46:	2103      	movs	r1, #3
 800fc48:	ab03      	add	r3, sp, #12
 800fc4a:	9301      	str	r3, [sp, #4]
 800fc4c:	ab02      	add	r3, sp, #8
 800fc4e:	9300      	str	r3, [sp, #0]
 800fc50:	ec45 4b10 	vmov	d0, r4, r5
 800fc54:	4653      	mov	r3, sl
 800fc56:	4632      	mov	r2, r6
 800fc58:	f001 fea6 	bl	80119a8 <_dtoa_r>
 800fc5c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800fc60:	4607      	mov	r7, r0
 800fc62:	d102      	bne.n	800fc6a <__cvt+0x66>
 800fc64:	f019 0f01 	tst.w	r9, #1
 800fc68:	d022      	beq.n	800fcb0 <__cvt+0xac>
 800fc6a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fc6e:	eb07 0906 	add.w	r9, r7, r6
 800fc72:	d110      	bne.n	800fc96 <__cvt+0x92>
 800fc74:	783b      	ldrb	r3, [r7, #0]
 800fc76:	2b30      	cmp	r3, #48	; 0x30
 800fc78:	d10a      	bne.n	800fc90 <__cvt+0x8c>
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	4620      	mov	r0, r4
 800fc80:	4629      	mov	r1, r5
 800fc82:	f7f0 ff31 	bl	8000ae8 <__aeabi_dcmpeq>
 800fc86:	b918      	cbnz	r0, 800fc90 <__cvt+0x8c>
 800fc88:	f1c6 0601 	rsb	r6, r6, #1
 800fc8c:	f8ca 6000 	str.w	r6, [sl]
 800fc90:	f8da 3000 	ldr.w	r3, [sl]
 800fc94:	4499      	add	r9, r3
 800fc96:	2200      	movs	r2, #0
 800fc98:	2300      	movs	r3, #0
 800fc9a:	4620      	mov	r0, r4
 800fc9c:	4629      	mov	r1, r5
 800fc9e:	f7f0 ff23 	bl	8000ae8 <__aeabi_dcmpeq>
 800fca2:	b108      	cbz	r0, 800fca8 <__cvt+0xa4>
 800fca4:	f8cd 900c 	str.w	r9, [sp, #12]
 800fca8:	2230      	movs	r2, #48	; 0x30
 800fcaa:	9b03      	ldr	r3, [sp, #12]
 800fcac:	454b      	cmp	r3, r9
 800fcae:	d307      	bcc.n	800fcc0 <__cvt+0xbc>
 800fcb0:	9b03      	ldr	r3, [sp, #12]
 800fcb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fcb4:	1bdb      	subs	r3, r3, r7
 800fcb6:	4638      	mov	r0, r7
 800fcb8:	6013      	str	r3, [r2, #0]
 800fcba:	b004      	add	sp, #16
 800fcbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcc0:	1c59      	adds	r1, r3, #1
 800fcc2:	9103      	str	r1, [sp, #12]
 800fcc4:	701a      	strb	r2, [r3, #0]
 800fcc6:	e7f0      	b.n	800fcaa <__cvt+0xa6>

0800fcc8 <__exponent>:
 800fcc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fcca:	4603      	mov	r3, r0
 800fccc:	2900      	cmp	r1, #0
 800fcce:	bfb8      	it	lt
 800fcd0:	4249      	neglt	r1, r1
 800fcd2:	f803 2b02 	strb.w	r2, [r3], #2
 800fcd6:	bfb4      	ite	lt
 800fcd8:	222d      	movlt	r2, #45	; 0x2d
 800fcda:	222b      	movge	r2, #43	; 0x2b
 800fcdc:	2909      	cmp	r1, #9
 800fcde:	7042      	strb	r2, [r0, #1]
 800fce0:	dd2a      	ble.n	800fd38 <__exponent+0x70>
 800fce2:	f10d 0407 	add.w	r4, sp, #7
 800fce6:	46a4      	mov	ip, r4
 800fce8:	270a      	movs	r7, #10
 800fcea:	46a6      	mov	lr, r4
 800fcec:	460a      	mov	r2, r1
 800fcee:	fb91 f6f7 	sdiv	r6, r1, r7
 800fcf2:	fb07 1516 	mls	r5, r7, r6, r1
 800fcf6:	3530      	adds	r5, #48	; 0x30
 800fcf8:	2a63      	cmp	r2, #99	; 0x63
 800fcfa:	f104 34ff 	add.w	r4, r4, #4294967295
 800fcfe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fd02:	4631      	mov	r1, r6
 800fd04:	dcf1      	bgt.n	800fcea <__exponent+0x22>
 800fd06:	3130      	adds	r1, #48	; 0x30
 800fd08:	f1ae 0502 	sub.w	r5, lr, #2
 800fd0c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fd10:	1c44      	adds	r4, r0, #1
 800fd12:	4629      	mov	r1, r5
 800fd14:	4561      	cmp	r1, ip
 800fd16:	d30a      	bcc.n	800fd2e <__exponent+0x66>
 800fd18:	f10d 0209 	add.w	r2, sp, #9
 800fd1c:	eba2 020e 	sub.w	r2, r2, lr
 800fd20:	4565      	cmp	r5, ip
 800fd22:	bf88      	it	hi
 800fd24:	2200      	movhi	r2, #0
 800fd26:	4413      	add	r3, r2
 800fd28:	1a18      	subs	r0, r3, r0
 800fd2a:	b003      	add	sp, #12
 800fd2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd32:	f804 2f01 	strb.w	r2, [r4, #1]!
 800fd36:	e7ed      	b.n	800fd14 <__exponent+0x4c>
 800fd38:	2330      	movs	r3, #48	; 0x30
 800fd3a:	3130      	adds	r1, #48	; 0x30
 800fd3c:	7083      	strb	r3, [r0, #2]
 800fd3e:	70c1      	strb	r1, [r0, #3]
 800fd40:	1d03      	adds	r3, r0, #4
 800fd42:	e7f1      	b.n	800fd28 <__exponent+0x60>

0800fd44 <_printf_float>:
 800fd44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd48:	ed2d 8b02 	vpush	{d8}
 800fd4c:	b08d      	sub	sp, #52	; 0x34
 800fd4e:	460c      	mov	r4, r1
 800fd50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fd54:	4616      	mov	r6, r2
 800fd56:	461f      	mov	r7, r3
 800fd58:	4605      	mov	r5, r0
 800fd5a:	f002 ff81 	bl	8012c60 <_localeconv_r>
 800fd5e:	f8d0 a000 	ldr.w	sl, [r0]
 800fd62:	4650      	mov	r0, sl
 800fd64:	f7f0 fa44 	bl	80001f0 <strlen>
 800fd68:	2300      	movs	r3, #0
 800fd6a:	930a      	str	r3, [sp, #40]	; 0x28
 800fd6c:	6823      	ldr	r3, [r4, #0]
 800fd6e:	9305      	str	r3, [sp, #20]
 800fd70:	f8d8 3000 	ldr.w	r3, [r8]
 800fd74:	f894 b018 	ldrb.w	fp, [r4, #24]
 800fd78:	3307      	adds	r3, #7
 800fd7a:	f023 0307 	bic.w	r3, r3, #7
 800fd7e:	f103 0208 	add.w	r2, r3, #8
 800fd82:	f8c8 2000 	str.w	r2, [r8]
 800fd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd8a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800fd8e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800fd92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fd96:	9307      	str	r3, [sp, #28]
 800fd98:	f8cd 8018 	str.w	r8, [sp, #24]
 800fd9c:	ee08 0a10 	vmov	s16, r0
 800fda0:	4b9f      	ldr	r3, [pc, #636]	; (8010020 <_printf_float+0x2dc>)
 800fda2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fda6:	f04f 32ff 	mov.w	r2, #4294967295
 800fdaa:	f7f0 fecf 	bl	8000b4c <__aeabi_dcmpun>
 800fdae:	bb88      	cbnz	r0, 800fe14 <_printf_float+0xd0>
 800fdb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fdb4:	4b9a      	ldr	r3, [pc, #616]	; (8010020 <_printf_float+0x2dc>)
 800fdb6:	f04f 32ff 	mov.w	r2, #4294967295
 800fdba:	f7f0 fea9 	bl	8000b10 <__aeabi_dcmple>
 800fdbe:	bb48      	cbnz	r0, 800fe14 <_printf_float+0xd0>
 800fdc0:	2200      	movs	r2, #0
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	4640      	mov	r0, r8
 800fdc6:	4649      	mov	r1, r9
 800fdc8:	f7f0 fe98 	bl	8000afc <__aeabi_dcmplt>
 800fdcc:	b110      	cbz	r0, 800fdd4 <_printf_float+0x90>
 800fdce:	232d      	movs	r3, #45	; 0x2d
 800fdd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fdd4:	4b93      	ldr	r3, [pc, #588]	; (8010024 <_printf_float+0x2e0>)
 800fdd6:	4894      	ldr	r0, [pc, #592]	; (8010028 <_printf_float+0x2e4>)
 800fdd8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800fddc:	bf94      	ite	ls
 800fdde:	4698      	movls	r8, r3
 800fde0:	4680      	movhi	r8, r0
 800fde2:	2303      	movs	r3, #3
 800fde4:	6123      	str	r3, [r4, #16]
 800fde6:	9b05      	ldr	r3, [sp, #20]
 800fde8:	f023 0204 	bic.w	r2, r3, #4
 800fdec:	6022      	str	r2, [r4, #0]
 800fdee:	f04f 0900 	mov.w	r9, #0
 800fdf2:	9700      	str	r7, [sp, #0]
 800fdf4:	4633      	mov	r3, r6
 800fdf6:	aa0b      	add	r2, sp, #44	; 0x2c
 800fdf8:	4621      	mov	r1, r4
 800fdfa:	4628      	mov	r0, r5
 800fdfc:	f000 f9d8 	bl	80101b0 <_printf_common>
 800fe00:	3001      	adds	r0, #1
 800fe02:	f040 8090 	bne.w	800ff26 <_printf_float+0x1e2>
 800fe06:	f04f 30ff 	mov.w	r0, #4294967295
 800fe0a:	b00d      	add	sp, #52	; 0x34
 800fe0c:	ecbd 8b02 	vpop	{d8}
 800fe10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe14:	4642      	mov	r2, r8
 800fe16:	464b      	mov	r3, r9
 800fe18:	4640      	mov	r0, r8
 800fe1a:	4649      	mov	r1, r9
 800fe1c:	f7f0 fe96 	bl	8000b4c <__aeabi_dcmpun>
 800fe20:	b140      	cbz	r0, 800fe34 <_printf_float+0xf0>
 800fe22:	464b      	mov	r3, r9
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	bfbc      	itt	lt
 800fe28:	232d      	movlt	r3, #45	; 0x2d
 800fe2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fe2e:	487f      	ldr	r0, [pc, #508]	; (801002c <_printf_float+0x2e8>)
 800fe30:	4b7f      	ldr	r3, [pc, #508]	; (8010030 <_printf_float+0x2ec>)
 800fe32:	e7d1      	b.n	800fdd8 <_printf_float+0x94>
 800fe34:	6863      	ldr	r3, [r4, #4]
 800fe36:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800fe3a:	9206      	str	r2, [sp, #24]
 800fe3c:	1c5a      	adds	r2, r3, #1
 800fe3e:	d13f      	bne.n	800fec0 <_printf_float+0x17c>
 800fe40:	2306      	movs	r3, #6
 800fe42:	6063      	str	r3, [r4, #4]
 800fe44:	9b05      	ldr	r3, [sp, #20]
 800fe46:	6861      	ldr	r1, [r4, #4]
 800fe48:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	9303      	str	r3, [sp, #12]
 800fe50:	ab0a      	add	r3, sp, #40	; 0x28
 800fe52:	e9cd b301 	strd	fp, r3, [sp, #4]
 800fe56:	ab09      	add	r3, sp, #36	; 0x24
 800fe58:	ec49 8b10 	vmov	d0, r8, r9
 800fe5c:	9300      	str	r3, [sp, #0]
 800fe5e:	6022      	str	r2, [r4, #0]
 800fe60:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fe64:	4628      	mov	r0, r5
 800fe66:	f7ff fecd 	bl	800fc04 <__cvt>
 800fe6a:	9b06      	ldr	r3, [sp, #24]
 800fe6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fe6e:	2b47      	cmp	r3, #71	; 0x47
 800fe70:	4680      	mov	r8, r0
 800fe72:	d108      	bne.n	800fe86 <_printf_float+0x142>
 800fe74:	1cc8      	adds	r0, r1, #3
 800fe76:	db02      	blt.n	800fe7e <_printf_float+0x13a>
 800fe78:	6863      	ldr	r3, [r4, #4]
 800fe7a:	4299      	cmp	r1, r3
 800fe7c:	dd41      	ble.n	800ff02 <_printf_float+0x1be>
 800fe7e:	f1ab 0b02 	sub.w	fp, fp, #2
 800fe82:	fa5f fb8b 	uxtb.w	fp, fp
 800fe86:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fe8a:	d820      	bhi.n	800fece <_printf_float+0x18a>
 800fe8c:	3901      	subs	r1, #1
 800fe8e:	465a      	mov	r2, fp
 800fe90:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fe94:	9109      	str	r1, [sp, #36]	; 0x24
 800fe96:	f7ff ff17 	bl	800fcc8 <__exponent>
 800fe9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fe9c:	1813      	adds	r3, r2, r0
 800fe9e:	2a01      	cmp	r2, #1
 800fea0:	4681      	mov	r9, r0
 800fea2:	6123      	str	r3, [r4, #16]
 800fea4:	dc02      	bgt.n	800feac <_printf_float+0x168>
 800fea6:	6822      	ldr	r2, [r4, #0]
 800fea8:	07d2      	lsls	r2, r2, #31
 800feaa:	d501      	bpl.n	800feb0 <_printf_float+0x16c>
 800feac:	3301      	adds	r3, #1
 800feae:	6123      	str	r3, [r4, #16]
 800feb0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d09c      	beq.n	800fdf2 <_printf_float+0xae>
 800feb8:	232d      	movs	r3, #45	; 0x2d
 800feba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800febe:	e798      	b.n	800fdf2 <_printf_float+0xae>
 800fec0:	9a06      	ldr	r2, [sp, #24]
 800fec2:	2a47      	cmp	r2, #71	; 0x47
 800fec4:	d1be      	bne.n	800fe44 <_printf_float+0x100>
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d1bc      	bne.n	800fe44 <_printf_float+0x100>
 800feca:	2301      	movs	r3, #1
 800fecc:	e7b9      	b.n	800fe42 <_printf_float+0xfe>
 800fece:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800fed2:	d118      	bne.n	800ff06 <_printf_float+0x1c2>
 800fed4:	2900      	cmp	r1, #0
 800fed6:	6863      	ldr	r3, [r4, #4]
 800fed8:	dd0b      	ble.n	800fef2 <_printf_float+0x1ae>
 800feda:	6121      	str	r1, [r4, #16]
 800fedc:	b913      	cbnz	r3, 800fee4 <_printf_float+0x1a0>
 800fede:	6822      	ldr	r2, [r4, #0]
 800fee0:	07d0      	lsls	r0, r2, #31
 800fee2:	d502      	bpl.n	800feea <_printf_float+0x1a6>
 800fee4:	3301      	adds	r3, #1
 800fee6:	440b      	add	r3, r1
 800fee8:	6123      	str	r3, [r4, #16]
 800feea:	65a1      	str	r1, [r4, #88]	; 0x58
 800feec:	f04f 0900 	mov.w	r9, #0
 800fef0:	e7de      	b.n	800feb0 <_printf_float+0x16c>
 800fef2:	b913      	cbnz	r3, 800fefa <_printf_float+0x1b6>
 800fef4:	6822      	ldr	r2, [r4, #0]
 800fef6:	07d2      	lsls	r2, r2, #31
 800fef8:	d501      	bpl.n	800fefe <_printf_float+0x1ba>
 800fefa:	3302      	adds	r3, #2
 800fefc:	e7f4      	b.n	800fee8 <_printf_float+0x1a4>
 800fefe:	2301      	movs	r3, #1
 800ff00:	e7f2      	b.n	800fee8 <_printf_float+0x1a4>
 800ff02:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ff06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff08:	4299      	cmp	r1, r3
 800ff0a:	db05      	blt.n	800ff18 <_printf_float+0x1d4>
 800ff0c:	6823      	ldr	r3, [r4, #0]
 800ff0e:	6121      	str	r1, [r4, #16]
 800ff10:	07d8      	lsls	r0, r3, #31
 800ff12:	d5ea      	bpl.n	800feea <_printf_float+0x1a6>
 800ff14:	1c4b      	adds	r3, r1, #1
 800ff16:	e7e7      	b.n	800fee8 <_printf_float+0x1a4>
 800ff18:	2900      	cmp	r1, #0
 800ff1a:	bfd4      	ite	le
 800ff1c:	f1c1 0202 	rsble	r2, r1, #2
 800ff20:	2201      	movgt	r2, #1
 800ff22:	4413      	add	r3, r2
 800ff24:	e7e0      	b.n	800fee8 <_printf_float+0x1a4>
 800ff26:	6823      	ldr	r3, [r4, #0]
 800ff28:	055a      	lsls	r2, r3, #21
 800ff2a:	d407      	bmi.n	800ff3c <_printf_float+0x1f8>
 800ff2c:	6923      	ldr	r3, [r4, #16]
 800ff2e:	4642      	mov	r2, r8
 800ff30:	4631      	mov	r1, r6
 800ff32:	4628      	mov	r0, r5
 800ff34:	47b8      	blx	r7
 800ff36:	3001      	adds	r0, #1
 800ff38:	d12c      	bne.n	800ff94 <_printf_float+0x250>
 800ff3a:	e764      	b.n	800fe06 <_printf_float+0xc2>
 800ff3c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ff40:	f240 80e0 	bls.w	8010104 <_printf_float+0x3c0>
 800ff44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ff48:	2200      	movs	r2, #0
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	f7f0 fdcc 	bl	8000ae8 <__aeabi_dcmpeq>
 800ff50:	2800      	cmp	r0, #0
 800ff52:	d034      	beq.n	800ffbe <_printf_float+0x27a>
 800ff54:	4a37      	ldr	r2, [pc, #220]	; (8010034 <_printf_float+0x2f0>)
 800ff56:	2301      	movs	r3, #1
 800ff58:	4631      	mov	r1, r6
 800ff5a:	4628      	mov	r0, r5
 800ff5c:	47b8      	blx	r7
 800ff5e:	3001      	adds	r0, #1
 800ff60:	f43f af51 	beq.w	800fe06 <_printf_float+0xc2>
 800ff64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ff68:	429a      	cmp	r2, r3
 800ff6a:	db02      	blt.n	800ff72 <_printf_float+0x22e>
 800ff6c:	6823      	ldr	r3, [r4, #0]
 800ff6e:	07d8      	lsls	r0, r3, #31
 800ff70:	d510      	bpl.n	800ff94 <_printf_float+0x250>
 800ff72:	ee18 3a10 	vmov	r3, s16
 800ff76:	4652      	mov	r2, sl
 800ff78:	4631      	mov	r1, r6
 800ff7a:	4628      	mov	r0, r5
 800ff7c:	47b8      	blx	r7
 800ff7e:	3001      	adds	r0, #1
 800ff80:	f43f af41 	beq.w	800fe06 <_printf_float+0xc2>
 800ff84:	f04f 0800 	mov.w	r8, #0
 800ff88:	f104 091a 	add.w	r9, r4, #26
 800ff8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff8e:	3b01      	subs	r3, #1
 800ff90:	4543      	cmp	r3, r8
 800ff92:	dc09      	bgt.n	800ffa8 <_printf_float+0x264>
 800ff94:	6823      	ldr	r3, [r4, #0]
 800ff96:	079b      	lsls	r3, r3, #30
 800ff98:	f100 8105 	bmi.w	80101a6 <_printf_float+0x462>
 800ff9c:	68e0      	ldr	r0, [r4, #12]
 800ff9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ffa0:	4298      	cmp	r0, r3
 800ffa2:	bfb8      	it	lt
 800ffa4:	4618      	movlt	r0, r3
 800ffa6:	e730      	b.n	800fe0a <_printf_float+0xc6>
 800ffa8:	2301      	movs	r3, #1
 800ffaa:	464a      	mov	r2, r9
 800ffac:	4631      	mov	r1, r6
 800ffae:	4628      	mov	r0, r5
 800ffb0:	47b8      	blx	r7
 800ffb2:	3001      	adds	r0, #1
 800ffb4:	f43f af27 	beq.w	800fe06 <_printf_float+0xc2>
 800ffb8:	f108 0801 	add.w	r8, r8, #1
 800ffbc:	e7e6      	b.n	800ff8c <_printf_float+0x248>
 800ffbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	dc39      	bgt.n	8010038 <_printf_float+0x2f4>
 800ffc4:	4a1b      	ldr	r2, [pc, #108]	; (8010034 <_printf_float+0x2f0>)
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	4631      	mov	r1, r6
 800ffca:	4628      	mov	r0, r5
 800ffcc:	47b8      	blx	r7
 800ffce:	3001      	adds	r0, #1
 800ffd0:	f43f af19 	beq.w	800fe06 <_printf_float+0xc2>
 800ffd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ffd8:	4313      	orrs	r3, r2
 800ffda:	d102      	bne.n	800ffe2 <_printf_float+0x29e>
 800ffdc:	6823      	ldr	r3, [r4, #0]
 800ffde:	07d9      	lsls	r1, r3, #31
 800ffe0:	d5d8      	bpl.n	800ff94 <_printf_float+0x250>
 800ffe2:	ee18 3a10 	vmov	r3, s16
 800ffe6:	4652      	mov	r2, sl
 800ffe8:	4631      	mov	r1, r6
 800ffea:	4628      	mov	r0, r5
 800ffec:	47b8      	blx	r7
 800ffee:	3001      	adds	r0, #1
 800fff0:	f43f af09 	beq.w	800fe06 <_printf_float+0xc2>
 800fff4:	f04f 0900 	mov.w	r9, #0
 800fff8:	f104 0a1a 	add.w	sl, r4, #26
 800fffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fffe:	425b      	negs	r3, r3
 8010000:	454b      	cmp	r3, r9
 8010002:	dc01      	bgt.n	8010008 <_printf_float+0x2c4>
 8010004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010006:	e792      	b.n	800ff2e <_printf_float+0x1ea>
 8010008:	2301      	movs	r3, #1
 801000a:	4652      	mov	r2, sl
 801000c:	4631      	mov	r1, r6
 801000e:	4628      	mov	r0, r5
 8010010:	47b8      	blx	r7
 8010012:	3001      	adds	r0, #1
 8010014:	f43f aef7 	beq.w	800fe06 <_printf_float+0xc2>
 8010018:	f109 0901 	add.w	r9, r9, #1
 801001c:	e7ee      	b.n	800fffc <_printf_float+0x2b8>
 801001e:	bf00      	nop
 8010020:	7fefffff 	.word	0x7fefffff
 8010024:	08015208 	.word	0x08015208
 8010028:	0801520c 	.word	0x0801520c
 801002c:	08015214 	.word	0x08015214
 8010030:	08015210 	.word	0x08015210
 8010034:	08015519 	.word	0x08015519
 8010038:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801003a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801003c:	429a      	cmp	r2, r3
 801003e:	bfa8      	it	ge
 8010040:	461a      	movge	r2, r3
 8010042:	2a00      	cmp	r2, #0
 8010044:	4691      	mov	r9, r2
 8010046:	dc37      	bgt.n	80100b8 <_printf_float+0x374>
 8010048:	f04f 0b00 	mov.w	fp, #0
 801004c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010050:	f104 021a 	add.w	r2, r4, #26
 8010054:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010056:	9305      	str	r3, [sp, #20]
 8010058:	eba3 0309 	sub.w	r3, r3, r9
 801005c:	455b      	cmp	r3, fp
 801005e:	dc33      	bgt.n	80100c8 <_printf_float+0x384>
 8010060:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010064:	429a      	cmp	r2, r3
 8010066:	db3b      	blt.n	80100e0 <_printf_float+0x39c>
 8010068:	6823      	ldr	r3, [r4, #0]
 801006a:	07da      	lsls	r2, r3, #31
 801006c:	d438      	bmi.n	80100e0 <_printf_float+0x39c>
 801006e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010070:	9b05      	ldr	r3, [sp, #20]
 8010072:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010074:	1ad3      	subs	r3, r2, r3
 8010076:	eba2 0901 	sub.w	r9, r2, r1
 801007a:	4599      	cmp	r9, r3
 801007c:	bfa8      	it	ge
 801007e:	4699      	movge	r9, r3
 8010080:	f1b9 0f00 	cmp.w	r9, #0
 8010084:	dc35      	bgt.n	80100f2 <_printf_float+0x3ae>
 8010086:	f04f 0800 	mov.w	r8, #0
 801008a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801008e:	f104 0a1a 	add.w	sl, r4, #26
 8010092:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010096:	1a9b      	subs	r3, r3, r2
 8010098:	eba3 0309 	sub.w	r3, r3, r9
 801009c:	4543      	cmp	r3, r8
 801009e:	f77f af79 	ble.w	800ff94 <_printf_float+0x250>
 80100a2:	2301      	movs	r3, #1
 80100a4:	4652      	mov	r2, sl
 80100a6:	4631      	mov	r1, r6
 80100a8:	4628      	mov	r0, r5
 80100aa:	47b8      	blx	r7
 80100ac:	3001      	adds	r0, #1
 80100ae:	f43f aeaa 	beq.w	800fe06 <_printf_float+0xc2>
 80100b2:	f108 0801 	add.w	r8, r8, #1
 80100b6:	e7ec      	b.n	8010092 <_printf_float+0x34e>
 80100b8:	4613      	mov	r3, r2
 80100ba:	4631      	mov	r1, r6
 80100bc:	4642      	mov	r2, r8
 80100be:	4628      	mov	r0, r5
 80100c0:	47b8      	blx	r7
 80100c2:	3001      	adds	r0, #1
 80100c4:	d1c0      	bne.n	8010048 <_printf_float+0x304>
 80100c6:	e69e      	b.n	800fe06 <_printf_float+0xc2>
 80100c8:	2301      	movs	r3, #1
 80100ca:	4631      	mov	r1, r6
 80100cc:	4628      	mov	r0, r5
 80100ce:	9205      	str	r2, [sp, #20]
 80100d0:	47b8      	blx	r7
 80100d2:	3001      	adds	r0, #1
 80100d4:	f43f ae97 	beq.w	800fe06 <_printf_float+0xc2>
 80100d8:	9a05      	ldr	r2, [sp, #20]
 80100da:	f10b 0b01 	add.w	fp, fp, #1
 80100de:	e7b9      	b.n	8010054 <_printf_float+0x310>
 80100e0:	ee18 3a10 	vmov	r3, s16
 80100e4:	4652      	mov	r2, sl
 80100e6:	4631      	mov	r1, r6
 80100e8:	4628      	mov	r0, r5
 80100ea:	47b8      	blx	r7
 80100ec:	3001      	adds	r0, #1
 80100ee:	d1be      	bne.n	801006e <_printf_float+0x32a>
 80100f0:	e689      	b.n	800fe06 <_printf_float+0xc2>
 80100f2:	9a05      	ldr	r2, [sp, #20]
 80100f4:	464b      	mov	r3, r9
 80100f6:	4442      	add	r2, r8
 80100f8:	4631      	mov	r1, r6
 80100fa:	4628      	mov	r0, r5
 80100fc:	47b8      	blx	r7
 80100fe:	3001      	adds	r0, #1
 8010100:	d1c1      	bne.n	8010086 <_printf_float+0x342>
 8010102:	e680      	b.n	800fe06 <_printf_float+0xc2>
 8010104:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010106:	2a01      	cmp	r2, #1
 8010108:	dc01      	bgt.n	801010e <_printf_float+0x3ca>
 801010a:	07db      	lsls	r3, r3, #31
 801010c:	d538      	bpl.n	8010180 <_printf_float+0x43c>
 801010e:	2301      	movs	r3, #1
 8010110:	4642      	mov	r2, r8
 8010112:	4631      	mov	r1, r6
 8010114:	4628      	mov	r0, r5
 8010116:	47b8      	blx	r7
 8010118:	3001      	adds	r0, #1
 801011a:	f43f ae74 	beq.w	800fe06 <_printf_float+0xc2>
 801011e:	ee18 3a10 	vmov	r3, s16
 8010122:	4652      	mov	r2, sl
 8010124:	4631      	mov	r1, r6
 8010126:	4628      	mov	r0, r5
 8010128:	47b8      	blx	r7
 801012a:	3001      	adds	r0, #1
 801012c:	f43f ae6b 	beq.w	800fe06 <_printf_float+0xc2>
 8010130:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010134:	2200      	movs	r2, #0
 8010136:	2300      	movs	r3, #0
 8010138:	f7f0 fcd6 	bl	8000ae8 <__aeabi_dcmpeq>
 801013c:	b9d8      	cbnz	r0, 8010176 <_printf_float+0x432>
 801013e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010140:	f108 0201 	add.w	r2, r8, #1
 8010144:	3b01      	subs	r3, #1
 8010146:	4631      	mov	r1, r6
 8010148:	4628      	mov	r0, r5
 801014a:	47b8      	blx	r7
 801014c:	3001      	adds	r0, #1
 801014e:	d10e      	bne.n	801016e <_printf_float+0x42a>
 8010150:	e659      	b.n	800fe06 <_printf_float+0xc2>
 8010152:	2301      	movs	r3, #1
 8010154:	4652      	mov	r2, sl
 8010156:	4631      	mov	r1, r6
 8010158:	4628      	mov	r0, r5
 801015a:	47b8      	blx	r7
 801015c:	3001      	adds	r0, #1
 801015e:	f43f ae52 	beq.w	800fe06 <_printf_float+0xc2>
 8010162:	f108 0801 	add.w	r8, r8, #1
 8010166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010168:	3b01      	subs	r3, #1
 801016a:	4543      	cmp	r3, r8
 801016c:	dcf1      	bgt.n	8010152 <_printf_float+0x40e>
 801016e:	464b      	mov	r3, r9
 8010170:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010174:	e6dc      	b.n	800ff30 <_printf_float+0x1ec>
 8010176:	f04f 0800 	mov.w	r8, #0
 801017a:	f104 0a1a 	add.w	sl, r4, #26
 801017e:	e7f2      	b.n	8010166 <_printf_float+0x422>
 8010180:	2301      	movs	r3, #1
 8010182:	4642      	mov	r2, r8
 8010184:	e7df      	b.n	8010146 <_printf_float+0x402>
 8010186:	2301      	movs	r3, #1
 8010188:	464a      	mov	r2, r9
 801018a:	4631      	mov	r1, r6
 801018c:	4628      	mov	r0, r5
 801018e:	47b8      	blx	r7
 8010190:	3001      	adds	r0, #1
 8010192:	f43f ae38 	beq.w	800fe06 <_printf_float+0xc2>
 8010196:	f108 0801 	add.w	r8, r8, #1
 801019a:	68e3      	ldr	r3, [r4, #12]
 801019c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801019e:	1a5b      	subs	r3, r3, r1
 80101a0:	4543      	cmp	r3, r8
 80101a2:	dcf0      	bgt.n	8010186 <_printf_float+0x442>
 80101a4:	e6fa      	b.n	800ff9c <_printf_float+0x258>
 80101a6:	f04f 0800 	mov.w	r8, #0
 80101aa:	f104 0919 	add.w	r9, r4, #25
 80101ae:	e7f4      	b.n	801019a <_printf_float+0x456>

080101b0 <_printf_common>:
 80101b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101b4:	4616      	mov	r6, r2
 80101b6:	4699      	mov	r9, r3
 80101b8:	688a      	ldr	r2, [r1, #8]
 80101ba:	690b      	ldr	r3, [r1, #16]
 80101bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80101c0:	4293      	cmp	r3, r2
 80101c2:	bfb8      	it	lt
 80101c4:	4613      	movlt	r3, r2
 80101c6:	6033      	str	r3, [r6, #0]
 80101c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80101cc:	4607      	mov	r7, r0
 80101ce:	460c      	mov	r4, r1
 80101d0:	b10a      	cbz	r2, 80101d6 <_printf_common+0x26>
 80101d2:	3301      	adds	r3, #1
 80101d4:	6033      	str	r3, [r6, #0]
 80101d6:	6823      	ldr	r3, [r4, #0]
 80101d8:	0699      	lsls	r1, r3, #26
 80101da:	bf42      	ittt	mi
 80101dc:	6833      	ldrmi	r3, [r6, #0]
 80101de:	3302      	addmi	r3, #2
 80101e0:	6033      	strmi	r3, [r6, #0]
 80101e2:	6825      	ldr	r5, [r4, #0]
 80101e4:	f015 0506 	ands.w	r5, r5, #6
 80101e8:	d106      	bne.n	80101f8 <_printf_common+0x48>
 80101ea:	f104 0a19 	add.w	sl, r4, #25
 80101ee:	68e3      	ldr	r3, [r4, #12]
 80101f0:	6832      	ldr	r2, [r6, #0]
 80101f2:	1a9b      	subs	r3, r3, r2
 80101f4:	42ab      	cmp	r3, r5
 80101f6:	dc26      	bgt.n	8010246 <_printf_common+0x96>
 80101f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80101fc:	1e13      	subs	r3, r2, #0
 80101fe:	6822      	ldr	r2, [r4, #0]
 8010200:	bf18      	it	ne
 8010202:	2301      	movne	r3, #1
 8010204:	0692      	lsls	r2, r2, #26
 8010206:	d42b      	bmi.n	8010260 <_printf_common+0xb0>
 8010208:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801020c:	4649      	mov	r1, r9
 801020e:	4638      	mov	r0, r7
 8010210:	47c0      	blx	r8
 8010212:	3001      	adds	r0, #1
 8010214:	d01e      	beq.n	8010254 <_printf_common+0xa4>
 8010216:	6823      	ldr	r3, [r4, #0]
 8010218:	68e5      	ldr	r5, [r4, #12]
 801021a:	6832      	ldr	r2, [r6, #0]
 801021c:	f003 0306 	and.w	r3, r3, #6
 8010220:	2b04      	cmp	r3, #4
 8010222:	bf08      	it	eq
 8010224:	1aad      	subeq	r5, r5, r2
 8010226:	68a3      	ldr	r3, [r4, #8]
 8010228:	6922      	ldr	r2, [r4, #16]
 801022a:	bf0c      	ite	eq
 801022c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010230:	2500      	movne	r5, #0
 8010232:	4293      	cmp	r3, r2
 8010234:	bfc4      	itt	gt
 8010236:	1a9b      	subgt	r3, r3, r2
 8010238:	18ed      	addgt	r5, r5, r3
 801023a:	2600      	movs	r6, #0
 801023c:	341a      	adds	r4, #26
 801023e:	42b5      	cmp	r5, r6
 8010240:	d11a      	bne.n	8010278 <_printf_common+0xc8>
 8010242:	2000      	movs	r0, #0
 8010244:	e008      	b.n	8010258 <_printf_common+0xa8>
 8010246:	2301      	movs	r3, #1
 8010248:	4652      	mov	r2, sl
 801024a:	4649      	mov	r1, r9
 801024c:	4638      	mov	r0, r7
 801024e:	47c0      	blx	r8
 8010250:	3001      	adds	r0, #1
 8010252:	d103      	bne.n	801025c <_printf_common+0xac>
 8010254:	f04f 30ff 	mov.w	r0, #4294967295
 8010258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801025c:	3501      	adds	r5, #1
 801025e:	e7c6      	b.n	80101ee <_printf_common+0x3e>
 8010260:	18e1      	adds	r1, r4, r3
 8010262:	1c5a      	adds	r2, r3, #1
 8010264:	2030      	movs	r0, #48	; 0x30
 8010266:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801026a:	4422      	add	r2, r4
 801026c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010270:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010274:	3302      	adds	r3, #2
 8010276:	e7c7      	b.n	8010208 <_printf_common+0x58>
 8010278:	2301      	movs	r3, #1
 801027a:	4622      	mov	r2, r4
 801027c:	4649      	mov	r1, r9
 801027e:	4638      	mov	r0, r7
 8010280:	47c0      	blx	r8
 8010282:	3001      	adds	r0, #1
 8010284:	d0e6      	beq.n	8010254 <_printf_common+0xa4>
 8010286:	3601      	adds	r6, #1
 8010288:	e7d9      	b.n	801023e <_printf_common+0x8e>
	...

0801028c <_printf_i>:
 801028c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010290:	460c      	mov	r4, r1
 8010292:	4691      	mov	r9, r2
 8010294:	7e27      	ldrb	r7, [r4, #24]
 8010296:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010298:	2f78      	cmp	r7, #120	; 0x78
 801029a:	4680      	mov	r8, r0
 801029c:	469a      	mov	sl, r3
 801029e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80102a2:	d807      	bhi.n	80102b4 <_printf_i+0x28>
 80102a4:	2f62      	cmp	r7, #98	; 0x62
 80102a6:	d80a      	bhi.n	80102be <_printf_i+0x32>
 80102a8:	2f00      	cmp	r7, #0
 80102aa:	f000 80d8 	beq.w	801045e <_printf_i+0x1d2>
 80102ae:	2f58      	cmp	r7, #88	; 0x58
 80102b0:	f000 80a3 	beq.w	80103fa <_printf_i+0x16e>
 80102b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80102b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80102bc:	e03a      	b.n	8010334 <_printf_i+0xa8>
 80102be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80102c2:	2b15      	cmp	r3, #21
 80102c4:	d8f6      	bhi.n	80102b4 <_printf_i+0x28>
 80102c6:	a001      	add	r0, pc, #4	; (adr r0, 80102cc <_printf_i+0x40>)
 80102c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80102cc:	08010325 	.word	0x08010325
 80102d0:	08010339 	.word	0x08010339
 80102d4:	080102b5 	.word	0x080102b5
 80102d8:	080102b5 	.word	0x080102b5
 80102dc:	080102b5 	.word	0x080102b5
 80102e0:	080102b5 	.word	0x080102b5
 80102e4:	08010339 	.word	0x08010339
 80102e8:	080102b5 	.word	0x080102b5
 80102ec:	080102b5 	.word	0x080102b5
 80102f0:	080102b5 	.word	0x080102b5
 80102f4:	080102b5 	.word	0x080102b5
 80102f8:	08010445 	.word	0x08010445
 80102fc:	08010369 	.word	0x08010369
 8010300:	08010427 	.word	0x08010427
 8010304:	080102b5 	.word	0x080102b5
 8010308:	080102b5 	.word	0x080102b5
 801030c:	08010467 	.word	0x08010467
 8010310:	080102b5 	.word	0x080102b5
 8010314:	08010369 	.word	0x08010369
 8010318:	080102b5 	.word	0x080102b5
 801031c:	080102b5 	.word	0x080102b5
 8010320:	0801042f 	.word	0x0801042f
 8010324:	680b      	ldr	r3, [r1, #0]
 8010326:	1d1a      	adds	r2, r3, #4
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	600a      	str	r2, [r1, #0]
 801032c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010330:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010334:	2301      	movs	r3, #1
 8010336:	e0a3      	b.n	8010480 <_printf_i+0x1f4>
 8010338:	6825      	ldr	r5, [r4, #0]
 801033a:	6808      	ldr	r0, [r1, #0]
 801033c:	062e      	lsls	r6, r5, #24
 801033e:	f100 0304 	add.w	r3, r0, #4
 8010342:	d50a      	bpl.n	801035a <_printf_i+0xce>
 8010344:	6805      	ldr	r5, [r0, #0]
 8010346:	600b      	str	r3, [r1, #0]
 8010348:	2d00      	cmp	r5, #0
 801034a:	da03      	bge.n	8010354 <_printf_i+0xc8>
 801034c:	232d      	movs	r3, #45	; 0x2d
 801034e:	426d      	negs	r5, r5
 8010350:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010354:	485e      	ldr	r0, [pc, #376]	; (80104d0 <_printf_i+0x244>)
 8010356:	230a      	movs	r3, #10
 8010358:	e019      	b.n	801038e <_printf_i+0x102>
 801035a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801035e:	6805      	ldr	r5, [r0, #0]
 8010360:	600b      	str	r3, [r1, #0]
 8010362:	bf18      	it	ne
 8010364:	b22d      	sxthne	r5, r5
 8010366:	e7ef      	b.n	8010348 <_printf_i+0xbc>
 8010368:	680b      	ldr	r3, [r1, #0]
 801036a:	6825      	ldr	r5, [r4, #0]
 801036c:	1d18      	adds	r0, r3, #4
 801036e:	6008      	str	r0, [r1, #0]
 8010370:	0628      	lsls	r0, r5, #24
 8010372:	d501      	bpl.n	8010378 <_printf_i+0xec>
 8010374:	681d      	ldr	r5, [r3, #0]
 8010376:	e002      	b.n	801037e <_printf_i+0xf2>
 8010378:	0669      	lsls	r1, r5, #25
 801037a:	d5fb      	bpl.n	8010374 <_printf_i+0xe8>
 801037c:	881d      	ldrh	r5, [r3, #0]
 801037e:	4854      	ldr	r0, [pc, #336]	; (80104d0 <_printf_i+0x244>)
 8010380:	2f6f      	cmp	r7, #111	; 0x6f
 8010382:	bf0c      	ite	eq
 8010384:	2308      	moveq	r3, #8
 8010386:	230a      	movne	r3, #10
 8010388:	2100      	movs	r1, #0
 801038a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801038e:	6866      	ldr	r6, [r4, #4]
 8010390:	60a6      	str	r6, [r4, #8]
 8010392:	2e00      	cmp	r6, #0
 8010394:	bfa2      	ittt	ge
 8010396:	6821      	ldrge	r1, [r4, #0]
 8010398:	f021 0104 	bicge.w	r1, r1, #4
 801039c:	6021      	strge	r1, [r4, #0]
 801039e:	b90d      	cbnz	r5, 80103a4 <_printf_i+0x118>
 80103a0:	2e00      	cmp	r6, #0
 80103a2:	d04d      	beq.n	8010440 <_printf_i+0x1b4>
 80103a4:	4616      	mov	r6, r2
 80103a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80103aa:	fb03 5711 	mls	r7, r3, r1, r5
 80103ae:	5dc7      	ldrb	r7, [r0, r7]
 80103b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80103b4:	462f      	mov	r7, r5
 80103b6:	42bb      	cmp	r3, r7
 80103b8:	460d      	mov	r5, r1
 80103ba:	d9f4      	bls.n	80103a6 <_printf_i+0x11a>
 80103bc:	2b08      	cmp	r3, #8
 80103be:	d10b      	bne.n	80103d8 <_printf_i+0x14c>
 80103c0:	6823      	ldr	r3, [r4, #0]
 80103c2:	07df      	lsls	r7, r3, #31
 80103c4:	d508      	bpl.n	80103d8 <_printf_i+0x14c>
 80103c6:	6923      	ldr	r3, [r4, #16]
 80103c8:	6861      	ldr	r1, [r4, #4]
 80103ca:	4299      	cmp	r1, r3
 80103cc:	bfde      	ittt	le
 80103ce:	2330      	movle	r3, #48	; 0x30
 80103d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80103d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80103d8:	1b92      	subs	r2, r2, r6
 80103da:	6122      	str	r2, [r4, #16]
 80103dc:	f8cd a000 	str.w	sl, [sp]
 80103e0:	464b      	mov	r3, r9
 80103e2:	aa03      	add	r2, sp, #12
 80103e4:	4621      	mov	r1, r4
 80103e6:	4640      	mov	r0, r8
 80103e8:	f7ff fee2 	bl	80101b0 <_printf_common>
 80103ec:	3001      	adds	r0, #1
 80103ee:	d14c      	bne.n	801048a <_printf_i+0x1fe>
 80103f0:	f04f 30ff 	mov.w	r0, #4294967295
 80103f4:	b004      	add	sp, #16
 80103f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103fa:	4835      	ldr	r0, [pc, #212]	; (80104d0 <_printf_i+0x244>)
 80103fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010400:	6823      	ldr	r3, [r4, #0]
 8010402:	680e      	ldr	r6, [r1, #0]
 8010404:	061f      	lsls	r7, r3, #24
 8010406:	f856 5b04 	ldr.w	r5, [r6], #4
 801040a:	600e      	str	r6, [r1, #0]
 801040c:	d514      	bpl.n	8010438 <_printf_i+0x1ac>
 801040e:	07d9      	lsls	r1, r3, #31
 8010410:	bf44      	itt	mi
 8010412:	f043 0320 	orrmi.w	r3, r3, #32
 8010416:	6023      	strmi	r3, [r4, #0]
 8010418:	b91d      	cbnz	r5, 8010422 <_printf_i+0x196>
 801041a:	6823      	ldr	r3, [r4, #0]
 801041c:	f023 0320 	bic.w	r3, r3, #32
 8010420:	6023      	str	r3, [r4, #0]
 8010422:	2310      	movs	r3, #16
 8010424:	e7b0      	b.n	8010388 <_printf_i+0xfc>
 8010426:	6823      	ldr	r3, [r4, #0]
 8010428:	f043 0320 	orr.w	r3, r3, #32
 801042c:	6023      	str	r3, [r4, #0]
 801042e:	2378      	movs	r3, #120	; 0x78
 8010430:	4828      	ldr	r0, [pc, #160]	; (80104d4 <_printf_i+0x248>)
 8010432:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010436:	e7e3      	b.n	8010400 <_printf_i+0x174>
 8010438:	065e      	lsls	r6, r3, #25
 801043a:	bf48      	it	mi
 801043c:	b2ad      	uxthmi	r5, r5
 801043e:	e7e6      	b.n	801040e <_printf_i+0x182>
 8010440:	4616      	mov	r6, r2
 8010442:	e7bb      	b.n	80103bc <_printf_i+0x130>
 8010444:	680b      	ldr	r3, [r1, #0]
 8010446:	6826      	ldr	r6, [r4, #0]
 8010448:	6960      	ldr	r0, [r4, #20]
 801044a:	1d1d      	adds	r5, r3, #4
 801044c:	600d      	str	r5, [r1, #0]
 801044e:	0635      	lsls	r5, r6, #24
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	d501      	bpl.n	8010458 <_printf_i+0x1cc>
 8010454:	6018      	str	r0, [r3, #0]
 8010456:	e002      	b.n	801045e <_printf_i+0x1d2>
 8010458:	0671      	lsls	r1, r6, #25
 801045a:	d5fb      	bpl.n	8010454 <_printf_i+0x1c8>
 801045c:	8018      	strh	r0, [r3, #0]
 801045e:	2300      	movs	r3, #0
 8010460:	6123      	str	r3, [r4, #16]
 8010462:	4616      	mov	r6, r2
 8010464:	e7ba      	b.n	80103dc <_printf_i+0x150>
 8010466:	680b      	ldr	r3, [r1, #0]
 8010468:	1d1a      	adds	r2, r3, #4
 801046a:	600a      	str	r2, [r1, #0]
 801046c:	681e      	ldr	r6, [r3, #0]
 801046e:	6862      	ldr	r2, [r4, #4]
 8010470:	2100      	movs	r1, #0
 8010472:	4630      	mov	r0, r6
 8010474:	f7ef fec4 	bl	8000200 <memchr>
 8010478:	b108      	cbz	r0, 801047e <_printf_i+0x1f2>
 801047a:	1b80      	subs	r0, r0, r6
 801047c:	6060      	str	r0, [r4, #4]
 801047e:	6863      	ldr	r3, [r4, #4]
 8010480:	6123      	str	r3, [r4, #16]
 8010482:	2300      	movs	r3, #0
 8010484:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010488:	e7a8      	b.n	80103dc <_printf_i+0x150>
 801048a:	6923      	ldr	r3, [r4, #16]
 801048c:	4632      	mov	r2, r6
 801048e:	4649      	mov	r1, r9
 8010490:	4640      	mov	r0, r8
 8010492:	47d0      	blx	sl
 8010494:	3001      	adds	r0, #1
 8010496:	d0ab      	beq.n	80103f0 <_printf_i+0x164>
 8010498:	6823      	ldr	r3, [r4, #0]
 801049a:	079b      	lsls	r3, r3, #30
 801049c:	d413      	bmi.n	80104c6 <_printf_i+0x23a>
 801049e:	68e0      	ldr	r0, [r4, #12]
 80104a0:	9b03      	ldr	r3, [sp, #12]
 80104a2:	4298      	cmp	r0, r3
 80104a4:	bfb8      	it	lt
 80104a6:	4618      	movlt	r0, r3
 80104a8:	e7a4      	b.n	80103f4 <_printf_i+0x168>
 80104aa:	2301      	movs	r3, #1
 80104ac:	4632      	mov	r2, r6
 80104ae:	4649      	mov	r1, r9
 80104b0:	4640      	mov	r0, r8
 80104b2:	47d0      	blx	sl
 80104b4:	3001      	adds	r0, #1
 80104b6:	d09b      	beq.n	80103f0 <_printf_i+0x164>
 80104b8:	3501      	adds	r5, #1
 80104ba:	68e3      	ldr	r3, [r4, #12]
 80104bc:	9903      	ldr	r1, [sp, #12]
 80104be:	1a5b      	subs	r3, r3, r1
 80104c0:	42ab      	cmp	r3, r5
 80104c2:	dcf2      	bgt.n	80104aa <_printf_i+0x21e>
 80104c4:	e7eb      	b.n	801049e <_printf_i+0x212>
 80104c6:	2500      	movs	r5, #0
 80104c8:	f104 0619 	add.w	r6, r4, #25
 80104cc:	e7f5      	b.n	80104ba <_printf_i+0x22e>
 80104ce:	bf00      	nop
 80104d0:	08015218 	.word	0x08015218
 80104d4:	08015229 	.word	0x08015229

080104d8 <_scanf_float>:
 80104d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104dc:	b087      	sub	sp, #28
 80104de:	4617      	mov	r7, r2
 80104e0:	9303      	str	r3, [sp, #12]
 80104e2:	688b      	ldr	r3, [r1, #8]
 80104e4:	1e5a      	subs	r2, r3, #1
 80104e6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80104ea:	bf83      	ittte	hi
 80104ec:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80104f0:	195b      	addhi	r3, r3, r5
 80104f2:	9302      	strhi	r3, [sp, #8]
 80104f4:	2300      	movls	r3, #0
 80104f6:	bf86      	itte	hi
 80104f8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80104fc:	608b      	strhi	r3, [r1, #8]
 80104fe:	9302      	strls	r3, [sp, #8]
 8010500:	680b      	ldr	r3, [r1, #0]
 8010502:	468b      	mov	fp, r1
 8010504:	2500      	movs	r5, #0
 8010506:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801050a:	f84b 3b1c 	str.w	r3, [fp], #28
 801050e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010512:	4680      	mov	r8, r0
 8010514:	460c      	mov	r4, r1
 8010516:	465e      	mov	r6, fp
 8010518:	46aa      	mov	sl, r5
 801051a:	46a9      	mov	r9, r5
 801051c:	9501      	str	r5, [sp, #4]
 801051e:	68a2      	ldr	r2, [r4, #8]
 8010520:	b152      	cbz	r2, 8010538 <_scanf_float+0x60>
 8010522:	683b      	ldr	r3, [r7, #0]
 8010524:	781b      	ldrb	r3, [r3, #0]
 8010526:	2b4e      	cmp	r3, #78	; 0x4e
 8010528:	d864      	bhi.n	80105f4 <_scanf_float+0x11c>
 801052a:	2b40      	cmp	r3, #64	; 0x40
 801052c:	d83c      	bhi.n	80105a8 <_scanf_float+0xd0>
 801052e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8010532:	b2c8      	uxtb	r0, r1
 8010534:	280e      	cmp	r0, #14
 8010536:	d93a      	bls.n	80105ae <_scanf_float+0xd6>
 8010538:	f1b9 0f00 	cmp.w	r9, #0
 801053c:	d003      	beq.n	8010546 <_scanf_float+0x6e>
 801053e:	6823      	ldr	r3, [r4, #0]
 8010540:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010544:	6023      	str	r3, [r4, #0]
 8010546:	f10a 3aff 	add.w	sl, sl, #4294967295
 801054a:	f1ba 0f01 	cmp.w	sl, #1
 801054e:	f200 8113 	bhi.w	8010778 <_scanf_float+0x2a0>
 8010552:	455e      	cmp	r6, fp
 8010554:	f200 8105 	bhi.w	8010762 <_scanf_float+0x28a>
 8010558:	2501      	movs	r5, #1
 801055a:	4628      	mov	r0, r5
 801055c:	b007      	add	sp, #28
 801055e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010562:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8010566:	2a0d      	cmp	r2, #13
 8010568:	d8e6      	bhi.n	8010538 <_scanf_float+0x60>
 801056a:	a101      	add	r1, pc, #4	; (adr r1, 8010570 <_scanf_float+0x98>)
 801056c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010570:	080106af 	.word	0x080106af
 8010574:	08010539 	.word	0x08010539
 8010578:	08010539 	.word	0x08010539
 801057c:	08010539 	.word	0x08010539
 8010580:	0801070f 	.word	0x0801070f
 8010584:	080106e7 	.word	0x080106e7
 8010588:	08010539 	.word	0x08010539
 801058c:	08010539 	.word	0x08010539
 8010590:	080106bd 	.word	0x080106bd
 8010594:	08010539 	.word	0x08010539
 8010598:	08010539 	.word	0x08010539
 801059c:	08010539 	.word	0x08010539
 80105a0:	08010539 	.word	0x08010539
 80105a4:	08010675 	.word	0x08010675
 80105a8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80105ac:	e7db      	b.n	8010566 <_scanf_float+0x8e>
 80105ae:	290e      	cmp	r1, #14
 80105b0:	d8c2      	bhi.n	8010538 <_scanf_float+0x60>
 80105b2:	a001      	add	r0, pc, #4	; (adr r0, 80105b8 <_scanf_float+0xe0>)
 80105b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80105b8:	08010667 	.word	0x08010667
 80105bc:	08010539 	.word	0x08010539
 80105c0:	08010667 	.word	0x08010667
 80105c4:	080106fb 	.word	0x080106fb
 80105c8:	08010539 	.word	0x08010539
 80105cc:	08010615 	.word	0x08010615
 80105d0:	08010651 	.word	0x08010651
 80105d4:	08010651 	.word	0x08010651
 80105d8:	08010651 	.word	0x08010651
 80105dc:	08010651 	.word	0x08010651
 80105e0:	08010651 	.word	0x08010651
 80105e4:	08010651 	.word	0x08010651
 80105e8:	08010651 	.word	0x08010651
 80105ec:	08010651 	.word	0x08010651
 80105f0:	08010651 	.word	0x08010651
 80105f4:	2b6e      	cmp	r3, #110	; 0x6e
 80105f6:	d809      	bhi.n	801060c <_scanf_float+0x134>
 80105f8:	2b60      	cmp	r3, #96	; 0x60
 80105fa:	d8b2      	bhi.n	8010562 <_scanf_float+0x8a>
 80105fc:	2b54      	cmp	r3, #84	; 0x54
 80105fe:	d077      	beq.n	80106f0 <_scanf_float+0x218>
 8010600:	2b59      	cmp	r3, #89	; 0x59
 8010602:	d199      	bne.n	8010538 <_scanf_float+0x60>
 8010604:	2d07      	cmp	r5, #7
 8010606:	d197      	bne.n	8010538 <_scanf_float+0x60>
 8010608:	2508      	movs	r5, #8
 801060a:	e029      	b.n	8010660 <_scanf_float+0x188>
 801060c:	2b74      	cmp	r3, #116	; 0x74
 801060e:	d06f      	beq.n	80106f0 <_scanf_float+0x218>
 8010610:	2b79      	cmp	r3, #121	; 0x79
 8010612:	e7f6      	b.n	8010602 <_scanf_float+0x12a>
 8010614:	6821      	ldr	r1, [r4, #0]
 8010616:	05c8      	lsls	r0, r1, #23
 8010618:	d51a      	bpl.n	8010650 <_scanf_float+0x178>
 801061a:	9b02      	ldr	r3, [sp, #8]
 801061c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010620:	6021      	str	r1, [r4, #0]
 8010622:	f109 0901 	add.w	r9, r9, #1
 8010626:	b11b      	cbz	r3, 8010630 <_scanf_float+0x158>
 8010628:	3b01      	subs	r3, #1
 801062a:	3201      	adds	r2, #1
 801062c:	9302      	str	r3, [sp, #8]
 801062e:	60a2      	str	r2, [r4, #8]
 8010630:	68a3      	ldr	r3, [r4, #8]
 8010632:	3b01      	subs	r3, #1
 8010634:	60a3      	str	r3, [r4, #8]
 8010636:	6923      	ldr	r3, [r4, #16]
 8010638:	3301      	adds	r3, #1
 801063a:	6123      	str	r3, [r4, #16]
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	3b01      	subs	r3, #1
 8010640:	2b00      	cmp	r3, #0
 8010642:	607b      	str	r3, [r7, #4]
 8010644:	f340 8084 	ble.w	8010750 <_scanf_float+0x278>
 8010648:	683b      	ldr	r3, [r7, #0]
 801064a:	3301      	adds	r3, #1
 801064c:	603b      	str	r3, [r7, #0]
 801064e:	e766      	b.n	801051e <_scanf_float+0x46>
 8010650:	eb1a 0f05 	cmn.w	sl, r5
 8010654:	f47f af70 	bne.w	8010538 <_scanf_float+0x60>
 8010658:	6822      	ldr	r2, [r4, #0]
 801065a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801065e:	6022      	str	r2, [r4, #0]
 8010660:	f806 3b01 	strb.w	r3, [r6], #1
 8010664:	e7e4      	b.n	8010630 <_scanf_float+0x158>
 8010666:	6822      	ldr	r2, [r4, #0]
 8010668:	0610      	lsls	r0, r2, #24
 801066a:	f57f af65 	bpl.w	8010538 <_scanf_float+0x60>
 801066e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010672:	e7f4      	b.n	801065e <_scanf_float+0x186>
 8010674:	f1ba 0f00 	cmp.w	sl, #0
 8010678:	d10e      	bne.n	8010698 <_scanf_float+0x1c0>
 801067a:	f1b9 0f00 	cmp.w	r9, #0
 801067e:	d10e      	bne.n	801069e <_scanf_float+0x1c6>
 8010680:	6822      	ldr	r2, [r4, #0]
 8010682:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010686:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801068a:	d108      	bne.n	801069e <_scanf_float+0x1c6>
 801068c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010690:	6022      	str	r2, [r4, #0]
 8010692:	f04f 0a01 	mov.w	sl, #1
 8010696:	e7e3      	b.n	8010660 <_scanf_float+0x188>
 8010698:	f1ba 0f02 	cmp.w	sl, #2
 801069c:	d055      	beq.n	801074a <_scanf_float+0x272>
 801069e:	2d01      	cmp	r5, #1
 80106a0:	d002      	beq.n	80106a8 <_scanf_float+0x1d0>
 80106a2:	2d04      	cmp	r5, #4
 80106a4:	f47f af48 	bne.w	8010538 <_scanf_float+0x60>
 80106a8:	3501      	adds	r5, #1
 80106aa:	b2ed      	uxtb	r5, r5
 80106ac:	e7d8      	b.n	8010660 <_scanf_float+0x188>
 80106ae:	f1ba 0f01 	cmp.w	sl, #1
 80106b2:	f47f af41 	bne.w	8010538 <_scanf_float+0x60>
 80106b6:	f04f 0a02 	mov.w	sl, #2
 80106ba:	e7d1      	b.n	8010660 <_scanf_float+0x188>
 80106bc:	b97d      	cbnz	r5, 80106de <_scanf_float+0x206>
 80106be:	f1b9 0f00 	cmp.w	r9, #0
 80106c2:	f47f af3c 	bne.w	801053e <_scanf_float+0x66>
 80106c6:	6822      	ldr	r2, [r4, #0]
 80106c8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80106cc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80106d0:	f47f af39 	bne.w	8010546 <_scanf_float+0x6e>
 80106d4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80106d8:	6022      	str	r2, [r4, #0]
 80106da:	2501      	movs	r5, #1
 80106dc:	e7c0      	b.n	8010660 <_scanf_float+0x188>
 80106de:	2d03      	cmp	r5, #3
 80106e0:	d0e2      	beq.n	80106a8 <_scanf_float+0x1d0>
 80106e2:	2d05      	cmp	r5, #5
 80106e4:	e7de      	b.n	80106a4 <_scanf_float+0x1cc>
 80106e6:	2d02      	cmp	r5, #2
 80106e8:	f47f af26 	bne.w	8010538 <_scanf_float+0x60>
 80106ec:	2503      	movs	r5, #3
 80106ee:	e7b7      	b.n	8010660 <_scanf_float+0x188>
 80106f0:	2d06      	cmp	r5, #6
 80106f2:	f47f af21 	bne.w	8010538 <_scanf_float+0x60>
 80106f6:	2507      	movs	r5, #7
 80106f8:	e7b2      	b.n	8010660 <_scanf_float+0x188>
 80106fa:	6822      	ldr	r2, [r4, #0]
 80106fc:	0591      	lsls	r1, r2, #22
 80106fe:	f57f af1b 	bpl.w	8010538 <_scanf_float+0x60>
 8010702:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8010706:	6022      	str	r2, [r4, #0]
 8010708:	f8cd 9004 	str.w	r9, [sp, #4]
 801070c:	e7a8      	b.n	8010660 <_scanf_float+0x188>
 801070e:	6822      	ldr	r2, [r4, #0]
 8010710:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8010714:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010718:	d006      	beq.n	8010728 <_scanf_float+0x250>
 801071a:	0550      	lsls	r0, r2, #21
 801071c:	f57f af0c 	bpl.w	8010538 <_scanf_float+0x60>
 8010720:	f1b9 0f00 	cmp.w	r9, #0
 8010724:	f43f af0f 	beq.w	8010546 <_scanf_float+0x6e>
 8010728:	0591      	lsls	r1, r2, #22
 801072a:	bf58      	it	pl
 801072c:	9901      	ldrpl	r1, [sp, #4]
 801072e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010732:	bf58      	it	pl
 8010734:	eba9 0101 	subpl.w	r1, r9, r1
 8010738:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801073c:	bf58      	it	pl
 801073e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010742:	6022      	str	r2, [r4, #0]
 8010744:	f04f 0900 	mov.w	r9, #0
 8010748:	e78a      	b.n	8010660 <_scanf_float+0x188>
 801074a:	f04f 0a03 	mov.w	sl, #3
 801074e:	e787      	b.n	8010660 <_scanf_float+0x188>
 8010750:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010754:	4639      	mov	r1, r7
 8010756:	4640      	mov	r0, r8
 8010758:	4798      	blx	r3
 801075a:	2800      	cmp	r0, #0
 801075c:	f43f aedf 	beq.w	801051e <_scanf_float+0x46>
 8010760:	e6ea      	b.n	8010538 <_scanf_float+0x60>
 8010762:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010766:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801076a:	463a      	mov	r2, r7
 801076c:	4640      	mov	r0, r8
 801076e:	4798      	blx	r3
 8010770:	6923      	ldr	r3, [r4, #16]
 8010772:	3b01      	subs	r3, #1
 8010774:	6123      	str	r3, [r4, #16]
 8010776:	e6ec      	b.n	8010552 <_scanf_float+0x7a>
 8010778:	1e6b      	subs	r3, r5, #1
 801077a:	2b06      	cmp	r3, #6
 801077c:	d825      	bhi.n	80107ca <_scanf_float+0x2f2>
 801077e:	2d02      	cmp	r5, #2
 8010780:	d836      	bhi.n	80107f0 <_scanf_float+0x318>
 8010782:	455e      	cmp	r6, fp
 8010784:	f67f aee8 	bls.w	8010558 <_scanf_float+0x80>
 8010788:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801078c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010790:	463a      	mov	r2, r7
 8010792:	4640      	mov	r0, r8
 8010794:	4798      	blx	r3
 8010796:	6923      	ldr	r3, [r4, #16]
 8010798:	3b01      	subs	r3, #1
 801079a:	6123      	str	r3, [r4, #16]
 801079c:	e7f1      	b.n	8010782 <_scanf_float+0x2aa>
 801079e:	9802      	ldr	r0, [sp, #8]
 80107a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80107a4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80107a8:	9002      	str	r0, [sp, #8]
 80107aa:	463a      	mov	r2, r7
 80107ac:	4640      	mov	r0, r8
 80107ae:	4798      	blx	r3
 80107b0:	6923      	ldr	r3, [r4, #16]
 80107b2:	3b01      	subs	r3, #1
 80107b4:	6123      	str	r3, [r4, #16]
 80107b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80107ba:	fa5f fa8a 	uxtb.w	sl, sl
 80107be:	f1ba 0f02 	cmp.w	sl, #2
 80107c2:	d1ec      	bne.n	801079e <_scanf_float+0x2c6>
 80107c4:	3d03      	subs	r5, #3
 80107c6:	b2ed      	uxtb	r5, r5
 80107c8:	1b76      	subs	r6, r6, r5
 80107ca:	6823      	ldr	r3, [r4, #0]
 80107cc:	05da      	lsls	r2, r3, #23
 80107ce:	d52f      	bpl.n	8010830 <_scanf_float+0x358>
 80107d0:	055b      	lsls	r3, r3, #21
 80107d2:	d510      	bpl.n	80107f6 <_scanf_float+0x31e>
 80107d4:	455e      	cmp	r6, fp
 80107d6:	f67f aebf 	bls.w	8010558 <_scanf_float+0x80>
 80107da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80107de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80107e2:	463a      	mov	r2, r7
 80107e4:	4640      	mov	r0, r8
 80107e6:	4798      	blx	r3
 80107e8:	6923      	ldr	r3, [r4, #16]
 80107ea:	3b01      	subs	r3, #1
 80107ec:	6123      	str	r3, [r4, #16]
 80107ee:	e7f1      	b.n	80107d4 <_scanf_float+0x2fc>
 80107f0:	46aa      	mov	sl, r5
 80107f2:	9602      	str	r6, [sp, #8]
 80107f4:	e7df      	b.n	80107b6 <_scanf_float+0x2de>
 80107f6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80107fa:	6923      	ldr	r3, [r4, #16]
 80107fc:	2965      	cmp	r1, #101	; 0x65
 80107fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8010802:	f106 35ff 	add.w	r5, r6, #4294967295
 8010806:	6123      	str	r3, [r4, #16]
 8010808:	d00c      	beq.n	8010824 <_scanf_float+0x34c>
 801080a:	2945      	cmp	r1, #69	; 0x45
 801080c:	d00a      	beq.n	8010824 <_scanf_float+0x34c>
 801080e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010812:	463a      	mov	r2, r7
 8010814:	4640      	mov	r0, r8
 8010816:	4798      	blx	r3
 8010818:	6923      	ldr	r3, [r4, #16]
 801081a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801081e:	3b01      	subs	r3, #1
 8010820:	1eb5      	subs	r5, r6, #2
 8010822:	6123      	str	r3, [r4, #16]
 8010824:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010828:	463a      	mov	r2, r7
 801082a:	4640      	mov	r0, r8
 801082c:	4798      	blx	r3
 801082e:	462e      	mov	r6, r5
 8010830:	6825      	ldr	r5, [r4, #0]
 8010832:	f015 0510 	ands.w	r5, r5, #16
 8010836:	d158      	bne.n	80108ea <_scanf_float+0x412>
 8010838:	7035      	strb	r5, [r6, #0]
 801083a:	6823      	ldr	r3, [r4, #0]
 801083c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010844:	d11c      	bne.n	8010880 <_scanf_float+0x3a8>
 8010846:	9b01      	ldr	r3, [sp, #4]
 8010848:	454b      	cmp	r3, r9
 801084a:	eba3 0209 	sub.w	r2, r3, r9
 801084e:	d124      	bne.n	801089a <_scanf_float+0x3c2>
 8010850:	2200      	movs	r2, #0
 8010852:	4659      	mov	r1, fp
 8010854:	4640      	mov	r0, r8
 8010856:	f000 ff29 	bl	80116ac <_strtod_r>
 801085a:	9b03      	ldr	r3, [sp, #12]
 801085c:	6821      	ldr	r1, [r4, #0]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	f011 0f02 	tst.w	r1, #2
 8010864:	ec57 6b10 	vmov	r6, r7, d0
 8010868:	f103 0204 	add.w	r2, r3, #4
 801086c:	d020      	beq.n	80108b0 <_scanf_float+0x3d8>
 801086e:	9903      	ldr	r1, [sp, #12]
 8010870:	600a      	str	r2, [r1, #0]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	e9c3 6700 	strd	r6, r7, [r3]
 8010878:	68e3      	ldr	r3, [r4, #12]
 801087a:	3301      	adds	r3, #1
 801087c:	60e3      	str	r3, [r4, #12]
 801087e:	e66c      	b.n	801055a <_scanf_float+0x82>
 8010880:	9b04      	ldr	r3, [sp, #16]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d0e4      	beq.n	8010850 <_scanf_float+0x378>
 8010886:	9905      	ldr	r1, [sp, #20]
 8010888:	230a      	movs	r3, #10
 801088a:	462a      	mov	r2, r5
 801088c:	3101      	adds	r1, #1
 801088e:	4640      	mov	r0, r8
 8010890:	f000 ff96 	bl	80117c0 <_strtol_r>
 8010894:	9b04      	ldr	r3, [sp, #16]
 8010896:	9e05      	ldr	r6, [sp, #20]
 8010898:	1ac2      	subs	r2, r0, r3
 801089a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801089e:	429e      	cmp	r6, r3
 80108a0:	bf28      	it	cs
 80108a2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80108a6:	4912      	ldr	r1, [pc, #72]	; (80108f0 <_scanf_float+0x418>)
 80108a8:	4630      	mov	r0, r6
 80108aa:	f000 f82b 	bl	8010904 <siprintf>
 80108ae:	e7cf      	b.n	8010850 <_scanf_float+0x378>
 80108b0:	f011 0f04 	tst.w	r1, #4
 80108b4:	9903      	ldr	r1, [sp, #12]
 80108b6:	600a      	str	r2, [r1, #0]
 80108b8:	d1db      	bne.n	8010872 <_scanf_float+0x39a>
 80108ba:	f8d3 8000 	ldr.w	r8, [r3]
 80108be:	ee10 2a10 	vmov	r2, s0
 80108c2:	ee10 0a10 	vmov	r0, s0
 80108c6:	463b      	mov	r3, r7
 80108c8:	4639      	mov	r1, r7
 80108ca:	f7f0 f93f 	bl	8000b4c <__aeabi_dcmpun>
 80108ce:	b128      	cbz	r0, 80108dc <_scanf_float+0x404>
 80108d0:	4808      	ldr	r0, [pc, #32]	; (80108f4 <_scanf_float+0x41c>)
 80108d2:	f000 f811 	bl	80108f8 <nanf>
 80108d6:	ed88 0a00 	vstr	s0, [r8]
 80108da:	e7cd      	b.n	8010878 <_scanf_float+0x3a0>
 80108dc:	4630      	mov	r0, r6
 80108de:	4639      	mov	r1, r7
 80108e0:	f7f0 f992 	bl	8000c08 <__aeabi_d2f>
 80108e4:	f8c8 0000 	str.w	r0, [r8]
 80108e8:	e7c6      	b.n	8010878 <_scanf_float+0x3a0>
 80108ea:	2500      	movs	r5, #0
 80108ec:	e635      	b.n	801055a <_scanf_float+0x82>
 80108ee:	bf00      	nop
 80108f0:	0801523a 	.word	0x0801523a
 80108f4:	0801556b 	.word	0x0801556b

080108f8 <nanf>:
 80108f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010900 <nanf+0x8>
 80108fc:	4770      	bx	lr
 80108fe:	bf00      	nop
 8010900:	7fc00000 	.word	0x7fc00000

08010904 <siprintf>:
 8010904:	b40e      	push	{r1, r2, r3}
 8010906:	b500      	push	{lr}
 8010908:	b09c      	sub	sp, #112	; 0x70
 801090a:	ab1d      	add	r3, sp, #116	; 0x74
 801090c:	9002      	str	r0, [sp, #8]
 801090e:	9006      	str	r0, [sp, #24]
 8010910:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010914:	4809      	ldr	r0, [pc, #36]	; (801093c <siprintf+0x38>)
 8010916:	9107      	str	r1, [sp, #28]
 8010918:	9104      	str	r1, [sp, #16]
 801091a:	4909      	ldr	r1, [pc, #36]	; (8010940 <siprintf+0x3c>)
 801091c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010920:	9105      	str	r1, [sp, #20]
 8010922:	6800      	ldr	r0, [r0, #0]
 8010924:	9301      	str	r3, [sp, #4]
 8010926:	a902      	add	r1, sp, #8
 8010928:	f002 ffa8 	bl	801387c <_svfiprintf_r>
 801092c:	9b02      	ldr	r3, [sp, #8]
 801092e:	2200      	movs	r2, #0
 8010930:	701a      	strb	r2, [r3, #0]
 8010932:	b01c      	add	sp, #112	; 0x70
 8010934:	f85d eb04 	ldr.w	lr, [sp], #4
 8010938:	b003      	add	sp, #12
 801093a:	4770      	bx	lr
 801093c:	20000198 	.word	0x20000198
 8010940:	ffff0208 	.word	0xffff0208

08010944 <siscanf>:
 8010944:	b40e      	push	{r1, r2, r3}
 8010946:	b510      	push	{r4, lr}
 8010948:	b09f      	sub	sp, #124	; 0x7c
 801094a:	ac21      	add	r4, sp, #132	; 0x84
 801094c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8010950:	f854 2b04 	ldr.w	r2, [r4], #4
 8010954:	9201      	str	r2, [sp, #4]
 8010956:	f8ad 101c 	strh.w	r1, [sp, #28]
 801095a:	9004      	str	r0, [sp, #16]
 801095c:	9008      	str	r0, [sp, #32]
 801095e:	f7ef fc47 	bl	80001f0 <strlen>
 8010962:	4b0c      	ldr	r3, [pc, #48]	; (8010994 <siscanf+0x50>)
 8010964:	9005      	str	r0, [sp, #20]
 8010966:	9009      	str	r0, [sp, #36]	; 0x24
 8010968:	930d      	str	r3, [sp, #52]	; 0x34
 801096a:	480b      	ldr	r0, [pc, #44]	; (8010998 <siscanf+0x54>)
 801096c:	9a01      	ldr	r2, [sp, #4]
 801096e:	6800      	ldr	r0, [r0, #0]
 8010970:	9403      	str	r4, [sp, #12]
 8010972:	2300      	movs	r3, #0
 8010974:	9311      	str	r3, [sp, #68]	; 0x44
 8010976:	9316      	str	r3, [sp, #88]	; 0x58
 8010978:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801097c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8010980:	a904      	add	r1, sp, #16
 8010982:	4623      	mov	r3, r4
 8010984:	f003 f8d4 	bl	8013b30 <__ssvfiscanf_r>
 8010988:	b01f      	add	sp, #124	; 0x7c
 801098a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801098e:	b003      	add	sp, #12
 8010990:	4770      	bx	lr
 8010992:	bf00      	nop
 8010994:	080109bf 	.word	0x080109bf
 8010998:	20000198 	.word	0x20000198

0801099c <__sread>:
 801099c:	b510      	push	{r4, lr}
 801099e:	460c      	mov	r4, r1
 80109a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109a4:	f003 fb88 	bl	80140b8 <_read_r>
 80109a8:	2800      	cmp	r0, #0
 80109aa:	bfab      	itete	ge
 80109ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80109ae:	89a3      	ldrhlt	r3, [r4, #12]
 80109b0:	181b      	addge	r3, r3, r0
 80109b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80109b6:	bfac      	ite	ge
 80109b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80109ba:	81a3      	strhlt	r3, [r4, #12]
 80109bc:	bd10      	pop	{r4, pc}

080109be <__seofread>:
 80109be:	2000      	movs	r0, #0
 80109c0:	4770      	bx	lr

080109c2 <__swrite>:
 80109c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109c6:	461f      	mov	r7, r3
 80109c8:	898b      	ldrh	r3, [r1, #12]
 80109ca:	05db      	lsls	r3, r3, #23
 80109cc:	4605      	mov	r5, r0
 80109ce:	460c      	mov	r4, r1
 80109d0:	4616      	mov	r6, r2
 80109d2:	d505      	bpl.n	80109e0 <__swrite+0x1e>
 80109d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109d8:	2302      	movs	r3, #2
 80109da:	2200      	movs	r2, #0
 80109dc:	f002 f944 	bl	8012c68 <_lseek_r>
 80109e0:	89a3      	ldrh	r3, [r4, #12]
 80109e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80109e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80109ea:	81a3      	strh	r3, [r4, #12]
 80109ec:	4632      	mov	r2, r6
 80109ee:	463b      	mov	r3, r7
 80109f0:	4628      	mov	r0, r5
 80109f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80109f6:	f000 bf29 	b.w	801184c <_write_r>

080109fa <__sseek>:
 80109fa:	b510      	push	{r4, lr}
 80109fc:	460c      	mov	r4, r1
 80109fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a02:	f002 f931 	bl	8012c68 <_lseek_r>
 8010a06:	1c43      	adds	r3, r0, #1
 8010a08:	89a3      	ldrh	r3, [r4, #12]
 8010a0a:	bf15      	itete	ne
 8010a0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8010a0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010a12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010a16:	81a3      	strheq	r3, [r4, #12]
 8010a18:	bf18      	it	ne
 8010a1a:	81a3      	strhne	r3, [r4, #12]
 8010a1c:	bd10      	pop	{r4, pc}

08010a1e <__sclose>:
 8010a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a22:	f000 bf25 	b.w	8011870 <_close_r>

08010a26 <strcpy>:
 8010a26:	4603      	mov	r3, r0
 8010a28:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010a2c:	f803 2b01 	strb.w	r2, [r3], #1
 8010a30:	2a00      	cmp	r2, #0
 8010a32:	d1f9      	bne.n	8010a28 <strcpy+0x2>
 8010a34:	4770      	bx	lr

08010a36 <strncmp>:
 8010a36:	b510      	push	{r4, lr}
 8010a38:	b16a      	cbz	r2, 8010a56 <strncmp+0x20>
 8010a3a:	3901      	subs	r1, #1
 8010a3c:	1884      	adds	r4, r0, r2
 8010a3e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010a42:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010a46:	4293      	cmp	r3, r2
 8010a48:	d103      	bne.n	8010a52 <strncmp+0x1c>
 8010a4a:	42a0      	cmp	r0, r4
 8010a4c:	d001      	beq.n	8010a52 <strncmp+0x1c>
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d1f5      	bne.n	8010a3e <strncmp+0x8>
 8010a52:	1a98      	subs	r0, r3, r2
 8010a54:	bd10      	pop	{r4, pc}
 8010a56:	4610      	mov	r0, r2
 8010a58:	e7fc      	b.n	8010a54 <strncmp+0x1e>

08010a5a <sulp>:
 8010a5a:	b570      	push	{r4, r5, r6, lr}
 8010a5c:	4604      	mov	r4, r0
 8010a5e:	460d      	mov	r5, r1
 8010a60:	ec45 4b10 	vmov	d0, r4, r5
 8010a64:	4616      	mov	r6, r2
 8010a66:	f002 fca5 	bl	80133b4 <__ulp>
 8010a6a:	ec51 0b10 	vmov	r0, r1, d0
 8010a6e:	b17e      	cbz	r6, 8010a90 <sulp+0x36>
 8010a70:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010a74:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	dd09      	ble.n	8010a90 <sulp+0x36>
 8010a7c:	051b      	lsls	r3, r3, #20
 8010a7e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010a82:	2400      	movs	r4, #0
 8010a84:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010a88:	4622      	mov	r2, r4
 8010a8a:	462b      	mov	r3, r5
 8010a8c:	f7ef fdc4 	bl	8000618 <__aeabi_dmul>
 8010a90:	bd70      	pop	{r4, r5, r6, pc}
 8010a92:	0000      	movs	r0, r0
 8010a94:	0000      	movs	r0, r0
	...

08010a98 <_strtod_l>:
 8010a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a9c:	b0a3      	sub	sp, #140	; 0x8c
 8010a9e:	461f      	mov	r7, r3
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	931e      	str	r3, [sp, #120]	; 0x78
 8010aa4:	4ba4      	ldr	r3, [pc, #656]	; (8010d38 <_strtod_l+0x2a0>)
 8010aa6:	9219      	str	r2, [sp, #100]	; 0x64
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	9307      	str	r3, [sp, #28]
 8010aac:	4604      	mov	r4, r0
 8010aae:	4618      	mov	r0, r3
 8010ab0:	4688      	mov	r8, r1
 8010ab2:	f7ef fb9d 	bl	80001f0 <strlen>
 8010ab6:	f04f 0a00 	mov.w	sl, #0
 8010aba:	4605      	mov	r5, r0
 8010abc:	f04f 0b00 	mov.w	fp, #0
 8010ac0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010ac4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010ac6:	781a      	ldrb	r2, [r3, #0]
 8010ac8:	2a2b      	cmp	r2, #43	; 0x2b
 8010aca:	d04c      	beq.n	8010b66 <_strtod_l+0xce>
 8010acc:	d839      	bhi.n	8010b42 <_strtod_l+0xaa>
 8010ace:	2a0d      	cmp	r2, #13
 8010ad0:	d832      	bhi.n	8010b38 <_strtod_l+0xa0>
 8010ad2:	2a08      	cmp	r2, #8
 8010ad4:	d832      	bhi.n	8010b3c <_strtod_l+0xa4>
 8010ad6:	2a00      	cmp	r2, #0
 8010ad8:	d03c      	beq.n	8010b54 <_strtod_l+0xbc>
 8010ada:	2300      	movs	r3, #0
 8010adc:	930e      	str	r3, [sp, #56]	; 0x38
 8010ade:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8010ae0:	7833      	ldrb	r3, [r6, #0]
 8010ae2:	2b30      	cmp	r3, #48	; 0x30
 8010ae4:	f040 80b4 	bne.w	8010c50 <_strtod_l+0x1b8>
 8010ae8:	7873      	ldrb	r3, [r6, #1]
 8010aea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010aee:	2b58      	cmp	r3, #88	; 0x58
 8010af0:	d16c      	bne.n	8010bcc <_strtod_l+0x134>
 8010af2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010af4:	9301      	str	r3, [sp, #4]
 8010af6:	ab1e      	add	r3, sp, #120	; 0x78
 8010af8:	9702      	str	r7, [sp, #8]
 8010afa:	9300      	str	r3, [sp, #0]
 8010afc:	4a8f      	ldr	r2, [pc, #572]	; (8010d3c <_strtod_l+0x2a4>)
 8010afe:	ab1f      	add	r3, sp, #124	; 0x7c
 8010b00:	a91d      	add	r1, sp, #116	; 0x74
 8010b02:	4620      	mov	r0, r4
 8010b04:	f001 fda4 	bl	8012650 <__gethex>
 8010b08:	f010 0707 	ands.w	r7, r0, #7
 8010b0c:	4605      	mov	r5, r0
 8010b0e:	d005      	beq.n	8010b1c <_strtod_l+0x84>
 8010b10:	2f06      	cmp	r7, #6
 8010b12:	d12a      	bne.n	8010b6a <_strtod_l+0xd2>
 8010b14:	3601      	adds	r6, #1
 8010b16:	2300      	movs	r3, #0
 8010b18:	961d      	str	r6, [sp, #116]	; 0x74
 8010b1a:	930e      	str	r3, [sp, #56]	; 0x38
 8010b1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	f040 8596 	bne.w	8011650 <_strtod_l+0xbb8>
 8010b24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010b26:	b1db      	cbz	r3, 8010b60 <_strtod_l+0xc8>
 8010b28:	4652      	mov	r2, sl
 8010b2a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010b2e:	ec43 2b10 	vmov	d0, r2, r3
 8010b32:	b023      	add	sp, #140	; 0x8c
 8010b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b38:	2a20      	cmp	r2, #32
 8010b3a:	d1ce      	bne.n	8010ada <_strtod_l+0x42>
 8010b3c:	3301      	adds	r3, #1
 8010b3e:	931d      	str	r3, [sp, #116]	; 0x74
 8010b40:	e7c0      	b.n	8010ac4 <_strtod_l+0x2c>
 8010b42:	2a2d      	cmp	r2, #45	; 0x2d
 8010b44:	d1c9      	bne.n	8010ada <_strtod_l+0x42>
 8010b46:	2201      	movs	r2, #1
 8010b48:	920e      	str	r2, [sp, #56]	; 0x38
 8010b4a:	1c5a      	adds	r2, r3, #1
 8010b4c:	921d      	str	r2, [sp, #116]	; 0x74
 8010b4e:	785b      	ldrb	r3, [r3, #1]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d1c4      	bne.n	8010ade <_strtod_l+0x46>
 8010b54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010b56:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	f040 8576 	bne.w	801164c <_strtod_l+0xbb4>
 8010b60:	4652      	mov	r2, sl
 8010b62:	465b      	mov	r3, fp
 8010b64:	e7e3      	b.n	8010b2e <_strtod_l+0x96>
 8010b66:	2200      	movs	r2, #0
 8010b68:	e7ee      	b.n	8010b48 <_strtod_l+0xb0>
 8010b6a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010b6c:	b13a      	cbz	r2, 8010b7e <_strtod_l+0xe6>
 8010b6e:	2135      	movs	r1, #53	; 0x35
 8010b70:	a820      	add	r0, sp, #128	; 0x80
 8010b72:	f002 fd2a 	bl	80135ca <__copybits>
 8010b76:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010b78:	4620      	mov	r0, r4
 8010b7a:	f002 f8ef 	bl	8012d5c <_Bfree>
 8010b7e:	3f01      	subs	r7, #1
 8010b80:	2f05      	cmp	r7, #5
 8010b82:	d807      	bhi.n	8010b94 <_strtod_l+0xfc>
 8010b84:	e8df f007 	tbb	[pc, r7]
 8010b88:	1d180b0e 	.word	0x1d180b0e
 8010b8c:	030e      	.short	0x030e
 8010b8e:	f04f 0b00 	mov.w	fp, #0
 8010b92:	46da      	mov	sl, fp
 8010b94:	0728      	lsls	r0, r5, #28
 8010b96:	d5c1      	bpl.n	8010b1c <_strtod_l+0x84>
 8010b98:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8010b9c:	e7be      	b.n	8010b1c <_strtod_l+0x84>
 8010b9e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8010ba2:	e7f7      	b.n	8010b94 <_strtod_l+0xfc>
 8010ba4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8010ba8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010baa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010bae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010bb2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010bb6:	e7ed      	b.n	8010b94 <_strtod_l+0xfc>
 8010bb8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8010d40 <_strtod_l+0x2a8>
 8010bbc:	f04f 0a00 	mov.w	sl, #0
 8010bc0:	e7e8      	b.n	8010b94 <_strtod_l+0xfc>
 8010bc2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8010bc6:	f04f 3aff 	mov.w	sl, #4294967295
 8010bca:	e7e3      	b.n	8010b94 <_strtod_l+0xfc>
 8010bcc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010bce:	1c5a      	adds	r2, r3, #1
 8010bd0:	921d      	str	r2, [sp, #116]	; 0x74
 8010bd2:	785b      	ldrb	r3, [r3, #1]
 8010bd4:	2b30      	cmp	r3, #48	; 0x30
 8010bd6:	d0f9      	beq.n	8010bcc <_strtod_l+0x134>
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d09f      	beq.n	8010b1c <_strtod_l+0x84>
 8010bdc:	2301      	movs	r3, #1
 8010bde:	f04f 0900 	mov.w	r9, #0
 8010be2:	9304      	str	r3, [sp, #16]
 8010be4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010be6:	930a      	str	r3, [sp, #40]	; 0x28
 8010be8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8010bec:	464f      	mov	r7, r9
 8010bee:	220a      	movs	r2, #10
 8010bf0:	981d      	ldr	r0, [sp, #116]	; 0x74
 8010bf2:	7806      	ldrb	r6, [r0, #0]
 8010bf4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8010bf8:	b2d9      	uxtb	r1, r3
 8010bfa:	2909      	cmp	r1, #9
 8010bfc:	d92a      	bls.n	8010c54 <_strtod_l+0x1bc>
 8010bfe:	9907      	ldr	r1, [sp, #28]
 8010c00:	462a      	mov	r2, r5
 8010c02:	f7ff ff18 	bl	8010a36 <strncmp>
 8010c06:	b398      	cbz	r0, 8010c70 <_strtod_l+0x1d8>
 8010c08:	2000      	movs	r0, #0
 8010c0a:	4633      	mov	r3, r6
 8010c0c:	463d      	mov	r5, r7
 8010c0e:	9007      	str	r0, [sp, #28]
 8010c10:	4602      	mov	r2, r0
 8010c12:	2b65      	cmp	r3, #101	; 0x65
 8010c14:	d001      	beq.n	8010c1a <_strtod_l+0x182>
 8010c16:	2b45      	cmp	r3, #69	; 0x45
 8010c18:	d118      	bne.n	8010c4c <_strtod_l+0x1b4>
 8010c1a:	b91d      	cbnz	r5, 8010c24 <_strtod_l+0x18c>
 8010c1c:	9b04      	ldr	r3, [sp, #16]
 8010c1e:	4303      	orrs	r3, r0
 8010c20:	d098      	beq.n	8010b54 <_strtod_l+0xbc>
 8010c22:	2500      	movs	r5, #0
 8010c24:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8010c28:	f108 0301 	add.w	r3, r8, #1
 8010c2c:	931d      	str	r3, [sp, #116]	; 0x74
 8010c2e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010c32:	2b2b      	cmp	r3, #43	; 0x2b
 8010c34:	d075      	beq.n	8010d22 <_strtod_l+0x28a>
 8010c36:	2b2d      	cmp	r3, #45	; 0x2d
 8010c38:	d07b      	beq.n	8010d32 <_strtod_l+0x29a>
 8010c3a:	f04f 0c00 	mov.w	ip, #0
 8010c3e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8010c42:	2909      	cmp	r1, #9
 8010c44:	f240 8082 	bls.w	8010d4c <_strtod_l+0x2b4>
 8010c48:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010c4c:	2600      	movs	r6, #0
 8010c4e:	e09d      	b.n	8010d8c <_strtod_l+0x2f4>
 8010c50:	2300      	movs	r3, #0
 8010c52:	e7c4      	b.n	8010bde <_strtod_l+0x146>
 8010c54:	2f08      	cmp	r7, #8
 8010c56:	bfd8      	it	le
 8010c58:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8010c5a:	f100 0001 	add.w	r0, r0, #1
 8010c5e:	bfda      	itte	le
 8010c60:	fb02 3301 	mlale	r3, r2, r1, r3
 8010c64:	9309      	strle	r3, [sp, #36]	; 0x24
 8010c66:	fb02 3909 	mlagt	r9, r2, r9, r3
 8010c6a:	3701      	adds	r7, #1
 8010c6c:	901d      	str	r0, [sp, #116]	; 0x74
 8010c6e:	e7bf      	b.n	8010bf0 <_strtod_l+0x158>
 8010c70:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010c72:	195a      	adds	r2, r3, r5
 8010c74:	921d      	str	r2, [sp, #116]	; 0x74
 8010c76:	5d5b      	ldrb	r3, [r3, r5]
 8010c78:	2f00      	cmp	r7, #0
 8010c7a:	d037      	beq.n	8010cec <_strtod_l+0x254>
 8010c7c:	9007      	str	r0, [sp, #28]
 8010c7e:	463d      	mov	r5, r7
 8010c80:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8010c84:	2a09      	cmp	r2, #9
 8010c86:	d912      	bls.n	8010cae <_strtod_l+0x216>
 8010c88:	2201      	movs	r2, #1
 8010c8a:	e7c2      	b.n	8010c12 <_strtod_l+0x17a>
 8010c8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010c8e:	1c5a      	adds	r2, r3, #1
 8010c90:	921d      	str	r2, [sp, #116]	; 0x74
 8010c92:	785b      	ldrb	r3, [r3, #1]
 8010c94:	3001      	adds	r0, #1
 8010c96:	2b30      	cmp	r3, #48	; 0x30
 8010c98:	d0f8      	beq.n	8010c8c <_strtod_l+0x1f4>
 8010c9a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8010c9e:	2a08      	cmp	r2, #8
 8010ca0:	f200 84db 	bhi.w	801165a <_strtod_l+0xbc2>
 8010ca4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010ca6:	9007      	str	r0, [sp, #28]
 8010ca8:	2000      	movs	r0, #0
 8010caa:	920a      	str	r2, [sp, #40]	; 0x28
 8010cac:	4605      	mov	r5, r0
 8010cae:	3b30      	subs	r3, #48	; 0x30
 8010cb0:	f100 0201 	add.w	r2, r0, #1
 8010cb4:	d014      	beq.n	8010ce0 <_strtod_l+0x248>
 8010cb6:	9907      	ldr	r1, [sp, #28]
 8010cb8:	4411      	add	r1, r2
 8010cba:	9107      	str	r1, [sp, #28]
 8010cbc:	462a      	mov	r2, r5
 8010cbe:	eb00 0e05 	add.w	lr, r0, r5
 8010cc2:	210a      	movs	r1, #10
 8010cc4:	4572      	cmp	r2, lr
 8010cc6:	d113      	bne.n	8010cf0 <_strtod_l+0x258>
 8010cc8:	182a      	adds	r2, r5, r0
 8010cca:	2a08      	cmp	r2, #8
 8010ccc:	f105 0501 	add.w	r5, r5, #1
 8010cd0:	4405      	add	r5, r0
 8010cd2:	dc1c      	bgt.n	8010d0e <_strtod_l+0x276>
 8010cd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010cd6:	220a      	movs	r2, #10
 8010cd8:	fb02 3301 	mla	r3, r2, r1, r3
 8010cdc:	9309      	str	r3, [sp, #36]	; 0x24
 8010cde:	2200      	movs	r2, #0
 8010ce0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010ce2:	1c59      	adds	r1, r3, #1
 8010ce4:	911d      	str	r1, [sp, #116]	; 0x74
 8010ce6:	785b      	ldrb	r3, [r3, #1]
 8010ce8:	4610      	mov	r0, r2
 8010cea:	e7c9      	b.n	8010c80 <_strtod_l+0x1e8>
 8010cec:	4638      	mov	r0, r7
 8010cee:	e7d2      	b.n	8010c96 <_strtod_l+0x1fe>
 8010cf0:	2a08      	cmp	r2, #8
 8010cf2:	dc04      	bgt.n	8010cfe <_strtod_l+0x266>
 8010cf4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8010cf6:	434e      	muls	r6, r1
 8010cf8:	9609      	str	r6, [sp, #36]	; 0x24
 8010cfa:	3201      	adds	r2, #1
 8010cfc:	e7e2      	b.n	8010cc4 <_strtod_l+0x22c>
 8010cfe:	f102 0c01 	add.w	ip, r2, #1
 8010d02:	f1bc 0f10 	cmp.w	ip, #16
 8010d06:	bfd8      	it	le
 8010d08:	fb01 f909 	mulle.w	r9, r1, r9
 8010d0c:	e7f5      	b.n	8010cfa <_strtod_l+0x262>
 8010d0e:	2d10      	cmp	r5, #16
 8010d10:	bfdc      	itt	le
 8010d12:	220a      	movle	r2, #10
 8010d14:	fb02 3909 	mlale	r9, r2, r9, r3
 8010d18:	e7e1      	b.n	8010cde <_strtod_l+0x246>
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	9307      	str	r3, [sp, #28]
 8010d1e:	2201      	movs	r2, #1
 8010d20:	e77c      	b.n	8010c1c <_strtod_l+0x184>
 8010d22:	f04f 0c00 	mov.w	ip, #0
 8010d26:	f108 0302 	add.w	r3, r8, #2
 8010d2a:	931d      	str	r3, [sp, #116]	; 0x74
 8010d2c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8010d30:	e785      	b.n	8010c3e <_strtod_l+0x1a6>
 8010d32:	f04f 0c01 	mov.w	ip, #1
 8010d36:	e7f6      	b.n	8010d26 <_strtod_l+0x28e>
 8010d38:	08015390 	.word	0x08015390
 8010d3c:	08015240 	.word	0x08015240
 8010d40:	7ff00000 	.word	0x7ff00000
 8010d44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010d46:	1c59      	adds	r1, r3, #1
 8010d48:	911d      	str	r1, [sp, #116]	; 0x74
 8010d4a:	785b      	ldrb	r3, [r3, #1]
 8010d4c:	2b30      	cmp	r3, #48	; 0x30
 8010d4e:	d0f9      	beq.n	8010d44 <_strtod_l+0x2ac>
 8010d50:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8010d54:	2908      	cmp	r1, #8
 8010d56:	f63f af79 	bhi.w	8010c4c <_strtod_l+0x1b4>
 8010d5a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8010d5e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010d60:	9308      	str	r3, [sp, #32]
 8010d62:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010d64:	1c59      	adds	r1, r3, #1
 8010d66:	911d      	str	r1, [sp, #116]	; 0x74
 8010d68:	785b      	ldrb	r3, [r3, #1]
 8010d6a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8010d6e:	2e09      	cmp	r6, #9
 8010d70:	d937      	bls.n	8010de2 <_strtod_l+0x34a>
 8010d72:	9e08      	ldr	r6, [sp, #32]
 8010d74:	1b89      	subs	r1, r1, r6
 8010d76:	2908      	cmp	r1, #8
 8010d78:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8010d7c:	dc02      	bgt.n	8010d84 <_strtod_l+0x2ec>
 8010d7e:	4576      	cmp	r6, lr
 8010d80:	bfa8      	it	ge
 8010d82:	4676      	movge	r6, lr
 8010d84:	f1bc 0f00 	cmp.w	ip, #0
 8010d88:	d000      	beq.n	8010d8c <_strtod_l+0x2f4>
 8010d8a:	4276      	negs	r6, r6
 8010d8c:	2d00      	cmp	r5, #0
 8010d8e:	d14f      	bne.n	8010e30 <_strtod_l+0x398>
 8010d90:	9904      	ldr	r1, [sp, #16]
 8010d92:	4301      	orrs	r1, r0
 8010d94:	f47f aec2 	bne.w	8010b1c <_strtod_l+0x84>
 8010d98:	2a00      	cmp	r2, #0
 8010d9a:	f47f aedb 	bne.w	8010b54 <_strtod_l+0xbc>
 8010d9e:	2b69      	cmp	r3, #105	; 0x69
 8010da0:	d027      	beq.n	8010df2 <_strtod_l+0x35a>
 8010da2:	dc24      	bgt.n	8010dee <_strtod_l+0x356>
 8010da4:	2b49      	cmp	r3, #73	; 0x49
 8010da6:	d024      	beq.n	8010df2 <_strtod_l+0x35a>
 8010da8:	2b4e      	cmp	r3, #78	; 0x4e
 8010daa:	f47f aed3 	bne.w	8010b54 <_strtod_l+0xbc>
 8010dae:	499e      	ldr	r1, [pc, #632]	; (8011028 <_strtod_l+0x590>)
 8010db0:	a81d      	add	r0, sp, #116	; 0x74
 8010db2:	f001 fea5 	bl	8012b00 <__match>
 8010db6:	2800      	cmp	r0, #0
 8010db8:	f43f aecc 	beq.w	8010b54 <_strtod_l+0xbc>
 8010dbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010dbe:	781b      	ldrb	r3, [r3, #0]
 8010dc0:	2b28      	cmp	r3, #40	; 0x28
 8010dc2:	d12d      	bne.n	8010e20 <_strtod_l+0x388>
 8010dc4:	4999      	ldr	r1, [pc, #612]	; (801102c <_strtod_l+0x594>)
 8010dc6:	aa20      	add	r2, sp, #128	; 0x80
 8010dc8:	a81d      	add	r0, sp, #116	; 0x74
 8010dca:	f001 fead 	bl	8012b28 <__hexnan>
 8010dce:	2805      	cmp	r0, #5
 8010dd0:	d126      	bne.n	8010e20 <_strtod_l+0x388>
 8010dd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010dd4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8010dd8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8010ddc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8010de0:	e69c      	b.n	8010b1c <_strtod_l+0x84>
 8010de2:	210a      	movs	r1, #10
 8010de4:	fb01 3e0e 	mla	lr, r1, lr, r3
 8010de8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8010dec:	e7b9      	b.n	8010d62 <_strtod_l+0x2ca>
 8010dee:	2b6e      	cmp	r3, #110	; 0x6e
 8010df0:	e7db      	b.n	8010daa <_strtod_l+0x312>
 8010df2:	498f      	ldr	r1, [pc, #572]	; (8011030 <_strtod_l+0x598>)
 8010df4:	a81d      	add	r0, sp, #116	; 0x74
 8010df6:	f001 fe83 	bl	8012b00 <__match>
 8010dfa:	2800      	cmp	r0, #0
 8010dfc:	f43f aeaa 	beq.w	8010b54 <_strtod_l+0xbc>
 8010e00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010e02:	498c      	ldr	r1, [pc, #560]	; (8011034 <_strtod_l+0x59c>)
 8010e04:	3b01      	subs	r3, #1
 8010e06:	a81d      	add	r0, sp, #116	; 0x74
 8010e08:	931d      	str	r3, [sp, #116]	; 0x74
 8010e0a:	f001 fe79 	bl	8012b00 <__match>
 8010e0e:	b910      	cbnz	r0, 8010e16 <_strtod_l+0x37e>
 8010e10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010e12:	3301      	adds	r3, #1
 8010e14:	931d      	str	r3, [sp, #116]	; 0x74
 8010e16:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8011044 <_strtod_l+0x5ac>
 8010e1a:	f04f 0a00 	mov.w	sl, #0
 8010e1e:	e67d      	b.n	8010b1c <_strtod_l+0x84>
 8010e20:	4885      	ldr	r0, [pc, #532]	; (8011038 <_strtod_l+0x5a0>)
 8010e22:	f003 f95d 	bl	80140e0 <nan>
 8010e26:	ed8d 0b04 	vstr	d0, [sp, #16]
 8010e2a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8010e2e:	e675      	b.n	8010b1c <_strtod_l+0x84>
 8010e30:	9b07      	ldr	r3, [sp, #28]
 8010e32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010e34:	1af3      	subs	r3, r6, r3
 8010e36:	2f00      	cmp	r7, #0
 8010e38:	bf08      	it	eq
 8010e3a:	462f      	moveq	r7, r5
 8010e3c:	2d10      	cmp	r5, #16
 8010e3e:	9308      	str	r3, [sp, #32]
 8010e40:	46a8      	mov	r8, r5
 8010e42:	bfa8      	it	ge
 8010e44:	f04f 0810 	movge.w	r8, #16
 8010e48:	f7ef fb6c 	bl	8000524 <__aeabi_ui2d>
 8010e4c:	2d09      	cmp	r5, #9
 8010e4e:	4682      	mov	sl, r0
 8010e50:	468b      	mov	fp, r1
 8010e52:	dd13      	ble.n	8010e7c <_strtod_l+0x3e4>
 8010e54:	4b79      	ldr	r3, [pc, #484]	; (801103c <_strtod_l+0x5a4>)
 8010e56:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010e5a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010e5e:	f7ef fbdb 	bl	8000618 <__aeabi_dmul>
 8010e62:	4682      	mov	sl, r0
 8010e64:	4648      	mov	r0, r9
 8010e66:	468b      	mov	fp, r1
 8010e68:	f7ef fb5c 	bl	8000524 <__aeabi_ui2d>
 8010e6c:	4602      	mov	r2, r0
 8010e6e:	460b      	mov	r3, r1
 8010e70:	4650      	mov	r0, sl
 8010e72:	4659      	mov	r1, fp
 8010e74:	f7ef fa1a 	bl	80002ac <__adddf3>
 8010e78:	4682      	mov	sl, r0
 8010e7a:	468b      	mov	fp, r1
 8010e7c:	2d0f      	cmp	r5, #15
 8010e7e:	dc38      	bgt.n	8010ef2 <_strtod_l+0x45a>
 8010e80:	9b08      	ldr	r3, [sp, #32]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	f43f ae4a 	beq.w	8010b1c <_strtod_l+0x84>
 8010e88:	dd24      	ble.n	8010ed4 <_strtod_l+0x43c>
 8010e8a:	2b16      	cmp	r3, #22
 8010e8c:	dc0b      	bgt.n	8010ea6 <_strtod_l+0x40e>
 8010e8e:	4d6b      	ldr	r5, [pc, #428]	; (801103c <_strtod_l+0x5a4>)
 8010e90:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8010e94:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010e98:	4652      	mov	r2, sl
 8010e9a:	465b      	mov	r3, fp
 8010e9c:	f7ef fbbc 	bl	8000618 <__aeabi_dmul>
 8010ea0:	4682      	mov	sl, r0
 8010ea2:	468b      	mov	fp, r1
 8010ea4:	e63a      	b.n	8010b1c <_strtod_l+0x84>
 8010ea6:	9a08      	ldr	r2, [sp, #32]
 8010ea8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8010eac:	4293      	cmp	r3, r2
 8010eae:	db20      	blt.n	8010ef2 <_strtod_l+0x45a>
 8010eb0:	4c62      	ldr	r4, [pc, #392]	; (801103c <_strtod_l+0x5a4>)
 8010eb2:	f1c5 050f 	rsb	r5, r5, #15
 8010eb6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010eba:	4652      	mov	r2, sl
 8010ebc:	465b      	mov	r3, fp
 8010ebe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ec2:	f7ef fba9 	bl	8000618 <__aeabi_dmul>
 8010ec6:	9b08      	ldr	r3, [sp, #32]
 8010ec8:	1b5d      	subs	r5, r3, r5
 8010eca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010ece:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010ed2:	e7e3      	b.n	8010e9c <_strtod_l+0x404>
 8010ed4:	9b08      	ldr	r3, [sp, #32]
 8010ed6:	3316      	adds	r3, #22
 8010ed8:	db0b      	blt.n	8010ef2 <_strtod_l+0x45a>
 8010eda:	9b07      	ldr	r3, [sp, #28]
 8010edc:	4a57      	ldr	r2, [pc, #348]	; (801103c <_strtod_l+0x5a4>)
 8010ede:	1b9e      	subs	r6, r3, r6
 8010ee0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8010ee4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010ee8:	4650      	mov	r0, sl
 8010eea:	4659      	mov	r1, fp
 8010eec:	f7ef fcbe 	bl	800086c <__aeabi_ddiv>
 8010ef0:	e7d6      	b.n	8010ea0 <_strtod_l+0x408>
 8010ef2:	9b08      	ldr	r3, [sp, #32]
 8010ef4:	eba5 0808 	sub.w	r8, r5, r8
 8010ef8:	4498      	add	r8, r3
 8010efa:	f1b8 0f00 	cmp.w	r8, #0
 8010efe:	dd71      	ble.n	8010fe4 <_strtod_l+0x54c>
 8010f00:	f018 030f 	ands.w	r3, r8, #15
 8010f04:	d00a      	beq.n	8010f1c <_strtod_l+0x484>
 8010f06:	494d      	ldr	r1, [pc, #308]	; (801103c <_strtod_l+0x5a4>)
 8010f08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010f0c:	4652      	mov	r2, sl
 8010f0e:	465b      	mov	r3, fp
 8010f10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f14:	f7ef fb80 	bl	8000618 <__aeabi_dmul>
 8010f18:	4682      	mov	sl, r0
 8010f1a:	468b      	mov	fp, r1
 8010f1c:	f038 080f 	bics.w	r8, r8, #15
 8010f20:	d04d      	beq.n	8010fbe <_strtod_l+0x526>
 8010f22:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8010f26:	dd22      	ble.n	8010f6e <_strtod_l+0x4d6>
 8010f28:	2500      	movs	r5, #0
 8010f2a:	462e      	mov	r6, r5
 8010f2c:	9509      	str	r5, [sp, #36]	; 0x24
 8010f2e:	9507      	str	r5, [sp, #28]
 8010f30:	2322      	movs	r3, #34	; 0x22
 8010f32:	f8df b110 	ldr.w	fp, [pc, #272]	; 8011044 <_strtod_l+0x5ac>
 8010f36:	6023      	str	r3, [r4, #0]
 8010f38:	f04f 0a00 	mov.w	sl, #0
 8010f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	f43f adec 	beq.w	8010b1c <_strtod_l+0x84>
 8010f44:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010f46:	4620      	mov	r0, r4
 8010f48:	f001 ff08 	bl	8012d5c <_Bfree>
 8010f4c:	9907      	ldr	r1, [sp, #28]
 8010f4e:	4620      	mov	r0, r4
 8010f50:	f001 ff04 	bl	8012d5c <_Bfree>
 8010f54:	4631      	mov	r1, r6
 8010f56:	4620      	mov	r0, r4
 8010f58:	f001 ff00 	bl	8012d5c <_Bfree>
 8010f5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010f5e:	4620      	mov	r0, r4
 8010f60:	f001 fefc 	bl	8012d5c <_Bfree>
 8010f64:	4629      	mov	r1, r5
 8010f66:	4620      	mov	r0, r4
 8010f68:	f001 fef8 	bl	8012d5c <_Bfree>
 8010f6c:	e5d6      	b.n	8010b1c <_strtod_l+0x84>
 8010f6e:	2300      	movs	r3, #0
 8010f70:	ea4f 1828 	mov.w	r8, r8, asr #4
 8010f74:	4650      	mov	r0, sl
 8010f76:	4659      	mov	r1, fp
 8010f78:	4699      	mov	r9, r3
 8010f7a:	f1b8 0f01 	cmp.w	r8, #1
 8010f7e:	dc21      	bgt.n	8010fc4 <_strtod_l+0x52c>
 8010f80:	b10b      	cbz	r3, 8010f86 <_strtod_l+0x4ee>
 8010f82:	4682      	mov	sl, r0
 8010f84:	468b      	mov	fp, r1
 8010f86:	4b2e      	ldr	r3, [pc, #184]	; (8011040 <_strtod_l+0x5a8>)
 8010f88:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8010f8c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8010f90:	4652      	mov	r2, sl
 8010f92:	465b      	mov	r3, fp
 8010f94:	e9d9 0100 	ldrd	r0, r1, [r9]
 8010f98:	f7ef fb3e 	bl	8000618 <__aeabi_dmul>
 8010f9c:	4b29      	ldr	r3, [pc, #164]	; (8011044 <_strtod_l+0x5ac>)
 8010f9e:	460a      	mov	r2, r1
 8010fa0:	400b      	ands	r3, r1
 8010fa2:	4929      	ldr	r1, [pc, #164]	; (8011048 <_strtod_l+0x5b0>)
 8010fa4:	428b      	cmp	r3, r1
 8010fa6:	4682      	mov	sl, r0
 8010fa8:	d8be      	bhi.n	8010f28 <_strtod_l+0x490>
 8010faa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010fae:	428b      	cmp	r3, r1
 8010fb0:	bf86      	itte	hi
 8010fb2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801104c <_strtod_l+0x5b4>
 8010fb6:	f04f 3aff 	movhi.w	sl, #4294967295
 8010fba:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	9304      	str	r3, [sp, #16]
 8010fc2:	e081      	b.n	80110c8 <_strtod_l+0x630>
 8010fc4:	f018 0f01 	tst.w	r8, #1
 8010fc8:	d007      	beq.n	8010fda <_strtod_l+0x542>
 8010fca:	4b1d      	ldr	r3, [pc, #116]	; (8011040 <_strtod_l+0x5a8>)
 8010fcc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8010fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fd4:	f7ef fb20 	bl	8000618 <__aeabi_dmul>
 8010fd8:	2301      	movs	r3, #1
 8010fda:	f109 0901 	add.w	r9, r9, #1
 8010fde:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010fe2:	e7ca      	b.n	8010f7a <_strtod_l+0x4e2>
 8010fe4:	d0eb      	beq.n	8010fbe <_strtod_l+0x526>
 8010fe6:	f1c8 0800 	rsb	r8, r8, #0
 8010fea:	f018 020f 	ands.w	r2, r8, #15
 8010fee:	d00a      	beq.n	8011006 <_strtod_l+0x56e>
 8010ff0:	4b12      	ldr	r3, [pc, #72]	; (801103c <_strtod_l+0x5a4>)
 8010ff2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010ff6:	4650      	mov	r0, sl
 8010ff8:	4659      	mov	r1, fp
 8010ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ffe:	f7ef fc35 	bl	800086c <__aeabi_ddiv>
 8011002:	4682      	mov	sl, r0
 8011004:	468b      	mov	fp, r1
 8011006:	ea5f 1828 	movs.w	r8, r8, asr #4
 801100a:	d0d8      	beq.n	8010fbe <_strtod_l+0x526>
 801100c:	f1b8 0f1f 	cmp.w	r8, #31
 8011010:	dd1e      	ble.n	8011050 <_strtod_l+0x5b8>
 8011012:	2500      	movs	r5, #0
 8011014:	462e      	mov	r6, r5
 8011016:	9509      	str	r5, [sp, #36]	; 0x24
 8011018:	9507      	str	r5, [sp, #28]
 801101a:	2322      	movs	r3, #34	; 0x22
 801101c:	f04f 0a00 	mov.w	sl, #0
 8011020:	f04f 0b00 	mov.w	fp, #0
 8011024:	6023      	str	r3, [r4, #0]
 8011026:	e789      	b.n	8010f3c <_strtod_l+0x4a4>
 8011028:	08015215 	.word	0x08015215
 801102c:	08015254 	.word	0x08015254
 8011030:	0801520d 	.word	0x0801520d
 8011034:	08015293 	.word	0x08015293
 8011038:	0801556b 	.word	0x0801556b
 801103c:	08015430 	.word	0x08015430
 8011040:	08015408 	.word	0x08015408
 8011044:	7ff00000 	.word	0x7ff00000
 8011048:	7ca00000 	.word	0x7ca00000
 801104c:	7fefffff 	.word	0x7fefffff
 8011050:	f018 0310 	ands.w	r3, r8, #16
 8011054:	bf18      	it	ne
 8011056:	236a      	movne	r3, #106	; 0x6a
 8011058:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8011410 <_strtod_l+0x978>
 801105c:	9304      	str	r3, [sp, #16]
 801105e:	4650      	mov	r0, sl
 8011060:	4659      	mov	r1, fp
 8011062:	2300      	movs	r3, #0
 8011064:	f018 0f01 	tst.w	r8, #1
 8011068:	d004      	beq.n	8011074 <_strtod_l+0x5dc>
 801106a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801106e:	f7ef fad3 	bl	8000618 <__aeabi_dmul>
 8011072:	2301      	movs	r3, #1
 8011074:	ea5f 0868 	movs.w	r8, r8, asr #1
 8011078:	f109 0908 	add.w	r9, r9, #8
 801107c:	d1f2      	bne.n	8011064 <_strtod_l+0x5cc>
 801107e:	b10b      	cbz	r3, 8011084 <_strtod_l+0x5ec>
 8011080:	4682      	mov	sl, r0
 8011082:	468b      	mov	fp, r1
 8011084:	9b04      	ldr	r3, [sp, #16]
 8011086:	b1bb      	cbz	r3, 80110b8 <_strtod_l+0x620>
 8011088:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801108c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011090:	2b00      	cmp	r3, #0
 8011092:	4659      	mov	r1, fp
 8011094:	dd10      	ble.n	80110b8 <_strtod_l+0x620>
 8011096:	2b1f      	cmp	r3, #31
 8011098:	f340 8128 	ble.w	80112ec <_strtod_l+0x854>
 801109c:	2b34      	cmp	r3, #52	; 0x34
 801109e:	bfde      	ittt	le
 80110a0:	3b20      	suble	r3, #32
 80110a2:	f04f 32ff 	movle.w	r2, #4294967295
 80110a6:	fa02 f303 	lslle.w	r3, r2, r3
 80110aa:	f04f 0a00 	mov.w	sl, #0
 80110ae:	bfcc      	ite	gt
 80110b0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80110b4:	ea03 0b01 	andle.w	fp, r3, r1
 80110b8:	2200      	movs	r2, #0
 80110ba:	2300      	movs	r3, #0
 80110bc:	4650      	mov	r0, sl
 80110be:	4659      	mov	r1, fp
 80110c0:	f7ef fd12 	bl	8000ae8 <__aeabi_dcmpeq>
 80110c4:	2800      	cmp	r0, #0
 80110c6:	d1a4      	bne.n	8011012 <_strtod_l+0x57a>
 80110c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110ca:	9300      	str	r3, [sp, #0]
 80110cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80110ce:	462b      	mov	r3, r5
 80110d0:	463a      	mov	r2, r7
 80110d2:	4620      	mov	r0, r4
 80110d4:	f001 feae 	bl	8012e34 <__s2b>
 80110d8:	9009      	str	r0, [sp, #36]	; 0x24
 80110da:	2800      	cmp	r0, #0
 80110dc:	f43f af24 	beq.w	8010f28 <_strtod_l+0x490>
 80110e0:	9b07      	ldr	r3, [sp, #28]
 80110e2:	1b9e      	subs	r6, r3, r6
 80110e4:	9b08      	ldr	r3, [sp, #32]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	bfb4      	ite	lt
 80110ea:	4633      	movlt	r3, r6
 80110ec:	2300      	movge	r3, #0
 80110ee:	9310      	str	r3, [sp, #64]	; 0x40
 80110f0:	9b08      	ldr	r3, [sp, #32]
 80110f2:	2500      	movs	r5, #0
 80110f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80110f8:	9318      	str	r3, [sp, #96]	; 0x60
 80110fa:	462e      	mov	r6, r5
 80110fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110fe:	4620      	mov	r0, r4
 8011100:	6859      	ldr	r1, [r3, #4]
 8011102:	f001 fdeb 	bl	8012cdc <_Balloc>
 8011106:	9007      	str	r0, [sp, #28]
 8011108:	2800      	cmp	r0, #0
 801110a:	f43f af11 	beq.w	8010f30 <_strtod_l+0x498>
 801110e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011110:	691a      	ldr	r2, [r3, #16]
 8011112:	3202      	adds	r2, #2
 8011114:	f103 010c 	add.w	r1, r3, #12
 8011118:	0092      	lsls	r2, r2, #2
 801111a:	300c      	adds	r0, #12
 801111c:	f001 fdd0 	bl	8012cc0 <memcpy>
 8011120:	ec4b ab10 	vmov	d0, sl, fp
 8011124:	aa20      	add	r2, sp, #128	; 0x80
 8011126:	a91f      	add	r1, sp, #124	; 0x7c
 8011128:	4620      	mov	r0, r4
 801112a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801112e:	f002 f9bd 	bl	80134ac <__d2b>
 8011132:	901e      	str	r0, [sp, #120]	; 0x78
 8011134:	2800      	cmp	r0, #0
 8011136:	f43f aefb 	beq.w	8010f30 <_strtod_l+0x498>
 801113a:	2101      	movs	r1, #1
 801113c:	4620      	mov	r0, r4
 801113e:	f001 ff13 	bl	8012f68 <__i2b>
 8011142:	4606      	mov	r6, r0
 8011144:	2800      	cmp	r0, #0
 8011146:	f43f aef3 	beq.w	8010f30 <_strtod_l+0x498>
 801114a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801114c:	9904      	ldr	r1, [sp, #16]
 801114e:	2b00      	cmp	r3, #0
 8011150:	bfab      	itete	ge
 8011152:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8011154:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8011156:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8011158:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801115c:	bfac      	ite	ge
 801115e:	eb03 0902 	addge.w	r9, r3, r2
 8011162:	1ad7      	sublt	r7, r2, r3
 8011164:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011166:	eba3 0801 	sub.w	r8, r3, r1
 801116a:	4490      	add	r8, r2
 801116c:	4ba3      	ldr	r3, [pc, #652]	; (80113fc <_strtod_l+0x964>)
 801116e:	f108 38ff 	add.w	r8, r8, #4294967295
 8011172:	4598      	cmp	r8, r3
 8011174:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011178:	f280 80cc 	bge.w	8011314 <_strtod_l+0x87c>
 801117c:	eba3 0308 	sub.w	r3, r3, r8
 8011180:	2b1f      	cmp	r3, #31
 8011182:	eba2 0203 	sub.w	r2, r2, r3
 8011186:	f04f 0101 	mov.w	r1, #1
 801118a:	f300 80b6 	bgt.w	80112fa <_strtod_l+0x862>
 801118e:	fa01 f303 	lsl.w	r3, r1, r3
 8011192:	9311      	str	r3, [sp, #68]	; 0x44
 8011194:	2300      	movs	r3, #0
 8011196:	930c      	str	r3, [sp, #48]	; 0x30
 8011198:	eb09 0802 	add.w	r8, r9, r2
 801119c:	9b04      	ldr	r3, [sp, #16]
 801119e:	45c1      	cmp	r9, r8
 80111a0:	4417      	add	r7, r2
 80111a2:	441f      	add	r7, r3
 80111a4:	464b      	mov	r3, r9
 80111a6:	bfa8      	it	ge
 80111a8:	4643      	movge	r3, r8
 80111aa:	42bb      	cmp	r3, r7
 80111ac:	bfa8      	it	ge
 80111ae:	463b      	movge	r3, r7
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	bfc2      	ittt	gt
 80111b4:	eba8 0803 	subgt.w	r8, r8, r3
 80111b8:	1aff      	subgt	r7, r7, r3
 80111ba:	eba9 0903 	subgt.w	r9, r9, r3
 80111be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	dd17      	ble.n	80111f4 <_strtod_l+0x75c>
 80111c4:	4631      	mov	r1, r6
 80111c6:	461a      	mov	r2, r3
 80111c8:	4620      	mov	r0, r4
 80111ca:	f001 ff89 	bl	80130e0 <__pow5mult>
 80111ce:	4606      	mov	r6, r0
 80111d0:	2800      	cmp	r0, #0
 80111d2:	f43f aead 	beq.w	8010f30 <_strtod_l+0x498>
 80111d6:	4601      	mov	r1, r0
 80111d8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80111da:	4620      	mov	r0, r4
 80111dc:	f001 feda 	bl	8012f94 <__multiply>
 80111e0:	900f      	str	r0, [sp, #60]	; 0x3c
 80111e2:	2800      	cmp	r0, #0
 80111e4:	f43f aea4 	beq.w	8010f30 <_strtod_l+0x498>
 80111e8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80111ea:	4620      	mov	r0, r4
 80111ec:	f001 fdb6 	bl	8012d5c <_Bfree>
 80111f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80111f2:	931e      	str	r3, [sp, #120]	; 0x78
 80111f4:	f1b8 0f00 	cmp.w	r8, #0
 80111f8:	f300 8091 	bgt.w	801131e <_strtod_l+0x886>
 80111fc:	9b08      	ldr	r3, [sp, #32]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	dd08      	ble.n	8011214 <_strtod_l+0x77c>
 8011202:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011204:	9907      	ldr	r1, [sp, #28]
 8011206:	4620      	mov	r0, r4
 8011208:	f001 ff6a 	bl	80130e0 <__pow5mult>
 801120c:	9007      	str	r0, [sp, #28]
 801120e:	2800      	cmp	r0, #0
 8011210:	f43f ae8e 	beq.w	8010f30 <_strtod_l+0x498>
 8011214:	2f00      	cmp	r7, #0
 8011216:	dd08      	ble.n	801122a <_strtod_l+0x792>
 8011218:	9907      	ldr	r1, [sp, #28]
 801121a:	463a      	mov	r2, r7
 801121c:	4620      	mov	r0, r4
 801121e:	f001 ffb9 	bl	8013194 <__lshift>
 8011222:	9007      	str	r0, [sp, #28]
 8011224:	2800      	cmp	r0, #0
 8011226:	f43f ae83 	beq.w	8010f30 <_strtod_l+0x498>
 801122a:	f1b9 0f00 	cmp.w	r9, #0
 801122e:	dd08      	ble.n	8011242 <_strtod_l+0x7aa>
 8011230:	4631      	mov	r1, r6
 8011232:	464a      	mov	r2, r9
 8011234:	4620      	mov	r0, r4
 8011236:	f001 ffad 	bl	8013194 <__lshift>
 801123a:	4606      	mov	r6, r0
 801123c:	2800      	cmp	r0, #0
 801123e:	f43f ae77 	beq.w	8010f30 <_strtod_l+0x498>
 8011242:	9a07      	ldr	r2, [sp, #28]
 8011244:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011246:	4620      	mov	r0, r4
 8011248:	f002 f82c 	bl	80132a4 <__mdiff>
 801124c:	4605      	mov	r5, r0
 801124e:	2800      	cmp	r0, #0
 8011250:	f43f ae6e 	beq.w	8010f30 <_strtod_l+0x498>
 8011254:	68c3      	ldr	r3, [r0, #12]
 8011256:	930f      	str	r3, [sp, #60]	; 0x3c
 8011258:	2300      	movs	r3, #0
 801125a:	60c3      	str	r3, [r0, #12]
 801125c:	4631      	mov	r1, r6
 801125e:	f002 f805 	bl	801326c <__mcmp>
 8011262:	2800      	cmp	r0, #0
 8011264:	da65      	bge.n	8011332 <_strtod_l+0x89a>
 8011266:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011268:	ea53 030a 	orrs.w	r3, r3, sl
 801126c:	f040 8087 	bne.w	801137e <_strtod_l+0x8e6>
 8011270:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011274:	2b00      	cmp	r3, #0
 8011276:	f040 8082 	bne.w	801137e <_strtod_l+0x8e6>
 801127a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801127e:	0d1b      	lsrs	r3, r3, #20
 8011280:	051b      	lsls	r3, r3, #20
 8011282:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011286:	d97a      	bls.n	801137e <_strtod_l+0x8e6>
 8011288:	696b      	ldr	r3, [r5, #20]
 801128a:	b913      	cbnz	r3, 8011292 <_strtod_l+0x7fa>
 801128c:	692b      	ldr	r3, [r5, #16]
 801128e:	2b01      	cmp	r3, #1
 8011290:	dd75      	ble.n	801137e <_strtod_l+0x8e6>
 8011292:	4629      	mov	r1, r5
 8011294:	2201      	movs	r2, #1
 8011296:	4620      	mov	r0, r4
 8011298:	f001 ff7c 	bl	8013194 <__lshift>
 801129c:	4631      	mov	r1, r6
 801129e:	4605      	mov	r5, r0
 80112a0:	f001 ffe4 	bl	801326c <__mcmp>
 80112a4:	2800      	cmp	r0, #0
 80112a6:	dd6a      	ble.n	801137e <_strtod_l+0x8e6>
 80112a8:	9904      	ldr	r1, [sp, #16]
 80112aa:	4a55      	ldr	r2, [pc, #340]	; (8011400 <_strtod_l+0x968>)
 80112ac:	465b      	mov	r3, fp
 80112ae:	2900      	cmp	r1, #0
 80112b0:	f000 8085 	beq.w	80113be <_strtod_l+0x926>
 80112b4:	ea02 010b 	and.w	r1, r2, fp
 80112b8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80112bc:	dc7f      	bgt.n	80113be <_strtod_l+0x926>
 80112be:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80112c2:	f77f aeaa 	ble.w	801101a <_strtod_l+0x582>
 80112c6:	4a4f      	ldr	r2, [pc, #316]	; (8011404 <_strtod_l+0x96c>)
 80112c8:	2300      	movs	r3, #0
 80112ca:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80112ce:	4650      	mov	r0, sl
 80112d0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80112d4:	4659      	mov	r1, fp
 80112d6:	f7ef f99f 	bl	8000618 <__aeabi_dmul>
 80112da:	460b      	mov	r3, r1
 80112dc:	4303      	orrs	r3, r0
 80112de:	bf08      	it	eq
 80112e0:	2322      	moveq	r3, #34	; 0x22
 80112e2:	4682      	mov	sl, r0
 80112e4:	468b      	mov	fp, r1
 80112e6:	bf08      	it	eq
 80112e8:	6023      	streq	r3, [r4, #0]
 80112ea:	e62b      	b.n	8010f44 <_strtod_l+0x4ac>
 80112ec:	f04f 32ff 	mov.w	r2, #4294967295
 80112f0:	fa02 f303 	lsl.w	r3, r2, r3
 80112f4:	ea03 0a0a 	and.w	sl, r3, sl
 80112f8:	e6de      	b.n	80110b8 <_strtod_l+0x620>
 80112fa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80112fe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8011302:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8011306:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801130a:	fa01 f308 	lsl.w	r3, r1, r8
 801130e:	930c      	str	r3, [sp, #48]	; 0x30
 8011310:	9111      	str	r1, [sp, #68]	; 0x44
 8011312:	e741      	b.n	8011198 <_strtod_l+0x700>
 8011314:	2300      	movs	r3, #0
 8011316:	930c      	str	r3, [sp, #48]	; 0x30
 8011318:	2301      	movs	r3, #1
 801131a:	9311      	str	r3, [sp, #68]	; 0x44
 801131c:	e73c      	b.n	8011198 <_strtod_l+0x700>
 801131e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011320:	4642      	mov	r2, r8
 8011322:	4620      	mov	r0, r4
 8011324:	f001 ff36 	bl	8013194 <__lshift>
 8011328:	901e      	str	r0, [sp, #120]	; 0x78
 801132a:	2800      	cmp	r0, #0
 801132c:	f47f af66 	bne.w	80111fc <_strtod_l+0x764>
 8011330:	e5fe      	b.n	8010f30 <_strtod_l+0x498>
 8011332:	465f      	mov	r7, fp
 8011334:	d16e      	bne.n	8011414 <_strtod_l+0x97c>
 8011336:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011338:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801133c:	b342      	cbz	r2, 8011390 <_strtod_l+0x8f8>
 801133e:	4a32      	ldr	r2, [pc, #200]	; (8011408 <_strtod_l+0x970>)
 8011340:	4293      	cmp	r3, r2
 8011342:	d128      	bne.n	8011396 <_strtod_l+0x8fe>
 8011344:	9b04      	ldr	r3, [sp, #16]
 8011346:	4650      	mov	r0, sl
 8011348:	b1eb      	cbz	r3, 8011386 <_strtod_l+0x8ee>
 801134a:	4a2d      	ldr	r2, [pc, #180]	; (8011400 <_strtod_l+0x968>)
 801134c:	403a      	ands	r2, r7
 801134e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8011352:	f04f 31ff 	mov.w	r1, #4294967295
 8011356:	d819      	bhi.n	801138c <_strtod_l+0x8f4>
 8011358:	0d12      	lsrs	r2, r2, #20
 801135a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801135e:	fa01 f303 	lsl.w	r3, r1, r3
 8011362:	4298      	cmp	r0, r3
 8011364:	d117      	bne.n	8011396 <_strtod_l+0x8fe>
 8011366:	4b29      	ldr	r3, [pc, #164]	; (801140c <_strtod_l+0x974>)
 8011368:	429f      	cmp	r7, r3
 801136a:	d102      	bne.n	8011372 <_strtod_l+0x8da>
 801136c:	3001      	adds	r0, #1
 801136e:	f43f addf 	beq.w	8010f30 <_strtod_l+0x498>
 8011372:	4b23      	ldr	r3, [pc, #140]	; (8011400 <_strtod_l+0x968>)
 8011374:	403b      	ands	r3, r7
 8011376:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801137a:	f04f 0a00 	mov.w	sl, #0
 801137e:	9b04      	ldr	r3, [sp, #16]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d1a0      	bne.n	80112c6 <_strtod_l+0x82e>
 8011384:	e5de      	b.n	8010f44 <_strtod_l+0x4ac>
 8011386:	f04f 33ff 	mov.w	r3, #4294967295
 801138a:	e7ea      	b.n	8011362 <_strtod_l+0x8ca>
 801138c:	460b      	mov	r3, r1
 801138e:	e7e8      	b.n	8011362 <_strtod_l+0x8ca>
 8011390:	ea53 030a 	orrs.w	r3, r3, sl
 8011394:	d088      	beq.n	80112a8 <_strtod_l+0x810>
 8011396:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011398:	b1db      	cbz	r3, 80113d2 <_strtod_l+0x93a>
 801139a:	423b      	tst	r3, r7
 801139c:	d0ef      	beq.n	801137e <_strtod_l+0x8e6>
 801139e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80113a0:	9a04      	ldr	r2, [sp, #16]
 80113a2:	4650      	mov	r0, sl
 80113a4:	4659      	mov	r1, fp
 80113a6:	b1c3      	cbz	r3, 80113da <_strtod_l+0x942>
 80113a8:	f7ff fb57 	bl	8010a5a <sulp>
 80113ac:	4602      	mov	r2, r0
 80113ae:	460b      	mov	r3, r1
 80113b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80113b4:	f7ee ff7a 	bl	80002ac <__adddf3>
 80113b8:	4682      	mov	sl, r0
 80113ba:	468b      	mov	fp, r1
 80113bc:	e7df      	b.n	801137e <_strtod_l+0x8e6>
 80113be:	4013      	ands	r3, r2
 80113c0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80113c4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80113c8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80113cc:	f04f 3aff 	mov.w	sl, #4294967295
 80113d0:	e7d5      	b.n	801137e <_strtod_l+0x8e6>
 80113d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80113d4:	ea13 0f0a 	tst.w	r3, sl
 80113d8:	e7e0      	b.n	801139c <_strtod_l+0x904>
 80113da:	f7ff fb3e 	bl	8010a5a <sulp>
 80113de:	4602      	mov	r2, r0
 80113e0:	460b      	mov	r3, r1
 80113e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80113e6:	f7ee ff5f 	bl	80002a8 <__aeabi_dsub>
 80113ea:	2200      	movs	r2, #0
 80113ec:	2300      	movs	r3, #0
 80113ee:	4682      	mov	sl, r0
 80113f0:	468b      	mov	fp, r1
 80113f2:	f7ef fb79 	bl	8000ae8 <__aeabi_dcmpeq>
 80113f6:	2800      	cmp	r0, #0
 80113f8:	d0c1      	beq.n	801137e <_strtod_l+0x8e6>
 80113fa:	e60e      	b.n	801101a <_strtod_l+0x582>
 80113fc:	fffffc02 	.word	0xfffffc02
 8011400:	7ff00000 	.word	0x7ff00000
 8011404:	39500000 	.word	0x39500000
 8011408:	000fffff 	.word	0x000fffff
 801140c:	7fefffff 	.word	0x7fefffff
 8011410:	08015268 	.word	0x08015268
 8011414:	4631      	mov	r1, r6
 8011416:	4628      	mov	r0, r5
 8011418:	f002 f8a4 	bl	8013564 <__ratio>
 801141c:	ec59 8b10 	vmov	r8, r9, d0
 8011420:	ee10 0a10 	vmov	r0, s0
 8011424:	2200      	movs	r2, #0
 8011426:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801142a:	4649      	mov	r1, r9
 801142c:	f7ef fb70 	bl	8000b10 <__aeabi_dcmple>
 8011430:	2800      	cmp	r0, #0
 8011432:	d07c      	beq.n	801152e <_strtod_l+0xa96>
 8011434:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011436:	2b00      	cmp	r3, #0
 8011438:	d04c      	beq.n	80114d4 <_strtod_l+0xa3c>
 801143a:	4b95      	ldr	r3, [pc, #596]	; (8011690 <_strtod_l+0xbf8>)
 801143c:	2200      	movs	r2, #0
 801143e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011442:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8011690 <_strtod_l+0xbf8>
 8011446:	f04f 0800 	mov.w	r8, #0
 801144a:	4b92      	ldr	r3, [pc, #584]	; (8011694 <_strtod_l+0xbfc>)
 801144c:	403b      	ands	r3, r7
 801144e:	9311      	str	r3, [sp, #68]	; 0x44
 8011450:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011452:	4b91      	ldr	r3, [pc, #580]	; (8011698 <_strtod_l+0xc00>)
 8011454:	429a      	cmp	r2, r3
 8011456:	f040 80b2 	bne.w	80115be <_strtod_l+0xb26>
 801145a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801145e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011462:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8011466:	ec4b ab10 	vmov	d0, sl, fp
 801146a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801146e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011472:	f001 ff9f 	bl	80133b4 <__ulp>
 8011476:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801147a:	ec53 2b10 	vmov	r2, r3, d0
 801147e:	f7ef f8cb 	bl	8000618 <__aeabi_dmul>
 8011482:	4652      	mov	r2, sl
 8011484:	465b      	mov	r3, fp
 8011486:	f7ee ff11 	bl	80002ac <__adddf3>
 801148a:	460b      	mov	r3, r1
 801148c:	4981      	ldr	r1, [pc, #516]	; (8011694 <_strtod_l+0xbfc>)
 801148e:	4a83      	ldr	r2, [pc, #524]	; (801169c <_strtod_l+0xc04>)
 8011490:	4019      	ands	r1, r3
 8011492:	4291      	cmp	r1, r2
 8011494:	4682      	mov	sl, r0
 8011496:	d95e      	bls.n	8011556 <_strtod_l+0xabe>
 8011498:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801149a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801149e:	4293      	cmp	r3, r2
 80114a0:	d103      	bne.n	80114aa <_strtod_l+0xa12>
 80114a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80114a4:	3301      	adds	r3, #1
 80114a6:	f43f ad43 	beq.w	8010f30 <_strtod_l+0x498>
 80114aa:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80116a8 <_strtod_l+0xc10>
 80114ae:	f04f 3aff 	mov.w	sl, #4294967295
 80114b2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80114b4:	4620      	mov	r0, r4
 80114b6:	f001 fc51 	bl	8012d5c <_Bfree>
 80114ba:	9907      	ldr	r1, [sp, #28]
 80114bc:	4620      	mov	r0, r4
 80114be:	f001 fc4d 	bl	8012d5c <_Bfree>
 80114c2:	4631      	mov	r1, r6
 80114c4:	4620      	mov	r0, r4
 80114c6:	f001 fc49 	bl	8012d5c <_Bfree>
 80114ca:	4629      	mov	r1, r5
 80114cc:	4620      	mov	r0, r4
 80114ce:	f001 fc45 	bl	8012d5c <_Bfree>
 80114d2:	e613      	b.n	80110fc <_strtod_l+0x664>
 80114d4:	f1ba 0f00 	cmp.w	sl, #0
 80114d8:	d11b      	bne.n	8011512 <_strtod_l+0xa7a>
 80114da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80114de:	b9f3      	cbnz	r3, 801151e <_strtod_l+0xa86>
 80114e0:	4b6b      	ldr	r3, [pc, #428]	; (8011690 <_strtod_l+0xbf8>)
 80114e2:	2200      	movs	r2, #0
 80114e4:	4640      	mov	r0, r8
 80114e6:	4649      	mov	r1, r9
 80114e8:	f7ef fb08 	bl	8000afc <__aeabi_dcmplt>
 80114ec:	b9d0      	cbnz	r0, 8011524 <_strtod_l+0xa8c>
 80114ee:	4640      	mov	r0, r8
 80114f0:	4649      	mov	r1, r9
 80114f2:	4b6b      	ldr	r3, [pc, #428]	; (80116a0 <_strtod_l+0xc08>)
 80114f4:	2200      	movs	r2, #0
 80114f6:	f7ef f88f 	bl	8000618 <__aeabi_dmul>
 80114fa:	4680      	mov	r8, r0
 80114fc:	4689      	mov	r9, r1
 80114fe:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011502:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8011506:	931b      	str	r3, [sp, #108]	; 0x6c
 8011508:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801150c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011510:	e79b      	b.n	801144a <_strtod_l+0x9b2>
 8011512:	f1ba 0f01 	cmp.w	sl, #1
 8011516:	d102      	bne.n	801151e <_strtod_l+0xa86>
 8011518:	2f00      	cmp	r7, #0
 801151a:	f43f ad7e 	beq.w	801101a <_strtod_l+0x582>
 801151e:	4b61      	ldr	r3, [pc, #388]	; (80116a4 <_strtod_l+0xc0c>)
 8011520:	2200      	movs	r2, #0
 8011522:	e78c      	b.n	801143e <_strtod_l+0x9a6>
 8011524:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80116a0 <_strtod_l+0xc08>
 8011528:	f04f 0800 	mov.w	r8, #0
 801152c:	e7e7      	b.n	80114fe <_strtod_l+0xa66>
 801152e:	4b5c      	ldr	r3, [pc, #368]	; (80116a0 <_strtod_l+0xc08>)
 8011530:	4640      	mov	r0, r8
 8011532:	4649      	mov	r1, r9
 8011534:	2200      	movs	r2, #0
 8011536:	f7ef f86f 	bl	8000618 <__aeabi_dmul>
 801153a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801153c:	4680      	mov	r8, r0
 801153e:	4689      	mov	r9, r1
 8011540:	b933      	cbnz	r3, 8011550 <_strtod_l+0xab8>
 8011542:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011546:	9012      	str	r0, [sp, #72]	; 0x48
 8011548:	9313      	str	r3, [sp, #76]	; 0x4c
 801154a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801154e:	e7dd      	b.n	801150c <_strtod_l+0xa74>
 8011550:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8011554:	e7f9      	b.n	801154a <_strtod_l+0xab2>
 8011556:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801155a:	9b04      	ldr	r3, [sp, #16]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d1a8      	bne.n	80114b2 <_strtod_l+0xa1a>
 8011560:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011564:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011566:	0d1b      	lsrs	r3, r3, #20
 8011568:	051b      	lsls	r3, r3, #20
 801156a:	429a      	cmp	r2, r3
 801156c:	d1a1      	bne.n	80114b2 <_strtod_l+0xa1a>
 801156e:	4640      	mov	r0, r8
 8011570:	4649      	mov	r1, r9
 8011572:	f7ef fbb1 	bl	8000cd8 <__aeabi_d2lz>
 8011576:	f7ef f821 	bl	80005bc <__aeabi_l2d>
 801157a:	4602      	mov	r2, r0
 801157c:	460b      	mov	r3, r1
 801157e:	4640      	mov	r0, r8
 8011580:	4649      	mov	r1, r9
 8011582:	f7ee fe91 	bl	80002a8 <__aeabi_dsub>
 8011586:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011588:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801158c:	ea43 030a 	orr.w	r3, r3, sl
 8011590:	4313      	orrs	r3, r2
 8011592:	4680      	mov	r8, r0
 8011594:	4689      	mov	r9, r1
 8011596:	d053      	beq.n	8011640 <_strtod_l+0xba8>
 8011598:	a335      	add	r3, pc, #212	; (adr r3, 8011670 <_strtod_l+0xbd8>)
 801159a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801159e:	f7ef faad 	bl	8000afc <__aeabi_dcmplt>
 80115a2:	2800      	cmp	r0, #0
 80115a4:	f47f acce 	bne.w	8010f44 <_strtod_l+0x4ac>
 80115a8:	a333      	add	r3, pc, #204	; (adr r3, 8011678 <_strtod_l+0xbe0>)
 80115aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115ae:	4640      	mov	r0, r8
 80115b0:	4649      	mov	r1, r9
 80115b2:	f7ef fac1 	bl	8000b38 <__aeabi_dcmpgt>
 80115b6:	2800      	cmp	r0, #0
 80115b8:	f43f af7b 	beq.w	80114b2 <_strtod_l+0xa1a>
 80115bc:	e4c2      	b.n	8010f44 <_strtod_l+0x4ac>
 80115be:	9b04      	ldr	r3, [sp, #16]
 80115c0:	b333      	cbz	r3, 8011610 <_strtod_l+0xb78>
 80115c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80115c4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80115c8:	d822      	bhi.n	8011610 <_strtod_l+0xb78>
 80115ca:	a32d      	add	r3, pc, #180	; (adr r3, 8011680 <_strtod_l+0xbe8>)
 80115cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115d0:	4640      	mov	r0, r8
 80115d2:	4649      	mov	r1, r9
 80115d4:	f7ef fa9c 	bl	8000b10 <__aeabi_dcmple>
 80115d8:	b1a0      	cbz	r0, 8011604 <_strtod_l+0xb6c>
 80115da:	4649      	mov	r1, r9
 80115dc:	4640      	mov	r0, r8
 80115de:	f7ef faf3 	bl	8000bc8 <__aeabi_d2uiz>
 80115e2:	2801      	cmp	r0, #1
 80115e4:	bf38      	it	cc
 80115e6:	2001      	movcc	r0, #1
 80115e8:	f7ee ff9c 	bl	8000524 <__aeabi_ui2d>
 80115ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80115ee:	4680      	mov	r8, r0
 80115f0:	4689      	mov	r9, r1
 80115f2:	bb13      	cbnz	r3, 801163a <_strtod_l+0xba2>
 80115f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80115f8:	9014      	str	r0, [sp, #80]	; 0x50
 80115fa:	9315      	str	r3, [sp, #84]	; 0x54
 80115fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011600:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011604:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011606:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011608:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801160c:	1a9b      	subs	r3, r3, r2
 801160e:	930d      	str	r3, [sp, #52]	; 0x34
 8011610:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011614:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011618:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801161c:	f001 feca 	bl	80133b4 <__ulp>
 8011620:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011624:	ec53 2b10 	vmov	r2, r3, d0
 8011628:	f7ee fff6 	bl	8000618 <__aeabi_dmul>
 801162c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011630:	f7ee fe3c 	bl	80002ac <__adddf3>
 8011634:	4682      	mov	sl, r0
 8011636:	468b      	mov	fp, r1
 8011638:	e78f      	b.n	801155a <_strtod_l+0xac2>
 801163a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801163e:	e7dd      	b.n	80115fc <_strtod_l+0xb64>
 8011640:	a311      	add	r3, pc, #68	; (adr r3, 8011688 <_strtod_l+0xbf0>)
 8011642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011646:	f7ef fa59 	bl	8000afc <__aeabi_dcmplt>
 801164a:	e7b4      	b.n	80115b6 <_strtod_l+0xb1e>
 801164c:	2300      	movs	r3, #0
 801164e:	930e      	str	r3, [sp, #56]	; 0x38
 8011650:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011652:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011654:	6013      	str	r3, [r2, #0]
 8011656:	f7ff ba65 	b.w	8010b24 <_strtod_l+0x8c>
 801165a:	2b65      	cmp	r3, #101	; 0x65
 801165c:	f43f ab5d 	beq.w	8010d1a <_strtod_l+0x282>
 8011660:	2b45      	cmp	r3, #69	; 0x45
 8011662:	f43f ab5a 	beq.w	8010d1a <_strtod_l+0x282>
 8011666:	2201      	movs	r2, #1
 8011668:	f7ff bb92 	b.w	8010d90 <_strtod_l+0x2f8>
 801166c:	f3af 8000 	nop.w
 8011670:	94a03595 	.word	0x94a03595
 8011674:	3fdfffff 	.word	0x3fdfffff
 8011678:	35afe535 	.word	0x35afe535
 801167c:	3fe00000 	.word	0x3fe00000
 8011680:	ffc00000 	.word	0xffc00000
 8011684:	41dfffff 	.word	0x41dfffff
 8011688:	94a03595 	.word	0x94a03595
 801168c:	3fcfffff 	.word	0x3fcfffff
 8011690:	3ff00000 	.word	0x3ff00000
 8011694:	7ff00000 	.word	0x7ff00000
 8011698:	7fe00000 	.word	0x7fe00000
 801169c:	7c9fffff 	.word	0x7c9fffff
 80116a0:	3fe00000 	.word	0x3fe00000
 80116a4:	bff00000 	.word	0xbff00000
 80116a8:	7fefffff 	.word	0x7fefffff

080116ac <_strtod_r>:
 80116ac:	4b01      	ldr	r3, [pc, #4]	; (80116b4 <_strtod_r+0x8>)
 80116ae:	f7ff b9f3 	b.w	8010a98 <_strtod_l>
 80116b2:	bf00      	nop
 80116b4:	20000200 	.word	0x20000200

080116b8 <_strtol_l.isra.0>:
 80116b8:	2b01      	cmp	r3, #1
 80116ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116be:	d001      	beq.n	80116c4 <_strtol_l.isra.0+0xc>
 80116c0:	2b24      	cmp	r3, #36	; 0x24
 80116c2:	d906      	bls.n	80116d2 <_strtol_l.isra.0+0x1a>
 80116c4:	f7fe fa6c 	bl	800fba0 <__errno>
 80116c8:	2316      	movs	r3, #22
 80116ca:	6003      	str	r3, [r0, #0]
 80116cc:	2000      	movs	r0, #0
 80116ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116d2:	4f3a      	ldr	r7, [pc, #232]	; (80117bc <_strtol_l.isra.0+0x104>)
 80116d4:	468e      	mov	lr, r1
 80116d6:	4676      	mov	r6, lr
 80116d8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80116dc:	5de5      	ldrb	r5, [r4, r7]
 80116de:	f015 0508 	ands.w	r5, r5, #8
 80116e2:	d1f8      	bne.n	80116d6 <_strtol_l.isra.0+0x1e>
 80116e4:	2c2d      	cmp	r4, #45	; 0x2d
 80116e6:	d134      	bne.n	8011752 <_strtol_l.isra.0+0x9a>
 80116e8:	f89e 4000 	ldrb.w	r4, [lr]
 80116ec:	f04f 0801 	mov.w	r8, #1
 80116f0:	f106 0e02 	add.w	lr, r6, #2
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d05c      	beq.n	80117b2 <_strtol_l.isra.0+0xfa>
 80116f8:	2b10      	cmp	r3, #16
 80116fa:	d10c      	bne.n	8011716 <_strtol_l.isra.0+0x5e>
 80116fc:	2c30      	cmp	r4, #48	; 0x30
 80116fe:	d10a      	bne.n	8011716 <_strtol_l.isra.0+0x5e>
 8011700:	f89e 4000 	ldrb.w	r4, [lr]
 8011704:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011708:	2c58      	cmp	r4, #88	; 0x58
 801170a:	d14d      	bne.n	80117a8 <_strtol_l.isra.0+0xf0>
 801170c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8011710:	2310      	movs	r3, #16
 8011712:	f10e 0e02 	add.w	lr, lr, #2
 8011716:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801171a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801171e:	2600      	movs	r6, #0
 8011720:	fbbc f9f3 	udiv	r9, ip, r3
 8011724:	4635      	mov	r5, r6
 8011726:	fb03 ca19 	mls	sl, r3, r9, ip
 801172a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801172e:	2f09      	cmp	r7, #9
 8011730:	d818      	bhi.n	8011764 <_strtol_l.isra.0+0xac>
 8011732:	463c      	mov	r4, r7
 8011734:	42a3      	cmp	r3, r4
 8011736:	dd24      	ble.n	8011782 <_strtol_l.isra.0+0xca>
 8011738:	2e00      	cmp	r6, #0
 801173a:	db1f      	blt.n	801177c <_strtol_l.isra.0+0xc4>
 801173c:	45a9      	cmp	r9, r5
 801173e:	d31d      	bcc.n	801177c <_strtol_l.isra.0+0xc4>
 8011740:	d101      	bne.n	8011746 <_strtol_l.isra.0+0x8e>
 8011742:	45a2      	cmp	sl, r4
 8011744:	db1a      	blt.n	801177c <_strtol_l.isra.0+0xc4>
 8011746:	fb05 4503 	mla	r5, r5, r3, r4
 801174a:	2601      	movs	r6, #1
 801174c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011750:	e7eb      	b.n	801172a <_strtol_l.isra.0+0x72>
 8011752:	2c2b      	cmp	r4, #43	; 0x2b
 8011754:	bf08      	it	eq
 8011756:	f89e 4000 	ldrbeq.w	r4, [lr]
 801175a:	46a8      	mov	r8, r5
 801175c:	bf08      	it	eq
 801175e:	f106 0e02 	addeq.w	lr, r6, #2
 8011762:	e7c7      	b.n	80116f4 <_strtol_l.isra.0+0x3c>
 8011764:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8011768:	2f19      	cmp	r7, #25
 801176a:	d801      	bhi.n	8011770 <_strtol_l.isra.0+0xb8>
 801176c:	3c37      	subs	r4, #55	; 0x37
 801176e:	e7e1      	b.n	8011734 <_strtol_l.isra.0+0x7c>
 8011770:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8011774:	2f19      	cmp	r7, #25
 8011776:	d804      	bhi.n	8011782 <_strtol_l.isra.0+0xca>
 8011778:	3c57      	subs	r4, #87	; 0x57
 801177a:	e7db      	b.n	8011734 <_strtol_l.isra.0+0x7c>
 801177c:	f04f 36ff 	mov.w	r6, #4294967295
 8011780:	e7e4      	b.n	801174c <_strtol_l.isra.0+0x94>
 8011782:	2e00      	cmp	r6, #0
 8011784:	da05      	bge.n	8011792 <_strtol_l.isra.0+0xda>
 8011786:	2322      	movs	r3, #34	; 0x22
 8011788:	6003      	str	r3, [r0, #0]
 801178a:	4665      	mov	r5, ip
 801178c:	b942      	cbnz	r2, 80117a0 <_strtol_l.isra.0+0xe8>
 801178e:	4628      	mov	r0, r5
 8011790:	e79d      	b.n	80116ce <_strtol_l.isra.0+0x16>
 8011792:	f1b8 0f00 	cmp.w	r8, #0
 8011796:	d000      	beq.n	801179a <_strtol_l.isra.0+0xe2>
 8011798:	426d      	negs	r5, r5
 801179a:	2a00      	cmp	r2, #0
 801179c:	d0f7      	beq.n	801178e <_strtol_l.isra.0+0xd6>
 801179e:	b10e      	cbz	r6, 80117a4 <_strtol_l.isra.0+0xec>
 80117a0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80117a4:	6011      	str	r1, [r2, #0]
 80117a6:	e7f2      	b.n	801178e <_strtol_l.isra.0+0xd6>
 80117a8:	2430      	movs	r4, #48	; 0x30
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d1b3      	bne.n	8011716 <_strtol_l.isra.0+0x5e>
 80117ae:	2308      	movs	r3, #8
 80117b0:	e7b1      	b.n	8011716 <_strtol_l.isra.0+0x5e>
 80117b2:	2c30      	cmp	r4, #48	; 0x30
 80117b4:	d0a4      	beq.n	8011700 <_strtol_l.isra.0+0x48>
 80117b6:	230a      	movs	r3, #10
 80117b8:	e7ad      	b.n	8011716 <_strtol_l.isra.0+0x5e>
 80117ba:	bf00      	nop
 80117bc:	08015101 	.word	0x08015101

080117c0 <_strtol_r>:
 80117c0:	f7ff bf7a 	b.w	80116b8 <_strtol_l.isra.0>

080117c4 <strtol>:
 80117c4:	4613      	mov	r3, r2
 80117c6:	460a      	mov	r2, r1
 80117c8:	4601      	mov	r1, r0
 80117ca:	4802      	ldr	r0, [pc, #8]	; (80117d4 <strtol+0x10>)
 80117cc:	6800      	ldr	r0, [r0, #0]
 80117ce:	f7ff bf73 	b.w	80116b8 <_strtol_l.isra.0>
 80117d2:	bf00      	nop
 80117d4:	20000198 	.word	0x20000198

080117d8 <_vsniprintf_r>:
 80117d8:	b530      	push	{r4, r5, lr}
 80117da:	1e14      	subs	r4, r2, #0
 80117dc:	4605      	mov	r5, r0
 80117de:	b09b      	sub	sp, #108	; 0x6c
 80117e0:	4618      	mov	r0, r3
 80117e2:	da05      	bge.n	80117f0 <_vsniprintf_r+0x18>
 80117e4:	238b      	movs	r3, #139	; 0x8b
 80117e6:	602b      	str	r3, [r5, #0]
 80117e8:	f04f 30ff 	mov.w	r0, #4294967295
 80117ec:	b01b      	add	sp, #108	; 0x6c
 80117ee:	bd30      	pop	{r4, r5, pc}
 80117f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80117f4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80117f8:	bf14      	ite	ne
 80117fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80117fe:	4623      	moveq	r3, r4
 8011800:	9302      	str	r3, [sp, #8]
 8011802:	9305      	str	r3, [sp, #20]
 8011804:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011808:	9100      	str	r1, [sp, #0]
 801180a:	9104      	str	r1, [sp, #16]
 801180c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011810:	4602      	mov	r2, r0
 8011812:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011814:	4669      	mov	r1, sp
 8011816:	4628      	mov	r0, r5
 8011818:	f002 f830 	bl	801387c <_svfiprintf_r>
 801181c:	1c43      	adds	r3, r0, #1
 801181e:	bfbc      	itt	lt
 8011820:	238b      	movlt	r3, #139	; 0x8b
 8011822:	602b      	strlt	r3, [r5, #0]
 8011824:	2c00      	cmp	r4, #0
 8011826:	d0e1      	beq.n	80117ec <_vsniprintf_r+0x14>
 8011828:	9b00      	ldr	r3, [sp, #0]
 801182a:	2200      	movs	r2, #0
 801182c:	701a      	strb	r2, [r3, #0]
 801182e:	e7dd      	b.n	80117ec <_vsniprintf_r+0x14>

08011830 <vsniprintf>:
 8011830:	b507      	push	{r0, r1, r2, lr}
 8011832:	9300      	str	r3, [sp, #0]
 8011834:	4613      	mov	r3, r2
 8011836:	460a      	mov	r2, r1
 8011838:	4601      	mov	r1, r0
 801183a:	4803      	ldr	r0, [pc, #12]	; (8011848 <vsniprintf+0x18>)
 801183c:	6800      	ldr	r0, [r0, #0]
 801183e:	f7ff ffcb 	bl	80117d8 <_vsniprintf_r>
 8011842:	b003      	add	sp, #12
 8011844:	f85d fb04 	ldr.w	pc, [sp], #4
 8011848:	20000198 	.word	0x20000198

0801184c <_write_r>:
 801184c:	b538      	push	{r3, r4, r5, lr}
 801184e:	4d07      	ldr	r5, [pc, #28]	; (801186c <_write_r+0x20>)
 8011850:	4604      	mov	r4, r0
 8011852:	4608      	mov	r0, r1
 8011854:	4611      	mov	r1, r2
 8011856:	2200      	movs	r2, #0
 8011858:	602a      	str	r2, [r5, #0]
 801185a:	461a      	mov	r2, r3
 801185c:	f7f1 fedb 	bl	8003616 <_write>
 8011860:	1c43      	adds	r3, r0, #1
 8011862:	d102      	bne.n	801186a <_write_r+0x1e>
 8011864:	682b      	ldr	r3, [r5, #0]
 8011866:	b103      	cbz	r3, 801186a <_write_r+0x1e>
 8011868:	6023      	str	r3, [r4, #0]
 801186a:	bd38      	pop	{r3, r4, r5, pc}
 801186c:	20003384 	.word	0x20003384

08011870 <_close_r>:
 8011870:	b538      	push	{r3, r4, r5, lr}
 8011872:	4d06      	ldr	r5, [pc, #24]	; (801188c <_close_r+0x1c>)
 8011874:	2300      	movs	r3, #0
 8011876:	4604      	mov	r4, r0
 8011878:	4608      	mov	r0, r1
 801187a:	602b      	str	r3, [r5, #0]
 801187c:	f7f1 fee7 	bl	800364e <_close>
 8011880:	1c43      	adds	r3, r0, #1
 8011882:	d102      	bne.n	801188a <_close_r+0x1a>
 8011884:	682b      	ldr	r3, [r5, #0]
 8011886:	b103      	cbz	r3, 801188a <_close_r+0x1a>
 8011888:	6023      	str	r3, [r4, #0]
 801188a:	bd38      	pop	{r3, r4, r5, pc}
 801188c:	20003384 	.word	0x20003384

08011890 <quorem>:
 8011890:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011894:	6903      	ldr	r3, [r0, #16]
 8011896:	690c      	ldr	r4, [r1, #16]
 8011898:	42a3      	cmp	r3, r4
 801189a:	4607      	mov	r7, r0
 801189c:	f2c0 8081 	blt.w	80119a2 <quorem+0x112>
 80118a0:	3c01      	subs	r4, #1
 80118a2:	f101 0814 	add.w	r8, r1, #20
 80118a6:	f100 0514 	add.w	r5, r0, #20
 80118aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80118ae:	9301      	str	r3, [sp, #4]
 80118b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80118b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80118b8:	3301      	adds	r3, #1
 80118ba:	429a      	cmp	r2, r3
 80118bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80118c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80118c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80118c8:	d331      	bcc.n	801192e <quorem+0x9e>
 80118ca:	f04f 0e00 	mov.w	lr, #0
 80118ce:	4640      	mov	r0, r8
 80118d0:	46ac      	mov	ip, r5
 80118d2:	46f2      	mov	sl, lr
 80118d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80118d8:	b293      	uxth	r3, r2
 80118da:	fb06 e303 	mla	r3, r6, r3, lr
 80118de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80118e2:	b29b      	uxth	r3, r3
 80118e4:	ebaa 0303 	sub.w	r3, sl, r3
 80118e8:	0c12      	lsrs	r2, r2, #16
 80118ea:	f8dc a000 	ldr.w	sl, [ip]
 80118ee:	fb06 e202 	mla	r2, r6, r2, lr
 80118f2:	fa13 f38a 	uxtah	r3, r3, sl
 80118f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80118fa:	fa1f fa82 	uxth.w	sl, r2
 80118fe:	f8dc 2000 	ldr.w	r2, [ip]
 8011902:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8011906:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801190a:	b29b      	uxth	r3, r3
 801190c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011910:	4581      	cmp	r9, r0
 8011912:	f84c 3b04 	str.w	r3, [ip], #4
 8011916:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801191a:	d2db      	bcs.n	80118d4 <quorem+0x44>
 801191c:	f855 300b 	ldr.w	r3, [r5, fp]
 8011920:	b92b      	cbnz	r3, 801192e <quorem+0x9e>
 8011922:	9b01      	ldr	r3, [sp, #4]
 8011924:	3b04      	subs	r3, #4
 8011926:	429d      	cmp	r5, r3
 8011928:	461a      	mov	r2, r3
 801192a:	d32e      	bcc.n	801198a <quorem+0xfa>
 801192c:	613c      	str	r4, [r7, #16]
 801192e:	4638      	mov	r0, r7
 8011930:	f001 fc9c 	bl	801326c <__mcmp>
 8011934:	2800      	cmp	r0, #0
 8011936:	db24      	blt.n	8011982 <quorem+0xf2>
 8011938:	3601      	adds	r6, #1
 801193a:	4628      	mov	r0, r5
 801193c:	f04f 0c00 	mov.w	ip, #0
 8011940:	f858 2b04 	ldr.w	r2, [r8], #4
 8011944:	f8d0 e000 	ldr.w	lr, [r0]
 8011948:	b293      	uxth	r3, r2
 801194a:	ebac 0303 	sub.w	r3, ip, r3
 801194e:	0c12      	lsrs	r2, r2, #16
 8011950:	fa13 f38e 	uxtah	r3, r3, lr
 8011954:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011958:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801195c:	b29b      	uxth	r3, r3
 801195e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011962:	45c1      	cmp	r9, r8
 8011964:	f840 3b04 	str.w	r3, [r0], #4
 8011968:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801196c:	d2e8      	bcs.n	8011940 <quorem+0xb0>
 801196e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011972:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011976:	b922      	cbnz	r2, 8011982 <quorem+0xf2>
 8011978:	3b04      	subs	r3, #4
 801197a:	429d      	cmp	r5, r3
 801197c:	461a      	mov	r2, r3
 801197e:	d30a      	bcc.n	8011996 <quorem+0x106>
 8011980:	613c      	str	r4, [r7, #16]
 8011982:	4630      	mov	r0, r6
 8011984:	b003      	add	sp, #12
 8011986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801198a:	6812      	ldr	r2, [r2, #0]
 801198c:	3b04      	subs	r3, #4
 801198e:	2a00      	cmp	r2, #0
 8011990:	d1cc      	bne.n	801192c <quorem+0x9c>
 8011992:	3c01      	subs	r4, #1
 8011994:	e7c7      	b.n	8011926 <quorem+0x96>
 8011996:	6812      	ldr	r2, [r2, #0]
 8011998:	3b04      	subs	r3, #4
 801199a:	2a00      	cmp	r2, #0
 801199c:	d1f0      	bne.n	8011980 <quorem+0xf0>
 801199e:	3c01      	subs	r4, #1
 80119a0:	e7eb      	b.n	801197a <quorem+0xea>
 80119a2:	2000      	movs	r0, #0
 80119a4:	e7ee      	b.n	8011984 <quorem+0xf4>
	...

080119a8 <_dtoa_r>:
 80119a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119ac:	ed2d 8b02 	vpush	{d8}
 80119b0:	ec57 6b10 	vmov	r6, r7, d0
 80119b4:	b095      	sub	sp, #84	; 0x54
 80119b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80119b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80119bc:	9105      	str	r1, [sp, #20]
 80119be:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80119c2:	4604      	mov	r4, r0
 80119c4:	9209      	str	r2, [sp, #36]	; 0x24
 80119c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80119c8:	b975      	cbnz	r5, 80119e8 <_dtoa_r+0x40>
 80119ca:	2010      	movs	r0, #16
 80119cc:	f001 f95e 	bl	8012c8c <malloc>
 80119d0:	4602      	mov	r2, r0
 80119d2:	6260      	str	r0, [r4, #36]	; 0x24
 80119d4:	b920      	cbnz	r0, 80119e0 <_dtoa_r+0x38>
 80119d6:	4bb2      	ldr	r3, [pc, #712]	; (8011ca0 <_dtoa_r+0x2f8>)
 80119d8:	21ea      	movs	r1, #234	; 0xea
 80119da:	48b2      	ldr	r0, [pc, #712]	; (8011ca4 <_dtoa_r+0x2fc>)
 80119dc:	f002 fc98 	bl	8014310 <__assert_func>
 80119e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80119e4:	6005      	str	r5, [r0, #0]
 80119e6:	60c5      	str	r5, [r0, #12]
 80119e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80119ea:	6819      	ldr	r1, [r3, #0]
 80119ec:	b151      	cbz	r1, 8011a04 <_dtoa_r+0x5c>
 80119ee:	685a      	ldr	r2, [r3, #4]
 80119f0:	604a      	str	r2, [r1, #4]
 80119f2:	2301      	movs	r3, #1
 80119f4:	4093      	lsls	r3, r2
 80119f6:	608b      	str	r3, [r1, #8]
 80119f8:	4620      	mov	r0, r4
 80119fa:	f001 f9af 	bl	8012d5c <_Bfree>
 80119fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a00:	2200      	movs	r2, #0
 8011a02:	601a      	str	r2, [r3, #0]
 8011a04:	1e3b      	subs	r3, r7, #0
 8011a06:	bfb9      	ittee	lt
 8011a08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011a0c:	9303      	strlt	r3, [sp, #12]
 8011a0e:	2300      	movge	r3, #0
 8011a10:	f8c8 3000 	strge.w	r3, [r8]
 8011a14:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8011a18:	4ba3      	ldr	r3, [pc, #652]	; (8011ca8 <_dtoa_r+0x300>)
 8011a1a:	bfbc      	itt	lt
 8011a1c:	2201      	movlt	r2, #1
 8011a1e:	f8c8 2000 	strlt.w	r2, [r8]
 8011a22:	ea33 0309 	bics.w	r3, r3, r9
 8011a26:	d11b      	bne.n	8011a60 <_dtoa_r+0xb8>
 8011a28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011a2a:	f242 730f 	movw	r3, #9999	; 0x270f
 8011a2e:	6013      	str	r3, [r2, #0]
 8011a30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011a34:	4333      	orrs	r3, r6
 8011a36:	f000 857a 	beq.w	801252e <_dtoa_r+0xb86>
 8011a3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011a3c:	b963      	cbnz	r3, 8011a58 <_dtoa_r+0xb0>
 8011a3e:	4b9b      	ldr	r3, [pc, #620]	; (8011cac <_dtoa_r+0x304>)
 8011a40:	e024      	b.n	8011a8c <_dtoa_r+0xe4>
 8011a42:	4b9b      	ldr	r3, [pc, #620]	; (8011cb0 <_dtoa_r+0x308>)
 8011a44:	9300      	str	r3, [sp, #0]
 8011a46:	3308      	adds	r3, #8
 8011a48:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011a4a:	6013      	str	r3, [r2, #0]
 8011a4c:	9800      	ldr	r0, [sp, #0]
 8011a4e:	b015      	add	sp, #84	; 0x54
 8011a50:	ecbd 8b02 	vpop	{d8}
 8011a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a58:	4b94      	ldr	r3, [pc, #592]	; (8011cac <_dtoa_r+0x304>)
 8011a5a:	9300      	str	r3, [sp, #0]
 8011a5c:	3303      	adds	r3, #3
 8011a5e:	e7f3      	b.n	8011a48 <_dtoa_r+0xa0>
 8011a60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011a64:	2200      	movs	r2, #0
 8011a66:	ec51 0b17 	vmov	r0, r1, d7
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8011a70:	f7ef f83a 	bl	8000ae8 <__aeabi_dcmpeq>
 8011a74:	4680      	mov	r8, r0
 8011a76:	b158      	cbz	r0, 8011a90 <_dtoa_r+0xe8>
 8011a78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011a7a:	2301      	movs	r3, #1
 8011a7c:	6013      	str	r3, [r2, #0]
 8011a7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	f000 8551 	beq.w	8012528 <_dtoa_r+0xb80>
 8011a86:	488b      	ldr	r0, [pc, #556]	; (8011cb4 <_dtoa_r+0x30c>)
 8011a88:	6018      	str	r0, [r3, #0]
 8011a8a:	1e43      	subs	r3, r0, #1
 8011a8c:	9300      	str	r3, [sp, #0]
 8011a8e:	e7dd      	b.n	8011a4c <_dtoa_r+0xa4>
 8011a90:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011a94:	aa12      	add	r2, sp, #72	; 0x48
 8011a96:	a913      	add	r1, sp, #76	; 0x4c
 8011a98:	4620      	mov	r0, r4
 8011a9a:	f001 fd07 	bl	80134ac <__d2b>
 8011a9e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011aa2:	4683      	mov	fp, r0
 8011aa4:	2d00      	cmp	r5, #0
 8011aa6:	d07c      	beq.n	8011ba2 <_dtoa_r+0x1fa>
 8011aa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011aaa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8011aae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011ab2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8011ab6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011aba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8011abe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011ac2:	4b7d      	ldr	r3, [pc, #500]	; (8011cb8 <_dtoa_r+0x310>)
 8011ac4:	2200      	movs	r2, #0
 8011ac6:	4630      	mov	r0, r6
 8011ac8:	4639      	mov	r1, r7
 8011aca:	f7ee fbed 	bl	80002a8 <__aeabi_dsub>
 8011ace:	a36e      	add	r3, pc, #440	; (adr r3, 8011c88 <_dtoa_r+0x2e0>)
 8011ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ad4:	f7ee fda0 	bl	8000618 <__aeabi_dmul>
 8011ad8:	a36d      	add	r3, pc, #436	; (adr r3, 8011c90 <_dtoa_r+0x2e8>)
 8011ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ade:	f7ee fbe5 	bl	80002ac <__adddf3>
 8011ae2:	4606      	mov	r6, r0
 8011ae4:	4628      	mov	r0, r5
 8011ae6:	460f      	mov	r7, r1
 8011ae8:	f7ee fd2c 	bl	8000544 <__aeabi_i2d>
 8011aec:	a36a      	add	r3, pc, #424	; (adr r3, 8011c98 <_dtoa_r+0x2f0>)
 8011aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011af2:	f7ee fd91 	bl	8000618 <__aeabi_dmul>
 8011af6:	4602      	mov	r2, r0
 8011af8:	460b      	mov	r3, r1
 8011afa:	4630      	mov	r0, r6
 8011afc:	4639      	mov	r1, r7
 8011afe:	f7ee fbd5 	bl	80002ac <__adddf3>
 8011b02:	4606      	mov	r6, r0
 8011b04:	460f      	mov	r7, r1
 8011b06:	f7ef f837 	bl	8000b78 <__aeabi_d2iz>
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	4682      	mov	sl, r0
 8011b0e:	2300      	movs	r3, #0
 8011b10:	4630      	mov	r0, r6
 8011b12:	4639      	mov	r1, r7
 8011b14:	f7ee fff2 	bl	8000afc <__aeabi_dcmplt>
 8011b18:	b148      	cbz	r0, 8011b2e <_dtoa_r+0x186>
 8011b1a:	4650      	mov	r0, sl
 8011b1c:	f7ee fd12 	bl	8000544 <__aeabi_i2d>
 8011b20:	4632      	mov	r2, r6
 8011b22:	463b      	mov	r3, r7
 8011b24:	f7ee ffe0 	bl	8000ae8 <__aeabi_dcmpeq>
 8011b28:	b908      	cbnz	r0, 8011b2e <_dtoa_r+0x186>
 8011b2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011b2e:	f1ba 0f16 	cmp.w	sl, #22
 8011b32:	d854      	bhi.n	8011bde <_dtoa_r+0x236>
 8011b34:	4b61      	ldr	r3, [pc, #388]	; (8011cbc <_dtoa_r+0x314>)
 8011b36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011b42:	f7ee ffdb 	bl	8000afc <__aeabi_dcmplt>
 8011b46:	2800      	cmp	r0, #0
 8011b48:	d04b      	beq.n	8011be2 <_dtoa_r+0x23a>
 8011b4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011b4e:	2300      	movs	r3, #0
 8011b50:	930e      	str	r3, [sp, #56]	; 0x38
 8011b52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011b54:	1b5d      	subs	r5, r3, r5
 8011b56:	1e6b      	subs	r3, r5, #1
 8011b58:	9304      	str	r3, [sp, #16]
 8011b5a:	bf43      	ittte	mi
 8011b5c:	2300      	movmi	r3, #0
 8011b5e:	f1c5 0801 	rsbmi	r8, r5, #1
 8011b62:	9304      	strmi	r3, [sp, #16]
 8011b64:	f04f 0800 	movpl.w	r8, #0
 8011b68:	f1ba 0f00 	cmp.w	sl, #0
 8011b6c:	db3b      	blt.n	8011be6 <_dtoa_r+0x23e>
 8011b6e:	9b04      	ldr	r3, [sp, #16]
 8011b70:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8011b74:	4453      	add	r3, sl
 8011b76:	9304      	str	r3, [sp, #16]
 8011b78:	2300      	movs	r3, #0
 8011b7a:	9306      	str	r3, [sp, #24]
 8011b7c:	9b05      	ldr	r3, [sp, #20]
 8011b7e:	2b09      	cmp	r3, #9
 8011b80:	d869      	bhi.n	8011c56 <_dtoa_r+0x2ae>
 8011b82:	2b05      	cmp	r3, #5
 8011b84:	bfc4      	itt	gt
 8011b86:	3b04      	subgt	r3, #4
 8011b88:	9305      	strgt	r3, [sp, #20]
 8011b8a:	9b05      	ldr	r3, [sp, #20]
 8011b8c:	f1a3 0302 	sub.w	r3, r3, #2
 8011b90:	bfcc      	ite	gt
 8011b92:	2500      	movgt	r5, #0
 8011b94:	2501      	movle	r5, #1
 8011b96:	2b03      	cmp	r3, #3
 8011b98:	d869      	bhi.n	8011c6e <_dtoa_r+0x2c6>
 8011b9a:	e8df f003 	tbb	[pc, r3]
 8011b9e:	4e2c      	.short	0x4e2c
 8011ba0:	5a4c      	.short	0x5a4c
 8011ba2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8011ba6:	441d      	add	r5, r3
 8011ba8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011bac:	2b20      	cmp	r3, #32
 8011bae:	bfc1      	itttt	gt
 8011bb0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011bb4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8011bb8:	fa09 f303 	lslgt.w	r3, r9, r3
 8011bbc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011bc0:	bfda      	itte	le
 8011bc2:	f1c3 0320 	rsble	r3, r3, #32
 8011bc6:	fa06 f003 	lslle.w	r0, r6, r3
 8011bca:	4318      	orrgt	r0, r3
 8011bcc:	f7ee fcaa 	bl	8000524 <__aeabi_ui2d>
 8011bd0:	2301      	movs	r3, #1
 8011bd2:	4606      	mov	r6, r0
 8011bd4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8011bd8:	3d01      	subs	r5, #1
 8011bda:	9310      	str	r3, [sp, #64]	; 0x40
 8011bdc:	e771      	b.n	8011ac2 <_dtoa_r+0x11a>
 8011bde:	2301      	movs	r3, #1
 8011be0:	e7b6      	b.n	8011b50 <_dtoa_r+0x1a8>
 8011be2:	900e      	str	r0, [sp, #56]	; 0x38
 8011be4:	e7b5      	b.n	8011b52 <_dtoa_r+0x1aa>
 8011be6:	f1ca 0300 	rsb	r3, sl, #0
 8011bea:	9306      	str	r3, [sp, #24]
 8011bec:	2300      	movs	r3, #0
 8011bee:	eba8 080a 	sub.w	r8, r8, sl
 8011bf2:	930d      	str	r3, [sp, #52]	; 0x34
 8011bf4:	e7c2      	b.n	8011b7c <_dtoa_r+0x1d4>
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	9308      	str	r3, [sp, #32]
 8011bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	dc39      	bgt.n	8011c74 <_dtoa_r+0x2cc>
 8011c00:	f04f 0901 	mov.w	r9, #1
 8011c04:	f8cd 9004 	str.w	r9, [sp, #4]
 8011c08:	464b      	mov	r3, r9
 8011c0a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8011c0e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011c10:	2200      	movs	r2, #0
 8011c12:	6042      	str	r2, [r0, #4]
 8011c14:	2204      	movs	r2, #4
 8011c16:	f102 0614 	add.w	r6, r2, #20
 8011c1a:	429e      	cmp	r6, r3
 8011c1c:	6841      	ldr	r1, [r0, #4]
 8011c1e:	d92f      	bls.n	8011c80 <_dtoa_r+0x2d8>
 8011c20:	4620      	mov	r0, r4
 8011c22:	f001 f85b 	bl	8012cdc <_Balloc>
 8011c26:	9000      	str	r0, [sp, #0]
 8011c28:	2800      	cmp	r0, #0
 8011c2a:	d14b      	bne.n	8011cc4 <_dtoa_r+0x31c>
 8011c2c:	4b24      	ldr	r3, [pc, #144]	; (8011cc0 <_dtoa_r+0x318>)
 8011c2e:	4602      	mov	r2, r0
 8011c30:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011c34:	e6d1      	b.n	80119da <_dtoa_r+0x32>
 8011c36:	2301      	movs	r3, #1
 8011c38:	e7de      	b.n	8011bf8 <_dtoa_r+0x250>
 8011c3a:	2300      	movs	r3, #0
 8011c3c:	9308      	str	r3, [sp, #32]
 8011c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c40:	eb0a 0903 	add.w	r9, sl, r3
 8011c44:	f109 0301 	add.w	r3, r9, #1
 8011c48:	2b01      	cmp	r3, #1
 8011c4a:	9301      	str	r3, [sp, #4]
 8011c4c:	bfb8      	it	lt
 8011c4e:	2301      	movlt	r3, #1
 8011c50:	e7dd      	b.n	8011c0e <_dtoa_r+0x266>
 8011c52:	2301      	movs	r3, #1
 8011c54:	e7f2      	b.n	8011c3c <_dtoa_r+0x294>
 8011c56:	2501      	movs	r5, #1
 8011c58:	2300      	movs	r3, #0
 8011c5a:	9305      	str	r3, [sp, #20]
 8011c5c:	9508      	str	r5, [sp, #32]
 8011c5e:	f04f 39ff 	mov.w	r9, #4294967295
 8011c62:	2200      	movs	r2, #0
 8011c64:	f8cd 9004 	str.w	r9, [sp, #4]
 8011c68:	2312      	movs	r3, #18
 8011c6a:	9209      	str	r2, [sp, #36]	; 0x24
 8011c6c:	e7cf      	b.n	8011c0e <_dtoa_r+0x266>
 8011c6e:	2301      	movs	r3, #1
 8011c70:	9308      	str	r3, [sp, #32]
 8011c72:	e7f4      	b.n	8011c5e <_dtoa_r+0x2b6>
 8011c74:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8011c78:	f8cd 9004 	str.w	r9, [sp, #4]
 8011c7c:	464b      	mov	r3, r9
 8011c7e:	e7c6      	b.n	8011c0e <_dtoa_r+0x266>
 8011c80:	3101      	adds	r1, #1
 8011c82:	6041      	str	r1, [r0, #4]
 8011c84:	0052      	lsls	r2, r2, #1
 8011c86:	e7c6      	b.n	8011c16 <_dtoa_r+0x26e>
 8011c88:	636f4361 	.word	0x636f4361
 8011c8c:	3fd287a7 	.word	0x3fd287a7
 8011c90:	8b60c8b3 	.word	0x8b60c8b3
 8011c94:	3fc68a28 	.word	0x3fc68a28
 8011c98:	509f79fb 	.word	0x509f79fb
 8011c9c:	3fd34413 	.word	0x3fd34413
 8011ca0:	0801529d 	.word	0x0801529d
 8011ca4:	080152b4 	.word	0x080152b4
 8011ca8:	7ff00000 	.word	0x7ff00000
 8011cac:	08015299 	.word	0x08015299
 8011cb0:	08015290 	.word	0x08015290
 8011cb4:	0801551a 	.word	0x0801551a
 8011cb8:	3ff80000 	.word	0x3ff80000
 8011cbc:	08015430 	.word	0x08015430
 8011cc0:	08015313 	.word	0x08015313
 8011cc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011cc6:	9a00      	ldr	r2, [sp, #0]
 8011cc8:	601a      	str	r2, [r3, #0]
 8011cca:	9b01      	ldr	r3, [sp, #4]
 8011ccc:	2b0e      	cmp	r3, #14
 8011cce:	f200 80ad 	bhi.w	8011e2c <_dtoa_r+0x484>
 8011cd2:	2d00      	cmp	r5, #0
 8011cd4:	f000 80aa 	beq.w	8011e2c <_dtoa_r+0x484>
 8011cd8:	f1ba 0f00 	cmp.w	sl, #0
 8011cdc:	dd36      	ble.n	8011d4c <_dtoa_r+0x3a4>
 8011cde:	4ac3      	ldr	r2, [pc, #780]	; (8011fec <_dtoa_r+0x644>)
 8011ce0:	f00a 030f 	and.w	r3, sl, #15
 8011ce4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011ce8:	ed93 7b00 	vldr	d7, [r3]
 8011cec:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8011cf0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8011cf4:	eeb0 8a47 	vmov.f32	s16, s14
 8011cf8:	eef0 8a67 	vmov.f32	s17, s15
 8011cfc:	d016      	beq.n	8011d2c <_dtoa_r+0x384>
 8011cfe:	4bbc      	ldr	r3, [pc, #752]	; (8011ff0 <_dtoa_r+0x648>)
 8011d00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011d04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011d08:	f7ee fdb0 	bl	800086c <__aeabi_ddiv>
 8011d0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011d10:	f007 070f 	and.w	r7, r7, #15
 8011d14:	2503      	movs	r5, #3
 8011d16:	4eb6      	ldr	r6, [pc, #728]	; (8011ff0 <_dtoa_r+0x648>)
 8011d18:	b957      	cbnz	r7, 8011d30 <_dtoa_r+0x388>
 8011d1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d1e:	ec53 2b18 	vmov	r2, r3, d8
 8011d22:	f7ee fda3 	bl	800086c <__aeabi_ddiv>
 8011d26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011d2a:	e029      	b.n	8011d80 <_dtoa_r+0x3d8>
 8011d2c:	2502      	movs	r5, #2
 8011d2e:	e7f2      	b.n	8011d16 <_dtoa_r+0x36e>
 8011d30:	07f9      	lsls	r1, r7, #31
 8011d32:	d508      	bpl.n	8011d46 <_dtoa_r+0x39e>
 8011d34:	ec51 0b18 	vmov	r0, r1, d8
 8011d38:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011d3c:	f7ee fc6c 	bl	8000618 <__aeabi_dmul>
 8011d40:	ec41 0b18 	vmov	d8, r0, r1
 8011d44:	3501      	adds	r5, #1
 8011d46:	107f      	asrs	r7, r7, #1
 8011d48:	3608      	adds	r6, #8
 8011d4a:	e7e5      	b.n	8011d18 <_dtoa_r+0x370>
 8011d4c:	f000 80a6 	beq.w	8011e9c <_dtoa_r+0x4f4>
 8011d50:	f1ca 0600 	rsb	r6, sl, #0
 8011d54:	4ba5      	ldr	r3, [pc, #660]	; (8011fec <_dtoa_r+0x644>)
 8011d56:	4fa6      	ldr	r7, [pc, #664]	; (8011ff0 <_dtoa_r+0x648>)
 8011d58:	f006 020f 	and.w	r2, r6, #15
 8011d5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d64:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011d68:	f7ee fc56 	bl	8000618 <__aeabi_dmul>
 8011d6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011d70:	1136      	asrs	r6, r6, #4
 8011d72:	2300      	movs	r3, #0
 8011d74:	2502      	movs	r5, #2
 8011d76:	2e00      	cmp	r6, #0
 8011d78:	f040 8085 	bne.w	8011e86 <_dtoa_r+0x4de>
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d1d2      	bne.n	8011d26 <_dtoa_r+0x37e>
 8011d80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	f000 808c 	beq.w	8011ea0 <_dtoa_r+0x4f8>
 8011d88:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011d8c:	4b99      	ldr	r3, [pc, #612]	; (8011ff4 <_dtoa_r+0x64c>)
 8011d8e:	2200      	movs	r2, #0
 8011d90:	4630      	mov	r0, r6
 8011d92:	4639      	mov	r1, r7
 8011d94:	f7ee feb2 	bl	8000afc <__aeabi_dcmplt>
 8011d98:	2800      	cmp	r0, #0
 8011d9a:	f000 8081 	beq.w	8011ea0 <_dtoa_r+0x4f8>
 8011d9e:	9b01      	ldr	r3, [sp, #4]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d07d      	beq.n	8011ea0 <_dtoa_r+0x4f8>
 8011da4:	f1b9 0f00 	cmp.w	r9, #0
 8011da8:	dd3c      	ble.n	8011e24 <_dtoa_r+0x47c>
 8011daa:	f10a 33ff 	add.w	r3, sl, #4294967295
 8011dae:	9307      	str	r3, [sp, #28]
 8011db0:	2200      	movs	r2, #0
 8011db2:	4b91      	ldr	r3, [pc, #580]	; (8011ff8 <_dtoa_r+0x650>)
 8011db4:	4630      	mov	r0, r6
 8011db6:	4639      	mov	r1, r7
 8011db8:	f7ee fc2e 	bl	8000618 <__aeabi_dmul>
 8011dbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011dc0:	3501      	adds	r5, #1
 8011dc2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8011dc6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011dca:	4628      	mov	r0, r5
 8011dcc:	f7ee fbba 	bl	8000544 <__aeabi_i2d>
 8011dd0:	4632      	mov	r2, r6
 8011dd2:	463b      	mov	r3, r7
 8011dd4:	f7ee fc20 	bl	8000618 <__aeabi_dmul>
 8011dd8:	4b88      	ldr	r3, [pc, #544]	; (8011ffc <_dtoa_r+0x654>)
 8011dda:	2200      	movs	r2, #0
 8011ddc:	f7ee fa66 	bl	80002ac <__adddf3>
 8011de0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8011de4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011de8:	9303      	str	r3, [sp, #12]
 8011dea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d15c      	bne.n	8011eaa <_dtoa_r+0x502>
 8011df0:	4b83      	ldr	r3, [pc, #524]	; (8012000 <_dtoa_r+0x658>)
 8011df2:	2200      	movs	r2, #0
 8011df4:	4630      	mov	r0, r6
 8011df6:	4639      	mov	r1, r7
 8011df8:	f7ee fa56 	bl	80002a8 <__aeabi_dsub>
 8011dfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011e00:	4606      	mov	r6, r0
 8011e02:	460f      	mov	r7, r1
 8011e04:	f7ee fe98 	bl	8000b38 <__aeabi_dcmpgt>
 8011e08:	2800      	cmp	r0, #0
 8011e0a:	f040 8296 	bne.w	801233a <_dtoa_r+0x992>
 8011e0e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011e12:	4630      	mov	r0, r6
 8011e14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011e18:	4639      	mov	r1, r7
 8011e1a:	f7ee fe6f 	bl	8000afc <__aeabi_dcmplt>
 8011e1e:	2800      	cmp	r0, #0
 8011e20:	f040 8288 	bne.w	8012334 <_dtoa_r+0x98c>
 8011e24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011e28:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011e2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	f2c0 8158 	blt.w	80120e4 <_dtoa_r+0x73c>
 8011e34:	f1ba 0f0e 	cmp.w	sl, #14
 8011e38:	f300 8154 	bgt.w	80120e4 <_dtoa_r+0x73c>
 8011e3c:	4b6b      	ldr	r3, [pc, #428]	; (8011fec <_dtoa_r+0x644>)
 8011e3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011e42:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	f280 80e3 	bge.w	8012014 <_dtoa_r+0x66c>
 8011e4e:	9b01      	ldr	r3, [sp, #4]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	f300 80df 	bgt.w	8012014 <_dtoa_r+0x66c>
 8011e56:	f040 826d 	bne.w	8012334 <_dtoa_r+0x98c>
 8011e5a:	4b69      	ldr	r3, [pc, #420]	; (8012000 <_dtoa_r+0x658>)
 8011e5c:	2200      	movs	r2, #0
 8011e5e:	4640      	mov	r0, r8
 8011e60:	4649      	mov	r1, r9
 8011e62:	f7ee fbd9 	bl	8000618 <__aeabi_dmul>
 8011e66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011e6a:	f7ee fe5b 	bl	8000b24 <__aeabi_dcmpge>
 8011e6e:	9e01      	ldr	r6, [sp, #4]
 8011e70:	4637      	mov	r7, r6
 8011e72:	2800      	cmp	r0, #0
 8011e74:	f040 8243 	bne.w	80122fe <_dtoa_r+0x956>
 8011e78:	9d00      	ldr	r5, [sp, #0]
 8011e7a:	2331      	movs	r3, #49	; 0x31
 8011e7c:	f805 3b01 	strb.w	r3, [r5], #1
 8011e80:	f10a 0a01 	add.w	sl, sl, #1
 8011e84:	e23f      	b.n	8012306 <_dtoa_r+0x95e>
 8011e86:	07f2      	lsls	r2, r6, #31
 8011e88:	d505      	bpl.n	8011e96 <_dtoa_r+0x4ee>
 8011e8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011e8e:	f7ee fbc3 	bl	8000618 <__aeabi_dmul>
 8011e92:	3501      	adds	r5, #1
 8011e94:	2301      	movs	r3, #1
 8011e96:	1076      	asrs	r6, r6, #1
 8011e98:	3708      	adds	r7, #8
 8011e9a:	e76c      	b.n	8011d76 <_dtoa_r+0x3ce>
 8011e9c:	2502      	movs	r5, #2
 8011e9e:	e76f      	b.n	8011d80 <_dtoa_r+0x3d8>
 8011ea0:	9b01      	ldr	r3, [sp, #4]
 8011ea2:	f8cd a01c 	str.w	sl, [sp, #28]
 8011ea6:	930c      	str	r3, [sp, #48]	; 0x30
 8011ea8:	e78d      	b.n	8011dc6 <_dtoa_r+0x41e>
 8011eaa:	9900      	ldr	r1, [sp, #0]
 8011eac:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011eae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011eb0:	4b4e      	ldr	r3, [pc, #312]	; (8011fec <_dtoa_r+0x644>)
 8011eb2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011eb6:	4401      	add	r1, r0
 8011eb8:	9102      	str	r1, [sp, #8]
 8011eba:	9908      	ldr	r1, [sp, #32]
 8011ebc:	eeb0 8a47 	vmov.f32	s16, s14
 8011ec0:	eef0 8a67 	vmov.f32	s17, s15
 8011ec4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011ec8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011ecc:	2900      	cmp	r1, #0
 8011ece:	d045      	beq.n	8011f5c <_dtoa_r+0x5b4>
 8011ed0:	494c      	ldr	r1, [pc, #304]	; (8012004 <_dtoa_r+0x65c>)
 8011ed2:	2000      	movs	r0, #0
 8011ed4:	f7ee fcca 	bl	800086c <__aeabi_ddiv>
 8011ed8:	ec53 2b18 	vmov	r2, r3, d8
 8011edc:	f7ee f9e4 	bl	80002a8 <__aeabi_dsub>
 8011ee0:	9d00      	ldr	r5, [sp, #0]
 8011ee2:	ec41 0b18 	vmov	d8, r0, r1
 8011ee6:	4639      	mov	r1, r7
 8011ee8:	4630      	mov	r0, r6
 8011eea:	f7ee fe45 	bl	8000b78 <__aeabi_d2iz>
 8011eee:	900c      	str	r0, [sp, #48]	; 0x30
 8011ef0:	f7ee fb28 	bl	8000544 <__aeabi_i2d>
 8011ef4:	4602      	mov	r2, r0
 8011ef6:	460b      	mov	r3, r1
 8011ef8:	4630      	mov	r0, r6
 8011efa:	4639      	mov	r1, r7
 8011efc:	f7ee f9d4 	bl	80002a8 <__aeabi_dsub>
 8011f00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f02:	3330      	adds	r3, #48	; 0x30
 8011f04:	f805 3b01 	strb.w	r3, [r5], #1
 8011f08:	ec53 2b18 	vmov	r2, r3, d8
 8011f0c:	4606      	mov	r6, r0
 8011f0e:	460f      	mov	r7, r1
 8011f10:	f7ee fdf4 	bl	8000afc <__aeabi_dcmplt>
 8011f14:	2800      	cmp	r0, #0
 8011f16:	d165      	bne.n	8011fe4 <_dtoa_r+0x63c>
 8011f18:	4632      	mov	r2, r6
 8011f1a:	463b      	mov	r3, r7
 8011f1c:	4935      	ldr	r1, [pc, #212]	; (8011ff4 <_dtoa_r+0x64c>)
 8011f1e:	2000      	movs	r0, #0
 8011f20:	f7ee f9c2 	bl	80002a8 <__aeabi_dsub>
 8011f24:	ec53 2b18 	vmov	r2, r3, d8
 8011f28:	f7ee fde8 	bl	8000afc <__aeabi_dcmplt>
 8011f2c:	2800      	cmp	r0, #0
 8011f2e:	f040 80b9 	bne.w	80120a4 <_dtoa_r+0x6fc>
 8011f32:	9b02      	ldr	r3, [sp, #8]
 8011f34:	429d      	cmp	r5, r3
 8011f36:	f43f af75 	beq.w	8011e24 <_dtoa_r+0x47c>
 8011f3a:	4b2f      	ldr	r3, [pc, #188]	; (8011ff8 <_dtoa_r+0x650>)
 8011f3c:	ec51 0b18 	vmov	r0, r1, d8
 8011f40:	2200      	movs	r2, #0
 8011f42:	f7ee fb69 	bl	8000618 <__aeabi_dmul>
 8011f46:	4b2c      	ldr	r3, [pc, #176]	; (8011ff8 <_dtoa_r+0x650>)
 8011f48:	ec41 0b18 	vmov	d8, r0, r1
 8011f4c:	2200      	movs	r2, #0
 8011f4e:	4630      	mov	r0, r6
 8011f50:	4639      	mov	r1, r7
 8011f52:	f7ee fb61 	bl	8000618 <__aeabi_dmul>
 8011f56:	4606      	mov	r6, r0
 8011f58:	460f      	mov	r7, r1
 8011f5a:	e7c4      	b.n	8011ee6 <_dtoa_r+0x53e>
 8011f5c:	ec51 0b17 	vmov	r0, r1, d7
 8011f60:	f7ee fb5a 	bl	8000618 <__aeabi_dmul>
 8011f64:	9b02      	ldr	r3, [sp, #8]
 8011f66:	9d00      	ldr	r5, [sp, #0]
 8011f68:	930c      	str	r3, [sp, #48]	; 0x30
 8011f6a:	ec41 0b18 	vmov	d8, r0, r1
 8011f6e:	4639      	mov	r1, r7
 8011f70:	4630      	mov	r0, r6
 8011f72:	f7ee fe01 	bl	8000b78 <__aeabi_d2iz>
 8011f76:	9011      	str	r0, [sp, #68]	; 0x44
 8011f78:	f7ee fae4 	bl	8000544 <__aeabi_i2d>
 8011f7c:	4602      	mov	r2, r0
 8011f7e:	460b      	mov	r3, r1
 8011f80:	4630      	mov	r0, r6
 8011f82:	4639      	mov	r1, r7
 8011f84:	f7ee f990 	bl	80002a8 <__aeabi_dsub>
 8011f88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011f8a:	3330      	adds	r3, #48	; 0x30
 8011f8c:	f805 3b01 	strb.w	r3, [r5], #1
 8011f90:	9b02      	ldr	r3, [sp, #8]
 8011f92:	429d      	cmp	r5, r3
 8011f94:	4606      	mov	r6, r0
 8011f96:	460f      	mov	r7, r1
 8011f98:	f04f 0200 	mov.w	r2, #0
 8011f9c:	d134      	bne.n	8012008 <_dtoa_r+0x660>
 8011f9e:	4b19      	ldr	r3, [pc, #100]	; (8012004 <_dtoa_r+0x65c>)
 8011fa0:	ec51 0b18 	vmov	r0, r1, d8
 8011fa4:	f7ee f982 	bl	80002ac <__adddf3>
 8011fa8:	4602      	mov	r2, r0
 8011faa:	460b      	mov	r3, r1
 8011fac:	4630      	mov	r0, r6
 8011fae:	4639      	mov	r1, r7
 8011fb0:	f7ee fdc2 	bl	8000b38 <__aeabi_dcmpgt>
 8011fb4:	2800      	cmp	r0, #0
 8011fb6:	d175      	bne.n	80120a4 <_dtoa_r+0x6fc>
 8011fb8:	ec53 2b18 	vmov	r2, r3, d8
 8011fbc:	4911      	ldr	r1, [pc, #68]	; (8012004 <_dtoa_r+0x65c>)
 8011fbe:	2000      	movs	r0, #0
 8011fc0:	f7ee f972 	bl	80002a8 <__aeabi_dsub>
 8011fc4:	4602      	mov	r2, r0
 8011fc6:	460b      	mov	r3, r1
 8011fc8:	4630      	mov	r0, r6
 8011fca:	4639      	mov	r1, r7
 8011fcc:	f7ee fd96 	bl	8000afc <__aeabi_dcmplt>
 8011fd0:	2800      	cmp	r0, #0
 8011fd2:	f43f af27 	beq.w	8011e24 <_dtoa_r+0x47c>
 8011fd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011fd8:	1e6b      	subs	r3, r5, #1
 8011fda:	930c      	str	r3, [sp, #48]	; 0x30
 8011fdc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011fe0:	2b30      	cmp	r3, #48	; 0x30
 8011fe2:	d0f8      	beq.n	8011fd6 <_dtoa_r+0x62e>
 8011fe4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011fe8:	e04a      	b.n	8012080 <_dtoa_r+0x6d8>
 8011fea:	bf00      	nop
 8011fec:	08015430 	.word	0x08015430
 8011ff0:	08015408 	.word	0x08015408
 8011ff4:	3ff00000 	.word	0x3ff00000
 8011ff8:	40240000 	.word	0x40240000
 8011ffc:	401c0000 	.word	0x401c0000
 8012000:	40140000 	.word	0x40140000
 8012004:	3fe00000 	.word	0x3fe00000
 8012008:	4baf      	ldr	r3, [pc, #700]	; (80122c8 <_dtoa_r+0x920>)
 801200a:	f7ee fb05 	bl	8000618 <__aeabi_dmul>
 801200e:	4606      	mov	r6, r0
 8012010:	460f      	mov	r7, r1
 8012012:	e7ac      	b.n	8011f6e <_dtoa_r+0x5c6>
 8012014:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012018:	9d00      	ldr	r5, [sp, #0]
 801201a:	4642      	mov	r2, r8
 801201c:	464b      	mov	r3, r9
 801201e:	4630      	mov	r0, r6
 8012020:	4639      	mov	r1, r7
 8012022:	f7ee fc23 	bl	800086c <__aeabi_ddiv>
 8012026:	f7ee fda7 	bl	8000b78 <__aeabi_d2iz>
 801202a:	9002      	str	r0, [sp, #8]
 801202c:	f7ee fa8a 	bl	8000544 <__aeabi_i2d>
 8012030:	4642      	mov	r2, r8
 8012032:	464b      	mov	r3, r9
 8012034:	f7ee faf0 	bl	8000618 <__aeabi_dmul>
 8012038:	4602      	mov	r2, r0
 801203a:	460b      	mov	r3, r1
 801203c:	4630      	mov	r0, r6
 801203e:	4639      	mov	r1, r7
 8012040:	f7ee f932 	bl	80002a8 <__aeabi_dsub>
 8012044:	9e02      	ldr	r6, [sp, #8]
 8012046:	9f01      	ldr	r7, [sp, #4]
 8012048:	3630      	adds	r6, #48	; 0x30
 801204a:	f805 6b01 	strb.w	r6, [r5], #1
 801204e:	9e00      	ldr	r6, [sp, #0]
 8012050:	1bae      	subs	r6, r5, r6
 8012052:	42b7      	cmp	r7, r6
 8012054:	4602      	mov	r2, r0
 8012056:	460b      	mov	r3, r1
 8012058:	d137      	bne.n	80120ca <_dtoa_r+0x722>
 801205a:	f7ee f927 	bl	80002ac <__adddf3>
 801205e:	4642      	mov	r2, r8
 8012060:	464b      	mov	r3, r9
 8012062:	4606      	mov	r6, r0
 8012064:	460f      	mov	r7, r1
 8012066:	f7ee fd67 	bl	8000b38 <__aeabi_dcmpgt>
 801206a:	b9c8      	cbnz	r0, 80120a0 <_dtoa_r+0x6f8>
 801206c:	4642      	mov	r2, r8
 801206e:	464b      	mov	r3, r9
 8012070:	4630      	mov	r0, r6
 8012072:	4639      	mov	r1, r7
 8012074:	f7ee fd38 	bl	8000ae8 <__aeabi_dcmpeq>
 8012078:	b110      	cbz	r0, 8012080 <_dtoa_r+0x6d8>
 801207a:	9b02      	ldr	r3, [sp, #8]
 801207c:	07d9      	lsls	r1, r3, #31
 801207e:	d40f      	bmi.n	80120a0 <_dtoa_r+0x6f8>
 8012080:	4620      	mov	r0, r4
 8012082:	4659      	mov	r1, fp
 8012084:	f000 fe6a 	bl	8012d5c <_Bfree>
 8012088:	2300      	movs	r3, #0
 801208a:	702b      	strb	r3, [r5, #0]
 801208c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801208e:	f10a 0001 	add.w	r0, sl, #1
 8012092:	6018      	str	r0, [r3, #0]
 8012094:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012096:	2b00      	cmp	r3, #0
 8012098:	f43f acd8 	beq.w	8011a4c <_dtoa_r+0xa4>
 801209c:	601d      	str	r5, [r3, #0]
 801209e:	e4d5      	b.n	8011a4c <_dtoa_r+0xa4>
 80120a0:	f8cd a01c 	str.w	sl, [sp, #28]
 80120a4:	462b      	mov	r3, r5
 80120a6:	461d      	mov	r5, r3
 80120a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80120ac:	2a39      	cmp	r2, #57	; 0x39
 80120ae:	d108      	bne.n	80120c2 <_dtoa_r+0x71a>
 80120b0:	9a00      	ldr	r2, [sp, #0]
 80120b2:	429a      	cmp	r2, r3
 80120b4:	d1f7      	bne.n	80120a6 <_dtoa_r+0x6fe>
 80120b6:	9a07      	ldr	r2, [sp, #28]
 80120b8:	9900      	ldr	r1, [sp, #0]
 80120ba:	3201      	adds	r2, #1
 80120bc:	9207      	str	r2, [sp, #28]
 80120be:	2230      	movs	r2, #48	; 0x30
 80120c0:	700a      	strb	r2, [r1, #0]
 80120c2:	781a      	ldrb	r2, [r3, #0]
 80120c4:	3201      	adds	r2, #1
 80120c6:	701a      	strb	r2, [r3, #0]
 80120c8:	e78c      	b.n	8011fe4 <_dtoa_r+0x63c>
 80120ca:	4b7f      	ldr	r3, [pc, #508]	; (80122c8 <_dtoa_r+0x920>)
 80120cc:	2200      	movs	r2, #0
 80120ce:	f7ee faa3 	bl	8000618 <__aeabi_dmul>
 80120d2:	2200      	movs	r2, #0
 80120d4:	2300      	movs	r3, #0
 80120d6:	4606      	mov	r6, r0
 80120d8:	460f      	mov	r7, r1
 80120da:	f7ee fd05 	bl	8000ae8 <__aeabi_dcmpeq>
 80120de:	2800      	cmp	r0, #0
 80120e0:	d09b      	beq.n	801201a <_dtoa_r+0x672>
 80120e2:	e7cd      	b.n	8012080 <_dtoa_r+0x6d8>
 80120e4:	9a08      	ldr	r2, [sp, #32]
 80120e6:	2a00      	cmp	r2, #0
 80120e8:	f000 80c4 	beq.w	8012274 <_dtoa_r+0x8cc>
 80120ec:	9a05      	ldr	r2, [sp, #20]
 80120ee:	2a01      	cmp	r2, #1
 80120f0:	f300 80a8 	bgt.w	8012244 <_dtoa_r+0x89c>
 80120f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80120f6:	2a00      	cmp	r2, #0
 80120f8:	f000 80a0 	beq.w	801223c <_dtoa_r+0x894>
 80120fc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012100:	9e06      	ldr	r6, [sp, #24]
 8012102:	4645      	mov	r5, r8
 8012104:	9a04      	ldr	r2, [sp, #16]
 8012106:	2101      	movs	r1, #1
 8012108:	441a      	add	r2, r3
 801210a:	4620      	mov	r0, r4
 801210c:	4498      	add	r8, r3
 801210e:	9204      	str	r2, [sp, #16]
 8012110:	f000 ff2a 	bl	8012f68 <__i2b>
 8012114:	4607      	mov	r7, r0
 8012116:	2d00      	cmp	r5, #0
 8012118:	dd0b      	ble.n	8012132 <_dtoa_r+0x78a>
 801211a:	9b04      	ldr	r3, [sp, #16]
 801211c:	2b00      	cmp	r3, #0
 801211e:	dd08      	ble.n	8012132 <_dtoa_r+0x78a>
 8012120:	42ab      	cmp	r3, r5
 8012122:	9a04      	ldr	r2, [sp, #16]
 8012124:	bfa8      	it	ge
 8012126:	462b      	movge	r3, r5
 8012128:	eba8 0803 	sub.w	r8, r8, r3
 801212c:	1aed      	subs	r5, r5, r3
 801212e:	1ad3      	subs	r3, r2, r3
 8012130:	9304      	str	r3, [sp, #16]
 8012132:	9b06      	ldr	r3, [sp, #24]
 8012134:	b1fb      	cbz	r3, 8012176 <_dtoa_r+0x7ce>
 8012136:	9b08      	ldr	r3, [sp, #32]
 8012138:	2b00      	cmp	r3, #0
 801213a:	f000 809f 	beq.w	801227c <_dtoa_r+0x8d4>
 801213e:	2e00      	cmp	r6, #0
 8012140:	dd11      	ble.n	8012166 <_dtoa_r+0x7be>
 8012142:	4639      	mov	r1, r7
 8012144:	4632      	mov	r2, r6
 8012146:	4620      	mov	r0, r4
 8012148:	f000 ffca 	bl	80130e0 <__pow5mult>
 801214c:	465a      	mov	r2, fp
 801214e:	4601      	mov	r1, r0
 8012150:	4607      	mov	r7, r0
 8012152:	4620      	mov	r0, r4
 8012154:	f000 ff1e 	bl	8012f94 <__multiply>
 8012158:	4659      	mov	r1, fp
 801215a:	9007      	str	r0, [sp, #28]
 801215c:	4620      	mov	r0, r4
 801215e:	f000 fdfd 	bl	8012d5c <_Bfree>
 8012162:	9b07      	ldr	r3, [sp, #28]
 8012164:	469b      	mov	fp, r3
 8012166:	9b06      	ldr	r3, [sp, #24]
 8012168:	1b9a      	subs	r2, r3, r6
 801216a:	d004      	beq.n	8012176 <_dtoa_r+0x7ce>
 801216c:	4659      	mov	r1, fp
 801216e:	4620      	mov	r0, r4
 8012170:	f000 ffb6 	bl	80130e0 <__pow5mult>
 8012174:	4683      	mov	fp, r0
 8012176:	2101      	movs	r1, #1
 8012178:	4620      	mov	r0, r4
 801217a:	f000 fef5 	bl	8012f68 <__i2b>
 801217e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012180:	2b00      	cmp	r3, #0
 8012182:	4606      	mov	r6, r0
 8012184:	dd7c      	ble.n	8012280 <_dtoa_r+0x8d8>
 8012186:	461a      	mov	r2, r3
 8012188:	4601      	mov	r1, r0
 801218a:	4620      	mov	r0, r4
 801218c:	f000 ffa8 	bl	80130e0 <__pow5mult>
 8012190:	9b05      	ldr	r3, [sp, #20]
 8012192:	2b01      	cmp	r3, #1
 8012194:	4606      	mov	r6, r0
 8012196:	dd76      	ble.n	8012286 <_dtoa_r+0x8de>
 8012198:	2300      	movs	r3, #0
 801219a:	9306      	str	r3, [sp, #24]
 801219c:	6933      	ldr	r3, [r6, #16]
 801219e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80121a2:	6918      	ldr	r0, [r3, #16]
 80121a4:	f000 fe90 	bl	8012ec8 <__hi0bits>
 80121a8:	f1c0 0020 	rsb	r0, r0, #32
 80121ac:	9b04      	ldr	r3, [sp, #16]
 80121ae:	4418      	add	r0, r3
 80121b0:	f010 001f 	ands.w	r0, r0, #31
 80121b4:	f000 8086 	beq.w	80122c4 <_dtoa_r+0x91c>
 80121b8:	f1c0 0320 	rsb	r3, r0, #32
 80121bc:	2b04      	cmp	r3, #4
 80121be:	dd7f      	ble.n	80122c0 <_dtoa_r+0x918>
 80121c0:	f1c0 001c 	rsb	r0, r0, #28
 80121c4:	9b04      	ldr	r3, [sp, #16]
 80121c6:	4403      	add	r3, r0
 80121c8:	4480      	add	r8, r0
 80121ca:	4405      	add	r5, r0
 80121cc:	9304      	str	r3, [sp, #16]
 80121ce:	f1b8 0f00 	cmp.w	r8, #0
 80121d2:	dd05      	ble.n	80121e0 <_dtoa_r+0x838>
 80121d4:	4659      	mov	r1, fp
 80121d6:	4642      	mov	r2, r8
 80121d8:	4620      	mov	r0, r4
 80121da:	f000 ffdb 	bl	8013194 <__lshift>
 80121de:	4683      	mov	fp, r0
 80121e0:	9b04      	ldr	r3, [sp, #16]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	dd05      	ble.n	80121f2 <_dtoa_r+0x84a>
 80121e6:	4631      	mov	r1, r6
 80121e8:	461a      	mov	r2, r3
 80121ea:	4620      	mov	r0, r4
 80121ec:	f000 ffd2 	bl	8013194 <__lshift>
 80121f0:	4606      	mov	r6, r0
 80121f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d069      	beq.n	80122cc <_dtoa_r+0x924>
 80121f8:	4631      	mov	r1, r6
 80121fa:	4658      	mov	r0, fp
 80121fc:	f001 f836 	bl	801326c <__mcmp>
 8012200:	2800      	cmp	r0, #0
 8012202:	da63      	bge.n	80122cc <_dtoa_r+0x924>
 8012204:	2300      	movs	r3, #0
 8012206:	4659      	mov	r1, fp
 8012208:	220a      	movs	r2, #10
 801220a:	4620      	mov	r0, r4
 801220c:	f000 fdc8 	bl	8012da0 <__multadd>
 8012210:	9b08      	ldr	r3, [sp, #32]
 8012212:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012216:	4683      	mov	fp, r0
 8012218:	2b00      	cmp	r3, #0
 801221a:	f000 818f 	beq.w	801253c <_dtoa_r+0xb94>
 801221e:	4639      	mov	r1, r7
 8012220:	2300      	movs	r3, #0
 8012222:	220a      	movs	r2, #10
 8012224:	4620      	mov	r0, r4
 8012226:	f000 fdbb 	bl	8012da0 <__multadd>
 801222a:	f1b9 0f00 	cmp.w	r9, #0
 801222e:	4607      	mov	r7, r0
 8012230:	f300 808e 	bgt.w	8012350 <_dtoa_r+0x9a8>
 8012234:	9b05      	ldr	r3, [sp, #20]
 8012236:	2b02      	cmp	r3, #2
 8012238:	dc50      	bgt.n	80122dc <_dtoa_r+0x934>
 801223a:	e089      	b.n	8012350 <_dtoa_r+0x9a8>
 801223c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801223e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012242:	e75d      	b.n	8012100 <_dtoa_r+0x758>
 8012244:	9b01      	ldr	r3, [sp, #4]
 8012246:	1e5e      	subs	r6, r3, #1
 8012248:	9b06      	ldr	r3, [sp, #24]
 801224a:	42b3      	cmp	r3, r6
 801224c:	bfbf      	itttt	lt
 801224e:	9b06      	ldrlt	r3, [sp, #24]
 8012250:	9606      	strlt	r6, [sp, #24]
 8012252:	1af2      	sublt	r2, r6, r3
 8012254:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8012256:	bfb6      	itet	lt
 8012258:	189b      	addlt	r3, r3, r2
 801225a:	1b9e      	subge	r6, r3, r6
 801225c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801225e:	9b01      	ldr	r3, [sp, #4]
 8012260:	bfb8      	it	lt
 8012262:	2600      	movlt	r6, #0
 8012264:	2b00      	cmp	r3, #0
 8012266:	bfb5      	itete	lt
 8012268:	eba8 0503 	sublt.w	r5, r8, r3
 801226c:	9b01      	ldrge	r3, [sp, #4]
 801226e:	2300      	movlt	r3, #0
 8012270:	4645      	movge	r5, r8
 8012272:	e747      	b.n	8012104 <_dtoa_r+0x75c>
 8012274:	9e06      	ldr	r6, [sp, #24]
 8012276:	9f08      	ldr	r7, [sp, #32]
 8012278:	4645      	mov	r5, r8
 801227a:	e74c      	b.n	8012116 <_dtoa_r+0x76e>
 801227c:	9a06      	ldr	r2, [sp, #24]
 801227e:	e775      	b.n	801216c <_dtoa_r+0x7c4>
 8012280:	9b05      	ldr	r3, [sp, #20]
 8012282:	2b01      	cmp	r3, #1
 8012284:	dc18      	bgt.n	80122b8 <_dtoa_r+0x910>
 8012286:	9b02      	ldr	r3, [sp, #8]
 8012288:	b9b3      	cbnz	r3, 80122b8 <_dtoa_r+0x910>
 801228a:	9b03      	ldr	r3, [sp, #12]
 801228c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012290:	b9a3      	cbnz	r3, 80122bc <_dtoa_r+0x914>
 8012292:	9b03      	ldr	r3, [sp, #12]
 8012294:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012298:	0d1b      	lsrs	r3, r3, #20
 801229a:	051b      	lsls	r3, r3, #20
 801229c:	b12b      	cbz	r3, 80122aa <_dtoa_r+0x902>
 801229e:	9b04      	ldr	r3, [sp, #16]
 80122a0:	3301      	adds	r3, #1
 80122a2:	9304      	str	r3, [sp, #16]
 80122a4:	f108 0801 	add.w	r8, r8, #1
 80122a8:	2301      	movs	r3, #1
 80122aa:	9306      	str	r3, [sp, #24]
 80122ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	f47f af74 	bne.w	801219c <_dtoa_r+0x7f4>
 80122b4:	2001      	movs	r0, #1
 80122b6:	e779      	b.n	80121ac <_dtoa_r+0x804>
 80122b8:	2300      	movs	r3, #0
 80122ba:	e7f6      	b.n	80122aa <_dtoa_r+0x902>
 80122bc:	9b02      	ldr	r3, [sp, #8]
 80122be:	e7f4      	b.n	80122aa <_dtoa_r+0x902>
 80122c0:	d085      	beq.n	80121ce <_dtoa_r+0x826>
 80122c2:	4618      	mov	r0, r3
 80122c4:	301c      	adds	r0, #28
 80122c6:	e77d      	b.n	80121c4 <_dtoa_r+0x81c>
 80122c8:	40240000 	.word	0x40240000
 80122cc:	9b01      	ldr	r3, [sp, #4]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	dc38      	bgt.n	8012344 <_dtoa_r+0x99c>
 80122d2:	9b05      	ldr	r3, [sp, #20]
 80122d4:	2b02      	cmp	r3, #2
 80122d6:	dd35      	ble.n	8012344 <_dtoa_r+0x99c>
 80122d8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80122dc:	f1b9 0f00 	cmp.w	r9, #0
 80122e0:	d10d      	bne.n	80122fe <_dtoa_r+0x956>
 80122e2:	4631      	mov	r1, r6
 80122e4:	464b      	mov	r3, r9
 80122e6:	2205      	movs	r2, #5
 80122e8:	4620      	mov	r0, r4
 80122ea:	f000 fd59 	bl	8012da0 <__multadd>
 80122ee:	4601      	mov	r1, r0
 80122f0:	4606      	mov	r6, r0
 80122f2:	4658      	mov	r0, fp
 80122f4:	f000 ffba 	bl	801326c <__mcmp>
 80122f8:	2800      	cmp	r0, #0
 80122fa:	f73f adbd 	bgt.w	8011e78 <_dtoa_r+0x4d0>
 80122fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012300:	9d00      	ldr	r5, [sp, #0]
 8012302:	ea6f 0a03 	mvn.w	sl, r3
 8012306:	f04f 0800 	mov.w	r8, #0
 801230a:	4631      	mov	r1, r6
 801230c:	4620      	mov	r0, r4
 801230e:	f000 fd25 	bl	8012d5c <_Bfree>
 8012312:	2f00      	cmp	r7, #0
 8012314:	f43f aeb4 	beq.w	8012080 <_dtoa_r+0x6d8>
 8012318:	f1b8 0f00 	cmp.w	r8, #0
 801231c:	d005      	beq.n	801232a <_dtoa_r+0x982>
 801231e:	45b8      	cmp	r8, r7
 8012320:	d003      	beq.n	801232a <_dtoa_r+0x982>
 8012322:	4641      	mov	r1, r8
 8012324:	4620      	mov	r0, r4
 8012326:	f000 fd19 	bl	8012d5c <_Bfree>
 801232a:	4639      	mov	r1, r7
 801232c:	4620      	mov	r0, r4
 801232e:	f000 fd15 	bl	8012d5c <_Bfree>
 8012332:	e6a5      	b.n	8012080 <_dtoa_r+0x6d8>
 8012334:	2600      	movs	r6, #0
 8012336:	4637      	mov	r7, r6
 8012338:	e7e1      	b.n	80122fe <_dtoa_r+0x956>
 801233a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801233c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012340:	4637      	mov	r7, r6
 8012342:	e599      	b.n	8011e78 <_dtoa_r+0x4d0>
 8012344:	9b08      	ldr	r3, [sp, #32]
 8012346:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801234a:	2b00      	cmp	r3, #0
 801234c:	f000 80fd 	beq.w	801254a <_dtoa_r+0xba2>
 8012350:	2d00      	cmp	r5, #0
 8012352:	dd05      	ble.n	8012360 <_dtoa_r+0x9b8>
 8012354:	4639      	mov	r1, r7
 8012356:	462a      	mov	r2, r5
 8012358:	4620      	mov	r0, r4
 801235a:	f000 ff1b 	bl	8013194 <__lshift>
 801235e:	4607      	mov	r7, r0
 8012360:	9b06      	ldr	r3, [sp, #24]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d05c      	beq.n	8012420 <_dtoa_r+0xa78>
 8012366:	6879      	ldr	r1, [r7, #4]
 8012368:	4620      	mov	r0, r4
 801236a:	f000 fcb7 	bl	8012cdc <_Balloc>
 801236e:	4605      	mov	r5, r0
 8012370:	b928      	cbnz	r0, 801237e <_dtoa_r+0x9d6>
 8012372:	4b80      	ldr	r3, [pc, #512]	; (8012574 <_dtoa_r+0xbcc>)
 8012374:	4602      	mov	r2, r0
 8012376:	f240 21ea 	movw	r1, #746	; 0x2ea
 801237a:	f7ff bb2e 	b.w	80119da <_dtoa_r+0x32>
 801237e:	693a      	ldr	r2, [r7, #16]
 8012380:	3202      	adds	r2, #2
 8012382:	0092      	lsls	r2, r2, #2
 8012384:	f107 010c 	add.w	r1, r7, #12
 8012388:	300c      	adds	r0, #12
 801238a:	f000 fc99 	bl	8012cc0 <memcpy>
 801238e:	2201      	movs	r2, #1
 8012390:	4629      	mov	r1, r5
 8012392:	4620      	mov	r0, r4
 8012394:	f000 fefe 	bl	8013194 <__lshift>
 8012398:	9b00      	ldr	r3, [sp, #0]
 801239a:	3301      	adds	r3, #1
 801239c:	9301      	str	r3, [sp, #4]
 801239e:	9b00      	ldr	r3, [sp, #0]
 80123a0:	444b      	add	r3, r9
 80123a2:	9307      	str	r3, [sp, #28]
 80123a4:	9b02      	ldr	r3, [sp, #8]
 80123a6:	f003 0301 	and.w	r3, r3, #1
 80123aa:	46b8      	mov	r8, r7
 80123ac:	9306      	str	r3, [sp, #24]
 80123ae:	4607      	mov	r7, r0
 80123b0:	9b01      	ldr	r3, [sp, #4]
 80123b2:	4631      	mov	r1, r6
 80123b4:	3b01      	subs	r3, #1
 80123b6:	4658      	mov	r0, fp
 80123b8:	9302      	str	r3, [sp, #8]
 80123ba:	f7ff fa69 	bl	8011890 <quorem>
 80123be:	4603      	mov	r3, r0
 80123c0:	3330      	adds	r3, #48	; 0x30
 80123c2:	9004      	str	r0, [sp, #16]
 80123c4:	4641      	mov	r1, r8
 80123c6:	4658      	mov	r0, fp
 80123c8:	9308      	str	r3, [sp, #32]
 80123ca:	f000 ff4f 	bl	801326c <__mcmp>
 80123ce:	463a      	mov	r2, r7
 80123d0:	4681      	mov	r9, r0
 80123d2:	4631      	mov	r1, r6
 80123d4:	4620      	mov	r0, r4
 80123d6:	f000 ff65 	bl	80132a4 <__mdiff>
 80123da:	68c2      	ldr	r2, [r0, #12]
 80123dc:	9b08      	ldr	r3, [sp, #32]
 80123de:	4605      	mov	r5, r0
 80123e0:	bb02      	cbnz	r2, 8012424 <_dtoa_r+0xa7c>
 80123e2:	4601      	mov	r1, r0
 80123e4:	4658      	mov	r0, fp
 80123e6:	f000 ff41 	bl	801326c <__mcmp>
 80123ea:	9b08      	ldr	r3, [sp, #32]
 80123ec:	4602      	mov	r2, r0
 80123ee:	4629      	mov	r1, r5
 80123f0:	4620      	mov	r0, r4
 80123f2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80123f6:	f000 fcb1 	bl	8012d5c <_Bfree>
 80123fa:	9b05      	ldr	r3, [sp, #20]
 80123fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80123fe:	9d01      	ldr	r5, [sp, #4]
 8012400:	ea43 0102 	orr.w	r1, r3, r2
 8012404:	9b06      	ldr	r3, [sp, #24]
 8012406:	430b      	orrs	r3, r1
 8012408:	9b08      	ldr	r3, [sp, #32]
 801240a:	d10d      	bne.n	8012428 <_dtoa_r+0xa80>
 801240c:	2b39      	cmp	r3, #57	; 0x39
 801240e:	d029      	beq.n	8012464 <_dtoa_r+0xabc>
 8012410:	f1b9 0f00 	cmp.w	r9, #0
 8012414:	dd01      	ble.n	801241a <_dtoa_r+0xa72>
 8012416:	9b04      	ldr	r3, [sp, #16]
 8012418:	3331      	adds	r3, #49	; 0x31
 801241a:	9a02      	ldr	r2, [sp, #8]
 801241c:	7013      	strb	r3, [r2, #0]
 801241e:	e774      	b.n	801230a <_dtoa_r+0x962>
 8012420:	4638      	mov	r0, r7
 8012422:	e7b9      	b.n	8012398 <_dtoa_r+0x9f0>
 8012424:	2201      	movs	r2, #1
 8012426:	e7e2      	b.n	80123ee <_dtoa_r+0xa46>
 8012428:	f1b9 0f00 	cmp.w	r9, #0
 801242c:	db06      	blt.n	801243c <_dtoa_r+0xa94>
 801242e:	9905      	ldr	r1, [sp, #20]
 8012430:	ea41 0909 	orr.w	r9, r1, r9
 8012434:	9906      	ldr	r1, [sp, #24]
 8012436:	ea59 0101 	orrs.w	r1, r9, r1
 801243a:	d120      	bne.n	801247e <_dtoa_r+0xad6>
 801243c:	2a00      	cmp	r2, #0
 801243e:	ddec      	ble.n	801241a <_dtoa_r+0xa72>
 8012440:	4659      	mov	r1, fp
 8012442:	2201      	movs	r2, #1
 8012444:	4620      	mov	r0, r4
 8012446:	9301      	str	r3, [sp, #4]
 8012448:	f000 fea4 	bl	8013194 <__lshift>
 801244c:	4631      	mov	r1, r6
 801244e:	4683      	mov	fp, r0
 8012450:	f000 ff0c 	bl	801326c <__mcmp>
 8012454:	2800      	cmp	r0, #0
 8012456:	9b01      	ldr	r3, [sp, #4]
 8012458:	dc02      	bgt.n	8012460 <_dtoa_r+0xab8>
 801245a:	d1de      	bne.n	801241a <_dtoa_r+0xa72>
 801245c:	07da      	lsls	r2, r3, #31
 801245e:	d5dc      	bpl.n	801241a <_dtoa_r+0xa72>
 8012460:	2b39      	cmp	r3, #57	; 0x39
 8012462:	d1d8      	bne.n	8012416 <_dtoa_r+0xa6e>
 8012464:	9a02      	ldr	r2, [sp, #8]
 8012466:	2339      	movs	r3, #57	; 0x39
 8012468:	7013      	strb	r3, [r2, #0]
 801246a:	462b      	mov	r3, r5
 801246c:	461d      	mov	r5, r3
 801246e:	3b01      	subs	r3, #1
 8012470:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012474:	2a39      	cmp	r2, #57	; 0x39
 8012476:	d050      	beq.n	801251a <_dtoa_r+0xb72>
 8012478:	3201      	adds	r2, #1
 801247a:	701a      	strb	r2, [r3, #0]
 801247c:	e745      	b.n	801230a <_dtoa_r+0x962>
 801247e:	2a00      	cmp	r2, #0
 8012480:	dd03      	ble.n	801248a <_dtoa_r+0xae2>
 8012482:	2b39      	cmp	r3, #57	; 0x39
 8012484:	d0ee      	beq.n	8012464 <_dtoa_r+0xabc>
 8012486:	3301      	adds	r3, #1
 8012488:	e7c7      	b.n	801241a <_dtoa_r+0xa72>
 801248a:	9a01      	ldr	r2, [sp, #4]
 801248c:	9907      	ldr	r1, [sp, #28]
 801248e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012492:	428a      	cmp	r2, r1
 8012494:	d02a      	beq.n	80124ec <_dtoa_r+0xb44>
 8012496:	4659      	mov	r1, fp
 8012498:	2300      	movs	r3, #0
 801249a:	220a      	movs	r2, #10
 801249c:	4620      	mov	r0, r4
 801249e:	f000 fc7f 	bl	8012da0 <__multadd>
 80124a2:	45b8      	cmp	r8, r7
 80124a4:	4683      	mov	fp, r0
 80124a6:	f04f 0300 	mov.w	r3, #0
 80124aa:	f04f 020a 	mov.w	r2, #10
 80124ae:	4641      	mov	r1, r8
 80124b0:	4620      	mov	r0, r4
 80124b2:	d107      	bne.n	80124c4 <_dtoa_r+0xb1c>
 80124b4:	f000 fc74 	bl	8012da0 <__multadd>
 80124b8:	4680      	mov	r8, r0
 80124ba:	4607      	mov	r7, r0
 80124bc:	9b01      	ldr	r3, [sp, #4]
 80124be:	3301      	adds	r3, #1
 80124c0:	9301      	str	r3, [sp, #4]
 80124c2:	e775      	b.n	80123b0 <_dtoa_r+0xa08>
 80124c4:	f000 fc6c 	bl	8012da0 <__multadd>
 80124c8:	4639      	mov	r1, r7
 80124ca:	4680      	mov	r8, r0
 80124cc:	2300      	movs	r3, #0
 80124ce:	220a      	movs	r2, #10
 80124d0:	4620      	mov	r0, r4
 80124d2:	f000 fc65 	bl	8012da0 <__multadd>
 80124d6:	4607      	mov	r7, r0
 80124d8:	e7f0      	b.n	80124bc <_dtoa_r+0xb14>
 80124da:	f1b9 0f00 	cmp.w	r9, #0
 80124de:	9a00      	ldr	r2, [sp, #0]
 80124e0:	bfcc      	ite	gt
 80124e2:	464d      	movgt	r5, r9
 80124e4:	2501      	movle	r5, #1
 80124e6:	4415      	add	r5, r2
 80124e8:	f04f 0800 	mov.w	r8, #0
 80124ec:	4659      	mov	r1, fp
 80124ee:	2201      	movs	r2, #1
 80124f0:	4620      	mov	r0, r4
 80124f2:	9301      	str	r3, [sp, #4]
 80124f4:	f000 fe4e 	bl	8013194 <__lshift>
 80124f8:	4631      	mov	r1, r6
 80124fa:	4683      	mov	fp, r0
 80124fc:	f000 feb6 	bl	801326c <__mcmp>
 8012500:	2800      	cmp	r0, #0
 8012502:	dcb2      	bgt.n	801246a <_dtoa_r+0xac2>
 8012504:	d102      	bne.n	801250c <_dtoa_r+0xb64>
 8012506:	9b01      	ldr	r3, [sp, #4]
 8012508:	07db      	lsls	r3, r3, #31
 801250a:	d4ae      	bmi.n	801246a <_dtoa_r+0xac2>
 801250c:	462b      	mov	r3, r5
 801250e:	461d      	mov	r5, r3
 8012510:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012514:	2a30      	cmp	r2, #48	; 0x30
 8012516:	d0fa      	beq.n	801250e <_dtoa_r+0xb66>
 8012518:	e6f7      	b.n	801230a <_dtoa_r+0x962>
 801251a:	9a00      	ldr	r2, [sp, #0]
 801251c:	429a      	cmp	r2, r3
 801251e:	d1a5      	bne.n	801246c <_dtoa_r+0xac4>
 8012520:	f10a 0a01 	add.w	sl, sl, #1
 8012524:	2331      	movs	r3, #49	; 0x31
 8012526:	e779      	b.n	801241c <_dtoa_r+0xa74>
 8012528:	4b13      	ldr	r3, [pc, #76]	; (8012578 <_dtoa_r+0xbd0>)
 801252a:	f7ff baaf 	b.w	8011a8c <_dtoa_r+0xe4>
 801252e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012530:	2b00      	cmp	r3, #0
 8012532:	f47f aa86 	bne.w	8011a42 <_dtoa_r+0x9a>
 8012536:	4b11      	ldr	r3, [pc, #68]	; (801257c <_dtoa_r+0xbd4>)
 8012538:	f7ff baa8 	b.w	8011a8c <_dtoa_r+0xe4>
 801253c:	f1b9 0f00 	cmp.w	r9, #0
 8012540:	dc03      	bgt.n	801254a <_dtoa_r+0xba2>
 8012542:	9b05      	ldr	r3, [sp, #20]
 8012544:	2b02      	cmp	r3, #2
 8012546:	f73f aec9 	bgt.w	80122dc <_dtoa_r+0x934>
 801254a:	9d00      	ldr	r5, [sp, #0]
 801254c:	4631      	mov	r1, r6
 801254e:	4658      	mov	r0, fp
 8012550:	f7ff f99e 	bl	8011890 <quorem>
 8012554:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012558:	f805 3b01 	strb.w	r3, [r5], #1
 801255c:	9a00      	ldr	r2, [sp, #0]
 801255e:	1aaa      	subs	r2, r5, r2
 8012560:	4591      	cmp	r9, r2
 8012562:	ddba      	ble.n	80124da <_dtoa_r+0xb32>
 8012564:	4659      	mov	r1, fp
 8012566:	2300      	movs	r3, #0
 8012568:	220a      	movs	r2, #10
 801256a:	4620      	mov	r0, r4
 801256c:	f000 fc18 	bl	8012da0 <__multadd>
 8012570:	4683      	mov	fp, r0
 8012572:	e7eb      	b.n	801254c <_dtoa_r+0xba4>
 8012574:	08015313 	.word	0x08015313
 8012578:	08015519 	.word	0x08015519
 801257c:	08015290 	.word	0x08015290

08012580 <rshift>:
 8012580:	6903      	ldr	r3, [r0, #16]
 8012582:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012586:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801258a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801258e:	f100 0414 	add.w	r4, r0, #20
 8012592:	dd45      	ble.n	8012620 <rshift+0xa0>
 8012594:	f011 011f 	ands.w	r1, r1, #31
 8012598:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801259c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80125a0:	d10c      	bne.n	80125bc <rshift+0x3c>
 80125a2:	f100 0710 	add.w	r7, r0, #16
 80125a6:	4629      	mov	r1, r5
 80125a8:	42b1      	cmp	r1, r6
 80125aa:	d334      	bcc.n	8012616 <rshift+0x96>
 80125ac:	1a9b      	subs	r3, r3, r2
 80125ae:	009b      	lsls	r3, r3, #2
 80125b0:	1eea      	subs	r2, r5, #3
 80125b2:	4296      	cmp	r6, r2
 80125b4:	bf38      	it	cc
 80125b6:	2300      	movcc	r3, #0
 80125b8:	4423      	add	r3, r4
 80125ba:	e015      	b.n	80125e8 <rshift+0x68>
 80125bc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80125c0:	f1c1 0820 	rsb	r8, r1, #32
 80125c4:	40cf      	lsrs	r7, r1
 80125c6:	f105 0e04 	add.w	lr, r5, #4
 80125ca:	46a1      	mov	r9, r4
 80125cc:	4576      	cmp	r6, lr
 80125ce:	46f4      	mov	ip, lr
 80125d0:	d815      	bhi.n	80125fe <rshift+0x7e>
 80125d2:	1a9b      	subs	r3, r3, r2
 80125d4:	009a      	lsls	r2, r3, #2
 80125d6:	3a04      	subs	r2, #4
 80125d8:	3501      	adds	r5, #1
 80125da:	42ae      	cmp	r6, r5
 80125dc:	bf38      	it	cc
 80125de:	2200      	movcc	r2, #0
 80125e0:	18a3      	adds	r3, r4, r2
 80125e2:	50a7      	str	r7, [r4, r2]
 80125e4:	b107      	cbz	r7, 80125e8 <rshift+0x68>
 80125e6:	3304      	adds	r3, #4
 80125e8:	1b1a      	subs	r2, r3, r4
 80125ea:	42a3      	cmp	r3, r4
 80125ec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80125f0:	bf08      	it	eq
 80125f2:	2300      	moveq	r3, #0
 80125f4:	6102      	str	r2, [r0, #16]
 80125f6:	bf08      	it	eq
 80125f8:	6143      	streq	r3, [r0, #20]
 80125fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80125fe:	f8dc c000 	ldr.w	ip, [ip]
 8012602:	fa0c fc08 	lsl.w	ip, ip, r8
 8012606:	ea4c 0707 	orr.w	r7, ip, r7
 801260a:	f849 7b04 	str.w	r7, [r9], #4
 801260e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012612:	40cf      	lsrs	r7, r1
 8012614:	e7da      	b.n	80125cc <rshift+0x4c>
 8012616:	f851 cb04 	ldr.w	ip, [r1], #4
 801261a:	f847 cf04 	str.w	ip, [r7, #4]!
 801261e:	e7c3      	b.n	80125a8 <rshift+0x28>
 8012620:	4623      	mov	r3, r4
 8012622:	e7e1      	b.n	80125e8 <rshift+0x68>

08012624 <__hexdig_fun>:
 8012624:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012628:	2b09      	cmp	r3, #9
 801262a:	d802      	bhi.n	8012632 <__hexdig_fun+0xe>
 801262c:	3820      	subs	r0, #32
 801262e:	b2c0      	uxtb	r0, r0
 8012630:	4770      	bx	lr
 8012632:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012636:	2b05      	cmp	r3, #5
 8012638:	d801      	bhi.n	801263e <__hexdig_fun+0x1a>
 801263a:	3847      	subs	r0, #71	; 0x47
 801263c:	e7f7      	b.n	801262e <__hexdig_fun+0xa>
 801263e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012642:	2b05      	cmp	r3, #5
 8012644:	d801      	bhi.n	801264a <__hexdig_fun+0x26>
 8012646:	3827      	subs	r0, #39	; 0x27
 8012648:	e7f1      	b.n	801262e <__hexdig_fun+0xa>
 801264a:	2000      	movs	r0, #0
 801264c:	4770      	bx	lr
	...

08012650 <__gethex>:
 8012650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012654:	ed2d 8b02 	vpush	{d8}
 8012658:	b089      	sub	sp, #36	; 0x24
 801265a:	ee08 0a10 	vmov	s16, r0
 801265e:	9304      	str	r3, [sp, #16]
 8012660:	4bbc      	ldr	r3, [pc, #752]	; (8012954 <__gethex+0x304>)
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	9301      	str	r3, [sp, #4]
 8012666:	4618      	mov	r0, r3
 8012668:	468b      	mov	fp, r1
 801266a:	4690      	mov	r8, r2
 801266c:	f7ed fdc0 	bl	80001f0 <strlen>
 8012670:	9b01      	ldr	r3, [sp, #4]
 8012672:	f8db 2000 	ldr.w	r2, [fp]
 8012676:	4403      	add	r3, r0
 8012678:	4682      	mov	sl, r0
 801267a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801267e:	9305      	str	r3, [sp, #20]
 8012680:	1c93      	adds	r3, r2, #2
 8012682:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8012686:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801268a:	32fe      	adds	r2, #254	; 0xfe
 801268c:	18d1      	adds	r1, r2, r3
 801268e:	461f      	mov	r7, r3
 8012690:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012694:	9100      	str	r1, [sp, #0]
 8012696:	2830      	cmp	r0, #48	; 0x30
 8012698:	d0f8      	beq.n	801268c <__gethex+0x3c>
 801269a:	f7ff ffc3 	bl	8012624 <__hexdig_fun>
 801269e:	4604      	mov	r4, r0
 80126a0:	2800      	cmp	r0, #0
 80126a2:	d13a      	bne.n	801271a <__gethex+0xca>
 80126a4:	9901      	ldr	r1, [sp, #4]
 80126a6:	4652      	mov	r2, sl
 80126a8:	4638      	mov	r0, r7
 80126aa:	f7fe f9c4 	bl	8010a36 <strncmp>
 80126ae:	4605      	mov	r5, r0
 80126b0:	2800      	cmp	r0, #0
 80126b2:	d168      	bne.n	8012786 <__gethex+0x136>
 80126b4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80126b8:	eb07 060a 	add.w	r6, r7, sl
 80126bc:	f7ff ffb2 	bl	8012624 <__hexdig_fun>
 80126c0:	2800      	cmp	r0, #0
 80126c2:	d062      	beq.n	801278a <__gethex+0x13a>
 80126c4:	4633      	mov	r3, r6
 80126c6:	7818      	ldrb	r0, [r3, #0]
 80126c8:	2830      	cmp	r0, #48	; 0x30
 80126ca:	461f      	mov	r7, r3
 80126cc:	f103 0301 	add.w	r3, r3, #1
 80126d0:	d0f9      	beq.n	80126c6 <__gethex+0x76>
 80126d2:	f7ff ffa7 	bl	8012624 <__hexdig_fun>
 80126d6:	2301      	movs	r3, #1
 80126d8:	fab0 f480 	clz	r4, r0
 80126dc:	0964      	lsrs	r4, r4, #5
 80126de:	4635      	mov	r5, r6
 80126e0:	9300      	str	r3, [sp, #0]
 80126e2:	463a      	mov	r2, r7
 80126e4:	4616      	mov	r6, r2
 80126e6:	3201      	adds	r2, #1
 80126e8:	7830      	ldrb	r0, [r6, #0]
 80126ea:	f7ff ff9b 	bl	8012624 <__hexdig_fun>
 80126ee:	2800      	cmp	r0, #0
 80126f0:	d1f8      	bne.n	80126e4 <__gethex+0x94>
 80126f2:	9901      	ldr	r1, [sp, #4]
 80126f4:	4652      	mov	r2, sl
 80126f6:	4630      	mov	r0, r6
 80126f8:	f7fe f99d 	bl	8010a36 <strncmp>
 80126fc:	b980      	cbnz	r0, 8012720 <__gethex+0xd0>
 80126fe:	b94d      	cbnz	r5, 8012714 <__gethex+0xc4>
 8012700:	eb06 050a 	add.w	r5, r6, sl
 8012704:	462a      	mov	r2, r5
 8012706:	4616      	mov	r6, r2
 8012708:	3201      	adds	r2, #1
 801270a:	7830      	ldrb	r0, [r6, #0]
 801270c:	f7ff ff8a 	bl	8012624 <__hexdig_fun>
 8012710:	2800      	cmp	r0, #0
 8012712:	d1f8      	bne.n	8012706 <__gethex+0xb6>
 8012714:	1bad      	subs	r5, r5, r6
 8012716:	00ad      	lsls	r5, r5, #2
 8012718:	e004      	b.n	8012724 <__gethex+0xd4>
 801271a:	2400      	movs	r4, #0
 801271c:	4625      	mov	r5, r4
 801271e:	e7e0      	b.n	80126e2 <__gethex+0x92>
 8012720:	2d00      	cmp	r5, #0
 8012722:	d1f7      	bne.n	8012714 <__gethex+0xc4>
 8012724:	7833      	ldrb	r3, [r6, #0]
 8012726:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801272a:	2b50      	cmp	r3, #80	; 0x50
 801272c:	d13b      	bne.n	80127a6 <__gethex+0x156>
 801272e:	7873      	ldrb	r3, [r6, #1]
 8012730:	2b2b      	cmp	r3, #43	; 0x2b
 8012732:	d02c      	beq.n	801278e <__gethex+0x13e>
 8012734:	2b2d      	cmp	r3, #45	; 0x2d
 8012736:	d02e      	beq.n	8012796 <__gethex+0x146>
 8012738:	1c71      	adds	r1, r6, #1
 801273a:	f04f 0900 	mov.w	r9, #0
 801273e:	7808      	ldrb	r0, [r1, #0]
 8012740:	f7ff ff70 	bl	8012624 <__hexdig_fun>
 8012744:	1e43      	subs	r3, r0, #1
 8012746:	b2db      	uxtb	r3, r3
 8012748:	2b18      	cmp	r3, #24
 801274a:	d82c      	bhi.n	80127a6 <__gethex+0x156>
 801274c:	f1a0 0210 	sub.w	r2, r0, #16
 8012750:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012754:	f7ff ff66 	bl	8012624 <__hexdig_fun>
 8012758:	1e43      	subs	r3, r0, #1
 801275a:	b2db      	uxtb	r3, r3
 801275c:	2b18      	cmp	r3, #24
 801275e:	d91d      	bls.n	801279c <__gethex+0x14c>
 8012760:	f1b9 0f00 	cmp.w	r9, #0
 8012764:	d000      	beq.n	8012768 <__gethex+0x118>
 8012766:	4252      	negs	r2, r2
 8012768:	4415      	add	r5, r2
 801276a:	f8cb 1000 	str.w	r1, [fp]
 801276e:	b1e4      	cbz	r4, 80127aa <__gethex+0x15a>
 8012770:	9b00      	ldr	r3, [sp, #0]
 8012772:	2b00      	cmp	r3, #0
 8012774:	bf14      	ite	ne
 8012776:	2700      	movne	r7, #0
 8012778:	2706      	moveq	r7, #6
 801277a:	4638      	mov	r0, r7
 801277c:	b009      	add	sp, #36	; 0x24
 801277e:	ecbd 8b02 	vpop	{d8}
 8012782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012786:	463e      	mov	r6, r7
 8012788:	4625      	mov	r5, r4
 801278a:	2401      	movs	r4, #1
 801278c:	e7ca      	b.n	8012724 <__gethex+0xd4>
 801278e:	f04f 0900 	mov.w	r9, #0
 8012792:	1cb1      	adds	r1, r6, #2
 8012794:	e7d3      	b.n	801273e <__gethex+0xee>
 8012796:	f04f 0901 	mov.w	r9, #1
 801279a:	e7fa      	b.n	8012792 <__gethex+0x142>
 801279c:	230a      	movs	r3, #10
 801279e:	fb03 0202 	mla	r2, r3, r2, r0
 80127a2:	3a10      	subs	r2, #16
 80127a4:	e7d4      	b.n	8012750 <__gethex+0x100>
 80127a6:	4631      	mov	r1, r6
 80127a8:	e7df      	b.n	801276a <__gethex+0x11a>
 80127aa:	1bf3      	subs	r3, r6, r7
 80127ac:	3b01      	subs	r3, #1
 80127ae:	4621      	mov	r1, r4
 80127b0:	2b07      	cmp	r3, #7
 80127b2:	dc0b      	bgt.n	80127cc <__gethex+0x17c>
 80127b4:	ee18 0a10 	vmov	r0, s16
 80127b8:	f000 fa90 	bl	8012cdc <_Balloc>
 80127bc:	4604      	mov	r4, r0
 80127be:	b940      	cbnz	r0, 80127d2 <__gethex+0x182>
 80127c0:	4b65      	ldr	r3, [pc, #404]	; (8012958 <__gethex+0x308>)
 80127c2:	4602      	mov	r2, r0
 80127c4:	21de      	movs	r1, #222	; 0xde
 80127c6:	4865      	ldr	r0, [pc, #404]	; (801295c <__gethex+0x30c>)
 80127c8:	f001 fda2 	bl	8014310 <__assert_func>
 80127cc:	3101      	adds	r1, #1
 80127ce:	105b      	asrs	r3, r3, #1
 80127d0:	e7ee      	b.n	80127b0 <__gethex+0x160>
 80127d2:	f100 0914 	add.w	r9, r0, #20
 80127d6:	f04f 0b00 	mov.w	fp, #0
 80127da:	f1ca 0301 	rsb	r3, sl, #1
 80127de:	f8cd 9008 	str.w	r9, [sp, #8]
 80127e2:	f8cd b000 	str.w	fp, [sp]
 80127e6:	9306      	str	r3, [sp, #24]
 80127e8:	42b7      	cmp	r7, r6
 80127ea:	d340      	bcc.n	801286e <__gethex+0x21e>
 80127ec:	9802      	ldr	r0, [sp, #8]
 80127ee:	9b00      	ldr	r3, [sp, #0]
 80127f0:	f840 3b04 	str.w	r3, [r0], #4
 80127f4:	eba0 0009 	sub.w	r0, r0, r9
 80127f8:	1080      	asrs	r0, r0, #2
 80127fa:	0146      	lsls	r6, r0, #5
 80127fc:	6120      	str	r0, [r4, #16]
 80127fe:	4618      	mov	r0, r3
 8012800:	f000 fb62 	bl	8012ec8 <__hi0bits>
 8012804:	1a30      	subs	r0, r6, r0
 8012806:	f8d8 6000 	ldr.w	r6, [r8]
 801280a:	42b0      	cmp	r0, r6
 801280c:	dd63      	ble.n	80128d6 <__gethex+0x286>
 801280e:	1b87      	subs	r7, r0, r6
 8012810:	4639      	mov	r1, r7
 8012812:	4620      	mov	r0, r4
 8012814:	f000 fefc 	bl	8013610 <__any_on>
 8012818:	4682      	mov	sl, r0
 801281a:	b1a8      	cbz	r0, 8012848 <__gethex+0x1f8>
 801281c:	1e7b      	subs	r3, r7, #1
 801281e:	1159      	asrs	r1, r3, #5
 8012820:	f003 021f 	and.w	r2, r3, #31
 8012824:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012828:	f04f 0a01 	mov.w	sl, #1
 801282c:	fa0a f202 	lsl.w	r2, sl, r2
 8012830:	420a      	tst	r2, r1
 8012832:	d009      	beq.n	8012848 <__gethex+0x1f8>
 8012834:	4553      	cmp	r3, sl
 8012836:	dd05      	ble.n	8012844 <__gethex+0x1f4>
 8012838:	1eb9      	subs	r1, r7, #2
 801283a:	4620      	mov	r0, r4
 801283c:	f000 fee8 	bl	8013610 <__any_on>
 8012840:	2800      	cmp	r0, #0
 8012842:	d145      	bne.n	80128d0 <__gethex+0x280>
 8012844:	f04f 0a02 	mov.w	sl, #2
 8012848:	4639      	mov	r1, r7
 801284a:	4620      	mov	r0, r4
 801284c:	f7ff fe98 	bl	8012580 <rshift>
 8012850:	443d      	add	r5, r7
 8012852:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012856:	42ab      	cmp	r3, r5
 8012858:	da4c      	bge.n	80128f4 <__gethex+0x2a4>
 801285a:	ee18 0a10 	vmov	r0, s16
 801285e:	4621      	mov	r1, r4
 8012860:	f000 fa7c 	bl	8012d5c <_Bfree>
 8012864:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012866:	2300      	movs	r3, #0
 8012868:	6013      	str	r3, [r2, #0]
 801286a:	27a3      	movs	r7, #163	; 0xa3
 801286c:	e785      	b.n	801277a <__gethex+0x12a>
 801286e:	1e73      	subs	r3, r6, #1
 8012870:	9a05      	ldr	r2, [sp, #20]
 8012872:	9303      	str	r3, [sp, #12]
 8012874:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012878:	4293      	cmp	r3, r2
 801287a:	d019      	beq.n	80128b0 <__gethex+0x260>
 801287c:	f1bb 0f20 	cmp.w	fp, #32
 8012880:	d107      	bne.n	8012892 <__gethex+0x242>
 8012882:	9b02      	ldr	r3, [sp, #8]
 8012884:	9a00      	ldr	r2, [sp, #0]
 8012886:	f843 2b04 	str.w	r2, [r3], #4
 801288a:	9302      	str	r3, [sp, #8]
 801288c:	2300      	movs	r3, #0
 801288e:	9300      	str	r3, [sp, #0]
 8012890:	469b      	mov	fp, r3
 8012892:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8012896:	f7ff fec5 	bl	8012624 <__hexdig_fun>
 801289a:	9b00      	ldr	r3, [sp, #0]
 801289c:	f000 000f 	and.w	r0, r0, #15
 80128a0:	fa00 f00b 	lsl.w	r0, r0, fp
 80128a4:	4303      	orrs	r3, r0
 80128a6:	9300      	str	r3, [sp, #0]
 80128a8:	f10b 0b04 	add.w	fp, fp, #4
 80128ac:	9b03      	ldr	r3, [sp, #12]
 80128ae:	e00d      	b.n	80128cc <__gethex+0x27c>
 80128b0:	9b03      	ldr	r3, [sp, #12]
 80128b2:	9a06      	ldr	r2, [sp, #24]
 80128b4:	4413      	add	r3, r2
 80128b6:	42bb      	cmp	r3, r7
 80128b8:	d3e0      	bcc.n	801287c <__gethex+0x22c>
 80128ba:	4618      	mov	r0, r3
 80128bc:	9901      	ldr	r1, [sp, #4]
 80128be:	9307      	str	r3, [sp, #28]
 80128c0:	4652      	mov	r2, sl
 80128c2:	f7fe f8b8 	bl	8010a36 <strncmp>
 80128c6:	9b07      	ldr	r3, [sp, #28]
 80128c8:	2800      	cmp	r0, #0
 80128ca:	d1d7      	bne.n	801287c <__gethex+0x22c>
 80128cc:	461e      	mov	r6, r3
 80128ce:	e78b      	b.n	80127e8 <__gethex+0x198>
 80128d0:	f04f 0a03 	mov.w	sl, #3
 80128d4:	e7b8      	b.n	8012848 <__gethex+0x1f8>
 80128d6:	da0a      	bge.n	80128ee <__gethex+0x29e>
 80128d8:	1a37      	subs	r7, r6, r0
 80128da:	4621      	mov	r1, r4
 80128dc:	ee18 0a10 	vmov	r0, s16
 80128e0:	463a      	mov	r2, r7
 80128e2:	f000 fc57 	bl	8013194 <__lshift>
 80128e6:	1bed      	subs	r5, r5, r7
 80128e8:	4604      	mov	r4, r0
 80128ea:	f100 0914 	add.w	r9, r0, #20
 80128ee:	f04f 0a00 	mov.w	sl, #0
 80128f2:	e7ae      	b.n	8012852 <__gethex+0x202>
 80128f4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80128f8:	42a8      	cmp	r0, r5
 80128fa:	dd72      	ble.n	80129e2 <__gethex+0x392>
 80128fc:	1b45      	subs	r5, r0, r5
 80128fe:	42ae      	cmp	r6, r5
 8012900:	dc36      	bgt.n	8012970 <__gethex+0x320>
 8012902:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012906:	2b02      	cmp	r3, #2
 8012908:	d02a      	beq.n	8012960 <__gethex+0x310>
 801290a:	2b03      	cmp	r3, #3
 801290c:	d02c      	beq.n	8012968 <__gethex+0x318>
 801290e:	2b01      	cmp	r3, #1
 8012910:	d115      	bne.n	801293e <__gethex+0x2ee>
 8012912:	42ae      	cmp	r6, r5
 8012914:	d113      	bne.n	801293e <__gethex+0x2ee>
 8012916:	2e01      	cmp	r6, #1
 8012918:	d10b      	bne.n	8012932 <__gethex+0x2e2>
 801291a:	9a04      	ldr	r2, [sp, #16]
 801291c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012920:	6013      	str	r3, [r2, #0]
 8012922:	2301      	movs	r3, #1
 8012924:	6123      	str	r3, [r4, #16]
 8012926:	f8c9 3000 	str.w	r3, [r9]
 801292a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801292c:	2762      	movs	r7, #98	; 0x62
 801292e:	601c      	str	r4, [r3, #0]
 8012930:	e723      	b.n	801277a <__gethex+0x12a>
 8012932:	1e71      	subs	r1, r6, #1
 8012934:	4620      	mov	r0, r4
 8012936:	f000 fe6b 	bl	8013610 <__any_on>
 801293a:	2800      	cmp	r0, #0
 801293c:	d1ed      	bne.n	801291a <__gethex+0x2ca>
 801293e:	ee18 0a10 	vmov	r0, s16
 8012942:	4621      	mov	r1, r4
 8012944:	f000 fa0a 	bl	8012d5c <_Bfree>
 8012948:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801294a:	2300      	movs	r3, #0
 801294c:	6013      	str	r3, [r2, #0]
 801294e:	2750      	movs	r7, #80	; 0x50
 8012950:	e713      	b.n	801277a <__gethex+0x12a>
 8012952:	bf00      	nop
 8012954:	08015390 	.word	0x08015390
 8012958:	08015313 	.word	0x08015313
 801295c:	08015324 	.word	0x08015324
 8012960:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012962:	2b00      	cmp	r3, #0
 8012964:	d1eb      	bne.n	801293e <__gethex+0x2ee>
 8012966:	e7d8      	b.n	801291a <__gethex+0x2ca>
 8012968:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801296a:	2b00      	cmp	r3, #0
 801296c:	d1d5      	bne.n	801291a <__gethex+0x2ca>
 801296e:	e7e6      	b.n	801293e <__gethex+0x2ee>
 8012970:	1e6f      	subs	r7, r5, #1
 8012972:	f1ba 0f00 	cmp.w	sl, #0
 8012976:	d131      	bne.n	80129dc <__gethex+0x38c>
 8012978:	b127      	cbz	r7, 8012984 <__gethex+0x334>
 801297a:	4639      	mov	r1, r7
 801297c:	4620      	mov	r0, r4
 801297e:	f000 fe47 	bl	8013610 <__any_on>
 8012982:	4682      	mov	sl, r0
 8012984:	117b      	asrs	r3, r7, #5
 8012986:	2101      	movs	r1, #1
 8012988:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801298c:	f007 071f 	and.w	r7, r7, #31
 8012990:	fa01 f707 	lsl.w	r7, r1, r7
 8012994:	421f      	tst	r7, r3
 8012996:	4629      	mov	r1, r5
 8012998:	4620      	mov	r0, r4
 801299a:	bf18      	it	ne
 801299c:	f04a 0a02 	orrne.w	sl, sl, #2
 80129a0:	1b76      	subs	r6, r6, r5
 80129a2:	f7ff fded 	bl	8012580 <rshift>
 80129a6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80129aa:	2702      	movs	r7, #2
 80129ac:	f1ba 0f00 	cmp.w	sl, #0
 80129b0:	d048      	beq.n	8012a44 <__gethex+0x3f4>
 80129b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80129b6:	2b02      	cmp	r3, #2
 80129b8:	d015      	beq.n	80129e6 <__gethex+0x396>
 80129ba:	2b03      	cmp	r3, #3
 80129bc:	d017      	beq.n	80129ee <__gethex+0x39e>
 80129be:	2b01      	cmp	r3, #1
 80129c0:	d109      	bne.n	80129d6 <__gethex+0x386>
 80129c2:	f01a 0f02 	tst.w	sl, #2
 80129c6:	d006      	beq.n	80129d6 <__gethex+0x386>
 80129c8:	f8d9 0000 	ldr.w	r0, [r9]
 80129cc:	ea4a 0a00 	orr.w	sl, sl, r0
 80129d0:	f01a 0f01 	tst.w	sl, #1
 80129d4:	d10e      	bne.n	80129f4 <__gethex+0x3a4>
 80129d6:	f047 0710 	orr.w	r7, r7, #16
 80129da:	e033      	b.n	8012a44 <__gethex+0x3f4>
 80129dc:	f04f 0a01 	mov.w	sl, #1
 80129e0:	e7d0      	b.n	8012984 <__gethex+0x334>
 80129e2:	2701      	movs	r7, #1
 80129e4:	e7e2      	b.n	80129ac <__gethex+0x35c>
 80129e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80129e8:	f1c3 0301 	rsb	r3, r3, #1
 80129ec:	9315      	str	r3, [sp, #84]	; 0x54
 80129ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d0f0      	beq.n	80129d6 <__gethex+0x386>
 80129f4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80129f8:	f104 0314 	add.w	r3, r4, #20
 80129fc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012a00:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012a04:	f04f 0c00 	mov.w	ip, #0
 8012a08:	4618      	mov	r0, r3
 8012a0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a0e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012a12:	d01c      	beq.n	8012a4e <__gethex+0x3fe>
 8012a14:	3201      	adds	r2, #1
 8012a16:	6002      	str	r2, [r0, #0]
 8012a18:	2f02      	cmp	r7, #2
 8012a1a:	f104 0314 	add.w	r3, r4, #20
 8012a1e:	d13f      	bne.n	8012aa0 <__gethex+0x450>
 8012a20:	f8d8 2000 	ldr.w	r2, [r8]
 8012a24:	3a01      	subs	r2, #1
 8012a26:	42b2      	cmp	r2, r6
 8012a28:	d10a      	bne.n	8012a40 <__gethex+0x3f0>
 8012a2a:	1171      	asrs	r1, r6, #5
 8012a2c:	2201      	movs	r2, #1
 8012a2e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012a32:	f006 061f 	and.w	r6, r6, #31
 8012a36:	fa02 f606 	lsl.w	r6, r2, r6
 8012a3a:	421e      	tst	r6, r3
 8012a3c:	bf18      	it	ne
 8012a3e:	4617      	movne	r7, r2
 8012a40:	f047 0720 	orr.w	r7, r7, #32
 8012a44:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012a46:	601c      	str	r4, [r3, #0]
 8012a48:	9b04      	ldr	r3, [sp, #16]
 8012a4a:	601d      	str	r5, [r3, #0]
 8012a4c:	e695      	b.n	801277a <__gethex+0x12a>
 8012a4e:	4299      	cmp	r1, r3
 8012a50:	f843 cc04 	str.w	ip, [r3, #-4]
 8012a54:	d8d8      	bhi.n	8012a08 <__gethex+0x3b8>
 8012a56:	68a3      	ldr	r3, [r4, #8]
 8012a58:	459b      	cmp	fp, r3
 8012a5a:	db19      	blt.n	8012a90 <__gethex+0x440>
 8012a5c:	6861      	ldr	r1, [r4, #4]
 8012a5e:	ee18 0a10 	vmov	r0, s16
 8012a62:	3101      	adds	r1, #1
 8012a64:	f000 f93a 	bl	8012cdc <_Balloc>
 8012a68:	4681      	mov	r9, r0
 8012a6a:	b918      	cbnz	r0, 8012a74 <__gethex+0x424>
 8012a6c:	4b1a      	ldr	r3, [pc, #104]	; (8012ad8 <__gethex+0x488>)
 8012a6e:	4602      	mov	r2, r0
 8012a70:	2184      	movs	r1, #132	; 0x84
 8012a72:	e6a8      	b.n	80127c6 <__gethex+0x176>
 8012a74:	6922      	ldr	r2, [r4, #16]
 8012a76:	3202      	adds	r2, #2
 8012a78:	f104 010c 	add.w	r1, r4, #12
 8012a7c:	0092      	lsls	r2, r2, #2
 8012a7e:	300c      	adds	r0, #12
 8012a80:	f000 f91e 	bl	8012cc0 <memcpy>
 8012a84:	4621      	mov	r1, r4
 8012a86:	ee18 0a10 	vmov	r0, s16
 8012a8a:	f000 f967 	bl	8012d5c <_Bfree>
 8012a8e:	464c      	mov	r4, r9
 8012a90:	6923      	ldr	r3, [r4, #16]
 8012a92:	1c5a      	adds	r2, r3, #1
 8012a94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012a98:	6122      	str	r2, [r4, #16]
 8012a9a:	2201      	movs	r2, #1
 8012a9c:	615a      	str	r2, [r3, #20]
 8012a9e:	e7bb      	b.n	8012a18 <__gethex+0x3c8>
 8012aa0:	6922      	ldr	r2, [r4, #16]
 8012aa2:	455a      	cmp	r2, fp
 8012aa4:	dd0b      	ble.n	8012abe <__gethex+0x46e>
 8012aa6:	2101      	movs	r1, #1
 8012aa8:	4620      	mov	r0, r4
 8012aaa:	f7ff fd69 	bl	8012580 <rshift>
 8012aae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012ab2:	3501      	adds	r5, #1
 8012ab4:	42ab      	cmp	r3, r5
 8012ab6:	f6ff aed0 	blt.w	801285a <__gethex+0x20a>
 8012aba:	2701      	movs	r7, #1
 8012abc:	e7c0      	b.n	8012a40 <__gethex+0x3f0>
 8012abe:	f016 061f 	ands.w	r6, r6, #31
 8012ac2:	d0fa      	beq.n	8012aba <__gethex+0x46a>
 8012ac4:	449a      	add	sl, r3
 8012ac6:	f1c6 0620 	rsb	r6, r6, #32
 8012aca:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8012ace:	f000 f9fb 	bl	8012ec8 <__hi0bits>
 8012ad2:	42b0      	cmp	r0, r6
 8012ad4:	dbe7      	blt.n	8012aa6 <__gethex+0x456>
 8012ad6:	e7f0      	b.n	8012aba <__gethex+0x46a>
 8012ad8:	08015313 	.word	0x08015313

08012adc <L_shift>:
 8012adc:	f1c2 0208 	rsb	r2, r2, #8
 8012ae0:	0092      	lsls	r2, r2, #2
 8012ae2:	b570      	push	{r4, r5, r6, lr}
 8012ae4:	f1c2 0620 	rsb	r6, r2, #32
 8012ae8:	6843      	ldr	r3, [r0, #4]
 8012aea:	6804      	ldr	r4, [r0, #0]
 8012aec:	fa03 f506 	lsl.w	r5, r3, r6
 8012af0:	432c      	orrs	r4, r5
 8012af2:	40d3      	lsrs	r3, r2
 8012af4:	6004      	str	r4, [r0, #0]
 8012af6:	f840 3f04 	str.w	r3, [r0, #4]!
 8012afa:	4288      	cmp	r0, r1
 8012afc:	d3f4      	bcc.n	8012ae8 <L_shift+0xc>
 8012afe:	bd70      	pop	{r4, r5, r6, pc}

08012b00 <__match>:
 8012b00:	b530      	push	{r4, r5, lr}
 8012b02:	6803      	ldr	r3, [r0, #0]
 8012b04:	3301      	adds	r3, #1
 8012b06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012b0a:	b914      	cbnz	r4, 8012b12 <__match+0x12>
 8012b0c:	6003      	str	r3, [r0, #0]
 8012b0e:	2001      	movs	r0, #1
 8012b10:	bd30      	pop	{r4, r5, pc}
 8012b12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012b16:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012b1a:	2d19      	cmp	r5, #25
 8012b1c:	bf98      	it	ls
 8012b1e:	3220      	addls	r2, #32
 8012b20:	42a2      	cmp	r2, r4
 8012b22:	d0f0      	beq.n	8012b06 <__match+0x6>
 8012b24:	2000      	movs	r0, #0
 8012b26:	e7f3      	b.n	8012b10 <__match+0x10>

08012b28 <__hexnan>:
 8012b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b2c:	680b      	ldr	r3, [r1, #0]
 8012b2e:	6801      	ldr	r1, [r0, #0]
 8012b30:	115e      	asrs	r6, r3, #5
 8012b32:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012b36:	f013 031f 	ands.w	r3, r3, #31
 8012b3a:	b087      	sub	sp, #28
 8012b3c:	bf18      	it	ne
 8012b3e:	3604      	addne	r6, #4
 8012b40:	2500      	movs	r5, #0
 8012b42:	1f37      	subs	r7, r6, #4
 8012b44:	4682      	mov	sl, r0
 8012b46:	4690      	mov	r8, r2
 8012b48:	9301      	str	r3, [sp, #4]
 8012b4a:	f846 5c04 	str.w	r5, [r6, #-4]
 8012b4e:	46b9      	mov	r9, r7
 8012b50:	463c      	mov	r4, r7
 8012b52:	9502      	str	r5, [sp, #8]
 8012b54:	46ab      	mov	fp, r5
 8012b56:	784a      	ldrb	r2, [r1, #1]
 8012b58:	1c4b      	adds	r3, r1, #1
 8012b5a:	9303      	str	r3, [sp, #12]
 8012b5c:	b342      	cbz	r2, 8012bb0 <__hexnan+0x88>
 8012b5e:	4610      	mov	r0, r2
 8012b60:	9105      	str	r1, [sp, #20]
 8012b62:	9204      	str	r2, [sp, #16]
 8012b64:	f7ff fd5e 	bl	8012624 <__hexdig_fun>
 8012b68:	2800      	cmp	r0, #0
 8012b6a:	d14f      	bne.n	8012c0c <__hexnan+0xe4>
 8012b6c:	9a04      	ldr	r2, [sp, #16]
 8012b6e:	9905      	ldr	r1, [sp, #20]
 8012b70:	2a20      	cmp	r2, #32
 8012b72:	d818      	bhi.n	8012ba6 <__hexnan+0x7e>
 8012b74:	9b02      	ldr	r3, [sp, #8]
 8012b76:	459b      	cmp	fp, r3
 8012b78:	dd13      	ble.n	8012ba2 <__hexnan+0x7a>
 8012b7a:	454c      	cmp	r4, r9
 8012b7c:	d206      	bcs.n	8012b8c <__hexnan+0x64>
 8012b7e:	2d07      	cmp	r5, #7
 8012b80:	dc04      	bgt.n	8012b8c <__hexnan+0x64>
 8012b82:	462a      	mov	r2, r5
 8012b84:	4649      	mov	r1, r9
 8012b86:	4620      	mov	r0, r4
 8012b88:	f7ff ffa8 	bl	8012adc <L_shift>
 8012b8c:	4544      	cmp	r4, r8
 8012b8e:	d950      	bls.n	8012c32 <__hexnan+0x10a>
 8012b90:	2300      	movs	r3, #0
 8012b92:	f1a4 0904 	sub.w	r9, r4, #4
 8012b96:	f844 3c04 	str.w	r3, [r4, #-4]
 8012b9a:	f8cd b008 	str.w	fp, [sp, #8]
 8012b9e:	464c      	mov	r4, r9
 8012ba0:	461d      	mov	r5, r3
 8012ba2:	9903      	ldr	r1, [sp, #12]
 8012ba4:	e7d7      	b.n	8012b56 <__hexnan+0x2e>
 8012ba6:	2a29      	cmp	r2, #41	; 0x29
 8012ba8:	d156      	bne.n	8012c58 <__hexnan+0x130>
 8012baa:	3102      	adds	r1, #2
 8012bac:	f8ca 1000 	str.w	r1, [sl]
 8012bb0:	f1bb 0f00 	cmp.w	fp, #0
 8012bb4:	d050      	beq.n	8012c58 <__hexnan+0x130>
 8012bb6:	454c      	cmp	r4, r9
 8012bb8:	d206      	bcs.n	8012bc8 <__hexnan+0xa0>
 8012bba:	2d07      	cmp	r5, #7
 8012bbc:	dc04      	bgt.n	8012bc8 <__hexnan+0xa0>
 8012bbe:	462a      	mov	r2, r5
 8012bc0:	4649      	mov	r1, r9
 8012bc2:	4620      	mov	r0, r4
 8012bc4:	f7ff ff8a 	bl	8012adc <L_shift>
 8012bc8:	4544      	cmp	r4, r8
 8012bca:	d934      	bls.n	8012c36 <__hexnan+0x10e>
 8012bcc:	f1a8 0204 	sub.w	r2, r8, #4
 8012bd0:	4623      	mov	r3, r4
 8012bd2:	f853 1b04 	ldr.w	r1, [r3], #4
 8012bd6:	f842 1f04 	str.w	r1, [r2, #4]!
 8012bda:	429f      	cmp	r7, r3
 8012bdc:	d2f9      	bcs.n	8012bd2 <__hexnan+0xaa>
 8012bde:	1b3b      	subs	r3, r7, r4
 8012be0:	f023 0303 	bic.w	r3, r3, #3
 8012be4:	3304      	adds	r3, #4
 8012be6:	3401      	adds	r4, #1
 8012be8:	3e03      	subs	r6, #3
 8012bea:	42b4      	cmp	r4, r6
 8012bec:	bf88      	it	hi
 8012bee:	2304      	movhi	r3, #4
 8012bf0:	4443      	add	r3, r8
 8012bf2:	2200      	movs	r2, #0
 8012bf4:	f843 2b04 	str.w	r2, [r3], #4
 8012bf8:	429f      	cmp	r7, r3
 8012bfa:	d2fb      	bcs.n	8012bf4 <__hexnan+0xcc>
 8012bfc:	683b      	ldr	r3, [r7, #0]
 8012bfe:	b91b      	cbnz	r3, 8012c08 <__hexnan+0xe0>
 8012c00:	4547      	cmp	r7, r8
 8012c02:	d127      	bne.n	8012c54 <__hexnan+0x12c>
 8012c04:	2301      	movs	r3, #1
 8012c06:	603b      	str	r3, [r7, #0]
 8012c08:	2005      	movs	r0, #5
 8012c0a:	e026      	b.n	8012c5a <__hexnan+0x132>
 8012c0c:	3501      	adds	r5, #1
 8012c0e:	2d08      	cmp	r5, #8
 8012c10:	f10b 0b01 	add.w	fp, fp, #1
 8012c14:	dd06      	ble.n	8012c24 <__hexnan+0xfc>
 8012c16:	4544      	cmp	r4, r8
 8012c18:	d9c3      	bls.n	8012ba2 <__hexnan+0x7a>
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	f844 3c04 	str.w	r3, [r4, #-4]
 8012c20:	2501      	movs	r5, #1
 8012c22:	3c04      	subs	r4, #4
 8012c24:	6822      	ldr	r2, [r4, #0]
 8012c26:	f000 000f 	and.w	r0, r0, #15
 8012c2a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8012c2e:	6022      	str	r2, [r4, #0]
 8012c30:	e7b7      	b.n	8012ba2 <__hexnan+0x7a>
 8012c32:	2508      	movs	r5, #8
 8012c34:	e7b5      	b.n	8012ba2 <__hexnan+0x7a>
 8012c36:	9b01      	ldr	r3, [sp, #4]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d0df      	beq.n	8012bfc <__hexnan+0xd4>
 8012c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8012c40:	f1c3 0320 	rsb	r3, r3, #32
 8012c44:	fa22 f303 	lsr.w	r3, r2, r3
 8012c48:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012c4c:	401a      	ands	r2, r3
 8012c4e:	f846 2c04 	str.w	r2, [r6, #-4]
 8012c52:	e7d3      	b.n	8012bfc <__hexnan+0xd4>
 8012c54:	3f04      	subs	r7, #4
 8012c56:	e7d1      	b.n	8012bfc <__hexnan+0xd4>
 8012c58:	2004      	movs	r0, #4
 8012c5a:	b007      	add	sp, #28
 8012c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012c60 <_localeconv_r>:
 8012c60:	4800      	ldr	r0, [pc, #0]	; (8012c64 <_localeconv_r+0x4>)
 8012c62:	4770      	bx	lr
 8012c64:	200002f0 	.word	0x200002f0

08012c68 <_lseek_r>:
 8012c68:	b538      	push	{r3, r4, r5, lr}
 8012c6a:	4d07      	ldr	r5, [pc, #28]	; (8012c88 <_lseek_r+0x20>)
 8012c6c:	4604      	mov	r4, r0
 8012c6e:	4608      	mov	r0, r1
 8012c70:	4611      	mov	r1, r2
 8012c72:	2200      	movs	r2, #0
 8012c74:	602a      	str	r2, [r5, #0]
 8012c76:	461a      	mov	r2, r3
 8012c78:	f7f0 fd10 	bl	800369c <_lseek>
 8012c7c:	1c43      	adds	r3, r0, #1
 8012c7e:	d102      	bne.n	8012c86 <_lseek_r+0x1e>
 8012c80:	682b      	ldr	r3, [r5, #0]
 8012c82:	b103      	cbz	r3, 8012c86 <_lseek_r+0x1e>
 8012c84:	6023      	str	r3, [r4, #0]
 8012c86:	bd38      	pop	{r3, r4, r5, pc}
 8012c88:	20003384 	.word	0x20003384

08012c8c <malloc>:
 8012c8c:	4b02      	ldr	r3, [pc, #8]	; (8012c98 <malloc+0xc>)
 8012c8e:	4601      	mov	r1, r0
 8012c90:	6818      	ldr	r0, [r3, #0]
 8012c92:	f000 bd3d 	b.w	8013710 <_malloc_r>
 8012c96:	bf00      	nop
 8012c98:	20000198 	.word	0x20000198

08012c9c <__ascii_mbtowc>:
 8012c9c:	b082      	sub	sp, #8
 8012c9e:	b901      	cbnz	r1, 8012ca2 <__ascii_mbtowc+0x6>
 8012ca0:	a901      	add	r1, sp, #4
 8012ca2:	b142      	cbz	r2, 8012cb6 <__ascii_mbtowc+0x1a>
 8012ca4:	b14b      	cbz	r3, 8012cba <__ascii_mbtowc+0x1e>
 8012ca6:	7813      	ldrb	r3, [r2, #0]
 8012ca8:	600b      	str	r3, [r1, #0]
 8012caa:	7812      	ldrb	r2, [r2, #0]
 8012cac:	1e10      	subs	r0, r2, #0
 8012cae:	bf18      	it	ne
 8012cb0:	2001      	movne	r0, #1
 8012cb2:	b002      	add	sp, #8
 8012cb4:	4770      	bx	lr
 8012cb6:	4610      	mov	r0, r2
 8012cb8:	e7fb      	b.n	8012cb2 <__ascii_mbtowc+0x16>
 8012cba:	f06f 0001 	mvn.w	r0, #1
 8012cbe:	e7f8      	b.n	8012cb2 <__ascii_mbtowc+0x16>

08012cc0 <memcpy>:
 8012cc0:	440a      	add	r2, r1
 8012cc2:	4291      	cmp	r1, r2
 8012cc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8012cc8:	d100      	bne.n	8012ccc <memcpy+0xc>
 8012cca:	4770      	bx	lr
 8012ccc:	b510      	push	{r4, lr}
 8012cce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012cd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012cd6:	4291      	cmp	r1, r2
 8012cd8:	d1f9      	bne.n	8012cce <memcpy+0xe>
 8012cda:	bd10      	pop	{r4, pc}

08012cdc <_Balloc>:
 8012cdc:	b570      	push	{r4, r5, r6, lr}
 8012cde:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012ce0:	4604      	mov	r4, r0
 8012ce2:	460d      	mov	r5, r1
 8012ce4:	b976      	cbnz	r6, 8012d04 <_Balloc+0x28>
 8012ce6:	2010      	movs	r0, #16
 8012ce8:	f7ff ffd0 	bl	8012c8c <malloc>
 8012cec:	4602      	mov	r2, r0
 8012cee:	6260      	str	r0, [r4, #36]	; 0x24
 8012cf0:	b920      	cbnz	r0, 8012cfc <_Balloc+0x20>
 8012cf2:	4b18      	ldr	r3, [pc, #96]	; (8012d54 <_Balloc+0x78>)
 8012cf4:	4818      	ldr	r0, [pc, #96]	; (8012d58 <_Balloc+0x7c>)
 8012cf6:	2166      	movs	r1, #102	; 0x66
 8012cf8:	f001 fb0a 	bl	8014310 <__assert_func>
 8012cfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012d00:	6006      	str	r6, [r0, #0]
 8012d02:	60c6      	str	r6, [r0, #12]
 8012d04:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012d06:	68f3      	ldr	r3, [r6, #12]
 8012d08:	b183      	cbz	r3, 8012d2c <_Balloc+0x50>
 8012d0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012d0c:	68db      	ldr	r3, [r3, #12]
 8012d0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012d12:	b9b8      	cbnz	r0, 8012d44 <_Balloc+0x68>
 8012d14:	2101      	movs	r1, #1
 8012d16:	fa01 f605 	lsl.w	r6, r1, r5
 8012d1a:	1d72      	adds	r2, r6, #5
 8012d1c:	0092      	lsls	r2, r2, #2
 8012d1e:	4620      	mov	r0, r4
 8012d20:	f000 fc97 	bl	8013652 <_calloc_r>
 8012d24:	b160      	cbz	r0, 8012d40 <_Balloc+0x64>
 8012d26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012d2a:	e00e      	b.n	8012d4a <_Balloc+0x6e>
 8012d2c:	2221      	movs	r2, #33	; 0x21
 8012d2e:	2104      	movs	r1, #4
 8012d30:	4620      	mov	r0, r4
 8012d32:	f000 fc8e 	bl	8013652 <_calloc_r>
 8012d36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012d38:	60f0      	str	r0, [r6, #12]
 8012d3a:	68db      	ldr	r3, [r3, #12]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d1e4      	bne.n	8012d0a <_Balloc+0x2e>
 8012d40:	2000      	movs	r0, #0
 8012d42:	bd70      	pop	{r4, r5, r6, pc}
 8012d44:	6802      	ldr	r2, [r0, #0]
 8012d46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012d50:	e7f7      	b.n	8012d42 <_Balloc+0x66>
 8012d52:	bf00      	nop
 8012d54:	0801529d 	.word	0x0801529d
 8012d58:	080153a4 	.word	0x080153a4

08012d5c <_Bfree>:
 8012d5c:	b570      	push	{r4, r5, r6, lr}
 8012d5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012d60:	4605      	mov	r5, r0
 8012d62:	460c      	mov	r4, r1
 8012d64:	b976      	cbnz	r6, 8012d84 <_Bfree+0x28>
 8012d66:	2010      	movs	r0, #16
 8012d68:	f7ff ff90 	bl	8012c8c <malloc>
 8012d6c:	4602      	mov	r2, r0
 8012d6e:	6268      	str	r0, [r5, #36]	; 0x24
 8012d70:	b920      	cbnz	r0, 8012d7c <_Bfree+0x20>
 8012d72:	4b09      	ldr	r3, [pc, #36]	; (8012d98 <_Bfree+0x3c>)
 8012d74:	4809      	ldr	r0, [pc, #36]	; (8012d9c <_Bfree+0x40>)
 8012d76:	218a      	movs	r1, #138	; 0x8a
 8012d78:	f001 faca 	bl	8014310 <__assert_func>
 8012d7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012d80:	6006      	str	r6, [r0, #0]
 8012d82:	60c6      	str	r6, [r0, #12]
 8012d84:	b13c      	cbz	r4, 8012d96 <_Bfree+0x3a>
 8012d86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012d88:	6862      	ldr	r2, [r4, #4]
 8012d8a:	68db      	ldr	r3, [r3, #12]
 8012d8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012d90:	6021      	str	r1, [r4, #0]
 8012d92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012d96:	bd70      	pop	{r4, r5, r6, pc}
 8012d98:	0801529d 	.word	0x0801529d
 8012d9c:	080153a4 	.word	0x080153a4

08012da0 <__multadd>:
 8012da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012da4:	690e      	ldr	r6, [r1, #16]
 8012da6:	4607      	mov	r7, r0
 8012da8:	4698      	mov	r8, r3
 8012daa:	460c      	mov	r4, r1
 8012dac:	f101 0014 	add.w	r0, r1, #20
 8012db0:	2300      	movs	r3, #0
 8012db2:	6805      	ldr	r5, [r0, #0]
 8012db4:	b2a9      	uxth	r1, r5
 8012db6:	fb02 8101 	mla	r1, r2, r1, r8
 8012dba:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8012dbe:	0c2d      	lsrs	r5, r5, #16
 8012dc0:	fb02 c505 	mla	r5, r2, r5, ip
 8012dc4:	b289      	uxth	r1, r1
 8012dc6:	3301      	adds	r3, #1
 8012dc8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8012dcc:	429e      	cmp	r6, r3
 8012dce:	f840 1b04 	str.w	r1, [r0], #4
 8012dd2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8012dd6:	dcec      	bgt.n	8012db2 <__multadd+0x12>
 8012dd8:	f1b8 0f00 	cmp.w	r8, #0
 8012ddc:	d022      	beq.n	8012e24 <__multadd+0x84>
 8012dde:	68a3      	ldr	r3, [r4, #8]
 8012de0:	42b3      	cmp	r3, r6
 8012de2:	dc19      	bgt.n	8012e18 <__multadd+0x78>
 8012de4:	6861      	ldr	r1, [r4, #4]
 8012de6:	4638      	mov	r0, r7
 8012de8:	3101      	adds	r1, #1
 8012dea:	f7ff ff77 	bl	8012cdc <_Balloc>
 8012dee:	4605      	mov	r5, r0
 8012df0:	b928      	cbnz	r0, 8012dfe <__multadd+0x5e>
 8012df2:	4602      	mov	r2, r0
 8012df4:	4b0d      	ldr	r3, [pc, #52]	; (8012e2c <__multadd+0x8c>)
 8012df6:	480e      	ldr	r0, [pc, #56]	; (8012e30 <__multadd+0x90>)
 8012df8:	21b5      	movs	r1, #181	; 0xb5
 8012dfa:	f001 fa89 	bl	8014310 <__assert_func>
 8012dfe:	6922      	ldr	r2, [r4, #16]
 8012e00:	3202      	adds	r2, #2
 8012e02:	f104 010c 	add.w	r1, r4, #12
 8012e06:	0092      	lsls	r2, r2, #2
 8012e08:	300c      	adds	r0, #12
 8012e0a:	f7ff ff59 	bl	8012cc0 <memcpy>
 8012e0e:	4621      	mov	r1, r4
 8012e10:	4638      	mov	r0, r7
 8012e12:	f7ff ffa3 	bl	8012d5c <_Bfree>
 8012e16:	462c      	mov	r4, r5
 8012e18:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8012e1c:	3601      	adds	r6, #1
 8012e1e:	f8c3 8014 	str.w	r8, [r3, #20]
 8012e22:	6126      	str	r6, [r4, #16]
 8012e24:	4620      	mov	r0, r4
 8012e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e2a:	bf00      	nop
 8012e2c:	08015313 	.word	0x08015313
 8012e30:	080153a4 	.word	0x080153a4

08012e34 <__s2b>:
 8012e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e38:	460c      	mov	r4, r1
 8012e3a:	4615      	mov	r5, r2
 8012e3c:	461f      	mov	r7, r3
 8012e3e:	2209      	movs	r2, #9
 8012e40:	3308      	adds	r3, #8
 8012e42:	4606      	mov	r6, r0
 8012e44:	fb93 f3f2 	sdiv	r3, r3, r2
 8012e48:	2100      	movs	r1, #0
 8012e4a:	2201      	movs	r2, #1
 8012e4c:	429a      	cmp	r2, r3
 8012e4e:	db09      	blt.n	8012e64 <__s2b+0x30>
 8012e50:	4630      	mov	r0, r6
 8012e52:	f7ff ff43 	bl	8012cdc <_Balloc>
 8012e56:	b940      	cbnz	r0, 8012e6a <__s2b+0x36>
 8012e58:	4602      	mov	r2, r0
 8012e5a:	4b19      	ldr	r3, [pc, #100]	; (8012ec0 <__s2b+0x8c>)
 8012e5c:	4819      	ldr	r0, [pc, #100]	; (8012ec4 <__s2b+0x90>)
 8012e5e:	21ce      	movs	r1, #206	; 0xce
 8012e60:	f001 fa56 	bl	8014310 <__assert_func>
 8012e64:	0052      	lsls	r2, r2, #1
 8012e66:	3101      	adds	r1, #1
 8012e68:	e7f0      	b.n	8012e4c <__s2b+0x18>
 8012e6a:	9b08      	ldr	r3, [sp, #32]
 8012e6c:	6143      	str	r3, [r0, #20]
 8012e6e:	2d09      	cmp	r5, #9
 8012e70:	f04f 0301 	mov.w	r3, #1
 8012e74:	6103      	str	r3, [r0, #16]
 8012e76:	dd16      	ble.n	8012ea6 <__s2b+0x72>
 8012e78:	f104 0909 	add.w	r9, r4, #9
 8012e7c:	46c8      	mov	r8, r9
 8012e7e:	442c      	add	r4, r5
 8012e80:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012e84:	4601      	mov	r1, r0
 8012e86:	3b30      	subs	r3, #48	; 0x30
 8012e88:	220a      	movs	r2, #10
 8012e8a:	4630      	mov	r0, r6
 8012e8c:	f7ff ff88 	bl	8012da0 <__multadd>
 8012e90:	45a0      	cmp	r8, r4
 8012e92:	d1f5      	bne.n	8012e80 <__s2b+0x4c>
 8012e94:	f1a5 0408 	sub.w	r4, r5, #8
 8012e98:	444c      	add	r4, r9
 8012e9a:	1b2d      	subs	r5, r5, r4
 8012e9c:	1963      	adds	r3, r4, r5
 8012e9e:	42bb      	cmp	r3, r7
 8012ea0:	db04      	blt.n	8012eac <__s2b+0x78>
 8012ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ea6:	340a      	adds	r4, #10
 8012ea8:	2509      	movs	r5, #9
 8012eaa:	e7f6      	b.n	8012e9a <__s2b+0x66>
 8012eac:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012eb0:	4601      	mov	r1, r0
 8012eb2:	3b30      	subs	r3, #48	; 0x30
 8012eb4:	220a      	movs	r2, #10
 8012eb6:	4630      	mov	r0, r6
 8012eb8:	f7ff ff72 	bl	8012da0 <__multadd>
 8012ebc:	e7ee      	b.n	8012e9c <__s2b+0x68>
 8012ebe:	bf00      	nop
 8012ec0:	08015313 	.word	0x08015313
 8012ec4:	080153a4 	.word	0x080153a4

08012ec8 <__hi0bits>:
 8012ec8:	0c03      	lsrs	r3, r0, #16
 8012eca:	041b      	lsls	r3, r3, #16
 8012ecc:	b9d3      	cbnz	r3, 8012f04 <__hi0bits+0x3c>
 8012ece:	0400      	lsls	r0, r0, #16
 8012ed0:	2310      	movs	r3, #16
 8012ed2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012ed6:	bf04      	itt	eq
 8012ed8:	0200      	lsleq	r0, r0, #8
 8012eda:	3308      	addeq	r3, #8
 8012edc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012ee0:	bf04      	itt	eq
 8012ee2:	0100      	lsleq	r0, r0, #4
 8012ee4:	3304      	addeq	r3, #4
 8012ee6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012eea:	bf04      	itt	eq
 8012eec:	0080      	lsleq	r0, r0, #2
 8012eee:	3302      	addeq	r3, #2
 8012ef0:	2800      	cmp	r0, #0
 8012ef2:	db05      	blt.n	8012f00 <__hi0bits+0x38>
 8012ef4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012ef8:	f103 0301 	add.w	r3, r3, #1
 8012efc:	bf08      	it	eq
 8012efe:	2320      	moveq	r3, #32
 8012f00:	4618      	mov	r0, r3
 8012f02:	4770      	bx	lr
 8012f04:	2300      	movs	r3, #0
 8012f06:	e7e4      	b.n	8012ed2 <__hi0bits+0xa>

08012f08 <__lo0bits>:
 8012f08:	6803      	ldr	r3, [r0, #0]
 8012f0a:	f013 0207 	ands.w	r2, r3, #7
 8012f0e:	4601      	mov	r1, r0
 8012f10:	d00b      	beq.n	8012f2a <__lo0bits+0x22>
 8012f12:	07da      	lsls	r2, r3, #31
 8012f14:	d424      	bmi.n	8012f60 <__lo0bits+0x58>
 8012f16:	0798      	lsls	r0, r3, #30
 8012f18:	bf49      	itett	mi
 8012f1a:	085b      	lsrmi	r3, r3, #1
 8012f1c:	089b      	lsrpl	r3, r3, #2
 8012f1e:	2001      	movmi	r0, #1
 8012f20:	600b      	strmi	r3, [r1, #0]
 8012f22:	bf5c      	itt	pl
 8012f24:	600b      	strpl	r3, [r1, #0]
 8012f26:	2002      	movpl	r0, #2
 8012f28:	4770      	bx	lr
 8012f2a:	b298      	uxth	r0, r3
 8012f2c:	b9b0      	cbnz	r0, 8012f5c <__lo0bits+0x54>
 8012f2e:	0c1b      	lsrs	r3, r3, #16
 8012f30:	2010      	movs	r0, #16
 8012f32:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012f36:	bf04      	itt	eq
 8012f38:	0a1b      	lsreq	r3, r3, #8
 8012f3a:	3008      	addeq	r0, #8
 8012f3c:	071a      	lsls	r2, r3, #28
 8012f3e:	bf04      	itt	eq
 8012f40:	091b      	lsreq	r3, r3, #4
 8012f42:	3004      	addeq	r0, #4
 8012f44:	079a      	lsls	r2, r3, #30
 8012f46:	bf04      	itt	eq
 8012f48:	089b      	lsreq	r3, r3, #2
 8012f4a:	3002      	addeq	r0, #2
 8012f4c:	07da      	lsls	r2, r3, #31
 8012f4e:	d403      	bmi.n	8012f58 <__lo0bits+0x50>
 8012f50:	085b      	lsrs	r3, r3, #1
 8012f52:	f100 0001 	add.w	r0, r0, #1
 8012f56:	d005      	beq.n	8012f64 <__lo0bits+0x5c>
 8012f58:	600b      	str	r3, [r1, #0]
 8012f5a:	4770      	bx	lr
 8012f5c:	4610      	mov	r0, r2
 8012f5e:	e7e8      	b.n	8012f32 <__lo0bits+0x2a>
 8012f60:	2000      	movs	r0, #0
 8012f62:	4770      	bx	lr
 8012f64:	2020      	movs	r0, #32
 8012f66:	4770      	bx	lr

08012f68 <__i2b>:
 8012f68:	b510      	push	{r4, lr}
 8012f6a:	460c      	mov	r4, r1
 8012f6c:	2101      	movs	r1, #1
 8012f6e:	f7ff feb5 	bl	8012cdc <_Balloc>
 8012f72:	4602      	mov	r2, r0
 8012f74:	b928      	cbnz	r0, 8012f82 <__i2b+0x1a>
 8012f76:	4b05      	ldr	r3, [pc, #20]	; (8012f8c <__i2b+0x24>)
 8012f78:	4805      	ldr	r0, [pc, #20]	; (8012f90 <__i2b+0x28>)
 8012f7a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012f7e:	f001 f9c7 	bl	8014310 <__assert_func>
 8012f82:	2301      	movs	r3, #1
 8012f84:	6144      	str	r4, [r0, #20]
 8012f86:	6103      	str	r3, [r0, #16]
 8012f88:	bd10      	pop	{r4, pc}
 8012f8a:	bf00      	nop
 8012f8c:	08015313 	.word	0x08015313
 8012f90:	080153a4 	.word	0x080153a4

08012f94 <__multiply>:
 8012f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f98:	4614      	mov	r4, r2
 8012f9a:	690a      	ldr	r2, [r1, #16]
 8012f9c:	6923      	ldr	r3, [r4, #16]
 8012f9e:	429a      	cmp	r2, r3
 8012fa0:	bfb8      	it	lt
 8012fa2:	460b      	movlt	r3, r1
 8012fa4:	460d      	mov	r5, r1
 8012fa6:	bfbc      	itt	lt
 8012fa8:	4625      	movlt	r5, r4
 8012faa:	461c      	movlt	r4, r3
 8012fac:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8012fb0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012fb4:	68ab      	ldr	r3, [r5, #8]
 8012fb6:	6869      	ldr	r1, [r5, #4]
 8012fb8:	eb0a 0709 	add.w	r7, sl, r9
 8012fbc:	42bb      	cmp	r3, r7
 8012fbe:	b085      	sub	sp, #20
 8012fc0:	bfb8      	it	lt
 8012fc2:	3101      	addlt	r1, #1
 8012fc4:	f7ff fe8a 	bl	8012cdc <_Balloc>
 8012fc8:	b930      	cbnz	r0, 8012fd8 <__multiply+0x44>
 8012fca:	4602      	mov	r2, r0
 8012fcc:	4b42      	ldr	r3, [pc, #264]	; (80130d8 <__multiply+0x144>)
 8012fce:	4843      	ldr	r0, [pc, #268]	; (80130dc <__multiply+0x148>)
 8012fd0:	f240 115d 	movw	r1, #349	; 0x15d
 8012fd4:	f001 f99c 	bl	8014310 <__assert_func>
 8012fd8:	f100 0614 	add.w	r6, r0, #20
 8012fdc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8012fe0:	4633      	mov	r3, r6
 8012fe2:	2200      	movs	r2, #0
 8012fe4:	4543      	cmp	r3, r8
 8012fe6:	d31e      	bcc.n	8013026 <__multiply+0x92>
 8012fe8:	f105 0c14 	add.w	ip, r5, #20
 8012fec:	f104 0314 	add.w	r3, r4, #20
 8012ff0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8012ff4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8012ff8:	9202      	str	r2, [sp, #8]
 8012ffa:	ebac 0205 	sub.w	r2, ip, r5
 8012ffe:	3a15      	subs	r2, #21
 8013000:	f022 0203 	bic.w	r2, r2, #3
 8013004:	3204      	adds	r2, #4
 8013006:	f105 0115 	add.w	r1, r5, #21
 801300a:	458c      	cmp	ip, r1
 801300c:	bf38      	it	cc
 801300e:	2204      	movcc	r2, #4
 8013010:	9201      	str	r2, [sp, #4]
 8013012:	9a02      	ldr	r2, [sp, #8]
 8013014:	9303      	str	r3, [sp, #12]
 8013016:	429a      	cmp	r2, r3
 8013018:	d808      	bhi.n	801302c <__multiply+0x98>
 801301a:	2f00      	cmp	r7, #0
 801301c:	dc55      	bgt.n	80130ca <__multiply+0x136>
 801301e:	6107      	str	r7, [r0, #16]
 8013020:	b005      	add	sp, #20
 8013022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013026:	f843 2b04 	str.w	r2, [r3], #4
 801302a:	e7db      	b.n	8012fe4 <__multiply+0x50>
 801302c:	f8b3 a000 	ldrh.w	sl, [r3]
 8013030:	f1ba 0f00 	cmp.w	sl, #0
 8013034:	d020      	beq.n	8013078 <__multiply+0xe4>
 8013036:	f105 0e14 	add.w	lr, r5, #20
 801303a:	46b1      	mov	r9, r6
 801303c:	2200      	movs	r2, #0
 801303e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8013042:	f8d9 b000 	ldr.w	fp, [r9]
 8013046:	b2a1      	uxth	r1, r4
 8013048:	fa1f fb8b 	uxth.w	fp, fp
 801304c:	fb0a b101 	mla	r1, sl, r1, fp
 8013050:	4411      	add	r1, r2
 8013052:	f8d9 2000 	ldr.w	r2, [r9]
 8013056:	0c24      	lsrs	r4, r4, #16
 8013058:	0c12      	lsrs	r2, r2, #16
 801305a:	fb0a 2404 	mla	r4, sl, r4, r2
 801305e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8013062:	b289      	uxth	r1, r1
 8013064:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8013068:	45f4      	cmp	ip, lr
 801306a:	f849 1b04 	str.w	r1, [r9], #4
 801306e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8013072:	d8e4      	bhi.n	801303e <__multiply+0xaa>
 8013074:	9901      	ldr	r1, [sp, #4]
 8013076:	5072      	str	r2, [r6, r1]
 8013078:	9a03      	ldr	r2, [sp, #12]
 801307a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801307e:	3304      	adds	r3, #4
 8013080:	f1b9 0f00 	cmp.w	r9, #0
 8013084:	d01f      	beq.n	80130c6 <__multiply+0x132>
 8013086:	6834      	ldr	r4, [r6, #0]
 8013088:	f105 0114 	add.w	r1, r5, #20
 801308c:	46b6      	mov	lr, r6
 801308e:	f04f 0a00 	mov.w	sl, #0
 8013092:	880a      	ldrh	r2, [r1, #0]
 8013094:	f8be b002 	ldrh.w	fp, [lr, #2]
 8013098:	fb09 b202 	mla	r2, r9, r2, fp
 801309c:	4492      	add	sl, r2
 801309e:	b2a4      	uxth	r4, r4
 80130a0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80130a4:	f84e 4b04 	str.w	r4, [lr], #4
 80130a8:	f851 4b04 	ldr.w	r4, [r1], #4
 80130ac:	f8be 2000 	ldrh.w	r2, [lr]
 80130b0:	0c24      	lsrs	r4, r4, #16
 80130b2:	fb09 2404 	mla	r4, r9, r4, r2
 80130b6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80130ba:	458c      	cmp	ip, r1
 80130bc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80130c0:	d8e7      	bhi.n	8013092 <__multiply+0xfe>
 80130c2:	9a01      	ldr	r2, [sp, #4]
 80130c4:	50b4      	str	r4, [r6, r2]
 80130c6:	3604      	adds	r6, #4
 80130c8:	e7a3      	b.n	8013012 <__multiply+0x7e>
 80130ca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d1a5      	bne.n	801301e <__multiply+0x8a>
 80130d2:	3f01      	subs	r7, #1
 80130d4:	e7a1      	b.n	801301a <__multiply+0x86>
 80130d6:	bf00      	nop
 80130d8:	08015313 	.word	0x08015313
 80130dc:	080153a4 	.word	0x080153a4

080130e0 <__pow5mult>:
 80130e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80130e4:	4615      	mov	r5, r2
 80130e6:	f012 0203 	ands.w	r2, r2, #3
 80130ea:	4606      	mov	r6, r0
 80130ec:	460f      	mov	r7, r1
 80130ee:	d007      	beq.n	8013100 <__pow5mult+0x20>
 80130f0:	4c25      	ldr	r4, [pc, #148]	; (8013188 <__pow5mult+0xa8>)
 80130f2:	3a01      	subs	r2, #1
 80130f4:	2300      	movs	r3, #0
 80130f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80130fa:	f7ff fe51 	bl	8012da0 <__multadd>
 80130fe:	4607      	mov	r7, r0
 8013100:	10ad      	asrs	r5, r5, #2
 8013102:	d03d      	beq.n	8013180 <__pow5mult+0xa0>
 8013104:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013106:	b97c      	cbnz	r4, 8013128 <__pow5mult+0x48>
 8013108:	2010      	movs	r0, #16
 801310a:	f7ff fdbf 	bl	8012c8c <malloc>
 801310e:	4602      	mov	r2, r0
 8013110:	6270      	str	r0, [r6, #36]	; 0x24
 8013112:	b928      	cbnz	r0, 8013120 <__pow5mult+0x40>
 8013114:	4b1d      	ldr	r3, [pc, #116]	; (801318c <__pow5mult+0xac>)
 8013116:	481e      	ldr	r0, [pc, #120]	; (8013190 <__pow5mult+0xb0>)
 8013118:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801311c:	f001 f8f8 	bl	8014310 <__assert_func>
 8013120:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013124:	6004      	str	r4, [r0, #0]
 8013126:	60c4      	str	r4, [r0, #12]
 8013128:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801312c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013130:	b94c      	cbnz	r4, 8013146 <__pow5mult+0x66>
 8013132:	f240 2171 	movw	r1, #625	; 0x271
 8013136:	4630      	mov	r0, r6
 8013138:	f7ff ff16 	bl	8012f68 <__i2b>
 801313c:	2300      	movs	r3, #0
 801313e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013142:	4604      	mov	r4, r0
 8013144:	6003      	str	r3, [r0, #0]
 8013146:	f04f 0900 	mov.w	r9, #0
 801314a:	07eb      	lsls	r3, r5, #31
 801314c:	d50a      	bpl.n	8013164 <__pow5mult+0x84>
 801314e:	4639      	mov	r1, r7
 8013150:	4622      	mov	r2, r4
 8013152:	4630      	mov	r0, r6
 8013154:	f7ff ff1e 	bl	8012f94 <__multiply>
 8013158:	4639      	mov	r1, r7
 801315a:	4680      	mov	r8, r0
 801315c:	4630      	mov	r0, r6
 801315e:	f7ff fdfd 	bl	8012d5c <_Bfree>
 8013162:	4647      	mov	r7, r8
 8013164:	106d      	asrs	r5, r5, #1
 8013166:	d00b      	beq.n	8013180 <__pow5mult+0xa0>
 8013168:	6820      	ldr	r0, [r4, #0]
 801316a:	b938      	cbnz	r0, 801317c <__pow5mult+0x9c>
 801316c:	4622      	mov	r2, r4
 801316e:	4621      	mov	r1, r4
 8013170:	4630      	mov	r0, r6
 8013172:	f7ff ff0f 	bl	8012f94 <__multiply>
 8013176:	6020      	str	r0, [r4, #0]
 8013178:	f8c0 9000 	str.w	r9, [r0]
 801317c:	4604      	mov	r4, r0
 801317e:	e7e4      	b.n	801314a <__pow5mult+0x6a>
 8013180:	4638      	mov	r0, r7
 8013182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013186:	bf00      	nop
 8013188:	080154f8 	.word	0x080154f8
 801318c:	0801529d 	.word	0x0801529d
 8013190:	080153a4 	.word	0x080153a4

08013194 <__lshift>:
 8013194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013198:	460c      	mov	r4, r1
 801319a:	6849      	ldr	r1, [r1, #4]
 801319c:	6923      	ldr	r3, [r4, #16]
 801319e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80131a2:	68a3      	ldr	r3, [r4, #8]
 80131a4:	4607      	mov	r7, r0
 80131a6:	4691      	mov	r9, r2
 80131a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80131ac:	f108 0601 	add.w	r6, r8, #1
 80131b0:	42b3      	cmp	r3, r6
 80131b2:	db0b      	blt.n	80131cc <__lshift+0x38>
 80131b4:	4638      	mov	r0, r7
 80131b6:	f7ff fd91 	bl	8012cdc <_Balloc>
 80131ba:	4605      	mov	r5, r0
 80131bc:	b948      	cbnz	r0, 80131d2 <__lshift+0x3e>
 80131be:	4602      	mov	r2, r0
 80131c0:	4b28      	ldr	r3, [pc, #160]	; (8013264 <__lshift+0xd0>)
 80131c2:	4829      	ldr	r0, [pc, #164]	; (8013268 <__lshift+0xd4>)
 80131c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80131c8:	f001 f8a2 	bl	8014310 <__assert_func>
 80131cc:	3101      	adds	r1, #1
 80131ce:	005b      	lsls	r3, r3, #1
 80131d0:	e7ee      	b.n	80131b0 <__lshift+0x1c>
 80131d2:	2300      	movs	r3, #0
 80131d4:	f100 0114 	add.w	r1, r0, #20
 80131d8:	f100 0210 	add.w	r2, r0, #16
 80131dc:	4618      	mov	r0, r3
 80131de:	4553      	cmp	r3, sl
 80131e0:	db33      	blt.n	801324a <__lshift+0xb6>
 80131e2:	6920      	ldr	r0, [r4, #16]
 80131e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80131e8:	f104 0314 	add.w	r3, r4, #20
 80131ec:	f019 091f 	ands.w	r9, r9, #31
 80131f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80131f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80131f8:	d02b      	beq.n	8013252 <__lshift+0xbe>
 80131fa:	f1c9 0e20 	rsb	lr, r9, #32
 80131fe:	468a      	mov	sl, r1
 8013200:	2200      	movs	r2, #0
 8013202:	6818      	ldr	r0, [r3, #0]
 8013204:	fa00 f009 	lsl.w	r0, r0, r9
 8013208:	4302      	orrs	r2, r0
 801320a:	f84a 2b04 	str.w	r2, [sl], #4
 801320e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013212:	459c      	cmp	ip, r3
 8013214:	fa22 f20e 	lsr.w	r2, r2, lr
 8013218:	d8f3      	bhi.n	8013202 <__lshift+0x6e>
 801321a:	ebac 0304 	sub.w	r3, ip, r4
 801321e:	3b15      	subs	r3, #21
 8013220:	f023 0303 	bic.w	r3, r3, #3
 8013224:	3304      	adds	r3, #4
 8013226:	f104 0015 	add.w	r0, r4, #21
 801322a:	4584      	cmp	ip, r0
 801322c:	bf38      	it	cc
 801322e:	2304      	movcc	r3, #4
 8013230:	50ca      	str	r2, [r1, r3]
 8013232:	b10a      	cbz	r2, 8013238 <__lshift+0xa4>
 8013234:	f108 0602 	add.w	r6, r8, #2
 8013238:	3e01      	subs	r6, #1
 801323a:	4638      	mov	r0, r7
 801323c:	612e      	str	r6, [r5, #16]
 801323e:	4621      	mov	r1, r4
 8013240:	f7ff fd8c 	bl	8012d5c <_Bfree>
 8013244:	4628      	mov	r0, r5
 8013246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801324a:	f842 0f04 	str.w	r0, [r2, #4]!
 801324e:	3301      	adds	r3, #1
 8013250:	e7c5      	b.n	80131de <__lshift+0x4a>
 8013252:	3904      	subs	r1, #4
 8013254:	f853 2b04 	ldr.w	r2, [r3], #4
 8013258:	f841 2f04 	str.w	r2, [r1, #4]!
 801325c:	459c      	cmp	ip, r3
 801325e:	d8f9      	bhi.n	8013254 <__lshift+0xc0>
 8013260:	e7ea      	b.n	8013238 <__lshift+0xa4>
 8013262:	bf00      	nop
 8013264:	08015313 	.word	0x08015313
 8013268:	080153a4 	.word	0x080153a4

0801326c <__mcmp>:
 801326c:	b530      	push	{r4, r5, lr}
 801326e:	6902      	ldr	r2, [r0, #16]
 8013270:	690c      	ldr	r4, [r1, #16]
 8013272:	1b12      	subs	r2, r2, r4
 8013274:	d10e      	bne.n	8013294 <__mcmp+0x28>
 8013276:	f100 0314 	add.w	r3, r0, #20
 801327a:	3114      	adds	r1, #20
 801327c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013280:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013284:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013288:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801328c:	42a5      	cmp	r5, r4
 801328e:	d003      	beq.n	8013298 <__mcmp+0x2c>
 8013290:	d305      	bcc.n	801329e <__mcmp+0x32>
 8013292:	2201      	movs	r2, #1
 8013294:	4610      	mov	r0, r2
 8013296:	bd30      	pop	{r4, r5, pc}
 8013298:	4283      	cmp	r3, r0
 801329a:	d3f3      	bcc.n	8013284 <__mcmp+0x18>
 801329c:	e7fa      	b.n	8013294 <__mcmp+0x28>
 801329e:	f04f 32ff 	mov.w	r2, #4294967295
 80132a2:	e7f7      	b.n	8013294 <__mcmp+0x28>

080132a4 <__mdiff>:
 80132a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132a8:	460c      	mov	r4, r1
 80132aa:	4606      	mov	r6, r0
 80132ac:	4611      	mov	r1, r2
 80132ae:	4620      	mov	r0, r4
 80132b0:	4617      	mov	r7, r2
 80132b2:	f7ff ffdb 	bl	801326c <__mcmp>
 80132b6:	1e05      	subs	r5, r0, #0
 80132b8:	d110      	bne.n	80132dc <__mdiff+0x38>
 80132ba:	4629      	mov	r1, r5
 80132bc:	4630      	mov	r0, r6
 80132be:	f7ff fd0d 	bl	8012cdc <_Balloc>
 80132c2:	b930      	cbnz	r0, 80132d2 <__mdiff+0x2e>
 80132c4:	4b39      	ldr	r3, [pc, #228]	; (80133ac <__mdiff+0x108>)
 80132c6:	4602      	mov	r2, r0
 80132c8:	f240 2132 	movw	r1, #562	; 0x232
 80132cc:	4838      	ldr	r0, [pc, #224]	; (80133b0 <__mdiff+0x10c>)
 80132ce:	f001 f81f 	bl	8014310 <__assert_func>
 80132d2:	2301      	movs	r3, #1
 80132d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80132d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132dc:	bfa4      	itt	ge
 80132de:	463b      	movge	r3, r7
 80132e0:	4627      	movge	r7, r4
 80132e2:	4630      	mov	r0, r6
 80132e4:	6879      	ldr	r1, [r7, #4]
 80132e6:	bfa6      	itte	ge
 80132e8:	461c      	movge	r4, r3
 80132ea:	2500      	movge	r5, #0
 80132ec:	2501      	movlt	r5, #1
 80132ee:	f7ff fcf5 	bl	8012cdc <_Balloc>
 80132f2:	b920      	cbnz	r0, 80132fe <__mdiff+0x5a>
 80132f4:	4b2d      	ldr	r3, [pc, #180]	; (80133ac <__mdiff+0x108>)
 80132f6:	4602      	mov	r2, r0
 80132f8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80132fc:	e7e6      	b.n	80132cc <__mdiff+0x28>
 80132fe:	693e      	ldr	r6, [r7, #16]
 8013300:	60c5      	str	r5, [r0, #12]
 8013302:	6925      	ldr	r5, [r4, #16]
 8013304:	f107 0114 	add.w	r1, r7, #20
 8013308:	f104 0914 	add.w	r9, r4, #20
 801330c:	f100 0e14 	add.w	lr, r0, #20
 8013310:	f107 0210 	add.w	r2, r7, #16
 8013314:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8013318:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801331c:	46f2      	mov	sl, lr
 801331e:	2700      	movs	r7, #0
 8013320:	f859 3b04 	ldr.w	r3, [r9], #4
 8013324:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013328:	fa1f f883 	uxth.w	r8, r3
 801332c:	fa17 f78b 	uxtah	r7, r7, fp
 8013330:	0c1b      	lsrs	r3, r3, #16
 8013332:	eba7 0808 	sub.w	r8, r7, r8
 8013336:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801333a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801333e:	fa1f f888 	uxth.w	r8, r8
 8013342:	141f      	asrs	r7, r3, #16
 8013344:	454d      	cmp	r5, r9
 8013346:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801334a:	f84a 3b04 	str.w	r3, [sl], #4
 801334e:	d8e7      	bhi.n	8013320 <__mdiff+0x7c>
 8013350:	1b2b      	subs	r3, r5, r4
 8013352:	3b15      	subs	r3, #21
 8013354:	f023 0303 	bic.w	r3, r3, #3
 8013358:	3304      	adds	r3, #4
 801335a:	3415      	adds	r4, #21
 801335c:	42a5      	cmp	r5, r4
 801335e:	bf38      	it	cc
 8013360:	2304      	movcc	r3, #4
 8013362:	4419      	add	r1, r3
 8013364:	4473      	add	r3, lr
 8013366:	469e      	mov	lr, r3
 8013368:	460d      	mov	r5, r1
 801336a:	4565      	cmp	r5, ip
 801336c:	d30e      	bcc.n	801338c <__mdiff+0xe8>
 801336e:	f10c 0203 	add.w	r2, ip, #3
 8013372:	1a52      	subs	r2, r2, r1
 8013374:	f022 0203 	bic.w	r2, r2, #3
 8013378:	3903      	subs	r1, #3
 801337a:	458c      	cmp	ip, r1
 801337c:	bf38      	it	cc
 801337e:	2200      	movcc	r2, #0
 8013380:	441a      	add	r2, r3
 8013382:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013386:	b17b      	cbz	r3, 80133a8 <__mdiff+0x104>
 8013388:	6106      	str	r6, [r0, #16]
 801338a:	e7a5      	b.n	80132d8 <__mdiff+0x34>
 801338c:	f855 8b04 	ldr.w	r8, [r5], #4
 8013390:	fa17 f488 	uxtah	r4, r7, r8
 8013394:	1422      	asrs	r2, r4, #16
 8013396:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801339a:	b2a4      	uxth	r4, r4
 801339c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80133a0:	f84e 4b04 	str.w	r4, [lr], #4
 80133a4:	1417      	asrs	r7, r2, #16
 80133a6:	e7e0      	b.n	801336a <__mdiff+0xc6>
 80133a8:	3e01      	subs	r6, #1
 80133aa:	e7ea      	b.n	8013382 <__mdiff+0xde>
 80133ac:	08015313 	.word	0x08015313
 80133b0:	080153a4 	.word	0x080153a4

080133b4 <__ulp>:
 80133b4:	b082      	sub	sp, #8
 80133b6:	ed8d 0b00 	vstr	d0, [sp]
 80133ba:	9b01      	ldr	r3, [sp, #4]
 80133bc:	4912      	ldr	r1, [pc, #72]	; (8013408 <__ulp+0x54>)
 80133be:	4019      	ands	r1, r3
 80133c0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80133c4:	2900      	cmp	r1, #0
 80133c6:	dd05      	ble.n	80133d4 <__ulp+0x20>
 80133c8:	2200      	movs	r2, #0
 80133ca:	460b      	mov	r3, r1
 80133cc:	ec43 2b10 	vmov	d0, r2, r3
 80133d0:	b002      	add	sp, #8
 80133d2:	4770      	bx	lr
 80133d4:	4249      	negs	r1, r1
 80133d6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80133da:	ea4f 5021 	mov.w	r0, r1, asr #20
 80133de:	f04f 0200 	mov.w	r2, #0
 80133e2:	f04f 0300 	mov.w	r3, #0
 80133e6:	da04      	bge.n	80133f2 <__ulp+0x3e>
 80133e8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80133ec:	fa41 f300 	asr.w	r3, r1, r0
 80133f0:	e7ec      	b.n	80133cc <__ulp+0x18>
 80133f2:	f1a0 0114 	sub.w	r1, r0, #20
 80133f6:	291e      	cmp	r1, #30
 80133f8:	bfda      	itte	le
 80133fa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80133fe:	fa20 f101 	lsrle.w	r1, r0, r1
 8013402:	2101      	movgt	r1, #1
 8013404:	460a      	mov	r2, r1
 8013406:	e7e1      	b.n	80133cc <__ulp+0x18>
 8013408:	7ff00000 	.word	0x7ff00000

0801340c <__b2d>:
 801340c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801340e:	6905      	ldr	r5, [r0, #16]
 8013410:	f100 0714 	add.w	r7, r0, #20
 8013414:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013418:	1f2e      	subs	r6, r5, #4
 801341a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801341e:	4620      	mov	r0, r4
 8013420:	f7ff fd52 	bl	8012ec8 <__hi0bits>
 8013424:	f1c0 0320 	rsb	r3, r0, #32
 8013428:	280a      	cmp	r0, #10
 801342a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80134a8 <__b2d+0x9c>
 801342e:	600b      	str	r3, [r1, #0]
 8013430:	dc14      	bgt.n	801345c <__b2d+0x50>
 8013432:	f1c0 0e0b 	rsb	lr, r0, #11
 8013436:	fa24 f10e 	lsr.w	r1, r4, lr
 801343a:	42b7      	cmp	r7, r6
 801343c:	ea41 030c 	orr.w	r3, r1, ip
 8013440:	bf34      	ite	cc
 8013442:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013446:	2100      	movcs	r1, #0
 8013448:	3015      	adds	r0, #21
 801344a:	fa04 f000 	lsl.w	r0, r4, r0
 801344e:	fa21 f10e 	lsr.w	r1, r1, lr
 8013452:	ea40 0201 	orr.w	r2, r0, r1
 8013456:	ec43 2b10 	vmov	d0, r2, r3
 801345a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801345c:	42b7      	cmp	r7, r6
 801345e:	bf3a      	itte	cc
 8013460:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013464:	f1a5 0608 	subcc.w	r6, r5, #8
 8013468:	2100      	movcs	r1, #0
 801346a:	380b      	subs	r0, #11
 801346c:	d017      	beq.n	801349e <__b2d+0x92>
 801346e:	f1c0 0c20 	rsb	ip, r0, #32
 8013472:	fa04 f500 	lsl.w	r5, r4, r0
 8013476:	42be      	cmp	r6, r7
 8013478:	fa21 f40c 	lsr.w	r4, r1, ip
 801347c:	ea45 0504 	orr.w	r5, r5, r4
 8013480:	bf8c      	ite	hi
 8013482:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013486:	2400      	movls	r4, #0
 8013488:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801348c:	fa01 f000 	lsl.w	r0, r1, r0
 8013490:	fa24 f40c 	lsr.w	r4, r4, ip
 8013494:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013498:	ea40 0204 	orr.w	r2, r0, r4
 801349c:	e7db      	b.n	8013456 <__b2d+0x4a>
 801349e:	ea44 030c 	orr.w	r3, r4, ip
 80134a2:	460a      	mov	r2, r1
 80134a4:	e7d7      	b.n	8013456 <__b2d+0x4a>
 80134a6:	bf00      	nop
 80134a8:	3ff00000 	.word	0x3ff00000

080134ac <__d2b>:
 80134ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80134b0:	4689      	mov	r9, r1
 80134b2:	2101      	movs	r1, #1
 80134b4:	ec57 6b10 	vmov	r6, r7, d0
 80134b8:	4690      	mov	r8, r2
 80134ba:	f7ff fc0f 	bl	8012cdc <_Balloc>
 80134be:	4604      	mov	r4, r0
 80134c0:	b930      	cbnz	r0, 80134d0 <__d2b+0x24>
 80134c2:	4602      	mov	r2, r0
 80134c4:	4b25      	ldr	r3, [pc, #148]	; (801355c <__d2b+0xb0>)
 80134c6:	4826      	ldr	r0, [pc, #152]	; (8013560 <__d2b+0xb4>)
 80134c8:	f240 310a 	movw	r1, #778	; 0x30a
 80134cc:	f000 ff20 	bl	8014310 <__assert_func>
 80134d0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80134d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80134d8:	bb35      	cbnz	r5, 8013528 <__d2b+0x7c>
 80134da:	2e00      	cmp	r6, #0
 80134dc:	9301      	str	r3, [sp, #4]
 80134de:	d028      	beq.n	8013532 <__d2b+0x86>
 80134e0:	4668      	mov	r0, sp
 80134e2:	9600      	str	r6, [sp, #0]
 80134e4:	f7ff fd10 	bl	8012f08 <__lo0bits>
 80134e8:	9900      	ldr	r1, [sp, #0]
 80134ea:	b300      	cbz	r0, 801352e <__d2b+0x82>
 80134ec:	9a01      	ldr	r2, [sp, #4]
 80134ee:	f1c0 0320 	rsb	r3, r0, #32
 80134f2:	fa02 f303 	lsl.w	r3, r2, r3
 80134f6:	430b      	orrs	r3, r1
 80134f8:	40c2      	lsrs	r2, r0
 80134fa:	6163      	str	r3, [r4, #20]
 80134fc:	9201      	str	r2, [sp, #4]
 80134fe:	9b01      	ldr	r3, [sp, #4]
 8013500:	61a3      	str	r3, [r4, #24]
 8013502:	2b00      	cmp	r3, #0
 8013504:	bf14      	ite	ne
 8013506:	2202      	movne	r2, #2
 8013508:	2201      	moveq	r2, #1
 801350a:	6122      	str	r2, [r4, #16]
 801350c:	b1d5      	cbz	r5, 8013544 <__d2b+0x98>
 801350e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013512:	4405      	add	r5, r0
 8013514:	f8c9 5000 	str.w	r5, [r9]
 8013518:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801351c:	f8c8 0000 	str.w	r0, [r8]
 8013520:	4620      	mov	r0, r4
 8013522:	b003      	add	sp, #12
 8013524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801352c:	e7d5      	b.n	80134da <__d2b+0x2e>
 801352e:	6161      	str	r1, [r4, #20]
 8013530:	e7e5      	b.n	80134fe <__d2b+0x52>
 8013532:	a801      	add	r0, sp, #4
 8013534:	f7ff fce8 	bl	8012f08 <__lo0bits>
 8013538:	9b01      	ldr	r3, [sp, #4]
 801353a:	6163      	str	r3, [r4, #20]
 801353c:	2201      	movs	r2, #1
 801353e:	6122      	str	r2, [r4, #16]
 8013540:	3020      	adds	r0, #32
 8013542:	e7e3      	b.n	801350c <__d2b+0x60>
 8013544:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013548:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801354c:	f8c9 0000 	str.w	r0, [r9]
 8013550:	6918      	ldr	r0, [r3, #16]
 8013552:	f7ff fcb9 	bl	8012ec8 <__hi0bits>
 8013556:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801355a:	e7df      	b.n	801351c <__d2b+0x70>
 801355c:	08015313 	.word	0x08015313
 8013560:	080153a4 	.word	0x080153a4

08013564 <__ratio>:
 8013564:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013568:	4688      	mov	r8, r1
 801356a:	4669      	mov	r1, sp
 801356c:	4681      	mov	r9, r0
 801356e:	f7ff ff4d 	bl	801340c <__b2d>
 8013572:	a901      	add	r1, sp, #4
 8013574:	4640      	mov	r0, r8
 8013576:	ec55 4b10 	vmov	r4, r5, d0
 801357a:	f7ff ff47 	bl	801340c <__b2d>
 801357e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013582:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013586:	eba3 0c02 	sub.w	ip, r3, r2
 801358a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801358e:	1a9b      	subs	r3, r3, r2
 8013590:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013594:	ec51 0b10 	vmov	r0, r1, d0
 8013598:	2b00      	cmp	r3, #0
 801359a:	bfd6      	itet	le
 801359c:	460a      	movle	r2, r1
 801359e:	462a      	movgt	r2, r5
 80135a0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80135a4:	468b      	mov	fp, r1
 80135a6:	462f      	mov	r7, r5
 80135a8:	bfd4      	ite	le
 80135aa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80135ae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80135b2:	4620      	mov	r0, r4
 80135b4:	ee10 2a10 	vmov	r2, s0
 80135b8:	465b      	mov	r3, fp
 80135ba:	4639      	mov	r1, r7
 80135bc:	f7ed f956 	bl	800086c <__aeabi_ddiv>
 80135c0:	ec41 0b10 	vmov	d0, r0, r1
 80135c4:	b003      	add	sp, #12
 80135c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080135ca <__copybits>:
 80135ca:	3901      	subs	r1, #1
 80135cc:	b570      	push	{r4, r5, r6, lr}
 80135ce:	1149      	asrs	r1, r1, #5
 80135d0:	6914      	ldr	r4, [r2, #16]
 80135d2:	3101      	adds	r1, #1
 80135d4:	f102 0314 	add.w	r3, r2, #20
 80135d8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80135dc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80135e0:	1f05      	subs	r5, r0, #4
 80135e2:	42a3      	cmp	r3, r4
 80135e4:	d30c      	bcc.n	8013600 <__copybits+0x36>
 80135e6:	1aa3      	subs	r3, r4, r2
 80135e8:	3b11      	subs	r3, #17
 80135ea:	f023 0303 	bic.w	r3, r3, #3
 80135ee:	3211      	adds	r2, #17
 80135f0:	42a2      	cmp	r2, r4
 80135f2:	bf88      	it	hi
 80135f4:	2300      	movhi	r3, #0
 80135f6:	4418      	add	r0, r3
 80135f8:	2300      	movs	r3, #0
 80135fa:	4288      	cmp	r0, r1
 80135fc:	d305      	bcc.n	801360a <__copybits+0x40>
 80135fe:	bd70      	pop	{r4, r5, r6, pc}
 8013600:	f853 6b04 	ldr.w	r6, [r3], #4
 8013604:	f845 6f04 	str.w	r6, [r5, #4]!
 8013608:	e7eb      	b.n	80135e2 <__copybits+0x18>
 801360a:	f840 3b04 	str.w	r3, [r0], #4
 801360e:	e7f4      	b.n	80135fa <__copybits+0x30>

08013610 <__any_on>:
 8013610:	f100 0214 	add.w	r2, r0, #20
 8013614:	6900      	ldr	r0, [r0, #16]
 8013616:	114b      	asrs	r3, r1, #5
 8013618:	4298      	cmp	r0, r3
 801361a:	b510      	push	{r4, lr}
 801361c:	db11      	blt.n	8013642 <__any_on+0x32>
 801361e:	dd0a      	ble.n	8013636 <__any_on+0x26>
 8013620:	f011 011f 	ands.w	r1, r1, #31
 8013624:	d007      	beq.n	8013636 <__any_on+0x26>
 8013626:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801362a:	fa24 f001 	lsr.w	r0, r4, r1
 801362e:	fa00 f101 	lsl.w	r1, r0, r1
 8013632:	428c      	cmp	r4, r1
 8013634:	d10b      	bne.n	801364e <__any_on+0x3e>
 8013636:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801363a:	4293      	cmp	r3, r2
 801363c:	d803      	bhi.n	8013646 <__any_on+0x36>
 801363e:	2000      	movs	r0, #0
 8013640:	bd10      	pop	{r4, pc}
 8013642:	4603      	mov	r3, r0
 8013644:	e7f7      	b.n	8013636 <__any_on+0x26>
 8013646:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801364a:	2900      	cmp	r1, #0
 801364c:	d0f5      	beq.n	801363a <__any_on+0x2a>
 801364e:	2001      	movs	r0, #1
 8013650:	e7f6      	b.n	8013640 <__any_on+0x30>

08013652 <_calloc_r>:
 8013652:	b513      	push	{r0, r1, r4, lr}
 8013654:	434a      	muls	r2, r1
 8013656:	4611      	mov	r1, r2
 8013658:	9201      	str	r2, [sp, #4]
 801365a:	f000 f859 	bl	8013710 <_malloc_r>
 801365e:	4604      	mov	r4, r0
 8013660:	b118      	cbz	r0, 801366a <_calloc_r+0x18>
 8013662:	9a01      	ldr	r2, [sp, #4]
 8013664:	2100      	movs	r1, #0
 8013666:	f7fc fac5 	bl	800fbf4 <memset>
 801366a:	4620      	mov	r0, r4
 801366c:	b002      	add	sp, #8
 801366e:	bd10      	pop	{r4, pc}

08013670 <_free_r>:
 8013670:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013672:	2900      	cmp	r1, #0
 8013674:	d048      	beq.n	8013708 <_free_r+0x98>
 8013676:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801367a:	9001      	str	r0, [sp, #4]
 801367c:	2b00      	cmp	r3, #0
 801367e:	f1a1 0404 	sub.w	r4, r1, #4
 8013682:	bfb8      	it	lt
 8013684:	18e4      	addlt	r4, r4, r3
 8013686:	f001 f847 	bl	8014718 <__malloc_lock>
 801368a:	4a20      	ldr	r2, [pc, #128]	; (801370c <_free_r+0x9c>)
 801368c:	9801      	ldr	r0, [sp, #4]
 801368e:	6813      	ldr	r3, [r2, #0]
 8013690:	4615      	mov	r5, r2
 8013692:	b933      	cbnz	r3, 80136a2 <_free_r+0x32>
 8013694:	6063      	str	r3, [r4, #4]
 8013696:	6014      	str	r4, [r2, #0]
 8013698:	b003      	add	sp, #12
 801369a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801369e:	f001 b841 	b.w	8014724 <__malloc_unlock>
 80136a2:	42a3      	cmp	r3, r4
 80136a4:	d90b      	bls.n	80136be <_free_r+0x4e>
 80136a6:	6821      	ldr	r1, [r4, #0]
 80136a8:	1862      	adds	r2, r4, r1
 80136aa:	4293      	cmp	r3, r2
 80136ac:	bf04      	itt	eq
 80136ae:	681a      	ldreq	r2, [r3, #0]
 80136b0:	685b      	ldreq	r3, [r3, #4]
 80136b2:	6063      	str	r3, [r4, #4]
 80136b4:	bf04      	itt	eq
 80136b6:	1852      	addeq	r2, r2, r1
 80136b8:	6022      	streq	r2, [r4, #0]
 80136ba:	602c      	str	r4, [r5, #0]
 80136bc:	e7ec      	b.n	8013698 <_free_r+0x28>
 80136be:	461a      	mov	r2, r3
 80136c0:	685b      	ldr	r3, [r3, #4]
 80136c2:	b10b      	cbz	r3, 80136c8 <_free_r+0x58>
 80136c4:	42a3      	cmp	r3, r4
 80136c6:	d9fa      	bls.n	80136be <_free_r+0x4e>
 80136c8:	6811      	ldr	r1, [r2, #0]
 80136ca:	1855      	adds	r5, r2, r1
 80136cc:	42a5      	cmp	r5, r4
 80136ce:	d10b      	bne.n	80136e8 <_free_r+0x78>
 80136d0:	6824      	ldr	r4, [r4, #0]
 80136d2:	4421      	add	r1, r4
 80136d4:	1854      	adds	r4, r2, r1
 80136d6:	42a3      	cmp	r3, r4
 80136d8:	6011      	str	r1, [r2, #0]
 80136da:	d1dd      	bne.n	8013698 <_free_r+0x28>
 80136dc:	681c      	ldr	r4, [r3, #0]
 80136de:	685b      	ldr	r3, [r3, #4]
 80136e0:	6053      	str	r3, [r2, #4]
 80136e2:	4421      	add	r1, r4
 80136e4:	6011      	str	r1, [r2, #0]
 80136e6:	e7d7      	b.n	8013698 <_free_r+0x28>
 80136e8:	d902      	bls.n	80136f0 <_free_r+0x80>
 80136ea:	230c      	movs	r3, #12
 80136ec:	6003      	str	r3, [r0, #0]
 80136ee:	e7d3      	b.n	8013698 <_free_r+0x28>
 80136f0:	6825      	ldr	r5, [r4, #0]
 80136f2:	1961      	adds	r1, r4, r5
 80136f4:	428b      	cmp	r3, r1
 80136f6:	bf04      	itt	eq
 80136f8:	6819      	ldreq	r1, [r3, #0]
 80136fa:	685b      	ldreq	r3, [r3, #4]
 80136fc:	6063      	str	r3, [r4, #4]
 80136fe:	bf04      	itt	eq
 8013700:	1949      	addeq	r1, r1, r5
 8013702:	6021      	streq	r1, [r4, #0]
 8013704:	6054      	str	r4, [r2, #4]
 8013706:	e7c7      	b.n	8013698 <_free_r+0x28>
 8013708:	b003      	add	sp, #12
 801370a:	bd30      	pop	{r4, r5, pc}
 801370c:	20000b28 	.word	0x20000b28

08013710 <_malloc_r>:
 8013710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013712:	1ccd      	adds	r5, r1, #3
 8013714:	f025 0503 	bic.w	r5, r5, #3
 8013718:	3508      	adds	r5, #8
 801371a:	2d0c      	cmp	r5, #12
 801371c:	bf38      	it	cc
 801371e:	250c      	movcc	r5, #12
 8013720:	2d00      	cmp	r5, #0
 8013722:	4606      	mov	r6, r0
 8013724:	db01      	blt.n	801372a <_malloc_r+0x1a>
 8013726:	42a9      	cmp	r1, r5
 8013728:	d903      	bls.n	8013732 <_malloc_r+0x22>
 801372a:	230c      	movs	r3, #12
 801372c:	6033      	str	r3, [r6, #0]
 801372e:	2000      	movs	r0, #0
 8013730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013732:	f000 fff1 	bl	8014718 <__malloc_lock>
 8013736:	4921      	ldr	r1, [pc, #132]	; (80137bc <_malloc_r+0xac>)
 8013738:	680a      	ldr	r2, [r1, #0]
 801373a:	4614      	mov	r4, r2
 801373c:	b99c      	cbnz	r4, 8013766 <_malloc_r+0x56>
 801373e:	4f20      	ldr	r7, [pc, #128]	; (80137c0 <_malloc_r+0xb0>)
 8013740:	683b      	ldr	r3, [r7, #0]
 8013742:	b923      	cbnz	r3, 801374e <_malloc_r+0x3e>
 8013744:	4621      	mov	r1, r4
 8013746:	4630      	mov	r0, r6
 8013748:	f000 fcd2 	bl	80140f0 <_sbrk_r>
 801374c:	6038      	str	r0, [r7, #0]
 801374e:	4629      	mov	r1, r5
 8013750:	4630      	mov	r0, r6
 8013752:	f000 fccd 	bl	80140f0 <_sbrk_r>
 8013756:	1c43      	adds	r3, r0, #1
 8013758:	d123      	bne.n	80137a2 <_malloc_r+0x92>
 801375a:	230c      	movs	r3, #12
 801375c:	6033      	str	r3, [r6, #0]
 801375e:	4630      	mov	r0, r6
 8013760:	f000 ffe0 	bl	8014724 <__malloc_unlock>
 8013764:	e7e3      	b.n	801372e <_malloc_r+0x1e>
 8013766:	6823      	ldr	r3, [r4, #0]
 8013768:	1b5b      	subs	r3, r3, r5
 801376a:	d417      	bmi.n	801379c <_malloc_r+0x8c>
 801376c:	2b0b      	cmp	r3, #11
 801376e:	d903      	bls.n	8013778 <_malloc_r+0x68>
 8013770:	6023      	str	r3, [r4, #0]
 8013772:	441c      	add	r4, r3
 8013774:	6025      	str	r5, [r4, #0]
 8013776:	e004      	b.n	8013782 <_malloc_r+0x72>
 8013778:	6863      	ldr	r3, [r4, #4]
 801377a:	42a2      	cmp	r2, r4
 801377c:	bf0c      	ite	eq
 801377e:	600b      	streq	r3, [r1, #0]
 8013780:	6053      	strne	r3, [r2, #4]
 8013782:	4630      	mov	r0, r6
 8013784:	f000 ffce 	bl	8014724 <__malloc_unlock>
 8013788:	f104 000b 	add.w	r0, r4, #11
 801378c:	1d23      	adds	r3, r4, #4
 801378e:	f020 0007 	bic.w	r0, r0, #7
 8013792:	1ac2      	subs	r2, r0, r3
 8013794:	d0cc      	beq.n	8013730 <_malloc_r+0x20>
 8013796:	1a1b      	subs	r3, r3, r0
 8013798:	50a3      	str	r3, [r4, r2]
 801379a:	e7c9      	b.n	8013730 <_malloc_r+0x20>
 801379c:	4622      	mov	r2, r4
 801379e:	6864      	ldr	r4, [r4, #4]
 80137a0:	e7cc      	b.n	801373c <_malloc_r+0x2c>
 80137a2:	1cc4      	adds	r4, r0, #3
 80137a4:	f024 0403 	bic.w	r4, r4, #3
 80137a8:	42a0      	cmp	r0, r4
 80137aa:	d0e3      	beq.n	8013774 <_malloc_r+0x64>
 80137ac:	1a21      	subs	r1, r4, r0
 80137ae:	4630      	mov	r0, r6
 80137b0:	f000 fc9e 	bl	80140f0 <_sbrk_r>
 80137b4:	3001      	adds	r0, #1
 80137b6:	d1dd      	bne.n	8013774 <_malloc_r+0x64>
 80137b8:	e7cf      	b.n	801375a <_malloc_r+0x4a>
 80137ba:	bf00      	nop
 80137bc:	20000b28 	.word	0x20000b28
 80137c0:	20000b2c 	.word	0x20000b2c

080137c4 <__ssputs_r>:
 80137c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137c8:	688e      	ldr	r6, [r1, #8]
 80137ca:	429e      	cmp	r6, r3
 80137cc:	4682      	mov	sl, r0
 80137ce:	460c      	mov	r4, r1
 80137d0:	4690      	mov	r8, r2
 80137d2:	461f      	mov	r7, r3
 80137d4:	d838      	bhi.n	8013848 <__ssputs_r+0x84>
 80137d6:	898a      	ldrh	r2, [r1, #12]
 80137d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80137dc:	d032      	beq.n	8013844 <__ssputs_r+0x80>
 80137de:	6825      	ldr	r5, [r4, #0]
 80137e0:	6909      	ldr	r1, [r1, #16]
 80137e2:	eba5 0901 	sub.w	r9, r5, r1
 80137e6:	6965      	ldr	r5, [r4, #20]
 80137e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80137ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80137f0:	3301      	adds	r3, #1
 80137f2:	444b      	add	r3, r9
 80137f4:	106d      	asrs	r5, r5, #1
 80137f6:	429d      	cmp	r5, r3
 80137f8:	bf38      	it	cc
 80137fa:	461d      	movcc	r5, r3
 80137fc:	0553      	lsls	r3, r2, #21
 80137fe:	d531      	bpl.n	8013864 <__ssputs_r+0xa0>
 8013800:	4629      	mov	r1, r5
 8013802:	f7ff ff85 	bl	8013710 <_malloc_r>
 8013806:	4606      	mov	r6, r0
 8013808:	b950      	cbnz	r0, 8013820 <__ssputs_r+0x5c>
 801380a:	230c      	movs	r3, #12
 801380c:	f8ca 3000 	str.w	r3, [sl]
 8013810:	89a3      	ldrh	r3, [r4, #12]
 8013812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013816:	81a3      	strh	r3, [r4, #12]
 8013818:	f04f 30ff 	mov.w	r0, #4294967295
 801381c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013820:	6921      	ldr	r1, [r4, #16]
 8013822:	464a      	mov	r2, r9
 8013824:	f7ff fa4c 	bl	8012cc0 <memcpy>
 8013828:	89a3      	ldrh	r3, [r4, #12]
 801382a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801382e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013832:	81a3      	strh	r3, [r4, #12]
 8013834:	6126      	str	r6, [r4, #16]
 8013836:	6165      	str	r5, [r4, #20]
 8013838:	444e      	add	r6, r9
 801383a:	eba5 0509 	sub.w	r5, r5, r9
 801383e:	6026      	str	r6, [r4, #0]
 8013840:	60a5      	str	r5, [r4, #8]
 8013842:	463e      	mov	r6, r7
 8013844:	42be      	cmp	r6, r7
 8013846:	d900      	bls.n	801384a <__ssputs_r+0x86>
 8013848:	463e      	mov	r6, r7
 801384a:	4632      	mov	r2, r6
 801384c:	6820      	ldr	r0, [r4, #0]
 801384e:	4641      	mov	r1, r8
 8013850:	f000 ff48 	bl	80146e4 <memmove>
 8013854:	68a3      	ldr	r3, [r4, #8]
 8013856:	6822      	ldr	r2, [r4, #0]
 8013858:	1b9b      	subs	r3, r3, r6
 801385a:	4432      	add	r2, r6
 801385c:	60a3      	str	r3, [r4, #8]
 801385e:	6022      	str	r2, [r4, #0]
 8013860:	2000      	movs	r0, #0
 8013862:	e7db      	b.n	801381c <__ssputs_r+0x58>
 8013864:	462a      	mov	r2, r5
 8013866:	f000 ff63 	bl	8014730 <_realloc_r>
 801386a:	4606      	mov	r6, r0
 801386c:	2800      	cmp	r0, #0
 801386e:	d1e1      	bne.n	8013834 <__ssputs_r+0x70>
 8013870:	6921      	ldr	r1, [r4, #16]
 8013872:	4650      	mov	r0, sl
 8013874:	f7ff fefc 	bl	8013670 <_free_r>
 8013878:	e7c7      	b.n	801380a <__ssputs_r+0x46>
	...

0801387c <_svfiprintf_r>:
 801387c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013880:	4698      	mov	r8, r3
 8013882:	898b      	ldrh	r3, [r1, #12]
 8013884:	061b      	lsls	r3, r3, #24
 8013886:	b09d      	sub	sp, #116	; 0x74
 8013888:	4607      	mov	r7, r0
 801388a:	460d      	mov	r5, r1
 801388c:	4614      	mov	r4, r2
 801388e:	d50e      	bpl.n	80138ae <_svfiprintf_r+0x32>
 8013890:	690b      	ldr	r3, [r1, #16]
 8013892:	b963      	cbnz	r3, 80138ae <_svfiprintf_r+0x32>
 8013894:	2140      	movs	r1, #64	; 0x40
 8013896:	f7ff ff3b 	bl	8013710 <_malloc_r>
 801389a:	6028      	str	r0, [r5, #0]
 801389c:	6128      	str	r0, [r5, #16]
 801389e:	b920      	cbnz	r0, 80138aa <_svfiprintf_r+0x2e>
 80138a0:	230c      	movs	r3, #12
 80138a2:	603b      	str	r3, [r7, #0]
 80138a4:	f04f 30ff 	mov.w	r0, #4294967295
 80138a8:	e0d1      	b.n	8013a4e <_svfiprintf_r+0x1d2>
 80138aa:	2340      	movs	r3, #64	; 0x40
 80138ac:	616b      	str	r3, [r5, #20]
 80138ae:	2300      	movs	r3, #0
 80138b0:	9309      	str	r3, [sp, #36]	; 0x24
 80138b2:	2320      	movs	r3, #32
 80138b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80138b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80138bc:	2330      	movs	r3, #48	; 0x30
 80138be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013a68 <_svfiprintf_r+0x1ec>
 80138c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80138c6:	f04f 0901 	mov.w	r9, #1
 80138ca:	4623      	mov	r3, r4
 80138cc:	469a      	mov	sl, r3
 80138ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80138d2:	b10a      	cbz	r2, 80138d8 <_svfiprintf_r+0x5c>
 80138d4:	2a25      	cmp	r2, #37	; 0x25
 80138d6:	d1f9      	bne.n	80138cc <_svfiprintf_r+0x50>
 80138d8:	ebba 0b04 	subs.w	fp, sl, r4
 80138dc:	d00b      	beq.n	80138f6 <_svfiprintf_r+0x7a>
 80138de:	465b      	mov	r3, fp
 80138e0:	4622      	mov	r2, r4
 80138e2:	4629      	mov	r1, r5
 80138e4:	4638      	mov	r0, r7
 80138e6:	f7ff ff6d 	bl	80137c4 <__ssputs_r>
 80138ea:	3001      	adds	r0, #1
 80138ec:	f000 80aa 	beq.w	8013a44 <_svfiprintf_r+0x1c8>
 80138f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80138f2:	445a      	add	r2, fp
 80138f4:	9209      	str	r2, [sp, #36]	; 0x24
 80138f6:	f89a 3000 	ldrb.w	r3, [sl]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	f000 80a2 	beq.w	8013a44 <_svfiprintf_r+0x1c8>
 8013900:	2300      	movs	r3, #0
 8013902:	f04f 32ff 	mov.w	r2, #4294967295
 8013906:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801390a:	f10a 0a01 	add.w	sl, sl, #1
 801390e:	9304      	str	r3, [sp, #16]
 8013910:	9307      	str	r3, [sp, #28]
 8013912:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013916:	931a      	str	r3, [sp, #104]	; 0x68
 8013918:	4654      	mov	r4, sl
 801391a:	2205      	movs	r2, #5
 801391c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013920:	4851      	ldr	r0, [pc, #324]	; (8013a68 <_svfiprintf_r+0x1ec>)
 8013922:	f7ec fc6d 	bl	8000200 <memchr>
 8013926:	9a04      	ldr	r2, [sp, #16]
 8013928:	b9d8      	cbnz	r0, 8013962 <_svfiprintf_r+0xe6>
 801392a:	06d0      	lsls	r0, r2, #27
 801392c:	bf44      	itt	mi
 801392e:	2320      	movmi	r3, #32
 8013930:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013934:	0711      	lsls	r1, r2, #28
 8013936:	bf44      	itt	mi
 8013938:	232b      	movmi	r3, #43	; 0x2b
 801393a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801393e:	f89a 3000 	ldrb.w	r3, [sl]
 8013942:	2b2a      	cmp	r3, #42	; 0x2a
 8013944:	d015      	beq.n	8013972 <_svfiprintf_r+0xf6>
 8013946:	9a07      	ldr	r2, [sp, #28]
 8013948:	4654      	mov	r4, sl
 801394a:	2000      	movs	r0, #0
 801394c:	f04f 0c0a 	mov.w	ip, #10
 8013950:	4621      	mov	r1, r4
 8013952:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013956:	3b30      	subs	r3, #48	; 0x30
 8013958:	2b09      	cmp	r3, #9
 801395a:	d94e      	bls.n	80139fa <_svfiprintf_r+0x17e>
 801395c:	b1b0      	cbz	r0, 801398c <_svfiprintf_r+0x110>
 801395e:	9207      	str	r2, [sp, #28]
 8013960:	e014      	b.n	801398c <_svfiprintf_r+0x110>
 8013962:	eba0 0308 	sub.w	r3, r0, r8
 8013966:	fa09 f303 	lsl.w	r3, r9, r3
 801396a:	4313      	orrs	r3, r2
 801396c:	9304      	str	r3, [sp, #16]
 801396e:	46a2      	mov	sl, r4
 8013970:	e7d2      	b.n	8013918 <_svfiprintf_r+0x9c>
 8013972:	9b03      	ldr	r3, [sp, #12]
 8013974:	1d19      	adds	r1, r3, #4
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	9103      	str	r1, [sp, #12]
 801397a:	2b00      	cmp	r3, #0
 801397c:	bfbb      	ittet	lt
 801397e:	425b      	neglt	r3, r3
 8013980:	f042 0202 	orrlt.w	r2, r2, #2
 8013984:	9307      	strge	r3, [sp, #28]
 8013986:	9307      	strlt	r3, [sp, #28]
 8013988:	bfb8      	it	lt
 801398a:	9204      	strlt	r2, [sp, #16]
 801398c:	7823      	ldrb	r3, [r4, #0]
 801398e:	2b2e      	cmp	r3, #46	; 0x2e
 8013990:	d10c      	bne.n	80139ac <_svfiprintf_r+0x130>
 8013992:	7863      	ldrb	r3, [r4, #1]
 8013994:	2b2a      	cmp	r3, #42	; 0x2a
 8013996:	d135      	bne.n	8013a04 <_svfiprintf_r+0x188>
 8013998:	9b03      	ldr	r3, [sp, #12]
 801399a:	1d1a      	adds	r2, r3, #4
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	9203      	str	r2, [sp, #12]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	bfb8      	it	lt
 80139a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80139a8:	3402      	adds	r4, #2
 80139aa:	9305      	str	r3, [sp, #20]
 80139ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013a78 <_svfiprintf_r+0x1fc>
 80139b0:	7821      	ldrb	r1, [r4, #0]
 80139b2:	2203      	movs	r2, #3
 80139b4:	4650      	mov	r0, sl
 80139b6:	f7ec fc23 	bl	8000200 <memchr>
 80139ba:	b140      	cbz	r0, 80139ce <_svfiprintf_r+0x152>
 80139bc:	2340      	movs	r3, #64	; 0x40
 80139be:	eba0 000a 	sub.w	r0, r0, sl
 80139c2:	fa03 f000 	lsl.w	r0, r3, r0
 80139c6:	9b04      	ldr	r3, [sp, #16]
 80139c8:	4303      	orrs	r3, r0
 80139ca:	3401      	adds	r4, #1
 80139cc:	9304      	str	r3, [sp, #16]
 80139ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139d2:	4826      	ldr	r0, [pc, #152]	; (8013a6c <_svfiprintf_r+0x1f0>)
 80139d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80139d8:	2206      	movs	r2, #6
 80139da:	f7ec fc11 	bl	8000200 <memchr>
 80139de:	2800      	cmp	r0, #0
 80139e0:	d038      	beq.n	8013a54 <_svfiprintf_r+0x1d8>
 80139e2:	4b23      	ldr	r3, [pc, #140]	; (8013a70 <_svfiprintf_r+0x1f4>)
 80139e4:	bb1b      	cbnz	r3, 8013a2e <_svfiprintf_r+0x1b2>
 80139e6:	9b03      	ldr	r3, [sp, #12]
 80139e8:	3307      	adds	r3, #7
 80139ea:	f023 0307 	bic.w	r3, r3, #7
 80139ee:	3308      	adds	r3, #8
 80139f0:	9303      	str	r3, [sp, #12]
 80139f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139f4:	4433      	add	r3, r6
 80139f6:	9309      	str	r3, [sp, #36]	; 0x24
 80139f8:	e767      	b.n	80138ca <_svfiprintf_r+0x4e>
 80139fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80139fe:	460c      	mov	r4, r1
 8013a00:	2001      	movs	r0, #1
 8013a02:	e7a5      	b.n	8013950 <_svfiprintf_r+0xd4>
 8013a04:	2300      	movs	r3, #0
 8013a06:	3401      	adds	r4, #1
 8013a08:	9305      	str	r3, [sp, #20]
 8013a0a:	4619      	mov	r1, r3
 8013a0c:	f04f 0c0a 	mov.w	ip, #10
 8013a10:	4620      	mov	r0, r4
 8013a12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013a16:	3a30      	subs	r2, #48	; 0x30
 8013a18:	2a09      	cmp	r2, #9
 8013a1a:	d903      	bls.n	8013a24 <_svfiprintf_r+0x1a8>
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d0c5      	beq.n	80139ac <_svfiprintf_r+0x130>
 8013a20:	9105      	str	r1, [sp, #20]
 8013a22:	e7c3      	b.n	80139ac <_svfiprintf_r+0x130>
 8013a24:	fb0c 2101 	mla	r1, ip, r1, r2
 8013a28:	4604      	mov	r4, r0
 8013a2a:	2301      	movs	r3, #1
 8013a2c:	e7f0      	b.n	8013a10 <_svfiprintf_r+0x194>
 8013a2e:	ab03      	add	r3, sp, #12
 8013a30:	9300      	str	r3, [sp, #0]
 8013a32:	462a      	mov	r2, r5
 8013a34:	4b0f      	ldr	r3, [pc, #60]	; (8013a74 <_svfiprintf_r+0x1f8>)
 8013a36:	a904      	add	r1, sp, #16
 8013a38:	4638      	mov	r0, r7
 8013a3a:	f7fc f983 	bl	800fd44 <_printf_float>
 8013a3e:	1c42      	adds	r2, r0, #1
 8013a40:	4606      	mov	r6, r0
 8013a42:	d1d6      	bne.n	80139f2 <_svfiprintf_r+0x176>
 8013a44:	89ab      	ldrh	r3, [r5, #12]
 8013a46:	065b      	lsls	r3, r3, #25
 8013a48:	f53f af2c 	bmi.w	80138a4 <_svfiprintf_r+0x28>
 8013a4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013a4e:	b01d      	add	sp, #116	; 0x74
 8013a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a54:	ab03      	add	r3, sp, #12
 8013a56:	9300      	str	r3, [sp, #0]
 8013a58:	462a      	mov	r2, r5
 8013a5a:	4b06      	ldr	r3, [pc, #24]	; (8013a74 <_svfiprintf_r+0x1f8>)
 8013a5c:	a904      	add	r1, sp, #16
 8013a5e:	4638      	mov	r0, r7
 8013a60:	f7fc fc14 	bl	801028c <_printf_i>
 8013a64:	e7eb      	b.n	8013a3e <_svfiprintf_r+0x1c2>
 8013a66:	bf00      	nop
 8013a68:	08015504 	.word	0x08015504
 8013a6c:	0801550e 	.word	0x0801550e
 8013a70:	0800fd45 	.word	0x0800fd45
 8013a74:	080137c5 	.word	0x080137c5
 8013a78:	0801550a 	.word	0x0801550a

08013a7c <_sungetc_r>:
 8013a7c:	b538      	push	{r3, r4, r5, lr}
 8013a7e:	1c4b      	adds	r3, r1, #1
 8013a80:	4614      	mov	r4, r2
 8013a82:	d103      	bne.n	8013a8c <_sungetc_r+0x10>
 8013a84:	f04f 35ff 	mov.w	r5, #4294967295
 8013a88:	4628      	mov	r0, r5
 8013a8a:	bd38      	pop	{r3, r4, r5, pc}
 8013a8c:	8993      	ldrh	r3, [r2, #12]
 8013a8e:	f023 0320 	bic.w	r3, r3, #32
 8013a92:	8193      	strh	r3, [r2, #12]
 8013a94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013a96:	6852      	ldr	r2, [r2, #4]
 8013a98:	b2cd      	uxtb	r5, r1
 8013a9a:	b18b      	cbz	r3, 8013ac0 <_sungetc_r+0x44>
 8013a9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013a9e:	4293      	cmp	r3, r2
 8013aa0:	dd08      	ble.n	8013ab4 <_sungetc_r+0x38>
 8013aa2:	6823      	ldr	r3, [r4, #0]
 8013aa4:	1e5a      	subs	r2, r3, #1
 8013aa6:	6022      	str	r2, [r4, #0]
 8013aa8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8013aac:	6863      	ldr	r3, [r4, #4]
 8013aae:	3301      	adds	r3, #1
 8013ab0:	6063      	str	r3, [r4, #4]
 8013ab2:	e7e9      	b.n	8013a88 <_sungetc_r+0xc>
 8013ab4:	4621      	mov	r1, r4
 8013ab6:	f000 fbe3 	bl	8014280 <__submore>
 8013aba:	2800      	cmp	r0, #0
 8013abc:	d0f1      	beq.n	8013aa2 <_sungetc_r+0x26>
 8013abe:	e7e1      	b.n	8013a84 <_sungetc_r+0x8>
 8013ac0:	6921      	ldr	r1, [r4, #16]
 8013ac2:	6823      	ldr	r3, [r4, #0]
 8013ac4:	b151      	cbz	r1, 8013adc <_sungetc_r+0x60>
 8013ac6:	4299      	cmp	r1, r3
 8013ac8:	d208      	bcs.n	8013adc <_sungetc_r+0x60>
 8013aca:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8013ace:	42a9      	cmp	r1, r5
 8013ad0:	d104      	bne.n	8013adc <_sungetc_r+0x60>
 8013ad2:	3b01      	subs	r3, #1
 8013ad4:	3201      	adds	r2, #1
 8013ad6:	6023      	str	r3, [r4, #0]
 8013ad8:	6062      	str	r2, [r4, #4]
 8013ada:	e7d5      	b.n	8013a88 <_sungetc_r+0xc>
 8013adc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8013ae0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013ae4:	6363      	str	r3, [r4, #52]	; 0x34
 8013ae6:	2303      	movs	r3, #3
 8013ae8:	63a3      	str	r3, [r4, #56]	; 0x38
 8013aea:	4623      	mov	r3, r4
 8013aec:	f803 5f46 	strb.w	r5, [r3, #70]!
 8013af0:	6023      	str	r3, [r4, #0]
 8013af2:	2301      	movs	r3, #1
 8013af4:	e7dc      	b.n	8013ab0 <_sungetc_r+0x34>

08013af6 <__ssrefill_r>:
 8013af6:	b510      	push	{r4, lr}
 8013af8:	460c      	mov	r4, r1
 8013afa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013afc:	b169      	cbz	r1, 8013b1a <__ssrefill_r+0x24>
 8013afe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013b02:	4299      	cmp	r1, r3
 8013b04:	d001      	beq.n	8013b0a <__ssrefill_r+0x14>
 8013b06:	f7ff fdb3 	bl	8013670 <_free_r>
 8013b0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013b0c:	6063      	str	r3, [r4, #4]
 8013b0e:	2000      	movs	r0, #0
 8013b10:	6360      	str	r0, [r4, #52]	; 0x34
 8013b12:	b113      	cbz	r3, 8013b1a <__ssrefill_r+0x24>
 8013b14:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013b16:	6023      	str	r3, [r4, #0]
 8013b18:	bd10      	pop	{r4, pc}
 8013b1a:	6923      	ldr	r3, [r4, #16]
 8013b1c:	6023      	str	r3, [r4, #0]
 8013b1e:	2300      	movs	r3, #0
 8013b20:	6063      	str	r3, [r4, #4]
 8013b22:	89a3      	ldrh	r3, [r4, #12]
 8013b24:	f043 0320 	orr.w	r3, r3, #32
 8013b28:	81a3      	strh	r3, [r4, #12]
 8013b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8013b2e:	e7f3      	b.n	8013b18 <__ssrefill_r+0x22>

08013b30 <__ssvfiscanf_r>:
 8013b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b34:	460c      	mov	r4, r1
 8013b36:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8013b3a:	2100      	movs	r1, #0
 8013b3c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8013b40:	49b2      	ldr	r1, [pc, #712]	; (8013e0c <__ssvfiscanf_r+0x2dc>)
 8013b42:	91a0      	str	r1, [sp, #640]	; 0x280
 8013b44:	f10d 0804 	add.w	r8, sp, #4
 8013b48:	49b1      	ldr	r1, [pc, #708]	; (8013e10 <__ssvfiscanf_r+0x2e0>)
 8013b4a:	4fb2      	ldr	r7, [pc, #712]	; (8013e14 <__ssvfiscanf_r+0x2e4>)
 8013b4c:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8013e18 <__ssvfiscanf_r+0x2e8>
 8013b50:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8013b54:	4606      	mov	r6, r0
 8013b56:	91a1      	str	r1, [sp, #644]	; 0x284
 8013b58:	9300      	str	r3, [sp, #0]
 8013b5a:	f892 a000 	ldrb.w	sl, [r2]
 8013b5e:	f1ba 0f00 	cmp.w	sl, #0
 8013b62:	f000 8151 	beq.w	8013e08 <__ssvfiscanf_r+0x2d8>
 8013b66:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8013b6a:	f013 0308 	ands.w	r3, r3, #8
 8013b6e:	f102 0501 	add.w	r5, r2, #1
 8013b72:	d019      	beq.n	8013ba8 <__ssvfiscanf_r+0x78>
 8013b74:	6863      	ldr	r3, [r4, #4]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	dd0f      	ble.n	8013b9a <__ssvfiscanf_r+0x6a>
 8013b7a:	6823      	ldr	r3, [r4, #0]
 8013b7c:	781a      	ldrb	r2, [r3, #0]
 8013b7e:	5cba      	ldrb	r2, [r7, r2]
 8013b80:	0712      	lsls	r2, r2, #28
 8013b82:	d401      	bmi.n	8013b88 <__ssvfiscanf_r+0x58>
 8013b84:	462a      	mov	r2, r5
 8013b86:	e7e8      	b.n	8013b5a <__ssvfiscanf_r+0x2a>
 8013b88:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013b8a:	3201      	adds	r2, #1
 8013b8c:	9245      	str	r2, [sp, #276]	; 0x114
 8013b8e:	6862      	ldr	r2, [r4, #4]
 8013b90:	3301      	adds	r3, #1
 8013b92:	3a01      	subs	r2, #1
 8013b94:	6062      	str	r2, [r4, #4]
 8013b96:	6023      	str	r3, [r4, #0]
 8013b98:	e7ec      	b.n	8013b74 <__ssvfiscanf_r+0x44>
 8013b9a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013b9c:	4621      	mov	r1, r4
 8013b9e:	4630      	mov	r0, r6
 8013ba0:	4798      	blx	r3
 8013ba2:	2800      	cmp	r0, #0
 8013ba4:	d0e9      	beq.n	8013b7a <__ssvfiscanf_r+0x4a>
 8013ba6:	e7ed      	b.n	8013b84 <__ssvfiscanf_r+0x54>
 8013ba8:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8013bac:	f040 8083 	bne.w	8013cb6 <__ssvfiscanf_r+0x186>
 8013bb0:	9341      	str	r3, [sp, #260]	; 0x104
 8013bb2:	9343      	str	r3, [sp, #268]	; 0x10c
 8013bb4:	7853      	ldrb	r3, [r2, #1]
 8013bb6:	2b2a      	cmp	r3, #42	; 0x2a
 8013bb8:	bf02      	ittt	eq
 8013bba:	2310      	moveq	r3, #16
 8013bbc:	1c95      	addeq	r5, r2, #2
 8013bbe:	9341      	streq	r3, [sp, #260]	; 0x104
 8013bc0:	220a      	movs	r2, #10
 8013bc2:	46ab      	mov	fp, r5
 8013bc4:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8013bc8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8013bcc:	2b09      	cmp	r3, #9
 8013bce:	d91d      	bls.n	8013c0c <__ssvfiscanf_r+0xdc>
 8013bd0:	4891      	ldr	r0, [pc, #580]	; (8013e18 <__ssvfiscanf_r+0x2e8>)
 8013bd2:	2203      	movs	r2, #3
 8013bd4:	f7ec fb14 	bl	8000200 <memchr>
 8013bd8:	b140      	cbz	r0, 8013bec <__ssvfiscanf_r+0xbc>
 8013bda:	2301      	movs	r3, #1
 8013bdc:	eba0 0009 	sub.w	r0, r0, r9
 8013be0:	fa03 f000 	lsl.w	r0, r3, r0
 8013be4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013be6:	4318      	orrs	r0, r3
 8013be8:	9041      	str	r0, [sp, #260]	; 0x104
 8013bea:	465d      	mov	r5, fp
 8013bec:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013bf0:	2b78      	cmp	r3, #120	; 0x78
 8013bf2:	d806      	bhi.n	8013c02 <__ssvfiscanf_r+0xd2>
 8013bf4:	2b57      	cmp	r3, #87	; 0x57
 8013bf6:	d810      	bhi.n	8013c1a <__ssvfiscanf_r+0xea>
 8013bf8:	2b25      	cmp	r3, #37	; 0x25
 8013bfa:	d05c      	beq.n	8013cb6 <__ssvfiscanf_r+0x186>
 8013bfc:	d856      	bhi.n	8013cac <__ssvfiscanf_r+0x17c>
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d074      	beq.n	8013cec <__ssvfiscanf_r+0x1bc>
 8013c02:	2303      	movs	r3, #3
 8013c04:	9347      	str	r3, [sp, #284]	; 0x11c
 8013c06:	230a      	movs	r3, #10
 8013c08:	9342      	str	r3, [sp, #264]	; 0x108
 8013c0a:	e081      	b.n	8013d10 <__ssvfiscanf_r+0x1e0>
 8013c0c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8013c0e:	fb02 1303 	mla	r3, r2, r3, r1
 8013c12:	3b30      	subs	r3, #48	; 0x30
 8013c14:	9343      	str	r3, [sp, #268]	; 0x10c
 8013c16:	465d      	mov	r5, fp
 8013c18:	e7d3      	b.n	8013bc2 <__ssvfiscanf_r+0x92>
 8013c1a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8013c1e:	2a20      	cmp	r2, #32
 8013c20:	d8ef      	bhi.n	8013c02 <__ssvfiscanf_r+0xd2>
 8013c22:	a101      	add	r1, pc, #4	; (adr r1, 8013c28 <__ssvfiscanf_r+0xf8>)
 8013c24:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013c28:	08013cfb 	.word	0x08013cfb
 8013c2c:	08013c03 	.word	0x08013c03
 8013c30:	08013c03 	.word	0x08013c03
 8013c34:	08013d59 	.word	0x08013d59
 8013c38:	08013c03 	.word	0x08013c03
 8013c3c:	08013c03 	.word	0x08013c03
 8013c40:	08013c03 	.word	0x08013c03
 8013c44:	08013c03 	.word	0x08013c03
 8013c48:	08013c03 	.word	0x08013c03
 8013c4c:	08013c03 	.word	0x08013c03
 8013c50:	08013c03 	.word	0x08013c03
 8013c54:	08013d6f 	.word	0x08013d6f
 8013c58:	08013d45 	.word	0x08013d45
 8013c5c:	08013cb3 	.word	0x08013cb3
 8013c60:	08013cb3 	.word	0x08013cb3
 8013c64:	08013cb3 	.word	0x08013cb3
 8013c68:	08013c03 	.word	0x08013c03
 8013c6c:	08013d49 	.word	0x08013d49
 8013c70:	08013c03 	.word	0x08013c03
 8013c74:	08013c03 	.word	0x08013c03
 8013c78:	08013c03 	.word	0x08013c03
 8013c7c:	08013c03 	.word	0x08013c03
 8013c80:	08013d7f 	.word	0x08013d7f
 8013c84:	08013d51 	.word	0x08013d51
 8013c88:	08013cf3 	.word	0x08013cf3
 8013c8c:	08013c03 	.word	0x08013c03
 8013c90:	08013c03 	.word	0x08013c03
 8013c94:	08013d7b 	.word	0x08013d7b
 8013c98:	08013c03 	.word	0x08013c03
 8013c9c:	08013d45 	.word	0x08013d45
 8013ca0:	08013c03 	.word	0x08013c03
 8013ca4:	08013c03 	.word	0x08013c03
 8013ca8:	08013cfb 	.word	0x08013cfb
 8013cac:	3b45      	subs	r3, #69	; 0x45
 8013cae:	2b02      	cmp	r3, #2
 8013cb0:	d8a7      	bhi.n	8013c02 <__ssvfiscanf_r+0xd2>
 8013cb2:	2305      	movs	r3, #5
 8013cb4:	e02b      	b.n	8013d0e <__ssvfiscanf_r+0x1de>
 8013cb6:	6863      	ldr	r3, [r4, #4]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	dd0d      	ble.n	8013cd8 <__ssvfiscanf_r+0x1a8>
 8013cbc:	6823      	ldr	r3, [r4, #0]
 8013cbe:	781a      	ldrb	r2, [r3, #0]
 8013cc0:	4552      	cmp	r2, sl
 8013cc2:	f040 80a1 	bne.w	8013e08 <__ssvfiscanf_r+0x2d8>
 8013cc6:	3301      	adds	r3, #1
 8013cc8:	6862      	ldr	r2, [r4, #4]
 8013cca:	6023      	str	r3, [r4, #0]
 8013ccc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8013cce:	3a01      	subs	r2, #1
 8013cd0:	3301      	adds	r3, #1
 8013cd2:	6062      	str	r2, [r4, #4]
 8013cd4:	9345      	str	r3, [sp, #276]	; 0x114
 8013cd6:	e755      	b.n	8013b84 <__ssvfiscanf_r+0x54>
 8013cd8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013cda:	4621      	mov	r1, r4
 8013cdc:	4630      	mov	r0, r6
 8013cde:	4798      	blx	r3
 8013ce0:	2800      	cmp	r0, #0
 8013ce2:	d0eb      	beq.n	8013cbc <__ssvfiscanf_r+0x18c>
 8013ce4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013ce6:	2800      	cmp	r0, #0
 8013ce8:	f040 8084 	bne.w	8013df4 <__ssvfiscanf_r+0x2c4>
 8013cec:	f04f 30ff 	mov.w	r0, #4294967295
 8013cf0:	e086      	b.n	8013e00 <__ssvfiscanf_r+0x2d0>
 8013cf2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013cf4:	f042 0220 	orr.w	r2, r2, #32
 8013cf8:	9241      	str	r2, [sp, #260]	; 0x104
 8013cfa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013cfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013d00:	9241      	str	r2, [sp, #260]	; 0x104
 8013d02:	2210      	movs	r2, #16
 8013d04:	2b6f      	cmp	r3, #111	; 0x6f
 8013d06:	9242      	str	r2, [sp, #264]	; 0x108
 8013d08:	bf34      	ite	cc
 8013d0a:	2303      	movcc	r3, #3
 8013d0c:	2304      	movcs	r3, #4
 8013d0e:	9347      	str	r3, [sp, #284]	; 0x11c
 8013d10:	6863      	ldr	r3, [r4, #4]
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	dd41      	ble.n	8013d9a <__ssvfiscanf_r+0x26a>
 8013d16:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013d18:	0659      	lsls	r1, r3, #25
 8013d1a:	d404      	bmi.n	8013d26 <__ssvfiscanf_r+0x1f6>
 8013d1c:	6823      	ldr	r3, [r4, #0]
 8013d1e:	781a      	ldrb	r2, [r3, #0]
 8013d20:	5cba      	ldrb	r2, [r7, r2]
 8013d22:	0712      	lsls	r2, r2, #28
 8013d24:	d440      	bmi.n	8013da8 <__ssvfiscanf_r+0x278>
 8013d26:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8013d28:	2b02      	cmp	r3, #2
 8013d2a:	dc4f      	bgt.n	8013dcc <__ssvfiscanf_r+0x29c>
 8013d2c:	466b      	mov	r3, sp
 8013d2e:	4622      	mov	r2, r4
 8013d30:	a941      	add	r1, sp, #260	; 0x104
 8013d32:	4630      	mov	r0, r6
 8013d34:	f000 f874 	bl	8013e20 <_scanf_chars>
 8013d38:	2801      	cmp	r0, #1
 8013d3a:	d065      	beq.n	8013e08 <__ssvfiscanf_r+0x2d8>
 8013d3c:	2802      	cmp	r0, #2
 8013d3e:	f47f af21 	bne.w	8013b84 <__ssvfiscanf_r+0x54>
 8013d42:	e7cf      	b.n	8013ce4 <__ssvfiscanf_r+0x1b4>
 8013d44:	220a      	movs	r2, #10
 8013d46:	e7dd      	b.n	8013d04 <__ssvfiscanf_r+0x1d4>
 8013d48:	2300      	movs	r3, #0
 8013d4a:	9342      	str	r3, [sp, #264]	; 0x108
 8013d4c:	2303      	movs	r3, #3
 8013d4e:	e7de      	b.n	8013d0e <__ssvfiscanf_r+0x1de>
 8013d50:	2308      	movs	r3, #8
 8013d52:	9342      	str	r3, [sp, #264]	; 0x108
 8013d54:	2304      	movs	r3, #4
 8013d56:	e7da      	b.n	8013d0e <__ssvfiscanf_r+0x1de>
 8013d58:	4629      	mov	r1, r5
 8013d5a:	4640      	mov	r0, r8
 8013d5c:	f000 f9d8 	bl	8014110 <__sccl>
 8013d60:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013d62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d66:	9341      	str	r3, [sp, #260]	; 0x104
 8013d68:	4605      	mov	r5, r0
 8013d6a:	2301      	movs	r3, #1
 8013d6c:	e7cf      	b.n	8013d0e <__ssvfiscanf_r+0x1de>
 8013d6e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d74:	9341      	str	r3, [sp, #260]	; 0x104
 8013d76:	2300      	movs	r3, #0
 8013d78:	e7c9      	b.n	8013d0e <__ssvfiscanf_r+0x1de>
 8013d7a:	2302      	movs	r3, #2
 8013d7c:	e7c7      	b.n	8013d0e <__ssvfiscanf_r+0x1de>
 8013d7e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8013d80:	06c3      	lsls	r3, r0, #27
 8013d82:	f53f aeff 	bmi.w	8013b84 <__ssvfiscanf_r+0x54>
 8013d86:	9b00      	ldr	r3, [sp, #0]
 8013d88:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013d8a:	1d19      	adds	r1, r3, #4
 8013d8c:	9100      	str	r1, [sp, #0]
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	07c0      	lsls	r0, r0, #31
 8013d92:	bf4c      	ite	mi
 8013d94:	801a      	strhmi	r2, [r3, #0]
 8013d96:	601a      	strpl	r2, [r3, #0]
 8013d98:	e6f4      	b.n	8013b84 <__ssvfiscanf_r+0x54>
 8013d9a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013d9c:	4621      	mov	r1, r4
 8013d9e:	4630      	mov	r0, r6
 8013da0:	4798      	blx	r3
 8013da2:	2800      	cmp	r0, #0
 8013da4:	d0b7      	beq.n	8013d16 <__ssvfiscanf_r+0x1e6>
 8013da6:	e79d      	b.n	8013ce4 <__ssvfiscanf_r+0x1b4>
 8013da8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013daa:	3201      	adds	r2, #1
 8013dac:	9245      	str	r2, [sp, #276]	; 0x114
 8013dae:	6862      	ldr	r2, [r4, #4]
 8013db0:	3a01      	subs	r2, #1
 8013db2:	2a00      	cmp	r2, #0
 8013db4:	6062      	str	r2, [r4, #4]
 8013db6:	dd02      	ble.n	8013dbe <__ssvfiscanf_r+0x28e>
 8013db8:	3301      	adds	r3, #1
 8013dba:	6023      	str	r3, [r4, #0]
 8013dbc:	e7ae      	b.n	8013d1c <__ssvfiscanf_r+0x1ec>
 8013dbe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013dc0:	4621      	mov	r1, r4
 8013dc2:	4630      	mov	r0, r6
 8013dc4:	4798      	blx	r3
 8013dc6:	2800      	cmp	r0, #0
 8013dc8:	d0a8      	beq.n	8013d1c <__ssvfiscanf_r+0x1ec>
 8013dca:	e78b      	b.n	8013ce4 <__ssvfiscanf_r+0x1b4>
 8013dcc:	2b04      	cmp	r3, #4
 8013dce:	dc06      	bgt.n	8013dde <__ssvfiscanf_r+0x2ae>
 8013dd0:	466b      	mov	r3, sp
 8013dd2:	4622      	mov	r2, r4
 8013dd4:	a941      	add	r1, sp, #260	; 0x104
 8013dd6:	4630      	mov	r0, r6
 8013dd8:	f000 f87a 	bl	8013ed0 <_scanf_i>
 8013ddc:	e7ac      	b.n	8013d38 <__ssvfiscanf_r+0x208>
 8013dde:	4b0f      	ldr	r3, [pc, #60]	; (8013e1c <__ssvfiscanf_r+0x2ec>)
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	f43f aecf 	beq.w	8013b84 <__ssvfiscanf_r+0x54>
 8013de6:	466b      	mov	r3, sp
 8013de8:	4622      	mov	r2, r4
 8013dea:	a941      	add	r1, sp, #260	; 0x104
 8013dec:	4630      	mov	r0, r6
 8013dee:	f7fc fb73 	bl	80104d8 <_scanf_float>
 8013df2:	e7a1      	b.n	8013d38 <__ssvfiscanf_r+0x208>
 8013df4:	89a3      	ldrh	r3, [r4, #12]
 8013df6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013dfa:	bf18      	it	ne
 8013dfc:	f04f 30ff 	movne.w	r0, #4294967295
 8013e00:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8013e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e08:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013e0a:	e7f9      	b.n	8013e00 <__ssvfiscanf_r+0x2d0>
 8013e0c:	08013a7d 	.word	0x08013a7d
 8013e10:	08013af7 	.word	0x08013af7
 8013e14:	08015101 	.word	0x08015101
 8013e18:	0801550a 	.word	0x0801550a
 8013e1c:	080104d9 	.word	0x080104d9

08013e20 <_scanf_chars>:
 8013e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e24:	4615      	mov	r5, r2
 8013e26:	688a      	ldr	r2, [r1, #8]
 8013e28:	4680      	mov	r8, r0
 8013e2a:	460c      	mov	r4, r1
 8013e2c:	b932      	cbnz	r2, 8013e3c <_scanf_chars+0x1c>
 8013e2e:	698a      	ldr	r2, [r1, #24]
 8013e30:	2a00      	cmp	r2, #0
 8013e32:	bf0c      	ite	eq
 8013e34:	2201      	moveq	r2, #1
 8013e36:	f04f 32ff 	movne.w	r2, #4294967295
 8013e3a:	608a      	str	r2, [r1, #8]
 8013e3c:	6822      	ldr	r2, [r4, #0]
 8013e3e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8013ecc <_scanf_chars+0xac>
 8013e42:	06d1      	lsls	r1, r2, #27
 8013e44:	bf5f      	itttt	pl
 8013e46:	681a      	ldrpl	r2, [r3, #0]
 8013e48:	1d11      	addpl	r1, r2, #4
 8013e4a:	6019      	strpl	r1, [r3, #0]
 8013e4c:	6816      	ldrpl	r6, [r2, #0]
 8013e4e:	2700      	movs	r7, #0
 8013e50:	69a0      	ldr	r0, [r4, #24]
 8013e52:	b188      	cbz	r0, 8013e78 <_scanf_chars+0x58>
 8013e54:	2801      	cmp	r0, #1
 8013e56:	d107      	bne.n	8013e68 <_scanf_chars+0x48>
 8013e58:	682b      	ldr	r3, [r5, #0]
 8013e5a:	781a      	ldrb	r2, [r3, #0]
 8013e5c:	6963      	ldr	r3, [r4, #20]
 8013e5e:	5c9b      	ldrb	r3, [r3, r2]
 8013e60:	b953      	cbnz	r3, 8013e78 <_scanf_chars+0x58>
 8013e62:	bb27      	cbnz	r7, 8013eae <_scanf_chars+0x8e>
 8013e64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e68:	2802      	cmp	r0, #2
 8013e6a:	d120      	bne.n	8013eae <_scanf_chars+0x8e>
 8013e6c:	682b      	ldr	r3, [r5, #0]
 8013e6e:	781b      	ldrb	r3, [r3, #0]
 8013e70:	f813 3009 	ldrb.w	r3, [r3, r9]
 8013e74:	071b      	lsls	r3, r3, #28
 8013e76:	d41a      	bmi.n	8013eae <_scanf_chars+0x8e>
 8013e78:	6823      	ldr	r3, [r4, #0]
 8013e7a:	06da      	lsls	r2, r3, #27
 8013e7c:	bf5e      	ittt	pl
 8013e7e:	682b      	ldrpl	r3, [r5, #0]
 8013e80:	781b      	ldrbpl	r3, [r3, #0]
 8013e82:	f806 3b01 	strbpl.w	r3, [r6], #1
 8013e86:	682a      	ldr	r2, [r5, #0]
 8013e88:	686b      	ldr	r3, [r5, #4]
 8013e8a:	3201      	adds	r2, #1
 8013e8c:	602a      	str	r2, [r5, #0]
 8013e8e:	68a2      	ldr	r2, [r4, #8]
 8013e90:	3b01      	subs	r3, #1
 8013e92:	3a01      	subs	r2, #1
 8013e94:	606b      	str	r3, [r5, #4]
 8013e96:	3701      	adds	r7, #1
 8013e98:	60a2      	str	r2, [r4, #8]
 8013e9a:	b142      	cbz	r2, 8013eae <_scanf_chars+0x8e>
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	dcd7      	bgt.n	8013e50 <_scanf_chars+0x30>
 8013ea0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013ea4:	4629      	mov	r1, r5
 8013ea6:	4640      	mov	r0, r8
 8013ea8:	4798      	blx	r3
 8013eaa:	2800      	cmp	r0, #0
 8013eac:	d0d0      	beq.n	8013e50 <_scanf_chars+0x30>
 8013eae:	6823      	ldr	r3, [r4, #0]
 8013eb0:	f013 0310 	ands.w	r3, r3, #16
 8013eb4:	d105      	bne.n	8013ec2 <_scanf_chars+0xa2>
 8013eb6:	68e2      	ldr	r2, [r4, #12]
 8013eb8:	3201      	adds	r2, #1
 8013eba:	60e2      	str	r2, [r4, #12]
 8013ebc:	69a2      	ldr	r2, [r4, #24]
 8013ebe:	b102      	cbz	r2, 8013ec2 <_scanf_chars+0xa2>
 8013ec0:	7033      	strb	r3, [r6, #0]
 8013ec2:	6923      	ldr	r3, [r4, #16]
 8013ec4:	441f      	add	r7, r3
 8013ec6:	6127      	str	r7, [r4, #16]
 8013ec8:	2000      	movs	r0, #0
 8013eca:	e7cb      	b.n	8013e64 <_scanf_chars+0x44>
 8013ecc:	08015101 	.word	0x08015101

08013ed0 <_scanf_i>:
 8013ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ed4:	4698      	mov	r8, r3
 8013ed6:	4b74      	ldr	r3, [pc, #464]	; (80140a8 <_scanf_i+0x1d8>)
 8013ed8:	460c      	mov	r4, r1
 8013eda:	4682      	mov	sl, r0
 8013edc:	4616      	mov	r6, r2
 8013ede:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013ee2:	b087      	sub	sp, #28
 8013ee4:	ab03      	add	r3, sp, #12
 8013ee6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013eea:	4b70      	ldr	r3, [pc, #448]	; (80140ac <_scanf_i+0x1dc>)
 8013eec:	69a1      	ldr	r1, [r4, #24]
 8013eee:	4a70      	ldr	r2, [pc, #448]	; (80140b0 <_scanf_i+0x1e0>)
 8013ef0:	2903      	cmp	r1, #3
 8013ef2:	bf18      	it	ne
 8013ef4:	461a      	movne	r2, r3
 8013ef6:	68a3      	ldr	r3, [r4, #8]
 8013ef8:	9201      	str	r2, [sp, #4]
 8013efa:	1e5a      	subs	r2, r3, #1
 8013efc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013f00:	bf88      	it	hi
 8013f02:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013f06:	4627      	mov	r7, r4
 8013f08:	bf82      	ittt	hi
 8013f0a:	eb03 0905 	addhi.w	r9, r3, r5
 8013f0e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013f12:	60a3      	strhi	r3, [r4, #8]
 8013f14:	f857 3b1c 	ldr.w	r3, [r7], #28
 8013f18:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8013f1c:	bf98      	it	ls
 8013f1e:	f04f 0900 	movls.w	r9, #0
 8013f22:	6023      	str	r3, [r4, #0]
 8013f24:	463d      	mov	r5, r7
 8013f26:	f04f 0b00 	mov.w	fp, #0
 8013f2a:	6831      	ldr	r1, [r6, #0]
 8013f2c:	ab03      	add	r3, sp, #12
 8013f2e:	7809      	ldrb	r1, [r1, #0]
 8013f30:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8013f34:	2202      	movs	r2, #2
 8013f36:	f7ec f963 	bl	8000200 <memchr>
 8013f3a:	b328      	cbz	r0, 8013f88 <_scanf_i+0xb8>
 8013f3c:	f1bb 0f01 	cmp.w	fp, #1
 8013f40:	d159      	bne.n	8013ff6 <_scanf_i+0x126>
 8013f42:	6862      	ldr	r2, [r4, #4]
 8013f44:	b92a      	cbnz	r2, 8013f52 <_scanf_i+0x82>
 8013f46:	6822      	ldr	r2, [r4, #0]
 8013f48:	2308      	movs	r3, #8
 8013f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013f4e:	6063      	str	r3, [r4, #4]
 8013f50:	6022      	str	r2, [r4, #0]
 8013f52:	6822      	ldr	r2, [r4, #0]
 8013f54:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8013f58:	6022      	str	r2, [r4, #0]
 8013f5a:	68a2      	ldr	r2, [r4, #8]
 8013f5c:	1e51      	subs	r1, r2, #1
 8013f5e:	60a1      	str	r1, [r4, #8]
 8013f60:	b192      	cbz	r2, 8013f88 <_scanf_i+0xb8>
 8013f62:	6832      	ldr	r2, [r6, #0]
 8013f64:	1c51      	adds	r1, r2, #1
 8013f66:	6031      	str	r1, [r6, #0]
 8013f68:	7812      	ldrb	r2, [r2, #0]
 8013f6a:	f805 2b01 	strb.w	r2, [r5], #1
 8013f6e:	6872      	ldr	r2, [r6, #4]
 8013f70:	3a01      	subs	r2, #1
 8013f72:	2a00      	cmp	r2, #0
 8013f74:	6072      	str	r2, [r6, #4]
 8013f76:	dc07      	bgt.n	8013f88 <_scanf_i+0xb8>
 8013f78:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8013f7c:	4631      	mov	r1, r6
 8013f7e:	4650      	mov	r0, sl
 8013f80:	4790      	blx	r2
 8013f82:	2800      	cmp	r0, #0
 8013f84:	f040 8085 	bne.w	8014092 <_scanf_i+0x1c2>
 8013f88:	f10b 0b01 	add.w	fp, fp, #1
 8013f8c:	f1bb 0f03 	cmp.w	fp, #3
 8013f90:	d1cb      	bne.n	8013f2a <_scanf_i+0x5a>
 8013f92:	6863      	ldr	r3, [r4, #4]
 8013f94:	b90b      	cbnz	r3, 8013f9a <_scanf_i+0xca>
 8013f96:	230a      	movs	r3, #10
 8013f98:	6063      	str	r3, [r4, #4]
 8013f9a:	6863      	ldr	r3, [r4, #4]
 8013f9c:	4945      	ldr	r1, [pc, #276]	; (80140b4 <_scanf_i+0x1e4>)
 8013f9e:	6960      	ldr	r0, [r4, #20]
 8013fa0:	1ac9      	subs	r1, r1, r3
 8013fa2:	f000 f8b5 	bl	8014110 <__sccl>
 8013fa6:	f04f 0b00 	mov.w	fp, #0
 8013faa:	68a3      	ldr	r3, [r4, #8]
 8013fac:	6822      	ldr	r2, [r4, #0]
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d03d      	beq.n	801402e <_scanf_i+0x15e>
 8013fb2:	6831      	ldr	r1, [r6, #0]
 8013fb4:	6960      	ldr	r0, [r4, #20]
 8013fb6:	f891 c000 	ldrb.w	ip, [r1]
 8013fba:	f810 000c 	ldrb.w	r0, [r0, ip]
 8013fbe:	2800      	cmp	r0, #0
 8013fc0:	d035      	beq.n	801402e <_scanf_i+0x15e>
 8013fc2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8013fc6:	d124      	bne.n	8014012 <_scanf_i+0x142>
 8013fc8:	0510      	lsls	r0, r2, #20
 8013fca:	d522      	bpl.n	8014012 <_scanf_i+0x142>
 8013fcc:	f10b 0b01 	add.w	fp, fp, #1
 8013fd0:	f1b9 0f00 	cmp.w	r9, #0
 8013fd4:	d003      	beq.n	8013fde <_scanf_i+0x10e>
 8013fd6:	3301      	adds	r3, #1
 8013fd8:	f109 39ff 	add.w	r9, r9, #4294967295
 8013fdc:	60a3      	str	r3, [r4, #8]
 8013fde:	6873      	ldr	r3, [r6, #4]
 8013fe0:	3b01      	subs	r3, #1
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	6073      	str	r3, [r6, #4]
 8013fe6:	dd1b      	ble.n	8014020 <_scanf_i+0x150>
 8013fe8:	6833      	ldr	r3, [r6, #0]
 8013fea:	3301      	adds	r3, #1
 8013fec:	6033      	str	r3, [r6, #0]
 8013fee:	68a3      	ldr	r3, [r4, #8]
 8013ff0:	3b01      	subs	r3, #1
 8013ff2:	60a3      	str	r3, [r4, #8]
 8013ff4:	e7d9      	b.n	8013faa <_scanf_i+0xda>
 8013ff6:	f1bb 0f02 	cmp.w	fp, #2
 8013ffa:	d1ae      	bne.n	8013f5a <_scanf_i+0x8a>
 8013ffc:	6822      	ldr	r2, [r4, #0]
 8013ffe:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8014002:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8014006:	d1bf      	bne.n	8013f88 <_scanf_i+0xb8>
 8014008:	2310      	movs	r3, #16
 801400a:	6063      	str	r3, [r4, #4]
 801400c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8014010:	e7a2      	b.n	8013f58 <_scanf_i+0x88>
 8014012:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8014016:	6022      	str	r2, [r4, #0]
 8014018:	780b      	ldrb	r3, [r1, #0]
 801401a:	f805 3b01 	strb.w	r3, [r5], #1
 801401e:	e7de      	b.n	8013fde <_scanf_i+0x10e>
 8014020:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014024:	4631      	mov	r1, r6
 8014026:	4650      	mov	r0, sl
 8014028:	4798      	blx	r3
 801402a:	2800      	cmp	r0, #0
 801402c:	d0df      	beq.n	8013fee <_scanf_i+0x11e>
 801402e:	6823      	ldr	r3, [r4, #0]
 8014030:	05d9      	lsls	r1, r3, #23
 8014032:	d50d      	bpl.n	8014050 <_scanf_i+0x180>
 8014034:	42bd      	cmp	r5, r7
 8014036:	d909      	bls.n	801404c <_scanf_i+0x17c>
 8014038:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801403c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014040:	4632      	mov	r2, r6
 8014042:	4650      	mov	r0, sl
 8014044:	4798      	blx	r3
 8014046:	f105 39ff 	add.w	r9, r5, #4294967295
 801404a:	464d      	mov	r5, r9
 801404c:	42bd      	cmp	r5, r7
 801404e:	d028      	beq.n	80140a2 <_scanf_i+0x1d2>
 8014050:	6822      	ldr	r2, [r4, #0]
 8014052:	f012 0210 	ands.w	r2, r2, #16
 8014056:	d113      	bne.n	8014080 <_scanf_i+0x1b0>
 8014058:	702a      	strb	r2, [r5, #0]
 801405a:	6863      	ldr	r3, [r4, #4]
 801405c:	9e01      	ldr	r6, [sp, #4]
 801405e:	4639      	mov	r1, r7
 8014060:	4650      	mov	r0, sl
 8014062:	47b0      	blx	r6
 8014064:	f8d8 3000 	ldr.w	r3, [r8]
 8014068:	6821      	ldr	r1, [r4, #0]
 801406a:	1d1a      	adds	r2, r3, #4
 801406c:	f8c8 2000 	str.w	r2, [r8]
 8014070:	f011 0f20 	tst.w	r1, #32
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	d00f      	beq.n	8014098 <_scanf_i+0x1c8>
 8014078:	6018      	str	r0, [r3, #0]
 801407a:	68e3      	ldr	r3, [r4, #12]
 801407c:	3301      	adds	r3, #1
 801407e:	60e3      	str	r3, [r4, #12]
 8014080:	1bed      	subs	r5, r5, r7
 8014082:	44ab      	add	fp, r5
 8014084:	6925      	ldr	r5, [r4, #16]
 8014086:	445d      	add	r5, fp
 8014088:	6125      	str	r5, [r4, #16]
 801408a:	2000      	movs	r0, #0
 801408c:	b007      	add	sp, #28
 801408e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014092:	f04f 0b00 	mov.w	fp, #0
 8014096:	e7ca      	b.n	801402e <_scanf_i+0x15e>
 8014098:	07ca      	lsls	r2, r1, #31
 801409a:	bf4c      	ite	mi
 801409c:	8018      	strhmi	r0, [r3, #0]
 801409e:	6018      	strpl	r0, [r3, #0]
 80140a0:	e7eb      	b.n	801407a <_scanf_i+0x1aa>
 80140a2:	2001      	movs	r0, #1
 80140a4:	e7f2      	b.n	801408c <_scanf_i+0x1bc>
 80140a6:	bf00      	nop
 80140a8:	0801505c 	.word	0x0801505c
 80140ac:	0801427d 	.word	0x0801427d
 80140b0:	080117c1 	.word	0x080117c1
 80140b4:	0801552e 	.word	0x0801552e

080140b8 <_read_r>:
 80140b8:	b538      	push	{r3, r4, r5, lr}
 80140ba:	4d07      	ldr	r5, [pc, #28]	; (80140d8 <_read_r+0x20>)
 80140bc:	4604      	mov	r4, r0
 80140be:	4608      	mov	r0, r1
 80140c0:	4611      	mov	r1, r2
 80140c2:	2200      	movs	r2, #0
 80140c4:	602a      	str	r2, [r5, #0]
 80140c6:	461a      	mov	r2, r3
 80140c8:	f7ef fa88 	bl	80035dc <_read>
 80140cc:	1c43      	adds	r3, r0, #1
 80140ce:	d102      	bne.n	80140d6 <_read_r+0x1e>
 80140d0:	682b      	ldr	r3, [r5, #0]
 80140d2:	b103      	cbz	r3, 80140d6 <_read_r+0x1e>
 80140d4:	6023      	str	r3, [r4, #0]
 80140d6:	bd38      	pop	{r3, r4, r5, pc}
 80140d8:	20003384 	.word	0x20003384
 80140dc:	00000000 	.word	0x00000000

080140e0 <nan>:
 80140e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80140e8 <nan+0x8>
 80140e4:	4770      	bx	lr
 80140e6:	bf00      	nop
 80140e8:	00000000 	.word	0x00000000
 80140ec:	7ff80000 	.word	0x7ff80000

080140f0 <_sbrk_r>:
 80140f0:	b538      	push	{r3, r4, r5, lr}
 80140f2:	4d06      	ldr	r5, [pc, #24]	; (801410c <_sbrk_r+0x1c>)
 80140f4:	2300      	movs	r3, #0
 80140f6:	4604      	mov	r4, r0
 80140f8:	4608      	mov	r0, r1
 80140fa:	602b      	str	r3, [r5, #0]
 80140fc:	f7ef fadc 	bl	80036b8 <_sbrk>
 8014100:	1c43      	adds	r3, r0, #1
 8014102:	d102      	bne.n	801410a <_sbrk_r+0x1a>
 8014104:	682b      	ldr	r3, [r5, #0]
 8014106:	b103      	cbz	r3, 801410a <_sbrk_r+0x1a>
 8014108:	6023      	str	r3, [r4, #0]
 801410a:	bd38      	pop	{r3, r4, r5, pc}
 801410c:	20003384 	.word	0x20003384

08014110 <__sccl>:
 8014110:	b570      	push	{r4, r5, r6, lr}
 8014112:	780b      	ldrb	r3, [r1, #0]
 8014114:	4604      	mov	r4, r0
 8014116:	2b5e      	cmp	r3, #94	; 0x5e
 8014118:	bf0b      	itete	eq
 801411a:	784b      	ldrbeq	r3, [r1, #1]
 801411c:	1c48      	addne	r0, r1, #1
 801411e:	1c88      	addeq	r0, r1, #2
 8014120:	2200      	movne	r2, #0
 8014122:	bf08      	it	eq
 8014124:	2201      	moveq	r2, #1
 8014126:	1e61      	subs	r1, r4, #1
 8014128:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801412c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8014130:	42a9      	cmp	r1, r5
 8014132:	d1fb      	bne.n	801412c <__sccl+0x1c>
 8014134:	b90b      	cbnz	r3, 801413a <__sccl+0x2a>
 8014136:	3801      	subs	r0, #1
 8014138:	bd70      	pop	{r4, r5, r6, pc}
 801413a:	f082 0101 	eor.w	r1, r2, #1
 801413e:	54e1      	strb	r1, [r4, r3]
 8014140:	1c42      	adds	r2, r0, #1
 8014142:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8014146:	2d2d      	cmp	r5, #45	; 0x2d
 8014148:	f102 36ff 	add.w	r6, r2, #4294967295
 801414c:	4610      	mov	r0, r2
 801414e:	d006      	beq.n	801415e <__sccl+0x4e>
 8014150:	2d5d      	cmp	r5, #93	; 0x5d
 8014152:	d0f1      	beq.n	8014138 <__sccl+0x28>
 8014154:	b90d      	cbnz	r5, 801415a <__sccl+0x4a>
 8014156:	4630      	mov	r0, r6
 8014158:	e7ee      	b.n	8014138 <__sccl+0x28>
 801415a:	462b      	mov	r3, r5
 801415c:	e7ef      	b.n	801413e <__sccl+0x2e>
 801415e:	7816      	ldrb	r6, [r2, #0]
 8014160:	2e5d      	cmp	r6, #93	; 0x5d
 8014162:	d0fa      	beq.n	801415a <__sccl+0x4a>
 8014164:	42b3      	cmp	r3, r6
 8014166:	dcf8      	bgt.n	801415a <__sccl+0x4a>
 8014168:	4618      	mov	r0, r3
 801416a:	3001      	adds	r0, #1
 801416c:	4286      	cmp	r6, r0
 801416e:	5421      	strb	r1, [r4, r0]
 8014170:	dcfb      	bgt.n	801416a <__sccl+0x5a>
 8014172:	43d8      	mvns	r0, r3
 8014174:	4430      	add	r0, r6
 8014176:	1c5d      	adds	r5, r3, #1
 8014178:	42b3      	cmp	r3, r6
 801417a:	bfa8      	it	ge
 801417c:	2000      	movge	r0, #0
 801417e:	182b      	adds	r3, r5, r0
 8014180:	3202      	adds	r2, #2
 8014182:	e7de      	b.n	8014142 <__sccl+0x32>

08014184 <_strtoul_l.isra.0>:
 8014184:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014188:	4e3b      	ldr	r6, [pc, #236]	; (8014278 <_strtoul_l.isra.0+0xf4>)
 801418a:	4686      	mov	lr, r0
 801418c:	468c      	mov	ip, r1
 801418e:	4660      	mov	r0, ip
 8014190:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8014194:	5da5      	ldrb	r5, [r4, r6]
 8014196:	f015 0508 	ands.w	r5, r5, #8
 801419a:	d1f8      	bne.n	801418e <_strtoul_l.isra.0+0xa>
 801419c:	2c2d      	cmp	r4, #45	; 0x2d
 801419e:	d134      	bne.n	801420a <_strtoul_l.isra.0+0x86>
 80141a0:	f89c 4000 	ldrb.w	r4, [ip]
 80141a4:	f04f 0801 	mov.w	r8, #1
 80141a8:	f100 0c02 	add.w	ip, r0, #2
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d05e      	beq.n	801426e <_strtoul_l.isra.0+0xea>
 80141b0:	2b10      	cmp	r3, #16
 80141b2:	d10c      	bne.n	80141ce <_strtoul_l.isra.0+0x4a>
 80141b4:	2c30      	cmp	r4, #48	; 0x30
 80141b6:	d10a      	bne.n	80141ce <_strtoul_l.isra.0+0x4a>
 80141b8:	f89c 0000 	ldrb.w	r0, [ip]
 80141bc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80141c0:	2858      	cmp	r0, #88	; 0x58
 80141c2:	d14f      	bne.n	8014264 <_strtoul_l.isra.0+0xe0>
 80141c4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80141c8:	2310      	movs	r3, #16
 80141ca:	f10c 0c02 	add.w	ip, ip, #2
 80141ce:	f04f 37ff 	mov.w	r7, #4294967295
 80141d2:	2500      	movs	r5, #0
 80141d4:	fbb7 f7f3 	udiv	r7, r7, r3
 80141d8:	fb03 f907 	mul.w	r9, r3, r7
 80141dc:	ea6f 0909 	mvn.w	r9, r9
 80141e0:	4628      	mov	r0, r5
 80141e2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80141e6:	2e09      	cmp	r6, #9
 80141e8:	d818      	bhi.n	801421c <_strtoul_l.isra.0+0x98>
 80141ea:	4634      	mov	r4, r6
 80141ec:	42a3      	cmp	r3, r4
 80141ee:	dd24      	ble.n	801423a <_strtoul_l.isra.0+0xb6>
 80141f0:	2d00      	cmp	r5, #0
 80141f2:	db1f      	blt.n	8014234 <_strtoul_l.isra.0+0xb0>
 80141f4:	4287      	cmp	r7, r0
 80141f6:	d31d      	bcc.n	8014234 <_strtoul_l.isra.0+0xb0>
 80141f8:	d101      	bne.n	80141fe <_strtoul_l.isra.0+0x7a>
 80141fa:	45a1      	cmp	r9, r4
 80141fc:	db1a      	blt.n	8014234 <_strtoul_l.isra.0+0xb0>
 80141fe:	fb00 4003 	mla	r0, r0, r3, r4
 8014202:	2501      	movs	r5, #1
 8014204:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8014208:	e7eb      	b.n	80141e2 <_strtoul_l.isra.0+0x5e>
 801420a:	2c2b      	cmp	r4, #43	; 0x2b
 801420c:	bf08      	it	eq
 801420e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8014212:	46a8      	mov	r8, r5
 8014214:	bf08      	it	eq
 8014216:	f100 0c02 	addeq.w	ip, r0, #2
 801421a:	e7c7      	b.n	80141ac <_strtoul_l.isra.0+0x28>
 801421c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8014220:	2e19      	cmp	r6, #25
 8014222:	d801      	bhi.n	8014228 <_strtoul_l.isra.0+0xa4>
 8014224:	3c37      	subs	r4, #55	; 0x37
 8014226:	e7e1      	b.n	80141ec <_strtoul_l.isra.0+0x68>
 8014228:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801422c:	2e19      	cmp	r6, #25
 801422e:	d804      	bhi.n	801423a <_strtoul_l.isra.0+0xb6>
 8014230:	3c57      	subs	r4, #87	; 0x57
 8014232:	e7db      	b.n	80141ec <_strtoul_l.isra.0+0x68>
 8014234:	f04f 35ff 	mov.w	r5, #4294967295
 8014238:	e7e4      	b.n	8014204 <_strtoul_l.isra.0+0x80>
 801423a:	2d00      	cmp	r5, #0
 801423c:	da07      	bge.n	801424e <_strtoul_l.isra.0+0xca>
 801423e:	2322      	movs	r3, #34	; 0x22
 8014240:	f8ce 3000 	str.w	r3, [lr]
 8014244:	f04f 30ff 	mov.w	r0, #4294967295
 8014248:	b942      	cbnz	r2, 801425c <_strtoul_l.isra.0+0xd8>
 801424a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801424e:	f1b8 0f00 	cmp.w	r8, #0
 8014252:	d000      	beq.n	8014256 <_strtoul_l.isra.0+0xd2>
 8014254:	4240      	negs	r0, r0
 8014256:	2a00      	cmp	r2, #0
 8014258:	d0f7      	beq.n	801424a <_strtoul_l.isra.0+0xc6>
 801425a:	b10d      	cbz	r5, 8014260 <_strtoul_l.isra.0+0xdc>
 801425c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8014260:	6011      	str	r1, [r2, #0]
 8014262:	e7f2      	b.n	801424a <_strtoul_l.isra.0+0xc6>
 8014264:	2430      	movs	r4, #48	; 0x30
 8014266:	2b00      	cmp	r3, #0
 8014268:	d1b1      	bne.n	80141ce <_strtoul_l.isra.0+0x4a>
 801426a:	2308      	movs	r3, #8
 801426c:	e7af      	b.n	80141ce <_strtoul_l.isra.0+0x4a>
 801426e:	2c30      	cmp	r4, #48	; 0x30
 8014270:	d0a2      	beq.n	80141b8 <_strtoul_l.isra.0+0x34>
 8014272:	230a      	movs	r3, #10
 8014274:	e7ab      	b.n	80141ce <_strtoul_l.isra.0+0x4a>
 8014276:	bf00      	nop
 8014278:	08015101 	.word	0x08015101

0801427c <_strtoul_r>:
 801427c:	f7ff bf82 	b.w	8014184 <_strtoul_l.isra.0>

08014280 <__submore>:
 8014280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014284:	460c      	mov	r4, r1
 8014286:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014288:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801428c:	4299      	cmp	r1, r3
 801428e:	d11d      	bne.n	80142cc <__submore+0x4c>
 8014290:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014294:	f7ff fa3c 	bl	8013710 <_malloc_r>
 8014298:	b918      	cbnz	r0, 80142a2 <__submore+0x22>
 801429a:	f04f 30ff 	mov.w	r0, #4294967295
 801429e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80142a6:	63a3      	str	r3, [r4, #56]	; 0x38
 80142a8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80142ac:	6360      	str	r0, [r4, #52]	; 0x34
 80142ae:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80142b2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80142b6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80142ba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80142be:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80142c2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80142c6:	6020      	str	r0, [r4, #0]
 80142c8:	2000      	movs	r0, #0
 80142ca:	e7e8      	b.n	801429e <__submore+0x1e>
 80142cc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80142ce:	0077      	lsls	r7, r6, #1
 80142d0:	463a      	mov	r2, r7
 80142d2:	f000 fa2d 	bl	8014730 <_realloc_r>
 80142d6:	4605      	mov	r5, r0
 80142d8:	2800      	cmp	r0, #0
 80142da:	d0de      	beq.n	801429a <__submore+0x1a>
 80142dc:	eb00 0806 	add.w	r8, r0, r6
 80142e0:	4601      	mov	r1, r0
 80142e2:	4632      	mov	r2, r6
 80142e4:	4640      	mov	r0, r8
 80142e6:	f7fe fceb 	bl	8012cc0 <memcpy>
 80142ea:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80142ee:	f8c4 8000 	str.w	r8, [r4]
 80142f2:	e7e9      	b.n	80142c8 <__submore+0x48>

080142f4 <__ascii_wctomb>:
 80142f4:	b149      	cbz	r1, 801430a <__ascii_wctomb+0x16>
 80142f6:	2aff      	cmp	r2, #255	; 0xff
 80142f8:	bf85      	ittet	hi
 80142fa:	238a      	movhi	r3, #138	; 0x8a
 80142fc:	6003      	strhi	r3, [r0, #0]
 80142fe:	700a      	strbls	r2, [r1, #0]
 8014300:	f04f 30ff 	movhi.w	r0, #4294967295
 8014304:	bf98      	it	ls
 8014306:	2001      	movls	r0, #1
 8014308:	4770      	bx	lr
 801430a:	4608      	mov	r0, r1
 801430c:	4770      	bx	lr
	...

08014310 <__assert_func>:
 8014310:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014312:	4614      	mov	r4, r2
 8014314:	461a      	mov	r2, r3
 8014316:	4b09      	ldr	r3, [pc, #36]	; (801433c <__assert_func+0x2c>)
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	4605      	mov	r5, r0
 801431c:	68d8      	ldr	r0, [r3, #12]
 801431e:	b14c      	cbz	r4, 8014334 <__assert_func+0x24>
 8014320:	4b07      	ldr	r3, [pc, #28]	; (8014340 <__assert_func+0x30>)
 8014322:	9100      	str	r1, [sp, #0]
 8014324:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014328:	4906      	ldr	r1, [pc, #24]	; (8014344 <__assert_func+0x34>)
 801432a:	462b      	mov	r3, r5
 801432c:	f000 f9a6 	bl	801467c <fiprintf>
 8014330:	f000 fc3e 	bl	8014bb0 <abort>
 8014334:	4b04      	ldr	r3, [pc, #16]	; (8014348 <__assert_func+0x38>)
 8014336:	461c      	mov	r4, r3
 8014338:	e7f3      	b.n	8014322 <__assert_func+0x12>
 801433a:	bf00      	nop
 801433c:	20000198 	.word	0x20000198
 8014340:	08015530 	.word	0x08015530
 8014344:	0801553d 	.word	0x0801553d
 8014348:	0801556b 	.word	0x0801556b

0801434c <__sflush_r>:
 801434c:	898a      	ldrh	r2, [r1, #12]
 801434e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014352:	4605      	mov	r5, r0
 8014354:	0710      	lsls	r0, r2, #28
 8014356:	460c      	mov	r4, r1
 8014358:	d458      	bmi.n	801440c <__sflush_r+0xc0>
 801435a:	684b      	ldr	r3, [r1, #4]
 801435c:	2b00      	cmp	r3, #0
 801435e:	dc05      	bgt.n	801436c <__sflush_r+0x20>
 8014360:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014362:	2b00      	cmp	r3, #0
 8014364:	dc02      	bgt.n	801436c <__sflush_r+0x20>
 8014366:	2000      	movs	r0, #0
 8014368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801436c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801436e:	2e00      	cmp	r6, #0
 8014370:	d0f9      	beq.n	8014366 <__sflush_r+0x1a>
 8014372:	2300      	movs	r3, #0
 8014374:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014378:	682f      	ldr	r7, [r5, #0]
 801437a:	602b      	str	r3, [r5, #0]
 801437c:	d032      	beq.n	80143e4 <__sflush_r+0x98>
 801437e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014380:	89a3      	ldrh	r3, [r4, #12]
 8014382:	075a      	lsls	r2, r3, #29
 8014384:	d505      	bpl.n	8014392 <__sflush_r+0x46>
 8014386:	6863      	ldr	r3, [r4, #4]
 8014388:	1ac0      	subs	r0, r0, r3
 801438a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801438c:	b10b      	cbz	r3, 8014392 <__sflush_r+0x46>
 801438e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014390:	1ac0      	subs	r0, r0, r3
 8014392:	2300      	movs	r3, #0
 8014394:	4602      	mov	r2, r0
 8014396:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014398:	6a21      	ldr	r1, [r4, #32]
 801439a:	4628      	mov	r0, r5
 801439c:	47b0      	blx	r6
 801439e:	1c43      	adds	r3, r0, #1
 80143a0:	89a3      	ldrh	r3, [r4, #12]
 80143a2:	d106      	bne.n	80143b2 <__sflush_r+0x66>
 80143a4:	6829      	ldr	r1, [r5, #0]
 80143a6:	291d      	cmp	r1, #29
 80143a8:	d82c      	bhi.n	8014404 <__sflush_r+0xb8>
 80143aa:	4a2a      	ldr	r2, [pc, #168]	; (8014454 <__sflush_r+0x108>)
 80143ac:	40ca      	lsrs	r2, r1
 80143ae:	07d6      	lsls	r6, r2, #31
 80143b0:	d528      	bpl.n	8014404 <__sflush_r+0xb8>
 80143b2:	2200      	movs	r2, #0
 80143b4:	6062      	str	r2, [r4, #4]
 80143b6:	04d9      	lsls	r1, r3, #19
 80143b8:	6922      	ldr	r2, [r4, #16]
 80143ba:	6022      	str	r2, [r4, #0]
 80143bc:	d504      	bpl.n	80143c8 <__sflush_r+0x7c>
 80143be:	1c42      	adds	r2, r0, #1
 80143c0:	d101      	bne.n	80143c6 <__sflush_r+0x7a>
 80143c2:	682b      	ldr	r3, [r5, #0]
 80143c4:	b903      	cbnz	r3, 80143c8 <__sflush_r+0x7c>
 80143c6:	6560      	str	r0, [r4, #84]	; 0x54
 80143c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80143ca:	602f      	str	r7, [r5, #0]
 80143cc:	2900      	cmp	r1, #0
 80143ce:	d0ca      	beq.n	8014366 <__sflush_r+0x1a>
 80143d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80143d4:	4299      	cmp	r1, r3
 80143d6:	d002      	beq.n	80143de <__sflush_r+0x92>
 80143d8:	4628      	mov	r0, r5
 80143da:	f7ff f949 	bl	8013670 <_free_r>
 80143de:	2000      	movs	r0, #0
 80143e0:	6360      	str	r0, [r4, #52]	; 0x34
 80143e2:	e7c1      	b.n	8014368 <__sflush_r+0x1c>
 80143e4:	6a21      	ldr	r1, [r4, #32]
 80143e6:	2301      	movs	r3, #1
 80143e8:	4628      	mov	r0, r5
 80143ea:	47b0      	blx	r6
 80143ec:	1c41      	adds	r1, r0, #1
 80143ee:	d1c7      	bne.n	8014380 <__sflush_r+0x34>
 80143f0:	682b      	ldr	r3, [r5, #0]
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d0c4      	beq.n	8014380 <__sflush_r+0x34>
 80143f6:	2b1d      	cmp	r3, #29
 80143f8:	d001      	beq.n	80143fe <__sflush_r+0xb2>
 80143fa:	2b16      	cmp	r3, #22
 80143fc:	d101      	bne.n	8014402 <__sflush_r+0xb6>
 80143fe:	602f      	str	r7, [r5, #0]
 8014400:	e7b1      	b.n	8014366 <__sflush_r+0x1a>
 8014402:	89a3      	ldrh	r3, [r4, #12]
 8014404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014408:	81a3      	strh	r3, [r4, #12]
 801440a:	e7ad      	b.n	8014368 <__sflush_r+0x1c>
 801440c:	690f      	ldr	r7, [r1, #16]
 801440e:	2f00      	cmp	r7, #0
 8014410:	d0a9      	beq.n	8014366 <__sflush_r+0x1a>
 8014412:	0793      	lsls	r3, r2, #30
 8014414:	680e      	ldr	r6, [r1, #0]
 8014416:	bf08      	it	eq
 8014418:	694b      	ldreq	r3, [r1, #20]
 801441a:	600f      	str	r7, [r1, #0]
 801441c:	bf18      	it	ne
 801441e:	2300      	movne	r3, #0
 8014420:	eba6 0807 	sub.w	r8, r6, r7
 8014424:	608b      	str	r3, [r1, #8]
 8014426:	f1b8 0f00 	cmp.w	r8, #0
 801442a:	dd9c      	ble.n	8014366 <__sflush_r+0x1a>
 801442c:	6a21      	ldr	r1, [r4, #32]
 801442e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014430:	4643      	mov	r3, r8
 8014432:	463a      	mov	r2, r7
 8014434:	4628      	mov	r0, r5
 8014436:	47b0      	blx	r6
 8014438:	2800      	cmp	r0, #0
 801443a:	dc06      	bgt.n	801444a <__sflush_r+0xfe>
 801443c:	89a3      	ldrh	r3, [r4, #12]
 801443e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014442:	81a3      	strh	r3, [r4, #12]
 8014444:	f04f 30ff 	mov.w	r0, #4294967295
 8014448:	e78e      	b.n	8014368 <__sflush_r+0x1c>
 801444a:	4407      	add	r7, r0
 801444c:	eba8 0800 	sub.w	r8, r8, r0
 8014450:	e7e9      	b.n	8014426 <__sflush_r+0xda>
 8014452:	bf00      	nop
 8014454:	20400001 	.word	0x20400001

08014458 <_fflush_r>:
 8014458:	b538      	push	{r3, r4, r5, lr}
 801445a:	690b      	ldr	r3, [r1, #16]
 801445c:	4605      	mov	r5, r0
 801445e:	460c      	mov	r4, r1
 8014460:	b913      	cbnz	r3, 8014468 <_fflush_r+0x10>
 8014462:	2500      	movs	r5, #0
 8014464:	4628      	mov	r0, r5
 8014466:	bd38      	pop	{r3, r4, r5, pc}
 8014468:	b118      	cbz	r0, 8014472 <_fflush_r+0x1a>
 801446a:	6983      	ldr	r3, [r0, #24]
 801446c:	b90b      	cbnz	r3, 8014472 <_fflush_r+0x1a>
 801446e:	f000 f887 	bl	8014580 <__sinit>
 8014472:	4b14      	ldr	r3, [pc, #80]	; (80144c4 <_fflush_r+0x6c>)
 8014474:	429c      	cmp	r4, r3
 8014476:	d11b      	bne.n	80144b0 <_fflush_r+0x58>
 8014478:	686c      	ldr	r4, [r5, #4]
 801447a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801447e:	2b00      	cmp	r3, #0
 8014480:	d0ef      	beq.n	8014462 <_fflush_r+0xa>
 8014482:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014484:	07d0      	lsls	r0, r2, #31
 8014486:	d404      	bmi.n	8014492 <_fflush_r+0x3a>
 8014488:	0599      	lsls	r1, r3, #22
 801448a:	d402      	bmi.n	8014492 <_fflush_r+0x3a>
 801448c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801448e:	f000 f927 	bl	80146e0 <__retarget_lock_acquire_recursive>
 8014492:	4628      	mov	r0, r5
 8014494:	4621      	mov	r1, r4
 8014496:	f7ff ff59 	bl	801434c <__sflush_r>
 801449a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801449c:	07da      	lsls	r2, r3, #31
 801449e:	4605      	mov	r5, r0
 80144a0:	d4e0      	bmi.n	8014464 <_fflush_r+0xc>
 80144a2:	89a3      	ldrh	r3, [r4, #12]
 80144a4:	059b      	lsls	r3, r3, #22
 80144a6:	d4dd      	bmi.n	8014464 <_fflush_r+0xc>
 80144a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80144aa:	f000 f91a 	bl	80146e2 <__retarget_lock_release_recursive>
 80144ae:	e7d9      	b.n	8014464 <_fflush_r+0xc>
 80144b0:	4b05      	ldr	r3, [pc, #20]	; (80144c8 <_fflush_r+0x70>)
 80144b2:	429c      	cmp	r4, r3
 80144b4:	d101      	bne.n	80144ba <_fflush_r+0x62>
 80144b6:	68ac      	ldr	r4, [r5, #8]
 80144b8:	e7df      	b.n	801447a <_fflush_r+0x22>
 80144ba:	4b04      	ldr	r3, [pc, #16]	; (80144cc <_fflush_r+0x74>)
 80144bc:	429c      	cmp	r4, r3
 80144be:	bf08      	it	eq
 80144c0:	68ec      	ldreq	r4, [r5, #12]
 80144c2:	e7da      	b.n	801447a <_fflush_r+0x22>
 80144c4:	0801558c 	.word	0x0801558c
 80144c8:	080155ac 	.word	0x080155ac
 80144cc:	0801556c 	.word	0x0801556c

080144d0 <std>:
 80144d0:	2300      	movs	r3, #0
 80144d2:	b510      	push	{r4, lr}
 80144d4:	4604      	mov	r4, r0
 80144d6:	e9c0 3300 	strd	r3, r3, [r0]
 80144da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80144de:	6083      	str	r3, [r0, #8]
 80144e0:	8181      	strh	r1, [r0, #12]
 80144e2:	6643      	str	r3, [r0, #100]	; 0x64
 80144e4:	81c2      	strh	r2, [r0, #14]
 80144e6:	6183      	str	r3, [r0, #24]
 80144e8:	4619      	mov	r1, r3
 80144ea:	2208      	movs	r2, #8
 80144ec:	305c      	adds	r0, #92	; 0x5c
 80144ee:	f7fb fb81 	bl	800fbf4 <memset>
 80144f2:	4b05      	ldr	r3, [pc, #20]	; (8014508 <std+0x38>)
 80144f4:	6263      	str	r3, [r4, #36]	; 0x24
 80144f6:	4b05      	ldr	r3, [pc, #20]	; (801450c <std+0x3c>)
 80144f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80144fa:	4b05      	ldr	r3, [pc, #20]	; (8014510 <std+0x40>)
 80144fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80144fe:	4b05      	ldr	r3, [pc, #20]	; (8014514 <std+0x44>)
 8014500:	6224      	str	r4, [r4, #32]
 8014502:	6323      	str	r3, [r4, #48]	; 0x30
 8014504:	bd10      	pop	{r4, pc}
 8014506:	bf00      	nop
 8014508:	0801099d 	.word	0x0801099d
 801450c:	080109c3 	.word	0x080109c3
 8014510:	080109fb 	.word	0x080109fb
 8014514:	08010a1f 	.word	0x08010a1f

08014518 <_cleanup_r>:
 8014518:	4901      	ldr	r1, [pc, #4]	; (8014520 <_cleanup_r+0x8>)
 801451a:	f000 b8c1 	b.w	80146a0 <_fwalk_reent>
 801451e:	bf00      	nop
 8014520:	08014459 	.word	0x08014459

08014524 <__sfmoreglue>:
 8014524:	b570      	push	{r4, r5, r6, lr}
 8014526:	1e4a      	subs	r2, r1, #1
 8014528:	2568      	movs	r5, #104	; 0x68
 801452a:	4355      	muls	r5, r2
 801452c:	460e      	mov	r6, r1
 801452e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014532:	f7ff f8ed 	bl	8013710 <_malloc_r>
 8014536:	4604      	mov	r4, r0
 8014538:	b140      	cbz	r0, 801454c <__sfmoreglue+0x28>
 801453a:	2100      	movs	r1, #0
 801453c:	e9c0 1600 	strd	r1, r6, [r0]
 8014540:	300c      	adds	r0, #12
 8014542:	60a0      	str	r0, [r4, #8]
 8014544:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014548:	f7fb fb54 	bl	800fbf4 <memset>
 801454c:	4620      	mov	r0, r4
 801454e:	bd70      	pop	{r4, r5, r6, pc}

08014550 <__sfp_lock_acquire>:
 8014550:	4801      	ldr	r0, [pc, #4]	; (8014558 <__sfp_lock_acquire+0x8>)
 8014552:	f000 b8c5 	b.w	80146e0 <__retarget_lock_acquire_recursive>
 8014556:	bf00      	nop
 8014558:	20003390 	.word	0x20003390

0801455c <__sfp_lock_release>:
 801455c:	4801      	ldr	r0, [pc, #4]	; (8014564 <__sfp_lock_release+0x8>)
 801455e:	f000 b8c0 	b.w	80146e2 <__retarget_lock_release_recursive>
 8014562:	bf00      	nop
 8014564:	20003390 	.word	0x20003390

08014568 <__sinit_lock_acquire>:
 8014568:	4801      	ldr	r0, [pc, #4]	; (8014570 <__sinit_lock_acquire+0x8>)
 801456a:	f000 b8b9 	b.w	80146e0 <__retarget_lock_acquire_recursive>
 801456e:	bf00      	nop
 8014570:	2000338b 	.word	0x2000338b

08014574 <__sinit_lock_release>:
 8014574:	4801      	ldr	r0, [pc, #4]	; (801457c <__sinit_lock_release+0x8>)
 8014576:	f000 b8b4 	b.w	80146e2 <__retarget_lock_release_recursive>
 801457a:	bf00      	nop
 801457c:	2000338b 	.word	0x2000338b

08014580 <__sinit>:
 8014580:	b510      	push	{r4, lr}
 8014582:	4604      	mov	r4, r0
 8014584:	f7ff fff0 	bl	8014568 <__sinit_lock_acquire>
 8014588:	69a3      	ldr	r3, [r4, #24]
 801458a:	b11b      	cbz	r3, 8014594 <__sinit+0x14>
 801458c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014590:	f7ff bff0 	b.w	8014574 <__sinit_lock_release>
 8014594:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014598:	6523      	str	r3, [r4, #80]	; 0x50
 801459a:	4b13      	ldr	r3, [pc, #76]	; (80145e8 <__sinit+0x68>)
 801459c:	4a13      	ldr	r2, [pc, #76]	; (80145ec <__sinit+0x6c>)
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80145a2:	42a3      	cmp	r3, r4
 80145a4:	bf04      	itt	eq
 80145a6:	2301      	moveq	r3, #1
 80145a8:	61a3      	streq	r3, [r4, #24]
 80145aa:	4620      	mov	r0, r4
 80145ac:	f000 f820 	bl	80145f0 <__sfp>
 80145b0:	6060      	str	r0, [r4, #4]
 80145b2:	4620      	mov	r0, r4
 80145b4:	f000 f81c 	bl	80145f0 <__sfp>
 80145b8:	60a0      	str	r0, [r4, #8]
 80145ba:	4620      	mov	r0, r4
 80145bc:	f000 f818 	bl	80145f0 <__sfp>
 80145c0:	2200      	movs	r2, #0
 80145c2:	60e0      	str	r0, [r4, #12]
 80145c4:	2104      	movs	r1, #4
 80145c6:	6860      	ldr	r0, [r4, #4]
 80145c8:	f7ff ff82 	bl	80144d0 <std>
 80145cc:	68a0      	ldr	r0, [r4, #8]
 80145ce:	2201      	movs	r2, #1
 80145d0:	2109      	movs	r1, #9
 80145d2:	f7ff ff7d 	bl	80144d0 <std>
 80145d6:	68e0      	ldr	r0, [r4, #12]
 80145d8:	2202      	movs	r2, #2
 80145da:	2112      	movs	r1, #18
 80145dc:	f7ff ff78 	bl	80144d0 <std>
 80145e0:	2301      	movs	r3, #1
 80145e2:	61a3      	str	r3, [r4, #24]
 80145e4:	e7d2      	b.n	801458c <__sinit+0xc>
 80145e6:	bf00      	nop
 80145e8:	08015204 	.word	0x08015204
 80145ec:	08014519 	.word	0x08014519

080145f0 <__sfp>:
 80145f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145f2:	4607      	mov	r7, r0
 80145f4:	f7ff ffac 	bl	8014550 <__sfp_lock_acquire>
 80145f8:	4b1e      	ldr	r3, [pc, #120]	; (8014674 <__sfp+0x84>)
 80145fa:	681e      	ldr	r6, [r3, #0]
 80145fc:	69b3      	ldr	r3, [r6, #24]
 80145fe:	b913      	cbnz	r3, 8014606 <__sfp+0x16>
 8014600:	4630      	mov	r0, r6
 8014602:	f7ff ffbd 	bl	8014580 <__sinit>
 8014606:	3648      	adds	r6, #72	; 0x48
 8014608:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801460c:	3b01      	subs	r3, #1
 801460e:	d503      	bpl.n	8014618 <__sfp+0x28>
 8014610:	6833      	ldr	r3, [r6, #0]
 8014612:	b30b      	cbz	r3, 8014658 <__sfp+0x68>
 8014614:	6836      	ldr	r6, [r6, #0]
 8014616:	e7f7      	b.n	8014608 <__sfp+0x18>
 8014618:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801461c:	b9d5      	cbnz	r5, 8014654 <__sfp+0x64>
 801461e:	4b16      	ldr	r3, [pc, #88]	; (8014678 <__sfp+0x88>)
 8014620:	60e3      	str	r3, [r4, #12]
 8014622:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014626:	6665      	str	r5, [r4, #100]	; 0x64
 8014628:	f000 f859 	bl	80146de <__retarget_lock_init_recursive>
 801462c:	f7ff ff96 	bl	801455c <__sfp_lock_release>
 8014630:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014634:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014638:	6025      	str	r5, [r4, #0]
 801463a:	61a5      	str	r5, [r4, #24]
 801463c:	2208      	movs	r2, #8
 801463e:	4629      	mov	r1, r5
 8014640:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014644:	f7fb fad6 	bl	800fbf4 <memset>
 8014648:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801464c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014650:	4620      	mov	r0, r4
 8014652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014654:	3468      	adds	r4, #104	; 0x68
 8014656:	e7d9      	b.n	801460c <__sfp+0x1c>
 8014658:	2104      	movs	r1, #4
 801465a:	4638      	mov	r0, r7
 801465c:	f7ff ff62 	bl	8014524 <__sfmoreglue>
 8014660:	4604      	mov	r4, r0
 8014662:	6030      	str	r0, [r6, #0]
 8014664:	2800      	cmp	r0, #0
 8014666:	d1d5      	bne.n	8014614 <__sfp+0x24>
 8014668:	f7ff ff78 	bl	801455c <__sfp_lock_release>
 801466c:	230c      	movs	r3, #12
 801466e:	603b      	str	r3, [r7, #0]
 8014670:	e7ee      	b.n	8014650 <__sfp+0x60>
 8014672:	bf00      	nop
 8014674:	08015204 	.word	0x08015204
 8014678:	ffff0001 	.word	0xffff0001

0801467c <fiprintf>:
 801467c:	b40e      	push	{r1, r2, r3}
 801467e:	b503      	push	{r0, r1, lr}
 8014680:	4601      	mov	r1, r0
 8014682:	ab03      	add	r3, sp, #12
 8014684:	4805      	ldr	r0, [pc, #20]	; (801469c <fiprintf+0x20>)
 8014686:	f853 2b04 	ldr.w	r2, [r3], #4
 801468a:	6800      	ldr	r0, [r0, #0]
 801468c:	9301      	str	r3, [sp, #4]
 801468e:	f000 f89f 	bl	80147d0 <_vfiprintf_r>
 8014692:	b002      	add	sp, #8
 8014694:	f85d eb04 	ldr.w	lr, [sp], #4
 8014698:	b003      	add	sp, #12
 801469a:	4770      	bx	lr
 801469c:	20000198 	.word	0x20000198

080146a0 <_fwalk_reent>:
 80146a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80146a4:	4606      	mov	r6, r0
 80146a6:	4688      	mov	r8, r1
 80146a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80146ac:	2700      	movs	r7, #0
 80146ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80146b2:	f1b9 0901 	subs.w	r9, r9, #1
 80146b6:	d505      	bpl.n	80146c4 <_fwalk_reent+0x24>
 80146b8:	6824      	ldr	r4, [r4, #0]
 80146ba:	2c00      	cmp	r4, #0
 80146bc:	d1f7      	bne.n	80146ae <_fwalk_reent+0xe>
 80146be:	4638      	mov	r0, r7
 80146c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80146c4:	89ab      	ldrh	r3, [r5, #12]
 80146c6:	2b01      	cmp	r3, #1
 80146c8:	d907      	bls.n	80146da <_fwalk_reent+0x3a>
 80146ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80146ce:	3301      	adds	r3, #1
 80146d0:	d003      	beq.n	80146da <_fwalk_reent+0x3a>
 80146d2:	4629      	mov	r1, r5
 80146d4:	4630      	mov	r0, r6
 80146d6:	47c0      	blx	r8
 80146d8:	4307      	orrs	r7, r0
 80146da:	3568      	adds	r5, #104	; 0x68
 80146dc:	e7e9      	b.n	80146b2 <_fwalk_reent+0x12>

080146de <__retarget_lock_init_recursive>:
 80146de:	4770      	bx	lr

080146e0 <__retarget_lock_acquire_recursive>:
 80146e0:	4770      	bx	lr

080146e2 <__retarget_lock_release_recursive>:
 80146e2:	4770      	bx	lr

080146e4 <memmove>:
 80146e4:	4288      	cmp	r0, r1
 80146e6:	b510      	push	{r4, lr}
 80146e8:	eb01 0402 	add.w	r4, r1, r2
 80146ec:	d902      	bls.n	80146f4 <memmove+0x10>
 80146ee:	4284      	cmp	r4, r0
 80146f0:	4623      	mov	r3, r4
 80146f2:	d807      	bhi.n	8014704 <memmove+0x20>
 80146f4:	1e43      	subs	r3, r0, #1
 80146f6:	42a1      	cmp	r1, r4
 80146f8:	d008      	beq.n	801470c <memmove+0x28>
 80146fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80146fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014702:	e7f8      	b.n	80146f6 <memmove+0x12>
 8014704:	4402      	add	r2, r0
 8014706:	4601      	mov	r1, r0
 8014708:	428a      	cmp	r2, r1
 801470a:	d100      	bne.n	801470e <memmove+0x2a>
 801470c:	bd10      	pop	{r4, pc}
 801470e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014712:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014716:	e7f7      	b.n	8014708 <memmove+0x24>

08014718 <__malloc_lock>:
 8014718:	4801      	ldr	r0, [pc, #4]	; (8014720 <__malloc_lock+0x8>)
 801471a:	f7ff bfe1 	b.w	80146e0 <__retarget_lock_acquire_recursive>
 801471e:	bf00      	nop
 8014720:	2000338c 	.word	0x2000338c

08014724 <__malloc_unlock>:
 8014724:	4801      	ldr	r0, [pc, #4]	; (801472c <__malloc_unlock+0x8>)
 8014726:	f7ff bfdc 	b.w	80146e2 <__retarget_lock_release_recursive>
 801472a:	bf00      	nop
 801472c:	2000338c 	.word	0x2000338c

08014730 <_realloc_r>:
 8014730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014732:	4607      	mov	r7, r0
 8014734:	4614      	mov	r4, r2
 8014736:	460e      	mov	r6, r1
 8014738:	b921      	cbnz	r1, 8014744 <_realloc_r+0x14>
 801473a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801473e:	4611      	mov	r1, r2
 8014740:	f7fe bfe6 	b.w	8013710 <_malloc_r>
 8014744:	b922      	cbnz	r2, 8014750 <_realloc_r+0x20>
 8014746:	f7fe ff93 	bl	8013670 <_free_r>
 801474a:	4625      	mov	r5, r4
 801474c:	4628      	mov	r0, r5
 801474e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014750:	f000 fa9a 	bl	8014c88 <_malloc_usable_size_r>
 8014754:	42a0      	cmp	r0, r4
 8014756:	d20f      	bcs.n	8014778 <_realloc_r+0x48>
 8014758:	4621      	mov	r1, r4
 801475a:	4638      	mov	r0, r7
 801475c:	f7fe ffd8 	bl	8013710 <_malloc_r>
 8014760:	4605      	mov	r5, r0
 8014762:	2800      	cmp	r0, #0
 8014764:	d0f2      	beq.n	801474c <_realloc_r+0x1c>
 8014766:	4631      	mov	r1, r6
 8014768:	4622      	mov	r2, r4
 801476a:	f7fe faa9 	bl	8012cc0 <memcpy>
 801476e:	4631      	mov	r1, r6
 8014770:	4638      	mov	r0, r7
 8014772:	f7fe ff7d 	bl	8013670 <_free_r>
 8014776:	e7e9      	b.n	801474c <_realloc_r+0x1c>
 8014778:	4635      	mov	r5, r6
 801477a:	e7e7      	b.n	801474c <_realloc_r+0x1c>

0801477c <__sfputc_r>:
 801477c:	6893      	ldr	r3, [r2, #8]
 801477e:	3b01      	subs	r3, #1
 8014780:	2b00      	cmp	r3, #0
 8014782:	b410      	push	{r4}
 8014784:	6093      	str	r3, [r2, #8]
 8014786:	da08      	bge.n	801479a <__sfputc_r+0x1e>
 8014788:	6994      	ldr	r4, [r2, #24]
 801478a:	42a3      	cmp	r3, r4
 801478c:	db01      	blt.n	8014792 <__sfputc_r+0x16>
 801478e:	290a      	cmp	r1, #10
 8014790:	d103      	bne.n	801479a <__sfputc_r+0x1e>
 8014792:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014796:	f000 b94b 	b.w	8014a30 <__swbuf_r>
 801479a:	6813      	ldr	r3, [r2, #0]
 801479c:	1c58      	adds	r0, r3, #1
 801479e:	6010      	str	r0, [r2, #0]
 80147a0:	7019      	strb	r1, [r3, #0]
 80147a2:	4608      	mov	r0, r1
 80147a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80147a8:	4770      	bx	lr

080147aa <__sfputs_r>:
 80147aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147ac:	4606      	mov	r6, r0
 80147ae:	460f      	mov	r7, r1
 80147b0:	4614      	mov	r4, r2
 80147b2:	18d5      	adds	r5, r2, r3
 80147b4:	42ac      	cmp	r4, r5
 80147b6:	d101      	bne.n	80147bc <__sfputs_r+0x12>
 80147b8:	2000      	movs	r0, #0
 80147ba:	e007      	b.n	80147cc <__sfputs_r+0x22>
 80147bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80147c0:	463a      	mov	r2, r7
 80147c2:	4630      	mov	r0, r6
 80147c4:	f7ff ffda 	bl	801477c <__sfputc_r>
 80147c8:	1c43      	adds	r3, r0, #1
 80147ca:	d1f3      	bne.n	80147b4 <__sfputs_r+0xa>
 80147cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080147d0 <_vfiprintf_r>:
 80147d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147d4:	460d      	mov	r5, r1
 80147d6:	b09d      	sub	sp, #116	; 0x74
 80147d8:	4614      	mov	r4, r2
 80147da:	4698      	mov	r8, r3
 80147dc:	4606      	mov	r6, r0
 80147de:	b118      	cbz	r0, 80147e8 <_vfiprintf_r+0x18>
 80147e0:	6983      	ldr	r3, [r0, #24]
 80147e2:	b90b      	cbnz	r3, 80147e8 <_vfiprintf_r+0x18>
 80147e4:	f7ff fecc 	bl	8014580 <__sinit>
 80147e8:	4b89      	ldr	r3, [pc, #548]	; (8014a10 <_vfiprintf_r+0x240>)
 80147ea:	429d      	cmp	r5, r3
 80147ec:	d11b      	bne.n	8014826 <_vfiprintf_r+0x56>
 80147ee:	6875      	ldr	r5, [r6, #4]
 80147f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80147f2:	07d9      	lsls	r1, r3, #31
 80147f4:	d405      	bmi.n	8014802 <_vfiprintf_r+0x32>
 80147f6:	89ab      	ldrh	r3, [r5, #12]
 80147f8:	059a      	lsls	r2, r3, #22
 80147fa:	d402      	bmi.n	8014802 <_vfiprintf_r+0x32>
 80147fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80147fe:	f7ff ff6f 	bl	80146e0 <__retarget_lock_acquire_recursive>
 8014802:	89ab      	ldrh	r3, [r5, #12]
 8014804:	071b      	lsls	r3, r3, #28
 8014806:	d501      	bpl.n	801480c <_vfiprintf_r+0x3c>
 8014808:	692b      	ldr	r3, [r5, #16]
 801480a:	b9eb      	cbnz	r3, 8014848 <_vfiprintf_r+0x78>
 801480c:	4629      	mov	r1, r5
 801480e:	4630      	mov	r0, r6
 8014810:	f000 f960 	bl	8014ad4 <__swsetup_r>
 8014814:	b1c0      	cbz	r0, 8014848 <_vfiprintf_r+0x78>
 8014816:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014818:	07dc      	lsls	r4, r3, #31
 801481a:	d50e      	bpl.n	801483a <_vfiprintf_r+0x6a>
 801481c:	f04f 30ff 	mov.w	r0, #4294967295
 8014820:	b01d      	add	sp, #116	; 0x74
 8014822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014826:	4b7b      	ldr	r3, [pc, #492]	; (8014a14 <_vfiprintf_r+0x244>)
 8014828:	429d      	cmp	r5, r3
 801482a:	d101      	bne.n	8014830 <_vfiprintf_r+0x60>
 801482c:	68b5      	ldr	r5, [r6, #8]
 801482e:	e7df      	b.n	80147f0 <_vfiprintf_r+0x20>
 8014830:	4b79      	ldr	r3, [pc, #484]	; (8014a18 <_vfiprintf_r+0x248>)
 8014832:	429d      	cmp	r5, r3
 8014834:	bf08      	it	eq
 8014836:	68f5      	ldreq	r5, [r6, #12]
 8014838:	e7da      	b.n	80147f0 <_vfiprintf_r+0x20>
 801483a:	89ab      	ldrh	r3, [r5, #12]
 801483c:	0598      	lsls	r0, r3, #22
 801483e:	d4ed      	bmi.n	801481c <_vfiprintf_r+0x4c>
 8014840:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014842:	f7ff ff4e 	bl	80146e2 <__retarget_lock_release_recursive>
 8014846:	e7e9      	b.n	801481c <_vfiprintf_r+0x4c>
 8014848:	2300      	movs	r3, #0
 801484a:	9309      	str	r3, [sp, #36]	; 0x24
 801484c:	2320      	movs	r3, #32
 801484e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014852:	f8cd 800c 	str.w	r8, [sp, #12]
 8014856:	2330      	movs	r3, #48	; 0x30
 8014858:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014a1c <_vfiprintf_r+0x24c>
 801485c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014860:	f04f 0901 	mov.w	r9, #1
 8014864:	4623      	mov	r3, r4
 8014866:	469a      	mov	sl, r3
 8014868:	f813 2b01 	ldrb.w	r2, [r3], #1
 801486c:	b10a      	cbz	r2, 8014872 <_vfiprintf_r+0xa2>
 801486e:	2a25      	cmp	r2, #37	; 0x25
 8014870:	d1f9      	bne.n	8014866 <_vfiprintf_r+0x96>
 8014872:	ebba 0b04 	subs.w	fp, sl, r4
 8014876:	d00b      	beq.n	8014890 <_vfiprintf_r+0xc0>
 8014878:	465b      	mov	r3, fp
 801487a:	4622      	mov	r2, r4
 801487c:	4629      	mov	r1, r5
 801487e:	4630      	mov	r0, r6
 8014880:	f7ff ff93 	bl	80147aa <__sfputs_r>
 8014884:	3001      	adds	r0, #1
 8014886:	f000 80aa 	beq.w	80149de <_vfiprintf_r+0x20e>
 801488a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801488c:	445a      	add	r2, fp
 801488e:	9209      	str	r2, [sp, #36]	; 0x24
 8014890:	f89a 3000 	ldrb.w	r3, [sl]
 8014894:	2b00      	cmp	r3, #0
 8014896:	f000 80a2 	beq.w	80149de <_vfiprintf_r+0x20e>
 801489a:	2300      	movs	r3, #0
 801489c:	f04f 32ff 	mov.w	r2, #4294967295
 80148a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80148a4:	f10a 0a01 	add.w	sl, sl, #1
 80148a8:	9304      	str	r3, [sp, #16]
 80148aa:	9307      	str	r3, [sp, #28]
 80148ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80148b0:	931a      	str	r3, [sp, #104]	; 0x68
 80148b2:	4654      	mov	r4, sl
 80148b4:	2205      	movs	r2, #5
 80148b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80148ba:	4858      	ldr	r0, [pc, #352]	; (8014a1c <_vfiprintf_r+0x24c>)
 80148bc:	f7eb fca0 	bl	8000200 <memchr>
 80148c0:	9a04      	ldr	r2, [sp, #16]
 80148c2:	b9d8      	cbnz	r0, 80148fc <_vfiprintf_r+0x12c>
 80148c4:	06d1      	lsls	r1, r2, #27
 80148c6:	bf44      	itt	mi
 80148c8:	2320      	movmi	r3, #32
 80148ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80148ce:	0713      	lsls	r3, r2, #28
 80148d0:	bf44      	itt	mi
 80148d2:	232b      	movmi	r3, #43	; 0x2b
 80148d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80148d8:	f89a 3000 	ldrb.w	r3, [sl]
 80148dc:	2b2a      	cmp	r3, #42	; 0x2a
 80148de:	d015      	beq.n	801490c <_vfiprintf_r+0x13c>
 80148e0:	9a07      	ldr	r2, [sp, #28]
 80148e2:	4654      	mov	r4, sl
 80148e4:	2000      	movs	r0, #0
 80148e6:	f04f 0c0a 	mov.w	ip, #10
 80148ea:	4621      	mov	r1, r4
 80148ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80148f0:	3b30      	subs	r3, #48	; 0x30
 80148f2:	2b09      	cmp	r3, #9
 80148f4:	d94e      	bls.n	8014994 <_vfiprintf_r+0x1c4>
 80148f6:	b1b0      	cbz	r0, 8014926 <_vfiprintf_r+0x156>
 80148f8:	9207      	str	r2, [sp, #28]
 80148fa:	e014      	b.n	8014926 <_vfiprintf_r+0x156>
 80148fc:	eba0 0308 	sub.w	r3, r0, r8
 8014900:	fa09 f303 	lsl.w	r3, r9, r3
 8014904:	4313      	orrs	r3, r2
 8014906:	9304      	str	r3, [sp, #16]
 8014908:	46a2      	mov	sl, r4
 801490a:	e7d2      	b.n	80148b2 <_vfiprintf_r+0xe2>
 801490c:	9b03      	ldr	r3, [sp, #12]
 801490e:	1d19      	adds	r1, r3, #4
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	9103      	str	r1, [sp, #12]
 8014914:	2b00      	cmp	r3, #0
 8014916:	bfbb      	ittet	lt
 8014918:	425b      	neglt	r3, r3
 801491a:	f042 0202 	orrlt.w	r2, r2, #2
 801491e:	9307      	strge	r3, [sp, #28]
 8014920:	9307      	strlt	r3, [sp, #28]
 8014922:	bfb8      	it	lt
 8014924:	9204      	strlt	r2, [sp, #16]
 8014926:	7823      	ldrb	r3, [r4, #0]
 8014928:	2b2e      	cmp	r3, #46	; 0x2e
 801492a:	d10c      	bne.n	8014946 <_vfiprintf_r+0x176>
 801492c:	7863      	ldrb	r3, [r4, #1]
 801492e:	2b2a      	cmp	r3, #42	; 0x2a
 8014930:	d135      	bne.n	801499e <_vfiprintf_r+0x1ce>
 8014932:	9b03      	ldr	r3, [sp, #12]
 8014934:	1d1a      	adds	r2, r3, #4
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	9203      	str	r2, [sp, #12]
 801493a:	2b00      	cmp	r3, #0
 801493c:	bfb8      	it	lt
 801493e:	f04f 33ff 	movlt.w	r3, #4294967295
 8014942:	3402      	adds	r4, #2
 8014944:	9305      	str	r3, [sp, #20]
 8014946:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014a2c <_vfiprintf_r+0x25c>
 801494a:	7821      	ldrb	r1, [r4, #0]
 801494c:	2203      	movs	r2, #3
 801494e:	4650      	mov	r0, sl
 8014950:	f7eb fc56 	bl	8000200 <memchr>
 8014954:	b140      	cbz	r0, 8014968 <_vfiprintf_r+0x198>
 8014956:	2340      	movs	r3, #64	; 0x40
 8014958:	eba0 000a 	sub.w	r0, r0, sl
 801495c:	fa03 f000 	lsl.w	r0, r3, r0
 8014960:	9b04      	ldr	r3, [sp, #16]
 8014962:	4303      	orrs	r3, r0
 8014964:	3401      	adds	r4, #1
 8014966:	9304      	str	r3, [sp, #16]
 8014968:	f814 1b01 	ldrb.w	r1, [r4], #1
 801496c:	482c      	ldr	r0, [pc, #176]	; (8014a20 <_vfiprintf_r+0x250>)
 801496e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014972:	2206      	movs	r2, #6
 8014974:	f7eb fc44 	bl	8000200 <memchr>
 8014978:	2800      	cmp	r0, #0
 801497a:	d03f      	beq.n	80149fc <_vfiprintf_r+0x22c>
 801497c:	4b29      	ldr	r3, [pc, #164]	; (8014a24 <_vfiprintf_r+0x254>)
 801497e:	bb1b      	cbnz	r3, 80149c8 <_vfiprintf_r+0x1f8>
 8014980:	9b03      	ldr	r3, [sp, #12]
 8014982:	3307      	adds	r3, #7
 8014984:	f023 0307 	bic.w	r3, r3, #7
 8014988:	3308      	adds	r3, #8
 801498a:	9303      	str	r3, [sp, #12]
 801498c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801498e:	443b      	add	r3, r7
 8014990:	9309      	str	r3, [sp, #36]	; 0x24
 8014992:	e767      	b.n	8014864 <_vfiprintf_r+0x94>
 8014994:	fb0c 3202 	mla	r2, ip, r2, r3
 8014998:	460c      	mov	r4, r1
 801499a:	2001      	movs	r0, #1
 801499c:	e7a5      	b.n	80148ea <_vfiprintf_r+0x11a>
 801499e:	2300      	movs	r3, #0
 80149a0:	3401      	adds	r4, #1
 80149a2:	9305      	str	r3, [sp, #20]
 80149a4:	4619      	mov	r1, r3
 80149a6:	f04f 0c0a 	mov.w	ip, #10
 80149aa:	4620      	mov	r0, r4
 80149ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80149b0:	3a30      	subs	r2, #48	; 0x30
 80149b2:	2a09      	cmp	r2, #9
 80149b4:	d903      	bls.n	80149be <_vfiprintf_r+0x1ee>
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d0c5      	beq.n	8014946 <_vfiprintf_r+0x176>
 80149ba:	9105      	str	r1, [sp, #20]
 80149bc:	e7c3      	b.n	8014946 <_vfiprintf_r+0x176>
 80149be:	fb0c 2101 	mla	r1, ip, r1, r2
 80149c2:	4604      	mov	r4, r0
 80149c4:	2301      	movs	r3, #1
 80149c6:	e7f0      	b.n	80149aa <_vfiprintf_r+0x1da>
 80149c8:	ab03      	add	r3, sp, #12
 80149ca:	9300      	str	r3, [sp, #0]
 80149cc:	462a      	mov	r2, r5
 80149ce:	4b16      	ldr	r3, [pc, #88]	; (8014a28 <_vfiprintf_r+0x258>)
 80149d0:	a904      	add	r1, sp, #16
 80149d2:	4630      	mov	r0, r6
 80149d4:	f7fb f9b6 	bl	800fd44 <_printf_float>
 80149d8:	4607      	mov	r7, r0
 80149da:	1c78      	adds	r0, r7, #1
 80149dc:	d1d6      	bne.n	801498c <_vfiprintf_r+0x1bc>
 80149de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80149e0:	07d9      	lsls	r1, r3, #31
 80149e2:	d405      	bmi.n	80149f0 <_vfiprintf_r+0x220>
 80149e4:	89ab      	ldrh	r3, [r5, #12]
 80149e6:	059a      	lsls	r2, r3, #22
 80149e8:	d402      	bmi.n	80149f0 <_vfiprintf_r+0x220>
 80149ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80149ec:	f7ff fe79 	bl	80146e2 <__retarget_lock_release_recursive>
 80149f0:	89ab      	ldrh	r3, [r5, #12]
 80149f2:	065b      	lsls	r3, r3, #25
 80149f4:	f53f af12 	bmi.w	801481c <_vfiprintf_r+0x4c>
 80149f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80149fa:	e711      	b.n	8014820 <_vfiprintf_r+0x50>
 80149fc:	ab03      	add	r3, sp, #12
 80149fe:	9300      	str	r3, [sp, #0]
 8014a00:	462a      	mov	r2, r5
 8014a02:	4b09      	ldr	r3, [pc, #36]	; (8014a28 <_vfiprintf_r+0x258>)
 8014a04:	a904      	add	r1, sp, #16
 8014a06:	4630      	mov	r0, r6
 8014a08:	f7fb fc40 	bl	801028c <_printf_i>
 8014a0c:	e7e4      	b.n	80149d8 <_vfiprintf_r+0x208>
 8014a0e:	bf00      	nop
 8014a10:	0801558c 	.word	0x0801558c
 8014a14:	080155ac 	.word	0x080155ac
 8014a18:	0801556c 	.word	0x0801556c
 8014a1c:	08015504 	.word	0x08015504
 8014a20:	0801550e 	.word	0x0801550e
 8014a24:	0800fd45 	.word	0x0800fd45
 8014a28:	080147ab 	.word	0x080147ab
 8014a2c:	0801550a 	.word	0x0801550a

08014a30 <__swbuf_r>:
 8014a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a32:	460e      	mov	r6, r1
 8014a34:	4614      	mov	r4, r2
 8014a36:	4605      	mov	r5, r0
 8014a38:	b118      	cbz	r0, 8014a42 <__swbuf_r+0x12>
 8014a3a:	6983      	ldr	r3, [r0, #24]
 8014a3c:	b90b      	cbnz	r3, 8014a42 <__swbuf_r+0x12>
 8014a3e:	f7ff fd9f 	bl	8014580 <__sinit>
 8014a42:	4b21      	ldr	r3, [pc, #132]	; (8014ac8 <__swbuf_r+0x98>)
 8014a44:	429c      	cmp	r4, r3
 8014a46:	d12b      	bne.n	8014aa0 <__swbuf_r+0x70>
 8014a48:	686c      	ldr	r4, [r5, #4]
 8014a4a:	69a3      	ldr	r3, [r4, #24]
 8014a4c:	60a3      	str	r3, [r4, #8]
 8014a4e:	89a3      	ldrh	r3, [r4, #12]
 8014a50:	071a      	lsls	r2, r3, #28
 8014a52:	d52f      	bpl.n	8014ab4 <__swbuf_r+0x84>
 8014a54:	6923      	ldr	r3, [r4, #16]
 8014a56:	b36b      	cbz	r3, 8014ab4 <__swbuf_r+0x84>
 8014a58:	6923      	ldr	r3, [r4, #16]
 8014a5a:	6820      	ldr	r0, [r4, #0]
 8014a5c:	1ac0      	subs	r0, r0, r3
 8014a5e:	6963      	ldr	r3, [r4, #20]
 8014a60:	b2f6      	uxtb	r6, r6
 8014a62:	4283      	cmp	r3, r0
 8014a64:	4637      	mov	r7, r6
 8014a66:	dc04      	bgt.n	8014a72 <__swbuf_r+0x42>
 8014a68:	4621      	mov	r1, r4
 8014a6a:	4628      	mov	r0, r5
 8014a6c:	f7ff fcf4 	bl	8014458 <_fflush_r>
 8014a70:	bb30      	cbnz	r0, 8014ac0 <__swbuf_r+0x90>
 8014a72:	68a3      	ldr	r3, [r4, #8]
 8014a74:	3b01      	subs	r3, #1
 8014a76:	60a3      	str	r3, [r4, #8]
 8014a78:	6823      	ldr	r3, [r4, #0]
 8014a7a:	1c5a      	adds	r2, r3, #1
 8014a7c:	6022      	str	r2, [r4, #0]
 8014a7e:	701e      	strb	r6, [r3, #0]
 8014a80:	6963      	ldr	r3, [r4, #20]
 8014a82:	3001      	adds	r0, #1
 8014a84:	4283      	cmp	r3, r0
 8014a86:	d004      	beq.n	8014a92 <__swbuf_r+0x62>
 8014a88:	89a3      	ldrh	r3, [r4, #12]
 8014a8a:	07db      	lsls	r3, r3, #31
 8014a8c:	d506      	bpl.n	8014a9c <__swbuf_r+0x6c>
 8014a8e:	2e0a      	cmp	r6, #10
 8014a90:	d104      	bne.n	8014a9c <__swbuf_r+0x6c>
 8014a92:	4621      	mov	r1, r4
 8014a94:	4628      	mov	r0, r5
 8014a96:	f7ff fcdf 	bl	8014458 <_fflush_r>
 8014a9a:	b988      	cbnz	r0, 8014ac0 <__swbuf_r+0x90>
 8014a9c:	4638      	mov	r0, r7
 8014a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014aa0:	4b0a      	ldr	r3, [pc, #40]	; (8014acc <__swbuf_r+0x9c>)
 8014aa2:	429c      	cmp	r4, r3
 8014aa4:	d101      	bne.n	8014aaa <__swbuf_r+0x7a>
 8014aa6:	68ac      	ldr	r4, [r5, #8]
 8014aa8:	e7cf      	b.n	8014a4a <__swbuf_r+0x1a>
 8014aaa:	4b09      	ldr	r3, [pc, #36]	; (8014ad0 <__swbuf_r+0xa0>)
 8014aac:	429c      	cmp	r4, r3
 8014aae:	bf08      	it	eq
 8014ab0:	68ec      	ldreq	r4, [r5, #12]
 8014ab2:	e7ca      	b.n	8014a4a <__swbuf_r+0x1a>
 8014ab4:	4621      	mov	r1, r4
 8014ab6:	4628      	mov	r0, r5
 8014ab8:	f000 f80c 	bl	8014ad4 <__swsetup_r>
 8014abc:	2800      	cmp	r0, #0
 8014abe:	d0cb      	beq.n	8014a58 <__swbuf_r+0x28>
 8014ac0:	f04f 37ff 	mov.w	r7, #4294967295
 8014ac4:	e7ea      	b.n	8014a9c <__swbuf_r+0x6c>
 8014ac6:	bf00      	nop
 8014ac8:	0801558c 	.word	0x0801558c
 8014acc:	080155ac 	.word	0x080155ac
 8014ad0:	0801556c 	.word	0x0801556c

08014ad4 <__swsetup_r>:
 8014ad4:	4b32      	ldr	r3, [pc, #200]	; (8014ba0 <__swsetup_r+0xcc>)
 8014ad6:	b570      	push	{r4, r5, r6, lr}
 8014ad8:	681d      	ldr	r5, [r3, #0]
 8014ada:	4606      	mov	r6, r0
 8014adc:	460c      	mov	r4, r1
 8014ade:	b125      	cbz	r5, 8014aea <__swsetup_r+0x16>
 8014ae0:	69ab      	ldr	r3, [r5, #24]
 8014ae2:	b913      	cbnz	r3, 8014aea <__swsetup_r+0x16>
 8014ae4:	4628      	mov	r0, r5
 8014ae6:	f7ff fd4b 	bl	8014580 <__sinit>
 8014aea:	4b2e      	ldr	r3, [pc, #184]	; (8014ba4 <__swsetup_r+0xd0>)
 8014aec:	429c      	cmp	r4, r3
 8014aee:	d10f      	bne.n	8014b10 <__swsetup_r+0x3c>
 8014af0:	686c      	ldr	r4, [r5, #4]
 8014af2:	89a3      	ldrh	r3, [r4, #12]
 8014af4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014af8:	0719      	lsls	r1, r3, #28
 8014afa:	d42c      	bmi.n	8014b56 <__swsetup_r+0x82>
 8014afc:	06dd      	lsls	r5, r3, #27
 8014afe:	d411      	bmi.n	8014b24 <__swsetup_r+0x50>
 8014b00:	2309      	movs	r3, #9
 8014b02:	6033      	str	r3, [r6, #0]
 8014b04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014b08:	81a3      	strh	r3, [r4, #12]
 8014b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8014b0e:	e03e      	b.n	8014b8e <__swsetup_r+0xba>
 8014b10:	4b25      	ldr	r3, [pc, #148]	; (8014ba8 <__swsetup_r+0xd4>)
 8014b12:	429c      	cmp	r4, r3
 8014b14:	d101      	bne.n	8014b1a <__swsetup_r+0x46>
 8014b16:	68ac      	ldr	r4, [r5, #8]
 8014b18:	e7eb      	b.n	8014af2 <__swsetup_r+0x1e>
 8014b1a:	4b24      	ldr	r3, [pc, #144]	; (8014bac <__swsetup_r+0xd8>)
 8014b1c:	429c      	cmp	r4, r3
 8014b1e:	bf08      	it	eq
 8014b20:	68ec      	ldreq	r4, [r5, #12]
 8014b22:	e7e6      	b.n	8014af2 <__swsetup_r+0x1e>
 8014b24:	0758      	lsls	r0, r3, #29
 8014b26:	d512      	bpl.n	8014b4e <__swsetup_r+0x7a>
 8014b28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014b2a:	b141      	cbz	r1, 8014b3e <__swsetup_r+0x6a>
 8014b2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014b30:	4299      	cmp	r1, r3
 8014b32:	d002      	beq.n	8014b3a <__swsetup_r+0x66>
 8014b34:	4630      	mov	r0, r6
 8014b36:	f7fe fd9b 	bl	8013670 <_free_r>
 8014b3a:	2300      	movs	r3, #0
 8014b3c:	6363      	str	r3, [r4, #52]	; 0x34
 8014b3e:	89a3      	ldrh	r3, [r4, #12]
 8014b40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014b44:	81a3      	strh	r3, [r4, #12]
 8014b46:	2300      	movs	r3, #0
 8014b48:	6063      	str	r3, [r4, #4]
 8014b4a:	6923      	ldr	r3, [r4, #16]
 8014b4c:	6023      	str	r3, [r4, #0]
 8014b4e:	89a3      	ldrh	r3, [r4, #12]
 8014b50:	f043 0308 	orr.w	r3, r3, #8
 8014b54:	81a3      	strh	r3, [r4, #12]
 8014b56:	6923      	ldr	r3, [r4, #16]
 8014b58:	b94b      	cbnz	r3, 8014b6e <__swsetup_r+0x9a>
 8014b5a:	89a3      	ldrh	r3, [r4, #12]
 8014b5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014b64:	d003      	beq.n	8014b6e <__swsetup_r+0x9a>
 8014b66:	4621      	mov	r1, r4
 8014b68:	4630      	mov	r0, r6
 8014b6a:	f000 f84d 	bl	8014c08 <__smakebuf_r>
 8014b6e:	89a0      	ldrh	r0, [r4, #12]
 8014b70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014b74:	f010 0301 	ands.w	r3, r0, #1
 8014b78:	d00a      	beq.n	8014b90 <__swsetup_r+0xbc>
 8014b7a:	2300      	movs	r3, #0
 8014b7c:	60a3      	str	r3, [r4, #8]
 8014b7e:	6963      	ldr	r3, [r4, #20]
 8014b80:	425b      	negs	r3, r3
 8014b82:	61a3      	str	r3, [r4, #24]
 8014b84:	6923      	ldr	r3, [r4, #16]
 8014b86:	b943      	cbnz	r3, 8014b9a <__swsetup_r+0xc6>
 8014b88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014b8c:	d1ba      	bne.n	8014b04 <__swsetup_r+0x30>
 8014b8e:	bd70      	pop	{r4, r5, r6, pc}
 8014b90:	0781      	lsls	r1, r0, #30
 8014b92:	bf58      	it	pl
 8014b94:	6963      	ldrpl	r3, [r4, #20]
 8014b96:	60a3      	str	r3, [r4, #8]
 8014b98:	e7f4      	b.n	8014b84 <__swsetup_r+0xb0>
 8014b9a:	2000      	movs	r0, #0
 8014b9c:	e7f7      	b.n	8014b8e <__swsetup_r+0xba>
 8014b9e:	bf00      	nop
 8014ba0:	20000198 	.word	0x20000198
 8014ba4:	0801558c 	.word	0x0801558c
 8014ba8:	080155ac 	.word	0x080155ac
 8014bac:	0801556c 	.word	0x0801556c

08014bb0 <abort>:
 8014bb0:	b508      	push	{r3, lr}
 8014bb2:	2006      	movs	r0, #6
 8014bb4:	f000 f898 	bl	8014ce8 <raise>
 8014bb8:	2001      	movs	r0, #1
 8014bba:	f7ee fd05 	bl	80035c8 <_exit>

08014bbe <__swhatbuf_r>:
 8014bbe:	b570      	push	{r4, r5, r6, lr}
 8014bc0:	460e      	mov	r6, r1
 8014bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bc6:	2900      	cmp	r1, #0
 8014bc8:	b096      	sub	sp, #88	; 0x58
 8014bca:	4614      	mov	r4, r2
 8014bcc:	461d      	mov	r5, r3
 8014bce:	da07      	bge.n	8014be0 <__swhatbuf_r+0x22>
 8014bd0:	2300      	movs	r3, #0
 8014bd2:	602b      	str	r3, [r5, #0]
 8014bd4:	89b3      	ldrh	r3, [r6, #12]
 8014bd6:	061a      	lsls	r2, r3, #24
 8014bd8:	d410      	bmi.n	8014bfc <__swhatbuf_r+0x3e>
 8014bda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014bde:	e00e      	b.n	8014bfe <__swhatbuf_r+0x40>
 8014be0:	466a      	mov	r2, sp
 8014be2:	f000 f89d 	bl	8014d20 <_fstat_r>
 8014be6:	2800      	cmp	r0, #0
 8014be8:	dbf2      	blt.n	8014bd0 <__swhatbuf_r+0x12>
 8014bea:	9a01      	ldr	r2, [sp, #4]
 8014bec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014bf0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014bf4:	425a      	negs	r2, r3
 8014bf6:	415a      	adcs	r2, r3
 8014bf8:	602a      	str	r2, [r5, #0]
 8014bfa:	e7ee      	b.n	8014bda <__swhatbuf_r+0x1c>
 8014bfc:	2340      	movs	r3, #64	; 0x40
 8014bfe:	2000      	movs	r0, #0
 8014c00:	6023      	str	r3, [r4, #0]
 8014c02:	b016      	add	sp, #88	; 0x58
 8014c04:	bd70      	pop	{r4, r5, r6, pc}
	...

08014c08 <__smakebuf_r>:
 8014c08:	898b      	ldrh	r3, [r1, #12]
 8014c0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014c0c:	079d      	lsls	r5, r3, #30
 8014c0e:	4606      	mov	r6, r0
 8014c10:	460c      	mov	r4, r1
 8014c12:	d507      	bpl.n	8014c24 <__smakebuf_r+0x1c>
 8014c14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014c18:	6023      	str	r3, [r4, #0]
 8014c1a:	6123      	str	r3, [r4, #16]
 8014c1c:	2301      	movs	r3, #1
 8014c1e:	6163      	str	r3, [r4, #20]
 8014c20:	b002      	add	sp, #8
 8014c22:	bd70      	pop	{r4, r5, r6, pc}
 8014c24:	ab01      	add	r3, sp, #4
 8014c26:	466a      	mov	r2, sp
 8014c28:	f7ff ffc9 	bl	8014bbe <__swhatbuf_r>
 8014c2c:	9900      	ldr	r1, [sp, #0]
 8014c2e:	4605      	mov	r5, r0
 8014c30:	4630      	mov	r0, r6
 8014c32:	f7fe fd6d 	bl	8013710 <_malloc_r>
 8014c36:	b948      	cbnz	r0, 8014c4c <__smakebuf_r+0x44>
 8014c38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014c3c:	059a      	lsls	r2, r3, #22
 8014c3e:	d4ef      	bmi.n	8014c20 <__smakebuf_r+0x18>
 8014c40:	f023 0303 	bic.w	r3, r3, #3
 8014c44:	f043 0302 	orr.w	r3, r3, #2
 8014c48:	81a3      	strh	r3, [r4, #12]
 8014c4a:	e7e3      	b.n	8014c14 <__smakebuf_r+0xc>
 8014c4c:	4b0d      	ldr	r3, [pc, #52]	; (8014c84 <__smakebuf_r+0x7c>)
 8014c4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8014c50:	89a3      	ldrh	r3, [r4, #12]
 8014c52:	6020      	str	r0, [r4, #0]
 8014c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014c58:	81a3      	strh	r3, [r4, #12]
 8014c5a:	9b00      	ldr	r3, [sp, #0]
 8014c5c:	6163      	str	r3, [r4, #20]
 8014c5e:	9b01      	ldr	r3, [sp, #4]
 8014c60:	6120      	str	r0, [r4, #16]
 8014c62:	b15b      	cbz	r3, 8014c7c <__smakebuf_r+0x74>
 8014c64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014c68:	4630      	mov	r0, r6
 8014c6a:	f000 f86b 	bl	8014d44 <_isatty_r>
 8014c6e:	b128      	cbz	r0, 8014c7c <__smakebuf_r+0x74>
 8014c70:	89a3      	ldrh	r3, [r4, #12]
 8014c72:	f023 0303 	bic.w	r3, r3, #3
 8014c76:	f043 0301 	orr.w	r3, r3, #1
 8014c7a:	81a3      	strh	r3, [r4, #12]
 8014c7c:	89a0      	ldrh	r0, [r4, #12]
 8014c7e:	4305      	orrs	r5, r0
 8014c80:	81a5      	strh	r5, [r4, #12]
 8014c82:	e7cd      	b.n	8014c20 <__smakebuf_r+0x18>
 8014c84:	08014519 	.word	0x08014519

08014c88 <_malloc_usable_size_r>:
 8014c88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014c8c:	1f18      	subs	r0, r3, #4
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	bfbc      	itt	lt
 8014c92:	580b      	ldrlt	r3, [r1, r0]
 8014c94:	18c0      	addlt	r0, r0, r3
 8014c96:	4770      	bx	lr

08014c98 <_raise_r>:
 8014c98:	291f      	cmp	r1, #31
 8014c9a:	b538      	push	{r3, r4, r5, lr}
 8014c9c:	4604      	mov	r4, r0
 8014c9e:	460d      	mov	r5, r1
 8014ca0:	d904      	bls.n	8014cac <_raise_r+0x14>
 8014ca2:	2316      	movs	r3, #22
 8014ca4:	6003      	str	r3, [r0, #0]
 8014ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8014caa:	bd38      	pop	{r3, r4, r5, pc}
 8014cac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014cae:	b112      	cbz	r2, 8014cb6 <_raise_r+0x1e>
 8014cb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014cb4:	b94b      	cbnz	r3, 8014cca <_raise_r+0x32>
 8014cb6:	4620      	mov	r0, r4
 8014cb8:	f000 f830 	bl	8014d1c <_getpid_r>
 8014cbc:	462a      	mov	r2, r5
 8014cbe:	4601      	mov	r1, r0
 8014cc0:	4620      	mov	r0, r4
 8014cc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014cc6:	f000 b817 	b.w	8014cf8 <_kill_r>
 8014cca:	2b01      	cmp	r3, #1
 8014ccc:	d00a      	beq.n	8014ce4 <_raise_r+0x4c>
 8014cce:	1c59      	adds	r1, r3, #1
 8014cd0:	d103      	bne.n	8014cda <_raise_r+0x42>
 8014cd2:	2316      	movs	r3, #22
 8014cd4:	6003      	str	r3, [r0, #0]
 8014cd6:	2001      	movs	r0, #1
 8014cd8:	e7e7      	b.n	8014caa <_raise_r+0x12>
 8014cda:	2400      	movs	r4, #0
 8014cdc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014ce0:	4628      	mov	r0, r5
 8014ce2:	4798      	blx	r3
 8014ce4:	2000      	movs	r0, #0
 8014ce6:	e7e0      	b.n	8014caa <_raise_r+0x12>

08014ce8 <raise>:
 8014ce8:	4b02      	ldr	r3, [pc, #8]	; (8014cf4 <raise+0xc>)
 8014cea:	4601      	mov	r1, r0
 8014cec:	6818      	ldr	r0, [r3, #0]
 8014cee:	f7ff bfd3 	b.w	8014c98 <_raise_r>
 8014cf2:	bf00      	nop
 8014cf4:	20000198 	.word	0x20000198

08014cf8 <_kill_r>:
 8014cf8:	b538      	push	{r3, r4, r5, lr}
 8014cfa:	4d07      	ldr	r5, [pc, #28]	; (8014d18 <_kill_r+0x20>)
 8014cfc:	2300      	movs	r3, #0
 8014cfe:	4604      	mov	r4, r0
 8014d00:	4608      	mov	r0, r1
 8014d02:	4611      	mov	r1, r2
 8014d04:	602b      	str	r3, [r5, #0]
 8014d06:	f7ee fc4f 	bl	80035a8 <_kill>
 8014d0a:	1c43      	adds	r3, r0, #1
 8014d0c:	d102      	bne.n	8014d14 <_kill_r+0x1c>
 8014d0e:	682b      	ldr	r3, [r5, #0]
 8014d10:	b103      	cbz	r3, 8014d14 <_kill_r+0x1c>
 8014d12:	6023      	str	r3, [r4, #0]
 8014d14:	bd38      	pop	{r3, r4, r5, pc}
 8014d16:	bf00      	nop
 8014d18:	20003384 	.word	0x20003384

08014d1c <_getpid_r>:
 8014d1c:	f7ee bc3c 	b.w	8003598 <_getpid>

08014d20 <_fstat_r>:
 8014d20:	b538      	push	{r3, r4, r5, lr}
 8014d22:	4d07      	ldr	r5, [pc, #28]	; (8014d40 <_fstat_r+0x20>)
 8014d24:	2300      	movs	r3, #0
 8014d26:	4604      	mov	r4, r0
 8014d28:	4608      	mov	r0, r1
 8014d2a:	4611      	mov	r1, r2
 8014d2c:	602b      	str	r3, [r5, #0]
 8014d2e:	f7ee fc9a 	bl	8003666 <_fstat>
 8014d32:	1c43      	adds	r3, r0, #1
 8014d34:	d102      	bne.n	8014d3c <_fstat_r+0x1c>
 8014d36:	682b      	ldr	r3, [r5, #0]
 8014d38:	b103      	cbz	r3, 8014d3c <_fstat_r+0x1c>
 8014d3a:	6023      	str	r3, [r4, #0]
 8014d3c:	bd38      	pop	{r3, r4, r5, pc}
 8014d3e:	bf00      	nop
 8014d40:	20003384 	.word	0x20003384

08014d44 <_isatty_r>:
 8014d44:	b538      	push	{r3, r4, r5, lr}
 8014d46:	4d06      	ldr	r5, [pc, #24]	; (8014d60 <_isatty_r+0x1c>)
 8014d48:	2300      	movs	r3, #0
 8014d4a:	4604      	mov	r4, r0
 8014d4c:	4608      	mov	r0, r1
 8014d4e:	602b      	str	r3, [r5, #0]
 8014d50:	f7ee fc99 	bl	8003686 <_isatty>
 8014d54:	1c43      	adds	r3, r0, #1
 8014d56:	d102      	bne.n	8014d5e <_isatty_r+0x1a>
 8014d58:	682b      	ldr	r3, [r5, #0]
 8014d5a:	b103      	cbz	r3, 8014d5e <_isatty_r+0x1a>
 8014d5c:	6023      	str	r3, [r4, #0]
 8014d5e:	bd38      	pop	{r3, r4, r5, pc}
 8014d60:	20003384 	.word	0x20003384

08014d64 <_init>:
 8014d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d66:	bf00      	nop
 8014d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d6a:	bc08      	pop	{r3}
 8014d6c:	469e      	mov	lr, r3
 8014d6e:	4770      	bx	lr

08014d70 <_fini>:
 8014d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d72:	bf00      	nop
 8014d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d76:	bc08      	pop	{r3}
 8014d78:	469e      	mov	lr, r3
 8014d7a:	4770      	bx	lr
