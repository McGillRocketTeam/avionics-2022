
f437_fc_v4.1.5_blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010b48  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  08010cf8  08010cf8  00020cf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011214  08011214  0003036c  2**0
                  CONTENTS
  4 .ARM          00000008  08011214  08011214  00021214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801121c  0801121c  0003036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801121c  0801121c  0002121c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011220  08011220  00021220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000036c  20000000  08011224  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003036c  2**0
                  CONTENTS
 10 .bss          0000299c  2000036c  2000036c  0003036c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002d08  20002d08  0003036c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003036c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003d3bd  00000000  00000000  0003039c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005921  00000000  00000000  0006d759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002590  00000000  00000000  00073080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000023a0  00000000  00000000  00075610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b9ec  00000000  00000000  000779b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028601  00000000  00000000  000a339c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fad3c  00000000  00000000  000cb99d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001c66d9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b5d4  00000000  00000000  001c672c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000036c 	.word	0x2000036c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08010ce0 	.word	0x08010ce0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000370 	.word	0x20000370
 80001ec:	08010ce0 	.word	0x08010ce0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <lsm6dsl_init>:
                             uint16_t len);
static void platform_delay(uint32_t ms);

/* LSM6DSL Functions ---------------------------------------------------------*/

stmdev_ctx_t lsm6dsl_init(void){
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b087      	sub	sp, #28
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

	stmdev_ctx_t dev_ctx_lsm6dsl;

	/* Initialize mems driver interface */
	dev_ctx_lsm6dsl.write_reg = lsm6dsl_write;
 8001014:	4b2f      	ldr	r3, [pc, #188]	; (80010d4 <lsm6dsl_init+0xc8>)
 8001016:	60fb      	str	r3, [r7, #12]
	dev_ctx_lsm6dsl.read_reg = lsm6dsl_read;
 8001018:	4b2f      	ldr	r3, [pc, #188]	; (80010d8 <lsm6dsl_init+0xcc>)
 800101a:	613b      	str	r3, [r7, #16]
	dev_ctx_lsm6dsl.handle = &SENSOR_BUS;
 800101c:	4b2f      	ldr	r3, [pc, #188]	; (80010dc <lsm6dsl_init+0xd0>)
 800101e:	617b      	str	r3, [r7, #20]

	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 8001020:	200a      	movs	r0, #10
 8001022:	f000 f92d 	bl	8001280 <platform_delay>

	/* Check device ID */
	lsm6dsl_device_id_get(&dev_ctx_lsm6dsl, &whoamI_lsm6dsl);
 8001026:	f107 030c 	add.w	r3, r7, #12
 800102a:	492d      	ldr	r1, [pc, #180]	; (80010e0 <lsm6dsl_init+0xd4>)
 800102c:	4618      	mov	r0, r3
 800102e:	f000 fb14 	bl	800165a <lsm6dsl_device_id_get>

	if (whoamI_lsm6dsl != LSM6DSL_ID){
 8001032:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <lsm6dsl_init+0xd4>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b6a      	cmp	r3, #106	; 0x6a
 8001038:	d005      	beq.n	8001046 <lsm6dsl_init+0x3a>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800103a:	2201      	movs	r2, #1
 800103c:	2102      	movs	r1, #2
 800103e:	4829      	ldr	r0, [pc, #164]	; (80010e4 <lsm6dsl_init+0xd8>)
 8001040:	f002 fbb6 	bl	80037b0 <HAL_GPIO_WritePin>
		__BKPT();
 8001044:	be00      	bkpt	0x0000
//		Error_Handler();
	}

	/* Restore default configuration */
	lsm6dsl_reset_set(&dev_ctx_lsm6dsl, PROPERTY_ENABLE);
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	2101      	movs	r1, #1
 800104c:	4618      	mov	r0, r3
 800104e:	f000 fb15 	bl	800167c <lsm6dsl_reset_set>

	do {
	lsm6dsl_reset_get(&dev_ctx_lsm6dsl, &rst_lsm6dsl);
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	4924      	ldr	r1, [pc, #144]	; (80010e8 <lsm6dsl_init+0xdc>)
 8001058:	4618      	mov	r0, r3
 800105a:	f000 fb35 	bl	80016c8 <lsm6dsl_reset_get>
	} while (rst_lsm6dsl);
 800105e:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <lsm6dsl_init+0xdc>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1f5      	bne.n	8001052 <lsm6dsl_init+0x46>

	/* Enable Block Data Update */
	lsm6dsl_block_data_update_set(&dev_ctx_lsm6dsl, PROPERTY_ENABLE);
 8001066:	f107 030c 	add.w	r3, r7, #12
 800106a:	2101      	movs	r1, #1
 800106c:	4618      	mov	r0, r3
 800106e:	f000 face 	bl	800160e <lsm6dsl_block_data_update_set>

	/* Set Output Data Rate */
	lsm6dsl_xl_data_rate_set(&dev_ctx_lsm6dsl, LSM6DSL_XL_ODR_104Hz);
 8001072:	f107 030c 	add.w	r3, r7, #12
 8001076:	2104      	movs	r1, #4
 8001078:	4618      	mov	r0, r3
 800107a:	f000 fa56 	bl	800152a <lsm6dsl_xl_data_rate_set>
	lsm6dsl_gy_data_rate_set(&dev_ctx_lsm6dsl, LSM6DSL_GY_ODR_104Hz);
 800107e:	f107 030c 	add.w	r3, r7, #12
 8001082:	2104      	movs	r1, #4
 8001084:	4618      	mov	r0, r3
 8001086:	f000 fa9c 	bl	80015c2 <lsm6dsl_gy_data_rate_set>

	/* Set full scale */
	lsm6dsl_xl_full_scale_set(&dev_ctx_lsm6dsl, LSM6DSL_8g);
 800108a:	f107 030c 	add.w	r3, r7, #12
 800108e:	2103      	movs	r1, #3
 8001090:	4618      	mov	r0, r3
 8001092:	f000 fa24 	bl	80014de <lsm6dsl_xl_full_scale_set>
	lsm6dsl_gy_full_scale_set(&dev_ctx_lsm6dsl, LSM6DSL_2000dps);
 8001096:	f107 030c 	add.w	r3, r7, #12
 800109a:	2106      	movs	r1, #6
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fa6a 	bl	8001576 <lsm6dsl_gy_full_scale_set>

	/* Configure filtering chain(No aux interface)
	* Accelerometer - LPF1 + LPF2 path
	*/
	lsm6dsl_xl_lp2_bandwidth_set(&dev_ctx_lsm6dsl, LSM6DSL_XL_LOW_NOISE_LP_ODR_DIV_100);
 80010a2:	f107 030c 	add.w	r3, r7, #12
 80010a6:	2111      	movs	r1, #17
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 fb26 	bl	80016fa <lsm6dsl_xl_lp2_bandwidth_set>
	/* Accelerometer - High Pass / Slope path */
	//lsm6dsl_xl_reference_mode_set(&dev_ctx_lsm, PROPERTY_DISABLE);
	//lsm6dsl_xl_hp_bandwidth_set(&dev_ctx_lsm, LSM6DSL_XL_HP_ODR_DIV_100);
	/* Gyroscope - filtering chain */
	lsm6dsl_gy_band_pass_set(&dev_ctx_lsm6dsl, LSM6DSL_HP_260mHz_LP1_STRONG);
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	21a8      	movs	r1, #168	; 0xa8
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 fb57 	bl	8001768 <lsm6dsl_gy_band_pass_set>

	return dev_ctx_lsm6dsl;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	461c      	mov	r4, r3
 80010be:	f107 030c 	add.w	r3, r7, #12
 80010c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	371c      	adds	r7, #28
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd90      	pop	{r4, r7, pc}
 80010d2:	bf00      	nop
 80010d4:	08001199 	.word	0x08001199
 80010d8:	080011d3 	.word	0x080011d3
 80010dc:	20000628 	.word	0x20000628
 80010e0:	20000388 	.word	0x20000388
 80010e4:	40020800 	.word	0x40020800
 80010e8:	20000389 	.word	0x20000389

080010ec <lps22hh_init>:
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
	}
}

/* LPS22HH Functions ---------------------------------------------------------*/
stmdev_ctx_t lps22hh_init(void){
 80010ec:	b590      	push	{r4, r7, lr}
 80010ee:	b087      	sub	sp, #28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	stmdev_ctx_t dev_ctx_lps22hh;

	/* Initialize mems driver interface */
	dev_ctx_lps22hh.write_reg = lps22hh_write;
 80010f4:	4b22      	ldr	r3, [pc, #136]	; (8001180 <lps22hh_init+0x94>)
 80010f6:	60fb      	str	r3, [r7, #12]
	dev_ctx_lps22hh.read_reg = lps22hh_read;
 80010f8:	4b22      	ldr	r3, [pc, #136]	; (8001184 <lps22hh_init+0x98>)
 80010fa:	613b      	str	r3, [r7, #16]
	dev_ctx_lps22hh.handle = &SENSOR_BUS;
 80010fc:	4b22      	ldr	r3, [pc, #136]	; (8001188 <lps22hh_init+0x9c>)
 80010fe:	617b      	str	r3, [r7, #20]


	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 8001100:	200a      	movs	r0, #10
 8001102:	f000 f8bd 	bl	8001280 <platform_delay>

	/* Check device ID */
	whoamI_lps22hh = 0;
 8001106:	4b21      	ldr	r3, [pc, #132]	; (800118c <lps22hh_init+0xa0>)
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
	lps22hh_device_id_get(&dev_ctx_lps22hh, &whoamI_lps22hh);
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	491e      	ldr	r1, [pc, #120]	; (800118c <lps22hh_init+0xa0>)
 8001112:	4618      	mov	r0, r3
 8001114:	f000 f963 	bl	80013de <lps22hh_device_id_get>

	if ( whoamI_lps22hh != LPS22HH_ID ){
 8001118:	4b1c      	ldr	r3, [pc, #112]	; (800118c <lps22hh_init+0xa0>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2bb3      	cmp	r3, #179	; 0xb3
 800111e:	d007      	beq.n	8001130 <lps22hh_init+0x44>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001120:	2201      	movs	r2, #1
 8001122:	2104      	movs	r1, #4
 8001124:	481a      	ldr	r0, [pc, #104]	; (8001190 <lps22hh_init+0xa4>)
 8001126:	f002 fb43 	bl	80037b0 <HAL_GPIO_WritePin>
		__BKPT();
 800112a:	be00      	bkpt	0x0000
		Error_Handler();
 800112c:	f001 f926 	bl	800237c <Error_Handler>
	}


	/* Restore default configuration */
	lps22hh_reset_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	2101      	movs	r1, #1
 8001136:	4618      	mov	r0, r3
 8001138:	f000 f962 	bl	8001400 <lps22hh_reset_set>

	do {
		lps22hh_reset_get(&dev_ctx_lps22hh, &rst_lps22hh);
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	4914      	ldr	r1, [pc, #80]	; (8001194 <lps22hh_init+0xa8>)
 8001142:	4618      	mov	r0, r3
 8001144:	f000 f982 	bl	800144c <lps22hh_reset_get>
	} while (rst_lps22hh);
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <lps22hh_init+0xa8>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1f5      	bne.n	800113c <lps22hh_init+0x50>

	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	2101      	movs	r1, #1
 8001156:	4618      	mov	r0, r3
 8001158:	f000 f8cd 	bl	80012f6 <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&dev_ctx_lps22hh, LPS22HH_75_Hz_LOW_NOISE);
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	2115      	movs	r1, #21
 8001162:	4618      	mov	r0, r3
 8001164:	f000 f8ed 	bl	8001342 <lps22hh_data_rate_set>

	return dev_ctx_lps22hh;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	461c      	mov	r4, r3
 800116c:	f107 030c 	add.w	r3, r7, #12
 8001170:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001174:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	371c      	adds	r7, #28
 800117c:	46bd      	mov	sp, r7
 800117e:	bd90      	pop	{r4, r7, pc}
 8001180:	0800120d 	.word	0x0800120d
 8001184:	08001247 	.word	0x08001247
 8001188:	20000628 	.word	0x20000628
 800118c:	2000038a 	.word	0x2000038a
 8001190:	40020800 	.word	0x40020800
 8001194:	2000038b 	.word	0x2000038b

08001198 <lsm6dsl_write>:
 *
 */
static int32_t lsm6dsl_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af04      	add	r7, sp, #16
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	607a      	str	r2, [r7, #4]
 80011a2:	461a      	mov	r2, r3
 80011a4:	460b      	mov	r3, r1
 80011a6:	72fb      	strb	r3, [r7, #11]
 80011a8:	4613      	mov	r3, r2
 80011aa:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LSM6DSL_I2C_ADD_L, reg,
 80011ac:	7afb      	ldrb	r3, [r7, #11]
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b4:	9302      	str	r3, [sp, #8]
 80011b6:	893b      	ldrh	r3, [r7, #8]
 80011b8:	9301      	str	r3, [sp, #4]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	2301      	movs	r3, #1
 80011c0:	21d5      	movs	r1, #213	; 0xd5
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f002 fc84 	bl	8003ad0 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <lsm6dsl_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lsm6dsl_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b088      	sub	sp, #32
 80011d6:	af04      	add	r7, sp, #16
 80011d8:	60f8      	str	r0, [r7, #12]
 80011da:	607a      	str	r2, [r7, #4]
 80011dc:	461a      	mov	r2, r3
 80011de:	460b      	mov	r3, r1
 80011e0:	72fb      	strb	r3, [r7, #11]
 80011e2:	4613      	mov	r3, r2
 80011e4:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Read(handle, LSM6DSL_I2C_ADD_L, reg,
 80011e6:	7afb      	ldrb	r3, [r7, #11]
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ee:	9302      	str	r3, [sp, #8]
 80011f0:	893b      	ldrh	r3, [r7, #8]
 80011f2:	9301      	str	r3, [sp, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2301      	movs	r3, #1
 80011fa:	21d5      	movs	r1, #213	; 0xd5
 80011fc:	68f8      	ldr	r0, [r7, #12]
 80011fe:	f002 fd61 	bl	8003cc4 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <lps22hh_write>:
 *
 */
static int32_t lps22hh_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af04      	add	r7, sp, #16
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	461a      	mov	r2, r3
 8001218:	460b      	mov	r3, r1
 800121a:	72fb      	strb	r3, [r7, #11]
 800121c:	4613      	mov	r3, r2
 800121e:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_L, reg,
 8001220:	7afb      	ldrb	r3, [r7, #11]
 8001222:	b29a      	uxth	r2, r3
 8001224:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001228:	9302      	str	r3, [sp, #8]
 800122a:	893b      	ldrh	r3, [r7, #8]
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2301      	movs	r3, #1
 8001234:	21b9      	movs	r1, #185	; 0xb9
 8001236:	68f8      	ldr	r0, [r7, #12]
 8001238:	f002 fc4a 	bl	8003ad0 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <lps22hh_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lps22hh_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b088      	sub	sp, #32
 800124a:	af04      	add	r7, sp, #16
 800124c:	60f8      	str	r0, [r7, #12]
 800124e:	607a      	str	r2, [r7, #4]
 8001250:	461a      	mov	r2, r3
 8001252:	460b      	mov	r3, r1
 8001254:	72fb      	strb	r3, [r7, #11]
 8001256:	4613      	mov	r3, r2
 8001258:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_L, reg,
 800125a:	7afb      	ldrb	r3, [r7, #11]
 800125c:	b29a      	uxth	r2, r3
 800125e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001262:	9302      	str	r3, [sp, #8]
 8001264:	893b      	ldrh	r3, [r7, #8]
 8001266:	9301      	str	r3, [sp, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2301      	movs	r3, #1
 800126e:	21b9      	movs	r1, #185	; 0xb9
 8001270:	68f8      	ldr	r0, [r7, #12]
 8001272:	f002 fd27 	bl	8003cc4 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f001 fd25 	bl	8002cd8 <HAL_Delay>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001296:	b590      	push	{r4, r7, lr}
 8001298:	b087      	sub	sp, #28
 800129a:	af00      	add	r7, sp, #0
 800129c:	60f8      	str	r0, [r7, #12]
 800129e:	607a      	str	r2, [r7, #4]
 80012a0:	461a      	mov	r2, r3
 80012a2:	460b      	mov	r3, r1
 80012a4:	72fb      	strb	r3, [r7, #11]
 80012a6:	4613      	mov	r3, r2
 80012a8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	685c      	ldr	r4, [r3, #4]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6898      	ldr	r0, [r3, #8]
 80012b2:	893b      	ldrh	r3, [r7, #8]
 80012b4:	7af9      	ldrb	r1, [r7, #11]
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	47a0      	blx	r4
 80012ba:	6178      	str	r0, [r7, #20]

  return ret;
 80012bc:	697b      	ldr	r3, [r7, #20]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	371c      	adds	r7, #28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd90      	pop	{r4, r7, pc}

080012c6 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80012c6:	b590      	push	{r4, r7, lr}
 80012c8:	b087      	sub	sp, #28
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	60f8      	str	r0, [r7, #12]
 80012ce:	607a      	str	r2, [r7, #4]
 80012d0:	461a      	mov	r2, r3
 80012d2:	460b      	mov	r3, r1
 80012d4:	72fb      	strb	r3, [r7, #11]
 80012d6:	4613      	mov	r3, r2
 80012d8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681c      	ldr	r4, [r3, #0]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6898      	ldr	r0, [r3, #8]
 80012e2:	893b      	ldrh	r3, [r7, #8]
 80012e4:	7af9      	ldrb	r1, [r7, #11]
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	47a0      	blx	r4
 80012ea:	6178      	str	r0, [r7, #20]

  return ret;
 80012ec:	697b      	ldr	r3, [r7, #20]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	371c      	adds	r7, #28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd90      	pop	{r4, r7, pc}

080012f6 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b084      	sub	sp, #16
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	460b      	mov	r3, r1
 8001300:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8001302:	f107 0208 	add.w	r2, r7, #8
 8001306:	2301      	movs	r3, #1
 8001308:	2110      	movs	r1, #16
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff ffc3 	bl	8001296 <lps22hh_read_reg>
 8001310:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d10f      	bne.n	8001338 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8001318:	78fb      	ldrb	r3, [r7, #3]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	b2da      	uxtb	r2, r3
 8001320:	7a3b      	ldrb	r3, [r7, #8]
 8001322:	f362 0341 	bfi	r3, r2, #1, #1
 8001326:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8001328:	f107 0208 	add.w	r2, r7, #8
 800132c:	2301      	movs	r3, #1
 800132e:	2110      	movs	r1, #16
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ffc8 	bl	80012c6 <lps22hh_write_reg>
 8001336:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001338:	68fb      	ldr	r3, [r7, #12]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b086      	sub	sp, #24
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	460b      	mov	r3, r1
 800134c:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800134e:	f107 0210 	add.w	r2, r7, #16
 8001352:	2301      	movs	r3, #1
 8001354:	2110      	movs	r1, #16
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ff9d 	bl	8001296 <lps22hh_read_reg>
 800135c:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d107      	bne.n	8001374 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8001364:	f107 020c 	add.w	r2, r7, #12
 8001368:	2301      	movs	r3, #1
 800136a:	2111      	movs	r1, #17
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff ff92 	bl	8001296 <lps22hh_read_reg>
 8001372:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10f      	bne.n	800139a <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 800137a:	78fb      	ldrb	r3, [r7, #3]
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	b2da      	uxtb	r2, r3
 8001382:	7c3b      	ldrb	r3, [r7, #16]
 8001384:	f362 1306 	bfi	r3, r2, #4, #3
 8001388:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800138a:	f107 0210 	add.w	r2, r7, #16
 800138e:	2301      	movs	r3, #1
 8001390:	2110      	movs	r1, #16
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff ff97 	bl	80012c6 <lps22hh_write_reg>
 8001398:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d119      	bne.n	80013d4 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 80013a0:	78fb      	ldrb	r3, [r7, #3]
 80013a2:	091b      	lsrs	r3, r3, #4
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	7b3b      	ldrb	r3, [r7, #12]
 80013ac:	f362 0341 	bfi	r3, r2, #1, #1
 80013b0:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 80013b2:	78fb      	ldrb	r3, [r7, #3]
 80013b4:	08db      	lsrs	r3, r3, #3
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	7b3b      	ldrb	r3, [r7, #12]
 80013be:	f362 0300 	bfi	r3, r2, #0, #1
 80013c2:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80013c4:	f107 020c 	add.w	r2, r7, #12
 80013c8:	2301      	movs	r3, #1
 80013ca:	2111      	movs	r1, #17
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff ff7a 	bl	80012c6 <lps22hh_write_reg>
 80013d2:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80013d4:	697b      	ldr	r3, [r7, #20]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b084      	sub	sp, #16
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 80013e8:	2301      	movs	r3, #1
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	210f      	movs	r1, #15
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff ff51 	bl	8001296 <lps22hh_read_reg>
 80013f4:	60f8      	str	r0, [r7, #12]

  return ret;
 80013f6:	68fb      	ldr	r3, [r7, #12]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800140c:	f107 0208 	add.w	r2, r7, #8
 8001410:	2301      	movs	r3, #1
 8001412:	2111      	movs	r1, #17
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ff3e 	bl	8001296 <lps22hh_read_reg>
 800141a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d10f      	bne.n	8001442 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8001422:	78fb      	ldrb	r3, [r7, #3]
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	b2da      	uxtb	r2, r3
 800142a:	7a3b      	ldrb	r3, [r7, #8]
 800142c:	f362 0382 	bfi	r3, r2, #2, #1
 8001430:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8001432:	f107 0208 	add.w	r2, r7, #8
 8001436:	2301      	movs	r3, #1
 8001438:	2111      	movs	r1, #17
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff ff43 	bl	80012c6 <lps22hh_write_reg>
 8001440:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001442:	68fb      	ldr	r3, [r7, #12]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8001456:	f107 0208 	add.w	r2, r7, #8
 800145a:	2301      	movs	r3, #1
 800145c:	2111      	movs	r1, #17
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff ff19 	bl	8001296 <lps22hh_read_reg>
 8001464:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8001466:	7a3b      	ldrb	r3, [r7, #8]
 8001468:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800146c:	b2db      	uxtb	r3, r3
 800146e:	461a      	mov	r2, r3
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	701a      	strb	r2, [r3, #0]

  return ret;
 8001474:	68fb      	ldr	r3, [r7, #12]
}
 8001476:	4618      	mov	r0, r3
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800147e:	b590      	push	{r4, r7, lr}
 8001480:	b087      	sub	sp, #28
 8001482:	af00      	add	r7, sp, #0
 8001484:	60f8      	str	r0, [r7, #12]
 8001486:	607a      	str	r2, [r7, #4]
 8001488:	461a      	mov	r2, r3
 800148a:	460b      	mov	r3, r1
 800148c:	72fb      	strb	r3, [r7, #11]
 800148e:	4613      	mov	r3, r2
 8001490:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	685c      	ldr	r4, [r3, #4]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6898      	ldr	r0, [r3, #8]
 800149a:	893b      	ldrh	r3, [r7, #8]
 800149c:	7af9      	ldrb	r1, [r7, #11]
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	47a0      	blx	r4
 80014a2:	6178      	str	r0, [r7, #20]

  return ret;
 80014a4:	697b      	ldr	r3, [r7, #20]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	371c      	adds	r7, #28
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd90      	pop	{r4, r7, pc}

080014ae <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80014ae:	b590      	push	{r4, r7, lr}
 80014b0:	b087      	sub	sp, #28
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	60f8      	str	r0, [r7, #12]
 80014b6:	607a      	str	r2, [r7, #4]
 80014b8:	461a      	mov	r2, r3
 80014ba:	460b      	mov	r3, r1
 80014bc:	72fb      	strb	r3, [r7, #11]
 80014be:	4613      	mov	r3, r2
 80014c0:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681c      	ldr	r4, [r3, #0]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6898      	ldr	r0, [r3, #8]
 80014ca:	893b      	ldrh	r3, [r7, #8]
 80014cc:	7af9      	ldrb	r1, [r7, #11]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	47a0      	blx	r4
 80014d2:	6178      	str	r0, [r7, #20]

  return ret;
 80014d4:	697b      	ldr	r3, [r7, #20]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	371c      	adds	r7, #28
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd90      	pop	{r4, r7, pc}

080014de <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b084      	sub	sp, #16
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	460b      	mov	r3, r1
 80014e8:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80014ea:	f107 0208 	add.w	r2, r7, #8
 80014ee:	2301      	movs	r3, #1
 80014f0:	2110      	movs	r1, #16
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff ffc3 	bl	800147e <lsm6dsl_read_reg>
 80014f8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d10f      	bne.n	8001520 <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8001500:	78fb      	ldrb	r3, [r7, #3]
 8001502:	f003 0303 	and.w	r3, r3, #3
 8001506:	b2da      	uxtb	r2, r3
 8001508:	7a3b      	ldrb	r3, [r7, #8]
 800150a:	f362 0383 	bfi	r3, r2, #2, #2
 800150e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001510:	f107 0208 	add.w	r2, r7, #8
 8001514:	2301      	movs	r3, #1
 8001516:	2110      	movs	r1, #16
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff ffc8 	bl	80014ae <lsm6dsl_write_reg>
 800151e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001520:	68fb      	ldr	r3, [r7, #12]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b084      	sub	sp, #16
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
 8001532:	460b      	mov	r3, r1
 8001534:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001536:	f107 0208 	add.w	r2, r7, #8
 800153a:	2301      	movs	r3, #1
 800153c:	2110      	movs	r1, #16
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff ff9d 	bl	800147e <lsm6dsl_read_reg>
 8001544:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d10f      	bne.n	800156c <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 800154c:	78fb      	ldrb	r3, [r7, #3]
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	b2da      	uxtb	r2, r3
 8001554:	7a3b      	ldrb	r3, [r7, #8]
 8001556:	f362 1307 	bfi	r3, r2, #4, #4
 800155a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800155c:	f107 0208 	add.w	r2, r7, #8
 8001560:	2301      	movs	r3, #1
 8001562:	2110      	movs	r1, #16
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff ffa2 	bl	80014ae <lsm6dsl_write_reg>
 800156a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800156c:	68fb      	ldr	r3, [r7, #12]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b084      	sub	sp, #16
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	460b      	mov	r3, r1
 8001580:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001582:	f107 0208 	add.w	r2, r7, #8
 8001586:	2301      	movs	r3, #1
 8001588:	2111      	movs	r1, #17
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff ff77 	bl	800147e <lsm6dsl_read_reg>
 8001590:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10f      	bne.n	80015b8 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8001598:	78fb      	ldrb	r3, [r7, #3]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	7a3b      	ldrb	r3, [r7, #8]
 80015a2:	f362 0343 	bfi	r3, r2, #1, #3
 80015a6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80015a8:	f107 0208 	add.w	r2, r7, #8
 80015ac:	2301      	movs	r3, #1
 80015ae:	2111      	movs	r1, #17
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ff7c 	bl	80014ae <lsm6dsl_write_reg>
 80015b6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80015b8:	68fb      	ldr	r3, [r7, #12]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b084      	sub	sp, #16
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	460b      	mov	r3, r1
 80015cc:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80015ce:	f107 0208 	add.w	r2, r7, #8
 80015d2:	2301      	movs	r3, #1
 80015d4:	2111      	movs	r1, #17
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff ff51 	bl	800147e <lsm6dsl_read_reg>
 80015dc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d10f      	bne.n	8001604 <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	7a3b      	ldrb	r3, [r7, #8]
 80015ee:	f362 1307 	bfi	r3, r2, #4, #4
 80015f2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80015f4:	f107 0208 	add.w	r2, r7, #8
 80015f8:	2301      	movs	r3, #1
 80015fa:	2111      	movs	r1, #17
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff ff56 	bl	80014ae <lsm6dsl_write_reg>
 8001602:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001604:	68fb      	ldr	r3, [r7, #12]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b084      	sub	sp, #16
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	460b      	mov	r3, r1
 8001618:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800161a:	f107 0208 	add.w	r2, r7, #8
 800161e:	2301      	movs	r3, #1
 8001620:	2112      	movs	r1, #18
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff ff2b 	bl	800147e <lsm6dsl_read_reg>
 8001628:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d10f      	bne.n	8001650 <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8001630:	78fb      	ldrb	r3, [r7, #3]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	b2da      	uxtb	r2, r3
 8001638:	7a3b      	ldrb	r3, [r7, #8]
 800163a:	f362 1386 	bfi	r3, r2, #6, #1
 800163e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001640:	f107 0208 	add.w	r2, r7, #8
 8001644:	2301      	movs	r3, #1
 8001646:	2112      	movs	r1, #18
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ff30 	bl	80014ae <lsm6dsl_write_reg>
 800164e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001650:	68fb      	ldr	r3, [r7, #12]
}
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b084      	sub	sp, #16
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
 8001662:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8001664:	2301      	movs	r3, #1
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	210f      	movs	r1, #15
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff ff07 	bl	800147e <lsm6dsl_read_reg>
 8001670:	60f8      	str	r0, [r7, #12]

  return ret;
 8001672:	68fb      	ldr	r3, [r7, #12]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001688:	f107 0208 	add.w	r2, r7, #8
 800168c:	2301      	movs	r3, #1
 800168e:	2112      	movs	r1, #18
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff fef4 	bl	800147e <lsm6dsl_read_reg>
 8001696:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d10f      	bne.n	80016be <lsm6dsl_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 800169e:	78fb      	ldrb	r3, [r7, #3]
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	7a3b      	ldrb	r3, [r7, #8]
 80016a8:	f362 0300 	bfi	r3, r2, #0, #1
 80016ac:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80016ae:	f107 0208 	add.w	r2, r7, #8
 80016b2:	2301      	movs	r3, #1
 80016b4:	2112      	movs	r1, #18
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff fef9 	bl	80014ae <lsm6dsl_write_reg>
 80016bc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80016be:	68fb      	ldr	r3, [r7, #12]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <lsm6dsl_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80016d2:	f107 0208 	add.w	r2, r7, #8
 80016d6:	2301      	movs	r3, #1
 80016d8:	2112      	movs	r1, #18
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff fecf 	bl	800147e <lsm6dsl_read_reg>
 80016e0:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 80016e2:	7a3b      	ldrb	r3, [r7, #8]
 80016e4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	461a      	mov	r2, r3
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	701a      	strb	r2, [r3, #0]

  return ret;
 80016f0:	68fb      	ldr	r3, [r7, #12]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <lsm6dsl_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                     lsm6dsl_input_composite_t val)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b084      	sub	sp, #16
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	460b      	mov	r3, r1
 8001704:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8001706:	f107 0208 	add.w	r2, r7, #8
 800170a:	2301      	movs	r3, #1
 800170c:	2117      	movs	r1, #23
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff feb5 	bl	800147e <lsm6dsl_read_reg>
 8001714:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d120      	bne.n	800175e <lsm6dsl_xl_lp2_bandwidth_set+0x64>
  {
    ctrl8_xl.input_composite = ((uint8_t) val & 0x10U) >> 4;
 800171c:	78fb      	ldrb	r3, [r7, #3]
 800171e:	091b      	lsrs	r3, r3, #4
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	b2da      	uxtb	r2, r3
 8001726:	7a3b      	ldrb	r3, [r7, #8]
 8001728:	f362 03c3 	bfi	r3, r2, #3, #1
 800172c:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 800172e:	78fb      	ldrb	r3, [r7, #3]
 8001730:	f003 0303 	and.w	r3, r3, #3
 8001734:	b2da      	uxtb	r2, r3
 8001736:	7a3b      	ldrb	r3, [r7, #8]
 8001738:	f362 1346 	bfi	r3, r2, #5, #2
 800173c:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 800173e:	7a3b      	ldrb	r3, [r7, #8]
 8001740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001744:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 8001746:	7a3b      	ldrb	r3, [r7, #8]
 8001748:	f36f 0382 	bfc	r3, #2, #1
 800174c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 800174e:	f107 0208 	add.w	r2, r7, #8
 8001752:	2301      	movs	r3, #1
 8001754:	2117      	movs	r1, #23
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff fea9 	bl	80014ae <lsm6dsl_write_reg>
 800175c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800175e:	68fb      	ldr	r3, [r7, #12]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <lsm6dsl_gy_band_pass_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_band_pass_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_lpf1_sel_g_t val)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_ctrl6_c_t ctrl6_c;
  lsm6dsl_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8001774:	f107 0208 	add.w	r2, r7, #8
 8001778:	2301      	movs	r3, #1
 800177a:	2116      	movs	r1, #22
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff fe7e 	bl	800147e <lsm6dsl_read_reg>
 8001782:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d157      	bne.n	800183a <lsm6dsl_gy_band_pass_set+0xd2>
  {
    ctrl7_g.hpm_g  = ((uint8_t)val & 0x30U) >> 4;
 800178a:	78fb      	ldrb	r3, [r7, #3]
 800178c:	091b      	lsrs	r3, r3, #4
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	b2da      	uxtb	r2, r3
 8001794:	7a3b      	ldrb	r3, [r7, #8]
 8001796:	f362 1305 	bfi	r3, r2, #4, #2
 800179a:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ((uint8_t)val & 0x80U) >> 7;
 800179c:	78fb      	ldrb	r3, [r7, #3]
 800179e:	09db      	lsrs	r3, r3, #7
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	7a3b      	ldrb	r3, [r7, #8]
 80017aa:	f362 1386 	bfi	r3, r2, #6, #1
 80017ae:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 80017b0:	f107 0208 	add.w	r2, r7, #8
 80017b4:	2301      	movs	r3, #1
 80017b6:	2116      	movs	r1, #22
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff fe78 	bl	80014ae <lsm6dsl_write_reg>
 80017be:	6178      	str	r0, [r7, #20]

    if (ret == 0)
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d139      	bne.n	800183a <lsm6dsl_gy_band_pass_set+0xd2>
    {
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 80017c6:	f107 020c 	add.w	r2, r7, #12
 80017ca:	2301      	movs	r3, #1
 80017cc:	2115      	movs	r1, #21
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff fe55 	bl	800147e <lsm6dsl_read_reg>
 80017d4:	6178      	str	r0, [r7, #20]

      if (ret == 0)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d12e      	bne.n	800183a <lsm6dsl_gy_band_pass_set+0xd2>
      {
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	7b3b      	ldrb	r3, [r7, #12]
 80017e6:	f362 0301 	bfi	r3, r2, #0, #2
 80017ea:	733b      	strb	r3, [r7, #12]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 80017ec:	f107 020c 	add.w	r2, r7, #12
 80017f0:	2301      	movs	r3, #1
 80017f2:	2115      	movs	r1, #21
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff fe5a 	bl	80014ae <lsm6dsl_write_reg>
 80017fa:	6178      	str	r0, [r7, #20]

        if (ret == 0)
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d11b      	bne.n	800183a <lsm6dsl_gy_band_pass_set+0xd2>
        {
          ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C,
 8001802:	f107 0210 	add.w	r2, r7, #16
 8001806:	2301      	movs	r3, #1
 8001808:	2113      	movs	r1, #19
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff fe37 	bl	800147e <lsm6dsl_read_reg>
 8001810:	6178      	str	r0, [r7, #20]
                                 (uint8_t *)&ctrl4_c, 1);

          if (ret == 0)
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d110      	bne.n	800183a <lsm6dsl_gy_band_pass_set+0xd2>
          {
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 8001818:	78fb      	ldrb	r3, [r7, #3]
 800181a:	08db      	lsrs	r3, r3, #3
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	b2da      	uxtb	r2, r3
 8001822:	7c3b      	ldrb	r3, [r7, #16]
 8001824:	f362 0341 	bfi	r3, r2, #1, #1
 8001828:	743b      	strb	r3, [r7, #16]
            ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C,
 800182a:	f107 0210 	add.w	r2, r7, #16
 800182e:	2301      	movs	r3, #1
 8001830:	2113      	movs	r1, #19
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff fe3b 	bl	80014ae <lsm6dsl_write_reg>
 8001838:	6178      	str	r0, [r7, #20]
        }
      }
    }
  }

  return ret;
 800183a:	697b      	ldr	r3, [r7, #20]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b087      	sub	sp, #28
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800184a:	f001 f9d3 	bl	8002bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800184e:	f000 f951 	bl	8001af4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001852:	f000 fc21 	bl	8002098 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001856:	f000 f9b7 	bl	8001bc8 <MX_ADC1_Init>
  MX_SPI4_Init();
 800185a:	f000 fabd 	bl	8001dd8 <MX_SPI4_Init>
  MX_TIM2_Init();
 800185e:	f000 fb27 	bl	8001eb0 <MX_TIM2_Init>
  MX_SPI5_Init();
 8001862:	f000 faef 	bl	8001e44 <MX_SPI5_Init>
  MX_FATFS_Init();
 8001866:	f007 fedf 	bl	8009628 <MX_FATFS_Init>
  MX_I2C3_Init();
 800186a:	f000 fa3f 	bl	8001cec <MX_I2C3_Init>
  MX_USART6_UART_Init();
 800186e:	f000 fbe9 	bl	8002044 <MX_USART6_UART_Init>
  MX_I2C2_Init();
 8001872:	f000 f9fb 	bl	8001c6c <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8001876:	f00a f8dd 	bl	800ba34 <MX_USB_DEVICE_Init>
  MX_USART3_UART_Init();
 800187a:	f000 fbb9 	bl	8001ff0 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 800187e:	f000 fa75 	bl	8001d6c <MX_SPI2_Init>
  MX_UART8_Init();
 8001882:	f000 fb8b 	bl	8001f9c <MX_UART8_Init>
  /* USER CODE BEGIN 2 */

  // reset LEDs
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8001886:	2200      	movs	r2, #0
 8001888:	2102      	movs	r1, #2
 800188a:	4891      	ldr	r0, [pc, #580]	; (8001ad0 <main+0x28c>)
 800188c:	f001 ff90 	bl	80037b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8001890:	2200      	movs	r2, #0
 8001892:	2104      	movs	r1, #4
 8001894:	488e      	ldr	r0, [pc, #568]	; (8001ad0 <main+0x28c>)
 8001896:	f001 ff8b 	bl	80037b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 800189a:	2200      	movs	r2, #0
 800189c:	2108      	movs	r1, #8
 800189e:	488c      	ldr	r0, [pc, #560]	; (8001ad0 <main+0x28c>)
 80018a0:	f001 ff86 	bl	80037b0 <HAL_GPIO_WritePin>

  // reset recovery pyro pins
  HAL_GPIO_WritePin(Rcov_Arm_GPIO_Port, Rcov_Arm_Pin, RESET);
 80018a4:	2200      	movs	r2, #0
 80018a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018aa:	488a      	ldr	r0, [pc, #552]	; (8001ad4 <main+0x290>)
 80018ac:	f001 ff80 	bl	80037b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Rcov_Gate_Drogue_GPIO_Port, Rcov_Gate_Drogue_Pin, RESET);
 80018b0:	2200      	movs	r2, #0
 80018b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018b6:	4887      	ldr	r0, [pc, #540]	; (8001ad4 <main+0x290>)
 80018b8:	f001 ff7a 	bl	80037b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Rcov_Gate_Main_GPIO_Port, Rcov_Gate_Main_Pin, RESET);
 80018bc:	2200      	movs	r2, #0
 80018be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018c2:	4884      	ldr	r0, [pc, #528]	; (8001ad4 <main+0x290>)
 80018c4:	f001 ff74 	bl	80037b0 <HAL_GPIO_WritePin>

  // reset prop pyro pins
  HAL_GPIO_WritePin(Prop_Pyro_Arming_GPIO_Port, Prop_Pyro_Arming_Pin, RESET);
 80018c8:	2200      	movs	r2, #0
 80018ca:	2102      	movs	r1, #2
 80018cc:	4881      	ldr	r0, [pc, #516]	; (8001ad4 <main+0x290>)
 80018ce:	f001 ff6f 	bl	80037b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Prop_Gate_1_GPIO_Port, Prop_Gate_1_Pin, RESET);
 80018d2:	2200      	movs	r2, #0
 80018d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018d8:	487f      	ldr	r0, [pc, #508]	; (8001ad8 <main+0x294>)
 80018da:	f001 ff69 	bl	80037b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Prop_Gate_2_GPIO_Port, Prop_Gate_2_Pin, RESET);
 80018de:	2200      	movs	r2, #0
 80018e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018e4:	487c      	ldr	r0, [pc, #496]	; (8001ad8 <main+0x294>)
 80018e6:	f001 ff63 	bl	80037b0 <HAL_GPIO_WritePin>

  // reset 12 V buck converter enable pin (disable converter)
  HAL_GPIO_WritePin(PM_12V_EN_GPIO_Port, PM_12V_EN_Pin, RESET);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2104      	movs	r1, #4
 80018ee:	487b      	ldr	r0, [pc, #492]	; (8001adc <main+0x298>)
 80018f0:	f001 ff5e 	bl	80037b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET);
 80018f4:	2200      	movs	r2, #0
 80018f6:	2180      	movs	r1, #128	; 0x80
 80018f8:	4878      	ldr	r0, [pc, #480]	; (8001adc <main+0x298>)
 80018fa:	f001 ff59 	bl	80037b0 <HAL_GPIO_WritePin>

  // reset payload EN signal
  HAL_GPIO_WritePin(Payload_EN_GPIO_Port, Payload_EN_Pin, RESET);
 80018fe:	2200      	movs	r2, #0
 8001900:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001904:	4875      	ldr	r0, [pc, #468]	; (8001adc <main+0x298>)
 8001906:	f001 ff53 	bl	80037b0 <HAL_GPIO_WritePin>

  // set CS pin for thermocouple chip high
  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

  // set power off for VR
  HAL_GPIO_WritePin(VR_CTRL_PWR_GPIO_Port, VR_CTRL_PWR_Pin, RESET);
 800190a:	2200      	movs	r2, #0
 800190c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001910:	4870      	ldr	r0, [pc, #448]	; (8001ad4 <main+0x290>)
 8001912:	f001 ff4d 	bl	80037b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, RESET);
 8001916:	2200      	movs	r2, #0
 8001918:	2180      	movs	r1, #128	; 0x80
 800191a:	4871      	ldr	r0, [pc, #452]	; (8001ae0 <main+0x29c>)
 800191c:	f001 ff48 	bl	80037b0 <HAL_GPIO_WritePin>

  // FLASH set CS, WP and IO3 pins high
  HAL_GPIO_WritePin(CS_FLASH_GPIO_Port, CS_FLASH_Pin, SET);
 8001920:	2201      	movs	r2, #1
 8001922:	2140      	movs	r1, #64	; 0x40
 8001924:	486e      	ldr	r0, [pc, #440]	; (8001ae0 <main+0x29c>)
 8001926:	f001 ff43 	bl	80037b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FLASH_WP_GPIO_Port, FLASH_WP_Pin, SET);
 800192a:	2201      	movs	r2, #1
 800192c:	2120      	movs	r1, #32
 800192e:	486c      	ldr	r0, [pc, #432]	; (8001ae0 <main+0x29c>)
 8001930:	f001 ff3e 	bl	80037b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FLASH_IO3_GPIO_Port, FLASH_IO3_Pin, SET);
 8001934:	2201      	movs	r2, #1
 8001936:	2110      	movs	r1, #16
 8001938:	4869      	ldr	r0, [pc, #420]	; (8001ae0 <main+0x29c>)
 800193a:	f001 ff39 	bl	80037b0 <HAL_GPIO_WritePin>


  dev_ctx_lsm = lsm6dsl_init();
 800193e:	4c69      	ldr	r4, [pc, #420]	; (8001ae4 <main+0x2a0>)
 8001940:	463b      	mov	r3, r7
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fb62 	bl	800100c <lsm6dsl_init>
 8001948:	463b      	mov	r3, r7
 800194a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800194e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  dev_ctx_lps = lps22hh_init();
 8001952:	4c65      	ldr	r4, [pc, #404]	; (8001ae8 <main+0x2a4>)
 8001954:	463b      	mov	r3, r7
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff fbc8 	bl	80010ec <lps22hh_init>
 800195c:	463b      	mov	r3, r7
 800195e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001962:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
#ifdef TEST_EJECTION
	  if (start_ejection)
 8001966:	4b61      	ldr	r3, [pc, #388]	; (8001aec <main+0x2a8>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0fa      	beq.n	8001966 <main+0x122>
	  {
		  // indicate arming occurred
		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001970:	2108      	movs	r1, #8
 8001972:	485f      	ldr	r0, [pc, #380]	; (8001af0 <main+0x2ac>)
 8001974:	f005 f936 	bl	8006be4 <HAL_TIM_PWM_Start>
		  HAL_Delay(2000); // wait so i can probe voltage
 8001978:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800197c:	f001 f9ac 	bl	8002cd8 <HAL_Delay>
		  start_ejection = 0;
 8001980:	4b5a      	ldr	r3, [pc, #360]	; (8001aec <main+0x2a8>)
 8001982:	2200      	movs	r2, #0
 8001984:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8001986:	2108      	movs	r1, #8
 8001988:	4859      	ldr	r0, [pc, #356]	; (8001af0 <main+0x2ac>)
 800198a:	f005 f9f3 	bl	8006d74 <HAL_TIM_PWM_Stop>
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 800198e:	2201      	movs	r2, #1
 8001990:	2102      	movs	r1, #2
 8001992:	484f      	ldr	r0, [pc, #316]	; (8001ad0 <main+0x28c>)
 8001994:	f001 ff0c 	bl	80037b0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Rcov_Arm_GPIO_Port, Rcov_Arm_Pin, SET);
 8001998:	2201      	movs	r2, #1
 800199a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800199e:	484d      	ldr	r0, [pc, #308]	; (8001ad4 <main+0x290>)
 80019a0:	f001 ff06 	bl	80037b0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Prop_Pyro_Arming_GPIO_Port, Prop_Pyro_Arming_Pin, SET);
 80019a4:	2201      	movs	r2, #1
 80019a6:	2102      	movs	r1, #2
 80019a8:	484a      	ldr	r0, [pc, #296]	; (8001ad4 <main+0x290>)
 80019aa:	f001 ff01 	bl	80037b0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Payload_EN_GPIO_Port, Payload_EN_Pin, SET);
 80019ae:	2201      	movs	r2, #1
 80019b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019b4:	4849      	ldr	r0, [pc, #292]	; (8001adc <main+0x298>)
 80019b6:	f001 fefb 	bl	80037b0 <HAL_GPIO_WritePin>

		  while (!start_ejection);
 80019ba:	bf00      	nop
 80019bc:	4b4b      	ldr	r3, [pc, #300]	; (8001aec <main+0x2a8>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d0fa      	beq.n	80019bc <main+0x178>

		  HAL_Delay(1000);
 80019c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019ca:	f001 f985 	bl	8002cd8 <HAL_Delay>
		  start_ejection = 0;
 80019ce:	4b47      	ldr	r3, [pc, #284]	; (8001aec <main+0x2a8>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]

		  GPIO_PinState cont_drogue = HAL_GPIO_ReadPin(Rcov_Cont_Drogue_GPIO_Port, Rcov_Cont_Drogue_Pin);
 80019d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019d8:	483e      	ldr	r0, [pc, #248]	; (8001ad4 <main+0x290>)
 80019da:	f001 fed1 	bl	8003780 <HAL_GPIO_ReadPin>
 80019de:	4603      	mov	r3, r0
 80019e0:	75fb      	strb	r3, [r7, #23]
		  GPIO_PinState cont_main = HAL_GPIO_ReadPin(Rcov_Cont_Main_GPIO_Port, Rcov_Cont_Main_Pin);
 80019e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019e6:	483b      	ldr	r0, [pc, #236]	; (8001ad4 <main+0x290>)
 80019e8:	f001 feca 	bl	8003780 <HAL_GPIO_ReadPin>
 80019ec:	4603      	mov	r3, r0
 80019ee:	75bb      	strb	r3, [r7, #22]

		  GPIO_PinState cont_prop_1 = HAL_GPIO_ReadPin(Prop_Cont_1_GPIO_Port, Prop_Cont_1_Pin);
 80019f0:	2101      	movs	r1, #1
 80019f2:	4838      	ldr	r0, [pc, #224]	; (8001ad4 <main+0x290>)
 80019f4:	f001 fec4 	bl	8003780 <HAL_GPIO_ReadPin>
 80019f8:	4603      	mov	r3, r0
 80019fa:	757b      	strb	r3, [r7, #21]
		  GPIO_PinState cont_prop_2 = HAL_GPIO_ReadPin(Prop_Cont_2_GPIO_Port, Prop_Cont_2_Pin);
 80019fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a00:	4835      	ldr	r0, [pc, #212]	; (8001ad8 <main+0x294>)
 8001a02:	f001 febd 	bl	8003780 <HAL_GPIO_ReadPin>
 8001a06:	4603      	mov	r3, r0
 8001a08:	753b      	strb	r3, [r7, #20]

		  HAL_GPIO_WritePin(Rcov_Gate_Drogue_GPIO_Port, Rcov_Gate_Drogue_Pin, SET); // fire drogue and main
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a10:	4830      	ldr	r0, [pc, #192]	; (8001ad4 <main+0x290>)
 8001a12:	f001 fecd 	bl	80037b0 <HAL_GPIO_WritePin>
//		  HAL_GPIO_WritePin(Rcov_Gate_Main_GPIO_Port, Rcov_Gate_Main_Pin, SET);

//		  HAL_GPIO_WritePin(Prop_Gate_1_GPIO_Port, Prop_Gate_1_Pin, SET); // prop pyro channels
//		  HAL_GPIO_WritePin(Prop_Gate_2_GPIO_Port, Prop_Gate_2_Pin, SET);

		  HAL_Delay(100);
 8001a16:	2064      	movs	r0, #100	; 0x64
 8001a18:	f001 f95e 	bl	8002cd8 <HAL_Delay>

		  HAL_GPIO_WritePin(Rcov_Gate_Drogue_GPIO_Port, Rcov_Gate_Drogue_Pin, RESET);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a22:	482c      	ldr	r0, [pc, #176]	; (8001ad4 <main+0x290>)
 8001a24:	f001 fec4 	bl	80037b0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Rcov_Gate_Main_GPIO_Port, Rcov_Gate_Main_Pin, RESET);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a2e:	4829      	ldr	r0, [pc, #164]	; (8001ad4 <main+0x290>)
 8001a30:	f001 febe 	bl	80037b0 <HAL_GPIO_WritePin>

		  while (!start_ejection);
 8001a34:	bf00      	nop
 8001a36:	4b2d      	ldr	r3, [pc, #180]	; (8001aec <main+0x2a8>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0fa      	beq.n	8001a36 <main+0x1f2>
		  HAL_Delay(1000);
 8001a40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a44:	f001 f948 	bl	8002cd8 <HAL_Delay>

		  HAL_GPIO_WritePin(Rcov_Gate_Main_GPIO_Port, Rcov_Gate_Main_Pin, SET);
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a4e:	4821      	ldr	r0, [pc, #132]	; (8001ad4 <main+0x290>)
 8001a50:	f001 feae 	bl	80037b0 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8001a54:	2064      	movs	r0, #100	; 0x64
 8001a56:	f001 f93f 	bl	8002cd8 <HAL_Delay>
		  HAL_GPIO_WritePin(Rcov_Gate_Main_GPIO_Port, Rcov_Gate_Main_Pin, RESET);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a60:	481c      	ldr	r0, [pc, #112]	; (8001ad4 <main+0x290>)
 8001a62:	f001 fea5 	bl	80037b0 <HAL_GPIO_WritePin>


		  HAL_GPIO_WritePin(Prop_Gate_1_GPIO_Port, Prop_Gate_1_Pin, RESET);
 8001a66:	2200      	movs	r2, #0
 8001a68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a6c:	481a      	ldr	r0, [pc, #104]	; (8001ad8 <main+0x294>)
 8001a6e:	f001 fe9f 	bl	80037b0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Prop_Gate_2_GPIO_Port, Prop_Gate_2_Pin, RESET);
 8001a72:	2200      	movs	r2, #0
 8001a74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a78:	4817      	ldr	r0, [pc, #92]	; (8001ad8 <main+0x294>)
 8001a7a:	f001 fe99 	bl	80037b0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Payload_EN_GPIO_Port, Payload_EN_Pin, RESET);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a84:	4815      	ldr	r0, [pc, #84]	; (8001adc <main+0x298>)
 8001a86:	f001 fe93 	bl	80037b0 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	2104      	movs	r1, #4
 8001a8e:	4810      	ldr	r0, [pc, #64]	; (8001ad0 <main+0x28c>)
 8001a90:	f001 fe8e 	bl	80037b0 <HAL_GPIO_WritePin>

		  HAL_Delay(1000);
 8001a94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a98:	f001 f91e 	bl	8002cd8 <HAL_Delay>

		  start_ejection = 0; // allow button press to trigger it again
 8001a9c:	4b13      	ldr	r3, [pc, #76]	; (8001aec <main+0x2a8>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(Rcov_Arm_GPIO_Port, Rcov_Arm_Pin, RESET);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aa8:	480a      	ldr	r0, [pc, #40]	; (8001ad4 <main+0x290>)
 8001aaa:	f001 fe81 	bl	80037b0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Prop_Pyro_Arming_GPIO_Port, Prop_Pyro_Arming_Pin, RESET);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2102      	movs	r1, #2
 8001ab2:	4808      	ldr	r0, [pc, #32]	; (8001ad4 <main+0x290>)
 8001ab4:	f001 fe7c 	bl	80037b0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2102      	movs	r1, #2
 8001abc:	4804      	ldr	r0, [pc, #16]	; (8001ad0 <main+0x28c>)
 8001abe:	f001 fe77 	bl	80037b0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2104      	movs	r1, #4
 8001ac6:	4802      	ldr	r0, [pc, #8]	; (8001ad0 <main+0x28c>)
 8001ac8:	f001 fe72 	bl	80037b0 <HAL_GPIO_WritePin>
	  if (start_ejection)
 8001acc:	e74b      	b.n	8001966 <main+0x122>
 8001ace:	bf00      	nop
 8001ad0:	40020800 	.word	0x40020800
 8001ad4:	40021800 	.word	0x40021800
 8001ad8:	40021400 	.word	0x40021400
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40020c00 	.word	0x40020c00
 8001ae4:	20000d60 	.word	0x20000d60
 8001ae8:	20000d6c 	.word	0x20000d6c
 8001aec:	2000038c 	.word	0x2000038c
 8001af0:	20000d18 	.word	0x20000d18

08001af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b094      	sub	sp, #80	; 0x50
 8001af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001afa:	f107 0320 	add.w	r3, r7, #32
 8001afe:	2230      	movs	r2, #48	; 0x30
 8001b00:	2100      	movs	r1, #0
 8001b02:	4618      	mov	r0, r3
 8001b04:	f00a fcd8 	bl	800c4b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b08:	f107 030c 	add.w	r3, r7, #12
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60bb      	str	r3, [r7, #8]
 8001b1c:	4b28      	ldr	r3, [pc, #160]	; (8001bc0 <SystemClock_Config+0xcc>)
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	4a27      	ldr	r2, [pc, #156]	; (8001bc0 <SystemClock_Config+0xcc>)
 8001b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b26:	6413      	str	r3, [r2, #64]	; 0x40
 8001b28:	4b25      	ldr	r3, [pc, #148]	; (8001bc0 <SystemClock_Config+0xcc>)
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001b34:	2300      	movs	r3, #0
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	4b22      	ldr	r3, [pc, #136]	; (8001bc4 <SystemClock_Config+0xd0>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b40:	4a20      	ldr	r2, [pc, #128]	; (8001bc4 <SystemClock_Config+0xd0>)
 8001b42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	4b1e      	ldr	r3, [pc, #120]	; (8001bc4 <SystemClock_Config+0xd0>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b50:	607b      	str	r3, [r7, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b54:	2301      	movs	r3, #1
 8001b56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b68:	2308      	movs	r3, #8
 8001b6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001b6c:	2348      	movs	r3, #72	; 0x48
 8001b6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b70:	2302      	movs	r3, #2
 8001b72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001b74:	2303      	movs	r3, #3
 8001b76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b78:	f107 0320 	add.w	r3, r7, #32
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f004 f821 	bl	8005bc4 <HAL_RCC_OscConfig>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001b88:	f000 fbf8 	bl	800237c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b8c:	230f      	movs	r3, #15
 8001b8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b90:	2302      	movs	r3, #2
 8001b92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ba2:	f107 030c 	add.w	r3, r7, #12
 8001ba6:	2102      	movs	r1, #2
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f004 fa83 	bl	80060b4 <HAL_RCC_ClockConfig>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001bb4:	f000 fbe2 	bl	800237c <Error_Handler>
  }
}
 8001bb8:	bf00      	nop
 8001bba:	3750      	adds	r7, #80	; 0x50
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40007000 	.word	0x40007000

08001bc8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bce:	463b      	mov	r3, r7
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001bda:	4b21      	ldr	r3, [pc, #132]	; (8001c60 <MX_ADC1_Init+0x98>)
 8001bdc:	4a21      	ldr	r2, [pc, #132]	; (8001c64 <MX_ADC1_Init+0x9c>)
 8001bde:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001be0:	4b1f      	ldr	r3, [pc, #124]	; (8001c60 <MX_ADC1_Init+0x98>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001be6:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <MX_ADC1_Init+0x98>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001bec:	4b1c      	ldr	r3, [pc, #112]	; (8001c60 <MX_ADC1_Init+0x98>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001bf2:	4b1b      	ldr	r3, [pc, #108]	; (8001c60 <MX_ADC1_Init+0x98>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bf8:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <MX_ADC1_Init+0x98>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c00:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <MX_ADC1_Init+0x98>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c06:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <MX_ADC1_Init+0x98>)
 8001c08:	4a17      	ldr	r2, [pc, #92]	; (8001c68 <MX_ADC1_Init+0xa0>)
 8001c0a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c0c:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <MX_ADC1_Init+0x98>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001c12:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <MX_ADC1_Init+0x98>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c18:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <MX_ADC1_Init+0x98>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c20:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <MX_ADC1_Init+0x98>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c26:	480e      	ldr	r0, [pc, #56]	; (8001c60 <MX_ADC1_Init+0x98>)
 8001c28:	f001 f87a 	bl	8002d20 <HAL_ADC_Init>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001c32:	f000 fba3 	bl	800237c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001c36:	2306      	movs	r3, #6
 8001c38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001c3e:	2307      	movs	r3, #7
 8001c40:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c42:	463b      	mov	r3, r7
 8001c44:	4619      	mov	r1, r3
 8001c46:	4806      	ldr	r0, [pc, #24]	; (8001c60 <MX_ADC1_Init+0x98>)
 8001c48:	f001 f8ae 	bl	8002da8 <HAL_ADC_ConfigChannel>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001c52:	f000 fb93 	bl	800237c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c56:	bf00      	nop
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	200009f4 	.word	0x200009f4
 8001c64:	40012000 	.word	0x40012000
 8001c68:	0f000001 	.word	0x0f000001

08001c6c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c70:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <MX_I2C2_Init+0x74>)
 8001c72:	4a1c      	ldr	r2, [pc, #112]	; (8001ce4 <MX_I2C2_Init+0x78>)
 8001c74:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001c76:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <MX_I2C2_Init+0x74>)
 8001c78:	4a1b      	ldr	r2, [pc, #108]	; (8001ce8 <MX_I2C2_Init+0x7c>)
 8001c7a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c7c:	4b18      	ldr	r3, [pc, #96]	; (8001ce0 <MX_I2C2_Init+0x74>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001c82:	4b17      	ldr	r3, [pc, #92]	; (8001ce0 <MX_I2C2_Init+0x74>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c88:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <MX_I2C2_Init+0x74>)
 8001c8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c8e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c90:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <MX_I2C2_Init+0x74>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001c96:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <MX_I2C2_Init+0x74>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c9c:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <MX_I2C2_Init+0x74>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ca2:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <MX_I2C2_Init+0x74>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ca8:	480d      	ldr	r0, [pc, #52]	; (8001ce0 <MX_I2C2_Init+0x74>)
 8001caa:	f001 fdcd 	bl	8003848 <HAL_I2C_Init>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001cb4:	f000 fb62 	bl	800237c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cb8:	2100      	movs	r1, #0
 8001cba:	4809      	ldr	r0, [pc, #36]	; (8001ce0 <MX_I2C2_Init+0x74>)
 8001cbc:	f002 fd83 	bl	80047c6 <HAL_I2CEx_ConfigAnalogFilter>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001cc6:	f000 fb59 	bl	800237c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001cca:	2100      	movs	r1, #0
 8001ccc:	4804      	ldr	r0, [pc, #16]	; (8001ce0 <MX_I2C2_Init+0x74>)
 8001cce:	f002 fdb6 	bl	800483e <HAL_I2CEx_ConfigDigitalFilter>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001cd8:	f000 fb50 	bl	800237c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	200009a0 	.word	0x200009a0
 8001ce4:	40005800 	.word	0x40005800
 8001ce8:	000186a0 	.word	0x000186a0

08001cec <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001cf0:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <MX_I2C3_Init+0x74>)
 8001cf2:	4a1c      	ldr	r2, [pc, #112]	; (8001d64 <MX_I2C3_Init+0x78>)
 8001cf4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001cf6:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <MX_I2C3_Init+0x74>)
 8001cf8:	4a1b      	ldr	r2, [pc, #108]	; (8001d68 <MX_I2C3_Init+0x7c>)
 8001cfa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cfc:	4b18      	ldr	r3, [pc, #96]	; (8001d60 <MX_I2C3_Init+0x74>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001d02:	4b17      	ldr	r3, [pc, #92]	; (8001d60 <MX_I2C3_Init+0x74>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d08:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <MX_I2C3_Init+0x74>)
 8001d0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d0e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d10:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <MX_I2C3_Init+0x74>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001d16:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <MX_I2C3_Init+0x74>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d1c:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <MX_I2C3_Init+0x74>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d22:	4b0f      	ldr	r3, [pc, #60]	; (8001d60 <MX_I2C3_Init+0x74>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001d28:	480d      	ldr	r0, [pc, #52]	; (8001d60 <MX_I2C3_Init+0x74>)
 8001d2a:	f001 fd8d 	bl	8003848 <HAL_I2C_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001d34:	f000 fb22 	bl	800237c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4809      	ldr	r0, [pc, #36]	; (8001d60 <MX_I2C3_Init+0x74>)
 8001d3c:	f002 fd43 	bl	80047c6 <HAL_I2CEx_ConfigAnalogFilter>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001d46:	f000 fb19 	bl	800237c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4804      	ldr	r0, [pc, #16]	; (8001d60 <MX_I2C3_Init+0x74>)
 8001d4e:	f002 fd76 	bl	800483e <HAL_I2CEx_ConfigDigitalFilter>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001d58:	f000 fb10 	bl	800237c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20000628 	.word	0x20000628
 8001d64:	40005c00 	.word	0x40005c00
 8001d68:	000186a0 	.word	0x000186a0

08001d6c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001d70:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <MX_SPI2_Init+0x64>)
 8001d72:	4a18      	ldr	r2, [pc, #96]	; (8001dd4 <MX_SPI2_Init+0x68>)
 8001d74:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d76:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <MX_SPI2_Init+0x64>)
 8001d78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d7c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d7e:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <MX_SPI2_Init+0x64>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d84:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <MX_SPI2_Init+0x64>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d8a:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <MX_SPI2_Init+0x64>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d90:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <MX_SPI2_Init+0x64>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d96:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <MX_SPI2_Init+0x64>)
 8001d98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d9c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001d9e:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <MX_SPI2_Init+0x64>)
 8001da0:	2210      	movs	r2, #16
 8001da2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001da4:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <MX_SPI2_Init+0x64>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001daa:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <MX_SPI2_Init+0x64>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001db0:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <MX_SPI2_Init+0x64>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001db6:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <MX_SPI2_Init+0x64>)
 8001db8:	220a      	movs	r2, #10
 8001dba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001dbc:	4804      	ldr	r0, [pc, #16]	; (8001dd0 <MX_SPI2_Init+0x64>)
 8001dbe:	f004 fb73 	bl	80064a8 <HAL_SPI_Init>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001dc8:	f000 fad8 	bl	800237c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001dcc:	bf00      	nop
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	2000067c 	.word	0x2000067c
 8001dd4:	40003800 	.word	0x40003800

08001dd8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001ddc:	4b17      	ldr	r3, [pc, #92]	; (8001e3c <MX_SPI4_Init+0x64>)
 8001dde:	4a18      	ldr	r2, [pc, #96]	; (8001e40 <MX_SPI4_Init+0x68>)
 8001de0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001de2:	4b16      	ldr	r3, [pc, #88]	; (8001e3c <MX_SPI4_Init+0x64>)
 8001de4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001de8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001dea:	4b14      	ldr	r3, [pc, #80]	; (8001e3c <MX_SPI4_Init+0x64>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001df0:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <MX_SPI4_Init+0x64>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001df6:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <MX_SPI4_Init+0x64>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dfc:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <MX_SPI4_Init+0x64>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001e02:	4b0e      	ldr	r3, [pc, #56]	; (8001e3c <MX_SPI4_Init+0x64>)
 8001e04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e08:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <MX_SPI4_Init+0x64>)
 8001e0c:	2230      	movs	r2, #48	; 0x30
 8001e0e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e10:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <MX_SPI4_Init+0x64>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e16:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <MX_SPI4_Init+0x64>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e1c:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <MX_SPI4_Init+0x64>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001e22:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <MX_SPI4_Init+0x64>)
 8001e24:	220a      	movs	r2, #10
 8001e26:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001e28:	4804      	ldr	r0, [pc, #16]	; (8001e3c <MX_SPI4_Init+0x64>)
 8001e2a:	f004 fb3d 	bl	80064a8 <HAL_SPI_Init>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001e34:	f000 faa2 	bl	800237c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	200005d0 	.word	0x200005d0
 8001e40:	40013400 	.word	0x40013400

08001e44 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001e48:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <MX_SPI5_Init+0x64>)
 8001e4a:	4a18      	ldr	r2, [pc, #96]	; (8001eac <MX_SPI5_Init+0x68>)
 8001e4c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001e4e:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <MX_SPI5_Init+0x64>)
 8001e50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e54:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001e56:	4b14      	ldr	r3, [pc, #80]	; (8001ea8 <MX_SPI5_Init+0x64>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e5c:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <MX_SPI5_Init+0x64>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e62:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <MX_SPI5_Init+0x64>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e68:	4b0f      	ldr	r3, [pc, #60]	; (8001ea8 <MX_SPI5_Init+0x64>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <MX_SPI5_Init+0x64>)
 8001e70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e74:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001e76:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <MX_SPI5_Init+0x64>)
 8001e78:	2238      	movs	r2, #56	; 0x38
 8001e7a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <MX_SPI5_Init+0x64>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e82:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <MX_SPI5_Init+0x64>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e88:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <MX_SPI5_Init+0x64>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001e8e:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <MX_SPI5_Init+0x64>)
 8001e90:	220a      	movs	r2, #10
 8001e92:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001e94:	4804      	ldr	r0, [pc, #16]	; (8001ea8 <MX_SPI5_Init+0x64>)
 8001e96:	f004 fb07 	bl	80064a8 <HAL_SPI_Init>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001ea0:	f000 fa6c 	bl	800237c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	200006d4 	.word	0x200006d4
 8001eac:	40015000 	.word	0x40015000

08001eb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08e      	sub	sp, #56	; 0x38
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	605a      	str	r2, [r3, #4]
 8001ec0:	609a      	str	r2, [r3, #8]
 8001ec2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec4:	f107 0320 	add.w	r3, r7, #32
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]
 8001edc:	615a      	str	r2, [r3, #20]
 8001ede:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ee0:	4b2d      	ldr	r3, [pc, #180]	; (8001f98 <MX_TIM2_Init+0xe8>)
 8001ee2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ee6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50;
 8001ee8:	4b2b      	ldr	r3, [pc, #172]	; (8001f98 <MX_TIM2_Init+0xe8>)
 8001eea:	2232      	movs	r2, #50	; 0x32
 8001eec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eee:	4b2a      	ldr	r3, [pc, #168]	; (8001f98 <MX_TIM2_Init+0xe8>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001ef4:	4b28      	ldr	r3, [pc, #160]	; (8001f98 <MX_TIM2_Init+0xe8>)
 8001ef6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001efa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001efc:	4b26      	ldr	r3, [pc, #152]	; (8001f98 <MX_TIM2_Init+0xe8>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f02:	4b25      	ldr	r3, [pc, #148]	; (8001f98 <MX_TIM2_Init+0xe8>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f08:	4823      	ldr	r0, [pc, #140]	; (8001f98 <MX_TIM2_Init+0xe8>)
 8001f0a:	f004 fdc3 	bl	8006a94 <HAL_TIM_Base_Init>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001f14:	f000 fa32 	bl	800237c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f22:	4619      	mov	r1, r3
 8001f24:	481c      	ldr	r0, [pc, #112]	; (8001f98 <MX_TIM2_Init+0xe8>)
 8001f26:	f005 f95f 	bl	80071e8 <HAL_TIM_ConfigClockSource>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001f30:	f000 fa24 	bl	800237c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f34:	4818      	ldr	r0, [pc, #96]	; (8001f98 <MX_TIM2_Init+0xe8>)
 8001f36:	f004 fdfc 	bl	8006b32 <HAL_TIM_PWM_Init>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001f40:	f000 fa1c 	bl	800237c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f44:	2320      	movs	r3, #32
 8001f46:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f4c:	f107 0320 	add.w	r3, r7, #32
 8001f50:	4619      	mov	r1, r3
 8001f52:	4811      	ldr	r0, [pc, #68]	; (8001f98 <MX_TIM2_Init+0xe8>)
 8001f54:	f005 fd48 	bl	80079e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001f5e:	f000 fa0d 	bl	800237c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f62:	2360      	movs	r3, #96	; 0x60
 8001f64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8001f66:	2364      	movs	r3, #100	; 0x64
 8001f68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f72:	1d3b      	adds	r3, r7, #4
 8001f74:	2208      	movs	r2, #8
 8001f76:	4619      	mov	r1, r3
 8001f78:	4807      	ldr	r0, [pc, #28]	; (8001f98 <MX_TIM2_Init+0xe8>)
 8001f7a:	f005 f873 	bl	8007064 <HAL_TIM_PWM_ConfigChannel>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001f84:	f000 f9fa 	bl	800237c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f88:	4803      	ldr	r0, [pc, #12]	; (8001f98 <MX_TIM2_Init+0xe8>)
 8001f8a:	f000 fbff 	bl	800278c <HAL_TIM_MspPostInit>

}
 8001f8e:	bf00      	nop
 8001f90:	3738      	adds	r7, #56	; 0x38
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000d18 	.word	0x20000d18

08001f9c <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001fa0:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <MX_UART8_Init+0x4c>)
 8001fa2:	4a12      	ldr	r2, [pc, #72]	; (8001fec <MX_UART8_Init+0x50>)
 8001fa4:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 8001fa6:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <MX_UART8_Init+0x4c>)
 8001fa8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001fac:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001fae:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <MX_UART8_Init+0x4c>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <MX_UART8_Init+0x4c>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001fba:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <MX_UART8_Init+0x4c>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001fc0:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <MX_UART8_Init+0x4c>)
 8001fc2:	220c      	movs	r2, #12
 8001fc4:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fc6:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <MX_UART8_Init+0x4c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fcc:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <MX_UART8_Init+0x4c>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001fd2:	4805      	ldr	r0, [pc, #20]	; (8001fe8 <MX_UART8_Init+0x4c>)
 8001fd4:	f005 fd98 	bl	8007b08 <HAL_UART_Init>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8001fde:	f000 f9cd 	bl	800237c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000c8c 	.word	0x20000c8c
 8001fec:	40007c00 	.word	0x40007c00

08001ff0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ff4:	4b11      	ldr	r3, [pc, #68]	; (800203c <MX_USART3_UART_Init+0x4c>)
 8001ff6:	4a12      	ldr	r2, [pc, #72]	; (8002040 <MX_USART3_UART_Init+0x50>)
 8001ff8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001ffa:	4b10      	ldr	r3, [pc, #64]	; (800203c <MX_USART3_UART_Init+0x4c>)
 8001ffc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002000:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002002:	4b0e      	ldr	r3, [pc, #56]	; (800203c <MX_USART3_UART_Init+0x4c>)
 8002004:	2200      	movs	r2, #0
 8002006:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002008:	4b0c      	ldr	r3, [pc, #48]	; (800203c <MX_USART3_UART_Init+0x4c>)
 800200a:	2200      	movs	r2, #0
 800200c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800200e:	4b0b      	ldr	r3, [pc, #44]	; (800203c <MX_USART3_UART_Init+0x4c>)
 8002010:	2200      	movs	r2, #0
 8002012:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002014:	4b09      	ldr	r3, [pc, #36]	; (800203c <MX_USART3_UART_Init+0x4c>)
 8002016:	220c      	movs	r2, #12
 8002018:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800201a:	4b08      	ldr	r3, [pc, #32]	; (800203c <MX_USART3_UART_Init+0x4c>)
 800201c:	2200      	movs	r2, #0
 800201e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002020:	4b06      	ldr	r3, [pc, #24]	; (800203c <MX_USART3_UART_Init+0x4c>)
 8002022:	2200      	movs	r2, #0
 8002024:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002026:	4805      	ldr	r0, [pc, #20]	; (800203c <MX_USART3_UART_Init+0x4c>)
 8002028:	f005 fd6e 	bl	8007b08 <HAL_UART_Init>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002032:	f000 f9a3 	bl	800237c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	2000072c 	.word	0x2000072c
 8002040:	40004800 	.word	0x40004800

08002044 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002048:	4b11      	ldr	r3, [pc, #68]	; (8002090 <MX_USART6_UART_Init+0x4c>)
 800204a:	4a12      	ldr	r2, [pc, #72]	; (8002094 <MX_USART6_UART_Init+0x50>)
 800204c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 800204e:	4b10      	ldr	r3, [pc, #64]	; (8002090 <MX_USART6_UART_Init+0x4c>)
 8002050:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002054:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002056:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <MX_USART6_UART_Init+0x4c>)
 8002058:	2200      	movs	r2, #0
 800205a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800205c:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <MX_USART6_UART_Init+0x4c>)
 800205e:	2200      	movs	r2, #0
 8002060:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002062:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <MX_USART6_UART_Init+0x4c>)
 8002064:	2200      	movs	r2, #0
 8002066:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002068:	4b09      	ldr	r3, [pc, #36]	; (8002090 <MX_USART6_UART_Init+0x4c>)
 800206a:	220c      	movs	r2, #12
 800206c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800206e:	4b08      	ldr	r3, [pc, #32]	; (8002090 <MX_USART6_UART_Init+0x4c>)
 8002070:	2200      	movs	r2, #0
 8002072:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002074:	4b06      	ldr	r3, [pc, #24]	; (8002090 <MX_USART6_UART_Init+0x4c>)
 8002076:	2200      	movs	r2, #0
 8002078:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800207a:	4805      	ldr	r0, [pc, #20]	; (8002090 <MX_USART6_UART_Init+0x4c>)
 800207c:	f005 fd44 	bl	8007b08 <HAL_UART_Init>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002086:	f000 f979 	bl	800237c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000cd0 	.word	0x20000cd0
 8002094:	40011400 	.word	0x40011400

08002098 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08e      	sub	sp, #56	; 0x38
 800209c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]
 80020a8:	609a      	str	r2, [r3, #8]
 80020aa:	60da      	str	r2, [r3, #12]
 80020ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	623b      	str	r3, [r7, #32]
 80020b2:	4b9c      	ldr	r3, [pc, #624]	; (8002324 <MX_GPIO_Init+0x28c>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4a9b      	ldr	r2, [pc, #620]	; (8002324 <MX_GPIO_Init+0x28c>)
 80020b8:	f043 0310 	orr.w	r3, r3, #16
 80020bc:	6313      	str	r3, [r2, #48]	; 0x30
 80020be:	4b99      	ldr	r3, [pc, #612]	; (8002324 <MX_GPIO_Init+0x28c>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f003 0310 	and.w	r3, r3, #16
 80020c6:	623b      	str	r3, [r7, #32]
 80020c8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
 80020ce:	4b95      	ldr	r3, [pc, #596]	; (8002324 <MX_GPIO_Init+0x28c>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	4a94      	ldr	r2, [pc, #592]	; (8002324 <MX_GPIO_Init+0x28c>)
 80020d4:	f043 0304 	orr.w	r3, r3, #4
 80020d8:	6313      	str	r3, [r2, #48]	; 0x30
 80020da:	4b92      	ldr	r3, [pc, #584]	; (8002324 <MX_GPIO_Init+0x28c>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	61fb      	str	r3, [r7, #28]
 80020e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	61bb      	str	r3, [r7, #24]
 80020ea:	4b8e      	ldr	r3, [pc, #568]	; (8002324 <MX_GPIO_Init+0x28c>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	4a8d      	ldr	r2, [pc, #564]	; (8002324 <MX_GPIO_Init+0x28c>)
 80020f0:	f043 0320 	orr.w	r3, r3, #32
 80020f4:	6313      	str	r3, [r2, #48]	; 0x30
 80020f6:	4b8b      	ldr	r3, [pc, #556]	; (8002324 <MX_GPIO_Init+0x28c>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	f003 0320 	and.w	r3, r3, #32
 80020fe:	61bb      	str	r3, [r7, #24]
 8002100:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	4b87      	ldr	r3, [pc, #540]	; (8002324 <MX_GPIO_Init+0x28c>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	4a86      	ldr	r2, [pc, #536]	; (8002324 <MX_GPIO_Init+0x28c>)
 800210c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002110:	6313      	str	r3, [r2, #48]	; 0x30
 8002112:	4b84      	ldr	r3, [pc, #528]	; (8002324 <MX_GPIO_Init+0x28c>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	613b      	str	r3, [r7, #16]
 8002122:	4b80      	ldr	r3, [pc, #512]	; (8002324 <MX_GPIO_Init+0x28c>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a7f      	ldr	r2, [pc, #508]	; (8002324 <MX_GPIO_Init+0x28c>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b7d      	ldr	r3, [pc, #500]	; (8002324 <MX_GPIO_Init+0x28c>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	4b79      	ldr	r3, [pc, #484]	; (8002324 <MX_GPIO_Init+0x28c>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	4a78      	ldr	r2, [pc, #480]	; (8002324 <MX_GPIO_Init+0x28c>)
 8002144:	f043 0302 	orr.w	r3, r3, #2
 8002148:	6313      	str	r3, [r2, #48]	; 0x30
 800214a:	4b76      	ldr	r3, [pc, #472]	; (8002324 <MX_GPIO_Init+0x28c>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	4b72      	ldr	r3, [pc, #456]	; (8002324 <MX_GPIO_Init+0x28c>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	4a71      	ldr	r2, [pc, #452]	; (8002324 <MX_GPIO_Init+0x28c>)
 8002160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002164:	6313      	str	r3, [r2, #48]	; 0x30
 8002166:	4b6f      	ldr	r3, [pc, #444]	; (8002324 <MX_GPIO_Init+0x28c>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800216e:	60bb      	str	r3, [r7, #8]
 8002170:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	607b      	str	r3, [r7, #4]
 8002176:	4b6b      	ldr	r3, [pc, #428]	; (8002324 <MX_GPIO_Init+0x28c>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	4a6a      	ldr	r2, [pc, #424]	; (8002324 <MX_GPIO_Init+0x28c>)
 800217c:	f043 0308 	orr.w	r3, r3, #8
 8002180:	6313      	str	r3, [r2, #48]	; 0x30
 8002182:	4b68      	ldr	r3, [pc, #416]	; (8002324 <MX_GPIO_Init+0x28c>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	607b      	str	r3, [r7, #4]
 800218c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PM_12V_EN_Pin|Vent_Valve_EN_Pin|Payload_EN_Pin|TH_CS_1_Pin
 800218e:	2200      	movs	r2, #0
 8002190:	f640 6184 	movw	r1, #3716	; 0xe84
 8002194:	4864      	ldr	r0, [pc, #400]	; (8002328 <MX_GPIO_Init+0x290>)
 8002196:	f001 fb0b 	bl	80037b0 <HAL_GPIO_WritePin>
                          |TH_CS_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|Prop_Gate_2_Pin|Prop_Gate_1_Pin, GPIO_PIN_RESET);
 800219a:	2200      	movs	r2, #0
 800219c:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 80021a0:	4862      	ldr	r0, [pc, #392]	; (800232c <MX_GPIO_Init+0x294>)
 80021a2:	f001 fb05 	bl	80037b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80021a6:	2200      	movs	r2, #0
 80021a8:	210e      	movs	r1, #14
 80021aa:	4861      	ldr	r0, [pc, #388]	; (8002330 <MX_GPIO_Init+0x298>)
 80021ac:	f001 fb00 	bl	80037b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Prop_Pyro_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|VR_CTRL_PWR_Pin
 80021b0:	2200      	movs	r2, #0
 80021b2:	f645 2126 	movw	r1, #23078	; 0x5a26
 80021b6:	485f      	ldr	r0, [pc, #380]	; (8002334 <MX_GPIO_Init+0x29c>)
 80021b8:	f001 fafa 	bl	80037b0 <HAL_GPIO_WritePin>
                          |Rcov_Gate_Main_Pin|Rcov_Gate_Drogue_Pin|Rcov_Arm_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX_NSS_GPIO_Port, SX_NSS_Pin, GPIO_PIN_RESET);
 80021bc:	2200      	movs	r2, #0
 80021be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021c2:	485d      	ldr	r0, [pc, #372]	; (8002338 <MX_GPIO_Init+0x2a0>)
 80021c4:	f001 faf4 	bl	80037b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SX_FILTER_Pin|FLASH_IO3_Pin|FLASH_WP_Pin|CS_FLASH_Pin
 80021c8:	2200      	movs	r2, #0
 80021ca:	f248 01f0 	movw	r1, #33008	; 0x80f0
 80021ce:	485b      	ldr	r0, [pc, #364]	; (800233c <MX_GPIO_Init+0x2a4>)
 80021d0:	f001 faee 	bl	80037b0 <HAL_GPIO_WritePin>
                          |VR_CTRL_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PM_12V_EN_Pin Vent_Valve_EN_Pin Payload_EN_Pin TH_CS_1_Pin
                           TH_CS_2_Pin */
  GPIO_InitStruct.Pin = PM_12V_EN_Pin|Vent_Valve_EN_Pin|Payload_EN_Pin|TH_CS_1_Pin
 80021d4:	f640 6384 	movw	r3, #3716	; 0xe84
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
                          |TH_CS_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021da:	2301      	movs	r3, #1
 80021dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e2:	2300      	movs	r3, #0
 80021e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ea:	4619      	mov	r1, r3
 80021ec:	484e      	ldr	r0, [pc, #312]	; (8002328 <MX_GPIO_Init+0x290>)
 80021ee:	f001 f91b 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80021f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f8:	2301      	movs	r3, #1
 80021fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021fc:	2301      	movs	r3, #1
 80021fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002200:	2300      	movs	r3, #0
 8002202:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8002204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002208:	4619      	mov	r1, r3
 800220a:	4848      	ldr	r0, [pc, #288]	; (800232c <MX_GPIO_Init+0x294>)
 800220c:	f001 f90c 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8002210:	2301      	movs	r3, #1
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002214:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002218:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221a:	2300      	movs	r3, #0
 800221c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800221e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002222:	4619      	mov	r1, r3
 8002224:	4842      	ldr	r0, [pc, #264]	; (8002330 <MX_GPIO_Init+0x298>)
 8002226:	f001 f8ff 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 800222a:	230e      	movs	r3, #14
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800222e:	2301      	movs	r3, #1
 8002230:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002236:	2300      	movs	r3, #0
 8002238:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800223a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800223e:	4619      	mov	r1, r3
 8002240:	483b      	ldr	r0, [pc, #236]	; (8002330 <MX_GPIO_Init+0x298>)
 8002242:	f001 f8f1 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pin : Vent_Valve_FB_Pin */
  GPIO_InitStruct.Pin = Vent_Valve_FB_Pin;
 8002246:	2302      	movs	r3, #2
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800224a:	2300      	movs	r3, #0
 800224c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Vent_Valve_FB_GPIO_Port, &GPIO_InitStruct);
 8002252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002256:	4619      	mov	r1, r3
 8002258:	4837      	ldr	r0, [pc, #220]	; (8002338 <MX_GPIO_Init+0x2a0>)
 800225a:	f001 f8e5 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pin : Prop_Cont_2_Pin */
  GPIO_InitStruct.Pin = Prop_Cont_2_Pin;
 800225e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002262:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002264:	2300      	movs	r3, #0
 8002266:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Prop_Cont_2_GPIO_Port, &GPIO_InitStruct);
 800226c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002270:	4619      	mov	r1, r3
 8002272:	482e      	ldr	r0, [pc, #184]	; (800232c <MX_GPIO_Init+0x294>)
 8002274:	f001 f8d8 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Gate_2_Pin Prop_Gate_1_Pin */
  GPIO_InitStruct.Pin = Prop_Gate_2_Pin|Prop_Gate_1_Pin;
 8002278:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800227e:	2301      	movs	r3, #1
 8002280:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002286:	2300      	movs	r3, #0
 8002288:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800228a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800228e:	4619      	mov	r1, r3
 8002290:	4826      	ldr	r0, [pc, #152]	; (800232c <MX_GPIO_Init+0x294>)
 8002292:	f001 f8c9 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Cont_1_Pin SX_BUSY_Pin SX_DIO_Pin Rcov_Cont_Main_Pin
                           Rcov_Cont_Drogue_Pin */
  GPIO_InitStruct.Pin = Prop_Cont_1_Pin|SX_BUSY_Pin|SX_DIO_Pin|Rcov_Cont_Main_Pin
 8002296:	f242 4319 	movw	r3, #9241	; 0x2419
 800229a:	627b      	str	r3, [r7, #36]	; 0x24
                          |Rcov_Cont_Drogue_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800229c:	2300      	movs	r3, #0
 800229e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a8:	4619      	mov	r1, r3
 80022aa:	4822      	ldr	r0, [pc, #136]	; (8002334 <MX_GPIO_Init+0x29c>)
 80022ac:	f001 f8bc 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Pyro_Arming_Pin SX_RST_Pin SX_RF_SW_Pin VR_CTRL_PWR_Pin
                           Rcov_Gate_Main_Pin Rcov_Gate_Drogue_Pin Rcov_Arm_Pin */
  GPIO_InitStruct.Pin = Prop_Pyro_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|VR_CTRL_PWR_Pin
 80022b0:	f645 2326 	movw	r3, #23078	; 0x5a26
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
                          |Rcov_Gate_Main_Pin|Rcov_Gate_Drogue_Pin|Rcov_Arm_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b6:	2301      	movs	r3, #1
 80022b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022be:	2300      	movs	r3, #0
 80022c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c6:	4619      	mov	r1, r3
 80022c8:	481a      	ldr	r0, [pc, #104]	; (8002334 <MX_GPIO_Init+0x29c>)
 80022ca:	f001 f8ad 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_NSS_Pin */
  GPIO_InitStruct.Pin = SX_NSS_Pin;
 80022ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d4:	2301      	movs	r3, #1
 80022d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022d8:	2301      	movs	r3, #1
 80022da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022dc:	2300      	movs	r3, #0
 80022de:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SX_NSS_GPIO_Port, &GPIO_InitStruct);
 80022e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e4:	4619      	mov	r1, r3
 80022e6:	4814      	ldr	r0, [pc, #80]	; (8002338 <MX_GPIO_Init+0x2a0>)
 80022e8:	f001 f89e 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pins : SX_FILTER_Pin FLASH_IO3_Pin FLASH_WP_Pin CS_FLASH_Pin
                           VR_CTRL_REC_Pin */
  GPIO_InitStruct.Pin = SX_FILTER_Pin|FLASH_IO3_Pin|FLASH_WP_Pin|CS_FLASH_Pin
 80022ec:	f248 03f0 	movw	r3, #33008	; 0x80f0
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
                          |VR_CTRL_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f2:	2301      	movs	r3, #1
 80022f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fa:	2300      	movs	r3, #0
 80022fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002302:	4619      	mov	r1, r3
 8002304:	480d      	ldr	r0, [pc, #52]	; (800233c <MX_GPIO_Init+0x2a4>)
 8002306:	f001 f88f 	bl	8003428 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800230a:	2200      	movs	r2, #0
 800230c:	2100      	movs	r1, #0
 800230e:	2006      	movs	r0, #6
 8002310:	f001 f853 	bl	80033ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002314:	2006      	movs	r0, #6
 8002316:	f001 f86c 	bl	80033f2 <HAL_NVIC_EnableIRQ>

}
 800231a:	bf00      	nop
 800231c:	3738      	adds	r7, #56	; 0x38
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40023800 	.word	0x40023800
 8002328:	40021000 	.word	0x40021000
 800232c:	40021400 	.word	0x40021400
 8002330:	40020800 	.word	0x40020800
 8002334:	40021800 	.word	0x40021800
 8002338:	40020400 	.word	0x40020400
 800233c:	40020c00 	.word	0x40020c00

08002340 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Button_Pin)
 800234a:	88fb      	ldrh	r3, [r7, #6]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d102      	bne.n	8002356 <HAL_GPIO_EXTI_Callback+0x16>
	{
		start_ejection = 1;
 8002350:	4b04      	ldr	r3, [pc, #16]	; (8002364 <HAL_GPIO_EXTI_Callback+0x24>)
 8002352:	2201      	movs	r2, #1
 8002354:	701a      	strb	r2, [r3, #0]
	}
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	2000038c 	.word	0x2000038c

08002368 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
//		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
//		HAL_GPIO_TogglePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin);
		timer_actuated_vent_valve = 1;
	}
#endif
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
//  __disable_irq();
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET); // error occurred, fatal
 8002380:	2201      	movs	r2, #1
 8002382:	2108      	movs	r1, #8
 8002384:	480b      	ldr	r0, [pc, #44]	; (80023b4 <Error_Handler+0x38>)
 8002386:	f001 fa13 	bl	80037b0 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800238a:	2108      	movs	r1, #8
 800238c:	480a      	ldr	r0, [pc, #40]	; (80023b8 <Error_Handler+0x3c>)
 800238e:	f004 fc29 	bl	8006be4 <HAL_TIM_PWM_Start>
  HAL_Delay(1000);
 8002392:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002396:	f000 fc9f 	bl	8002cd8 <HAL_Delay>
  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 800239a:	2108      	movs	r1, #8
 800239c:	4806      	ldr	r0, [pc, #24]	; (80023b8 <Error_Handler+0x3c>)
 800239e:	f004 fce9 	bl	8006d74 <HAL_TIM_PWM_Stop>
  while (1)
  {
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); // error occurred, fatal
 80023a2:	2108      	movs	r1, #8
 80023a4:	4803      	ldr	r0, [pc, #12]	; (80023b4 <Error_Handler+0x38>)
 80023a6:	f001 fa1c 	bl	80037e2 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80023aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023ae:	f000 fc93 	bl	8002cd8 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); // error occurred, fatal
 80023b2:	e7f6      	b.n	80023a2 <Error_Handler+0x26>
 80023b4:	40020800 	.word	0x40020800
 80023b8:	20000d18 	.word	0x20000d18

080023bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	607b      	str	r3, [r7, #4]
 80023c6:	4b10      	ldr	r3, [pc, #64]	; (8002408 <HAL_MspInit+0x4c>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	4a0f      	ldr	r2, [pc, #60]	; (8002408 <HAL_MspInit+0x4c>)
 80023cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023d0:	6453      	str	r3, [r2, #68]	; 0x44
 80023d2:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <HAL_MspInit+0x4c>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023da:	607b      	str	r3, [r7, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	603b      	str	r3, [r7, #0]
 80023e2:	4b09      	ldr	r3, [pc, #36]	; (8002408 <HAL_MspInit+0x4c>)
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	4a08      	ldr	r2, [pc, #32]	; (8002408 <HAL_MspInit+0x4c>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ec:	6413      	str	r3, [r2, #64]	; 0x40
 80023ee:	4b06      	ldr	r3, [pc, #24]	; (8002408 <HAL_MspInit+0x4c>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	603b      	str	r3, [r7, #0]
 80023f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40023800 	.word	0x40023800

0800240c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08a      	sub	sp, #40	; 0x28
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002414:	f107 0314 	add.w	r3, r7, #20
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a17      	ldr	r2, [pc, #92]	; (8002488 <HAL_ADC_MspInit+0x7c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d127      	bne.n	800247e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	613b      	str	r3, [r7, #16]
 8002432:	4b16      	ldr	r3, [pc, #88]	; (800248c <HAL_ADC_MspInit+0x80>)
 8002434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002436:	4a15      	ldr	r2, [pc, #84]	; (800248c <HAL_ADC_MspInit+0x80>)
 8002438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800243c:	6453      	str	r3, [r2, #68]	; 0x44
 800243e:	4b13      	ldr	r3, [pc, #76]	; (800248c <HAL_ADC_MspInit+0x80>)
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002446:	613b      	str	r3, [r7, #16]
 8002448:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	4b0f      	ldr	r3, [pc, #60]	; (800248c <HAL_ADC_MspInit+0x80>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	4a0e      	ldr	r2, [pc, #56]	; (800248c <HAL_ADC_MspInit+0x80>)
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	6313      	str	r3, [r2, #48]	; 0x30
 800245a:	4b0c      	ldr	r3, [pc, #48]	; (800248c <HAL_ADC_MspInit+0x80>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002466:	2340      	movs	r3, #64	; 0x40
 8002468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800246a:	2303      	movs	r3, #3
 800246c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002472:	f107 0314 	add.w	r3, r7, #20
 8002476:	4619      	mov	r1, r3
 8002478:	4805      	ldr	r0, [pc, #20]	; (8002490 <HAL_ADC_MspInit+0x84>)
 800247a:	f000 ffd5 	bl	8003428 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800247e:	bf00      	nop
 8002480:	3728      	adds	r7, #40	; 0x28
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40012000 	.word	0x40012000
 800248c:	40023800 	.word	0x40023800
 8002490:	40020000 	.word	0x40020000

08002494 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08c      	sub	sp, #48	; 0x30
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800249c:	f107 031c 	add.w	r3, r7, #28
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	605a      	str	r2, [r3, #4]
 80024a6:	609a      	str	r2, [r3, #8]
 80024a8:	60da      	str	r2, [r3, #12]
 80024aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a42      	ldr	r2, [pc, #264]	; (80025bc <HAL_I2C_MspInit+0x128>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d12d      	bne.n	8002512 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	61bb      	str	r3, [r7, #24]
 80024ba:	4b41      	ldr	r3, [pc, #260]	; (80025c0 <HAL_I2C_MspInit+0x12c>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	4a40      	ldr	r2, [pc, #256]	; (80025c0 <HAL_I2C_MspInit+0x12c>)
 80024c0:	f043 0302 	orr.w	r3, r3, #2
 80024c4:	6313      	str	r3, [r2, #48]	; 0x30
 80024c6:	4b3e      	ldr	r3, [pc, #248]	; (80025c0 <HAL_I2C_MspInit+0x12c>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	61bb      	str	r3, [r7, #24]
 80024d0:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80024d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80024d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024d8:	2312      	movs	r3, #18
 80024da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024dc:	2300      	movs	r3, #0
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e0:	2303      	movs	r3, #3
 80024e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80024e4:	2304      	movs	r3, #4
 80024e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e8:	f107 031c 	add.w	r3, r7, #28
 80024ec:	4619      	mov	r1, r3
 80024ee:	4835      	ldr	r0, [pc, #212]	; (80025c4 <HAL_I2C_MspInit+0x130>)
 80024f0:	f000 ff9a 	bl	8003428 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	4b31      	ldr	r3, [pc, #196]	; (80025c0 <HAL_I2C_MspInit+0x12c>)
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	4a30      	ldr	r2, [pc, #192]	; (80025c0 <HAL_I2C_MspInit+0x12c>)
 80024fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002502:	6413      	str	r3, [r2, #64]	; 0x40
 8002504:	4b2e      	ldr	r3, [pc, #184]	; (80025c0 <HAL_I2C_MspInit+0x12c>)
 8002506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002508:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002510:	e050      	b.n	80025b4 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a2c      	ldr	r2, [pc, #176]	; (80025c8 <HAL_I2C_MspInit+0x134>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d14b      	bne.n	80025b4 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800251c:	2300      	movs	r3, #0
 800251e:	613b      	str	r3, [r7, #16]
 8002520:	4b27      	ldr	r3, [pc, #156]	; (80025c0 <HAL_I2C_MspInit+0x12c>)
 8002522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002524:	4a26      	ldr	r2, [pc, #152]	; (80025c0 <HAL_I2C_MspInit+0x12c>)
 8002526:	f043 0304 	orr.w	r3, r3, #4
 800252a:	6313      	str	r3, [r2, #48]	; 0x30
 800252c:	4b24      	ldr	r3, [pc, #144]	; (80025c0 <HAL_I2C_MspInit+0x12c>)
 800252e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002538:	2300      	movs	r3, #0
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	4b20      	ldr	r3, [pc, #128]	; (80025c0 <HAL_I2C_MspInit+0x12c>)
 800253e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002540:	4a1f      	ldr	r2, [pc, #124]	; (80025c0 <HAL_I2C_MspInit+0x12c>)
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	6313      	str	r3, [r2, #48]	; 0x30
 8002548:	4b1d      	ldr	r3, [pc, #116]	; (80025c0 <HAL_I2C_MspInit+0x12c>)
 800254a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002554:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800255a:	2312      	movs	r3, #18
 800255c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002562:	2303      	movs	r3, #3
 8002564:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002566:	2304      	movs	r3, #4
 8002568:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800256a:	f107 031c 	add.w	r3, r7, #28
 800256e:	4619      	mov	r1, r3
 8002570:	4816      	ldr	r0, [pc, #88]	; (80025cc <HAL_I2C_MspInit+0x138>)
 8002572:	f000 ff59 	bl	8003428 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002576:	f44f 7380 	mov.w	r3, #256	; 0x100
 800257a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800257c:	2312      	movs	r3, #18
 800257e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002580:	2300      	movs	r3, #0
 8002582:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002584:	2303      	movs	r3, #3
 8002586:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002588:	2304      	movs	r3, #4
 800258a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258c:	f107 031c 	add.w	r3, r7, #28
 8002590:	4619      	mov	r1, r3
 8002592:	480f      	ldr	r0, [pc, #60]	; (80025d0 <HAL_I2C_MspInit+0x13c>)
 8002594:	f000 ff48 	bl	8003428 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002598:	2300      	movs	r3, #0
 800259a:	60bb      	str	r3, [r7, #8]
 800259c:	4b08      	ldr	r3, [pc, #32]	; (80025c0 <HAL_I2C_MspInit+0x12c>)
 800259e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a0:	4a07      	ldr	r2, [pc, #28]	; (80025c0 <HAL_I2C_MspInit+0x12c>)
 80025a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025a6:	6413      	str	r3, [r2, #64]	; 0x40
 80025a8:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <HAL_I2C_MspInit+0x12c>)
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	68bb      	ldr	r3, [r7, #8]
}
 80025b4:	bf00      	nop
 80025b6:	3730      	adds	r7, #48	; 0x30
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40005800 	.word	0x40005800
 80025c0:	40023800 	.word	0x40023800
 80025c4:	40020400 	.word	0x40020400
 80025c8:	40005c00 	.word	0x40005c00
 80025cc:	40020800 	.word	0x40020800
 80025d0:	40020000 	.word	0x40020000

080025d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08e      	sub	sp, #56	; 0x38
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	609a      	str	r2, [r3, #8]
 80025e8:	60da      	str	r2, [r3, #12]
 80025ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a4c      	ldr	r2, [pc, #304]	; (8002724 <HAL_SPI_MspInit+0x150>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d12d      	bne.n	8002652 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	623b      	str	r3, [r7, #32]
 80025fa:	4b4b      	ldr	r3, [pc, #300]	; (8002728 <HAL_SPI_MspInit+0x154>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	4a4a      	ldr	r2, [pc, #296]	; (8002728 <HAL_SPI_MspInit+0x154>)
 8002600:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002604:	6413      	str	r3, [r2, #64]	; 0x40
 8002606:	4b48      	ldr	r3, [pc, #288]	; (8002728 <HAL_SPI_MspInit+0x154>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800260e:	623b      	str	r3, [r7, #32]
 8002610:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	61fb      	str	r3, [r7, #28]
 8002616:	4b44      	ldr	r3, [pc, #272]	; (8002728 <HAL_SPI_MspInit+0x154>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	4a43      	ldr	r2, [pc, #268]	; (8002728 <HAL_SPI_MspInit+0x154>)
 800261c:	f043 0302 	orr.w	r3, r3, #2
 8002620:	6313      	str	r3, [r2, #48]	; 0x30
 8002622:	4b41      	ldr	r3, [pc, #260]	; (8002728 <HAL_SPI_MspInit+0x154>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	61fb      	str	r3, [r7, #28]
 800262c:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800262e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002632:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002634:	2302      	movs	r3, #2
 8002636:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002638:	2300      	movs	r3, #0
 800263a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800263c:	2303      	movs	r3, #3
 800263e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002640:	2305      	movs	r3, #5
 8002642:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002648:	4619      	mov	r1, r3
 800264a:	4838      	ldr	r0, [pc, #224]	; (800272c <HAL_SPI_MspInit+0x158>)
 800264c:	f000 feec 	bl	8003428 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002650:	e064      	b.n	800271c <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI4)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a36      	ldr	r2, [pc, #216]	; (8002730 <HAL_SPI_MspInit+0x15c>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d12d      	bne.n	80026b8 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800265c:	2300      	movs	r3, #0
 800265e:	61bb      	str	r3, [r7, #24]
 8002660:	4b31      	ldr	r3, [pc, #196]	; (8002728 <HAL_SPI_MspInit+0x154>)
 8002662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002664:	4a30      	ldr	r2, [pc, #192]	; (8002728 <HAL_SPI_MspInit+0x154>)
 8002666:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800266a:	6453      	str	r3, [r2, #68]	; 0x44
 800266c:	4b2e      	ldr	r3, [pc, #184]	; (8002728 <HAL_SPI_MspInit+0x154>)
 800266e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002670:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002674:	61bb      	str	r3, [r7, #24]
 8002676:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]
 800267c:	4b2a      	ldr	r3, [pc, #168]	; (8002728 <HAL_SPI_MspInit+0x154>)
 800267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002680:	4a29      	ldr	r2, [pc, #164]	; (8002728 <HAL_SPI_MspInit+0x154>)
 8002682:	f043 0310 	orr.w	r3, r3, #16
 8002686:	6313      	str	r3, [r2, #48]	; 0x30
 8002688:	4b27      	ldr	r3, [pc, #156]	; (8002728 <HAL_SPI_MspInit+0x154>)
 800268a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268c:	f003 0310 	and.w	r3, r3, #16
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002694:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269a:	2302      	movs	r3, #2
 800269c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a2:	2303      	movs	r3, #3
 80026a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80026a6:	2305      	movs	r3, #5
 80026a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ae:	4619      	mov	r1, r3
 80026b0:	4820      	ldr	r0, [pc, #128]	; (8002734 <HAL_SPI_MspInit+0x160>)
 80026b2:	f000 feb9 	bl	8003428 <HAL_GPIO_Init>
}
 80026b6:	e031      	b.n	800271c <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI5)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a1e      	ldr	r2, [pc, #120]	; (8002738 <HAL_SPI_MspInit+0x164>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d12c      	bne.n	800271c <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	4b18      	ldr	r3, [pc, #96]	; (8002728 <HAL_SPI_MspInit+0x154>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	4a17      	ldr	r2, [pc, #92]	; (8002728 <HAL_SPI_MspInit+0x154>)
 80026cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026d0:	6453      	str	r3, [r2, #68]	; 0x44
 80026d2:	4b15      	ldr	r3, [pc, #84]	; (8002728 <HAL_SPI_MspInit+0x154>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026da:	613b      	str	r3, [r7, #16]
 80026dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	4b11      	ldr	r3, [pc, #68]	; (8002728 <HAL_SPI_MspInit+0x154>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	4a10      	ldr	r2, [pc, #64]	; (8002728 <HAL_SPI_MspInit+0x154>)
 80026e8:	f043 0320 	orr.w	r3, r3, #32
 80026ec:	6313      	str	r3, [r2, #48]	; 0x30
 80026ee:	4b0e      	ldr	r3, [pc, #56]	; (8002728 <HAL_SPI_MspInit+0x154>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	f003 0320 	and.w	r3, r3, #32
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80026fa:	f44f 7360 	mov.w	r3, #896	; 0x380
 80026fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002700:	2302      	movs	r3, #2
 8002702:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002704:	2301      	movs	r3, #1
 8002706:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002708:	2303      	movs	r3, #3
 800270a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800270c:	2305      	movs	r3, #5
 800270e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002714:	4619      	mov	r1, r3
 8002716:	4809      	ldr	r0, [pc, #36]	; (800273c <HAL_SPI_MspInit+0x168>)
 8002718:	f000 fe86 	bl	8003428 <HAL_GPIO_Init>
}
 800271c:	bf00      	nop
 800271e:	3738      	adds	r7, #56	; 0x38
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40003800 	.word	0x40003800
 8002728:	40023800 	.word	0x40023800
 800272c:	40020400 	.word	0x40020400
 8002730:	40013400 	.word	0x40013400
 8002734:	40021000 	.word	0x40021000
 8002738:	40015000 	.word	0x40015000
 800273c:	40021400 	.word	0x40021400

08002740 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002750:	d115      	bne.n	800277e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <HAL_TIM_Base_MspInit+0x48>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	4a0b      	ldr	r2, [pc, #44]	; (8002788 <HAL_TIM_Base_MspInit+0x48>)
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	6413      	str	r3, [r2, #64]	; 0x40
 8002762:	4b09      	ldr	r3, [pc, #36]	; (8002788 <HAL_TIM_Base_MspInit+0x48>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800276e:	2200      	movs	r2, #0
 8002770:	2100      	movs	r1, #0
 8002772:	201c      	movs	r0, #28
 8002774:	f000 fe21 	bl	80033ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002778:	201c      	movs	r0, #28
 800277a:	f000 fe3a 	bl	80033f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40023800 	.word	0x40023800

0800278c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b088      	sub	sp, #32
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002794:	f107 030c 	add.w	r3, r7, #12
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	605a      	str	r2, [r3, #4]
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	60da      	str	r2, [r3, #12]
 80027a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ac:	d11d      	bne.n	80027ea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	4b10      	ldr	r3, [pc, #64]	; (80027f4 <HAL_TIM_MspPostInit+0x68>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	4a0f      	ldr	r2, [pc, #60]	; (80027f4 <HAL_TIM_MspPostInit+0x68>)
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	6313      	str	r3, [r2, #48]	; 0x30
 80027be:	4b0d      	ldr	r3, [pc, #52]	; (80027f4 <HAL_TIM_MspPostInit+0x68>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80027ca:	2304      	movs	r3, #4
 80027cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ce:	2302      	movs	r3, #2
 80027d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027da:	2301      	movs	r3, #1
 80027dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027de:	f107 030c 	add.w	r3, r7, #12
 80027e2:	4619      	mov	r1, r3
 80027e4:	4804      	ldr	r0, [pc, #16]	; (80027f8 <HAL_TIM_MspPostInit+0x6c>)
 80027e6:	f000 fe1f 	bl	8003428 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80027ea:	bf00      	nop
 80027ec:	3720      	adds	r7, #32
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40023800 	.word	0x40023800
 80027f8:	40020000 	.word	0x40020000

080027fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08e      	sub	sp, #56	; 0x38
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	60da      	str	r2, [r3, #12]
 8002812:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a4b      	ldr	r2, [pc, #300]	; (8002948 <HAL_UART_MspInit+0x14c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d12c      	bne.n	8002878 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	623b      	str	r3, [r7, #32]
 8002822:	4b4a      	ldr	r3, [pc, #296]	; (800294c <HAL_UART_MspInit+0x150>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	4a49      	ldr	r2, [pc, #292]	; (800294c <HAL_UART_MspInit+0x150>)
 8002828:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800282c:	6413      	str	r3, [r2, #64]	; 0x40
 800282e:	4b47      	ldr	r3, [pc, #284]	; (800294c <HAL_UART_MspInit+0x150>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002836:	623b      	str	r3, [r7, #32]
 8002838:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	61fb      	str	r3, [r7, #28]
 800283e:	4b43      	ldr	r3, [pc, #268]	; (800294c <HAL_UART_MspInit+0x150>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	4a42      	ldr	r2, [pc, #264]	; (800294c <HAL_UART_MspInit+0x150>)
 8002844:	f043 0310 	orr.w	r3, r3, #16
 8002848:	6313      	str	r3, [r2, #48]	; 0x30
 800284a:	4b40      	ldr	r3, [pc, #256]	; (800294c <HAL_UART_MspInit+0x150>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	f003 0310 	and.w	r3, r3, #16
 8002852:	61fb      	str	r3, [r7, #28]
 8002854:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002856:	2303      	movs	r3, #3
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285a:	2302      	movs	r3, #2
 800285c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285e:	2300      	movs	r3, #0
 8002860:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002862:	2303      	movs	r3, #3
 8002864:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002866:	2308      	movs	r3, #8
 8002868:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800286a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800286e:	4619      	mov	r1, r3
 8002870:	4837      	ldr	r0, [pc, #220]	; (8002950 <HAL_UART_MspInit+0x154>)
 8002872:	f000 fdd9 	bl	8003428 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002876:	e063      	b.n	8002940 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a35      	ldr	r2, [pc, #212]	; (8002954 <HAL_UART_MspInit+0x158>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d12d      	bne.n	80028de <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	61bb      	str	r3, [r7, #24]
 8002886:	4b31      	ldr	r3, [pc, #196]	; (800294c <HAL_UART_MspInit+0x150>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	4a30      	ldr	r2, [pc, #192]	; (800294c <HAL_UART_MspInit+0x150>)
 800288c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002890:	6413      	str	r3, [r2, #64]	; 0x40
 8002892:	4b2e      	ldr	r3, [pc, #184]	; (800294c <HAL_UART_MspInit+0x150>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800289a:	61bb      	str	r3, [r7, #24]
 800289c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	4b2a      	ldr	r3, [pc, #168]	; (800294c <HAL_UART_MspInit+0x150>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	4a29      	ldr	r2, [pc, #164]	; (800294c <HAL_UART_MspInit+0x150>)
 80028a8:	f043 0308 	orr.w	r3, r3, #8
 80028ac:	6313      	str	r3, [r2, #48]	; 0x30
 80028ae:	4b27      	ldr	r3, [pc, #156]	; (800294c <HAL_UART_MspInit+0x150>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80028ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c0:	2302      	movs	r3, #2
 80028c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c8:	2303      	movs	r3, #3
 80028ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028cc:	2307      	movs	r3, #7
 80028ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028d4:	4619      	mov	r1, r3
 80028d6:	4820      	ldr	r0, [pc, #128]	; (8002958 <HAL_UART_MspInit+0x15c>)
 80028d8:	f000 fda6 	bl	8003428 <HAL_GPIO_Init>
}
 80028dc:	e030      	b.n	8002940 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a1e      	ldr	r2, [pc, #120]	; (800295c <HAL_UART_MspInit+0x160>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d12b      	bne.n	8002940 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 80028e8:	2300      	movs	r3, #0
 80028ea:	613b      	str	r3, [r7, #16]
 80028ec:	4b17      	ldr	r3, [pc, #92]	; (800294c <HAL_UART_MspInit+0x150>)
 80028ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f0:	4a16      	ldr	r2, [pc, #88]	; (800294c <HAL_UART_MspInit+0x150>)
 80028f2:	f043 0320 	orr.w	r3, r3, #32
 80028f6:	6453      	str	r3, [r2, #68]	; 0x44
 80028f8:	4b14      	ldr	r3, [pc, #80]	; (800294c <HAL_UART_MspInit+0x150>)
 80028fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fc:	f003 0320 	and.w	r3, r3, #32
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002904:	2300      	movs	r3, #0
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	4b10      	ldr	r3, [pc, #64]	; (800294c <HAL_UART_MspInit+0x150>)
 800290a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290c:	4a0f      	ldr	r2, [pc, #60]	; (800294c <HAL_UART_MspInit+0x150>)
 800290e:	f043 0304 	orr.w	r3, r3, #4
 8002912:	6313      	str	r3, [r2, #48]	; 0x30
 8002914:	4b0d      	ldr	r3, [pc, #52]	; (800294c <HAL_UART_MspInit+0x150>)
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002920:	23c0      	movs	r3, #192	; 0xc0
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002924:	2302      	movs	r3, #2
 8002926:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002928:	2300      	movs	r3, #0
 800292a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292c:	2303      	movs	r3, #3
 800292e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002930:	2308      	movs	r3, #8
 8002932:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002938:	4619      	mov	r1, r3
 800293a:	4809      	ldr	r0, [pc, #36]	; (8002960 <HAL_UART_MspInit+0x164>)
 800293c:	f000 fd74 	bl	8003428 <HAL_GPIO_Init>
}
 8002940:	bf00      	nop
 8002942:	3738      	adds	r7, #56	; 0x38
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40007c00 	.word	0x40007c00
 800294c:	40023800 	.word	0x40023800
 8002950:	40021000 	.word	0x40021000
 8002954:	40004800 	.word	0x40004800
 8002958:	40020c00 	.word	0x40020c00
 800295c:	40011400 	.word	0x40011400
 8002960:	40020800 	.word	0x40020800

08002964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002968:	e7fe      	b.n	8002968 <NMI_Handler+0x4>

0800296a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800296a:	b480      	push	{r7}
 800296c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800296e:	e7fe      	b.n	800296e <HardFault_Handler+0x4>

08002970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002974:	e7fe      	b.n	8002974 <MemManage_Handler+0x4>

08002976 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002976:	b480      	push	{r7}
 8002978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800297a:	e7fe      	b.n	800297a <BusFault_Handler+0x4>

0800297c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002980:	e7fe      	b.n	8002980 <UsageFault_Handler+0x4>

08002982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002982:	b480      	push	{r7}
 8002984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002994:	bf00      	nop
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800299e:	b480      	push	{r7}
 80029a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029a2:	bf00      	nop
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029b0:	f000 f972 	bl	8002c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029b4:	bf00      	nop
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80029bc:	2001      	movs	r0, #1
 80029be:	f000 ff2b 	bl	8003818 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029cc:	4802      	ldr	r0, [pc, #8]	; (80029d8 <TIM2_IRQHandler+0x10>)
 80029ce:	f004 fa41 	bl	8006e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000d18 	.word	0x20000d18

080029dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80029e0:	4802      	ldr	r0, [pc, #8]	; (80029ec <OTG_FS_IRQHandler+0x10>)
 80029e2:	f002 f8bb 	bl	8004b5c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	200028f0 	.word	0x200028f0

080029f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
	return 1;
 80029f4:	2301      	movs	r3, #1
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <_kill>:

int _kill(int pid, int sig)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a0a:	f009 fd15 	bl	800c438 <__errno>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2216      	movs	r2, #22
 8002a12:	601a      	str	r2, [r3, #0]
	return -1;
 8002a14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <_exit>:

void _exit (int status)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a28:	f04f 31ff 	mov.w	r1, #4294967295
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f7ff ffe7 	bl	8002a00 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a32:	e7fe      	b.n	8002a32 <_exit+0x12>

08002a34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	e00a      	b.n	8002a5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a46:	f3af 8000 	nop.w
 8002a4a:	4601      	mov	r1, r0
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	60ba      	str	r2, [r7, #8]
 8002a52:	b2ca      	uxtb	r2, r1
 8002a54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	dbf0      	blt.n	8002a46 <_read+0x12>
	}

return len;
 8002a64:	687b      	ldr	r3, [r7, #4]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b086      	sub	sp, #24
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	60f8      	str	r0, [r7, #12]
 8002a76:	60b9      	str	r1, [r7, #8]
 8002a78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	617b      	str	r3, [r7, #20]
 8002a7e:	e009      	b.n	8002a94 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	1c5a      	adds	r2, r3, #1
 8002a84:	60ba      	str	r2, [r7, #8]
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	3301      	adds	r3, #1
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	dbf1      	blt.n	8002a80 <_write+0x12>
	}
	return len;
 8002a9c:	687b      	ldr	r3, [r7, #4]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <_close>:

int _close(int file)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
	return -1;
 8002aae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ace:	605a      	str	r2, [r3, #4]
	return 0;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <_isatty>:

int _isatty(int file)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
	return 1;
 8002ae6:	2301      	movs	r3, #1
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
	return 0;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
	...

08002b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b18:	4a14      	ldr	r2, [pc, #80]	; (8002b6c <_sbrk+0x5c>)
 8002b1a:	4b15      	ldr	r3, [pc, #84]	; (8002b70 <_sbrk+0x60>)
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b24:	4b13      	ldr	r3, [pc, #76]	; (8002b74 <_sbrk+0x64>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d102      	bne.n	8002b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b2c:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <_sbrk+0x64>)
 8002b2e:	4a12      	ldr	r2, [pc, #72]	; (8002b78 <_sbrk+0x68>)
 8002b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b32:	4b10      	ldr	r3, [pc, #64]	; (8002b74 <_sbrk+0x64>)
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4413      	add	r3, r2
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d207      	bcs.n	8002b50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b40:	f009 fc7a 	bl	800c438 <__errno>
 8002b44:	4603      	mov	r3, r0
 8002b46:	220c      	movs	r2, #12
 8002b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b4e:	e009      	b.n	8002b64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b50:	4b08      	ldr	r3, [pc, #32]	; (8002b74 <_sbrk+0x64>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b56:	4b07      	ldr	r3, [pc, #28]	; (8002b74 <_sbrk+0x64>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	4a05      	ldr	r2, [pc, #20]	; (8002b74 <_sbrk+0x64>)
 8002b60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b62:	68fb      	ldr	r3, [r7, #12]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3718      	adds	r7, #24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	20030000 	.word	0x20030000
 8002b70:	00000400 	.word	0x00000400
 8002b74:	20000390 	.word	0x20000390
 8002b78:	20002d08 	.word	0x20002d08

08002b7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b80:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <SystemInit+0x20>)
 8002b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b86:	4a05      	ldr	r2, [pc, #20]	; (8002b9c <SystemInit+0x20>)
 8002b88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b90:	bf00      	nop
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ba4:	480d      	ldr	r0, [pc, #52]	; (8002bdc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ba6:	490e      	ldr	r1, [pc, #56]	; (8002be0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ba8:	4a0e      	ldr	r2, [pc, #56]	; (8002be4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bac:	e002      	b.n	8002bb4 <LoopCopyDataInit>

08002bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bb2:	3304      	adds	r3, #4

08002bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bb8:	d3f9      	bcc.n	8002bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bba:	4a0b      	ldr	r2, [pc, #44]	; (8002be8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bbc:	4c0b      	ldr	r4, [pc, #44]	; (8002bec <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bc0:	e001      	b.n	8002bc6 <LoopFillZerobss>

08002bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bc4:	3204      	adds	r2, #4

08002bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bc8:	d3fb      	bcc.n	8002bc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002bca:	f7ff ffd7 	bl	8002b7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bce:	f009 fc39 	bl	800c444 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bd2:	f7fe fe37 	bl	8001844 <main>
  bx  lr    
 8002bd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002bd8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002be0:	2000036c 	.word	0x2000036c
  ldr r2, =_sidata
 8002be4:	08011224 	.word	0x08011224
  ldr r2, =_sbss
 8002be8:	2000036c 	.word	0x2000036c
  ldr r4, =_ebss
 8002bec:	20002d08 	.word	0x20002d08

08002bf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bf0:	e7fe      	b.n	8002bf0 <ADC_IRQHandler>
	...

08002bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bf8:	4b0e      	ldr	r3, [pc, #56]	; (8002c34 <HAL_Init+0x40>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a0d      	ldr	r2, [pc, #52]	; (8002c34 <HAL_Init+0x40>)
 8002bfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c04:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <HAL_Init+0x40>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a0a      	ldr	r2, [pc, #40]	; (8002c34 <HAL_Init+0x40>)
 8002c0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c10:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <HAL_Init+0x40>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a07      	ldr	r2, [pc, #28]	; (8002c34 <HAL_Init+0x40>)
 8002c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c1c:	2003      	movs	r0, #3
 8002c1e:	f000 fbc1 	bl	80033a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c22:	200f      	movs	r0, #15
 8002c24:	f000 f808 	bl	8002c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c28:	f7ff fbc8 	bl	80023bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40023c00 	.word	0x40023c00

08002c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c40:	4b12      	ldr	r3, [pc, #72]	; (8002c8c <HAL_InitTick+0x54>)
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	4b12      	ldr	r3, [pc, #72]	; (8002c90 <HAL_InitTick+0x58>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	4619      	mov	r1, r3
 8002c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 fbd9 	bl	800340e <HAL_SYSTICK_Config>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e00e      	b.n	8002c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b0f      	cmp	r3, #15
 8002c6a:	d80a      	bhi.n	8002c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	f04f 30ff 	mov.w	r0, #4294967295
 8002c74:	f000 fba1 	bl	80033ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c78:	4a06      	ldr	r2, [pc, #24]	; (8002c94 <HAL_InitTick+0x5c>)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	e000      	b.n	8002c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	20000000 	.word	0x20000000
 8002c90:	20000008 	.word	0x20000008
 8002c94:	20000004 	.word	0x20000004

08002c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c9c:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <HAL_IncTick+0x20>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <HAL_IncTick+0x24>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	4a04      	ldr	r2, [pc, #16]	; (8002cbc <HAL_IncTick+0x24>)
 8002caa:	6013      	str	r3, [r2, #0]
}
 8002cac:	bf00      	nop
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	20000008 	.word	0x20000008
 8002cbc:	20000fac 	.word	0x20000fac

08002cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8002cc4:	4b03      	ldr	r3, [pc, #12]	; (8002cd4 <HAL_GetTick+0x14>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	20000fac 	.word	0x20000fac

08002cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ce0:	f7ff ffee 	bl	8002cc0 <HAL_GetTick>
 8002ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf0:	d005      	beq.n	8002cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cf2:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <HAL_Delay+0x44>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cfe:	bf00      	nop
 8002d00:	f7ff ffde 	bl	8002cc0 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d8f7      	bhi.n	8002d00 <HAL_Delay+0x28>
  {
  }
}
 8002d10:	bf00      	nop
 8002d12:	bf00      	nop
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	20000008 	.word	0x20000008

08002d20 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e033      	b.n	8002d9e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d109      	bne.n	8002d52 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7ff fb64 	bl	800240c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	f003 0310 	and.w	r3, r3, #16
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d118      	bne.n	8002d90 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d66:	f023 0302 	bic.w	r3, r3, #2
 8002d6a:	f043 0202 	orr.w	r2, r3, #2
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f94a 	bl	800300c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	f023 0303 	bic.w	r3, r3, #3
 8002d86:	f043 0201 	orr.w	r2, r3, #1
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	641a      	str	r2, [r3, #64]	; 0x40
 8002d8e:	e001      	b.n	8002d94 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x1c>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e113      	b.n	8002fec <HAL_ADC_ConfigChannel+0x244>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b09      	cmp	r3, #9
 8002dd2:	d925      	bls.n	8002e20 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68d9      	ldr	r1, [r3, #12]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	461a      	mov	r2, r3
 8002de2:	4613      	mov	r3, r2
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	4413      	add	r3, r2
 8002de8:	3b1e      	subs	r3, #30
 8002dea:	2207      	movs	r2, #7
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	43da      	mvns	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	400a      	ands	r2, r1
 8002df8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68d9      	ldr	r1, [r3, #12]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	4403      	add	r3, r0
 8002e12:	3b1e      	subs	r3, #30
 8002e14:	409a      	lsls	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	60da      	str	r2, [r3, #12]
 8002e1e:	e022      	b.n	8002e66 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6919      	ldr	r1, [r3, #16]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4613      	mov	r3, r2
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	4413      	add	r3, r2
 8002e34:	2207      	movs	r2, #7
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	400a      	ands	r2, r1
 8002e42:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6919      	ldr	r1, [r3, #16]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	4618      	mov	r0, r3
 8002e56:	4603      	mov	r3, r0
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	4403      	add	r3, r0
 8002e5c:	409a      	lsls	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b06      	cmp	r3, #6
 8002e6c:	d824      	bhi.n	8002eb8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	3b05      	subs	r3, #5
 8002e80:	221f      	movs	r2, #31
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43da      	mvns	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	400a      	ands	r2, r1
 8002e8e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3b05      	subs	r3, #5
 8002eaa:	fa00 f203 	lsl.w	r2, r0, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	635a      	str	r2, [r3, #52]	; 0x34
 8002eb6:	e04c      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b0c      	cmp	r3, #12
 8002ebe:	d824      	bhi.n	8002f0a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	3b23      	subs	r3, #35	; 0x23
 8002ed2:	221f      	movs	r2, #31
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	43da      	mvns	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	400a      	ands	r2, r1
 8002ee0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	4618      	mov	r0, r3
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	3b23      	subs	r3, #35	; 0x23
 8002efc:	fa00 f203 	lsl.w	r2, r0, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	631a      	str	r2, [r3, #48]	; 0x30
 8002f08:	e023      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	3b41      	subs	r3, #65	; 0x41
 8002f1c:	221f      	movs	r2, #31
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43da      	mvns	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	400a      	ands	r2, r1
 8002f2a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	4618      	mov	r0, r3
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	3b41      	subs	r3, #65	; 0x41
 8002f46:	fa00 f203 	lsl.w	r2, r0, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f52:	4b29      	ldr	r3, [pc, #164]	; (8002ff8 <HAL_ADC_ConfigChannel+0x250>)
 8002f54:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a28      	ldr	r2, [pc, #160]	; (8002ffc <HAL_ADC_ConfigChannel+0x254>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d10f      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x1d8>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b12      	cmp	r3, #18
 8002f66:	d10b      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a1d      	ldr	r2, [pc, #116]	; (8002ffc <HAL_ADC_ConfigChannel+0x254>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d12b      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x23a>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a1c      	ldr	r2, [pc, #112]	; (8003000 <HAL_ADC_ConfigChannel+0x258>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d003      	beq.n	8002f9c <HAL_ADC_ConfigChannel+0x1f4>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b11      	cmp	r3, #17
 8002f9a:	d122      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a11      	ldr	r2, [pc, #68]	; (8003000 <HAL_ADC_ConfigChannel+0x258>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d111      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002fbe:	4b11      	ldr	r3, [pc, #68]	; (8003004 <HAL_ADC_ConfigChannel+0x25c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a11      	ldr	r2, [pc, #68]	; (8003008 <HAL_ADC_ConfigChannel+0x260>)
 8002fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc8:	0c9a      	lsrs	r2, r3, #18
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fd4:	e002      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f9      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	40012300 	.word	0x40012300
 8002ffc:	40012000 	.word	0x40012000
 8003000:	10000012 	.word	0x10000012
 8003004:	20000000 	.word	0x20000000
 8003008:	431bde83 	.word	0x431bde83

0800300c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003014:	4b79      	ldr	r3, [pc, #484]	; (80031fc <ADC_Init+0x1f0>)
 8003016:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	431a      	orrs	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003040:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6859      	ldr	r1, [r3, #4]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	021a      	lsls	r2, r3, #8
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003064:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6859      	ldr	r1, [r3, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003086:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6899      	ldr	r1, [r3, #8]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309e:	4a58      	ldr	r2, [pc, #352]	; (8003200 <ADC_Init+0x1f4>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d022      	beq.n	80030ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6899      	ldr	r1, [r3, #8]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6899      	ldr	r1, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	609a      	str	r2, [r3, #8]
 80030e8:	e00f      	b.n	800310a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003108:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0202 	bic.w	r2, r2, #2
 8003118:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6899      	ldr	r1, [r3, #8]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	7e1b      	ldrb	r3, [r3, #24]
 8003124:	005a      	lsls	r2, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d01b      	beq.n	8003170 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003146:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003156:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6859      	ldr	r1, [r3, #4]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	3b01      	subs	r3, #1
 8003164:	035a      	lsls	r2, r3, #13
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	605a      	str	r2, [r3, #4]
 800316e:	e007      	b.n	8003180 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800317e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800318e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	3b01      	subs	r3, #1
 800319c:	051a      	lsls	r2, r3, #20
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80031b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6899      	ldr	r1, [r3, #8]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031c2:	025a      	lsls	r2, r3, #9
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6899      	ldr	r1, [r3, #8]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	029a      	lsls	r2, r3, #10
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	609a      	str	r2, [r3, #8]
}
 80031f0:	bf00      	nop
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	40012300 	.word	0x40012300
 8003200:	0f000001 	.word	0x0f000001

08003204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003214:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <__NVIC_SetPriorityGrouping+0x44>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003220:	4013      	ands	r3, r2
 8003222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800322c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003236:	4a04      	ldr	r2, [pc, #16]	; (8003248 <__NVIC_SetPriorityGrouping+0x44>)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	60d3      	str	r3, [r2, #12]
}
 800323c:	bf00      	nop
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	e000ed00 	.word	0xe000ed00

0800324c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003250:	4b04      	ldr	r3, [pc, #16]	; (8003264 <__NVIC_GetPriorityGrouping+0x18>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	0a1b      	lsrs	r3, r3, #8
 8003256:	f003 0307 	and.w	r3, r3, #7
}
 800325a:	4618      	mov	r0, r3
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	e000ed00 	.word	0xe000ed00

08003268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003276:	2b00      	cmp	r3, #0
 8003278:	db0b      	blt.n	8003292 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	f003 021f 	and.w	r2, r3, #31
 8003280:	4907      	ldr	r1, [pc, #28]	; (80032a0 <__NVIC_EnableIRQ+0x38>)
 8003282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	2001      	movs	r0, #1
 800328a:	fa00 f202 	lsl.w	r2, r0, r2
 800328e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	e000e100 	.word	0xe000e100

080032a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	4603      	mov	r3, r0
 80032ac:	6039      	str	r1, [r7, #0]
 80032ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	db0a      	blt.n	80032ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	490c      	ldr	r1, [pc, #48]	; (80032f0 <__NVIC_SetPriority+0x4c>)
 80032be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c2:	0112      	lsls	r2, r2, #4
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	440b      	add	r3, r1
 80032c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032cc:	e00a      	b.n	80032e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	4908      	ldr	r1, [pc, #32]	; (80032f4 <__NVIC_SetPriority+0x50>)
 80032d4:	79fb      	ldrb	r3, [r7, #7]
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	3b04      	subs	r3, #4
 80032dc:	0112      	lsls	r2, r2, #4
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	440b      	add	r3, r1
 80032e2:	761a      	strb	r2, [r3, #24]
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	e000e100 	.word	0xe000e100
 80032f4:	e000ed00 	.word	0xe000ed00

080032f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b089      	sub	sp, #36	; 0x24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	f1c3 0307 	rsb	r3, r3, #7
 8003312:	2b04      	cmp	r3, #4
 8003314:	bf28      	it	cs
 8003316:	2304      	movcs	r3, #4
 8003318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	3304      	adds	r3, #4
 800331e:	2b06      	cmp	r3, #6
 8003320:	d902      	bls.n	8003328 <NVIC_EncodePriority+0x30>
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	3b03      	subs	r3, #3
 8003326:	e000      	b.n	800332a <NVIC_EncodePriority+0x32>
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800332c:	f04f 32ff 	mov.w	r2, #4294967295
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	43da      	mvns	r2, r3
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	401a      	ands	r2, r3
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003340:	f04f 31ff 	mov.w	r1, #4294967295
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	fa01 f303 	lsl.w	r3, r1, r3
 800334a:	43d9      	mvns	r1, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003350:	4313      	orrs	r3, r2
         );
}
 8003352:	4618      	mov	r0, r3
 8003354:	3724      	adds	r7, #36	; 0x24
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
	...

08003360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3b01      	subs	r3, #1
 800336c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003370:	d301      	bcc.n	8003376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003372:	2301      	movs	r3, #1
 8003374:	e00f      	b.n	8003396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003376:	4a0a      	ldr	r2, [pc, #40]	; (80033a0 <SysTick_Config+0x40>)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3b01      	subs	r3, #1
 800337c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800337e:	210f      	movs	r1, #15
 8003380:	f04f 30ff 	mov.w	r0, #4294967295
 8003384:	f7ff ff8e 	bl	80032a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003388:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <SysTick_Config+0x40>)
 800338a:	2200      	movs	r2, #0
 800338c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800338e:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <SysTick_Config+0x40>)
 8003390:	2207      	movs	r2, #7
 8003392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	e000e010 	.word	0xe000e010

080033a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff ff29 	bl	8003204 <__NVIC_SetPriorityGrouping>
}
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b086      	sub	sp, #24
 80033be:	af00      	add	r7, sp, #0
 80033c0:	4603      	mov	r3, r0
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	607a      	str	r2, [r7, #4]
 80033c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033cc:	f7ff ff3e 	bl	800324c <__NVIC_GetPriorityGrouping>
 80033d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	68b9      	ldr	r1, [r7, #8]
 80033d6:	6978      	ldr	r0, [r7, #20]
 80033d8:	f7ff ff8e 	bl	80032f8 <NVIC_EncodePriority>
 80033dc:	4602      	mov	r2, r0
 80033de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033e2:	4611      	mov	r1, r2
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff ff5d 	bl	80032a4 <__NVIC_SetPriority>
}
 80033ea:	bf00      	nop
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	4603      	mov	r3, r0
 80033fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff ff31 	bl	8003268 <__NVIC_EnableIRQ>
}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7ff ffa2 	bl	8003360 <SysTick_Config>
 800341c:	4603      	mov	r3, r0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003428:	b480      	push	{r7}
 800342a:	b089      	sub	sp, #36	; 0x24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003432:	2300      	movs	r3, #0
 8003434:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003436:	2300      	movs	r3, #0
 8003438:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800343a:	2300      	movs	r3, #0
 800343c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800343e:	2300      	movs	r3, #0
 8003440:	61fb      	str	r3, [r7, #28]
 8003442:	e177      	b.n	8003734 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003444:	2201      	movs	r2, #1
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	4013      	ands	r3, r2
 8003456:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	429a      	cmp	r2, r3
 800345e:	f040 8166 	bne.w	800372e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	2b01      	cmp	r3, #1
 800346c:	d005      	beq.n	800347a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003476:	2b02      	cmp	r3, #2
 8003478:	d130      	bne.n	80034dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	2203      	movs	r2, #3
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	43db      	mvns	r3, r3
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4013      	ands	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034b0:	2201      	movs	r2, #1
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	43db      	mvns	r3, r3
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4013      	ands	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	091b      	lsrs	r3, r3, #4
 80034c6:	f003 0201 	and.w	r2, r3, #1
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f003 0303 	and.w	r3, r3, #3
 80034e4:	2b03      	cmp	r3, #3
 80034e6:	d017      	beq.n	8003518 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	2203      	movs	r2, #3
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	43db      	mvns	r3, r3
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4013      	ands	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	4313      	orrs	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f003 0303 	and.w	r3, r3, #3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d123      	bne.n	800356c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	08da      	lsrs	r2, r3, #3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3208      	adds	r2, #8
 800352c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003530:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	220f      	movs	r2, #15
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	43db      	mvns	r3, r3
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	4013      	ands	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	691a      	ldr	r2, [r3, #16]
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4313      	orrs	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	08da      	lsrs	r2, r3, #3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	3208      	adds	r2, #8
 8003566:	69b9      	ldr	r1, [r7, #24]
 8003568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	2203      	movs	r2, #3
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	43db      	mvns	r3, r3
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	4013      	ands	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f003 0203 	and.w	r2, r3, #3
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	4313      	orrs	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 80c0 	beq.w	800372e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	4b66      	ldr	r3, [pc, #408]	; (800374c <HAL_GPIO_Init+0x324>)
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	4a65      	ldr	r2, [pc, #404]	; (800374c <HAL_GPIO_Init+0x324>)
 80035b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035bc:	6453      	str	r3, [r2, #68]	; 0x44
 80035be:	4b63      	ldr	r3, [pc, #396]	; (800374c <HAL_GPIO_Init+0x324>)
 80035c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035ca:	4a61      	ldr	r2, [pc, #388]	; (8003750 <HAL_GPIO_Init+0x328>)
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	089b      	lsrs	r3, r3, #2
 80035d0:	3302      	adds	r3, #2
 80035d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	220f      	movs	r2, #15
 80035e2:	fa02 f303 	lsl.w	r3, r2, r3
 80035e6:	43db      	mvns	r3, r3
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	4013      	ands	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a58      	ldr	r2, [pc, #352]	; (8003754 <HAL_GPIO_Init+0x32c>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d037      	beq.n	8003666 <HAL_GPIO_Init+0x23e>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a57      	ldr	r2, [pc, #348]	; (8003758 <HAL_GPIO_Init+0x330>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d031      	beq.n	8003662 <HAL_GPIO_Init+0x23a>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a56      	ldr	r2, [pc, #344]	; (800375c <HAL_GPIO_Init+0x334>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d02b      	beq.n	800365e <HAL_GPIO_Init+0x236>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a55      	ldr	r2, [pc, #340]	; (8003760 <HAL_GPIO_Init+0x338>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d025      	beq.n	800365a <HAL_GPIO_Init+0x232>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a54      	ldr	r2, [pc, #336]	; (8003764 <HAL_GPIO_Init+0x33c>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d01f      	beq.n	8003656 <HAL_GPIO_Init+0x22e>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a53      	ldr	r2, [pc, #332]	; (8003768 <HAL_GPIO_Init+0x340>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d019      	beq.n	8003652 <HAL_GPIO_Init+0x22a>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a52      	ldr	r2, [pc, #328]	; (800376c <HAL_GPIO_Init+0x344>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d013      	beq.n	800364e <HAL_GPIO_Init+0x226>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a51      	ldr	r2, [pc, #324]	; (8003770 <HAL_GPIO_Init+0x348>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d00d      	beq.n	800364a <HAL_GPIO_Init+0x222>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a50      	ldr	r2, [pc, #320]	; (8003774 <HAL_GPIO_Init+0x34c>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d007      	beq.n	8003646 <HAL_GPIO_Init+0x21e>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a4f      	ldr	r2, [pc, #316]	; (8003778 <HAL_GPIO_Init+0x350>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d101      	bne.n	8003642 <HAL_GPIO_Init+0x21a>
 800363e:	2309      	movs	r3, #9
 8003640:	e012      	b.n	8003668 <HAL_GPIO_Init+0x240>
 8003642:	230a      	movs	r3, #10
 8003644:	e010      	b.n	8003668 <HAL_GPIO_Init+0x240>
 8003646:	2308      	movs	r3, #8
 8003648:	e00e      	b.n	8003668 <HAL_GPIO_Init+0x240>
 800364a:	2307      	movs	r3, #7
 800364c:	e00c      	b.n	8003668 <HAL_GPIO_Init+0x240>
 800364e:	2306      	movs	r3, #6
 8003650:	e00a      	b.n	8003668 <HAL_GPIO_Init+0x240>
 8003652:	2305      	movs	r3, #5
 8003654:	e008      	b.n	8003668 <HAL_GPIO_Init+0x240>
 8003656:	2304      	movs	r3, #4
 8003658:	e006      	b.n	8003668 <HAL_GPIO_Init+0x240>
 800365a:	2303      	movs	r3, #3
 800365c:	e004      	b.n	8003668 <HAL_GPIO_Init+0x240>
 800365e:	2302      	movs	r3, #2
 8003660:	e002      	b.n	8003668 <HAL_GPIO_Init+0x240>
 8003662:	2301      	movs	r3, #1
 8003664:	e000      	b.n	8003668 <HAL_GPIO_Init+0x240>
 8003666:	2300      	movs	r3, #0
 8003668:	69fa      	ldr	r2, [r7, #28]
 800366a:	f002 0203 	and.w	r2, r2, #3
 800366e:	0092      	lsls	r2, r2, #2
 8003670:	4093      	lsls	r3, r2
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4313      	orrs	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003678:	4935      	ldr	r1, [pc, #212]	; (8003750 <HAL_GPIO_Init+0x328>)
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	089b      	lsrs	r3, r3, #2
 800367e:	3302      	adds	r3, #2
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003686:	4b3d      	ldr	r3, [pc, #244]	; (800377c <HAL_GPIO_Init+0x354>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	43db      	mvns	r3, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4013      	ands	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036aa:	4a34      	ldr	r2, [pc, #208]	; (800377c <HAL_GPIO_Init+0x354>)
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80036b0:	4b32      	ldr	r3, [pc, #200]	; (800377c <HAL_GPIO_Init+0x354>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	43db      	mvns	r3, r3
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4013      	ands	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036d4:	4a29      	ldr	r2, [pc, #164]	; (800377c <HAL_GPIO_Init+0x354>)
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036da:	4b28      	ldr	r3, [pc, #160]	; (800377c <HAL_GPIO_Init+0x354>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	43db      	mvns	r3, r3
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	4013      	ands	r3, r2
 80036e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036fe:	4a1f      	ldr	r2, [pc, #124]	; (800377c <HAL_GPIO_Init+0x354>)
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003704:	4b1d      	ldr	r3, [pc, #116]	; (800377c <HAL_GPIO_Init+0x354>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	43db      	mvns	r3, r3
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	4013      	ands	r3, r2
 8003712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	4313      	orrs	r3, r2
 8003726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003728:	4a14      	ldr	r2, [pc, #80]	; (800377c <HAL_GPIO_Init+0x354>)
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	3301      	adds	r3, #1
 8003732:	61fb      	str	r3, [r7, #28]
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	2b0f      	cmp	r3, #15
 8003738:	f67f ae84 	bls.w	8003444 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800373c:	bf00      	nop
 800373e:	bf00      	nop
 8003740:	3724      	adds	r7, #36	; 0x24
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	40023800 	.word	0x40023800
 8003750:	40013800 	.word	0x40013800
 8003754:	40020000 	.word	0x40020000
 8003758:	40020400 	.word	0x40020400
 800375c:	40020800 	.word	0x40020800
 8003760:	40020c00 	.word	0x40020c00
 8003764:	40021000 	.word	0x40021000
 8003768:	40021400 	.word	0x40021400
 800376c:	40021800 	.word	0x40021800
 8003770:	40021c00 	.word	0x40021c00
 8003774:	40022000 	.word	0x40022000
 8003778:	40022400 	.word	0x40022400
 800377c:	40013c00 	.word	0x40013c00

08003780 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	460b      	mov	r3, r1
 800378a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	691a      	ldr	r2, [r3, #16]
 8003790:	887b      	ldrh	r3, [r7, #2]
 8003792:	4013      	ands	r3, r2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d002      	beq.n	800379e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003798:	2301      	movs	r3, #1
 800379a:	73fb      	strb	r3, [r7, #15]
 800379c:	e001      	b.n	80037a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800379e:	2300      	movs	r3, #0
 80037a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3714      	adds	r7, #20
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	460b      	mov	r3, r1
 80037ba:	807b      	strh	r3, [r7, #2]
 80037bc:	4613      	mov	r3, r2
 80037be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037c0:	787b      	ldrb	r3, [r7, #1]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037c6:	887a      	ldrh	r2, [r7, #2]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037cc:	e003      	b.n	80037d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037ce:	887b      	ldrh	r3, [r7, #2]
 80037d0:	041a      	lsls	r2, r3, #16
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	619a      	str	r2, [r3, #24]
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b085      	sub	sp, #20
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	460b      	mov	r3, r1
 80037ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037f4:	887a      	ldrh	r2, [r7, #2]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	4013      	ands	r3, r2
 80037fa:	041a      	lsls	r2, r3, #16
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	43d9      	mvns	r1, r3
 8003800:	887b      	ldrh	r3, [r7, #2]
 8003802:	400b      	ands	r3, r1
 8003804:	431a      	orrs	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	619a      	str	r2, [r3, #24]
}
 800380a:	bf00      	nop
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
	...

08003818 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	4603      	mov	r3, r0
 8003820:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003822:	4b08      	ldr	r3, [pc, #32]	; (8003844 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003824:	695a      	ldr	r2, [r3, #20]
 8003826:	88fb      	ldrh	r3, [r7, #6]
 8003828:	4013      	ands	r3, r2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d006      	beq.n	800383c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800382e:	4a05      	ldr	r2, [pc, #20]	; (8003844 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003830:	88fb      	ldrh	r3, [r7, #6]
 8003832:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003834:	88fb      	ldrh	r3, [r7, #6]
 8003836:	4618      	mov	r0, r3
 8003838:	f7fe fd82 	bl	8002340 <HAL_GPIO_EXTI_Callback>
  }
}
 800383c:	bf00      	nop
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40013c00 	.word	0x40013c00

08003848 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e12b      	b.n	8003ab2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7fe fe10 	bl	8002494 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2224      	movs	r2, #36	; 0x24
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0201 	bic.w	r2, r2, #1
 800388a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800389a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038ac:	f002 fdd4 	bl	8006458 <HAL_RCC_GetPCLK1Freq>
 80038b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	4a81      	ldr	r2, [pc, #516]	; (8003abc <HAL_I2C_Init+0x274>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d807      	bhi.n	80038cc <HAL_I2C_Init+0x84>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4a80      	ldr	r2, [pc, #512]	; (8003ac0 <HAL_I2C_Init+0x278>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	bf94      	ite	ls
 80038c4:	2301      	movls	r3, #1
 80038c6:	2300      	movhi	r3, #0
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	e006      	b.n	80038da <HAL_I2C_Init+0x92>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4a7d      	ldr	r2, [pc, #500]	; (8003ac4 <HAL_I2C_Init+0x27c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	bf94      	ite	ls
 80038d4:	2301      	movls	r3, #1
 80038d6:	2300      	movhi	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e0e7      	b.n	8003ab2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	4a78      	ldr	r2, [pc, #480]	; (8003ac8 <HAL_I2C_Init+0x280>)
 80038e6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ea:	0c9b      	lsrs	r3, r3, #18
 80038ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	430a      	orrs	r2, r1
 8003900:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	4a6a      	ldr	r2, [pc, #424]	; (8003abc <HAL_I2C_Init+0x274>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d802      	bhi.n	800391c <HAL_I2C_Init+0xd4>
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	3301      	adds	r3, #1
 800391a:	e009      	b.n	8003930 <HAL_I2C_Init+0xe8>
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003922:	fb02 f303 	mul.w	r3, r2, r3
 8003926:	4a69      	ldr	r2, [pc, #420]	; (8003acc <HAL_I2C_Init+0x284>)
 8003928:	fba2 2303 	umull	r2, r3, r2, r3
 800392c:	099b      	lsrs	r3, r3, #6
 800392e:	3301      	adds	r3, #1
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6812      	ldr	r2, [r2, #0]
 8003934:	430b      	orrs	r3, r1
 8003936:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003942:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	495c      	ldr	r1, [pc, #368]	; (8003abc <HAL_I2C_Init+0x274>)
 800394c:	428b      	cmp	r3, r1
 800394e:	d819      	bhi.n	8003984 <HAL_I2C_Init+0x13c>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	1e59      	subs	r1, r3, #1
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	fbb1 f3f3 	udiv	r3, r1, r3
 800395e:	1c59      	adds	r1, r3, #1
 8003960:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003964:	400b      	ands	r3, r1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00a      	beq.n	8003980 <HAL_I2C_Init+0x138>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	1e59      	subs	r1, r3, #1
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	fbb1 f3f3 	udiv	r3, r1, r3
 8003978:	3301      	adds	r3, #1
 800397a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800397e:	e051      	b.n	8003a24 <HAL_I2C_Init+0x1dc>
 8003980:	2304      	movs	r3, #4
 8003982:	e04f      	b.n	8003a24 <HAL_I2C_Init+0x1dc>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d111      	bne.n	80039b0 <HAL_I2C_Init+0x168>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	1e58      	subs	r0, r3, #1
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6859      	ldr	r1, [r3, #4]
 8003994:	460b      	mov	r3, r1
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	440b      	add	r3, r1
 800399a:	fbb0 f3f3 	udiv	r3, r0, r3
 800399e:	3301      	adds	r3, #1
 80039a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	bf0c      	ite	eq
 80039a8:	2301      	moveq	r3, #1
 80039aa:	2300      	movne	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	e012      	b.n	80039d6 <HAL_I2C_Init+0x18e>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	1e58      	subs	r0, r3, #1
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6859      	ldr	r1, [r3, #4]
 80039b8:	460b      	mov	r3, r1
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	0099      	lsls	r1, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039c6:	3301      	adds	r3, #1
 80039c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	bf0c      	ite	eq
 80039d0:	2301      	moveq	r3, #1
 80039d2:	2300      	movne	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <HAL_I2C_Init+0x196>
 80039da:	2301      	movs	r3, #1
 80039dc:	e022      	b.n	8003a24 <HAL_I2C_Init+0x1dc>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10e      	bne.n	8003a04 <HAL_I2C_Init+0x1bc>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	1e58      	subs	r0, r3, #1
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6859      	ldr	r1, [r3, #4]
 80039ee:	460b      	mov	r3, r1
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	440b      	add	r3, r1
 80039f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80039f8:	3301      	adds	r3, #1
 80039fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a02:	e00f      	b.n	8003a24 <HAL_I2C_Init+0x1dc>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	1e58      	subs	r0, r3, #1
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6859      	ldr	r1, [r3, #4]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	440b      	add	r3, r1
 8003a12:	0099      	lsls	r1, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a24:	6879      	ldr	r1, [r7, #4]
 8003a26:	6809      	ldr	r1, [r1, #0]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	69da      	ldr	r2, [r3, #28]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6911      	ldr	r1, [r2, #16]
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	68d2      	ldr	r2, [r2, #12]
 8003a5e:	4311      	orrs	r1, r2
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6812      	ldr	r2, [r2, #0]
 8003a64:	430b      	orrs	r3, r1
 8003a66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	695a      	ldr	r2, [r3, #20]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0201 	orr.w	r2, r2, #1
 8003a92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	000186a0 	.word	0x000186a0
 8003ac0:	001e847f 	.word	0x001e847f
 8003ac4:	003d08ff 	.word	0x003d08ff
 8003ac8:	431bde83 	.word	0x431bde83
 8003acc:	10624dd3 	.word	0x10624dd3

08003ad0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b088      	sub	sp, #32
 8003ad4:	af02      	add	r7, sp, #8
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	4608      	mov	r0, r1
 8003ada:	4611      	mov	r1, r2
 8003adc:	461a      	mov	r2, r3
 8003ade:	4603      	mov	r3, r0
 8003ae0:	817b      	strh	r3, [r7, #10]
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	813b      	strh	r3, [r7, #8]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003aea:	f7ff f8e9 	bl	8002cc0 <HAL_GetTick>
 8003aee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b20      	cmp	r3, #32
 8003afa:	f040 80d9 	bne.w	8003cb0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	2319      	movs	r3, #25
 8003b04:	2201      	movs	r2, #1
 8003b06:	496d      	ldr	r1, [pc, #436]	; (8003cbc <HAL_I2C_Mem_Write+0x1ec>)
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 fc7f 	bl	800440c <I2C_WaitOnFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003b14:	2302      	movs	r3, #2
 8003b16:	e0cc      	b.n	8003cb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d101      	bne.n	8003b26 <HAL_I2C_Mem_Write+0x56>
 8003b22:	2302      	movs	r3, #2
 8003b24:	e0c5      	b.n	8003cb2 <HAL_I2C_Mem_Write+0x1e2>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d007      	beq.n	8003b4c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 0201 	orr.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2221      	movs	r2, #33	; 0x21
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2240      	movs	r2, #64	; 0x40
 8003b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6a3a      	ldr	r2, [r7, #32]
 8003b76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4a4d      	ldr	r2, [pc, #308]	; (8003cc0 <HAL_I2C_Mem_Write+0x1f0>)
 8003b8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b8e:	88f8      	ldrh	r0, [r7, #6]
 8003b90:	893a      	ldrh	r2, [r7, #8]
 8003b92:	8979      	ldrh	r1, [r7, #10]
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	9301      	str	r3, [sp, #4]
 8003b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 fab6 	bl	8004110 <I2C_RequestMemoryWrite>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d052      	beq.n	8003c50 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e081      	b.n	8003cb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 fd00 	bl	80045b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00d      	beq.n	8003bda <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d107      	bne.n	8003bd6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e06b      	b.n	8003cb2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	781a      	ldrb	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	1c5a      	adds	r2, r3, #1
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b04      	cmp	r3, #4
 8003c16:	d11b      	bne.n	8003c50 <HAL_I2C_Mem_Write+0x180>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d017      	beq.n	8003c50 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	781a      	ldrb	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	1c5a      	adds	r2, r3, #1
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1aa      	bne.n	8003bae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 fcec 	bl	800463a <I2C_WaitOnBTFFlagUntilTimeout>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00d      	beq.n	8003c84 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	2b04      	cmp	r3, #4
 8003c6e:	d107      	bne.n	8003c80 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c7e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e016      	b.n	8003cb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cac:	2300      	movs	r3, #0
 8003cae:	e000      	b.n	8003cb2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003cb0:	2302      	movs	r3, #2
  }
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3718      	adds	r7, #24
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	00100002 	.word	0x00100002
 8003cc0:	ffff0000 	.word	0xffff0000

08003cc4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b08c      	sub	sp, #48	; 0x30
 8003cc8:	af02      	add	r7, sp, #8
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	4608      	mov	r0, r1
 8003cce:	4611      	mov	r1, r2
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	817b      	strh	r3, [r7, #10]
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	813b      	strh	r3, [r7, #8]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cde:	f7fe ffef 	bl	8002cc0 <HAL_GetTick>
 8003ce2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b20      	cmp	r3, #32
 8003cee:	f040 8208 	bne.w	8004102 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	2319      	movs	r3, #25
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	497b      	ldr	r1, [pc, #492]	; (8003ee8 <HAL_I2C_Mem_Read+0x224>)
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 fb85 	bl	800440c <I2C_WaitOnFlagUntilTimeout>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003d08:	2302      	movs	r3, #2
 8003d0a:	e1fb      	b.n	8004104 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d101      	bne.n	8003d1a <HAL_I2C_Mem_Read+0x56>
 8003d16:	2302      	movs	r3, #2
 8003d18:	e1f4      	b.n	8004104 <HAL_I2C_Mem_Read+0x440>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d007      	beq.n	8003d40 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 0201 	orr.w	r2, r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2222      	movs	r2, #34	; 0x22
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2240      	movs	r2, #64	; 0x40
 8003d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003d70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4a5b      	ldr	r2, [pc, #364]	; (8003eec <HAL_I2C_Mem_Read+0x228>)
 8003d80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d82:	88f8      	ldrh	r0, [r7, #6]
 8003d84:	893a      	ldrh	r2, [r7, #8]
 8003d86:	8979      	ldrh	r1, [r7, #10]
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	9301      	str	r3, [sp, #4]
 8003d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	4603      	mov	r3, r0
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f000 fa52 	bl	800423c <I2C_RequestMemoryRead>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e1b0      	b.n	8004104 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d113      	bne.n	8003dd2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003daa:	2300      	movs	r3, #0
 8003dac:	623b      	str	r3, [r7, #32]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	623b      	str	r3, [r7, #32]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	623b      	str	r3, [r7, #32]
 8003dbe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	e184      	b.n	80040dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d11b      	bne.n	8003e12 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003de8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dea:	2300      	movs	r3, #0
 8003dec:	61fb      	str	r3, [r7, #28]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	61fb      	str	r3, [r7, #28]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	61fb      	str	r3, [r7, #28]
 8003dfe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	e164      	b.n	80040dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d11b      	bne.n	8003e52 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e28:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	61bb      	str	r3, [r7, #24]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	61bb      	str	r3, [r7, #24]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	61bb      	str	r3, [r7, #24]
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	e144      	b.n	80040dc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e52:	2300      	movs	r3, #0
 8003e54:	617b      	str	r3, [r7, #20]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	617b      	str	r3, [r7, #20]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	617b      	str	r3, [r7, #20]
 8003e66:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003e68:	e138      	b.n	80040dc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e6e:	2b03      	cmp	r3, #3
 8003e70:	f200 80f1 	bhi.w	8004056 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d123      	bne.n	8003ec4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 fc1b 	bl	80046bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e139      	b.n	8004104 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	691a      	ldr	r2, [r3, #16]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ec2:	e10b      	b.n	80040dc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d14e      	bne.n	8003f6a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	4906      	ldr	r1, [pc, #24]	; (8003ef0 <HAL_I2C_Mem_Read+0x22c>)
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 fa98 	bl	800440c <I2C_WaitOnFlagUntilTimeout>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d008      	beq.n	8003ef4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e10e      	b.n	8004104 <HAL_I2C_Mem_Read+0x440>
 8003ee6:	bf00      	nop
 8003ee8:	00100002 	.word	0x00100002
 8003eec:	ffff0000 	.word	0xffff0000
 8003ef0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	691a      	ldr	r2, [r3, #16]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0e:	b2d2      	uxtb	r2, r2
 8003f10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	1c5a      	adds	r2, r3, #1
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	691a      	ldr	r2, [r3, #16]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	1c5a      	adds	r2, r3, #1
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f68:	e0b8      	b.n	80040dc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f70:	2200      	movs	r2, #0
 8003f72:	4966      	ldr	r1, [pc, #408]	; (800410c <HAL_I2C_Mem_Read+0x448>)
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 fa49 	bl	800440c <I2C_WaitOnFlagUntilTimeout>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e0bf      	b.n	8004104 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	691a      	ldr	r2, [r3, #16]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fcc:	2200      	movs	r2, #0
 8003fce:	494f      	ldr	r1, [pc, #316]	; (800410c <HAL_I2C_Mem_Read+0x448>)
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 fa1b 	bl	800440c <I2C_WaitOnFlagUntilTimeout>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e091      	b.n	8004104 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	691a      	ldr	r2, [r3, #16]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	1c5a      	adds	r2, r3, #1
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800400c:	3b01      	subs	r3, #1
 800400e:	b29a      	uxth	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004018:	b29b      	uxth	r3, r3
 800401a:	3b01      	subs	r3, #1
 800401c:	b29a      	uxth	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	691a      	ldr	r2, [r3, #16]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800403e:	3b01      	subs	r3, #1
 8004040:	b29a      	uxth	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404a:	b29b      	uxth	r3, r3
 800404c:	3b01      	subs	r3, #1
 800404e:	b29a      	uxth	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004054:	e042      	b.n	80040dc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004058:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f000 fb2e 	bl	80046bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e04c      	b.n	8004104 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	691a      	ldr	r2, [r3, #16]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	b2d2      	uxtb	r2, r2
 8004076:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	1c5a      	adds	r2, r3, #1
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004086:	3b01      	subs	r3, #1
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004092:	b29b      	uxth	r3, r3
 8004094:	3b01      	subs	r3, #1
 8004096:	b29a      	uxth	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	f003 0304 	and.w	r3, r3, #4
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d118      	bne.n	80040dc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	691a      	ldr	r2, [r3, #16]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	b2d2      	uxtb	r2, r2
 80040b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	1c5a      	adds	r2, r3, #1
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c6:	3b01      	subs	r3, #1
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	3b01      	subs	r3, #1
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f47f aec2 	bne.w	8003e6a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2220      	movs	r2, #32
 80040ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	e000      	b.n	8004104 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004102:	2302      	movs	r3, #2
  }
}
 8004104:	4618      	mov	r0, r3
 8004106:	3728      	adds	r7, #40	; 0x28
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	00010004 	.word	0x00010004

08004110 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b088      	sub	sp, #32
 8004114:	af02      	add	r7, sp, #8
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	4608      	mov	r0, r1
 800411a:	4611      	mov	r1, r2
 800411c:	461a      	mov	r2, r3
 800411e:	4603      	mov	r3, r0
 8004120:	817b      	strh	r3, [r7, #10]
 8004122:	460b      	mov	r3, r1
 8004124:	813b      	strh	r3, [r7, #8]
 8004126:	4613      	mov	r3, r2
 8004128:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004138:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	6a3b      	ldr	r3, [r7, #32]
 8004140:	2200      	movs	r2, #0
 8004142:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 f960 	bl	800440c <I2C_WaitOnFlagUntilTimeout>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00d      	beq.n	800416e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004160:	d103      	bne.n	800416a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004168:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e05f      	b.n	800422e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800416e:	897b      	ldrh	r3, [r7, #10]
 8004170:	b2db      	uxtb	r3, r3
 8004172:	461a      	mov	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800417c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	6a3a      	ldr	r2, [r7, #32]
 8004182:	492d      	ldr	r1, [pc, #180]	; (8004238 <I2C_RequestMemoryWrite+0x128>)
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f000 f998 	bl	80044ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d001      	beq.n	8004194 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e04c      	b.n	800422e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004194:	2300      	movs	r3, #0
 8004196:	617b      	str	r3, [r7, #20]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ac:	6a39      	ldr	r1, [r7, #32]
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 fa02 	bl	80045b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00d      	beq.n	80041d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d107      	bne.n	80041d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e02b      	b.n	800422e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041d6:	88fb      	ldrh	r3, [r7, #6]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d105      	bne.n	80041e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041dc:	893b      	ldrh	r3, [r7, #8]
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	611a      	str	r2, [r3, #16]
 80041e6:	e021      	b.n	800422c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041e8:	893b      	ldrh	r3, [r7, #8]
 80041ea:	0a1b      	lsrs	r3, r3, #8
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f8:	6a39      	ldr	r1, [r7, #32]
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f000 f9dc 	bl	80045b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00d      	beq.n	8004222 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	2b04      	cmp	r3, #4
 800420c:	d107      	bne.n	800421e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800421c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e005      	b.n	800422e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004222:	893b      	ldrh	r3, [r7, #8]
 8004224:	b2da      	uxtb	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3718      	adds	r7, #24
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	00010002 	.word	0x00010002

0800423c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b088      	sub	sp, #32
 8004240:	af02      	add	r7, sp, #8
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	4608      	mov	r0, r1
 8004246:	4611      	mov	r1, r2
 8004248:	461a      	mov	r2, r3
 800424a:	4603      	mov	r3, r0
 800424c:	817b      	strh	r3, [r7, #10]
 800424e:	460b      	mov	r3, r1
 8004250:	813b      	strh	r3, [r7, #8]
 8004252:	4613      	mov	r3, r2
 8004254:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004264:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004274:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	2200      	movs	r2, #0
 800427e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 f8c2 	bl	800440c <I2C_WaitOnFlagUntilTimeout>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00d      	beq.n	80042aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004298:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800429c:	d103      	bne.n	80042a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e0aa      	b.n	8004400 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042aa:	897b      	ldrh	r3, [r7, #10]
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	461a      	mov	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	6a3a      	ldr	r2, [r7, #32]
 80042be:	4952      	ldr	r1, [pc, #328]	; (8004408 <I2C_RequestMemoryRead+0x1cc>)
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 f8fa 	bl	80044ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e097      	b.n	8004400 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042d0:	2300      	movs	r3, #0
 80042d2:	617b      	str	r3, [r7, #20]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	617b      	str	r3, [r7, #20]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	617b      	str	r3, [r7, #20]
 80042e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e8:	6a39      	ldr	r1, [r7, #32]
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 f964 	bl	80045b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00d      	beq.n	8004312 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	2b04      	cmp	r3, #4
 80042fc:	d107      	bne.n	800430e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800430c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e076      	b.n	8004400 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004312:	88fb      	ldrh	r3, [r7, #6]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d105      	bne.n	8004324 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004318:	893b      	ldrh	r3, [r7, #8]
 800431a:	b2da      	uxtb	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	611a      	str	r2, [r3, #16]
 8004322:	e021      	b.n	8004368 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004324:	893b      	ldrh	r3, [r7, #8]
 8004326:	0a1b      	lsrs	r3, r3, #8
 8004328:	b29b      	uxth	r3, r3
 800432a:	b2da      	uxtb	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004334:	6a39      	ldr	r1, [r7, #32]
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 f93e 	bl	80045b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00d      	beq.n	800435e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	2b04      	cmp	r3, #4
 8004348:	d107      	bne.n	800435a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004358:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e050      	b.n	8004400 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800435e:	893b      	ldrh	r3, [r7, #8]
 8004360:	b2da      	uxtb	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800436a:	6a39      	ldr	r1, [r7, #32]
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 f923 	bl	80045b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00d      	beq.n	8004394 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437c:	2b04      	cmp	r3, #4
 800437e:	d107      	bne.n	8004390 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800438e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e035      	b.n	8004400 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	f000 f82b 	bl	800440c <I2C_WaitOnFlagUntilTimeout>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00d      	beq.n	80043d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043ca:	d103      	bne.n	80043d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e013      	b.n	8004400 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80043d8:	897b      	ldrh	r3, [r7, #10]
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	f043 0301 	orr.w	r3, r3, #1
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	6a3a      	ldr	r2, [r7, #32]
 80043ec:	4906      	ldr	r1, [pc, #24]	; (8004408 <I2C_RequestMemoryRead+0x1cc>)
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 f863 	bl	80044ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e000      	b.n	8004400 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3718      	adds	r7, #24
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	00010002 	.word	0x00010002

0800440c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	603b      	str	r3, [r7, #0]
 8004418:	4613      	mov	r3, r2
 800441a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800441c:	e025      	b.n	800446a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004424:	d021      	beq.n	800446a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004426:	f7fe fc4b 	bl	8002cc0 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	429a      	cmp	r2, r3
 8004434:	d302      	bcc.n	800443c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d116      	bne.n	800446a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2220      	movs	r2, #32
 8004446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f043 0220 	orr.w	r2, r3, #32
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e023      	b.n	80044b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	0c1b      	lsrs	r3, r3, #16
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b01      	cmp	r3, #1
 8004472:	d10d      	bne.n	8004490 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	43da      	mvns	r2, r3
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	4013      	ands	r3, r2
 8004480:	b29b      	uxth	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	bf0c      	ite	eq
 8004486:	2301      	moveq	r3, #1
 8004488:	2300      	movne	r3, #0
 800448a:	b2db      	uxtb	r3, r3
 800448c:	461a      	mov	r2, r3
 800448e:	e00c      	b.n	80044aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	43da      	mvns	r2, r3
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	4013      	ands	r3, r2
 800449c:	b29b      	uxth	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	bf0c      	ite	eq
 80044a2:	2301      	moveq	r3, #1
 80044a4:	2300      	movne	r3, #0
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	461a      	mov	r2, r3
 80044aa:	79fb      	ldrb	r3, [r7, #7]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d0b6      	beq.n	800441e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b084      	sub	sp, #16
 80044be:	af00      	add	r7, sp, #0
 80044c0:	60f8      	str	r0, [r7, #12]
 80044c2:	60b9      	str	r1, [r7, #8]
 80044c4:	607a      	str	r2, [r7, #4]
 80044c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044c8:	e051      	b.n	800456e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d8:	d123      	bne.n	8004522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2220      	movs	r2, #32
 80044fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	f043 0204 	orr.w	r2, r3, #4
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e046      	b.n	80045b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004528:	d021      	beq.n	800456e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800452a:	f7fe fbc9 	bl	8002cc0 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	429a      	cmp	r2, r3
 8004538:	d302      	bcc.n	8004540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d116      	bne.n	800456e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2220      	movs	r2, #32
 800454a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	f043 0220 	orr.w	r2, r3, #32
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e020      	b.n	80045b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	0c1b      	lsrs	r3, r3, #16
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b01      	cmp	r3, #1
 8004576:	d10c      	bne.n	8004592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	43da      	mvns	r2, r3
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	4013      	ands	r3, r2
 8004584:	b29b      	uxth	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	bf14      	ite	ne
 800458a:	2301      	movne	r3, #1
 800458c:	2300      	moveq	r3, #0
 800458e:	b2db      	uxtb	r3, r3
 8004590:	e00b      	b.n	80045aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	43da      	mvns	r2, r3
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	4013      	ands	r3, r2
 800459e:	b29b      	uxth	r3, r3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	bf14      	ite	ne
 80045a4:	2301      	movne	r3, #1
 80045a6:	2300      	moveq	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d18d      	bne.n	80044ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045c4:	e02d      	b.n	8004622 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 f8ce 	bl	8004768 <I2C_IsAcknowledgeFailed>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e02d      	b.n	8004632 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045dc:	d021      	beq.n	8004622 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045de:	f7fe fb6f 	bl	8002cc0 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d302      	bcc.n	80045f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d116      	bne.n	8004622 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2220      	movs	r2, #32
 80045fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	f043 0220 	orr.w	r2, r3, #32
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e007      	b.n	8004632 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462c:	2b80      	cmp	r3, #128	; 0x80
 800462e:	d1ca      	bne.n	80045c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b084      	sub	sp, #16
 800463e:	af00      	add	r7, sp, #0
 8004640:	60f8      	str	r0, [r7, #12]
 8004642:	60b9      	str	r1, [r7, #8]
 8004644:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004646:	e02d      	b.n	80046a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 f88d 	bl	8004768 <I2C_IsAcknowledgeFailed>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e02d      	b.n	80046b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465e:	d021      	beq.n	80046a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004660:	f7fe fb2e 	bl	8002cc0 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	429a      	cmp	r2, r3
 800466e:	d302      	bcc.n	8004676 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d116      	bne.n	80046a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2220      	movs	r2, #32
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004690:	f043 0220 	orr.w	r2, r3, #32
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e007      	b.n	80046b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	f003 0304 	and.w	r3, r3, #4
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	d1ca      	bne.n	8004648 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046c8:	e042      	b.n	8004750 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	f003 0310 	and.w	r3, r3, #16
 80046d4:	2b10      	cmp	r3, #16
 80046d6:	d119      	bne.n	800470c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f06f 0210 	mvn.w	r2, #16
 80046e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2220      	movs	r2, #32
 80046ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e029      	b.n	8004760 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800470c:	f7fe fad8 	bl	8002cc0 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	429a      	cmp	r2, r3
 800471a:	d302      	bcc.n	8004722 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d116      	bne.n	8004750 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2220      	movs	r2, #32
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473c:	f043 0220 	orr.w	r2, r3, #32
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e007      	b.n	8004760 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475a:	2b40      	cmp	r3, #64	; 0x40
 800475c:	d1b5      	bne.n	80046ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800477a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800477e:	d11b      	bne.n	80047b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004788:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2220      	movs	r2, #32
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a4:	f043 0204 	orr.w	r2, r3, #4
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e000      	b.n	80047ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b083      	sub	sp, #12
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
 80047ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b20      	cmp	r3, #32
 80047da:	d129      	bne.n	8004830 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2224      	movs	r2, #36	; 0x24
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 0201 	bic.w	r2, r2, #1
 80047f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0210 	bic.w	r2, r2, #16
 8004802:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	430a      	orrs	r2, r1
 8004812:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0201 	orr.w	r2, r2, #1
 8004822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2220      	movs	r2, #32
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800482c:	2300      	movs	r3, #0
 800482e:	e000      	b.n	8004832 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004830:	2302      	movs	r3, #2
  }
}
 8004832:	4618      	mov	r0, r3
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800483e:	b480      	push	{r7}
 8004840:	b085      	sub	sp, #20
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
 8004846:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004848:	2300      	movs	r3, #0
 800484a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b20      	cmp	r3, #32
 8004856:	d12a      	bne.n	80048ae <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2224      	movs	r2, #36	; 0x24
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0201 	bic.w	r2, r2, #1
 800486e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004878:	89fb      	ldrh	r3, [r7, #14]
 800487a:	f023 030f 	bic.w	r3, r3, #15
 800487e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	b29a      	uxth	r2, r3
 8004884:	89fb      	ldrh	r3, [r7, #14]
 8004886:	4313      	orrs	r3, r2
 8004888:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	89fa      	ldrh	r2, [r7, #14]
 8004890:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f042 0201 	orr.w	r2, r2, #1
 80048a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80048aa:	2300      	movs	r3, #0
 80048ac:	e000      	b.n	80048b0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80048ae:	2302      	movs	r3, #2
  }
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80048bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048be:	b08f      	sub	sp, #60	; 0x3c
 80048c0:	af0a      	add	r7, sp, #40	; 0x28
 80048c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e10f      	b.n	8004aee <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d106      	bne.n	80048ee <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f007 fa83 	bl	800bdf4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2203      	movs	r2, #3
 80048f2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d102      	bne.n	8004908 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4618      	mov	r0, r3
 800490e:	f003 fc26 	bl	800815e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	603b      	str	r3, [r7, #0]
 8004918:	687e      	ldr	r6, [r7, #4]
 800491a:	466d      	mov	r5, sp
 800491c:	f106 0410 	add.w	r4, r6, #16
 8004920:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004922:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004924:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004926:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004928:	e894 0003 	ldmia.w	r4, {r0, r1}
 800492c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004930:	1d33      	adds	r3, r6, #4
 8004932:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004934:	6838      	ldr	r0, [r7, #0]
 8004936:	f003 fafd 	bl	8007f34 <USB_CoreInit>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d005      	beq.n	800494c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e0d0      	b.n	8004aee <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2100      	movs	r1, #0
 8004952:	4618      	mov	r0, r3
 8004954:	f003 fc14 	bl	8008180 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004958:	2300      	movs	r3, #0
 800495a:	73fb      	strb	r3, [r7, #15]
 800495c:	e04a      	b.n	80049f4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800495e:	7bfa      	ldrb	r2, [r7, #15]
 8004960:	6879      	ldr	r1, [r7, #4]
 8004962:	4613      	mov	r3, r2
 8004964:	00db      	lsls	r3, r3, #3
 8004966:	1a9b      	subs	r3, r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	440b      	add	r3, r1
 800496c:	333d      	adds	r3, #61	; 0x3d
 800496e:	2201      	movs	r2, #1
 8004970:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004972:	7bfa      	ldrb	r2, [r7, #15]
 8004974:	6879      	ldr	r1, [r7, #4]
 8004976:	4613      	mov	r3, r2
 8004978:	00db      	lsls	r3, r3, #3
 800497a:	1a9b      	subs	r3, r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	440b      	add	r3, r1
 8004980:	333c      	adds	r3, #60	; 0x3c
 8004982:	7bfa      	ldrb	r2, [r7, #15]
 8004984:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004986:	7bfa      	ldrb	r2, [r7, #15]
 8004988:	7bfb      	ldrb	r3, [r7, #15]
 800498a:	b298      	uxth	r0, r3
 800498c:	6879      	ldr	r1, [r7, #4]
 800498e:	4613      	mov	r3, r2
 8004990:	00db      	lsls	r3, r3, #3
 8004992:	1a9b      	subs	r3, r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	440b      	add	r3, r1
 8004998:	3342      	adds	r3, #66	; 0x42
 800499a:	4602      	mov	r2, r0
 800499c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800499e:	7bfa      	ldrb	r2, [r7, #15]
 80049a0:	6879      	ldr	r1, [r7, #4]
 80049a2:	4613      	mov	r3, r2
 80049a4:	00db      	lsls	r3, r3, #3
 80049a6:	1a9b      	subs	r3, r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	440b      	add	r3, r1
 80049ac:	333f      	adds	r3, #63	; 0x3f
 80049ae:	2200      	movs	r2, #0
 80049b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80049b2:	7bfa      	ldrb	r2, [r7, #15]
 80049b4:	6879      	ldr	r1, [r7, #4]
 80049b6:	4613      	mov	r3, r2
 80049b8:	00db      	lsls	r3, r3, #3
 80049ba:	1a9b      	subs	r3, r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	440b      	add	r3, r1
 80049c0:	3344      	adds	r3, #68	; 0x44
 80049c2:	2200      	movs	r2, #0
 80049c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80049c6:	7bfa      	ldrb	r2, [r7, #15]
 80049c8:	6879      	ldr	r1, [r7, #4]
 80049ca:	4613      	mov	r3, r2
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	1a9b      	subs	r3, r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	440b      	add	r3, r1
 80049d4:	3348      	adds	r3, #72	; 0x48
 80049d6:	2200      	movs	r2, #0
 80049d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80049da:	7bfa      	ldrb	r2, [r7, #15]
 80049dc:	6879      	ldr	r1, [r7, #4]
 80049de:	4613      	mov	r3, r2
 80049e0:	00db      	lsls	r3, r3, #3
 80049e2:	1a9b      	subs	r3, r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	440b      	add	r3, r1
 80049e8:	3350      	adds	r3, #80	; 0x50
 80049ea:	2200      	movs	r2, #0
 80049ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049ee:	7bfb      	ldrb	r3, [r7, #15]
 80049f0:	3301      	adds	r3, #1
 80049f2:	73fb      	strb	r3, [r7, #15]
 80049f4:	7bfa      	ldrb	r2, [r7, #15]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d3af      	bcc.n	800495e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049fe:	2300      	movs	r3, #0
 8004a00:	73fb      	strb	r3, [r7, #15]
 8004a02:	e044      	b.n	8004a8e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004a04:	7bfa      	ldrb	r2, [r7, #15]
 8004a06:	6879      	ldr	r1, [r7, #4]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	1a9b      	subs	r3, r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	440b      	add	r3, r1
 8004a12:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004a16:	2200      	movs	r2, #0
 8004a18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004a1a:	7bfa      	ldrb	r2, [r7, #15]
 8004a1c:	6879      	ldr	r1, [r7, #4]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	00db      	lsls	r3, r3, #3
 8004a22:	1a9b      	subs	r3, r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	440b      	add	r3, r1
 8004a28:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004a2c:	7bfa      	ldrb	r2, [r7, #15]
 8004a2e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a30:	7bfa      	ldrb	r2, [r7, #15]
 8004a32:	6879      	ldr	r1, [r7, #4]
 8004a34:	4613      	mov	r3, r2
 8004a36:	00db      	lsls	r3, r3, #3
 8004a38:	1a9b      	subs	r3, r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	440b      	add	r3, r1
 8004a3e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004a42:	2200      	movs	r2, #0
 8004a44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a46:	7bfa      	ldrb	r2, [r7, #15]
 8004a48:	6879      	ldr	r1, [r7, #4]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	1a9b      	subs	r3, r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	440b      	add	r3, r1
 8004a54:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004a58:	2200      	movs	r2, #0
 8004a5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004a5c:	7bfa      	ldrb	r2, [r7, #15]
 8004a5e:	6879      	ldr	r1, [r7, #4]
 8004a60:	4613      	mov	r3, r2
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	1a9b      	subs	r3, r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	440b      	add	r3, r1
 8004a6a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004a6e:	2200      	movs	r2, #0
 8004a70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a72:	7bfa      	ldrb	r2, [r7, #15]
 8004a74:	6879      	ldr	r1, [r7, #4]
 8004a76:	4613      	mov	r3, r2
 8004a78:	00db      	lsls	r3, r3, #3
 8004a7a:	1a9b      	subs	r3, r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	440b      	add	r3, r1
 8004a80:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004a84:	2200      	movs	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a88:	7bfb      	ldrb	r3, [r7, #15]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	73fb      	strb	r3, [r7, #15]
 8004a8e:	7bfa      	ldrb	r2, [r7, #15]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d3b5      	bcc.n	8004a04 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	603b      	str	r3, [r7, #0]
 8004a9e:	687e      	ldr	r6, [r7, #4]
 8004aa0:	466d      	mov	r5, sp
 8004aa2:	f106 0410 	add.w	r4, r6, #16
 8004aa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004aa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004aaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004aac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004aae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ab2:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ab6:	1d33      	adds	r3, r6, #4
 8004ab8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004aba:	6838      	ldr	r0, [r7, #0]
 8004abc:	f003 fbac 	bl	8008218 <USB_DevInit>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d005      	beq.n	8004ad2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2202      	movs	r2, #2
 8004aca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e00d      	b.n	8004aee <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f004 fc28 	bl	800933c <USB_DevDisconnect>

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004af6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b084      	sub	sp, #16
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d101      	bne.n	8004b12 <HAL_PCD_Start+0x1c>
 8004b0e:	2302      	movs	r3, #2
 8004b10:	e020      	b.n	8004b54 <HAL_PCD_Start+0x5e>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d109      	bne.n	8004b36 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d005      	beq.n	8004b36 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f003 fafe 	bl	800813c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f004 fbd8 	bl	80092fa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004b5c:	b590      	push	{r4, r7, lr}
 8004b5e:	b08d      	sub	sp, #52	; 0x34
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b6a:	6a3b      	ldr	r3, [r7, #32]
 8004b6c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f004 fc96 	bl	80094a4 <USB_GetMode>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f040 839d 	bne.w	80052ba <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f004 fbfa 	bl	800937e <USB_ReadInterrupts>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 8393 	beq.w	80052b8 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f004 fbf1 	bl	800937e <USB_ReadInterrupts>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d107      	bne.n	8004bb6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	695a      	ldr	r2, [r3, #20]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f002 0202 	and.w	r2, r2, #2
 8004bb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f004 fbdf 	bl	800937e <USB_ReadInterrupts>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	f003 0310 	and.w	r3, r3, #16
 8004bc6:	2b10      	cmp	r3, #16
 8004bc8:	d161      	bne.n	8004c8e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	699a      	ldr	r2, [r3, #24]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 0210 	bic.w	r2, r2, #16
 8004bd8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004bda:	6a3b      	ldr	r3, [r7, #32]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	f003 020f 	and.w	r2, r3, #15
 8004be6:	4613      	mov	r3, r2
 8004be8:	00db      	lsls	r3, r3, #3
 8004bea:	1a9b      	subs	r3, r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	0c5b      	lsrs	r3, r3, #17
 8004bfe:	f003 030f 	and.w	r3, r3, #15
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d124      	bne.n	8004c50 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d035      	beq.n	8004c7e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	091b      	lsrs	r3, r3, #4
 8004c1a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004c1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	461a      	mov	r2, r3
 8004c24:	6a38      	ldr	r0, [r7, #32]
 8004c26:	f004 fa16 	bl	8009056 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	68da      	ldr	r2, [r3, #12]
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	091b      	lsrs	r3, r3, #4
 8004c32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c36:	441a      	add	r2, r3
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	699a      	ldr	r2, [r3, #24]
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	091b      	lsrs	r3, r3, #4
 8004c44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c48:	441a      	add	r2, r3
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	619a      	str	r2, [r3, #24]
 8004c4e:	e016      	b.n	8004c7e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	0c5b      	lsrs	r3, r3, #17
 8004c54:	f003 030f 	and.w	r3, r3, #15
 8004c58:	2b06      	cmp	r3, #6
 8004c5a:	d110      	bne.n	8004c7e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004c62:	2208      	movs	r2, #8
 8004c64:	4619      	mov	r1, r3
 8004c66:	6a38      	ldr	r0, [r7, #32]
 8004c68:	f004 f9f5 	bl	8009056 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	699a      	ldr	r2, [r3, #24]
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	091b      	lsrs	r3, r3, #4
 8004c74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c78:	441a      	add	r2, r3
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	699a      	ldr	r2, [r3, #24]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f042 0210 	orr.w	r2, r2, #16
 8004c8c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f004 fb73 	bl	800937e <USB_ReadInterrupts>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c9e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ca2:	d16e      	bne.n	8004d82 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4618      	mov	r0, r3
 8004cae:	f004 fb79 	bl	80093a4 <USB_ReadDevAllOutEpInterrupt>
 8004cb2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004cb4:	e062      	b.n	8004d7c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d057      	beq.n	8004d70 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cc6:	b2d2      	uxtb	r2, r2
 8004cc8:	4611      	mov	r1, r2
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f004 fb9e 	bl	800940c <USB_ReadDevOutEPInterrupt>
 8004cd0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00c      	beq.n	8004cf6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce8:	461a      	mov	r2, r3
 8004cea:	2301      	movs	r3, #1
 8004cec:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004cee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 fdb1 	bl	8005858 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	f003 0308 	and.w	r3, r3, #8
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00c      	beq.n	8004d1a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	015a      	lsls	r2, r3, #5
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	4413      	add	r3, r2
 8004d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	2308      	movs	r3, #8
 8004d10:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004d12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 feab 	bl	8005a70 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	f003 0310 	and.w	r3, r3, #16
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d008      	beq.n	8004d36 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	015a      	lsls	r2, r3, #5
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d30:	461a      	mov	r2, r3
 8004d32:	2310      	movs	r3, #16
 8004d34:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	f003 0320 	and.w	r3, r3, #32
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d008      	beq.n	8004d52 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	2320      	movs	r3, #32
 8004d50:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d009      	beq.n	8004d70 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d68:	461a      	mov	r2, r3
 8004d6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d6e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d72:	3301      	adds	r3, #1
 8004d74:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d78:	085b      	lsrs	r3, r3, #1
 8004d7a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d199      	bne.n	8004cb6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f004 faf9 	bl	800937e <USB_ReadInterrupts>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d96:	f040 80c0 	bne.w	8004f1a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f004 fb1a 	bl	80093d8 <USB_ReadDevAllInEpInterrupt>
 8004da4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004da6:	2300      	movs	r3, #0
 8004da8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004daa:	e0b2      	b.n	8004f12 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 80a7 	beq.w	8004f06 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	4611      	mov	r1, r2
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f004 fb40 	bl	8009448 <USB_ReadDevInEPInterrupt>
 8004dc8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d057      	beq.n	8004e84 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd6:	f003 030f 	and.w	r3, r3, #15
 8004dda:	2201      	movs	r2, #1
 8004ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8004de0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	43db      	mvns	r3, r3
 8004dee:	69f9      	ldr	r1, [r7, #28]
 8004df0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004df4:	4013      	ands	r3, r2
 8004df6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e04:	461a      	mov	r2, r3
 8004e06:	2301      	movs	r3, #1
 8004e08:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d132      	bne.n	8004e78 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004e12:	6879      	ldr	r1, [r7, #4]
 8004e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e16:	4613      	mov	r3, r2
 8004e18:	00db      	lsls	r3, r3, #3
 8004e1a:	1a9b      	subs	r3, r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	440b      	add	r3, r1
 8004e20:	3348      	adds	r3, #72	; 0x48
 8004e22:	6819      	ldr	r1, [r3, #0]
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e28:	4613      	mov	r3, r2
 8004e2a:	00db      	lsls	r3, r3, #3
 8004e2c:	1a9b      	subs	r3, r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4403      	add	r3, r0
 8004e32:	3344      	adds	r3, #68	; 0x44
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4419      	add	r1, r3
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	1a9b      	subs	r3, r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4403      	add	r3, r0
 8004e46:	3348      	adds	r3, #72	; 0x48
 8004e48:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d113      	bne.n	8004e78 <HAL_PCD_IRQHandler+0x31c>
 8004e50:	6879      	ldr	r1, [r7, #4]
 8004e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e54:	4613      	mov	r3, r2
 8004e56:	00db      	lsls	r3, r3, #3
 8004e58:	1a9b      	subs	r3, r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	440b      	add	r3, r1
 8004e5e:	3350      	adds	r3, #80	; 0x50
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d108      	bne.n	8004e78 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6818      	ldr	r0, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004e70:	461a      	mov	r2, r3
 8004e72:	2101      	movs	r1, #1
 8004e74:	f004 fb48 	bl	8009508 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f007 f847 	bl	800bf12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	f003 0308 	and.w	r3, r3, #8
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d008      	beq.n	8004ea0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	015a      	lsls	r2, r3, #5
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	4413      	add	r3, r2
 8004e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	2308      	movs	r3, #8
 8004e9e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f003 0310 	and.w	r3, r3, #16
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d008      	beq.n	8004ebc <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	015a      	lsls	r2, r3, #5
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	2310      	movs	r3, #16
 8004eba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d008      	beq.n	8004ed8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	2340      	movs	r3, #64	; 0x40
 8004ed6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d008      	beq.n	8004ef4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee4:	015a      	lsls	r2, r3, #5
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eee:	461a      	mov	r2, r3
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004efe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 fc1b 	bl	800573c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	3301      	adds	r3, #1
 8004f0a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0e:	085b      	lsrs	r3, r3, #1
 8004f10:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f47f af49 	bne.w	8004dac <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f004 fa2d 	bl	800937e <USB_ReadInterrupts>
 8004f24:	4603      	mov	r3, r0
 8004f26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f2e:	d122      	bne.n	8004f76 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	69fa      	ldr	r2, [r7, #28]
 8004f3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f3e:	f023 0301 	bic.w	r3, r3, #1
 8004f42:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d108      	bne.n	8004f60 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004f56:	2100      	movs	r1, #0
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 fe27 	bl	8005bac <HAL_PCDEx_LPM_Callback>
 8004f5e:	e002      	b.n	8004f66 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f007 f84d 	bl	800c000 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	695a      	ldr	r2, [r3, #20]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004f74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f004 f9ff 	bl	800937e <USB_ReadInterrupts>
 8004f80:	4603      	mov	r3, r0
 8004f82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f8a:	d112      	bne.n	8004fb2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d102      	bne.n	8004fa2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f007 f809 	bl	800bfb4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	695a      	ldr	r2, [r3, #20]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004fb0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f004 f9e1 	bl	800937e <USB_ReadInterrupts>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fc6:	f040 80c7 	bne.w	8005158 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	69fa      	ldr	r2, [r7, #28]
 8004fd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fd8:	f023 0301 	bic.w	r3, r3, #1
 8004fdc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2110      	movs	r1, #16
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f003 fa7b 	bl	80084e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fea:	2300      	movs	r3, #0
 8004fec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fee:	e056      	b.n	800509e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff2:	015a      	lsls	r2, r3, #5
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005002:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	4413      	add	r3, r2
 800500c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005014:	0151      	lsls	r1, r2, #5
 8005016:	69fa      	ldr	r2, [r7, #28]
 8005018:	440a      	add	r2, r1
 800501a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800501e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005022:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	4413      	add	r3, r2
 800502c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005034:	0151      	lsls	r1, r2, #5
 8005036:	69fa      	ldr	r2, [r7, #28]
 8005038:	440a      	add	r2, r1
 800503a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800503e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005042:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	4413      	add	r3, r2
 800504c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005050:	461a      	mov	r2, r3
 8005052:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005056:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005068:	0151      	lsls	r1, r2, #5
 800506a:	69fa      	ldr	r2, [r7, #28]
 800506c:	440a      	add	r2, r1
 800506e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005072:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005076:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	4413      	add	r3, r2
 8005080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005088:	0151      	lsls	r1, r2, #5
 800508a:	69fa      	ldr	r2, [r7, #28]
 800508c:	440a      	add	r2, r1
 800508e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005092:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005096:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509a:	3301      	adds	r3, #1
 800509c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d3a3      	bcc.n	8004ff0 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ae:	69db      	ldr	r3, [r3, #28]
 80050b0:	69fa      	ldr	r2, [r7, #28]
 80050b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050b6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80050ba:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d016      	beq.n	80050f2 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050ce:	69fa      	ldr	r2, [r7, #28]
 80050d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050d4:	f043 030b 	orr.w	r3, r3, #11
 80050d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e4:	69fa      	ldr	r2, [r7, #28]
 80050e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050ea:	f043 030b 	orr.w	r3, r3, #11
 80050ee:	6453      	str	r3, [r2, #68]	; 0x44
 80050f0:	e015      	b.n	800511e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	69fa      	ldr	r2, [r7, #28]
 80050fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005100:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005104:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005108:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	69fa      	ldr	r2, [r7, #28]
 8005114:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005118:	f043 030b 	orr.w	r3, r3, #11
 800511c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	69fa      	ldr	r2, [r7, #28]
 8005128:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800512c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005130:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6818      	ldr	r0, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005142:	461a      	mov	r2, r3
 8005144:	f004 f9e0 	bl	8009508 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	695a      	ldr	r2, [r3, #20]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005156:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4618      	mov	r0, r3
 800515e:	f004 f90e 	bl	800937e <USB_ReadInterrupts>
 8005162:	4603      	mov	r3, r0
 8005164:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005168:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800516c:	d124      	bne.n	80051b8 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4618      	mov	r0, r3
 8005174:	f004 f9a4 	bl	80094c0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4618      	mov	r0, r3
 800517e:	f003 fa0c 	bl	800859a <USB_GetDevSpeed>
 8005182:	4603      	mov	r3, r0
 8005184:	461a      	mov	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681c      	ldr	r4, [r3, #0]
 800518e:	f001 f957 	bl	8006440 <HAL_RCC_GetHCLKFreq>
 8005192:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005198:	b2db      	uxtb	r3, r3
 800519a:	461a      	mov	r2, r3
 800519c:	4620      	mov	r0, r4
 800519e:	f002 ff2b 	bl	8007ff8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f006 fedd 	bl	800bf62 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	695a      	ldr	r2, [r3, #20]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80051b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4618      	mov	r0, r3
 80051be:	f004 f8de 	bl	800937e <USB_ReadInterrupts>
 80051c2:	4603      	mov	r3, r0
 80051c4:	f003 0308 	and.w	r3, r3, #8
 80051c8:	2b08      	cmp	r3, #8
 80051ca:	d10a      	bne.n	80051e2 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f006 feba 	bl	800bf46 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	695a      	ldr	r2, [r3, #20]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f002 0208 	and.w	r2, r2, #8
 80051e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f004 f8c9 	bl	800937e <USB_ReadInterrupts>
 80051ec:	4603      	mov	r3, r0
 80051ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051f6:	d10f      	bne.n	8005218 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80051f8:	2300      	movs	r3, #0
 80051fa:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	4619      	mov	r1, r3
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f006 ff1c 	bl	800c040 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	695a      	ldr	r2, [r3, #20]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005216:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4618      	mov	r0, r3
 800521e:	f004 f8ae 	bl	800937e <USB_ReadInterrupts>
 8005222:	4603      	mov	r3, r0
 8005224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005228:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800522c:	d10f      	bne.n	800524e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	b2db      	uxtb	r3, r3
 8005236:	4619      	mov	r1, r3
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f006 feef 	bl	800c01c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	695a      	ldr	r2, [r3, #20]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800524c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4618      	mov	r0, r3
 8005254:	f004 f893 	bl	800937e <USB_ReadInterrupts>
 8005258:	4603      	mov	r3, r0
 800525a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800525e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005262:	d10a      	bne.n	800527a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f006 fefd 	bl	800c064 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	695a      	ldr	r2, [r3, #20]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005278:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4618      	mov	r0, r3
 8005280:	f004 f87d 	bl	800937e <USB_ReadInterrupts>
 8005284:	4603      	mov	r3, r0
 8005286:	f003 0304 	and.w	r3, r3, #4
 800528a:	2b04      	cmp	r3, #4
 800528c:	d115      	bne.n	80052ba <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	f003 0304 	and.w	r3, r3, #4
 800529c:	2b00      	cmp	r3, #0
 800529e:	d002      	beq.n	80052a6 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f006 feed 	bl	800c080 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6859      	ldr	r1, [r3, #4]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	605a      	str	r2, [r3, #4]
 80052b6:	e000      	b.n	80052ba <HAL_PCD_IRQHandler+0x75e>
      return;
 80052b8:	bf00      	nop
    }
  }
}
 80052ba:	3734      	adds	r7, #52	; 0x34
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd90      	pop	{r4, r7, pc}

080052c0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	460b      	mov	r3, r1
 80052ca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d101      	bne.n	80052da <HAL_PCD_SetAddress+0x1a>
 80052d6:	2302      	movs	r3, #2
 80052d8:	e013      	b.n	8005302 <HAL_PCD_SetAddress+0x42>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	78fa      	ldrb	r2, [r7, #3]
 80052e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	78fa      	ldrb	r2, [r7, #3]
 80052f0:	4611      	mov	r1, r2
 80052f2:	4618      	mov	r0, r3
 80052f4:	f003 ffdb 	bl	80092ae <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b084      	sub	sp, #16
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
 8005312:	4608      	mov	r0, r1
 8005314:	4611      	mov	r1, r2
 8005316:	461a      	mov	r2, r3
 8005318:	4603      	mov	r3, r0
 800531a:	70fb      	strb	r3, [r7, #3]
 800531c:	460b      	mov	r3, r1
 800531e:	803b      	strh	r3, [r7, #0]
 8005320:	4613      	mov	r3, r2
 8005322:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005324:	2300      	movs	r3, #0
 8005326:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005328:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800532c:	2b00      	cmp	r3, #0
 800532e:	da0f      	bge.n	8005350 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005330:	78fb      	ldrb	r3, [r7, #3]
 8005332:	f003 020f 	and.w	r2, r3, #15
 8005336:	4613      	mov	r3, r2
 8005338:	00db      	lsls	r3, r3, #3
 800533a:	1a9b      	subs	r3, r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	3338      	adds	r3, #56	; 0x38
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	4413      	add	r3, r2
 8005344:	3304      	adds	r3, #4
 8005346:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2201      	movs	r2, #1
 800534c:	705a      	strb	r2, [r3, #1]
 800534e:	e00f      	b.n	8005370 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005350:	78fb      	ldrb	r3, [r7, #3]
 8005352:	f003 020f 	and.w	r2, r3, #15
 8005356:	4613      	mov	r3, r2
 8005358:	00db      	lsls	r3, r3, #3
 800535a:	1a9b      	subs	r3, r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	4413      	add	r3, r2
 8005366:	3304      	adds	r3, #4
 8005368:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005370:	78fb      	ldrb	r3, [r7, #3]
 8005372:	f003 030f 	and.w	r3, r3, #15
 8005376:	b2da      	uxtb	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800537c:	883a      	ldrh	r2, [r7, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	78ba      	ldrb	r2, [r7, #2]
 8005386:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	785b      	ldrb	r3, [r3, #1]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d004      	beq.n	800539a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	b29a      	uxth	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800539a:	78bb      	ldrb	r3, [r7, #2]
 800539c:	2b02      	cmp	r3, #2
 800539e:	d102      	bne.n	80053a6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2200      	movs	r2, #0
 80053a4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d101      	bne.n	80053b4 <HAL_PCD_EP_Open+0xaa>
 80053b0:	2302      	movs	r3, #2
 80053b2:	e00e      	b.n	80053d2 <HAL_PCD_EP_Open+0xc8>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68f9      	ldr	r1, [r7, #12]
 80053c2:	4618      	mov	r0, r3
 80053c4:	f003 f90e 	bl	80085e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80053d0:	7afb      	ldrb	r3, [r7, #11]
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b084      	sub	sp, #16
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
 80053e2:	460b      	mov	r3, r1
 80053e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80053e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	da0f      	bge.n	800540e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053ee:	78fb      	ldrb	r3, [r7, #3]
 80053f0:	f003 020f 	and.w	r2, r3, #15
 80053f4:	4613      	mov	r3, r2
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	1a9b      	subs	r3, r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	3338      	adds	r3, #56	; 0x38
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	4413      	add	r3, r2
 8005402:	3304      	adds	r3, #4
 8005404:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2201      	movs	r2, #1
 800540a:	705a      	strb	r2, [r3, #1]
 800540c:	e00f      	b.n	800542e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800540e:	78fb      	ldrb	r3, [r7, #3]
 8005410:	f003 020f 	and.w	r2, r3, #15
 8005414:	4613      	mov	r3, r2
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	1a9b      	subs	r3, r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	4413      	add	r3, r2
 8005424:	3304      	adds	r3, #4
 8005426:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800542e:	78fb      	ldrb	r3, [r7, #3]
 8005430:	f003 030f 	and.w	r3, r3, #15
 8005434:	b2da      	uxtb	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005440:	2b01      	cmp	r3, #1
 8005442:	d101      	bne.n	8005448 <HAL_PCD_EP_Close+0x6e>
 8005444:	2302      	movs	r3, #2
 8005446:	e00e      	b.n	8005466 <HAL_PCD_EP_Close+0x8c>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68f9      	ldr	r1, [r7, #12]
 8005456:	4618      	mov	r0, r3
 8005458:	f003 f94c 	bl	80086f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b086      	sub	sp, #24
 8005472:	af00      	add	r7, sp, #0
 8005474:	60f8      	str	r0, [r7, #12]
 8005476:	607a      	str	r2, [r7, #4]
 8005478:	603b      	str	r3, [r7, #0]
 800547a:	460b      	mov	r3, r1
 800547c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800547e:	7afb      	ldrb	r3, [r7, #11]
 8005480:	f003 020f 	and.w	r2, r3, #15
 8005484:	4613      	mov	r3, r2
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	1a9b      	subs	r3, r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	4413      	add	r3, r2
 8005494:	3304      	adds	r3, #4
 8005496:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	2200      	movs	r2, #0
 80054a8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	2200      	movs	r2, #0
 80054ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054b0:	7afb      	ldrb	r3, [r7, #11]
 80054b2:	f003 030f 	and.w	r3, r3, #15
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d102      	bne.n	80054ca <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80054ca:	7afb      	ldrb	r3, [r7, #11]
 80054cc:	f003 030f 	and.w	r3, r3, #15
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d109      	bne.n	80054e8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6818      	ldr	r0, [r3, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	461a      	mov	r2, r3
 80054e0:	6979      	ldr	r1, [r7, #20]
 80054e2:	f003 fc27 	bl	8008d34 <USB_EP0StartXfer>
 80054e6:	e008      	b.n	80054fa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6818      	ldr	r0, [r3, #0]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	461a      	mov	r2, r3
 80054f4:	6979      	ldr	r1, [r7, #20]
 80054f6:	f003 f9d9 	bl	80088ac <USB_EPStartXfer>
  }

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3718      	adds	r7, #24
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	460b      	mov	r3, r1
 800550e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005510:	78fb      	ldrb	r3, [r7, #3]
 8005512:	f003 020f 	and.w	r2, r3, #15
 8005516:	6879      	ldr	r1, [r7, #4]
 8005518:	4613      	mov	r3, r2
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	1a9b      	subs	r3, r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	440b      	add	r3, r1
 8005522:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005526:	681b      	ldr	r3, [r3, #0]
}
 8005528:	4618      	mov	r0, r3
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	607a      	str	r2, [r7, #4]
 800553e:	603b      	str	r3, [r7, #0]
 8005540:	460b      	mov	r3, r1
 8005542:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005544:	7afb      	ldrb	r3, [r7, #11]
 8005546:	f003 020f 	and.w	r2, r3, #15
 800554a:	4613      	mov	r3, r2
 800554c:	00db      	lsls	r3, r3, #3
 800554e:	1a9b      	subs	r3, r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	3338      	adds	r3, #56	; 0x38
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	4413      	add	r3, r2
 8005558:	3304      	adds	r3, #4
 800555a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	2200      	movs	r2, #0
 800556c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	2201      	movs	r2, #1
 8005572:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005574:	7afb      	ldrb	r3, [r7, #11]
 8005576:	f003 030f 	and.w	r3, r3, #15
 800557a:	b2da      	uxtb	r2, r3
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d102      	bne.n	800558e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800558e:	7afb      	ldrb	r3, [r7, #11]
 8005590:	f003 030f 	and.w	r3, r3, #15
 8005594:	2b00      	cmp	r3, #0
 8005596:	d109      	bne.n	80055ac <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6818      	ldr	r0, [r3, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	461a      	mov	r2, r3
 80055a4:	6979      	ldr	r1, [r7, #20]
 80055a6:	f003 fbc5 	bl	8008d34 <USB_EP0StartXfer>
 80055aa:	e008      	b.n	80055be <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6818      	ldr	r0, [r3, #0]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	461a      	mov	r2, r3
 80055b8:	6979      	ldr	r1, [r7, #20]
 80055ba:	f003 f977 	bl	80088ac <USB_EPStartXfer>
  }

  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3718      	adds	r7, #24
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	460b      	mov	r3, r1
 80055d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80055d4:	78fb      	ldrb	r3, [r7, #3]
 80055d6:	f003 020f 	and.w	r2, r3, #15
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d901      	bls.n	80055e6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e050      	b.n	8005688 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80055e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	da0f      	bge.n	800560e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055ee:	78fb      	ldrb	r3, [r7, #3]
 80055f0:	f003 020f 	and.w	r2, r3, #15
 80055f4:	4613      	mov	r3, r2
 80055f6:	00db      	lsls	r3, r3, #3
 80055f8:	1a9b      	subs	r3, r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	3338      	adds	r3, #56	; 0x38
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	4413      	add	r3, r2
 8005602:	3304      	adds	r3, #4
 8005604:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2201      	movs	r2, #1
 800560a:	705a      	strb	r2, [r3, #1]
 800560c:	e00d      	b.n	800562a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800560e:	78fa      	ldrb	r2, [r7, #3]
 8005610:	4613      	mov	r3, r2
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	1a9b      	subs	r3, r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	4413      	add	r3, r2
 8005620:	3304      	adds	r3, #4
 8005622:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2201      	movs	r2, #1
 800562e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005630:	78fb      	ldrb	r3, [r7, #3]
 8005632:	f003 030f 	and.w	r3, r3, #15
 8005636:	b2da      	uxtb	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005642:	2b01      	cmp	r3, #1
 8005644:	d101      	bne.n	800564a <HAL_PCD_EP_SetStall+0x82>
 8005646:	2302      	movs	r3, #2
 8005648:	e01e      	b.n	8005688 <HAL_PCD_EP_SetStall+0xc0>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68f9      	ldr	r1, [r7, #12]
 8005658:	4618      	mov	r0, r3
 800565a:	f003 fd54 	bl	8009106 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800565e:	78fb      	ldrb	r3, [r7, #3]
 8005660:	f003 030f 	and.w	r3, r3, #15
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10a      	bne.n	800567e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6818      	ldr	r0, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	b2d9      	uxtb	r1, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005678:	461a      	mov	r2, r3
 800567a:	f003 ff45 	bl	8009508 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	460b      	mov	r3, r1
 800569a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800569c:	78fb      	ldrb	r3, [r7, #3]
 800569e:	f003 020f 	and.w	r2, r3, #15
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d901      	bls.n	80056ae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e042      	b.n	8005734 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80056ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	da0f      	bge.n	80056d6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056b6:	78fb      	ldrb	r3, [r7, #3]
 80056b8:	f003 020f 	and.w	r2, r3, #15
 80056bc:	4613      	mov	r3, r2
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	1a9b      	subs	r3, r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	3338      	adds	r3, #56	; 0x38
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	4413      	add	r3, r2
 80056ca:	3304      	adds	r3, #4
 80056cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2201      	movs	r2, #1
 80056d2:	705a      	strb	r2, [r3, #1]
 80056d4:	e00f      	b.n	80056f6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056d6:	78fb      	ldrb	r3, [r7, #3]
 80056d8:	f003 020f 	and.w	r2, r3, #15
 80056dc:	4613      	mov	r3, r2
 80056de:	00db      	lsls	r3, r3, #3
 80056e0:	1a9b      	subs	r3, r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	4413      	add	r3, r2
 80056ec:	3304      	adds	r3, #4
 80056ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056fc:	78fb      	ldrb	r3, [r7, #3]
 80056fe:	f003 030f 	and.w	r3, r3, #15
 8005702:	b2da      	uxtb	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800570e:	2b01      	cmp	r3, #1
 8005710:	d101      	bne.n	8005716 <HAL_PCD_EP_ClrStall+0x86>
 8005712:	2302      	movs	r3, #2
 8005714:	e00e      	b.n	8005734 <HAL_PCD_EP_ClrStall+0xa4>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68f9      	ldr	r1, [r7, #12]
 8005724:	4618      	mov	r0, r3
 8005726:	f003 fd5c 	bl	80091e2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b08a      	sub	sp, #40	; 0x28
 8005740:	af02      	add	r7, sp, #8
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	4613      	mov	r3, r2
 8005754:	00db      	lsls	r3, r3, #3
 8005756:	1a9b      	subs	r3, r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	3338      	adds	r3, #56	; 0x38
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	4413      	add	r3, r2
 8005760:	3304      	adds	r3, #4
 8005762:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	699a      	ldr	r2, [r3, #24]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	429a      	cmp	r2, r3
 800576e:	d901      	bls.n	8005774 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e06c      	b.n	800584e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	695a      	ldr	r2, [r3, #20]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	69fa      	ldr	r2, [r7, #28]
 8005786:	429a      	cmp	r2, r3
 8005788:	d902      	bls.n	8005790 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	3303      	adds	r3, #3
 8005794:	089b      	lsrs	r3, r3, #2
 8005796:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005798:	e02b      	b.n	80057f2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	695a      	ldr	r2, [r3, #20]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	69fa      	ldr	r2, [r7, #28]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d902      	bls.n	80057b6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	3303      	adds	r3, #3
 80057ba:	089b      	lsrs	r3, r3, #2
 80057bc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	68d9      	ldr	r1, [r3, #12]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	9300      	str	r3, [sp, #0]
 80057d2:	4603      	mov	r3, r0
 80057d4:	6978      	ldr	r0, [r7, #20]
 80057d6:	f003 fc00 	bl	8008fda <USB_WritePacket>

    ep->xfer_buff  += len;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	68da      	ldr	r2, [r3, #12]
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	441a      	add	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	699a      	ldr	r2, [r3, #24]
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	441a      	add	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	015a      	lsls	r2, r3, #5
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	4413      	add	r3, r2
 80057fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	b29b      	uxth	r3, r3
 8005802:	69ba      	ldr	r2, [r7, #24]
 8005804:	429a      	cmp	r2, r3
 8005806:	d809      	bhi.n	800581c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	699a      	ldr	r2, [r3, #24]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005810:	429a      	cmp	r2, r3
 8005812:	d203      	bcs.n	800581c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1be      	bne.n	800579a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	695a      	ldr	r2, [r3, #20]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	429a      	cmp	r2, r3
 8005826:	d811      	bhi.n	800584c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	f003 030f 	and.w	r3, r3, #15
 800582e:	2201      	movs	r2, #1
 8005830:	fa02 f303 	lsl.w	r3, r2, r3
 8005834:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800583c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	43db      	mvns	r3, r3
 8005842:	6939      	ldr	r1, [r7, #16]
 8005844:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005848:	4013      	ands	r3, r2
 800584a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3720      	adds	r7, #32
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
	...

08005858 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	333c      	adds	r3, #60	; 0x3c
 8005870:	3304      	adds	r3, #4
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	2b01      	cmp	r3, #1
 800588c:	f040 80a0 	bne.w	80059d0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	f003 0308 	and.w	r3, r3, #8
 8005896:	2b00      	cmp	r3, #0
 8005898:	d015      	beq.n	80058c6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	4a72      	ldr	r2, [pc, #456]	; (8005a68 <PCD_EP_OutXfrComplete_int+0x210>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	f240 80dd 	bls.w	8005a5e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f000 80d7 	beq.w	8005a5e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058bc:	461a      	mov	r2, r3
 80058be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058c2:	6093      	str	r3, [r2, #8]
 80058c4:	e0cb      	b.n	8005a5e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	f003 0320 	and.w	r3, r3, #32
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d009      	beq.n	80058e4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058dc:	461a      	mov	r2, r3
 80058de:	2320      	movs	r3, #32
 80058e0:	6093      	str	r3, [r2, #8]
 80058e2:	e0bc      	b.n	8005a5e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f040 80b7 	bne.w	8005a5e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4a5d      	ldr	r2, [pc, #372]	; (8005a68 <PCD_EP_OutXfrComplete_int+0x210>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d90f      	bls.n	8005918 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00a      	beq.n	8005918 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	4413      	add	r3, r2
 800590a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800590e:	461a      	mov	r2, r3
 8005910:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005914:	6093      	str	r3, [r2, #8]
 8005916:	e0a2      	b.n	8005a5e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005918:	6879      	ldr	r1, [r7, #4]
 800591a:	683a      	ldr	r2, [r7, #0]
 800591c:	4613      	mov	r3, r2
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	1a9b      	subs	r3, r3, r2
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	440b      	add	r3, r1
 8005926:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800592a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	0159      	lsls	r1, r3, #5
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	440b      	add	r3, r1
 8005934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800593e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	683a      	ldr	r2, [r7, #0]
 8005944:	4613      	mov	r3, r2
 8005946:	00db      	lsls	r3, r3, #3
 8005948:	1a9b      	subs	r3, r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	4403      	add	r3, r0
 800594e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005952:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005954:	6879      	ldr	r1, [r7, #4]
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	4613      	mov	r3, r2
 800595a:	00db      	lsls	r3, r3, #3
 800595c:	1a9b      	subs	r3, r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	440b      	add	r3, r1
 8005962:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005966:	6819      	ldr	r1, [r3, #0]
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	4613      	mov	r3, r2
 800596e:	00db      	lsls	r3, r3, #3
 8005970:	1a9b      	subs	r3, r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4403      	add	r3, r0
 8005976:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4419      	add	r1, r3
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	683a      	ldr	r2, [r7, #0]
 8005982:	4613      	mov	r3, r2
 8005984:	00db      	lsls	r3, r3, #3
 8005986:	1a9b      	subs	r3, r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4403      	add	r3, r0
 800598c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005990:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d114      	bne.n	80059c2 <PCD_EP_OutXfrComplete_int+0x16a>
 8005998:	6879      	ldr	r1, [r7, #4]
 800599a:	683a      	ldr	r2, [r7, #0]
 800599c:	4613      	mov	r3, r2
 800599e:	00db      	lsls	r3, r3, #3
 80059a0:	1a9b      	subs	r3, r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	440b      	add	r3, r1
 80059a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d108      	bne.n	80059c2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6818      	ldr	r0, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80059ba:	461a      	mov	r2, r3
 80059bc:	2101      	movs	r1, #1
 80059be:	f003 fda3 	bl	8009508 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	4619      	mov	r1, r3
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f006 fa87 	bl	800bedc <HAL_PCD_DataOutStageCallback>
 80059ce:	e046      	b.n	8005a5e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4a26      	ldr	r2, [pc, #152]	; (8005a6c <PCD_EP_OutXfrComplete_int+0x214>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d124      	bne.n	8005a22 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00a      	beq.n	80059f8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ee:	461a      	mov	r2, r3
 80059f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059f4:	6093      	str	r3, [r2, #8]
 80059f6:	e032      	b.n	8005a5e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	f003 0320 	and.w	r3, r3, #32
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d008      	beq.n	8005a14 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	015a      	lsls	r2, r3, #5
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0e:	461a      	mov	r2, r3
 8005a10:	2320      	movs	r3, #32
 8005a12:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	4619      	mov	r1, r3
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f006 fa5e 	bl	800bedc <HAL_PCD_DataOutStageCallback>
 8005a20:	e01d      	b.n	8005a5e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d114      	bne.n	8005a52 <PCD_EP_OutXfrComplete_int+0x1fa>
 8005a28:	6879      	ldr	r1, [r7, #4]
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	00db      	lsls	r3, r3, #3
 8005a30:	1a9b      	subs	r3, r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	440b      	add	r3, r1
 8005a36:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d108      	bne.n	8005a52 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6818      	ldr	r0, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	f003 fd5b 	bl	8009508 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	4619      	mov	r1, r3
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f006 fa3f 	bl	800bedc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3718      	adds	r7, #24
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	4f54300a 	.word	0x4f54300a
 8005a6c:	4f54310a 	.word	0x4f54310a

08005a70 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	333c      	adds	r3, #60	; 0x3c
 8005a88:	3304      	adds	r3, #4
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	4a15      	ldr	r2, [pc, #84]	; (8005af8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d90e      	bls.n	8005ac4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d009      	beq.n	8005ac4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005abc:	461a      	mov	r2, r3
 8005abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ac2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f006 f9f7 	bl	800beb8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	4a0a      	ldr	r2, [pc, #40]	; (8005af8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d90c      	bls.n	8005aec <PCD_EP_OutSetupPacket_int+0x7c>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d108      	bne.n	8005aec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6818      	ldr	r0, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	2101      	movs	r1, #1
 8005ae8:	f003 fd0e 	bl	8009508 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	4f54300a 	.word	0x4f54300a

08005afc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	460b      	mov	r3, r1
 8005b06:	70fb      	strb	r3, [r7, #3]
 8005b08:	4613      	mov	r3, r2
 8005b0a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b12:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005b14:	78fb      	ldrb	r3, [r7, #3]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d107      	bne.n	8005b2a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005b1a:	883b      	ldrh	r3, [r7, #0]
 8005b1c:	0419      	lsls	r1, r3, #16
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68ba      	ldr	r2, [r7, #8]
 8005b24:	430a      	orrs	r2, r1
 8005b26:	629a      	str	r2, [r3, #40]	; 0x28
 8005b28:	e028      	b.n	8005b7c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b30:	0c1b      	lsrs	r3, r3, #16
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	4413      	add	r3, r2
 8005b36:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005b38:	2300      	movs	r3, #0
 8005b3a:	73fb      	strb	r3, [r7, #15]
 8005b3c:	e00d      	b.n	8005b5a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	7bfb      	ldrb	r3, [r7, #15]
 8005b44:	3340      	adds	r3, #64	; 0x40
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4413      	add	r3, r2
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	0c1b      	lsrs	r3, r3, #16
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	4413      	add	r3, r2
 8005b52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005b54:	7bfb      	ldrb	r3, [r7, #15]
 8005b56:	3301      	adds	r3, #1
 8005b58:	73fb      	strb	r3, [r7, #15]
 8005b5a:	7bfa      	ldrb	r2, [r7, #15]
 8005b5c:	78fb      	ldrb	r3, [r7, #3]
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d3ec      	bcc.n	8005b3e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005b64:	883b      	ldrh	r3, [r7, #0]
 8005b66:	0418      	lsls	r0, r3, #16
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6819      	ldr	r1, [r3, #0]
 8005b6c:	78fb      	ldrb	r3, [r7, #3]
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	4302      	orrs	r2, r0
 8005b74:	3340      	adds	r3, #64	; 0x40
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	440b      	add	r3, r1
 8005b7a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3714      	adds	r7, #20
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	460b      	mov	r3, r1
 8005b94:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	887a      	ldrh	r2, [r7, #2]
 8005b9c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d101      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e264      	b.n	80060a0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d075      	beq.n	8005cce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005be2:	4ba3      	ldr	r3, [pc, #652]	; (8005e70 <HAL_RCC_OscConfig+0x2ac>)
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f003 030c 	and.w	r3, r3, #12
 8005bea:	2b04      	cmp	r3, #4
 8005bec:	d00c      	beq.n	8005c08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bee:	4ba0      	ldr	r3, [pc, #640]	; (8005e70 <HAL_RCC_OscConfig+0x2ac>)
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005bf6:	2b08      	cmp	r3, #8
 8005bf8:	d112      	bne.n	8005c20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bfa:	4b9d      	ldr	r3, [pc, #628]	; (8005e70 <HAL_RCC_OscConfig+0x2ac>)
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c06:	d10b      	bne.n	8005c20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c08:	4b99      	ldr	r3, [pc, #612]	; (8005e70 <HAL_RCC_OscConfig+0x2ac>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d05b      	beq.n	8005ccc <HAL_RCC_OscConfig+0x108>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d157      	bne.n	8005ccc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e23f      	b.n	80060a0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c28:	d106      	bne.n	8005c38 <HAL_RCC_OscConfig+0x74>
 8005c2a:	4b91      	ldr	r3, [pc, #580]	; (8005e70 <HAL_RCC_OscConfig+0x2ac>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a90      	ldr	r2, [pc, #576]	; (8005e70 <HAL_RCC_OscConfig+0x2ac>)
 8005c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c34:	6013      	str	r3, [r2, #0]
 8005c36:	e01d      	b.n	8005c74 <HAL_RCC_OscConfig+0xb0>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c40:	d10c      	bne.n	8005c5c <HAL_RCC_OscConfig+0x98>
 8005c42:	4b8b      	ldr	r3, [pc, #556]	; (8005e70 <HAL_RCC_OscConfig+0x2ac>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a8a      	ldr	r2, [pc, #552]	; (8005e70 <HAL_RCC_OscConfig+0x2ac>)
 8005c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c4c:	6013      	str	r3, [r2, #0]
 8005c4e:	4b88      	ldr	r3, [pc, #544]	; (8005e70 <HAL_RCC_OscConfig+0x2ac>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a87      	ldr	r2, [pc, #540]	; (8005e70 <HAL_RCC_OscConfig+0x2ac>)
 8005c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c58:	6013      	str	r3, [r2, #0]
 8005c5a:	e00b      	b.n	8005c74 <HAL_RCC_OscConfig+0xb0>
 8005c5c:	4b84      	ldr	r3, [pc, #528]	; (8005e70 <HAL_RCC_OscConfig+0x2ac>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a83      	ldr	r2, [pc, #524]	; (8005e70 <HAL_RCC_OscConfig+0x2ac>)
 8005c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c66:	6013      	str	r3, [r2, #0]
 8005c68:	4b81      	ldr	r3, [pc, #516]	; (8005e70 <HAL_RCC_OscConfig+0x2ac>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a80      	ldr	r2, [pc, #512]	; (8005e70 <HAL_RCC_OscConfig+0x2ac>)
 8005c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d013      	beq.n	8005ca4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c7c:	f7fd f820 	bl	8002cc0 <HAL_GetTick>
 8005c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c82:	e008      	b.n	8005c96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c84:	f7fd f81c 	bl	8002cc0 <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	2b64      	cmp	r3, #100	; 0x64
 8005c90:	d901      	bls.n	8005c96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e204      	b.n	80060a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c96:	4b76      	ldr	r3, [pc, #472]	; (8005e70 <HAL_RCC_OscConfig+0x2ac>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d0f0      	beq.n	8005c84 <HAL_RCC_OscConfig+0xc0>
 8005ca2:	e014      	b.n	8005cce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ca4:	f7fd f80c 	bl	8002cc0 <HAL_GetTick>
 8005ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005caa:	e008      	b.n	8005cbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cac:	f7fd f808 	bl	8002cc0 <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	2b64      	cmp	r3, #100	; 0x64
 8005cb8:	d901      	bls.n	8005cbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e1f0      	b.n	80060a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cbe:	4b6c      	ldr	r3, [pc, #432]	; (8005e70 <HAL_RCC_OscConfig+0x2ac>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1f0      	bne.n	8005cac <HAL_RCC_OscConfig+0xe8>
 8005cca:	e000      	b.n	8005cce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d063      	beq.n	8005da2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005cda:	4b65      	ldr	r3, [pc, #404]	; (8005e70 <HAL_RCC_OscConfig+0x2ac>)
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f003 030c 	and.w	r3, r3, #12
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00b      	beq.n	8005cfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ce6:	4b62      	ldr	r3, [pc, #392]	; (8005e70 <HAL_RCC_OscConfig+0x2ac>)
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005cee:	2b08      	cmp	r3, #8
 8005cf0:	d11c      	bne.n	8005d2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cf2:	4b5f      	ldr	r3, [pc, #380]	; (8005e70 <HAL_RCC_OscConfig+0x2ac>)
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d116      	bne.n	8005d2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cfe:	4b5c      	ldr	r3, [pc, #368]	; (8005e70 <HAL_RCC_OscConfig+0x2ac>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d005      	beq.n	8005d16 <HAL_RCC_OscConfig+0x152>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d001      	beq.n	8005d16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e1c4      	b.n	80060a0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d16:	4b56      	ldr	r3, [pc, #344]	; (8005e70 <HAL_RCC_OscConfig+0x2ac>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	00db      	lsls	r3, r3, #3
 8005d24:	4952      	ldr	r1, [pc, #328]	; (8005e70 <HAL_RCC_OscConfig+0x2ac>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d2a:	e03a      	b.n	8005da2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d020      	beq.n	8005d76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d34:	4b4f      	ldr	r3, [pc, #316]	; (8005e74 <HAL_RCC_OscConfig+0x2b0>)
 8005d36:	2201      	movs	r2, #1
 8005d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d3a:	f7fc ffc1 	bl	8002cc0 <HAL_GetTick>
 8005d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d40:	e008      	b.n	8005d54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d42:	f7fc ffbd 	bl	8002cc0 <HAL_GetTick>
 8005d46:	4602      	mov	r2, r0
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d901      	bls.n	8005d54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d50:	2303      	movs	r3, #3
 8005d52:	e1a5      	b.n	80060a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d54:	4b46      	ldr	r3, [pc, #280]	; (8005e70 <HAL_RCC_OscConfig+0x2ac>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0302 	and.w	r3, r3, #2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d0f0      	beq.n	8005d42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d60:	4b43      	ldr	r3, [pc, #268]	; (8005e70 <HAL_RCC_OscConfig+0x2ac>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	00db      	lsls	r3, r3, #3
 8005d6e:	4940      	ldr	r1, [pc, #256]	; (8005e70 <HAL_RCC_OscConfig+0x2ac>)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	600b      	str	r3, [r1, #0]
 8005d74:	e015      	b.n	8005da2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d76:	4b3f      	ldr	r3, [pc, #252]	; (8005e74 <HAL_RCC_OscConfig+0x2b0>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d7c:	f7fc ffa0 	bl	8002cc0 <HAL_GetTick>
 8005d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d82:	e008      	b.n	8005d96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d84:	f7fc ff9c 	bl	8002cc0 <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d901      	bls.n	8005d96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e184      	b.n	80060a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d96:	4b36      	ldr	r3, [pc, #216]	; (8005e70 <HAL_RCC_OscConfig+0x2ac>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1f0      	bne.n	8005d84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0308 	and.w	r3, r3, #8
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d030      	beq.n	8005e10 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d016      	beq.n	8005de4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005db6:	4b30      	ldr	r3, [pc, #192]	; (8005e78 <HAL_RCC_OscConfig+0x2b4>)
 8005db8:	2201      	movs	r2, #1
 8005dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dbc:	f7fc ff80 	bl	8002cc0 <HAL_GetTick>
 8005dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dc2:	e008      	b.n	8005dd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005dc4:	f7fc ff7c 	bl	8002cc0 <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e164      	b.n	80060a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dd6:	4b26      	ldr	r3, [pc, #152]	; (8005e70 <HAL_RCC_OscConfig+0x2ac>)
 8005dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d0f0      	beq.n	8005dc4 <HAL_RCC_OscConfig+0x200>
 8005de2:	e015      	b.n	8005e10 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005de4:	4b24      	ldr	r3, [pc, #144]	; (8005e78 <HAL_RCC_OscConfig+0x2b4>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dea:	f7fc ff69 	bl	8002cc0 <HAL_GetTick>
 8005dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005df0:	e008      	b.n	8005e04 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005df2:	f7fc ff65 	bl	8002cc0 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d901      	bls.n	8005e04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e14d      	b.n	80060a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e04:	4b1a      	ldr	r3, [pc, #104]	; (8005e70 <HAL_RCC_OscConfig+0x2ac>)
 8005e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e08:	f003 0302 	and.w	r3, r3, #2
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1f0      	bne.n	8005df2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0304 	and.w	r3, r3, #4
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 80a0 	beq.w	8005f5e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e22:	4b13      	ldr	r3, [pc, #76]	; (8005e70 <HAL_RCC_OscConfig+0x2ac>)
 8005e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10f      	bne.n	8005e4e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e2e:	2300      	movs	r3, #0
 8005e30:	60bb      	str	r3, [r7, #8]
 8005e32:	4b0f      	ldr	r3, [pc, #60]	; (8005e70 <HAL_RCC_OscConfig+0x2ac>)
 8005e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e36:	4a0e      	ldr	r2, [pc, #56]	; (8005e70 <HAL_RCC_OscConfig+0x2ac>)
 8005e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8005e3e:	4b0c      	ldr	r3, [pc, #48]	; (8005e70 <HAL_RCC_OscConfig+0x2ac>)
 8005e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e46:	60bb      	str	r3, [r7, #8]
 8005e48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e4e:	4b0b      	ldr	r3, [pc, #44]	; (8005e7c <HAL_RCC_OscConfig+0x2b8>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d121      	bne.n	8005e9e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e5a:	4b08      	ldr	r3, [pc, #32]	; (8005e7c <HAL_RCC_OscConfig+0x2b8>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a07      	ldr	r2, [pc, #28]	; (8005e7c <HAL_RCC_OscConfig+0x2b8>)
 8005e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e66:	f7fc ff2b 	bl	8002cc0 <HAL_GetTick>
 8005e6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e6c:	e011      	b.n	8005e92 <HAL_RCC_OscConfig+0x2ce>
 8005e6e:	bf00      	nop
 8005e70:	40023800 	.word	0x40023800
 8005e74:	42470000 	.word	0x42470000
 8005e78:	42470e80 	.word	0x42470e80
 8005e7c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e80:	f7fc ff1e 	bl	8002cc0 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e106      	b.n	80060a0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e92:	4b85      	ldr	r3, [pc, #532]	; (80060a8 <HAL_RCC_OscConfig+0x4e4>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d0f0      	beq.n	8005e80 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d106      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x2f0>
 8005ea6:	4b81      	ldr	r3, [pc, #516]	; (80060ac <HAL_RCC_OscConfig+0x4e8>)
 8005ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eaa:	4a80      	ldr	r2, [pc, #512]	; (80060ac <HAL_RCC_OscConfig+0x4e8>)
 8005eac:	f043 0301 	orr.w	r3, r3, #1
 8005eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8005eb2:	e01c      	b.n	8005eee <HAL_RCC_OscConfig+0x32a>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	2b05      	cmp	r3, #5
 8005eba:	d10c      	bne.n	8005ed6 <HAL_RCC_OscConfig+0x312>
 8005ebc:	4b7b      	ldr	r3, [pc, #492]	; (80060ac <HAL_RCC_OscConfig+0x4e8>)
 8005ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec0:	4a7a      	ldr	r2, [pc, #488]	; (80060ac <HAL_RCC_OscConfig+0x4e8>)
 8005ec2:	f043 0304 	orr.w	r3, r3, #4
 8005ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ec8:	4b78      	ldr	r3, [pc, #480]	; (80060ac <HAL_RCC_OscConfig+0x4e8>)
 8005eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ecc:	4a77      	ldr	r2, [pc, #476]	; (80060ac <HAL_RCC_OscConfig+0x4e8>)
 8005ece:	f043 0301 	orr.w	r3, r3, #1
 8005ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ed4:	e00b      	b.n	8005eee <HAL_RCC_OscConfig+0x32a>
 8005ed6:	4b75      	ldr	r3, [pc, #468]	; (80060ac <HAL_RCC_OscConfig+0x4e8>)
 8005ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eda:	4a74      	ldr	r2, [pc, #464]	; (80060ac <HAL_RCC_OscConfig+0x4e8>)
 8005edc:	f023 0301 	bic.w	r3, r3, #1
 8005ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8005ee2:	4b72      	ldr	r3, [pc, #456]	; (80060ac <HAL_RCC_OscConfig+0x4e8>)
 8005ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee6:	4a71      	ldr	r2, [pc, #452]	; (80060ac <HAL_RCC_OscConfig+0x4e8>)
 8005ee8:	f023 0304 	bic.w	r3, r3, #4
 8005eec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d015      	beq.n	8005f22 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ef6:	f7fc fee3 	bl	8002cc0 <HAL_GetTick>
 8005efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005efc:	e00a      	b.n	8005f14 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005efe:	f7fc fedf 	bl	8002cc0 <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d901      	bls.n	8005f14 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e0c5      	b.n	80060a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f14:	4b65      	ldr	r3, [pc, #404]	; (80060ac <HAL_RCC_OscConfig+0x4e8>)
 8005f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f18:	f003 0302 	and.w	r3, r3, #2
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d0ee      	beq.n	8005efe <HAL_RCC_OscConfig+0x33a>
 8005f20:	e014      	b.n	8005f4c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f22:	f7fc fecd 	bl	8002cc0 <HAL_GetTick>
 8005f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f28:	e00a      	b.n	8005f40 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f2a:	f7fc fec9 	bl	8002cc0 <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d901      	bls.n	8005f40 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e0af      	b.n	80060a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f40:	4b5a      	ldr	r3, [pc, #360]	; (80060ac <HAL_RCC_OscConfig+0x4e8>)
 8005f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f44:	f003 0302 	and.w	r3, r3, #2
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1ee      	bne.n	8005f2a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f4c:	7dfb      	ldrb	r3, [r7, #23]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d105      	bne.n	8005f5e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f52:	4b56      	ldr	r3, [pc, #344]	; (80060ac <HAL_RCC_OscConfig+0x4e8>)
 8005f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f56:	4a55      	ldr	r2, [pc, #340]	; (80060ac <HAL_RCC_OscConfig+0x4e8>)
 8005f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f000 809b 	beq.w	800609e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f68:	4b50      	ldr	r3, [pc, #320]	; (80060ac <HAL_RCC_OscConfig+0x4e8>)
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f003 030c 	and.w	r3, r3, #12
 8005f70:	2b08      	cmp	r3, #8
 8005f72:	d05c      	beq.n	800602e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d141      	bne.n	8006000 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f7c:	4b4c      	ldr	r3, [pc, #304]	; (80060b0 <HAL_RCC_OscConfig+0x4ec>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f82:	f7fc fe9d 	bl	8002cc0 <HAL_GetTick>
 8005f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f88:	e008      	b.n	8005f9c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f8a:	f7fc fe99 	bl	8002cc0 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d901      	bls.n	8005f9c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e081      	b.n	80060a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f9c:	4b43      	ldr	r3, [pc, #268]	; (80060ac <HAL_RCC_OscConfig+0x4e8>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1f0      	bne.n	8005f8a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	69da      	ldr	r2, [r3, #28]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	431a      	orrs	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb6:	019b      	lsls	r3, r3, #6
 8005fb8:	431a      	orrs	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fbe:	085b      	lsrs	r3, r3, #1
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	041b      	lsls	r3, r3, #16
 8005fc4:	431a      	orrs	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fca:	061b      	lsls	r3, r3, #24
 8005fcc:	4937      	ldr	r1, [pc, #220]	; (80060ac <HAL_RCC_OscConfig+0x4e8>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fd2:	4b37      	ldr	r3, [pc, #220]	; (80060b0 <HAL_RCC_OscConfig+0x4ec>)
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fd8:	f7fc fe72 	bl	8002cc0 <HAL_GetTick>
 8005fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fde:	e008      	b.n	8005ff2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fe0:	f7fc fe6e 	bl	8002cc0 <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d901      	bls.n	8005ff2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e056      	b.n	80060a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ff2:	4b2e      	ldr	r3, [pc, #184]	; (80060ac <HAL_RCC_OscConfig+0x4e8>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d0f0      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x41c>
 8005ffe:	e04e      	b.n	800609e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006000:	4b2b      	ldr	r3, [pc, #172]	; (80060b0 <HAL_RCC_OscConfig+0x4ec>)
 8006002:	2200      	movs	r2, #0
 8006004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006006:	f7fc fe5b 	bl	8002cc0 <HAL_GetTick>
 800600a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800600c:	e008      	b.n	8006020 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800600e:	f7fc fe57 	bl	8002cc0 <HAL_GetTick>
 8006012:	4602      	mov	r2, r0
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	2b02      	cmp	r3, #2
 800601a:	d901      	bls.n	8006020 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e03f      	b.n	80060a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006020:	4b22      	ldr	r3, [pc, #136]	; (80060ac <HAL_RCC_OscConfig+0x4e8>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1f0      	bne.n	800600e <HAL_RCC_OscConfig+0x44a>
 800602c:	e037      	b.n	800609e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d101      	bne.n	800603a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e032      	b.n	80060a0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800603a:	4b1c      	ldr	r3, [pc, #112]	; (80060ac <HAL_RCC_OscConfig+0x4e8>)
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d028      	beq.n	800609a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006052:	429a      	cmp	r2, r3
 8006054:	d121      	bne.n	800609a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006060:	429a      	cmp	r2, r3
 8006062:	d11a      	bne.n	800609a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800606a:	4013      	ands	r3, r2
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006070:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006072:	4293      	cmp	r3, r2
 8006074:	d111      	bne.n	800609a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006080:	085b      	lsrs	r3, r3, #1
 8006082:	3b01      	subs	r3, #1
 8006084:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006086:	429a      	cmp	r2, r3
 8006088:	d107      	bne.n	800609a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006094:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006096:	429a      	cmp	r2, r3
 8006098:	d001      	beq.n	800609e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e000      	b.n	80060a0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3718      	adds	r7, #24
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	40007000 	.word	0x40007000
 80060ac:	40023800 	.word	0x40023800
 80060b0:	42470060 	.word	0x42470060

080060b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d101      	bne.n	80060c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e0cc      	b.n	8006262 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80060c8:	4b68      	ldr	r3, [pc, #416]	; (800626c <HAL_RCC_ClockConfig+0x1b8>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 030f 	and.w	r3, r3, #15
 80060d0:	683a      	ldr	r2, [r7, #0]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d90c      	bls.n	80060f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060d6:	4b65      	ldr	r3, [pc, #404]	; (800626c <HAL_RCC_ClockConfig+0x1b8>)
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	b2d2      	uxtb	r2, r2
 80060dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060de:	4b63      	ldr	r3, [pc, #396]	; (800626c <HAL_RCC_ClockConfig+0x1b8>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 030f 	and.w	r3, r3, #15
 80060e6:	683a      	ldr	r2, [r7, #0]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d001      	beq.n	80060f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e0b8      	b.n	8006262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0302 	and.w	r3, r3, #2
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d020      	beq.n	800613e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0304 	and.w	r3, r3, #4
 8006104:	2b00      	cmp	r3, #0
 8006106:	d005      	beq.n	8006114 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006108:	4b59      	ldr	r3, [pc, #356]	; (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	4a58      	ldr	r2, [pc, #352]	; (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 800610e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006112:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0308 	and.w	r3, r3, #8
 800611c:	2b00      	cmp	r3, #0
 800611e:	d005      	beq.n	800612c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006120:	4b53      	ldr	r3, [pc, #332]	; (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	4a52      	ldr	r2, [pc, #328]	; (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 8006126:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800612a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800612c:	4b50      	ldr	r3, [pc, #320]	; (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	494d      	ldr	r1, [pc, #308]	; (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 800613a:	4313      	orrs	r3, r2
 800613c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0301 	and.w	r3, r3, #1
 8006146:	2b00      	cmp	r3, #0
 8006148:	d044      	beq.n	80061d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d107      	bne.n	8006162 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006152:	4b47      	ldr	r3, [pc, #284]	; (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800615a:	2b00      	cmp	r3, #0
 800615c:	d119      	bne.n	8006192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e07f      	b.n	8006262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	2b02      	cmp	r3, #2
 8006168:	d003      	beq.n	8006172 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800616e:	2b03      	cmp	r3, #3
 8006170:	d107      	bne.n	8006182 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006172:	4b3f      	ldr	r3, [pc, #252]	; (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d109      	bne.n	8006192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e06f      	b.n	8006262 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006182:	4b3b      	ldr	r3, [pc, #236]	; (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 0302 	and.w	r3, r3, #2
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e067      	b.n	8006262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006192:	4b37      	ldr	r3, [pc, #220]	; (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f023 0203 	bic.w	r2, r3, #3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	4934      	ldr	r1, [pc, #208]	; (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80061a4:	f7fc fd8c 	bl	8002cc0 <HAL_GetTick>
 80061a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061aa:	e00a      	b.n	80061c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061ac:	f7fc fd88 	bl	8002cc0 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d901      	bls.n	80061c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e04f      	b.n	8006262 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061c2:	4b2b      	ldr	r3, [pc, #172]	; (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f003 020c 	and.w	r2, r3, #12
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d1eb      	bne.n	80061ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80061d4:	4b25      	ldr	r3, [pc, #148]	; (800626c <HAL_RCC_ClockConfig+0x1b8>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 030f 	and.w	r3, r3, #15
 80061dc:	683a      	ldr	r2, [r7, #0]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d20c      	bcs.n	80061fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061e2:	4b22      	ldr	r3, [pc, #136]	; (800626c <HAL_RCC_ClockConfig+0x1b8>)
 80061e4:	683a      	ldr	r2, [r7, #0]
 80061e6:	b2d2      	uxtb	r2, r2
 80061e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ea:	4b20      	ldr	r3, [pc, #128]	; (800626c <HAL_RCC_ClockConfig+0x1b8>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 030f 	and.w	r3, r3, #15
 80061f2:	683a      	ldr	r2, [r7, #0]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d001      	beq.n	80061fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e032      	b.n	8006262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0304 	and.w	r3, r3, #4
 8006204:	2b00      	cmp	r3, #0
 8006206:	d008      	beq.n	800621a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006208:	4b19      	ldr	r3, [pc, #100]	; (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	4916      	ldr	r1, [pc, #88]	; (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 8006216:	4313      	orrs	r3, r2
 8006218:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0308 	and.w	r3, r3, #8
 8006222:	2b00      	cmp	r3, #0
 8006224:	d009      	beq.n	800623a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006226:	4b12      	ldr	r3, [pc, #72]	; (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	00db      	lsls	r3, r3, #3
 8006234:	490e      	ldr	r1, [pc, #56]	; (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 8006236:	4313      	orrs	r3, r2
 8006238:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800623a:	f000 f821 	bl	8006280 <HAL_RCC_GetSysClockFreq>
 800623e:	4602      	mov	r2, r0
 8006240:	4b0b      	ldr	r3, [pc, #44]	; (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	091b      	lsrs	r3, r3, #4
 8006246:	f003 030f 	and.w	r3, r3, #15
 800624a:	490a      	ldr	r1, [pc, #40]	; (8006274 <HAL_RCC_ClockConfig+0x1c0>)
 800624c:	5ccb      	ldrb	r3, [r1, r3]
 800624e:	fa22 f303 	lsr.w	r3, r2, r3
 8006252:	4a09      	ldr	r2, [pc, #36]	; (8006278 <HAL_RCC_ClockConfig+0x1c4>)
 8006254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006256:	4b09      	ldr	r3, [pc, #36]	; (800627c <HAL_RCC_ClockConfig+0x1c8>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4618      	mov	r0, r3
 800625c:	f7fc fcec 	bl	8002c38 <HAL_InitTick>

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	40023c00 	.word	0x40023c00
 8006270:	40023800 	.word	0x40023800
 8006274:	08010d40 	.word	0x08010d40
 8006278:	20000000 	.word	0x20000000
 800627c:	20000004 	.word	0x20000004

08006280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006280:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006284:	b084      	sub	sp, #16
 8006286:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006288:	2300      	movs	r3, #0
 800628a:	607b      	str	r3, [r7, #4]
 800628c:	2300      	movs	r3, #0
 800628e:	60fb      	str	r3, [r7, #12]
 8006290:	2300      	movs	r3, #0
 8006292:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006294:	2300      	movs	r3, #0
 8006296:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006298:	4b67      	ldr	r3, [pc, #412]	; (8006438 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	f003 030c 	and.w	r3, r3, #12
 80062a0:	2b08      	cmp	r3, #8
 80062a2:	d00d      	beq.n	80062c0 <HAL_RCC_GetSysClockFreq+0x40>
 80062a4:	2b08      	cmp	r3, #8
 80062a6:	f200 80bd 	bhi.w	8006424 <HAL_RCC_GetSysClockFreq+0x1a4>
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d002      	beq.n	80062b4 <HAL_RCC_GetSysClockFreq+0x34>
 80062ae:	2b04      	cmp	r3, #4
 80062b0:	d003      	beq.n	80062ba <HAL_RCC_GetSysClockFreq+0x3a>
 80062b2:	e0b7      	b.n	8006424 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80062b4:	4b61      	ldr	r3, [pc, #388]	; (800643c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80062b6:	60bb      	str	r3, [r7, #8]
       break;
 80062b8:	e0b7      	b.n	800642a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80062ba:	4b60      	ldr	r3, [pc, #384]	; (800643c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80062bc:	60bb      	str	r3, [r7, #8]
      break;
 80062be:	e0b4      	b.n	800642a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062c0:	4b5d      	ldr	r3, [pc, #372]	; (8006438 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80062ca:	4b5b      	ldr	r3, [pc, #364]	; (8006438 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d04d      	beq.n	8006372 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062d6:	4b58      	ldr	r3, [pc, #352]	; (8006438 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	099b      	lsrs	r3, r3, #6
 80062dc:	461a      	mov	r2, r3
 80062de:	f04f 0300 	mov.w	r3, #0
 80062e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80062e6:	f04f 0100 	mov.w	r1, #0
 80062ea:	ea02 0800 	and.w	r8, r2, r0
 80062ee:	ea03 0901 	and.w	r9, r3, r1
 80062f2:	4640      	mov	r0, r8
 80062f4:	4649      	mov	r1, r9
 80062f6:	f04f 0200 	mov.w	r2, #0
 80062fa:	f04f 0300 	mov.w	r3, #0
 80062fe:	014b      	lsls	r3, r1, #5
 8006300:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006304:	0142      	lsls	r2, r0, #5
 8006306:	4610      	mov	r0, r2
 8006308:	4619      	mov	r1, r3
 800630a:	ebb0 0008 	subs.w	r0, r0, r8
 800630e:	eb61 0109 	sbc.w	r1, r1, r9
 8006312:	f04f 0200 	mov.w	r2, #0
 8006316:	f04f 0300 	mov.w	r3, #0
 800631a:	018b      	lsls	r3, r1, #6
 800631c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006320:	0182      	lsls	r2, r0, #6
 8006322:	1a12      	subs	r2, r2, r0
 8006324:	eb63 0301 	sbc.w	r3, r3, r1
 8006328:	f04f 0000 	mov.w	r0, #0
 800632c:	f04f 0100 	mov.w	r1, #0
 8006330:	00d9      	lsls	r1, r3, #3
 8006332:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006336:	00d0      	lsls	r0, r2, #3
 8006338:	4602      	mov	r2, r0
 800633a:	460b      	mov	r3, r1
 800633c:	eb12 0208 	adds.w	r2, r2, r8
 8006340:	eb43 0309 	adc.w	r3, r3, r9
 8006344:	f04f 0000 	mov.w	r0, #0
 8006348:	f04f 0100 	mov.w	r1, #0
 800634c:	0299      	lsls	r1, r3, #10
 800634e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006352:	0290      	lsls	r0, r2, #10
 8006354:	4602      	mov	r2, r0
 8006356:	460b      	mov	r3, r1
 8006358:	4610      	mov	r0, r2
 800635a:	4619      	mov	r1, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	461a      	mov	r2, r3
 8006360:	f04f 0300 	mov.w	r3, #0
 8006364:	f7fa fca0 	bl	8000ca8 <__aeabi_uldivmod>
 8006368:	4602      	mov	r2, r0
 800636a:	460b      	mov	r3, r1
 800636c:	4613      	mov	r3, r2
 800636e:	60fb      	str	r3, [r7, #12]
 8006370:	e04a      	b.n	8006408 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006372:	4b31      	ldr	r3, [pc, #196]	; (8006438 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	099b      	lsrs	r3, r3, #6
 8006378:	461a      	mov	r2, r3
 800637a:	f04f 0300 	mov.w	r3, #0
 800637e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006382:	f04f 0100 	mov.w	r1, #0
 8006386:	ea02 0400 	and.w	r4, r2, r0
 800638a:	ea03 0501 	and.w	r5, r3, r1
 800638e:	4620      	mov	r0, r4
 8006390:	4629      	mov	r1, r5
 8006392:	f04f 0200 	mov.w	r2, #0
 8006396:	f04f 0300 	mov.w	r3, #0
 800639a:	014b      	lsls	r3, r1, #5
 800639c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80063a0:	0142      	lsls	r2, r0, #5
 80063a2:	4610      	mov	r0, r2
 80063a4:	4619      	mov	r1, r3
 80063a6:	1b00      	subs	r0, r0, r4
 80063a8:	eb61 0105 	sbc.w	r1, r1, r5
 80063ac:	f04f 0200 	mov.w	r2, #0
 80063b0:	f04f 0300 	mov.w	r3, #0
 80063b4:	018b      	lsls	r3, r1, #6
 80063b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80063ba:	0182      	lsls	r2, r0, #6
 80063bc:	1a12      	subs	r2, r2, r0
 80063be:	eb63 0301 	sbc.w	r3, r3, r1
 80063c2:	f04f 0000 	mov.w	r0, #0
 80063c6:	f04f 0100 	mov.w	r1, #0
 80063ca:	00d9      	lsls	r1, r3, #3
 80063cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80063d0:	00d0      	lsls	r0, r2, #3
 80063d2:	4602      	mov	r2, r0
 80063d4:	460b      	mov	r3, r1
 80063d6:	1912      	adds	r2, r2, r4
 80063d8:	eb45 0303 	adc.w	r3, r5, r3
 80063dc:	f04f 0000 	mov.w	r0, #0
 80063e0:	f04f 0100 	mov.w	r1, #0
 80063e4:	0299      	lsls	r1, r3, #10
 80063e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80063ea:	0290      	lsls	r0, r2, #10
 80063ec:	4602      	mov	r2, r0
 80063ee:	460b      	mov	r3, r1
 80063f0:	4610      	mov	r0, r2
 80063f2:	4619      	mov	r1, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	461a      	mov	r2, r3
 80063f8:	f04f 0300 	mov.w	r3, #0
 80063fc:	f7fa fc54 	bl	8000ca8 <__aeabi_uldivmod>
 8006400:	4602      	mov	r2, r0
 8006402:	460b      	mov	r3, r1
 8006404:	4613      	mov	r3, r2
 8006406:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006408:	4b0b      	ldr	r3, [pc, #44]	; (8006438 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	0c1b      	lsrs	r3, r3, #16
 800640e:	f003 0303 	and.w	r3, r3, #3
 8006412:	3301      	adds	r3, #1
 8006414:	005b      	lsls	r3, r3, #1
 8006416:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006420:	60bb      	str	r3, [r7, #8]
      break;
 8006422:	e002      	b.n	800642a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006424:	4b05      	ldr	r3, [pc, #20]	; (800643c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006426:	60bb      	str	r3, [r7, #8]
      break;
 8006428:	bf00      	nop
    }
  }
  return sysclockfreq;
 800642a:	68bb      	ldr	r3, [r7, #8]
}
 800642c:	4618      	mov	r0, r3
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006436:	bf00      	nop
 8006438:	40023800 	.word	0x40023800
 800643c:	00f42400 	.word	0x00f42400

08006440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006440:	b480      	push	{r7}
 8006442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006444:	4b03      	ldr	r3, [pc, #12]	; (8006454 <HAL_RCC_GetHCLKFreq+0x14>)
 8006446:	681b      	ldr	r3, [r3, #0]
}
 8006448:	4618      	mov	r0, r3
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	20000000 	.word	0x20000000

08006458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800645c:	f7ff fff0 	bl	8006440 <HAL_RCC_GetHCLKFreq>
 8006460:	4602      	mov	r2, r0
 8006462:	4b05      	ldr	r3, [pc, #20]	; (8006478 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	0a9b      	lsrs	r3, r3, #10
 8006468:	f003 0307 	and.w	r3, r3, #7
 800646c:	4903      	ldr	r1, [pc, #12]	; (800647c <HAL_RCC_GetPCLK1Freq+0x24>)
 800646e:	5ccb      	ldrb	r3, [r1, r3]
 8006470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006474:	4618      	mov	r0, r3
 8006476:	bd80      	pop	{r7, pc}
 8006478:	40023800 	.word	0x40023800
 800647c:	08010d50 	.word	0x08010d50

08006480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006484:	f7ff ffdc 	bl	8006440 <HAL_RCC_GetHCLKFreq>
 8006488:	4602      	mov	r2, r0
 800648a:	4b05      	ldr	r3, [pc, #20]	; (80064a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	0b5b      	lsrs	r3, r3, #13
 8006490:	f003 0307 	and.w	r3, r3, #7
 8006494:	4903      	ldr	r1, [pc, #12]	; (80064a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006496:	5ccb      	ldrb	r3, [r1, r3]
 8006498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800649c:	4618      	mov	r0, r3
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	40023800 	.word	0x40023800
 80064a4:	08010d50 	.word	0x08010d50

080064a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d101      	bne.n	80064ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e07b      	b.n	80065b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d108      	bne.n	80064d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064ca:	d009      	beq.n	80064e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	61da      	str	r2, [r3, #28]
 80064d2:	e005      	b.n	80064e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d106      	bne.n	8006500 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f7fc f86a 	bl	80025d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2202      	movs	r2, #2
 8006504:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006516:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006528:	431a      	orrs	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006532:	431a      	orrs	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	f003 0302 	and.w	r3, r3, #2
 800653c:	431a      	orrs	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	431a      	orrs	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006550:	431a      	orrs	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800655a:	431a      	orrs	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006564:	ea42 0103 	orr.w	r1, r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	430a      	orrs	r2, r1
 8006576:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	0c1b      	lsrs	r3, r3, #16
 800657e:	f003 0104 	and.w	r1, r3, #4
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006586:	f003 0210 	and.w	r2, r3, #16
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	430a      	orrs	r2, r1
 8006590:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	69da      	ldr	r2, [r3, #28]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3708      	adds	r7, #8
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b08c      	sub	sp, #48	; 0x30
 80065be:	af00      	add	r7, sp, #0
 80065c0:	60f8      	str	r0, [r7, #12]
 80065c2:	60b9      	str	r1, [r7, #8]
 80065c4:	607a      	str	r2, [r7, #4]
 80065c6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80065c8:	2301      	movs	r3, #1
 80065ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80065cc:	2300      	movs	r3, #0
 80065ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d101      	bne.n	80065e0 <HAL_SPI_TransmitReceive+0x26>
 80065dc:	2302      	movs	r3, #2
 80065de:	e18a      	b.n	80068f6 <HAL_SPI_TransmitReceive+0x33c>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065e8:	f7fc fb6a 	bl	8002cc0 <HAL_GetTick>
 80065ec:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80065fe:	887b      	ldrh	r3, [r7, #2]
 8006600:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006602:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006606:	2b01      	cmp	r3, #1
 8006608:	d00f      	beq.n	800662a <HAL_SPI_TransmitReceive+0x70>
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006610:	d107      	bne.n	8006622 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d103      	bne.n	8006622 <HAL_SPI_TransmitReceive+0x68>
 800661a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800661e:	2b04      	cmp	r3, #4
 8006620:	d003      	beq.n	800662a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006622:	2302      	movs	r3, #2
 8006624:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006628:	e15b      	b.n	80068e2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d005      	beq.n	800663c <HAL_SPI_TransmitReceive+0x82>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d002      	beq.n	800663c <HAL_SPI_TransmitReceive+0x82>
 8006636:	887b      	ldrh	r3, [r7, #2]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d103      	bne.n	8006644 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006642:	e14e      	b.n	80068e2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800664a:	b2db      	uxtb	r3, r3
 800664c:	2b04      	cmp	r3, #4
 800664e:	d003      	beq.n	8006658 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2205      	movs	r2, #5
 8006654:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	887a      	ldrh	r2, [r7, #2]
 8006668:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	887a      	ldrh	r2, [r7, #2]
 800666e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	887a      	ldrh	r2, [r7, #2]
 800667a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	887a      	ldrh	r2, [r7, #2]
 8006680:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006698:	2b40      	cmp	r3, #64	; 0x40
 800669a:	d007      	beq.n	80066ac <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066b4:	d178      	bne.n	80067a8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d002      	beq.n	80066c4 <HAL_SPI_TransmitReceive+0x10a>
 80066be:	8b7b      	ldrh	r3, [r7, #26]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d166      	bne.n	8006792 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c8:	881a      	ldrh	r2, [r3, #0]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d4:	1c9a      	adds	r2, r3, #2
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066de:	b29b      	uxth	r3, r3
 80066e0:	3b01      	subs	r3, #1
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066e8:	e053      	b.n	8006792 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f003 0302 	and.w	r3, r3, #2
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d11b      	bne.n	8006730 <HAL_SPI_TransmitReceive+0x176>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d016      	beq.n	8006730 <HAL_SPI_TransmitReceive+0x176>
 8006702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006704:	2b01      	cmp	r3, #1
 8006706:	d113      	bne.n	8006730 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670c:	881a      	ldrh	r2, [r3, #0]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006718:	1c9a      	adds	r2, r3, #2
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006722:	b29b      	uxth	r3, r3
 8006724:	3b01      	subs	r3, #1
 8006726:	b29a      	uxth	r2, r3
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800672c:	2300      	movs	r3, #0
 800672e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b01      	cmp	r3, #1
 800673c:	d119      	bne.n	8006772 <HAL_SPI_TransmitReceive+0x1b8>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006742:	b29b      	uxth	r3, r3
 8006744:	2b00      	cmp	r3, #0
 8006746:	d014      	beq.n	8006772 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68da      	ldr	r2, [r3, #12]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006752:	b292      	uxth	r2, r2
 8006754:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675a:	1c9a      	adds	r2, r3, #2
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006764:	b29b      	uxth	r3, r3
 8006766:	3b01      	subs	r3, #1
 8006768:	b29a      	uxth	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800676e:	2301      	movs	r3, #1
 8006770:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006772:	f7fc faa5 	bl	8002cc0 <HAL_GetTick>
 8006776:	4602      	mov	r2, r0
 8006778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800677e:	429a      	cmp	r2, r3
 8006780:	d807      	bhi.n	8006792 <HAL_SPI_TransmitReceive+0x1d8>
 8006782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006788:	d003      	beq.n	8006792 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006790:	e0a7      	b.n	80068e2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006796:	b29b      	uxth	r3, r3
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1a6      	bne.n	80066ea <HAL_SPI_TransmitReceive+0x130>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1a1      	bne.n	80066ea <HAL_SPI_TransmitReceive+0x130>
 80067a6:	e07c      	b.n	80068a2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d002      	beq.n	80067b6 <HAL_SPI_TransmitReceive+0x1fc>
 80067b0:	8b7b      	ldrh	r3, [r7, #26]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d16b      	bne.n	800688e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	330c      	adds	r3, #12
 80067c0:	7812      	ldrb	r2, [r2, #0]
 80067c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c8:	1c5a      	adds	r2, r3, #1
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	3b01      	subs	r3, #1
 80067d6:	b29a      	uxth	r2, r3
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067dc:	e057      	b.n	800688e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f003 0302 	and.w	r3, r3, #2
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d11c      	bne.n	8006826 <HAL_SPI_TransmitReceive+0x26c>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d017      	beq.n	8006826 <HAL_SPI_TransmitReceive+0x26c>
 80067f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d114      	bne.n	8006826 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	330c      	adds	r3, #12
 8006806:	7812      	ldrb	r2, [r2, #0]
 8006808:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680e:	1c5a      	adds	r2, r3, #1
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006818:	b29b      	uxth	r3, r3
 800681a:	3b01      	subs	r3, #1
 800681c:	b29a      	uxth	r2, r3
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006822:	2300      	movs	r3, #0
 8006824:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	f003 0301 	and.w	r3, r3, #1
 8006830:	2b01      	cmp	r3, #1
 8006832:	d119      	bne.n	8006868 <HAL_SPI_TransmitReceive+0x2ae>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006838:	b29b      	uxth	r3, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	d014      	beq.n	8006868 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68da      	ldr	r2, [r3, #12]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006848:	b2d2      	uxtb	r2, r2
 800684a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006850:	1c5a      	adds	r2, r3, #1
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800685a:	b29b      	uxth	r3, r3
 800685c:	3b01      	subs	r3, #1
 800685e:	b29a      	uxth	r2, r3
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006864:	2301      	movs	r3, #1
 8006866:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006868:	f7fc fa2a 	bl	8002cc0 <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006874:	429a      	cmp	r2, r3
 8006876:	d803      	bhi.n	8006880 <HAL_SPI_TransmitReceive+0x2c6>
 8006878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800687e:	d102      	bne.n	8006886 <HAL_SPI_TransmitReceive+0x2cc>
 8006880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006882:	2b00      	cmp	r3, #0
 8006884:	d103      	bne.n	800688e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800688c:	e029      	b.n	80068e2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006892:	b29b      	uxth	r3, r3
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1a2      	bne.n	80067de <HAL_SPI_TransmitReceive+0x224>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800689c:	b29b      	uxth	r3, r3
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d19d      	bne.n	80067de <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80068a6:	68f8      	ldr	r0, [r7, #12]
 80068a8:	f000 f8b2 	bl	8006a10 <SPI_EndRxTxTransaction>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d006      	beq.n	80068c0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2220      	movs	r2, #32
 80068bc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80068be:	e010      	b.n	80068e2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10b      	bne.n	80068e0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068c8:	2300      	movs	r3, #0
 80068ca:	617b      	str	r3, [r7, #20]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	617b      	str	r3, [r7, #20]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	617b      	str	r3, [r7, #20]
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	e000      	b.n	80068e2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80068e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80068f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3730      	adds	r7, #48	; 0x30
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
	...

08006900 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b088      	sub	sp, #32
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	603b      	str	r3, [r7, #0]
 800690c:	4613      	mov	r3, r2
 800690e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006910:	f7fc f9d6 	bl	8002cc0 <HAL_GetTick>
 8006914:	4602      	mov	r2, r0
 8006916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006918:	1a9b      	subs	r3, r3, r2
 800691a:	683a      	ldr	r2, [r7, #0]
 800691c:	4413      	add	r3, r2
 800691e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006920:	f7fc f9ce 	bl	8002cc0 <HAL_GetTick>
 8006924:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006926:	4b39      	ldr	r3, [pc, #228]	; (8006a0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	015b      	lsls	r3, r3, #5
 800692c:	0d1b      	lsrs	r3, r3, #20
 800692e:	69fa      	ldr	r2, [r7, #28]
 8006930:	fb02 f303 	mul.w	r3, r2, r3
 8006934:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006936:	e054      	b.n	80069e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693e:	d050      	beq.n	80069e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006940:	f7fc f9be 	bl	8002cc0 <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	69fa      	ldr	r2, [r7, #28]
 800694c:	429a      	cmp	r2, r3
 800694e:	d902      	bls.n	8006956 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d13d      	bne.n	80069d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	685a      	ldr	r2, [r3, #4]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006964:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800696e:	d111      	bne.n	8006994 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006978:	d004      	beq.n	8006984 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006982:	d107      	bne.n	8006994 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006992:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800699c:	d10f      	bne.n	80069be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069ac:	601a      	str	r2, [r3, #0]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e017      	b.n	8006a02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d101      	bne.n	80069dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80069d8:	2300      	movs	r3, #0
 80069da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	3b01      	subs	r3, #1
 80069e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	689a      	ldr	r2, [r3, #8]
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	4013      	ands	r3, r2
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	bf0c      	ite	eq
 80069f2:	2301      	moveq	r3, #1
 80069f4:	2300      	movne	r3, #0
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	461a      	mov	r2, r3
 80069fa:	79fb      	ldrb	r3, [r7, #7]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d19b      	bne.n	8006938 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3720      	adds	r7, #32
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	20000000 	.word	0x20000000

08006a10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b088      	sub	sp, #32
 8006a14:	af02      	add	r7, sp, #8
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006a1c:	4b1b      	ldr	r3, [pc, #108]	; (8006a8c <SPI_EndRxTxTransaction+0x7c>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a1b      	ldr	r2, [pc, #108]	; (8006a90 <SPI_EndRxTxTransaction+0x80>)
 8006a22:	fba2 2303 	umull	r2, r3, r2, r3
 8006a26:	0d5b      	lsrs	r3, r3, #21
 8006a28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a2c:	fb02 f303 	mul.w	r3, r2, r3
 8006a30:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a3a:	d112      	bne.n	8006a62 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	2200      	movs	r2, #0
 8006a44:	2180      	movs	r1, #128	; 0x80
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f7ff ff5a 	bl	8006900 <SPI_WaitFlagStateUntilTimeout>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d016      	beq.n	8006a80 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a56:	f043 0220 	orr.w	r2, r3, #32
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e00f      	b.n	8006a82 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00a      	beq.n	8006a7e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a78:	2b80      	cmp	r3, #128	; 0x80
 8006a7a:	d0f2      	beq.n	8006a62 <SPI_EndRxTxTransaction+0x52>
 8006a7c:	e000      	b.n	8006a80 <SPI_EndRxTxTransaction+0x70>
        break;
 8006a7e:	bf00      	nop
  }

  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3718      	adds	r7, #24
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	20000000 	.word	0x20000000
 8006a90:	165e9f81 	.word	0x165e9f81

08006a94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d101      	bne.n	8006aa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e041      	b.n	8006b2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d106      	bne.n	8006ac0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7fb fe40 	bl	8002740 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2202      	movs	r2, #2
 8006ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	3304      	adds	r3, #4
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	4610      	mov	r0, r2
 8006ad4:	f000 fc78 	bl	80073c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3708      	adds	r7, #8
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b082      	sub	sp, #8
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d101      	bne.n	8006b44 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e041      	b.n	8006bc8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d106      	bne.n	8006b5e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 f839 	bl	8006bd0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2202      	movs	r2, #2
 8006b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	3304      	adds	r3, #4
 8006b6e:	4619      	mov	r1, r3
 8006b70:	4610      	mov	r0, r2
 8006b72:	f000 fc29 	bl	80073c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3708      	adds	r7, #8
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d109      	bne.n	8006c08 <HAL_TIM_PWM_Start+0x24>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	bf14      	ite	ne
 8006c00:	2301      	movne	r3, #1
 8006c02:	2300      	moveq	r3, #0
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	e022      	b.n	8006c4e <HAL_TIM_PWM_Start+0x6a>
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	2b04      	cmp	r3, #4
 8006c0c:	d109      	bne.n	8006c22 <HAL_TIM_PWM_Start+0x3e>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	bf14      	ite	ne
 8006c1a:	2301      	movne	r3, #1
 8006c1c:	2300      	moveq	r3, #0
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	e015      	b.n	8006c4e <HAL_TIM_PWM_Start+0x6a>
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	2b08      	cmp	r3, #8
 8006c26:	d109      	bne.n	8006c3c <HAL_TIM_PWM_Start+0x58>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	bf14      	ite	ne
 8006c34:	2301      	movne	r3, #1
 8006c36:	2300      	moveq	r3, #0
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	e008      	b.n	8006c4e <HAL_TIM_PWM_Start+0x6a>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	bf14      	ite	ne
 8006c48:	2301      	movne	r3, #1
 8006c4a:	2300      	moveq	r3, #0
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d001      	beq.n	8006c56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e07c      	b.n	8006d50 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d104      	bne.n	8006c66 <HAL_TIM_PWM_Start+0x82>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2202      	movs	r2, #2
 8006c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c64:	e013      	b.n	8006c8e <HAL_TIM_PWM_Start+0xaa>
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	2b04      	cmp	r3, #4
 8006c6a:	d104      	bne.n	8006c76 <HAL_TIM_PWM_Start+0x92>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2202      	movs	r2, #2
 8006c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c74:	e00b      	b.n	8006c8e <HAL_TIM_PWM_Start+0xaa>
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	2b08      	cmp	r3, #8
 8006c7a:	d104      	bne.n	8006c86 <HAL_TIM_PWM_Start+0xa2>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2202      	movs	r2, #2
 8006c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c84:	e003      	b.n	8006c8e <HAL_TIM_PWM_Start+0xaa>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2202      	movs	r2, #2
 8006c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2201      	movs	r2, #1
 8006c94:	6839      	ldr	r1, [r7, #0]
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 fe80 	bl	800799c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a2d      	ldr	r2, [pc, #180]	; (8006d58 <HAL_TIM_PWM_Start+0x174>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d004      	beq.n	8006cb0 <HAL_TIM_PWM_Start+0xcc>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a2c      	ldr	r2, [pc, #176]	; (8006d5c <HAL_TIM_PWM_Start+0x178>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d101      	bne.n	8006cb4 <HAL_TIM_PWM_Start+0xd0>
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e000      	b.n	8006cb6 <HAL_TIM_PWM_Start+0xd2>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d007      	beq.n	8006cca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006cc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a22      	ldr	r2, [pc, #136]	; (8006d58 <HAL_TIM_PWM_Start+0x174>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d022      	beq.n	8006d1a <HAL_TIM_PWM_Start+0x136>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cdc:	d01d      	beq.n	8006d1a <HAL_TIM_PWM_Start+0x136>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a1f      	ldr	r2, [pc, #124]	; (8006d60 <HAL_TIM_PWM_Start+0x17c>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d018      	beq.n	8006d1a <HAL_TIM_PWM_Start+0x136>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a1d      	ldr	r2, [pc, #116]	; (8006d64 <HAL_TIM_PWM_Start+0x180>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d013      	beq.n	8006d1a <HAL_TIM_PWM_Start+0x136>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a1c      	ldr	r2, [pc, #112]	; (8006d68 <HAL_TIM_PWM_Start+0x184>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d00e      	beq.n	8006d1a <HAL_TIM_PWM_Start+0x136>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a16      	ldr	r2, [pc, #88]	; (8006d5c <HAL_TIM_PWM_Start+0x178>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d009      	beq.n	8006d1a <HAL_TIM_PWM_Start+0x136>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a18      	ldr	r2, [pc, #96]	; (8006d6c <HAL_TIM_PWM_Start+0x188>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d004      	beq.n	8006d1a <HAL_TIM_PWM_Start+0x136>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a16      	ldr	r2, [pc, #88]	; (8006d70 <HAL_TIM_PWM_Start+0x18c>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d111      	bne.n	8006d3e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f003 0307 	and.w	r3, r3, #7
 8006d24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2b06      	cmp	r3, #6
 8006d2a:	d010      	beq.n	8006d4e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f042 0201 	orr.w	r2, r2, #1
 8006d3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d3c:	e007      	b.n	8006d4e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f042 0201 	orr.w	r2, r2, #1
 8006d4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	40010000 	.word	0x40010000
 8006d5c:	40010400 	.word	0x40010400
 8006d60:	40000400 	.word	0x40000400
 8006d64:	40000800 	.word	0x40000800
 8006d68:	40000c00 	.word	0x40000c00
 8006d6c:	40014000 	.word	0x40014000
 8006d70:	40001800 	.word	0x40001800

08006d74 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2200      	movs	r2, #0
 8006d84:	6839      	ldr	r1, [r7, #0]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 fe08 	bl	800799c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a2e      	ldr	r2, [pc, #184]	; (8006e4c <HAL_TIM_PWM_Stop+0xd8>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d004      	beq.n	8006da0 <HAL_TIM_PWM_Stop+0x2c>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a2d      	ldr	r2, [pc, #180]	; (8006e50 <HAL_TIM_PWM_Stop+0xdc>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d101      	bne.n	8006da4 <HAL_TIM_PWM_Stop+0x30>
 8006da0:	2301      	movs	r3, #1
 8006da2:	e000      	b.n	8006da6 <HAL_TIM_PWM_Stop+0x32>
 8006da4:	2300      	movs	r3, #0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d017      	beq.n	8006dda <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	6a1a      	ldr	r2, [r3, #32]
 8006db0:	f241 1311 	movw	r3, #4369	; 0x1111
 8006db4:	4013      	ands	r3, r2
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d10f      	bne.n	8006dda <HAL_TIM_PWM_Stop+0x66>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	6a1a      	ldr	r2, [r3, #32]
 8006dc0:	f240 4344 	movw	r3, #1092	; 0x444
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d107      	bne.n	8006dda <HAL_TIM_PWM_Stop+0x66>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006dd8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	6a1a      	ldr	r2, [r3, #32]
 8006de0:	f241 1311 	movw	r3, #4369	; 0x1111
 8006de4:	4013      	ands	r3, r2
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10f      	bne.n	8006e0a <HAL_TIM_PWM_Stop+0x96>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	6a1a      	ldr	r2, [r3, #32]
 8006df0:	f240 4344 	movw	r3, #1092	; 0x444
 8006df4:	4013      	ands	r3, r2
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d107      	bne.n	8006e0a <HAL_TIM_PWM_Stop+0x96>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f022 0201 	bic.w	r2, r2, #1
 8006e08:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d104      	bne.n	8006e1a <HAL_TIM_PWM_Stop+0xa6>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e18:	e013      	b.n	8006e42 <HAL_TIM_PWM_Stop+0xce>
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	2b04      	cmp	r3, #4
 8006e1e:	d104      	bne.n	8006e2a <HAL_TIM_PWM_Stop+0xb6>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e28:	e00b      	b.n	8006e42 <HAL_TIM_PWM_Stop+0xce>
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	2b08      	cmp	r3, #8
 8006e2e:	d104      	bne.n	8006e3a <HAL_TIM_PWM_Stop+0xc6>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e38:	e003      	b.n	8006e42 <HAL_TIM_PWM_Stop+0xce>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3708      	adds	r7, #8
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	40010000 	.word	0x40010000
 8006e50:	40010400 	.word	0x40010400

08006e54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	f003 0302 	and.w	r3, r3, #2
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d122      	bne.n	8006eb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	f003 0302 	and.w	r3, r3, #2
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	d11b      	bne.n	8006eb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f06f 0202 	mvn.w	r2, #2
 8006e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	f003 0303 	and.w	r3, r3, #3
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d003      	beq.n	8006e9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fa77 	bl	800738a <HAL_TIM_IC_CaptureCallback>
 8006e9c:	e005      	b.n	8006eaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 fa69 	bl	8007376 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 fa7a 	bl	800739e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	f003 0304 	and.w	r3, r3, #4
 8006eba:	2b04      	cmp	r3, #4
 8006ebc:	d122      	bne.n	8006f04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	f003 0304 	and.w	r3, r3, #4
 8006ec8:	2b04      	cmp	r3, #4
 8006eca:	d11b      	bne.n	8006f04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f06f 0204 	mvn.w	r2, #4
 8006ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2202      	movs	r2, #2
 8006eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d003      	beq.n	8006ef2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 fa4d 	bl	800738a <HAL_TIM_IC_CaptureCallback>
 8006ef0:	e005      	b.n	8006efe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 fa3f 	bl	8007376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 fa50 	bl	800739e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	f003 0308 	and.w	r3, r3, #8
 8006f0e:	2b08      	cmp	r3, #8
 8006f10:	d122      	bne.n	8006f58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	f003 0308 	and.w	r3, r3, #8
 8006f1c:	2b08      	cmp	r3, #8
 8006f1e:	d11b      	bne.n	8006f58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f06f 0208 	mvn.w	r2, #8
 8006f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2204      	movs	r2, #4
 8006f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	f003 0303 	and.w	r3, r3, #3
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d003      	beq.n	8006f46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 fa23 	bl	800738a <HAL_TIM_IC_CaptureCallback>
 8006f44:	e005      	b.n	8006f52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fa15 	bl	8007376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 fa26 	bl	800739e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	f003 0310 	and.w	r3, r3, #16
 8006f62:	2b10      	cmp	r3, #16
 8006f64:	d122      	bne.n	8006fac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	f003 0310 	and.w	r3, r3, #16
 8006f70:	2b10      	cmp	r3, #16
 8006f72:	d11b      	bne.n	8006fac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f06f 0210 	mvn.w	r2, #16
 8006f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2208      	movs	r2, #8
 8006f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	69db      	ldr	r3, [r3, #28]
 8006f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d003      	beq.n	8006f9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f9f9 	bl	800738a <HAL_TIM_IC_CaptureCallback>
 8006f98:	e005      	b.n	8006fa6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 f9eb 	bl	8007376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 f9fc 	bl	800739e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d10e      	bne.n	8006fd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	f003 0301 	and.w	r3, r3, #1
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d107      	bne.n	8006fd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f06f 0201 	mvn.w	r2, #1
 8006fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7fb f9c8 	bl	8002368 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fe2:	2b80      	cmp	r3, #128	; 0x80
 8006fe4:	d10e      	bne.n	8007004 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ff0:	2b80      	cmp	r3, #128	; 0x80
 8006ff2:	d107      	bne.n	8007004 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 fd78 	bl	8007af4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800700e:	2b40      	cmp	r3, #64	; 0x40
 8007010:	d10e      	bne.n	8007030 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800701c:	2b40      	cmp	r3, #64	; 0x40
 800701e:	d107      	bne.n	8007030 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 f9c1 	bl	80073b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	f003 0320 	and.w	r3, r3, #32
 800703a:	2b20      	cmp	r3, #32
 800703c:	d10e      	bne.n	800705c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	f003 0320 	and.w	r3, r3, #32
 8007048:	2b20      	cmp	r3, #32
 800704a:	d107      	bne.n	800705c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f06f 0220 	mvn.w	r2, #32
 8007054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 fd42 	bl	8007ae0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800705c:	bf00      	nop
 800705e:	3708      	adds	r7, #8
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007070:	2300      	movs	r3, #0
 8007072:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800707a:	2b01      	cmp	r3, #1
 800707c:	d101      	bne.n	8007082 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800707e:	2302      	movs	r3, #2
 8007080:	e0ae      	b.n	80071e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2b0c      	cmp	r3, #12
 800708e:	f200 809f 	bhi.w	80071d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007092:	a201      	add	r2, pc, #4	; (adr r2, 8007098 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007098:	080070cd 	.word	0x080070cd
 800709c:	080071d1 	.word	0x080071d1
 80070a0:	080071d1 	.word	0x080071d1
 80070a4:	080071d1 	.word	0x080071d1
 80070a8:	0800710d 	.word	0x0800710d
 80070ac:	080071d1 	.word	0x080071d1
 80070b0:	080071d1 	.word	0x080071d1
 80070b4:	080071d1 	.word	0x080071d1
 80070b8:	0800714f 	.word	0x0800714f
 80070bc:	080071d1 	.word	0x080071d1
 80070c0:	080071d1 	.word	0x080071d1
 80070c4:	080071d1 	.word	0x080071d1
 80070c8:	0800718f 	.word	0x0800718f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68b9      	ldr	r1, [r7, #8]
 80070d2:	4618      	mov	r0, r3
 80070d4:	f000 fa18 	bl	8007508 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	699a      	ldr	r2, [r3, #24]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f042 0208 	orr.w	r2, r2, #8
 80070e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	699a      	ldr	r2, [r3, #24]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f022 0204 	bic.w	r2, r2, #4
 80070f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	6999      	ldr	r1, [r3, #24]
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	691a      	ldr	r2, [r3, #16]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	430a      	orrs	r2, r1
 8007108:	619a      	str	r2, [r3, #24]
      break;
 800710a:	e064      	b.n	80071d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68b9      	ldr	r1, [r7, #8]
 8007112:	4618      	mov	r0, r3
 8007114:	f000 fa68 	bl	80075e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	699a      	ldr	r2, [r3, #24]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007126:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	699a      	ldr	r2, [r3, #24]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	6999      	ldr	r1, [r3, #24]
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	021a      	lsls	r2, r3, #8
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	430a      	orrs	r2, r1
 800714a:	619a      	str	r2, [r3, #24]
      break;
 800714c:	e043      	b.n	80071d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68b9      	ldr	r1, [r7, #8]
 8007154:	4618      	mov	r0, r3
 8007156:	f000 fabd 	bl	80076d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	69da      	ldr	r2, [r3, #28]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f042 0208 	orr.w	r2, r2, #8
 8007168:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	69da      	ldr	r2, [r3, #28]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f022 0204 	bic.w	r2, r2, #4
 8007178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	69d9      	ldr	r1, [r3, #28]
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	691a      	ldr	r2, [r3, #16]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	430a      	orrs	r2, r1
 800718a:	61da      	str	r2, [r3, #28]
      break;
 800718c:	e023      	b.n	80071d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68b9      	ldr	r1, [r7, #8]
 8007194:	4618      	mov	r0, r3
 8007196:	f000 fb11 	bl	80077bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	69da      	ldr	r2, [r3, #28]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	69da      	ldr	r2, [r3, #28]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	69d9      	ldr	r1, [r3, #28]
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	691b      	ldr	r3, [r3, #16]
 80071c4:	021a      	lsls	r2, r3, #8
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	430a      	orrs	r2, r1
 80071cc:	61da      	str	r2, [r3, #28]
      break;
 80071ce:	e002      	b.n	80071d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	75fb      	strb	r3, [r7, #23]
      break;
 80071d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80071de:	7dfb      	ldrb	r3, [r7, #23]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3718      	adds	r7, #24
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071f2:	2300      	movs	r3, #0
 80071f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d101      	bne.n	8007204 <HAL_TIM_ConfigClockSource+0x1c>
 8007200:	2302      	movs	r3, #2
 8007202:	e0b4      	b.n	800736e <HAL_TIM_ConfigClockSource+0x186>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2202      	movs	r2, #2
 8007210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007222:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800722a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68ba      	ldr	r2, [r7, #8]
 8007232:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800723c:	d03e      	beq.n	80072bc <HAL_TIM_ConfigClockSource+0xd4>
 800723e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007242:	f200 8087 	bhi.w	8007354 <HAL_TIM_ConfigClockSource+0x16c>
 8007246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800724a:	f000 8086 	beq.w	800735a <HAL_TIM_ConfigClockSource+0x172>
 800724e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007252:	d87f      	bhi.n	8007354 <HAL_TIM_ConfigClockSource+0x16c>
 8007254:	2b70      	cmp	r3, #112	; 0x70
 8007256:	d01a      	beq.n	800728e <HAL_TIM_ConfigClockSource+0xa6>
 8007258:	2b70      	cmp	r3, #112	; 0x70
 800725a:	d87b      	bhi.n	8007354 <HAL_TIM_ConfigClockSource+0x16c>
 800725c:	2b60      	cmp	r3, #96	; 0x60
 800725e:	d050      	beq.n	8007302 <HAL_TIM_ConfigClockSource+0x11a>
 8007260:	2b60      	cmp	r3, #96	; 0x60
 8007262:	d877      	bhi.n	8007354 <HAL_TIM_ConfigClockSource+0x16c>
 8007264:	2b50      	cmp	r3, #80	; 0x50
 8007266:	d03c      	beq.n	80072e2 <HAL_TIM_ConfigClockSource+0xfa>
 8007268:	2b50      	cmp	r3, #80	; 0x50
 800726a:	d873      	bhi.n	8007354 <HAL_TIM_ConfigClockSource+0x16c>
 800726c:	2b40      	cmp	r3, #64	; 0x40
 800726e:	d058      	beq.n	8007322 <HAL_TIM_ConfigClockSource+0x13a>
 8007270:	2b40      	cmp	r3, #64	; 0x40
 8007272:	d86f      	bhi.n	8007354 <HAL_TIM_ConfigClockSource+0x16c>
 8007274:	2b30      	cmp	r3, #48	; 0x30
 8007276:	d064      	beq.n	8007342 <HAL_TIM_ConfigClockSource+0x15a>
 8007278:	2b30      	cmp	r3, #48	; 0x30
 800727a:	d86b      	bhi.n	8007354 <HAL_TIM_ConfigClockSource+0x16c>
 800727c:	2b20      	cmp	r3, #32
 800727e:	d060      	beq.n	8007342 <HAL_TIM_ConfigClockSource+0x15a>
 8007280:	2b20      	cmp	r3, #32
 8007282:	d867      	bhi.n	8007354 <HAL_TIM_ConfigClockSource+0x16c>
 8007284:	2b00      	cmp	r3, #0
 8007286:	d05c      	beq.n	8007342 <HAL_TIM_ConfigClockSource+0x15a>
 8007288:	2b10      	cmp	r3, #16
 800728a:	d05a      	beq.n	8007342 <HAL_TIM_ConfigClockSource+0x15a>
 800728c:	e062      	b.n	8007354 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6818      	ldr	r0, [r3, #0]
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	6899      	ldr	r1, [r3, #8]
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	685a      	ldr	r2, [r3, #4]
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	f000 fb5d 	bl	800795c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80072b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68ba      	ldr	r2, [r7, #8]
 80072b8:	609a      	str	r2, [r3, #8]
      break;
 80072ba:	e04f      	b.n	800735c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6818      	ldr	r0, [r3, #0]
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	6899      	ldr	r1, [r3, #8]
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	685a      	ldr	r2, [r3, #4]
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	f000 fb46 	bl	800795c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	689a      	ldr	r2, [r3, #8]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072de:	609a      	str	r2, [r3, #8]
      break;
 80072e0:	e03c      	b.n	800735c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6818      	ldr	r0, [r3, #0]
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	6859      	ldr	r1, [r3, #4]
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	461a      	mov	r2, r3
 80072f0:	f000 faba 	bl	8007868 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2150      	movs	r1, #80	; 0x50
 80072fa:	4618      	mov	r0, r3
 80072fc:	f000 fb13 	bl	8007926 <TIM_ITRx_SetConfig>
      break;
 8007300:	e02c      	b.n	800735c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6818      	ldr	r0, [r3, #0]
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	6859      	ldr	r1, [r3, #4]
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	461a      	mov	r2, r3
 8007310:	f000 fad9 	bl	80078c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2160      	movs	r1, #96	; 0x60
 800731a:	4618      	mov	r0, r3
 800731c:	f000 fb03 	bl	8007926 <TIM_ITRx_SetConfig>
      break;
 8007320:	e01c      	b.n	800735c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6818      	ldr	r0, [r3, #0]
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	6859      	ldr	r1, [r3, #4]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	461a      	mov	r2, r3
 8007330:	f000 fa9a 	bl	8007868 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2140      	movs	r1, #64	; 0x40
 800733a:	4618      	mov	r0, r3
 800733c:	f000 faf3 	bl	8007926 <TIM_ITRx_SetConfig>
      break;
 8007340:	e00c      	b.n	800735c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4619      	mov	r1, r3
 800734c:	4610      	mov	r0, r2
 800734e:	f000 faea 	bl	8007926 <TIM_ITRx_SetConfig>
      break;
 8007352:	e003      	b.n	800735c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	73fb      	strb	r3, [r7, #15]
      break;
 8007358:	e000      	b.n	800735c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800735a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800736c:	7bfb      	ldrb	r3, [r7, #15]
}
 800736e:	4618      	mov	r0, r3
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007376:	b480      	push	{r7}
 8007378:	b083      	sub	sp, #12
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800737e:	bf00      	nop
 8007380:	370c      	adds	r7, #12
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr

0800738a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800738a:	b480      	push	{r7}
 800738c:	b083      	sub	sp, #12
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007392:	bf00      	nop
 8007394:	370c      	adds	r7, #12
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr

0800739e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800739e:	b480      	push	{r7}
 80073a0:	b083      	sub	sp, #12
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073a6:	bf00      	nop
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80073b2:	b480      	push	{r7}
 80073b4:	b083      	sub	sp, #12
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073ba:	bf00      	nop
 80073bc:	370c      	adds	r7, #12
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
	...

080073c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a40      	ldr	r2, [pc, #256]	; (80074dc <TIM_Base_SetConfig+0x114>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d013      	beq.n	8007408 <TIM_Base_SetConfig+0x40>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073e6:	d00f      	beq.n	8007408 <TIM_Base_SetConfig+0x40>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a3d      	ldr	r2, [pc, #244]	; (80074e0 <TIM_Base_SetConfig+0x118>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d00b      	beq.n	8007408 <TIM_Base_SetConfig+0x40>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a3c      	ldr	r2, [pc, #240]	; (80074e4 <TIM_Base_SetConfig+0x11c>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d007      	beq.n	8007408 <TIM_Base_SetConfig+0x40>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a3b      	ldr	r2, [pc, #236]	; (80074e8 <TIM_Base_SetConfig+0x120>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d003      	beq.n	8007408 <TIM_Base_SetConfig+0x40>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a3a      	ldr	r2, [pc, #232]	; (80074ec <TIM_Base_SetConfig+0x124>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d108      	bne.n	800741a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800740e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	4313      	orrs	r3, r2
 8007418:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a2f      	ldr	r2, [pc, #188]	; (80074dc <TIM_Base_SetConfig+0x114>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d02b      	beq.n	800747a <TIM_Base_SetConfig+0xb2>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007428:	d027      	beq.n	800747a <TIM_Base_SetConfig+0xb2>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a2c      	ldr	r2, [pc, #176]	; (80074e0 <TIM_Base_SetConfig+0x118>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d023      	beq.n	800747a <TIM_Base_SetConfig+0xb2>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a2b      	ldr	r2, [pc, #172]	; (80074e4 <TIM_Base_SetConfig+0x11c>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d01f      	beq.n	800747a <TIM_Base_SetConfig+0xb2>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a2a      	ldr	r2, [pc, #168]	; (80074e8 <TIM_Base_SetConfig+0x120>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d01b      	beq.n	800747a <TIM_Base_SetConfig+0xb2>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a29      	ldr	r2, [pc, #164]	; (80074ec <TIM_Base_SetConfig+0x124>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d017      	beq.n	800747a <TIM_Base_SetConfig+0xb2>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a28      	ldr	r2, [pc, #160]	; (80074f0 <TIM_Base_SetConfig+0x128>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d013      	beq.n	800747a <TIM_Base_SetConfig+0xb2>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a27      	ldr	r2, [pc, #156]	; (80074f4 <TIM_Base_SetConfig+0x12c>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d00f      	beq.n	800747a <TIM_Base_SetConfig+0xb2>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a26      	ldr	r2, [pc, #152]	; (80074f8 <TIM_Base_SetConfig+0x130>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d00b      	beq.n	800747a <TIM_Base_SetConfig+0xb2>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4a25      	ldr	r2, [pc, #148]	; (80074fc <TIM_Base_SetConfig+0x134>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d007      	beq.n	800747a <TIM_Base_SetConfig+0xb2>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a24      	ldr	r2, [pc, #144]	; (8007500 <TIM_Base_SetConfig+0x138>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d003      	beq.n	800747a <TIM_Base_SetConfig+0xb2>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a23      	ldr	r2, [pc, #140]	; (8007504 <TIM_Base_SetConfig+0x13c>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d108      	bne.n	800748c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	4313      	orrs	r3, r2
 800748a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	695b      	ldr	r3, [r3, #20]
 8007496:	4313      	orrs	r3, r2
 8007498:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	689a      	ldr	r2, [r3, #8]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a0a      	ldr	r2, [pc, #40]	; (80074dc <TIM_Base_SetConfig+0x114>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d003      	beq.n	80074c0 <TIM_Base_SetConfig+0xf8>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a0c      	ldr	r2, [pc, #48]	; (80074ec <TIM_Base_SetConfig+0x124>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d103      	bne.n	80074c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	691a      	ldr	r2, [r3, #16]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	615a      	str	r2, [r3, #20]
}
 80074ce:	bf00      	nop
 80074d0:	3714      	adds	r7, #20
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	40010000 	.word	0x40010000
 80074e0:	40000400 	.word	0x40000400
 80074e4:	40000800 	.word	0x40000800
 80074e8:	40000c00 	.word	0x40000c00
 80074ec:	40010400 	.word	0x40010400
 80074f0:	40014000 	.word	0x40014000
 80074f4:	40014400 	.word	0x40014400
 80074f8:	40014800 	.word	0x40014800
 80074fc:	40001800 	.word	0x40001800
 8007500:	40001c00 	.word	0x40001c00
 8007504:	40002000 	.word	0x40002000

08007508 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007508:	b480      	push	{r7}
 800750a:	b087      	sub	sp, #28
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6a1b      	ldr	r3, [r3, #32]
 8007516:	f023 0201 	bic.w	r2, r3, #1
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a1b      	ldr	r3, [r3, #32]
 8007522:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	699b      	ldr	r3, [r3, #24]
 800752e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f023 0303 	bic.w	r3, r3, #3
 800753e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	4313      	orrs	r3, r2
 8007548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	f023 0302 	bic.w	r3, r3, #2
 8007550:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	697a      	ldr	r2, [r7, #20]
 8007558:	4313      	orrs	r3, r2
 800755a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a20      	ldr	r2, [pc, #128]	; (80075e0 <TIM_OC1_SetConfig+0xd8>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d003      	beq.n	800756c <TIM_OC1_SetConfig+0x64>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a1f      	ldr	r2, [pc, #124]	; (80075e4 <TIM_OC1_SetConfig+0xdc>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d10c      	bne.n	8007586 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	f023 0308 	bic.w	r3, r3, #8
 8007572:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	697a      	ldr	r2, [r7, #20]
 800757a:	4313      	orrs	r3, r2
 800757c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	f023 0304 	bic.w	r3, r3, #4
 8007584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a15      	ldr	r2, [pc, #84]	; (80075e0 <TIM_OC1_SetConfig+0xd8>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d003      	beq.n	8007596 <TIM_OC1_SetConfig+0x8e>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a14      	ldr	r2, [pc, #80]	; (80075e4 <TIM_OC1_SetConfig+0xdc>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d111      	bne.n	80075ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800759c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	695b      	ldr	r3, [r3, #20]
 80075aa:	693a      	ldr	r2, [r7, #16]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	699b      	ldr	r3, [r3, #24]
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	693a      	ldr	r2, [r7, #16]
 80075be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	685a      	ldr	r2, [r3, #4]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	697a      	ldr	r2, [r7, #20]
 80075d2:	621a      	str	r2, [r3, #32]
}
 80075d4:	bf00      	nop
 80075d6:	371c      	adds	r7, #28
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr
 80075e0:	40010000 	.word	0x40010000
 80075e4:	40010400 	.word	0x40010400

080075e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b087      	sub	sp, #28
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	f023 0210 	bic.w	r2, r3, #16
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	699b      	ldr	r3, [r3, #24]
 800760e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800761e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	021b      	lsls	r3, r3, #8
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	4313      	orrs	r3, r2
 800762a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	f023 0320 	bic.w	r3, r3, #32
 8007632:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	011b      	lsls	r3, r3, #4
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	4313      	orrs	r3, r2
 800763e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a22      	ldr	r2, [pc, #136]	; (80076cc <TIM_OC2_SetConfig+0xe4>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d003      	beq.n	8007650 <TIM_OC2_SetConfig+0x68>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a21      	ldr	r2, [pc, #132]	; (80076d0 <TIM_OC2_SetConfig+0xe8>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d10d      	bne.n	800766c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007656:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	011b      	lsls	r3, r3, #4
 800765e:	697a      	ldr	r2, [r7, #20]
 8007660:	4313      	orrs	r3, r2
 8007662:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800766a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a17      	ldr	r2, [pc, #92]	; (80076cc <TIM_OC2_SetConfig+0xe4>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d003      	beq.n	800767c <TIM_OC2_SetConfig+0x94>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a16      	ldr	r2, [pc, #88]	; (80076d0 <TIM_OC2_SetConfig+0xe8>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d113      	bne.n	80076a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007682:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800768a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	695b      	ldr	r3, [r3, #20]
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	693a      	ldr	r2, [r7, #16]
 8007694:	4313      	orrs	r3, r2
 8007696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	699b      	ldr	r3, [r3, #24]
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	693a      	ldr	r2, [r7, #16]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	693a      	ldr	r2, [r7, #16]
 80076a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	685a      	ldr	r2, [r3, #4]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	621a      	str	r2, [r3, #32]
}
 80076be:	bf00      	nop
 80076c0:	371c      	adds	r7, #28
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	40010000 	.word	0x40010000
 80076d0:	40010400 	.word	0x40010400

080076d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b087      	sub	sp, #28
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a1b      	ldr	r3, [r3, #32]
 80076ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	69db      	ldr	r3, [r3, #28]
 80076fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f023 0303 	bic.w	r3, r3, #3
 800770a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	4313      	orrs	r3, r2
 8007714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800771c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	021b      	lsls	r3, r3, #8
 8007724:	697a      	ldr	r2, [r7, #20]
 8007726:	4313      	orrs	r3, r2
 8007728:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a21      	ldr	r2, [pc, #132]	; (80077b4 <TIM_OC3_SetConfig+0xe0>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d003      	beq.n	800773a <TIM_OC3_SetConfig+0x66>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a20      	ldr	r2, [pc, #128]	; (80077b8 <TIM_OC3_SetConfig+0xe4>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d10d      	bne.n	8007756 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007740:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	021b      	lsls	r3, r3, #8
 8007748:	697a      	ldr	r2, [r7, #20]
 800774a:	4313      	orrs	r3, r2
 800774c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007754:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a16      	ldr	r2, [pc, #88]	; (80077b4 <TIM_OC3_SetConfig+0xe0>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d003      	beq.n	8007766 <TIM_OC3_SetConfig+0x92>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a15      	ldr	r2, [pc, #84]	; (80077b8 <TIM_OC3_SetConfig+0xe4>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d113      	bne.n	800778e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800776c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007774:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	011b      	lsls	r3, r3, #4
 800777c:	693a      	ldr	r2, [r7, #16]
 800777e:	4313      	orrs	r3, r2
 8007780:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	699b      	ldr	r3, [r3, #24]
 8007786:	011b      	lsls	r3, r3, #4
 8007788:	693a      	ldr	r2, [r7, #16]
 800778a:	4313      	orrs	r3, r2
 800778c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	693a      	ldr	r2, [r7, #16]
 8007792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	685a      	ldr	r2, [r3, #4]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	697a      	ldr	r2, [r7, #20]
 80077a6:	621a      	str	r2, [r3, #32]
}
 80077a8:	bf00      	nop
 80077aa:	371c      	adds	r7, #28
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr
 80077b4:	40010000 	.word	0x40010000
 80077b8:	40010400 	.word	0x40010400

080077bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077bc:	b480      	push	{r7}
 80077be:	b087      	sub	sp, #28
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a1b      	ldr	r3, [r3, #32]
 80077ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a1b      	ldr	r3, [r3, #32]
 80077d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	69db      	ldr	r3, [r3, #28]
 80077e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	021b      	lsls	r3, r3, #8
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007806:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	031b      	lsls	r3, r3, #12
 800780e:	693a      	ldr	r2, [r7, #16]
 8007810:	4313      	orrs	r3, r2
 8007812:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	4a12      	ldr	r2, [pc, #72]	; (8007860 <TIM_OC4_SetConfig+0xa4>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d003      	beq.n	8007824 <TIM_OC4_SetConfig+0x68>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a11      	ldr	r2, [pc, #68]	; (8007864 <TIM_OC4_SetConfig+0xa8>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d109      	bne.n	8007838 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800782a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	695b      	ldr	r3, [r3, #20]
 8007830:	019b      	lsls	r3, r3, #6
 8007832:	697a      	ldr	r2, [r7, #20]
 8007834:	4313      	orrs	r3, r2
 8007836:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	697a      	ldr	r2, [r7, #20]
 800783c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	685a      	ldr	r2, [r3, #4]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	693a      	ldr	r2, [r7, #16]
 8007850:	621a      	str	r2, [r3, #32]
}
 8007852:	bf00      	nop
 8007854:	371c      	adds	r7, #28
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	40010000 	.word	0x40010000
 8007864:	40010400 	.word	0x40010400

08007868 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007868:	b480      	push	{r7}
 800786a:	b087      	sub	sp, #28
 800786c:	af00      	add	r7, sp, #0
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	60b9      	str	r1, [r7, #8]
 8007872:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6a1b      	ldr	r3, [r3, #32]
 8007878:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	6a1b      	ldr	r3, [r3, #32]
 800787e:	f023 0201 	bic.w	r2, r3, #1
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	699b      	ldr	r3, [r3, #24]
 800788a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007892:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	011b      	lsls	r3, r3, #4
 8007898:	693a      	ldr	r2, [r7, #16]
 800789a:	4313      	orrs	r3, r2
 800789c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	f023 030a 	bic.w	r3, r3, #10
 80078a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	693a      	ldr	r2, [r7, #16]
 80078b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	697a      	ldr	r2, [r7, #20]
 80078b8:	621a      	str	r2, [r3, #32]
}
 80078ba:	bf00      	nop
 80078bc:	371c      	adds	r7, #28
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr

080078c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078c6:	b480      	push	{r7}
 80078c8:	b087      	sub	sp, #28
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	60f8      	str	r0, [r7, #12]
 80078ce:	60b9      	str	r1, [r7, #8]
 80078d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6a1b      	ldr	r3, [r3, #32]
 80078d6:	f023 0210 	bic.w	r2, r3, #16
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	699b      	ldr	r3, [r3, #24]
 80078e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6a1b      	ldr	r3, [r3, #32]
 80078e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	031b      	lsls	r3, r3, #12
 80078f6:	697a      	ldr	r2, [r7, #20]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007902:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	011b      	lsls	r3, r3, #4
 8007908:	693a      	ldr	r2, [r7, #16]
 800790a:	4313      	orrs	r3, r2
 800790c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	697a      	ldr	r2, [r7, #20]
 8007912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	693a      	ldr	r2, [r7, #16]
 8007918:	621a      	str	r2, [r3, #32]
}
 800791a:	bf00      	nop
 800791c:	371c      	adds	r7, #28
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007926:	b480      	push	{r7}
 8007928:	b085      	sub	sp, #20
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
 800792e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800793c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800793e:	683a      	ldr	r2, [r7, #0]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	4313      	orrs	r3, r2
 8007944:	f043 0307 	orr.w	r3, r3, #7
 8007948:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	609a      	str	r2, [r3, #8]
}
 8007950:	bf00      	nop
 8007952:	3714      	adds	r7, #20
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800795c:	b480      	push	{r7}
 800795e:	b087      	sub	sp, #28
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	607a      	str	r2, [r7, #4]
 8007968:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007976:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	021a      	lsls	r2, r3, #8
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	431a      	orrs	r2, r3
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	4313      	orrs	r3, r2
 8007984:	697a      	ldr	r2, [r7, #20]
 8007986:	4313      	orrs	r3, r2
 8007988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	697a      	ldr	r2, [r7, #20]
 800798e:	609a      	str	r2, [r3, #8]
}
 8007990:	bf00      	nop
 8007992:	371c      	adds	r7, #28
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800799c:	b480      	push	{r7}
 800799e:	b087      	sub	sp, #28
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	f003 031f 	and.w	r3, r3, #31
 80079ae:	2201      	movs	r2, #1
 80079b0:	fa02 f303 	lsl.w	r3, r2, r3
 80079b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6a1a      	ldr	r2, [r3, #32]
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	43db      	mvns	r3, r3
 80079be:	401a      	ands	r2, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6a1a      	ldr	r2, [r3, #32]
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	f003 031f 	and.w	r3, r3, #31
 80079ce:	6879      	ldr	r1, [r7, #4]
 80079d0:	fa01 f303 	lsl.w	r3, r1, r3
 80079d4:	431a      	orrs	r2, r3
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	621a      	str	r2, [r3, #32]
}
 80079da:	bf00      	nop
 80079dc:	371c      	adds	r7, #28
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
	...

080079e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d101      	bne.n	8007a00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079fc:	2302      	movs	r3, #2
 80079fe:	e05a      	b.n	8007ab6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a21      	ldr	r2, [pc, #132]	; (8007ac4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d022      	beq.n	8007a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a4c:	d01d      	beq.n	8007a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a1d      	ldr	r2, [pc, #116]	; (8007ac8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d018      	beq.n	8007a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a1b      	ldr	r2, [pc, #108]	; (8007acc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d013      	beq.n	8007a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a1a      	ldr	r2, [pc, #104]	; (8007ad0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d00e      	beq.n	8007a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a18      	ldr	r2, [pc, #96]	; (8007ad4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d009      	beq.n	8007a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a17      	ldr	r2, [pc, #92]	; (8007ad8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d004      	beq.n	8007a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a15      	ldr	r2, [pc, #84]	; (8007adc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d10c      	bne.n	8007aa4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	68ba      	ldr	r2, [r7, #8]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	68ba      	ldr	r2, [r7, #8]
 8007aa2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3714      	adds	r7, #20
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	40010000 	.word	0x40010000
 8007ac8:	40000400 	.word	0x40000400
 8007acc:	40000800 	.word	0x40000800
 8007ad0:	40000c00 	.word	0x40000c00
 8007ad4:	40010400 	.word	0x40010400
 8007ad8:	40014000 	.word	0x40014000
 8007adc:	40001800 	.word	0x40001800

08007ae0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ae8:	bf00      	nop
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007afc:	bf00      	nop
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d101      	bne.n	8007b1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e03f      	b.n	8007b9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d106      	bne.n	8007b34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f7fa fe64 	bl	80027fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2224      	movs	r2, #36	; 0x24
 8007b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	68da      	ldr	r2, [r3, #12]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f829 	bl	8007ba4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	691a      	ldr	r2, [r3, #16]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	695a      	ldr	r2, [r3, #20]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68da      	ldr	r2, [r3, #12]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2220      	movs	r2, #32
 8007b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2220      	movs	r2, #32
 8007b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3708      	adds	r7, #8
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
	...

08007ba4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba8:	b09f      	sub	sp, #124	; 0x7c
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bba:	68d9      	ldr	r1, [r3, #12]
 8007bbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	ea40 0301 	orr.w	r3, r0, r1
 8007bc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bc8:	689a      	ldr	r2, [r3, #8]
 8007bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	431a      	orrs	r2, r3
 8007bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bd2:	695b      	ldr	r3, [r3, #20]
 8007bd4:	431a      	orrs	r2, r3
 8007bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bd8:	69db      	ldr	r3, [r3, #28]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007be8:	f021 010c 	bic.w	r1, r1, #12
 8007bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007bf2:	430b      	orrs	r3, r1
 8007bf4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	695b      	ldr	r3, [r3, #20]
 8007bfc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c02:	6999      	ldr	r1, [r3, #24]
 8007c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	ea40 0301 	orr.w	r3, r0, r1
 8007c0c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	4bc5      	ldr	r3, [pc, #788]	; (8007f28 <UART_SetConfig+0x384>)
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d004      	beq.n	8007c22 <UART_SetConfig+0x7e>
 8007c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	4bc3      	ldr	r3, [pc, #780]	; (8007f2c <UART_SetConfig+0x388>)
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d103      	bne.n	8007c2a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c22:	f7fe fc2d 	bl	8006480 <HAL_RCC_GetPCLK2Freq>
 8007c26:	6778      	str	r0, [r7, #116]	; 0x74
 8007c28:	e002      	b.n	8007c30 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c2a:	f7fe fc15 	bl	8006458 <HAL_RCC_GetPCLK1Freq>
 8007c2e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c32:	69db      	ldr	r3, [r3, #28]
 8007c34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c38:	f040 80b6 	bne.w	8007da8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c3e:	461c      	mov	r4, r3
 8007c40:	f04f 0500 	mov.w	r5, #0
 8007c44:	4622      	mov	r2, r4
 8007c46:	462b      	mov	r3, r5
 8007c48:	1891      	adds	r1, r2, r2
 8007c4a:	6439      	str	r1, [r7, #64]	; 0x40
 8007c4c:	415b      	adcs	r3, r3
 8007c4e:	647b      	str	r3, [r7, #68]	; 0x44
 8007c50:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007c54:	1912      	adds	r2, r2, r4
 8007c56:	eb45 0303 	adc.w	r3, r5, r3
 8007c5a:	f04f 0000 	mov.w	r0, #0
 8007c5e:	f04f 0100 	mov.w	r1, #0
 8007c62:	00d9      	lsls	r1, r3, #3
 8007c64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007c68:	00d0      	lsls	r0, r2, #3
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	1911      	adds	r1, r2, r4
 8007c70:	6639      	str	r1, [r7, #96]	; 0x60
 8007c72:	416b      	adcs	r3, r5
 8007c74:	667b      	str	r3, [r7, #100]	; 0x64
 8007c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	f04f 0300 	mov.w	r3, #0
 8007c80:	1891      	adds	r1, r2, r2
 8007c82:	63b9      	str	r1, [r7, #56]	; 0x38
 8007c84:	415b      	adcs	r3, r3
 8007c86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007c8c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007c90:	f7f9 f80a 	bl	8000ca8 <__aeabi_uldivmod>
 8007c94:	4602      	mov	r2, r0
 8007c96:	460b      	mov	r3, r1
 8007c98:	4ba5      	ldr	r3, [pc, #660]	; (8007f30 <UART_SetConfig+0x38c>)
 8007c9a:	fba3 2302 	umull	r2, r3, r3, r2
 8007c9e:	095b      	lsrs	r3, r3, #5
 8007ca0:	011e      	lsls	r6, r3, #4
 8007ca2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ca4:	461c      	mov	r4, r3
 8007ca6:	f04f 0500 	mov.w	r5, #0
 8007caa:	4622      	mov	r2, r4
 8007cac:	462b      	mov	r3, r5
 8007cae:	1891      	adds	r1, r2, r2
 8007cb0:	6339      	str	r1, [r7, #48]	; 0x30
 8007cb2:	415b      	adcs	r3, r3
 8007cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8007cb6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007cba:	1912      	adds	r2, r2, r4
 8007cbc:	eb45 0303 	adc.w	r3, r5, r3
 8007cc0:	f04f 0000 	mov.w	r0, #0
 8007cc4:	f04f 0100 	mov.w	r1, #0
 8007cc8:	00d9      	lsls	r1, r3, #3
 8007cca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007cce:	00d0      	lsls	r0, r2, #3
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	1911      	adds	r1, r2, r4
 8007cd6:	65b9      	str	r1, [r7, #88]	; 0x58
 8007cd8:	416b      	adcs	r3, r5
 8007cda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	f04f 0300 	mov.w	r3, #0
 8007ce6:	1891      	adds	r1, r2, r2
 8007ce8:	62b9      	str	r1, [r7, #40]	; 0x28
 8007cea:	415b      	adcs	r3, r3
 8007cec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007cf2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007cf6:	f7f8 ffd7 	bl	8000ca8 <__aeabi_uldivmod>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	4b8c      	ldr	r3, [pc, #560]	; (8007f30 <UART_SetConfig+0x38c>)
 8007d00:	fba3 1302 	umull	r1, r3, r3, r2
 8007d04:	095b      	lsrs	r3, r3, #5
 8007d06:	2164      	movs	r1, #100	; 0x64
 8007d08:	fb01 f303 	mul.w	r3, r1, r3
 8007d0c:	1ad3      	subs	r3, r2, r3
 8007d0e:	00db      	lsls	r3, r3, #3
 8007d10:	3332      	adds	r3, #50	; 0x32
 8007d12:	4a87      	ldr	r2, [pc, #540]	; (8007f30 <UART_SetConfig+0x38c>)
 8007d14:	fba2 2303 	umull	r2, r3, r2, r3
 8007d18:	095b      	lsrs	r3, r3, #5
 8007d1a:	005b      	lsls	r3, r3, #1
 8007d1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007d20:	441e      	add	r6, r3
 8007d22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d24:	4618      	mov	r0, r3
 8007d26:	f04f 0100 	mov.w	r1, #0
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	1894      	adds	r4, r2, r2
 8007d30:	623c      	str	r4, [r7, #32]
 8007d32:	415b      	adcs	r3, r3
 8007d34:	627b      	str	r3, [r7, #36]	; 0x24
 8007d36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d3a:	1812      	adds	r2, r2, r0
 8007d3c:	eb41 0303 	adc.w	r3, r1, r3
 8007d40:	f04f 0400 	mov.w	r4, #0
 8007d44:	f04f 0500 	mov.w	r5, #0
 8007d48:	00dd      	lsls	r5, r3, #3
 8007d4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007d4e:	00d4      	lsls	r4, r2, #3
 8007d50:	4622      	mov	r2, r4
 8007d52:	462b      	mov	r3, r5
 8007d54:	1814      	adds	r4, r2, r0
 8007d56:	653c      	str	r4, [r7, #80]	; 0x50
 8007d58:	414b      	adcs	r3, r1
 8007d5a:	657b      	str	r3, [r7, #84]	; 0x54
 8007d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	461a      	mov	r2, r3
 8007d62:	f04f 0300 	mov.w	r3, #0
 8007d66:	1891      	adds	r1, r2, r2
 8007d68:	61b9      	str	r1, [r7, #24]
 8007d6a:	415b      	adcs	r3, r3
 8007d6c:	61fb      	str	r3, [r7, #28]
 8007d6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d72:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007d76:	f7f8 ff97 	bl	8000ca8 <__aeabi_uldivmod>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	4b6c      	ldr	r3, [pc, #432]	; (8007f30 <UART_SetConfig+0x38c>)
 8007d80:	fba3 1302 	umull	r1, r3, r3, r2
 8007d84:	095b      	lsrs	r3, r3, #5
 8007d86:	2164      	movs	r1, #100	; 0x64
 8007d88:	fb01 f303 	mul.w	r3, r1, r3
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	00db      	lsls	r3, r3, #3
 8007d90:	3332      	adds	r3, #50	; 0x32
 8007d92:	4a67      	ldr	r2, [pc, #412]	; (8007f30 <UART_SetConfig+0x38c>)
 8007d94:	fba2 2303 	umull	r2, r3, r2, r3
 8007d98:	095b      	lsrs	r3, r3, #5
 8007d9a:	f003 0207 	and.w	r2, r3, #7
 8007d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4432      	add	r2, r6
 8007da4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007da6:	e0b9      	b.n	8007f1c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007da8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007daa:	461c      	mov	r4, r3
 8007dac:	f04f 0500 	mov.w	r5, #0
 8007db0:	4622      	mov	r2, r4
 8007db2:	462b      	mov	r3, r5
 8007db4:	1891      	adds	r1, r2, r2
 8007db6:	6139      	str	r1, [r7, #16]
 8007db8:	415b      	adcs	r3, r3
 8007dba:	617b      	str	r3, [r7, #20]
 8007dbc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007dc0:	1912      	adds	r2, r2, r4
 8007dc2:	eb45 0303 	adc.w	r3, r5, r3
 8007dc6:	f04f 0000 	mov.w	r0, #0
 8007dca:	f04f 0100 	mov.w	r1, #0
 8007dce:	00d9      	lsls	r1, r3, #3
 8007dd0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007dd4:	00d0      	lsls	r0, r2, #3
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	460b      	mov	r3, r1
 8007dda:	eb12 0804 	adds.w	r8, r2, r4
 8007dde:	eb43 0905 	adc.w	r9, r3, r5
 8007de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	4618      	mov	r0, r3
 8007de8:	f04f 0100 	mov.w	r1, #0
 8007dec:	f04f 0200 	mov.w	r2, #0
 8007df0:	f04f 0300 	mov.w	r3, #0
 8007df4:	008b      	lsls	r3, r1, #2
 8007df6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007dfa:	0082      	lsls	r2, r0, #2
 8007dfc:	4640      	mov	r0, r8
 8007dfe:	4649      	mov	r1, r9
 8007e00:	f7f8 ff52 	bl	8000ca8 <__aeabi_uldivmod>
 8007e04:	4602      	mov	r2, r0
 8007e06:	460b      	mov	r3, r1
 8007e08:	4b49      	ldr	r3, [pc, #292]	; (8007f30 <UART_SetConfig+0x38c>)
 8007e0a:	fba3 2302 	umull	r2, r3, r3, r2
 8007e0e:	095b      	lsrs	r3, r3, #5
 8007e10:	011e      	lsls	r6, r3, #4
 8007e12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e14:	4618      	mov	r0, r3
 8007e16:	f04f 0100 	mov.w	r1, #0
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	1894      	adds	r4, r2, r2
 8007e20:	60bc      	str	r4, [r7, #8]
 8007e22:	415b      	adcs	r3, r3
 8007e24:	60fb      	str	r3, [r7, #12]
 8007e26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e2a:	1812      	adds	r2, r2, r0
 8007e2c:	eb41 0303 	adc.w	r3, r1, r3
 8007e30:	f04f 0400 	mov.w	r4, #0
 8007e34:	f04f 0500 	mov.w	r5, #0
 8007e38:	00dd      	lsls	r5, r3, #3
 8007e3a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007e3e:	00d4      	lsls	r4, r2, #3
 8007e40:	4622      	mov	r2, r4
 8007e42:	462b      	mov	r3, r5
 8007e44:	1814      	adds	r4, r2, r0
 8007e46:	64bc      	str	r4, [r7, #72]	; 0x48
 8007e48:	414b      	adcs	r3, r1
 8007e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	4618      	mov	r0, r3
 8007e52:	f04f 0100 	mov.w	r1, #0
 8007e56:	f04f 0200 	mov.w	r2, #0
 8007e5a:	f04f 0300 	mov.w	r3, #0
 8007e5e:	008b      	lsls	r3, r1, #2
 8007e60:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007e64:	0082      	lsls	r2, r0, #2
 8007e66:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007e6a:	f7f8 ff1d 	bl	8000ca8 <__aeabi_uldivmod>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	460b      	mov	r3, r1
 8007e72:	4b2f      	ldr	r3, [pc, #188]	; (8007f30 <UART_SetConfig+0x38c>)
 8007e74:	fba3 1302 	umull	r1, r3, r3, r2
 8007e78:	095b      	lsrs	r3, r3, #5
 8007e7a:	2164      	movs	r1, #100	; 0x64
 8007e7c:	fb01 f303 	mul.w	r3, r1, r3
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	011b      	lsls	r3, r3, #4
 8007e84:	3332      	adds	r3, #50	; 0x32
 8007e86:	4a2a      	ldr	r2, [pc, #168]	; (8007f30 <UART_SetConfig+0x38c>)
 8007e88:	fba2 2303 	umull	r2, r3, r2, r3
 8007e8c:	095b      	lsrs	r3, r3, #5
 8007e8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e92:	441e      	add	r6, r3
 8007e94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e96:	4618      	mov	r0, r3
 8007e98:	f04f 0100 	mov.w	r1, #0
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	1894      	adds	r4, r2, r2
 8007ea2:	603c      	str	r4, [r7, #0]
 8007ea4:	415b      	adcs	r3, r3
 8007ea6:	607b      	str	r3, [r7, #4]
 8007ea8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007eac:	1812      	adds	r2, r2, r0
 8007eae:	eb41 0303 	adc.w	r3, r1, r3
 8007eb2:	f04f 0400 	mov.w	r4, #0
 8007eb6:	f04f 0500 	mov.w	r5, #0
 8007eba:	00dd      	lsls	r5, r3, #3
 8007ebc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007ec0:	00d4      	lsls	r4, r2, #3
 8007ec2:	4622      	mov	r2, r4
 8007ec4:	462b      	mov	r3, r5
 8007ec6:	eb12 0a00 	adds.w	sl, r2, r0
 8007eca:	eb43 0b01 	adc.w	fp, r3, r1
 8007ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f04f 0100 	mov.w	r1, #0
 8007ed8:	f04f 0200 	mov.w	r2, #0
 8007edc:	f04f 0300 	mov.w	r3, #0
 8007ee0:	008b      	lsls	r3, r1, #2
 8007ee2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007ee6:	0082      	lsls	r2, r0, #2
 8007ee8:	4650      	mov	r0, sl
 8007eea:	4659      	mov	r1, fp
 8007eec:	f7f8 fedc 	bl	8000ca8 <__aeabi_uldivmod>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	4b0e      	ldr	r3, [pc, #56]	; (8007f30 <UART_SetConfig+0x38c>)
 8007ef6:	fba3 1302 	umull	r1, r3, r3, r2
 8007efa:	095b      	lsrs	r3, r3, #5
 8007efc:	2164      	movs	r1, #100	; 0x64
 8007efe:	fb01 f303 	mul.w	r3, r1, r3
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	011b      	lsls	r3, r3, #4
 8007f06:	3332      	adds	r3, #50	; 0x32
 8007f08:	4a09      	ldr	r2, [pc, #36]	; (8007f30 <UART_SetConfig+0x38c>)
 8007f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f0e:	095b      	lsrs	r3, r3, #5
 8007f10:	f003 020f 	and.w	r2, r3, #15
 8007f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4432      	add	r2, r6
 8007f1a:	609a      	str	r2, [r3, #8]
}
 8007f1c:	bf00      	nop
 8007f1e:	377c      	adds	r7, #124	; 0x7c
 8007f20:	46bd      	mov	sp, r7
 8007f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f26:	bf00      	nop
 8007f28:	40011000 	.word	0x40011000
 8007f2c:	40011400 	.word	0x40011400
 8007f30:	51eb851f 	.word	0x51eb851f

08007f34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f34:	b084      	sub	sp, #16
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b084      	sub	sp, #16
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
 8007f3e:	f107 001c 	add.w	r0, r7, #28
 8007f42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d122      	bne.n	8007f92 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007f60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d105      	bne.n	8007f86 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f001 fb1c 	bl	80095c4 <USB_CoreReset>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	73fb      	strb	r3, [r7, #15]
 8007f90:	e01a      	b.n	8007fc8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f001 fb10 	bl	80095c4 <USB_CoreReset>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d106      	bne.n	8007fbc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	639a      	str	r2, [r3, #56]	; 0x38
 8007fba:	e005      	b.n	8007fc8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d10b      	bne.n	8007fe6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	f043 0206 	orr.w	r2, r3, #6
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	f043 0220 	orr.w	r2, r3, #32
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3710      	adds	r7, #16
 8007fec:	46bd      	mov	sp, r7
 8007fee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ff2:	b004      	add	sp, #16
 8007ff4:	4770      	bx	lr
	...

08007ff8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b087      	sub	sp, #28
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	4613      	mov	r3, r2
 8008004:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008006:	79fb      	ldrb	r3, [r7, #7]
 8008008:	2b02      	cmp	r3, #2
 800800a:	d165      	bne.n	80080d8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	4a41      	ldr	r2, [pc, #260]	; (8008114 <USB_SetTurnaroundTime+0x11c>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d906      	bls.n	8008022 <USB_SetTurnaroundTime+0x2a>
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	4a40      	ldr	r2, [pc, #256]	; (8008118 <USB_SetTurnaroundTime+0x120>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d202      	bcs.n	8008022 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800801c:	230f      	movs	r3, #15
 800801e:	617b      	str	r3, [r7, #20]
 8008020:	e062      	b.n	80080e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	4a3c      	ldr	r2, [pc, #240]	; (8008118 <USB_SetTurnaroundTime+0x120>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d306      	bcc.n	8008038 <USB_SetTurnaroundTime+0x40>
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	4a3b      	ldr	r2, [pc, #236]	; (800811c <USB_SetTurnaroundTime+0x124>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d202      	bcs.n	8008038 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008032:	230e      	movs	r3, #14
 8008034:	617b      	str	r3, [r7, #20]
 8008036:	e057      	b.n	80080e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	4a38      	ldr	r2, [pc, #224]	; (800811c <USB_SetTurnaroundTime+0x124>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d306      	bcc.n	800804e <USB_SetTurnaroundTime+0x56>
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	4a37      	ldr	r2, [pc, #220]	; (8008120 <USB_SetTurnaroundTime+0x128>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d202      	bcs.n	800804e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008048:	230d      	movs	r3, #13
 800804a:	617b      	str	r3, [r7, #20]
 800804c:	e04c      	b.n	80080e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	4a33      	ldr	r2, [pc, #204]	; (8008120 <USB_SetTurnaroundTime+0x128>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d306      	bcc.n	8008064 <USB_SetTurnaroundTime+0x6c>
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	4a32      	ldr	r2, [pc, #200]	; (8008124 <USB_SetTurnaroundTime+0x12c>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d802      	bhi.n	8008064 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800805e:	230c      	movs	r3, #12
 8008060:	617b      	str	r3, [r7, #20]
 8008062:	e041      	b.n	80080e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	4a2f      	ldr	r2, [pc, #188]	; (8008124 <USB_SetTurnaroundTime+0x12c>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d906      	bls.n	800807a <USB_SetTurnaroundTime+0x82>
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	4a2e      	ldr	r2, [pc, #184]	; (8008128 <USB_SetTurnaroundTime+0x130>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d802      	bhi.n	800807a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008074:	230b      	movs	r3, #11
 8008076:	617b      	str	r3, [r7, #20]
 8008078:	e036      	b.n	80080e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	4a2a      	ldr	r2, [pc, #168]	; (8008128 <USB_SetTurnaroundTime+0x130>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d906      	bls.n	8008090 <USB_SetTurnaroundTime+0x98>
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	4a29      	ldr	r2, [pc, #164]	; (800812c <USB_SetTurnaroundTime+0x134>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d802      	bhi.n	8008090 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800808a:	230a      	movs	r3, #10
 800808c:	617b      	str	r3, [r7, #20]
 800808e:	e02b      	b.n	80080e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	4a26      	ldr	r2, [pc, #152]	; (800812c <USB_SetTurnaroundTime+0x134>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d906      	bls.n	80080a6 <USB_SetTurnaroundTime+0xae>
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	4a25      	ldr	r2, [pc, #148]	; (8008130 <USB_SetTurnaroundTime+0x138>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d202      	bcs.n	80080a6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80080a0:	2309      	movs	r3, #9
 80080a2:	617b      	str	r3, [r7, #20]
 80080a4:	e020      	b.n	80080e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	4a21      	ldr	r2, [pc, #132]	; (8008130 <USB_SetTurnaroundTime+0x138>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d306      	bcc.n	80080bc <USB_SetTurnaroundTime+0xc4>
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	4a20      	ldr	r2, [pc, #128]	; (8008134 <USB_SetTurnaroundTime+0x13c>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d802      	bhi.n	80080bc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80080b6:	2308      	movs	r3, #8
 80080b8:	617b      	str	r3, [r7, #20]
 80080ba:	e015      	b.n	80080e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	4a1d      	ldr	r2, [pc, #116]	; (8008134 <USB_SetTurnaroundTime+0x13c>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d906      	bls.n	80080d2 <USB_SetTurnaroundTime+0xda>
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	4a1c      	ldr	r2, [pc, #112]	; (8008138 <USB_SetTurnaroundTime+0x140>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d202      	bcs.n	80080d2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80080cc:	2307      	movs	r3, #7
 80080ce:	617b      	str	r3, [r7, #20]
 80080d0:	e00a      	b.n	80080e8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80080d2:	2306      	movs	r3, #6
 80080d4:	617b      	str	r3, [r7, #20]
 80080d6:	e007      	b.n	80080e8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80080d8:	79fb      	ldrb	r3, [r7, #7]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d102      	bne.n	80080e4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80080de:	2309      	movs	r3, #9
 80080e0:	617b      	str	r3, [r7, #20]
 80080e2:	e001      	b.n	80080e8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80080e4:	2309      	movs	r3, #9
 80080e6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	68da      	ldr	r2, [r3, #12]
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	029b      	lsls	r3, r3, #10
 80080fc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008100:	431a      	orrs	r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008106:	2300      	movs	r3, #0
}
 8008108:	4618      	mov	r0, r3
 800810a:	371c      	adds	r7, #28
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr
 8008114:	00d8acbf 	.word	0x00d8acbf
 8008118:	00e4e1c0 	.word	0x00e4e1c0
 800811c:	00f42400 	.word	0x00f42400
 8008120:	01067380 	.word	0x01067380
 8008124:	011a499f 	.word	0x011a499f
 8008128:	01312cff 	.word	0x01312cff
 800812c:	014ca43f 	.word	0x014ca43f
 8008130:	016e3600 	.word	0x016e3600
 8008134:	01a6ab1f 	.word	0x01a6ab1f
 8008138:	01e84800 	.word	0x01e84800

0800813c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	f043 0201 	orr.w	r2, r3, #1
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	370c      	adds	r7, #12
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr

0800815e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800815e:	b480      	push	{r7}
 8008160:	b083      	sub	sp, #12
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f023 0201 	bic.w	r2, r3, #1
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008172:	2300      	movs	r3, #0
}
 8008174:	4618      	mov	r0, r3
 8008176:	370c      	adds	r7, #12
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	460b      	mov	r3, r1
 800818a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800818c:	2300      	movs	r3, #0
 800818e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800819c:	78fb      	ldrb	r3, [r7, #3]
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d115      	bne.n	80081ce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80081ae:	2001      	movs	r0, #1
 80081b0:	f7fa fd92 	bl	8002cd8 <HAL_Delay>
      ms++;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	3301      	adds	r3, #1
 80081b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f001 f972 	bl	80094a4 <USB_GetMode>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d01e      	beq.n	8008204 <USB_SetCurrentMode+0x84>
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2b31      	cmp	r3, #49	; 0x31
 80081ca:	d9f0      	bls.n	80081ae <USB_SetCurrentMode+0x2e>
 80081cc:	e01a      	b.n	8008204 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80081ce:	78fb      	ldrb	r3, [r7, #3]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d115      	bne.n	8008200 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80081e0:	2001      	movs	r0, #1
 80081e2:	f7fa fd79 	bl	8002cd8 <HAL_Delay>
      ms++;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	3301      	adds	r3, #1
 80081ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f001 f959 	bl	80094a4 <USB_GetMode>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d005      	beq.n	8008204 <USB_SetCurrentMode+0x84>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2b31      	cmp	r3, #49	; 0x31
 80081fc:	d9f0      	bls.n	80081e0 <USB_SetCurrentMode+0x60>
 80081fe:	e001      	b.n	8008204 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	e005      	b.n	8008210 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2b32      	cmp	r3, #50	; 0x32
 8008208:	d101      	bne.n	800820e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	e000      	b.n	8008210 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008218:	b084      	sub	sp, #16
 800821a:	b580      	push	{r7, lr}
 800821c:	b086      	sub	sp, #24
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
 8008222:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008226:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800822a:	2300      	movs	r3, #0
 800822c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008232:	2300      	movs	r3, #0
 8008234:	613b      	str	r3, [r7, #16]
 8008236:	e009      	b.n	800824c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	3340      	adds	r3, #64	; 0x40
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	4413      	add	r3, r2
 8008242:	2200      	movs	r2, #0
 8008244:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	3301      	adds	r3, #1
 800824a:	613b      	str	r3, [r7, #16]
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	2b0e      	cmp	r3, #14
 8008250:	d9f2      	bls.n	8008238 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008254:	2b00      	cmp	r3, #0
 8008256:	d11c      	bne.n	8008292 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	68fa      	ldr	r2, [r7, #12]
 8008262:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008266:	f043 0302 	orr.w	r3, r3, #2
 800826a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008270:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800827c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008288:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	639a      	str	r2, [r3, #56]	; 0x38
 8008290:	e00b      	b.n	80082aa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008296:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80082b0:	461a      	mov	r2, r3
 80082b2:	2300      	movs	r3, #0
 80082b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082bc:	4619      	mov	r1, r3
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082c4:	461a      	mov	r2, r3
 80082c6:	680b      	ldr	r3, [r1, #0]
 80082c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80082ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d10c      	bne.n	80082ea <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80082d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d104      	bne.n	80082e0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80082d6:	2100      	movs	r1, #0
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f945 	bl	8008568 <USB_SetDevSpeed>
 80082de:	e008      	b.n	80082f2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80082e0:	2101      	movs	r1, #1
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 f940 	bl	8008568 <USB_SetDevSpeed>
 80082e8:	e003      	b.n	80082f2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80082ea:	2103      	movs	r1, #3
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 f93b 	bl	8008568 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80082f2:	2110      	movs	r1, #16
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f8f3 	bl	80084e0 <USB_FlushTxFifo>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d001      	beq.n	8008304 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 f90f 	bl	8008528 <USB_FlushRxFifo>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d001      	beq.n	8008314 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800831a:	461a      	mov	r2, r3
 800831c:	2300      	movs	r3, #0
 800831e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008326:	461a      	mov	r2, r3
 8008328:	2300      	movs	r3, #0
 800832a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008332:	461a      	mov	r2, r3
 8008334:	2300      	movs	r3, #0
 8008336:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008338:	2300      	movs	r3, #0
 800833a:	613b      	str	r3, [r7, #16]
 800833c:	e043      	b.n	80083c6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	015a      	lsls	r2, r3, #5
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	4413      	add	r3, r2
 8008346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008350:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008354:	d118      	bne.n	8008388 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d10a      	bne.n	8008372 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	015a      	lsls	r2, r3, #5
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	4413      	add	r3, r2
 8008364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008368:	461a      	mov	r2, r3
 800836a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800836e:	6013      	str	r3, [r2, #0]
 8008370:	e013      	b.n	800839a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	015a      	lsls	r2, r3, #5
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	4413      	add	r3, r2
 800837a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800837e:	461a      	mov	r2, r3
 8008380:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008384:	6013      	str	r3, [r2, #0]
 8008386:	e008      	b.n	800839a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	015a      	lsls	r2, r3, #5
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	4413      	add	r3, r2
 8008390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008394:	461a      	mov	r2, r3
 8008396:	2300      	movs	r3, #0
 8008398:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	015a      	lsls	r2, r3, #5
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	4413      	add	r3, r2
 80083a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083a6:	461a      	mov	r2, r3
 80083a8:	2300      	movs	r3, #0
 80083aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	015a      	lsls	r2, r3, #5
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	4413      	add	r3, r2
 80083b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083b8:	461a      	mov	r2, r3
 80083ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80083be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	3301      	adds	r3, #1
 80083c4:	613b      	str	r3, [r7, #16]
 80083c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c8:	693a      	ldr	r2, [r7, #16]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d3b7      	bcc.n	800833e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083ce:	2300      	movs	r3, #0
 80083d0:	613b      	str	r3, [r7, #16]
 80083d2:	e043      	b.n	800845c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	015a      	lsls	r2, r3, #5
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	4413      	add	r3, r2
 80083dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083ea:	d118      	bne.n	800841e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d10a      	bne.n	8008408 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	015a      	lsls	r2, r3, #5
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	4413      	add	r3, r2
 80083fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083fe:	461a      	mov	r2, r3
 8008400:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008404:	6013      	str	r3, [r2, #0]
 8008406:	e013      	b.n	8008430 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	015a      	lsls	r2, r3, #5
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	4413      	add	r3, r2
 8008410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008414:	461a      	mov	r2, r3
 8008416:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800841a:	6013      	str	r3, [r2, #0]
 800841c:	e008      	b.n	8008430 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	015a      	lsls	r2, r3, #5
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	4413      	add	r3, r2
 8008426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800842a:	461a      	mov	r2, r3
 800842c:	2300      	movs	r3, #0
 800842e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	015a      	lsls	r2, r3, #5
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	4413      	add	r3, r2
 8008438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800843c:	461a      	mov	r2, r3
 800843e:	2300      	movs	r3, #0
 8008440:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	015a      	lsls	r2, r3, #5
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	4413      	add	r3, r2
 800844a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800844e:	461a      	mov	r2, r3
 8008450:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008454:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	3301      	adds	r3, #1
 800845a:	613b      	str	r3, [r7, #16]
 800845c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845e:	693a      	ldr	r2, [r7, #16]
 8008460:	429a      	cmp	r2, r3
 8008462:	d3b7      	bcc.n	80083d4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008472:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008476:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008484:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008488:	2b00      	cmp	r3, #0
 800848a:	d105      	bne.n	8008498 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	699b      	ldr	r3, [r3, #24]
 8008490:	f043 0210 	orr.w	r2, r3, #16
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	699a      	ldr	r2, [r3, #24]
 800849c:	4b0f      	ldr	r3, [pc, #60]	; (80084dc <USB_DevInit+0x2c4>)
 800849e:	4313      	orrs	r3, r2
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80084a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d005      	beq.n	80084b6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	699b      	ldr	r3, [r3, #24]
 80084ae:	f043 0208 	orr.w	r2, r3, #8
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80084b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d107      	bne.n	80084cc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	699b      	ldr	r3, [r3, #24]
 80084c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084c4:	f043 0304 	orr.w	r3, r3, #4
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80084cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3718      	adds	r7, #24
 80084d2:	46bd      	mov	sp, r7
 80084d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80084d8:	b004      	add	sp, #16
 80084da:	4770      	bx	lr
 80084dc:	803c3800 	.word	0x803c3800

080084e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80084ea:	2300      	movs	r3, #0
 80084ec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	019b      	lsls	r3, r3, #6
 80084f2:	f043 0220 	orr.w	r2, r3, #32
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	3301      	adds	r3, #1
 80084fe:	60fb      	str	r3, [r7, #12]
 8008500:	4a08      	ldr	r2, [pc, #32]	; (8008524 <USB_FlushTxFifo+0x44>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d901      	bls.n	800850a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8008506:	2303      	movs	r3, #3
 8008508:	e006      	b.n	8008518 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	f003 0320 	and.w	r3, r3, #32
 8008512:	2b20      	cmp	r3, #32
 8008514:	d0f1      	beq.n	80084fa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	3714      	adds	r7, #20
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr
 8008524:	00030d40 	.word	0x00030d40

08008528 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008530:	2300      	movs	r3, #0
 8008532:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2210      	movs	r2, #16
 8008538:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	3301      	adds	r3, #1
 800853e:	60fb      	str	r3, [r7, #12]
 8008540:	4a08      	ldr	r2, [pc, #32]	; (8008564 <USB_FlushRxFifo+0x3c>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d901      	bls.n	800854a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8008546:	2303      	movs	r3, #3
 8008548:	e006      	b.n	8008558 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	f003 0310 	and.w	r3, r3, #16
 8008552:	2b10      	cmp	r3, #16
 8008554:	d0f1      	beq.n	800853a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008556:	2300      	movs	r3, #0
}
 8008558:	4618      	mov	r0, r3
 800855a:	3714      	adds	r7, #20
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr
 8008564:	00030d40 	.word	0x00030d40

08008568 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008568:	b480      	push	{r7}
 800856a:	b085      	sub	sp, #20
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	460b      	mov	r3, r1
 8008572:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	78fb      	ldrb	r3, [r7, #3]
 8008582:	68f9      	ldr	r1, [r7, #12]
 8008584:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008588:	4313      	orrs	r3, r2
 800858a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3714      	adds	r7, #20
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr

0800859a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800859a:	b480      	push	{r7}
 800859c:	b087      	sub	sp, #28
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	f003 0306 	and.w	r3, r3, #6
 80085b2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d102      	bne.n	80085c0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80085ba:	2300      	movs	r3, #0
 80085bc:	75fb      	strb	r3, [r7, #23]
 80085be:	e00a      	b.n	80085d6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d002      	beq.n	80085cc <USB_GetDevSpeed+0x32>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2b06      	cmp	r3, #6
 80085ca:	d102      	bne.n	80085d2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80085cc:	2302      	movs	r3, #2
 80085ce:	75fb      	strb	r3, [r7, #23]
 80085d0:	e001      	b.n	80085d6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80085d2:	230f      	movs	r3, #15
 80085d4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80085d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80085d8:	4618      	mov	r0, r3
 80085da:	371c      	adds	r7, #28
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	785b      	ldrb	r3, [r3, #1]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d13a      	bne.n	8008676 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008606:	69da      	ldr	r2, [r3, #28]
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	f003 030f 	and.w	r3, r3, #15
 8008610:	2101      	movs	r1, #1
 8008612:	fa01 f303 	lsl.w	r3, r1, r3
 8008616:	b29b      	uxth	r3, r3
 8008618:	68f9      	ldr	r1, [r7, #12]
 800861a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800861e:	4313      	orrs	r3, r2
 8008620:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	015a      	lsls	r2, r3, #5
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	4413      	add	r3, r2
 800862a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008634:	2b00      	cmp	r3, #0
 8008636:	d155      	bne.n	80086e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	015a      	lsls	r2, r3, #5
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	4413      	add	r3, r2
 8008640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	78db      	ldrb	r3, [r3, #3]
 8008652:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008654:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	059b      	lsls	r3, r3, #22
 800865a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800865c:	4313      	orrs	r3, r2
 800865e:	68ba      	ldr	r2, [r7, #8]
 8008660:	0151      	lsls	r1, r2, #5
 8008662:	68fa      	ldr	r2, [r7, #12]
 8008664:	440a      	add	r2, r1
 8008666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800866a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800866e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008672:	6013      	str	r3, [r2, #0]
 8008674:	e036      	b.n	80086e4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800867c:	69da      	ldr	r2, [r3, #28]
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	f003 030f 	and.w	r3, r3, #15
 8008686:	2101      	movs	r1, #1
 8008688:	fa01 f303 	lsl.w	r3, r1, r3
 800868c:	041b      	lsls	r3, r3, #16
 800868e:	68f9      	ldr	r1, [r7, #12]
 8008690:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008694:	4313      	orrs	r3, r2
 8008696:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	015a      	lsls	r2, r3, #5
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	4413      	add	r3, r2
 80086a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d11a      	bne.n	80086e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	015a      	lsls	r2, r3, #5
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	4413      	add	r3, r2
 80086b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	78db      	ldrb	r3, [r3, #3]
 80086c8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80086ca:	430b      	orrs	r3, r1
 80086cc:	4313      	orrs	r3, r2
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	0151      	lsls	r1, r2, #5
 80086d2:	68fa      	ldr	r2, [r7, #12]
 80086d4:	440a      	add	r2, r1
 80086d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086e2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3714      	adds	r7, #20
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr
	...

080086f4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	785b      	ldrb	r3, [r3, #1]
 800870c:	2b01      	cmp	r3, #1
 800870e:	d161      	bne.n	80087d4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	015a      	lsls	r2, r3, #5
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	4413      	add	r3, r2
 8008718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008722:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008726:	d11f      	bne.n	8008768 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	015a      	lsls	r2, r3, #5
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	4413      	add	r3, r2
 8008730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	68ba      	ldr	r2, [r7, #8]
 8008738:	0151      	lsls	r1, r2, #5
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	440a      	add	r2, r1
 800873e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008742:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008746:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	015a      	lsls	r2, r3, #5
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	4413      	add	r3, r2
 8008750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	68ba      	ldr	r2, [r7, #8]
 8008758:	0151      	lsls	r1, r2, #5
 800875a:	68fa      	ldr	r2, [r7, #12]
 800875c:	440a      	add	r2, r1
 800875e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008762:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008766:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800876e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	f003 030f 	and.w	r3, r3, #15
 8008778:	2101      	movs	r1, #1
 800877a:	fa01 f303 	lsl.w	r3, r1, r3
 800877e:	b29b      	uxth	r3, r3
 8008780:	43db      	mvns	r3, r3
 8008782:	68f9      	ldr	r1, [r7, #12]
 8008784:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008788:	4013      	ands	r3, r2
 800878a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008792:	69da      	ldr	r2, [r3, #28]
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	f003 030f 	and.w	r3, r3, #15
 800879c:	2101      	movs	r1, #1
 800879e:	fa01 f303 	lsl.w	r3, r1, r3
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	43db      	mvns	r3, r3
 80087a6:	68f9      	ldr	r1, [r7, #12]
 80087a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087ac:	4013      	ands	r3, r2
 80087ae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	015a      	lsls	r2, r3, #5
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	4413      	add	r3, r2
 80087b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	0159      	lsls	r1, r3, #5
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	440b      	add	r3, r1
 80087c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ca:	4619      	mov	r1, r3
 80087cc:	4b35      	ldr	r3, [pc, #212]	; (80088a4 <USB_DeactivateEndpoint+0x1b0>)
 80087ce:	4013      	ands	r3, r2
 80087d0:	600b      	str	r3, [r1, #0]
 80087d2:	e060      	b.n	8008896 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	015a      	lsls	r2, r3, #5
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	4413      	add	r3, r2
 80087dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087ea:	d11f      	bne.n	800882c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	015a      	lsls	r2, r3, #5
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	4413      	add	r3, r2
 80087f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	68ba      	ldr	r2, [r7, #8]
 80087fc:	0151      	lsls	r1, r2, #5
 80087fe:	68fa      	ldr	r2, [r7, #12]
 8008800:	440a      	add	r2, r1
 8008802:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008806:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800880a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	015a      	lsls	r2, r3, #5
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	4413      	add	r3, r2
 8008814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	68ba      	ldr	r2, [r7, #8]
 800881c:	0151      	lsls	r1, r2, #5
 800881e:	68fa      	ldr	r2, [r7, #12]
 8008820:	440a      	add	r2, r1
 8008822:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008826:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800882a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008832:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	f003 030f 	and.w	r3, r3, #15
 800883c:	2101      	movs	r1, #1
 800883e:	fa01 f303 	lsl.w	r3, r1, r3
 8008842:	041b      	lsls	r3, r3, #16
 8008844:	43db      	mvns	r3, r3
 8008846:	68f9      	ldr	r1, [r7, #12]
 8008848:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800884c:	4013      	ands	r3, r2
 800884e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008856:	69da      	ldr	r2, [r3, #28]
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	f003 030f 	and.w	r3, r3, #15
 8008860:	2101      	movs	r1, #1
 8008862:	fa01 f303 	lsl.w	r3, r1, r3
 8008866:	041b      	lsls	r3, r3, #16
 8008868:	43db      	mvns	r3, r3
 800886a:	68f9      	ldr	r1, [r7, #12]
 800886c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008870:	4013      	ands	r3, r2
 8008872:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	015a      	lsls	r2, r3, #5
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	4413      	add	r3, r2
 800887c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	0159      	lsls	r1, r3, #5
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	440b      	add	r3, r1
 800888a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800888e:	4619      	mov	r1, r3
 8008890:	4b05      	ldr	r3, [pc, #20]	; (80088a8 <USB_DeactivateEndpoint+0x1b4>)
 8008892:	4013      	ands	r3, r2
 8008894:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	3714      	adds	r7, #20
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr
 80088a4:	ec337800 	.word	0xec337800
 80088a8:	eff37800 	.word	0xeff37800

080088ac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b08a      	sub	sp, #40	; 0x28
 80088b0:	af02      	add	r7, sp, #8
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	4613      	mov	r3, r2
 80088b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	785b      	ldrb	r3, [r3, #1]
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	f040 815c 	bne.w	8008b86 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	695b      	ldr	r3, [r3, #20]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d132      	bne.n	800893c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	015a      	lsls	r2, r3, #5
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	4413      	add	r3, r2
 80088de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	69ba      	ldr	r2, [r7, #24]
 80088e6:	0151      	lsls	r1, r2, #5
 80088e8:	69fa      	ldr	r2, [r7, #28]
 80088ea:	440a      	add	r2, r1
 80088ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80088f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80088f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	015a      	lsls	r2, r3, #5
 80088fe:	69fb      	ldr	r3, [r7, #28]
 8008900:	4413      	add	r3, r2
 8008902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	69ba      	ldr	r2, [r7, #24]
 800890a:	0151      	lsls	r1, r2, #5
 800890c:	69fa      	ldr	r2, [r7, #28]
 800890e:	440a      	add	r2, r1
 8008910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008914:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008918:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	015a      	lsls	r2, r3, #5
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	4413      	add	r3, r2
 8008922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008926:	691b      	ldr	r3, [r3, #16]
 8008928:	69ba      	ldr	r2, [r7, #24]
 800892a:	0151      	lsls	r1, r2, #5
 800892c:	69fa      	ldr	r2, [r7, #28]
 800892e:	440a      	add	r2, r1
 8008930:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008934:	0cdb      	lsrs	r3, r3, #19
 8008936:	04db      	lsls	r3, r3, #19
 8008938:	6113      	str	r3, [r2, #16]
 800893a:	e074      	b.n	8008a26 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800893c:	69bb      	ldr	r3, [r7, #24]
 800893e:	015a      	lsls	r2, r3, #5
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	4413      	add	r3, r2
 8008944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008948:	691b      	ldr	r3, [r3, #16]
 800894a:	69ba      	ldr	r2, [r7, #24]
 800894c:	0151      	lsls	r1, r2, #5
 800894e:	69fa      	ldr	r2, [r7, #28]
 8008950:	440a      	add	r2, r1
 8008952:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008956:	0cdb      	lsrs	r3, r3, #19
 8008958:	04db      	lsls	r3, r3, #19
 800895a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800895c:	69bb      	ldr	r3, [r7, #24]
 800895e:	015a      	lsls	r2, r3, #5
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	4413      	add	r3, r2
 8008964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008968:	691b      	ldr	r3, [r3, #16]
 800896a:	69ba      	ldr	r2, [r7, #24]
 800896c:	0151      	lsls	r1, r2, #5
 800896e:	69fa      	ldr	r2, [r7, #28]
 8008970:	440a      	add	r2, r1
 8008972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008976:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800897a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800897e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	015a      	lsls	r2, r3, #5
 8008984:	69fb      	ldr	r3, [r7, #28]
 8008986:	4413      	add	r3, r2
 8008988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800898c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	6959      	ldr	r1, [r3, #20]
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	689b      	ldr	r3, [r3, #8]
 8008996:	440b      	add	r3, r1
 8008998:	1e59      	subs	r1, r3, #1
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	fbb1 f3f3 	udiv	r3, r1, r3
 80089a2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80089a4:	4b9d      	ldr	r3, [pc, #628]	; (8008c1c <USB_EPStartXfer+0x370>)
 80089a6:	400b      	ands	r3, r1
 80089a8:	69b9      	ldr	r1, [r7, #24]
 80089aa:	0148      	lsls	r0, r1, #5
 80089ac:	69f9      	ldr	r1, [r7, #28]
 80089ae:	4401      	add	r1, r0
 80089b0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80089b4:	4313      	orrs	r3, r2
 80089b6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80089b8:	69bb      	ldr	r3, [r7, #24]
 80089ba:	015a      	lsls	r2, r3, #5
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	4413      	add	r3, r2
 80089c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089c4:	691a      	ldr	r2, [r3, #16]
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	695b      	ldr	r3, [r3, #20]
 80089ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089ce:	69b9      	ldr	r1, [r7, #24]
 80089d0:	0148      	lsls	r0, r1, #5
 80089d2:	69f9      	ldr	r1, [r7, #28]
 80089d4:	4401      	add	r1, r0
 80089d6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80089da:	4313      	orrs	r3, r2
 80089dc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	78db      	ldrb	r3, [r3, #3]
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d11f      	bne.n	8008a26 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80089e6:	69bb      	ldr	r3, [r7, #24]
 80089e8:	015a      	lsls	r2, r3, #5
 80089ea:	69fb      	ldr	r3, [r7, #28]
 80089ec:	4413      	add	r3, r2
 80089ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089f2:	691b      	ldr	r3, [r3, #16]
 80089f4:	69ba      	ldr	r2, [r7, #24]
 80089f6:	0151      	lsls	r1, r2, #5
 80089f8:	69fa      	ldr	r2, [r7, #28]
 80089fa:	440a      	add	r2, r1
 80089fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a00:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008a04:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008a06:	69bb      	ldr	r3, [r7, #24]
 8008a08:	015a      	lsls	r2, r3, #5
 8008a0a:	69fb      	ldr	r3, [r7, #28]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	69ba      	ldr	r2, [r7, #24]
 8008a16:	0151      	lsls	r1, r2, #5
 8008a18:	69fa      	ldr	r2, [r7, #28]
 8008a1a:	440a      	add	r2, r1
 8008a1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a24:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008a26:	79fb      	ldrb	r3, [r7, #7]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d14b      	bne.n	8008ac4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d009      	beq.n	8008a48 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008a34:	69bb      	ldr	r3, [r7, #24]
 8008a36:	015a      	lsls	r2, r3, #5
 8008a38:	69fb      	ldr	r3, [r7, #28]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a40:	461a      	mov	r2, r3
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	691b      	ldr	r3, [r3, #16]
 8008a46:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	78db      	ldrb	r3, [r3, #3]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d128      	bne.n	8008aa2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d110      	bne.n	8008a82 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008a60:	69bb      	ldr	r3, [r7, #24]
 8008a62:	015a      	lsls	r2, r3, #5
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	4413      	add	r3, r2
 8008a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	69ba      	ldr	r2, [r7, #24]
 8008a70:	0151      	lsls	r1, r2, #5
 8008a72:	69fa      	ldr	r2, [r7, #28]
 8008a74:	440a      	add	r2, r1
 8008a76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a7e:	6013      	str	r3, [r2, #0]
 8008a80:	e00f      	b.n	8008aa2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	015a      	lsls	r2, r3, #5
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	4413      	add	r3, r2
 8008a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	69ba      	ldr	r2, [r7, #24]
 8008a92:	0151      	lsls	r1, r2, #5
 8008a94:	69fa      	ldr	r2, [r7, #28]
 8008a96:	440a      	add	r2, r1
 8008a98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008aa0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	015a      	lsls	r2, r3, #5
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	69ba      	ldr	r2, [r7, #24]
 8008ab2:	0151      	lsls	r1, r2, #5
 8008ab4:	69fa      	ldr	r2, [r7, #28]
 8008ab6:	440a      	add	r2, r1
 8008ab8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008abc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ac0:	6013      	str	r3, [r2, #0]
 8008ac2:	e12f      	b.n	8008d24 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	015a      	lsls	r2, r3, #5
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	4413      	add	r3, r2
 8008acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	69ba      	ldr	r2, [r7, #24]
 8008ad4:	0151      	lsls	r1, r2, #5
 8008ad6:	69fa      	ldr	r2, [r7, #28]
 8008ad8:	440a      	add	r2, r1
 8008ada:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ade:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ae2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	78db      	ldrb	r3, [r3, #3]
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d015      	beq.n	8008b18 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	695b      	ldr	r3, [r3, #20]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f000 8117 	beq.w	8008d24 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008afc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	f003 030f 	and.w	r3, r3, #15
 8008b06:	2101      	movs	r1, #1
 8008b08:	fa01 f303 	lsl.w	r3, r1, r3
 8008b0c:	69f9      	ldr	r1, [r7, #28]
 8008b0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b12:	4313      	orrs	r3, r2
 8008b14:	634b      	str	r3, [r1, #52]	; 0x34
 8008b16:	e105      	b.n	8008d24 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d110      	bne.n	8008b4a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	015a      	lsls	r2, r3, #5
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	4413      	add	r3, r2
 8008b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	69ba      	ldr	r2, [r7, #24]
 8008b38:	0151      	lsls	r1, r2, #5
 8008b3a:	69fa      	ldr	r2, [r7, #28]
 8008b3c:	440a      	add	r2, r1
 8008b3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b46:	6013      	str	r3, [r2, #0]
 8008b48:	e00f      	b.n	8008b6a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	015a      	lsls	r2, r3, #5
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	4413      	add	r3, r2
 8008b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	69ba      	ldr	r2, [r7, #24]
 8008b5a:	0151      	lsls	r1, r2, #5
 8008b5c:	69fa      	ldr	r2, [r7, #28]
 8008b5e:	440a      	add	r2, r1
 8008b60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b68:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	68d9      	ldr	r1, [r3, #12]
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	781a      	ldrb	r2, [r3, #0]
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	695b      	ldr	r3, [r3, #20]
 8008b76:	b298      	uxth	r0, r3
 8008b78:	79fb      	ldrb	r3, [r7, #7]
 8008b7a:	9300      	str	r3, [sp, #0]
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	f000 fa2b 	bl	8008fda <USB_WritePacket>
 8008b84:	e0ce      	b.n	8008d24 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	015a      	lsls	r2, r3, #5
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b92:	691b      	ldr	r3, [r3, #16]
 8008b94:	69ba      	ldr	r2, [r7, #24]
 8008b96:	0151      	lsls	r1, r2, #5
 8008b98:	69fa      	ldr	r2, [r7, #28]
 8008b9a:	440a      	add	r2, r1
 8008b9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ba0:	0cdb      	lsrs	r3, r3, #19
 8008ba2:	04db      	lsls	r3, r3, #19
 8008ba4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	015a      	lsls	r2, r3, #5
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	4413      	add	r3, r2
 8008bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bb2:	691b      	ldr	r3, [r3, #16]
 8008bb4:	69ba      	ldr	r2, [r7, #24]
 8008bb6:	0151      	lsls	r1, r2, #5
 8008bb8:	69fa      	ldr	r2, [r7, #28]
 8008bba:	440a      	add	r2, r1
 8008bbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bc0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008bc4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008bc8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	695b      	ldr	r3, [r3, #20]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d126      	bne.n	8008c20 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008bd2:	69bb      	ldr	r3, [r7, #24]
 8008bd4:	015a      	lsls	r2, r3, #5
 8008bd6:	69fb      	ldr	r3, [r7, #28]
 8008bd8:	4413      	add	r3, r2
 8008bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bde:	691a      	ldr	r2, [r3, #16]
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008be8:	69b9      	ldr	r1, [r7, #24]
 8008bea:	0148      	lsls	r0, r1, #5
 8008bec:	69f9      	ldr	r1, [r7, #28]
 8008bee:	4401      	add	r1, r0
 8008bf0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	015a      	lsls	r2, r3, #5
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	4413      	add	r3, r2
 8008c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c04:	691b      	ldr	r3, [r3, #16]
 8008c06:	69ba      	ldr	r2, [r7, #24]
 8008c08:	0151      	lsls	r1, r2, #5
 8008c0a:	69fa      	ldr	r2, [r7, #28]
 8008c0c:	440a      	add	r2, r1
 8008c0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c16:	6113      	str	r3, [r2, #16]
 8008c18:	e036      	b.n	8008c88 <USB_EPStartXfer+0x3dc>
 8008c1a:	bf00      	nop
 8008c1c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	695a      	ldr	r2, [r3, #20]
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	4413      	add	r3, r2
 8008c2a:	1e5a      	subs	r2, r3, #1
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c34:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	015a      	lsls	r2, r3, #5
 8008c3a:	69fb      	ldr	r3, [r7, #28]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c42:	691a      	ldr	r2, [r3, #16]
 8008c44:	8afb      	ldrh	r3, [r7, #22]
 8008c46:	04d9      	lsls	r1, r3, #19
 8008c48:	4b39      	ldr	r3, [pc, #228]	; (8008d30 <USB_EPStartXfer+0x484>)
 8008c4a:	400b      	ands	r3, r1
 8008c4c:	69b9      	ldr	r1, [r7, #24]
 8008c4e:	0148      	lsls	r0, r1, #5
 8008c50:	69f9      	ldr	r1, [r7, #28]
 8008c52:	4401      	add	r1, r0
 8008c54:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	015a      	lsls	r2, r3, #5
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	4413      	add	r3, r2
 8008c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c68:	691a      	ldr	r2, [r3, #16]
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	8af9      	ldrh	r1, [r7, #22]
 8008c70:	fb01 f303 	mul.w	r3, r1, r3
 8008c74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c78:	69b9      	ldr	r1, [r7, #24]
 8008c7a:	0148      	lsls	r0, r1, #5
 8008c7c:	69f9      	ldr	r1, [r7, #28]
 8008c7e:	4401      	add	r1, r0
 8008c80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008c84:	4313      	orrs	r3, r2
 8008c86:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008c88:	79fb      	ldrb	r3, [r7, #7]
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d10d      	bne.n	8008caa <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d009      	beq.n	8008caa <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	68d9      	ldr	r1, [r3, #12]
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	015a      	lsls	r2, r3, #5
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ca6:	460a      	mov	r2, r1
 8008ca8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	78db      	ldrb	r3, [r3, #3]
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d128      	bne.n	8008d04 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d110      	bne.n	8008ce4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	015a      	lsls	r2, r3, #5
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	4413      	add	r3, r2
 8008cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	69ba      	ldr	r2, [r7, #24]
 8008cd2:	0151      	lsls	r1, r2, #5
 8008cd4:	69fa      	ldr	r2, [r7, #28]
 8008cd6:	440a      	add	r2, r1
 8008cd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cdc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008ce0:	6013      	str	r3, [r2, #0]
 8008ce2:	e00f      	b.n	8008d04 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008ce4:	69bb      	ldr	r3, [r7, #24]
 8008ce6:	015a      	lsls	r2, r3, #5
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	4413      	add	r3, r2
 8008cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	69ba      	ldr	r2, [r7, #24]
 8008cf4:	0151      	lsls	r1, r2, #5
 8008cf6:	69fa      	ldr	r2, [r7, #28]
 8008cf8:	440a      	add	r2, r1
 8008cfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d02:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	015a      	lsls	r2, r3, #5
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	69ba      	ldr	r2, [r7, #24]
 8008d14:	0151      	lsls	r1, r2, #5
 8008d16:	69fa      	ldr	r2, [r7, #28]
 8008d18:	440a      	add	r2, r1
 8008d1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3720      	adds	r7, #32
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	1ff80000 	.word	0x1ff80000

08008d34 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b087      	sub	sp, #28
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	4613      	mov	r3, r2
 8008d40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	785b      	ldrb	r3, [r3, #1]
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	f040 80cd 	bne.w	8008ef0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	695b      	ldr	r3, [r3, #20]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d132      	bne.n	8008dc4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	015a      	lsls	r2, r3, #5
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	4413      	add	r3, r2
 8008d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	693a      	ldr	r2, [r7, #16]
 8008d6e:	0151      	lsls	r1, r2, #5
 8008d70:	697a      	ldr	r2, [r7, #20]
 8008d72:	440a      	add	r2, r1
 8008d74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008d7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008d80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	015a      	lsls	r2, r3, #5
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	4413      	add	r3, r2
 8008d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d8e:	691b      	ldr	r3, [r3, #16]
 8008d90:	693a      	ldr	r2, [r7, #16]
 8008d92:	0151      	lsls	r1, r2, #5
 8008d94:	697a      	ldr	r2, [r7, #20]
 8008d96:	440a      	add	r2, r1
 8008d98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008da0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	015a      	lsls	r2, r3, #5
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	4413      	add	r3, r2
 8008daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	693a      	ldr	r2, [r7, #16]
 8008db2:	0151      	lsls	r1, r2, #5
 8008db4:	697a      	ldr	r2, [r7, #20]
 8008db6:	440a      	add	r2, r1
 8008db8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dbc:	0cdb      	lsrs	r3, r3, #19
 8008dbe:	04db      	lsls	r3, r3, #19
 8008dc0:	6113      	str	r3, [r2, #16]
 8008dc2:	e04e      	b.n	8008e62 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	015a      	lsls	r2, r3, #5
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	4413      	add	r3, r2
 8008dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dd0:	691b      	ldr	r3, [r3, #16]
 8008dd2:	693a      	ldr	r2, [r7, #16]
 8008dd4:	0151      	lsls	r1, r2, #5
 8008dd6:	697a      	ldr	r2, [r7, #20]
 8008dd8:	440a      	add	r2, r1
 8008dda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dde:	0cdb      	lsrs	r3, r3, #19
 8008de0:	04db      	lsls	r3, r3, #19
 8008de2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	015a      	lsls	r2, r3, #5
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	4413      	add	r3, r2
 8008dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	693a      	ldr	r2, [r7, #16]
 8008df4:	0151      	lsls	r1, r2, #5
 8008df6:	697a      	ldr	r2, [r7, #20]
 8008df8:	440a      	add	r2, r1
 8008dfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dfe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008e02:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008e06:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	695a      	ldr	r2, [r3, #20]
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d903      	bls.n	8008e1c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	689a      	ldr	r2, [r3, #8]
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	015a      	lsls	r2, r3, #5
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	4413      	add	r3, r2
 8008e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	693a      	ldr	r2, [r7, #16]
 8008e2c:	0151      	lsls	r1, r2, #5
 8008e2e:	697a      	ldr	r2, [r7, #20]
 8008e30:	440a      	add	r2, r1
 8008e32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	015a      	lsls	r2, r3, #5
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	4413      	add	r3, r2
 8008e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e48:	691a      	ldr	r2, [r3, #16]
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	695b      	ldr	r3, [r3, #20]
 8008e4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e52:	6939      	ldr	r1, [r7, #16]
 8008e54:	0148      	lsls	r0, r1, #5
 8008e56:	6979      	ldr	r1, [r7, #20]
 8008e58:	4401      	add	r1, r0
 8008e5a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008e62:	79fb      	ldrb	r3, [r7, #7]
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d11e      	bne.n	8008ea6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	691b      	ldr	r3, [r3, #16]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d009      	beq.n	8008e84 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	015a      	lsls	r2, r3, #5
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	4413      	add	r3, r2
 8008e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	691b      	ldr	r3, [r3, #16]
 8008e82:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	015a      	lsls	r2, r3, #5
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	693a      	ldr	r2, [r7, #16]
 8008e94:	0151      	lsls	r1, r2, #5
 8008e96:	697a      	ldr	r2, [r7, #20]
 8008e98:	440a      	add	r2, r1
 8008e9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ea2:	6013      	str	r3, [r2, #0]
 8008ea4:	e092      	b.n	8008fcc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	015a      	lsls	r2, r3, #5
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	4413      	add	r3, r2
 8008eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	693a      	ldr	r2, [r7, #16]
 8008eb6:	0151      	lsls	r1, r2, #5
 8008eb8:	697a      	ldr	r2, [r7, #20]
 8008eba:	440a      	add	r2, r1
 8008ebc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ec0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ec4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	695b      	ldr	r3, [r3, #20]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d07e      	beq.n	8008fcc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ed4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	f003 030f 	and.w	r3, r3, #15
 8008ede:	2101      	movs	r1, #1
 8008ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ee4:	6979      	ldr	r1, [r7, #20]
 8008ee6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008eea:	4313      	orrs	r3, r2
 8008eec:	634b      	str	r3, [r1, #52]	; 0x34
 8008eee:	e06d      	b.n	8008fcc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	015a      	lsls	r2, r3, #5
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	4413      	add	r3, r2
 8008ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008efc:	691b      	ldr	r3, [r3, #16]
 8008efe:	693a      	ldr	r2, [r7, #16]
 8008f00:	0151      	lsls	r1, r2, #5
 8008f02:	697a      	ldr	r2, [r7, #20]
 8008f04:	440a      	add	r2, r1
 8008f06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f0a:	0cdb      	lsrs	r3, r3, #19
 8008f0c:	04db      	lsls	r3, r3, #19
 8008f0e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	015a      	lsls	r2, r3, #5
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	4413      	add	r3, r2
 8008f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f1c:	691b      	ldr	r3, [r3, #16]
 8008f1e:	693a      	ldr	r2, [r7, #16]
 8008f20:	0151      	lsls	r1, r2, #5
 8008f22:	697a      	ldr	r2, [r7, #20]
 8008f24:	440a      	add	r2, r1
 8008f26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f2a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008f2e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008f32:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	695b      	ldr	r3, [r3, #20]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d003      	beq.n	8008f44 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	689a      	ldr	r2, [r3, #8]
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	015a      	lsls	r2, r3, #5
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f50:	691b      	ldr	r3, [r3, #16]
 8008f52:	693a      	ldr	r2, [r7, #16]
 8008f54:	0151      	lsls	r1, r2, #5
 8008f56:	697a      	ldr	r2, [r7, #20]
 8008f58:	440a      	add	r2, r1
 8008f5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f62:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	015a      	lsls	r2, r3, #5
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	4413      	add	r3, r2
 8008f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f70:	691a      	ldr	r2, [r3, #16]
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f7a:	6939      	ldr	r1, [r7, #16]
 8008f7c:	0148      	lsls	r0, r1, #5
 8008f7e:	6979      	ldr	r1, [r7, #20]
 8008f80:	4401      	add	r1, r0
 8008f82:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008f86:	4313      	orrs	r3, r2
 8008f88:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008f8a:	79fb      	ldrb	r3, [r7, #7]
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d10d      	bne.n	8008fac <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d009      	beq.n	8008fac <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	68d9      	ldr	r1, [r3, #12]
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	015a      	lsls	r2, r3, #5
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	4413      	add	r3, r2
 8008fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fa8:	460a      	mov	r2, r1
 8008faa:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	015a      	lsls	r2, r3, #5
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	4413      	add	r3, r2
 8008fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	693a      	ldr	r2, [r7, #16]
 8008fbc:	0151      	lsls	r1, r2, #5
 8008fbe:	697a      	ldr	r2, [r7, #20]
 8008fc0:	440a      	add	r2, r1
 8008fc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fc6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008fca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	371c      	adds	r7, #28
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr

08008fda <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008fda:	b480      	push	{r7}
 8008fdc:	b089      	sub	sp, #36	; 0x24
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	60f8      	str	r0, [r7, #12]
 8008fe2:	60b9      	str	r1, [r7, #8]
 8008fe4:	4611      	mov	r1, r2
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	460b      	mov	r3, r1
 8008fea:	71fb      	strb	r3, [r7, #7]
 8008fec:	4613      	mov	r3, r2
 8008fee:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008ff8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d123      	bne.n	8009048 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009000:	88bb      	ldrh	r3, [r7, #4]
 8009002:	3303      	adds	r3, #3
 8009004:	089b      	lsrs	r3, r3, #2
 8009006:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009008:	2300      	movs	r3, #0
 800900a:	61bb      	str	r3, [r7, #24]
 800900c:	e018      	b.n	8009040 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800900e:	79fb      	ldrb	r3, [r7, #7]
 8009010:	031a      	lsls	r2, r3, #12
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	4413      	add	r3, r2
 8009016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800901a:	461a      	mov	r2, r3
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	3301      	adds	r3, #1
 8009026:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	3301      	adds	r3, #1
 800902c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	3301      	adds	r3, #1
 8009032:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	3301      	adds	r3, #1
 8009038:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	3301      	adds	r3, #1
 800903e:	61bb      	str	r3, [r7, #24]
 8009040:	69ba      	ldr	r2, [r7, #24]
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	429a      	cmp	r2, r3
 8009046:	d3e2      	bcc.n	800900e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009048:	2300      	movs	r3, #0
}
 800904a:	4618      	mov	r0, r3
 800904c:	3724      	adds	r7, #36	; 0x24
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr

08009056 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009056:	b480      	push	{r7}
 8009058:	b08b      	sub	sp, #44	; 0x2c
 800905a:	af00      	add	r7, sp, #0
 800905c:	60f8      	str	r0, [r7, #12]
 800905e:	60b9      	str	r1, [r7, #8]
 8009060:	4613      	mov	r3, r2
 8009062:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800906c:	88fb      	ldrh	r3, [r7, #6]
 800906e:	089b      	lsrs	r3, r3, #2
 8009070:	b29b      	uxth	r3, r3
 8009072:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009074:	88fb      	ldrh	r3, [r7, #6]
 8009076:	f003 0303 	and.w	r3, r3, #3
 800907a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800907c:	2300      	movs	r3, #0
 800907e:	623b      	str	r3, [r7, #32]
 8009080:	e014      	b.n	80090ac <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009082:	69bb      	ldr	r3, [r7, #24]
 8009084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908c:	601a      	str	r2, [r3, #0]
    pDest++;
 800908e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009090:	3301      	adds	r3, #1
 8009092:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009096:	3301      	adds	r3, #1
 8009098:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800909a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909c:	3301      	adds	r3, #1
 800909e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80090a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a2:	3301      	adds	r3, #1
 80090a4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80090a6:	6a3b      	ldr	r3, [r7, #32]
 80090a8:	3301      	adds	r3, #1
 80090aa:	623b      	str	r3, [r7, #32]
 80090ac:	6a3a      	ldr	r2, [r7, #32]
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d3e6      	bcc.n	8009082 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80090b4:	8bfb      	ldrh	r3, [r7, #30]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d01e      	beq.n	80090f8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80090ba:	2300      	movs	r3, #0
 80090bc:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090c4:	461a      	mov	r2, r3
 80090c6:	f107 0310 	add.w	r3, r7, #16
 80090ca:	6812      	ldr	r2, [r2, #0]
 80090cc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80090ce:	693a      	ldr	r2, [r7, #16]
 80090d0:	6a3b      	ldr	r3, [r7, #32]
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	00db      	lsls	r3, r3, #3
 80090d6:	fa22 f303 	lsr.w	r3, r2, r3
 80090da:	b2da      	uxtb	r2, r3
 80090dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090de:	701a      	strb	r2, [r3, #0]
      i++;
 80090e0:	6a3b      	ldr	r3, [r7, #32]
 80090e2:	3301      	adds	r3, #1
 80090e4:	623b      	str	r3, [r7, #32]
      pDest++;
 80090e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e8:	3301      	adds	r3, #1
 80090ea:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80090ec:	8bfb      	ldrh	r3, [r7, #30]
 80090ee:	3b01      	subs	r3, #1
 80090f0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80090f2:	8bfb      	ldrh	r3, [r7, #30]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d1ea      	bne.n	80090ce <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80090f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	372c      	adds	r7, #44	; 0x2c
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr

08009106 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009106:	b480      	push	{r7}
 8009108:	b085      	sub	sp, #20
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
 800910e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	785b      	ldrb	r3, [r3, #1]
 800911e:	2b01      	cmp	r3, #1
 8009120:	d12c      	bne.n	800917c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	015a      	lsls	r2, r3, #5
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	4413      	add	r3, r2
 800912a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	2b00      	cmp	r3, #0
 8009132:	db12      	blt.n	800915a <USB_EPSetStall+0x54>
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d00f      	beq.n	800915a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	015a      	lsls	r2, r3, #5
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	4413      	add	r3, r2
 8009142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	68ba      	ldr	r2, [r7, #8]
 800914a:	0151      	lsls	r1, r2, #5
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	440a      	add	r2, r1
 8009150:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009154:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009158:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	015a      	lsls	r2, r3, #5
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	4413      	add	r3, r2
 8009162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68ba      	ldr	r2, [r7, #8]
 800916a:	0151      	lsls	r1, r2, #5
 800916c:	68fa      	ldr	r2, [r7, #12]
 800916e:	440a      	add	r2, r1
 8009170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009174:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009178:	6013      	str	r3, [r2, #0]
 800917a:	e02b      	b.n	80091d4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	015a      	lsls	r2, r3, #5
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	4413      	add	r3, r2
 8009184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	db12      	blt.n	80091b4 <USB_EPSetStall+0xae>
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d00f      	beq.n	80091b4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	015a      	lsls	r2, r3, #5
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	4413      	add	r3, r2
 800919c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	68ba      	ldr	r2, [r7, #8]
 80091a4:	0151      	lsls	r1, r2, #5
 80091a6:	68fa      	ldr	r2, [r7, #12]
 80091a8:	440a      	add	r2, r1
 80091aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80091b2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	015a      	lsls	r2, r3, #5
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	4413      	add	r3, r2
 80091bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68ba      	ldr	r2, [r7, #8]
 80091c4:	0151      	lsls	r1, r2, #5
 80091c6:	68fa      	ldr	r2, [r7, #12]
 80091c8:	440a      	add	r2, r1
 80091ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80091d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80091d4:	2300      	movs	r3, #0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3714      	adds	r7, #20
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr

080091e2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80091e2:	b480      	push	{r7}
 80091e4:	b085      	sub	sp, #20
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
 80091ea:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	785b      	ldrb	r3, [r3, #1]
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d128      	bne.n	8009250 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	015a      	lsls	r2, r3, #5
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	4413      	add	r3, r2
 8009206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68ba      	ldr	r2, [r7, #8]
 800920e:	0151      	lsls	r1, r2, #5
 8009210:	68fa      	ldr	r2, [r7, #12]
 8009212:	440a      	add	r2, r1
 8009214:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009218:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800921c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	78db      	ldrb	r3, [r3, #3]
 8009222:	2b03      	cmp	r3, #3
 8009224:	d003      	beq.n	800922e <USB_EPClearStall+0x4c>
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	78db      	ldrb	r3, [r3, #3]
 800922a:	2b02      	cmp	r3, #2
 800922c:	d138      	bne.n	80092a0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	015a      	lsls	r2, r3, #5
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	4413      	add	r3, r2
 8009236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	68ba      	ldr	r2, [r7, #8]
 800923e:	0151      	lsls	r1, r2, #5
 8009240:	68fa      	ldr	r2, [r7, #12]
 8009242:	440a      	add	r2, r1
 8009244:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800924c:	6013      	str	r3, [r2, #0]
 800924e:	e027      	b.n	80092a0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	015a      	lsls	r2, r3, #5
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	4413      	add	r3, r2
 8009258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	68ba      	ldr	r2, [r7, #8]
 8009260:	0151      	lsls	r1, r2, #5
 8009262:	68fa      	ldr	r2, [r7, #12]
 8009264:	440a      	add	r2, r1
 8009266:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800926a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800926e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	78db      	ldrb	r3, [r3, #3]
 8009274:	2b03      	cmp	r3, #3
 8009276:	d003      	beq.n	8009280 <USB_EPClearStall+0x9e>
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	78db      	ldrb	r3, [r3, #3]
 800927c:	2b02      	cmp	r3, #2
 800927e:	d10f      	bne.n	80092a0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	015a      	lsls	r2, r3, #5
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	4413      	add	r3, r2
 8009288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	68ba      	ldr	r2, [r7, #8]
 8009290:	0151      	lsls	r1, r2, #5
 8009292:	68fa      	ldr	r2, [r7, #12]
 8009294:	440a      	add	r2, r1
 8009296:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800929a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800929e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80092a0:	2300      	movs	r3, #0
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3714      	adds	r7, #20
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr

080092ae <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80092ae:	b480      	push	{r7}
 80092b0:	b085      	sub	sp, #20
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
 80092b6:	460b      	mov	r3, r1
 80092b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	68fa      	ldr	r2, [r7, #12]
 80092c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092cc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80092d0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	78fb      	ldrb	r3, [r7, #3]
 80092dc:	011b      	lsls	r3, r3, #4
 80092de:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80092e2:	68f9      	ldr	r1, [r7, #12]
 80092e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092e8:	4313      	orrs	r3, r2
 80092ea:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80092ec:	2300      	movs	r3, #0
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3714      	adds	r7, #20
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr

080092fa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80092fa:	b480      	push	{r7}
 80092fc:	b085      	sub	sp, #20
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	68fa      	ldr	r2, [r7, #12]
 8009310:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009314:	f023 0303 	bic.w	r3, r3, #3
 8009318:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	68fa      	ldr	r2, [r7, #12]
 8009324:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009328:	f023 0302 	bic.w	r3, r3, #2
 800932c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800932e:	2300      	movs	r3, #0
}
 8009330:	4618      	mov	r0, r3
 8009332:	3714      	adds	r7, #20
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800933c:	b480      	push	{r7}
 800933e:	b085      	sub	sp, #20
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	68fa      	ldr	r2, [r7, #12]
 8009352:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009356:	f023 0303 	bic.w	r3, r3, #3
 800935a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	68fa      	ldr	r2, [r7, #12]
 8009366:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800936a:	f043 0302 	orr.w	r3, r3, #2
 800936e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	3714      	adds	r7, #20
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr

0800937e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800937e:	b480      	push	{r7}
 8009380:	b085      	sub	sp, #20
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	695b      	ldr	r3, [r3, #20]
 800938a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	699b      	ldr	r3, [r3, #24]
 8009390:	68fa      	ldr	r2, [r7, #12]
 8009392:	4013      	ands	r3, r2
 8009394:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009396:	68fb      	ldr	r3, [r7, #12]
}
 8009398:	4618      	mov	r0, r3
 800939a:	3714      	adds	r7, #20
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b085      	sub	sp, #20
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093b6:	699b      	ldr	r3, [r3, #24]
 80093b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093c0:	69db      	ldr	r3, [r3, #28]
 80093c2:	68ba      	ldr	r2, [r7, #8]
 80093c4:	4013      	ands	r3, r2
 80093c6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	0c1b      	lsrs	r3, r3, #16
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3714      	adds	r7, #20
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr

080093d8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80093d8:	b480      	push	{r7}
 80093da:	b085      	sub	sp, #20
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093ea:	699b      	ldr	r3, [r3, #24]
 80093ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093f4:	69db      	ldr	r3, [r3, #28]
 80093f6:	68ba      	ldr	r2, [r7, #8]
 80093f8:	4013      	ands	r3, r2
 80093fa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	b29b      	uxth	r3, r3
}
 8009400:	4618      	mov	r0, r3
 8009402:	3714      	adds	r7, #20
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800940c:	b480      	push	{r7}
 800940e:	b085      	sub	sp, #20
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	460b      	mov	r3, r1
 8009416:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800941c:	78fb      	ldrb	r3, [r7, #3]
 800941e:	015a      	lsls	r2, r3, #5
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	4413      	add	r3, r2
 8009424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009432:	695b      	ldr	r3, [r3, #20]
 8009434:	68ba      	ldr	r2, [r7, #8]
 8009436:	4013      	ands	r3, r2
 8009438:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800943a:	68bb      	ldr	r3, [r7, #8]
}
 800943c:	4618      	mov	r0, r3
 800943e:	3714      	adds	r7, #20
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009448:	b480      	push	{r7}
 800944a:	b087      	sub	sp, #28
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	460b      	mov	r3, r1
 8009452:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800945e:	691b      	ldr	r3, [r3, #16]
 8009460:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800946a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800946c:	78fb      	ldrb	r3, [r7, #3]
 800946e:	f003 030f 	and.w	r3, r3, #15
 8009472:	68fa      	ldr	r2, [r7, #12]
 8009474:	fa22 f303 	lsr.w	r3, r2, r3
 8009478:	01db      	lsls	r3, r3, #7
 800947a:	b2db      	uxtb	r3, r3
 800947c:	693a      	ldr	r2, [r7, #16]
 800947e:	4313      	orrs	r3, r2
 8009480:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009482:	78fb      	ldrb	r3, [r7, #3]
 8009484:	015a      	lsls	r2, r3, #5
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	4413      	add	r3, r2
 800948a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	693a      	ldr	r2, [r7, #16]
 8009492:	4013      	ands	r3, r2
 8009494:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009496:	68bb      	ldr	r3, [r7, #8]
}
 8009498:	4618      	mov	r0, r3
 800949a:	371c      	adds	r7, #28
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr

080094a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	695b      	ldr	r3, [r3, #20]
 80094b0:	f003 0301 	and.w	r3, r3, #1
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	370c      	adds	r7, #12
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b085      	sub	sp, #20
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	68fa      	ldr	r2, [r7, #12]
 80094d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094da:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80094de:	f023 0307 	bic.w	r3, r3, #7
 80094e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	68fa      	ldr	r2, [r7, #12]
 80094ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3714      	adds	r7, #20
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr
	...

08009508 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009508:	b480      	push	{r7}
 800950a:	b087      	sub	sp, #28
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	460b      	mov	r3, r1
 8009512:	607a      	str	r2, [r7, #4]
 8009514:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	333c      	adds	r3, #60	; 0x3c
 800951e:	3304      	adds	r3, #4
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	4a26      	ldr	r2, [pc, #152]	; (80095c0 <USB_EP0_OutStart+0xb8>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d90a      	bls.n	8009542 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009538:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800953c:	d101      	bne.n	8009542 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800953e:	2300      	movs	r3, #0
 8009540:	e037      	b.n	80095b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009548:	461a      	mov	r2, r3
 800954a:	2300      	movs	r3, #0
 800954c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009554:	691b      	ldr	r3, [r3, #16]
 8009556:	697a      	ldr	r2, [r7, #20]
 8009558:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800955c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009560:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009568:	691b      	ldr	r3, [r3, #16]
 800956a:	697a      	ldr	r2, [r7, #20]
 800956c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009570:	f043 0318 	orr.w	r3, r3, #24
 8009574:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800957c:	691b      	ldr	r3, [r3, #16]
 800957e:	697a      	ldr	r2, [r7, #20]
 8009580:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009584:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009588:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800958a:	7afb      	ldrb	r3, [r7, #11]
 800958c:	2b01      	cmp	r3, #1
 800958e:	d10f      	bne.n	80095b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009596:	461a      	mov	r2, r3
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	697a      	ldr	r2, [r7, #20]
 80095a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095aa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80095ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80095b0:	2300      	movs	r3, #0
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	371c      	adds	r7, #28
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop
 80095c0:	4f54300a 	.word	0x4f54300a

080095c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b085      	sub	sp, #20
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80095cc:	2300      	movs	r3, #0
 80095ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	3301      	adds	r3, #1
 80095d4:	60fb      	str	r3, [r7, #12]
 80095d6:	4a13      	ldr	r2, [pc, #76]	; (8009624 <USB_CoreReset+0x60>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d901      	bls.n	80095e0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80095dc:	2303      	movs	r3, #3
 80095de:	e01a      	b.n	8009616 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	691b      	ldr	r3, [r3, #16]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	daf3      	bge.n	80095d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80095e8:	2300      	movs	r3, #0
 80095ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	691b      	ldr	r3, [r3, #16]
 80095f0:	f043 0201 	orr.w	r2, r3, #1
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	3301      	adds	r3, #1
 80095fc:	60fb      	str	r3, [r7, #12]
 80095fe:	4a09      	ldr	r2, [pc, #36]	; (8009624 <USB_CoreReset+0x60>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d901      	bls.n	8009608 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8009604:	2303      	movs	r3, #3
 8009606:	e006      	b.n	8009616 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	691b      	ldr	r3, [r3, #16]
 800960c:	f003 0301 	and.w	r3, r3, #1
 8009610:	2b01      	cmp	r3, #1
 8009612:	d0f1      	beq.n	80095f8 <USB_CoreReset+0x34>

  return HAL_OK;
 8009614:	2300      	movs	r3, #0
}
 8009616:	4618      	mov	r0, r3
 8009618:	3714      	adds	r7, #20
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr
 8009622:	bf00      	nop
 8009624:	00030d40 	.word	0x00030d40

08009628 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800962c:	4904      	ldr	r1, [pc, #16]	; (8009640 <MX_FATFS_Init+0x18>)
 800962e:	4805      	ldr	r0, [pc, #20]	; (8009644 <MX_FATFS_Init+0x1c>)
 8009630:	f002 f9f0 	bl	800ba14 <FATFS_LinkDriver>
 8009634:	4603      	mov	r3, r0
 8009636:	461a      	mov	r2, r3
 8009638:	4b03      	ldr	r3, [pc, #12]	; (8009648 <MX_FATFS_Init+0x20>)
 800963a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800963c:	bf00      	nop
 800963e:	bd80      	pop	{r7, pc}
 8009640:	20000fb0 	.word	0x20000fb0
 8009644:	2000000c 	.word	0x2000000c
 8009648:	20000fb4 	.word	0x20000fb4

0800964c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	4603      	mov	r3, r0
 8009654:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8009656:	79fb      	ldrb	r3, [r7, #7]
 8009658:	4618      	mov	r0, r3
 800965a:	f000 f9dd 	bl	8009a18 <USER_SPI_initialize>
 800965e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8009660:	4618      	mov	r0, r3
 8009662:	3708      	adds	r7, #8
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
 800966e:	4603      	mov	r3, r0
 8009670:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8009672:	79fb      	ldrb	r3, [r7, #7]
 8009674:	4618      	mov	r0, r3
 8009676:	f000 fab9 	bl	8009bec <USER_SPI_status>
 800967a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800967c:	4618      	mov	r0, r3
 800967e:	3708      	adds	r7, #8
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	60b9      	str	r1, [r7, #8]
 800968c:	607a      	str	r2, [r7, #4]
 800968e:	603b      	str	r3, [r7, #0]
 8009690:	4603      	mov	r3, r0
 8009692:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8009694:	7bf8      	ldrb	r0, [r7, #15]
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	68b9      	ldr	r1, [r7, #8]
 800969c:	f000 fabc 	bl	8009c18 <USER_SPI_read>
 80096a0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b084      	sub	sp, #16
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	607a      	str	r2, [r7, #4]
 80096b4:	603b      	str	r3, [r7, #0]
 80096b6:	4603      	mov	r3, r0
 80096b8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 80096ba:	7bf8      	ldrb	r0, [r7, #15]
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	68b9      	ldr	r1, [r7, #8]
 80096c2:	f000 fb0f 	bl	8009ce4 <USER_SPI_write>
 80096c6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3710      	adds	r7, #16
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	4603      	mov	r3, r0
 80096d8:	603a      	str	r2, [r7, #0]
 80096da:	71fb      	strb	r3, [r7, #7]
 80096dc:	460b      	mov	r3, r1
 80096de:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 80096e0:	79b9      	ldrb	r1, [r7, #6]
 80096e2:	79fb      	ldrb	r3, [r7, #7]
 80096e4:	683a      	ldr	r2, [r7, #0]
 80096e6:	4618      	mov	r0, r3
 80096e8:	f000 fb78 	bl	8009ddc <USER_SPI_ioctl>
 80096ec:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3708      	adds	r7, #8
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
	...

080096f8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8009700:	f7f9 fade 	bl	8002cc0 <HAL_GetTick>
 8009704:	4603      	mov	r3, r0
 8009706:	4a04      	ldr	r2, [pc, #16]	; (8009718 <SPI_Timer_On+0x20>)
 8009708:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800970a:	4a04      	ldr	r2, [pc, #16]	; (800971c <SPI_Timer_On+0x24>)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6013      	str	r3, [r2, #0]
}
 8009710:	bf00      	nop
 8009712:	3708      	adds	r7, #8
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}
 8009718:	20001418 	.word	0x20001418
 800971c:	2000141c 	.word	0x2000141c

08009720 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8009720:	b580      	push	{r7, lr}
 8009722:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8009724:	f7f9 facc 	bl	8002cc0 <HAL_GetTick>
 8009728:	4602      	mov	r2, r0
 800972a:	4b06      	ldr	r3, [pc, #24]	; (8009744 <SPI_Timer_Status+0x24>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	1ad2      	subs	r2, r2, r3
 8009730:	4b05      	ldr	r3, [pc, #20]	; (8009748 <SPI_Timer_Status+0x28>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	429a      	cmp	r2, r3
 8009736:	bf34      	ite	cc
 8009738:	2301      	movcc	r3, #1
 800973a:	2300      	movcs	r3, #0
 800973c:	b2db      	uxtb	r3, r3
}
 800973e:	4618      	mov	r0, r3
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	20001418 	.word	0x20001418
 8009748:	2000141c 	.word	0x2000141c

0800974c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b086      	sub	sp, #24
 8009750:	af02      	add	r7, sp, #8
 8009752:	4603      	mov	r3, r0
 8009754:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009756:	f107 020f 	add.w	r2, r7, #15
 800975a:	1df9      	adds	r1, r7, #7
 800975c:	2332      	movs	r3, #50	; 0x32
 800975e:	9300      	str	r3, [sp, #0]
 8009760:	2301      	movs	r3, #1
 8009762:	4804      	ldr	r0, [pc, #16]	; (8009774 <xchg_spi+0x28>)
 8009764:	f7fc ff29 	bl	80065ba <HAL_SPI_TransmitReceive>
    return rxDat;
 8009768:	7bfb      	ldrb	r3, [r7, #15]
}
 800976a:	4618      	mov	r0, r3
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	200006d4 	.word	0x200006d4

08009778 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8009778:	b590      	push	{r4, r7, lr}
 800977a:	b085      	sub	sp, #20
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8009782:	2300      	movs	r3, #0
 8009784:	60fb      	str	r3, [r7, #12]
 8009786:	e00a      	b.n	800979e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	18d4      	adds	r4, r2, r3
 800978e:	20ff      	movs	r0, #255	; 0xff
 8009790:	f7ff ffdc 	bl	800974c <xchg_spi>
 8009794:	4603      	mov	r3, r0
 8009796:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	3301      	adds	r3, #1
 800979c:	60fb      	str	r3, [r7, #12]
 800979e:	68fa      	ldr	r2, [r7, #12]
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d3f0      	bcc.n	8009788 <rcvr_spi_multi+0x10>
	}
}
 80097a6:	bf00      	nop
 80097a8:	bf00      	nop
 80097aa:	3714      	adds	r7, #20
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd90      	pop	{r4, r7, pc}

080097b0 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 80097ba:	2300      	movs	r3, #0
 80097bc:	60fb      	str	r3, [r7, #12]
 80097be:	e009      	b.n	80097d4 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	4413      	add	r3, r2
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	4618      	mov	r0, r3
 80097ca:	f7ff ffbf 	bl	800974c <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	3301      	adds	r3, #1
 80097d2:	60fb      	str	r3, [r7, #12]
 80097d4:	68fa      	ldr	r2, [r7, #12]
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	429a      	cmp	r2, r3
 80097da:	d3f1      	bcc.n	80097c0 <xmit_spi_multi+0x10>
	}
}
 80097dc:	bf00      	nop
 80097de:	bf00      	nop
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}

080097e6 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80097e6:	b580      	push	{r7, lr}
 80097e8:	b086      	sub	sp, #24
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80097ee:	f7f9 fa67 	bl	8002cc0 <HAL_GetTick>
 80097f2:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80097f8:	20ff      	movs	r0, #255	; 0xff
 80097fa:	f7ff ffa7 	bl	800974c <xchg_spi>
 80097fe:	4603      	mov	r3, r0
 8009800:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8009802:	7bfb      	ldrb	r3, [r7, #15]
 8009804:	2bff      	cmp	r3, #255	; 0xff
 8009806:	d007      	beq.n	8009818 <wait_ready+0x32>
 8009808:	f7f9 fa5a 	bl	8002cc0 <HAL_GetTick>
 800980c:	4602      	mov	r2, r0
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	693a      	ldr	r2, [r7, #16]
 8009814:	429a      	cmp	r2, r3
 8009816:	d8ef      	bhi.n	80097f8 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8009818:	7bfb      	ldrb	r3, [r7, #15]
 800981a:	2bff      	cmp	r3, #255	; 0xff
 800981c:	bf0c      	ite	eq
 800981e:	2301      	moveq	r3, #1
 8009820:	2300      	movne	r3, #0
 8009822:	b2db      	uxtb	r3, r3
}
 8009824:	4618      	mov	r0, r3
 8009826:	3718      	adds	r7, #24
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8009830:	2201      	movs	r2, #1
 8009832:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009836:	4804      	ldr	r0, [pc, #16]	; (8009848 <despiselect+0x1c>)
 8009838:	f7f9 ffba 	bl	80037b0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800983c:	20ff      	movs	r0, #255	; 0xff
 800983e:	f7ff ff85 	bl	800974c <xchg_spi>

}
 8009842:	bf00      	nop
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	40021400 	.word	0x40021400

0800984c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800984c:	b580      	push	{r7, lr}
 800984e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8009850:	2200      	movs	r2, #0
 8009852:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009856:	480a      	ldr	r0, [pc, #40]	; (8009880 <spiselect+0x34>)
 8009858:	f7f9 ffaa 	bl	80037b0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800985c:	20ff      	movs	r0, #255	; 0xff
 800985e:	f7ff ff75 	bl	800974c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8009862:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009866:	f7ff ffbe 	bl	80097e6 <wait_ready>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d001      	beq.n	8009874 <spiselect+0x28>
 8009870:	2301      	movs	r3, #1
 8009872:	e002      	b.n	800987a <spiselect+0x2e>

	despiselect();
 8009874:	f7ff ffda 	bl	800982c <despiselect>
	return 0;	/* Timeout */
 8009878:	2300      	movs	r3, #0
}
 800987a:	4618      	mov	r0, r3
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	40021400 	.word	0x40021400

08009884 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800988e:	20c8      	movs	r0, #200	; 0xc8
 8009890:	f7ff ff32 	bl	80096f8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8009894:	20ff      	movs	r0, #255	; 0xff
 8009896:	f7ff ff59 	bl	800974c <xchg_spi>
 800989a:	4603      	mov	r3, r0
 800989c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800989e:	7bfb      	ldrb	r3, [r7, #15]
 80098a0:	2bff      	cmp	r3, #255	; 0xff
 80098a2:	d104      	bne.n	80098ae <rcvr_datablock+0x2a>
 80098a4:	f7ff ff3c 	bl	8009720 <SPI_Timer_Status>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d1f2      	bne.n	8009894 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80098ae:	7bfb      	ldrb	r3, [r7, #15]
 80098b0:	2bfe      	cmp	r3, #254	; 0xfe
 80098b2:	d001      	beq.n	80098b8 <rcvr_datablock+0x34>
 80098b4:	2300      	movs	r3, #0
 80098b6:	e00a      	b.n	80098ce <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80098b8:	6839      	ldr	r1, [r7, #0]
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f7ff ff5c 	bl	8009778 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80098c0:	20ff      	movs	r0, #255	; 0xff
 80098c2:	f7ff ff43 	bl	800974c <xchg_spi>
 80098c6:	20ff      	movs	r0, #255	; 0xff
 80098c8:	f7ff ff40 	bl	800974c <xchg_spi>

	return 1;						/* Function succeeded */
 80098cc:	2301      	movs	r3, #1
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3710      	adds	r7, #16
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}

080098d6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b084      	sub	sp, #16
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
 80098de:	460b      	mov	r3, r1
 80098e0:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80098e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80098e6:	f7ff ff7e 	bl	80097e6 <wait_ready>
 80098ea:	4603      	mov	r3, r0
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d101      	bne.n	80098f4 <xmit_datablock+0x1e>
 80098f0:	2300      	movs	r3, #0
 80098f2:	e01e      	b.n	8009932 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80098f4:	78fb      	ldrb	r3, [r7, #3]
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7ff ff28 	bl	800974c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80098fc:	78fb      	ldrb	r3, [r7, #3]
 80098fe:	2bfd      	cmp	r3, #253	; 0xfd
 8009900:	d016      	beq.n	8009930 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8009902:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f7ff ff52 	bl	80097b0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800990c:	20ff      	movs	r0, #255	; 0xff
 800990e:	f7ff ff1d 	bl	800974c <xchg_spi>
 8009912:	20ff      	movs	r0, #255	; 0xff
 8009914:	f7ff ff1a 	bl	800974c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8009918:	20ff      	movs	r0, #255	; 0xff
 800991a:	f7ff ff17 	bl	800974c <xchg_spi>
 800991e:	4603      	mov	r3, r0
 8009920:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8009922:	7bfb      	ldrb	r3, [r7, #15]
 8009924:	f003 031f 	and.w	r3, r3, #31
 8009928:	2b05      	cmp	r3, #5
 800992a:	d001      	beq.n	8009930 <xmit_datablock+0x5a>
 800992c:	2300      	movs	r3, #0
 800992e:	e000      	b.n	8009932 <xmit_datablock+0x5c>
	}
	return 1;
 8009930:	2301      	movs	r3, #1
}
 8009932:	4618      	mov	r0, r3
 8009934:	3710      	adds	r7, #16
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}

0800993a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800993a:	b580      	push	{r7, lr}
 800993c:	b084      	sub	sp, #16
 800993e:	af00      	add	r7, sp, #0
 8009940:	4603      	mov	r3, r0
 8009942:	6039      	str	r1, [r7, #0]
 8009944:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8009946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800994a:	2b00      	cmp	r3, #0
 800994c:	da0e      	bge.n	800996c <send_cmd+0x32>
		cmd &= 0x7F;
 800994e:	79fb      	ldrb	r3, [r7, #7]
 8009950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009954:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8009956:	2100      	movs	r1, #0
 8009958:	2037      	movs	r0, #55	; 0x37
 800995a:	f7ff ffee 	bl	800993a <send_cmd>
 800995e:	4603      	mov	r3, r0
 8009960:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8009962:	7bbb      	ldrb	r3, [r7, #14]
 8009964:	2b01      	cmp	r3, #1
 8009966:	d901      	bls.n	800996c <send_cmd+0x32>
 8009968:	7bbb      	ldrb	r3, [r7, #14]
 800996a:	e051      	b.n	8009a10 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800996c:	79fb      	ldrb	r3, [r7, #7]
 800996e:	2b0c      	cmp	r3, #12
 8009970:	d008      	beq.n	8009984 <send_cmd+0x4a>
		despiselect();
 8009972:	f7ff ff5b 	bl	800982c <despiselect>
		if (!spiselect()) return 0xFF;
 8009976:	f7ff ff69 	bl	800984c <spiselect>
 800997a:	4603      	mov	r3, r0
 800997c:	2b00      	cmp	r3, #0
 800997e:	d101      	bne.n	8009984 <send_cmd+0x4a>
 8009980:	23ff      	movs	r3, #255	; 0xff
 8009982:	e045      	b.n	8009a10 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8009984:	79fb      	ldrb	r3, [r7, #7]
 8009986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800998a:	b2db      	uxtb	r3, r3
 800998c:	4618      	mov	r0, r3
 800998e:	f7ff fedd 	bl	800974c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	0e1b      	lsrs	r3, r3, #24
 8009996:	b2db      	uxtb	r3, r3
 8009998:	4618      	mov	r0, r3
 800999a:	f7ff fed7 	bl	800974c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	0c1b      	lsrs	r3, r3, #16
 80099a2:	b2db      	uxtb	r3, r3
 80099a4:	4618      	mov	r0, r3
 80099a6:	f7ff fed1 	bl	800974c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	0a1b      	lsrs	r3, r3, #8
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	4618      	mov	r0, r3
 80099b2:	f7ff fecb 	bl	800974c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	b2db      	uxtb	r3, r3
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7ff fec6 	bl	800974c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80099c0:	2301      	movs	r3, #1
 80099c2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80099c4:	79fb      	ldrb	r3, [r7, #7]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d101      	bne.n	80099ce <send_cmd+0x94>
 80099ca:	2395      	movs	r3, #149	; 0x95
 80099cc:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80099ce:	79fb      	ldrb	r3, [r7, #7]
 80099d0:	2b08      	cmp	r3, #8
 80099d2:	d101      	bne.n	80099d8 <send_cmd+0x9e>
 80099d4:	2387      	movs	r3, #135	; 0x87
 80099d6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80099d8:	7bfb      	ldrb	r3, [r7, #15]
 80099da:	4618      	mov	r0, r3
 80099dc:	f7ff feb6 	bl	800974c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80099e0:	79fb      	ldrb	r3, [r7, #7]
 80099e2:	2b0c      	cmp	r3, #12
 80099e4:	d102      	bne.n	80099ec <send_cmd+0xb2>
 80099e6:	20ff      	movs	r0, #255	; 0xff
 80099e8:	f7ff feb0 	bl	800974c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80099ec:	230a      	movs	r3, #10
 80099ee:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80099f0:	20ff      	movs	r0, #255	; 0xff
 80099f2:	f7ff feab 	bl	800974c <xchg_spi>
 80099f6:	4603      	mov	r3, r0
 80099f8:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80099fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	da05      	bge.n	8009a0e <send_cmd+0xd4>
 8009a02:	7bfb      	ldrb	r3, [r7, #15]
 8009a04:	3b01      	subs	r3, #1
 8009a06:	73fb      	strb	r3, [r7, #15]
 8009a08:	7bfb      	ldrb	r3, [r7, #15]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d1f0      	bne.n	80099f0 <send_cmd+0xb6>

	return res;							/* Return received response */
 8009a0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3710      	adds	r7, #16
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8009a18:	b590      	push	{r4, r7, lr}
 8009a1a:	b085      	sub	sp, #20
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	4603      	mov	r3, r0
 8009a20:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8009a22:	79fb      	ldrb	r3, [r7, #7]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d001      	beq.n	8009a2c <USER_SPI_initialize+0x14>
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e0d4      	b.n	8009bd6 <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8009a2c:	4b6c      	ldr	r3, [pc, #432]	; (8009be0 <USER_SPI_initialize+0x1c8>)
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	f003 0302 	and.w	r3, r3, #2
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d003      	beq.n	8009a42 <USER_SPI_initialize+0x2a>
 8009a3a:	4b69      	ldr	r3, [pc, #420]	; (8009be0 <USER_SPI_initialize+0x1c8>)
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	e0c9      	b.n	8009bd6 <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 8009a42:	4b68      	ldr	r3, [pc, #416]	; (8009be4 <USER_SPI_initialize+0x1cc>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	4b66      	ldr	r3, [pc, #408]	; (8009be4 <USER_SPI_initialize+0x1cc>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8009a50:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8009a52:	230a      	movs	r3, #10
 8009a54:	73fb      	strb	r3, [r7, #15]
 8009a56:	e005      	b.n	8009a64 <USER_SPI_initialize+0x4c>
 8009a58:	20ff      	movs	r0, #255	; 0xff
 8009a5a:	f7ff fe77 	bl	800974c <xchg_spi>
 8009a5e:	7bfb      	ldrb	r3, [r7, #15]
 8009a60:	3b01      	subs	r3, #1
 8009a62:	73fb      	strb	r3, [r7, #15]
 8009a64:	7bfb      	ldrb	r3, [r7, #15]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d1f6      	bne.n	8009a58 <USER_SPI_initialize+0x40>

	ty = 0;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8009a6e:	2100      	movs	r1, #0
 8009a70:	2000      	movs	r0, #0
 8009a72:	f7ff ff62 	bl	800993a <send_cmd>
 8009a76:	4603      	mov	r3, r0
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	f040 808b 	bne.w	8009b94 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8009a7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009a82:	f7ff fe39 	bl	80096f8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8009a86:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009a8a:	2008      	movs	r0, #8
 8009a8c:	f7ff ff55 	bl	800993a <send_cmd>
 8009a90:	4603      	mov	r3, r0
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	d151      	bne.n	8009b3a <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8009a96:	2300      	movs	r3, #0
 8009a98:	73fb      	strb	r3, [r7, #15]
 8009a9a:	e00d      	b.n	8009ab8 <USER_SPI_initialize+0xa0>
 8009a9c:	7bfc      	ldrb	r4, [r7, #15]
 8009a9e:	20ff      	movs	r0, #255	; 0xff
 8009aa0:	f7ff fe54 	bl	800974c <xchg_spi>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	f107 0310 	add.w	r3, r7, #16
 8009aac:	4423      	add	r3, r4
 8009aae:	f803 2c08 	strb.w	r2, [r3, #-8]
 8009ab2:	7bfb      	ldrb	r3, [r7, #15]
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	73fb      	strb	r3, [r7, #15]
 8009ab8:	7bfb      	ldrb	r3, [r7, #15]
 8009aba:	2b03      	cmp	r3, #3
 8009abc:	d9ee      	bls.n	8009a9c <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8009abe:	7abb      	ldrb	r3, [r7, #10]
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d167      	bne.n	8009b94 <USER_SPI_initialize+0x17c>
 8009ac4:	7afb      	ldrb	r3, [r7, #11]
 8009ac6:	2baa      	cmp	r3, #170	; 0xaa
 8009ac8:	d164      	bne.n	8009b94 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8009aca:	bf00      	nop
 8009acc:	f7ff fe28 	bl	8009720 <SPI_Timer_Status>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d007      	beq.n	8009ae6 <USER_SPI_initialize+0xce>
 8009ad6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009ada:	20a9      	movs	r0, #169	; 0xa9
 8009adc:	f7ff ff2d 	bl	800993a <send_cmd>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d1f2      	bne.n	8009acc <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8009ae6:	f7ff fe1b 	bl	8009720 <SPI_Timer_Status>
 8009aea:	4603      	mov	r3, r0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d051      	beq.n	8009b94 <USER_SPI_initialize+0x17c>
 8009af0:	2100      	movs	r1, #0
 8009af2:	203a      	movs	r0, #58	; 0x3a
 8009af4:	f7ff ff21 	bl	800993a <send_cmd>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d14a      	bne.n	8009b94 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8009afe:	2300      	movs	r3, #0
 8009b00:	73fb      	strb	r3, [r7, #15]
 8009b02:	e00d      	b.n	8009b20 <USER_SPI_initialize+0x108>
 8009b04:	7bfc      	ldrb	r4, [r7, #15]
 8009b06:	20ff      	movs	r0, #255	; 0xff
 8009b08:	f7ff fe20 	bl	800974c <xchg_spi>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	461a      	mov	r2, r3
 8009b10:	f107 0310 	add.w	r3, r7, #16
 8009b14:	4423      	add	r3, r4
 8009b16:	f803 2c08 	strb.w	r2, [r3, #-8]
 8009b1a:	7bfb      	ldrb	r3, [r7, #15]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	73fb      	strb	r3, [r7, #15]
 8009b20:	7bfb      	ldrb	r3, [r7, #15]
 8009b22:	2b03      	cmp	r3, #3
 8009b24:	d9ee      	bls.n	8009b04 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8009b26:	7a3b      	ldrb	r3, [r7, #8]
 8009b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d001      	beq.n	8009b34 <USER_SPI_initialize+0x11c>
 8009b30:	230c      	movs	r3, #12
 8009b32:	e000      	b.n	8009b36 <USER_SPI_initialize+0x11e>
 8009b34:	2304      	movs	r3, #4
 8009b36:	737b      	strb	r3, [r7, #13]
 8009b38:	e02c      	b.n	8009b94 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8009b3a:	2100      	movs	r1, #0
 8009b3c:	20a9      	movs	r0, #169	; 0xa9
 8009b3e:	f7ff fefc 	bl	800993a <send_cmd>
 8009b42:	4603      	mov	r3, r0
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d804      	bhi.n	8009b52 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8009b48:	2302      	movs	r3, #2
 8009b4a:	737b      	strb	r3, [r7, #13]
 8009b4c:	23a9      	movs	r3, #169	; 0xa9
 8009b4e:	73bb      	strb	r3, [r7, #14]
 8009b50:	e003      	b.n	8009b5a <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8009b52:	2301      	movs	r3, #1
 8009b54:	737b      	strb	r3, [r7, #13]
 8009b56:	2301      	movs	r3, #1
 8009b58:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8009b5a:	bf00      	nop
 8009b5c:	f7ff fde0 	bl	8009720 <SPI_Timer_Status>
 8009b60:	4603      	mov	r3, r0
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d007      	beq.n	8009b76 <USER_SPI_initialize+0x15e>
 8009b66:	7bbb      	ldrb	r3, [r7, #14]
 8009b68:	2100      	movs	r1, #0
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f7ff fee5 	bl	800993a <send_cmd>
 8009b70:	4603      	mov	r3, r0
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d1f2      	bne.n	8009b5c <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8009b76:	f7ff fdd3 	bl	8009720 <SPI_Timer_Status>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d007      	beq.n	8009b90 <USER_SPI_initialize+0x178>
 8009b80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009b84:	2010      	movs	r0, #16
 8009b86:	f7ff fed8 	bl	800993a <send_cmd>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d001      	beq.n	8009b94 <USER_SPI_initialize+0x17c>
				ty = 0;
 8009b90:	2300      	movs	r3, #0
 8009b92:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8009b94:	4a14      	ldr	r2, [pc, #80]	; (8009be8 <USER_SPI_initialize+0x1d0>)
 8009b96:	7b7b      	ldrb	r3, [r7, #13]
 8009b98:	7013      	strb	r3, [r2, #0]
	despiselect();
 8009b9a:	f7ff fe47 	bl	800982c <despiselect>

	if (ty) {			/* OK */
 8009b9e:	7b7b      	ldrb	r3, [r7, #13]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d012      	beq.n	8009bca <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 8009ba4:	4b0f      	ldr	r3, [pc, #60]	; (8009be4 <USER_SPI_initialize+0x1cc>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009bae:	4b0d      	ldr	r3, [pc, #52]	; (8009be4 <USER_SPI_initialize+0x1cc>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f042 0220 	orr.w	r2, r2, #32
 8009bb6:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8009bb8:	4b09      	ldr	r3, [pc, #36]	; (8009be0 <USER_SPI_initialize+0x1c8>)
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	b2db      	uxtb	r3, r3
 8009bbe:	f023 0301 	bic.w	r3, r3, #1
 8009bc2:	b2da      	uxtb	r2, r3
 8009bc4:	4b06      	ldr	r3, [pc, #24]	; (8009be0 <USER_SPI_initialize+0x1c8>)
 8009bc6:	701a      	strb	r2, [r3, #0]
 8009bc8:	e002      	b.n	8009bd0 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8009bca:	4b05      	ldr	r3, [pc, #20]	; (8009be0 <USER_SPI_initialize+0x1c8>)
 8009bcc:	2201      	movs	r2, #1
 8009bce:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8009bd0:	4b03      	ldr	r3, [pc, #12]	; (8009be0 <USER_SPI_initialize+0x1c8>)
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	b2db      	uxtb	r3, r3
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3714      	adds	r7, #20
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd90      	pop	{r4, r7, pc}
 8009bde:	bf00      	nop
 8009be0:	20000020 	.word	0x20000020
 8009be4:	200006d4 	.word	0x200006d4
 8009be8:	20000394 	.word	0x20000394

08009bec <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b083      	sub	sp, #12
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8009bf6:	79fb      	ldrb	r3, [r7, #7]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d001      	beq.n	8009c00 <USER_SPI_status+0x14>
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	e002      	b.n	8009c06 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8009c00:	4b04      	ldr	r3, [pc, #16]	; (8009c14 <USER_SPI_status+0x28>)
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	b2db      	uxtb	r3, r3
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	370c      	adds	r7, #12
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr
 8009c12:	bf00      	nop
 8009c14:	20000020 	.word	0x20000020

08009c18 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	60b9      	str	r1, [r7, #8]
 8009c20:	607a      	str	r2, [r7, #4]
 8009c22:	603b      	str	r3, [r7, #0]
 8009c24:	4603      	mov	r3, r0
 8009c26:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009c28:	7bfb      	ldrb	r3, [r7, #15]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d102      	bne.n	8009c34 <USER_SPI_read+0x1c>
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d101      	bne.n	8009c38 <USER_SPI_read+0x20>
 8009c34:	2304      	movs	r3, #4
 8009c36:	e04d      	b.n	8009cd4 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8009c38:	4b28      	ldr	r3, [pc, #160]	; (8009cdc <USER_SPI_read+0xc4>)
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	f003 0301 	and.w	r3, r3, #1
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d001      	beq.n	8009c4a <USER_SPI_read+0x32>
 8009c46:	2303      	movs	r3, #3
 8009c48:	e044      	b.n	8009cd4 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8009c4a:	4b25      	ldr	r3, [pc, #148]	; (8009ce0 <USER_SPI_read+0xc8>)
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	f003 0308 	and.w	r3, r3, #8
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d102      	bne.n	8009c5c <USER_SPI_read+0x44>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	025b      	lsls	r3, r3, #9
 8009c5a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	2b01      	cmp	r3, #1
 8009c60:	d111      	bne.n	8009c86 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8009c62:	6879      	ldr	r1, [r7, #4]
 8009c64:	2011      	movs	r0, #17
 8009c66:	f7ff fe68 	bl	800993a <send_cmd>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d129      	bne.n	8009cc4 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8009c70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009c74:	68b8      	ldr	r0, [r7, #8]
 8009c76:	f7ff fe05 	bl	8009884 <rcvr_datablock>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d021      	beq.n	8009cc4 <USER_SPI_read+0xac>
			count = 0;
 8009c80:	2300      	movs	r3, #0
 8009c82:	603b      	str	r3, [r7, #0]
 8009c84:	e01e      	b.n	8009cc4 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8009c86:	6879      	ldr	r1, [r7, #4]
 8009c88:	2012      	movs	r0, #18
 8009c8a:	f7ff fe56 	bl	800993a <send_cmd>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d117      	bne.n	8009cc4 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8009c94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009c98:	68b8      	ldr	r0, [r7, #8]
 8009c9a:	f7ff fdf3 	bl	8009884 <rcvr_datablock>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d00a      	beq.n	8009cba <USER_SPI_read+0xa2>
				buff += 512;
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009caa:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	3b01      	subs	r3, #1
 8009cb0:	603b      	str	r3, [r7, #0]
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d1ed      	bne.n	8009c94 <USER_SPI_read+0x7c>
 8009cb8:	e000      	b.n	8009cbc <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8009cba:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8009cbc:	2100      	movs	r1, #0
 8009cbe:	200c      	movs	r0, #12
 8009cc0:	f7ff fe3b 	bl	800993a <send_cmd>
		}
	}
	despiselect();
 8009cc4:	f7ff fdb2 	bl	800982c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	bf14      	ite	ne
 8009cce:	2301      	movne	r3, #1
 8009cd0:	2300      	moveq	r3, #0
 8009cd2:	b2db      	uxtb	r3, r3
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3710      	adds	r7, #16
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}
 8009cdc:	20000020 	.word	0x20000020
 8009ce0:	20000394 	.word	0x20000394

08009ce4 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	60b9      	str	r1, [r7, #8]
 8009cec:	607a      	str	r2, [r7, #4]
 8009cee:	603b      	str	r3, [r7, #0]
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009cf4:	7bfb      	ldrb	r3, [r7, #15]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d102      	bne.n	8009d00 <USER_SPI_write+0x1c>
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d101      	bne.n	8009d04 <USER_SPI_write+0x20>
 8009d00:	2304      	movs	r3, #4
 8009d02:	e063      	b.n	8009dcc <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8009d04:	4b33      	ldr	r3, [pc, #204]	; (8009dd4 <USER_SPI_write+0xf0>)
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	b2db      	uxtb	r3, r3
 8009d0a:	f003 0301 	and.w	r3, r3, #1
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d001      	beq.n	8009d16 <USER_SPI_write+0x32>
 8009d12:	2303      	movs	r3, #3
 8009d14:	e05a      	b.n	8009dcc <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8009d16:	4b2f      	ldr	r3, [pc, #188]	; (8009dd4 <USER_SPI_write+0xf0>)
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	f003 0304 	and.w	r3, r3, #4
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d001      	beq.n	8009d28 <USER_SPI_write+0x44>
 8009d24:	2302      	movs	r3, #2
 8009d26:	e051      	b.n	8009dcc <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8009d28:	4b2b      	ldr	r3, [pc, #172]	; (8009dd8 <USER_SPI_write+0xf4>)
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	f003 0308 	and.w	r3, r3, #8
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d102      	bne.n	8009d3a <USER_SPI_write+0x56>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	025b      	lsls	r3, r3, #9
 8009d38:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d110      	bne.n	8009d62 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8009d40:	6879      	ldr	r1, [r7, #4]
 8009d42:	2018      	movs	r0, #24
 8009d44:	f7ff fdf9 	bl	800993a <send_cmd>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d136      	bne.n	8009dbc <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8009d4e:	21fe      	movs	r1, #254	; 0xfe
 8009d50:	68b8      	ldr	r0, [r7, #8]
 8009d52:	f7ff fdc0 	bl	80098d6 <xmit_datablock>
 8009d56:	4603      	mov	r3, r0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d02f      	beq.n	8009dbc <USER_SPI_write+0xd8>
			count = 0;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	603b      	str	r3, [r7, #0]
 8009d60:	e02c      	b.n	8009dbc <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8009d62:	4b1d      	ldr	r3, [pc, #116]	; (8009dd8 <USER_SPI_write+0xf4>)
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	f003 0306 	and.w	r3, r3, #6
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d003      	beq.n	8009d76 <USER_SPI_write+0x92>
 8009d6e:	6839      	ldr	r1, [r7, #0]
 8009d70:	2097      	movs	r0, #151	; 0x97
 8009d72:	f7ff fde2 	bl	800993a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8009d76:	6879      	ldr	r1, [r7, #4]
 8009d78:	2019      	movs	r0, #25
 8009d7a:	f7ff fdde 	bl	800993a <send_cmd>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d11b      	bne.n	8009dbc <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8009d84:	21fc      	movs	r1, #252	; 0xfc
 8009d86:	68b8      	ldr	r0, [r7, #8]
 8009d88:	f7ff fda5 	bl	80098d6 <xmit_datablock>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d00a      	beq.n	8009da8 <USER_SPI_write+0xc4>
				buff += 512;
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009d98:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	3b01      	subs	r3, #1
 8009d9e:	603b      	str	r3, [r7, #0]
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d1ee      	bne.n	8009d84 <USER_SPI_write+0xa0>
 8009da6:	e000      	b.n	8009daa <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8009da8:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8009daa:	21fd      	movs	r1, #253	; 0xfd
 8009dac:	2000      	movs	r0, #0
 8009dae:	f7ff fd92 	bl	80098d6 <xmit_datablock>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d101      	bne.n	8009dbc <USER_SPI_write+0xd8>
 8009db8:	2301      	movs	r3, #1
 8009dba:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8009dbc:	f7ff fd36 	bl	800982c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	bf14      	ite	ne
 8009dc6:	2301      	movne	r3, #1
 8009dc8:	2300      	moveq	r3, #0
 8009dca:	b2db      	uxtb	r3, r3
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3710      	adds	r7, #16
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}
 8009dd4:	20000020 	.word	0x20000020
 8009dd8:	20000394 	.word	0x20000394

08009ddc <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b08c      	sub	sp, #48	; 0x30
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	4603      	mov	r3, r0
 8009de4:	603a      	str	r2, [r7, #0]
 8009de6:	71fb      	strb	r3, [r7, #7]
 8009de8:	460b      	mov	r3, r1
 8009dea:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8009dec:	79fb      	ldrb	r3, [r7, #7]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d001      	beq.n	8009df6 <USER_SPI_ioctl+0x1a>
 8009df2:	2304      	movs	r3, #4
 8009df4:	e15a      	b.n	800a0ac <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8009df6:	4baf      	ldr	r3, [pc, #700]	; (800a0b4 <USER_SPI_ioctl+0x2d8>)
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	f003 0301 	and.w	r3, r3, #1
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d001      	beq.n	8009e08 <USER_SPI_ioctl+0x2c>
 8009e04:	2303      	movs	r3, #3
 8009e06:	e151      	b.n	800a0ac <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8009e0e:	79bb      	ldrb	r3, [r7, #6]
 8009e10:	2b04      	cmp	r3, #4
 8009e12:	f200 8136 	bhi.w	800a082 <USER_SPI_ioctl+0x2a6>
 8009e16:	a201      	add	r2, pc, #4	; (adr r2, 8009e1c <USER_SPI_ioctl+0x40>)
 8009e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e1c:	08009e31 	.word	0x08009e31
 8009e20:	08009e45 	.word	0x08009e45
 8009e24:	0800a083 	.word	0x0800a083
 8009e28:	08009ef1 	.word	0x08009ef1
 8009e2c:	08009fe7 	.word	0x08009fe7
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8009e30:	f7ff fd0c 	bl	800984c <spiselect>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	f000 8127 	beq.w	800a08a <USER_SPI_ioctl+0x2ae>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8009e42:	e122      	b.n	800a08a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8009e44:	2100      	movs	r1, #0
 8009e46:	2009      	movs	r0, #9
 8009e48:	f7ff fd77 	bl	800993a <send_cmd>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	f040 811d 	bne.w	800a08e <USER_SPI_ioctl+0x2b2>
 8009e54:	f107 030c 	add.w	r3, r7, #12
 8009e58:	2110      	movs	r1, #16
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7ff fd12 	bl	8009884 <rcvr_datablock>
 8009e60:	4603      	mov	r3, r0
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	f000 8113 	beq.w	800a08e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8009e68:	7b3b      	ldrb	r3, [r7, #12]
 8009e6a:	099b      	lsrs	r3, r3, #6
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d111      	bne.n	8009e96 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8009e72:	7d7b      	ldrb	r3, [r7, #21]
 8009e74:	461a      	mov	r2, r3
 8009e76:	7d3b      	ldrb	r3, [r7, #20]
 8009e78:	021b      	lsls	r3, r3, #8
 8009e7a:	4413      	add	r3, r2
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	7cfb      	ldrb	r3, [r7, #19]
 8009e80:	041b      	lsls	r3, r3, #16
 8009e82:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8009e86:	4413      	add	r3, r2
 8009e88:	3301      	adds	r3, #1
 8009e8a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	029a      	lsls	r2, r3, #10
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	601a      	str	r2, [r3, #0]
 8009e94:	e028      	b.n	8009ee8 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8009e96:	7c7b      	ldrb	r3, [r7, #17]
 8009e98:	f003 030f 	and.w	r3, r3, #15
 8009e9c:	b2da      	uxtb	r2, r3
 8009e9e:	7dbb      	ldrb	r3, [r7, #22]
 8009ea0:	09db      	lsrs	r3, r3, #7
 8009ea2:	b2db      	uxtb	r3, r3
 8009ea4:	4413      	add	r3, r2
 8009ea6:	b2da      	uxtb	r2, r3
 8009ea8:	7d7b      	ldrb	r3, [r7, #21]
 8009eaa:	005b      	lsls	r3, r3, #1
 8009eac:	b2db      	uxtb	r3, r3
 8009eae:	f003 0306 	and.w	r3, r3, #6
 8009eb2:	b2db      	uxtb	r3, r3
 8009eb4:	4413      	add	r3, r2
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	3302      	adds	r3, #2
 8009eba:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8009ebe:	7d3b      	ldrb	r3, [r7, #20]
 8009ec0:	099b      	lsrs	r3, r3, #6
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	7cfb      	ldrb	r3, [r7, #19]
 8009ec8:	009b      	lsls	r3, r3, #2
 8009eca:	441a      	add	r2, r3
 8009ecc:	7cbb      	ldrb	r3, [r7, #18]
 8009ece:	029b      	lsls	r3, r3, #10
 8009ed0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009ed4:	4413      	add	r3, r2
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8009eda:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009ede:	3b09      	subs	r3, #9
 8009ee0:	69fa      	ldr	r2, [r7, #28]
 8009ee2:	409a      	lsls	r2, r3
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8009eee:	e0ce      	b.n	800a08e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8009ef0:	4b71      	ldr	r3, [pc, #452]	; (800a0b8 <USER_SPI_ioctl+0x2dc>)
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	f003 0304 	and.w	r3, r3, #4
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d031      	beq.n	8009f60 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8009efc:	2100      	movs	r1, #0
 8009efe:	208d      	movs	r0, #141	; 0x8d
 8009f00:	f7ff fd1b 	bl	800993a <send_cmd>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	f040 80c3 	bne.w	800a092 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8009f0c:	20ff      	movs	r0, #255	; 0xff
 8009f0e:	f7ff fc1d 	bl	800974c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8009f12:	f107 030c 	add.w	r3, r7, #12
 8009f16:	2110      	movs	r1, #16
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7ff fcb3 	bl	8009884 <rcvr_datablock>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	f000 80b6 	beq.w	800a092 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8009f26:	2330      	movs	r3, #48	; 0x30
 8009f28:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009f2c:	e007      	b.n	8009f3e <USER_SPI_ioctl+0x162>
 8009f2e:	20ff      	movs	r0, #255	; 0xff
 8009f30:	f7ff fc0c 	bl	800974c <xchg_spi>
 8009f34:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009f38:	3b01      	subs	r3, #1
 8009f3a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009f3e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d1f3      	bne.n	8009f2e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8009f46:	7dbb      	ldrb	r3, [r7, #22]
 8009f48:	091b      	lsrs	r3, r3, #4
 8009f4a:	b2db      	uxtb	r3, r3
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	2310      	movs	r3, #16
 8009f50:	fa03 f202 	lsl.w	r2, r3, r2
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8009f5e:	e098      	b.n	800a092 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8009f60:	2100      	movs	r1, #0
 8009f62:	2009      	movs	r0, #9
 8009f64:	f7ff fce9 	bl	800993a <send_cmd>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	f040 8091 	bne.w	800a092 <USER_SPI_ioctl+0x2b6>
 8009f70:	f107 030c 	add.w	r3, r7, #12
 8009f74:	2110      	movs	r1, #16
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7ff fc84 	bl	8009884 <rcvr_datablock>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	f000 8087 	beq.w	800a092 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8009f84:	4b4c      	ldr	r3, [pc, #304]	; (800a0b8 <USER_SPI_ioctl+0x2dc>)
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	f003 0302 	and.w	r3, r3, #2
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d012      	beq.n	8009fb6 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8009f90:	7dbb      	ldrb	r3, [r7, #22]
 8009f92:	005b      	lsls	r3, r3, #1
 8009f94:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8009f98:	7dfa      	ldrb	r2, [r7, #23]
 8009f9a:	09d2      	lsrs	r2, r2, #7
 8009f9c:	b2d2      	uxtb	r2, r2
 8009f9e:	4413      	add	r3, r2
 8009fa0:	1c5a      	adds	r2, r3, #1
 8009fa2:	7e7b      	ldrb	r3, [r7, #25]
 8009fa4:	099b      	lsrs	r3, r3, #6
 8009fa6:	b2db      	uxtb	r3, r3
 8009fa8:	3b01      	subs	r3, #1
 8009faa:	fa02 f303 	lsl.w	r3, r2, r3
 8009fae:	461a      	mov	r2, r3
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	601a      	str	r2, [r3, #0]
 8009fb4:	e013      	b.n	8009fde <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8009fb6:	7dbb      	ldrb	r3, [r7, #22]
 8009fb8:	109b      	asrs	r3, r3, #2
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	f003 031f 	and.w	r3, r3, #31
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	7dfa      	ldrb	r2, [r7, #23]
 8009fc4:	00d2      	lsls	r2, r2, #3
 8009fc6:	f002 0218 	and.w	r2, r2, #24
 8009fca:	7df9      	ldrb	r1, [r7, #23]
 8009fcc:	0949      	lsrs	r1, r1, #5
 8009fce:	b2c9      	uxtb	r1, r1
 8009fd0:	440a      	add	r2, r1
 8009fd2:	3201      	adds	r2, #1
 8009fd4:	fb02 f303 	mul.w	r3, r2, r3
 8009fd8:	461a      	mov	r2, r3
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8009fe4:	e055      	b.n	800a092 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009fe6:	4b34      	ldr	r3, [pc, #208]	; (800a0b8 <USER_SPI_ioctl+0x2dc>)
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	f003 0306 	and.w	r3, r3, #6
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d051      	beq.n	800a096 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009ff2:	f107 020c 	add.w	r2, r7, #12
 8009ff6:	79fb      	ldrb	r3, [r7, #7]
 8009ff8:	210b      	movs	r1, #11
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7ff feee 	bl	8009ddc <USER_SPI_ioctl>
 800a000:	4603      	mov	r3, r0
 800a002:	2b00      	cmp	r3, #0
 800a004:	d149      	bne.n	800a09a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800a006:	7b3b      	ldrb	r3, [r7, #12]
 800a008:	099b      	lsrs	r3, r3, #6
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d104      	bne.n	800a01a <USER_SPI_ioctl+0x23e>
 800a010:	7dbb      	ldrb	r3, [r7, #22]
 800a012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a016:	2b00      	cmp	r3, #0
 800a018:	d041      	beq.n	800a09e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	623b      	str	r3, [r7, #32]
 800a01e:	6a3b      	ldr	r3, [r7, #32]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	62bb      	str	r3, [r7, #40]	; 0x28
 800a024:	6a3b      	ldr	r3, [r7, #32]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800a02a:	4b23      	ldr	r3, [pc, #140]	; (800a0b8 <USER_SPI_ioctl+0x2dc>)
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	f003 0308 	and.w	r3, r3, #8
 800a032:	2b00      	cmp	r3, #0
 800a034:	d105      	bne.n	800a042 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800a036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a038:	025b      	lsls	r3, r3, #9
 800a03a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03e:	025b      	lsls	r3, r3, #9
 800a040:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800a042:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a044:	2020      	movs	r0, #32
 800a046:	f7ff fc78 	bl	800993a <send_cmd>
 800a04a:	4603      	mov	r3, r0
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d128      	bne.n	800a0a2 <USER_SPI_ioctl+0x2c6>
 800a050:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a052:	2021      	movs	r0, #33	; 0x21
 800a054:	f7ff fc71 	bl	800993a <send_cmd>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d121      	bne.n	800a0a2 <USER_SPI_ioctl+0x2c6>
 800a05e:	2100      	movs	r1, #0
 800a060:	2026      	movs	r0, #38	; 0x26
 800a062:	f7ff fc6a 	bl	800993a <send_cmd>
 800a066:	4603      	mov	r3, r0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d11a      	bne.n	800a0a2 <USER_SPI_ioctl+0x2c6>
 800a06c:	f247 5030 	movw	r0, #30000	; 0x7530
 800a070:	f7ff fbb9 	bl	80097e6 <wait_ready>
 800a074:	4603      	mov	r3, r0
 800a076:	2b00      	cmp	r3, #0
 800a078:	d013      	beq.n	800a0a2 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800a07a:	2300      	movs	r3, #0
 800a07c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800a080:	e00f      	b.n	800a0a2 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800a082:	2304      	movs	r3, #4
 800a084:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a088:	e00c      	b.n	800a0a4 <USER_SPI_ioctl+0x2c8>
		break;
 800a08a:	bf00      	nop
 800a08c:	e00a      	b.n	800a0a4 <USER_SPI_ioctl+0x2c8>
		break;
 800a08e:	bf00      	nop
 800a090:	e008      	b.n	800a0a4 <USER_SPI_ioctl+0x2c8>
		break;
 800a092:	bf00      	nop
 800a094:	e006      	b.n	800a0a4 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800a096:	bf00      	nop
 800a098:	e004      	b.n	800a0a4 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800a09a:	bf00      	nop
 800a09c:	e002      	b.n	800a0a4 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800a09e:	bf00      	nop
 800a0a0:	e000      	b.n	800a0a4 <USER_SPI_ioctl+0x2c8>
		break;
 800a0a2:	bf00      	nop
	}

	despiselect();
 800a0a4:	f7ff fbc2 	bl	800982c <despiselect>

	return res;
 800a0a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3730      	adds	r7, #48	; 0x30
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	20000020 	.word	0x20000020
 800a0b8:	20000394 	.word	0x20000394

0800a0bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	460b      	mov	r3, r1
 800a0c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a0c8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a0cc:	f002 f970 	bl	800c3b0 <USBD_static_malloc>
 800a0d0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d105      	bne.n	800a0e4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a0e0:	2302      	movs	r3, #2
 800a0e2:	e066      	b.n	800a1b2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	68fa      	ldr	r2, [r7, #12]
 800a0e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	7c1b      	ldrb	r3, [r3, #16]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d119      	bne.n	800a128 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a0f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0f8:	2202      	movs	r2, #2
 800a0fa:	2181      	movs	r1, #129	; 0x81
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f002 f834 	bl	800c16a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2201      	movs	r2, #1
 800a106:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a108:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a10c:	2202      	movs	r2, #2
 800a10e:	2101      	movs	r1, #1
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f002 f82a 	bl	800c16a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2201      	movs	r2, #1
 800a11a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2210      	movs	r2, #16
 800a122:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a126:	e016      	b.n	800a156 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a128:	2340      	movs	r3, #64	; 0x40
 800a12a:	2202      	movs	r2, #2
 800a12c:	2181      	movs	r1, #129	; 0x81
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f002 f81b 	bl	800c16a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2201      	movs	r2, #1
 800a138:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a13a:	2340      	movs	r3, #64	; 0x40
 800a13c:	2202      	movs	r2, #2
 800a13e:	2101      	movs	r1, #1
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f002 f812 	bl	800c16a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2201      	movs	r2, #1
 800a14a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2210      	movs	r2, #16
 800a152:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a156:	2308      	movs	r3, #8
 800a158:	2203      	movs	r2, #3
 800a15a:	2182      	movs	r1, #130	; 0x82
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f002 f804 	bl	800c16a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2201      	movs	r2, #1
 800a166:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2200      	movs	r2, #0
 800a178:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2200      	movs	r2, #0
 800a180:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	7c1b      	ldrb	r3, [r3, #16]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d109      	bne.n	800a1a0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a192:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a196:	2101      	movs	r1, #1
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f002 f8d5 	bl	800c348 <USBD_LL_PrepareReceive>
 800a19e:	e007      	b.n	800a1b0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a1a6:	2340      	movs	r3, #64	; 0x40
 800a1a8:	2101      	movs	r1, #1
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f002 f8cc 	bl	800c348 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a1b0:	2300      	movs	r3, #0
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3710      	adds	r7, #16
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b082      	sub	sp, #8
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a1c6:	2181      	movs	r1, #129	; 0x81
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f001 fff4 	bl	800c1b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a1d4:	2101      	movs	r1, #1
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f001 ffed 	bl	800c1b6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a1e4:	2182      	movs	r1, #130	; 0x82
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f001 ffe5 	bl	800c1b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a202:	2b00      	cmp	r3, #0
 800a204:	d00e      	beq.n	800a224 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a216:	4618      	mov	r0, r3
 800a218:	f002 f8d8 	bl	800c3cc <USBD_static_free>
    pdev->pClassData = NULL;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2200      	movs	r2, #0
 800a220:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a224:	2300      	movs	r3, #0
}
 800a226:	4618      	mov	r0, r3
 800a228:	3708      	adds	r7, #8
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
	...

0800a230 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b086      	sub	sp, #24
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a240:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a242:	2300      	movs	r3, #0
 800a244:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a246:	2300      	movs	r3, #0
 800a248:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a24a:	2300      	movs	r3, #0
 800a24c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d101      	bne.n	800a258 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a254:	2303      	movs	r3, #3
 800a256:	e0af      	b.n	800a3b8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	781b      	ldrb	r3, [r3, #0]
 800a25c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a260:	2b00      	cmp	r3, #0
 800a262:	d03f      	beq.n	800a2e4 <USBD_CDC_Setup+0xb4>
 800a264:	2b20      	cmp	r3, #32
 800a266:	f040 809f 	bne.w	800a3a8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	88db      	ldrh	r3, [r3, #6]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d02e      	beq.n	800a2d0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	b25b      	sxtb	r3, r3
 800a278:	2b00      	cmp	r3, #0
 800a27a:	da16      	bge.n	800a2aa <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	683a      	ldr	r2, [r7, #0]
 800a286:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a288:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a28a:	683a      	ldr	r2, [r7, #0]
 800a28c:	88d2      	ldrh	r2, [r2, #6]
 800a28e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	88db      	ldrh	r3, [r3, #6]
 800a294:	2b07      	cmp	r3, #7
 800a296:	bf28      	it	cs
 800a298:	2307      	movcs	r3, #7
 800a29a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	89fa      	ldrh	r2, [r7, #14]
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f001 fae9 	bl	800b87a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a2a8:	e085      	b.n	800a3b6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	785a      	ldrb	r2, [r3, #1]
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	88db      	ldrh	r3, [r3, #6]
 800a2b8:	b2da      	uxtb	r2, r3
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a2c0:	6939      	ldr	r1, [r7, #16]
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	88db      	ldrh	r3, [r3, #6]
 800a2c6:	461a      	mov	r2, r3
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f001 fb02 	bl	800b8d2 <USBD_CtlPrepareRx>
      break;
 800a2ce:	e072      	b.n	800a3b6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a2d6:	689b      	ldr	r3, [r3, #8]
 800a2d8:	683a      	ldr	r2, [r7, #0]
 800a2da:	7850      	ldrb	r0, [r2, #1]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	6839      	ldr	r1, [r7, #0]
 800a2e0:	4798      	blx	r3
      break;
 800a2e2:	e068      	b.n	800a3b6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	785b      	ldrb	r3, [r3, #1]
 800a2e8:	2b0b      	cmp	r3, #11
 800a2ea:	d852      	bhi.n	800a392 <USBD_CDC_Setup+0x162>
 800a2ec:	a201      	add	r2, pc, #4	; (adr r2, 800a2f4 <USBD_CDC_Setup+0xc4>)
 800a2ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f2:	bf00      	nop
 800a2f4:	0800a325 	.word	0x0800a325
 800a2f8:	0800a3a1 	.word	0x0800a3a1
 800a2fc:	0800a393 	.word	0x0800a393
 800a300:	0800a393 	.word	0x0800a393
 800a304:	0800a393 	.word	0x0800a393
 800a308:	0800a393 	.word	0x0800a393
 800a30c:	0800a393 	.word	0x0800a393
 800a310:	0800a393 	.word	0x0800a393
 800a314:	0800a393 	.word	0x0800a393
 800a318:	0800a393 	.word	0x0800a393
 800a31c:	0800a34f 	.word	0x0800a34f
 800a320:	0800a379 	.word	0x0800a379
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a32a:	b2db      	uxtb	r3, r3
 800a32c:	2b03      	cmp	r3, #3
 800a32e:	d107      	bne.n	800a340 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a330:	f107 030a 	add.w	r3, r7, #10
 800a334:	2202      	movs	r2, #2
 800a336:	4619      	mov	r1, r3
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f001 fa9e 	bl	800b87a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a33e:	e032      	b.n	800a3a6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a340:	6839      	ldr	r1, [r7, #0]
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f001 fa28 	bl	800b798 <USBD_CtlError>
            ret = USBD_FAIL;
 800a348:	2303      	movs	r3, #3
 800a34a:	75fb      	strb	r3, [r7, #23]
          break;
 800a34c:	e02b      	b.n	800a3a6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a354:	b2db      	uxtb	r3, r3
 800a356:	2b03      	cmp	r3, #3
 800a358:	d107      	bne.n	800a36a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a35a:	f107 030d 	add.w	r3, r7, #13
 800a35e:	2201      	movs	r2, #1
 800a360:	4619      	mov	r1, r3
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f001 fa89 	bl	800b87a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a368:	e01d      	b.n	800a3a6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a36a:	6839      	ldr	r1, [r7, #0]
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f001 fa13 	bl	800b798 <USBD_CtlError>
            ret = USBD_FAIL;
 800a372:	2303      	movs	r3, #3
 800a374:	75fb      	strb	r3, [r7, #23]
          break;
 800a376:	e016      	b.n	800a3a6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a37e:	b2db      	uxtb	r3, r3
 800a380:	2b03      	cmp	r3, #3
 800a382:	d00f      	beq.n	800a3a4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a384:	6839      	ldr	r1, [r7, #0]
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f001 fa06 	bl	800b798 <USBD_CtlError>
            ret = USBD_FAIL;
 800a38c:	2303      	movs	r3, #3
 800a38e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a390:	e008      	b.n	800a3a4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a392:	6839      	ldr	r1, [r7, #0]
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f001 f9ff 	bl	800b798 <USBD_CtlError>
          ret = USBD_FAIL;
 800a39a:	2303      	movs	r3, #3
 800a39c:	75fb      	strb	r3, [r7, #23]
          break;
 800a39e:	e002      	b.n	800a3a6 <USBD_CDC_Setup+0x176>
          break;
 800a3a0:	bf00      	nop
 800a3a2:	e008      	b.n	800a3b6 <USBD_CDC_Setup+0x186>
          break;
 800a3a4:	bf00      	nop
      }
      break;
 800a3a6:	e006      	b.n	800a3b6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a3a8:	6839      	ldr	r1, [r7, #0]
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f001 f9f4 	bl	800b798 <USBD_CtlError>
      ret = USBD_FAIL;
 800a3b0:	2303      	movs	r3, #3
 800a3b2:	75fb      	strb	r3, [r7, #23]
      break;
 800a3b4:	bf00      	nop
  }

  return (uint8_t)ret;
 800a3b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3718      	adds	r7, #24
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}

0800a3c0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b084      	sub	sp, #16
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a3d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d101      	bne.n	800a3e2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a3de:	2303      	movs	r3, #3
 800a3e0:	e04f      	b.n	800a482 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3e8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a3ea:	78fa      	ldrb	r2, [r7, #3]
 800a3ec:	6879      	ldr	r1, [r7, #4]
 800a3ee:	4613      	mov	r3, r2
 800a3f0:	009b      	lsls	r3, r3, #2
 800a3f2:	4413      	add	r3, r2
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	440b      	add	r3, r1
 800a3f8:	3318      	adds	r3, #24
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d029      	beq.n	800a454 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a400:	78fa      	ldrb	r2, [r7, #3]
 800a402:	6879      	ldr	r1, [r7, #4]
 800a404:	4613      	mov	r3, r2
 800a406:	009b      	lsls	r3, r3, #2
 800a408:	4413      	add	r3, r2
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	440b      	add	r3, r1
 800a40e:	3318      	adds	r3, #24
 800a410:	681a      	ldr	r2, [r3, #0]
 800a412:	78f9      	ldrb	r1, [r7, #3]
 800a414:	68f8      	ldr	r0, [r7, #12]
 800a416:	460b      	mov	r3, r1
 800a418:	00db      	lsls	r3, r3, #3
 800a41a:	1a5b      	subs	r3, r3, r1
 800a41c:	009b      	lsls	r3, r3, #2
 800a41e:	4403      	add	r3, r0
 800a420:	3344      	adds	r3, #68	; 0x44
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	fbb2 f1f3 	udiv	r1, r2, r3
 800a428:	fb03 f301 	mul.w	r3, r3, r1
 800a42c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d110      	bne.n	800a454 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a432:	78fa      	ldrb	r2, [r7, #3]
 800a434:	6879      	ldr	r1, [r7, #4]
 800a436:	4613      	mov	r3, r2
 800a438:	009b      	lsls	r3, r3, #2
 800a43a:	4413      	add	r3, r2
 800a43c:	009b      	lsls	r3, r3, #2
 800a43e:	440b      	add	r3, r1
 800a440:	3318      	adds	r3, #24
 800a442:	2200      	movs	r2, #0
 800a444:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a446:	78f9      	ldrb	r1, [r7, #3]
 800a448:	2300      	movs	r3, #0
 800a44a:	2200      	movs	r2, #0
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f001 ff5a 	bl	800c306 <USBD_LL_Transmit>
 800a452:	e015      	b.n	800a480 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	2200      	movs	r2, #0
 800a458:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d00b      	beq.n	800a480 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a46e:	691b      	ldr	r3, [r3, #16]
 800a470:	68ba      	ldr	r2, [r7, #8]
 800a472:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a476:	68ba      	ldr	r2, [r7, #8]
 800a478:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a47c:	78fa      	ldrb	r2, [r7, #3]
 800a47e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a480:	2300      	movs	r3, #0
}
 800a482:	4618      	mov	r0, r3
 800a484:	3710      	adds	r7, #16
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}

0800a48a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a48a:	b580      	push	{r7, lr}
 800a48c:	b084      	sub	sp, #16
 800a48e:	af00      	add	r7, sp, #0
 800a490:	6078      	str	r0, [r7, #4]
 800a492:	460b      	mov	r3, r1
 800a494:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a49c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d101      	bne.n	800a4ac <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a4a8:	2303      	movs	r3, #3
 800a4aa:	e015      	b.n	800a4d8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a4ac:	78fb      	ldrb	r3, [r7, #3]
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f001 ff6a 	bl	800c38a <USBD_LL_GetRxDataSize>
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a4c4:	68db      	ldr	r3, [r3, #12]
 800a4c6:	68fa      	ldr	r2, [r7, #12]
 800a4c8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a4cc:	68fa      	ldr	r2, [r7, #12]
 800a4ce:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a4d2:	4611      	mov	r1, r2
 800a4d4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a4d6:	2300      	movs	r3, #0
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3710      	adds	r7, #16
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a4ee:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d101      	bne.n	800a4fa <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a4f6:	2303      	movs	r3, #3
 800a4f8:	e01b      	b.n	800a532 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a500:	2b00      	cmp	r3, #0
 800a502:	d015      	beq.n	800a530 <USBD_CDC_EP0_RxReady+0x50>
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a50a:	2bff      	cmp	r3, #255	; 0xff
 800a50c:	d010      	beq.n	800a530 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a514:	689b      	ldr	r3, [r3, #8]
 800a516:	68fa      	ldr	r2, [r7, #12]
 800a518:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a51c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a51e:	68fa      	ldr	r2, [r7, #12]
 800a520:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a524:	b292      	uxth	r2, r2
 800a526:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	22ff      	movs	r2, #255	; 0xff
 800a52c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a530:	2300      	movs	r3, #0
}
 800a532:	4618      	mov	r0, r3
 800a534:	3710      	adds	r7, #16
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
	...

0800a53c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b083      	sub	sp, #12
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2243      	movs	r2, #67	; 0x43
 800a548:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a54a:	4b03      	ldr	r3, [pc, #12]	; (800a558 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	370c      	adds	r7, #12
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr
 800a558:	200000ac 	.word	0x200000ac

0800a55c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2243      	movs	r2, #67	; 0x43
 800a568:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a56a:	4b03      	ldr	r3, [pc, #12]	; (800a578 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	370c      	adds	r7, #12
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr
 800a578:	20000068 	.word	0x20000068

0800a57c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2243      	movs	r2, #67	; 0x43
 800a588:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a58a:	4b03      	ldr	r3, [pc, #12]	; (800a598 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	370c      	adds	r7, #12
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr
 800a598:	200000f0 	.word	0x200000f0

0800a59c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	220a      	movs	r2, #10
 800a5a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a5aa:	4b03      	ldr	r3, [pc, #12]	; (800a5b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr
 800a5b8:	20000024 	.word	0x20000024

0800a5bc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b083      	sub	sp, #12
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d101      	bne.n	800a5d0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a5cc:	2303      	movs	r3, #3
 800a5ce:	e004      	b.n	800a5da <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	683a      	ldr	r2, [r7, #0]
 800a5d4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a5d8:	2300      	movs	r3, #0
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	370c      	adds	r7, #12
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e4:	4770      	bx	lr

0800a5e6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a5e6:	b480      	push	{r7}
 800a5e8:	b087      	sub	sp, #28
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	60f8      	str	r0, [r7, #12]
 800a5ee:	60b9      	str	r1, [r7, #8]
 800a5f0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5f8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d101      	bne.n	800a604 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a600:	2303      	movs	r3, #3
 800a602:	e008      	b.n	800a616 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	68ba      	ldr	r2, [r7, #8]
 800a608:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a614:	2300      	movs	r3, #0
}
 800a616:	4618      	mov	r0, r3
 800a618:	371c      	adds	r7, #28
 800a61a:	46bd      	mov	sp, r7
 800a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a620:	4770      	bx	lr

0800a622 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a622:	b480      	push	{r7}
 800a624:	b085      	sub	sp, #20
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
 800a62a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a632:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d101      	bne.n	800a63e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a63a:	2303      	movs	r3, #3
 800a63c:	e004      	b.n	800a648 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	683a      	ldr	r2, [r7, #0]
 800a642:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a646:	2300      	movs	r3, #0
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3714      	adds	r7, #20
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr

0800a654 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a662:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d101      	bne.n	800a672 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a66e:	2303      	movs	r3, #3
 800a670:	e016      	b.n	800a6a0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	7c1b      	ldrb	r3, [r3, #16]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d109      	bne.n	800a68e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a680:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a684:	2101      	movs	r1, #1
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f001 fe5e 	bl	800c348 <USBD_LL_PrepareReceive>
 800a68c:	e007      	b.n	800a69e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a694:	2340      	movs	r3, #64	; 0x40
 800a696:	2101      	movs	r1, #1
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f001 fe55 	bl	800c348 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a69e:	2300      	movs	r3, #0
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3710      	adds	r7, #16
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b086      	sub	sp, #24
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	60f8      	str	r0, [r7, #12]
 800a6b0:	60b9      	str	r1, [r7, #8]
 800a6b2:	4613      	mov	r3, r2
 800a6b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d101      	bne.n	800a6c0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a6bc:	2303      	movs	r3, #3
 800a6be:	e01f      	b.n	800a700 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d003      	beq.n	800a6e6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	68ba      	ldr	r2, [r7, #8]
 800a6e2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2201      	movs	r2, #1
 800a6ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	79fa      	ldrb	r2, [r7, #7]
 800a6f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a6f4:	68f8      	ldr	r0, [r7, #12]
 800a6f6:	f001 fcd1 	bl	800c09c <USBD_LL_Init>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a6fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800a700:	4618      	mov	r0, r3
 800a702:	3718      	adds	r7, #24
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a712:	2300      	movs	r3, #0
 800a714:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d101      	bne.n	800a720 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a71c:	2303      	movs	r3, #3
 800a71e:	e016      	b.n	800a74e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	683a      	ldr	r2, [r7, #0]
 800a724:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a72e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a730:	2b00      	cmp	r3, #0
 800a732:	d00b      	beq.n	800a74c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a73c:	f107 020e 	add.w	r2, r7, #14
 800a740:	4610      	mov	r0, r2
 800a742:	4798      	blx	r3
 800a744:	4602      	mov	r2, r0
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a74c:	2300      	movs	r3, #0
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3710      	adds	r7, #16
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}

0800a756 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a756:	b580      	push	{r7, lr}
 800a758:	b082      	sub	sp, #8
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f001 fce8 	bl	800c134 <USBD_LL_Start>
 800a764:	4603      	mov	r3, r0
}
 800a766:	4618      	mov	r0, r3
 800a768:	3708      	adds	r7, #8
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}

0800a76e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a76e:	b480      	push	{r7}
 800a770:	b083      	sub	sp, #12
 800a772:	af00      	add	r7, sp, #0
 800a774:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a776:	2300      	movs	r3, #0
}
 800a778:	4618      	mov	r0, r3
 800a77a:	370c      	adds	r7, #12
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr

0800a784 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b084      	sub	sp, #16
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	460b      	mov	r3, r1
 800a78e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a790:	2303      	movs	r3, #3
 800a792:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d009      	beq.n	800a7b2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	78fa      	ldrb	r2, [r7, #3]
 800a7a8:	4611      	mov	r1, r2
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	4798      	blx	r3
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a7b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3710      	adds	r7, #16
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}

0800a7bc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b082      	sub	sp, #8
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d007      	beq.n	800a7e2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	78fa      	ldrb	r2, [r7, #3]
 800a7dc:	4611      	mov	r1, r2
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	4798      	blx	r3
  }

  return USBD_OK;
 800a7e2:	2300      	movs	r3, #0
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3708      	adds	r7, #8
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a7fc:	6839      	ldr	r1, [r7, #0]
 800a7fe:	4618      	mov	r0, r3
 800a800:	f000 ff90 	bl	800b724 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2201      	movs	r2, #1
 800a808:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a812:	461a      	mov	r2, r3
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a820:	f003 031f 	and.w	r3, r3, #31
 800a824:	2b02      	cmp	r3, #2
 800a826:	d01a      	beq.n	800a85e <USBD_LL_SetupStage+0x72>
 800a828:	2b02      	cmp	r3, #2
 800a82a:	d822      	bhi.n	800a872 <USBD_LL_SetupStage+0x86>
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d002      	beq.n	800a836 <USBD_LL_SetupStage+0x4a>
 800a830:	2b01      	cmp	r3, #1
 800a832:	d00a      	beq.n	800a84a <USBD_LL_SetupStage+0x5e>
 800a834:	e01d      	b.n	800a872 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a83c:	4619      	mov	r1, r3
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 fa62 	bl	800ad08 <USBD_StdDevReq>
 800a844:	4603      	mov	r3, r0
 800a846:	73fb      	strb	r3, [r7, #15]
      break;
 800a848:	e020      	b.n	800a88c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a850:	4619      	mov	r1, r3
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 fac6 	bl	800ade4 <USBD_StdItfReq>
 800a858:	4603      	mov	r3, r0
 800a85a:	73fb      	strb	r3, [r7, #15]
      break;
 800a85c:	e016      	b.n	800a88c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a864:	4619      	mov	r1, r3
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f000 fb05 	bl	800ae76 <USBD_StdEPReq>
 800a86c:	4603      	mov	r3, r0
 800a86e:	73fb      	strb	r3, [r7, #15]
      break;
 800a870:	e00c      	b.n	800a88c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a878:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a87c:	b2db      	uxtb	r3, r3
 800a87e:	4619      	mov	r1, r3
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f001 fcb7 	bl	800c1f4 <USBD_LL_StallEP>
 800a886:	4603      	mov	r3, r0
 800a888:	73fb      	strb	r3, [r7, #15]
      break;
 800a88a:	bf00      	nop
  }

  return ret;
 800a88c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3710      	adds	r7, #16
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}

0800a896 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a896:	b580      	push	{r7, lr}
 800a898:	b086      	sub	sp, #24
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	60f8      	str	r0, [r7, #12]
 800a89e:	460b      	mov	r3, r1
 800a8a0:	607a      	str	r2, [r7, #4]
 800a8a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a8a4:	7afb      	ldrb	r3, [r7, #11]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d138      	bne.n	800a91c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a8b0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a8b8:	2b03      	cmp	r3, #3
 800a8ba:	d14a      	bne.n	800a952 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	689a      	ldr	r2, [r3, #8]
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	68db      	ldr	r3, [r3, #12]
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d913      	bls.n	800a8f0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	689a      	ldr	r2, [r3, #8]
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	68db      	ldr	r3, [r3, #12]
 800a8d0:	1ad2      	subs	r2, r2, r3
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	68da      	ldr	r2, [r3, #12]
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	bf28      	it	cs
 800a8e2:	4613      	movcs	r3, r2
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	6879      	ldr	r1, [r7, #4]
 800a8e8:	68f8      	ldr	r0, [r7, #12]
 800a8ea:	f001 f80f 	bl	800b90c <USBD_CtlContinueRx>
 800a8ee:	e030      	b.n	800a952 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	2b03      	cmp	r3, #3
 800a8fa:	d10b      	bne.n	800a914 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a902:	691b      	ldr	r3, [r3, #16]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d005      	beq.n	800a914 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a90e:	691b      	ldr	r3, [r3, #16]
 800a910:	68f8      	ldr	r0, [r7, #12]
 800a912:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a914:	68f8      	ldr	r0, [r7, #12]
 800a916:	f001 f80a 	bl	800b92e <USBD_CtlSendStatus>
 800a91a:	e01a      	b.n	800a952 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a922:	b2db      	uxtb	r3, r3
 800a924:	2b03      	cmp	r3, #3
 800a926:	d114      	bne.n	800a952 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a92e:	699b      	ldr	r3, [r3, #24]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d00e      	beq.n	800a952 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a93a:	699b      	ldr	r3, [r3, #24]
 800a93c:	7afa      	ldrb	r2, [r7, #11]
 800a93e:	4611      	mov	r1, r2
 800a940:	68f8      	ldr	r0, [r7, #12]
 800a942:	4798      	blx	r3
 800a944:	4603      	mov	r3, r0
 800a946:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a948:	7dfb      	ldrb	r3, [r7, #23]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d001      	beq.n	800a952 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a94e:	7dfb      	ldrb	r3, [r7, #23]
 800a950:	e000      	b.n	800a954 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a952:	2300      	movs	r3, #0
}
 800a954:	4618      	mov	r0, r3
 800a956:	3718      	adds	r7, #24
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b086      	sub	sp, #24
 800a960:	af00      	add	r7, sp, #0
 800a962:	60f8      	str	r0, [r7, #12]
 800a964:	460b      	mov	r3, r1
 800a966:	607a      	str	r2, [r7, #4]
 800a968:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a96a:	7afb      	ldrb	r3, [r7, #11]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d16b      	bne.n	800aa48 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	3314      	adds	r3, #20
 800a974:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a97c:	2b02      	cmp	r3, #2
 800a97e:	d156      	bne.n	800aa2e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	689a      	ldr	r2, [r3, #8]
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	68db      	ldr	r3, [r3, #12]
 800a988:	429a      	cmp	r2, r3
 800a98a:	d914      	bls.n	800a9b6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	689a      	ldr	r2, [r3, #8]
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	68db      	ldr	r3, [r3, #12]
 800a994:	1ad2      	subs	r2, r2, r3
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	689b      	ldr	r3, [r3, #8]
 800a99e:	461a      	mov	r2, r3
 800a9a0:	6879      	ldr	r1, [r7, #4]
 800a9a2:	68f8      	ldr	r0, [r7, #12]
 800a9a4:	f000 ff84 	bl	800b8b0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	2100      	movs	r1, #0
 800a9ae:	68f8      	ldr	r0, [r7, #12]
 800a9b0:	f001 fcca 	bl	800c348 <USBD_LL_PrepareReceive>
 800a9b4:	e03b      	b.n	800aa2e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	68da      	ldr	r2, [r3, #12]
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	689b      	ldr	r3, [r3, #8]
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d11c      	bne.n	800a9fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	685a      	ldr	r2, [r3, #4]
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d316      	bcc.n	800a9fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	685a      	ldr	r2, [r3, #4]
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d20f      	bcs.n	800a9fc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a9dc:	2200      	movs	r2, #0
 800a9de:	2100      	movs	r1, #0
 800a9e0:	68f8      	ldr	r0, [r7, #12]
 800a9e2:	f000 ff65 	bl	800b8b0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	2100      	movs	r1, #0
 800a9f4:	68f8      	ldr	r0, [r7, #12]
 800a9f6:	f001 fca7 	bl	800c348 <USBD_LL_PrepareReceive>
 800a9fa:	e018      	b.n	800aa2e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa02:	b2db      	uxtb	r3, r3
 800aa04:	2b03      	cmp	r3, #3
 800aa06:	d10b      	bne.n	800aa20 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa0e:	68db      	ldr	r3, [r3, #12]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d005      	beq.n	800aa20 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa1a:	68db      	ldr	r3, [r3, #12]
 800aa1c:	68f8      	ldr	r0, [r7, #12]
 800aa1e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa20:	2180      	movs	r1, #128	; 0x80
 800aa22:	68f8      	ldr	r0, [r7, #12]
 800aa24:	f001 fbe6 	bl	800c1f4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800aa28:	68f8      	ldr	r0, [r7, #12]
 800aa2a:	f000 ff93 	bl	800b954 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d122      	bne.n	800aa7e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800aa38:	68f8      	ldr	r0, [r7, #12]
 800aa3a:	f7ff fe98 	bl	800a76e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2200      	movs	r2, #0
 800aa42:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800aa46:	e01a      	b.n	800aa7e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa4e:	b2db      	uxtb	r3, r3
 800aa50:	2b03      	cmp	r3, #3
 800aa52:	d114      	bne.n	800aa7e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa5a:	695b      	ldr	r3, [r3, #20]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d00e      	beq.n	800aa7e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa66:	695b      	ldr	r3, [r3, #20]
 800aa68:	7afa      	ldrb	r2, [r7, #11]
 800aa6a:	4611      	mov	r1, r2
 800aa6c:	68f8      	ldr	r0, [r7, #12]
 800aa6e:	4798      	blx	r3
 800aa70:	4603      	mov	r3, r0
 800aa72:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800aa74:	7dfb      	ldrb	r3, [r7, #23]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d001      	beq.n	800aa7e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800aa7a:	7dfb      	ldrb	r3, [r7, #23]
 800aa7c:	e000      	b.n	800aa80 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800aa7e:	2300      	movs	r3, #0
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3718      	adds	r7, #24
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2201      	movs	r2, #1
 800aa94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d101      	bne.n	800aabc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800aab8:	2303      	movs	r3, #3
 800aaba:	e02f      	b.n	800ab1c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d00f      	beq.n	800aae6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d009      	beq.n	800aae6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	687a      	ldr	r2, [r7, #4]
 800aadc:	6852      	ldr	r2, [r2, #4]
 800aade:	b2d2      	uxtb	r2, r2
 800aae0:	4611      	mov	r1, r2
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aae6:	2340      	movs	r3, #64	; 0x40
 800aae8:	2200      	movs	r2, #0
 800aaea:	2100      	movs	r1, #0
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f001 fb3c 	bl	800c16a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2240      	movs	r2, #64	; 0x40
 800aafe:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ab02:	2340      	movs	r3, #64	; 0x40
 800ab04:	2200      	movs	r2, #0
 800ab06:	2180      	movs	r1, #128	; 0x80
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f001 fb2e 	bl	800c16a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2201      	movs	r2, #1
 800ab12:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2240      	movs	r2, #64	; 0x40
 800ab18:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ab1a:	2300      	movs	r3, #0
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3708      	adds	r7, #8
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}

0800ab24 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b083      	sub	sp, #12
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	78fa      	ldrb	r2, [r7, #3]
 800ab34:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ab36:	2300      	movs	r3, #0
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	370c      	adds	r7, #12
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr

0800ab44 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b083      	sub	sp, #12
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab52:	b2da      	uxtb	r2, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2204      	movs	r2, #4
 800ab5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ab62:	2300      	movs	r3, #0
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	370c      	adds	r7, #12
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr

0800ab70 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	2b04      	cmp	r3, #4
 800ab82:	d106      	bne.n	800ab92 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ab8a:	b2da      	uxtb	r2, r3
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ab92:	2300      	movs	r3, #0
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	370c      	adds	r7, #12
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr

0800aba0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d101      	bne.n	800abb6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800abb2:	2303      	movs	r3, #3
 800abb4:	e012      	b.n	800abdc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abbc:	b2db      	uxtb	r3, r3
 800abbe:	2b03      	cmp	r3, #3
 800abc0:	d10b      	bne.n	800abda <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abc8:	69db      	ldr	r3, [r3, #28]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d005      	beq.n	800abda <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abd4:	69db      	ldr	r3, [r3, #28]
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800abda:	2300      	movs	r3, #0
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3708      	adds	r7, #8
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b082      	sub	sp, #8
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	460b      	mov	r3, r1
 800abee:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d101      	bne.n	800abfe <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800abfa:	2303      	movs	r3, #3
 800abfc:	e014      	b.n	800ac28 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac04:	b2db      	uxtb	r3, r3
 800ac06:	2b03      	cmp	r3, #3
 800ac08:	d10d      	bne.n	800ac26 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac10:	6a1b      	ldr	r3, [r3, #32]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d007      	beq.n	800ac26 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac1c:	6a1b      	ldr	r3, [r3, #32]
 800ac1e:	78fa      	ldrb	r2, [r7, #3]
 800ac20:	4611      	mov	r1, r2
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac26:	2300      	movs	r3, #0
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3708      	adds	r7, #8
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b082      	sub	sp, #8
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	460b      	mov	r3, r1
 800ac3a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d101      	bne.n	800ac4a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800ac46:	2303      	movs	r3, #3
 800ac48:	e014      	b.n	800ac74 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac50:	b2db      	uxtb	r3, r3
 800ac52:	2b03      	cmp	r3, #3
 800ac54:	d10d      	bne.n	800ac72 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d007      	beq.n	800ac72 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac6a:	78fa      	ldrb	r2, [r7, #3]
 800ac6c:	4611      	mov	r1, r2
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac72:	2300      	movs	r3, #0
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3708      	adds	r7, #8
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b083      	sub	sp, #12
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ac84:	2300      	movs	r3, #0
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	370c      	adds	r7, #12
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr

0800ac92 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ac92:	b580      	push	{r7, lr}
 800ac94:	b082      	sub	sp, #8
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d009      	beq.n	800acc0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	687a      	ldr	r2, [r7, #4]
 800acb6:	6852      	ldr	r2, [r2, #4]
 800acb8:	b2d2      	uxtb	r2, r2
 800acba:	4611      	mov	r1, r2
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	4798      	blx	r3
  }

  return USBD_OK;
 800acc0:	2300      	movs	r3, #0
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3708      	adds	r7, #8
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}

0800acca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800acca:	b480      	push	{r7}
 800accc:	b087      	sub	sp, #28
 800acce:	af00      	add	r7, sp, #0
 800acd0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	3301      	adds	r3, #1
 800ace0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ace8:	8a3b      	ldrh	r3, [r7, #16]
 800acea:	021b      	lsls	r3, r3, #8
 800acec:	b21a      	sxth	r2, r3
 800acee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800acf2:	4313      	orrs	r3, r2
 800acf4:	b21b      	sxth	r3, r3
 800acf6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800acf8:	89fb      	ldrh	r3, [r7, #14]
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	371c      	adds	r7, #28
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr
	...

0800ad08 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad12:	2300      	movs	r3, #0
 800ad14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad1e:	2b40      	cmp	r3, #64	; 0x40
 800ad20:	d005      	beq.n	800ad2e <USBD_StdDevReq+0x26>
 800ad22:	2b40      	cmp	r3, #64	; 0x40
 800ad24:	d853      	bhi.n	800adce <USBD_StdDevReq+0xc6>
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d00b      	beq.n	800ad42 <USBD_StdDevReq+0x3a>
 800ad2a:	2b20      	cmp	r3, #32
 800ad2c:	d14f      	bne.n	800adce <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad34:	689b      	ldr	r3, [r3, #8]
 800ad36:	6839      	ldr	r1, [r7, #0]
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	4798      	blx	r3
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	73fb      	strb	r3, [r7, #15]
      break;
 800ad40:	e04a      	b.n	800add8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	785b      	ldrb	r3, [r3, #1]
 800ad46:	2b09      	cmp	r3, #9
 800ad48:	d83b      	bhi.n	800adc2 <USBD_StdDevReq+0xba>
 800ad4a:	a201      	add	r2, pc, #4	; (adr r2, 800ad50 <USBD_StdDevReq+0x48>)
 800ad4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad50:	0800ada5 	.word	0x0800ada5
 800ad54:	0800adb9 	.word	0x0800adb9
 800ad58:	0800adc3 	.word	0x0800adc3
 800ad5c:	0800adaf 	.word	0x0800adaf
 800ad60:	0800adc3 	.word	0x0800adc3
 800ad64:	0800ad83 	.word	0x0800ad83
 800ad68:	0800ad79 	.word	0x0800ad79
 800ad6c:	0800adc3 	.word	0x0800adc3
 800ad70:	0800ad9b 	.word	0x0800ad9b
 800ad74:	0800ad8d 	.word	0x0800ad8d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ad78:	6839      	ldr	r1, [r7, #0]
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 f9de 	bl	800b13c <USBD_GetDescriptor>
          break;
 800ad80:	e024      	b.n	800adcc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ad82:	6839      	ldr	r1, [r7, #0]
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f000 fb43 	bl	800b410 <USBD_SetAddress>
          break;
 800ad8a:	e01f      	b.n	800adcc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ad8c:	6839      	ldr	r1, [r7, #0]
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f000 fb82 	bl	800b498 <USBD_SetConfig>
 800ad94:	4603      	mov	r3, r0
 800ad96:	73fb      	strb	r3, [r7, #15]
          break;
 800ad98:	e018      	b.n	800adcc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ad9a:	6839      	ldr	r1, [r7, #0]
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 fc21 	bl	800b5e4 <USBD_GetConfig>
          break;
 800ada2:	e013      	b.n	800adcc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ada4:	6839      	ldr	r1, [r7, #0]
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 fc52 	bl	800b650 <USBD_GetStatus>
          break;
 800adac:	e00e      	b.n	800adcc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800adae:	6839      	ldr	r1, [r7, #0]
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 fc81 	bl	800b6b8 <USBD_SetFeature>
          break;
 800adb6:	e009      	b.n	800adcc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800adb8:	6839      	ldr	r1, [r7, #0]
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 fc90 	bl	800b6e0 <USBD_ClrFeature>
          break;
 800adc0:	e004      	b.n	800adcc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800adc2:	6839      	ldr	r1, [r7, #0]
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f000 fce7 	bl	800b798 <USBD_CtlError>
          break;
 800adca:	bf00      	nop
      }
      break;
 800adcc:	e004      	b.n	800add8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800adce:	6839      	ldr	r1, [r7, #0]
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f000 fce1 	bl	800b798 <USBD_CtlError>
      break;
 800add6:	bf00      	nop
  }

  return ret;
 800add8:	7bfb      	ldrb	r3, [r7, #15]
}
 800adda:	4618      	mov	r0, r3
 800addc:	3710      	adds	r7, #16
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop

0800ade4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b084      	sub	sp, #16
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800adee:	2300      	movs	r3, #0
 800adf0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800adfa:	2b40      	cmp	r3, #64	; 0x40
 800adfc:	d005      	beq.n	800ae0a <USBD_StdItfReq+0x26>
 800adfe:	2b40      	cmp	r3, #64	; 0x40
 800ae00:	d82f      	bhi.n	800ae62 <USBD_StdItfReq+0x7e>
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d001      	beq.n	800ae0a <USBD_StdItfReq+0x26>
 800ae06:	2b20      	cmp	r3, #32
 800ae08:	d12b      	bne.n	800ae62 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	3b01      	subs	r3, #1
 800ae14:	2b02      	cmp	r3, #2
 800ae16:	d81d      	bhi.n	800ae54 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	889b      	ldrh	r3, [r3, #4]
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	2b01      	cmp	r3, #1
 800ae20:	d813      	bhi.n	800ae4a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae28:	689b      	ldr	r3, [r3, #8]
 800ae2a:	6839      	ldr	r1, [r7, #0]
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	4798      	blx	r3
 800ae30:	4603      	mov	r3, r0
 800ae32:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	88db      	ldrh	r3, [r3, #6]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d110      	bne.n	800ae5e <USBD_StdItfReq+0x7a>
 800ae3c:	7bfb      	ldrb	r3, [r7, #15]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d10d      	bne.n	800ae5e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f000 fd73 	bl	800b92e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ae48:	e009      	b.n	800ae5e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800ae4a:	6839      	ldr	r1, [r7, #0]
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 fca3 	bl	800b798 <USBD_CtlError>
          break;
 800ae52:	e004      	b.n	800ae5e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800ae54:	6839      	ldr	r1, [r7, #0]
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f000 fc9e 	bl	800b798 <USBD_CtlError>
          break;
 800ae5c:	e000      	b.n	800ae60 <USBD_StdItfReq+0x7c>
          break;
 800ae5e:	bf00      	nop
      }
      break;
 800ae60:	e004      	b.n	800ae6c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ae62:	6839      	ldr	r1, [r7, #0]
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f000 fc97 	bl	800b798 <USBD_CtlError>
      break;
 800ae6a:	bf00      	nop
  }

  return ret;
 800ae6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3710      	adds	r7, #16
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}

0800ae76 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae76:	b580      	push	{r7, lr}
 800ae78:	b084      	sub	sp, #16
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	6078      	str	r0, [r7, #4]
 800ae7e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ae80:	2300      	movs	r3, #0
 800ae82:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	889b      	ldrh	r3, [r3, #4]
 800ae88:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae92:	2b40      	cmp	r3, #64	; 0x40
 800ae94:	d007      	beq.n	800aea6 <USBD_StdEPReq+0x30>
 800ae96:	2b40      	cmp	r3, #64	; 0x40
 800ae98:	f200 8145 	bhi.w	800b126 <USBD_StdEPReq+0x2b0>
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d00c      	beq.n	800aeba <USBD_StdEPReq+0x44>
 800aea0:	2b20      	cmp	r3, #32
 800aea2:	f040 8140 	bne.w	800b126 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeac:	689b      	ldr	r3, [r3, #8]
 800aeae:	6839      	ldr	r1, [r7, #0]
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	4798      	blx	r3
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	73fb      	strb	r3, [r7, #15]
      break;
 800aeb8:	e13a      	b.n	800b130 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	785b      	ldrb	r3, [r3, #1]
 800aebe:	2b03      	cmp	r3, #3
 800aec0:	d007      	beq.n	800aed2 <USBD_StdEPReq+0x5c>
 800aec2:	2b03      	cmp	r3, #3
 800aec4:	f300 8129 	bgt.w	800b11a <USBD_StdEPReq+0x2a4>
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d07f      	beq.n	800afcc <USBD_StdEPReq+0x156>
 800aecc:	2b01      	cmp	r3, #1
 800aece:	d03c      	beq.n	800af4a <USBD_StdEPReq+0xd4>
 800aed0:	e123      	b.n	800b11a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aed8:	b2db      	uxtb	r3, r3
 800aeda:	2b02      	cmp	r3, #2
 800aedc:	d002      	beq.n	800aee4 <USBD_StdEPReq+0x6e>
 800aede:	2b03      	cmp	r3, #3
 800aee0:	d016      	beq.n	800af10 <USBD_StdEPReq+0x9a>
 800aee2:	e02c      	b.n	800af3e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aee4:	7bbb      	ldrb	r3, [r7, #14]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d00d      	beq.n	800af06 <USBD_StdEPReq+0x90>
 800aeea:	7bbb      	ldrb	r3, [r7, #14]
 800aeec:	2b80      	cmp	r3, #128	; 0x80
 800aeee:	d00a      	beq.n	800af06 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aef0:	7bbb      	ldrb	r3, [r7, #14]
 800aef2:	4619      	mov	r1, r3
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f001 f97d 	bl	800c1f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aefa:	2180      	movs	r1, #128	; 0x80
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f001 f979 	bl	800c1f4 <USBD_LL_StallEP>
 800af02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af04:	e020      	b.n	800af48 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800af06:	6839      	ldr	r1, [r7, #0]
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 fc45 	bl	800b798 <USBD_CtlError>
              break;
 800af0e:	e01b      	b.n	800af48 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	885b      	ldrh	r3, [r3, #2]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d10e      	bne.n	800af36 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800af18:	7bbb      	ldrb	r3, [r7, #14]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d00b      	beq.n	800af36 <USBD_StdEPReq+0xc0>
 800af1e:	7bbb      	ldrb	r3, [r7, #14]
 800af20:	2b80      	cmp	r3, #128	; 0x80
 800af22:	d008      	beq.n	800af36 <USBD_StdEPReq+0xc0>
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	88db      	ldrh	r3, [r3, #6]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d104      	bne.n	800af36 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800af2c:	7bbb      	ldrb	r3, [r7, #14]
 800af2e:	4619      	mov	r1, r3
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f001 f95f 	bl	800c1f4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f000 fcf9 	bl	800b92e <USBD_CtlSendStatus>

              break;
 800af3c:	e004      	b.n	800af48 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800af3e:	6839      	ldr	r1, [r7, #0]
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f000 fc29 	bl	800b798 <USBD_CtlError>
              break;
 800af46:	bf00      	nop
          }
          break;
 800af48:	e0ec      	b.n	800b124 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af50:	b2db      	uxtb	r3, r3
 800af52:	2b02      	cmp	r3, #2
 800af54:	d002      	beq.n	800af5c <USBD_StdEPReq+0xe6>
 800af56:	2b03      	cmp	r3, #3
 800af58:	d016      	beq.n	800af88 <USBD_StdEPReq+0x112>
 800af5a:	e030      	b.n	800afbe <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af5c:	7bbb      	ldrb	r3, [r7, #14]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d00d      	beq.n	800af7e <USBD_StdEPReq+0x108>
 800af62:	7bbb      	ldrb	r3, [r7, #14]
 800af64:	2b80      	cmp	r3, #128	; 0x80
 800af66:	d00a      	beq.n	800af7e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800af68:	7bbb      	ldrb	r3, [r7, #14]
 800af6a:	4619      	mov	r1, r3
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f001 f941 	bl	800c1f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800af72:	2180      	movs	r1, #128	; 0x80
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f001 f93d 	bl	800c1f4 <USBD_LL_StallEP>
 800af7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af7c:	e025      	b.n	800afca <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800af7e:	6839      	ldr	r1, [r7, #0]
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 fc09 	bl	800b798 <USBD_CtlError>
              break;
 800af86:	e020      	b.n	800afca <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	885b      	ldrh	r3, [r3, #2]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d11b      	bne.n	800afc8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800af90:	7bbb      	ldrb	r3, [r7, #14]
 800af92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af96:	2b00      	cmp	r3, #0
 800af98:	d004      	beq.n	800afa4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800af9a:	7bbb      	ldrb	r3, [r7, #14]
 800af9c:	4619      	mov	r1, r3
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f001 f947 	bl	800c232 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f000 fcc2 	bl	800b92e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afb0:	689b      	ldr	r3, [r3, #8]
 800afb2:	6839      	ldr	r1, [r7, #0]
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	4798      	blx	r3
 800afb8:	4603      	mov	r3, r0
 800afba:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800afbc:	e004      	b.n	800afc8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800afbe:	6839      	ldr	r1, [r7, #0]
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 fbe9 	bl	800b798 <USBD_CtlError>
              break;
 800afc6:	e000      	b.n	800afca <USBD_StdEPReq+0x154>
              break;
 800afc8:	bf00      	nop
          }
          break;
 800afca:	e0ab      	b.n	800b124 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afd2:	b2db      	uxtb	r3, r3
 800afd4:	2b02      	cmp	r3, #2
 800afd6:	d002      	beq.n	800afde <USBD_StdEPReq+0x168>
 800afd8:	2b03      	cmp	r3, #3
 800afda:	d032      	beq.n	800b042 <USBD_StdEPReq+0x1cc>
 800afdc:	e097      	b.n	800b10e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afde:	7bbb      	ldrb	r3, [r7, #14]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d007      	beq.n	800aff4 <USBD_StdEPReq+0x17e>
 800afe4:	7bbb      	ldrb	r3, [r7, #14]
 800afe6:	2b80      	cmp	r3, #128	; 0x80
 800afe8:	d004      	beq.n	800aff4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800afea:	6839      	ldr	r1, [r7, #0]
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f000 fbd3 	bl	800b798 <USBD_CtlError>
                break;
 800aff2:	e091      	b.n	800b118 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aff4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	da0b      	bge.n	800b014 <USBD_StdEPReq+0x19e>
 800affc:	7bbb      	ldrb	r3, [r7, #14]
 800affe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b002:	4613      	mov	r3, r2
 800b004:	009b      	lsls	r3, r3, #2
 800b006:	4413      	add	r3, r2
 800b008:	009b      	lsls	r3, r3, #2
 800b00a:	3310      	adds	r3, #16
 800b00c:	687a      	ldr	r2, [r7, #4]
 800b00e:	4413      	add	r3, r2
 800b010:	3304      	adds	r3, #4
 800b012:	e00b      	b.n	800b02c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b014:	7bbb      	ldrb	r3, [r7, #14]
 800b016:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b01a:	4613      	mov	r3, r2
 800b01c:	009b      	lsls	r3, r3, #2
 800b01e:	4413      	add	r3, r2
 800b020:	009b      	lsls	r3, r3, #2
 800b022:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b026:	687a      	ldr	r2, [r7, #4]
 800b028:	4413      	add	r3, r2
 800b02a:	3304      	adds	r3, #4
 800b02c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	2200      	movs	r2, #0
 800b032:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	2202      	movs	r2, #2
 800b038:	4619      	mov	r1, r3
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 fc1d 	bl	800b87a <USBD_CtlSendData>
              break;
 800b040:	e06a      	b.n	800b118 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b042:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b046:	2b00      	cmp	r3, #0
 800b048:	da11      	bge.n	800b06e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b04a:	7bbb      	ldrb	r3, [r7, #14]
 800b04c:	f003 020f 	and.w	r2, r3, #15
 800b050:	6879      	ldr	r1, [r7, #4]
 800b052:	4613      	mov	r3, r2
 800b054:	009b      	lsls	r3, r3, #2
 800b056:	4413      	add	r3, r2
 800b058:	009b      	lsls	r3, r3, #2
 800b05a:	440b      	add	r3, r1
 800b05c:	3324      	adds	r3, #36	; 0x24
 800b05e:	881b      	ldrh	r3, [r3, #0]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d117      	bne.n	800b094 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b064:	6839      	ldr	r1, [r7, #0]
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 fb96 	bl	800b798 <USBD_CtlError>
                  break;
 800b06c:	e054      	b.n	800b118 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b06e:	7bbb      	ldrb	r3, [r7, #14]
 800b070:	f003 020f 	and.w	r2, r3, #15
 800b074:	6879      	ldr	r1, [r7, #4]
 800b076:	4613      	mov	r3, r2
 800b078:	009b      	lsls	r3, r3, #2
 800b07a:	4413      	add	r3, r2
 800b07c:	009b      	lsls	r3, r3, #2
 800b07e:	440b      	add	r3, r1
 800b080:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b084:	881b      	ldrh	r3, [r3, #0]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d104      	bne.n	800b094 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b08a:	6839      	ldr	r1, [r7, #0]
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 fb83 	bl	800b798 <USBD_CtlError>
                  break;
 800b092:	e041      	b.n	800b118 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b094:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	da0b      	bge.n	800b0b4 <USBD_StdEPReq+0x23e>
 800b09c:	7bbb      	ldrb	r3, [r7, #14]
 800b09e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b0a2:	4613      	mov	r3, r2
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	4413      	add	r3, r2
 800b0a8:	009b      	lsls	r3, r3, #2
 800b0aa:	3310      	adds	r3, #16
 800b0ac:	687a      	ldr	r2, [r7, #4]
 800b0ae:	4413      	add	r3, r2
 800b0b0:	3304      	adds	r3, #4
 800b0b2:	e00b      	b.n	800b0cc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b0b4:	7bbb      	ldrb	r3, [r7, #14]
 800b0b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0ba:	4613      	mov	r3, r2
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	4413      	add	r3, r2
 800b0c0:	009b      	lsls	r3, r3, #2
 800b0c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b0c6:	687a      	ldr	r2, [r7, #4]
 800b0c8:	4413      	add	r3, r2
 800b0ca:	3304      	adds	r3, #4
 800b0cc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b0ce:	7bbb      	ldrb	r3, [r7, #14]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d002      	beq.n	800b0da <USBD_StdEPReq+0x264>
 800b0d4:	7bbb      	ldrb	r3, [r7, #14]
 800b0d6:	2b80      	cmp	r3, #128	; 0x80
 800b0d8:	d103      	bne.n	800b0e2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	601a      	str	r2, [r3, #0]
 800b0e0:	e00e      	b.n	800b100 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b0e2:	7bbb      	ldrb	r3, [r7, #14]
 800b0e4:	4619      	mov	r1, r3
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f001 f8c2 	bl	800c270 <USBD_LL_IsStallEP>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d003      	beq.n	800b0fa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	601a      	str	r2, [r3, #0]
 800b0f8:	e002      	b.n	800b100 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	2202      	movs	r2, #2
 800b104:	4619      	mov	r1, r3
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 fbb7 	bl	800b87a <USBD_CtlSendData>
              break;
 800b10c:	e004      	b.n	800b118 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b10e:	6839      	ldr	r1, [r7, #0]
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f000 fb41 	bl	800b798 <USBD_CtlError>
              break;
 800b116:	bf00      	nop
          }
          break;
 800b118:	e004      	b.n	800b124 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b11a:	6839      	ldr	r1, [r7, #0]
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f000 fb3b 	bl	800b798 <USBD_CtlError>
          break;
 800b122:	bf00      	nop
      }
      break;
 800b124:	e004      	b.n	800b130 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b126:	6839      	ldr	r1, [r7, #0]
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f000 fb35 	bl	800b798 <USBD_CtlError>
      break;
 800b12e:	bf00      	nop
  }

  return ret;
 800b130:	7bfb      	ldrb	r3, [r7, #15]
}
 800b132:	4618      	mov	r0, r3
 800b134:	3710      	adds	r7, #16
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}
	...

0800b13c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b084      	sub	sp, #16
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b146:	2300      	movs	r3, #0
 800b148:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b14a:	2300      	movs	r3, #0
 800b14c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b14e:	2300      	movs	r3, #0
 800b150:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	885b      	ldrh	r3, [r3, #2]
 800b156:	0a1b      	lsrs	r3, r3, #8
 800b158:	b29b      	uxth	r3, r3
 800b15a:	3b01      	subs	r3, #1
 800b15c:	2b06      	cmp	r3, #6
 800b15e:	f200 8128 	bhi.w	800b3b2 <USBD_GetDescriptor+0x276>
 800b162:	a201      	add	r2, pc, #4	; (adr r2, 800b168 <USBD_GetDescriptor+0x2c>)
 800b164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b168:	0800b185 	.word	0x0800b185
 800b16c:	0800b19d 	.word	0x0800b19d
 800b170:	0800b1dd 	.word	0x0800b1dd
 800b174:	0800b3b3 	.word	0x0800b3b3
 800b178:	0800b3b3 	.word	0x0800b3b3
 800b17c:	0800b353 	.word	0x0800b353
 800b180:	0800b37f 	.word	0x0800b37f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	687a      	ldr	r2, [r7, #4]
 800b18e:	7c12      	ldrb	r2, [r2, #16]
 800b190:	f107 0108 	add.w	r1, r7, #8
 800b194:	4610      	mov	r0, r2
 800b196:	4798      	blx	r3
 800b198:	60f8      	str	r0, [r7, #12]
      break;
 800b19a:	e112      	b.n	800b3c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	7c1b      	ldrb	r3, [r3, #16]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d10d      	bne.n	800b1c0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1ac:	f107 0208 	add.w	r2, r7, #8
 800b1b0:	4610      	mov	r0, r2
 800b1b2:	4798      	blx	r3
 800b1b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	2202      	movs	r2, #2
 800b1bc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b1be:	e100      	b.n	800b3c2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c8:	f107 0208 	add.w	r2, r7, #8
 800b1cc:	4610      	mov	r0, r2
 800b1ce:	4798      	blx	r3
 800b1d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	3301      	adds	r3, #1
 800b1d6:	2202      	movs	r2, #2
 800b1d8:	701a      	strb	r2, [r3, #0]
      break;
 800b1da:	e0f2      	b.n	800b3c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	885b      	ldrh	r3, [r3, #2]
 800b1e0:	b2db      	uxtb	r3, r3
 800b1e2:	2b05      	cmp	r3, #5
 800b1e4:	f200 80ac 	bhi.w	800b340 <USBD_GetDescriptor+0x204>
 800b1e8:	a201      	add	r2, pc, #4	; (adr r2, 800b1f0 <USBD_GetDescriptor+0xb4>)
 800b1ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ee:	bf00      	nop
 800b1f0:	0800b209 	.word	0x0800b209
 800b1f4:	0800b23d 	.word	0x0800b23d
 800b1f8:	0800b271 	.word	0x0800b271
 800b1fc:	0800b2a5 	.word	0x0800b2a5
 800b200:	0800b2d9 	.word	0x0800b2d9
 800b204:	0800b30d 	.word	0x0800b30d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d00b      	beq.n	800b22c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	687a      	ldr	r2, [r7, #4]
 800b21e:	7c12      	ldrb	r2, [r2, #16]
 800b220:	f107 0108 	add.w	r1, r7, #8
 800b224:	4610      	mov	r0, r2
 800b226:	4798      	blx	r3
 800b228:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b22a:	e091      	b.n	800b350 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b22c:	6839      	ldr	r1, [r7, #0]
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f000 fab2 	bl	800b798 <USBD_CtlError>
            err++;
 800b234:	7afb      	ldrb	r3, [r7, #11]
 800b236:	3301      	adds	r3, #1
 800b238:	72fb      	strb	r3, [r7, #11]
          break;
 800b23a:	e089      	b.n	800b350 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b242:	689b      	ldr	r3, [r3, #8]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d00b      	beq.n	800b260 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b24e:	689b      	ldr	r3, [r3, #8]
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	7c12      	ldrb	r2, [r2, #16]
 800b254:	f107 0108 	add.w	r1, r7, #8
 800b258:	4610      	mov	r0, r2
 800b25a:	4798      	blx	r3
 800b25c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b25e:	e077      	b.n	800b350 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b260:	6839      	ldr	r1, [r7, #0]
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 fa98 	bl	800b798 <USBD_CtlError>
            err++;
 800b268:	7afb      	ldrb	r3, [r7, #11]
 800b26a:	3301      	adds	r3, #1
 800b26c:	72fb      	strb	r3, [r7, #11]
          break;
 800b26e:	e06f      	b.n	800b350 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b276:	68db      	ldr	r3, [r3, #12]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d00b      	beq.n	800b294 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b282:	68db      	ldr	r3, [r3, #12]
 800b284:	687a      	ldr	r2, [r7, #4]
 800b286:	7c12      	ldrb	r2, [r2, #16]
 800b288:	f107 0108 	add.w	r1, r7, #8
 800b28c:	4610      	mov	r0, r2
 800b28e:	4798      	blx	r3
 800b290:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b292:	e05d      	b.n	800b350 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b294:	6839      	ldr	r1, [r7, #0]
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 fa7e 	bl	800b798 <USBD_CtlError>
            err++;
 800b29c:	7afb      	ldrb	r3, [r7, #11]
 800b29e:	3301      	adds	r3, #1
 800b2a0:	72fb      	strb	r3, [r7, #11]
          break;
 800b2a2:	e055      	b.n	800b350 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2aa:	691b      	ldr	r3, [r3, #16]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d00b      	beq.n	800b2c8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2b6:	691b      	ldr	r3, [r3, #16]
 800b2b8:	687a      	ldr	r2, [r7, #4]
 800b2ba:	7c12      	ldrb	r2, [r2, #16]
 800b2bc:	f107 0108 	add.w	r1, r7, #8
 800b2c0:	4610      	mov	r0, r2
 800b2c2:	4798      	blx	r3
 800b2c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2c6:	e043      	b.n	800b350 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b2c8:	6839      	ldr	r1, [r7, #0]
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f000 fa64 	bl	800b798 <USBD_CtlError>
            err++;
 800b2d0:	7afb      	ldrb	r3, [r7, #11]
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	72fb      	strb	r3, [r7, #11]
          break;
 800b2d6:	e03b      	b.n	800b350 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2de:	695b      	ldr	r3, [r3, #20]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d00b      	beq.n	800b2fc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2ea:	695b      	ldr	r3, [r3, #20]
 800b2ec:	687a      	ldr	r2, [r7, #4]
 800b2ee:	7c12      	ldrb	r2, [r2, #16]
 800b2f0:	f107 0108 	add.w	r1, r7, #8
 800b2f4:	4610      	mov	r0, r2
 800b2f6:	4798      	blx	r3
 800b2f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2fa:	e029      	b.n	800b350 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b2fc:	6839      	ldr	r1, [r7, #0]
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f000 fa4a 	bl	800b798 <USBD_CtlError>
            err++;
 800b304:	7afb      	ldrb	r3, [r7, #11]
 800b306:	3301      	adds	r3, #1
 800b308:	72fb      	strb	r3, [r7, #11]
          break;
 800b30a:	e021      	b.n	800b350 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b312:	699b      	ldr	r3, [r3, #24]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d00b      	beq.n	800b330 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b31e:	699b      	ldr	r3, [r3, #24]
 800b320:	687a      	ldr	r2, [r7, #4]
 800b322:	7c12      	ldrb	r2, [r2, #16]
 800b324:	f107 0108 	add.w	r1, r7, #8
 800b328:	4610      	mov	r0, r2
 800b32a:	4798      	blx	r3
 800b32c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b32e:	e00f      	b.n	800b350 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b330:	6839      	ldr	r1, [r7, #0]
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f000 fa30 	bl	800b798 <USBD_CtlError>
            err++;
 800b338:	7afb      	ldrb	r3, [r7, #11]
 800b33a:	3301      	adds	r3, #1
 800b33c:	72fb      	strb	r3, [r7, #11]
          break;
 800b33e:	e007      	b.n	800b350 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b340:	6839      	ldr	r1, [r7, #0]
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f000 fa28 	bl	800b798 <USBD_CtlError>
          err++;
 800b348:	7afb      	ldrb	r3, [r7, #11]
 800b34a:	3301      	adds	r3, #1
 800b34c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b34e:	bf00      	nop
      }
      break;
 800b350:	e037      	b.n	800b3c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	7c1b      	ldrb	r3, [r3, #16]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d109      	bne.n	800b36e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b362:	f107 0208 	add.w	r2, r7, #8
 800b366:	4610      	mov	r0, r2
 800b368:	4798      	blx	r3
 800b36a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b36c:	e029      	b.n	800b3c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b36e:	6839      	ldr	r1, [r7, #0]
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f000 fa11 	bl	800b798 <USBD_CtlError>
        err++;
 800b376:	7afb      	ldrb	r3, [r7, #11]
 800b378:	3301      	adds	r3, #1
 800b37a:	72fb      	strb	r3, [r7, #11]
      break;
 800b37c:	e021      	b.n	800b3c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	7c1b      	ldrb	r3, [r3, #16]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d10d      	bne.n	800b3a2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b38c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b38e:	f107 0208 	add.w	r2, r7, #8
 800b392:	4610      	mov	r0, r2
 800b394:	4798      	blx	r3
 800b396:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	3301      	adds	r3, #1
 800b39c:	2207      	movs	r2, #7
 800b39e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b3a0:	e00f      	b.n	800b3c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b3a2:	6839      	ldr	r1, [r7, #0]
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f000 f9f7 	bl	800b798 <USBD_CtlError>
        err++;
 800b3aa:	7afb      	ldrb	r3, [r7, #11]
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	72fb      	strb	r3, [r7, #11]
      break;
 800b3b0:	e007      	b.n	800b3c2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b3b2:	6839      	ldr	r1, [r7, #0]
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f000 f9ef 	bl	800b798 <USBD_CtlError>
      err++;
 800b3ba:	7afb      	ldrb	r3, [r7, #11]
 800b3bc:	3301      	adds	r3, #1
 800b3be:	72fb      	strb	r3, [r7, #11]
      break;
 800b3c0:	bf00      	nop
  }

  if (err != 0U)
 800b3c2:	7afb      	ldrb	r3, [r7, #11]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d11e      	bne.n	800b406 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	88db      	ldrh	r3, [r3, #6]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d016      	beq.n	800b3fe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b3d0:	893b      	ldrh	r3, [r7, #8]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d00e      	beq.n	800b3f4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	88da      	ldrh	r2, [r3, #6]
 800b3da:	893b      	ldrh	r3, [r7, #8]
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	bf28      	it	cs
 800b3e0:	4613      	movcs	r3, r2
 800b3e2:	b29b      	uxth	r3, r3
 800b3e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b3e6:	893b      	ldrh	r3, [r7, #8]
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	68f9      	ldr	r1, [r7, #12]
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f000 fa44 	bl	800b87a <USBD_CtlSendData>
 800b3f2:	e009      	b.n	800b408 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b3f4:	6839      	ldr	r1, [r7, #0]
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f000 f9ce 	bl	800b798 <USBD_CtlError>
 800b3fc:	e004      	b.n	800b408 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f000 fa95 	bl	800b92e <USBD_CtlSendStatus>
 800b404:	e000      	b.n	800b408 <USBD_GetDescriptor+0x2cc>
    return;
 800b406:	bf00      	nop
  }
}
 800b408:	3710      	adds	r7, #16
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	bf00      	nop

0800b410 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b084      	sub	sp, #16
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	889b      	ldrh	r3, [r3, #4]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d131      	bne.n	800b486 <USBD_SetAddress+0x76>
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	88db      	ldrh	r3, [r3, #6]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d12d      	bne.n	800b486 <USBD_SetAddress+0x76>
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	885b      	ldrh	r3, [r3, #2]
 800b42e:	2b7f      	cmp	r3, #127	; 0x7f
 800b430:	d829      	bhi.n	800b486 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	885b      	ldrh	r3, [r3, #2]
 800b436:	b2db      	uxtb	r3, r3
 800b438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b43c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b444:	b2db      	uxtb	r3, r3
 800b446:	2b03      	cmp	r3, #3
 800b448:	d104      	bne.n	800b454 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b44a:	6839      	ldr	r1, [r7, #0]
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f000 f9a3 	bl	800b798 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b452:	e01d      	b.n	800b490 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	7bfa      	ldrb	r2, [r7, #15]
 800b458:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b45c:	7bfb      	ldrb	r3, [r7, #15]
 800b45e:	4619      	mov	r1, r3
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f000 ff31 	bl	800c2c8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f000 fa61 	bl	800b92e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b46c:	7bfb      	ldrb	r3, [r7, #15]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d004      	beq.n	800b47c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2202      	movs	r2, #2
 800b476:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b47a:	e009      	b.n	800b490 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2201      	movs	r2, #1
 800b480:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b484:	e004      	b.n	800b490 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b486:	6839      	ldr	r1, [r7, #0]
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f000 f985 	bl	800b798 <USBD_CtlError>
  }
}
 800b48e:	bf00      	nop
 800b490:	bf00      	nop
 800b492:	3710      	adds	r7, #16
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}

0800b498 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b084      	sub	sp, #16
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	885b      	ldrh	r3, [r3, #2]
 800b4aa:	b2da      	uxtb	r2, r3
 800b4ac:	4b4c      	ldr	r3, [pc, #304]	; (800b5e0 <USBD_SetConfig+0x148>)
 800b4ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b4b0:	4b4b      	ldr	r3, [pc, #300]	; (800b5e0 <USBD_SetConfig+0x148>)
 800b4b2:	781b      	ldrb	r3, [r3, #0]
 800b4b4:	2b01      	cmp	r3, #1
 800b4b6:	d905      	bls.n	800b4c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b4b8:	6839      	ldr	r1, [r7, #0]
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f000 f96c 	bl	800b798 <USBD_CtlError>
    return USBD_FAIL;
 800b4c0:	2303      	movs	r3, #3
 800b4c2:	e088      	b.n	800b5d6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4ca:	b2db      	uxtb	r3, r3
 800b4cc:	2b02      	cmp	r3, #2
 800b4ce:	d002      	beq.n	800b4d6 <USBD_SetConfig+0x3e>
 800b4d0:	2b03      	cmp	r3, #3
 800b4d2:	d025      	beq.n	800b520 <USBD_SetConfig+0x88>
 800b4d4:	e071      	b.n	800b5ba <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b4d6:	4b42      	ldr	r3, [pc, #264]	; (800b5e0 <USBD_SetConfig+0x148>)
 800b4d8:	781b      	ldrb	r3, [r3, #0]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d01c      	beq.n	800b518 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b4de:	4b40      	ldr	r3, [pc, #256]	; (800b5e0 <USBD_SetConfig+0x148>)
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b4e8:	4b3d      	ldr	r3, [pc, #244]	; (800b5e0 <USBD_SetConfig+0x148>)
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f7ff f948 	bl	800a784 <USBD_SetClassConfig>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b4f8:	7bfb      	ldrb	r3, [r7, #15]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d004      	beq.n	800b508 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b4fe:	6839      	ldr	r1, [r7, #0]
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f000 f949 	bl	800b798 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b506:	e065      	b.n	800b5d4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f000 fa10 	bl	800b92e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2203      	movs	r2, #3
 800b512:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b516:	e05d      	b.n	800b5d4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f000 fa08 	bl	800b92e <USBD_CtlSendStatus>
      break;
 800b51e:	e059      	b.n	800b5d4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b520:	4b2f      	ldr	r3, [pc, #188]	; (800b5e0 <USBD_SetConfig+0x148>)
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d112      	bne.n	800b54e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2202      	movs	r2, #2
 800b52c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b530:	4b2b      	ldr	r3, [pc, #172]	; (800b5e0 <USBD_SetConfig+0x148>)
 800b532:	781b      	ldrb	r3, [r3, #0]
 800b534:	461a      	mov	r2, r3
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b53a:	4b29      	ldr	r3, [pc, #164]	; (800b5e0 <USBD_SetConfig+0x148>)
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	4619      	mov	r1, r3
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f7ff f93b 	bl	800a7bc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f000 f9f1 	bl	800b92e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b54c:	e042      	b.n	800b5d4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b54e:	4b24      	ldr	r3, [pc, #144]	; (800b5e0 <USBD_SetConfig+0x148>)
 800b550:	781b      	ldrb	r3, [r3, #0]
 800b552:	461a      	mov	r2, r3
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	685b      	ldr	r3, [r3, #4]
 800b558:	429a      	cmp	r2, r3
 800b55a:	d02a      	beq.n	800b5b2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	685b      	ldr	r3, [r3, #4]
 800b560:	b2db      	uxtb	r3, r3
 800b562:	4619      	mov	r1, r3
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f7ff f929 	bl	800a7bc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b56a:	4b1d      	ldr	r3, [pc, #116]	; (800b5e0 <USBD_SetConfig+0x148>)
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	461a      	mov	r2, r3
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b574:	4b1a      	ldr	r3, [pc, #104]	; (800b5e0 <USBD_SetConfig+0x148>)
 800b576:	781b      	ldrb	r3, [r3, #0]
 800b578:	4619      	mov	r1, r3
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f7ff f902 	bl	800a784 <USBD_SetClassConfig>
 800b580:	4603      	mov	r3, r0
 800b582:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b584:	7bfb      	ldrb	r3, [r7, #15]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d00f      	beq.n	800b5aa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b58a:	6839      	ldr	r1, [r7, #0]
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f000 f903 	bl	800b798 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	b2db      	uxtb	r3, r3
 800b598:	4619      	mov	r1, r3
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f7ff f90e 	bl	800a7bc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2202      	movs	r2, #2
 800b5a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b5a8:	e014      	b.n	800b5d4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f000 f9bf 	bl	800b92e <USBD_CtlSendStatus>
      break;
 800b5b0:	e010      	b.n	800b5d4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f000 f9bb 	bl	800b92e <USBD_CtlSendStatus>
      break;
 800b5b8:	e00c      	b.n	800b5d4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b5ba:	6839      	ldr	r1, [r7, #0]
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f000 f8eb 	bl	800b798 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b5c2:	4b07      	ldr	r3, [pc, #28]	; (800b5e0 <USBD_SetConfig+0x148>)
 800b5c4:	781b      	ldrb	r3, [r3, #0]
 800b5c6:	4619      	mov	r1, r3
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f7ff f8f7 	bl	800a7bc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b5ce:	2303      	movs	r3, #3
 800b5d0:	73fb      	strb	r3, [r7, #15]
      break;
 800b5d2:	bf00      	nop
  }

  return ret;
 800b5d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3710      	adds	r7, #16
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
 800b5de:	bf00      	nop
 800b5e0:	20000395 	.word	0x20000395

0800b5e4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b082      	sub	sp, #8
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	88db      	ldrh	r3, [r3, #6]
 800b5f2:	2b01      	cmp	r3, #1
 800b5f4:	d004      	beq.n	800b600 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b5f6:	6839      	ldr	r1, [r7, #0]
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f000 f8cd 	bl	800b798 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b5fe:	e023      	b.n	800b648 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b606:	b2db      	uxtb	r3, r3
 800b608:	2b02      	cmp	r3, #2
 800b60a:	dc02      	bgt.n	800b612 <USBD_GetConfig+0x2e>
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	dc03      	bgt.n	800b618 <USBD_GetConfig+0x34>
 800b610:	e015      	b.n	800b63e <USBD_GetConfig+0x5a>
 800b612:	2b03      	cmp	r3, #3
 800b614:	d00b      	beq.n	800b62e <USBD_GetConfig+0x4a>
 800b616:	e012      	b.n	800b63e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2200      	movs	r2, #0
 800b61c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	3308      	adds	r3, #8
 800b622:	2201      	movs	r2, #1
 800b624:	4619      	mov	r1, r3
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f000 f927 	bl	800b87a <USBD_CtlSendData>
        break;
 800b62c:	e00c      	b.n	800b648 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	3304      	adds	r3, #4
 800b632:	2201      	movs	r2, #1
 800b634:	4619      	mov	r1, r3
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 f91f 	bl	800b87a <USBD_CtlSendData>
        break;
 800b63c:	e004      	b.n	800b648 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b63e:	6839      	ldr	r1, [r7, #0]
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f000 f8a9 	bl	800b798 <USBD_CtlError>
        break;
 800b646:	bf00      	nop
}
 800b648:	bf00      	nop
 800b64a:	3708      	adds	r7, #8
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b082      	sub	sp, #8
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b660:	b2db      	uxtb	r3, r3
 800b662:	3b01      	subs	r3, #1
 800b664:	2b02      	cmp	r3, #2
 800b666:	d81e      	bhi.n	800b6a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	88db      	ldrh	r3, [r3, #6]
 800b66c:	2b02      	cmp	r3, #2
 800b66e:	d004      	beq.n	800b67a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b670:	6839      	ldr	r1, [r7, #0]
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 f890 	bl	800b798 <USBD_CtlError>
        break;
 800b678:	e01a      	b.n	800b6b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2201      	movs	r2, #1
 800b67e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b686:	2b00      	cmp	r3, #0
 800b688:	d005      	beq.n	800b696 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	68db      	ldr	r3, [r3, #12]
 800b68e:	f043 0202 	orr.w	r2, r3, #2
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	330c      	adds	r3, #12
 800b69a:	2202      	movs	r2, #2
 800b69c:	4619      	mov	r1, r3
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f000 f8eb 	bl	800b87a <USBD_CtlSendData>
      break;
 800b6a4:	e004      	b.n	800b6b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b6a6:	6839      	ldr	r1, [r7, #0]
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f000 f875 	bl	800b798 <USBD_CtlError>
      break;
 800b6ae:	bf00      	nop
  }
}
 800b6b0:	bf00      	nop
 800b6b2:	3708      	adds	r7, #8
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}

0800b6b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b082      	sub	sp, #8
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	885b      	ldrh	r3, [r3, #2]
 800b6c6:	2b01      	cmp	r3, #1
 800b6c8:	d106      	bne.n	800b6d8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 f92b 	bl	800b92e <USBD_CtlSendStatus>
  }
}
 800b6d8:	bf00      	nop
 800b6da:	3708      	adds	r7, #8
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}

0800b6e0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b082      	sub	sp, #8
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6f0:	b2db      	uxtb	r3, r3
 800b6f2:	3b01      	subs	r3, #1
 800b6f4:	2b02      	cmp	r3, #2
 800b6f6:	d80b      	bhi.n	800b710 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	885b      	ldrh	r3, [r3, #2]
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	d10c      	bne.n	800b71a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2200      	movs	r2, #0
 800b704:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f000 f910 	bl	800b92e <USBD_CtlSendStatus>
      }
      break;
 800b70e:	e004      	b.n	800b71a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b710:	6839      	ldr	r1, [r7, #0]
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 f840 	bl	800b798 <USBD_CtlError>
      break;
 800b718:	e000      	b.n	800b71c <USBD_ClrFeature+0x3c>
      break;
 800b71a:	bf00      	nop
  }
}
 800b71c:	bf00      	nop
 800b71e:	3708      	adds	r7, #8
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	781a      	ldrb	r2, [r3, #0]
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	3301      	adds	r3, #1
 800b73e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	781a      	ldrb	r2, [r3, #0]
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	3301      	adds	r3, #1
 800b74c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b74e:	68f8      	ldr	r0, [r7, #12]
 800b750:	f7ff fabb 	bl	800acca <SWAPBYTE>
 800b754:	4603      	mov	r3, r0
 800b756:	461a      	mov	r2, r3
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	3301      	adds	r3, #1
 800b760:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	3301      	adds	r3, #1
 800b766:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b768:	68f8      	ldr	r0, [r7, #12]
 800b76a:	f7ff faae 	bl	800acca <SWAPBYTE>
 800b76e:	4603      	mov	r3, r0
 800b770:	461a      	mov	r2, r3
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	3301      	adds	r3, #1
 800b77a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	3301      	adds	r3, #1
 800b780:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b782:	68f8      	ldr	r0, [r7, #12]
 800b784:	f7ff faa1 	bl	800acca <SWAPBYTE>
 800b788:	4603      	mov	r3, r0
 800b78a:	461a      	mov	r2, r3
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	80da      	strh	r2, [r3, #6]
}
 800b790:	bf00      	nop
 800b792:	3710      	adds	r7, #16
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b082      	sub	sp, #8
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
 800b7a0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b7a2:	2180      	movs	r1, #128	; 0x80
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f000 fd25 	bl	800c1f4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b7aa:	2100      	movs	r1, #0
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f000 fd21 	bl	800c1f4 <USBD_LL_StallEP>
}
 800b7b2:	bf00      	nop
 800b7b4:	3708      	adds	r7, #8
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}

0800b7ba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b7ba:	b580      	push	{r7, lr}
 800b7bc:	b086      	sub	sp, #24
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	60f8      	str	r0, [r7, #12]
 800b7c2:	60b9      	str	r1, [r7, #8]
 800b7c4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d036      	beq.n	800b83e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b7d4:	6938      	ldr	r0, [r7, #16]
 800b7d6:	f000 f836 	bl	800b846 <USBD_GetLen>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	3301      	adds	r3, #1
 800b7de:	b29b      	uxth	r3, r3
 800b7e0:	005b      	lsls	r3, r3, #1
 800b7e2:	b29a      	uxth	r2, r3
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b7e8:	7dfb      	ldrb	r3, [r7, #23]
 800b7ea:	68ba      	ldr	r2, [r7, #8]
 800b7ec:	4413      	add	r3, r2
 800b7ee:	687a      	ldr	r2, [r7, #4]
 800b7f0:	7812      	ldrb	r2, [r2, #0]
 800b7f2:	701a      	strb	r2, [r3, #0]
  idx++;
 800b7f4:	7dfb      	ldrb	r3, [r7, #23]
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b7fa:	7dfb      	ldrb	r3, [r7, #23]
 800b7fc:	68ba      	ldr	r2, [r7, #8]
 800b7fe:	4413      	add	r3, r2
 800b800:	2203      	movs	r2, #3
 800b802:	701a      	strb	r2, [r3, #0]
  idx++;
 800b804:	7dfb      	ldrb	r3, [r7, #23]
 800b806:	3301      	adds	r3, #1
 800b808:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b80a:	e013      	b.n	800b834 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b80c:	7dfb      	ldrb	r3, [r7, #23]
 800b80e:	68ba      	ldr	r2, [r7, #8]
 800b810:	4413      	add	r3, r2
 800b812:	693a      	ldr	r2, [r7, #16]
 800b814:	7812      	ldrb	r2, [r2, #0]
 800b816:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	3301      	adds	r3, #1
 800b81c:	613b      	str	r3, [r7, #16]
    idx++;
 800b81e:	7dfb      	ldrb	r3, [r7, #23]
 800b820:	3301      	adds	r3, #1
 800b822:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b824:	7dfb      	ldrb	r3, [r7, #23]
 800b826:	68ba      	ldr	r2, [r7, #8]
 800b828:	4413      	add	r3, r2
 800b82a:	2200      	movs	r2, #0
 800b82c:	701a      	strb	r2, [r3, #0]
    idx++;
 800b82e:	7dfb      	ldrb	r3, [r7, #23]
 800b830:	3301      	adds	r3, #1
 800b832:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d1e7      	bne.n	800b80c <USBD_GetString+0x52>
 800b83c:	e000      	b.n	800b840 <USBD_GetString+0x86>
    return;
 800b83e:	bf00      	nop
  }
}
 800b840:	3718      	adds	r7, #24
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}

0800b846 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b846:	b480      	push	{r7}
 800b848:	b085      	sub	sp, #20
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b84e:	2300      	movs	r3, #0
 800b850:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b856:	e005      	b.n	800b864 <USBD_GetLen+0x1e>
  {
    len++;
 800b858:	7bfb      	ldrb	r3, [r7, #15]
 800b85a:	3301      	adds	r3, #1
 800b85c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	3301      	adds	r3, #1
 800b862:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	781b      	ldrb	r3, [r3, #0]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d1f5      	bne.n	800b858 <USBD_GetLen+0x12>
  }

  return len;
 800b86c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3714      	adds	r7, #20
 800b872:	46bd      	mov	sp, r7
 800b874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b878:	4770      	bx	lr

0800b87a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b87a:	b580      	push	{r7, lr}
 800b87c:	b084      	sub	sp, #16
 800b87e:	af00      	add	r7, sp, #0
 800b880:	60f8      	str	r0, [r7, #12]
 800b882:	60b9      	str	r1, [r7, #8]
 800b884:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	2202      	movs	r2, #2
 800b88a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	687a      	ldr	r2, [r7, #4]
 800b892:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	687a      	ldr	r2, [r7, #4]
 800b898:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	68ba      	ldr	r2, [r7, #8]
 800b89e:	2100      	movs	r1, #0
 800b8a0:	68f8      	ldr	r0, [r7, #12]
 800b8a2:	f000 fd30 	bl	800c306 <USBD_LL_Transmit>

  return USBD_OK;
 800b8a6:	2300      	movs	r3, #0
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3710      	adds	r7, #16
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}

0800b8b0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b084      	sub	sp, #16
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	60f8      	str	r0, [r7, #12]
 800b8b8:	60b9      	str	r1, [r7, #8]
 800b8ba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	68ba      	ldr	r2, [r7, #8]
 800b8c0:	2100      	movs	r1, #0
 800b8c2:	68f8      	ldr	r0, [r7, #12]
 800b8c4:	f000 fd1f 	bl	800c306 <USBD_LL_Transmit>

  return USBD_OK;
 800b8c8:	2300      	movs	r3, #0
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3710      	adds	r7, #16
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}

0800b8d2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b8d2:	b580      	push	{r7, lr}
 800b8d4:	b084      	sub	sp, #16
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	60f8      	str	r0, [r7, #12]
 800b8da:	60b9      	str	r1, [r7, #8]
 800b8dc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2203      	movs	r2, #3
 800b8e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	687a      	ldr	r2, [r7, #4]
 800b8ea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	68ba      	ldr	r2, [r7, #8]
 800b8fa:	2100      	movs	r1, #0
 800b8fc:	68f8      	ldr	r0, [r7, #12]
 800b8fe:	f000 fd23 	bl	800c348 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b902:	2300      	movs	r3, #0
}
 800b904:	4618      	mov	r0, r3
 800b906:	3710      	adds	r7, #16
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}

0800b90c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b084      	sub	sp, #16
 800b910:	af00      	add	r7, sp, #0
 800b912:	60f8      	str	r0, [r7, #12]
 800b914:	60b9      	str	r1, [r7, #8]
 800b916:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	68ba      	ldr	r2, [r7, #8]
 800b91c:	2100      	movs	r1, #0
 800b91e:	68f8      	ldr	r0, [r7, #12]
 800b920:	f000 fd12 	bl	800c348 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b924:	2300      	movs	r3, #0
}
 800b926:	4618      	mov	r0, r3
 800b928:	3710      	adds	r7, #16
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}

0800b92e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b92e:	b580      	push	{r7, lr}
 800b930:	b082      	sub	sp, #8
 800b932:	af00      	add	r7, sp, #0
 800b934:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2204      	movs	r2, #4
 800b93a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b93e:	2300      	movs	r3, #0
 800b940:	2200      	movs	r2, #0
 800b942:	2100      	movs	r1, #0
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f000 fcde 	bl	800c306 <USBD_LL_Transmit>

  return USBD_OK;
 800b94a:	2300      	movs	r3, #0
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3708      	adds	r7, #8
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b082      	sub	sp, #8
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2205      	movs	r2, #5
 800b960:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b964:	2300      	movs	r3, #0
 800b966:	2200      	movs	r2, #0
 800b968:	2100      	movs	r1, #0
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 fcec 	bl	800c348 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b970:	2300      	movs	r3, #0
}
 800b972:	4618      	mov	r0, r3
 800b974:	3708      	adds	r7, #8
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}
	...

0800b97c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b087      	sub	sp, #28
 800b980:	af00      	add	r7, sp, #0
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	60b9      	str	r1, [r7, #8]
 800b986:	4613      	mov	r3, r2
 800b988:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b98a:	2301      	movs	r3, #1
 800b98c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b98e:	2300      	movs	r3, #0
 800b990:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b992:	4b1f      	ldr	r3, [pc, #124]	; (800ba10 <FATFS_LinkDriverEx+0x94>)
 800b994:	7a5b      	ldrb	r3, [r3, #9]
 800b996:	b2db      	uxtb	r3, r3
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d131      	bne.n	800ba00 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b99c:	4b1c      	ldr	r3, [pc, #112]	; (800ba10 <FATFS_LinkDriverEx+0x94>)
 800b99e:	7a5b      	ldrb	r3, [r3, #9]
 800b9a0:	b2db      	uxtb	r3, r3
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	4b1a      	ldr	r3, [pc, #104]	; (800ba10 <FATFS_LinkDriverEx+0x94>)
 800b9a6:	2100      	movs	r1, #0
 800b9a8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b9aa:	4b19      	ldr	r3, [pc, #100]	; (800ba10 <FATFS_LinkDriverEx+0x94>)
 800b9ac:	7a5b      	ldrb	r3, [r3, #9]
 800b9ae:	b2db      	uxtb	r3, r3
 800b9b0:	4a17      	ldr	r2, [pc, #92]	; (800ba10 <FATFS_LinkDriverEx+0x94>)
 800b9b2:	009b      	lsls	r3, r3, #2
 800b9b4:	4413      	add	r3, r2
 800b9b6:	68fa      	ldr	r2, [r7, #12]
 800b9b8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b9ba:	4b15      	ldr	r3, [pc, #84]	; (800ba10 <FATFS_LinkDriverEx+0x94>)
 800b9bc:	7a5b      	ldrb	r3, [r3, #9]
 800b9be:	b2db      	uxtb	r3, r3
 800b9c0:	461a      	mov	r2, r3
 800b9c2:	4b13      	ldr	r3, [pc, #76]	; (800ba10 <FATFS_LinkDriverEx+0x94>)
 800b9c4:	4413      	add	r3, r2
 800b9c6:	79fa      	ldrb	r2, [r7, #7]
 800b9c8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b9ca:	4b11      	ldr	r3, [pc, #68]	; (800ba10 <FATFS_LinkDriverEx+0x94>)
 800b9cc:	7a5b      	ldrb	r3, [r3, #9]
 800b9ce:	b2db      	uxtb	r3, r3
 800b9d0:	1c5a      	adds	r2, r3, #1
 800b9d2:	b2d1      	uxtb	r1, r2
 800b9d4:	4a0e      	ldr	r2, [pc, #56]	; (800ba10 <FATFS_LinkDriverEx+0x94>)
 800b9d6:	7251      	strb	r1, [r2, #9]
 800b9d8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b9da:	7dbb      	ldrb	r3, [r7, #22]
 800b9dc:	3330      	adds	r3, #48	; 0x30
 800b9de:	b2da      	uxtb	r2, r3
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	3301      	adds	r3, #1
 800b9e8:	223a      	movs	r2, #58	; 0x3a
 800b9ea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	3302      	adds	r3, #2
 800b9f0:	222f      	movs	r2, #47	; 0x2f
 800b9f2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	3303      	adds	r3, #3
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ba00:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	371c      	adds	r7, #28
 800ba06:	46bd      	mov	sp, r7
 800ba08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0c:	4770      	bx	lr
 800ba0e:	bf00      	nop
 800ba10:	20000398 	.word	0x20000398

0800ba14 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b082      	sub	sp, #8
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ba1e:	2200      	movs	r2, #0
 800ba20:	6839      	ldr	r1, [r7, #0]
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f7ff ffaa 	bl	800b97c <FATFS_LinkDriverEx>
 800ba28:	4603      	mov	r3, r0
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3708      	adds	r7, #8
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
	...

0800ba34 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ba38:	2200      	movs	r2, #0
 800ba3a:	4912      	ldr	r1, [pc, #72]	; (800ba84 <MX_USB_DEVICE_Init+0x50>)
 800ba3c:	4812      	ldr	r0, [pc, #72]	; (800ba88 <MX_USB_DEVICE_Init+0x54>)
 800ba3e:	f7fe fe33 	bl	800a6a8 <USBD_Init>
 800ba42:	4603      	mov	r3, r0
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d001      	beq.n	800ba4c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ba48:	f7f6 fc98 	bl	800237c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ba4c:	490f      	ldr	r1, [pc, #60]	; (800ba8c <MX_USB_DEVICE_Init+0x58>)
 800ba4e:	480e      	ldr	r0, [pc, #56]	; (800ba88 <MX_USB_DEVICE_Init+0x54>)
 800ba50:	f7fe fe5a 	bl	800a708 <USBD_RegisterClass>
 800ba54:	4603      	mov	r3, r0
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d001      	beq.n	800ba5e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ba5a:	f7f6 fc8f 	bl	800237c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ba5e:	490c      	ldr	r1, [pc, #48]	; (800ba90 <MX_USB_DEVICE_Init+0x5c>)
 800ba60:	4809      	ldr	r0, [pc, #36]	; (800ba88 <MX_USB_DEVICE_Init+0x54>)
 800ba62:	f7fe fdab 	bl	800a5bc <USBD_CDC_RegisterInterface>
 800ba66:	4603      	mov	r3, r0
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d001      	beq.n	800ba70 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ba6c:	f7f6 fc86 	bl	800237c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ba70:	4805      	ldr	r0, [pc, #20]	; (800ba88 <MX_USB_DEVICE_Init+0x54>)
 800ba72:	f7fe fe70 	bl	800a756 <USBD_Start>
 800ba76:	4603      	mov	r3, r0
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d001      	beq.n	800ba80 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ba7c:	f7f6 fc7e 	bl	800237c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ba80:	bf00      	nop
 800ba82:	bd80      	pop	{r7, pc}
 800ba84:	20000148 	.word	0x20000148
 800ba88:	20001420 	.word	0x20001420
 800ba8c:	20000030 	.word	0x20000030
 800ba90:	20000134 	.word	0x20000134

0800ba94 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ba98:	2200      	movs	r2, #0
 800ba9a:	4905      	ldr	r1, [pc, #20]	; (800bab0 <CDC_Init_FS+0x1c>)
 800ba9c:	4805      	ldr	r0, [pc, #20]	; (800bab4 <CDC_Init_FS+0x20>)
 800ba9e:	f7fe fda2 	bl	800a5e6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800baa2:	4905      	ldr	r1, [pc, #20]	; (800bab8 <CDC_Init_FS+0x24>)
 800baa4:	4803      	ldr	r0, [pc, #12]	; (800bab4 <CDC_Init_FS+0x20>)
 800baa6:	f7fe fdbc 	bl	800a622 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800baaa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800baac:	4618      	mov	r0, r3
 800baae:	bd80      	pop	{r7, pc}
 800bab0:	20001ef0 	.word	0x20001ef0
 800bab4:	20001420 	.word	0x20001420
 800bab8:	200016f0 	.word	0x200016f0

0800babc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800babc:	b480      	push	{r7}
 800babe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bac0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	46bd      	mov	sp, r7
 800bac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baca:	4770      	bx	lr

0800bacc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bacc:	b480      	push	{r7}
 800bace:	b083      	sub	sp, #12
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	4603      	mov	r3, r0
 800bad4:	6039      	str	r1, [r7, #0]
 800bad6:	71fb      	strb	r3, [r7, #7]
 800bad8:	4613      	mov	r3, r2
 800bada:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800badc:	79fb      	ldrb	r3, [r7, #7]
 800bade:	2b23      	cmp	r3, #35	; 0x23
 800bae0:	d84a      	bhi.n	800bb78 <CDC_Control_FS+0xac>
 800bae2:	a201      	add	r2, pc, #4	; (adr r2, 800bae8 <CDC_Control_FS+0x1c>)
 800bae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bae8:	0800bb79 	.word	0x0800bb79
 800baec:	0800bb79 	.word	0x0800bb79
 800baf0:	0800bb79 	.word	0x0800bb79
 800baf4:	0800bb79 	.word	0x0800bb79
 800baf8:	0800bb79 	.word	0x0800bb79
 800bafc:	0800bb79 	.word	0x0800bb79
 800bb00:	0800bb79 	.word	0x0800bb79
 800bb04:	0800bb79 	.word	0x0800bb79
 800bb08:	0800bb79 	.word	0x0800bb79
 800bb0c:	0800bb79 	.word	0x0800bb79
 800bb10:	0800bb79 	.word	0x0800bb79
 800bb14:	0800bb79 	.word	0x0800bb79
 800bb18:	0800bb79 	.word	0x0800bb79
 800bb1c:	0800bb79 	.word	0x0800bb79
 800bb20:	0800bb79 	.word	0x0800bb79
 800bb24:	0800bb79 	.word	0x0800bb79
 800bb28:	0800bb79 	.word	0x0800bb79
 800bb2c:	0800bb79 	.word	0x0800bb79
 800bb30:	0800bb79 	.word	0x0800bb79
 800bb34:	0800bb79 	.word	0x0800bb79
 800bb38:	0800bb79 	.word	0x0800bb79
 800bb3c:	0800bb79 	.word	0x0800bb79
 800bb40:	0800bb79 	.word	0x0800bb79
 800bb44:	0800bb79 	.word	0x0800bb79
 800bb48:	0800bb79 	.word	0x0800bb79
 800bb4c:	0800bb79 	.word	0x0800bb79
 800bb50:	0800bb79 	.word	0x0800bb79
 800bb54:	0800bb79 	.word	0x0800bb79
 800bb58:	0800bb79 	.word	0x0800bb79
 800bb5c:	0800bb79 	.word	0x0800bb79
 800bb60:	0800bb79 	.word	0x0800bb79
 800bb64:	0800bb79 	.word	0x0800bb79
 800bb68:	0800bb79 	.word	0x0800bb79
 800bb6c:	0800bb79 	.word	0x0800bb79
 800bb70:	0800bb79 	.word	0x0800bb79
 800bb74:	0800bb79 	.word	0x0800bb79
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bb78:	bf00      	nop
  }

  return (USBD_OK);
 800bb7a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	370c      	adds	r7, #12
 800bb80:	46bd      	mov	sp, r7
 800bb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb86:	4770      	bx	lr

0800bb88 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b082      	sub	sp, #8
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bb92:	6879      	ldr	r1, [r7, #4]
 800bb94:	4805      	ldr	r0, [pc, #20]	; (800bbac <CDC_Receive_FS+0x24>)
 800bb96:	f7fe fd44 	bl	800a622 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bb9a:	4804      	ldr	r0, [pc, #16]	; (800bbac <CDC_Receive_FS+0x24>)
 800bb9c:	f7fe fd5a 	bl	800a654 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bba0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3708      	adds	r7, #8
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
 800bbaa:	bf00      	nop
 800bbac:	20001420 	.word	0x20001420

0800bbb0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b087      	sub	sp, #28
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	60f8      	str	r0, [r7, #12]
 800bbb8:	60b9      	str	r1, [r7, #8]
 800bbba:	4613      	mov	r3, r2
 800bbbc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bbc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	371c      	adds	r7, #28
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd0:	4770      	bx	lr
	...

0800bbd4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b083      	sub	sp, #12
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	4603      	mov	r3, r0
 800bbdc:	6039      	str	r1, [r7, #0]
 800bbde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	2212      	movs	r2, #18
 800bbe4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bbe6:	4b03      	ldr	r3, [pc, #12]	; (800bbf4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	370c      	adds	r7, #12
 800bbec:	46bd      	mov	sp, r7
 800bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf2:	4770      	bx	lr
 800bbf4:	20000164 	.word	0x20000164

0800bbf8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b083      	sub	sp, #12
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	4603      	mov	r3, r0
 800bc00:	6039      	str	r1, [r7, #0]
 800bc02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	2204      	movs	r2, #4
 800bc08:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bc0a:	4b03      	ldr	r3, [pc, #12]	; (800bc18 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	370c      	adds	r7, #12
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr
 800bc18:	20000178 	.word	0x20000178

0800bc1c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b082      	sub	sp, #8
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	4603      	mov	r3, r0
 800bc24:	6039      	str	r1, [r7, #0]
 800bc26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bc28:	79fb      	ldrb	r3, [r7, #7]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d105      	bne.n	800bc3a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bc2e:	683a      	ldr	r2, [r7, #0]
 800bc30:	4907      	ldr	r1, [pc, #28]	; (800bc50 <USBD_FS_ProductStrDescriptor+0x34>)
 800bc32:	4808      	ldr	r0, [pc, #32]	; (800bc54 <USBD_FS_ProductStrDescriptor+0x38>)
 800bc34:	f7ff fdc1 	bl	800b7ba <USBD_GetString>
 800bc38:	e004      	b.n	800bc44 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bc3a:	683a      	ldr	r2, [r7, #0]
 800bc3c:	4904      	ldr	r1, [pc, #16]	; (800bc50 <USBD_FS_ProductStrDescriptor+0x34>)
 800bc3e:	4805      	ldr	r0, [pc, #20]	; (800bc54 <USBD_FS_ProductStrDescriptor+0x38>)
 800bc40:	f7ff fdbb 	bl	800b7ba <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc44:	4b02      	ldr	r3, [pc, #8]	; (800bc50 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3708      	adds	r7, #8
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
 800bc4e:	bf00      	nop
 800bc50:	200026f0 	.word	0x200026f0
 800bc54:	08010cf8 	.word	0x08010cf8

0800bc58 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b082      	sub	sp, #8
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	4603      	mov	r3, r0
 800bc60:	6039      	str	r1, [r7, #0]
 800bc62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bc64:	683a      	ldr	r2, [r7, #0]
 800bc66:	4904      	ldr	r1, [pc, #16]	; (800bc78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bc68:	4804      	ldr	r0, [pc, #16]	; (800bc7c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bc6a:	f7ff fda6 	bl	800b7ba <USBD_GetString>
  return USBD_StrDesc;
 800bc6e:	4b02      	ldr	r3, [pc, #8]	; (800bc78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3708      	adds	r7, #8
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}
 800bc78:	200026f0 	.word	0x200026f0
 800bc7c:	08010d10 	.word	0x08010d10

0800bc80 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b082      	sub	sp, #8
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	4603      	mov	r3, r0
 800bc88:	6039      	str	r1, [r7, #0]
 800bc8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	221a      	movs	r2, #26
 800bc90:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bc92:	f000 f843 	bl	800bd1c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bc96:	4b02      	ldr	r3, [pc, #8]	; (800bca0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3708      	adds	r7, #8
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}
 800bca0:	2000017c 	.word	0x2000017c

0800bca4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b082      	sub	sp, #8
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	4603      	mov	r3, r0
 800bcac:	6039      	str	r1, [r7, #0]
 800bcae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bcb0:	79fb      	ldrb	r3, [r7, #7]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d105      	bne.n	800bcc2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bcb6:	683a      	ldr	r2, [r7, #0]
 800bcb8:	4907      	ldr	r1, [pc, #28]	; (800bcd8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bcba:	4808      	ldr	r0, [pc, #32]	; (800bcdc <USBD_FS_ConfigStrDescriptor+0x38>)
 800bcbc:	f7ff fd7d 	bl	800b7ba <USBD_GetString>
 800bcc0:	e004      	b.n	800bccc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bcc2:	683a      	ldr	r2, [r7, #0]
 800bcc4:	4904      	ldr	r1, [pc, #16]	; (800bcd8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bcc6:	4805      	ldr	r0, [pc, #20]	; (800bcdc <USBD_FS_ConfigStrDescriptor+0x38>)
 800bcc8:	f7ff fd77 	bl	800b7ba <USBD_GetString>
  }
  return USBD_StrDesc;
 800bccc:	4b02      	ldr	r3, [pc, #8]	; (800bcd8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3708      	adds	r7, #8
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
 800bcd6:	bf00      	nop
 800bcd8:	200026f0 	.word	0x200026f0
 800bcdc:	08010d24 	.word	0x08010d24

0800bce0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b082      	sub	sp, #8
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	4603      	mov	r3, r0
 800bce8:	6039      	str	r1, [r7, #0]
 800bcea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bcec:	79fb      	ldrb	r3, [r7, #7]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d105      	bne.n	800bcfe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bcf2:	683a      	ldr	r2, [r7, #0]
 800bcf4:	4907      	ldr	r1, [pc, #28]	; (800bd14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bcf6:	4808      	ldr	r0, [pc, #32]	; (800bd18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bcf8:	f7ff fd5f 	bl	800b7ba <USBD_GetString>
 800bcfc:	e004      	b.n	800bd08 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bcfe:	683a      	ldr	r2, [r7, #0]
 800bd00:	4904      	ldr	r1, [pc, #16]	; (800bd14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bd02:	4805      	ldr	r0, [pc, #20]	; (800bd18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bd04:	f7ff fd59 	bl	800b7ba <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd08:	4b02      	ldr	r3, [pc, #8]	; (800bd14 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3708      	adds	r7, #8
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	bf00      	nop
 800bd14:	200026f0 	.word	0x200026f0
 800bd18:	08010d30 	.word	0x08010d30

0800bd1c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b084      	sub	sp, #16
 800bd20:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bd22:	4b0f      	ldr	r3, [pc, #60]	; (800bd60 <Get_SerialNum+0x44>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bd28:	4b0e      	ldr	r3, [pc, #56]	; (800bd64 <Get_SerialNum+0x48>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bd2e:	4b0e      	ldr	r3, [pc, #56]	; (800bd68 <Get_SerialNum+0x4c>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bd34:	68fa      	ldr	r2, [r7, #12]
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	4413      	add	r3, r2
 800bd3a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d009      	beq.n	800bd56 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bd42:	2208      	movs	r2, #8
 800bd44:	4909      	ldr	r1, [pc, #36]	; (800bd6c <Get_SerialNum+0x50>)
 800bd46:	68f8      	ldr	r0, [r7, #12]
 800bd48:	f000 f814 	bl	800bd74 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bd4c:	2204      	movs	r2, #4
 800bd4e:	4908      	ldr	r1, [pc, #32]	; (800bd70 <Get_SerialNum+0x54>)
 800bd50:	68b8      	ldr	r0, [r7, #8]
 800bd52:	f000 f80f 	bl	800bd74 <IntToUnicode>
  }
}
 800bd56:	bf00      	nop
 800bd58:	3710      	adds	r7, #16
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}
 800bd5e:	bf00      	nop
 800bd60:	1fff7a10 	.word	0x1fff7a10
 800bd64:	1fff7a14 	.word	0x1fff7a14
 800bd68:	1fff7a18 	.word	0x1fff7a18
 800bd6c:	2000017e 	.word	0x2000017e
 800bd70:	2000018e 	.word	0x2000018e

0800bd74 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bd74:	b480      	push	{r7}
 800bd76:	b087      	sub	sp, #28
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	60f8      	str	r0, [r7, #12]
 800bd7c:	60b9      	str	r1, [r7, #8]
 800bd7e:	4613      	mov	r3, r2
 800bd80:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bd82:	2300      	movs	r3, #0
 800bd84:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bd86:	2300      	movs	r3, #0
 800bd88:	75fb      	strb	r3, [r7, #23]
 800bd8a:	e027      	b.n	800bddc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	0f1b      	lsrs	r3, r3, #28
 800bd90:	2b09      	cmp	r3, #9
 800bd92:	d80b      	bhi.n	800bdac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	0f1b      	lsrs	r3, r3, #28
 800bd98:	b2da      	uxtb	r2, r3
 800bd9a:	7dfb      	ldrb	r3, [r7, #23]
 800bd9c:	005b      	lsls	r3, r3, #1
 800bd9e:	4619      	mov	r1, r3
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	440b      	add	r3, r1
 800bda4:	3230      	adds	r2, #48	; 0x30
 800bda6:	b2d2      	uxtb	r2, r2
 800bda8:	701a      	strb	r2, [r3, #0]
 800bdaa:	e00a      	b.n	800bdc2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	0f1b      	lsrs	r3, r3, #28
 800bdb0:	b2da      	uxtb	r2, r3
 800bdb2:	7dfb      	ldrb	r3, [r7, #23]
 800bdb4:	005b      	lsls	r3, r3, #1
 800bdb6:	4619      	mov	r1, r3
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	440b      	add	r3, r1
 800bdbc:	3237      	adds	r2, #55	; 0x37
 800bdbe:	b2d2      	uxtb	r2, r2
 800bdc0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	011b      	lsls	r3, r3, #4
 800bdc6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bdc8:	7dfb      	ldrb	r3, [r7, #23]
 800bdca:	005b      	lsls	r3, r3, #1
 800bdcc:	3301      	adds	r3, #1
 800bdce:	68ba      	ldr	r2, [r7, #8]
 800bdd0:	4413      	add	r3, r2
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bdd6:	7dfb      	ldrb	r3, [r7, #23]
 800bdd8:	3301      	adds	r3, #1
 800bdda:	75fb      	strb	r3, [r7, #23]
 800bddc:	7dfa      	ldrb	r2, [r7, #23]
 800bdde:	79fb      	ldrb	r3, [r7, #7]
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d3d3      	bcc.n	800bd8c <IntToUnicode+0x18>
  }
}
 800bde4:	bf00      	nop
 800bde6:	bf00      	nop
 800bde8:	371c      	adds	r7, #28
 800bdea:	46bd      	mov	sp, r7
 800bdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf0:	4770      	bx	lr
	...

0800bdf4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b08a      	sub	sp, #40	; 0x28
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bdfc:	f107 0314 	add.w	r3, r7, #20
 800be00:	2200      	movs	r2, #0
 800be02:	601a      	str	r2, [r3, #0]
 800be04:	605a      	str	r2, [r3, #4]
 800be06:	609a      	str	r2, [r3, #8]
 800be08:	60da      	str	r2, [r3, #12]
 800be0a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800be14:	d147      	bne.n	800bea6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800be16:	2300      	movs	r3, #0
 800be18:	613b      	str	r3, [r7, #16]
 800be1a:	4b25      	ldr	r3, [pc, #148]	; (800beb0 <HAL_PCD_MspInit+0xbc>)
 800be1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be1e:	4a24      	ldr	r2, [pc, #144]	; (800beb0 <HAL_PCD_MspInit+0xbc>)
 800be20:	f043 0301 	orr.w	r3, r3, #1
 800be24:	6313      	str	r3, [r2, #48]	; 0x30
 800be26:	4b22      	ldr	r3, [pc, #136]	; (800beb0 <HAL_PCD_MspInit+0xbc>)
 800be28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be2a:	f003 0301 	and.w	r3, r3, #1
 800be2e:	613b      	str	r3, [r7, #16]
 800be30:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800be32:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800be38:	2300      	movs	r3, #0
 800be3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be3c:	2300      	movs	r3, #0
 800be3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800be40:	f107 0314 	add.w	r3, r7, #20
 800be44:	4619      	mov	r1, r3
 800be46:	481b      	ldr	r0, [pc, #108]	; (800beb4 <HAL_PCD_MspInit+0xc0>)
 800be48:	f7f7 faee 	bl	8003428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800be4c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800be50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be52:	2302      	movs	r3, #2
 800be54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be56:	2300      	movs	r3, #0
 800be58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be5a:	2303      	movs	r3, #3
 800be5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800be5e:	230a      	movs	r3, #10
 800be60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800be62:	f107 0314 	add.w	r3, r7, #20
 800be66:	4619      	mov	r1, r3
 800be68:	4812      	ldr	r0, [pc, #72]	; (800beb4 <HAL_PCD_MspInit+0xc0>)
 800be6a:	f7f7 fadd 	bl	8003428 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800be6e:	4b10      	ldr	r3, [pc, #64]	; (800beb0 <HAL_PCD_MspInit+0xbc>)
 800be70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be72:	4a0f      	ldr	r2, [pc, #60]	; (800beb0 <HAL_PCD_MspInit+0xbc>)
 800be74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be78:	6353      	str	r3, [r2, #52]	; 0x34
 800be7a:	2300      	movs	r3, #0
 800be7c:	60fb      	str	r3, [r7, #12]
 800be7e:	4b0c      	ldr	r3, [pc, #48]	; (800beb0 <HAL_PCD_MspInit+0xbc>)
 800be80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be82:	4a0b      	ldr	r2, [pc, #44]	; (800beb0 <HAL_PCD_MspInit+0xbc>)
 800be84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800be88:	6453      	str	r3, [r2, #68]	; 0x44
 800be8a:	4b09      	ldr	r3, [pc, #36]	; (800beb0 <HAL_PCD_MspInit+0xbc>)
 800be8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be92:	60fb      	str	r3, [r7, #12]
 800be94:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800be96:	2200      	movs	r2, #0
 800be98:	2100      	movs	r1, #0
 800be9a:	2043      	movs	r0, #67	; 0x43
 800be9c:	f7f7 fa8d 	bl	80033ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bea0:	2043      	movs	r0, #67	; 0x43
 800bea2:	f7f7 faa6 	bl	80033f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bea6:	bf00      	nop
 800bea8:	3728      	adds	r7, #40	; 0x28
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}
 800beae:	bf00      	nop
 800beb0:	40023800 	.word	0x40023800
 800beb4:	40020000 	.word	0x40020000

0800beb8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800becc:	4619      	mov	r1, r3
 800bece:	4610      	mov	r0, r2
 800bed0:	f7fe fc8c 	bl	800a7ec <USBD_LL_SetupStage>
}
 800bed4:	bf00      	nop
 800bed6:	3708      	adds	r7, #8
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}

0800bedc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b082      	sub	sp, #8
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
 800bee4:	460b      	mov	r3, r1
 800bee6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800beee:	78fa      	ldrb	r2, [r7, #3]
 800bef0:	6879      	ldr	r1, [r7, #4]
 800bef2:	4613      	mov	r3, r2
 800bef4:	00db      	lsls	r3, r3, #3
 800bef6:	1a9b      	subs	r3, r3, r2
 800bef8:	009b      	lsls	r3, r3, #2
 800befa:	440b      	add	r3, r1
 800befc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bf00:	681a      	ldr	r2, [r3, #0]
 800bf02:	78fb      	ldrb	r3, [r7, #3]
 800bf04:	4619      	mov	r1, r3
 800bf06:	f7fe fcc6 	bl	800a896 <USBD_LL_DataOutStage>
}
 800bf0a:	bf00      	nop
 800bf0c:	3708      	adds	r7, #8
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}

0800bf12 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf12:	b580      	push	{r7, lr}
 800bf14:	b082      	sub	sp, #8
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]
 800bf1a:	460b      	mov	r3, r1
 800bf1c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800bf24:	78fa      	ldrb	r2, [r7, #3]
 800bf26:	6879      	ldr	r1, [r7, #4]
 800bf28:	4613      	mov	r3, r2
 800bf2a:	00db      	lsls	r3, r3, #3
 800bf2c:	1a9b      	subs	r3, r3, r2
 800bf2e:	009b      	lsls	r3, r3, #2
 800bf30:	440b      	add	r3, r1
 800bf32:	3348      	adds	r3, #72	; 0x48
 800bf34:	681a      	ldr	r2, [r3, #0]
 800bf36:	78fb      	ldrb	r3, [r7, #3]
 800bf38:	4619      	mov	r1, r3
 800bf3a:	f7fe fd0f 	bl	800a95c <USBD_LL_DataInStage>
}
 800bf3e:	bf00      	nop
 800bf40:	3708      	adds	r7, #8
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}

0800bf46 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf46:	b580      	push	{r7, lr}
 800bf48:	b082      	sub	sp, #8
 800bf4a:	af00      	add	r7, sp, #0
 800bf4c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bf54:	4618      	mov	r0, r3
 800bf56:	f7fe fe23 	bl	800aba0 <USBD_LL_SOF>
}
 800bf5a:	bf00      	nop
 800bf5c:	3708      	adds	r7, #8
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}

0800bf62 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf62:	b580      	push	{r7, lr}
 800bf64:	b084      	sub	sp, #16
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	68db      	ldr	r3, [r3, #12]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d102      	bne.n	800bf7c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bf76:	2300      	movs	r3, #0
 800bf78:	73fb      	strb	r3, [r7, #15]
 800bf7a:	e008      	b.n	800bf8e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	68db      	ldr	r3, [r3, #12]
 800bf80:	2b02      	cmp	r3, #2
 800bf82:	d102      	bne.n	800bf8a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bf84:	2301      	movs	r3, #1
 800bf86:	73fb      	strb	r3, [r7, #15]
 800bf88:	e001      	b.n	800bf8e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bf8a:	f7f6 f9f7 	bl	800237c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bf94:	7bfa      	ldrb	r2, [r7, #15]
 800bf96:	4611      	mov	r1, r2
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f7fe fdc3 	bl	800ab24 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f7fe fd6f 	bl	800aa88 <USBD_LL_Reset>
}
 800bfaa:	bf00      	nop
 800bfac:	3710      	adds	r7, #16
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}
	...

0800bfb4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b082      	sub	sp, #8
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f7fe fdbe 	bl	800ab44 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	687a      	ldr	r2, [r7, #4]
 800bfd4:	6812      	ldr	r2, [r2, #0]
 800bfd6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bfda:	f043 0301 	orr.w	r3, r3, #1
 800bfde:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6a1b      	ldr	r3, [r3, #32]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d005      	beq.n	800bff4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bfe8:	4b04      	ldr	r3, [pc, #16]	; (800bffc <HAL_PCD_SuspendCallback+0x48>)
 800bfea:	691b      	ldr	r3, [r3, #16]
 800bfec:	4a03      	ldr	r2, [pc, #12]	; (800bffc <HAL_PCD_SuspendCallback+0x48>)
 800bfee:	f043 0306 	orr.w	r3, r3, #6
 800bff2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bff4:	bf00      	nop
 800bff6:	3708      	adds	r7, #8
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}
 800bffc:	e000ed00 	.word	0xe000ed00

0800c000 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b082      	sub	sp, #8
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c00e:	4618      	mov	r0, r3
 800c010:	f7fe fdae 	bl	800ab70 <USBD_LL_Resume>
}
 800c014:	bf00      	nop
 800c016:	3708      	adds	r7, #8
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b082      	sub	sp, #8
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	460b      	mov	r3, r1
 800c026:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c02e:	78fa      	ldrb	r2, [r7, #3]
 800c030:	4611      	mov	r1, r2
 800c032:	4618      	mov	r0, r3
 800c034:	f7fe fdfc 	bl	800ac30 <USBD_LL_IsoOUTIncomplete>
}
 800c038:	bf00      	nop
 800c03a:	3708      	adds	r7, #8
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}

0800c040 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b082      	sub	sp, #8
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
 800c048:	460b      	mov	r3, r1
 800c04a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c052:	78fa      	ldrb	r2, [r7, #3]
 800c054:	4611      	mov	r1, r2
 800c056:	4618      	mov	r0, r3
 800c058:	f7fe fdc4 	bl	800abe4 <USBD_LL_IsoINIncomplete>
}
 800c05c:	bf00      	nop
 800c05e:	3708      	adds	r7, #8
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b082      	sub	sp, #8
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c072:	4618      	mov	r0, r3
 800c074:	f7fe fe02 	bl	800ac7c <USBD_LL_DevConnected>
}
 800c078:	bf00      	nop
 800c07a:	3708      	adds	r7, #8
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}

0800c080 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b082      	sub	sp, #8
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c08e:	4618      	mov	r0, r3
 800c090:	f7fe fdff 	bl	800ac92 <USBD_LL_DevDisconnected>
}
 800c094:	bf00      	nop
 800c096:	3708      	adds	r7, #8
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}

0800c09c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b082      	sub	sp, #8
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	781b      	ldrb	r3, [r3, #0]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d13c      	bne.n	800c126 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c0ac:	4a20      	ldr	r2, [pc, #128]	; (800c130 <USBD_LL_Init+0x94>)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	4a1e      	ldr	r2, [pc, #120]	; (800c130 <USBD_LL_Init+0x94>)
 800c0b8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c0bc:	4b1c      	ldr	r3, [pc, #112]	; (800c130 <USBD_LL_Init+0x94>)
 800c0be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c0c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c0c4:	4b1a      	ldr	r3, [pc, #104]	; (800c130 <USBD_LL_Init+0x94>)
 800c0c6:	2204      	movs	r2, #4
 800c0c8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c0ca:	4b19      	ldr	r3, [pc, #100]	; (800c130 <USBD_LL_Init+0x94>)
 800c0cc:	2202      	movs	r2, #2
 800c0ce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c0d0:	4b17      	ldr	r3, [pc, #92]	; (800c130 <USBD_LL_Init+0x94>)
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c0d6:	4b16      	ldr	r3, [pc, #88]	; (800c130 <USBD_LL_Init+0x94>)
 800c0d8:	2202      	movs	r2, #2
 800c0da:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c0dc:	4b14      	ldr	r3, [pc, #80]	; (800c130 <USBD_LL_Init+0x94>)
 800c0de:	2200      	movs	r2, #0
 800c0e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c0e2:	4b13      	ldr	r3, [pc, #76]	; (800c130 <USBD_LL_Init+0x94>)
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c0e8:	4b11      	ldr	r3, [pc, #68]	; (800c130 <USBD_LL_Init+0x94>)
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800c0ee:	4b10      	ldr	r3, [pc, #64]	; (800c130 <USBD_LL_Init+0x94>)
 800c0f0:	2201      	movs	r2, #1
 800c0f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c0f4:	4b0e      	ldr	r3, [pc, #56]	; (800c130 <USBD_LL_Init+0x94>)
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c0fa:	480d      	ldr	r0, [pc, #52]	; (800c130 <USBD_LL_Init+0x94>)
 800c0fc:	f7f8 fbde 	bl	80048bc <HAL_PCD_Init>
 800c100:	4603      	mov	r3, r0
 800c102:	2b00      	cmp	r3, #0
 800c104:	d001      	beq.n	800c10a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c106:	f7f6 f939 	bl	800237c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c10a:	2180      	movs	r1, #128	; 0x80
 800c10c:	4808      	ldr	r0, [pc, #32]	; (800c130 <USBD_LL_Init+0x94>)
 800c10e:	f7f9 fd3c 	bl	8005b8a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c112:	2240      	movs	r2, #64	; 0x40
 800c114:	2100      	movs	r1, #0
 800c116:	4806      	ldr	r0, [pc, #24]	; (800c130 <USBD_LL_Init+0x94>)
 800c118:	f7f9 fcf0 	bl	8005afc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c11c:	2280      	movs	r2, #128	; 0x80
 800c11e:	2101      	movs	r1, #1
 800c120:	4803      	ldr	r0, [pc, #12]	; (800c130 <USBD_LL_Init+0x94>)
 800c122:	f7f9 fceb 	bl	8005afc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c126:	2300      	movs	r3, #0
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3708      	adds	r7, #8
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	200028f0 	.word	0x200028f0

0800c134 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b084      	sub	sp, #16
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c13c:	2300      	movs	r3, #0
 800c13e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c140:	2300      	movs	r3, #0
 800c142:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c14a:	4618      	mov	r0, r3
 800c14c:	f7f8 fcd3 	bl	8004af6 <HAL_PCD_Start>
 800c150:	4603      	mov	r3, r0
 800c152:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c154:	7bfb      	ldrb	r3, [r7, #15]
 800c156:	4618      	mov	r0, r3
 800c158:	f000 f942 	bl	800c3e0 <USBD_Get_USB_Status>
 800c15c:	4603      	mov	r3, r0
 800c15e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c160:	7bbb      	ldrb	r3, [r7, #14]
}
 800c162:	4618      	mov	r0, r3
 800c164:	3710      	adds	r7, #16
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}

0800c16a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c16a:	b580      	push	{r7, lr}
 800c16c:	b084      	sub	sp, #16
 800c16e:	af00      	add	r7, sp, #0
 800c170:	6078      	str	r0, [r7, #4]
 800c172:	4608      	mov	r0, r1
 800c174:	4611      	mov	r1, r2
 800c176:	461a      	mov	r2, r3
 800c178:	4603      	mov	r3, r0
 800c17a:	70fb      	strb	r3, [r7, #3]
 800c17c:	460b      	mov	r3, r1
 800c17e:	70bb      	strb	r3, [r7, #2]
 800c180:	4613      	mov	r3, r2
 800c182:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c184:	2300      	movs	r3, #0
 800c186:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c188:	2300      	movs	r3, #0
 800c18a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c192:	78bb      	ldrb	r3, [r7, #2]
 800c194:	883a      	ldrh	r2, [r7, #0]
 800c196:	78f9      	ldrb	r1, [r7, #3]
 800c198:	f7f9 f8b7 	bl	800530a <HAL_PCD_EP_Open>
 800c19c:	4603      	mov	r3, r0
 800c19e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1a0:	7bfb      	ldrb	r3, [r7, #15]
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f000 f91c 	bl	800c3e0 <USBD_Get_USB_Status>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3710      	adds	r7, #16
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}

0800c1b6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1b6:	b580      	push	{r7, lr}
 800c1b8:	b084      	sub	sp, #16
 800c1ba:	af00      	add	r7, sp, #0
 800c1bc:	6078      	str	r0, [r7, #4]
 800c1be:	460b      	mov	r3, r1
 800c1c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c1d0:	78fa      	ldrb	r2, [r7, #3]
 800c1d2:	4611      	mov	r1, r2
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7f9 f900 	bl	80053da <HAL_PCD_EP_Close>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1de:	7bfb      	ldrb	r3, [r7, #15]
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f000 f8fd 	bl	800c3e0 <USBD_Get_USB_Status>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3710      	adds	r7, #16
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}

0800c1f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b084      	sub	sp, #16
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	460b      	mov	r3, r1
 800c1fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c200:	2300      	movs	r3, #0
 800c202:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c204:	2300      	movs	r3, #0
 800c206:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c20e:	78fa      	ldrb	r2, [r7, #3]
 800c210:	4611      	mov	r1, r2
 800c212:	4618      	mov	r0, r3
 800c214:	f7f9 f9d8 	bl	80055c8 <HAL_PCD_EP_SetStall>
 800c218:	4603      	mov	r3, r0
 800c21a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c21c:	7bfb      	ldrb	r3, [r7, #15]
 800c21e:	4618      	mov	r0, r3
 800c220:	f000 f8de 	bl	800c3e0 <USBD_Get_USB_Status>
 800c224:	4603      	mov	r3, r0
 800c226:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c228:	7bbb      	ldrb	r3, [r7, #14]
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3710      	adds	r7, #16
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}

0800c232 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c232:	b580      	push	{r7, lr}
 800c234:	b084      	sub	sp, #16
 800c236:	af00      	add	r7, sp, #0
 800c238:	6078      	str	r0, [r7, #4]
 800c23a:	460b      	mov	r3, r1
 800c23c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c23e:	2300      	movs	r3, #0
 800c240:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c242:	2300      	movs	r3, #0
 800c244:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c24c:	78fa      	ldrb	r2, [r7, #3]
 800c24e:	4611      	mov	r1, r2
 800c250:	4618      	mov	r0, r3
 800c252:	f7f9 fa1d 	bl	8005690 <HAL_PCD_EP_ClrStall>
 800c256:	4603      	mov	r3, r0
 800c258:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c25a:	7bfb      	ldrb	r3, [r7, #15]
 800c25c:	4618      	mov	r0, r3
 800c25e:	f000 f8bf 	bl	800c3e0 <USBD_Get_USB_Status>
 800c262:	4603      	mov	r3, r0
 800c264:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c266:	7bbb      	ldrb	r3, [r7, #14]
}
 800c268:	4618      	mov	r0, r3
 800c26a:	3710      	adds	r7, #16
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c270:	b480      	push	{r7}
 800c272:	b085      	sub	sp, #20
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	460b      	mov	r3, r1
 800c27a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c282:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c284:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	da0b      	bge.n	800c2a4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c28c:	78fb      	ldrb	r3, [r7, #3]
 800c28e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c292:	68f9      	ldr	r1, [r7, #12]
 800c294:	4613      	mov	r3, r2
 800c296:	00db      	lsls	r3, r3, #3
 800c298:	1a9b      	subs	r3, r3, r2
 800c29a:	009b      	lsls	r3, r3, #2
 800c29c:	440b      	add	r3, r1
 800c29e:	333e      	adds	r3, #62	; 0x3e
 800c2a0:	781b      	ldrb	r3, [r3, #0]
 800c2a2:	e00b      	b.n	800c2bc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c2a4:	78fb      	ldrb	r3, [r7, #3]
 800c2a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c2aa:	68f9      	ldr	r1, [r7, #12]
 800c2ac:	4613      	mov	r3, r2
 800c2ae:	00db      	lsls	r3, r3, #3
 800c2b0:	1a9b      	subs	r3, r3, r2
 800c2b2:	009b      	lsls	r3, r3, #2
 800c2b4:	440b      	add	r3, r1
 800c2b6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c2ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	3714      	adds	r7, #20
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c6:	4770      	bx	lr

0800c2c8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b084      	sub	sp, #16
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
 800c2d0:	460b      	mov	r3, r1
 800c2d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c2e2:	78fa      	ldrb	r2, [r7, #3]
 800c2e4:	4611      	mov	r1, r2
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f7f8 ffea 	bl	80052c0 <HAL_PCD_SetAddress>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2f0:	7bfb      	ldrb	r3, [r7, #15]
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f000 f874 	bl	800c3e0 <USBD_Get_USB_Status>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3710      	adds	r7, #16
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}

0800c306 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c306:	b580      	push	{r7, lr}
 800c308:	b086      	sub	sp, #24
 800c30a:	af00      	add	r7, sp, #0
 800c30c:	60f8      	str	r0, [r7, #12]
 800c30e:	607a      	str	r2, [r7, #4]
 800c310:	603b      	str	r3, [r7, #0]
 800c312:	460b      	mov	r3, r1
 800c314:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c316:	2300      	movs	r3, #0
 800c318:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c31a:	2300      	movs	r3, #0
 800c31c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c324:	7af9      	ldrb	r1, [r7, #11]
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	687a      	ldr	r2, [r7, #4]
 800c32a:	f7f9 f903 	bl	8005534 <HAL_PCD_EP_Transmit>
 800c32e:	4603      	mov	r3, r0
 800c330:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c332:	7dfb      	ldrb	r3, [r7, #23]
 800c334:	4618      	mov	r0, r3
 800c336:	f000 f853 	bl	800c3e0 <USBD_Get_USB_Status>
 800c33a:	4603      	mov	r3, r0
 800c33c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c33e:	7dbb      	ldrb	r3, [r7, #22]
}
 800c340:	4618      	mov	r0, r3
 800c342:	3718      	adds	r7, #24
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}

0800c348 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b086      	sub	sp, #24
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	60f8      	str	r0, [r7, #12]
 800c350:	607a      	str	r2, [r7, #4]
 800c352:	603b      	str	r3, [r7, #0]
 800c354:	460b      	mov	r3, r1
 800c356:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c358:	2300      	movs	r3, #0
 800c35a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c35c:	2300      	movs	r3, #0
 800c35e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c366:	7af9      	ldrb	r1, [r7, #11]
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	687a      	ldr	r2, [r7, #4]
 800c36c:	f7f9 f87f 	bl	800546e <HAL_PCD_EP_Receive>
 800c370:	4603      	mov	r3, r0
 800c372:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c374:	7dfb      	ldrb	r3, [r7, #23]
 800c376:	4618      	mov	r0, r3
 800c378:	f000 f832 	bl	800c3e0 <USBD_Get_USB_Status>
 800c37c:	4603      	mov	r3, r0
 800c37e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c380:	7dbb      	ldrb	r3, [r7, #22]
}
 800c382:	4618      	mov	r0, r3
 800c384:	3718      	adds	r7, #24
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}

0800c38a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c38a:	b580      	push	{r7, lr}
 800c38c:	b082      	sub	sp, #8
 800c38e:	af00      	add	r7, sp, #0
 800c390:	6078      	str	r0, [r7, #4]
 800c392:	460b      	mov	r3, r1
 800c394:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c39c:	78fa      	ldrb	r2, [r7, #3]
 800c39e:	4611      	mov	r1, r2
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f7f9 f8af 	bl	8005504 <HAL_PCD_EP_GetRxCount>
 800c3a6:	4603      	mov	r3, r0
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3708      	adds	r7, #8
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c3b0:	b480      	push	{r7}
 800c3b2:	b083      	sub	sp, #12
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c3b8:	4b03      	ldr	r3, [pc, #12]	; (800c3c8 <USBD_static_malloc+0x18>)
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	370c      	adds	r7, #12
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c4:	4770      	bx	lr
 800c3c6:	bf00      	nop
 800c3c8:	200003a4 	.word	0x200003a4

0800c3cc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b083      	sub	sp, #12
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]

}
 800c3d4:	bf00      	nop
 800c3d6:	370c      	adds	r7, #12
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3de:	4770      	bx	lr

0800c3e0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	b085      	sub	sp, #20
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c3ee:	79fb      	ldrb	r3, [r7, #7]
 800c3f0:	2b03      	cmp	r3, #3
 800c3f2:	d817      	bhi.n	800c424 <USBD_Get_USB_Status+0x44>
 800c3f4:	a201      	add	r2, pc, #4	; (adr r2, 800c3fc <USBD_Get_USB_Status+0x1c>)
 800c3f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3fa:	bf00      	nop
 800c3fc:	0800c40d 	.word	0x0800c40d
 800c400:	0800c413 	.word	0x0800c413
 800c404:	0800c419 	.word	0x0800c419
 800c408:	0800c41f 	.word	0x0800c41f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c40c:	2300      	movs	r3, #0
 800c40e:	73fb      	strb	r3, [r7, #15]
    break;
 800c410:	e00b      	b.n	800c42a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c412:	2303      	movs	r3, #3
 800c414:	73fb      	strb	r3, [r7, #15]
    break;
 800c416:	e008      	b.n	800c42a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c418:	2301      	movs	r3, #1
 800c41a:	73fb      	strb	r3, [r7, #15]
    break;
 800c41c:	e005      	b.n	800c42a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c41e:	2303      	movs	r3, #3
 800c420:	73fb      	strb	r3, [r7, #15]
    break;
 800c422:	e002      	b.n	800c42a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c424:	2303      	movs	r3, #3
 800c426:	73fb      	strb	r3, [r7, #15]
    break;
 800c428:	bf00      	nop
  }
  return usb_status;
 800c42a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	3714      	adds	r7, #20
 800c430:	46bd      	mov	sp, r7
 800c432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c436:	4770      	bx	lr

0800c438 <__errno>:
 800c438:	4b01      	ldr	r3, [pc, #4]	; (800c440 <__errno+0x8>)
 800c43a:	6818      	ldr	r0, [r3, #0]
 800c43c:	4770      	bx	lr
 800c43e:	bf00      	nop
 800c440:	20000198 	.word	0x20000198

0800c444 <__libc_init_array>:
 800c444:	b570      	push	{r4, r5, r6, lr}
 800c446:	4d0d      	ldr	r5, [pc, #52]	; (800c47c <__libc_init_array+0x38>)
 800c448:	4c0d      	ldr	r4, [pc, #52]	; (800c480 <__libc_init_array+0x3c>)
 800c44a:	1b64      	subs	r4, r4, r5
 800c44c:	10a4      	asrs	r4, r4, #2
 800c44e:	2600      	movs	r6, #0
 800c450:	42a6      	cmp	r6, r4
 800c452:	d109      	bne.n	800c468 <__libc_init_array+0x24>
 800c454:	4d0b      	ldr	r5, [pc, #44]	; (800c484 <__libc_init_array+0x40>)
 800c456:	4c0c      	ldr	r4, [pc, #48]	; (800c488 <__libc_init_array+0x44>)
 800c458:	f004 fc42 	bl	8010ce0 <_init>
 800c45c:	1b64      	subs	r4, r4, r5
 800c45e:	10a4      	asrs	r4, r4, #2
 800c460:	2600      	movs	r6, #0
 800c462:	42a6      	cmp	r6, r4
 800c464:	d105      	bne.n	800c472 <__libc_init_array+0x2e>
 800c466:	bd70      	pop	{r4, r5, r6, pc}
 800c468:	f855 3b04 	ldr.w	r3, [r5], #4
 800c46c:	4798      	blx	r3
 800c46e:	3601      	adds	r6, #1
 800c470:	e7ee      	b.n	800c450 <__libc_init_array+0xc>
 800c472:	f855 3b04 	ldr.w	r3, [r5], #4
 800c476:	4798      	blx	r3
 800c478:	3601      	adds	r6, #1
 800c47a:	e7f2      	b.n	800c462 <__libc_init_array+0x1e>
 800c47c:	0801121c 	.word	0x0801121c
 800c480:	0801121c 	.word	0x0801121c
 800c484:	0801121c 	.word	0x0801121c
 800c488:	08011220 	.word	0x08011220

0800c48c <malloc>:
 800c48c:	4b02      	ldr	r3, [pc, #8]	; (800c498 <malloc+0xc>)
 800c48e:	4601      	mov	r1, r0
 800c490:	6818      	ldr	r0, [r3, #0]
 800c492:	f000 b869 	b.w	800c568 <_malloc_r>
 800c496:	bf00      	nop
 800c498:	20000198 	.word	0x20000198

0800c49c <memcpy>:
 800c49c:	440a      	add	r2, r1
 800c49e:	4291      	cmp	r1, r2
 800c4a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800c4a4:	d100      	bne.n	800c4a8 <memcpy+0xc>
 800c4a6:	4770      	bx	lr
 800c4a8:	b510      	push	{r4, lr}
 800c4aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c4ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c4b2:	4291      	cmp	r1, r2
 800c4b4:	d1f9      	bne.n	800c4aa <memcpy+0xe>
 800c4b6:	bd10      	pop	{r4, pc}

0800c4b8 <memset>:
 800c4b8:	4402      	add	r2, r0
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d100      	bne.n	800c4c2 <memset+0xa>
 800c4c0:	4770      	bx	lr
 800c4c2:	f803 1b01 	strb.w	r1, [r3], #1
 800c4c6:	e7f9      	b.n	800c4bc <memset+0x4>

0800c4c8 <_free_r>:
 800c4c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c4ca:	2900      	cmp	r1, #0
 800c4cc:	d048      	beq.n	800c560 <_free_r+0x98>
 800c4ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4d2:	9001      	str	r0, [sp, #4]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	f1a1 0404 	sub.w	r4, r1, #4
 800c4da:	bfb8      	it	lt
 800c4dc:	18e4      	addlt	r4, r4, r3
 800c4de:	f003 fb65 	bl	800fbac <__malloc_lock>
 800c4e2:	4a20      	ldr	r2, [pc, #128]	; (800c564 <_free_r+0x9c>)
 800c4e4:	9801      	ldr	r0, [sp, #4]
 800c4e6:	6813      	ldr	r3, [r2, #0]
 800c4e8:	4615      	mov	r5, r2
 800c4ea:	b933      	cbnz	r3, 800c4fa <_free_r+0x32>
 800c4ec:	6063      	str	r3, [r4, #4]
 800c4ee:	6014      	str	r4, [r2, #0]
 800c4f0:	b003      	add	sp, #12
 800c4f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c4f6:	f003 bb5f 	b.w	800fbb8 <__malloc_unlock>
 800c4fa:	42a3      	cmp	r3, r4
 800c4fc:	d90b      	bls.n	800c516 <_free_r+0x4e>
 800c4fe:	6821      	ldr	r1, [r4, #0]
 800c500:	1862      	adds	r2, r4, r1
 800c502:	4293      	cmp	r3, r2
 800c504:	bf04      	itt	eq
 800c506:	681a      	ldreq	r2, [r3, #0]
 800c508:	685b      	ldreq	r3, [r3, #4]
 800c50a:	6063      	str	r3, [r4, #4]
 800c50c:	bf04      	itt	eq
 800c50e:	1852      	addeq	r2, r2, r1
 800c510:	6022      	streq	r2, [r4, #0]
 800c512:	602c      	str	r4, [r5, #0]
 800c514:	e7ec      	b.n	800c4f0 <_free_r+0x28>
 800c516:	461a      	mov	r2, r3
 800c518:	685b      	ldr	r3, [r3, #4]
 800c51a:	b10b      	cbz	r3, 800c520 <_free_r+0x58>
 800c51c:	42a3      	cmp	r3, r4
 800c51e:	d9fa      	bls.n	800c516 <_free_r+0x4e>
 800c520:	6811      	ldr	r1, [r2, #0]
 800c522:	1855      	adds	r5, r2, r1
 800c524:	42a5      	cmp	r5, r4
 800c526:	d10b      	bne.n	800c540 <_free_r+0x78>
 800c528:	6824      	ldr	r4, [r4, #0]
 800c52a:	4421      	add	r1, r4
 800c52c:	1854      	adds	r4, r2, r1
 800c52e:	42a3      	cmp	r3, r4
 800c530:	6011      	str	r1, [r2, #0]
 800c532:	d1dd      	bne.n	800c4f0 <_free_r+0x28>
 800c534:	681c      	ldr	r4, [r3, #0]
 800c536:	685b      	ldr	r3, [r3, #4]
 800c538:	6053      	str	r3, [r2, #4]
 800c53a:	4421      	add	r1, r4
 800c53c:	6011      	str	r1, [r2, #0]
 800c53e:	e7d7      	b.n	800c4f0 <_free_r+0x28>
 800c540:	d902      	bls.n	800c548 <_free_r+0x80>
 800c542:	230c      	movs	r3, #12
 800c544:	6003      	str	r3, [r0, #0]
 800c546:	e7d3      	b.n	800c4f0 <_free_r+0x28>
 800c548:	6825      	ldr	r5, [r4, #0]
 800c54a:	1961      	adds	r1, r4, r5
 800c54c:	428b      	cmp	r3, r1
 800c54e:	bf04      	itt	eq
 800c550:	6819      	ldreq	r1, [r3, #0]
 800c552:	685b      	ldreq	r3, [r3, #4]
 800c554:	6063      	str	r3, [r4, #4]
 800c556:	bf04      	itt	eq
 800c558:	1949      	addeq	r1, r1, r5
 800c55a:	6021      	streq	r1, [r4, #0]
 800c55c:	6054      	str	r4, [r2, #4]
 800c55e:	e7c7      	b.n	800c4f0 <_free_r+0x28>
 800c560:	b003      	add	sp, #12
 800c562:	bd30      	pop	{r4, r5, pc}
 800c564:	200005c4 	.word	0x200005c4

0800c568 <_malloc_r>:
 800c568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c56a:	1ccd      	adds	r5, r1, #3
 800c56c:	f025 0503 	bic.w	r5, r5, #3
 800c570:	3508      	adds	r5, #8
 800c572:	2d0c      	cmp	r5, #12
 800c574:	bf38      	it	cc
 800c576:	250c      	movcc	r5, #12
 800c578:	2d00      	cmp	r5, #0
 800c57a:	4606      	mov	r6, r0
 800c57c:	db01      	blt.n	800c582 <_malloc_r+0x1a>
 800c57e:	42a9      	cmp	r1, r5
 800c580:	d903      	bls.n	800c58a <_malloc_r+0x22>
 800c582:	230c      	movs	r3, #12
 800c584:	6033      	str	r3, [r6, #0]
 800c586:	2000      	movs	r0, #0
 800c588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c58a:	f003 fb0f 	bl	800fbac <__malloc_lock>
 800c58e:	4921      	ldr	r1, [pc, #132]	; (800c614 <_malloc_r+0xac>)
 800c590:	680a      	ldr	r2, [r1, #0]
 800c592:	4614      	mov	r4, r2
 800c594:	b99c      	cbnz	r4, 800c5be <_malloc_r+0x56>
 800c596:	4f20      	ldr	r7, [pc, #128]	; (800c618 <_malloc_r+0xb0>)
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	b923      	cbnz	r3, 800c5a6 <_malloc_r+0x3e>
 800c59c:	4621      	mov	r1, r4
 800c59e:	4630      	mov	r0, r6
 800c5a0:	f000 feb6 	bl	800d310 <_sbrk_r>
 800c5a4:	6038      	str	r0, [r7, #0]
 800c5a6:	4629      	mov	r1, r5
 800c5a8:	4630      	mov	r0, r6
 800c5aa:	f000 feb1 	bl	800d310 <_sbrk_r>
 800c5ae:	1c43      	adds	r3, r0, #1
 800c5b0:	d123      	bne.n	800c5fa <_malloc_r+0x92>
 800c5b2:	230c      	movs	r3, #12
 800c5b4:	6033      	str	r3, [r6, #0]
 800c5b6:	4630      	mov	r0, r6
 800c5b8:	f003 fafe 	bl	800fbb8 <__malloc_unlock>
 800c5bc:	e7e3      	b.n	800c586 <_malloc_r+0x1e>
 800c5be:	6823      	ldr	r3, [r4, #0]
 800c5c0:	1b5b      	subs	r3, r3, r5
 800c5c2:	d417      	bmi.n	800c5f4 <_malloc_r+0x8c>
 800c5c4:	2b0b      	cmp	r3, #11
 800c5c6:	d903      	bls.n	800c5d0 <_malloc_r+0x68>
 800c5c8:	6023      	str	r3, [r4, #0]
 800c5ca:	441c      	add	r4, r3
 800c5cc:	6025      	str	r5, [r4, #0]
 800c5ce:	e004      	b.n	800c5da <_malloc_r+0x72>
 800c5d0:	6863      	ldr	r3, [r4, #4]
 800c5d2:	42a2      	cmp	r2, r4
 800c5d4:	bf0c      	ite	eq
 800c5d6:	600b      	streq	r3, [r1, #0]
 800c5d8:	6053      	strne	r3, [r2, #4]
 800c5da:	4630      	mov	r0, r6
 800c5dc:	f003 faec 	bl	800fbb8 <__malloc_unlock>
 800c5e0:	f104 000b 	add.w	r0, r4, #11
 800c5e4:	1d23      	adds	r3, r4, #4
 800c5e6:	f020 0007 	bic.w	r0, r0, #7
 800c5ea:	1ac2      	subs	r2, r0, r3
 800c5ec:	d0cc      	beq.n	800c588 <_malloc_r+0x20>
 800c5ee:	1a1b      	subs	r3, r3, r0
 800c5f0:	50a3      	str	r3, [r4, r2]
 800c5f2:	e7c9      	b.n	800c588 <_malloc_r+0x20>
 800c5f4:	4622      	mov	r2, r4
 800c5f6:	6864      	ldr	r4, [r4, #4]
 800c5f8:	e7cc      	b.n	800c594 <_malloc_r+0x2c>
 800c5fa:	1cc4      	adds	r4, r0, #3
 800c5fc:	f024 0403 	bic.w	r4, r4, #3
 800c600:	42a0      	cmp	r0, r4
 800c602:	d0e3      	beq.n	800c5cc <_malloc_r+0x64>
 800c604:	1a21      	subs	r1, r4, r0
 800c606:	4630      	mov	r0, r6
 800c608:	f000 fe82 	bl	800d310 <_sbrk_r>
 800c60c:	3001      	adds	r0, #1
 800c60e:	d1dd      	bne.n	800c5cc <_malloc_r+0x64>
 800c610:	e7cf      	b.n	800c5b2 <_malloc_r+0x4a>
 800c612:	bf00      	nop
 800c614:	200005c4 	.word	0x200005c4
 800c618:	200005c8 	.word	0x200005c8

0800c61c <__cvt>:
 800c61c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c620:	ec55 4b10 	vmov	r4, r5, d0
 800c624:	2d00      	cmp	r5, #0
 800c626:	460e      	mov	r6, r1
 800c628:	4619      	mov	r1, r3
 800c62a:	462b      	mov	r3, r5
 800c62c:	bfbb      	ittet	lt
 800c62e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c632:	461d      	movlt	r5, r3
 800c634:	2300      	movge	r3, #0
 800c636:	232d      	movlt	r3, #45	; 0x2d
 800c638:	700b      	strb	r3, [r1, #0]
 800c63a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c63c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c640:	4691      	mov	r9, r2
 800c642:	f023 0820 	bic.w	r8, r3, #32
 800c646:	bfbc      	itt	lt
 800c648:	4622      	movlt	r2, r4
 800c64a:	4614      	movlt	r4, r2
 800c64c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c650:	d005      	beq.n	800c65e <__cvt+0x42>
 800c652:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c656:	d100      	bne.n	800c65a <__cvt+0x3e>
 800c658:	3601      	adds	r6, #1
 800c65a:	2102      	movs	r1, #2
 800c65c:	e000      	b.n	800c660 <__cvt+0x44>
 800c65e:	2103      	movs	r1, #3
 800c660:	ab03      	add	r3, sp, #12
 800c662:	9301      	str	r3, [sp, #4]
 800c664:	ab02      	add	r3, sp, #8
 800c666:	9300      	str	r3, [sp, #0]
 800c668:	ec45 4b10 	vmov	d0, r4, r5
 800c66c:	4653      	mov	r3, sl
 800c66e:	4632      	mov	r2, r6
 800c670:	f001 fefa 	bl	800e468 <_dtoa_r>
 800c674:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c678:	4607      	mov	r7, r0
 800c67a:	d102      	bne.n	800c682 <__cvt+0x66>
 800c67c:	f019 0f01 	tst.w	r9, #1
 800c680:	d022      	beq.n	800c6c8 <__cvt+0xac>
 800c682:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c686:	eb07 0906 	add.w	r9, r7, r6
 800c68a:	d110      	bne.n	800c6ae <__cvt+0x92>
 800c68c:	783b      	ldrb	r3, [r7, #0]
 800c68e:	2b30      	cmp	r3, #48	; 0x30
 800c690:	d10a      	bne.n	800c6a8 <__cvt+0x8c>
 800c692:	2200      	movs	r2, #0
 800c694:	2300      	movs	r3, #0
 800c696:	4620      	mov	r0, r4
 800c698:	4629      	mov	r1, r5
 800c69a:	f7f4 fa25 	bl	8000ae8 <__aeabi_dcmpeq>
 800c69e:	b918      	cbnz	r0, 800c6a8 <__cvt+0x8c>
 800c6a0:	f1c6 0601 	rsb	r6, r6, #1
 800c6a4:	f8ca 6000 	str.w	r6, [sl]
 800c6a8:	f8da 3000 	ldr.w	r3, [sl]
 800c6ac:	4499      	add	r9, r3
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	4629      	mov	r1, r5
 800c6b6:	f7f4 fa17 	bl	8000ae8 <__aeabi_dcmpeq>
 800c6ba:	b108      	cbz	r0, 800c6c0 <__cvt+0xa4>
 800c6bc:	f8cd 900c 	str.w	r9, [sp, #12]
 800c6c0:	2230      	movs	r2, #48	; 0x30
 800c6c2:	9b03      	ldr	r3, [sp, #12]
 800c6c4:	454b      	cmp	r3, r9
 800c6c6:	d307      	bcc.n	800c6d8 <__cvt+0xbc>
 800c6c8:	9b03      	ldr	r3, [sp, #12]
 800c6ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c6cc:	1bdb      	subs	r3, r3, r7
 800c6ce:	4638      	mov	r0, r7
 800c6d0:	6013      	str	r3, [r2, #0]
 800c6d2:	b004      	add	sp, #16
 800c6d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6d8:	1c59      	adds	r1, r3, #1
 800c6da:	9103      	str	r1, [sp, #12]
 800c6dc:	701a      	strb	r2, [r3, #0]
 800c6de:	e7f0      	b.n	800c6c2 <__cvt+0xa6>

0800c6e0 <__exponent>:
 800c6e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	2900      	cmp	r1, #0
 800c6e6:	bfb8      	it	lt
 800c6e8:	4249      	neglt	r1, r1
 800c6ea:	f803 2b02 	strb.w	r2, [r3], #2
 800c6ee:	bfb4      	ite	lt
 800c6f0:	222d      	movlt	r2, #45	; 0x2d
 800c6f2:	222b      	movge	r2, #43	; 0x2b
 800c6f4:	2909      	cmp	r1, #9
 800c6f6:	7042      	strb	r2, [r0, #1]
 800c6f8:	dd2a      	ble.n	800c750 <__exponent+0x70>
 800c6fa:	f10d 0407 	add.w	r4, sp, #7
 800c6fe:	46a4      	mov	ip, r4
 800c700:	270a      	movs	r7, #10
 800c702:	46a6      	mov	lr, r4
 800c704:	460a      	mov	r2, r1
 800c706:	fb91 f6f7 	sdiv	r6, r1, r7
 800c70a:	fb07 1516 	mls	r5, r7, r6, r1
 800c70e:	3530      	adds	r5, #48	; 0x30
 800c710:	2a63      	cmp	r2, #99	; 0x63
 800c712:	f104 34ff 	add.w	r4, r4, #4294967295
 800c716:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c71a:	4631      	mov	r1, r6
 800c71c:	dcf1      	bgt.n	800c702 <__exponent+0x22>
 800c71e:	3130      	adds	r1, #48	; 0x30
 800c720:	f1ae 0502 	sub.w	r5, lr, #2
 800c724:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c728:	1c44      	adds	r4, r0, #1
 800c72a:	4629      	mov	r1, r5
 800c72c:	4561      	cmp	r1, ip
 800c72e:	d30a      	bcc.n	800c746 <__exponent+0x66>
 800c730:	f10d 0209 	add.w	r2, sp, #9
 800c734:	eba2 020e 	sub.w	r2, r2, lr
 800c738:	4565      	cmp	r5, ip
 800c73a:	bf88      	it	hi
 800c73c:	2200      	movhi	r2, #0
 800c73e:	4413      	add	r3, r2
 800c740:	1a18      	subs	r0, r3, r0
 800c742:	b003      	add	sp, #12
 800c744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c746:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c74a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c74e:	e7ed      	b.n	800c72c <__exponent+0x4c>
 800c750:	2330      	movs	r3, #48	; 0x30
 800c752:	3130      	adds	r1, #48	; 0x30
 800c754:	7083      	strb	r3, [r0, #2]
 800c756:	70c1      	strb	r1, [r0, #3]
 800c758:	1d03      	adds	r3, r0, #4
 800c75a:	e7f1      	b.n	800c740 <__exponent+0x60>

0800c75c <_printf_float>:
 800c75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c760:	ed2d 8b02 	vpush	{d8}
 800c764:	b08d      	sub	sp, #52	; 0x34
 800c766:	460c      	mov	r4, r1
 800c768:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c76c:	4616      	mov	r6, r2
 800c76e:	461f      	mov	r7, r3
 800c770:	4605      	mov	r5, r0
 800c772:	f003 f98b 	bl	800fa8c <_localeconv_r>
 800c776:	f8d0 a000 	ldr.w	sl, [r0]
 800c77a:	4650      	mov	r0, sl
 800c77c:	f7f3 fd38 	bl	80001f0 <strlen>
 800c780:	2300      	movs	r3, #0
 800c782:	930a      	str	r3, [sp, #40]	; 0x28
 800c784:	6823      	ldr	r3, [r4, #0]
 800c786:	9305      	str	r3, [sp, #20]
 800c788:	f8d8 3000 	ldr.w	r3, [r8]
 800c78c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c790:	3307      	adds	r3, #7
 800c792:	f023 0307 	bic.w	r3, r3, #7
 800c796:	f103 0208 	add.w	r2, r3, #8
 800c79a:	f8c8 2000 	str.w	r2, [r8]
 800c79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c7a6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c7aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c7ae:	9307      	str	r3, [sp, #28]
 800c7b0:	f8cd 8018 	str.w	r8, [sp, #24]
 800c7b4:	ee08 0a10 	vmov	s16, r0
 800c7b8:	4b9f      	ldr	r3, [pc, #636]	; (800ca38 <_printf_float+0x2dc>)
 800c7ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c7be:	f04f 32ff 	mov.w	r2, #4294967295
 800c7c2:	f7f4 f9c3 	bl	8000b4c <__aeabi_dcmpun>
 800c7c6:	bb88      	cbnz	r0, 800c82c <_printf_float+0xd0>
 800c7c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c7cc:	4b9a      	ldr	r3, [pc, #616]	; (800ca38 <_printf_float+0x2dc>)
 800c7ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c7d2:	f7f4 f99d 	bl	8000b10 <__aeabi_dcmple>
 800c7d6:	bb48      	cbnz	r0, 800c82c <_printf_float+0xd0>
 800c7d8:	2200      	movs	r2, #0
 800c7da:	2300      	movs	r3, #0
 800c7dc:	4640      	mov	r0, r8
 800c7de:	4649      	mov	r1, r9
 800c7e0:	f7f4 f98c 	bl	8000afc <__aeabi_dcmplt>
 800c7e4:	b110      	cbz	r0, 800c7ec <_printf_float+0x90>
 800c7e6:	232d      	movs	r3, #45	; 0x2d
 800c7e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7ec:	4b93      	ldr	r3, [pc, #588]	; (800ca3c <_printf_float+0x2e0>)
 800c7ee:	4894      	ldr	r0, [pc, #592]	; (800ca40 <_printf_float+0x2e4>)
 800c7f0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c7f4:	bf94      	ite	ls
 800c7f6:	4698      	movls	r8, r3
 800c7f8:	4680      	movhi	r8, r0
 800c7fa:	2303      	movs	r3, #3
 800c7fc:	6123      	str	r3, [r4, #16]
 800c7fe:	9b05      	ldr	r3, [sp, #20]
 800c800:	f023 0204 	bic.w	r2, r3, #4
 800c804:	6022      	str	r2, [r4, #0]
 800c806:	f04f 0900 	mov.w	r9, #0
 800c80a:	9700      	str	r7, [sp, #0]
 800c80c:	4633      	mov	r3, r6
 800c80e:	aa0b      	add	r2, sp, #44	; 0x2c
 800c810:	4621      	mov	r1, r4
 800c812:	4628      	mov	r0, r5
 800c814:	f000 f9d8 	bl	800cbc8 <_printf_common>
 800c818:	3001      	adds	r0, #1
 800c81a:	f040 8090 	bne.w	800c93e <_printf_float+0x1e2>
 800c81e:	f04f 30ff 	mov.w	r0, #4294967295
 800c822:	b00d      	add	sp, #52	; 0x34
 800c824:	ecbd 8b02 	vpop	{d8}
 800c828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c82c:	4642      	mov	r2, r8
 800c82e:	464b      	mov	r3, r9
 800c830:	4640      	mov	r0, r8
 800c832:	4649      	mov	r1, r9
 800c834:	f7f4 f98a 	bl	8000b4c <__aeabi_dcmpun>
 800c838:	b140      	cbz	r0, 800c84c <_printf_float+0xf0>
 800c83a:	464b      	mov	r3, r9
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	bfbc      	itt	lt
 800c840:	232d      	movlt	r3, #45	; 0x2d
 800c842:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c846:	487f      	ldr	r0, [pc, #508]	; (800ca44 <_printf_float+0x2e8>)
 800c848:	4b7f      	ldr	r3, [pc, #508]	; (800ca48 <_printf_float+0x2ec>)
 800c84a:	e7d1      	b.n	800c7f0 <_printf_float+0x94>
 800c84c:	6863      	ldr	r3, [r4, #4]
 800c84e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c852:	9206      	str	r2, [sp, #24]
 800c854:	1c5a      	adds	r2, r3, #1
 800c856:	d13f      	bne.n	800c8d8 <_printf_float+0x17c>
 800c858:	2306      	movs	r3, #6
 800c85a:	6063      	str	r3, [r4, #4]
 800c85c:	9b05      	ldr	r3, [sp, #20]
 800c85e:	6861      	ldr	r1, [r4, #4]
 800c860:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c864:	2300      	movs	r3, #0
 800c866:	9303      	str	r3, [sp, #12]
 800c868:	ab0a      	add	r3, sp, #40	; 0x28
 800c86a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c86e:	ab09      	add	r3, sp, #36	; 0x24
 800c870:	ec49 8b10 	vmov	d0, r8, r9
 800c874:	9300      	str	r3, [sp, #0]
 800c876:	6022      	str	r2, [r4, #0]
 800c878:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c87c:	4628      	mov	r0, r5
 800c87e:	f7ff fecd 	bl	800c61c <__cvt>
 800c882:	9b06      	ldr	r3, [sp, #24]
 800c884:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c886:	2b47      	cmp	r3, #71	; 0x47
 800c888:	4680      	mov	r8, r0
 800c88a:	d108      	bne.n	800c89e <_printf_float+0x142>
 800c88c:	1cc8      	adds	r0, r1, #3
 800c88e:	db02      	blt.n	800c896 <_printf_float+0x13a>
 800c890:	6863      	ldr	r3, [r4, #4]
 800c892:	4299      	cmp	r1, r3
 800c894:	dd41      	ble.n	800c91a <_printf_float+0x1be>
 800c896:	f1ab 0b02 	sub.w	fp, fp, #2
 800c89a:	fa5f fb8b 	uxtb.w	fp, fp
 800c89e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c8a2:	d820      	bhi.n	800c8e6 <_printf_float+0x18a>
 800c8a4:	3901      	subs	r1, #1
 800c8a6:	465a      	mov	r2, fp
 800c8a8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c8ac:	9109      	str	r1, [sp, #36]	; 0x24
 800c8ae:	f7ff ff17 	bl	800c6e0 <__exponent>
 800c8b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c8b4:	1813      	adds	r3, r2, r0
 800c8b6:	2a01      	cmp	r2, #1
 800c8b8:	4681      	mov	r9, r0
 800c8ba:	6123      	str	r3, [r4, #16]
 800c8bc:	dc02      	bgt.n	800c8c4 <_printf_float+0x168>
 800c8be:	6822      	ldr	r2, [r4, #0]
 800c8c0:	07d2      	lsls	r2, r2, #31
 800c8c2:	d501      	bpl.n	800c8c8 <_printf_float+0x16c>
 800c8c4:	3301      	adds	r3, #1
 800c8c6:	6123      	str	r3, [r4, #16]
 800c8c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d09c      	beq.n	800c80a <_printf_float+0xae>
 800c8d0:	232d      	movs	r3, #45	; 0x2d
 800c8d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8d6:	e798      	b.n	800c80a <_printf_float+0xae>
 800c8d8:	9a06      	ldr	r2, [sp, #24]
 800c8da:	2a47      	cmp	r2, #71	; 0x47
 800c8dc:	d1be      	bne.n	800c85c <_printf_float+0x100>
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d1bc      	bne.n	800c85c <_printf_float+0x100>
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	e7b9      	b.n	800c85a <_printf_float+0xfe>
 800c8e6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c8ea:	d118      	bne.n	800c91e <_printf_float+0x1c2>
 800c8ec:	2900      	cmp	r1, #0
 800c8ee:	6863      	ldr	r3, [r4, #4]
 800c8f0:	dd0b      	ble.n	800c90a <_printf_float+0x1ae>
 800c8f2:	6121      	str	r1, [r4, #16]
 800c8f4:	b913      	cbnz	r3, 800c8fc <_printf_float+0x1a0>
 800c8f6:	6822      	ldr	r2, [r4, #0]
 800c8f8:	07d0      	lsls	r0, r2, #31
 800c8fa:	d502      	bpl.n	800c902 <_printf_float+0x1a6>
 800c8fc:	3301      	adds	r3, #1
 800c8fe:	440b      	add	r3, r1
 800c900:	6123      	str	r3, [r4, #16]
 800c902:	65a1      	str	r1, [r4, #88]	; 0x58
 800c904:	f04f 0900 	mov.w	r9, #0
 800c908:	e7de      	b.n	800c8c8 <_printf_float+0x16c>
 800c90a:	b913      	cbnz	r3, 800c912 <_printf_float+0x1b6>
 800c90c:	6822      	ldr	r2, [r4, #0]
 800c90e:	07d2      	lsls	r2, r2, #31
 800c910:	d501      	bpl.n	800c916 <_printf_float+0x1ba>
 800c912:	3302      	adds	r3, #2
 800c914:	e7f4      	b.n	800c900 <_printf_float+0x1a4>
 800c916:	2301      	movs	r3, #1
 800c918:	e7f2      	b.n	800c900 <_printf_float+0x1a4>
 800c91a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c91e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c920:	4299      	cmp	r1, r3
 800c922:	db05      	blt.n	800c930 <_printf_float+0x1d4>
 800c924:	6823      	ldr	r3, [r4, #0]
 800c926:	6121      	str	r1, [r4, #16]
 800c928:	07d8      	lsls	r0, r3, #31
 800c92a:	d5ea      	bpl.n	800c902 <_printf_float+0x1a6>
 800c92c:	1c4b      	adds	r3, r1, #1
 800c92e:	e7e7      	b.n	800c900 <_printf_float+0x1a4>
 800c930:	2900      	cmp	r1, #0
 800c932:	bfd4      	ite	le
 800c934:	f1c1 0202 	rsble	r2, r1, #2
 800c938:	2201      	movgt	r2, #1
 800c93a:	4413      	add	r3, r2
 800c93c:	e7e0      	b.n	800c900 <_printf_float+0x1a4>
 800c93e:	6823      	ldr	r3, [r4, #0]
 800c940:	055a      	lsls	r2, r3, #21
 800c942:	d407      	bmi.n	800c954 <_printf_float+0x1f8>
 800c944:	6923      	ldr	r3, [r4, #16]
 800c946:	4642      	mov	r2, r8
 800c948:	4631      	mov	r1, r6
 800c94a:	4628      	mov	r0, r5
 800c94c:	47b8      	blx	r7
 800c94e:	3001      	adds	r0, #1
 800c950:	d12c      	bne.n	800c9ac <_printf_float+0x250>
 800c952:	e764      	b.n	800c81e <_printf_float+0xc2>
 800c954:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c958:	f240 80e0 	bls.w	800cb1c <_printf_float+0x3c0>
 800c95c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c960:	2200      	movs	r2, #0
 800c962:	2300      	movs	r3, #0
 800c964:	f7f4 f8c0 	bl	8000ae8 <__aeabi_dcmpeq>
 800c968:	2800      	cmp	r0, #0
 800c96a:	d034      	beq.n	800c9d6 <_printf_float+0x27a>
 800c96c:	4a37      	ldr	r2, [pc, #220]	; (800ca4c <_printf_float+0x2f0>)
 800c96e:	2301      	movs	r3, #1
 800c970:	4631      	mov	r1, r6
 800c972:	4628      	mov	r0, r5
 800c974:	47b8      	blx	r7
 800c976:	3001      	adds	r0, #1
 800c978:	f43f af51 	beq.w	800c81e <_printf_float+0xc2>
 800c97c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c980:	429a      	cmp	r2, r3
 800c982:	db02      	blt.n	800c98a <_printf_float+0x22e>
 800c984:	6823      	ldr	r3, [r4, #0]
 800c986:	07d8      	lsls	r0, r3, #31
 800c988:	d510      	bpl.n	800c9ac <_printf_float+0x250>
 800c98a:	ee18 3a10 	vmov	r3, s16
 800c98e:	4652      	mov	r2, sl
 800c990:	4631      	mov	r1, r6
 800c992:	4628      	mov	r0, r5
 800c994:	47b8      	blx	r7
 800c996:	3001      	adds	r0, #1
 800c998:	f43f af41 	beq.w	800c81e <_printf_float+0xc2>
 800c99c:	f04f 0800 	mov.w	r8, #0
 800c9a0:	f104 091a 	add.w	r9, r4, #26
 800c9a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9a6:	3b01      	subs	r3, #1
 800c9a8:	4543      	cmp	r3, r8
 800c9aa:	dc09      	bgt.n	800c9c0 <_printf_float+0x264>
 800c9ac:	6823      	ldr	r3, [r4, #0]
 800c9ae:	079b      	lsls	r3, r3, #30
 800c9b0:	f100 8105 	bmi.w	800cbbe <_printf_float+0x462>
 800c9b4:	68e0      	ldr	r0, [r4, #12]
 800c9b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9b8:	4298      	cmp	r0, r3
 800c9ba:	bfb8      	it	lt
 800c9bc:	4618      	movlt	r0, r3
 800c9be:	e730      	b.n	800c822 <_printf_float+0xc6>
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	464a      	mov	r2, r9
 800c9c4:	4631      	mov	r1, r6
 800c9c6:	4628      	mov	r0, r5
 800c9c8:	47b8      	blx	r7
 800c9ca:	3001      	adds	r0, #1
 800c9cc:	f43f af27 	beq.w	800c81e <_printf_float+0xc2>
 800c9d0:	f108 0801 	add.w	r8, r8, #1
 800c9d4:	e7e6      	b.n	800c9a4 <_printf_float+0x248>
 800c9d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	dc39      	bgt.n	800ca50 <_printf_float+0x2f4>
 800c9dc:	4a1b      	ldr	r2, [pc, #108]	; (800ca4c <_printf_float+0x2f0>)
 800c9de:	2301      	movs	r3, #1
 800c9e0:	4631      	mov	r1, r6
 800c9e2:	4628      	mov	r0, r5
 800c9e4:	47b8      	blx	r7
 800c9e6:	3001      	adds	r0, #1
 800c9e8:	f43f af19 	beq.w	800c81e <_printf_float+0xc2>
 800c9ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c9f0:	4313      	orrs	r3, r2
 800c9f2:	d102      	bne.n	800c9fa <_printf_float+0x29e>
 800c9f4:	6823      	ldr	r3, [r4, #0]
 800c9f6:	07d9      	lsls	r1, r3, #31
 800c9f8:	d5d8      	bpl.n	800c9ac <_printf_float+0x250>
 800c9fa:	ee18 3a10 	vmov	r3, s16
 800c9fe:	4652      	mov	r2, sl
 800ca00:	4631      	mov	r1, r6
 800ca02:	4628      	mov	r0, r5
 800ca04:	47b8      	blx	r7
 800ca06:	3001      	adds	r0, #1
 800ca08:	f43f af09 	beq.w	800c81e <_printf_float+0xc2>
 800ca0c:	f04f 0900 	mov.w	r9, #0
 800ca10:	f104 0a1a 	add.w	sl, r4, #26
 800ca14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca16:	425b      	negs	r3, r3
 800ca18:	454b      	cmp	r3, r9
 800ca1a:	dc01      	bgt.n	800ca20 <_printf_float+0x2c4>
 800ca1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca1e:	e792      	b.n	800c946 <_printf_float+0x1ea>
 800ca20:	2301      	movs	r3, #1
 800ca22:	4652      	mov	r2, sl
 800ca24:	4631      	mov	r1, r6
 800ca26:	4628      	mov	r0, r5
 800ca28:	47b8      	blx	r7
 800ca2a:	3001      	adds	r0, #1
 800ca2c:	f43f aef7 	beq.w	800c81e <_printf_float+0xc2>
 800ca30:	f109 0901 	add.w	r9, r9, #1
 800ca34:	e7ee      	b.n	800ca14 <_printf_float+0x2b8>
 800ca36:	bf00      	nop
 800ca38:	7fefffff 	.word	0x7fefffff
 800ca3c:	08010e60 	.word	0x08010e60
 800ca40:	08010e64 	.word	0x08010e64
 800ca44:	08010e6c 	.word	0x08010e6c
 800ca48:	08010e68 	.word	0x08010e68
 800ca4c:	08010e70 	.word	0x08010e70
 800ca50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ca54:	429a      	cmp	r2, r3
 800ca56:	bfa8      	it	ge
 800ca58:	461a      	movge	r2, r3
 800ca5a:	2a00      	cmp	r2, #0
 800ca5c:	4691      	mov	r9, r2
 800ca5e:	dc37      	bgt.n	800cad0 <_printf_float+0x374>
 800ca60:	f04f 0b00 	mov.w	fp, #0
 800ca64:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ca68:	f104 021a 	add.w	r2, r4, #26
 800ca6c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ca6e:	9305      	str	r3, [sp, #20]
 800ca70:	eba3 0309 	sub.w	r3, r3, r9
 800ca74:	455b      	cmp	r3, fp
 800ca76:	dc33      	bgt.n	800cae0 <_printf_float+0x384>
 800ca78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca7c:	429a      	cmp	r2, r3
 800ca7e:	db3b      	blt.n	800caf8 <_printf_float+0x39c>
 800ca80:	6823      	ldr	r3, [r4, #0]
 800ca82:	07da      	lsls	r2, r3, #31
 800ca84:	d438      	bmi.n	800caf8 <_printf_float+0x39c>
 800ca86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca88:	9b05      	ldr	r3, [sp, #20]
 800ca8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ca8c:	1ad3      	subs	r3, r2, r3
 800ca8e:	eba2 0901 	sub.w	r9, r2, r1
 800ca92:	4599      	cmp	r9, r3
 800ca94:	bfa8      	it	ge
 800ca96:	4699      	movge	r9, r3
 800ca98:	f1b9 0f00 	cmp.w	r9, #0
 800ca9c:	dc35      	bgt.n	800cb0a <_printf_float+0x3ae>
 800ca9e:	f04f 0800 	mov.w	r8, #0
 800caa2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800caa6:	f104 0a1a 	add.w	sl, r4, #26
 800caaa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800caae:	1a9b      	subs	r3, r3, r2
 800cab0:	eba3 0309 	sub.w	r3, r3, r9
 800cab4:	4543      	cmp	r3, r8
 800cab6:	f77f af79 	ble.w	800c9ac <_printf_float+0x250>
 800caba:	2301      	movs	r3, #1
 800cabc:	4652      	mov	r2, sl
 800cabe:	4631      	mov	r1, r6
 800cac0:	4628      	mov	r0, r5
 800cac2:	47b8      	blx	r7
 800cac4:	3001      	adds	r0, #1
 800cac6:	f43f aeaa 	beq.w	800c81e <_printf_float+0xc2>
 800caca:	f108 0801 	add.w	r8, r8, #1
 800cace:	e7ec      	b.n	800caaa <_printf_float+0x34e>
 800cad0:	4613      	mov	r3, r2
 800cad2:	4631      	mov	r1, r6
 800cad4:	4642      	mov	r2, r8
 800cad6:	4628      	mov	r0, r5
 800cad8:	47b8      	blx	r7
 800cada:	3001      	adds	r0, #1
 800cadc:	d1c0      	bne.n	800ca60 <_printf_float+0x304>
 800cade:	e69e      	b.n	800c81e <_printf_float+0xc2>
 800cae0:	2301      	movs	r3, #1
 800cae2:	4631      	mov	r1, r6
 800cae4:	4628      	mov	r0, r5
 800cae6:	9205      	str	r2, [sp, #20]
 800cae8:	47b8      	blx	r7
 800caea:	3001      	adds	r0, #1
 800caec:	f43f ae97 	beq.w	800c81e <_printf_float+0xc2>
 800caf0:	9a05      	ldr	r2, [sp, #20]
 800caf2:	f10b 0b01 	add.w	fp, fp, #1
 800caf6:	e7b9      	b.n	800ca6c <_printf_float+0x310>
 800caf8:	ee18 3a10 	vmov	r3, s16
 800cafc:	4652      	mov	r2, sl
 800cafe:	4631      	mov	r1, r6
 800cb00:	4628      	mov	r0, r5
 800cb02:	47b8      	blx	r7
 800cb04:	3001      	adds	r0, #1
 800cb06:	d1be      	bne.n	800ca86 <_printf_float+0x32a>
 800cb08:	e689      	b.n	800c81e <_printf_float+0xc2>
 800cb0a:	9a05      	ldr	r2, [sp, #20]
 800cb0c:	464b      	mov	r3, r9
 800cb0e:	4442      	add	r2, r8
 800cb10:	4631      	mov	r1, r6
 800cb12:	4628      	mov	r0, r5
 800cb14:	47b8      	blx	r7
 800cb16:	3001      	adds	r0, #1
 800cb18:	d1c1      	bne.n	800ca9e <_printf_float+0x342>
 800cb1a:	e680      	b.n	800c81e <_printf_float+0xc2>
 800cb1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb1e:	2a01      	cmp	r2, #1
 800cb20:	dc01      	bgt.n	800cb26 <_printf_float+0x3ca>
 800cb22:	07db      	lsls	r3, r3, #31
 800cb24:	d538      	bpl.n	800cb98 <_printf_float+0x43c>
 800cb26:	2301      	movs	r3, #1
 800cb28:	4642      	mov	r2, r8
 800cb2a:	4631      	mov	r1, r6
 800cb2c:	4628      	mov	r0, r5
 800cb2e:	47b8      	blx	r7
 800cb30:	3001      	adds	r0, #1
 800cb32:	f43f ae74 	beq.w	800c81e <_printf_float+0xc2>
 800cb36:	ee18 3a10 	vmov	r3, s16
 800cb3a:	4652      	mov	r2, sl
 800cb3c:	4631      	mov	r1, r6
 800cb3e:	4628      	mov	r0, r5
 800cb40:	47b8      	blx	r7
 800cb42:	3001      	adds	r0, #1
 800cb44:	f43f ae6b 	beq.w	800c81e <_printf_float+0xc2>
 800cb48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	2300      	movs	r3, #0
 800cb50:	f7f3 ffca 	bl	8000ae8 <__aeabi_dcmpeq>
 800cb54:	b9d8      	cbnz	r0, 800cb8e <_printf_float+0x432>
 800cb56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb58:	f108 0201 	add.w	r2, r8, #1
 800cb5c:	3b01      	subs	r3, #1
 800cb5e:	4631      	mov	r1, r6
 800cb60:	4628      	mov	r0, r5
 800cb62:	47b8      	blx	r7
 800cb64:	3001      	adds	r0, #1
 800cb66:	d10e      	bne.n	800cb86 <_printf_float+0x42a>
 800cb68:	e659      	b.n	800c81e <_printf_float+0xc2>
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	4652      	mov	r2, sl
 800cb6e:	4631      	mov	r1, r6
 800cb70:	4628      	mov	r0, r5
 800cb72:	47b8      	blx	r7
 800cb74:	3001      	adds	r0, #1
 800cb76:	f43f ae52 	beq.w	800c81e <_printf_float+0xc2>
 800cb7a:	f108 0801 	add.w	r8, r8, #1
 800cb7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb80:	3b01      	subs	r3, #1
 800cb82:	4543      	cmp	r3, r8
 800cb84:	dcf1      	bgt.n	800cb6a <_printf_float+0x40e>
 800cb86:	464b      	mov	r3, r9
 800cb88:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cb8c:	e6dc      	b.n	800c948 <_printf_float+0x1ec>
 800cb8e:	f04f 0800 	mov.w	r8, #0
 800cb92:	f104 0a1a 	add.w	sl, r4, #26
 800cb96:	e7f2      	b.n	800cb7e <_printf_float+0x422>
 800cb98:	2301      	movs	r3, #1
 800cb9a:	4642      	mov	r2, r8
 800cb9c:	e7df      	b.n	800cb5e <_printf_float+0x402>
 800cb9e:	2301      	movs	r3, #1
 800cba0:	464a      	mov	r2, r9
 800cba2:	4631      	mov	r1, r6
 800cba4:	4628      	mov	r0, r5
 800cba6:	47b8      	blx	r7
 800cba8:	3001      	adds	r0, #1
 800cbaa:	f43f ae38 	beq.w	800c81e <_printf_float+0xc2>
 800cbae:	f108 0801 	add.w	r8, r8, #1
 800cbb2:	68e3      	ldr	r3, [r4, #12]
 800cbb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cbb6:	1a5b      	subs	r3, r3, r1
 800cbb8:	4543      	cmp	r3, r8
 800cbba:	dcf0      	bgt.n	800cb9e <_printf_float+0x442>
 800cbbc:	e6fa      	b.n	800c9b4 <_printf_float+0x258>
 800cbbe:	f04f 0800 	mov.w	r8, #0
 800cbc2:	f104 0919 	add.w	r9, r4, #25
 800cbc6:	e7f4      	b.n	800cbb2 <_printf_float+0x456>

0800cbc8 <_printf_common>:
 800cbc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbcc:	4616      	mov	r6, r2
 800cbce:	4699      	mov	r9, r3
 800cbd0:	688a      	ldr	r2, [r1, #8]
 800cbd2:	690b      	ldr	r3, [r1, #16]
 800cbd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cbd8:	4293      	cmp	r3, r2
 800cbda:	bfb8      	it	lt
 800cbdc:	4613      	movlt	r3, r2
 800cbde:	6033      	str	r3, [r6, #0]
 800cbe0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cbe4:	4607      	mov	r7, r0
 800cbe6:	460c      	mov	r4, r1
 800cbe8:	b10a      	cbz	r2, 800cbee <_printf_common+0x26>
 800cbea:	3301      	adds	r3, #1
 800cbec:	6033      	str	r3, [r6, #0]
 800cbee:	6823      	ldr	r3, [r4, #0]
 800cbf0:	0699      	lsls	r1, r3, #26
 800cbf2:	bf42      	ittt	mi
 800cbf4:	6833      	ldrmi	r3, [r6, #0]
 800cbf6:	3302      	addmi	r3, #2
 800cbf8:	6033      	strmi	r3, [r6, #0]
 800cbfa:	6825      	ldr	r5, [r4, #0]
 800cbfc:	f015 0506 	ands.w	r5, r5, #6
 800cc00:	d106      	bne.n	800cc10 <_printf_common+0x48>
 800cc02:	f104 0a19 	add.w	sl, r4, #25
 800cc06:	68e3      	ldr	r3, [r4, #12]
 800cc08:	6832      	ldr	r2, [r6, #0]
 800cc0a:	1a9b      	subs	r3, r3, r2
 800cc0c:	42ab      	cmp	r3, r5
 800cc0e:	dc26      	bgt.n	800cc5e <_printf_common+0x96>
 800cc10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cc14:	1e13      	subs	r3, r2, #0
 800cc16:	6822      	ldr	r2, [r4, #0]
 800cc18:	bf18      	it	ne
 800cc1a:	2301      	movne	r3, #1
 800cc1c:	0692      	lsls	r2, r2, #26
 800cc1e:	d42b      	bmi.n	800cc78 <_printf_common+0xb0>
 800cc20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cc24:	4649      	mov	r1, r9
 800cc26:	4638      	mov	r0, r7
 800cc28:	47c0      	blx	r8
 800cc2a:	3001      	adds	r0, #1
 800cc2c:	d01e      	beq.n	800cc6c <_printf_common+0xa4>
 800cc2e:	6823      	ldr	r3, [r4, #0]
 800cc30:	68e5      	ldr	r5, [r4, #12]
 800cc32:	6832      	ldr	r2, [r6, #0]
 800cc34:	f003 0306 	and.w	r3, r3, #6
 800cc38:	2b04      	cmp	r3, #4
 800cc3a:	bf08      	it	eq
 800cc3c:	1aad      	subeq	r5, r5, r2
 800cc3e:	68a3      	ldr	r3, [r4, #8]
 800cc40:	6922      	ldr	r2, [r4, #16]
 800cc42:	bf0c      	ite	eq
 800cc44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cc48:	2500      	movne	r5, #0
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	bfc4      	itt	gt
 800cc4e:	1a9b      	subgt	r3, r3, r2
 800cc50:	18ed      	addgt	r5, r5, r3
 800cc52:	2600      	movs	r6, #0
 800cc54:	341a      	adds	r4, #26
 800cc56:	42b5      	cmp	r5, r6
 800cc58:	d11a      	bne.n	800cc90 <_printf_common+0xc8>
 800cc5a:	2000      	movs	r0, #0
 800cc5c:	e008      	b.n	800cc70 <_printf_common+0xa8>
 800cc5e:	2301      	movs	r3, #1
 800cc60:	4652      	mov	r2, sl
 800cc62:	4649      	mov	r1, r9
 800cc64:	4638      	mov	r0, r7
 800cc66:	47c0      	blx	r8
 800cc68:	3001      	adds	r0, #1
 800cc6a:	d103      	bne.n	800cc74 <_printf_common+0xac>
 800cc6c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc74:	3501      	adds	r5, #1
 800cc76:	e7c6      	b.n	800cc06 <_printf_common+0x3e>
 800cc78:	18e1      	adds	r1, r4, r3
 800cc7a:	1c5a      	adds	r2, r3, #1
 800cc7c:	2030      	movs	r0, #48	; 0x30
 800cc7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cc82:	4422      	add	r2, r4
 800cc84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cc88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cc8c:	3302      	adds	r3, #2
 800cc8e:	e7c7      	b.n	800cc20 <_printf_common+0x58>
 800cc90:	2301      	movs	r3, #1
 800cc92:	4622      	mov	r2, r4
 800cc94:	4649      	mov	r1, r9
 800cc96:	4638      	mov	r0, r7
 800cc98:	47c0      	blx	r8
 800cc9a:	3001      	adds	r0, #1
 800cc9c:	d0e6      	beq.n	800cc6c <_printf_common+0xa4>
 800cc9e:	3601      	adds	r6, #1
 800cca0:	e7d9      	b.n	800cc56 <_printf_common+0x8e>
	...

0800cca4 <_printf_i>:
 800cca4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cca8:	460c      	mov	r4, r1
 800ccaa:	4691      	mov	r9, r2
 800ccac:	7e27      	ldrb	r7, [r4, #24]
 800ccae:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ccb0:	2f78      	cmp	r7, #120	; 0x78
 800ccb2:	4680      	mov	r8, r0
 800ccb4:	469a      	mov	sl, r3
 800ccb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ccba:	d807      	bhi.n	800cccc <_printf_i+0x28>
 800ccbc:	2f62      	cmp	r7, #98	; 0x62
 800ccbe:	d80a      	bhi.n	800ccd6 <_printf_i+0x32>
 800ccc0:	2f00      	cmp	r7, #0
 800ccc2:	f000 80d8 	beq.w	800ce76 <_printf_i+0x1d2>
 800ccc6:	2f58      	cmp	r7, #88	; 0x58
 800ccc8:	f000 80a3 	beq.w	800ce12 <_printf_i+0x16e>
 800cccc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ccd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ccd4:	e03a      	b.n	800cd4c <_printf_i+0xa8>
 800ccd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ccda:	2b15      	cmp	r3, #21
 800ccdc:	d8f6      	bhi.n	800cccc <_printf_i+0x28>
 800ccde:	a001      	add	r0, pc, #4	; (adr r0, 800cce4 <_printf_i+0x40>)
 800cce0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800cce4:	0800cd3d 	.word	0x0800cd3d
 800cce8:	0800cd51 	.word	0x0800cd51
 800ccec:	0800cccd 	.word	0x0800cccd
 800ccf0:	0800cccd 	.word	0x0800cccd
 800ccf4:	0800cccd 	.word	0x0800cccd
 800ccf8:	0800cccd 	.word	0x0800cccd
 800ccfc:	0800cd51 	.word	0x0800cd51
 800cd00:	0800cccd 	.word	0x0800cccd
 800cd04:	0800cccd 	.word	0x0800cccd
 800cd08:	0800cccd 	.word	0x0800cccd
 800cd0c:	0800cccd 	.word	0x0800cccd
 800cd10:	0800ce5d 	.word	0x0800ce5d
 800cd14:	0800cd81 	.word	0x0800cd81
 800cd18:	0800ce3f 	.word	0x0800ce3f
 800cd1c:	0800cccd 	.word	0x0800cccd
 800cd20:	0800cccd 	.word	0x0800cccd
 800cd24:	0800ce7f 	.word	0x0800ce7f
 800cd28:	0800cccd 	.word	0x0800cccd
 800cd2c:	0800cd81 	.word	0x0800cd81
 800cd30:	0800cccd 	.word	0x0800cccd
 800cd34:	0800cccd 	.word	0x0800cccd
 800cd38:	0800ce47 	.word	0x0800ce47
 800cd3c:	680b      	ldr	r3, [r1, #0]
 800cd3e:	1d1a      	adds	r2, r3, #4
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	600a      	str	r2, [r1, #0]
 800cd44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cd48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	e0a3      	b.n	800ce98 <_printf_i+0x1f4>
 800cd50:	6825      	ldr	r5, [r4, #0]
 800cd52:	6808      	ldr	r0, [r1, #0]
 800cd54:	062e      	lsls	r6, r5, #24
 800cd56:	f100 0304 	add.w	r3, r0, #4
 800cd5a:	d50a      	bpl.n	800cd72 <_printf_i+0xce>
 800cd5c:	6805      	ldr	r5, [r0, #0]
 800cd5e:	600b      	str	r3, [r1, #0]
 800cd60:	2d00      	cmp	r5, #0
 800cd62:	da03      	bge.n	800cd6c <_printf_i+0xc8>
 800cd64:	232d      	movs	r3, #45	; 0x2d
 800cd66:	426d      	negs	r5, r5
 800cd68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd6c:	485e      	ldr	r0, [pc, #376]	; (800cee8 <_printf_i+0x244>)
 800cd6e:	230a      	movs	r3, #10
 800cd70:	e019      	b.n	800cda6 <_printf_i+0x102>
 800cd72:	f015 0f40 	tst.w	r5, #64	; 0x40
 800cd76:	6805      	ldr	r5, [r0, #0]
 800cd78:	600b      	str	r3, [r1, #0]
 800cd7a:	bf18      	it	ne
 800cd7c:	b22d      	sxthne	r5, r5
 800cd7e:	e7ef      	b.n	800cd60 <_printf_i+0xbc>
 800cd80:	680b      	ldr	r3, [r1, #0]
 800cd82:	6825      	ldr	r5, [r4, #0]
 800cd84:	1d18      	adds	r0, r3, #4
 800cd86:	6008      	str	r0, [r1, #0]
 800cd88:	0628      	lsls	r0, r5, #24
 800cd8a:	d501      	bpl.n	800cd90 <_printf_i+0xec>
 800cd8c:	681d      	ldr	r5, [r3, #0]
 800cd8e:	e002      	b.n	800cd96 <_printf_i+0xf2>
 800cd90:	0669      	lsls	r1, r5, #25
 800cd92:	d5fb      	bpl.n	800cd8c <_printf_i+0xe8>
 800cd94:	881d      	ldrh	r5, [r3, #0]
 800cd96:	4854      	ldr	r0, [pc, #336]	; (800cee8 <_printf_i+0x244>)
 800cd98:	2f6f      	cmp	r7, #111	; 0x6f
 800cd9a:	bf0c      	ite	eq
 800cd9c:	2308      	moveq	r3, #8
 800cd9e:	230a      	movne	r3, #10
 800cda0:	2100      	movs	r1, #0
 800cda2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cda6:	6866      	ldr	r6, [r4, #4]
 800cda8:	60a6      	str	r6, [r4, #8]
 800cdaa:	2e00      	cmp	r6, #0
 800cdac:	bfa2      	ittt	ge
 800cdae:	6821      	ldrge	r1, [r4, #0]
 800cdb0:	f021 0104 	bicge.w	r1, r1, #4
 800cdb4:	6021      	strge	r1, [r4, #0]
 800cdb6:	b90d      	cbnz	r5, 800cdbc <_printf_i+0x118>
 800cdb8:	2e00      	cmp	r6, #0
 800cdba:	d04d      	beq.n	800ce58 <_printf_i+0x1b4>
 800cdbc:	4616      	mov	r6, r2
 800cdbe:	fbb5 f1f3 	udiv	r1, r5, r3
 800cdc2:	fb03 5711 	mls	r7, r3, r1, r5
 800cdc6:	5dc7      	ldrb	r7, [r0, r7]
 800cdc8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cdcc:	462f      	mov	r7, r5
 800cdce:	42bb      	cmp	r3, r7
 800cdd0:	460d      	mov	r5, r1
 800cdd2:	d9f4      	bls.n	800cdbe <_printf_i+0x11a>
 800cdd4:	2b08      	cmp	r3, #8
 800cdd6:	d10b      	bne.n	800cdf0 <_printf_i+0x14c>
 800cdd8:	6823      	ldr	r3, [r4, #0]
 800cdda:	07df      	lsls	r7, r3, #31
 800cddc:	d508      	bpl.n	800cdf0 <_printf_i+0x14c>
 800cdde:	6923      	ldr	r3, [r4, #16]
 800cde0:	6861      	ldr	r1, [r4, #4]
 800cde2:	4299      	cmp	r1, r3
 800cde4:	bfde      	ittt	le
 800cde6:	2330      	movle	r3, #48	; 0x30
 800cde8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cdec:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cdf0:	1b92      	subs	r2, r2, r6
 800cdf2:	6122      	str	r2, [r4, #16]
 800cdf4:	f8cd a000 	str.w	sl, [sp]
 800cdf8:	464b      	mov	r3, r9
 800cdfa:	aa03      	add	r2, sp, #12
 800cdfc:	4621      	mov	r1, r4
 800cdfe:	4640      	mov	r0, r8
 800ce00:	f7ff fee2 	bl	800cbc8 <_printf_common>
 800ce04:	3001      	adds	r0, #1
 800ce06:	d14c      	bne.n	800cea2 <_printf_i+0x1fe>
 800ce08:	f04f 30ff 	mov.w	r0, #4294967295
 800ce0c:	b004      	add	sp, #16
 800ce0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce12:	4835      	ldr	r0, [pc, #212]	; (800cee8 <_printf_i+0x244>)
 800ce14:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ce18:	6823      	ldr	r3, [r4, #0]
 800ce1a:	680e      	ldr	r6, [r1, #0]
 800ce1c:	061f      	lsls	r7, r3, #24
 800ce1e:	f856 5b04 	ldr.w	r5, [r6], #4
 800ce22:	600e      	str	r6, [r1, #0]
 800ce24:	d514      	bpl.n	800ce50 <_printf_i+0x1ac>
 800ce26:	07d9      	lsls	r1, r3, #31
 800ce28:	bf44      	itt	mi
 800ce2a:	f043 0320 	orrmi.w	r3, r3, #32
 800ce2e:	6023      	strmi	r3, [r4, #0]
 800ce30:	b91d      	cbnz	r5, 800ce3a <_printf_i+0x196>
 800ce32:	6823      	ldr	r3, [r4, #0]
 800ce34:	f023 0320 	bic.w	r3, r3, #32
 800ce38:	6023      	str	r3, [r4, #0]
 800ce3a:	2310      	movs	r3, #16
 800ce3c:	e7b0      	b.n	800cda0 <_printf_i+0xfc>
 800ce3e:	6823      	ldr	r3, [r4, #0]
 800ce40:	f043 0320 	orr.w	r3, r3, #32
 800ce44:	6023      	str	r3, [r4, #0]
 800ce46:	2378      	movs	r3, #120	; 0x78
 800ce48:	4828      	ldr	r0, [pc, #160]	; (800ceec <_printf_i+0x248>)
 800ce4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ce4e:	e7e3      	b.n	800ce18 <_printf_i+0x174>
 800ce50:	065e      	lsls	r6, r3, #25
 800ce52:	bf48      	it	mi
 800ce54:	b2ad      	uxthmi	r5, r5
 800ce56:	e7e6      	b.n	800ce26 <_printf_i+0x182>
 800ce58:	4616      	mov	r6, r2
 800ce5a:	e7bb      	b.n	800cdd4 <_printf_i+0x130>
 800ce5c:	680b      	ldr	r3, [r1, #0]
 800ce5e:	6826      	ldr	r6, [r4, #0]
 800ce60:	6960      	ldr	r0, [r4, #20]
 800ce62:	1d1d      	adds	r5, r3, #4
 800ce64:	600d      	str	r5, [r1, #0]
 800ce66:	0635      	lsls	r5, r6, #24
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	d501      	bpl.n	800ce70 <_printf_i+0x1cc>
 800ce6c:	6018      	str	r0, [r3, #0]
 800ce6e:	e002      	b.n	800ce76 <_printf_i+0x1d2>
 800ce70:	0671      	lsls	r1, r6, #25
 800ce72:	d5fb      	bpl.n	800ce6c <_printf_i+0x1c8>
 800ce74:	8018      	strh	r0, [r3, #0]
 800ce76:	2300      	movs	r3, #0
 800ce78:	6123      	str	r3, [r4, #16]
 800ce7a:	4616      	mov	r6, r2
 800ce7c:	e7ba      	b.n	800cdf4 <_printf_i+0x150>
 800ce7e:	680b      	ldr	r3, [r1, #0]
 800ce80:	1d1a      	adds	r2, r3, #4
 800ce82:	600a      	str	r2, [r1, #0]
 800ce84:	681e      	ldr	r6, [r3, #0]
 800ce86:	6862      	ldr	r2, [r4, #4]
 800ce88:	2100      	movs	r1, #0
 800ce8a:	4630      	mov	r0, r6
 800ce8c:	f7f3 f9b8 	bl	8000200 <memchr>
 800ce90:	b108      	cbz	r0, 800ce96 <_printf_i+0x1f2>
 800ce92:	1b80      	subs	r0, r0, r6
 800ce94:	6060      	str	r0, [r4, #4]
 800ce96:	6863      	ldr	r3, [r4, #4]
 800ce98:	6123      	str	r3, [r4, #16]
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cea0:	e7a8      	b.n	800cdf4 <_printf_i+0x150>
 800cea2:	6923      	ldr	r3, [r4, #16]
 800cea4:	4632      	mov	r2, r6
 800cea6:	4649      	mov	r1, r9
 800cea8:	4640      	mov	r0, r8
 800ceaa:	47d0      	blx	sl
 800ceac:	3001      	adds	r0, #1
 800ceae:	d0ab      	beq.n	800ce08 <_printf_i+0x164>
 800ceb0:	6823      	ldr	r3, [r4, #0]
 800ceb2:	079b      	lsls	r3, r3, #30
 800ceb4:	d413      	bmi.n	800cede <_printf_i+0x23a>
 800ceb6:	68e0      	ldr	r0, [r4, #12]
 800ceb8:	9b03      	ldr	r3, [sp, #12]
 800ceba:	4298      	cmp	r0, r3
 800cebc:	bfb8      	it	lt
 800cebe:	4618      	movlt	r0, r3
 800cec0:	e7a4      	b.n	800ce0c <_printf_i+0x168>
 800cec2:	2301      	movs	r3, #1
 800cec4:	4632      	mov	r2, r6
 800cec6:	4649      	mov	r1, r9
 800cec8:	4640      	mov	r0, r8
 800ceca:	47d0      	blx	sl
 800cecc:	3001      	adds	r0, #1
 800cece:	d09b      	beq.n	800ce08 <_printf_i+0x164>
 800ced0:	3501      	adds	r5, #1
 800ced2:	68e3      	ldr	r3, [r4, #12]
 800ced4:	9903      	ldr	r1, [sp, #12]
 800ced6:	1a5b      	subs	r3, r3, r1
 800ced8:	42ab      	cmp	r3, r5
 800ceda:	dcf2      	bgt.n	800cec2 <_printf_i+0x21e>
 800cedc:	e7eb      	b.n	800ceb6 <_printf_i+0x212>
 800cede:	2500      	movs	r5, #0
 800cee0:	f104 0619 	add.w	r6, r4, #25
 800cee4:	e7f5      	b.n	800ced2 <_printf_i+0x22e>
 800cee6:	bf00      	nop
 800cee8:	08010e72 	.word	0x08010e72
 800ceec:	08010e83 	.word	0x08010e83

0800cef0 <_scanf_float>:
 800cef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cef4:	b087      	sub	sp, #28
 800cef6:	4617      	mov	r7, r2
 800cef8:	9303      	str	r3, [sp, #12]
 800cefa:	688b      	ldr	r3, [r1, #8]
 800cefc:	1e5a      	subs	r2, r3, #1
 800cefe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cf02:	bf83      	ittte	hi
 800cf04:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cf08:	195b      	addhi	r3, r3, r5
 800cf0a:	9302      	strhi	r3, [sp, #8]
 800cf0c:	2300      	movls	r3, #0
 800cf0e:	bf86      	itte	hi
 800cf10:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cf14:	608b      	strhi	r3, [r1, #8]
 800cf16:	9302      	strls	r3, [sp, #8]
 800cf18:	680b      	ldr	r3, [r1, #0]
 800cf1a:	468b      	mov	fp, r1
 800cf1c:	2500      	movs	r5, #0
 800cf1e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800cf22:	f84b 3b1c 	str.w	r3, [fp], #28
 800cf26:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cf2a:	4680      	mov	r8, r0
 800cf2c:	460c      	mov	r4, r1
 800cf2e:	465e      	mov	r6, fp
 800cf30:	46aa      	mov	sl, r5
 800cf32:	46a9      	mov	r9, r5
 800cf34:	9501      	str	r5, [sp, #4]
 800cf36:	68a2      	ldr	r2, [r4, #8]
 800cf38:	b152      	cbz	r2, 800cf50 <_scanf_float+0x60>
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	781b      	ldrb	r3, [r3, #0]
 800cf3e:	2b4e      	cmp	r3, #78	; 0x4e
 800cf40:	d864      	bhi.n	800d00c <_scanf_float+0x11c>
 800cf42:	2b40      	cmp	r3, #64	; 0x40
 800cf44:	d83c      	bhi.n	800cfc0 <_scanf_float+0xd0>
 800cf46:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800cf4a:	b2c8      	uxtb	r0, r1
 800cf4c:	280e      	cmp	r0, #14
 800cf4e:	d93a      	bls.n	800cfc6 <_scanf_float+0xd6>
 800cf50:	f1b9 0f00 	cmp.w	r9, #0
 800cf54:	d003      	beq.n	800cf5e <_scanf_float+0x6e>
 800cf56:	6823      	ldr	r3, [r4, #0]
 800cf58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf5c:	6023      	str	r3, [r4, #0]
 800cf5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cf62:	f1ba 0f01 	cmp.w	sl, #1
 800cf66:	f200 8113 	bhi.w	800d190 <_scanf_float+0x2a0>
 800cf6a:	455e      	cmp	r6, fp
 800cf6c:	f200 8105 	bhi.w	800d17a <_scanf_float+0x28a>
 800cf70:	2501      	movs	r5, #1
 800cf72:	4628      	mov	r0, r5
 800cf74:	b007      	add	sp, #28
 800cf76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf7a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800cf7e:	2a0d      	cmp	r2, #13
 800cf80:	d8e6      	bhi.n	800cf50 <_scanf_float+0x60>
 800cf82:	a101      	add	r1, pc, #4	; (adr r1, 800cf88 <_scanf_float+0x98>)
 800cf84:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cf88:	0800d0c7 	.word	0x0800d0c7
 800cf8c:	0800cf51 	.word	0x0800cf51
 800cf90:	0800cf51 	.word	0x0800cf51
 800cf94:	0800cf51 	.word	0x0800cf51
 800cf98:	0800d127 	.word	0x0800d127
 800cf9c:	0800d0ff 	.word	0x0800d0ff
 800cfa0:	0800cf51 	.word	0x0800cf51
 800cfa4:	0800cf51 	.word	0x0800cf51
 800cfa8:	0800d0d5 	.word	0x0800d0d5
 800cfac:	0800cf51 	.word	0x0800cf51
 800cfb0:	0800cf51 	.word	0x0800cf51
 800cfb4:	0800cf51 	.word	0x0800cf51
 800cfb8:	0800cf51 	.word	0x0800cf51
 800cfbc:	0800d08d 	.word	0x0800d08d
 800cfc0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800cfc4:	e7db      	b.n	800cf7e <_scanf_float+0x8e>
 800cfc6:	290e      	cmp	r1, #14
 800cfc8:	d8c2      	bhi.n	800cf50 <_scanf_float+0x60>
 800cfca:	a001      	add	r0, pc, #4	; (adr r0, 800cfd0 <_scanf_float+0xe0>)
 800cfcc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cfd0:	0800d07f 	.word	0x0800d07f
 800cfd4:	0800cf51 	.word	0x0800cf51
 800cfd8:	0800d07f 	.word	0x0800d07f
 800cfdc:	0800d113 	.word	0x0800d113
 800cfe0:	0800cf51 	.word	0x0800cf51
 800cfe4:	0800d02d 	.word	0x0800d02d
 800cfe8:	0800d069 	.word	0x0800d069
 800cfec:	0800d069 	.word	0x0800d069
 800cff0:	0800d069 	.word	0x0800d069
 800cff4:	0800d069 	.word	0x0800d069
 800cff8:	0800d069 	.word	0x0800d069
 800cffc:	0800d069 	.word	0x0800d069
 800d000:	0800d069 	.word	0x0800d069
 800d004:	0800d069 	.word	0x0800d069
 800d008:	0800d069 	.word	0x0800d069
 800d00c:	2b6e      	cmp	r3, #110	; 0x6e
 800d00e:	d809      	bhi.n	800d024 <_scanf_float+0x134>
 800d010:	2b60      	cmp	r3, #96	; 0x60
 800d012:	d8b2      	bhi.n	800cf7a <_scanf_float+0x8a>
 800d014:	2b54      	cmp	r3, #84	; 0x54
 800d016:	d077      	beq.n	800d108 <_scanf_float+0x218>
 800d018:	2b59      	cmp	r3, #89	; 0x59
 800d01a:	d199      	bne.n	800cf50 <_scanf_float+0x60>
 800d01c:	2d07      	cmp	r5, #7
 800d01e:	d197      	bne.n	800cf50 <_scanf_float+0x60>
 800d020:	2508      	movs	r5, #8
 800d022:	e029      	b.n	800d078 <_scanf_float+0x188>
 800d024:	2b74      	cmp	r3, #116	; 0x74
 800d026:	d06f      	beq.n	800d108 <_scanf_float+0x218>
 800d028:	2b79      	cmp	r3, #121	; 0x79
 800d02a:	e7f6      	b.n	800d01a <_scanf_float+0x12a>
 800d02c:	6821      	ldr	r1, [r4, #0]
 800d02e:	05c8      	lsls	r0, r1, #23
 800d030:	d51a      	bpl.n	800d068 <_scanf_float+0x178>
 800d032:	9b02      	ldr	r3, [sp, #8]
 800d034:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d038:	6021      	str	r1, [r4, #0]
 800d03a:	f109 0901 	add.w	r9, r9, #1
 800d03e:	b11b      	cbz	r3, 800d048 <_scanf_float+0x158>
 800d040:	3b01      	subs	r3, #1
 800d042:	3201      	adds	r2, #1
 800d044:	9302      	str	r3, [sp, #8]
 800d046:	60a2      	str	r2, [r4, #8]
 800d048:	68a3      	ldr	r3, [r4, #8]
 800d04a:	3b01      	subs	r3, #1
 800d04c:	60a3      	str	r3, [r4, #8]
 800d04e:	6923      	ldr	r3, [r4, #16]
 800d050:	3301      	adds	r3, #1
 800d052:	6123      	str	r3, [r4, #16]
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	3b01      	subs	r3, #1
 800d058:	2b00      	cmp	r3, #0
 800d05a:	607b      	str	r3, [r7, #4]
 800d05c:	f340 8084 	ble.w	800d168 <_scanf_float+0x278>
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	3301      	adds	r3, #1
 800d064:	603b      	str	r3, [r7, #0]
 800d066:	e766      	b.n	800cf36 <_scanf_float+0x46>
 800d068:	eb1a 0f05 	cmn.w	sl, r5
 800d06c:	f47f af70 	bne.w	800cf50 <_scanf_float+0x60>
 800d070:	6822      	ldr	r2, [r4, #0]
 800d072:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800d076:	6022      	str	r2, [r4, #0]
 800d078:	f806 3b01 	strb.w	r3, [r6], #1
 800d07c:	e7e4      	b.n	800d048 <_scanf_float+0x158>
 800d07e:	6822      	ldr	r2, [r4, #0]
 800d080:	0610      	lsls	r0, r2, #24
 800d082:	f57f af65 	bpl.w	800cf50 <_scanf_float+0x60>
 800d086:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d08a:	e7f4      	b.n	800d076 <_scanf_float+0x186>
 800d08c:	f1ba 0f00 	cmp.w	sl, #0
 800d090:	d10e      	bne.n	800d0b0 <_scanf_float+0x1c0>
 800d092:	f1b9 0f00 	cmp.w	r9, #0
 800d096:	d10e      	bne.n	800d0b6 <_scanf_float+0x1c6>
 800d098:	6822      	ldr	r2, [r4, #0]
 800d09a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d09e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d0a2:	d108      	bne.n	800d0b6 <_scanf_float+0x1c6>
 800d0a4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d0a8:	6022      	str	r2, [r4, #0]
 800d0aa:	f04f 0a01 	mov.w	sl, #1
 800d0ae:	e7e3      	b.n	800d078 <_scanf_float+0x188>
 800d0b0:	f1ba 0f02 	cmp.w	sl, #2
 800d0b4:	d055      	beq.n	800d162 <_scanf_float+0x272>
 800d0b6:	2d01      	cmp	r5, #1
 800d0b8:	d002      	beq.n	800d0c0 <_scanf_float+0x1d0>
 800d0ba:	2d04      	cmp	r5, #4
 800d0bc:	f47f af48 	bne.w	800cf50 <_scanf_float+0x60>
 800d0c0:	3501      	adds	r5, #1
 800d0c2:	b2ed      	uxtb	r5, r5
 800d0c4:	e7d8      	b.n	800d078 <_scanf_float+0x188>
 800d0c6:	f1ba 0f01 	cmp.w	sl, #1
 800d0ca:	f47f af41 	bne.w	800cf50 <_scanf_float+0x60>
 800d0ce:	f04f 0a02 	mov.w	sl, #2
 800d0d2:	e7d1      	b.n	800d078 <_scanf_float+0x188>
 800d0d4:	b97d      	cbnz	r5, 800d0f6 <_scanf_float+0x206>
 800d0d6:	f1b9 0f00 	cmp.w	r9, #0
 800d0da:	f47f af3c 	bne.w	800cf56 <_scanf_float+0x66>
 800d0de:	6822      	ldr	r2, [r4, #0]
 800d0e0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d0e4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d0e8:	f47f af39 	bne.w	800cf5e <_scanf_float+0x6e>
 800d0ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d0f0:	6022      	str	r2, [r4, #0]
 800d0f2:	2501      	movs	r5, #1
 800d0f4:	e7c0      	b.n	800d078 <_scanf_float+0x188>
 800d0f6:	2d03      	cmp	r5, #3
 800d0f8:	d0e2      	beq.n	800d0c0 <_scanf_float+0x1d0>
 800d0fa:	2d05      	cmp	r5, #5
 800d0fc:	e7de      	b.n	800d0bc <_scanf_float+0x1cc>
 800d0fe:	2d02      	cmp	r5, #2
 800d100:	f47f af26 	bne.w	800cf50 <_scanf_float+0x60>
 800d104:	2503      	movs	r5, #3
 800d106:	e7b7      	b.n	800d078 <_scanf_float+0x188>
 800d108:	2d06      	cmp	r5, #6
 800d10a:	f47f af21 	bne.w	800cf50 <_scanf_float+0x60>
 800d10e:	2507      	movs	r5, #7
 800d110:	e7b2      	b.n	800d078 <_scanf_float+0x188>
 800d112:	6822      	ldr	r2, [r4, #0]
 800d114:	0591      	lsls	r1, r2, #22
 800d116:	f57f af1b 	bpl.w	800cf50 <_scanf_float+0x60>
 800d11a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800d11e:	6022      	str	r2, [r4, #0]
 800d120:	f8cd 9004 	str.w	r9, [sp, #4]
 800d124:	e7a8      	b.n	800d078 <_scanf_float+0x188>
 800d126:	6822      	ldr	r2, [r4, #0]
 800d128:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800d12c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d130:	d006      	beq.n	800d140 <_scanf_float+0x250>
 800d132:	0550      	lsls	r0, r2, #21
 800d134:	f57f af0c 	bpl.w	800cf50 <_scanf_float+0x60>
 800d138:	f1b9 0f00 	cmp.w	r9, #0
 800d13c:	f43f af0f 	beq.w	800cf5e <_scanf_float+0x6e>
 800d140:	0591      	lsls	r1, r2, #22
 800d142:	bf58      	it	pl
 800d144:	9901      	ldrpl	r1, [sp, #4]
 800d146:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d14a:	bf58      	it	pl
 800d14c:	eba9 0101 	subpl.w	r1, r9, r1
 800d150:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800d154:	bf58      	it	pl
 800d156:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d15a:	6022      	str	r2, [r4, #0]
 800d15c:	f04f 0900 	mov.w	r9, #0
 800d160:	e78a      	b.n	800d078 <_scanf_float+0x188>
 800d162:	f04f 0a03 	mov.w	sl, #3
 800d166:	e787      	b.n	800d078 <_scanf_float+0x188>
 800d168:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d16c:	4639      	mov	r1, r7
 800d16e:	4640      	mov	r0, r8
 800d170:	4798      	blx	r3
 800d172:	2800      	cmp	r0, #0
 800d174:	f43f aedf 	beq.w	800cf36 <_scanf_float+0x46>
 800d178:	e6ea      	b.n	800cf50 <_scanf_float+0x60>
 800d17a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d17e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d182:	463a      	mov	r2, r7
 800d184:	4640      	mov	r0, r8
 800d186:	4798      	blx	r3
 800d188:	6923      	ldr	r3, [r4, #16]
 800d18a:	3b01      	subs	r3, #1
 800d18c:	6123      	str	r3, [r4, #16]
 800d18e:	e6ec      	b.n	800cf6a <_scanf_float+0x7a>
 800d190:	1e6b      	subs	r3, r5, #1
 800d192:	2b06      	cmp	r3, #6
 800d194:	d825      	bhi.n	800d1e2 <_scanf_float+0x2f2>
 800d196:	2d02      	cmp	r5, #2
 800d198:	d836      	bhi.n	800d208 <_scanf_float+0x318>
 800d19a:	455e      	cmp	r6, fp
 800d19c:	f67f aee8 	bls.w	800cf70 <_scanf_float+0x80>
 800d1a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d1a4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d1a8:	463a      	mov	r2, r7
 800d1aa:	4640      	mov	r0, r8
 800d1ac:	4798      	blx	r3
 800d1ae:	6923      	ldr	r3, [r4, #16]
 800d1b0:	3b01      	subs	r3, #1
 800d1b2:	6123      	str	r3, [r4, #16]
 800d1b4:	e7f1      	b.n	800d19a <_scanf_float+0x2aa>
 800d1b6:	9802      	ldr	r0, [sp, #8]
 800d1b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d1bc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800d1c0:	9002      	str	r0, [sp, #8]
 800d1c2:	463a      	mov	r2, r7
 800d1c4:	4640      	mov	r0, r8
 800d1c6:	4798      	blx	r3
 800d1c8:	6923      	ldr	r3, [r4, #16]
 800d1ca:	3b01      	subs	r3, #1
 800d1cc:	6123      	str	r3, [r4, #16]
 800d1ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d1d2:	fa5f fa8a 	uxtb.w	sl, sl
 800d1d6:	f1ba 0f02 	cmp.w	sl, #2
 800d1da:	d1ec      	bne.n	800d1b6 <_scanf_float+0x2c6>
 800d1dc:	3d03      	subs	r5, #3
 800d1de:	b2ed      	uxtb	r5, r5
 800d1e0:	1b76      	subs	r6, r6, r5
 800d1e2:	6823      	ldr	r3, [r4, #0]
 800d1e4:	05da      	lsls	r2, r3, #23
 800d1e6:	d52f      	bpl.n	800d248 <_scanf_float+0x358>
 800d1e8:	055b      	lsls	r3, r3, #21
 800d1ea:	d510      	bpl.n	800d20e <_scanf_float+0x31e>
 800d1ec:	455e      	cmp	r6, fp
 800d1ee:	f67f aebf 	bls.w	800cf70 <_scanf_float+0x80>
 800d1f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d1f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d1fa:	463a      	mov	r2, r7
 800d1fc:	4640      	mov	r0, r8
 800d1fe:	4798      	blx	r3
 800d200:	6923      	ldr	r3, [r4, #16]
 800d202:	3b01      	subs	r3, #1
 800d204:	6123      	str	r3, [r4, #16]
 800d206:	e7f1      	b.n	800d1ec <_scanf_float+0x2fc>
 800d208:	46aa      	mov	sl, r5
 800d20a:	9602      	str	r6, [sp, #8]
 800d20c:	e7df      	b.n	800d1ce <_scanf_float+0x2de>
 800d20e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d212:	6923      	ldr	r3, [r4, #16]
 800d214:	2965      	cmp	r1, #101	; 0x65
 800d216:	f103 33ff 	add.w	r3, r3, #4294967295
 800d21a:	f106 35ff 	add.w	r5, r6, #4294967295
 800d21e:	6123      	str	r3, [r4, #16]
 800d220:	d00c      	beq.n	800d23c <_scanf_float+0x34c>
 800d222:	2945      	cmp	r1, #69	; 0x45
 800d224:	d00a      	beq.n	800d23c <_scanf_float+0x34c>
 800d226:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d22a:	463a      	mov	r2, r7
 800d22c:	4640      	mov	r0, r8
 800d22e:	4798      	blx	r3
 800d230:	6923      	ldr	r3, [r4, #16]
 800d232:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d236:	3b01      	subs	r3, #1
 800d238:	1eb5      	subs	r5, r6, #2
 800d23a:	6123      	str	r3, [r4, #16]
 800d23c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d240:	463a      	mov	r2, r7
 800d242:	4640      	mov	r0, r8
 800d244:	4798      	blx	r3
 800d246:	462e      	mov	r6, r5
 800d248:	6825      	ldr	r5, [r4, #0]
 800d24a:	f015 0510 	ands.w	r5, r5, #16
 800d24e:	d158      	bne.n	800d302 <_scanf_float+0x412>
 800d250:	7035      	strb	r5, [r6, #0]
 800d252:	6823      	ldr	r3, [r4, #0]
 800d254:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d25c:	d11c      	bne.n	800d298 <_scanf_float+0x3a8>
 800d25e:	9b01      	ldr	r3, [sp, #4]
 800d260:	454b      	cmp	r3, r9
 800d262:	eba3 0209 	sub.w	r2, r3, r9
 800d266:	d124      	bne.n	800d2b2 <_scanf_float+0x3c2>
 800d268:	2200      	movs	r2, #0
 800d26a:	4659      	mov	r1, fp
 800d26c:	4640      	mov	r0, r8
 800d26e:	f000 ff01 	bl	800e074 <_strtod_r>
 800d272:	9b03      	ldr	r3, [sp, #12]
 800d274:	6821      	ldr	r1, [r4, #0]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	f011 0f02 	tst.w	r1, #2
 800d27c:	ec57 6b10 	vmov	r6, r7, d0
 800d280:	f103 0204 	add.w	r2, r3, #4
 800d284:	d020      	beq.n	800d2c8 <_scanf_float+0x3d8>
 800d286:	9903      	ldr	r1, [sp, #12]
 800d288:	600a      	str	r2, [r1, #0]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	e9c3 6700 	strd	r6, r7, [r3]
 800d290:	68e3      	ldr	r3, [r4, #12]
 800d292:	3301      	adds	r3, #1
 800d294:	60e3      	str	r3, [r4, #12]
 800d296:	e66c      	b.n	800cf72 <_scanf_float+0x82>
 800d298:	9b04      	ldr	r3, [sp, #16]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d0e4      	beq.n	800d268 <_scanf_float+0x378>
 800d29e:	9905      	ldr	r1, [sp, #20]
 800d2a0:	230a      	movs	r3, #10
 800d2a2:	462a      	mov	r2, r5
 800d2a4:	3101      	adds	r1, #1
 800d2a6:	4640      	mov	r0, r8
 800d2a8:	f000 ff6e 	bl	800e188 <_strtol_r>
 800d2ac:	9b04      	ldr	r3, [sp, #16]
 800d2ae:	9e05      	ldr	r6, [sp, #20]
 800d2b0:	1ac2      	subs	r2, r0, r3
 800d2b2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d2b6:	429e      	cmp	r6, r3
 800d2b8:	bf28      	it	cs
 800d2ba:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800d2be:	4912      	ldr	r1, [pc, #72]	; (800d308 <_scanf_float+0x418>)
 800d2c0:	4630      	mov	r0, r6
 800d2c2:	f000 f83b 	bl	800d33c <siprintf>
 800d2c6:	e7cf      	b.n	800d268 <_scanf_float+0x378>
 800d2c8:	f011 0f04 	tst.w	r1, #4
 800d2cc:	9903      	ldr	r1, [sp, #12]
 800d2ce:	600a      	str	r2, [r1, #0]
 800d2d0:	d1db      	bne.n	800d28a <_scanf_float+0x39a>
 800d2d2:	f8d3 8000 	ldr.w	r8, [r3]
 800d2d6:	ee10 2a10 	vmov	r2, s0
 800d2da:	ee10 0a10 	vmov	r0, s0
 800d2de:	463b      	mov	r3, r7
 800d2e0:	4639      	mov	r1, r7
 800d2e2:	f7f3 fc33 	bl	8000b4c <__aeabi_dcmpun>
 800d2e6:	b128      	cbz	r0, 800d2f4 <_scanf_float+0x404>
 800d2e8:	4808      	ldr	r0, [pc, #32]	; (800d30c <_scanf_float+0x41c>)
 800d2ea:	f000 f821 	bl	800d330 <nanf>
 800d2ee:	ed88 0a00 	vstr	s0, [r8]
 800d2f2:	e7cd      	b.n	800d290 <_scanf_float+0x3a0>
 800d2f4:	4630      	mov	r0, r6
 800d2f6:	4639      	mov	r1, r7
 800d2f8:	f7f3 fc86 	bl	8000c08 <__aeabi_d2f>
 800d2fc:	f8c8 0000 	str.w	r0, [r8]
 800d300:	e7c6      	b.n	800d290 <_scanf_float+0x3a0>
 800d302:	2500      	movs	r5, #0
 800d304:	e635      	b.n	800cf72 <_scanf_float+0x82>
 800d306:	bf00      	nop
 800d308:	08010e94 	.word	0x08010e94
 800d30c:	08011210 	.word	0x08011210

0800d310 <_sbrk_r>:
 800d310:	b538      	push	{r3, r4, r5, lr}
 800d312:	4d06      	ldr	r5, [pc, #24]	; (800d32c <_sbrk_r+0x1c>)
 800d314:	2300      	movs	r3, #0
 800d316:	4604      	mov	r4, r0
 800d318:	4608      	mov	r0, r1
 800d31a:	602b      	str	r3, [r5, #0]
 800d31c:	f7f5 fbf8 	bl	8002b10 <_sbrk>
 800d320:	1c43      	adds	r3, r0, #1
 800d322:	d102      	bne.n	800d32a <_sbrk_r+0x1a>
 800d324:	682b      	ldr	r3, [r5, #0]
 800d326:	b103      	cbz	r3, 800d32a <_sbrk_r+0x1a>
 800d328:	6023      	str	r3, [r4, #0]
 800d32a:	bd38      	pop	{r3, r4, r5, pc}
 800d32c:	20002d04 	.word	0x20002d04

0800d330 <nanf>:
 800d330:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d338 <nanf+0x8>
 800d334:	4770      	bx	lr
 800d336:	bf00      	nop
 800d338:	7fc00000 	.word	0x7fc00000

0800d33c <siprintf>:
 800d33c:	b40e      	push	{r1, r2, r3}
 800d33e:	b500      	push	{lr}
 800d340:	b09c      	sub	sp, #112	; 0x70
 800d342:	ab1d      	add	r3, sp, #116	; 0x74
 800d344:	9002      	str	r0, [sp, #8]
 800d346:	9006      	str	r0, [sp, #24]
 800d348:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d34c:	4809      	ldr	r0, [pc, #36]	; (800d374 <siprintf+0x38>)
 800d34e:	9107      	str	r1, [sp, #28]
 800d350:	9104      	str	r1, [sp, #16]
 800d352:	4909      	ldr	r1, [pc, #36]	; (800d378 <siprintf+0x3c>)
 800d354:	f853 2b04 	ldr.w	r2, [r3], #4
 800d358:	9105      	str	r1, [sp, #20]
 800d35a:	6800      	ldr	r0, [r0, #0]
 800d35c:	9301      	str	r3, [sp, #4]
 800d35e:	a902      	add	r1, sp, #8
 800d360:	f003 f956 	bl	8010610 <_svfiprintf_r>
 800d364:	9b02      	ldr	r3, [sp, #8]
 800d366:	2200      	movs	r2, #0
 800d368:	701a      	strb	r2, [r3, #0]
 800d36a:	b01c      	add	sp, #112	; 0x70
 800d36c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d370:	b003      	add	sp, #12
 800d372:	4770      	bx	lr
 800d374:	20000198 	.word	0x20000198
 800d378:	ffff0208 	.word	0xffff0208

0800d37c <__sread>:
 800d37c:	b510      	push	{r4, lr}
 800d37e:	460c      	mov	r4, r1
 800d380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d384:	f003 fb9e 	bl	8010ac4 <_read_r>
 800d388:	2800      	cmp	r0, #0
 800d38a:	bfab      	itete	ge
 800d38c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d38e:	89a3      	ldrhlt	r3, [r4, #12]
 800d390:	181b      	addge	r3, r3, r0
 800d392:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d396:	bfac      	ite	ge
 800d398:	6563      	strge	r3, [r4, #84]	; 0x54
 800d39a:	81a3      	strhlt	r3, [r4, #12]
 800d39c:	bd10      	pop	{r4, pc}

0800d39e <__swrite>:
 800d39e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3a2:	461f      	mov	r7, r3
 800d3a4:	898b      	ldrh	r3, [r1, #12]
 800d3a6:	05db      	lsls	r3, r3, #23
 800d3a8:	4605      	mov	r5, r0
 800d3aa:	460c      	mov	r4, r1
 800d3ac:	4616      	mov	r6, r2
 800d3ae:	d505      	bpl.n	800d3bc <__swrite+0x1e>
 800d3b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3b4:	2302      	movs	r3, #2
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	f002 fb70 	bl	800fa9c <_lseek_r>
 800d3bc:	89a3      	ldrh	r3, [r4, #12]
 800d3be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d3c6:	81a3      	strh	r3, [r4, #12]
 800d3c8:	4632      	mov	r2, r6
 800d3ca:	463b      	mov	r3, r7
 800d3cc:	4628      	mov	r0, r5
 800d3ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3d2:	f000 bf2d 	b.w	800e230 <_write_r>

0800d3d6 <__sseek>:
 800d3d6:	b510      	push	{r4, lr}
 800d3d8:	460c      	mov	r4, r1
 800d3da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3de:	f002 fb5d 	bl	800fa9c <_lseek_r>
 800d3e2:	1c43      	adds	r3, r0, #1
 800d3e4:	89a3      	ldrh	r3, [r4, #12]
 800d3e6:	bf15      	itete	ne
 800d3e8:	6560      	strne	r0, [r4, #84]	; 0x54
 800d3ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d3ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d3f2:	81a3      	strheq	r3, [r4, #12]
 800d3f4:	bf18      	it	ne
 800d3f6:	81a3      	strhne	r3, [r4, #12]
 800d3f8:	bd10      	pop	{r4, pc}

0800d3fa <__sclose>:
 800d3fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3fe:	f000 bf97 	b.w	800e330 <_close_r>

0800d402 <strncmp>:
 800d402:	b510      	push	{r4, lr}
 800d404:	b16a      	cbz	r2, 800d422 <strncmp+0x20>
 800d406:	3901      	subs	r1, #1
 800d408:	1884      	adds	r4, r0, r2
 800d40a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d40e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d412:	4293      	cmp	r3, r2
 800d414:	d103      	bne.n	800d41e <strncmp+0x1c>
 800d416:	42a0      	cmp	r0, r4
 800d418:	d001      	beq.n	800d41e <strncmp+0x1c>
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d1f5      	bne.n	800d40a <strncmp+0x8>
 800d41e:	1a98      	subs	r0, r3, r2
 800d420:	bd10      	pop	{r4, pc}
 800d422:	4610      	mov	r0, r2
 800d424:	e7fc      	b.n	800d420 <strncmp+0x1e>

0800d426 <sulp>:
 800d426:	b570      	push	{r4, r5, r6, lr}
 800d428:	4604      	mov	r4, r0
 800d42a:	460d      	mov	r5, r1
 800d42c:	ec45 4b10 	vmov	d0, r4, r5
 800d430:	4616      	mov	r6, r2
 800d432:	f002 ff33 	bl	801029c <__ulp>
 800d436:	ec51 0b10 	vmov	r0, r1, d0
 800d43a:	b17e      	cbz	r6, 800d45c <sulp+0x36>
 800d43c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d440:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d444:	2b00      	cmp	r3, #0
 800d446:	dd09      	ble.n	800d45c <sulp+0x36>
 800d448:	051b      	lsls	r3, r3, #20
 800d44a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d44e:	2400      	movs	r4, #0
 800d450:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d454:	4622      	mov	r2, r4
 800d456:	462b      	mov	r3, r5
 800d458:	f7f3 f8de 	bl	8000618 <__aeabi_dmul>
 800d45c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d460 <_strtod_l>:
 800d460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d464:	b0a3      	sub	sp, #140	; 0x8c
 800d466:	461f      	mov	r7, r3
 800d468:	2300      	movs	r3, #0
 800d46a:	931e      	str	r3, [sp, #120]	; 0x78
 800d46c:	4ba4      	ldr	r3, [pc, #656]	; (800d700 <_strtod_l+0x2a0>)
 800d46e:	9219      	str	r2, [sp, #100]	; 0x64
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	9307      	str	r3, [sp, #28]
 800d474:	4604      	mov	r4, r0
 800d476:	4618      	mov	r0, r3
 800d478:	4688      	mov	r8, r1
 800d47a:	f7f2 feb9 	bl	80001f0 <strlen>
 800d47e:	f04f 0a00 	mov.w	sl, #0
 800d482:	4605      	mov	r5, r0
 800d484:	f04f 0b00 	mov.w	fp, #0
 800d488:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d48c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d48e:	781a      	ldrb	r2, [r3, #0]
 800d490:	2a2b      	cmp	r2, #43	; 0x2b
 800d492:	d04c      	beq.n	800d52e <_strtod_l+0xce>
 800d494:	d839      	bhi.n	800d50a <_strtod_l+0xaa>
 800d496:	2a0d      	cmp	r2, #13
 800d498:	d832      	bhi.n	800d500 <_strtod_l+0xa0>
 800d49a:	2a08      	cmp	r2, #8
 800d49c:	d832      	bhi.n	800d504 <_strtod_l+0xa4>
 800d49e:	2a00      	cmp	r2, #0
 800d4a0:	d03c      	beq.n	800d51c <_strtod_l+0xbc>
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	930e      	str	r3, [sp, #56]	; 0x38
 800d4a6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800d4a8:	7833      	ldrb	r3, [r6, #0]
 800d4aa:	2b30      	cmp	r3, #48	; 0x30
 800d4ac:	f040 80b4 	bne.w	800d618 <_strtod_l+0x1b8>
 800d4b0:	7873      	ldrb	r3, [r6, #1]
 800d4b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d4b6:	2b58      	cmp	r3, #88	; 0x58
 800d4b8:	d16c      	bne.n	800d594 <_strtod_l+0x134>
 800d4ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4bc:	9301      	str	r3, [sp, #4]
 800d4be:	ab1e      	add	r3, sp, #120	; 0x78
 800d4c0:	9702      	str	r7, [sp, #8]
 800d4c2:	9300      	str	r3, [sp, #0]
 800d4c4:	4a8f      	ldr	r2, [pc, #572]	; (800d704 <_strtod_l+0x2a4>)
 800d4c6:	ab1f      	add	r3, sp, #124	; 0x7c
 800d4c8:	a91d      	add	r1, sp, #116	; 0x74
 800d4ca:	4620      	mov	r0, r4
 800d4cc:	f001 ffd6 	bl	800f47c <__gethex>
 800d4d0:	f010 0707 	ands.w	r7, r0, #7
 800d4d4:	4605      	mov	r5, r0
 800d4d6:	d005      	beq.n	800d4e4 <_strtod_l+0x84>
 800d4d8:	2f06      	cmp	r7, #6
 800d4da:	d12a      	bne.n	800d532 <_strtod_l+0xd2>
 800d4dc:	3601      	adds	r6, #1
 800d4de:	2300      	movs	r3, #0
 800d4e0:	961d      	str	r6, [sp, #116]	; 0x74
 800d4e2:	930e      	str	r3, [sp, #56]	; 0x38
 800d4e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	f040 8596 	bne.w	800e018 <_strtod_l+0xbb8>
 800d4ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4ee:	b1db      	cbz	r3, 800d528 <_strtod_l+0xc8>
 800d4f0:	4652      	mov	r2, sl
 800d4f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d4f6:	ec43 2b10 	vmov	d0, r2, r3
 800d4fa:	b023      	add	sp, #140	; 0x8c
 800d4fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d500:	2a20      	cmp	r2, #32
 800d502:	d1ce      	bne.n	800d4a2 <_strtod_l+0x42>
 800d504:	3301      	adds	r3, #1
 800d506:	931d      	str	r3, [sp, #116]	; 0x74
 800d508:	e7c0      	b.n	800d48c <_strtod_l+0x2c>
 800d50a:	2a2d      	cmp	r2, #45	; 0x2d
 800d50c:	d1c9      	bne.n	800d4a2 <_strtod_l+0x42>
 800d50e:	2201      	movs	r2, #1
 800d510:	920e      	str	r2, [sp, #56]	; 0x38
 800d512:	1c5a      	adds	r2, r3, #1
 800d514:	921d      	str	r2, [sp, #116]	; 0x74
 800d516:	785b      	ldrb	r3, [r3, #1]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d1c4      	bne.n	800d4a6 <_strtod_l+0x46>
 800d51c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d51e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d522:	2b00      	cmp	r3, #0
 800d524:	f040 8576 	bne.w	800e014 <_strtod_l+0xbb4>
 800d528:	4652      	mov	r2, sl
 800d52a:	465b      	mov	r3, fp
 800d52c:	e7e3      	b.n	800d4f6 <_strtod_l+0x96>
 800d52e:	2200      	movs	r2, #0
 800d530:	e7ee      	b.n	800d510 <_strtod_l+0xb0>
 800d532:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d534:	b13a      	cbz	r2, 800d546 <_strtod_l+0xe6>
 800d536:	2135      	movs	r1, #53	; 0x35
 800d538:	a820      	add	r0, sp, #128	; 0x80
 800d53a:	f002 ffba 	bl	80104b2 <__copybits>
 800d53e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d540:	4620      	mov	r0, r4
 800d542:	f002 fb7f 	bl	800fc44 <_Bfree>
 800d546:	3f01      	subs	r7, #1
 800d548:	2f05      	cmp	r7, #5
 800d54a:	d807      	bhi.n	800d55c <_strtod_l+0xfc>
 800d54c:	e8df f007 	tbb	[pc, r7]
 800d550:	1d180b0e 	.word	0x1d180b0e
 800d554:	030e      	.short	0x030e
 800d556:	f04f 0b00 	mov.w	fp, #0
 800d55a:	46da      	mov	sl, fp
 800d55c:	0728      	lsls	r0, r5, #28
 800d55e:	d5c1      	bpl.n	800d4e4 <_strtod_l+0x84>
 800d560:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d564:	e7be      	b.n	800d4e4 <_strtod_l+0x84>
 800d566:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800d56a:	e7f7      	b.n	800d55c <_strtod_l+0xfc>
 800d56c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800d570:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d572:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d576:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d57a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d57e:	e7ed      	b.n	800d55c <_strtod_l+0xfc>
 800d580:	f8df b184 	ldr.w	fp, [pc, #388]	; 800d708 <_strtod_l+0x2a8>
 800d584:	f04f 0a00 	mov.w	sl, #0
 800d588:	e7e8      	b.n	800d55c <_strtod_l+0xfc>
 800d58a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d58e:	f04f 3aff 	mov.w	sl, #4294967295
 800d592:	e7e3      	b.n	800d55c <_strtod_l+0xfc>
 800d594:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d596:	1c5a      	adds	r2, r3, #1
 800d598:	921d      	str	r2, [sp, #116]	; 0x74
 800d59a:	785b      	ldrb	r3, [r3, #1]
 800d59c:	2b30      	cmp	r3, #48	; 0x30
 800d59e:	d0f9      	beq.n	800d594 <_strtod_l+0x134>
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d09f      	beq.n	800d4e4 <_strtod_l+0x84>
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	f04f 0900 	mov.w	r9, #0
 800d5aa:	9304      	str	r3, [sp, #16]
 800d5ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d5ae:	930a      	str	r3, [sp, #40]	; 0x28
 800d5b0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800d5b4:	464f      	mov	r7, r9
 800d5b6:	220a      	movs	r2, #10
 800d5b8:	981d      	ldr	r0, [sp, #116]	; 0x74
 800d5ba:	7806      	ldrb	r6, [r0, #0]
 800d5bc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d5c0:	b2d9      	uxtb	r1, r3
 800d5c2:	2909      	cmp	r1, #9
 800d5c4:	d92a      	bls.n	800d61c <_strtod_l+0x1bc>
 800d5c6:	9907      	ldr	r1, [sp, #28]
 800d5c8:	462a      	mov	r2, r5
 800d5ca:	f7ff ff1a 	bl	800d402 <strncmp>
 800d5ce:	b398      	cbz	r0, 800d638 <_strtod_l+0x1d8>
 800d5d0:	2000      	movs	r0, #0
 800d5d2:	4633      	mov	r3, r6
 800d5d4:	463d      	mov	r5, r7
 800d5d6:	9007      	str	r0, [sp, #28]
 800d5d8:	4602      	mov	r2, r0
 800d5da:	2b65      	cmp	r3, #101	; 0x65
 800d5dc:	d001      	beq.n	800d5e2 <_strtod_l+0x182>
 800d5de:	2b45      	cmp	r3, #69	; 0x45
 800d5e0:	d118      	bne.n	800d614 <_strtod_l+0x1b4>
 800d5e2:	b91d      	cbnz	r5, 800d5ec <_strtod_l+0x18c>
 800d5e4:	9b04      	ldr	r3, [sp, #16]
 800d5e6:	4303      	orrs	r3, r0
 800d5e8:	d098      	beq.n	800d51c <_strtod_l+0xbc>
 800d5ea:	2500      	movs	r5, #0
 800d5ec:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800d5f0:	f108 0301 	add.w	r3, r8, #1
 800d5f4:	931d      	str	r3, [sp, #116]	; 0x74
 800d5f6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d5fa:	2b2b      	cmp	r3, #43	; 0x2b
 800d5fc:	d075      	beq.n	800d6ea <_strtod_l+0x28a>
 800d5fe:	2b2d      	cmp	r3, #45	; 0x2d
 800d600:	d07b      	beq.n	800d6fa <_strtod_l+0x29a>
 800d602:	f04f 0c00 	mov.w	ip, #0
 800d606:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800d60a:	2909      	cmp	r1, #9
 800d60c:	f240 8082 	bls.w	800d714 <_strtod_l+0x2b4>
 800d610:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d614:	2600      	movs	r6, #0
 800d616:	e09d      	b.n	800d754 <_strtod_l+0x2f4>
 800d618:	2300      	movs	r3, #0
 800d61a:	e7c4      	b.n	800d5a6 <_strtod_l+0x146>
 800d61c:	2f08      	cmp	r7, #8
 800d61e:	bfd8      	it	le
 800d620:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800d622:	f100 0001 	add.w	r0, r0, #1
 800d626:	bfda      	itte	le
 800d628:	fb02 3301 	mlale	r3, r2, r1, r3
 800d62c:	9309      	strle	r3, [sp, #36]	; 0x24
 800d62e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d632:	3701      	adds	r7, #1
 800d634:	901d      	str	r0, [sp, #116]	; 0x74
 800d636:	e7bf      	b.n	800d5b8 <_strtod_l+0x158>
 800d638:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d63a:	195a      	adds	r2, r3, r5
 800d63c:	921d      	str	r2, [sp, #116]	; 0x74
 800d63e:	5d5b      	ldrb	r3, [r3, r5]
 800d640:	2f00      	cmp	r7, #0
 800d642:	d037      	beq.n	800d6b4 <_strtod_l+0x254>
 800d644:	9007      	str	r0, [sp, #28]
 800d646:	463d      	mov	r5, r7
 800d648:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800d64c:	2a09      	cmp	r2, #9
 800d64e:	d912      	bls.n	800d676 <_strtod_l+0x216>
 800d650:	2201      	movs	r2, #1
 800d652:	e7c2      	b.n	800d5da <_strtod_l+0x17a>
 800d654:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d656:	1c5a      	adds	r2, r3, #1
 800d658:	921d      	str	r2, [sp, #116]	; 0x74
 800d65a:	785b      	ldrb	r3, [r3, #1]
 800d65c:	3001      	adds	r0, #1
 800d65e:	2b30      	cmp	r3, #48	; 0x30
 800d660:	d0f8      	beq.n	800d654 <_strtod_l+0x1f4>
 800d662:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800d666:	2a08      	cmp	r2, #8
 800d668:	f200 84db 	bhi.w	800e022 <_strtod_l+0xbc2>
 800d66c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d66e:	9007      	str	r0, [sp, #28]
 800d670:	2000      	movs	r0, #0
 800d672:	920a      	str	r2, [sp, #40]	; 0x28
 800d674:	4605      	mov	r5, r0
 800d676:	3b30      	subs	r3, #48	; 0x30
 800d678:	f100 0201 	add.w	r2, r0, #1
 800d67c:	d014      	beq.n	800d6a8 <_strtod_l+0x248>
 800d67e:	9907      	ldr	r1, [sp, #28]
 800d680:	4411      	add	r1, r2
 800d682:	9107      	str	r1, [sp, #28]
 800d684:	462a      	mov	r2, r5
 800d686:	eb00 0e05 	add.w	lr, r0, r5
 800d68a:	210a      	movs	r1, #10
 800d68c:	4572      	cmp	r2, lr
 800d68e:	d113      	bne.n	800d6b8 <_strtod_l+0x258>
 800d690:	182a      	adds	r2, r5, r0
 800d692:	2a08      	cmp	r2, #8
 800d694:	f105 0501 	add.w	r5, r5, #1
 800d698:	4405      	add	r5, r0
 800d69a:	dc1c      	bgt.n	800d6d6 <_strtod_l+0x276>
 800d69c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d69e:	220a      	movs	r2, #10
 800d6a0:	fb02 3301 	mla	r3, r2, r1, r3
 800d6a4:	9309      	str	r3, [sp, #36]	; 0x24
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d6aa:	1c59      	adds	r1, r3, #1
 800d6ac:	911d      	str	r1, [sp, #116]	; 0x74
 800d6ae:	785b      	ldrb	r3, [r3, #1]
 800d6b0:	4610      	mov	r0, r2
 800d6b2:	e7c9      	b.n	800d648 <_strtod_l+0x1e8>
 800d6b4:	4638      	mov	r0, r7
 800d6b6:	e7d2      	b.n	800d65e <_strtod_l+0x1fe>
 800d6b8:	2a08      	cmp	r2, #8
 800d6ba:	dc04      	bgt.n	800d6c6 <_strtod_l+0x266>
 800d6bc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d6be:	434e      	muls	r6, r1
 800d6c0:	9609      	str	r6, [sp, #36]	; 0x24
 800d6c2:	3201      	adds	r2, #1
 800d6c4:	e7e2      	b.n	800d68c <_strtod_l+0x22c>
 800d6c6:	f102 0c01 	add.w	ip, r2, #1
 800d6ca:	f1bc 0f10 	cmp.w	ip, #16
 800d6ce:	bfd8      	it	le
 800d6d0:	fb01 f909 	mulle.w	r9, r1, r9
 800d6d4:	e7f5      	b.n	800d6c2 <_strtod_l+0x262>
 800d6d6:	2d10      	cmp	r5, #16
 800d6d8:	bfdc      	itt	le
 800d6da:	220a      	movle	r2, #10
 800d6dc:	fb02 3909 	mlale	r9, r2, r9, r3
 800d6e0:	e7e1      	b.n	800d6a6 <_strtod_l+0x246>
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	9307      	str	r3, [sp, #28]
 800d6e6:	2201      	movs	r2, #1
 800d6e8:	e77c      	b.n	800d5e4 <_strtod_l+0x184>
 800d6ea:	f04f 0c00 	mov.w	ip, #0
 800d6ee:	f108 0302 	add.w	r3, r8, #2
 800d6f2:	931d      	str	r3, [sp, #116]	; 0x74
 800d6f4:	f898 3002 	ldrb.w	r3, [r8, #2]
 800d6f8:	e785      	b.n	800d606 <_strtod_l+0x1a6>
 800d6fa:	f04f 0c01 	mov.w	ip, #1
 800d6fe:	e7f6      	b.n	800d6ee <_strtod_l+0x28e>
 800d700:	08011050 	.word	0x08011050
 800d704:	08010e9c 	.word	0x08010e9c
 800d708:	7ff00000 	.word	0x7ff00000
 800d70c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d70e:	1c59      	adds	r1, r3, #1
 800d710:	911d      	str	r1, [sp, #116]	; 0x74
 800d712:	785b      	ldrb	r3, [r3, #1]
 800d714:	2b30      	cmp	r3, #48	; 0x30
 800d716:	d0f9      	beq.n	800d70c <_strtod_l+0x2ac>
 800d718:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800d71c:	2908      	cmp	r1, #8
 800d71e:	f63f af79 	bhi.w	800d614 <_strtod_l+0x1b4>
 800d722:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800d726:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d728:	9308      	str	r3, [sp, #32]
 800d72a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d72c:	1c59      	adds	r1, r3, #1
 800d72e:	911d      	str	r1, [sp, #116]	; 0x74
 800d730:	785b      	ldrb	r3, [r3, #1]
 800d732:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800d736:	2e09      	cmp	r6, #9
 800d738:	d937      	bls.n	800d7aa <_strtod_l+0x34a>
 800d73a:	9e08      	ldr	r6, [sp, #32]
 800d73c:	1b89      	subs	r1, r1, r6
 800d73e:	2908      	cmp	r1, #8
 800d740:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d744:	dc02      	bgt.n	800d74c <_strtod_l+0x2ec>
 800d746:	4576      	cmp	r6, lr
 800d748:	bfa8      	it	ge
 800d74a:	4676      	movge	r6, lr
 800d74c:	f1bc 0f00 	cmp.w	ip, #0
 800d750:	d000      	beq.n	800d754 <_strtod_l+0x2f4>
 800d752:	4276      	negs	r6, r6
 800d754:	2d00      	cmp	r5, #0
 800d756:	d14f      	bne.n	800d7f8 <_strtod_l+0x398>
 800d758:	9904      	ldr	r1, [sp, #16]
 800d75a:	4301      	orrs	r1, r0
 800d75c:	f47f aec2 	bne.w	800d4e4 <_strtod_l+0x84>
 800d760:	2a00      	cmp	r2, #0
 800d762:	f47f aedb 	bne.w	800d51c <_strtod_l+0xbc>
 800d766:	2b69      	cmp	r3, #105	; 0x69
 800d768:	d027      	beq.n	800d7ba <_strtod_l+0x35a>
 800d76a:	dc24      	bgt.n	800d7b6 <_strtod_l+0x356>
 800d76c:	2b49      	cmp	r3, #73	; 0x49
 800d76e:	d024      	beq.n	800d7ba <_strtod_l+0x35a>
 800d770:	2b4e      	cmp	r3, #78	; 0x4e
 800d772:	f47f aed3 	bne.w	800d51c <_strtod_l+0xbc>
 800d776:	499e      	ldr	r1, [pc, #632]	; (800d9f0 <_strtod_l+0x590>)
 800d778:	a81d      	add	r0, sp, #116	; 0x74
 800d77a:	f002 f8d7 	bl	800f92c <__match>
 800d77e:	2800      	cmp	r0, #0
 800d780:	f43f aecc 	beq.w	800d51c <_strtod_l+0xbc>
 800d784:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d786:	781b      	ldrb	r3, [r3, #0]
 800d788:	2b28      	cmp	r3, #40	; 0x28
 800d78a:	d12d      	bne.n	800d7e8 <_strtod_l+0x388>
 800d78c:	4999      	ldr	r1, [pc, #612]	; (800d9f4 <_strtod_l+0x594>)
 800d78e:	aa20      	add	r2, sp, #128	; 0x80
 800d790:	a81d      	add	r0, sp, #116	; 0x74
 800d792:	f002 f8df 	bl	800f954 <__hexnan>
 800d796:	2805      	cmp	r0, #5
 800d798:	d126      	bne.n	800d7e8 <_strtod_l+0x388>
 800d79a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d79c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800d7a0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d7a4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d7a8:	e69c      	b.n	800d4e4 <_strtod_l+0x84>
 800d7aa:	210a      	movs	r1, #10
 800d7ac:	fb01 3e0e 	mla	lr, r1, lr, r3
 800d7b0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d7b4:	e7b9      	b.n	800d72a <_strtod_l+0x2ca>
 800d7b6:	2b6e      	cmp	r3, #110	; 0x6e
 800d7b8:	e7db      	b.n	800d772 <_strtod_l+0x312>
 800d7ba:	498f      	ldr	r1, [pc, #572]	; (800d9f8 <_strtod_l+0x598>)
 800d7bc:	a81d      	add	r0, sp, #116	; 0x74
 800d7be:	f002 f8b5 	bl	800f92c <__match>
 800d7c2:	2800      	cmp	r0, #0
 800d7c4:	f43f aeaa 	beq.w	800d51c <_strtod_l+0xbc>
 800d7c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d7ca:	498c      	ldr	r1, [pc, #560]	; (800d9fc <_strtod_l+0x59c>)
 800d7cc:	3b01      	subs	r3, #1
 800d7ce:	a81d      	add	r0, sp, #116	; 0x74
 800d7d0:	931d      	str	r3, [sp, #116]	; 0x74
 800d7d2:	f002 f8ab 	bl	800f92c <__match>
 800d7d6:	b910      	cbnz	r0, 800d7de <_strtod_l+0x37e>
 800d7d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d7da:	3301      	adds	r3, #1
 800d7dc:	931d      	str	r3, [sp, #116]	; 0x74
 800d7de:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800da0c <_strtod_l+0x5ac>
 800d7e2:	f04f 0a00 	mov.w	sl, #0
 800d7e6:	e67d      	b.n	800d4e4 <_strtod_l+0x84>
 800d7e8:	4885      	ldr	r0, [pc, #532]	; (800da00 <_strtod_l+0x5a0>)
 800d7ea:	f003 f97d 	bl	8010ae8 <nan>
 800d7ee:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d7f2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800d7f6:	e675      	b.n	800d4e4 <_strtod_l+0x84>
 800d7f8:	9b07      	ldr	r3, [sp, #28]
 800d7fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d7fc:	1af3      	subs	r3, r6, r3
 800d7fe:	2f00      	cmp	r7, #0
 800d800:	bf08      	it	eq
 800d802:	462f      	moveq	r7, r5
 800d804:	2d10      	cmp	r5, #16
 800d806:	9308      	str	r3, [sp, #32]
 800d808:	46a8      	mov	r8, r5
 800d80a:	bfa8      	it	ge
 800d80c:	f04f 0810 	movge.w	r8, #16
 800d810:	f7f2 fe88 	bl	8000524 <__aeabi_ui2d>
 800d814:	2d09      	cmp	r5, #9
 800d816:	4682      	mov	sl, r0
 800d818:	468b      	mov	fp, r1
 800d81a:	dd13      	ble.n	800d844 <_strtod_l+0x3e4>
 800d81c:	4b79      	ldr	r3, [pc, #484]	; (800da04 <_strtod_l+0x5a4>)
 800d81e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d822:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d826:	f7f2 fef7 	bl	8000618 <__aeabi_dmul>
 800d82a:	4682      	mov	sl, r0
 800d82c:	4648      	mov	r0, r9
 800d82e:	468b      	mov	fp, r1
 800d830:	f7f2 fe78 	bl	8000524 <__aeabi_ui2d>
 800d834:	4602      	mov	r2, r0
 800d836:	460b      	mov	r3, r1
 800d838:	4650      	mov	r0, sl
 800d83a:	4659      	mov	r1, fp
 800d83c:	f7f2 fd36 	bl	80002ac <__adddf3>
 800d840:	4682      	mov	sl, r0
 800d842:	468b      	mov	fp, r1
 800d844:	2d0f      	cmp	r5, #15
 800d846:	dc38      	bgt.n	800d8ba <_strtod_l+0x45a>
 800d848:	9b08      	ldr	r3, [sp, #32]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	f43f ae4a 	beq.w	800d4e4 <_strtod_l+0x84>
 800d850:	dd24      	ble.n	800d89c <_strtod_l+0x43c>
 800d852:	2b16      	cmp	r3, #22
 800d854:	dc0b      	bgt.n	800d86e <_strtod_l+0x40e>
 800d856:	4d6b      	ldr	r5, [pc, #428]	; (800da04 <_strtod_l+0x5a4>)
 800d858:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800d85c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d860:	4652      	mov	r2, sl
 800d862:	465b      	mov	r3, fp
 800d864:	f7f2 fed8 	bl	8000618 <__aeabi_dmul>
 800d868:	4682      	mov	sl, r0
 800d86a:	468b      	mov	fp, r1
 800d86c:	e63a      	b.n	800d4e4 <_strtod_l+0x84>
 800d86e:	9a08      	ldr	r2, [sp, #32]
 800d870:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d874:	4293      	cmp	r3, r2
 800d876:	db20      	blt.n	800d8ba <_strtod_l+0x45a>
 800d878:	4c62      	ldr	r4, [pc, #392]	; (800da04 <_strtod_l+0x5a4>)
 800d87a:	f1c5 050f 	rsb	r5, r5, #15
 800d87e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d882:	4652      	mov	r2, sl
 800d884:	465b      	mov	r3, fp
 800d886:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d88a:	f7f2 fec5 	bl	8000618 <__aeabi_dmul>
 800d88e:	9b08      	ldr	r3, [sp, #32]
 800d890:	1b5d      	subs	r5, r3, r5
 800d892:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d896:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d89a:	e7e3      	b.n	800d864 <_strtod_l+0x404>
 800d89c:	9b08      	ldr	r3, [sp, #32]
 800d89e:	3316      	adds	r3, #22
 800d8a0:	db0b      	blt.n	800d8ba <_strtod_l+0x45a>
 800d8a2:	9b07      	ldr	r3, [sp, #28]
 800d8a4:	4a57      	ldr	r2, [pc, #348]	; (800da04 <_strtod_l+0x5a4>)
 800d8a6:	1b9e      	subs	r6, r3, r6
 800d8a8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800d8ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d8b0:	4650      	mov	r0, sl
 800d8b2:	4659      	mov	r1, fp
 800d8b4:	f7f2 ffda 	bl	800086c <__aeabi_ddiv>
 800d8b8:	e7d6      	b.n	800d868 <_strtod_l+0x408>
 800d8ba:	9b08      	ldr	r3, [sp, #32]
 800d8bc:	eba5 0808 	sub.w	r8, r5, r8
 800d8c0:	4498      	add	r8, r3
 800d8c2:	f1b8 0f00 	cmp.w	r8, #0
 800d8c6:	dd71      	ble.n	800d9ac <_strtod_l+0x54c>
 800d8c8:	f018 030f 	ands.w	r3, r8, #15
 800d8cc:	d00a      	beq.n	800d8e4 <_strtod_l+0x484>
 800d8ce:	494d      	ldr	r1, [pc, #308]	; (800da04 <_strtod_l+0x5a4>)
 800d8d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d8d4:	4652      	mov	r2, sl
 800d8d6:	465b      	mov	r3, fp
 800d8d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8dc:	f7f2 fe9c 	bl	8000618 <__aeabi_dmul>
 800d8e0:	4682      	mov	sl, r0
 800d8e2:	468b      	mov	fp, r1
 800d8e4:	f038 080f 	bics.w	r8, r8, #15
 800d8e8:	d04d      	beq.n	800d986 <_strtod_l+0x526>
 800d8ea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d8ee:	dd22      	ble.n	800d936 <_strtod_l+0x4d6>
 800d8f0:	2500      	movs	r5, #0
 800d8f2:	462e      	mov	r6, r5
 800d8f4:	9509      	str	r5, [sp, #36]	; 0x24
 800d8f6:	9507      	str	r5, [sp, #28]
 800d8f8:	2322      	movs	r3, #34	; 0x22
 800d8fa:	f8df b110 	ldr.w	fp, [pc, #272]	; 800da0c <_strtod_l+0x5ac>
 800d8fe:	6023      	str	r3, [r4, #0]
 800d900:	f04f 0a00 	mov.w	sl, #0
 800d904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d906:	2b00      	cmp	r3, #0
 800d908:	f43f adec 	beq.w	800d4e4 <_strtod_l+0x84>
 800d90c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d90e:	4620      	mov	r0, r4
 800d910:	f002 f998 	bl	800fc44 <_Bfree>
 800d914:	9907      	ldr	r1, [sp, #28]
 800d916:	4620      	mov	r0, r4
 800d918:	f002 f994 	bl	800fc44 <_Bfree>
 800d91c:	4631      	mov	r1, r6
 800d91e:	4620      	mov	r0, r4
 800d920:	f002 f990 	bl	800fc44 <_Bfree>
 800d924:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d926:	4620      	mov	r0, r4
 800d928:	f002 f98c 	bl	800fc44 <_Bfree>
 800d92c:	4629      	mov	r1, r5
 800d92e:	4620      	mov	r0, r4
 800d930:	f002 f988 	bl	800fc44 <_Bfree>
 800d934:	e5d6      	b.n	800d4e4 <_strtod_l+0x84>
 800d936:	2300      	movs	r3, #0
 800d938:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d93c:	4650      	mov	r0, sl
 800d93e:	4659      	mov	r1, fp
 800d940:	4699      	mov	r9, r3
 800d942:	f1b8 0f01 	cmp.w	r8, #1
 800d946:	dc21      	bgt.n	800d98c <_strtod_l+0x52c>
 800d948:	b10b      	cbz	r3, 800d94e <_strtod_l+0x4ee>
 800d94a:	4682      	mov	sl, r0
 800d94c:	468b      	mov	fp, r1
 800d94e:	4b2e      	ldr	r3, [pc, #184]	; (800da08 <_strtod_l+0x5a8>)
 800d950:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d954:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d958:	4652      	mov	r2, sl
 800d95a:	465b      	mov	r3, fp
 800d95c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d960:	f7f2 fe5a 	bl	8000618 <__aeabi_dmul>
 800d964:	4b29      	ldr	r3, [pc, #164]	; (800da0c <_strtod_l+0x5ac>)
 800d966:	460a      	mov	r2, r1
 800d968:	400b      	ands	r3, r1
 800d96a:	4929      	ldr	r1, [pc, #164]	; (800da10 <_strtod_l+0x5b0>)
 800d96c:	428b      	cmp	r3, r1
 800d96e:	4682      	mov	sl, r0
 800d970:	d8be      	bhi.n	800d8f0 <_strtod_l+0x490>
 800d972:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d976:	428b      	cmp	r3, r1
 800d978:	bf86      	itte	hi
 800d97a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800da14 <_strtod_l+0x5b4>
 800d97e:	f04f 3aff 	movhi.w	sl, #4294967295
 800d982:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d986:	2300      	movs	r3, #0
 800d988:	9304      	str	r3, [sp, #16]
 800d98a:	e081      	b.n	800da90 <_strtod_l+0x630>
 800d98c:	f018 0f01 	tst.w	r8, #1
 800d990:	d007      	beq.n	800d9a2 <_strtod_l+0x542>
 800d992:	4b1d      	ldr	r3, [pc, #116]	; (800da08 <_strtod_l+0x5a8>)
 800d994:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800d998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d99c:	f7f2 fe3c 	bl	8000618 <__aeabi_dmul>
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	f109 0901 	add.w	r9, r9, #1
 800d9a6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d9aa:	e7ca      	b.n	800d942 <_strtod_l+0x4e2>
 800d9ac:	d0eb      	beq.n	800d986 <_strtod_l+0x526>
 800d9ae:	f1c8 0800 	rsb	r8, r8, #0
 800d9b2:	f018 020f 	ands.w	r2, r8, #15
 800d9b6:	d00a      	beq.n	800d9ce <_strtod_l+0x56e>
 800d9b8:	4b12      	ldr	r3, [pc, #72]	; (800da04 <_strtod_l+0x5a4>)
 800d9ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d9be:	4650      	mov	r0, sl
 800d9c0:	4659      	mov	r1, fp
 800d9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c6:	f7f2 ff51 	bl	800086c <__aeabi_ddiv>
 800d9ca:	4682      	mov	sl, r0
 800d9cc:	468b      	mov	fp, r1
 800d9ce:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d9d2:	d0d8      	beq.n	800d986 <_strtod_l+0x526>
 800d9d4:	f1b8 0f1f 	cmp.w	r8, #31
 800d9d8:	dd1e      	ble.n	800da18 <_strtod_l+0x5b8>
 800d9da:	2500      	movs	r5, #0
 800d9dc:	462e      	mov	r6, r5
 800d9de:	9509      	str	r5, [sp, #36]	; 0x24
 800d9e0:	9507      	str	r5, [sp, #28]
 800d9e2:	2322      	movs	r3, #34	; 0x22
 800d9e4:	f04f 0a00 	mov.w	sl, #0
 800d9e8:	f04f 0b00 	mov.w	fp, #0
 800d9ec:	6023      	str	r3, [r4, #0]
 800d9ee:	e789      	b.n	800d904 <_strtod_l+0x4a4>
 800d9f0:	08010e6d 	.word	0x08010e6d
 800d9f4:	08010eb0 	.word	0x08010eb0
 800d9f8:	08010e65 	.word	0x08010e65
 800d9fc:	08010ef3 	.word	0x08010ef3
 800da00:	08011210 	.word	0x08011210
 800da04:	080110f0 	.word	0x080110f0
 800da08:	080110c8 	.word	0x080110c8
 800da0c:	7ff00000 	.word	0x7ff00000
 800da10:	7ca00000 	.word	0x7ca00000
 800da14:	7fefffff 	.word	0x7fefffff
 800da18:	f018 0310 	ands.w	r3, r8, #16
 800da1c:	bf18      	it	ne
 800da1e:	236a      	movne	r3, #106	; 0x6a
 800da20:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800ddd8 <_strtod_l+0x978>
 800da24:	9304      	str	r3, [sp, #16]
 800da26:	4650      	mov	r0, sl
 800da28:	4659      	mov	r1, fp
 800da2a:	2300      	movs	r3, #0
 800da2c:	f018 0f01 	tst.w	r8, #1
 800da30:	d004      	beq.n	800da3c <_strtod_l+0x5dc>
 800da32:	e9d9 2300 	ldrd	r2, r3, [r9]
 800da36:	f7f2 fdef 	bl	8000618 <__aeabi_dmul>
 800da3a:	2301      	movs	r3, #1
 800da3c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800da40:	f109 0908 	add.w	r9, r9, #8
 800da44:	d1f2      	bne.n	800da2c <_strtod_l+0x5cc>
 800da46:	b10b      	cbz	r3, 800da4c <_strtod_l+0x5ec>
 800da48:	4682      	mov	sl, r0
 800da4a:	468b      	mov	fp, r1
 800da4c:	9b04      	ldr	r3, [sp, #16]
 800da4e:	b1bb      	cbz	r3, 800da80 <_strtod_l+0x620>
 800da50:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800da54:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800da58:	2b00      	cmp	r3, #0
 800da5a:	4659      	mov	r1, fp
 800da5c:	dd10      	ble.n	800da80 <_strtod_l+0x620>
 800da5e:	2b1f      	cmp	r3, #31
 800da60:	f340 8128 	ble.w	800dcb4 <_strtod_l+0x854>
 800da64:	2b34      	cmp	r3, #52	; 0x34
 800da66:	bfde      	ittt	le
 800da68:	3b20      	suble	r3, #32
 800da6a:	f04f 32ff 	movle.w	r2, #4294967295
 800da6e:	fa02 f303 	lslle.w	r3, r2, r3
 800da72:	f04f 0a00 	mov.w	sl, #0
 800da76:	bfcc      	ite	gt
 800da78:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800da7c:	ea03 0b01 	andle.w	fp, r3, r1
 800da80:	2200      	movs	r2, #0
 800da82:	2300      	movs	r3, #0
 800da84:	4650      	mov	r0, sl
 800da86:	4659      	mov	r1, fp
 800da88:	f7f3 f82e 	bl	8000ae8 <__aeabi_dcmpeq>
 800da8c:	2800      	cmp	r0, #0
 800da8e:	d1a4      	bne.n	800d9da <_strtod_l+0x57a>
 800da90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da92:	9300      	str	r3, [sp, #0]
 800da94:	990a      	ldr	r1, [sp, #40]	; 0x28
 800da96:	462b      	mov	r3, r5
 800da98:	463a      	mov	r2, r7
 800da9a:	4620      	mov	r0, r4
 800da9c:	f002 f93e 	bl	800fd1c <__s2b>
 800daa0:	9009      	str	r0, [sp, #36]	; 0x24
 800daa2:	2800      	cmp	r0, #0
 800daa4:	f43f af24 	beq.w	800d8f0 <_strtod_l+0x490>
 800daa8:	9b07      	ldr	r3, [sp, #28]
 800daaa:	1b9e      	subs	r6, r3, r6
 800daac:	9b08      	ldr	r3, [sp, #32]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	bfb4      	ite	lt
 800dab2:	4633      	movlt	r3, r6
 800dab4:	2300      	movge	r3, #0
 800dab6:	9310      	str	r3, [sp, #64]	; 0x40
 800dab8:	9b08      	ldr	r3, [sp, #32]
 800daba:	2500      	movs	r5, #0
 800dabc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dac0:	9318      	str	r3, [sp, #96]	; 0x60
 800dac2:	462e      	mov	r6, r5
 800dac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dac6:	4620      	mov	r0, r4
 800dac8:	6859      	ldr	r1, [r3, #4]
 800daca:	f002 f87b 	bl	800fbc4 <_Balloc>
 800dace:	9007      	str	r0, [sp, #28]
 800dad0:	2800      	cmp	r0, #0
 800dad2:	f43f af11 	beq.w	800d8f8 <_strtod_l+0x498>
 800dad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dad8:	691a      	ldr	r2, [r3, #16]
 800dada:	3202      	adds	r2, #2
 800dadc:	f103 010c 	add.w	r1, r3, #12
 800dae0:	0092      	lsls	r2, r2, #2
 800dae2:	300c      	adds	r0, #12
 800dae4:	f7fe fcda 	bl	800c49c <memcpy>
 800dae8:	ec4b ab10 	vmov	d0, sl, fp
 800daec:	aa20      	add	r2, sp, #128	; 0x80
 800daee:	a91f      	add	r1, sp, #124	; 0x7c
 800daf0:	4620      	mov	r0, r4
 800daf2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800daf6:	f002 fc4d 	bl	8010394 <__d2b>
 800dafa:	901e      	str	r0, [sp, #120]	; 0x78
 800dafc:	2800      	cmp	r0, #0
 800dafe:	f43f aefb 	beq.w	800d8f8 <_strtod_l+0x498>
 800db02:	2101      	movs	r1, #1
 800db04:	4620      	mov	r0, r4
 800db06:	f002 f9a3 	bl	800fe50 <__i2b>
 800db0a:	4606      	mov	r6, r0
 800db0c:	2800      	cmp	r0, #0
 800db0e:	f43f aef3 	beq.w	800d8f8 <_strtod_l+0x498>
 800db12:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800db14:	9904      	ldr	r1, [sp, #16]
 800db16:	2b00      	cmp	r3, #0
 800db18:	bfab      	itete	ge
 800db1a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800db1c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800db1e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800db20:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800db24:	bfac      	ite	ge
 800db26:	eb03 0902 	addge.w	r9, r3, r2
 800db2a:	1ad7      	sublt	r7, r2, r3
 800db2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800db2e:	eba3 0801 	sub.w	r8, r3, r1
 800db32:	4490      	add	r8, r2
 800db34:	4ba3      	ldr	r3, [pc, #652]	; (800ddc4 <_strtod_l+0x964>)
 800db36:	f108 38ff 	add.w	r8, r8, #4294967295
 800db3a:	4598      	cmp	r8, r3
 800db3c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800db40:	f280 80cc 	bge.w	800dcdc <_strtod_l+0x87c>
 800db44:	eba3 0308 	sub.w	r3, r3, r8
 800db48:	2b1f      	cmp	r3, #31
 800db4a:	eba2 0203 	sub.w	r2, r2, r3
 800db4e:	f04f 0101 	mov.w	r1, #1
 800db52:	f300 80b6 	bgt.w	800dcc2 <_strtod_l+0x862>
 800db56:	fa01 f303 	lsl.w	r3, r1, r3
 800db5a:	9311      	str	r3, [sp, #68]	; 0x44
 800db5c:	2300      	movs	r3, #0
 800db5e:	930c      	str	r3, [sp, #48]	; 0x30
 800db60:	eb09 0802 	add.w	r8, r9, r2
 800db64:	9b04      	ldr	r3, [sp, #16]
 800db66:	45c1      	cmp	r9, r8
 800db68:	4417      	add	r7, r2
 800db6a:	441f      	add	r7, r3
 800db6c:	464b      	mov	r3, r9
 800db6e:	bfa8      	it	ge
 800db70:	4643      	movge	r3, r8
 800db72:	42bb      	cmp	r3, r7
 800db74:	bfa8      	it	ge
 800db76:	463b      	movge	r3, r7
 800db78:	2b00      	cmp	r3, #0
 800db7a:	bfc2      	ittt	gt
 800db7c:	eba8 0803 	subgt.w	r8, r8, r3
 800db80:	1aff      	subgt	r7, r7, r3
 800db82:	eba9 0903 	subgt.w	r9, r9, r3
 800db86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800db88:	2b00      	cmp	r3, #0
 800db8a:	dd17      	ble.n	800dbbc <_strtod_l+0x75c>
 800db8c:	4631      	mov	r1, r6
 800db8e:	461a      	mov	r2, r3
 800db90:	4620      	mov	r0, r4
 800db92:	f002 fa19 	bl	800ffc8 <__pow5mult>
 800db96:	4606      	mov	r6, r0
 800db98:	2800      	cmp	r0, #0
 800db9a:	f43f aead 	beq.w	800d8f8 <_strtod_l+0x498>
 800db9e:	4601      	mov	r1, r0
 800dba0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800dba2:	4620      	mov	r0, r4
 800dba4:	f002 f96a 	bl	800fe7c <__multiply>
 800dba8:	900f      	str	r0, [sp, #60]	; 0x3c
 800dbaa:	2800      	cmp	r0, #0
 800dbac:	f43f aea4 	beq.w	800d8f8 <_strtod_l+0x498>
 800dbb0:	991e      	ldr	r1, [sp, #120]	; 0x78
 800dbb2:	4620      	mov	r0, r4
 800dbb4:	f002 f846 	bl	800fc44 <_Bfree>
 800dbb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dbba:	931e      	str	r3, [sp, #120]	; 0x78
 800dbbc:	f1b8 0f00 	cmp.w	r8, #0
 800dbc0:	f300 8091 	bgt.w	800dce6 <_strtod_l+0x886>
 800dbc4:	9b08      	ldr	r3, [sp, #32]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	dd08      	ble.n	800dbdc <_strtod_l+0x77c>
 800dbca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800dbcc:	9907      	ldr	r1, [sp, #28]
 800dbce:	4620      	mov	r0, r4
 800dbd0:	f002 f9fa 	bl	800ffc8 <__pow5mult>
 800dbd4:	9007      	str	r0, [sp, #28]
 800dbd6:	2800      	cmp	r0, #0
 800dbd8:	f43f ae8e 	beq.w	800d8f8 <_strtod_l+0x498>
 800dbdc:	2f00      	cmp	r7, #0
 800dbde:	dd08      	ble.n	800dbf2 <_strtod_l+0x792>
 800dbe0:	9907      	ldr	r1, [sp, #28]
 800dbe2:	463a      	mov	r2, r7
 800dbe4:	4620      	mov	r0, r4
 800dbe6:	f002 fa49 	bl	801007c <__lshift>
 800dbea:	9007      	str	r0, [sp, #28]
 800dbec:	2800      	cmp	r0, #0
 800dbee:	f43f ae83 	beq.w	800d8f8 <_strtod_l+0x498>
 800dbf2:	f1b9 0f00 	cmp.w	r9, #0
 800dbf6:	dd08      	ble.n	800dc0a <_strtod_l+0x7aa>
 800dbf8:	4631      	mov	r1, r6
 800dbfa:	464a      	mov	r2, r9
 800dbfc:	4620      	mov	r0, r4
 800dbfe:	f002 fa3d 	bl	801007c <__lshift>
 800dc02:	4606      	mov	r6, r0
 800dc04:	2800      	cmp	r0, #0
 800dc06:	f43f ae77 	beq.w	800d8f8 <_strtod_l+0x498>
 800dc0a:	9a07      	ldr	r2, [sp, #28]
 800dc0c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800dc0e:	4620      	mov	r0, r4
 800dc10:	f002 fabc 	bl	801018c <__mdiff>
 800dc14:	4605      	mov	r5, r0
 800dc16:	2800      	cmp	r0, #0
 800dc18:	f43f ae6e 	beq.w	800d8f8 <_strtod_l+0x498>
 800dc1c:	68c3      	ldr	r3, [r0, #12]
 800dc1e:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc20:	2300      	movs	r3, #0
 800dc22:	60c3      	str	r3, [r0, #12]
 800dc24:	4631      	mov	r1, r6
 800dc26:	f002 fa95 	bl	8010154 <__mcmp>
 800dc2a:	2800      	cmp	r0, #0
 800dc2c:	da65      	bge.n	800dcfa <_strtod_l+0x89a>
 800dc2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dc30:	ea53 030a 	orrs.w	r3, r3, sl
 800dc34:	f040 8087 	bne.w	800dd46 <_strtod_l+0x8e6>
 800dc38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	f040 8082 	bne.w	800dd46 <_strtod_l+0x8e6>
 800dc42:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dc46:	0d1b      	lsrs	r3, r3, #20
 800dc48:	051b      	lsls	r3, r3, #20
 800dc4a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800dc4e:	d97a      	bls.n	800dd46 <_strtod_l+0x8e6>
 800dc50:	696b      	ldr	r3, [r5, #20]
 800dc52:	b913      	cbnz	r3, 800dc5a <_strtod_l+0x7fa>
 800dc54:	692b      	ldr	r3, [r5, #16]
 800dc56:	2b01      	cmp	r3, #1
 800dc58:	dd75      	ble.n	800dd46 <_strtod_l+0x8e6>
 800dc5a:	4629      	mov	r1, r5
 800dc5c:	2201      	movs	r2, #1
 800dc5e:	4620      	mov	r0, r4
 800dc60:	f002 fa0c 	bl	801007c <__lshift>
 800dc64:	4631      	mov	r1, r6
 800dc66:	4605      	mov	r5, r0
 800dc68:	f002 fa74 	bl	8010154 <__mcmp>
 800dc6c:	2800      	cmp	r0, #0
 800dc6e:	dd6a      	ble.n	800dd46 <_strtod_l+0x8e6>
 800dc70:	9904      	ldr	r1, [sp, #16]
 800dc72:	4a55      	ldr	r2, [pc, #340]	; (800ddc8 <_strtod_l+0x968>)
 800dc74:	465b      	mov	r3, fp
 800dc76:	2900      	cmp	r1, #0
 800dc78:	f000 8085 	beq.w	800dd86 <_strtod_l+0x926>
 800dc7c:	ea02 010b 	and.w	r1, r2, fp
 800dc80:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800dc84:	dc7f      	bgt.n	800dd86 <_strtod_l+0x926>
 800dc86:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800dc8a:	f77f aeaa 	ble.w	800d9e2 <_strtod_l+0x582>
 800dc8e:	4a4f      	ldr	r2, [pc, #316]	; (800ddcc <_strtod_l+0x96c>)
 800dc90:	2300      	movs	r3, #0
 800dc92:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800dc96:	4650      	mov	r0, sl
 800dc98:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800dc9c:	4659      	mov	r1, fp
 800dc9e:	f7f2 fcbb 	bl	8000618 <__aeabi_dmul>
 800dca2:	460b      	mov	r3, r1
 800dca4:	4303      	orrs	r3, r0
 800dca6:	bf08      	it	eq
 800dca8:	2322      	moveq	r3, #34	; 0x22
 800dcaa:	4682      	mov	sl, r0
 800dcac:	468b      	mov	fp, r1
 800dcae:	bf08      	it	eq
 800dcb0:	6023      	streq	r3, [r4, #0]
 800dcb2:	e62b      	b.n	800d90c <_strtod_l+0x4ac>
 800dcb4:	f04f 32ff 	mov.w	r2, #4294967295
 800dcb8:	fa02 f303 	lsl.w	r3, r2, r3
 800dcbc:	ea03 0a0a 	and.w	sl, r3, sl
 800dcc0:	e6de      	b.n	800da80 <_strtod_l+0x620>
 800dcc2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800dcc6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800dcca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800dcce:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800dcd2:	fa01 f308 	lsl.w	r3, r1, r8
 800dcd6:	930c      	str	r3, [sp, #48]	; 0x30
 800dcd8:	9111      	str	r1, [sp, #68]	; 0x44
 800dcda:	e741      	b.n	800db60 <_strtod_l+0x700>
 800dcdc:	2300      	movs	r3, #0
 800dcde:	930c      	str	r3, [sp, #48]	; 0x30
 800dce0:	2301      	movs	r3, #1
 800dce2:	9311      	str	r3, [sp, #68]	; 0x44
 800dce4:	e73c      	b.n	800db60 <_strtod_l+0x700>
 800dce6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800dce8:	4642      	mov	r2, r8
 800dcea:	4620      	mov	r0, r4
 800dcec:	f002 f9c6 	bl	801007c <__lshift>
 800dcf0:	901e      	str	r0, [sp, #120]	; 0x78
 800dcf2:	2800      	cmp	r0, #0
 800dcf4:	f47f af66 	bne.w	800dbc4 <_strtod_l+0x764>
 800dcf8:	e5fe      	b.n	800d8f8 <_strtod_l+0x498>
 800dcfa:	465f      	mov	r7, fp
 800dcfc:	d16e      	bne.n	800dddc <_strtod_l+0x97c>
 800dcfe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dd00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dd04:	b342      	cbz	r2, 800dd58 <_strtod_l+0x8f8>
 800dd06:	4a32      	ldr	r2, [pc, #200]	; (800ddd0 <_strtod_l+0x970>)
 800dd08:	4293      	cmp	r3, r2
 800dd0a:	d128      	bne.n	800dd5e <_strtod_l+0x8fe>
 800dd0c:	9b04      	ldr	r3, [sp, #16]
 800dd0e:	4650      	mov	r0, sl
 800dd10:	b1eb      	cbz	r3, 800dd4e <_strtod_l+0x8ee>
 800dd12:	4a2d      	ldr	r2, [pc, #180]	; (800ddc8 <_strtod_l+0x968>)
 800dd14:	403a      	ands	r2, r7
 800dd16:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800dd1a:	f04f 31ff 	mov.w	r1, #4294967295
 800dd1e:	d819      	bhi.n	800dd54 <_strtod_l+0x8f4>
 800dd20:	0d12      	lsrs	r2, r2, #20
 800dd22:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800dd26:	fa01 f303 	lsl.w	r3, r1, r3
 800dd2a:	4298      	cmp	r0, r3
 800dd2c:	d117      	bne.n	800dd5e <_strtod_l+0x8fe>
 800dd2e:	4b29      	ldr	r3, [pc, #164]	; (800ddd4 <_strtod_l+0x974>)
 800dd30:	429f      	cmp	r7, r3
 800dd32:	d102      	bne.n	800dd3a <_strtod_l+0x8da>
 800dd34:	3001      	adds	r0, #1
 800dd36:	f43f addf 	beq.w	800d8f8 <_strtod_l+0x498>
 800dd3a:	4b23      	ldr	r3, [pc, #140]	; (800ddc8 <_strtod_l+0x968>)
 800dd3c:	403b      	ands	r3, r7
 800dd3e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800dd42:	f04f 0a00 	mov.w	sl, #0
 800dd46:	9b04      	ldr	r3, [sp, #16]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d1a0      	bne.n	800dc8e <_strtod_l+0x82e>
 800dd4c:	e5de      	b.n	800d90c <_strtod_l+0x4ac>
 800dd4e:	f04f 33ff 	mov.w	r3, #4294967295
 800dd52:	e7ea      	b.n	800dd2a <_strtod_l+0x8ca>
 800dd54:	460b      	mov	r3, r1
 800dd56:	e7e8      	b.n	800dd2a <_strtod_l+0x8ca>
 800dd58:	ea53 030a 	orrs.w	r3, r3, sl
 800dd5c:	d088      	beq.n	800dc70 <_strtod_l+0x810>
 800dd5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd60:	b1db      	cbz	r3, 800dd9a <_strtod_l+0x93a>
 800dd62:	423b      	tst	r3, r7
 800dd64:	d0ef      	beq.n	800dd46 <_strtod_l+0x8e6>
 800dd66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dd68:	9a04      	ldr	r2, [sp, #16]
 800dd6a:	4650      	mov	r0, sl
 800dd6c:	4659      	mov	r1, fp
 800dd6e:	b1c3      	cbz	r3, 800dda2 <_strtod_l+0x942>
 800dd70:	f7ff fb59 	bl	800d426 <sulp>
 800dd74:	4602      	mov	r2, r0
 800dd76:	460b      	mov	r3, r1
 800dd78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dd7c:	f7f2 fa96 	bl	80002ac <__adddf3>
 800dd80:	4682      	mov	sl, r0
 800dd82:	468b      	mov	fp, r1
 800dd84:	e7df      	b.n	800dd46 <_strtod_l+0x8e6>
 800dd86:	4013      	ands	r3, r2
 800dd88:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800dd8c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dd90:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dd94:	f04f 3aff 	mov.w	sl, #4294967295
 800dd98:	e7d5      	b.n	800dd46 <_strtod_l+0x8e6>
 800dd9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dd9c:	ea13 0f0a 	tst.w	r3, sl
 800dda0:	e7e0      	b.n	800dd64 <_strtod_l+0x904>
 800dda2:	f7ff fb40 	bl	800d426 <sulp>
 800dda6:	4602      	mov	r2, r0
 800dda8:	460b      	mov	r3, r1
 800ddaa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ddae:	f7f2 fa7b 	bl	80002a8 <__aeabi_dsub>
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	4682      	mov	sl, r0
 800ddb8:	468b      	mov	fp, r1
 800ddba:	f7f2 fe95 	bl	8000ae8 <__aeabi_dcmpeq>
 800ddbe:	2800      	cmp	r0, #0
 800ddc0:	d0c1      	beq.n	800dd46 <_strtod_l+0x8e6>
 800ddc2:	e60e      	b.n	800d9e2 <_strtod_l+0x582>
 800ddc4:	fffffc02 	.word	0xfffffc02
 800ddc8:	7ff00000 	.word	0x7ff00000
 800ddcc:	39500000 	.word	0x39500000
 800ddd0:	000fffff 	.word	0x000fffff
 800ddd4:	7fefffff 	.word	0x7fefffff
 800ddd8:	08010ec8 	.word	0x08010ec8
 800dddc:	4631      	mov	r1, r6
 800ddde:	4628      	mov	r0, r5
 800dde0:	f002 fb34 	bl	801044c <__ratio>
 800dde4:	ec59 8b10 	vmov	r8, r9, d0
 800dde8:	ee10 0a10 	vmov	r0, s0
 800ddec:	2200      	movs	r2, #0
 800ddee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ddf2:	4649      	mov	r1, r9
 800ddf4:	f7f2 fe8c 	bl	8000b10 <__aeabi_dcmple>
 800ddf8:	2800      	cmp	r0, #0
 800ddfa:	d07c      	beq.n	800def6 <_strtod_l+0xa96>
 800ddfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d04c      	beq.n	800de9c <_strtod_l+0xa3c>
 800de02:	4b95      	ldr	r3, [pc, #596]	; (800e058 <_strtod_l+0xbf8>)
 800de04:	2200      	movs	r2, #0
 800de06:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800de0a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800e058 <_strtod_l+0xbf8>
 800de0e:	f04f 0800 	mov.w	r8, #0
 800de12:	4b92      	ldr	r3, [pc, #584]	; (800e05c <_strtod_l+0xbfc>)
 800de14:	403b      	ands	r3, r7
 800de16:	9311      	str	r3, [sp, #68]	; 0x44
 800de18:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800de1a:	4b91      	ldr	r3, [pc, #580]	; (800e060 <_strtod_l+0xc00>)
 800de1c:	429a      	cmp	r2, r3
 800de1e:	f040 80b2 	bne.w	800df86 <_strtod_l+0xb26>
 800de22:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800de26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800de2a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800de2e:	ec4b ab10 	vmov	d0, sl, fp
 800de32:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800de36:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800de3a:	f002 fa2f 	bl	801029c <__ulp>
 800de3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800de42:	ec53 2b10 	vmov	r2, r3, d0
 800de46:	f7f2 fbe7 	bl	8000618 <__aeabi_dmul>
 800de4a:	4652      	mov	r2, sl
 800de4c:	465b      	mov	r3, fp
 800de4e:	f7f2 fa2d 	bl	80002ac <__adddf3>
 800de52:	460b      	mov	r3, r1
 800de54:	4981      	ldr	r1, [pc, #516]	; (800e05c <_strtod_l+0xbfc>)
 800de56:	4a83      	ldr	r2, [pc, #524]	; (800e064 <_strtod_l+0xc04>)
 800de58:	4019      	ands	r1, r3
 800de5a:	4291      	cmp	r1, r2
 800de5c:	4682      	mov	sl, r0
 800de5e:	d95e      	bls.n	800df1e <_strtod_l+0xabe>
 800de60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de62:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800de66:	4293      	cmp	r3, r2
 800de68:	d103      	bne.n	800de72 <_strtod_l+0xa12>
 800de6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de6c:	3301      	adds	r3, #1
 800de6e:	f43f ad43 	beq.w	800d8f8 <_strtod_l+0x498>
 800de72:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800e070 <_strtod_l+0xc10>
 800de76:	f04f 3aff 	mov.w	sl, #4294967295
 800de7a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800de7c:	4620      	mov	r0, r4
 800de7e:	f001 fee1 	bl	800fc44 <_Bfree>
 800de82:	9907      	ldr	r1, [sp, #28]
 800de84:	4620      	mov	r0, r4
 800de86:	f001 fedd 	bl	800fc44 <_Bfree>
 800de8a:	4631      	mov	r1, r6
 800de8c:	4620      	mov	r0, r4
 800de8e:	f001 fed9 	bl	800fc44 <_Bfree>
 800de92:	4629      	mov	r1, r5
 800de94:	4620      	mov	r0, r4
 800de96:	f001 fed5 	bl	800fc44 <_Bfree>
 800de9a:	e613      	b.n	800dac4 <_strtod_l+0x664>
 800de9c:	f1ba 0f00 	cmp.w	sl, #0
 800dea0:	d11b      	bne.n	800deda <_strtod_l+0xa7a>
 800dea2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dea6:	b9f3      	cbnz	r3, 800dee6 <_strtod_l+0xa86>
 800dea8:	4b6b      	ldr	r3, [pc, #428]	; (800e058 <_strtod_l+0xbf8>)
 800deaa:	2200      	movs	r2, #0
 800deac:	4640      	mov	r0, r8
 800deae:	4649      	mov	r1, r9
 800deb0:	f7f2 fe24 	bl	8000afc <__aeabi_dcmplt>
 800deb4:	b9d0      	cbnz	r0, 800deec <_strtod_l+0xa8c>
 800deb6:	4640      	mov	r0, r8
 800deb8:	4649      	mov	r1, r9
 800deba:	4b6b      	ldr	r3, [pc, #428]	; (800e068 <_strtod_l+0xc08>)
 800debc:	2200      	movs	r2, #0
 800debe:	f7f2 fbab 	bl	8000618 <__aeabi_dmul>
 800dec2:	4680      	mov	r8, r0
 800dec4:	4689      	mov	r9, r1
 800dec6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800deca:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800dece:	931b      	str	r3, [sp, #108]	; 0x6c
 800ded0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800ded4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ded8:	e79b      	b.n	800de12 <_strtod_l+0x9b2>
 800deda:	f1ba 0f01 	cmp.w	sl, #1
 800dede:	d102      	bne.n	800dee6 <_strtod_l+0xa86>
 800dee0:	2f00      	cmp	r7, #0
 800dee2:	f43f ad7e 	beq.w	800d9e2 <_strtod_l+0x582>
 800dee6:	4b61      	ldr	r3, [pc, #388]	; (800e06c <_strtod_l+0xc0c>)
 800dee8:	2200      	movs	r2, #0
 800deea:	e78c      	b.n	800de06 <_strtod_l+0x9a6>
 800deec:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800e068 <_strtod_l+0xc08>
 800def0:	f04f 0800 	mov.w	r8, #0
 800def4:	e7e7      	b.n	800dec6 <_strtod_l+0xa66>
 800def6:	4b5c      	ldr	r3, [pc, #368]	; (800e068 <_strtod_l+0xc08>)
 800def8:	4640      	mov	r0, r8
 800defa:	4649      	mov	r1, r9
 800defc:	2200      	movs	r2, #0
 800defe:	f7f2 fb8b 	bl	8000618 <__aeabi_dmul>
 800df02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800df04:	4680      	mov	r8, r0
 800df06:	4689      	mov	r9, r1
 800df08:	b933      	cbnz	r3, 800df18 <_strtod_l+0xab8>
 800df0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800df0e:	9012      	str	r0, [sp, #72]	; 0x48
 800df10:	9313      	str	r3, [sp, #76]	; 0x4c
 800df12:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800df16:	e7dd      	b.n	800ded4 <_strtod_l+0xa74>
 800df18:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800df1c:	e7f9      	b.n	800df12 <_strtod_l+0xab2>
 800df1e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800df22:	9b04      	ldr	r3, [sp, #16]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d1a8      	bne.n	800de7a <_strtod_l+0xa1a>
 800df28:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800df2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800df2e:	0d1b      	lsrs	r3, r3, #20
 800df30:	051b      	lsls	r3, r3, #20
 800df32:	429a      	cmp	r2, r3
 800df34:	d1a1      	bne.n	800de7a <_strtod_l+0xa1a>
 800df36:	4640      	mov	r0, r8
 800df38:	4649      	mov	r1, r9
 800df3a:	f7f2 fecd 	bl	8000cd8 <__aeabi_d2lz>
 800df3e:	f7f2 fb3d 	bl	80005bc <__aeabi_l2d>
 800df42:	4602      	mov	r2, r0
 800df44:	460b      	mov	r3, r1
 800df46:	4640      	mov	r0, r8
 800df48:	4649      	mov	r1, r9
 800df4a:	f7f2 f9ad 	bl	80002a8 <__aeabi_dsub>
 800df4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800df50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800df54:	ea43 030a 	orr.w	r3, r3, sl
 800df58:	4313      	orrs	r3, r2
 800df5a:	4680      	mov	r8, r0
 800df5c:	4689      	mov	r9, r1
 800df5e:	d053      	beq.n	800e008 <_strtod_l+0xba8>
 800df60:	a335      	add	r3, pc, #212	; (adr r3, 800e038 <_strtod_l+0xbd8>)
 800df62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df66:	f7f2 fdc9 	bl	8000afc <__aeabi_dcmplt>
 800df6a:	2800      	cmp	r0, #0
 800df6c:	f47f acce 	bne.w	800d90c <_strtod_l+0x4ac>
 800df70:	a333      	add	r3, pc, #204	; (adr r3, 800e040 <_strtod_l+0xbe0>)
 800df72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df76:	4640      	mov	r0, r8
 800df78:	4649      	mov	r1, r9
 800df7a:	f7f2 fddd 	bl	8000b38 <__aeabi_dcmpgt>
 800df7e:	2800      	cmp	r0, #0
 800df80:	f43f af7b 	beq.w	800de7a <_strtod_l+0xa1a>
 800df84:	e4c2      	b.n	800d90c <_strtod_l+0x4ac>
 800df86:	9b04      	ldr	r3, [sp, #16]
 800df88:	b333      	cbz	r3, 800dfd8 <_strtod_l+0xb78>
 800df8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800df8c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800df90:	d822      	bhi.n	800dfd8 <_strtod_l+0xb78>
 800df92:	a32d      	add	r3, pc, #180	; (adr r3, 800e048 <_strtod_l+0xbe8>)
 800df94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df98:	4640      	mov	r0, r8
 800df9a:	4649      	mov	r1, r9
 800df9c:	f7f2 fdb8 	bl	8000b10 <__aeabi_dcmple>
 800dfa0:	b1a0      	cbz	r0, 800dfcc <_strtod_l+0xb6c>
 800dfa2:	4649      	mov	r1, r9
 800dfa4:	4640      	mov	r0, r8
 800dfa6:	f7f2 fe0f 	bl	8000bc8 <__aeabi_d2uiz>
 800dfaa:	2801      	cmp	r0, #1
 800dfac:	bf38      	it	cc
 800dfae:	2001      	movcc	r0, #1
 800dfb0:	f7f2 fab8 	bl	8000524 <__aeabi_ui2d>
 800dfb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dfb6:	4680      	mov	r8, r0
 800dfb8:	4689      	mov	r9, r1
 800dfba:	bb13      	cbnz	r3, 800e002 <_strtod_l+0xba2>
 800dfbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dfc0:	9014      	str	r0, [sp, #80]	; 0x50
 800dfc2:	9315      	str	r3, [sp, #84]	; 0x54
 800dfc4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800dfc8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800dfcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dfce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800dfd0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800dfd4:	1a9b      	subs	r3, r3, r2
 800dfd6:	930d      	str	r3, [sp, #52]	; 0x34
 800dfd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dfdc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800dfe0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800dfe4:	f002 f95a 	bl	801029c <__ulp>
 800dfe8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dfec:	ec53 2b10 	vmov	r2, r3, d0
 800dff0:	f7f2 fb12 	bl	8000618 <__aeabi_dmul>
 800dff4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800dff8:	f7f2 f958 	bl	80002ac <__adddf3>
 800dffc:	4682      	mov	sl, r0
 800dffe:	468b      	mov	fp, r1
 800e000:	e78f      	b.n	800df22 <_strtod_l+0xac2>
 800e002:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800e006:	e7dd      	b.n	800dfc4 <_strtod_l+0xb64>
 800e008:	a311      	add	r3, pc, #68	; (adr r3, 800e050 <_strtod_l+0xbf0>)
 800e00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e00e:	f7f2 fd75 	bl	8000afc <__aeabi_dcmplt>
 800e012:	e7b4      	b.n	800df7e <_strtod_l+0xb1e>
 800e014:	2300      	movs	r3, #0
 800e016:	930e      	str	r3, [sp, #56]	; 0x38
 800e018:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e01a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e01c:	6013      	str	r3, [r2, #0]
 800e01e:	f7ff ba65 	b.w	800d4ec <_strtod_l+0x8c>
 800e022:	2b65      	cmp	r3, #101	; 0x65
 800e024:	f43f ab5d 	beq.w	800d6e2 <_strtod_l+0x282>
 800e028:	2b45      	cmp	r3, #69	; 0x45
 800e02a:	f43f ab5a 	beq.w	800d6e2 <_strtod_l+0x282>
 800e02e:	2201      	movs	r2, #1
 800e030:	f7ff bb92 	b.w	800d758 <_strtod_l+0x2f8>
 800e034:	f3af 8000 	nop.w
 800e038:	94a03595 	.word	0x94a03595
 800e03c:	3fdfffff 	.word	0x3fdfffff
 800e040:	35afe535 	.word	0x35afe535
 800e044:	3fe00000 	.word	0x3fe00000
 800e048:	ffc00000 	.word	0xffc00000
 800e04c:	41dfffff 	.word	0x41dfffff
 800e050:	94a03595 	.word	0x94a03595
 800e054:	3fcfffff 	.word	0x3fcfffff
 800e058:	3ff00000 	.word	0x3ff00000
 800e05c:	7ff00000 	.word	0x7ff00000
 800e060:	7fe00000 	.word	0x7fe00000
 800e064:	7c9fffff 	.word	0x7c9fffff
 800e068:	3fe00000 	.word	0x3fe00000
 800e06c:	bff00000 	.word	0xbff00000
 800e070:	7fefffff 	.word	0x7fefffff

0800e074 <_strtod_r>:
 800e074:	4b01      	ldr	r3, [pc, #4]	; (800e07c <_strtod_r+0x8>)
 800e076:	f7ff b9f3 	b.w	800d460 <_strtod_l>
 800e07a:	bf00      	nop
 800e07c:	20000200 	.word	0x20000200

0800e080 <_strtol_l.isra.0>:
 800e080:	2b01      	cmp	r3, #1
 800e082:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e086:	d001      	beq.n	800e08c <_strtol_l.isra.0+0xc>
 800e088:	2b24      	cmp	r3, #36	; 0x24
 800e08a:	d906      	bls.n	800e09a <_strtol_l.isra.0+0x1a>
 800e08c:	f7fe f9d4 	bl	800c438 <__errno>
 800e090:	2316      	movs	r3, #22
 800e092:	6003      	str	r3, [r0, #0]
 800e094:	2000      	movs	r0, #0
 800e096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e09a:	4f3a      	ldr	r7, [pc, #232]	; (800e184 <_strtol_l.isra.0+0x104>)
 800e09c:	468e      	mov	lr, r1
 800e09e:	4676      	mov	r6, lr
 800e0a0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800e0a4:	5de5      	ldrb	r5, [r4, r7]
 800e0a6:	f015 0508 	ands.w	r5, r5, #8
 800e0aa:	d1f8      	bne.n	800e09e <_strtol_l.isra.0+0x1e>
 800e0ac:	2c2d      	cmp	r4, #45	; 0x2d
 800e0ae:	d134      	bne.n	800e11a <_strtol_l.isra.0+0x9a>
 800e0b0:	f89e 4000 	ldrb.w	r4, [lr]
 800e0b4:	f04f 0801 	mov.w	r8, #1
 800e0b8:	f106 0e02 	add.w	lr, r6, #2
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d05c      	beq.n	800e17a <_strtol_l.isra.0+0xfa>
 800e0c0:	2b10      	cmp	r3, #16
 800e0c2:	d10c      	bne.n	800e0de <_strtol_l.isra.0+0x5e>
 800e0c4:	2c30      	cmp	r4, #48	; 0x30
 800e0c6:	d10a      	bne.n	800e0de <_strtol_l.isra.0+0x5e>
 800e0c8:	f89e 4000 	ldrb.w	r4, [lr]
 800e0cc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e0d0:	2c58      	cmp	r4, #88	; 0x58
 800e0d2:	d14d      	bne.n	800e170 <_strtol_l.isra.0+0xf0>
 800e0d4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800e0d8:	2310      	movs	r3, #16
 800e0da:	f10e 0e02 	add.w	lr, lr, #2
 800e0de:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800e0e2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e0e6:	2600      	movs	r6, #0
 800e0e8:	fbbc f9f3 	udiv	r9, ip, r3
 800e0ec:	4635      	mov	r5, r6
 800e0ee:	fb03 ca19 	mls	sl, r3, r9, ip
 800e0f2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800e0f6:	2f09      	cmp	r7, #9
 800e0f8:	d818      	bhi.n	800e12c <_strtol_l.isra.0+0xac>
 800e0fa:	463c      	mov	r4, r7
 800e0fc:	42a3      	cmp	r3, r4
 800e0fe:	dd24      	ble.n	800e14a <_strtol_l.isra.0+0xca>
 800e100:	2e00      	cmp	r6, #0
 800e102:	db1f      	blt.n	800e144 <_strtol_l.isra.0+0xc4>
 800e104:	45a9      	cmp	r9, r5
 800e106:	d31d      	bcc.n	800e144 <_strtol_l.isra.0+0xc4>
 800e108:	d101      	bne.n	800e10e <_strtol_l.isra.0+0x8e>
 800e10a:	45a2      	cmp	sl, r4
 800e10c:	db1a      	blt.n	800e144 <_strtol_l.isra.0+0xc4>
 800e10e:	fb05 4503 	mla	r5, r5, r3, r4
 800e112:	2601      	movs	r6, #1
 800e114:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800e118:	e7eb      	b.n	800e0f2 <_strtol_l.isra.0+0x72>
 800e11a:	2c2b      	cmp	r4, #43	; 0x2b
 800e11c:	bf08      	it	eq
 800e11e:	f89e 4000 	ldrbeq.w	r4, [lr]
 800e122:	46a8      	mov	r8, r5
 800e124:	bf08      	it	eq
 800e126:	f106 0e02 	addeq.w	lr, r6, #2
 800e12a:	e7c7      	b.n	800e0bc <_strtol_l.isra.0+0x3c>
 800e12c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800e130:	2f19      	cmp	r7, #25
 800e132:	d801      	bhi.n	800e138 <_strtol_l.isra.0+0xb8>
 800e134:	3c37      	subs	r4, #55	; 0x37
 800e136:	e7e1      	b.n	800e0fc <_strtol_l.isra.0+0x7c>
 800e138:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800e13c:	2f19      	cmp	r7, #25
 800e13e:	d804      	bhi.n	800e14a <_strtol_l.isra.0+0xca>
 800e140:	3c57      	subs	r4, #87	; 0x57
 800e142:	e7db      	b.n	800e0fc <_strtol_l.isra.0+0x7c>
 800e144:	f04f 36ff 	mov.w	r6, #4294967295
 800e148:	e7e4      	b.n	800e114 <_strtol_l.isra.0+0x94>
 800e14a:	2e00      	cmp	r6, #0
 800e14c:	da05      	bge.n	800e15a <_strtol_l.isra.0+0xda>
 800e14e:	2322      	movs	r3, #34	; 0x22
 800e150:	6003      	str	r3, [r0, #0]
 800e152:	4665      	mov	r5, ip
 800e154:	b942      	cbnz	r2, 800e168 <_strtol_l.isra.0+0xe8>
 800e156:	4628      	mov	r0, r5
 800e158:	e79d      	b.n	800e096 <_strtol_l.isra.0+0x16>
 800e15a:	f1b8 0f00 	cmp.w	r8, #0
 800e15e:	d000      	beq.n	800e162 <_strtol_l.isra.0+0xe2>
 800e160:	426d      	negs	r5, r5
 800e162:	2a00      	cmp	r2, #0
 800e164:	d0f7      	beq.n	800e156 <_strtol_l.isra.0+0xd6>
 800e166:	b10e      	cbz	r6, 800e16c <_strtol_l.isra.0+0xec>
 800e168:	f10e 31ff 	add.w	r1, lr, #4294967295
 800e16c:	6011      	str	r1, [r2, #0]
 800e16e:	e7f2      	b.n	800e156 <_strtol_l.isra.0+0xd6>
 800e170:	2430      	movs	r4, #48	; 0x30
 800e172:	2b00      	cmp	r3, #0
 800e174:	d1b3      	bne.n	800e0de <_strtol_l.isra.0+0x5e>
 800e176:	2308      	movs	r3, #8
 800e178:	e7b1      	b.n	800e0de <_strtol_l.isra.0+0x5e>
 800e17a:	2c30      	cmp	r4, #48	; 0x30
 800e17c:	d0a4      	beq.n	800e0c8 <_strtol_l.isra.0+0x48>
 800e17e:	230a      	movs	r3, #10
 800e180:	e7ad      	b.n	800e0de <_strtol_l.isra.0+0x5e>
 800e182:	bf00      	nop
 800e184:	08010d59 	.word	0x08010d59

0800e188 <_strtol_r>:
 800e188:	f7ff bf7a 	b.w	800e080 <_strtol_l.isra.0>

0800e18c <__swbuf_r>:
 800e18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e18e:	460e      	mov	r6, r1
 800e190:	4614      	mov	r4, r2
 800e192:	4605      	mov	r5, r0
 800e194:	b118      	cbz	r0, 800e19e <__swbuf_r+0x12>
 800e196:	6983      	ldr	r3, [r0, #24]
 800e198:	b90b      	cbnz	r3, 800e19e <__swbuf_r+0x12>
 800e19a:	f001 f86b 	bl	800f274 <__sinit>
 800e19e:	4b21      	ldr	r3, [pc, #132]	; (800e224 <__swbuf_r+0x98>)
 800e1a0:	429c      	cmp	r4, r3
 800e1a2:	d12b      	bne.n	800e1fc <__swbuf_r+0x70>
 800e1a4:	686c      	ldr	r4, [r5, #4]
 800e1a6:	69a3      	ldr	r3, [r4, #24]
 800e1a8:	60a3      	str	r3, [r4, #8]
 800e1aa:	89a3      	ldrh	r3, [r4, #12]
 800e1ac:	071a      	lsls	r2, r3, #28
 800e1ae:	d52f      	bpl.n	800e210 <__swbuf_r+0x84>
 800e1b0:	6923      	ldr	r3, [r4, #16]
 800e1b2:	b36b      	cbz	r3, 800e210 <__swbuf_r+0x84>
 800e1b4:	6923      	ldr	r3, [r4, #16]
 800e1b6:	6820      	ldr	r0, [r4, #0]
 800e1b8:	1ac0      	subs	r0, r0, r3
 800e1ba:	6963      	ldr	r3, [r4, #20]
 800e1bc:	b2f6      	uxtb	r6, r6
 800e1be:	4283      	cmp	r3, r0
 800e1c0:	4637      	mov	r7, r6
 800e1c2:	dc04      	bgt.n	800e1ce <__swbuf_r+0x42>
 800e1c4:	4621      	mov	r1, r4
 800e1c6:	4628      	mov	r0, r5
 800e1c8:	f000 ffc0 	bl	800f14c <_fflush_r>
 800e1cc:	bb30      	cbnz	r0, 800e21c <__swbuf_r+0x90>
 800e1ce:	68a3      	ldr	r3, [r4, #8]
 800e1d0:	3b01      	subs	r3, #1
 800e1d2:	60a3      	str	r3, [r4, #8]
 800e1d4:	6823      	ldr	r3, [r4, #0]
 800e1d6:	1c5a      	adds	r2, r3, #1
 800e1d8:	6022      	str	r2, [r4, #0]
 800e1da:	701e      	strb	r6, [r3, #0]
 800e1dc:	6963      	ldr	r3, [r4, #20]
 800e1de:	3001      	adds	r0, #1
 800e1e0:	4283      	cmp	r3, r0
 800e1e2:	d004      	beq.n	800e1ee <__swbuf_r+0x62>
 800e1e4:	89a3      	ldrh	r3, [r4, #12]
 800e1e6:	07db      	lsls	r3, r3, #31
 800e1e8:	d506      	bpl.n	800e1f8 <__swbuf_r+0x6c>
 800e1ea:	2e0a      	cmp	r6, #10
 800e1ec:	d104      	bne.n	800e1f8 <__swbuf_r+0x6c>
 800e1ee:	4621      	mov	r1, r4
 800e1f0:	4628      	mov	r0, r5
 800e1f2:	f000 ffab 	bl	800f14c <_fflush_r>
 800e1f6:	b988      	cbnz	r0, 800e21c <__swbuf_r+0x90>
 800e1f8:	4638      	mov	r0, r7
 800e1fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1fc:	4b0a      	ldr	r3, [pc, #40]	; (800e228 <__swbuf_r+0x9c>)
 800e1fe:	429c      	cmp	r4, r3
 800e200:	d101      	bne.n	800e206 <__swbuf_r+0x7a>
 800e202:	68ac      	ldr	r4, [r5, #8]
 800e204:	e7cf      	b.n	800e1a6 <__swbuf_r+0x1a>
 800e206:	4b09      	ldr	r3, [pc, #36]	; (800e22c <__swbuf_r+0xa0>)
 800e208:	429c      	cmp	r4, r3
 800e20a:	bf08      	it	eq
 800e20c:	68ec      	ldreq	r4, [r5, #12]
 800e20e:	e7ca      	b.n	800e1a6 <__swbuf_r+0x1a>
 800e210:	4621      	mov	r1, r4
 800e212:	4628      	mov	r0, r5
 800e214:	f000 f81e 	bl	800e254 <__swsetup_r>
 800e218:	2800      	cmp	r0, #0
 800e21a:	d0cb      	beq.n	800e1b4 <__swbuf_r+0x28>
 800e21c:	f04f 37ff 	mov.w	r7, #4294967295
 800e220:	e7ea      	b.n	800e1f8 <__swbuf_r+0x6c>
 800e222:	bf00      	nop
 800e224:	08010fa4 	.word	0x08010fa4
 800e228:	08010fc4 	.word	0x08010fc4
 800e22c:	08010f84 	.word	0x08010f84

0800e230 <_write_r>:
 800e230:	b538      	push	{r3, r4, r5, lr}
 800e232:	4d07      	ldr	r5, [pc, #28]	; (800e250 <_write_r+0x20>)
 800e234:	4604      	mov	r4, r0
 800e236:	4608      	mov	r0, r1
 800e238:	4611      	mov	r1, r2
 800e23a:	2200      	movs	r2, #0
 800e23c:	602a      	str	r2, [r5, #0]
 800e23e:	461a      	mov	r2, r3
 800e240:	f7f4 fc15 	bl	8002a6e <_write>
 800e244:	1c43      	adds	r3, r0, #1
 800e246:	d102      	bne.n	800e24e <_write_r+0x1e>
 800e248:	682b      	ldr	r3, [r5, #0]
 800e24a:	b103      	cbz	r3, 800e24e <_write_r+0x1e>
 800e24c:	6023      	str	r3, [r4, #0]
 800e24e:	bd38      	pop	{r3, r4, r5, pc}
 800e250:	20002d04 	.word	0x20002d04

0800e254 <__swsetup_r>:
 800e254:	4b32      	ldr	r3, [pc, #200]	; (800e320 <__swsetup_r+0xcc>)
 800e256:	b570      	push	{r4, r5, r6, lr}
 800e258:	681d      	ldr	r5, [r3, #0]
 800e25a:	4606      	mov	r6, r0
 800e25c:	460c      	mov	r4, r1
 800e25e:	b125      	cbz	r5, 800e26a <__swsetup_r+0x16>
 800e260:	69ab      	ldr	r3, [r5, #24]
 800e262:	b913      	cbnz	r3, 800e26a <__swsetup_r+0x16>
 800e264:	4628      	mov	r0, r5
 800e266:	f001 f805 	bl	800f274 <__sinit>
 800e26a:	4b2e      	ldr	r3, [pc, #184]	; (800e324 <__swsetup_r+0xd0>)
 800e26c:	429c      	cmp	r4, r3
 800e26e:	d10f      	bne.n	800e290 <__swsetup_r+0x3c>
 800e270:	686c      	ldr	r4, [r5, #4]
 800e272:	89a3      	ldrh	r3, [r4, #12]
 800e274:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e278:	0719      	lsls	r1, r3, #28
 800e27a:	d42c      	bmi.n	800e2d6 <__swsetup_r+0x82>
 800e27c:	06dd      	lsls	r5, r3, #27
 800e27e:	d411      	bmi.n	800e2a4 <__swsetup_r+0x50>
 800e280:	2309      	movs	r3, #9
 800e282:	6033      	str	r3, [r6, #0]
 800e284:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e288:	81a3      	strh	r3, [r4, #12]
 800e28a:	f04f 30ff 	mov.w	r0, #4294967295
 800e28e:	e03e      	b.n	800e30e <__swsetup_r+0xba>
 800e290:	4b25      	ldr	r3, [pc, #148]	; (800e328 <__swsetup_r+0xd4>)
 800e292:	429c      	cmp	r4, r3
 800e294:	d101      	bne.n	800e29a <__swsetup_r+0x46>
 800e296:	68ac      	ldr	r4, [r5, #8]
 800e298:	e7eb      	b.n	800e272 <__swsetup_r+0x1e>
 800e29a:	4b24      	ldr	r3, [pc, #144]	; (800e32c <__swsetup_r+0xd8>)
 800e29c:	429c      	cmp	r4, r3
 800e29e:	bf08      	it	eq
 800e2a0:	68ec      	ldreq	r4, [r5, #12]
 800e2a2:	e7e6      	b.n	800e272 <__swsetup_r+0x1e>
 800e2a4:	0758      	lsls	r0, r3, #29
 800e2a6:	d512      	bpl.n	800e2ce <__swsetup_r+0x7a>
 800e2a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e2aa:	b141      	cbz	r1, 800e2be <__swsetup_r+0x6a>
 800e2ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e2b0:	4299      	cmp	r1, r3
 800e2b2:	d002      	beq.n	800e2ba <__swsetup_r+0x66>
 800e2b4:	4630      	mov	r0, r6
 800e2b6:	f7fe f907 	bl	800c4c8 <_free_r>
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	6363      	str	r3, [r4, #52]	; 0x34
 800e2be:	89a3      	ldrh	r3, [r4, #12]
 800e2c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e2c4:	81a3      	strh	r3, [r4, #12]
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	6063      	str	r3, [r4, #4]
 800e2ca:	6923      	ldr	r3, [r4, #16]
 800e2cc:	6023      	str	r3, [r4, #0]
 800e2ce:	89a3      	ldrh	r3, [r4, #12]
 800e2d0:	f043 0308 	orr.w	r3, r3, #8
 800e2d4:	81a3      	strh	r3, [r4, #12]
 800e2d6:	6923      	ldr	r3, [r4, #16]
 800e2d8:	b94b      	cbnz	r3, 800e2ee <__swsetup_r+0x9a>
 800e2da:	89a3      	ldrh	r3, [r4, #12]
 800e2dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e2e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e2e4:	d003      	beq.n	800e2ee <__swsetup_r+0x9a>
 800e2e6:	4621      	mov	r1, r4
 800e2e8:	4630      	mov	r0, r6
 800e2ea:	f001 fc0d 	bl	800fb08 <__smakebuf_r>
 800e2ee:	89a0      	ldrh	r0, [r4, #12]
 800e2f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e2f4:	f010 0301 	ands.w	r3, r0, #1
 800e2f8:	d00a      	beq.n	800e310 <__swsetup_r+0xbc>
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	60a3      	str	r3, [r4, #8]
 800e2fe:	6963      	ldr	r3, [r4, #20]
 800e300:	425b      	negs	r3, r3
 800e302:	61a3      	str	r3, [r4, #24]
 800e304:	6923      	ldr	r3, [r4, #16]
 800e306:	b943      	cbnz	r3, 800e31a <__swsetup_r+0xc6>
 800e308:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e30c:	d1ba      	bne.n	800e284 <__swsetup_r+0x30>
 800e30e:	bd70      	pop	{r4, r5, r6, pc}
 800e310:	0781      	lsls	r1, r0, #30
 800e312:	bf58      	it	pl
 800e314:	6963      	ldrpl	r3, [r4, #20]
 800e316:	60a3      	str	r3, [r4, #8]
 800e318:	e7f4      	b.n	800e304 <__swsetup_r+0xb0>
 800e31a:	2000      	movs	r0, #0
 800e31c:	e7f7      	b.n	800e30e <__swsetup_r+0xba>
 800e31e:	bf00      	nop
 800e320:	20000198 	.word	0x20000198
 800e324:	08010fa4 	.word	0x08010fa4
 800e328:	08010fc4 	.word	0x08010fc4
 800e32c:	08010f84 	.word	0x08010f84

0800e330 <_close_r>:
 800e330:	b538      	push	{r3, r4, r5, lr}
 800e332:	4d06      	ldr	r5, [pc, #24]	; (800e34c <_close_r+0x1c>)
 800e334:	2300      	movs	r3, #0
 800e336:	4604      	mov	r4, r0
 800e338:	4608      	mov	r0, r1
 800e33a:	602b      	str	r3, [r5, #0]
 800e33c:	f7f4 fbb3 	bl	8002aa6 <_close>
 800e340:	1c43      	adds	r3, r0, #1
 800e342:	d102      	bne.n	800e34a <_close_r+0x1a>
 800e344:	682b      	ldr	r3, [r5, #0]
 800e346:	b103      	cbz	r3, 800e34a <_close_r+0x1a>
 800e348:	6023      	str	r3, [r4, #0]
 800e34a:	bd38      	pop	{r3, r4, r5, pc}
 800e34c:	20002d04 	.word	0x20002d04

0800e350 <quorem>:
 800e350:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e354:	6903      	ldr	r3, [r0, #16]
 800e356:	690c      	ldr	r4, [r1, #16]
 800e358:	42a3      	cmp	r3, r4
 800e35a:	4607      	mov	r7, r0
 800e35c:	f2c0 8081 	blt.w	800e462 <quorem+0x112>
 800e360:	3c01      	subs	r4, #1
 800e362:	f101 0814 	add.w	r8, r1, #20
 800e366:	f100 0514 	add.w	r5, r0, #20
 800e36a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e36e:	9301      	str	r3, [sp, #4]
 800e370:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e374:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e378:	3301      	adds	r3, #1
 800e37a:	429a      	cmp	r2, r3
 800e37c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e380:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e384:	fbb2 f6f3 	udiv	r6, r2, r3
 800e388:	d331      	bcc.n	800e3ee <quorem+0x9e>
 800e38a:	f04f 0e00 	mov.w	lr, #0
 800e38e:	4640      	mov	r0, r8
 800e390:	46ac      	mov	ip, r5
 800e392:	46f2      	mov	sl, lr
 800e394:	f850 2b04 	ldr.w	r2, [r0], #4
 800e398:	b293      	uxth	r3, r2
 800e39a:	fb06 e303 	mla	r3, r6, r3, lr
 800e39e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e3a2:	b29b      	uxth	r3, r3
 800e3a4:	ebaa 0303 	sub.w	r3, sl, r3
 800e3a8:	0c12      	lsrs	r2, r2, #16
 800e3aa:	f8dc a000 	ldr.w	sl, [ip]
 800e3ae:	fb06 e202 	mla	r2, r6, r2, lr
 800e3b2:	fa13 f38a 	uxtah	r3, r3, sl
 800e3b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e3ba:	fa1f fa82 	uxth.w	sl, r2
 800e3be:	f8dc 2000 	ldr.w	r2, [ip]
 800e3c2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800e3c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e3ca:	b29b      	uxth	r3, r3
 800e3cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e3d0:	4581      	cmp	r9, r0
 800e3d2:	f84c 3b04 	str.w	r3, [ip], #4
 800e3d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e3da:	d2db      	bcs.n	800e394 <quorem+0x44>
 800e3dc:	f855 300b 	ldr.w	r3, [r5, fp]
 800e3e0:	b92b      	cbnz	r3, 800e3ee <quorem+0x9e>
 800e3e2:	9b01      	ldr	r3, [sp, #4]
 800e3e4:	3b04      	subs	r3, #4
 800e3e6:	429d      	cmp	r5, r3
 800e3e8:	461a      	mov	r2, r3
 800e3ea:	d32e      	bcc.n	800e44a <quorem+0xfa>
 800e3ec:	613c      	str	r4, [r7, #16]
 800e3ee:	4638      	mov	r0, r7
 800e3f0:	f001 feb0 	bl	8010154 <__mcmp>
 800e3f4:	2800      	cmp	r0, #0
 800e3f6:	db24      	blt.n	800e442 <quorem+0xf2>
 800e3f8:	3601      	adds	r6, #1
 800e3fa:	4628      	mov	r0, r5
 800e3fc:	f04f 0c00 	mov.w	ip, #0
 800e400:	f858 2b04 	ldr.w	r2, [r8], #4
 800e404:	f8d0 e000 	ldr.w	lr, [r0]
 800e408:	b293      	uxth	r3, r2
 800e40a:	ebac 0303 	sub.w	r3, ip, r3
 800e40e:	0c12      	lsrs	r2, r2, #16
 800e410:	fa13 f38e 	uxtah	r3, r3, lr
 800e414:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e418:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e41c:	b29b      	uxth	r3, r3
 800e41e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e422:	45c1      	cmp	r9, r8
 800e424:	f840 3b04 	str.w	r3, [r0], #4
 800e428:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e42c:	d2e8      	bcs.n	800e400 <quorem+0xb0>
 800e42e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e432:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e436:	b922      	cbnz	r2, 800e442 <quorem+0xf2>
 800e438:	3b04      	subs	r3, #4
 800e43a:	429d      	cmp	r5, r3
 800e43c:	461a      	mov	r2, r3
 800e43e:	d30a      	bcc.n	800e456 <quorem+0x106>
 800e440:	613c      	str	r4, [r7, #16]
 800e442:	4630      	mov	r0, r6
 800e444:	b003      	add	sp, #12
 800e446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e44a:	6812      	ldr	r2, [r2, #0]
 800e44c:	3b04      	subs	r3, #4
 800e44e:	2a00      	cmp	r2, #0
 800e450:	d1cc      	bne.n	800e3ec <quorem+0x9c>
 800e452:	3c01      	subs	r4, #1
 800e454:	e7c7      	b.n	800e3e6 <quorem+0x96>
 800e456:	6812      	ldr	r2, [r2, #0]
 800e458:	3b04      	subs	r3, #4
 800e45a:	2a00      	cmp	r2, #0
 800e45c:	d1f0      	bne.n	800e440 <quorem+0xf0>
 800e45e:	3c01      	subs	r4, #1
 800e460:	e7eb      	b.n	800e43a <quorem+0xea>
 800e462:	2000      	movs	r0, #0
 800e464:	e7ee      	b.n	800e444 <quorem+0xf4>
	...

0800e468 <_dtoa_r>:
 800e468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e46c:	ed2d 8b02 	vpush	{d8}
 800e470:	ec57 6b10 	vmov	r6, r7, d0
 800e474:	b095      	sub	sp, #84	; 0x54
 800e476:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e478:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e47c:	9105      	str	r1, [sp, #20]
 800e47e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800e482:	4604      	mov	r4, r0
 800e484:	9209      	str	r2, [sp, #36]	; 0x24
 800e486:	930f      	str	r3, [sp, #60]	; 0x3c
 800e488:	b975      	cbnz	r5, 800e4a8 <_dtoa_r+0x40>
 800e48a:	2010      	movs	r0, #16
 800e48c:	f7fd fffe 	bl	800c48c <malloc>
 800e490:	4602      	mov	r2, r0
 800e492:	6260      	str	r0, [r4, #36]	; 0x24
 800e494:	b920      	cbnz	r0, 800e4a0 <_dtoa_r+0x38>
 800e496:	4bb2      	ldr	r3, [pc, #712]	; (800e760 <_dtoa_r+0x2f8>)
 800e498:	21ea      	movs	r1, #234	; 0xea
 800e49a:	48b2      	ldr	r0, [pc, #712]	; (800e764 <_dtoa_r+0x2fc>)
 800e49c:	f002 fb3a 	bl	8010b14 <__assert_func>
 800e4a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e4a4:	6005      	str	r5, [r0, #0]
 800e4a6:	60c5      	str	r5, [r0, #12]
 800e4a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4aa:	6819      	ldr	r1, [r3, #0]
 800e4ac:	b151      	cbz	r1, 800e4c4 <_dtoa_r+0x5c>
 800e4ae:	685a      	ldr	r2, [r3, #4]
 800e4b0:	604a      	str	r2, [r1, #4]
 800e4b2:	2301      	movs	r3, #1
 800e4b4:	4093      	lsls	r3, r2
 800e4b6:	608b      	str	r3, [r1, #8]
 800e4b8:	4620      	mov	r0, r4
 800e4ba:	f001 fbc3 	bl	800fc44 <_Bfree>
 800e4be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	601a      	str	r2, [r3, #0]
 800e4c4:	1e3b      	subs	r3, r7, #0
 800e4c6:	bfb9      	ittee	lt
 800e4c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e4cc:	9303      	strlt	r3, [sp, #12]
 800e4ce:	2300      	movge	r3, #0
 800e4d0:	f8c8 3000 	strge.w	r3, [r8]
 800e4d4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e4d8:	4ba3      	ldr	r3, [pc, #652]	; (800e768 <_dtoa_r+0x300>)
 800e4da:	bfbc      	itt	lt
 800e4dc:	2201      	movlt	r2, #1
 800e4de:	f8c8 2000 	strlt.w	r2, [r8]
 800e4e2:	ea33 0309 	bics.w	r3, r3, r9
 800e4e6:	d11b      	bne.n	800e520 <_dtoa_r+0xb8>
 800e4e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e4ea:	f242 730f 	movw	r3, #9999	; 0x270f
 800e4ee:	6013      	str	r3, [r2, #0]
 800e4f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e4f4:	4333      	orrs	r3, r6
 800e4f6:	f000 857a 	beq.w	800efee <_dtoa_r+0xb86>
 800e4fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e4fc:	b963      	cbnz	r3, 800e518 <_dtoa_r+0xb0>
 800e4fe:	4b9b      	ldr	r3, [pc, #620]	; (800e76c <_dtoa_r+0x304>)
 800e500:	e024      	b.n	800e54c <_dtoa_r+0xe4>
 800e502:	4b9b      	ldr	r3, [pc, #620]	; (800e770 <_dtoa_r+0x308>)
 800e504:	9300      	str	r3, [sp, #0]
 800e506:	3308      	adds	r3, #8
 800e508:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e50a:	6013      	str	r3, [r2, #0]
 800e50c:	9800      	ldr	r0, [sp, #0]
 800e50e:	b015      	add	sp, #84	; 0x54
 800e510:	ecbd 8b02 	vpop	{d8}
 800e514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e518:	4b94      	ldr	r3, [pc, #592]	; (800e76c <_dtoa_r+0x304>)
 800e51a:	9300      	str	r3, [sp, #0]
 800e51c:	3303      	adds	r3, #3
 800e51e:	e7f3      	b.n	800e508 <_dtoa_r+0xa0>
 800e520:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e524:	2200      	movs	r2, #0
 800e526:	ec51 0b17 	vmov	r0, r1, d7
 800e52a:	2300      	movs	r3, #0
 800e52c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800e530:	f7f2 fada 	bl	8000ae8 <__aeabi_dcmpeq>
 800e534:	4680      	mov	r8, r0
 800e536:	b158      	cbz	r0, 800e550 <_dtoa_r+0xe8>
 800e538:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e53a:	2301      	movs	r3, #1
 800e53c:	6013      	str	r3, [r2, #0]
 800e53e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e540:	2b00      	cmp	r3, #0
 800e542:	f000 8551 	beq.w	800efe8 <_dtoa_r+0xb80>
 800e546:	488b      	ldr	r0, [pc, #556]	; (800e774 <_dtoa_r+0x30c>)
 800e548:	6018      	str	r0, [r3, #0]
 800e54a:	1e43      	subs	r3, r0, #1
 800e54c:	9300      	str	r3, [sp, #0]
 800e54e:	e7dd      	b.n	800e50c <_dtoa_r+0xa4>
 800e550:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e554:	aa12      	add	r2, sp, #72	; 0x48
 800e556:	a913      	add	r1, sp, #76	; 0x4c
 800e558:	4620      	mov	r0, r4
 800e55a:	f001 ff1b 	bl	8010394 <__d2b>
 800e55e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e562:	4683      	mov	fp, r0
 800e564:	2d00      	cmp	r5, #0
 800e566:	d07c      	beq.n	800e662 <_dtoa_r+0x1fa>
 800e568:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e56a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800e56e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e572:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800e576:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e57a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e57e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e582:	4b7d      	ldr	r3, [pc, #500]	; (800e778 <_dtoa_r+0x310>)
 800e584:	2200      	movs	r2, #0
 800e586:	4630      	mov	r0, r6
 800e588:	4639      	mov	r1, r7
 800e58a:	f7f1 fe8d 	bl	80002a8 <__aeabi_dsub>
 800e58e:	a36e      	add	r3, pc, #440	; (adr r3, 800e748 <_dtoa_r+0x2e0>)
 800e590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e594:	f7f2 f840 	bl	8000618 <__aeabi_dmul>
 800e598:	a36d      	add	r3, pc, #436	; (adr r3, 800e750 <_dtoa_r+0x2e8>)
 800e59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e59e:	f7f1 fe85 	bl	80002ac <__adddf3>
 800e5a2:	4606      	mov	r6, r0
 800e5a4:	4628      	mov	r0, r5
 800e5a6:	460f      	mov	r7, r1
 800e5a8:	f7f1 ffcc 	bl	8000544 <__aeabi_i2d>
 800e5ac:	a36a      	add	r3, pc, #424	; (adr r3, 800e758 <_dtoa_r+0x2f0>)
 800e5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b2:	f7f2 f831 	bl	8000618 <__aeabi_dmul>
 800e5b6:	4602      	mov	r2, r0
 800e5b8:	460b      	mov	r3, r1
 800e5ba:	4630      	mov	r0, r6
 800e5bc:	4639      	mov	r1, r7
 800e5be:	f7f1 fe75 	bl	80002ac <__adddf3>
 800e5c2:	4606      	mov	r6, r0
 800e5c4:	460f      	mov	r7, r1
 800e5c6:	f7f2 fad7 	bl	8000b78 <__aeabi_d2iz>
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	4682      	mov	sl, r0
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	4630      	mov	r0, r6
 800e5d2:	4639      	mov	r1, r7
 800e5d4:	f7f2 fa92 	bl	8000afc <__aeabi_dcmplt>
 800e5d8:	b148      	cbz	r0, 800e5ee <_dtoa_r+0x186>
 800e5da:	4650      	mov	r0, sl
 800e5dc:	f7f1 ffb2 	bl	8000544 <__aeabi_i2d>
 800e5e0:	4632      	mov	r2, r6
 800e5e2:	463b      	mov	r3, r7
 800e5e4:	f7f2 fa80 	bl	8000ae8 <__aeabi_dcmpeq>
 800e5e8:	b908      	cbnz	r0, 800e5ee <_dtoa_r+0x186>
 800e5ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e5ee:	f1ba 0f16 	cmp.w	sl, #22
 800e5f2:	d854      	bhi.n	800e69e <_dtoa_r+0x236>
 800e5f4:	4b61      	ldr	r3, [pc, #388]	; (800e77c <_dtoa_r+0x314>)
 800e5f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e602:	f7f2 fa7b 	bl	8000afc <__aeabi_dcmplt>
 800e606:	2800      	cmp	r0, #0
 800e608:	d04b      	beq.n	800e6a2 <_dtoa_r+0x23a>
 800e60a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e60e:	2300      	movs	r3, #0
 800e610:	930e      	str	r3, [sp, #56]	; 0x38
 800e612:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e614:	1b5d      	subs	r5, r3, r5
 800e616:	1e6b      	subs	r3, r5, #1
 800e618:	9304      	str	r3, [sp, #16]
 800e61a:	bf43      	ittte	mi
 800e61c:	2300      	movmi	r3, #0
 800e61e:	f1c5 0801 	rsbmi	r8, r5, #1
 800e622:	9304      	strmi	r3, [sp, #16]
 800e624:	f04f 0800 	movpl.w	r8, #0
 800e628:	f1ba 0f00 	cmp.w	sl, #0
 800e62c:	db3b      	blt.n	800e6a6 <_dtoa_r+0x23e>
 800e62e:	9b04      	ldr	r3, [sp, #16]
 800e630:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800e634:	4453      	add	r3, sl
 800e636:	9304      	str	r3, [sp, #16]
 800e638:	2300      	movs	r3, #0
 800e63a:	9306      	str	r3, [sp, #24]
 800e63c:	9b05      	ldr	r3, [sp, #20]
 800e63e:	2b09      	cmp	r3, #9
 800e640:	d869      	bhi.n	800e716 <_dtoa_r+0x2ae>
 800e642:	2b05      	cmp	r3, #5
 800e644:	bfc4      	itt	gt
 800e646:	3b04      	subgt	r3, #4
 800e648:	9305      	strgt	r3, [sp, #20]
 800e64a:	9b05      	ldr	r3, [sp, #20]
 800e64c:	f1a3 0302 	sub.w	r3, r3, #2
 800e650:	bfcc      	ite	gt
 800e652:	2500      	movgt	r5, #0
 800e654:	2501      	movle	r5, #1
 800e656:	2b03      	cmp	r3, #3
 800e658:	d869      	bhi.n	800e72e <_dtoa_r+0x2c6>
 800e65a:	e8df f003 	tbb	[pc, r3]
 800e65e:	4e2c      	.short	0x4e2c
 800e660:	5a4c      	.short	0x5a4c
 800e662:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800e666:	441d      	add	r5, r3
 800e668:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e66c:	2b20      	cmp	r3, #32
 800e66e:	bfc1      	itttt	gt
 800e670:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e674:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e678:	fa09 f303 	lslgt.w	r3, r9, r3
 800e67c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e680:	bfda      	itte	le
 800e682:	f1c3 0320 	rsble	r3, r3, #32
 800e686:	fa06 f003 	lslle.w	r0, r6, r3
 800e68a:	4318      	orrgt	r0, r3
 800e68c:	f7f1 ff4a 	bl	8000524 <__aeabi_ui2d>
 800e690:	2301      	movs	r3, #1
 800e692:	4606      	mov	r6, r0
 800e694:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e698:	3d01      	subs	r5, #1
 800e69a:	9310      	str	r3, [sp, #64]	; 0x40
 800e69c:	e771      	b.n	800e582 <_dtoa_r+0x11a>
 800e69e:	2301      	movs	r3, #1
 800e6a0:	e7b6      	b.n	800e610 <_dtoa_r+0x1a8>
 800e6a2:	900e      	str	r0, [sp, #56]	; 0x38
 800e6a4:	e7b5      	b.n	800e612 <_dtoa_r+0x1aa>
 800e6a6:	f1ca 0300 	rsb	r3, sl, #0
 800e6aa:	9306      	str	r3, [sp, #24]
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	eba8 080a 	sub.w	r8, r8, sl
 800e6b2:	930d      	str	r3, [sp, #52]	; 0x34
 800e6b4:	e7c2      	b.n	800e63c <_dtoa_r+0x1d4>
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	9308      	str	r3, [sp, #32]
 800e6ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	dc39      	bgt.n	800e734 <_dtoa_r+0x2cc>
 800e6c0:	f04f 0901 	mov.w	r9, #1
 800e6c4:	f8cd 9004 	str.w	r9, [sp, #4]
 800e6c8:	464b      	mov	r3, r9
 800e6ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e6ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	6042      	str	r2, [r0, #4]
 800e6d4:	2204      	movs	r2, #4
 800e6d6:	f102 0614 	add.w	r6, r2, #20
 800e6da:	429e      	cmp	r6, r3
 800e6dc:	6841      	ldr	r1, [r0, #4]
 800e6de:	d92f      	bls.n	800e740 <_dtoa_r+0x2d8>
 800e6e0:	4620      	mov	r0, r4
 800e6e2:	f001 fa6f 	bl	800fbc4 <_Balloc>
 800e6e6:	9000      	str	r0, [sp, #0]
 800e6e8:	2800      	cmp	r0, #0
 800e6ea:	d14b      	bne.n	800e784 <_dtoa_r+0x31c>
 800e6ec:	4b24      	ldr	r3, [pc, #144]	; (800e780 <_dtoa_r+0x318>)
 800e6ee:	4602      	mov	r2, r0
 800e6f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e6f4:	e6d1      	b.n	800e49a <_dtoa_r+0x32>
 800e6f6:	2301      	movs	r3, #1
 800e6f8:	e7de      	b.n	800e6b8 <_dtoa_r+0x250>
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	9308      	str	r3, [sp, #32]
 800e6fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e700:	eb0a 0903 	add.w	r9, sl, r3
 800e704:	f109 0301 	add.w	r3, r9, #1
 800e708:	2b01      	cmp	r3, #1
 800e70a:	9301      	str	r3, [sp, #4]
 800e70c:	bfb8      	it	lt
 800e70e:	2301      	movlt	r3, #1
 800e710:	e7dd      	b.n	800e6ce <_dtoa_r+0x266>
 800e712:	2301      	movs	r3, #1
 800e714:	e7f2      	b.n	800e6fc <_dtoa_r+0x294>
 800e716:	2501      	movs	r5, #1
 800e718:	2300      	movs	r3, #0
 800e71a:	9305      	str	r3, [sp, #20]
 800e71c:	9508      	str	r5, [sp, #32]
 800e71e:	f04f 39ff 	mov.w	r9, #4294967295
 800e722:	2200      	movs	r2, #0
 800e724:	f8cd 9004 	str.w	r9, [sp, #4]
 800e728:	2312      	movs	r3, #18
 800e72a:	9209      	str	r2, [sp, #36]	; 0x24
 800e72c:	e7cf      	b.n	800e6ce <_dtoa_r+0x266>
 800e72e:	2301      	movs	r3, #1
 800e730:	9308      	str	r3, [sp, #32]
 800e732:	e7f4      	b.n	800e71e <_dtoa_r+0x2b6>
 800e734:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e738:	f8cd 9004 	str.w	r9, [sp, #4]
 800e73c:	464b      	mov	r3, r9
 800e73e:	e7c6      	b.n	800e6ce <_dtoa_r+0x266>
 800e740:	3101      	adds	r1, #1
 800e742:	6041      	str	r1, [r0, #4]
 800e744:	0052      	lsls	r2, r2, #1
 800e746:	e7c6      	b.n	800e6d6 <_dtoa_r+0x26e>
 800e748:	636f4361 	.word	0x636f4361
 800e74c:	3fd287a7 	.word	0x3fd287a7
 800e750:	8b60c8b3 	.word	0x8b60c8b3
 800e754:	3fc68a28 	.word	0x3fc68a28
 800e758:	509f79fb 	.word	0x509f79fb
 800e75c:	3fd34413 	.word	0x3fd34413
 800e760:	08010efd 	.word	0x08010efd
 800e764:	08010f14 	.word	0x08010f14
 800e768:	7ff00000 	.word	0x7ff00000
 800e76c:	08010ef9 	.word	0x08010ef9
 800e770:	08010ef0 	.word	0x08010ef0
 800e774:	08010e71 	.word	0x08010e71
 800e778:	3ff80000 	.word	0x3ff80000
 800e77c:	080110f0 	.word	0x080110f0
 800e780:	08010f73 	.word	0x08010f73
 800e784:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e786:	9a00      	ldr	r2, [sp, #0]
 800e788:	601a      	str	r2, [r3, #0]
 800e78a:	9b01      	ldr	r3, [sp, #4]
 800e78c:	2b0e      	cmp	r3, #14
 800e78e:	f200 80ad 	bhi.w	800e8ec <_dtoa_r+0x484>
 800e792:	2d00      	cmp	r5, #0
 800e794:	f000 80aa 	beq.w	800e8ec <_dtoa_r+0x484>
 800e798:	f1ba 0f00 	cmp.w	sl, #0
 800e79c:	dd36      	ble.n	800e80c <_dtoa_r+0x3a4>
 800e79e:	4ac3      	ldr	r2, [pc, #780]	; (800eaac <_dtoa_r+0x644>)
 800e7a0:	f00a 030f 	and.w	r3, sl, #15
 800e7a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e7a8:	ed93 7b00 	vldr	d7, [r3]
 800e7ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800e7b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800e7b4:	eeb0 8a47 	vmov.f32	s16, s14
 800e7b8:	eef0 8a67 	vmov.f32	s17, s15
 800e7bc:	d016      	beq.n	800e7ec <_dtoa_r+0x384>
 800e7be:	4bbc      	ldr	r3, [pc, #752]	; (800eab0 <_dtoa_r+0x648>)
 800e7c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e7c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e7c8:	f7f2 f850 	bl	800086c <__aeabi_ddiv>
 800e7cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7d0:	f007 070f 	and.w	r7, r7, #15
 800e7d4:	2503      	movs	r5, #3
 800e7d6:	4eb6      	ldr	r6, [pc, #728]	; (800eab0 <_dtoa_r+0x648>)
 800e7d8:	b957      	cbnz	r7, 800e7f0 <_dtoa_r+0x388>
 800e7da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7de:	ec53 2b18 	vmov	r2, r3, d8
 800e7e2:	f7f2 f843 	bl	800086c <__aeabi_ddiv>
 800e7e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7ea:	e029      	b.n	800e840 <_dtoa_r+0x3d8>
 800e7ec:	2502      	movs	r5, #2
 800e7ee:	e7f2      	b.n	800e7d6 <_dtoa_r+0x36e>
 800e7f0:	07f9      	lsls	r1, r7, #31
 800e7f2:	d508      	bpl.n	800e806 <_dtoa_r+0x39e>
 800e7f4:	ec51 0b18 	vmov	r0, r1, d8
 800e7f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e7fc:	f7f1 ff0c 	bl	8000618 <__aeabi_dmul>
 800e800:	ec41 0b18 	vmov	d8, r0, r1
 800e804:	3501      	adds	r5, #1
 800e806:	107f      	asrs	r7, r7, #1
 800e808:	3608      	adds	r6, #8
 800e80a:	e7e5      	b.n	800e7d8 <_dtoa_r+0x370>
 800e80c:	f000 80a6 	beq.w	800e95c <_dtoa_r+0x4f4>
 800e810:	f1ca 0600 	rsb	r6, sl, #0
 800e814:	4ba5      	ldr	r3, [pc, #660]	; (800eaac <_dtoa_r+0x644>)
 800e816:	4fa6      	ldr	r7, [pc, #664]	; (800eab0 <_dtoa_r+0x648>)
 800e818:	f006 020f 	and.w	r2, r6, #15
 800e81c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e824:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e828:	f7f1 fef6 	bl	8000618 <__aeabi_dmul>
 800e82c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e830:	1136      	asrs	r6, r6, #4
 800e832:	2300      	movs	r3, #0
 800e834:	2502      	movs	r5, #2
 800e836:	2e00      	cmp	r6, #0
 800e838:	f040 8085 	bne.w	800e946 <_dtoa_r+0x4de>
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d1d2      	bne.n	800e7e6 <_dtoa_r+0x37e>
 800e840:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e842:	2b00      	cmp	r3, #0
 800e844:	f000 808c 	beq.w	800e960 <_dtoa_r+0x4f8>
 800e848:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e84c:	4b99      	ldr	r3, [pc, #612]	; (800eab4 <_dtoa_r+0x64c>)
 800e84e:	2200      	movs	r2, #0
 800e850:	4630      	mov	r0, r6
 800e852:	4639      	mov	r1, r7
 800e854:	f7f2 f952 	bl	8000afc <__aeabi_dcmplt>
 800e858:	2800      	cmp	r0, #0
 800e85a:	f000 8081 	beq.w	800e960 <_dtoa_r+0x4f8>
 800e85e:	9b01      	ldr	r3, [sp, #4]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d07d      	beq.n	800e960 <_dtoa_r+0x4f8>
 800e864:	f1b9 0f00 	cmp.w	r9, #0
 800e868:	dd3c      	ble.n	800e8e4 <_dtoa_r+0x47c>
 800e86a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e86e:	9307      	str	r3, [sp, #28]
 800e870:	2200      	movs	r2, #0
 800e872:	4b91      	ldr	r3, [pc, #580]	; (800eab8 <_dtoa_r+0x650>)
 800e874:	4630      	mov	r0, r6
 800e876:	4639      	mov	r1, r7
 800e878:	f7f1 fece 	bl	8000618 <__aeabi_dmul>
 800e87c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e880:	3501      	adds	r5, #1
 800e882:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800e886:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e88a:	4628      	mov	r0, r5
 800e88c:	f7f1 fe5a 	bl	8000544 <__aeabi_i2d>
 800e890:	4632      	mov	r2, r6
 800e892:	463b      	mov	r3, r7
 800e894:	f7f1 fec0 	bl	8000618 <__aeabi_dmul>
 800e898:	4b88      	ldr	r3, [pc, #544]	; (800eabc <_dtoa_r+0x654>)
 800e89a:	2200      	movs	r2, #0
 800e89c:	f7f1 fd06 	bl	80002ac <__adddf3>
 800e8a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e8a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8a8:	9303      	str	r3, [sp, #12]
 800e8aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d15c      	bne.n	800e96a <_dtoa_r+0x502>
 800e8b0:	4b83      	ldr	r3, [pc, #524]	; (800eac0 <_dtoa_r+0x658>)
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	4630      	mov	r0, r6
 800e8b6:	4639      	mov	r1, r7
 800e8b8:	f7f1 fcf6 	bl	80002a8 <__aeabi_dsub>
 800e8bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e8c0:	4606      	mov	r6, r0
 800e8c2:	460f      	mov	r7, r1
 800e8c4:	f7f2 f938 	bl	8000b38 <__aeabi_dcmpgt>
 800e8c8:	2800      	cmp	r0, #0
 800e8ca:	f040 8296 	bne.w	800edfa <_dtoa_r+0x992>
 800e8ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e8d2:	4630      	mov	r0, r6
 800e8d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e8d8:	4639      	mov	r1, r7
 800e8da:	f7f2 f90f 	bl	8000afc <__aeabi_dcmplt>
 800e8de:	2800      	cmp	r0, #0
 800e8e0:	f040 8288 	bne.w	800edf4 <_dtoa_r+0x98c>
 800e8e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e8e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e8ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	f2c0 8158 	blt.w	800eba4 <_dtoa_r+0x73c>
 800e8f4:	f1ba 0f0e 	cmp.w	sl, #14
 800e8f8:	f300 8154 	bgt.w	800eba4 <_dtoa_r+0x73c>
 800e8fc:	4b6b      	ldr	r3, [pc, #428]	; (800eaac <_dtoa_r+0x644>)
 800e8fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e902:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e908:	2b00      	cmp	r3, #0
 800e90a:	f280 80e3 	bge.w	800ead4 <_dtoa_r+0x66c>
 800e90e:	9b01      	ldr	r3, [sp, #4]
 800e910:	2b00      	cmp	r3, #0
 800e912:	f300 80df 	bgt.w	800ead4 <_dtoa_r+0x66c>
 800e916:	f040 826d 	bne.w	800edf4 <_dtoa_r+0x98c>
 800e91a:	4b69      	ldr	r3, [pc, #420]	; (800eac0 <_dtoa_r+0x658>)
 800e91c:	2200      	movs	r2, #0
 800e91e:	4640      	mov	r0, r8
 800e920:	4649      	mov	r1, r9
 800e922:	f7f1 fe79 	bl	8000618 <__aeabi_dmul>
 800e926:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e92a:	f7f2 f8fb 	bl	8000b24 <__aeabi_dcmpge>
 800e92e:	9e01      	ldr	r6, [sp, #4]
 800e930:	4637      	mov	r7, r6
 800e932:	2800      	cmp	r0, #0
 800e934:	f040 8243 	bne.w	800edbe <_dtoa_r+0x956>
 800e938:	9d00      	ldr	r5, [sp, #0]
 800e93a:	2331      	movs	r3, #49	; 0x31
 800e93c:	f805 3b01 	strb.w	r3, [r5], #1
 800e940:	f10a 0a01 	add.w	sl, sl, #1
 800e944:	e23f      	b.n	800edc6 <_dtoa_r+0x95e>
 800e946:	07f2      	lsls	r2, r6, #31
 800e948:	d505      	bpl.n	800e956 <_dtoa_r+0x4ee>
 800e94a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e94e:	f7f1 fe63 	bl	8000618 <__aeabi_dmul>
 800e952:	3501      	adds	r5, #1
 800e954:	2301      	movs	r3, #1
 800e956:	1076      	asrs	r6, r6, #1
 800e958:	3708      	adds	r7, #8
 800e95a:	e76c      	b.n	800e836 <_dtoa_r+0x3ce>
 800e95c:	2502      	movs	r5, #2
 800e95e:	e76f      	b.n	800e840 <_dtoa_r+0x3d8>
 800e960:	9b01      	ldr	r3, [sp, #4]
 800e962:	f8cd a01c 	str.w	sl, [sp, #28]
 800e966:	930c      	str	r3, [sp, #48]	; 0x30
 800e968:	e78d      	b.n	800e886 <_dtoa_r+0x41e>
 800e96a:	9900      	ldr	r1, [sp, #0]
 800e96c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e96e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e970:	4b4e      	ldr	r3, [pc, #312]	; (800eaac <_dtoa_r+0x644>)
 800e972:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e976:	4401      	add	r1, r0
 800e978:	9102      	str	r1, [sp, #8]
 800e97a:	9908      	ldr	r1, [sp, #32]
 800e97c:	eeb0 8a47 	vmov.f32	s16, s14
 800e980:	eef0 8a67 	vmov.f32	s17, s15
 800e984:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e988:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e98c:	2900      	cmp	r1, #0
 800e98e:	d045      	beq.n	800ea1c <_dtoa_r+0x5b4>
 800e990:	494c      	ldr	r1, [pc, #304]	; (800eac4 <_dtoa_r+0x65c>)
 800e992:	2000      	movs	r0, #0
 800e994:	f7f1 ff6a 	bl	800086c <__aeabi_ddiv>
 800e998:	ec53 2b18 	vmov	r2, r3, d8
 800e99c:	f7f1 fc84 	bl	80002a8 <__aeabi_dsub>
 800e9a0:	9d00      	ldr	r5, [sp, #0]
 800e9a2:	ec41 0b18 	vmov	d8, r0, r1
 800e9a6:	4639      	mov	r1, r7
 800e9a8:	4630      	mov	r0, r6
 800e9aa:	f7f2 f8e5 	bl	8000b78 <__aeabi_d2iz>
 800e9ae:	900c      	str	r0, [sp, #48]	; 0x30
 800e9b0:	f7f1 fdc8 	bl	8000544 <__aeabi_i2d>
 800e9b4:	4602      	mov	r2, r0
 800e9b6:	460b      	mov	r3, r1
 800e9b8:	4630      	mov	r0, r6
 800e9ba:	4639      	mov	r1, r7
 800e9bc:	f7f1 fc74 	bl	80002a8 <__aeabi_dsub>
 800e9c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e9c2:	3330      	adds	r3, #48	; 0x30
 800e9c4:	f805 3b01 	strb.w	r3, [r5], #1
 800e9c8:	ec53 2b18 	vmov	r2, r3, d8
 800e9cc:	4606      	mov	r6, r0
 800e9ce:	460f      	mov	r7, r1
 800e9d0:	f7f2 f894 	bl	8000afc <__aeabi_dcmplt>
 800e9d4:	2800      	cmp	r0, #0
 800e9d6:	d165      	bne.n	800eaa4 <_dtoa_r+0x63c>
 800e9d8:	4632      	mov	r2, r6
 800e9da:	463b      	mov	r3, r7
 800e9dc:	4935      	ldr	r1, [pc, #212]	; (800eab4 <_dtoa_r+0x64c>)
 800e9de:	2000      	movs	r0, #0
 800e9e0:	f7f1 fc62 	bl	80002a8 <__aeabi_dsub>
 800e9e4:	ec53 2b18 	vmov	r2, r3, d8
 800e9e8:	f7f2 f888 	bl	8000afc <__aeabi_dcmplt>
 800e9ec:	2800      	cmp	r0, #0
 800e9ee:	f040 80b9 	bne.w	800eb64 <_dtoa_r+0x6fc>
 800e9f2:	9b02      	ldr	r3, [sp, #8]
 800e9f4:	429d      	cmp	r5, r3
 800e9f6:	f43f af75 	beq.w	800e8e4 <_dtoa_r+0x47c>
 800e9fa:	4b2f      	ldr	r3, [pc, #188]	; (800eab8 <_dtoa_r+0x650>)
 800e9fc:	ec51 0b18 	vmov	r0, r1, d8
 800ea00:	2200      	movs	r2, #0
 800ea02:	f7f1 fe09 	bl	8000618 <__aeabi_dmul>
 800ea06:	4b2c      	ldr	r3, [pc, #176]	; (800eab8 <_dtoa_r+0x650>)
 800ea08:	ec41 0b18 	vmov	d8, r0, r1
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	4630      	mov	r0, r6
 800ea10:	4639      	mov	r1, r7
 800ea12:	f7f1 fe01 	bl	8000618 <__aeabi_dmul>
 800ea16:	4606      	mov	r6, r0
 800ea18:	460f      	mov	r7, r1
 800ea1a:	e7c4      	b.n	800e9a6 <_dtoa_r+0x53e>
 800ea1c:	ec51 0b17 	vmov	r0, r1, d7
 800ea20:	f7f1 fdfa 	bl	8000618 <__aeabi_dmul>
 800ea24:	9b02      	ldr	r3, [sp, #8]
 800ea26:	9d00      	ldr	r5, [sp, #0]
 800ea28:	930c      	str	r3, [sp, #48]	; 0x30
 800ea2a:	ec41 0b18 	vmov	d8, r0, r1
 800ea2e:	4639      	mov	r1, r7
 800ea30:	4630      	mov	r0, r6
 800ea32:	f7f2 f8a1 	bl	8000b78 <__aeabi_d2iz>
 800ea36:	9011      	str	r0, [sp, #68]	; 0x44
 800ea38:	f7f1 fd84 	bl	8000544 <__aeabi_i2d>
 800ea3c:	4602      	mov	r2, r0
 800ea3e:	460b      	mov	r3, r1
 800ea40:	4630      	mov	r0, r6
 800ea42:	4639      	mov	r1, r7
 800ea44:	f7f1 fc30 	bl	80002a8 <__aeabi_dsub>
 800ea48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ea4a:	3330      	adds	r3, #48	; 0x30
 800ea4c:	f805 3b01 	strb.w	r3, [r5], #1
 800ea50:	9b02      	ldr	r3, [sp, #8]
 800ea52:	429d      	cmp	r5, r3
 800ea54:	4606      	mov	r6, r0
 800ea56:	460f      	mov	r7, r1
 800ea58:	f04f 0200 	mov.w	r2, #0
 800ea5c:	d134      	bne.n	800eac8 <_dtoa_r+0x660>
 800ea5e:	4b19      	ldr	r3, [pc, #100]	; (800eac4 <_dtoa_r+0x65c>)
 800ea60:	ec51 0b18 	vmov	r0, r1, d8
 800ea64:	f7f1 fc22 	bl	80002ac <__adddf3>
 800ea68:	4602      	mov	r2, r0
 800ea6a:	460b      	mov	r3, r1
 800ea6c:	4630      	mov	r0, r6
 800ea6e:	4639      	mov	r1, r7
 800ea70:	f7f2 f862 	bl	8000b38 <__aeabi_dcmpgt>
 800ea74:	2800      	cmp	r0, #0
 800ea76:	d175      	bne.n	800eb64 <_dtoa_r+0x6fc>
 800ea78:	ec53 2b18 	vmov	r2, r3, d8
 800ea7c:	4911      	ldr	r1, [pc, #68]	; (800eac4 <_dtoa_r+0x65c>)
 800ea7e:	2000      	movs	r0, #0
 800ea80:	f7f1 fc12 	bl	80002a8 <__aeabi_dsub>
 800ea84:	4602      	mov	r2, r0
 800ea86:	460b      	mov	r3, r1
 800ea88:	4630      	mov	r0, r6
 800ea8a:	4639      	mov	r1, r7
 800ea8c:	f7f2 f836 	bl	8000afc <__aeabi_dcmplt>
 800ea90:	2800      	cmp	r0, #0
 800ea92:	f43f af27 	beq.w	800e8e4 <_dtoa_r+0x47c>
 800ea96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ea98:	1e6b      	subs	r3, r5, #1
 800ea9a:	930c      	str	r3, [sp, #48]	; 0x30
 800ea9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800eaa0:	2b30      	cmp	r3, #48	; 0x30
 800eaa2:	d0f8      	beq.n	800ea96 <_dtoa_r+0x62e>
 800eaa4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800eaa8:	e04a      	b.n	800eb40 <_dtoa_r+0x6d8>
 800eaaa:	bf00      	nop
 800eaac:	080110f0 	.word	0x080110f0
 800eab0:	080110c8 	.word	0x080110c8
 800eab4:	3ff00000 	.word	0x3ff00000
 800eab8:	40240000 	.word	0x40240000
 800eabc:	401c0000 	.word	0x401c0000
 800eac0:	40140000 	.word	0x40140000
 800eac4:	3fe00000 	.word	0x3fe00000
 800eac8:	4baf      	ldr	r3, [pc, #700]	; (800ed88 <_dtoa_r+0x920>)
 800eaca:	f7f1 fda5 	bl	8000618 <__aeabi_dmul>
 800eace:	4606      	mov	r6, r0
 800ead0:	460f      	mov	r7, r1
 800ead2:	e7ac      	b.n	800ea2e <_dtoa_r+0x5c6>
 800ead4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ead8:	9d00      	ldr	r5, [sp, #0]
 800eada:	4642      	mov	r2, r8
 800eadc:	464b      	mov	r3, r9
 800eade:	4630      	mov	r0, r6
 800eae0:	4639      	mov	r1, r7
 800eae2:	f7f1 fec3 	bl	800086c <__aeabi_ddiv>
 800eae6:	f7f2 f847 	bl	8000b78 <__aeabi_d2iz>
 800eaea:	9002      	str	r0, [sp, #8]
 800eaec:	f7f1 fd2a 	bl	8000544 <__aeabi_i2d>
 800eaf0:	4642      	mov	r2, r8
 800eaf2:	464b      	mov	r3, r9
 800eaf4:	f7f1 fd90 	bl	8000618 <__aeabi_dmul>
 800eaf8:	4602      	mov	r2, r0
 800eafa:	460b      	mov	r3, r1
 800eafc:	4630      	mov	r0, r6
 800eafe:	4639      	mov	r1, r7
 800eb00:	f7f1 fbd2 	bl	80002a8 <__aeabi_dsub>
 800eb04:	9e02      	ldr	r6, [sp, #8]
 800eb06:	9f01      	ldr	r7, [sp, #4]
 800eb08:	3630      	adds	r6, #48	; 0x30
 800eb0a:	f805 6b01 	strb.w	r6, [r5], #1
 800eb0e:	9e00      	ldr	r6, [sp, #0]
 800eb10:	1bae      	subs	r6, r5, r6
 800eb12:	42b7      	cmp	r7, r6
 800eb14:	4602      	mov	r2, r0
 800eb16:	460b      	mov	r3, r1
 800eb18:	d137      	bne.n	800eb8a <_dtoa_r+0x722>
 800eb1a:	f7f1 fbc7 	bl	80002ac <__adddf3>
 800eb1e:	4642      	mov	r2, r8
 800eb20:	464b      	mov	r3, r9
 800eb22:	4606      	mov	r6, r0
 800eb24:	460f      	mov	r7, r1
 800eb26:	f7f2 f807 	bl	8000b38 <__aeabi_dcmpgt>
 800eb2a:	b9c8      	cbnz	r0, 800eb60 <_dtoa_r+0x6f8>
 800eb2c:	4642      	mov	r2, r8
 800eb2e:	464b      	mov	r3, r9
 800eb30:	4630      	mov	r0, r6
 800eb32:	4639      	mov	r1, r7
 800eb34:	f7f1 ffd8 	bl	8000ae8 <__aeabi_dcmpeq>
 800eb38:	b110      	cbz	r0, 800eb40 <_dtoa_r+0x6d8>
 800eb3a:	9b02      	ldr	r3, [sp, #8]
 800eb3c:	07d9      	lsls	r1, r3, #31
 800eb3e:	d40f      	bmi.n	800eb60 <_dtoa_r+0x6f8>
 800eb40:	4620      	mov	r0, r4
 800eb42:	4659      	mov	r1, fp
 800eb44:	f001 f87e 	bl	800fc44 <_Bfree>
 800eb48:	2300      	movs	r3, #0
 800eb4a:	702b      	strb	r3, [r5, #0]
 800eb4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eb4e:	f10a 0001 	add.w	r0, sl, #1
 800eb52:	6018      	str	r0, [r3, #0]
 800eb54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	f43f acd8 	beq.w	800e50c <_dtoa_r+0xa4>
 800eb5c:	601d      	str	r5, [r3, #0]
 800eb5e:	e4d5      	b.n	800e50c <_dtoa_r+0xa4>
 800eb60:	f8cd a01c 	str.w	sl, [sp, #28]
 800eb64:	462b      	mov	r3, r5
 800eb66:	461d      	mov	r5, r3
 800eb68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eb6c:	2a39      	cmp	r2, #57	; 0x39
 800eb6e:	d108      	bne.n	800eb82 <_dtoa_r+0x71a>
 800eb70:	9a00      	ldr	r2, [sp, #0]
 800eb72:	429a      	cmp	r2, r3
 800eb74:	d1f7      	bne.n	800eb66 <_dtoa_r+0x6fe>
 800eb76:	9a07      	ldr	r2, [sp, #28]
 800eb78:	9900      	ldr	r1, [sp, #0]
 800eb7a:	3201      	adds	r2, #1
 800eb7c:	9207      	str	r2, [sp, #28]
 800eb7e:	2230      	movs	r2, #48	; 0x30
 800eb80:	700a      	strb	r2, [r1, #0]
 800eb82:	781a      	ldrb	r2, [r3, #0]
 800eb84:	3201      	adds	r2, #1
 800eb86:	701a      	strb	r2, [r3, #0]
 800eb88:	e78c      	b.n	800eaa4 <_dtoa_r+0x63c>
 800eb8a:	4b7f      	ldr	r3, [pc, #508]	; (800ed88 <_dtoa_r+0x920>)
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	f7f1 fd43 	bl	8000618 <__aeabi_dmul>
 800eb92:	2200      	movs	r2, #0
 800eb94:	2300      	movs	r3, #0
 800eb96:	4606      	mov	r6, r0
 800eb98:	460f      	mov	r7, r1
 800eb9a:	f7f1 ffa5 	bl	8000ae8 <__aeabi_dcmpeq>
 800eb9e:	2800      	cmp	r0, #0
 800eba0:	d09b      	beq.n	800eada <_dtoa_r+0x672>
 800eba2:	e7cd      	b.n	800eb40 <_dtoa_r+0x6d8>
 800eba4:	9a08      	ldr	r2, [sp, #32]
 800eba6:	2a00      	cmp	r2, #0
 800eba8:	f000 80c4 	beq.w	800ed34 <_dtoa_r+0x8cc>
 800ebac:	9a05      	ldr	r2, [sp, #20]
 800ebae:	2a01      	cmp	r2, #1
 800ebb0:	f300 80a8 	bgt.w	800ed04 <_dtoa_r+0x89c>
 800ebb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ebb6:	2a00      	cmp	r2, #0
 800ebb8:	f000 80a0 	beq.w	800ecfc <_dtoa_r+0x894>
 800ebbc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ebc0:	9e06      	ldr	r6, [sp, #24]
 800ebc2:	4645      	mov	r5, r8
 800ebc4:	9a04      	ldr	r2, [sp, #16]
 800ebc6:	2101      	movs	r1, #1
 800ebc8:	441a      	add	r2, r3
 800ebca:	4620      	mov	r0, r4
 800ebcc:	4498      	add	r8, r3
 800ebce:	9204      	str	r2, [sp, #16]
 800ebd0:	f001 f93e 	bl	800fe50 <__i2b>
 800ebd4:	4607      	mov	r7, r0
 800ebd6:	2d00      	cmp	r5, #0
 800ebd8:	dd0b      	ble.n	800ebf2 <_dtoa_r+0x78a>
 800ebda:	9b04      	ldr	r3, [sp, #16]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	dd08      	ble.n	800ebf2 <_dtoa_r+0x78a>
 800ebe0:	42ab      	cmp	r3, r5
 800ebe2:	9a04      	ldr	r2, [sp, #16]
 800ebe4:	bfa8      	it	ge
 800ebe6:	462b      	movge	r3, r5
 800ebe8:	eba8 0803 	sub.w	r8, r8, r3
 800ebec:	1aed      	subs	r5, r5, r3
 800ebee:	1ad3      	subs	r3, r2, r3
 800ebf0:	9304      	str	r3, [sp, #16]
 800ebf2:	9b06      	ldr	r3, [sp, #24]
 800ebf4:	b1fb      	cbz	r3, 800ec36 <_dtoa_r+0x7ce>
 800ebf6:	9b08      	ldr	r3, [sp, #32]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	f000 809f 	beq.w	800ed3c <_dtoa_r+0x8d4>
 800ebfe:	2e00      	cmp	r6, #0
 800ec00:	dd11      	ble.n	800ec26 <_dtoa_r+0x7be>
 800ec02:	4639      	mov	r1, r7
 800ec04:	4632      	mov	r2, r6
 800ec06:	4620      	mov	r0, r4
 800ec08:	f001 f9de 	bl	800ffc8 <__pow5mult>
 800ec0c:	465a      	mov	r2, fp
 800ec0e:	4601      	mov	r1, r0
 800ec10:	4607      	mov	r7, r0
 800ec12:	4620      	mov	r0, r4
 800ec14:	f001 f932 	bl	800fe7c <__multiply>
 800ec18:	4659      	mov	r1, fp
 800ec1a:	9007      	str	r0, [sp, #28]
 800ec1c:	4620      	mov	r0, r4
 800ec1e:	f001 f811 	bl	800fc44 <_Bfree>
 800ec22:	9b07      	ldr	r3, [sp, #28]
 800ec24:	469b      	mov	fp, r3
 800ec26:	9b06      	ldr	r3, [sp, #24]
 800ec28:	1b9a      	subs	r2, r3, r6
 800ec2a:	d004      	beq.n	800ec36 <_dtoa_r+0x7ce>
 800ec2c:	4659      	mov	r1, fp
 800ec2e:	4620      	mov	r0, r4
 800ec30:	f001 f9ca 	bl	800ffc8 <__pow5mult>
 800ec34:	4683      	mov	fp, r0
 800ec36:	2101      	movs	r1, #1
 800ec38:	4620      	mov	r0, r4
 800ec3a:	f001 f909 	bl	800fe50 <__i2b>
 800ec3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	4606      	mov	r6, r0
 800ec44:	dd7c      	ble.n	800ed40 <_dtoa_r+0x8d8>
 800ec46:	461a      	mov	r2, r3
 800ec48:	4601      	mov	r1, r0
 800ec4a:	4620      	mov	r0, r4
 800ec4c:	f001 f9bc 	bl	800ffc8 <__pow5mult>
 800ec50:	9b05      	ldr	r3, [sp, #20]
 800ec52:	2b01      	cmp	r3, #1
 800ec54:	4606      	mov	r6, r0
 800ec56:	dd76      	ble.n	800ed46 <_dtoa_r+0x8de>
 800ec58:	2300      	movs	r3, #0
 800ec5a:	9306      	str	r3, [sp, #24]
 800ec5c:	6933      	ldr	r3, [r6, #16]
 800ec5e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ec62:	6918      	ldr	r0, [r3, #16]
 800ec64:	f001 f8a4 	bl	800fdb0 <__hi0bits>
 800ec68:	f1c0 0020 	rsb	r0, r0, #32
 800ec6c:	9b04      	ldr	r3, [sp, #16]
 800ec6e:	4418      	add	r0, r3
 800ec70:	f010 001f 	ands.w	r0, r0, #31
 800ec74:	f000 8086 	beq.w	800ed84 <_dtoa_r+0x91c>
 800ec78:	f1c0 0320 	rsb	r3, r0, #32
 800ec7c:	2b04      	cmp	r3, #4
 800ec7e:	dd7f      	ble.n	800ed80 <_dtoa_r+0x918>
 800ec80:	f1c0 001c 	rsb	r0, r0, #28
 800ec84:	9b04      	ldr	r3, [sp, #16]
 800ec86:	4403      	add	r3, r0
 800ec88:	4480      	add	r8, r0
 800ec8a:	4405      	add	r5, r0
 800ec8c:	9304      	str	r3, [sp, #16]
 800ec8e:	f1b8 0f00 	cmp.w	r8, #0
 800ec92:	dd05      	ble.n	800eca0 <_dtoa_r+0x838>
 800ec94:	4659      	mov	r1, fp
 800ec96:	4642      	mov	r2, r8
 800ec98:	4620      	mov	r0, r4
 800ec9a:	f001 f9ef 	bl	801007c <__lshift>
 800ec9e:	4683      	mov	fp, r0
 800eca0:	9b04      	ldr	r3, [sp, #16]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	dd05      	ble.n	800ecb2 <_dtoa_r+0x84a>
 800eca6:	4631      	mov	r1, r6
 800eca8:	461a      	mov	r2, r3
 800ecaa:	4620      	mov	r0, r4
 800ecac:	f001 f9e6 	bl	801007c <__lshift>
 800ecb0:	4606      	mov	r6, r0
 800ecb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d069      	beq.n	800ed8c <_dtoa_r+0x924>
 800ecb8:	4631      	mov	r1, r6
 800ecba:	4658      	mov	r0, fp
 800ecbc:	f001 fa4a 	bl	8010154 <__mcmp>
 800ecc0:	2800      	cmp	r0, #0
 800ecc2:	da63      	bge.n	800ed8c <_dtoa_r+0x924>
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	4659      	mov	r1, fp
 800ecc8:	220a      	movs	r2, #10
 800ecca:	4620      	mov	r0, r4
 800eccc:	f000 ffdc 	bl	800fc88 <__multadd>
 800ecd0:	9b08      	ldr	r3, [sp, #32]
 800ecd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ecd6:	4683      	mov	fp, r0
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	f000 818f 	beq.w	800effc <_dtoa_r+0xb94>
 800ecde:	4639      	mov	r1, r7
 800ece0:	2300      	movs	r3, #0
 800ece2:	220a      	movs	r2, #10
 800ece4:	4620      	mov	r0, r4
 800ece6:	f000 ffcf 	bl	800fc88 <__multadd>
 800ecea:	f1b9 0f00 	cmp.w	r9, #0
 800ecee:	4607      	mov	r7, r0
 800ecf0:	f300 808e 	bgt.w	800ee10 <_dtoa_r+0x9a8>
 800ecf4:	9b05      	ldr	r3, [sp, #20]
 800ecf6:	2b02      	cmp	r3, #2
 800ecf8:	dc50      	bgt.n	800ed9c <_dtoa_r+0x934>
 800ecfa:	e089      	b.n	800ee10 <_dtoa_r+0x9a8>
 800ecfc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ecfe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ed02:	e75d      	b.n	800ebc0 <_dtoa_r+0x758>
 800ed04:	9b01      	ldr	r3, [sp, #4]
 800ed06:	1e5e      	subs	r6, r3, #1
 800ed08:	9b06      	ldr	r3, [sp, #24]
 800ed0a:	42b3      	cmp	r3, r6
 800ed0c:	bfbf      	itttt	lt
 800ed0e:	9b06      	ldrlt	r3, [sp, #24]
 800ed10:	9606      	strlt	r6, [sp, #24]
 800ed12:	1af2      	sublt	r2, r6, r3
 800ed14:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800ed16:	bfb6      	itet	lt
 800ed18:	189b      	addlt	r3, r3, r2
 800ed1a:	1b9e      	subge	r6, r3, r6
 800ed1c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800ed1e:	9b01      	ldr	r3, [sp, #4]
 800ed20:	bfb8      	it	lt
 800ed22:	2600      	movlt	r6, #0
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	bfb5      	itete	lt
 800ed28:	eba8 0503 	sublt.w	r5, r8, r3
 800ed2c:	9b01      	ldrge	r3, [sp, #4]
 800ed2e:	2300      	movlt	r3, #0
 800ed30:	4645      	movge	r5, r8
 800ed32:	e747      	b.n	800ebc4 <_dtoa_r+0x75c>
 800ed34:	9e06      	ldr	r6, [sp, #24]
 800ed36:	9f08      	ldr	r7, [sp, #32]
 800ed38:	4645      	mov	r5, r8
 800ed3a:	e74c      	b.n	800ebd6 <_dtoa_r+0x76e>
 800ed3c:	9a06      	ldr	r2, [sp, #24]
 800ed3e:	e775      	b.n	800ec2c <_dtoa_r+0x7c4>
 800ed40:	9b05      	ldr	r3, [sp, #20]
 800ed42:	2b01      	cmp	r3, #1
 800ed44:	dc18      	bgt.n	800ed78 <_dtoa_r+0x910>
 800ed46:	9b02      	ldr	r3, [sp, #8]
 800ed48:	b9b3      	cbnz	r3, 800ed78 <_dtoa_r+0x910>
 800ed4a:	9b03      	ldr	r3, [sp, #12]
 800ed4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ed50:	b9a3      	cbnz	r3, 800ed7c <_dtoa_r+0x914>
 800ed52:	9b03      	ldr	r3, [sp, #12]
 800ed54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ed58:	0d1b      	lsrs	r3, r3, #20
 800ed5a:	051b      	lsls	r3, r3, #20
 800ed5c:	b12b      	cbz	r3, 800ed6a <_dtoa_r+0x902>
 800ed5e:	9b04      	ldr	r3, [sp, #16]
 800ed60:	3301      	adds	r3, #1
 800ed62:	9304      	str	r3, [sp, #16]
 800ed64:	f108 0801 	add.w	r8, r8, #1
 800ed68:	2301      	movs	r3, #1
 800ed6a:	9306      	str	r3, [sp, #24]
 800ed6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	f47f af74 	bne.w	800ec5c <_dtoa_r+0x7f4>
 800ed74:	2001      	movs	r0, #1
 800ed76:	e779      	b.n	800ec6c <_dtoa_r+0x804>
 800ed78:	2300      	movs	r3, #0
 800ed7a:	e7f6      	b.n	800ed6a <_dtoa_r+0x902>
 800ed7c:	9b02      	ldr	r3, [sp, #8]
 800ed7e:	e7f4      	b.n	800ed6a <_dtoa_r+0x902>
 800ed80:	d085      	beq.n	800ec8e <_dtoa_r+0x826>
 800ed82:	4618      	mov	r0, r3
 800ed84:	301c      	adds	r0, #28
 800ed86:	e77d      	b.n	800ec84 <_dtoa_r+0x81c>
 800ed88:	40240000 	.word	0x40240000
 800ed8c:	9b01      	ldr	r3, [sp, #4]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	dc38      	bgt.n	800ee04 <_dtoa_r+0x99c>
 800ed92:	9b05      	ldr	r3, [sp, #20]
 800ed94:	2b02      	cmp	r3, #2
 800ed96:	dd35      	ble.n	800ee04 <_dtoa_r+0x99c>
 800ed98:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ed9c:	f1b9 0f00 	cmp.w	r9, #0
 800eda0:	d10d      	bne.n	800edbe <_dtoa_r+0x956>
 800eda2:	4631      	mov	r1, r6
 800eda4:	464b      	mov	r3, r9
 800eda6:	2205      	movs	r2, #5
 800eda8:	4620      	mov	r0, r4
 800edaa:	f000 ff6d 	bl	800fc88 <__multadd>
 800edae:	4601      	mov	r1, r0
 800edb0:	4606      	mov	r6, r0
 800edb2:	4658      	mov	r0, fp
 800edb4:	f001 f9ce 	bl	8010154 <__mcmp>
 800edb8:	2800      	cmp	r0, #0
 800edba:	f73f adbd 	bgt.w	800e938 <_dtoa_r+0x4d0>
 800edbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edc0:	9d00      	ldr	r5, [sp, #0]
 800edc2:	ea6f 0a03 	mvn.w	sl, r3
 800edc6:	f04f 0800 	mov.w	r8, #0
 800edca:	4631      	mov	r1, r6
 800edcc:	4620      	mov	r0, r4
 800edce:	f000 ff39 	bl	800fc44 <_Bfree>
 800edd2:	2f00      	cmp	r7, #0
 800edd4:	f43f aeb4 	beq.w	800eb40 <_dtoa_r+0x6d8>
 800edd8:	f1b8 0f00 	cmp.w	r8, #0
 800eddc:	d005      	beq.n	800edea <_dtoa_r+0x982>
 800edde:	45b8      	cmp	r8, r7
 800ede0:	d003      	beq.n	800edea <_dtoa_r+0x982>
 800ede2:	4641      	mov	r1, r8
 800ede4:	4620      	mov	r0, r4
 800ede6:	f000 ff2d 	bl	800fc44 <_Bfree>
 800edea:	4639      	mov	r1, r7
 800edec:	4620      	mov	r0, r4
 800edee:	f000 ff29 	bl	800fc44 <_Bfree>
 800edf2:	e6a5      	b.n	800eb40 <_dtoa_r+0x6d8>
 800edf4:	2600      	movs	r6, #0
 800edf6:	4637      	mov	r7, r6
 800edf8:	e7e1      	b.n	800edbe <_dtoa_r+0x956>
 800edfa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800edfc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ee00:	4637      	mov	r7, r6
 800ee02:	e599      	b.n	800e938 <_dtoa_r+0x4d0>
 800ee04:	9b08      	ldr	r3, [sp, #32]
 800ee06:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	f000 80fd 	beq.w	800f00a <_dtoa_r+0xba2>
 800ee10:	2d00      	cmp	r5, #0
 800ee12:	dd05      	ble.n	800ee20 <_dtoa_r+0x9b8>
 800ee14:	4639      	mov	r1, r7
 800ee16:	462a      	mov	r2, r5
 800ee18:	4620      	mov	r0, r4
 800ee1a:	f001 f92f 	bl	801007c <__lshift>
 800ee1e:	4607      	mov	r7, r0
 800ee20:	9b06      	ldr	r3, [sp, #24]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d05c      	beq.n	800eee0 <_dtoa_r+0xa78>
 800ee26:	6879      	ldr	r1, [r7, #4]
 800ee28:	4620      	mov	r0, r4
 800ee2a:	f000 fecb 	bl	800fbc4 <_Balloc>
 800ee2e:	4605      	mov	r5, r0
 800ee30:	b928      	cbnz	r0, 800ee3e <_dtoa_r+0x9d6>
 800ee32:	4b80      	ldr	r3, [pc, #512]	; (800f034 <_dtoa_r+0xbcc>)
 800ee34:	4602      	mov	r2, r0
 800ee36:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ee3a:	f7ff bb2e 	b.w	800e49a <_dtoa_r+0x32>
 800ee3e:	693a      	ldr	r2, [r7, #16]
 800ee40:	3202      	adds	r2, #2
 800ee42:	0092      	lsls	r2, r2, #2
 800ee44:	f107 010c 	add.w	r1, r7, #12
 800ee48:	300c      	adds	r0, #12
 800ee4a:	f7fd fb27 	bl	800c49c <memcpy>
 800ee4e:	2201      	movs	r2, #1
 800ee50:	4629      	mov	r1, r5
 800ee52:	4620      	mov	r0, r4
 800ee54:	f001 f912 	bl	801007c <__lshift>
 800ee58:	9b00      	ldr	r3, [sp, #0]
 800ee5a:	3301      	adds	r3, #1
 800ee5c:	9301      	str	r3, [sp, #4]
 800ee5e:	9b00      	ldr	r3, [sp, #0]
 800ee60:	444b      	add	r3, r9
 800ee62:	9307      	str	r3, [sp, #28]
 800ee64:	9b02      	ldr	r3, [sp, #8]
 800ee66:	f003 0301 	and.w	r3, r3, #1
 800ee6a:	46b8      	mov	r8, r7
 800ee6c:	9306      	str	r3, [sp, #24]
 800ee6e:	4607      	mov	r7, r0
 800ee70:	9b01      	ldr	r3, [sp, #4]
 800ee72:	4631      	mov	r1, r6
 800ee74:	3b01      	subs	r3, #1
 800ee76:	4658      	mov	r0, fp
 800ee78:	9302      	str	r3, [sp, #8]
 800ee7a:	f7ff fa69 	bl	800e350 <quorem>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	3330      	adds	r3, #48	; 0x30
 800ee82:	9004      	str	r0, [sp, #16]
 800ee84:	4641      	mov	r1, r8
 800ee86:	4658      	mov	r0, fp
 800ee88:	9308      	str	r3, [sp, #32]
 800ee8a:	f001 f963 	bl	8010154 <__mcmp>
 800ee8e:	463a      	mov	r2, r7
 800ee90:	4681      	mov	r9, r0
 800ee92:	4631      	mov	r1, r6
 800ee94:	4620      	mov	r0, r4
 800ee96:	f001 f979 	bl	801018c <__mdiff>
 800ee9a:	68c2      	ldr	r2, [r0, #12]
 800ee9c:	9b08      	ldr	r3, [sp, #32]
 800ee9e:	4605      	mov	r5, r0
 800eea0:	bb02      	cbnz	r2, 800eee4 <_dtoa_r+0xa7c>
 800eea2:	4601      	mov	r1, r0
 800eea4:	4658      	mov	r0, fp
 800eea6:	f001 f955 	bl	8010154 <__mcmp>
 800eeaa:	9b08      	ldr	r3, [sp, #32]
 800eeac:	4602      	mov	r2, r0
 800eeae:	4629      	mov	r1, r5
 800eeb0:	4620      	mov	r0, r4
 800eeb2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800eeb6:	f000 fec5 	bl	800fc44 <_Bfree>
 800eeba:	9b05      	ldr	r3, [sp, #20]
 800eebc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eebe:	9d01      	ldr	r5, [sp, #4]
 800eec0:	ea43 0102 	orr.w	r1, r3, r2
 800eec4:	9b06      	ldr	r3, [sp, #24]
 800eec6:	430b      	orrs	r3, r1
 800eec8:	9b08      	ldr	r3, [sp, #32]
 800eeca:	d10d      	bne.n	800eee8 <_dtoa_r+0xa80>
 800eecc:	2b39      	cmp	r3, #57	; 0x39
 800eece:	d029      	beq.n	800ef24 <_dtoa_r+0xabc>
 800eed0:	f1b9 0f00 	cmp.w	r9, #0
 800eed4:	dd01      	ble.n	800eeda <_dtoa_r+0xa72>
 800eed6:	9b04      	ldr	r3, [sp, #16]
 800eed8:	3331      	adds	r3, #49	; 0x31
 800eeda:	9a02      	ldr	r2, [sp, #8]
 800eedc:	7013      	strb	r3, [r2, #0]
 800eede:	e774      	b.n	800edca <_dtoa_r+0x962>
 800eee0:	4638      	mov	r0, r7
 800eee2:	e7b9      	b.n	800ee58 <_dtoa_r+0x9f0>
 800eee4:	2201      	movs	r2, #1
 800eee6:	e7e2      	b.n	800eeae <_dtoa_r+0xa46>
 800eee8:	f1b9 0f00 	cmp.w	r9, #0
 800eeec:	db06      	blt.n	800eefc <_dtoa_r+0xa94>
 800eeee:	9905      	ldr	r1, [sp, #20]
 800eef0:	ea41 0909 	orr.w	r9, r1, r9
 800eef4:	9906      	ldr	r1, [sp, #24]
 800eef6:	ea59 0101 	orrs.w	r1, r9, r1
 800eefa:	d120      	bne.n	800ef3e <_dtoa_r+0xad6>
 800eefc:	2a00      	cmp	r2, #0
 800eefe:	ddec      	ble.n	800eeda <_dtoa_r+0xa72>
 800ef00:	4659      	mov	r1, fp
 800ef02:	2201      	movs	r2, #1
 800ef04:	4620      	mov	r0, r4
 800ef06:	9301      	str	r3, [sp, #4]
 800ef08:	f001 f8b8 	bl	801007c <__lshift>
 800ef0c:	4631      	mov	r1, r6
 800ef0e:	4683      	mov	fp, r0
 800ef10:	f001 f920 	bl	8010154 <__mcmp>
 800ef14:	2800      	cmp	r0, #0
 800ef16:	9b01      	ldr	r3, [sp, #4]
 800ef18:	dc02      	bgt.n	800ef20 <_dtoa_r+0xab8>
 800ef1a:	d1de      	bne.n	800eeda <_dtoa_r+0xa72>
 800ef1c:	07da      	lsls	r2, r3, #31
 800ef1e:	d5dc      	bpl.n	800eeda <_dtoa_r+0xa72>
 800ef20:	2b39      	cmp	r3, #57	; 0x39
 800ef22:	d1d8      	bne.n	800eed6 <_dtoa_r+0xa6e>
 800ef24:	9a02      	ldr	r2, [sp, #8]
 800ef26:	2339      	movs	r3, #57	; 0x39
 800ef28:	7013      	strb	r3, [r2, #0]
 800ef2a:	462b      	mov	r3, r5
 800ef2c:	461d      	mov	r5, r3
 800ef2e:	3b01      	subs	r3, #1
 800ef30:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ef34:	2a39      	cmp	r2, #57	; 0x39
 800ef36:	d050      	beq.n	800efda <_dtoa_r+0xb72>
 800ef38:	3201      	adds	r2, #1
 800ef3a:	701a      	strb	r2, [r3, #0]
 800ef3c:	e745      	b.n	800edca <_dtoa_r+0x962>
 800ef3e:	2a00      	cmp	r2, #0
 800ef40:	dd03      	ble.n	800ef4a <_dtoa_r+0xae2>
 800ef42:	2b39      	cmp	r3, #57	; 0x39
 800ef44:	d0ee      	beq.n	800ef24 <_dtoa_r+0xabc>
 800ef46:	3301      	adds	r3, #1
 800ef48:	e7c7      	b.n	800eeda <_dtoa_r+0xa72>
 800ef4a:	9a01      	ldr	r2, [sp, #4]
 800ef4c:	9907      	ldr	r1, [sp, #28]
 800ef4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ef52:	428a      	cmp	r2, r1
 800ef54:	d02a      	beq.n	800efac <_dtoa_r+0xb44>
 800ef56:	4659      	mov	r1, fp
 800ef58:	2300      	movs	r3, #0
 800ef5a:	220a      	movs	r2, #10
 800ef5c:	4620      	mov	r0, r4
 800ef5e:	f000 fe93 	bl	800fc88 <__multadd>
 800ef62:	45b8      	cmp	r8, r7
 800ef64:	4683      	mov	fp, r0
 800ef66:	f04f 0300 	mov.w	r3, #0
 800ef6a:	f04f 020a 	mov.w	r2, #10
 800ef6e:	4641      	mov	r1, r8
 800ef70:	4620      	mov	r0, r4
 800ef72:	d107      	bne.n	800ef84 <_dtoa_r+0xb1c>
 800ef74:	f000 fe88 	bl	800fc88 <__multadd>
 800ef78:	4680      	mov	r8, r0
 800ef7a:	4607      	mov	r7, r0
 800ef7c:	9b01      	ldr	r3, [sp, #4]
 800ef7e:	3301      	adds	r3, #1
 800ef80:	9301      	str	r3, [sp, #4]
 800ef82:	e775      	b.n	800ee70 <_dtoa_r+0xa08>
 800ef84:	f000 fe80 	bl	800fc88 <__multadd>
 800ef88:	4639      	mov	r1, r7
 800ef8a:	4680      	mov	r8, r0
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	220a      	movs	r2, #10
 800ef90:	4620      	mov	r0, r4
 800ef92:	f000 fe79 	bl	800fc88 <__multadd>
 800ef96:	4607      	mov	r7, r0
 800ef98:	e7f0      	b.n	800ef7c <_dtoa_r+0xb14>
 800ef9a:	f1b9 0f00 	cmp.w	r9, #0
 800ef9e:	9a00      	ldr	r2, [sp, #0]
 800efa0:	bfcc      	ite	gt
 800efa2:	464d      	movgt	r5, r9
 800efa4:	2501      	movle	r5, #1
 800efa6:	4415      	add	r5, r2
 800efa8:	f04f 0800 	mov.w	r8, #0
 800efac:	4659      	mov	r1, fp
 800efae:	2201      	movs	r2, #1
 800efb0:	4620      	mov	r0, r4
 800efb2:	9301      	str	r3, [sp, #4]
 800efb4:	f001 f862 	bl	801007c <__lshift>
 800efb8:	4631      	mov	r1, r6
 800efba:	4683      	mov	fp, r0
 800efbc:	f001 f8ca 	bl	8010154 <__mcmp>
 800efc0:	2800      	cmp	r0, #0
 800efc2:	dcb2      	bgt.n	800ef2a <_dtoa_r+0xac2>
 800efc4:	d102      	bne.n	800efcc <_dtoa_r+0xb64>
 800efc6:	9b01      	ldr	r3, [sp, #4]
 800efc8:	07db      	lsls	r3, r3, #31
 800efca:	d4ae      	bmi.n	800ef2a <_dtoa_r+0xac2>
 800efcc:	462b      	mov	r3, r5
 800efce:	461d      	mov	r5, r3
 800efd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800efd4:	2a30      	cmp	r2, #48	; 0x30
 800efd6:	d0fa      	beq.n	800efce <_dtoa_r+0xb66>
 800efd8:	e6f7      	b.n	800edca <_dtoa_r+0x962>
 800efda:	9a00      	ldr	r2, [sp, #0]
 800efdc:	429a      	cmp	r2, r3
 800efde:	d1a5      	bne.n	800ef2c <_dtoa_r+0xac4>
 800efe0:	f10a 0a01 	add.w	sl, sl, #1
 800efe4:	2331      	movs	r3, #49	; 0x31
 800efe6:	e779      	b.n	800eedc <_dtoa_r+0xa74>
 800efe8:	4b13      	ldr	r3, [pc, #76]	; (800f038 <_dtoa_r+0xbd0>)
 800efea:	f7ff baaf 	b.w	800e54c <_dtoa_r+0xe4>
 800efee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	f47f aa86 	bne.w	800e502 <_dtoa_r+0x9a>
 800eff6:	4b11      	ldr	r3, [pc, #68]	; (800f03c <_dtoa_r+0xbd4>)
 800eff8:	f7ff baa8 	b.w	800e54c <_dtoa_r+0xe4>
 800effc:	f1b9 0f00 	cmp.w	r9, #0
 800f000:	dc03      	bgt.n	800f00a <_dtoa_r+0xba2>
 800f002:	9b05      	ldr	r3, [sp, #20]
 800f004:	2b02      	cmp	r3, #2
 800f006:	f73f aec9 	bgt.w	800ed9c <_dtoa_r+0x934>
 800f00a:	9d00      	ldr	r5, [sp, #0]
 800f00c:	4631      	mov	r1, r6
 800f00e:	4658      	mov	r0, fp
 800f010:	f7ff f99e 	bl	800e350 <quorem>
 800f014:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f018:	f805 3b01 	strb.w	r3, [r5], #1
 800f01c:	9a00      	ldr	r2, [sp, #0]
 800f01e:	1aaa      	subs	r2, r5, r2
 800f020:	4591      	cmp	r9, r2
 800f022:	ddba      	ble.n	800ef9a <_dtoa_r+0xb32>
 800f024:	4659      	mov	r1, fp
 800f026:	2300      	movs	r3, #0
 800f028:	220a      	movs	r2, #10
 800f02a:	4620      	mov	r0, r4
 800f02c:	f000 fe2c 	bl	800fc88 <__multadd>
 800f030:	4683      	mov	fp, r0
 800f032:	e7eb      	b.n	800f00c <_dtoa_r+0xba4>
 800f034:	08010f73 	.word	0x08010f73
 800f038:	08010e70 	.word	0x08010e70
 800f03c:	08010ef0 	.word	0x08010ef0

0800f040 <__sflush_r>:
 800f040:	898a      	ldrh	r2, [r1, #12]
 800f042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f046:	4605      	mov	r5, r0
 800f048:	0710      	lsls	r0, r2, #28
 800f04a:	460c      	mov	r4, r1
 800f04c:	d458      	bmi.n	800f100 <__sflush_r+0xc0>
 800f04e:	684b      	ldr	r3, [r1, #4]
 800f050:	2b00      	cmp	r3, #0
 800f052:	dc05      	bgt.n	800f060 <__sflush_r+0x20>
 800f054:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f056:	2b00      	cmp	r3, #0
 800f058:	dc02      	bgt.n	800f060 <__sflush_r+0x20>
 800f05a:	2000      	movs	r0, #0
 800f05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f060:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f062:	2e00      	cmp	r6, #0
 800f064:	d0f9      	beq.n	800f05a <__sflush_r+0x1a>
 800f066:	2300      	movs	r3, #0
 800f068:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f06c:	682f      	ldr	r7, [r5, #0]
 800f06e:	602b      	str	r3, [r5, #0]
 800f070:	d032      	beq.n	800f0d8 <__sflush_r+0x98>
 800f072:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f074:	89a3      	ldrh	r3, [r4, #12]
 800f076:	075a      	lsls	r2, r3, #29
 800f078:	d505      	bpl.n	800f086 <__sflush_r+0x46>
 800f07a:	6863      	ldr	r3, [r4, #4]
 800f07c:	1ac0      	subs	r0, r0, r3
 800f07e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f080:	b10b      	cbz	r3, 800f086 <__sflush_r+0x46>
 800f082:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f084:	1ac0      	subs	r0, r0, r3
 800f086:	2300      	movs	r3, #0
 800f088:	4602      	mov	r2, r0
 800f08a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f08c:	6a21      	ldr	r1, [r4, #32]
 800f08e:	4628      	mov	r0, r5
 800f090:	47b0      	blx	r6
 800f092:	1c43      	adds	r3, r0, #1
 800f094:	89a3      	ldrh	r3, [r4, #12]
 800f096:	d106      	bne.n	800f0a6 <__sflush_r+0x66>
 800f098:	6829      	ldr	r1, [r5, #0]
 800f09a:	291d      	cmp	r1, #29
 800f09c:	d82c      	bhi.n	800f0f8 <__sflush_r+0xb8>
 800f09e:	4a2a      	ldr	r2, [pc, #168]	; (800f148 <__sflush_r+0x108>)
 800f0a0:	40ca      	lsrs	r2, r1
 800f0a2:	07d6      	lsls	r6, r2, #31
 800f0a4:	d528      	bpl.n	800f0f8 <__sflush_r+0xb8>
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	6062      	str	r2, [r4, #4]
 800f0aa:	04d9      	lsls	r1, r3, #19
 800f0ac:	6922      	ldr	r2, [r4, #16]
 800f0ae:	6022      	str	r2, [r4, #0]
 800f0b0:	d504      	bpl.n	800f0bc <__sflush_r+0x7c>
 800f0b2:	1c42      	adds	r2, r0, #1
 800f0b4:	d101      	bne.n	800f0ba <__sflush_r+0x7a>
 800f0b6:	682b      	ldr	r3, [r5, #0]
 800f0b8:	b903      	cbnz	r3, 800f0bc <__sflush_r+0x7c>
 800f0ba:	6560      	str	r0, [r4, #84]	; 0x54
 800f0bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f0be:	602f      	str	r7, [r5, #0]
 800f0c0:	2900      	cmp	r1, #0
 800f0c2:	d0ca      	beq.n	800f05a <__sflush_r+0x1a>
 800f0c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f0c8:	4299      	cmp	r1, r3
 800f0ca:	d002      	beq.n	800f0d2 <__sflush_r+0x92>
 800f0cc:	4628      	mov	r0, r5
 800f0ce:	f7fd f9fb 	bl	800c4c8 <_free_r>
 800f0d2:	2000      	movs	r0, #0
 800f0d4:	6360      	str	r0, [r4, #52]	; 0x34
 800f0d6:	e7c1      	b.n	800f05c <__sflush_r+0x1c>
 800f0d8:	6a21      	ldr	r1, [r4, #32]
 800f0da:	2301      	movs	r3, #1
 800f0dc:	4628      	mov	r0, r5
 800f0de:	47b0      	blx	r6
 800f0e0:	1c41      	adds	r1, r0, #1
 800f0e2:	d1c7      	bne.n	800f074 <__sflush_r+0x34>
 800f0e4:	682b      	ldr	r3, [r5, #0]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d0c4      	beq.n	800f074 <__sflush_r+0x34>
 800f0ea:	2b1d      	cmp	r3, #29
 800f0ec:	d001      	beq.n	800f0f2 <__sflush_r+0xb2>
 800f0ee:	2b16      	cmp	r3, #22
 800f0f0:	d101      	bne.n	800f0f6 <__sflush_r+0xb6>
 800f0f2:	602f      	str	r7, [r5, #0]
 800f0f4:	e7b1      	b.n	800f05a <__sflush_r+0x1a>
 800f0f6:	89a3      	ldrh	r3, [r4, #12]
 800f0f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0fc:	81a3      	strh	r3, [r4, #12]
 800f0fe:	e7ad      	b.n	800f05c <__sflush_r+0x1c>
 800f100:	690f      	ldr	r7, [r1, #16]
 800f102:	2f00      	cmp	r7, #0
 800f104:	d0a9      	beq.n	800f05a <__sflush_r+0x1a>
 800f106:	0793      	lsls	r3, r2, #30
 800f108:	680e      	ldr	r6, [r1, #0]
 800f10a:	bf08      	it	eq
 800f10c:	694b      	ldreq	r3, [r1, #20]
 800f10e:	600f      	str	r7, [r1, #0]
 800f110:	bf18      	it	ne
 800f112:	2300      	movne	r3, #0
 800f114:	eba6 0807 	sub.w	r8, r6, r7
 800f118:	608b      	str	r3, [r1, #8]
 800f11a:	f1b8 0f00 	cmp.w	r8, #0
 800f11e:	dd9c      	ble.n	800f05a <__sflush_r+0x1a>
 800f120:	6a21      	ldr	r1, [r4, #32]
 800f122:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f124:	4643      	mov	r3, r8
 800f126:	463a      	mov	r2, r7
 800f128:	4628      	mov	r0, r5
 800f12a:	47b0      	blx	r6
 800f12c:	2800      	cmp	r0, #0
 800f12e:	dc06      	bgt.n	800f13e <__sflush_r+0xfe>
 800f130:	89a3      	ldrh	r3, [r4, #12]
 800f132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f136:	81a3      	strh	r3, [r4, #12]
 800f138:	f04f 30ff 	mov.w	r0, #4294967295
 800f13c:	e78e      	b.n	800f05c <__sflush_r+0x1c>
 800f13e:	4407      	add	r7, r0
 800f140:	eba8 0800 	sub.w	r8, r8, r0
 800f144:	e7e9      	b.n	800f11a <__sflush_r+0xda>
 800f146:	bf00      	nop
 800f148:	20400001 	.word	0x20400001

0800f14c <_fflush_r>:
 800f14c:	b538      	push	{r3, r4, r5, lr}
 800f14e:	690b      	ldr	r3, [r1, #16]
 800f150:	4605      	mov	r5, r0
 800f152:	460c      	mov	r4, r1
 800f154:	b913      	cbnz	r3, 800f15c <_fflush_r+0x10>
 800f156:	2500      	movs	r5, #0
 800f158:	4628      	mov	r0, r5
 800f15a:	bd38      	pop	{r3, r4, r5, pc}
 800f15c:	b118      	cbz	r0, 800f166 <_fflush_r+0x1a>
 800f15e:	6983      	ldr	r3, [r0, #24]
 800f160:	b90b      	cbnz	r3, 800f166 <_fflush_r+0x1a>
 800f162:	f000 f887 	bl	800f274 <__sinit>
 800f166:	4b14      	ldr	r3, [pc, #80]	; (800f1b8 <_fflush_r+0x6c>)
 800f168:	429c      	cmp	r4, r3
 800f16a:	d11b      	bne.n	800f1a4 <_fflush_r+0x58>
 800f16c:	686c      	ldr	r4, [r5, #4]
 800f16e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d0ef      	beq.n	800f156 <_fflush_r+0xa>
 800f176:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f178:	07d0      	lsls	r0, r2, #31
 800f17a:	d404      	bmi.n	800f186 <_fflush_r+0x3a>
 800f17c:	0599      	lsls	r1, r3, #22
 800f17e:	d402      	bmi.n	800f186 <_fflush_r+0x3a>
 800f180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f182:	f000 fc88 	bl	800fa96 <__retarget_lock_acquire_recursive>
 800f186:	4628      	mov	r0, r5
 800f188:	4621      	mov	r1, r4
 800f18a:	f7ff ff59 	bl	800f040 <__sflush_r>
 800f18e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f190:	07da      	lsls	r2, r3, #31
 800f192:	4605      	mov	r5, r0
 800f194:	d4e0      	bmi.n	800f158 <_fflush_r+0xc>
 800f196:	89a3      	ldrh	r3, [r4, #12]
 800f198:	059b      	lsls	r3, r3, #22
 800f19a:	d4dd      	bmi.n	800f158 <_fflush_r+0xc>
 800f19c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f19e:	f000 fc7b 	bl	800fa98 <__retarget_lock_release_recursive>
 800f1a2:	e7d9      	b.n	800f158 <_fflush_r+0xc>
 800f1a4:	4b05      	ldr	r3, [pc, #20]	; (800f1bc <_fflush_r+0x70>)
 800f1a6:	429c      	cmp	r4, r3
 800f1a8:	d101      	bne.n	800f1ae <_fflush_r+0x62>
 800f1aa:	68ac      	ldr	r4, [r5, #8]
 800f1ac:	e7df      	b.n	800f16e <_fflush_r+0x22>
 800f1ae:	4b04      	ldr	r3, [pc, #16]	; (800f1c0 <_fflush_r+0x74>)
 800f1b0:	429c      	cmp	r4, r3
 800f1b2:	bf08      	it	eq
 800f1b4:	68ec      	ldreq	r4, [r5, #12]
 800f1b6:	e7da      	b.n	800f16e <_fflush_r+0x22>
 800f1b8:	08010fa4 	.word	0x08010fa4
 800f1bc:	08010fc4 	.word	0x08010fc4
 800f1c0:	08010f84 	.word	0x08010f84

0800f1c4 <std>:
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	b510      	push	{r4, lr}
 800f1c8:	4604      	mov	r4, r0
 800f1ca:	e9c0 3300 	strd	r3, r3, [r0]
 800f1ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f1d2:	6083      	str	r3, [r0, #8]
 800f1d4:	8181      	strh	r1, [r0, #12]
 800f1d6:	6643      	str	r3, [r0, #100]	; 0x64
 800f1d8:	81c2      	strh	r2, [r0, #14]
 800f1da:	6183      	str	r3, [r0, #24]
 800f1dc:	4619      	mov	r1, r3
 800f1de:	2208      	movs	r2, #8
 800f1e0:	305c      	adds	r0, #92	; 0x5c
 800f1e2:	f7fd f969 	bl	800c4b8 <memset>
 800f1e6:	4b05      	ldr	r3, [pc, #20]	; (800f1fc <std+0x38>)
 800f1e8:	6263      	str	r3, [r4, #36]	; 0x24
 800f1ea:	4b05      	ldr	r3, [pc, #20]	; (800f200 <std+0x3c>)
 800f1ec:	62a3      	str	r3, [r4, #40]	; 0x28
 800f1ee:	4b05      	ldr	r3, [pc, #20]	; (800f204 <std+0x40>)
 800f1f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f1f2:	4b05      	ldr	r3, [pc, #20]	; (800f208 <std+0x44>)
 800f1f4:	6224      	str	r4, [r4, #32]
 800f1f6:	6323      	str	r3, [r4, #48]	; 0x30
 800f1f8:	bd10      	pop	{r4, pc}
 800f1fa:	bf00      	nop
 800f1fc:	0800d37d 	.word	0x0800d37d
 800f200:	0800d39f 	.word	0x0800d39f
 800f204:	0800d3d7 	.word	0x0800d3d7
 800f208:	0800d3fb 	.word	0x0800d3fb

0800f20c <_cleanup_r>:
 800f20c:	4901      	ldr	r1, [pc, #4]	; (800f214 <_cleanup_r+0x8>)
 800f20e:	f000 b8af 	b.w	800f370 <_fwalk_reent>
 800f212:	bf00      	nop
 800f214:	0800f14d 	.word	0x0800f14d

0800f218 <__sfmoreglue>:
 800f218:	b570      	push	{r4, r5, r6, lr}
 800f21a:	1e4a      	subs	r2, r1, #1
 800f21c:	2568      	movs	r5, #104	; 0x68
 800f21e:	4355      	muls	r5, r2
 800f220:	460e      	mov	r6, r1
 800f222:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f226:	f7fd f99f 	bl	800c568 <_malloc_r>
 800f22a:	4604      	mov	r4, r0
 800f22c:	b140      	cbz	r0, 800f240 <__sfmoreglue+0x28>
 800f22e:	2100      	movs	r1, #0
 800f230:	e9c0 1600 	strd	r1, r6, [r0]
 800f234:	300c      	adds	r0, #12
 800f236:	60a0      	str	r0, [r4, #8]
 800f238:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f23c:	f7fd f93c 	bl	800c4b8 <memset>
 800f240:	4620      	mov	r0, r4
 800f242:	bd70      	pop	{r4, r5, r6, pc}

0800f244 <__sfp_lock_acquire>:
 800f244:	4801      	ldr	r0, [pc, #4]	; (800f24c <__sfp_lock_acquire+0x8>)
 800f246:	f000 bc26 	b.w	800fa96 <__retarget_lock_acquire_recursive>
 800f24a:	bf00      	nop
 800f24c:	20002d00 	.word	0x20002d00

0800f250 <__sfp_lock_release>:
 800f250:	4801      	ldr	r0, [pc, #4]	; (800f258 <__sfp_lock_release+0x8>)
 800f252:	f000 bc21 	b.w	800fa98 <__retarget_lock_release_recursive>
 800f256:	bf00      	nop
 800f258:	20002d00 	.word	0x20002d00

0800f25c <__sinit_lock_acquire>:
 800f25c:	4801      	ldr	r0, [pc, #4]	; (800f264 <__sinit_lock_acquire+0x8>)
 800f25e:	f000 bc1a 	b.w	800fa96 <__retarget_lock_acquire_recursive>
 800f262:	bf00      	nop
 800f264:	20002cfb 	.word	0x20002cfb

0800f268 <__sinit_lock_release>:
 800f268:	4801      	ldr	r0, [pc, #4]	; (800f270 <__sinit_lock_release+0x8>)
 800f26a:	f000 bc15 	b.w	800fa98 <__retarget_lock_release_recursive>
 800f26e:	bf00      	nop
 800f270:	20002cfb 	.word	0x20002cfb

0800f274 <__sinit>:
 800f274:	b510      	push	{r4, lr}
 800f276:	4604      	mov	r4, r0
 800f278:	f7ff fff0 	bl	800f25c <__sinit_lock_acquire>
 800f27c:	69a3      	ldr	r3, [r4, #24]
 800f27e:	b11b      	cbz	r3, 800f288 <__sinit+0x14>
 800f280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f284:	f7ff bff0 	b.w	800f268 <__sinit_lock_release>
 800f288:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f28c:	6523      	str	r3, [r4, #80]	; 0x50
 800f28e:	4b13      	ldr	r3, [pc, #76]	; (800f2dc <__sinit+0x68>)
 800f290:	4a13      	ldr	r2, [pc, #76]	; (800f2e0 <__sinit+0x6c>)
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	62a2      	str	r2, [r4, #40]	; 0x28
 800f296:	42a3      	cmp	r3, r4
 800f298:	bf04      	itt	eq
 800f29a:	2301      	moveq	r3, #1
 800f29c:	61a3      	streq	r3, [r4, #24]
 800f29e:	4620      	mov	r0, r4
 800f2a0:	f000 f820 	bl	800f2e4 <__sfp>
 800f2a4:	6060      	str	r0, [r4, #4]
 800f2a6:	4620      	mov	r0, r4
 800f2a8:	f000 f81c 	bl	800f2e4 <__sfp>
 800f2ac:	60a0      	str	r0, [r4, #8]
 800f2ae:	4620      	mov	r0, r4
 800f2b0:	f000 f818 	bl	800f2e4 <__sfp>
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	60e0      	str	r0, [r4, #12]
 800f2b8:	2104      	movs	r1, #4
 800f2ba:	6860      	ldr	r0, [r4, #4]
 800f2bc:	f7ff ff82 	bl	800f1c4 <std>
 800f2c0:	68a0      	ldr	r0, [r4, #8]
 800f2c2:	2201      	movs	r2, #1
 800f2c4:	2109      	movs	r1, #9
 800f2c6:	f7ff ff7d 	bl	800f1c4 <std>
 800f2ca:	68e0      	ldr	r0, [r4, #12]
 800f2cc:	2202      	movs	r2, #2
 800f2ce:	2112      	movs	r1, #18
 800f2d0:	f7ff ff78 	bl	800f1c4 <std>
 800f2d4:	2301      	movs	r3, #1
 800f2d6:	61a3      	str	r3, [r4, #24]
 800f2d8:	e7d2      	b.n	800f280 <__sinit+0xc>
 800f2da:	bf00      	nop
 800f2dc:	08010e5c 	.word	0x08010e5c
 800f2e0:	0800f20d 	.word	0x0800f20d

0800f2e4 <__sfp>:
 800f2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2e6:	4607      	mov	r7, r0
 800f2e8:	f7ff ffac 	bl	800f244 <__sfp_lock_acquire>
 800f2ec:	4b1e      	ldr	r3, [pc, #120]	; (800f368 <__sfp+0x84>)
 800f2ee:	681e      	ldr	r6, [r3, #0]
 800f2f0:	69b3      	ldr	r3, [r6, #24]
 800f2f2:	b913      	cbnz	r3, 800f2fa <__sfp+0x16>
 800f2f4:	4630      	mov	r0, r6
 800f2f6:	f7ff ffbd 	bl	800f274 <__sinit>
 800f2fa:	3648      	adds	r6, #72	; 0x48
 800f2fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f300:	3b01      	subs	r3, #1
 800f302:	d503      	bpl.n	800f30c <__sfp+0x28>
 800f304:	6833      	ldr	r3, [r6, #0]
 800f306:	b30b      	cbz	r3, 800f34c <__sfp+0x68>
 800f308:	6836      	ldr	r6, [r6, #0]
 800f30a:	e7f7      	b.n	800f2fc <__sfp+0x18>
 800f30c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f310:	b9d5      	cbnz	r5, 800f348 <__sfp+0x64>
 800f312:	4b16      	ldr	r3, [pc, #88]	; (800f36c <__sfp+0x88>)
 800f314:	60e3      	str	r3, [r4, #12]
 800f316:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f31a:	6665      	str	r5, [r4, #100]	; 0x64
 800f31c:	f000 fbba 	bl	800fa94 <__retarget_lock_init_recursive>
 800f320:	f7ff ff96 	bl	800f250 <__sfp_lock_release>
 800f324:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f328:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f32c:	6025      	str	r5, [r4, #0]
 800f32e:	61a5      	str	r5, [r4, #24]
 800f330:	2208      	movs	r2, #8
 800f332:	4629      	mov	r1, r5
 800f334:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f338:	f7fd f8be 	bl	800c4b8 <memset>
 800f33c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f340:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f344:	4620      	mov	r0, r4
 800f346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f348:	3468      	adds	r4, #104	; 0x68
 800f34a:	e7d9      	b.n	800f300 <__sfp+0x1c>
 800f34c:	2104      	movs	r1, #4
 800f34e:	4638      	mov	r0, r7
 800f350:	f7ff ff62 	bl	800f218 <__sfmoreglue>
 800f354:	4604      	mov	r4, r0
 800f356:	6030      	str	r0, [r6, #0]
 800f358:	2800      	cmp	r0, #0
 800f35a:	d1d5      	bne.n	800f308 <__sfp+0x24>
 800f35c:	f7ff ff78 	bl	800f250 <__sfp_lock_release>
 800f360:	230c      	movs	r3, #12
 800f362:	603b      	str	r3, [r7, #0]
 800f364:	e7ee      	b.n	800f344 <__sfp+0x60>
 800f366:	bf00      	nop
 800f368:	08010e5c 	.word	0x08010e5c
 800f36c:	ffff0001 	.word	0xffff0001

0800f370 <_fwalk_reent>:
 800f370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f374:	4606      	mov	r6, r0
 800f376:	4688      	mov	r8, r1
 800f378:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f37c:	2700      	movs	r7, #0
 800f37e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f382:	f1b9 0901 	subs.w	r9, r9, #1
 800f386:	d505      	bpl.n	800f394 <_fwalk_reent+0x24>
 800f388:	6824      	ldr	r4, [r4, #0]
 800f38a:	2c00      	cmp	r4, #0
 800f38c:	d1f7      	bne.n	800f37e <_fwalk_reent+0xe>
 800f38e:	4638      	mov	r0, r7
 800f390:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f394:	89ab      	ldrh	r3, [r5, #12]
 800f396:	2b01      	cmp	r3, #1
 800f398:	d907      	bls.n	800f3aa <_fwalk_reent+0x3a>
 800f39a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f39e:	3301      	adds	r3, #1
 800f3a0:	d003      	beq.n	800f3aa <_fwalk_reent+0x3a>
 800f3a2:	4629      	mov	r1, r5
 800f3a4:	4630      	mov	r0, r6
 800f3a6:	47c0      	blx	r8
 800f3a8:	4307      	orrs	r7, r0
 800f3aa:	3568      	adds	r5, #104	; 0x68
 800f3ac:	e7e9      	b.n	800f382 <_fwalk_reent+0x12>

0800f3ae <rshift>:
 800f3ae:	6903      	ldr	r3, [r0, #16]
 800f3b0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f3b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f3b8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f3bc:	f100 0414 	add.w	r4, r0, #20
 800f3c0:	dd45      	ble.n	800f44e <rshift+0xa0>
 800f3c2:	f011 011f 	ands.w	r1, r1, #31
 800f3c6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f3ca:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f3ce:	d10c      	bne.n	800f3ea <rshift+0x3c>
 800f3d0:	f100 0710 	add.w	r7, r0, #16
 800f3d4:	4629      	mov	r1, r5
 800f3d6:	42b1      	cmp	r1, r6
 800f3d8:	d334      	bcc.n	800f444 <rshift+0x96>
 800f3da:	1a9b      	subs	r3, r3, r2
 800f3dc:	009b      	lsls	r3, r3, #2
 800f3de:	1eea      	subs	r2, r5, #3
 800f3e0:	4296      	cmp	r6, r2
 800f3e2:	bf38      	it	cc
 800f3e4:	2300      	movcc	r3, #0
 800f3e6:	4423      	add	r3, r4
 800f3e8:	e015      	b.n	800f416 <rshift+0x68>
 800f3ea:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f3ee:	f1c1 0820 	rsb	r8, r1, #32
 800f3f2:	40cf      	lsrs	r7, r1
 800f3f4:	f105 0e04 	add.w	lr, r5, #4
 800f3f8:	46a1      	mov	r9, r4
 800f3fa:	4576      	cmp	r6, lr
 800f3fc:	46f4      	mov	ip, lr
 800f3fe:	d815      	bhi.n	800f42c <rshift+0x7e>
 800f400:	1a9b      	subs	r3, r3, r2
 800f402:	009a      	lsls	r2, r3, #2
 800f404:	3a04      	subs	r2, #4
 800f406:	3501      	adds	r5, #1
 800f408:	42ae      	cmp	r6, r5
 800f40a:	bf38      	it	cc
 800f40c:	2200      	movcc	r2, #0
 800f40e:	18a3      	adds	r3, r4, r2
 800f410:	50a7      	str	r7, [r4, r2]
 800f412:	b107      	cbz	r7, 800f416 <rshift+0x68>
 800f414:	3304      	adds	r3, #4
 800f416:	1b1a      	subs	r2, r3, r4
 800f418:	42a3      	cmp	r3, r4
 800f41a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f41e:	bf08      	it	eq
 800f420:	2300      	moveq	r3, #0
 800f422:	6102      	str	r2, [r0, #16]
 800f424:	bf08      	it	eq
 800f426:	6143      	streq	r3, [r0, #20]
 800f428:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f42c:	f8dc c000 	ldr.w	ip, [ip]
 800f430:	fa0c fc08 	lsl.w	ip, ip, r8
 800f434:	ea4c 0707 	orr.w	r7, ip, r7
 800f438:	f849 7b04 	str.w	r7, [r9], #4
 800f43c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f440:	40cf      	lsrs	r7, r1
 800f442:	e7da      	b.n	800f3fa <rshift+0x4c>
 800f444:	f851 cb04 	ldr.w	ip, [r1], #4
 800f448:	f847 cf04 	str.w	ip, [r7, #4]!
 800f44c:	e7c3      	b.n	800f3d6 <rshift+0x28>
 800f44e:	4623      	mov	r3, r4
 800f450:	e7e1      	b.n	800f416 <rshift+0x68>

0800f452 <__hexdig_fun>:
 800f452:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f456:	2b09      	cmp	r3, #9
 800f458:	d802      	bhi.n	800f460 <__hexdig_fun+0xe>
 800f45a:	3820      	subs	r0, #32
 800f45c:	b2c0      	uxtb	r0, r0
 800f45e:	4770      	bx	lr
 800f460:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f464:	2b05      	cmp	r3, #5
 800f466:	d801      	bhi.n	800f46c <__hexdig_fun+0x1a>
 800f468:	3847      	subs	r0, #71	; 0x47
 800f46a:	e7f7      	b.n	800f45c <__hexdig_fun+0xa>
 800f46c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f470:	2b05      	cmp	r3, #5
 800f472:	d801      	bhi.n	800f478 <__hexdig_fun+0x26>
 800f474:	3827      	subs	r0, #39	; 0x27
 800f476:	e7f1      	b.n	800f45c <__hexdig_fun+0xa>
 800f478:	2000      	movs	r0, #0
 800f47a:	4770      	bx	lr

0800f47c <__gethex>:
 800f47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f480:	ed2d 8b02 	vpush	{d8}
 800f484:	b089      	sub	sp, #36	; 0x24
 800f486:	ee08 0a10 	vmov	s16, r0
 800f48a:	9304      	str	r3, [sp, #16]
 800f48c:	4bbc      	ldr	r3, [pc, #752]	; (800f780 <__gethex+0x304>)
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	9301      	str	r3, [sp, #4]
 800f492:	4618      	mov	r0, r3
 800f494:	468b      	mov	fp, r1
 800f496:	4690      	mov	r8, r2
 800f498:	f7f0 feaa 	bl	80001f0 <strlen>
 800f49c:	9b01      	ldr	r3, [sp, #4]
 800f49e:	f8db 2000 	ldr.w	r2, [fp]
 800f4a2:	4403      	add	r3, r0
 800f4a4:	4682      	mov	sl, r0
 800f4a6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f4aa:	9305      	str	r3, [sp, #20]
 800f4ac:	1c93      	adds	r3, r2, #2
 800f4ae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f4b2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f4b6:	32fe      	adds	r2, #254	; 0xfe
 800f4b8:	18d1      	adds	r1, r2, r3
 800f4ba:	461f      	mov	r7, r3
 800f4bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f4c0:	9100      	str	r1, [sp, #0]
 800f4c2:	2830      	cmp	r0, #48	; 0x30
 800f4c4:	d0f8      	beq.n	800f4b8 <__gethex+0x3c>
 800f4c6:	f7ff ffc4 	bl	800f452 <__hexdig_fun>
 800f4ca:	4604      	mov	r4, r0
 800f4cc:	2800      	cmp	r0, #0
 800f4ce:	d13a      	bne.n	800f546 <__gethex+0xca>
 800f4d0:	9901      	ldr	r1, [sp, #4]
 800f4d2:	4652      	mov	r2, sl
 800f4d4:	4638      	mov	r0, r7
 800f4d6:	f7fd ff94 	bl	800d402 <strncmp>
 800f4da:	4605      	mov	r5, r0
 800f4dc:	2800      	cmp	r0, #0
 800f4de:	d168      	bne.n	800f5b2 <__gethex+0x136>
 800f4e0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f4e4:	eb07 060a 	add.w	r6, r7, sl
 800f4e8:	f7ff ffb3 	bl	800f452 <__hexdig_fun>
 800f4ec:	2800      	cmp	r0, #0
 800f4ee:	d062      	beq.n	800f5b6 <__gethex+0x13a>
 800f4f0:	4633      	mov	r3, r6
 800f4f2:	7818      	ldrb	r0, [r3, #0]
 800f4f4:	2830      	cmp	r0, #48	; 0x30
 800f4f6:	461f      	mov	r7, r3
 800f4f8:	f103 0301 	add.w	r3, r3, #1
 800f4fc:	d0f9      	beq.n	800f4f2 <__gethex+0x76>
 800f4fe:	f7ff ffa8 	bl	800f452 <__hexdig_fun>
 800f502:	2301      	movs	r3, #1
 800f504:	fab0 f480 	clz	r4, r0
 800f508:	0964      	lsrs	r4, r4, #5
 800f50a:	4635      	mov	r5, r6
 800f50c:	9300      	str	r3, [sp, #0]
 800f50e:	463a      	mov	r2, r7
 800f510:	4616      	mov	r6, r2
 800f512:	3201      	adds	r2, #1
 800f514:	7830      	ldrb	r0, [r6, #0]
 800f516:	f7ff ff9c 	bl	800f452 <__hexdig_fun>
 800f51a:	2800      	cmp	r0, #0
 800f51c:	d1f8      	bne.n	800f510 <__gethex+0x94>
 800f51e:	9901      	ldr	r1, [sp, #4]
 800f520:	4652      	mov	r2, sl
 800f522:	4630      	mov	r0, r6
 800f524:	f7fd ff6d 	bl	800d402 <strncmp>
 800f528:	b980      	cbnz	r0, 800f54c <__gethex+0xd0>
 800f52a:	b94d      	cbnz	r5, 800f540 <__gethex+0xc4>
 800f52c:	eb06 050a 	add.w	r5, r6, sl
 800f530:	462a      	mov	r2, r5
 800f532:	4616      	mov	r6, r2
 800f534:	3201      	adds	r2, #1
 800f536:	7830      	ldrb	r0, [r6, #0]
 800f538:	f7ff ff8b 	bl	800f452 <__hexdig_fun>
 800f53c:	2800      	cmp	r0, #0
 800f53e:	d1f8      	bne.n	800f532 <__gethex+0xb6>
 800f540:	1bad      	subs	r5, r5, r6
 800f542:	00ad      	lsls	r5, r5, #2
 800f544:	e004      	b.n	800f550 <__gethex+0xd4>
 800f546:	2400      	movs	r4, #0
 800f548:	4625      	mov	r5, r4
 800f54a:	e7e0      	b.n	800f50e <__gethex+0x92>
 800f54c:	2d00      	cmp	r5, #0
 800f54e:	d1f7      	bne.n	800f540 <__gethex+0xc4>
 800f550:	7833      	ldrb	r3, [r6, #0]
 800f552:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f556:	2b50      	cmp	r3, #80	; 0x50
 800f558:	d13b      	bne.n	800f5d2 <__gethex+0x156>
 800f55a:	7873      	ldrb	r3, [r6, #1]
 800f55c:	2b2b      	cmp	r3, #43	; 0x2b
 800f55e:	d02c      	beq.n	800f5ba <__gethex+0x13e>
 800f560:	2b2d      	cmp	r3, #45	; 0x2d
 800f562:	d02e      	beq.n	800f5c2 <__gethex+0x146>
 800f564:	1c71      	adds	r1, r6, #1
 800f566:	f04f 0900 	mov.w	r9, #0
 800f56a:	7808      	ldrb	r0, [r1, #0]
 800f56c:	f7ff ff71 	bl	800f452 <__hexdig_fun>
 800f570:	1e43      	subs	r3, r0, #1
 800f572:	b2db      	uxtb	r3, r3
 800f574:	2b18      	cmp	r3, #24
 800f576:	d82c      	bhi.n	800f5d2 <__gethex+0x156>
 800f578:	f1a0 0210 	sub.w	r2, r0, #16
 800f57c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f580:	f7ff ff67 	bl	800f452 <__hexdig_fun>
 800f584:	1e43      	subs	r3, r0, #1
 800f586:	b2db      	uxtb	r3, r3
 800f588:	2b18      	cmp	r3, #24
 800f58a:	d91d      	bls.n	800f5c8 <__gethex+0x14c>
 800f58c:	f1b9 0f00 	cmp.w	r9, #0
 800f590:	d000      	beq.n	800f594 <__gethex+0x118>
 800f592:	4252      	negs	r2, r2
 800f594:	4415      	add	r5, r2
 800f596:	f8cb 1000 	str.w	r1, [fp]
 800f59a:	b1e4      	cbz	r4, 800f5d6 <__gethex+0x15a>
 800f59c:	9b00      	ldr	r3, [sp, #0]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	bf14      	ite	ne
 800f5a2:	2700      	movne	r7, #0
 800f5a4:	2706      	moveq	r7, #6
 800f5a6:	4638      	mov	r0, r7
 800f5a8:	b009      	add	sp, #36	; 0x24
 800f5aa:	ecbd 8b02 	vpop	{d8}
 800f5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5b2:	463e      	mov	r6, r7
 800f5b4:	4625      	mov	r5, r4
 800f5b6:	2401      	movs	r4, #1
 800f5b8:	e7ca      	b.n	800f550 <__gethex+0xd4>
 800f5ba:	f04f 0900 	mov.w	r9, #0
 800f5be:	1cb1      	adds	r1, r6, #2
 800f5c0:	e7d3      	b.n	800f56a <__gethex+0xee>
 800f5c2:	f04f 0901 	mov.w	r9, #1
 800f5c6:	e7fa      	b.n	800f5be <__gethex+0x142>
 800f5c8:	230a      	movs	r3, #10
 800f5ca:	fb03 0202 	mla	r2, r3, r2, r0
 800f5ce:	3a10      	subs	r2, #16
 800f5d0:	e7d4      	b.n	800f57c <__gethex+0x100>
 800f5d2:	4631      	mov	r1, r6
 800f5d4:	e7df      	b.n	800f596 <__gethex+0x11a>
 800f5d6:	1bf3      	subs	r3, r6, r7
 800f5d8:	3b01      	subs	r3, #1
 800f5da:	4621      	mov	r1, r4
 800f5dc:	2b07      	cmp	r3, #7
 800f5de:	dc0b      	bgt.n	800f5f8 <__gethex+0x17c>
 800f5e0:	ee18 0a10 	vmov	r0, s16
 800f5e4:	f000 faee 	bl	800fbc4 <_Balloc>
 800f5e8:	4604      	mov	r4, r0
 800f5ea:	b940      	cbnz	r0, 800f5fe <__gethex+0x182>
 800f5ec:	4b65      	ldr	r3, [pc, #404]	; (800f784 <__gethex+0x308>)
 800f5ee:	4602      	mov	r2, r0
 800f5f0:	21de      	movs	r1, #222	; 0xde
 800f5f2:	4865      	ldr	r0, [pc, #404]	; (800f788 <__gethex+0x30c>)
 800f5f4:	f001 fa8e 	bl	8010b14 <__assert_func>
 800f5f8:	3101      	adds	r1, #1
 800f5fa:	105b      	asrs	r3, r3, #1
 800f5fc:	e7ee      	b.n	800f5dc <__gethex+0x160>
 800f5fe:	f100 0914 	add.w	r9, r0, #20
 800f602:	f04f 0b00 	mov.w	fp, #0
 800f606:	f1ca 0301 	rsb	r3, sl, #1
 800f60a:	f8cd 9008 	str.w	r9, [sp, #8]
 800f60e:	f8cd b000 	str.w	fp, [sp]
 800f612:	9306      	str	r3, [sp, #24]
 800f614:	42b7      	cmp	r7, r6
 800f616:	d340      	bcc.n	800f69a <__gethex+0x21e>
 800f618:	9802      	ldr	r0, [sp, #8]
 800f61a:	9b00      	ldr	r3, [sp, #0]
 800f61c:	f840 3b04 	str.w	r3, [r0], #4
 800f620:	eba0 0009 	sub.w	r0, r0, r9
 800f624:	1080      	asrs	r0, r0, #2
 800f626:	0146      	lsls	r6, r0, #5
 800f628:	6120      	str	r0, [r4, #16]
 800f62a:	4618      	mov	r0, r3
 800f62c:	f000 fbc0 	bl	800fdb0 <__hi0bits>
 800f630:	1a30      	subs	r0, r6, r0
 800f632:	f8d8 6000 	ldr.w	r6, [r8]
 800f636:	42b0      	cmp	r0, r6
 800f638:	dd63      	ble.n	800f702 <__gethex+0x286>
 800f63a:	1b87      	subs	r7, r0, r6
 800f63c:	4639      	mov	r1, r7
 800f63e:	4620      	mov	r0, r4
 800f640:	f000 ff5a 	bl	80104f8 <__any_on>
 800f644:	4682      	mov	sl, r0
 800f646:	b1a8      	cbz	r0, 800f674 <__gethex+0x1f8>
 800f648:	1e7b      	subs	r3, r7, #1
 800f64a:	1159      	asrs	r1, r3, #5
 800f64c:	f003 021f 	and.w	r2, r3, #31
 800f650:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f654:	f04f 0a01 	mov.w	sl, #1
 800f658:	fa0a f202 	lsl.w	r2, sl, r2
 800f65c:	420a      	tst	r2, r1
 800f65e:	d009      	beq.n	800f674 <__gethex+0x1f8>
 800f660:	4553      	cmp	r3, sl
 800f662:	dd05      	ble.n	800f670 <__gethex+0x1f4>
 800f664:	1eb9      	subs	r1, r7, #2
 800f666:	4620      	mov	r0, r4
 800f668:	f000 ff46 	bl	80104f8 <__any_on>
 800f66c:	2800      	cmp	r0, #0
 800f66e:	d145      	bne.n	800f6fc <__gethex+0x280>
 800f670:	f04f 0a02 	mov.w	sl, #2
 800f674:	4639      	mov	r1, r7
 800f676:	4620      	mov	r0, r4
 800f678:	f7ff fe99 	bl	800f3ae <rshift>
 800f67c:	443d      	add	r5, r7
 800f67e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f682:	42ab      	cmp	r3, r5
 800f684:	da4c      	bge.n	800f720 <__gethex+0x2a4>
 800f686:	ee18 0a10 	vmov	r0, s16
 800f68a:	4621      	mov	r1, r4
 800f68c:	f000 fada 	bl	800fc44 <_Bfree>
 800f690:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f692:	2300      	movs	r3, #0
 800f694:	6013      	str	r3, [r2, #0]
 800f696:	27a3      	movs	r7, #163	; 0xa3
 800f698:	e785      	b.n	800f5a6 <__gethex+0x12a>
 800f69a:	1e73      	subs	r3, r6, #1
 800f69c:	9a05      	ldr	r2, [sp, #20]
 800f69e:	9303      	str	r3, [sp, #12]
 800f6a0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f6a4:	4293      	cmp	r3, r2
 800f6a6:	d019      	beq.n	800f6dc <__gethex+0x260>
 800f6a8:	f1bb 0f20 	cmp.w	fp, #32
 800f6ac:	d107      	bne.n	800f6be <__gethex+0x242>
 800f6ae:	9b02      	ldr	r3, [sp, #8]
 800f6b0:	9a00      	ldr	r2, [sp, #0]
 800f6b2:	f843 2b04 	str.w	r2, [r3], #4
 800f6b6:	9302      	str	r3, [sp, #8]
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	9300      	str	r3, [sp, #0]
 800f6bc:	469b      	mov	fp, r3
 800f6be:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f6c2:	f7ff fec6 	bl	800f452 <__hexdig_fun>
 800f6c6:	9b00      	ldr	r3, [sp, #0]
 800f6c8:	f000 000f 	and.w	r0, r0, #15
 800f6cc:	fa00 f00b 	lsl.w	r0, r0, fp
 800f6d0:	4303      	orrs	r3, r0
 800f6d2:	9300      	str	r3, [sp, #0]
 800f6d4:	f10b 0b04 	add.w	fp, fp, #4
 800f6d8:	9b03      	ldr	r3, [sp, #12]
 800f6da:	e00d      	b.n	800f6f8 <__gethex+0x27c>
 800f6dc:	9b03      	ldr	r3, [sp, #12]
 800f6de:	9a06      	ldr	r2, [sp, #24]
 800f6e0:	4413      	add	r3, r2
 800f6e2:	42bb      	cmp	r3, r7
 800f6e4:	d3e0      	bcc.n	800f6a8 <__gethex+0x22c>
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	9901      	ldr	r1, [sp, #4]
 800f6ea:	9307      	str	r3, [sp, #28]
 800f6ec:	4652      	mov	r2, sl
 800f6ee:	f7fd fe88 	bl	800d402 <strncmp>
 800f6f2:	9b07      	ldr	r3, [sp, #28]
 800f6f4:	2800      	cmp	r0, #0
 800f6f6:	d1d7      	bne.n	800f6a8 <__gethex+0x22c>
 800f6f8:	461e      	mov	r6, r3
 800f6fa:	e78b      	b.n	800f614 <__gethex+0x198>
 800f6fc:	f04f 0a03 	mov.w	sl, #3
 800f700:	e7b8      	b.n	800f674 <__gethex+0x1f8>
 800f702:	da0a      	bge.n	800f71a <__gethex+0x29e>
 800f704:	1a37      	subs	r7, r6, r0
 800f706:	4621      	mov	r1, r4
 800f708:	ee18 0a10 	vmov	r0, s16
 800f70c:	463a      	mov	r2, r7
 800f70e:	f000 fcb5 	bl	801007c <__lshift>
 800f712:	1bed      	subs	r5, r5, r7
 800f714:	4604      	mov	r4, r0
 800f716:	f100 0914 	add.w	r9, r0, #20
 800f71a:	f04f 0a00 	mov.w	sl, #0
 800f71e:	e7ae      	b.n	800f67e <__gethex+0x202>
 800f720:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f724:	42a8      	cmp	r0, r5
 800f726:	dd72      	ble.n	800f80e <__gethex+0x392>
 800f728:	1b45      	subs	r5, r0, r5
 800f72a:	42ae      	cmp	r6, r5
 800f72c:	dc36      	bgt.n	800f79c <__gethex+0x320>
 800f72e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f732:	2b02      	cmp	r3, #2
 800f734:	d02a      	beq.n	800f78c <__gethex+0x310>
 800f736:	2b03      	cmp	r3, #3
 800f738:	d02c      	beq.n	800f794 <__gethex+0x318>
 800f73a:	2b01      	cmp	r3, #1
 800f73c:	d115      	bne.n	800f76a <__gethex+0x2ee>
 800f73e:	42ae      	cmp	r6, r5
 800f740:	d113      	bne.n	800f76a <__gethex+0x2ee>
 800f742:	2e01      	cmp	r6, #1
 800f744:	d10b      	bne.n	800f75e <__gethex+0x2e2>
 800f746:	9a04      	ldr	r2, [sp, #16]
 800f748:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f74c:	6013      	str	r3, [r2, #0]
 800f74e:	2301      	movs	r3, #1
 800f750:	6123      	str	r3, [r4, #16]
 800f752:	f8c9 3000 	str.w	r3, [r9]
 800f756:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f758:	2762      	movs	r7, #98	; 0x62
 800f75a:	601c      	str	r4, [r3, #0]
 800f75c:	e723      	b.n	800f5a6 <__gethex+0x12a>
 800f75e:	1e71      	subs	r1, r6, #1
 800f760:	4620      	mov	r0, r4
 800f762:	f000 fec9 	bl	80104f8 <__any_on>
 800f766:	2800      	cmp	r0, #0
 800f768:	d1ed      	bne.n	800f746 <__gethex+0x2ca>
 800f76a:	ee18 0a10 	vmov	r0, s16
 800f76e:	4621      	mov	r1, r4
 800f770:	f000 fa68 	bl	800fc44 <_Bfree>
 800f774:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f776:	2300      	movs	r3, #0
 800f778:	6013      	str	r3, [r2, #0]
 800f77a:	2750      	movs	r7, #80	; 0x50
 800f77c:	e713      	b.n	800f5a6 <__gethex+0x12a>
 800f77e:	bf00      	nop
 800f780:	08011050 	.word	0x08011050
 800f784:	08010f73 	.word	0x08010f73
 800f788:	08010fe4 	.word	0x08010fe4
 800f78c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d1eb      	bne.n	800f76a <__gethex+0x2ee>
 800f792:	e7d8      	b.n	800f746 <__gethex+0x2ca>
 800f794:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f796:	2b00      	cmp	r3, #0
 800f798:	d1d5      	bne.n	800f746 <__gethex+0x2ca>
 800f79a:	e7e6      	b.n	800f76a <__gethex+0x2ee>
 800f79c:	1e6f      	subs	r7, r5, #1
 800f79e:	f1ba 0f00 	cmp.w	sl, #0
 800f7a2:	d131      	bne.n	800f808 <__gethex+0x38c>
 800f7a4:	b127      	cbz	r7, 800f7b0 <__gethex+0x334>
 800f7a6:	4639      	mov	r1, r7
 800f7a8:	4620      	mov	r0, r4
 800f7aa:	f000 fea5 	bl	80104f8 <__any_on>
 800f7ae:	4682      	mov	sl, r0
 800f7b0:	117b      	asrs	r3, r7, #5
 800f7b2:	2101      	movs	r1, #1
 800f7b4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f7b8:	f007 071f 	and.w	r7, r7, #31
 800f7bc:	fa01 f707 	lsl.w	r7, r1, r7
 800f7c0:	421f      	tst	r7, r3
 800f7c2:	4629      	mov	r1, r5
 800f7c4:	4620      	mov	r0, r4
 800f7c6:	bf18      	it	ne
 800f7c8:	f04a 0a02 	orrne.w	sl, sl, #2
 800f7cc:	1b76      	subs	r6, r6, r5
 800f7ce:	f7ff fdee 	bl	800f3ae <rshift>
 800f7d2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f7d6:	2702      	movs	r7, #2
 800f7d8:	f1ba 0f00 	cmp.w	sl, #0
 800f7dc:	d048      	beq.n	800f870 <__gethex+0x3f4>
 800f7de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f7e2:	2b02      	cmp	r3, #2
 800f7e4:	d015      	beq.n	800f812 <__gethex+0x396>
 800f7e6:	2b03      	cmp	r3, #3
 800f7e8:	d017      	beq.n	800f81a <__gethex+0x39e>
 800f7ea:	2b01      	cmp	r3, #1
 800f7ec:	d109      	bne.n	800f802 <__gethex+0x386>
 800f7ee:	f01a 0f02 	tst.w	sl, #2
 800f7f2:	d006      	beq.n	800f802 <__gethex+0x386>
 800f7f4:	f8d9 0000 	ldr.w	r0, [r9]
 800f7f8:	ea4a 0a00 	orr.w	sl, sl, r0
 800f7fc:	f01a 0f01 	tst.w	sl, #1
 800f800:	d10e      	bne.n	800f820 <__gethex+0x3a4>
 800f802:	f047 0710 	orr.w	r7, r7, #16
 800f806:	e033      	b.n	800f870 <__gethex+0x3f4>
 800f808:	f04f 0a01 	mov.w	sl, #1
 800f80c:	e7d0      	b.n	800f7b0 <__gethex+0x334>
 800f80e:	2701      	movs	r7, #1
 800f810:	e7e2      	b.n	800f7d8 <__gethex+0x35c>
 800f812:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f814:	f1c3 0301 	rsb	r3, r3, #1
 800f818:	9315      	str	r3, [sp, #84]	; 0x54
 800f81a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d0f0      	beq.n	800f802 <__gethex+0x386>
 800f820:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f824:	f104 0314 	add.w	r3, r4, #20
 800f828:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f82c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f830:	f04f 0c00 	mov.w	ip, #0
 800f834:	4618      	mov	r0, r3
 800f836:	f853 2b04 	ldr.w	r2, [r3], #4
 800f83a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f83e:	d01c      	beq.n	800f87a <__gethex+0x3fe>
 800f840:	3201      	adds	r2, #1
 800f842:	6002      	str	r2, [r0, #0]
 800f844:	2f02      	cmp	r7, #2
 800f846:	f104 0314 	add.w	r3, r4, #20
 800f84a:	d13f      	bne.n	800f8cc <__gethex+0x450>
 800f84c:	f8d8 2000 	ldr.w	r2, [r8]
 800f850:	3a01      	subs	r2, #1
 800f852:	42b2      	cmp	r2, r6
 800f854:	d10a      	bne.n	800f86c <__gethex+0x3f0>
 800f856:	1171      	asrs	r1, r6, #5
 800f858:	2201      	movs	r2, #1
 800f85a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f85e:	f006 061f 	and.w	r6, r6, #31
 800f862:	fa02 f606 	lsl.w	r6, r2, r6
 800f866:	421e      	tst	r6, r3
 800f868:	bf18      	it	ne
 800f86a:	4617      	movne	r7, r2
 800f86c:	f047 0720 	orr.w	r7, r7, #32
 800f870:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f872:	601c      	str	r4, [r3, #0]
 800f874:	9b04      	ldr	r3, [sp, #16]
 800f876:	601d      	str	r5, [r3, #0]
 800f878:	e695      	b.n	800f5a6 <__gethex+0x12a>
 800f87a:	4299      	cmp	r1, r3
 800f87c:	f843 cc04 	str.w	ip, [r3, #-4]
 800f880:	d8d8      	bhi.n	800f834 <__gethex+0x3b8>
 800f882:	68a3      	ldr	r3, [r4, #8]
 800f884:	459b      	cmp	fp, r3
 800f886:	db19      	blt.n	800f8bc <__gethex+0x440>
 800f888:	6861      	ldr	r1, [r4, #4]
 800f88a:	ee18 0a10 	vmov	r0, s16
 800f88e:	3101      	adds	r1, #1
 800f890:	f000 f998 	bl	800fbc4 <_Balloc>
 800f894:	4681      	mov	r9, r0
 800f896:	b918      	cbnz	r0, 800f8a0 <__gethex+0x424>
 800f898:	4b1a      	ldr	r3, [pc, #104]	; (800f904 <__gethex+0x488>)
 800f89a:	4602      	mov	r2, r0
 800f89c:	2184      	movs	r1, #132	; 0x84
 800f89e:	e6a8      	b.n	800f5f2 <__gethex+0x176>
 800f8a0:	6922      	ldr	r2, [r4, #16]
 800f8a2:	3202      	adds	r2, #2
 800f8a4:	f104 010c 	add.w	r1, r4, #12
 800f8a8:	0092      	lsls	r2, r2, #2
 800f8aa:	300c      	adds	r0, #12
 800f8ac:	f7fc fdf6 	bl	800c49c <memcpy>
 800f8b0:	4621      	mov	r1, r4
 800f8b2:	ee18 0a10 	vmov	r0, s16
 800f8b6:	f000 f9c5 	bl	800fc44 <_Bfree>
 800f8ba:	464c      	mov	r4, r9
 800f8bc:	6923      	ldr	r3, [r4, #16]
 800f8be:	1c5a      	adds	r2, r3, #1
 800f8c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f8c4:	6122      	str	r2, [r4, #16]
 800f8c6:	2201      	movs	r2, #1
 800f8c8:	615a      	str	r2, [r3, #20]
 800f8ca:	e7bb      	b.n	800f844 <__gethex+0x3c8>
 800f8cc:	6922      	ldr	r2, [r4, #16]
 800f8ce:	455a      	cmp	r2, fp
 800f8d0:	dd0b      	ble.n	800f8ea <__gethex+0x46e>
 800f8d2:	2101      	movs	r1, #1
 800f8d4:	4620      	mov	r0, r4
 800f8d6:	f7ff fd6a 	bl	800f3ae <rshift>
 800f8da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f8de:	3501      	adds	r5, #1
 800f8e0:	42ab      	cmp	r3, r5
 800f8e2:	f6ff aed0 	blt.w	800f686 <__gethex+0x20a>
 800f8e6:	2701      	movs	r7, #1
 800f8e8:	e7c0      	b.n	800f86c <__gethex+0x3f0>
 800f8ea:	f016 061f 	ands.w	r6, r6, #31
 800f8ee:	d0fa      	beq.n	800f8e6 <__gethex+0x46a>
 800f8f0:	449a      	add	sl, r3
 800f8f2:	f1c6 0620 	rsb	r6, r6, #32
 800f8f6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800f8fa:	f000 fa59 	bl	800fdb0 <__hi0bits>
 800f8fe:	42b0      	cmp	r0, r6
 800f900:	dbe7      	blt.n	800f8d2 <__gethex+0x456>
 800f902:	e7f0      	b.n	800f8e6 <__gethex+0x46a>
 800f904:	08010f73 	.word	0x08010f73

0800f908 <L_shift>:
 800f908:	f1c2 0208 	rsb	r2, r2, #8
 800f90c:	0092      	lsls	r2, r2, #2
 800f90e:	b570      	push	{r4, r5, r6, lr}
 800f910:	f1c2 0620 	rsb	r6, r2, #32
 800f914:	6843      	ldr	r3, [r0, #4]
 800f916:	6804      	ldr	r4, [r0, #0]
 800f918:	fa03 f506 	lsl.w	r5, r3, r6
 800f91c:	432c      	orrs	r4, r5
 800f91e:	40d3      	lsrs	r3, r2
 800f920:	6004      	str	r4, [r0, #0]
 800f922:	f840 3f04 	str.w	r3, [r0, #4]!
 800f926:	4288      	cmp	r0, r1
 800f928:	d3f4      	bcc.n	800f914 <L_shift+0xc>
 800f92a:	bd70      	pop	{r4, r5, r6, pc}

0800f92c <__match>:
 800f92c:	b530      	push	{r4, r5, lr}
 800f92e:	6803      	ldr	r3, [r0, #0]
 800f930:	3301      	adds	r3, #1
 800f932:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f936:	b914      	cbnz	r4, 800f93e <__match+0x12>
 800f938:	6003      	str	r3, [r0, #0]
 800f93a:	2001      	movs	r0, #1
 800f93c:	bd30      	pop	{r4, r5, pc}
 800f93e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f942:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f946:	2d19      	cmp	r5, #25
 800f948:	bf98      	it	ls
 800f94a:	3220      	addls	r2, #32
 800f94c:	42a2      	cmp	r2, r4
 800f94e:	d0f0      	beq.n	800f932 <__match+0x6>
 800f950:	2000      	movs	r0, #0
 800f952:	e7f3      	b.n	800f93c <__match+0x10>

0800f954 <__hexnan>:
 800f954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f958:	680b      	ldr	r3, [r1, #0]
 800f95a:	6801      	ldr	r1, [r0, #0]
 800f95c:	115e      	asrs	r6, r3, #5
 800f95e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f962:	f013 031f 	ands.w	r3, r3, #31
 800f966:	b087      	sub	sp, #28
 800f968:	bf18      	it	ne
 800f96a:	3604      	addne	r6, #4
 800f96c:	2500      	movs	r5, #0
 800f96e:	1f37      	subs	r7, r6, #4
 800f970:	4682      	mov	sl, r0
 800f972:	4690      	mov	r8, r2
 800f974:	9301      	str	r3, [sp, #4]
 800f976:	f846 5c04 	str.w	r5, [r6, #-4]
 800f97a:	46b9      	mov	r9, r7
 800f97c:	463c      	mov	r4, r7
 800f97e:	9502      	str	r5, [sp, #8]
 800f980:	46ab      	mov	fp, r5
 800f982:	784a      	ldrb	r2, [r1, #1]
 800f984:	1c4b      	adds	r3, r1, #1
 800f986:	9303      	str	r3, [sp, #12]
 800f988:	b342      	cbz	r2, 800f9dc <__hexnan+0x88>
 800f98a:	4610      	mov	r0, r2
 800f98c:	9105      	str	r1, [sp, #20]
 800f98e:	9204      	str	r2, [sp, #16]
 800f990:	f7ff fd5f 	bl	800f452 <__hexdig_fun>
 800f994:	2800      	cmp	r0, #0
 800f996:	d14f      	bne.n	800fa38 <__hexnan+0xe4>
 800f998:	9a04      	ldr	r2, [sp, #16]
 800f99a:	9905      	ldr	r1, [sp, #20]
 800f99c:	2a20      	cmp	r2, #32
 800f99e:	d818      	bhi.n	800f9d2 <__hexnan+0x7e>
 800f9a0:	9b02      	ldr	r3, [sp, #8]
 800f9a2:	459b      	cmp	fp, r3
 800f9a4:	dd13      	ble.n	800f9ce <__hexnan+0x7a>
 800f9a6:	454c      	cmp	r4, r9
 800f9a8:	d206      	bcs.n	800f9b8 <__hexnan+0x64>
 800f9aa:	2d07      	cmp	r5, #7
 800f9ac:	dc04      	bgt.n	800f9b8 <__hexnan+0x64>
 800f9ae:	462a      	mov	r2, r5
 800f9b0:	4649      	mov	r1, r9
 800f9b2:	4620      	mov	r0, r4
 800f9b4:	f7ff ffa8 	bl	800f908 <L_shift>
 800f9b8:	4544      	cmp	r4, r8
 800f9ba:	d950      	bls.n	800fa5e <__hexnan+0x10a>
 800f9bc:	2300      	movs	r3, #0
 800f9be:	f1a4 0904 	sub.w	r9, r4, #4
 800f9c2:	f844 3c04 	str.w	r3, [r4, #-4]
 800f9c6:	f8cd b008 	str.w	fp, [sp, #8]
 800f9ca:	464c      	mov	r4, r9
 800f9cc:	461d      	mov	r5, r3
 800f9ce:	9903      	ldr	r1, [sp, #12]
 800f9d0:	e7d7      	b.n	800f982 <__hexnan+0x2e>
 800f9d2:	2a29      	cmp	r2, #41	; 0x29
 800f9d4:	d156      	bne.n	800fa84 <__hexnan+0x130>
 800f9d6:	3102      	adds	r1, #2
 800f9d8:	f8ca 1000 	str.w	r1, [sl]
 800f9dc:	f1bb 0f00 	cmp.w	fp, #0
 800f9e0:	d050      	beq.n	800fa84 <__hexnan+0x130>
 800f9e2:	454c      	cmp	r4, r9
 800f9e4:	d206      	bcs.n	800f9f4 <__hexnan+0xa0>
 800f9e6:	2d07      	cmp	r5, #7
 800f9e8:	dc04      	bgt.n	800f9f4 <__hexnan+0xa0>
 800f9ea:	462a      	mov	r2, r5
 800f9ec:	4649      	mov	r1, r9
 800f9ee:	4620      	mov	r0, r4
 800f9f0:	f7ff ff8a 	bl	800f908 <L_shift>
 800f9f4:	4544      	cmp	r4, r8
 800f9f6:	d934      	bls.n	800fa62 <__hexnan+0x10e>
 800f9f8:	f1a8 0204 	sub.w	r2, r8, #4
 800f9fc:	4623      	mov	r3, r4
 800f9fe:	f853 1b04 	ldr.w	r1, [r3], #4
 800fa02:	f842 1f04 	str.w	r1, [r2, #4]!
 800fa06:	429f      	cmp	r7, r3
 800fa08:	d2f9      	bcs.n	800f9fe <__hexnan+0xaa>
 800fa0a:	1b3b      	subs	r3, r7, r4
 800fa0c:	f023 0303 	bic.w	r3, r3, #3
 800fa10:	3304      	adds	r3, #4
 800fa12:	3401      	adds	r4, #1
 800fa14:	3e03      	subs	r6, #3
 800fa16:	42b4      	cmp	r4, r6
 800fa18:	bf88      	it	hi
 800fa1a:	2304      	movhi	r3, #4
 800fa1c:	4443      	add	r3, r8
 800fa1e:	2200      	movs	r2, #0
 800fa20:	f843 2b04 	str.w	r2, [r3], #4
 800fa24:	429f      	cmp	r7, r3
 800fa26:	d2fb      	bcs.n	800fa20 <__hexnan+0xcc>
 800fa28:	683b      	ldr	r3, [r7, #0]
 800fa2a:	b91b      	cbnz	r3, 800fa34 <__hexnan+0xe0>
 800fa2c:	4547      	cmp	r7, r8
 800fa2e:	d127      	bne.n	800fa80 <__hexnan+0x12c>
 800fa30:	2301      	movs	r3, #1
 800fa32:	603b      	str	r3, [r7, #0]
 800fa34:	2005      	movs	r0, #5
 800fa36:	e026      	b.n	800fa86 <__hexnan+0x132>
 800fa38:	3501      	adds	r5, #1
 800fa3a:	2d08      	cmp	r5, #8
 800fa3c:	f10b 0b01 	add.w	fp, fp, #1
 800fa40:	dd06      	ble.n	800fa50 <__hexnan+0xfc>
 800fa42:	4544      	cmp	r4, r8
 800fa44:	d9c3      	bls.n	800f9ce <__hexnan+0x7a>
 800fa46:	2300      	movs	r3, #0
 800fa48:	f844 3c04 	str.w	r3, [r4, #-4]
 800fa4c:	2501      	movs	r5, #1
 800fa4e:	3c04      	subs	r4, #4
 800fa50:	6822      	ldr	r2, [r4, #0]
 800fa52:	f000 000f 	and.w	r0, r0, #15
 800fa56:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800fa5a:	6022      	str	r2, [r4, #0]
 800fa5c:	e7b7      	b.n	800f9ce <__hexnan+0x7a>
 800fa5e:	2508      	movs	r5, #8
 800fa60:	e7b5      	b.n	800f9ce <__hexnan+0x7a>
 800fa62:	9b01      	ldr	r3, [sp, #4]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d0df      	beq.n	800fa28 <__hexnan+0xd4>
 800fa68:	f04f 32ff 	mov.w	r2, #4294967295
 800fa6c:	f1c3 0320 	rsb	r3, r3, #32
 800fa70:	fa22 f303 	lsr.w	r3, r2, r3
 800fa74:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fa78:	401a      	ands	r2, r3
 800fa7a:	f846 2c04 	str.w	r2, [r6, #-4]
 800fa7e:	e7d3      	b.n	800fa28 <__hexnan+0xd4>
 800fa80:	3f04      	subs	r7, #4
 800fa82:	e7d1      	b.n	800fa28 <__hexnan+0xd4>
 800fa84:	2004      	movs	r0, #4
 800fa86:	b007      	add	sp, #28
 800fa88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fa8c <_localeconv_r>:
 800fa8c:	4800      	ldr	r0, [pc, #0]	; (800fa90 <_localeconv_r+0x4>)
 800fa8e:	4770      	bx	lr
 800fa90:	200002f0 	.word	0x200002f0

0800fa94 <__retarget_lock_init_recursive>:
 800fa94:	4770      	bx	lr

0800fa96 <__retarget_lock_acquire_recursive>:
 800fa96:	4770      	bx	lr

0800fa98 <__retarget_lock_release_recursive>:
 800fa98:	4770      	bx	lr
	...

0800fa9c <_lseek_r>:
 800fa9c:	b538      	push	{r3, r4, r5, lr}
 800fa9e:	4d07      	ldr	r5, [pc, #28]	; (800fabc <_lseek_r+0x20>)
 800faa0:	4604      	mov	r4, r0
 800faa2:	4608      	mov	r0, r1
 800faa4:	4611      	mov	r1, r2
 800faa6:	2200      	movs	r2, #0
 800faa8:	602a      	str	r2, [r5, #0]
 800faaa:	461a      	mov	r2, r3
 800faac:	f7f3 f822 	bl	8002af4 <_lseek>
 800fab0:	1c43      	adds	r3, r0, #1
 800fab2:	d102      	bne.n	800faba <_lseek_r+0x1e>
 800fab4:	682b      	ldr	r3, [r5, #0]
 800fab6:	b103      	cbz	r3, 800faba <_lseek_r+0x1e>
 800fab8:	6023      	str	r3, [r4, #0]
 800faba:	bd38      	pop	{r3, r4, r5, pc}
 800fabc:	20002d04 	.word	0x20002d04

0800fac0 <__swhatbuf_r>:
 800fac0:	b570      	push	{r4, r5, r6, lr}
 800fac2:	460e      	mov	r6, r1
 800fac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fac8:	2900      	cmp	r1, #0
 800faca:	b096      	sub	sp, #88	; 0x58
 800facc:	4614      	mov	r4, r2
 800face:	461d      	mov	r5, r3
 800fad0:	da07      	bge.n	800fae2 <__swhatbuf_r+0x22>
 800fad2:	2300      	movs	r3, #0
 800fad4:	602b      	str	r3, [r5, #0]
 800fad6:	89b3      	ldrh	r3, [r6, #12]
 800fad8:	061a      	lsls	r2, r3, #24
 800fada:	d410      	bmi.n	800fafe <__swhatbuf_r+0x3e>
 800fadc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fae0:	e00e      	b.n	800fb00 <__swhatbuf_r+0x40>
 800fae2:	466a      	mov	r2, sp
 800fae4:	f001 f846 	bl	8010b74 <_fstat_r>
 800fae8:	2800      	cmp	r0, #0
 800faea:	dbf2      	blt.n	800fad2 <__swhatbuf_r+0x12>
 800faec:	9a01      	ldr	r2, [sp, #4]
 800faee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800faf2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800faf6:	425a      	negs	r2, r3
 800faf8:	415a      	adcs	r2, r3
 800fafa:	602a      	str	r2, [r5, #0]
 800fafc:	e7ee      	b.n	800fadc <__swhatbuf_r+0x1c>
 800fafe:	2340      	movs	r3, #64	; 0x40
 800fb00:	2000      	movs	r0, #0
 800fb02:	6023      	str	r3, [r4, #0]
 800fb04:	b016      	add	sp, #88	; 0x58
 800fb06:	bd70      	pop	{r4, r5, r6, pc}

0800fb08 <__smakebuf_r>:
 800fb08:	898b      	ldrh	r3, [r1, #12]
 800fb0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fb0c:	079d      	lsls	r5, r3, #30
 800fb0e:	4606      	mov	r6, r0
 800fb10:	460c      	mov	r4, r1
 800fb12:	d507      	bpl.n	800fb24 <__smakebuf_r+0x1c>
 800fb14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fb18:	6023      	str	r3, [r4, #0]
 800fb1a:	6123      	str	r3, [r4, #16]
 800fb1c:	2301      	movs	r3, #1
 800fb1e:	6163      	str	r3, [r4, #20]
 800fb20:	b002      	add	sp, #8
 800fb22:	bd70      	pop	{r4, r5, r6, pc}
 800fb24:	ab01      	add	r3, sp, #4
 800fb26:	466a      	mov	r2, sp
 800fb28:	f7ff ffca 	bl	800fac0 <__swhatbuf_r>
 800fb2c:	9900      	ldr	r1, [sp, #0]
 800fb2e:	4605      	mov	r5, r0
 800fb30:	4630      	mov	r0, r6
 800fb32:	f7fc fd19 	bl	800c568 <_malloc_r>
 800fb36:	b948      	cbnz	r0, 800fb4c <__smakebuf_r+0x44>
 800fb38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb3c:	059a      	lsls	r2, r3, #22
 800fb3e:	d4ef      	bmi.n	800fb20 <__smakebuf_r+0x18>
 800fb40:	f023 0303 	bic.w	r3, r3, #3
 800fb44:	f043 0302 	orr.w	r3, r3, #2
 800fb48:	81a3      	strh	r3, [r4, #12]
 800fb4a:	e7e3      	b.n	800fb14 <__smakebuf_r+0xc>
 800fb4c:	4b0d      	ldr	r3, [pc, #52]	; (800fb84 <__smakebuf_r+0x7c>)
 800fb4e:	62b3      	str	r3, [r6, #40]	; 0x28
 800fb50:	89a3      	ldrh	r3, [r4, #12]
 800fb52:	6020      	str	r0, [r4, #0]
 800fb54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb58:	81a3      	strh	r3, [r4, #12]
 800fb5a:	9b00      	ldr	r3, [sp, #0]
 800fb5c:	6163      	str	r3, [r4, #20]
 800fb5e:	9b01      	ldr	r3, [sp, #4]
 800fb60:	6120      	str	r0, [r4, #16]
 800fb62:	b15b      	cbz	r3, 800fb7c <__smakebuf_r+0x74>
 800fb64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb68:	4630      	mov	r0, r6
 800fb6a:	f001 f815 	bl	8010b98 <_isatty_r>
 800fb6e:	b128      	cbz	r0, 800fb7c <__smakebuf_r+0x74>
 800fb70:	89a3      	ldrh	r3, [r4, #12]
 800fb72:	f023 0303 	bic.w	r3, r3, #3
 800fb76:	f043 0301 	orr.w	r3, r3, #1
 800fb7a:	81a3      	strh	r3, [r4, #12]
 800fb7c:	89a0      	ldrh	r0, [r4, #12]
 800fb7e:	4305      	orrs	r5, r0
 800fb80:	81a5      	strh	r5, [r4, #12]
 800fb82:	e7cd      	b.n	800fb20 <__smakebuf_r+0x18>
 800fb84:	0800f20d 	.word	0x0800f20d

0800fb88 <__ascii_mbtowc>:
 800fb88:	b082      	sub	sp, #8
 800fb8a:	b901      	cbnz	r1, 800fb8e <__ascii_mbtowc+0x6>
 800fb8c:	a901      	add	r1, sp, #4
 800fb8e:	b142      	cbz	r2, 800fba2 <__ascii_mbtowc+0x1a>
 800fb90:	b14b      	cbz	r3, 800fba6 <__ascii_mbtowc+0x1e>
 800fb92:	7813      	ldrb	r3, [r2, #0]
 800fb94:	600b      	str	r3, [r1, #0]
 800fb96:	7812      	ldrb	r2, [r2, #0]
 800fb98:	1e10      	subs	r0, r2, #0
 800fb9a:	bf18      	it	ne
 800fb9c:	2001      	movne	r0, #1
 800fb9e:	b002      	add	sp, #8
 800fba0:	4770      	bx	lr
 800fba2:	4610      	mov	r0, r2
 800fba4:	e7fb      	b.n	800fb9e <__ascii_mbtowc+0x16>
 800fba6:	f06f 0001 	mvn.w	r0, #1
 800fbaa:	e7f8      	b.n	800fb9e <__ascii_mbtowc+0x16>

0800fbac <__malloc_lock>:
 800fbac:	4801      	ldr	r0, [pc, #4]	; (800fbb4 <__malloc_lock+0x8>)
 800fbae:	f7ff bf72 	b.w	800fa96 <__retarget_lock_acquire_recursive>
 800fbb2:	bf00      	nop
 800fbb4:	20002cfc 	.word	0x20002cfc

0800fbb8 <__malloc_unlock>:
 800fbb8:	4801      	ldr	r0, [pc, #4]	; (800fbc0 <__malloc_unlock+0x8>)
 800fbba:	f7ff bf6d 	b.w	800fa98 <__retarget_lock_release_recursive>
 800fbbe:	bf00      	nop
 800fbc0:	20002cfc 	.word	0x20002cfc

0800fbc4 <_Balloc>:
 800fbc4:	b570      	push	{r4, r5, r6, lr}
 800fbc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fbc8:	4604      	mov	r4, r0
 800fbca:	460d      	mov	r5, r1
 800fbcc:	b976      	cbnz	r6, 800fbec <_Balloc+0x28>
 800fbce:	2010      	movs	r0, #16
 800fbd0:	f7fc fc5c 	bl	800c48c <malloc>
 800fbd4:	4602      	mov	r2, r0
 800fbd6:	6260      	str	r0, [r4, #36]	; 0x24
 800fbd8:	b920      	cbnz	r0, 800fbe4 <_Balloc+0x20>
 800fbda:	4b18      	ldr	r3, [pc, #96]	; (800fc3c <_Balloc+0x78>)
 800fbdc:	4818      	ldr	r0, [pc, #96]	; (800fc40 <_Balloc+0x7c>)
 800fbde:	2166      	movs	r1, #102	; 0x66
 800fbe0:	f000 ff98 	bl	8010b14 <__assert_func>
 800fbe4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fbe8:	6006      	str	r6, [r0, #0]
 800fbea:	60c6      	str	r6, [r0, #12]
 800fbec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fbee:	68f3      	ldr	r3, [r6, #12]
 800fbf0:	b183      	cbz	r3, 800fc14 <_Balloc+0x50>
 800fbf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fbf4:	68db      	ldr	r3, [r3, #12]
 800fbf6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fbfa:	b9b8      	cbnz	r0, 800fc2c <_Balloc+0x68>
 800fbfc:	2101      	movs	r1, #1
 800fbfe:	fa01 f605 	lsl.w	r6, r1, r5
 800fc02:	1d72      	adds	r2, r6, #5
 800fc04:	0092      	lsls	r2, r2, #2
 800fc06:	4620      	mov	r0, r4
 800fc08:	f000 fc97 	bl	801053a <_calloc_r>
 800fc0c:	b160      	cbz	r0, 800fc28 <_Balloc+0x64>
 800fc0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fc12:	e00e      	b.n	800fc32 <_Balloc+0x6e>
 800fc14:	2221      	movs	r2, #33	; 0x21
 800fc16:	2104      	movs	r1, #4
 800fc18:	4620      	mov	r0, r4
 800fc1a:	f000 fc8e 	bl	801053a <_calloc_r>
 800fc1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc20:	60f0      	str	r0, [r6, #12]
 800fc22:	68db      	ldr	r3, [r3, #12]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d1e4      	bne.n	800fbf2 <_Balloc+0x2e>
 800fc28:	2000      	movs	r0, #0
 800fc2a:	bd70      	pop	{r4, r5, r6, pc}
 800fc2c:	6802      	ldr	r2, [r0, #0]
 800fc2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fc32:	2300      	movs	r3, #0
 800fc34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fc38:	e7f7      	b.n	800fc2a <_Balloc+0x66>
 800fc3a:	bf00      	nop
 800fc3c:	08010efd 	.word	0x08010efd
 800fc40:	08011064 	.word	0x08011064

0800fc44 <_Bfree>:
 800fc44:	b570      	push	{r4, r5, r6, lr}
 800fc46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fc48:	4605      	mov	r5, r0
 800fc4a:	460c      	mov	r4, r1
 800fc4c:	b976      	cbnz	r6, 800fc6c <_Bfree+0x28>
 800fc4e:	2010      	movs	r0, #16
 800fc50:	f7fc fc1c 	bl	800c48c <malloc>
 800fc54:	4602      	mov	r2, r0
 800fc56:	6268      	str	r0, [r5, #36]	; 0x24
 800fc58:	b920      	cbnz	r0, 800fc64 <_Bfree+0x20>
 800fc5a:	4b09      	ldr	r3, [pc, #36]	; (800fc80 <_Bfree+0x3c>)
 800fc5c:	4809      	ldr	r0, [pc, #36]	; (800fc84 <_Bfree+0x40>)
 800fc5e:	218a      	movs	r1, #138	; 0x8a
 800fc60:	f000 ff58 	bl	8010b14 <__assert_func>
 800fc64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fc68:	6006      	str	r6, [r0, #0]
 800fc6a:	60c6      	str	r6, [r0, #12]
 800fc6c:	b13c      	cbz	r4, 800fc7e <_Bfree+0x3a>
 800fc6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fc70:	6862      	ldr	r2, [r4, #4]
 800fc72:	68db      	ldr	r3, [r3, #12]
 800fc74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fc78:	6021      	str	r1, [r4, #0]
 800fc7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fc7e:	bd70      	pop	{r4, r5, r6, pc}
 800fc80:	08010efd 	.word	0x08010efd
 800fc84:	08011064 	.word	0x08011064

0800fc88 <__multadd>:
 800fc88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc8c:	690e      	ldr	r6, [r1, #16]
 800fc8e:	4607      	mov	r7, r0
 800fc90:	4698      	mov	r8, r3
 800fc92:	460c      	mov	r4, r1
 800fc94:	f101 0014 	add.w	r0, r1, #20
 800fc98:	2300      	movs	r3, #0
 800fc9a:	6805      	ldr	r5, [r0, #0]
 800fc9c:	b2a9      	uxth	r1, r5
 800fc9e:	fb02 8101 	mla	r1, r2, r1, r8
 800fca2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800fca6:	0c2d      	lsrs	r5, r5, #16
 800fca8:	fb02 c505 	mla	r5, r2, r5, ip
 800fcac:	b289      	uxth	r1, r1
 800fcae:	3301      	adds	r3, #1
 800fcb0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800fcb4:	429e      	cmp	r6, r3
 800fcb6:	f840 1b04 	str.w	r1, [r0], #4
 800fcba:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800fcbe:	dcec      	bgt.n	800fc9a <__multadd+0x12>
 800fcc0:	f1b8 0f00 	cmp.w	r8, #0
 800fcc4:	d022      	beq.n	800fd0c <__multadd+0x84>
 800fcc6:	68a3      	ldr	r3, [r4, #8]
 800fcc8:	42b3      	cmp	r3, r6
 800fcca:	dc19      	bgt.n	800fd00 <__multadd+0x78>
 800fccc:	6861      	ldr	r1, [r4, #4]
 800fcce:	4638      	mov	r0, r7
 800fcd0:	3101      	adds	r1, #1
 800fcd2:	f7ff ff77 	bl	800fbc4 <_Balloc>
 800fcd6:	4605      	mov	r5, r0
 800fcd8:	b928      	cbnz	r0, 800fce6 <__multadd+0x5e>
 800fcda:	4602      	mov	r2, r0
 800fcdc:	4b0d      	ldr	r3, [pc, #52]	; (800fd14 <__multadd+0x8c>)
 800fcde:	480e      	ldr	r0, [pc, #56]	; (800fd18 <__multadd+0x90>)
 800fce0:	21b5      	movs	r1, #181	; 0xb5
 800fce2:	f000 ff17 	bl	8010b14 <__assert_func>
 800fce6:	6922      	ldr	r2, [r4, #16]
 800fce8:	3202      	adds	r2, #2
 800fcea:	f104 010c 	add.w	r1, r4, #12
 800fcee:	0092      	lsls	r2, r2, #2
 800fcf0:	300c      	adds	r0, #12
 800fcf2:	f7fc fbd3 	bl	800c49c <memcpy>
 800fcf6:	4621      	mov	r1, r4
 800fcf8:	4638      	mov	r0, r7
 800fcfa:	f7ff ffa3 	bl	800fc44 <_Bfree>
 800fcfe:	462c      	mov	r4, r5
 800fd00:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800fd04:	3601      	adds	r6, #1
 800fd06:	f8c3 8014 	str.w	r8, [r3, #20]
 800fd0a:	6126      	str	r6, [r4, #16]
 800fd0c:	4620      	mov	r0, r4
 800fd0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd12:	bf00      	nop
 800fd14:	08010f73 	.word	0x08010f73
 800fd18:	08011064 	.word	0x08011064

0800fd1c <__s2b>:
 800fd1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd20:	460c      	mov	r4, r1
 800fd22:	4615      	mov	r5, r2
 800fd24:	461f      	mov	r7, r3
 800fd26:	2209      	movs	r2, #9
 800fd28:	3308      	adds	r3, #8
 800fd2a:	4606      	mov	r6, r0
 800fd2c:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd30:	2100      	movs	r1, #0
 800fd32:	2201      	movs	r2, #1
 800fd34:	429a      	cmp	r2, r3
 800fd36:	db09      	blt.n	800fd4c <__s2b+0x30>
 800fd38:	4630      	mov	r0, r6
 800fd3a:	f7ff ff43 	bl	800fbc4 <_Balloc>
 800fd3e:	b940      	cbnz	r0, 800fd52 <__s2b+0x36>
 800fd40:	4602      	mov	r2, r0
 800fd42:	4b19      	ldr	r3, [pc, #100]	; (800fda8 <__s2b+0x8c>)
 800fd44:	4819      	ldr	r0, [pc, #100]	; (800fdac <__s2b+0x90>)
 800fd46:	21ce      	movs	r1, #206	; 0xce
 800fd48:	f000 fee4 	bl	8010b14 <__assert_func>
 800fd4c:	0052      	lsls	r2, r2, #1
 800fd4e:	3101      	adds	r1, #1
 800fd50:	e7f0      	b.n	800fd34 <__s2b+0x18>
 800fd52:	9b08      	ldr	r3, [sp, #32]
 800fd54:	6143      	str	r3, [r0, #20]
 800fd56:	2d09      	cmp	r5, #9
 800fd58:	f04f 0301 	mov.w	r3, #1
 800fd5c:	6103      	str	r3, [r0, #16]
 800fd5e:	dd16      	ble.n	800fd8e <__s2b+0x72>
 800fd60:	f104 0909 	add.w	r9, r4, #9
 800fd64:	46c8      	mov	r8, r9
 800fd66:	442c      	add	r4, r5
 800fd68:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fd6c:	4601      	mov	r1, r0
 800fd6e:	3b30      	subs	r3, #48	; 0x30
 800fd70:	220a      	movs	r2, #10
 800fd72:	4630      	mov	r0, r6
 800fd74:	f7ff ff88 	bl	800fc88 <__multadd>
 800fd78:	45a0      	cmp	r8, r4
 800fd7a:	d1f5      	bne.n	800fd68 <__s2b+0x4c>
 800fd7c:	f1a5 0408 	sub.w	r4, r5, #8
 800fd80:	444c      	add	r4, r9
 800fd82:	1b2d      	subs	r5, r5, r4
 800fd84:	1963      	adds	r3, r4, r5
 800fd86:	42bb      	cmp	r3, r7
 800fd88:	db04      	blt.n	800fd94 <__s2b+0x78>
 800fd8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd8e:	340a      	adds	r4, #10
 800fd90:	2509      	movs	r5, #9
 800fd92:	e7f6      	b.n	800fd82 <__s2b+0x66>
 800fd94:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fd98:	4601      	mov	r1, r0
 800fd9a:	3b30      	subs	r3, #48	; 0x30
 800fd9c:	220a      	movs	r2, #10
 800fd9e:	4630      	mov	r0, r6
 800fda0:	f7ff ff72 	bl	800fc88 <__multadd>
 800fda4:	e7ee      	b.n	800fd84 <__s2b+0x68>
 800fda6:	bf00      	nop
 800fda8:	08010f73 	.word	0x08010f73
 800fdac:	08011064 	.word	0x08011064

0800fdb0 <__hi0bits>:
 800fdb0:	0c03      	lsrs	r3, r0, #16
 800fdb2:	041b      	lsls	r3, r3, #16
 800fdb4:	b9d3      	cbnz	r3, 800fdec <__hi0bits+0x3c>
 800fdb6:	0400      	lsls	r0, r0, #16
 800fdb8:	2310      	movs	r3, #16
 800fdba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fdbe:	bf04      	itt	eq
 800fdc0:	0200      	lsleq	r0, r0, #8
 800fdc2:	3308      	addeq	r3, #8
 800fdc4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fdc8:	bf04      	itt	eq
 800fdca:	0100      	lsleq	r0, r0, #4
 800fdcc:	3304      	addeq	r3, #4
 800fdce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fdd2:	bf04      	itt	eq
 800fdd4:	0080      	lsleq	r0, r0, #2
 800fdd6:	3302      	addeq	r3, #2
 800fdd8:	2800      	cmp	r0, #0
 800fdda:	db05      	blt.n	800fde8 <__hi0bits+0x38>
 800fddc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fde0:	f103 0301 	add.w	r3, r3, #1
 800fde4:	bf08      	it	eq
 800fde6:	2320      	moveq	r3, #32
 800fde8:	4618      	mov	r0, r3
 800fdea:	4770      	bx	lr
 800fdec:	2300      	movs	r3, #0
 800fdee:	e7e4      	b.n	800fdba <__hi0bits+0xa>

0800fdf0 <__lo0bits>:
 800fdf0:	6803      	ldr	r3, [r0, #0]
 800fdf2:	f013 0207 	ands.w	r2, r3, #7
 800fdf6:	4601      	mov	r1, r0
 800fdf8:	d00b      	beq.n	800fe12 <__lo0bits+0x22>
 800fdfa:	07da      	lsls	r2, r3, #31
 800fdfc:	d424      	bmi.n	800fe48 <__lo0bits+0x58>
 800fdfe:	0798      	lsls	r0, r3, #30
 800fe00:	bf49      	itett	mi
 800fe02:	085b      	lsrmi	r3, r3, #1
 800fe04:	089b      	lsrpl	r3, r3, #2
 800fe06:	2001      	movmi	r0, #1
 800fe08:	600b      	strmi	r3, [r1, #0]
 800fe0a:	bf5c      	itt	pl
 800fe0c:	600b      	strpl	r3, [r1, #0]
 800fe0e:	2002      	movpl	r0, #2
 800fe10:	4770      	bx	lr
 800fe12:	b298      	uxth	r0, r3
 800fe14:	b9b0      	cbnz	r0, 800fe44 <__lo0bits+0x54>
 800fe16:	0c1b      	lsrs	r3, r3, #16
 800fe18:	2010      	movs	r0, #16
 800fe1a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fe1e:	bf04      	itt	eq
 800fe20:	0a1b      	lsreq	r3, r3, #8
 800fe22:	3008      	addeq	r0, #8
 800fe24:	071a      	lsls	r2, r3, #28
 800fe26:	bf04      	itt	eq
 800fe28:	091b      	lsreq	r3, r3, #4
 800fe2a:	3004      	addeq	r0, #4
 800fe2c:	079a      	lsls	r2, r3, #30
 800fe2e:	bf04      	itt	eq
 800fe30:	089b      	lsreq	r3, r3, #2
 800fe32:	3002      	addeq	r0, #2
 800fe34:	07da      	lsls	r2, r3, #31
 800fe36:	d403      	bmi.n	800fe40 <__lo0bits+0x50>
 800fe38:	085b      	lsrs	r3, r3, #1
 800fe3a:	f100 0001 	add.w	r0, r0, #1
 800fe3e:	d005      	beq.n	800fe4c <__lo0bits+0x5c>
 800fe40:	600b      	str	r3, [r1, #0]
 800fe42:	4770      	bx	lr
 800fe44:	4610      	mov	r0, r2
 800fe46:	e7e8      	b.n	800fe1a <__lo0bits+0x2a>
 800fe48:	2000      	movs	r0, #0
 800fe4a:	4770      	bx	lr
 800fe4c:	2020      	movs	r0, #32
 800fe4e:	4770      	bx	lr

0800fe50 <__i2b>:
 800fe50:	b510      	push	{r4, lr}
 800fe52:	460c      	mov	r4, r1
 800fe54:	2101      	movs	r1, #1
 800fe56:	f7ff feb5 	bl	800fbc4 <_Balloc>
 800fe5a:	4602      	mov	r2, r0
 800fe5c:	b928      	cbnz	r0, 800fe6a <__i2b+0x1a>
 800fe5e:	4b05      	ldr	r3, [pc, #20]	; (800fe74 <__i2b+0x24>)
 800fe60:	4805      	ldr	r0, [pc, #20]	; (800fe78 <__i2b+0x28>)
 800fe62:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fe66:	f000 fe55 	bl	8010b14 <__assert_func>
 800fe6a:	2301      	movs	r3, #1
 800fe6c:	6144      	str	r4, [r0, #20]
 800fe6e:	6103      	str	r3, [r0, #16]
 800fe70:	bd10      	pop	{r4, pc}
 800fe72:	bf00      	nop
 800fe74:	08010f73 	.word	0x08010f73
 800fe78:	08011064 	.word	0x08011064

0800fe7c <__multiply>:
 800fe7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe80:	4614      	mov	r4, r2
 800fe82:	690a      	ldr	r2, [r1, #16]
 800fe84:	6923      	ldr	r3, [r4, #16]
 800fe86:	429a      	cmp	r2, r3
 800fe88:	bfb8      	it	lt
 800fe8a:	460b      	movlt	r3, r1
 800fe8c:	460d      	mov	r5, r1
 800fe8e:	bfbc      	itt	lt
 800fe90:	4625      	movlt	r5, r4
 800fe92:	461c      	movlt	r4, r3
 800fe94:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800fe98:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800fe9c:	68ab      	ldr	r3, [r5, #8]
 800fe9e:	6869      	ldr	r1, [r5, #4]
 800fea0:	eb0a 0709 	add.w	r7, sl, r9
 800fea4:	42bb      	cmp	r3, r7
 800fea6:	b085      	sub	sp, #20
 800fea8:	bfb8      	it	lt
 800feaa:	3101      	addlt	r1, #1
 800feac:	f7ff fe8a 	bl	800fbc4 <_Balloc>
 800feb0:	b930      	cbnz	r0, 800fec0 <__multiply+0x44>
 800feb2:	4602      	mov	r2, r0
 800feb4:	4b42      	ldr	r3, [pc, #264]	; (800ffc0 <__multiply+0x144>)
 800feb6:	4843      	ldr	r0, [pc, #268]	; (800ffc4 <__multiply+0x148>)
 800feb8:	f240 115d 	movw	r1, #349	; 0x15d
 800febc:	f000 fe2a 	bl	8010b14 <__assert_func>
 800fec0:	f100 0614 	add.w	r6, r0, #20
 800fec4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800fec8:	4633      	mov	r3, r6
 800feca:	2200      	movs	r2, #0
 800fecc:	4543      	cmp	r3, r8
 800fece:	d31e      	bcc.n	800ff0e <__multiply+0x92>
 800fed0:	f105 0c14 	add.w	ip, r5, #20
 800fed4:	f104 0314 	add.w	r3, r4, #20
 800fed8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800fedc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800fee0:	9202      	str	r2, [sp, #8]
 800fee2:	ebac 0205 	sub.w	r2, ip, r5
 800fee6:	3a15      	subs	r2, #21
 800fee8:	f022 0203 	bic.w	r2, r2, #3
 800feec:	3204      	adds	r2, #4
 800feee:	f105 0115 	add.w	r1, r5, #21
 800fef2:	458c      	cmp	ip, r1
 800fef4:	bf38      	it	cc
 800fef6:	2204      	movcc	r2, #4
 800fef8:	9201      	str	r2, [sp, #4]
 800fefa:	9a02      	ldr	r2, [sp, #8]
 800fefc:	9303      	str	r3, [sp, #12]
 800fefe:	429a      	cmp	r2, r3
 800ff00:	d808      	bhi.n	800ff14 <__multiply+0x98>
 800ff02:	2f00      	cmp	r7, #0
 800ff04:	dc55      	bgt.n	800ffb2 <__multiply+0x136>
 800ff06:	6107      	str	r7, [r0, #16]
 800ff08:	b005      	add	sp, #20
 800ff0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff0e:	f843 2b04 	str.w	r2, [r3], #4
 800ff12:	e7db      	b.n	800fecc <__multiply+0x50>
 800ff14:	f8b3 a000 	ldrh.w	sl, [r3]
 800ff18:	f1ba 0f00 	cmp.w	sl, #0
 800ff1c:	d020      	beq.n	800ff60 <__multiply+0xe4>
 800ff1e:	f105 0e14 	add.w	lr, r5, #20
 800ff22:	46b1      	mov	r9, r6
 800ff24:	2200      	movs	r2, #0
 800ff26:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ff2a:	f8d9 b000 	ldr.w	fp, [r9]
 800ff2e:	b2a1      	uxth	r1, r4
 800ff30:	fa1f fb8b 	uxth.w	fp, fp
 800ff34:	fb0a b101 	mla	r1, sl, r1, fp
 800ff38:	4411      	add	r1, r2
 800ff3a:	f8d9 2000 	ldr.w	r2, [r9]
 800ff3e:	0c24      	lsrs	r4, r4, #16
 800ff40:	0c12      	lsrs	r2, r2, #16
 800ff42:	fb0a 2404 	mla	r4, sl, r4, r2
 800ff46:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ff4a:	b289      	uxth	r1, r1
 800ff4c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ff50:	45f4      	cmp	ip, lr
 800ff52:	f849 1b04 	str.w	r1, [r9], #4
 800ff56:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ff5a:	d8e4      	bhi.n	800ff26 <__multiply+0xaa>
 800ff5c:	9901      	ldr	r1, [sp, #4]
 800ff5e:	5072      	str	r2, [r6, r1]
 800ff60:	9a03      	ldr	r2, [sp, #12]
 800ff62:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ff66:	3304      	adds	r3, #4
 800ff68:	f1b9 0f00 	cmp.w	r9, #0
 800ff6c:	d01f      	beq.n	800ffae <__multiply+0x132>
 800ff6e:	6834      	ldr	r4, [r6, #0]
 800ff70:	f105 0114 	add.w	r1, r5, #20
 800ff74:	46b6      	mov	lr, r6
 800ff76:	f04f 0a00 	mov.w	sl, #0
 800ff7a:	880a      	ldrh	r2, [r1, #0]
 800ff7c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ff80:	fb09 b202 	mla	r2, r9, r2, fp
 800ff84:	4492      	add	sl, r2
 800ff86:	b2a4      	uxth	r4, r4
 800ff88:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ff8c:	f84e 4b04 	str.w	r4, [lr], #4
 800ff90:	f851 4b04 	ldr.w	r4, [r1], #4
 800ff94:	f8be 2000 	ldrh.w	r2, [lr]
 800ff98:	0c24      	lsrs	r4, r4, #16
 800ff9a:	fb09 2404 	mla	r4, r9, r4, r2
 800ff9e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ffa2:	458c      	cmp	ip, r1
 800ffa4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ffa8:	d8e7      	bhi.n	800ff7a <__multiply+0xfe>
 800ffaa:	9a01      	ldr	r2, [sp, #4]
 800ffac:	50b4      	str	r4, [r6, r2]
 800ffae:	3604      	adds	r6, #4
 800ffb0:	e7a3      	b.n	800fefa <__multiply+0x7e>
 800ffb2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d1a5      	bne.n	800ff06 <__multiply+0x8a>
 800ffba:	3f01      	subs	r7, #1
 800ffbc:	e7a1      	b.n	800ff02 <__multiply+0x86>
 800ffbe:	bf00      	nop
 800ffc0:	08010f73 	.word	0x08010f73
 800ffc4:	08011064 	.word	0x08011064

0800ffc8 <__pow5mult>:
 800ffc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ffcc:	4615      	mov	r5, r2
 800ffce:	f012 0203 	ands.w	r2, r2, #3
 800ffd2:	4606      	mov	r6, r0
 800ffd4:	460f      	mov	r7, r1
 800ffd6:	d007      	beq.n	800ffe8 <__pow5mult+0x20>
 800ffd8:	4c25      	ldr	r4, [pc, #148]	; (8010070 <__pow5mult+0xa8>)
 800ffda:	3a01      	subs	r2, #1
 800ffdc:	2300      	movs	r3, #0
 800ffde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ffe2:	f7ff fe51 	bl	800fc88 <__multadd>
 800ffe6:	4607      	mov	r7, r0
 800ffe8:	10ad      	asrs	r5, r5, #2
 800ffea:	d03d      	beq.n	8010068 <__pow5mult+0xa0>
 800ffec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ffee:	b97c      	cbnz	r4, 8010010 <__pow5mult+0x48>
 800fff0:	2010      	movs	r0, #16
 800fff2:	f7fc fa4b 	bl	800c48c <malloc>
 800fff6:	4602      	mov	r2, r0
 800fff8:	6270      	str	r0, [r6, #36]	; 0x24
 800fffa:	b928      	cbnz	r0, 8010008 <__pow5mult+0x40>
 800fffc:	4b1d      	ldr	r3, [pc, #116]	; (8010074 <__pow5mult+0xac>)
 800fffe:	481e      	ldr	r0, [pc, #120]	; (8010078 <__pow5mult+0xb0>)
 8010000:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010004:	f000 fd86 	bl	8010b14 <__assert_func>
 8010008:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801000c:	6004      	str	r4, [r0, #0]
 801000e:	60c4      	str	r4, [r0, #12]
 8010010:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010014:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010018:	b94c      	cbnz	r4, 801002e <__pow5mult+0x66>
 801001a:	f240 2171 	movw	r1, #625	; 0x271
 801001e:	4630      	mov	r0, r6
 8010020:	f7ff ff16 	bl	800fe50 <__i2b>
 8010024:	2300      	movs	r3, #0
 8010026:	f8c8 0008 	str.w	r0, [r8, #8]
 801002a:	4604      	mov	r4, r0
 801002c:	6003      	str	r3, [r0, #0]
 801002e:	f04f 0900 	mov.w	r9, #0
 8010032:	07eb      	lsls	r3, r5, #31
 8010034:	d50a      	bpl.n	801004c <__pow5mult+0x84>
 8010036:	4639      	mov	r1, r7
 8010038:	4622      	mov	r2, r4
 801003a:	4630      	mov	r0, r6
 801003c:	f7ff ff1e 	bl	800fe7c <__multiply>
 8010040:	4639      	mov	r1, r7
 8010042:	4680      	mov	r8, r0
 8010044:	4630      	mov	r0, r6
 8010046:	f7ff fdfd 	bl	800fc44 <_Bfree>
 801004a:	4647      	mov	r7, r8
 801004c:	106d      	asrs	r5, r5, #1
 801004e:	d00b      	beq.n	8010068 <__pow5mult+0xa0>
 8010050:	6820      	ldr	r0, [r4, #0]
 8010052:	b938      	cbnz	r0, 8010064 <__pow5mult+0x9c>
 8010054:	4622      	mov	r2, r4
 8010056:	4621      	mov	r1, r4
 8010058:	4630      	mov	r0, r6
 801005a:	f7ff ff0f 	bl	800fe7c <__multiply>
 801005e:	6020      	str	r0, [r4, #0]
 8010060:	f8c0 9000 	str.w	r9, [r0]
 8010064:	4604      	mov	r4, r0
 8010066:	e7e4      	b.n	8010032 <__pow5mult+0x6a>
 8010068:	4638      	mov	r0, r7
 801006a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801006e:	bf00      	nop
 8010070:	080111b8 	.word	0x080111b8
 8010074:	08010efd 	.word	0x08010efd
 8010078:	08011064 	.word	0x08011064

0801007c <__lshift>:
 801007c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010080:	460c      	mov	r4, r1
 8010082:	6849      	ldr	r1, [r1, #4]
 8010084:	6923      	ldr	r3, [r4, #16]
 8010086:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801008a:	68a3      	ldr	r3, [r4, #8]
 801008c:	4607      	mov	r7, r0
 801008e:	4691      	mov	r9, r2
 8010090:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010094:	f108 0601 	add.w	r6, r8, #1
 8010098:	42b3      	cmp	r3, r6
 801009a:	db0b      	blt.n	80100b4 <__lshift+0x38>
 801009c:	4638      	mov	r0, r7
 801009e:	f7ff fd91 	bl	800fbc4 <_Balloc>
 80100a2:	4605      	mov	r5, r0
 80100a4:	b948      	cbnz	r0, 80100ba <__lshift+0x3e>
 80100a6:	4602      	mov	r2, r0
 80100a8:	4b28      	ldr	r3, [pc, #160]	; (801014c <__lshift+0xd0>)
 80100aa:	4829      	ldr	r0, [pc, #164]	; (8010150 <__lshift+0xd4>)
 80100ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80100b0:	f000 fd30 	bl	8010b14 <__assert_func>
 80100b4:	3101      	adds	r1, #1
 80100b6:	005b      	lsls	r3, r3, #1
 80100b8:	e7ee      	b.n	8010098 <__lshift+0x1c>
 80100ba:	2300      	movs	r3, #0
 80100bc:	f100 0114 	add.w	r1, r0, #20
 80100c0:	f100 0210 	add.w	r2, r0, #16
 80100c4:	4618      	mov	r0, r3
 80100c6:	4553      	cmp	r3, sl
 80100c8:	db33      	blt.n	8010132 <__lshift+0xb6>
 80100ca:	6920      	ldr	r0, [r4, #16]
 80100cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80100d0:	f104 0314 	add.w	r3, r4, #20
 80100d4:	f019 091f 	ands.w	r9, r9, #31
 80100d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80100dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80100e0:	d02b      	beq.n	801013a <__lshift+0xbe>
 80100e2:	f1c9 0e20 	rsb	lr, r9, #32
 80100e6:	468a      	mov	sl, r1
 80100e8:	2200      	movs	r2, #0
 80100ea:	6818      	ldr	r0, [r3, #0]
 80100ec:	fa00 f009 	lsl.w	r0, r0, r9
 80100f0:	4302      	orrs	r2, r0
 80100f2:	f84a 2b04 	str.w	r2, [sl], #4
 80100f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80100fa:	459c      	cmp	ip, r3
 80100fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8010100:	d8f3      	bhi.n	80100ea <__lshift+0x6e>
 8010102:	ebac 0304 	sub.w	r3, ip, r4
 8010106:	3b15      	subs	r3, #21
 8010108:	f023 0303 	bic.w	r3, r3, #3
 801010c:	3304      	adds	r3, #4
 801010e:	f104 0015 	add.w	r0, r4, #21
 8010112:	4584      	cmp	ip, r0
 8010114:	bf38      	it	cc
 8010116:	2304      	movcc	r3, #4
 8010118:	50ca      	str	r2, [r1, r3]
 801011a:	b10a      	cbz	r2, 8010120 <__lshift+0xa4>
 801011c:	f108 0602 	add.w	r6, r8, #2
 8010120:	3e01      	subs	r6, #1
 8010122:	4638      	mov	r0, r7
 8010124:	612e      	str	r6, [r5, #16]
 8010126:	4621      	mov	r1, r4
 8010128:	f7ff fd8c 	bl	800fc44 <_Bfree>
 801012c:	4628      	mov	r0, r5
 801012e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010132:	f842 0f04 	str.w	r0, [r2, #4]!
 8010136:	3301      	adds	r3, #1
 8010138:	e7c5      	b.n	80100c6 <__lshift+0x4a>
 801013a:	3904      	subs	r1, #4
 801013c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010140:	f841 2f04 	str.w	r2, [r1, #4]!
 8010144:	459c      	cmp	ip, r3
 8010146:	d8f9      	bhi.n	801013c <__lshift+0xc0>
 8010148:	e7ea      	b.n	8010120 <__lshift+0xa4>
 801014a:	bf00      	nop
 801014c:	08010f73 	.word	0x08010f73
 8010150:	08011064 	.word	0x08011064

08010154 <__mcmp>:
 8010154:	b530      	push	{r4, r5, lr}
 8010156:	6902      	ldr	r2, [r0, #16]
 8010158:	690c      	ldr	r4, [r1, #16]
 801015a:	1b12      	subs	r2, r2, r4
 801015c:	d10e      	bne.n	801017c <__mcmp+0x28>
 801015e:	f100 0314 	add.w	r3, r0, #20
 8010162:	3114      	adds	r1, #20
 8010164:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010168:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801016c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010170:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010174:	42a5      	cmp	r5, r4
 8010176:	d003      	beq.n	8010180 <__mcmp+0x2c>
 8010178:	d305      	bcc.n	8010186 <__mcmp+0x32>
 801017a:	2201      	movs	r2, #1
 801017c:	4610      	mov	r0, r2
 801017e:	bd30      	pop	{r4, r5, pc}
 8010180:	4283      	cmp	r3, r0
 8010182:	d3f3      	bcc.n	801016c <__mcmp+0x18>
 8010184:	e7fa      	b.n	801017c <__mcmp+0x28>
 8010186:	f04f 32ff 	mov.w	r2, #4294967295
 801018a:	e7f7      	b.n	801017c <__mcmp+0x28>

0801018c <__mdiff>:
 801018c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010190:	460c      	mov	r4, r1
 8010192:	4606      	mov	r6, r0
 8010194:	4611      	mov	r1, r2
 8010196:	4620      	mov	r0, r4
 8010198:	4617      	mov	r7, r2
 801019a:	f7ff ffdb 	bl	8010154 <__mcmp>
 801019e:	1e05      	subs	r5, r0, #0
 80101a0:	d110      	bne.n	80101c4 <__mdiff+0x38>
 80101a2:	4629      	mov	r1, r5
 80101a4:	4630      	mov	r0, r6
 80101a6:	f7ff fd0d 	bl	800fbc4 <_Balloc>
 80101aa:	b930      	cbnz	r0, 80101ba <__mdiff+0x2e>
 80101ac:	4b39      	ldr	r3, [pc, #228]	; (8010294 <__mdiff+0x108>)
 80101ae:	4602      	mov	r2, r0
 80101b0:	f240 2132 	movw	r1, #562	; 0x232
 80101b4:	4838      	ldr	r0, [pc, #224]	; (8010298 <__mdiff+0x10c>)
 80101b6:	f000 fcad 	bl	8010b14 <__assert_func>
 80101ba:	2301      	movs	r3, #1
 80101bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80101c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101c4:	bfa4      	itt	ge
 80101c6:	463b      	movge	r3, r7
 80101c8:	4627      	movge	r7, r4
 80101ca:	4630      	mov	r0, r6
 80101cc:	6879      	ldr	r1, [r7, #4]
 80101ce:	bfa6      	itte	ge
 80101d0:	461c      	movge	r4, r3
 80101d2:	2500      	movge	r5, #0
 80101d4:	2501      	movlt	r5, #1
 80101d6:	f7ff fcf5 	bl	800fbc4 <_Balloc>
 80101da:	b920      	cbnz	r0, 80101e6 <__mdiff+0x5a>
 80101dc:	4b2d      	ldr	r3, [pc, #180]	; (8010294 <__mdiff+0x108>)
 80101de:	4602      	mov	r2, r0
 80101e0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80101e4:	e7e6      	b.n	80101b4 <__mdiff+0x28>
 80101e6:	693e      	ldr	r6, [r7, #16]
 80101e8:	60c5      	str	r5, [r0, #12]
 80101ea:	6925      	ldr	r5, [r4, #16]
 80101ec:	f107 0114 	add.w	r1, r7, #20
 80101f0:	f104 0914 	add.w	r9, r4, #20
 80101f4:	f100 0e14 	add.w	lr, r0, #20
 80101f8:	f107 0210 	add.w	r2, r7, #16
 80101fc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8010200:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8010204:	46f2      	mov	sl, lr
 8010206:	2700      	movs	r7, #0
 8010208:	f859 3b04 	ldr.w	r3, [r9], #4
 801020c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010210:	fa1f f883 	uxth.w	r8, r3
 8010214:	fa17 f78b 	uxtah	r7, r7, fp
 8010218:	0c1b      	lsrs	r3, r3, #16
 801021a:	eba7 0808 	sub.w	r8, r7, r8
 801021e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010222:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010226:	fa1f f888 	uxth.w	r8, r8
 801022a:	141f      	asrs	r7, r3, #16
 801022c:	454d      	cmp	r5, r9
 801022e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010232:	f84a 3b04 	str.w	r3, [sl], #4
 8010236:	d8e7      	bhi.n	8010208 <__mdiff+0x7c>
 8010238:	1b2b      	subs	r3, r5, r4
 801023a:	3b15      	subs	r3, #21
 801023c:	f023 0303 	bic.w	r3, r3, #3
 8010240:	3304      	adds	r3, #4
 8010242:	3415      	adds	r4, #21
 8010244:	42a5      	cmp	r5, r4
 8010246:	bf38      	it	cc
 8010248:	2304      	movcc	r3, #4
 801024a:	4419      	add	r1, r3
 801024c:	4473      	add	r3, lr
 801024e:	469e      	mov	lr, r3
 8010250:	460d      	mov	r5, r1
 8010252:	4565      	cmp	r5, ip
 8010254:	d30e      	bcc.n	8010274 <__mdiff+0xe8>
 8010256:	f10c 0203 	add.w	r2, ip, #3
 801025a:	1a52      	subs	r2, r2, r1
 801025c:	f022 0203 	bic.w	r2, r2, #3
 8010260:	3903      	subs	r1, #3
 8010262:	458c      	cmp	ip, r1
 8010264:	bf38      	it	cc
 8010266:	2200      	movcc	r2, #0
 8010268:	441a      	add	r2, r3
 801026a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801026e:	b17b      	cbz	r3, 8010290 <__mdiff+0x104>
 8010270:	6106      	str	r6, [r0, #16]
 8010272:	e7a5      	b.n	80101c0 <__mdiff+0x34>
 8010274:	f855 8b04 	ldr.w	r8, [r5], #4
 8010278:	fa17 f488 	uxtah	r4, r7, r8
 801027c:	1422      	asrs	r2, r4, #16
 801027e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8010282:	b2a4      	uxth	r4, r4
 8010284:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010288:	f84e 4b04 	str.w	r4, [lr], #4
 801028c:	1417      	asrs	r7, r2, #16
 801028e:	e7e0      	b.n	8010252 <__mdiff+0xc6>
 8010290:	3e01      	subs	r6, #1
 8010292:	e7ea      	b.n	801026a <__mdiff+0xde>
 8010294:	08010f73 	.word	0x08010f73
 8010298:	08011064 	.word	0x08011064

0801029c <__ulp>:
 801029c:	b082      	sub	sp, #8
 801029e:	ed8d 0b00 	vstr	d0, [sp]
 80102a2:	9b01      	ldr	r3, [sp, #4]
 80102a4:	4912      	ldr	r1, [pc, #72]	; (80102f0 <__ulp+0x54>)
 80102a6:	4019      	ands	r1, r3
 80102a8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80102ac:	2900      	cmp	r1, #0
 80102ae:	dd05      	ble.n	80102bc <__ulp+0x20>
 80102b0:	2200      	movs	r2, #0
 80102b2:	460b      	mov	r3, r1
 80102b4:	ec43 2b10 	vmov	d0, r2, r3
 80102b8:	b002      	add	sp, #8
 80102ba:	4770      	bx	lr
 80102bc:	4249      	negs	r1, r1
 80102be:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80102c2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80102c6:	f04f 0200 	mov.w	r2, #0
 80102ca:	f04f 0300 	mov.w	r3, #0
 80102ce:	da04      	bge.n	80102da <__ulp+0x3e>
 80102d0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80102d4:	fa41 f300 	asr.w	r3, r1, r0
 80102d8:	e7ec      	b.n	80102b4 <__ulp+0x18>
 80102da:	f1a0 0114 	sub.w	r1, r0, #20
 80102de:	291e      	cmp	r1, #30
 80102e0:	bfda      	itte	le
 80102e2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80102e6:	fa20 f101 	lsrle.w	r1, r0, r1
 80102ea:	2101      	movgt	r1, #1
 80102ec:	460a      	mov	r2, r1
 80102ee:	e7e1      	b.n	80102b4 <__ulp+0x18>
 80102f0:	7ff00000 	.word	0x7ff00000

080102f4 <__b2d>:
 80102f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102f6:	6905      	ldr	r5, [r0, #16]
 80102f8:	f100 0714 	add.w	r7, r0, #20
 80102fc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010300:	1f2e      	subs	r6, r5, #4
 8010302:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010306:	4620      	mov	r0, r4
 8010308:	f7ff fd52 	bl	800fdb0 <__hi0bits>
 801030c:	f1c0 0320 	rsb	r3, r0, #32
 8010310:	280a      	cmp	r0, #10
 8010312:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010390 <__b2d+0x9c>
 8010316:	600b      	str	r3, [r1, #0]
 8010318:	dc14      	bgt.n	8010344 <__b2d+0x50>
 801031a:	f1c0 0e0b 	rsb	lr, r0, #11
 801031e:	fa24 f10e 	lsr.w	r1, r4, lr
 8010322:	42b7      	cmp	r7, r6
 8010324:	ea41 030c 	orr.w	r3, r1, ip
 8010328:	bf34      	ite	cc
 801032a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801032e:	2100      	movcs	r1, #0
 8010330:	3015      	adds	r0, #21
 8010332:	fa04 f000 	lsl.w	r0, r4, r0
 8010336:	fa21 f10e 	lsr.w	r1, r1, lr
 801033a:	ea40 0201 	orr.w	r2, r0, r1
 801033e:	ec43 2b10 	vmov	d0, r2, r3
 8010342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010344:	42b7      	cmp	r7, r6
 8010346:	bf3a      	itte	cc
 8010348:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801034c:	f1a5 0608 	subcc.w	r6, r5, #8
 8010350:	2100      	movcs	r1, #0
 8010352:	380b      	subs	r0, #11
 8010354:	d017      	beq.n	8010386 <__b2d+0x92>
 8010356:	f1c0 0c20 	rsb	ip, r0, #32
 801035a:	fa04 f500 	lsl.w	r5, r4, r0
 801035e:	42be      	cmp	r6, r7
 8010360:	fa21 f40c 	lsr.w	r4, r1, ip
 8010364:	ea45 0504 	orr.w	r5, r5, r4
 8010368:	bf8c      	ite	hi
 801036a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801036e:	2400      	movls	r4, #0
 8010370:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010374:	fa01 f000 	lsl.w	r0, r1, r0
 8010378:	fa24 f40c 	lsr.w	r4, r4, ip
 801037c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010380:	ea40 0204 	orr.w	r2, r0, r4
 8010384:	e7db      	b.n	801033e <__b2d+0x4a>
 8010386:	ea44 030c 	orr.w	r3, r4, ip
 801038a:	460a      	mov	r2, r1
 801038c:	e7d7      	b.n	801033e <__b2d+0x4a>
 801038e:	bf00      	nop
 8010390:	3ff00000 	.word	0x3ff00000

08010394 <__d2b>:
 8010394:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010398:	4689      	mov	r9, r1
 801039a:	2101      	movs	r1, #1
 801039c:	ec57 6b10 	vmov	r6, r7, d0
 80103a0:	4690      	mov	r8, r2
 80103a2:	f7ff fc0f 	bl	800fbc4 <_Balloc>
 80103a6:	4604      	mov	r4, r0
 80103a8:	b930      	cbnz	r0, 80103b8 <__d2b+0x24>
 80103aa:	4602      	mov	r2, r0
 80103ac:	4b25      	ldr	r3, [pc, #148]	; (8010444 <__d2b+0xb0>)
 80103ae:	4826      	ldr	r0, [pc, #152]	; (8010448 <__d2b+0xb4>)
 80103b0:	f240 310a 	movw	r1, #778	; 0x30a
 80103b4:	f000 fbae 	bl	8010b14 <__assert_func>
 80103b8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80103bc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80103c0:	bb35      	cbnz	r5, 8010410 <__d2b+0x7c>
 80103c2:	2e00      	cmp	r6, #0
 80103c4:	9301      	str	r3, [sp, #4]
 80103c6:	d028      	beq.n	801041a <__d2b+0x86>
 80103c8:	4668      	mov	r0, sp
 80103ca:	9600      	str	r6, [sp, #0]
 80103cc:	f7ff fd10 	bl	800fdf0 <__lo0bits>
 80103d0:	9900      	ldr	r1, [sp, #0]
 80103d2:	b300      	cbz	r0, 8010416 <__d2b+0x82>
 80103d4:	9a01      	ldr	r2, [sp, #4]
 80103d6:	f1c0 0320 	rsb	r3, r0, #32
 80103da:	fa02 f303 	lsl.w	r3, r2, r3
 80103de:	430b      	orrs	r3, r1
 80103e0:	40c2      	lsrs	r2, r0
 80103e2:	6163      	str	r3, [r4, #20]
 80103e4:	9201      	str	r2, [sp, #4]
 80103e6:	9b01      	ldr	r3, [sp, #4]
 80103e8:	61a3      	str	r3, [r4, #24]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	bf14      	ite	ne
 80103ee:	2202      	movne	r2, #2
 80103f0:	2201      	moveq	r2, #1
 80103f2:	6122      	str	r2, [r4, #16]
 80103f4:	b1d5      	cbz	r5, 801042c <__d2b+0x98>
 80103f6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80103fa:	4405      	add	r5, r0
 80103fc:	f8c9 5000 	str.w	r5, [r9]
 8010400:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010404:	f8c8 0000 	str.w	r0, [r8]
 8010408:	4620      	mov	r0, r4
 801040a:	b003      	add	sp, #12
 801040c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010410:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010414:	e7d5      	b.n	80103c2 <__d2b+0x2e>
 8010416:	6161      	str	r1, [r4, #20]
 8010418:	e7e5      	b.n	80103e6 <__d2b+0x52>
 801041a:	a801      	add	r0, sp, #4
 801041c:	f7ff fce8 	bl	800fdf0 <__lo0bits>
 8010420:	9b01      	ldr	r3, [sp, #4]
 8010422:	6163      	str	r3, [r4, #20]
 8010424:	2201      	movs	r2, #1
 8010426:	6122      	str	r2, [r4, #16]
 8010428:	3020      	adds	r0, #32
 801042a:	e7e3      	b.n	80103f4 <__d2b+0x60>
 801042c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010430:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010434:	f8c9 0000 	str.w	r0, [r9]
 8010438:	6918      	ldr	r0, [r3, #16]
 801043a:	f7ff fcb9 	bl	800fdb0 <__hi0bits>
 801043e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010442:	e7df      	b.n	8010404 <__d2b+0x70>
 8010444:	08010f73 	.word	0x08010f73
 8010448:	08011064 	.word	0x08011064

0801044c <__ratio>:
 801044c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010450:	4688      	mov	r8, r1
 8010452:	4669      	mov	r1, sp
 8010454:	4681      	mov	r9, r0
 8010456:	f7ff ff4d 	bl	80102f4 <__b2d>
 801045a:	a901      	add	r1, sp, #4
 801045c:	4640      	mov	r0, r8
 801045e:	ec55 4b10 	vmov	r4, r5, d0
 8010462:	f7ff ff47 	bl	80102f4 <__b2d>
 8010466:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801046a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801046e:	eba3 0c02 	sub.w	ip, r3, r2
 8010472:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010476:	1a9b      	subs	r3, r3, r2
 8010478:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801047c:	ec51 0b10 	vmov	r0, r1, d0
 8010480:	2b00      	cmp	r3, #0
 8010482:	bfd6      	itet	le
 8010484:	460a      	movle	r2, r1
 8010486:	462a      	movgt	r2, r5
 8010488:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801048c:	468b      	mov	fp, r1
 801048e:	462f      	mov	r7, r5
 8010490:	bfd4      	ite	le
 8010492:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010496:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801049a:	4620      	mov	r0, r4
 801049c:	ee10 2a10 	vmov	r2, s0
 80104a0:	465b      	mov	r3, fp
 80104a2:	4639      	mov	r1, r7
 80104a4:	f7f0 f9e2 	bl	800086c <__aeabi_ddiv>
 80104a8:	ec41 0b10 	vmov	d0, r0, r1
 80104ac:	b003      	add	sp, #12
 80104ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080104b2 <__copybits>:
 80104b2:	3901      	subs	r1, #1
 80104b4:	b570      	push	{r4, r5, r6, lr}
 80104b6:	1149      	asrs	r1, r1, #5
 80104b8:	6914      	ldr	r4, [r2, #16]
 80104ba:	3101      	adds	r1, #1
 80104bc:	f102 0314 	add.w	r3, r2, #20
 80104c0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80104c4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80104c8:	1f05      	subs	r5, r0, #4
 80104ca:	42a3      	cmp	r3, r4
 80104cc:	d30c      	bcc.n	80104e8 <__copybits+0x36>
 80104ce:	1aa3      	subs	r3, r4, r2
 80104d0:	3b11      	subs	r3, #17
 80104d2:	f023 0303 	bic.w	r3, r3, #3
 80104d6:	3211      	adds	r2, #17
 80104d8:	42a2      	cmp	r2, r4
 80104da:	bf88      	it	hi
 80104dc:	2300      	movhi	r3, #0
 80104de:	4418      	add	r0, r3
 80104e0:	2300      	movs	r3, #0
 80104e2:	4288      	cmp	r0, r1
 80104e4:	d305      	bcc.n	80104f2 <__copybits+0x40>
 80104e6:	bd70      	pop	{r4, r5, r6, pc}
 80104e8:	f853 6b04 	ldr.w	r6, [r3], #4
 80104ec:	f845 6f04 	str.w	r6, [r5, #4]!
 80104f0:	e7eb      	b.n	80104ca <__copybits+0x18>
 80104f2:	f840 3b04 	str.w	r3, [r0], #4
 80104f6:	e7f4      	b.n	80104e2 <__copybits+0x30>

080104f8 <__any_on>:
 80104f8:	f100 0214 	add.w	r2, r0, #20
 80104fc:	6900      	ldr	r0, [r0, #16]
 80104fe:	114b      	asrs	r3, r1, #5
 8010500:	4298      	cmp	r0, r3
 8010502:	b510      	push	{r4, lr}
 8010504:	db11      	blt.n	801052a <__any_on+0x32>
 8010506:	dd0a      	ble.n	801051e <__any_on+0x26>
 8010508:	f011 011f 	ands.w	r1, r1, #31
 801050c:	d007      	beq.n	801051e <__any_on+0x26>
 801050e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010512:	fa24 f001 	lsr.w	r0, r4, r1
 8010516:	fa00 f101 	lsl.w	r1, r0, r1
 801051a:	428c      	cmp	r4, r1
 801051c:	d10b      	bne.n	8010536 <__any_on+0x3e>
 801051e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010522:	4293      	cmp	r3, r2
 8010524:	d803      	bhi.n	801052e <__any_on+0x36>
 8010526:	2000      	movs	r0, #0
 8010528:	bd10      	pop	{r4, pc}
 801052a:	4603      	mov	r3, r0
 801052c:	e7f7      	b.n	801051e <__any_on+0x26>
 801052e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010532:	2900      	cmp	r1, #0
 8010534:	d0f5      	beq.n	8010522 <__any_on+0x2a>
 8010536:	2001      	movs	r0, #1
 8010538:	e7f6      	b.n	8010528 <__any_on+0x30>

0801053a <_calloc_r>:
 801053a:	b513      	push	{r0, r1, r4, lr}
 801053c:	434a      	muls	r2, r1
 801053e:	4611      	mov	r1, r2
 8010540:	9201      	str	r2, [sp, #4]
 8010542:	f7fc f811 	bl	800c568 <_malloc_r>
 8010546:	4604      	mov	r4, r0
 8010548:	b118      	cbz	r0, 8010552 <_calloc_r+0x18>
 801054a:	9a01      	ldr	r2, [sp, #4]
 801054c:	2100      	movs	r1, #0
 801054e:	f7fb ffb3 	bl	800c4b8 <memset>
 8010552:	4620      	mov	r0, r4
 8010554:	b002      	add	sp, #8
 8010556:	bd10      	pop	{r4, pc}

08010558 <__ssputs_r>:
 8010558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801055c:	688e      	ldr	r6, [r1, #8]
 801055e:	429e      	cmp	r6, r3
 8010560:	4682      	mov	sl, r0
 8010562:	460c      	mov	r4, r1
 8010564:	4690      	mov	r8, r2
 8010566:	461f      	mov	r7, r3
 8010568:	d838      	bhi.n	80105dc <__ssputs_r+0x84>
 801056a:	898a      	ldrh	r2, [r1, #12]
 801056c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010570:	d032      	beq.n	80105d8 <__ssputs_r+0x80>
 8010572:	6825      	ldr	r5, [r4, #0]
 8010574:	6909      	ldr	r1, [r1, #16]
 8010576:	eba5 0901 	sub.w	r9, r5, r1
 801057a:	6965      	ldr	r5, [r4, #20]
 801057c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010580:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010584:	3301      	adds	r3, #1
 8010586:	444b      	add	r3, r9
 8010588:	106d      	asrs	r5, r5, #1
 801058a:	429d      	cmp	r5, r3
 801058c:	bf38      	it	cc
 801058e:	461d      	movcc	r5, r3
 8010590:	0553      	lsls	r3, r2, #21
 8010592:	d531      	bpl.n	80105f8 <__ssputs_r+0xa0>
 8010594:	4629      	mov	r1, r5
 8010596:	f7fb ffe7 	bl	800c568 <_malloc_r>
 801059a:	4606      	mov	r6, r0
 801059c:	b950      	cbnz	r0, 80105b4 <__ssputs_r+0x5c>
 801059e:	230c      	movs	r3, #12
 80105a0:	f8ca 3000 	str.w	r3, [sl]
 80105a4:	89a3      	ldrh	r3, [r4, #12]
 80105a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105aa:	81a3      	strh	r3, [r4, #12]
 80105ac:	f04f 30ff 	mov.w	r0, #4294967295
 80105b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105b4:	6921      	ldr	r1, [r4, #16]
 80105b6:	464a      	mov	r2, r9
 80105b8:	f7fb ff70 	bl	800c49c <memcpy>
 80105bc:	89a3      	ldrh	r3, [r4, #12]
 80105be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80105c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105c6:	81a3      	strh	r3, [r4, #12]
 80105c8:	6126      	str	r6, [r4, #16]
 80105ca:	6165      	str	r5, [r4, #20]
 80105cc:	444e      	add	r6, r9
 80105ce:	eba5 0509 	sub.w	r5, r5, r9
 80105d2:	6026      	str	r6, [r4, #0]
 80105d4:	60a5      	str	r5, [r4, #8]
 80105d6:	463e      	mov	r6, r7
 80105d8:	42be      	cmp	r6, r7
 80105da:	d900      	bls.n	80105de <__ssputs_r+0x86>
 80105dc:	463e      	mov	r6, r7
 80105de:	4632      	mov	r2, r6
 80105e0:	6820      	ldr	r0, [r4, #0]
 80105e2:	4641      	mov	r1, r8
 80105e4:	f000 fae8 	bl	8010bb8 <memmove>
 80105e8:	68a3      	ldr	r3, [r4, #8]
 80105ea:	6822      	ldr	r2, [r4, #0]
 80105ec:	1b9b      	subs	r3, r3, r6
 80105ee:	4432      	add	r2, r6
 80105f0:	60a3      	str	r3, [r4, #8]
 80105f2:	6022      	str	r2, [r4, #0]
 80105f4:	2000      	movs	r0, #0
 80105f6:	e7db      	b.n	80105b0 <__ssputs_r+0x58>
 80105f8:	462a      	mov	r2, r5
 80105fa:	f000 faf7 	bl	8010bec <_realloc_r>
 80105fe:	4606      	mov	r6, r0
 8010600:	2800      	cmp	r0, #0
 8010602:	d1e1      	bne.n	80105c8 <__ssputs_r+0x70>
 8010604:	6921      	ldr	r1, [r4, #16]
 8010606:	4650      	mov	r0, sl
 8010608:	f7fb ff5e 	bl	800c4c8 <_free_r>
 801060c:	e7c7      	b.n	801059e <__ssputs_r+0x46>
	...

08010610 <_svfiprintf_r>:
 8010610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010614:	4698      	mov	r8, r3
 8010616:	898b      	ldrh	r3, [r1, #12]
 8010618:	061b      	lsls	r3, r3, #24
 801061a:	b09d      	sub	sp, #116	; 0x74
 801061c:	4607      	mov	r7, r0
 801061e:	460d      	mov	r5, r1
 8010620:	4614      	mov	r4, r2
 8010622:	d50e      	bpl.n	8010642 <_svfiprintf_r+0x32>
 8010624:	690b      	ldr	r3, [r1, #16]
 8010626:	b963      	cbnz	r3, 8010642 <_svfiprintf_r+0x32>
 8010628:	2140      	movs	r1, #64	; 0x40
 801062a:	f7fb ff9d 	bl	800c568 <_malloc_r>
 801062e:	6028      	str	r0, [r5, #0]
 8010630:	6128      	str	r0, [r5, #16]
 8010632:	b920      	cbnz	r0, 801063e <_svfiprintf_r+0x2e>
 8010634:	230c      	movs	r3, #12
 8010636:	603b      	str	r3, [r7, #0]
 8010638:	f04f 30ff 	mov.w	r0, #4294967295
 801063c:	e0d1      	b.n	80107e2 <_svfiprintf_r+0x1d2>
 801063e:	2340      	movs	r3, #64	; 0x40
 8010640:	616b      	str	r3, [r5, #20]
 8010642:	2300      	movs	r3, #0
 8010644:	9309      	str	r3, [sp, #36]	; 0x24
 8010646:	2320      	movs	r3, #32
 8010648:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801064c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010650:	2330      	movs	r3, #48	; 0x30
 8010652:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80107fc <_svfiprintf_r+0x1ec>
 8010656:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801065a:	f04f 0901 	mov.w	r9, #1
 801065e:	4623      	mov	r3, r4
 8010660:	469a      	mov	sl, r3
 8010662:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010666:	b10a      	cbz	r2, 801066c <_svfiprintf_r+0x5c>
 8010668:	2a25      	cmp	r2, #37	; 0x25
 801066a:	d1f9      	bne.n	8010660 <_svfiprintf_r+0x50>
 801066c:	ebba 0b04 	subs.w	fp, sl, r4
 8010670:	d00b      	beq.n	801068a <_svfiprintf_r+0x7a>
 8010672:	465b      	mov	r3, fp
 8010674:	4622      	mov	r2, r4
 8010676:	4629      	mov	r1, r5
 8010678:	4638      	mov	r0, r7
 801067a:	f7ff ff6d 	bl	8010558 <__ssputs_r>
 801067e:	3001      	adds	r0, #1
 8010680:	f000 80aa 	beq.w	80107d8 <_svfiprintf_r+0x1c8>
 8010684:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010686:	445a      	add	r2, fp
 8010688:	9209      	str	r2, [sp, #36]	; 0x24
 801068a:	f89a 3000 	ldrb.w	r3, [sl]
 801068e:	2b00      	cmp	r3, #0
 8010690:	f000 80a2 	beq.w	80107d8 <_svfiprintf_r+0x1c8>
 8010694:	2300      	movs	r3, #0
 8010696:	f04f 32ff 	mov.w	r2, #4294967295
 801069a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801069e:	f10a 0a01 	add.w	sl, sl, #1
 80106a2:	9304      	str	r3, [sp, #16]
 80106a4:	9307      	str	r3, [sp, #28]
 80106a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80106aa:	931a      	str	r3, [sp, #104]	; 0x68
 80106ac:	4654      	mov	r4, sl
 80106ae:	2205      	movs	r2, #5
 80106b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106b4:	4851      	ldr	r0, [pc, #324]	; (80107fc <_svfiprintf_r+0x1ec>)
 80106b6:	f7ef fda3 	bl	8000200 <memchr>
 80106ba:	9a04      	ldr	r2, [sp, #16]
 80106bc:	b9d8      	cbnz	r0, 80106f6 <_svfiprintf_r+0xe6>
 80106be:	06d0      	lsls	r0, r2, #27
 80106c0:	bf44      	itt	mi
 80106c2:	2320      	movmi	r3, #32
 80106c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80106c8:	0711      	lsls	r1, r2, #28
 80106ca:	bf44      	itt	mi
 80106cc:	232b      	movmi	r3, #43	; 0x2b
 80106ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80106d2:	f89a 3000 	ldrb.w	r3, [sl]
 80106d6:	2b2a      	cmp	r3, #42	; 0x2a
 80106d8:	d015      	beq.n	8010706 <_svfiprintf_r+0xf6>
 80106da:	9a07      	ldr	r2, [sp, #28]
 80106dc:	4654      	mov	r4, sl
 80106de:	2000      	movs	r0, #0
 80106e0:	f04f 0c0a 	mov.w	ip, #10
 80106e4:	4621      	mov	r1, r4
 80106e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80106ea:	3b30      	subs	r3, #48	; 0x30
 80106ec:	2b09      	cmp	r3, #9
 80106ee:	d94e      	bls.n	801078e <_svfiprintf_r+0x17e>
 80106f0:	b1b0      	cbz	r0, 8010720 <_svfiprintf_r+0x110>
 80106f2:	9207      	str	r2, [sp, #28]
 80106f4:	e014      	b.n	8010720 <_svfiprintf_r+0x110>
 80106f6:	eba0 0308 	sub.w	r3, r0, r8
 80106fa:	fa09 f303 	lsl.w	r3, r9, r3
 80106fe:	4313      	orrs	r3, r2
 8010700:	9304      	str	r3, [sp, #16]
 8010702:	46a2      	mov	sl, r4
 8010704:	e7d2      	b.n	80106ac <_svfiprintf_r+0x9c>
 8010706:	9b03      	ldr	r3, [sp, #12]
 8010708:	1d19      	adds	r1, r3, #4
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	9103      	str	r1, [sp, #12]
 801070e:	2b00      	cmp	r3, #0
 8010710:	bfbb      	ittet	lt
 8010712:	425b      	neglt	r3, r3
 8010714:	f042 0202 	orrlt.w	r2, r2, #2
 8010718:	9307      	strge	r3, [sp, #28]
 801071a:	9307      	strlt	r3, [sp, #28]
 801071c:	bfb8      	it	lt
 801071e:	9204      	strlt	r2, [sp, #16]
 8010720:	7823      	ldrb	r3, [r4, #0]
 8010722:	2b2e      	cmp	r3, #46	; 0x2e
 8010724:	d10c      	bne.n	8010740 <_svfiprintf_r+0x130>
 8010726:	7863      	ldrb	r3, [r4, #1]
 8010728:	2b2a      	cmp	r3, #42	; 0x2a
 801072a:	d135      	bne.n	8010798 <_svfiprintf_r+0x188>
 801072c:	9b03      	ldr	r3, [sp, #12]
 801072e:	1d1a      	adds	r2, r3, #4
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	9203      	str	r2, [sp, #12]
 8010734:	2b00      	cmp	r3, #0
 8010736:	bfb8      	it	lt
 8010738:	f04f 33ff 	movlt.w	r3, #4294967295
 801073c:	3402      	adds	r4, #2
 801073e:	9305      	str	r3, [sp, #20]
 8010740:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801080c <_svfiprintf_r+0x1fc>
 8010744:	7821      	ldrb	r1, [r4, #0]
 8010746:	2203      	movs	r2, #3
 8010748:	4650      	mov	r0, sl
 801074a:	f7ef fd59 	bl	8000200 <memchr>
 801074e:	b140      	cbz	r0, 8010762 <_svfiprintf_r+0x152>
 8010750:	2340      	movs	r3, #64	; 0x40
 8010752:	eba0 000a 	sub.w	r0, r0, sl
 8010756:	fa03 f000 	lsl.w	r0, r3, r0
 801075a:	9b04      	ldr	r3, [sp, #16]
 801075c:	4303      	orrs	r3, r0
 801075e:	3401      	adds	r4, #1
 8010760:	9304      	str	r3, [sp, #16]
 8010762:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010766:	4826      	ldr	r0, [pc, #152]	; (8010800 <_svfiprintf_r+0x1f0>)
 8010768:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801076c:	2206      	movs	r2, #6
 801076e:	f7ef fd47 	bl	8000200 <memchr>
 8010772:	2800      	cmp	r0, #0
 8010774:	d038      	beq.n	80107e8 <_svfiprintf_r+0x1d8>
 8010776:	4b23      	ldr	r3, [pc, #140]	; (8010804 <_svfiprintf_r+0x1f4>)
 8010778:	bb1b      	cbnz	r3, 80107c2 <_svfiprintf_r+0x1b2>
 801077a:	9b03      	ldr	r3, [sp, #12]
 801077c:	3307      	adds	r3, #7
 801077e:	f023 0307 	bic.w	r3, r3, #7
 8010782:	3308      	adds	r3, #8
 8010784:	9303      	str	r3, [sp, #12]
 8010786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010788:	4433      	add	r3, r6
 801078a:	9309      	str	r3, [sp, #36]	; 0x24
 801078c:	e767      	b.n	801065e <_svfiprintf_r+0x4e>
 801078e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010792:	460c      	mov	r4, r1
 8010794:	2001      	movs	r0, #1
 8010796:	e7a5      	b.n	80106e4 <_svfiprintf_r+0xd4>
 8010798:	2300      	movs	r3, #0
 801079a:	3401      	adds	r4, #1
 801079c:	9305      	str	r3, [sp, #20]
 801079e:	4619      	mov	r1, r3
 80107a0:	f04f 0c0a 	mov.w	ip, #10
 80107a4:	4620      	mov	r0, r4
 80107a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80107aa:	3a30      	subs	r2, #48	; 0x30
 80107ac:	2a09      	cmp	r2, #9
 80107ae:	d903      	bls.n	80107b8 <_svfiprintf_r+0x1a8>
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d0c5      	beq.n	8010740 <_svfiprintf_r+0x130>
 80107b4:	9105      	str	r1, [sp, #20]
 80107b6:	e7c3      	b.n	8010740 <_svfiprintf_r+0x130>
 80107b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80107bc:	4604      	mov	r4, r0
 80107be:	2301      	movs	r3, #1
 80107c0:	e7f0      	b.n	80107a4 <_svfiprintf_r+0x194>
 80107c2:	ab03      	add	r3, sp, #12
 80107c4:	9300      	str	r3, [sp, #0]
 80107c6:	462a      	mov	r2, r5
 80107c8:	4b0f      	ldr	r3, [pc, #60]	; (8010808 <_svfiprintf_r+0x1f8>)
 80107ca:	a904      	add	r1, sp, #16
 80107cc:	4638      	mov	r0, r7
 80107ce:	f7fb ffc5 	bl	800c75c <_printf_float>
 80107d2:	1c42      	adds	r2, r0, #1
 80107d4:	4606      	mov	r6, r0
 80107d6:	d1d6      	bne.n	8010786 <_svfiprintf_r+0x176>
 80107d8:	89ab      	ldrh	r3, [r5, #12]
 80107da:	065b      	lsls	r3, r3, #25
 80107dc:	f53f af2c 	bmi.w	8010638 <_svfiprintf_r+0x28>
 80107e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80107e2:	b01d      	add	sp, #116	; 0x74
 80107e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107e8:	ab03      	add	r3, sp, #12
 80107ea:	9300      	str	r3, [sp, #0]
 80107ec:	462a      	mov	r2, r5
 80107ee:	4b06      	ldr	r3, [pc, #24]	; (8010808 <_svfiprintf_r+0x1f8>)
 80107f0:	a904      	add	r1, sp, #16
 80107f2:	4638      	mov	r0, r7
 80107f4:	f7fc fa56 	bl	800cca4 <_printf_i>
 80107f8:	e7eb      	b.n	80107d2 <_svfiprintf_r+0x1c2>
 80107fa:	bf00      	nop
 80107fc:	080111c4 	.word	0x080111c4
 8010800:	080111ce 	.word	0x080111ce
 8010804:	0800c75d 	.word	0x0800c75d
 8010808:	08010559 	.word	0x08010559
 801080c:	080111ca 	.word	0x080111ca

08010810 <__sfputc_r>:
 8010810:	6893      	ldr	r3, [r2, #8]
 8010812:	3b01      	subs	r3, #1
 8010814:	2b00      	cmp	r3, #0
 8010816:	b410      	push	{r4}
 8010818:	6093      	str	r3, [r2, #8]
 801081a:	da08      	bge.n	801082e <__sfputc_r+0x1e>
 801081c:	6994      	ldr	r4, [r2, #24]
 801081e:	42a3      	cmp	r3, r4
 8010820:	db01      	blt.n	8010826 <__sfputc_r+0x16>
 8010822:	290a      	cmp	r1, #10
 8010824:	d103      	bne.n	801082e <__sfputc_r+0x1e>
 8010826:	f85d 4b04 	ldr.w	r4, [sp], #4
 801082a:	f7fd bcaf 	b.w	800e18c <__swbuf_r>
 801082e:	6813      	ldr	r3, [r2, #0]
 8010830:	1c58      	adds	r0, r3, #1
 8010832:	6010      	str	r0, [r2, #0]
 8010834:	7019      	strb	r1, [r3, #0]
 8010836:	4608      	mov	r0, r1
 8010838:	f85d 4b04 	ldr.w	r4, [sp], #4
 801083c:	4770      	bx	lr

0801083e <__sfputs_r>:
 801083e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010840:	4606      	mov	r6, r0
 8010842:	460f      	mov	r7, r1
 8010844:	4614      	mov	r4, r2
 8010846:	18d5      	adds	r5, r2, r3
 8010848:	42ac      	cmp	r4, r5
 801084a:	d101      	bne.n	8010850 <__sfputs_r+0x12>
 801084c:	2000      	movs	r0, #0
 801084e:	e007      	b.n	8010860 <__sfputs_r+0x22>
 8010850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010854:	463a      	mov	r2, r7
 8010856:	4630      	mov	r0, r6
 8010858:	f7ff ffda 	bl	8010810 <__sfputc_r>
 801085c:	1c43      	adds	r3, r0, #1
 801085e:	d1f3      	bne.n	8010848 <__sfputs_r+0xa>
 8010860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010864 <_vfiprintf_r>:
 8010864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010868:	460d      	mov	r5, r1
 801086a:	b09d      	sub	sp, #116	; 0x74
 801086c:	4614      	mov	r4, r2
 801086e:	4698      	mov	r8, r3
 8010870:	4606      	mov	r6, r0
 8010872:	b118      	cbz	r0, 801087c <_vfiprintf_r+0x18>
 8010874:	6983      	ldr	r3, [r0, #24]
 8010876:	b90b      	cbnz	r3, 801087c <_vfiprintf_r+0x18>
 8010878:	f7fe fcfc 	bl	800f274 <__sinit>
 801087c:	4b89      	ldr	r3, [pc, #548]	; (8010aa4 <_vfiprintf_r+0x240>)
 801087e:	429d      	cmp	r5, r3
 8010880:	d11b      	bne.n	80108ba <_vfiprintf_r+0x56>
 8010882:	6875      	ldr	r5, [r6, #4]
 8010884:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010886:	07d9      	lsls	r1, r3, #31
 8010888:	d405      	bmi.n	8010896 <_vfiprintf_r+0x32>
 801088a:	89ab      	ldrh	r3, [r5, #12]
 801088c:	059a      	lsls	r2, r3, #22
 801088e:	d402      	bmi.n	8010896 <_vfiprintf_r+0x32>
 8010890:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010892:	f7ff f900 	bl	800fa96 <__retarget_lock_acquire_recursive>
 8010896:	89ab      	ldrh	r3, [r5, #12]
 8010898:	071b      	lsls	r3, r3, #28
 801089a:	d501      	bpl.n	80108a0 <_vfiprintf_r+0x3c>
 801089c:	692b      	ldr	r3, [r5, #16]
 801089e:	b9eb      	cbnz	r3, 80108dc <_vfiprintf_r+0x78>
 80108a0:	4629      	mov	r1, r5
 80108a2:	4630      	mov	r0, r6
 80108a4:	f7fd fcd6 	bl	800e254 <__swsetup_r>
 80108a8:	b1c0      	cbz	r0, 80108dc <_vfiprintf_r+0x78>
 80108aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80108ac:	07dc      	lsls	r4, r3, #31
 80108ae:	d50e      	bpl.n	80108ce <_vfiprintf_r+0x6a>
 80108b0:	f04f 30ff 	mov.w	r0, #4294967295
 80108b4:	b01d      	add	sp, #116	; 0x74
 80108b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108ba:	4b7b      	ldr	r3, [pc, #492]	; (8010aa8 <_vfiprintf_r+0x244>)
 80108bc:	429d      	cmp	r5, r3
 80108be:	d101      	bne.n	80108c4 <_vfiprintf_r+0x60>
 80108c0:	68b5      	ldr	r5, [r6, #8]
 80108c2:	e7df      	b.n	8010884 <_vfiprintf_r+0x20>
 80108c4:	4b79      	ldr	r3, [pc, #484]	; (8010aac <_vfiprintf_r+0x248>)
 80108c6:	429d      	cmp	r5, r3
 80108c8:	bf08      	it	eq
 80108ca:	68f5      	ldreq	r5, [r6, #12]
 80108cc:	e7da      	b.n	8010884 <_vfiprintf_r+0x20>
 80108ce:	89ab      	ldrh	r3, [r5, #12]
 80108d0:	0598      	lsls	r0, r3, #22
 80108d2:	d4ed      	bmi.n	80108b0 <_vfiprintf_r+0x4c>
 80108d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80108d6:	f7ff f8df 	bl	800fa98 <__retarget_lock_release_recursive>
 80108da:	e7e9      	b.n	80108b0 <_vfiprintf_r+0x4c>
 80108dc:	2300      	movs	r3, #0
 80108de:	9309      	str	r3, [sp, #36]	; 0x24
 80108e0:	2320      	movs	r3, #32
 80108e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80108e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80108ea:	2330      	movs	r3, #48	; 0x30
 80108ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010ab0 <_vfiprintf_r+0x24c>
 80108f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80108f4:	f04f 0901 	mov.w	r9, #1
 80108f8:	4623      	mov	r3, r4
 80108fa:	469a      	mov	sl, r3
 80108fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010900:	b10a      	cbz	r2, 8010906 <_vfiprintf_r+0xa2>
 8010902:	2a25      	cmp	r2, #37	; 0x25
 8010904:	d1f9      	bne.n	80108fa <_vfiprintf_r+0x96>
 8010906:	ebba 0b04 	subs.w	fp, sl, r4
 801090a:	d00b      	beq.n	8010924 <_vfiprintf_r+0xc0>
 801090c:	465b      	mov	r3, fp
 801090e:	4622      	mov	r2, r4
 8010910:	4629      	mov	r1, r5
 8010912:	4630      	mov	r0, r6
 8010914:	f7ff ff93 	bl	801083e <__sfputs_r>
 8010918:	3001      	adds	r0, #1
 801091a:	f000 80aa 	beq.w	8010a72 <_vfiprintf_r+0x20e>
 801091e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010920:	445a      	add	r2, fp
 8010922:	9209      	str	r2, [sp, #36]	; 0x24
 8010924:	f89a 3000 	ldrb.w	r3, [sl]
 8010928:	2b00      	cmp	r3, #0
 801092a:	f000 80a2 	beq.w	8010a72 <_vfiprintf_r+0x20e>
 801092e:	2300      	movs	r3, #0
 8010930:	f04f 32ff 	mov.w	r2, #4294967295
 8010934:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010938:	f10a 0a01 	add.w	sl, sl, #1
 801093c:	9304      	str	r3, [sp, #16]
 801093e:	9307      	str	r3, [sp, #28]
 8010940:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010944:	931a      	str	r3, [sp, #104]	; 0x68
 8010946:	4654      	mov	r4, sl
 8010948:	2205      	movs	r2, #5
 801094a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801094e:	4858      	ldr	r0, [pc, #352]	; (8010ab0 <_vfiprintf_r+0x24c>)
 8010950:	f7ef fc56 	bl	8000200 <memchr>
 8010954:	9a04      	ldr	r2, [sp, #16]
 8010956:	b9d8      	cbnz	r0, 8010990 <_vfiprintf_r+0x12c>
 8010958:	06d1      	lsls	r1, r2, #27
 801095a:	bf44      	itt	mi
 801095c:	2320      	movmi	r3, #32
 801095e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010962:	0713      	lsls	r3, r2, #28
 8010964:	bf44      	itt	mi
 8010966:	232b      	movmi	r3, #43	; 0x2b
 8010968:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801096c:	f89a 3000 	ldrb.w	r3, [sl]
 8010970:	2b2a      	cmp	r3, #42	; 0x2a
 8010972:	d015      	beq.n	80109a0 <_vfiprintf_r+0x13c>
 8010974:	9a07      	ldr	r2, [sp, #28]
 8010976:	4654      	mov	r4, sl
 8010978:	2000      	movs	r0, #0
 801097a:	f04f 0c0a 	mov.w	ip, #10
 801097e:	4621      	mov	r1, r4
 8010980:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010984:	3b30      	subs	r3, #48	; 0x30
 8010986:	2b09      	cmp	r3, #9
 8010988:	d94e      	bls.n	8010a28 <_vfiprintf_r+0x1c4>
 801098a:	b1b0      	cbz	r0, 80109ba <_vfiprintf_r+0x156>
 801098c:	9207      	str	r2, [sp, #28]
 801098e:	e014      	b.n	80109ba <_vfiprintf_r+0x156>
 8010990:	eba0 0308 	sub.w	r3, r0, r8
 8010994:	fa09 f303 	lsl.w	r3, r9, r3
 8010998:	4313      	orrs	r3, r2
 801099a:	9304      	str	r3, [sp, #16]
 801099c:	46a2      	mov	sl, r4
 801099e:	e7d2      	b.n	8010946 <_vfiprintf_r+0xe2>
 80109a0:	9b03      	ldr	r3, [sp, #12]
 80109a2:	1d19      	adds	r1, r3, #4
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	9103      	str	r1, [sp, #12]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	bfbb      	ittet	lt
 80109ac:	425b      	neglt	r3, r3
 80109ae:	f042 0202 	orrlt.w	r2, r2, #2
 80109b2:	9307      	strge	r3, [sp, #28]
 80109b4:	9307      	strlt	r3, [sp, #28]
 80109b6:	bfb8      	it	lt
 80109b8:	9204      	strlt	r2, [sp, #16]
 80109ba:	7823      	ldrb	r3, [r4, #0]
 80109bc:	2b2e      	cmp	r3, #46	; 0x2e
 80109be:	d10c      	bne.n	80109da <_vfiprintf_r+0x176>
 80109c0:	7863      	ldrb	r3, [r4, #1]
 80109c2:	2b2a      	cmp	r3, #42	; 0x2a
 80109c4:	d135      	bne.n	8010a32 <_vfiprintf_r+0x1ce>
 80109c6:	9b03      	ldr	r3, [sp, #12]
 80109c8:	1d1a      	adds	r2, r3, #4
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	9203      	str	r2, [sp, #12]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	bfb8      	it	lt
 80109d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80109d6:	3402      	adds	r4, #2
 80109d8:	9305      	str	r3, [sp, #20]
 80109da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010ac0 <_vfiprintf_r+0x25c>
 80109de:	7821      	ldrb	r1, [r4, #0]
 80109e0:	2203      	movs	r2, #3
 80109e2:	4650      	mov	r0, sl
 80109e4:	f7ef fc0c 	bl	8000200 <memchr>
 80109e8:	b140      	cbz	r0, 80109fc <_vfiprintf_r+0x198>
 80109ea:	2340      	movs	r3, #64	; 0x40
 80109ec:	eba0 000a 	sub.w	r0, r0, sl
 80109f0:	fa03 f000 	lsl.w	r0, r3, r0
 80109f4:	9b04      	ldr	r3, [sp, #16]
 80109f6:	4303      	orrs	r3, r0
 80109f8:	3401      	adds	r4, #1
 80109fa:	9304      	str	r3, [sp, #16]
 80109fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a00:	482c      	ldr	r0, [pc, #176]	; (8010ab4 <_vfiprintf_r+0x250>)
 8010a02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010a06:	2206      	movs	r2, #6
 8010a08:	f7ef fbfa 	bl	8000200 <memchr>
 8010a0c:	2800      	cmp	r0, #0
 8010a0e:	d03f      	beq.n	8010a90 <_vfiprintf_r+0x22c>
 8010a10:	4b29      	ldr	r3, [pc, #164]	; (8010ab8 <_vfiprintf_r+0x254>)
 8010a12:	bb1b      	cbnz	r3, 8010a5c <_vfiprintf_r+0x1f8>
 8010a14:	9b03      	ldr	r3, [sp, #12]
 8010a16:	3307      	adds	r3, #7
 8010a18:	f023 0307 	bic.w	r3, r3, #7
 8010a1c:	3308      	adds	r3, #8
 8010a1e:	9303      	str	r3, [sp, #12]
 8010a20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a22:	443b      	add	r3, r7
 8010a24:	9309      	str	r3, [sp, #36]	; 0x24
 8010a26:	e767      	b.n	80108f8 <_vfiprintf_r+0x94>
 8010a28:	fb0c 3202 	mla	r2, ip, r2, r3
 8010a2c:	460c      	mov	r4, r1
 8010a2e:	2001      	movs	r0, #1
 8010a30:	e7a5      	b.n	801097e <_vfiprintf_r+0x11a>
 8010a32:	2300      	movs	r3, #0
 8010a34:	3401      	adds	r4, #1
 8010a36:	9305      	str	r3, [sp, #20]
 8010a38:	4619      	mov	r1, r3
 8010a3a:	f04f 0c0a 	mov.w	ip, #10
 8010a3e:	4620      	mov	r0, r4
 8010a40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010a44:	3a30      	subs	r2, #48	; 0x30
 8010a46:	2a09      	cmp	r2, #9
 8010a48:	d903      	bls.n	8010a52 <_vfiprintf_r+0x1ee>
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d0c5      	beq.n	80109da <_vfiprintf_r+0x176>
 8010a4e:	9105      	str	r1, [sp, #20]
 8010a50:	e7c3      	b.n	80109da <_vfiprintf_r+0x176>
 8010a52:	fb0c 2101 	mla	r1, ip, r1, r2
 8010a56:	4604      	mov	r4, r0
 8010a58:	2301      	movs	r3, #1
 8010a5a:	e7f0      	b.n	8010a3e <_vfiprintf_r+0x1da>
 8010a5c:	ab03      	add	r3, sp, #12
 8010a5e:	9300      	str	r3, [sp, #0]
 8010a60:	462a      	mov	r2, r5
 8010a62:	4b16      	ldr	r3, [pc, #88]	; (8010abc <_vfiprintf_r+0x258>)
 8010a64:	a904      	add	r1, sp, #16
 8010a66:	4630      	mov	r0, r6
 8010a68:	f7fb fe78 	bl	800c75c <_printf_float>
 8010a6c:	4607      	mov	r7, r0
 8010a6e:	1c78      	adds	r0, r7, #1
 8010a70:	d1d6      	bne.n	8010a20 <_vfiprintf_r+0x1bc>
 8010a72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010a74:	07d9      	lsls	r1, r3, #31
 8010a76:	d405      	bmi.n	8010a84 <_vfiprintf_r+0x220>
 8010a78:	89ab      	ldrh	r3, [r5, #12]
 8010a7a:	059a      	lsls	r2, r3, #22
 8010a7c:	d402      	bmi.n	8010a84 <_vfiprintf_r+0x220>
 8010a7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010a80:	f7ff f80a 	bl	800fa98 <__retarget_lock_release_recursive>
 8010a84:	89ab      	ldrh	r3, [r5, #12]
 8010a86:	065b      	lsls	r3, r3, #25
 8010a88:	f53f af12 	bmi.w	80108b0 <_vfiprintf_r+0x4c>
 8010a8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010a8e:	e711      	b.n	80108b4 <_vfiprintf_r+0x50>
 8010a90:	ab03      	add	r3, sp, #12
 8010a92:	9300      	str	r3, [sp, #0]
 8010a94:	462a      	mov	r2, r5
 8010a96:	4b09      	ldr	r3, [pc, #36]	; (8010abc <_vfiprintf_r+0x258>)
 8010a98:	a904      	add	r1, sp, #16
 8010a9a:	4630      	mov	r0, r6
 8010a9c:	f7fc f902 	bl	800cca4 <_printf_i>
 8010aa0:	e7e4      	b.n	8010a6c <_vfiprintf_r+0x208>
 8010aa2:	bf00      	nop
 8010aa4:	08010fa4 	.word	0x08010fa4
 8010aa8:	08010fc4 	.word	0x08010fc4
 8010aac:	08010f84 	.word	0x08010f84
 8010ab0:	080111c4 	.word	0x080111c4
 8010ab4:	080111ce 	.word	0x080111ce
 8010ab8:	0800c75d 	.word	0x0800c75d
 8010abc:	0801083f 	.word	0x0801083f
 8010ac0:	080111ca 	.word	0x080111ca

08010ac4 <_read_r>:
 8010ac4:	b538      	push	{r3, r4, r5, lr}
 8010ac6:	4d07      	ldr	r5, [pc, #28]	; (8010ae4 <_read_r+0x20>)
 8010ac8:	4604      	mov	r4, r0
 8010aca:	4608      	mov	r0, r1
 8010acc:	4611      	mov	r1, r2
 8010ace:	2200      	movs	r2, #0
 8010ad0:	602a      	str	r2, [r5, #0]
 8010ad2:	461a      	mov	r2, r3
 8010ad4:	f7f1 ffae 	bl	8002a34 <_read>
 8010ad8:	1c43      	adds	r3, r0, #1
 8010ada:	d102      	bne.n	8010ae2 <_read_r+0x1e>
 8010adc:	682b      	ldr	r3, [r5, #0]
 8010ade:	b103      	cbz	r3, 8010ae2 <_read_r+0x1e>
 8010ae0:	6023      	str	r3, [r4, #0]
 8010ae2:	bd38      	pop	{r3, r4, r5, pc}
 8010ae4:	20002d04 	.word	0x20002d04

08010ae8 <nan>:
 8010ae8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010af0 <nan+0x8>
 8010aec:	4770      	bx	lr
 8010aee:	bf00      	nop
 8010af0:	00000000 	.word	0x00000000
 8010af4:	7ff80000 	.word	0x7ff80000

08010af8 <__ascii_wctomb>:
 8010af8:	b149      	cbz	r1, 8010b0e <__ascii_wctomb+0x16>
 8010afa:	2aff      	cmp	r2, #255	; 0xff
 8010afc:	bf85      	ittet	hi
 8010afe:	238a      	movhi	r3, #138	; 0x8a
 8010b00:	6003      	strhi	r3, [r0, #0]
 8010b02:	700a      	strbls	r2, [r1, #0]
 8010b04:	f04f 30ff 	movhi.w	r0, #4294967295
 8010b08:	bf98      	it	ls
 8010b0a:	2001      	movls	r0, #1
 8010b0c:	4770      	bx	lr
 8010b0e:	4608      	mov	r0, r1
 8010b10:	4770      	bx	lr
	...

08010b14 <__assert_func>:
 8010b14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010b16:	4614      	mov	r4, r2
 8010b18:	461a      	mov	r2, r3
 8010b1a:	4b09      	ldr	r3, [pc, #36]	; (8010b40 <__assert_func+0x2c>)
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	4605      	mov	r5, r0
 8010b20:	68d8      	ldr	r0, [r3, #12]
 8010b22:	b14c      	cbz	r4, 8010b38 <__assert_func+0x24>
 8010b24:	4b07      	ldr	r3, [pc, #28]	; (8010b44 <__assert_func+0x30>)
 8010b26:	9100      	str	r1, [sp, #0]
 8010b28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010b2c:	4906      	ldr	r1, [pc, #24]	; (8010b48 <__assert_func+0x34>)
 8010b2e:	462b      	mov	r3, r5
 8010b30:	f000 f80e 	bl	8010b50 <fiprintf>
 8010b34:	f000 f880 	bl	8010c38 <abort>
 8010b38:	4b04      	ldr	r3, [pc, #16]	; (8010b4c <__assert_func+0x38>)
 8010b3a:	461c      	mov	r4, r3
 8010b3c:	e7f3      	b.n	8010b26 <__assert_func+0x12>
 8010b3e:	bf00      	nop
 8010b40:	20000198 	.word	0x20000198
 8010b44:	080111d5 	.word	0x080111d5
 8010b48:	080111e2 	.word	0x080111e2
 8010b4c:	08011210 	.word	0x08011210

08010b50 <fiprintf>:
 8010b50:	b40e      	push	{r1, r2, r3}
 8010b52:	b503      	push	{r0, r1, lr}
 8010b54:	4601      	mov	r1, r0
 8010b56:	ab03      	add	r3, sp, #12
 8010b58:	4805      	ldr	r0, [pc, #20]	; (8010b70 <fiprintf+0x20>)
 8010b5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b5e:	6800      	ldr	r0, [r0, #0]
 8010b60:	9301      	str	r3, [sp, #4]
 8010b62:	f7ff fe7f 	bl	8010864 <_vfiprintf_r>
 8010b66:	b002      	add	sp, #8
 8010b68:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b6c:	b003      	add	sp, #12
 8010b6e:	4770      	bx	lr
 8010b70:	20000198 	.word	0x20000198

08010b74 <_fstat_r>:
 8010b74:	b538      	push	{r3, r4, r5, lr}
 8010b76:	4d07      	ldr	r5, [pc, #28]	; (8010b94 <_fstat_r+0x20>)
 8010b78:	2300      	movs	r3, #0
 8010b7a:	4604      	mov	r4, r0
 8010b7c:	4608      	mov	r0, r1
 8010b7e:	4611      	mov	r1, r2
 8010b80:	602b      	str	r3, [r5, #0]
 8010b82:	f7f1 ff9c 	bl	8002abe <_fstat>
 8010b86:	1c43      	adds	r3, r0, #1
 8010b88:	d102      	bne.n	8010b90 <_fstat_r+0x1c>
 8010b8a:	682b      	ldr	r3, [r5, #0]
 8010b8c:	b103      	cbz	r3, 8010b90 <_fstat_r+0x1c>
 8010b8e:	6023      	str	r3, [r4, #0]
 8010b90:	bd38      	pop	{r3, r4, r5, pc}
 8010b92:	bf00      	nop
 8010b94:	20002d04 	.word	0x20002d04

08010b98 <_isatty_r>:
 8010b98:	b538      	push	{r3, r4, r5, lr}
 8010b9a:	4d06      	ldr	r5, [pc, #24]	; (8010bb4 <_isatty_r+0x1c>)
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	4604      	mov	r4, r0
 8010ba0:	4608      	mov	r0, r1
 8010ba2:	602b      	str	r3, [r5, #0]
 8010ba4:	f7f1 ff9b 	bl	8002ade <_isatty>
 8010ba8:	1c43      	adds	r3, r0, #1
 8010baa:	d102      	bne.n	8010bb2 <_isatty_r+0x1a>
 8010bac:	682b      	ldr	r3, [r5, #0]
 8010bae:	b103      	cbz	r3, 8010bb2 <_isatty_r+0x1a>
 8010bb0:	6023      	str	r3, [r4, #0]
 8010bb2:	bd38      	pop	{r3, r4, r5, pc}
 8010bb4:	20002d04 	.word	0x20002d04

08010bb8 <memmove>:
 8010bb8:	4288      	cmp	r0, r1
 8010bba:	b510      	push	{r4, lr}
 8010bbc:	eb01 0402 	add.w	r4, r1, r2
 8010bc0:	d902      	bls.n	8010bc8 <memmove+0x10>
 8010bc2:	4284      	cmp	r4, r0
 8010bc4:	4623      	mov	r3, r4
 8010bc6:	d807      	bhi.n	8010bd8 <memmove+0x20>
 8010bc8:	1e43      	subs	r3, r0, #1
 8010bca:	42a1      	cmp	r1, r4
 8010bcc:	d008      	beq.n	8010be0 <memmove+0x28>
 8010bce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010bd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010bd6:	e7f8      	b.n	8010bca <memmove+0x12>
 8010bd8:	4402      	add	r2, r0
 8010bda:	4601      	mov	r1, r0
 8010bdc:	428a      	cmp	r2, r1
 8010bde:	d100      	bne.n	8010be2 <memmove+0x2a>
 8010be0:	bd10      	pop	{r4, pc}
 8010be2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010be6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010bea:	e7f7      	b.n	8010bdc <memmove+0x24>

08010bec <_realloc_r>:
 8010bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bee:	4607      	mov	r7, r0
 8010bf0:	4614      	mov	r4, r2
 8010bf2:	460e      	mov	r6, r1
 8010bf4:	b921      	cbnz	r1, 8010c00 <_realloc_r+0x14>
 8010bf6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010bfa:	4611      	mov	r1, r2
 8010bfc:	f7fb bcb4 	b.w	800c568 <_malloc_r>
 8010c00:	b922      	cbnz	r2, 8010c0c <_realloc_r+0x20>
 8010c02:	f7fb fc61 	bl	800c4c8 <_free_r>
 8010c06:	4625      	mov	r5, r4
 8010c08:	4628      	mov	r0, r5
 8010c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c0c:	f000 f81b 	bl	8010c46 <_malloc_usable_size_r>
 8010c10:	42a0      	cmp	r0, r4
 8010c12:	d20f      	bcs.n	8010c34 <_realloc_r+0x48>
 8010c14:	4621      	mov	r1, r4
 8010c16:	4638      	mov	r0, r7
 8010c18:	f7fb fca6 	bl	800c568 <_malloc_r>
 8010c1c:	4605      	mov	r5, r0
 8010c1e:	2800      	cmp	r0, #0
 8010c20:	d0f2      	beq.n	8010c08 <_realloc_r+0x1c>
 8010c22:	4631      	mov	r1, r6
 8010c24:	4622      	mov	r2, r4
 8010c26:	f7fb fc39 	bl	800c49c <memcpy>
 8010c2a:	4631      	mov	r1, r6
 8010c2c:	4638      	mov	r0, r7
 8010c2e:	f7fb fc4b 	bl	800c4c8 <_free_r>
 8010c32:	e7e9      	b.n	8010c08 <_realloc_r+0x1c>
 8010c34:	4635      	mov	r5, r6
 8010c36:	e7e7      	b.n	8010c08 <_realloc_r+0x1c>

08010c38 <abort>:
 8010c38:	b508      	push	{r3, lr}
 8010c3a:	2006      	movs	r0, #6
 8010c3c:	f000 f834 	bl	8010ca8 <raise>
 8010c40:	2001      	movs	r0, #1
 8010c42:	f7f1 feed 	bl	8002a20 <_exit>

08010c46 <_malloc_usable_size_r>:
 8010c46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c4a:	1f18      	subs	r0, r3, #4
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	bfbc      	itt	lt
 8010c50:	580b      	ldrlt	r3, [r1, r0]
 8010c52:	18c0      	addlt	r0, r0, r3
 8010c54:	4770      	bx	lr

08010c56 <_raise_r>:
 8010c56:	291f      	cmp	r1, #31
 8010c58:	b538      	push	{r3, r4, r5, lr}
 8010c5a:	4604      	mov	r4, r0
 8010c5c:	460d      	mov	r5, r1
 8010c5e:	d904      	bls.n	8010c6a <_raise_r+0x14>
 8010c60:	2316      	movs	r3, #22
 8010c62:	6003      	str	r3, [r0, #0]
 8010c64:	f04f 30ff 	mov.w	r0, #4294967295
 8010c68:	bd38      	pop	{r3, r4, r5, pc}
 8010c6a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010c6c:	b112      	cbz	r2, 8010c74 <_raise_r+0x1e>
 8010c6e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010c72:	b94b      	cbnz	r3, 8010c88 <_raise_r+0x32>
 8010c74:	4620      	mov	r0, r4
 8010c76:	f000 f831 	bl	8010cdc <_getpid_r>
 8010c7a:	462a      	mov	r2, r5
 8010c7c:	4601      	mov	r1, r0
 8010c7e:	4620      	mov	r0, r4
 8010c80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c84:	f000 b818 	b.w	8010cb8 <_kill_r>
 8010c88:	2b01      	cmp	r3, #1
 8010c8a:	d00a      	beq.n	8010ca2 <_raise_r+0x4c>
 8010c8c:	1c59      	adds	r1, r3, #1
 8010c8e:	d103      	bne.n	8010c98 <_raise_r+0x42>
 8010c90:	2316      	movs	r3, #22
 8010c92:	6003      	str	r3, [r0, #0]
 8010c94:	2001      	movs	r0, #1
 8010c96:	e7e7      	b.n	8010c68 <_raise_r+0x12>
 8010c98:	2400      	movs	r4, #0
 8010c9a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010c9e:	4628      	mov	r0, r5
 8010ca0:	4798      	blx	r3
 8010ca2:	2000      	movs	r0, #0
 8010ca4:	e7e0      	b.n	8010c68 <_raise_r+0x12>
	...

08010ca8 <raise>:
 8010ca8:	4b02      	ldr	r3, [pc, #8]	; (8010cb4 <raise+0xc>)
 8010caa:	4601      	mov	r1, r0
 8010cac:	6818      	ldr	r0, [r3, #0]
 8010cae:	f7ff bfd2 	b.w	8010c56 <_raise_r>
 8010cb2:	bf00      	nop
 8010cb4:	20000198 	.word	0x20000198

08010cb8 <_kill_r>:
 8010cb8:	b538      	push	{r3, r4, r5, lr}
 8010cba:	4d07      	ldr	r5, [pc, #28]	; (8010cd8 <_kill_r+0x20>)
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	4604      	mov	r4, r0
 8010cc0:	4608      	mov	r0, r1
 8010cc2:	4611      	mov	r1, r2
 8010cc4:	602b      	str	r3, [r5, #0]
 8010cc6:	f7f1 fe9b 	bl	8002a00 <_kill>
 8010cca:	1c43      	adds	r3, r0, #1
 8010ccc:	d102      	bne.n	8010cd4 <_kill_r+0x1c>
 8010cce:	682b      	ldr	r3, [r5, #0]
 8010cd0:	b103      	cbz	r3, 8010cd4 <_kill_r+0x1c>
 8010cd2:	6023      	str	r3, [r4, #0]
 8010cd4:	bd38      	pop	{r3, r4, r5, pc}
 8010cd6:	bf00      	nop
 8010cd8:	20002d04 	.word	0x20002d04

08010cdc <_getpid_r>:
 8010cdc:	f7f1 be88 	b.w	80029f0 <_getpid>

08010ce0 <_init>:
 8010ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ce2:	bf00      	nop
 8010ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ce6:	bc08      	pop	{r3}
 8010ce8:	469e      	mov	lr, r3
 8010cea:	4770      	bx	lr

08010cec <_fini>:
 8010cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cee:	bf00      	nop
 8010cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cf2:	bc08      	pop	{r3}
 8010cf4:	469e      	mov	lr, r3
 8010cf6:	4770      	bx	lr
